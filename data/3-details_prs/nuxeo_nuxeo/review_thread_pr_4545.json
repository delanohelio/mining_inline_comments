{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMjI3NDQx", "number": 4545, "reviewThreads": {"totalCount": 68, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzoxMDo1MlrOFFlHBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNTo1ODozM1rOFN_0VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzk1MjA3OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzoxMDo1MlrOIGKHjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNzoxMToxNVrOIJfmFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyODE0Mw==", "bodyText": "Could we use something more generic, like Idempotency-Key or X-Idempotency-Key maybe?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r543328143", "createdAt": "2020-12-15T13:10:52Z", "author": {"login": "BoboTiG"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "diffHunk": "@@ -70,13 +72,36 @@\n \n     protected static final int LOCK_TIMEOUT_S = 120;\n \n+    protected static final String IDEMPOTENCY_KEY = \"NuxeoIdempotencyKey\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d653e8b3c91494a9e193fe40f9bcfe075c19623c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzMzYyNQ==", "bodyText": "Of course, I was not sure if we wanted this header to be Nuxeo-specific so i just went with this value for now", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r543333625", "createdAt": "2020-12-15T13:18:55Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "diffHunk": "@@ -70,13 +72,36 @@\n \n     protected static final int LOCK_TIMEOUT_S = 120;\n \n+    protected static final String IDEMPOTENCY_KEY = \"NuxeoIdempotencyKey\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyODE0Mw=="}, "originalCommit": {"oid": "d653e8b3c91494a9e193fe40f9bcfe075c19623c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg4MzgyOQ==", "bodyText": "I moved the key in the code but we should still discuss naming, so keeping this conversation open", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r544883829", "createdAt": "2020-12-17T08:01:33Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "diffHunk": "@@ -70,13 +72,36 @@\n \n     protected static final int LOCK_TIMEOUT_S = 120;\n \n+    protected static final String IDEMPOTENCY_KEY = \"NuxeoIdempotencyKey\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyODE0Mw=="}, "originalCommit": {"oid": "d653e8b3c91494a9e193fe40f9bcfe075c19623c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgyNTc0OQ==", "bodyText": "Idempotency-Key is good it's what's in the draft RFC and used by lots of organizations already.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546825749", "createdAt": "2020-12-21T17:11:15Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "diffHunk": "@@ -70,13 +72,36 @@\n \n     protected static final int LOCK_TIMEOUT_S = 120;\n \n+    protected static final String IDEMPOTENCY_KEY = \"NuxeoIdempotencyKey\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyODE0Mw=="}, "originalCommit": {"oid": "d653e8b3c91494a9e193fe40f9bcfe075c19623c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMzk4NjIxOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzoxODoyOVrOIGKbyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwODowMjoyM1rOIHpGdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzMzMyMw==", "bodyText": "https://github.com/paypal/api-standards/blob/master/patterns.md#idempotency explains that should return HTTP 200 + the result.\nWhen it is a new request, it should return HTTP 201  + the result.\nI am not familiar with the code here, does that return such HTTP codes?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r543333323", "createdAt": "2020-12-15T13:18:29Z", "author": {"login": "BoboTiG"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "diffHunk": "@@ -295,4 +319,34 @@ protected void addCacheHeaders(HttpServletResponse response, RequestFilterConfig\n         }\n     }\n \n+    protected void handleRequest(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (request.getMethod().equals(\"GET\") || request.getMethod().equals(\"POST\")) {\n+            String key = request.getHeader(IDEMPOTENCY_KEY);\n+            if (key != null) {\n+                KeyValueService kvs = Framework.getService(KeyValueService.class);\n+                KeyValueStore store = kvs.getKeyValueStore(idempotencyStoreName);\n+                String value = store.getString(key);\n+                if (value == null) {\n+                    // new request\n+                    store.put(key, IDEMPOTENCY_INPROGRESS_MARKER, idempotencyTTLSeconds);\n+                    CopyingHttpServletResponse wrapper = new CopyingHttpServletResponse(response);\n+                    chain.doFilter(request, wrapper);\n+                    store.put(key, wrapper.getCopy(), idempotencyTTLSeconds);\n+                } else if (IDEMPOTENCY_INPROGRESS_MARKER.equals(value)) {\n+                    // request already in progress -> conflict (?) any content?\n+                    response.sendError(HttpServletResponse.SC_CONFLICT);\n+                } else {\n+                    // request already done: return stored result\n+                    // XXX get back status code?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d653e8b3c91494a9e193fe40f9bcfe075c19623c"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzNTYyNg==", "bodyText": "I went with conflict because that's what's documented here https://tools.ietf.org/html/draft-idempotency-header-01.\nAs for 201, this filter cannot know this is for creation so not sure 201 applies here, and the code is left unchanged compared to a request that would go through without idempotency.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r543335626", "createdAt": "2020-12-15T13:21:54Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "diffHunk": "@@ -295,4 +319,34 @@ protected void addCacheHeaders(HttpServletResponse response, RequestFilterConfig\n         }\n     }\n \n+    protected void handleRequest(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (request.getMethod().equals(\"GET\") || request.getMethod().equals(\"POST\")) {\n+            String key = request.getHeader(IDEMPOTENCY_KEY);\n+            if (key != null) {\n+                KeyValueService kvs = Framework.getService(KeyValueService.class);\n+                KeyValueStore store = kvs.getKeyValueStore(idempotencyStoreName);\n+                String value = store.getString(key);\n+                if (value == null) {\n+                    // new request\n+                    store.put(key, IDEMPOTENCY_INPROGRESS_MARKER, idempotencyTTLSeconds);\n+                    CopyingHttpServletResponse wrapper = new CopyingHttpServletResponse(response);\n+                    chain.doFilter(request, wrapper);\n+                    store.put(key, wrapper.getCopy(), idempotencyTTLSeconds);\n+                } else if (IDEMPOTENCY_INPROGRESS_MARKER.equals(value)) {\n+                    // request already in progress -> conflict (?) any content?\n+                    response.sendError(HttpServletResponse.SC_CONFLICT);\n+                } else {\n+                    // request already done: return stored result\n+                    // XXX get back status code?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzMzMyMw=="}, "originalCommit": {"oid": "d653e8b3c91494a9e193fe40f9bcfe075c19623c"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzNzU2Nw==", "bodyText": "Conflict seems the good error to throw.\n200 or 201, I would say this is fine as-is. As soon as this is not an error code :)", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r543337567", "createdAt": "2020-12-15T13:24:37Z", "author": {"login": "BoboTiG"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "diffHunk": "@@ -295,4 +319,34 @@ protected void addCacheHeaders(HttpServletResponse response, RequestFilterConfig\n         }\n     }\n \n+    protected void handleRequest(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (request.getMethod().equals(\"GET\") || request.getMethod().equals(\"POST\")) {\n+            String key = request.getHeader(IDEMPOTENCY_KEY);\n+            if (key != null) {\n+                KeyValueService kvs = Framework.getService(KeyValueService.class);\n+                KeyValueStore store = kvs.getKeyValueStore(idempotencyStoreName);\n+                String value = store.getString(key);\n+                if (value == null) {\n+                    // new request\n+                    store.put(key, IDEMPOTENCY_INPROGRESS_MARKER, idempotencyTTLSeconds);\n+                    CopyingHttpServletResponse wrapper = new CopyingHttpServletResponse(response);\n+                    chain.doFilter(request, wrapper);\n+                    store.put(key, wrapper.getCopy(), idempotencyTTLSeconds);\n+                } else if (IDEMPOTENCY_INPROGRESS_MARKER.equals(value)) {\n+                    // request already in progress -> conflict (?) any content?\n+                    response.sendError(HttpServletResponse.SC_CONFLICT);\n+                } else {\n+                    // request already done: return stored result\n+                    // XXX get back status code?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzMzMyMw=="}, "originalCommit": {"oid": "d653e8b3c91494a9e193fe40f9bcfe075c19623c"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0NTI3Ng==", "bodyText": "Well it will be an error code if there's indeed an error while processing the request.\nThat's also why we may want the code to be stored too when the request is processed, so that is can be returned again in case a request with the same key has already gone through.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r543345276", "createdAt": "2020-12-15T13:35:29Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "diffHunk": "@@ -295,4 +319,34 @@ protected void addCacheHeaders(HttpServletResponse response, RequestFilterConfig\n         }\n     }\n \n+    protected void handleRequest(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (request.getMethod().equals(\"GET\") || request.getMethod().equals(\"POST\")) {\n+            String key = request.getHeader(IDEMPOTENCY_KEY);\n+            if (key != null) {\n+                KeyValueService kvs = Framework.getService(KeyValueService.class);\n+                KeyValueStore store = kvs.getKeyValueStore(idempotencyStoreName);\n+                String value = store.getString(key);\n+                if (value == null) {\n+                    // new request\n+                    store.put(key, IDEMPOTENCY_INPROGRESS_MARKER, idempotencyTTLSeconds);\n+                    CopyingHttpServletResponse wrapper = new CopyingHttpServletResponse(response);\n+                    chain.doFilter(request, wrapper);\n+                    store.put(key, wrapper.getCopy(), idempotencyTTLSeconds);\n+                } else if (IDEMPOTENCY_INPROGRESS_MARKER.equals(value)) {\n+                    // request already in progress -> conflict (?) any content?\n+                    response.sendError(HttpServletResponse.SC_CONFLICT);\n+                } else {\n+                    // request already done: return stored result\n+                    // XXX get back status code?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzMzMyMw=="}, "originalCommit": {"oid": "d653e8b3c91494a9e193fe40f9bcfe075c19623c"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1MTgzOA==", "bodyText": "Hmm how would you make the difference between an HTTP 500 error and a \"valid\" error like a 404? The 500 error should not be cached as another call may unlock the real result. And a 404 now may not be revelant 2 minutes later. Same for 401 and 403 errors for example.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r543351838", "createdAt": "2020-12-15T13:44:35Z", "author": {"login": "BoboTiG"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "diffHunk": "@@ -295,4 +319,34 @@ protected void addCacheHeaders(HttpServletResponse response, RequestFilterConfig\n         }\n     }\n \n+    protected void handleRequest(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (request.getMethod().equals(\"GET\") || request.getMethod().equals(\"POST\")) {\n+            String key = request.getHeader(IDEMPOTENCY_KEY);\n+            if (key != null) {\n+                KeyValueService kvs = Framework.getService(KeyValueService.class);\n+                KeyValueStore store = kvs.getKeyValueStore(idempotencyStoreName);\n+                String value = store.getString(key);\n+                if (value == null) {\n+                    // new request\n+                    store.put(key, IDEMPOTENCY_INPROGRESS_MARKER, idempotencyTTLSeconds);\n+                    CopyingHttpServletResponse wrapper = new CopyingHttpServletResponse(response);\n+                    chain.doFilter(request, wrapper);\n+                    store.put(key, wrapper.getCopy(), idempotencyTTLSeconds);\n+                } else if (IDEMPOTENCY_INPROGRESS_MARKER.equals(value)) {\n+                    // request already in progress -> conflict (?) any content?\n+                    response.sendError(HttpServletResponse.SC_CONFLICT);\n+                } else {\n+                    // request already done: return stored result\n+                    // XXX get back status code?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzMzMyMw=="}, "originalCommit": {"oid": "d653e8b3c91494a9e193fe40f9bcfe075c19623c"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1MzA4MA==", "bodyText": "Ok so maybe the code should be checked before storing the result, and key removed from the store in this case?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r543353080", "createdAt": "2020-12-15T13:46:12Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "diffHunk": "@@ -295,4 +319,34 @@ protected void addCacheHeaders(HttpServletResponse response, RequestFilterConfig\n         }\n     }\n \n+    protected void handleRequest(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (request.getMethod().equals(\"GET\") || request.getMethod().equals(\"POST\")) {\n+            String key = request.getHeader(IDEMPOTENCY_KEY);\n+            if (key != null) {\n+                KeyValueService kvs = Framework.getService(KeyValueService.class);\n+                KeyValueStore store = kvs.getKeyValueStore(idempotencyStoreName);\n+                String value = store.getString(key);\n+                if (value == null) {\n+                    // new request\n+                    store.put(key, IDEMPOTENCY_INPROGRESS_MARKER, idempotencyTTLSeconds);\n+                    CopyingHttpServletResponse wrapper = new CopyingHttpServletResponse(response);\n+                    chain.doFilter(request, wrapper);\n+                    store.put(key, wrapper.getCopy(), idempotencyTTLSeconds);\n+                } else if (IDEMPOTENCY_INPROGRESS_MARKER.equals(value)) {\n+                    // request already in progress -> conflict (?) any content?\n+                    response.sendError(HttpServletResponse.SC_CONFLICT);\n+                } else {\n+                    // request already done: return stored result\n+                    // XXX get back status code?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzMzMyMw=="}, "originalCommit": {"oid": "d653e8b3c91494a9e193fe40f9bcfe075c19623c"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg4NDM0MQ==", "bodyText": "I changed the processing so that in case of error, store content is nullified for this key", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r544884341", "createdAt": "2020-12-17T08:02:23Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "diffHunk": "@@ -295,4 +319,34 @@ protected void addCacheHeaders(HttpServletResponse response, RequestFilterConfig\n         }\n     }\n \n+    protected void handleRequest(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (request.getMethod().equals(\"GET\") || request.getMethod().equals(\"POST\")) {\n+            String key = request.getHeader(IDEMPOTENCY_KEY);\n+            if (key != null) {\n+                KeyValueService kvs = Framework.getService(KeyValueService.class);\n+                KeyValueStore store = kvs.getKeyValueStore(idempotencyStoreName);\n+                String value = store.getString(key);\n+                if (value == null) {\n+                    // new request\n+                    store.put(key, IDEMPOTENCY_INPROGRESS_MARKER, idempotencyTTLSeconds);\n+                    CopyingHttpServletResponse wrapper = new CopyingHttpServletResponse(response);\n+                    chain.doFilter(request, wrapper);\n+                    store.put(key, wrapper.getCopy(), idempotencyTTLSeconds);\n+                } else if (IDEMPOTENCY_INPROGRESS_MARKER.equals(value)) {\n+                    // request already in progress -> conflict (?) any content?\n+                    response.sendError(HttpServletResponse.SC_CONFLICT);\n+                } else {\n+                    // request already done: return stored result\n+                    // XXX get back status code?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzMzMyMw=="}, "originalCommit": {"oid": "d653e8b3c91494a9e193fe40f9bcfe075c19623c"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDAwNDg0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzoyMjozNVrOIGKmwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNzoxMTo1NlrOIJfnRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzNjEzMA==", "bodyText": "5 minutes seems quite small, no?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r543336130", "createdAt": "2020-12-15T13:22:35Z", "author": {"login": "BoboTiG"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "diffHunk": "@@ -70,13 +72,36 @@\n \n     protected static final int LOCK_TIMEOUT_S = 120;\n \n+    protected static final String IDEMPOTENCY_KEY = \"NuxeoIdempotencyKey\";\n+\n+    protected static final String IDEMPOTENCY_STORE_NAME_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    protected static final String IDEMPOTENCY_TTL_SECONDS_PARAM = \"idempotency_ttl_seconds\";\n+\n+    protected static final String IDEMPOTENCY_INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    protected int idempotencyTTLSeconds = 300;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d653e8b3c91494a9e193fe40f9bcfe075c19623c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzNzEzNw==", "bodyText": "I put a (quite) low TTL for testing, we can set a better default value indeed.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r543337137", "createdAt": "2020-12-15T13:24:03Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "diffHunk": "@@ -70,13 +72,36 @@\n \n     protected static final int LOCK_TIMEOUT_S = 120;\n \n+    protected static final String IDEMPOTENCY_KEY = \"NuxeoIdempotencyKey\";\n+\n+    protected static final String IDEMPOTENCY_STORE_NAME_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    protected static final String IDEMPOTENCY_TTL_SECONDS_PARAM = \"idempotency_ttl_seconds\";\n+\n+    protected static final String IDEMPOTENCY_INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    protected int idempotencyTTLSeconds = 300;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzNjEzMA=="}, "originalCommit": {"oid": "d653e8b3c91494a9e193fe40f9bcfe075c19623c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg4NDY0Nw==", "bodyText": "I moved these values but we should still discuss the default value for TTL", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r544884647", "createdAt": "2020-12-17T08:03:01Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "diffHunk": "@@ -70,13 +72,36 @@\n \n     protected static final int LOCK_TIMEOUT_S = 120;\n \n+    protected static final String IDEMPOTENCY_KEY = \"NuxeoIdempotencyKey\";\n+\n+    protected static final String IDEMPOTENCY_STORE_NAME_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    protected static final String IDEMPOTENCY_TTL_SECONDS_PARAM = \"idempotency_ttl_seconds\";\n+\n+    protected static final String IDEMPOTENCY_INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    protected int idempotencyTTLSeconds = 300;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzNjEzMA=="}, "originalCommit": {"oid": "d653e8b3c91494a9e193fe40f9bcfe075c19623c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgyNjA1Mw==", "bodyText": "The base default should be at least one day I think. Some organizations use 30 days as TTL!", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546826053", "createdAt": "2020-12-21T17:11:56Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "diffHunk": "@@ -70,13 +72,36 @@\n \n     protected static final int LOCK_TIMEOUT_S = 120;\n \n+    protected static final String IDEMPOTENCY_KEY = \"NuxeoIdempotencyKey\";\n+\n+    protected static final String IDEMPOTENCY_STORE_NAME_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    protected static final String IDEMPOTENCY_TTL_SECONDS_PARAM = \"idempotency_ttl_seconds\";\n+\n+    protected static final String IDEMPOTENCY_INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    protected int idempotencyTTLSeconds = 300;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzNjEzMA=="}, "originalCommit": {"oid": "d653e8b3c91494a9e193fe40f9bcfe075c19623c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDM4ODY0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwODowMzozOFrOIHpIxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNzoxMDozMFrOIJfktw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg4NDkzNQ==", "bodyText": "Only handling POST requests --> to be discussed, maybe", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r544884935", "createdAt": "2020-12-17T08:03:38Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf967f5f08327996543e3dd55c662b66b9f7ef0f"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3ODcxNw==", "bodyText": "We should activate the filter for all methods except GET/HEAD/OPTIONS/TRACE, which are the \"safe methods\" per RFC 7231 \u00a74.2.1, and PUT/DELETE which are the \"idempotent methods\" per RFC 7231 \u00a74.2.2. So in practice it's mostly POST yes, but maybe we use the RFC list instead to be clean.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546778717", "createdAt": "2020-12-21T15:45:13Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg4NDkzNQ=="}, "originalCommit": {"oid": "cf967f5f08327996543e3dd55c662b66b9f7ef0f"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgxNjI0MA==", "bodyText": "I'm not sure if you mean is should filter out all of these instead of accepting just POST?\nAlso javax.ws.rs.HttpMethod declares these as constants, except TRACE, so not sure the full list is already available somewhere else?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546816240", "createdAt": "2020-12-21T16:53:16Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg4NDkzNQ=="}, "originalCommit": {"oid": "cf967f5f08327996543e3dd55c662b66b9f7ef0f"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgyNTM5OQ==", "bodyText": "Yes I mean filter out all these.\nSee what NuxeoCorsCsrfFilter does for the constants.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546825399", "createdAt": "2020-12-21T17:10:30Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg4NDkzNQ=="}, "originalCommit": {"oid": "cf967f5f08327996543e3dd55c662b66b9f7ef0f"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDM5MDM4OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwODowNDowOVrOIHpJyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNzoxMjozNVrOIJfobg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg4NTE5NQ==", "bodyText": "Maybe should retrieve configuration from the ConfigurationService instead?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r544885195", "createdAt": "2020-12-17T08:04:09Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf967f5f08327996543e3dd55c662b66b9f7ef0f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgyNjM1MA==", "bodyText": "Yes it'd be easier to change through contributions rather than changing a filter config.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546826350", "createdAt": "2020-12-21T17:12:35Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg4NTE5NQ=="}, "originalCommit": {"oid": "cf967f5f08327996543e3dd55c662b66b9f7ef0f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDM5NzM0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwODowNjowN1rOIHpN0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNzoxMzoyNFrOIJfqHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg4NjIyNA==", "bodyText": "Using CONFLICT status + mentioning key in the response body -> to be discussed, maybe?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r544886224", "createdAt": "2020-12-17T08:06:07Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = Framework.getService(KeyValueService.class).getKeyValueStore(this.store);\n+        String storedContent = store.getString(IdempotentRequestHandler.CONTENT_PREFIX + key);\n+        if (storedContent == null) {\n+            // new request\n+            boolean cleanup = false;\n+            store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, IdempotentRequestHandler.INPROGRESS_MARKER, ttl);\n+            try {\n+                CopyingResponseWrapper wrapper = new CopyingResponseWrapper(response);\n+                chain.doFilter(request, wrapper);\n+                store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, wrapper.getCaptureAsString(), ttl);\n+                store.put(IdempotentRequestHandler.STATUS_PREFIX + key, String.valueOf(wrapper.getStatus()), ttl);\n+            } catch (IOException | ServletException e) {\n+                cleanup = true;\n+                throw e;\n+            } finally {\n+                if (cleanup || response.getStatus() >= 400) {\n+                    // error request: cleanup store\n+                    store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, (String) null, ttl);\n+                    store.put(IdempotentRequestHandler.STATUS_PREFIX + key, (String) null, ttl);\n+                }\n+            }\n+        } else if (IdempotentRequestHandler.INPROGRESS_MARKER.equals(storedContent)) {\n+            // request already in progress -> conflict\n+            response.sendError(HttpServletResponse.SC_CONFLICT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf967f5f08327996543e3dd55c662b66b9f7ef0f"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgyNjc4MQ==", "bodyText": "I don't think it'll help clients, they won't read the body in case of 409. Just debug logs is enough.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546826781", "createdAt": "2020-12-21T17:13:24Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = Framework.getService(KeyValueService.class).getKeyValueStore(this.store);\n+        String storedContent = store.getString(IdempotentRequestHandler.CONTENT_PREFIX + key);\n+        if (storedContent == null) {\n+            // new request\n+            boolean cleanup = false;\n+            store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, IdempotentRequestHandler.INPROGRESS_MARKER, ttl);\n+            try {\n+                CopyingResponseWrapper wrapper = new CopyingResponseWrapper(response);\n+                chain.doFilter(request, wrapper);\n+                store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, wrapper.getCaptureAsString(), ttl);\n+                store.put(IdempotentRequestHandler.STATUS_PREFIX + key, String.valueOf(wrapper.getStatus()), ttl);\n+            } catch (IOException | ServletException e) {\n+                cleanup = true;\n+                throw e;\n+            } finally {\n+                if (cleanup || response.getStatus() >= 400) {\n+                    // error request: cleanup store\n+                    store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, (String) null, ttl);\n+                    store.put(IdempotentRequestHandler.STATUS_PREFIX + key, (String) null, ttl);\n+                }\n+            }\n+        } else if (IdempotentRequestHandler.INPROGRESS_MARKER.equals(storedContent)) {\n+            // request already in progress -> conflict\n+            response.sendError(HttpServletResponse.SC_CONFLICT,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg4NjIyNA=="}, "originalCommit": {"oid": "cf967f5f08327996543e3dd55c662b66b9f7ef0f"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzY0MDEzOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNTo0Njo1NVrOIJcymQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDo1MjoyOVrOIJ28cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3OTgwMQ==", "bodyText": "It's worth adding log.debug calls in all the places where we have some logic to allow debugging, see what I did in NuxeoCorsCsrfFilter", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546779801", "createdAt": "2020-12-21T15:46:55Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {\n+            chain.doFilter(request, response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwODMwNQ==", "bodyText": "I added a number of debug logs, let me know if they should be changed.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r547208305", "createdAt": "2020-12-22T10:52:29Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {\n+            chain.doFilter(request, response);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc3OTgwMQ=="}, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzY0ODE2OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNTo0ODo0N1rOIJc29Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNTo0ODo0N1rOIJc29Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4MDkxNw==", "bodyText": "The store name should default to a more explicit idempotentrequest for instance", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546780917", "createdAt": "2020-12-21T15:48:47Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzY1MzY2OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNTo1MDowNlrOIJc6Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNTo1MDowNlrOIJc6Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4MTczNQ==", "bodyText": "You should protect against NPEs here, for the service and the store. Filters may be called very early/late and independently of Nuxeo startup itself.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546781735", "createdAt": "2020-12-21T15:50:06Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = Framework.getService(KeyValueService.class).getKeyValueStore(this.store);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzY1NjM2OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNTo1MDo1NlrOIJc7yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNTo1MDo1NlrOIJc7yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4MjE1Mg==", "bodyText": "For the content stored/returned we should manipulate only bytes, not a string representation.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546782152", "createdAt": "2020-12-21T15:50:56Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = Framework.getService(KeyValueService.class).getKeyValueStore(this.store);\n+        String storedContent = store.getString(IdempotentRequestHandler.CONTENT_PREFIX + key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzY3MjM0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNTo1NDo1NVrOIJdE5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMDo1MDoyM1rOIJ24yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4NDQ4Nw==", "bodyText": "400 -> HttpServletResponse .SC_BAD_REQUEST", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546784487", "createdAt": "2020-12-21T15:54:55Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = Framework.getService(KeyValueService.class).getKeyValueStore(this.store);\n+        String storedContent = store.getString(IdempotentRequestHandler.CONTENT_PREFIX + key);\n+        if (storedContent == null) {\n+            // new request\n+            boolean cleanup = false;\n+            store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, IdempotentRequestHandler.INPROGRESS_MARKER, ttl);\n+            try {\n+                CopyingResponseWrapper wrapper = new CopyingResponseWrapper(response);\n+                chain.doFilter(request, wrapper);\n+                store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, wrapper.getCaptureAsString(), ttl);\n+                store.put(IdempotentRequestHandler.STATUS_PREFIX + key, String.valueOf(wrapper.getStatus()), ttl);\n+            } catch (IOException | ServletException e) {\n+                cleanup = true;\n+                throw e;\n+            } finally {\n+                if (cleanup || response.getStatus() >= 400) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzE4MDYwMA==", "bodyText": "? this is still an error response that KV should not store, right?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r547180600", "createdAt": "2020-12-22T09:56:45Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = Framework.getService(KeyValueService.class).getKeyValueStore(this.store);\n+        String storedContent = store.getString(IdempotentRequestHandler.CONTENT_PREFIX + key);\n+        if (storedContent == null) {\n+            // new request\n+            boolean cleanup = false;\n+            store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, IdempotentRequestHandler.INPROGRESS_MARKER, ttl);\n+            try {\n+                CopyingResponseWrapper wrapper = new CopyingResponseWrapper(response);\n+                chain.doFilter(request, wrapper);\n+                store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, wrapper.getCaptureAsString(), ttl);\n+                store.put(IdempotentRequestHandler.STATUS_PREFIX + key, String.valueOf(wrapper.getStatus()), ttl);\n+            } catch (IOException | ServletException e) {\n+                cleanup = true;\n+                throw e;\n+            } finally {\n+                if (cleanup || response.getStatus() >= 400) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4NDQ4Nw=="}, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNjU5Nw==", "bodyText": "Yes I just mean use the constant instead of a number.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r547206597", "createdAt": "2020-12-22T10:48:50Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = Framework.getService(KeyValueService.class).getKeyValueStore(this.store);\n+        String storedContent = store.getString(IdempotentRequestHandler.CONTENT_PREFIX + key);\n+        if (storedContent == null) {\n+            // new request\n+            boolean cleanup = false;\n+            store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, IdempotentRequestHandler.INPROGRESS_MARKER, ttl);\n+            try {\n+                CopyingResponseWrapper wrapper = new CopyingResponseWrapper(response);\n+                chain.doFilter(request, wrapper);\n+                store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, wrapper.getCaptureAsString(), ttl);\n+                store.put(IdempotentRequestHandler.STATUS_PREFIX + key, String.valueOf(wrapper.getStatus()), ttl);\n+            } catch (IOException | ServletException e) {\n+                cleanup = true;\n+                throw e;\n+            } finally {\n+                if (cleanup || response.getStatus() >= 400) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4NDQ4Nw=="}, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIwNzM2OA==", "bodyText": "ah ok \ud83d\udc4d", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r547207368", "createdAt": "2020-12-22T10:50:23Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = Framework.getService(KeyValueService.class).getKeyValueStore(this.store);\n+        String storedContent = store.getString(IdempotentRequestHandler.CONTENT_PREFIX + key);\n+        if (storedContent == null) {\n+            // new request\n+            boolean cleanup = false;\n+            store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, IdempotentRequestHandler.INPROGRESS_MARKER, ttl);\n+            try {\n+                CopyingResponseWrapper wrapper = new CopyingResponseWrapper(response);\n+                chain.doFilter(request, wrapper);\n+                store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, wrapper.getCaptureAsString(), ttl);\n+                store.put(IdempotentRequestHandler.STATUS_PREFIX + key, String.valueOf(wrapper.getStatus()), ttl);\n+            } catch (IOException | ServletException e) {\n+                cleanup = true;\n+                throw e;\n+            } finally {\n+                if (cleanup || response.getStatus() >= 400) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4NDQ4Nw=="}, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzY5OTIwOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNjowMTo1MlrOIJdUfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNjowMTo1MlrOIJdUfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4ODQ3OA==", "bodyText": "One of them, probably the content, could have no prefix at all. And for the other I would have used a suffix, to make listings/dumps easier to read.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546788478", "createdAt": "2020-12-21T16:01:52Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = Framework.getService(KeyValueService.class).getKeyValueStore(this.store);\n+        String storedContent = store.getString(IdempotentRequestHandler.CONTENT_PREFIX + key);\n+        if (storedContent == null) {\n+            // new request\n+            boolean cleanup = false;\n+            store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, IdempotentRequestHandler.INPROGRESS_MARKER, ttl);\n+            try {\n+                CopyingResponseWrapper wrapper = new CopyingResponseWrapper(response);\n+                chain.doFilter(request, wrapper);\n+                store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, wrapper.getCaptureAsString(), ttl);\n+                store.put(IdempotentRequestHandler.STATUS_PREFIX + key, String.valueOf(wrapper.getStatus()), ttl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzcwNzg2OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNjowNDoxMFrOIJdZnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNjowNDoxMFrOIJdZnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc4OTc4OA==", "bodyText": "Don't use a TTL when putting null", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546789788", "createdAt": "2020-12-21T16:04:10Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = Framework.getService(KeyValueService.class).getKeyValueStore(this.store);\n+        String storedContent = store.getString(IdempotentRequestHandler.CONTENT_PREFIX + key);\n+        if (storedContent == null) {\n+            // new request\n+            boolean cleanup = false;\n+            store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, IdempotentRequestHandler.INPROGRESS_MARKER, ttl);\n+            try {\n+                CopyingResponseWrapper wrapper = new CopyingResponseWrapper(response);\n+                chain.doFilter(request, wrapper);\n+                store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, wrapper.getCaptureAsString(), ttl);\n+                store.put(IdempotentRequestHandler.STATUS_PREFIX + key, String.valueOf(wrapper.getStatus()), ttl);\n+            } catch (IOException | ServletException e) {\n+                cleanup = true;\n+                throw e;\n+            } finally {\n+                if (cleanup || response.getStatus() >= 400) {\n+                    // error request: cleanup store\n+                    store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, (String) null, ttl);\n+                    store.put(IdempotentRequestHandler.STATUS_PREFIX + key, (String) null, ttl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzcxMjYzOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNjowNToyNVrOIJdcZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzoyNzo0M1rOIKrhtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5MDUwMA==", "bodyText": "For in-progress it's better to use a special status value (negative?) instead of the content. This way the content is pure content and not mixed with other logic.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546790500", "createdAt": "2020-12-21T16:05:25Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = Framework.getService(KeyValueService.class).getKeyValueStore(this.store);\n+        String storedContent = store.getString(IdempotentRequestHandler.CONTENT_PREFIX + key);\n+        if (storedContent == null) {\n+            // new request\n+            boolean cleanup = false;\n+            store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, IdempotentRequestHandler.INPROGRESS_MARKER, ttl);\n+            try {\n+                CopyingResponseWrapper wrapper = new CopyingResponseWrapper(response);\n+                chain.doFilter(request, wrapper);\n+                store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, wrapper.getCaptureAsString(), ttl);\n+                store.put(IdempotentRequestHandler.STATUS_PREFIX + key, String.valueOf(wrapper.getStatus()), ttl);\n+            } catch (IOException | ServletException e) {\n+                cleanup = true;\n+                throw e;\n+            } finally {\n+                if (cleanup || response.getStatus() >= 400) {\n+                    // error request: cleanup store\n+                    store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, (String) null, ttl);\n+                    store.put(IdempotentRequestHandler.STATUS_PREFIX + key, (String) null, ttl);\n+                }\n+            }\n+        } else if (IdempotentRequestHandler.INPROGRESS_MARKER.equals(storedContent)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA2OTgxMw==", "bodyText": "I kept this key as is in place of json serialization of response headers + status, let me know if you still think I should change this marker (sorry, renamed and moved all classes...)", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548069813", "createdAt": "2020-12-23T17:27:43Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = Framework.getService(KeyValueService.class).getKeyValueStore(this.store);\n+        String storedContent = store.getString(IdempotentRequestHandler.CONTENT_PREFIX + key);\n+        if (storedContent == null) {\n+            // new request\n+            boolean cleanup = false;\n+            store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, IdempotentRequestHandler.INPROGRESS_MARKER, ttl);\n+            try {\n+                CopyingResponseWrapper wrapper = new CopyingResponseWrapper(response);\n+                chain.doFilter(request, wrapper);\n+                store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, wrapper.getCaptureAsString(), ttl);\n+                store.put(IdempotentRequestHandler.STATUS_PREFIX + key, String.valueOf(wrapper.getStatus()), ttl);\n+            } catch (IOException | ServletException e) {\n+                cleanup = true;\n+                throw e;\n+            } finally {\n+                if (cleanup || response.getStatus() >= 400) {\n+                    // error request: cleanup store\n+                    store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, (String) null, ttl);\n+                    store.put(IdempotentRequestHandler.STATUS_PREFIX + key, (String) null, ttl);\n+                }\n+            }\n+        } else if (IdempotentRequestHandler.INPROGRESS_MARKER.equals(storedContent)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5MDUwMA=="}, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzcyMDkyOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNjowNzo0MVrOIJdhag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNjowNzo0MVrOIJdhag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5MTc4Ng==", "bodyText": "As mentioned you should use bytes, not string. So use getOutputStream here instead of getWriter.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546791786", "createdAt": "2020-12-21T16:07:41Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = Framework.getService(KeyValueService.class).getKeyValueStore(this.store);\n+        String storedContent = store.getString(IdempotentRequestHandler.CONTENT_PREFIX + key);\n+        if (storedContent == null) {\n+            // new request\n+            boolean cleanup = false;\n+            store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, IdempotentRequestHandler.INPROGRESS_MARKER, ttl);\n+            try {\n+                CopyingResponseWrapper wrapper = new CopyingResponseWrapper(response);\n+                chain.doFilter(request, wrapper);\n+                store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, wrapper.getCaptureAsString(), ttl);\n+                store.put(IdempotentRequestHandler.STATUS_PREFIX + key, String.valueOf(wrapper.getStatus()), ttl);\n+            } catch (IOException | ServletException e) {\n+                cleanup = true;\n+                throw e;\n+            } finally {\n+                if (cleanup || response.getStatus() >= 400) {\n+                    // error request: cleanup store\n+                    store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, (String) null, ttl);\n+                    store.put(IdempotentRequestHandler.STATUS_PREFIX + key, (String) null, ttl);\n+                }\n+            }\n+        } else if (IdempotentRequestHandler.INPROGRESS_MARKER.equals(storedContent)) {\n+            // request already in progress -> conflict\n+            response.sendError(HttpServletResponse.SC_CONFLICT,\n+                    String.format(\"Idempotent request already in progress for key '%s'\", key));\n+        } else {\n+            // request already done: return stored result\n+            response.getWriter().write(storedContent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzczODE2OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNjoxMjo0OFrOIJdsGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzoyODoyMVrOIKrj1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5NDUyMg==", "bodyText": "In addition to the status we must also save/restore all headers (which will include cookies and values like content-type and content-length).\nSo the whole status key in the k/v store could contain some JSON with this info (+ the http status)", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546794522", "createdAt": "2020-12-21T16:12:48Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = Framework.getService(KeyValueService.class).getKeyValueStore(this.store);\n+        String storedContent = store.getString(IdempotentRequestHandler.CONTENT_PREFIX + key);\n+        if (storedContent == null) {\n+            // new request\n+            boolean cleanup = false;\n+            store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, IdempotentRequestHandler.INPROGRESS_MARKER, ttl);\n+            try {\n+                CopyingResponseWrapper wrapper = new CopyingResponseWrapper(response);\n+                chain.doFilter(request, wrapper);\n+                store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, wrapper.getCaptureAsString(), ttl);\n+                store.put(IdempotentRequestHandler.STATUS_PREFIX + key, String.valueOf(wrapper.getStatus()), ttl);\n+            } catch (IOException | ServletException e) {\n+                cleanup = true;\n+                throw e;\n+            } finally {\n+                if (cleanup || response.getStatus() >= 400) {\n+                    // error request: cleanup store\n+                    store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, (String) null, ttl);\n+                    store.put(IdempotentRequestHandler.STATUS_PREFIX + key, (String) null, ttl);\n+                }\n+            }\n+        } else if (IdempotentRequestHandler.INPROGRESS_MARKER.equals(storedContent)) {\n+            // request already in progress -> conflict\n+            response.sendError(HttpServletResponse.SC_CONFLICT,\n+                    String.format(\"Idempotent request already in progress for key '%s'\", key));\n+        } else {\n+            // request already done: return stored result\n+            response.getWriter().write(storedContent);\n+            response.setStatus(Integer.valueOf(store.getString(IdempotentRequestHandler.STATUS_PREFIX + key)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3MDM1OQ==", "bodyText": "Added a serialization of response status + headers as the stored json in the additional \"info\".", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548070359", "createdAt": "2020-12-23T17:28:21Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"NuxeoIdempotencyKey\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"idempotency_keyvaluestore\";\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"idempotency_ttl_seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_PREFIX = \"s_\";\n+\n+    /** @since 11.5 */\n+    public static final String CONTENT_PREFIX = \"c_\";\n+\n+    protected final String store;\n+\n+    protected final int ttl;\n+\n+    public IdempotentRequestHandler(FilterConfig filterConfig) {\n+        // default values\n+        int ttl = 330;\n+        String store = \"requestcontroller\";\n+        // retrieve potential configuration from filter\n+        String ttlConfig = filterConfig.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY);\n+        if (ttlConfig != null) {\n+            try {\n+                ttl = Integer.valueOf(ttlConfig);\n+            } catch (NumberFormatException e) {\n+                log.error(e, e);\n+            }\n+        }\n+        String storeConfig = filterConfig.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY);\n+        if (storeConfig != null) {\n+            store = storeConfig;\n+        }\n+        this.store = store;\n+        this.ttl = ttl;\n+    }\n+\n+    public IdempotentRequestHandler(String storename, int ttl) {\n+        this.store = storename;\n+        this.ttl = ttl;\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!\"POST\".equals(request.getMethod())) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = Framework.getService(KeyValueService.class).getKeyValueStore(this.store);\n+        String storedContent = store.getString(IdempotentRequestHandler.CONTENT_PREFIX + key);\n+        if (storedContent == null) {\n+            // new request\n+            boolean cleanup = false;\n+            store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, IdempotentRequestHandler.INPROGRESS_MARKER, ttl);\n+            try {\n+                CopyingResponseWrapper wrapper = new CopyingResponseWrapper(response);\n+                chain.doFilter(request, wrapper);\n+                store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, wrapper.getCaptureAsString(), ttl);\n+                store.put(IdempotentRequestHandler.STATUS_PREFIX + key, String.valueOf(wrapper.getStatus()), ttl);\n+            } catch (IOException | ServletException e) {\n+                cleanup = true;\n+                throw e;\n+            } finally {\n+                if (cleanup || response.getStatus() >= 400) {\n+                    // error request: cleanup store\n+                    store.put(IdempotentRequestHandler.CONTENT_PREFIX + key, (String) null, ttl);\n+                    store.put(IdempotentRequestHandler.STATUS_PREFIX + key, (String) null, ttl);\n+                }\n+            }\n+        } else if (IdempotentRequestHandler.INPROGRESS_MARKER.equals(storedContent)) {\n+            // request already in progress -> conflict\n+            response.sendError(HttpServletResponse.SC_CONFLICT,\n+                    String.format(\"Idempotent request already in progress for key '%s'\", key));\n+        } else {\n+            // request already done: return stored result\n+            response.getWriter().write(storedContent);\n+            response.setStatus(Integer.valueOf(store.getString(IdempotentRequestHandler.STATUS_PREFIX + key)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5NDUyMg=="}, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzc0NTk5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/test/java/org/nuxeo/ecm/platform/web/requestcontroller/filter/TestIdempotentRequestFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNjoxNDo1NlrOIJdw2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzozMDowMFrOIKrpNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5NTczNw==", "bodyText": "In addition to this base test we should test for content that is not representable as a string, and headers (content type, custom headers, cookies).", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546795737", "createdAt": "2020-12-21T16:14:56Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/test/java/org/nuxeo/ecm/platform/web/requestcontroller/filter/TestIdempotentRequestFilter.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.requestcontroller.filter;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+\n+import javax.inject.Inject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.nuxeo.ecm.platform.web.common.requestcontroller.filter.IdempotentRequestHandler;\n+import org.nuxeo.ecm.platform.web.common.requestcontroller.filter.NuxeoRequestControllerFilter;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStoreProvider;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * Checks idempotent requests management.\n+ *\n+ * @since 11.5\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.ecm.platform.web.common:OSGI-INF/web-request-controller-framework.xml\")\n+public class TestIdempotentRequestFilter {\n+\n+    protected static final int TTL = 30;\n+\n+    protected static final String KV_STORE_NAME = \"requestcontroller\";\n+\n+    protected static final String KEY = \"mykey\";\n+\n+    protected static final String CONTENT = \"test content\";\n+\n+    protected NuxeoRequestControllerFilter filter;\n+\n+    protected FilterChain chain;\n+\n+    protected HttpServletRequest request;\n+\n+    protected MockResponse mockResponse;\n+\n+    @Inject\n+    protected KeyValueService kvs;\n+\n+    protected KeyValueStoreProvider store;\n+\n+    protected static class MockResponse {\n+\n+        protected HttpServletResponse response;\n+\n+        protected int status;\n+\n+        protected OutputStream output;\n+\n+        public MockResponse() throws IOException {\n+            super();\n+            response = mock(HttpServletResponse.class);\n+            output = new ByteArrayOutputStream();\n+            ServletOutputStream servletOutput = mock(ServletOutputStream.class);\n+            doAnswer(invocation -> {\n+                output.write((byte[]) invocation.getArguments()[0]);\n+                return null;\n+            }).when(servletOutput).write(any(byte[].class));\n+            doAnswer(invocation -> {\n+                output.write((Integer) invocation.getArguments()[0]);\n+                return null;\n+            }).when(servletOutput).write(anyInt());\n+            when(response.getOutputStream()).thenReturn(servletOutput);\n+            PrintWriter writer = mock(PrintWriter.class);\n+            doAnswer(invocation -> {\n+                output.write(((String) invocation.getArguments()[0]).getBytes());\n+                return null;\n+            }).when(writer).write(anyString());\n+            doAnswer(invocation -> {\n+                return writer;\n+            }).when(response).getWriter();\n+            when(response.getCharacterEncoding()).thenReturn(UTF_8.name());\n+            doAnswer(invocation -> {\n+                return status;\n+            }).when(response).getStatus();\n+            doAnswer(invocation -> {\n+                status = (Integer) invocation.getArguments()[0];\n+                return null;\n+            }).when(response).setStatus(anyInt());\n+            doAnswer(invocation -> {\n+                status = (Integer) invocation.getArguments()[0];\n+                output.write(((String) invocation.getArguments()[1]).getBytes());\n+                return null;\n+            }).when(response).sendError(anyInt(), anyString());\n+        }\n+\n+        public int getStatus() {\n+            return status;\n+        }\n+\n+        public HttpServletResponse getResponse() {\n+            return response;\n+        }\n+\n+        public OutputStream getOutput() {\n+            return output;\n+        }\n+\n+    }\n+\n+    @Before\n+    public void setUp() throws IOException {\n+        filter = new NuxeoRequestControllerFilter();\n+        FilterConfig config = mock(FilterConfig.class);\n+        when(config.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY)).thenReturn(String.valueOf(TTL));\n+        when(config.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY)).thenReturn(KV_STORE_NAME);\n+        filter.init(config);\n+        chain = mock(FilterChain.class);\n+        request = mock(HttpServletRequest.class);\n+        mockResponse = new MockResponse();\n+        // handle store\n+        store = (KeyValueStoreProvider) kvs.getKeyValueStore(KV_STORE_NAME);\n+        store.clear();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        if (filter != null) {\n+            filter.destroy();\n+        }\n+        if (store != null) {\n+            store.clear();\n+        }\n+    }\n+\n+    protected void checkResponse(MockResponse mockResponse, Integer status, String content) {\n+        assertEquals(status, (Integer) mockResponse.getStatus());\n+        assertEquals(content, mockResponse.getOutput().toString());\n+    }\n+\n+    protected void checkStore(Integer status, String content) {\n+        assertEquals(content, store.getString(IdempotentRequestHandler.CONTENT_PREFIX + KEY));\n+        String skey = IdempotentRequestHandler.STATUS_PREFIX + KEY;\n+        if (status == null) {\n+            assertNull(store.getString(skey));\n+        } else {\n+            assertEquals(String.valueOf(status), store.getString(skey));\n+        }\n+    }\n+\n+    @Test\n+    public void testGetRequestWithoutKey() throws Exception {\n+        when(request.getMethod()).thenReturn(\"GET\");\n+        verify(chain, times(0)).doFilter(any(), any());\n+        filter.doFilter(request, mockResponse.getResponse(), chain);\n+        verify(chain, times(1)).doFilter(any(), any());\n+        checkStore(null, null);\n+    }\n+\n+    @Test\n+    public void testPostRequestWithoutKey() throws Exception {\n+        when(request.getMethod()).thenReturn(\"POST\");\n+        verify(chain, times(0)).doFilter(any(), any());\n+        filter.doFilter(request, mockResponse.getResponse(), chain);\n+        verify(chain, times(1)).doFilter(any(), any());\n+        checkStore(null, null);\n+    }\n+\n+    @Test\n+    public void testGetRequest() throws Exception {\n+        when(request.getMethod()).thenReturn(\"GET\");\n+        when(request.getHeader(IdempotentRequestHandler.HEADER_KEY)).thenReturn(KEY);\n+        verify(chain, times(0)).doFilter(any(), any());\n+        filter.doFilter(request, mockResponse.getResponse(), chain);\n+        verify(chain, times(1)).doFilter(any(), any());\n+        checkStore(null, null);\n+    }\n+\n+    protected void setResult(HttpServletResponse response, int status, String content) throws IOException {\n+        response.setStatus(status);\n+        response.getWriter().write(content);\n+    }\n+\n+    @Test\n+    public void testPostRequest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3MTczMw==", "bodyText": "I added quick mock headers, as for the content, not sure if this would belong in this test as everything here is actually mocked... to be discussed again, keeping this conversation open for this.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548071733", "createdAt": "2020-12-23T17:30:00Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/test/java/org/nuxeo/ecm/platform/web/requestcontroller/filter/TestIdempotentRequestFilter.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.requestcontroller.filter;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+\n+import javax.inject.Inject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.nuxeo.ecm.platform.web.common.requestcontroller.filter.IdempotentRequestHandler;\n+import org.nuxeo.ecm.platform.web.common.requestcontroller.filter.NuxeoRequestControllerFilter;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStoreProvider;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * Checks idempotent requests management.\n+ *\n+ * @since 11.5\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.ecm.platform.web.common:OSGI-INF/web-request-controller-framework.xml\")\n+public class TestIdempotentRequestFilter {\n+\n+    protected static final int TTL = 30;\n+\n+    protected static final String KV_STORE_NAME = \"requestcontroller\";\n+\n+    protected static final String KEY = \"mykey\";\n+\n+    protected static final String CONTENT = \"test content\";\n+\n+    protected NuxeoRequestControllerFilter filter;\n+\n+    protected FilterChain chain;\n+\n+    protected HttpServletRequest request;\n+\n+    protected MockResponse mockResponse;\n+\n+    @Inject\n+    protected KeyValueService kvs;\n+\n+    protected KeyValueStoreProvider store;\n+\n+    protected static class MockResponse {\n+\n+        protected HttpServletResponse response;\n+\n+        protected int status;\n+\n+        protected OutputStream output;\n+\n+        public MockResponse() throws IOException {\n+            super();\n+            response = mock(HttpServletResponse.class);\n+            output = new ByteArrayOutputStream();\n+            ServletOutputStream servletOutput = mock(ServletOutputStream.class);\n+            doAnswer(invocation -> {\n+                output.write((byte[]) invocation.getArguments()[0]);\n+                return null;\n+            }).when(servletOutput).write(any(byte[].class));\n+            doAnswer(invocation -> {\n+                output.write((Integer) invocation.getArguments()[0]);\n+                return null;\n+            }).when(servletOutput).write(anyInt());\n+            when(response.getOutputStream()).thenReturn(servletOutput);\n+            PrintWriter writer = mock(PrintWriter.class);\n+            doAnswer(invocation -> {\n+                output.write(((String) invocation.getArguments()[0]).getBytes());\n+                return null;\n+            }).when(writer).write(anyString());\n+            doAnswer(invocation -> {\n+                return writer;\n+            }).when(response).getWriter();\n+            when(response.getCharacterEncoding()).thenReturn(UTF_8.name());\n+            doAnswer(invocation -> {\n+                return status;\n+            }).when(response).getStatus();\n+            doAnswer(invocation -> {\n+                status = (Integer) invocation.getArguments()[0];\n+                return null;\n+            }).when(response).setStatus(anyInt());\n+            doAnswer(invocation -> {\n+                status = (Integer) invocation.getArguments()[0];\n+                output.write(((String) invocation.getArguments()[1]).getBytes());\n+                return null;\n+            }).when(response).sendError(anyInt(), anyString());\n+        }\n+\n+        public int getStatus() {\n+            return status;\n+        }\n+\n+        public HttpServletResponse getResponse() {\n+            return response;\n+        }\n+\n+        public OutputStream getOutput() {\n+            return output;\n+        }\n+\n+    }\n+\n+    @Before\n+    public void setUp() throws IOException {\n+        filter = new NuxeoRequestControllerFilter();\n+        FilterConfig config = mock(FilterConfig.class);\n+        when(config.getInitParameter(IdempotentRequestHandler.TTL_SECONDS_PROPERTY)).thenReturn(String.valueOf(TTL));\n+        when(config.getInitParameter(IdempotentRequestHandler.STORE_PROPERTY)).thenReturn(KV_STORE_NAME);\n+        filter.init(config);\n+        chain = mock(FilterChain.class);\n+        request = mock(HttpServletRequest.class);\n+        mockResponse = new MockResponse();\n+        // handle store\n+        store = (KeyValueStoreProvider) kvs.getKeyValueStore(KV_STORE_NAME);\n+        store.clear();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        if (filter != null) {\n+            filter.destroy();\n+        }\n+        if (store != null) {\n+            store.clear();\n+        }\n+    }\n+\n+    protected void checkResponse(MockResponse mockResponse, Integer status, String content) {\n+        assertEquals(status, (Integer) mockResponse.getStatus());\n+        assertEquals(content, mockResponse.getOutput().toString());\n+    }\n+\n+    protected void checkStore(Integer status, String content) {\n+        assertEquals(content, store.getString(IdempotentRequestHandler.CONTENT_PREFIX + KEY));\n+        String skey = IdempotentRequestHandler.STATUS_PREFIX + KEY;\n+        if (status == null) {\n+            assertNull(store.getString(skey));\n+        } else {\n+            assertEquals(String.valueOf(status), store.getString(skey));\n+        }\n+    }\n+\n+    @Test\n+    public void testGetRequestWithoutKey() throws Exception {\n+        when(request.getMethod()).thenReturn(\"GET\");\n+        verify(chain, times(0)).doFilter(any(), any());\n+        filter.doFilter(request, mockResponse.getResponse(), chain);\n+        verify(chain, times(1)).doFilter(any(), any());\n+        checkStore(null, null);\n+    }\n+\n+    @Test\n+    public void testPostRequestWithoutKey() throws Exception {\n+        when(request.getMethod()).thenReturn(\"POST\");\n+        verify(chain, times(0)).doFilter(any(), any());\n+        filter.doFilter(request, mockResponse.getResponse(), chain);\n+        verify(chain, times(1)).doFilter(any(), any());\n+        checkStore(null, null);\n+    }\n+\n+    @Test\n+    public void testGetRequest() throws Exception {\n+        when(request.getMethod()).thenReturn(\"GET\");\n+        when(request.getHeader(IdempotentRequestHandler.HEADER_KEY)).thenReturn(KEY);\n+        verify(chain, times(0)).doFilter(any(), any());\n+        filter.doFilter(request, mockResponse.getResponse(), chain);\n+        verify(chain, times(1)).doFilter(any(), any());\n+        checkStore(null, null);\n+    }\n+\n+    protected void setResult(HttpServletResponse response, int status, String content) throws IOException {\n+        response.setStatus(status);\n+        response.getWriter().write(content);\n+    }\n+\n+    @Test\n+    public void testPostRequest() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc5NTczNw=="}, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzk3NDIwOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/CopyingServletOutputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNzoyMDo1NlrOIJf4yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzozMDo1MFrOIKrrmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgzMDUzNw==", "bodyText": "Good for an initial prototype, but in general we can't buffer in memory.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r546830537", "createdAt": "2020-12-21T17:20:56Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/CopyingServletOutputStream.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.WriteListener;\n+\n+/**\n+ * Captures content written to the target stream.\n+ *\n+ * @since 11.5\n+ */\n+public class CopyingServletOutputStream extends ServletOutputStream {\n+\n+    protected final ServletOutputStream output;\n+\n+    protected final ByteArrayOutputStream capture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3MjM0Ng==", "bodyText": "Reworked to rely on apache DeferredFileOutputStream", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548072346", "createdAt": "2020-12-23T17:30:50Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/CopyingServletOutputStream.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.WriteListener;\n+\n+/**\n+ * Captures content written to the target stream.\n+ *\n+ * @since 11.5\n+ */\n+public class CopyingServletOutputStream extends ServletOutputStream {\n+\n+    protected final ServletOutputStream output;\n+\n+    protected final ByteArrayOutputStream capture;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjgzMDUzNw=="}, "originalCommit": {"oid": "98570dca813bcc2e332d4b811353ead76b00072a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDcxNzc5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMTo1ODo1N1rOIJ4uzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwOToyODoyM1rOIKeWfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzNzU4Mw==", "bodyText": "You already have @since 11.5 on the class, no need for it on all constants", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r547237583", "createdAt": "2020-12-22T11:58:57Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38bd3fe74aa5a433ab06987e66ed875bd4ef1d8f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg1Mzk0OQ==", "bodyText": "Will update this if/when merging code with filter code.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r547853949", "createdAt": "2020-12-23T09:28:23Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzNzU4Mw=="}, "originalCommit": {"oid": "38bd3fe74aa5a433ab06987e66ed875bd4ef1d8f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDcyNDc4OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjowMTozM1rOIJ4zIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjowMTozM1rOIJ4zIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzODY5MA==", "bodyText": "FYI for new code I'm trying to use the idiom long DEFAULT_TTL_SECONDS = Duration.ofDays(1).toSeconds() to be explicit. And make the ttl a long everywhere", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r547238690", "createdAt": "2020-12-22T12:01:33Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.controller.keyvaluestore.name\";\n+\n+    protected static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    /** 1 day */\n+    protected static final int DEFAULT_TTL_SECONDS = 86400;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38bd3fe74aa5a433ab06987e66ed875bd4ef1d8f"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDcyNzA0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjowMjoyNFrOIJ40fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjowMjoyNFrOIJ40fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzOTAzNw==", "bodyText": "This should mention request idempotency instead of request.controller (which is an implementation detail)", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r547239037", "createdAt": "2020-12-22T12:02:24Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.controller.keyvaluestore.name\";\n+\n+    protected static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    /** 1 day */\n+    protected static final int DEFAULT_TTL_SECONDS = 86400;\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.controller.ttl.seconds\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38bd3fe74aa5a433ab06987e66ed875bd4ef1d8f"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDcyOTkxOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjowMzoyN1rOIJ42Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjowMzoyN1rOIJ42Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzIzOTQ3MA==", "bodyText": "Do we plan on backporting? Otherwise Set.of() is simpler", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r547239470", "createdAt": "2020-12-22T12:03:27Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.controller.keyvaluestore.name\";\n+\n+    protected static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    /** 1 day */\n+    protected static final int DEFAULT_TTL_SECONDS = 86400;\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.controller.ttl.seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_SUFFIX = \"_status\";\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = new HashSet<>(\n+            Arrays.asList(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38bd3fe74aa5a433ab06987e66ed875bd4ef1d8f"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDczNDU3OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjowNTowMlrOIJ449g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjowNTowMlrOIJ449g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0MDE4Mg==", "bodyText": "Suggest shouldIgnore -> isIdempotentMethod", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r547240182", "createdAt": "2020-12-22T12:05:02Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.controller.keyvaluestore.name\";\n+\n+    protected static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    /** 1 day */\n+    protected static final int DEFAULT_TTL_SECONDS = 86400;\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.controller.ttl.seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_SUFFIX = \"_status\";\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = new HashSet<>(\n+            Arrays.asList(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME));\n+\n+    // idempotent methods according to RFC 7231 4.2.2\n+    protected static final Set<String> IDEMPOTENT_METHODS = new HashSet<>(\n+            Arrays.asList(HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME));\n+\n+    protected int getTTLSeconds() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getInteger(TTL_SECONDS_PROPERTY, DEFAULT_TTL_SECONDS);\n+        }\n+        return DEFAULT_TTL_SECONDS;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    protected boolean shouldIgnore(String method) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38bd3fe74aa5a433ab06987e66ed875bd4ef1d8f"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDc0MjYyOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjowNzozN1rOIJ49jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjowNzozN1rOIJ49jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0MTM1Ng==", "bodyText": "Add detail: No idempotent processing done: method is already idempotent (the request isn't really ignored)\nI would actually log the method here and not in a separate line.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r547241356", "createdAt": "2020-12-22T12:07:37Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.controller.keyvaluestore.name\";\n+\n+    protected static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    /** 1 day */\n+    protected static final int DEFAULT_TTL_SECONDS = 86400;\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.controller.ttl.seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_SUFFIX = \"_status\";\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = new HashSet<>(\n+            Arrays.asList(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME));\n+\n+    // idempotent methods according to RFC 7231 4.2.2\n+    protected static final Set<String> IDEMPOTENT_METHODS = new HashSet<>(\n+            Arrays.asList(HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME));\n+\n+    protected int getTTLSeconds() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getInteger(TTL_SECONDS_PROPERTY, DEFAULT_TTL_SECONDS);\n+        }\n+        return DEFAULT_TTL_SECONDS;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    protected boolean shouldIgnore(String method) {\n+        return SAFE_METHODS.contains(method) || IDEMPOTENT_METHODS.contains(method);\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        log.debug(\"Method: \" + method);\n+        if (shouldIgnore(method)) {\n+            log.debug(\"Request ignored\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38bd3fe74aa5a433ab06987e66ed875bd4ef1d8f"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDc0NzkxOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjowOToyOVrOIJ5AhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjowOToyOVrOIJ5AhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0MjExNg==", "bodyText": "No idempotent processing done: no Idempotent-Key present", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r547242116", "createdAt": "2020-12-22T12:09:29Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.controller.keyvaluestore.name\";\n+\n+    protected static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    /** 1 day */\n+    protected static final int DEFAULT_TTL_SECONDS = 86400;\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.controller.ttl.seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_SUFFIX = \"_status\";\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = new HashSet<>(\n+            Arrays.asList(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME));\n+\n+    // idempotent methods according to RFC 7231 4.2.2\n+    protected static final Set<String> IDEMPOTENT_METHODS = new HashSet<>(\n+            Arrays.asList(HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME));\n+\n+    protected int getTTLSeconds() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getInteger(TTL_SECONDS_PROPERTY, DEFAULT_TTL_SECONDS);\n+        }\n+        return DEFAULT_TTL_SECONDS;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    protected boolean shouldIgnore(String method) {\n+        return SAFE_METHODS.contains(method) || IDEMPOTENT_METHODS.contains(method);\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        log.debug(\"Method: \" + method);\n+        if (shouldIgnore(method)) {\n+            log.debug(\"Request ignored\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent request key\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38bd3fe74aa5a433ab06987e66ed875bd4ef1d8f"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDc1MTA5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoxMDo0M1rOIJ5Cfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoxMDo0M1rOIJ5Cfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0MjYyMw==", "bodyText": "KeyValueService not present", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r547242623", "createdAt": "2020-12-22T12:10:43Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.controller.keyvaluestore.name\";\n+\n+    protected static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    /** 1 day */\n+    protected static final int DEFAULT_TTL_SECONDS = 86400;\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.controller.ttl.seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_SUFFIX = \"_status\";\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = new HashSet<>(\n+            Arrays.asList(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME));\n+\n+    // idempotent methods according to RFC 7231 4.2.2\n+    protected static final Set<String> IDEMPOTENT_METHODS = new HashSet<>(\n+            Arrays.asList(HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME));\n+\n+    protected int getTTLSeconds() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getInteger(TTL_SECONDS_PROPERTY, DEFAULT_TTL_SECONDS);\n+        }\n+        return DEFAULT_TTL_SECONDS;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    protected boolean shouldIgnore(String method) {\n+        return SAFE_METHODS.contains(method) || IDEMPOTENT_METHODS.contains(method);\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        log.debug(\"Method: \" + method);\n+        if (shouldIgnore(method)) {\n+            log.debug(\"Request ignored\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent request key\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        log.debug(\"Idempotent request key: \" + key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueStore not present\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38bd3fe74aa5a433ab06987e66ed875bd4ef1d8f"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDc1Mjk0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoxMTozMVrOIJ5DoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjozNToyM1rOIJ5rVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0MjkxMg==", "bodyText": "Check store is not null otherwise log and skip idempotent processing.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r547242912", "createdAt": "2020-12-22T12:11:31Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.controller.keyvaluestore.name\";\n+\n+    protected static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    /** 1 day */\n+    protected static final int DEFAULT_TTL_SECONDS = 86400;\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.controller.ttl.seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_SUFFIX = \"_status\";\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = new HashSet<>(\n+            Arrays.asList(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME));\n+\n+    // idempotent methods according to RFC 7231 4.2.2\n+    protected static final Set<String> IDEMPOTENT_METHODS = new HashSet<>(\n+            Arrays.asList(HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME));\n+\n+    protected int getTTLSeconds() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getInteger(TTL_SECONDS_PROPERTY, DEFAULT_TTL_SECONDS);\n+        }\n+        return DEFAULT_TTL_SECONDS;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    protected boolean shouldIgnore(String method) {\n+        return SAFE_METHODS.contains(method) || IDEMPOTENT_METHODS.contains(method);\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        log.debug(\"Method: \" + method);\n+        if (shouldIgnore(method)) {\n+            log.debug(\"Request ignored\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent request key\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        log.debug(\"Idempotent request key: \" + key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueStore not present\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = kvs.getKeyValueStore(getStoreName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38bd3fe74aa5a433ab06987e66ed875bd4ef1d8f"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI1MDgzOQ==", "bodyText": "Alright but that's actually something i found quite strange in the KeyValueService implementation: even when the store with given name is not present, a store is instantiated from the default definition (and an exception is thrown if there is no default definition).", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r547250839", "createdAt": "2020-12-22T12:30:02Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.controller.keyvaluestore.name\";\n+\n+    protected static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    /** 1 day */\n+    protected static final int DEFAULT_TTL_SECONDS = 86400;\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.controller.ttl.seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_SUFFIX = \"_status\";\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = new HashSet<>(\n+            Arrays.asList(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME));\n+\n+    // idempotent methods according to RFC 7231 4.2.2\n+    protected static final Set<String> IDEMPOTENT_METHODS = new HashSet<>(\n+            Arrays.asList(HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME));\n+\n+    protected int getTTLSeconds() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getInteger(TTL_SECONDS_PROPERTY, DEFAULT_TTL_SECONDS);\n+        }\n+        return DEFAULT_TTL_SECONDS;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    protected boolean shouldIgnore(String method) {\n+        return SAFE_METHODS.contains(method) || IDEMPOTENT_METHODS.contains(method);\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        log.debug(\"Method: \" + method);\n+        if (shouldIgnore(method)) {\n+            log.debug(\"Request ignored\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent request key\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        log.debug(\"Idempotent request key: \" + key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueStore not present\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = kvs.getKeyValueStore(getStoreName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0MjkxMg=="}, "originalCommit": {"oid": "38bd3fe74aa5a433ab06987e66ed875bd4ef1d8f"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI1MzA3Ng==", "bodyText": "Ah I see. Yes in that case no need for a check you're right.\nThis behavior is done to avoid explicit definitions of lots of stores in XML.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r547253076", "createdAt": "2020-12-22T12:35:23Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.controller.keyvaluestore.name\";\n+\n+    protected static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    /** 1 day */\n+    protected static final int DEFAULT_TTL_SECONDS = 86400;\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.controller.ttl.seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_SUFFIX = \"_status\";\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = new HashSet<>(\n+            Arrays.asList(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME));\n+\n+    // idempotent methods according to RFC 7231 4.2.2\n+    protected static final Set<String> IDEMPOTENT_METHODS = new HashSet<>(\n+            Arrays.asList(HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME));\n+\n+    protected int getTTLSeconds() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getInteger(TTL_SECONDS_PROPERTY, DEFAULT_TTL_SECONDS);\n+        }\n+        return DEFAULT_TTL_SECONDS;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    protected boolean shouldIgnore(String method) {\n+        return SAFE_METHODS.contains(method) || IDEMPOTENT_METHODS.contains(method);\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        log.debug(\"Method: \" + method);\n+        if (shouldIgnore(method)) {\n+            log.debug(\"Request ignored\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent request key\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        log.debug(\"Idempotent request key: \" + key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueStore not present\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = kvs.getKeyValueStore(getStoreName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0MjkxMg=="}, "originalCommit": {"oid": "38bd3fe74aa5a433ab06987e66ed875bd4ef1d8f"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDc2MTI2OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoxNDo0NFrOIJ5IkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzozMTozMlrOIKrtww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0NDE3Nw==", "bodyText": "You have many if (...) { chain.doFilter(request, response); return; } so maybe let the caller do the chain call if this method returns a boolean false.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r547244177", "createdAt": "2020-12-22T12:14:44Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.controller.keyvaluestore.name\";\n+\n+    protected static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    /** 1 day */\n+    protected static final int DEFAULT_TTL_SECONDS = 86400;\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.controller.ttl.seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_SUFFIX = \"_status\";\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = new HashSet<>(\n+            Arrays.asList(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME));\n+\n+    // idempotent methods according to RFC 7231 4.2.2\n+    protected static final Set<String> IDEMPOTENT_METHODS = new HashSet<>(\n+            Arrays.asList(HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME));\n+\n+    protected int getTTLSeconds() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getInteger(TTL_SECONDS_PROPERTY, DEFAULT_TTL_SECONDS);\n+        }\n+        return DEFAULT_TTL_SECONDS;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    protected boolean shouldIgnore(String method) {\n+        return SAFE_METHODS.contains(method) || IDEMPOTENT_METHODS.contains(method);\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        log.debug(\"Method: \" + method);\n+        if (shouldIgnore(method)) {\n+            log.debug(\"Request ignored\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent request key\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        log.debug(\"Idempotent request key: \" + key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueStore not present\");\n+            chain.doFilter(request, response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38bd3fe74aa5a433ab06987e66ed875bd4ef1d8f"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3Mjg5OQ==", "bodyText": "I did not change this, but since in the end there is a dedicated filter maybe it's alright as is?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548072899", "createdAt": "2020-12-23T17:31:32Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/IdempotentRequestHandler.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.requestcontroller.filter;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Handles idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class IdempotentRequestHandler {\n+\n+    private static final Logger log = LogManager.getLogger(IdempotentRequestHandler.class);\n+\n+    /** @since 11.5 */\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    /** @since 11.5 */\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.controller.keyvaluestore.name\";\n+\n+    protected static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    /** 1 day */\n+    protected static final int DEFAULT_TTL_SECONDS = 86400;\n+\n+    /** @since 11.5 */\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.controller.ttl.seconds\";\n+\n+    /** @since 11.5 */\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    /** @since 11.5 */\n+    public static final String STATUS_SUFFIX = \"_status\";\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = new HashSet<>(\n+            Arrays.asList(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME));\n+\n+    // idempotent methods according to RFC 7231 4.2.2\n+    protected static final Set<String> IDEMPOTENT_METHODS = new HashSet<>(\n+            Arrays.asList(HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME));\n+\n+    protected int getTTLSeconds() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getInteger(TTL_SECONDS_PROPERTY, DEFAULT_TTL_SECONDS);\n+        }\n+        return DEFAULT_TTL_SECONDS;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    protected boolean shouldIgnore(String method) {\n+        return SAFE_METHODS.contains(method) || IDEMPOTENT_METHODS.contains(method);\n+    }\n+\n+    public void handle(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        log.debug(\"Method: \" + method);\n+        if (shouldIgnore(method)) {\n+            log.debug(\"Request ignored\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(IdempotentRequestHandler.HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent request key\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        log.debug(\"Idempotent request key: \" + key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueStore not present\");\n+            chain.doFilter(request, response);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0NDE3Nw=="}, "originalCommit": {"oid": "38bd3fe74aa5a433ab06987e66ed875bd4ef1d8f"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MDc2MzY1OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMjoxNTo0MFrOIJ5KFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzozMTo1M1rOIKruiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0NDU2Nw==", "bodyText": "handler -> idempotentRequestHandler", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r547244567", "createdAt": "2020-12-22T12:15:40Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "diffHunk": "@@ -70,13 +70,15 @@\n \n     protected static final int LOCK_TIMEOUT_S = 120;\n \n+    protected IdempotentRequestHandler handler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38bd3fe74aa5a433ab06987e66ed875bd4ef1d8f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3MzA5Nw==", "bodyText": "As discussed, moved this handler to a dedicated filter class.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548073097", "createdAt": "2020-12-23T17:31:53Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/requestcontroller/filter/NuxeoRequestControllerFilter.java", "diffHunk": "@@ -70,13 +70,15 @@\n \n     protected static final int LOCK_TIMEOUT_S = 120;\n \n+    protected IdempotentRequestHandler handler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI0NDU2Nw=="}, "originalCommit": {"oid": "38bd3fe74aa5a433ab06987e66ed875bd4ef1d8f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjE3NjkwOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingServletOutputStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzo0MDowOVrOIKsImw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzo0MDowOVrOIKsImw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA3OTc3MQ==", "bodyText": "You must also override the other write(byte b[]) and write(byte b[], int off, int len) methods from the base OutputStream otherwise performance will be horrible.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548079771", "createdAt": "2020-12-23T17:40:09Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingServletOutputStream.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.WriteListener;\n+\n+import org.apache.commons.io.output.DeferredFileOutputStream;\n+\n+/**\n+ * Captures content written to the target stream.\n+ *\n+ * @since 11.5\n+ */\n+public class CopyingServletOutputStream extends ServletOutputStream {\n+\n+    protected final ServletOutputStream output;\n+\n+    protected final DeferredFileOutputStream capture;\n+\n+    public CopyingServletOutputStream(ServletOutputStream output, DeferredFileOutputStream capture) {\n+        this.output = output;\n+        this.capture = capture;\n+    }\n+\n+    @Override\n+    public void write(int b) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjI1MDc1OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingResponseWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzo1NTowM1rOIKs3Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzo1NTowM1rOIKs3Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA5MTcyNw==", "bodyText": "Maybe put new CopyingServletOutputStream(getResponse().getOutputStream(), capture) in a helper method as it's used twice.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548091727", "createdAt": "2020-12-23T17:55:03Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingResponseWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.output.DeferredFileOutputStream;\n+\n+/**\n+ * Response wrapper that can capture response result, using a {@link DeferredFileOutputStream}.\n+ *\n+ * @since 11.5\n+ */\n+public class CopyingResponseWrapper extends HttpServletResponseWrapper {\n+\n+    private final DeferredFileOutputStream capture;\n+\n+    private ServletOutputStream output;\n+\n+    private PrintWriter writer;\n+\n+    public CopyingResponseWrapper(int threshold, HttpServletResponse response) {\n+        super(response);\n+        capture = new DeferredFileOutputStream(threshold, response.getBufferSize(), \"nxidem\", null, null);\n+    }\n+\n+    @Override\n+    public ServletOutputStream getOutputStream() throws IOException {\n+        if (writer != null) {\n+            throw new IllegalStateException(\"getWriter() has already been called on this response.\");\n+        }\n+\n+        if (output == null) {\n+            output = new CopyingServletOutputStream(getResponse().getOutputStream(), capture);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjI2NDcxOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingResponseWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzo1Nzo0NlrOIKtAKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDozNDo1OFrOINswxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA5Mzk5NA==", "bodyText": "It shouldn't be this method's responsibility to do the underlying close() as you can't guarantee it's going to be called in case of exceptions.\nYou should do a capture.flush() before reading the file.\nAlso you need to deal with tmp file deletion, maybe make CopyingResponseWrapper implement AutoCloseable and do the cleanup (underlying close + tmp file delete) in the close method. Then the filter can use a try-with-resources to make sure it's always closed.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548093994", "createdAt": "2020-12-23T17:57:46Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingResponseWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.output.DeferredFileOutputStream;\n+\n+/**\n+ * Response wrapper that can capture response result, using a {@link DeferredFileOutputStream}.\n+ *\n+ * @since 11.5\n+ */\n+public class CopyingResponseWrapper extends HttpServletResponseWrapper {\n+\n+    private final DeferredFileOutputStream capture;\n+\n+    private ServletOutputStream output;\n+\n+    private PrintWriter writer;\n+\n+    public CopyingResponseWrapper(int threshold, HttpServletResponse response) {\n+        super(response);\n+        capture = new DeferredFileOutputStream(threshold, response.getBufferSize(), \"nxidem\", null, null);\n+    }\n+\n+    @Override\n+    public ServletOutputStream getOutputStream() throws IOException {\n+        if (writer != null) {\n+            throw new IllegalStateException(\"getWriter() has already been called on this response.\");\n+        }\n+\n+        if (output == null) {\n+            output = new CopyingServletOutputStream(getResponse().getOutputStream(), capture);\n+        }\n+\n+        return output;\n+    }\n+\n+    @Override\n+    public PrintWriter getWriter() throws IOException {\n+        if (output != null) {\n+            throw new IllegalStateException(\"getOutputStream() has already been called on this response.\");\n+        }\n+\n+        if (writer == null) {\n+            writer = new PrintWriter(new OutputStreamWriter(\n+                    new CopyingServletOutputStream(getResponse().getOutputStream(), capture), getCharacterEncoding()));\n+        }\n+\n+        return writer;\n+    }\n+\n+    @Override\n+    public void flushBuffer() throws IOException {\n+        super.flushBuffer();\n+\n+        if (writer != null) {\n+            writer.flush();\n+        } else if (output != null) {\n+            output.flush();\n+        }\n+    }\n+\n+    public byte[] getCaptureAsBytes() throws IOException {\n+        if (writer != null) {\n+            writer.close();\n+        } else if (output != null) {\n+            output.close();\n+        }\n+\n+        if (capture.isInMemory()) {\n+            return capture.getData();\n+        } else {\n+            return FileUtils.readFileToByteArray(capture.getFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIzNTc4MQ==", "bodyText": "added a call to wrapper#flushBuffer before calling wrapper#getCaptureAsBytes, still kept a call to capture#flush before calling capture#getFile, please tell if that's what it expected here.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r551235781", "createdAt": "2021-01-04T10:34:58Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingResponseWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.output.DeferredFileOutputStream;\n+\n+/**\n+ * Response wrapper that can capture response result, using a {@link DeferredFileOutputStream}.\n+ *\n+ * @since 11.5\n+ */\n+public class CopyingResponseWrapper extends HttpServletResponseWrapper {\n+\n+    private final DeferredFileOutputStream capture;\n+\n+    private ServletOutputStream output;\n+\n+    private PrintWriter writer;\n+\n+    public CopyingResponseWrapper(int threshold, HttpServletResponse response) {\n+        super(response);\n+        capture = new DeferredFileOutputStream(threshold, response.getBufferSize(), \"nxidem\", null, null);\n+    }\n+\n+    @Override\n+    public ServletOutputStream getOutputStream() throws IOException {\n+        if (writer != null) {\n+            throw new IllegalStateException(\"getWriter() has already been called on this response.\");\n+        }\n+\n+        if (output == null) {\n+            output = new CopyingServletOutputStream(getResponse().getOutputStream(), capture);\n+        }\n+\n+        return output;\n+    }\n+\n+    @Override\n+    public PrintWriter getWriter() throws IOException {\n+        if (output != null) {\n+            throw new IllegalStateException(\"getOutputStream() has already been called on this response.\");\n+        }\n+\n+        if (writer == null) {\n+            writer = new PrintWriter(new OutputStreamWriter(\n+                    new CopyingServletOutputStream(getResponse().getOutputStream(), capture), getCharacterEncoding()));\n+        }\n+\n+        return writer;\n+    }\n+\n+    @Override\n+    public void flushBuffer() throws IOException {\n+        super.flushBuffer();\n+\n+        if (writer != null) {\n+            writer.flush();\n+        } else if (output != null) {\n+            output.flush();\n+        }\n+    }\n+\n+    public byte[] getCaptureAsBytes() throws IOException {\n+        if (writer != null) {\n+            writer.close();\n+        } else if (output != null) {\n+            output.close();\n+        }\n+\n+        if (capture.isInMemory()) {\n+            return capture.getData();\n+        } else {\n+            return FileUtils.readFileToByteArray(capture.getFile());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA5Mzk5NA=="}, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjMwMzI1OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODowNTo0NFrOIKtYdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODowNTo0NFrOIKtYdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEwMDIxMg==", "bodyText": "Probably better to use getDuration here, it's more flexible for users. And rename the property to not have \"seconds\" in the name or value. Then DEFAULT_TTL_SECONDS can be just a duration too, and you only convert to seconds at the last moment: long ttl = getTTLSeconds() -> long ttl = getTTL().toSeconds().", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548100212", "createdAt": "2020-12-23T18:05:44Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter implements Filter {\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final long DEFAULT_TTL_SECONDS = Duration.ofDays(1).toSeconds();\n+\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.idempotency.ttl.seconds\";\n+\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = Set.of(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME,\n+            HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME);\n+\n+    // idempotent methods according to RFC 7231 4.2.2\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected long getTTLSeconds() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getLong(TTL_SECONDS_PROPERTY, DEFAULT_TTL_SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjMwOTA2OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODowNjo0OFrOIKtcHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODowNjo0OFrOIKtcHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEwMTE0OA==", "bodyText": "You could have a single set with everything in it.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548101148", "createdAt": "2020-12-23T18:06:48Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter implements Filter {\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final long DEFAULT_TTL_SECONDS = Duration.ofDays(1).toSeconds();\n+\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.idempotency.ttl.seconds\";\n+\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = Set.of(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME,\n+            HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME);\n+\n+    // idempotent methods according to RFC 7231 4.2.2\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected long getTTLSeconds() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getLong(TTL_SECONDS_PROPERTY, DEFAULT_TTL_SECONDS);\n+        }\n+        return DEFAULT_TTL_SECONDS;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    protected boolean isIdempotentMethod(String method) {\n+        return SAFE_METHODS.contains(method) || IDEMPOTENT_METHODS.contains(method);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjMxMjk5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODowNzozNFrOIKte0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODowNzozNFrOIKte0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEwMTg0MA==", "bodyText": "With log4j2 you should use {} in the log message, not string concatenation.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548101840", "createdAt": "2020-12-23T18:07:34Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter implements Filter {\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final long DEFAULT_TTL_SECONDS = Duration.ofDays(1).toSeconds();\n+\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.idempotency.ttl.seconds\";\n+\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = Set.of(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME,\n+            HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME);\n+\n+    // idempotent methods according to RFC 7231 4.2.2\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected long getTTLSeconds() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getLong(TTL_SECONDS_PROPERTY, DEFAULT_TTL_SECONDS);\n+        }\n+        return DEFAULT_TTL_SECONDS;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    protected boolean isIdempotentMethod(String method) {\n+        return SAFE_METHODS.contains(method) || IDEMPOTENT_METHODS.contains(method);\n+    }\n+\n+    @Override\n+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)\n+            throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) servletRequest;\n+        HttpServletResponse response = (HttpServletResponse) servletResponse;\n+        String method = request.getMethod();\n+        if (isIdempotentMethod(method)) {\n+            log.debug(\"No idempotent processing done: method is already idempotent: \" + method);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjMyMzEyOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODowOTo0MVrOIKtleA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODowOTo0MVrOIKtleA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEwMzU0NA==", "bodyText": "No need for NuxeoIdempotentFilter. in front of all your local constants.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548103544", "createdAt": "2020-12-23T18:09:41Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter implements Filter {\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final long DEFAULT_TTL_SECONDS = Duration.ofDays(1).toSeconds();\n+\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.idempotency.ttl.seconds\";\n+\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = Set.of(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME,\n+            HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME);\n+\n+    // idempotent methods according to RFC 7231 4.2.2\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected long getTTLSeconds() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getLong(TTL_SECONDS_PROPERTY, DEFAULT_TTL_SECONDS);\n+        }\n+        return DEFAULT_TTL_SECONDS;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    protected boolean isIdempotentMethod(String method) {\n+        return SAFE_METHODS.contains(method) || IDEMPOTENT_METHODS.contains(method);\n+    }\n+\n+    @Override\n+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)\n+            throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) servletRequest;\n+        HttpServletResponse response = (HttpServletResponse) servletResponse;\n+        String method = request.getMethod();\n+        if (isIdempotentMethod(method)) {\n+            log.debug(\"No idempotent processing done: method is already idempotent: \" + method);\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(NuxeoIdempotentFilter.HEADER_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjMyNDkxOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODowOTo1OVrOIKtmpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODowOTo1OVrOIKtmpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEwMzg0NQ==", "bodyText": "Please do static imports of HttpServletResponse.SC_* constants", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548103845", "createdAt": "2020-12-23T18:09:59Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter implements Filter {\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final long DEFAULT_TTL_SECONDS = Duration.ofDays(1).toSeconds();\n+\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.idempotency.ttl.seconds\";\n+\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = Set.of(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME,\n+            HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME);\n+\n+    // idempotent methods according to RFC 7231 4.2.2\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected long getTTLSeconds() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getLong(TTL_SECONDS_PROPERTY, DEFAULT_TTL_SECONDS);\n+        }\n+        return DEFAULT_TTL_SECONDS;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    protected boolean isIdempotentMethod(String method) {\n+        return SAFE_METHODS.contains(method) || IDEMPOTENT_METHODS.contains(method);\n+    }\n+\n+    @Override\n+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)\n+            throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) servletRequest;\n+        HttpServletResponse response = (HttpServletResponse) servletResponse;\n+        String method = request.getMethod();\n+        if (isIdempotentMethod(method)) {\n+            log.debug(\"No idempotent processing done: method is already idempotent: \" + method);\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(NuxeoIdempotentFilter.HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent processing done: no Idempotent-Key present\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        log.debug(\"Idempotent request key: \" + key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueService not present\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = kvs.getKeyValueStore(getStoreName());\n+        String status = store.getString(key + NuxeoIdempotentFilter.INFO_SUFFIX);\n+        if (status == null) {\n+            log.debug(\"Handle new request for key: \" + key);\n+            long ttl = getTTLSeconds();\n+            store.put(key + NuxeoIdempotentFilter.INFO_SUFFIX, NuxeoIdempotentFilter.INPROGRESS_MARKER, ttl);\n+            try {\n+                CopyingResponseWrapper wrapper = new CopyingResponseWrapper(DEFERRED_OUTPUT_STREAM_THRESHOLD, response);\n+                chain.doFilter(request, wrapper);\n+                store.put(key, wrapper.getCaptureAsBytes(), ttl);\n+                store.put(key + NuxeoIdempotentFilter.INFO_SUFFIX, NuxeoIdempotentResponse.write(wrapper), ttl);\n+                log.debug(\"Stored response for key: \" + key);\n+            } catch (IOException | ServletException e) {\n+                response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjM2NDMzOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODoxODoyN1rOIKuAkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODoxODoyN1rOIKuAkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODExMDQ4Mw==", "bodyText": "You should put the mapper in a static final field instead of constructing it every time.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548110483", "createdAt": "2020-12-23T18:18:27Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentResponse.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+/**\n+ * POJO representing response to be serialized and served by {@link NuxeoIdempotentFilter}.\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentResponse {\n+\n+    protected int status;\n+\n+    protected Map<String, Collection<String>> headers = new LinkedHashMap<>();\n+\n+    public int getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(int status) {\n+        this.status = status;\n+    }\n+\n+    public Map<String, Collection<String>> getHeaders() {\n+        return headers;\n+    }\n+\n+    public void setHeader(String name, Collection<String> value) {\n+        headers.put(name, value);\n+    }\n+\n+    protected static final ObjectMapper getMapper() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjM4MDExOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODoyMjoyMFrOIKuKjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwOToxMDo1M1rOINqGsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODExMzAzOQ==", "bodyText": "I think stored.getHeaders().forEach(response::addHeader) will work as well.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548113039", "createdAt": "2020-12-23T18:22:20Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentResponse.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+/**\n+ * POJO representing response to be serialized and served by {@link NuxeoIdempotentFilter}.\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentResponse {\n+\n+    protected int status;\n+\n+    protected Map<String, Collection<String>> headers = new LinkedHashMap<>();\n+\n+    public int getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(int status) {\n+        this.status = status;\n+    }\n+\n+    public Map<String, Collection<String>> getHeaders() {\n+        return headers;\n+    }\n+\n+    public void setHeader(String name, Collection<String> value) {\n+        headers.put(name, value);\n+    }\n+\n+    protected static final ObjectMapper getMapper() {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\n+              .configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+        return mapper;\n+    }\n+\n+    public static final void restore(HttpServletResponse response, byte[] bytes) throws IOException {\n+        NuxeoIdempotentResponse stored = getMapper().readerFor(NuxeoIdempotentResponse.class)\n+                                                    .withoutRootName()\n+                                                    .without(JsonParser.Feature.AUTO_CLOSE_SOURCE)\n+                                                    .readValue(bytes);\n+        response.setStatus(stored.getStatus());\n+        stored.getHeaders().forEach((name, values) -> {\n+            boolean isFirst = true;\n+            for (String value : values) {\n+                if (isFirst) {\n+                    response.setHeader(name, value);\n+                } else {\n+                    response.addHeader(name, value);\n+                    isFirst = false;\n+                }\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE5MjI0MA==", "bodyText": "response does not have a addHeader(String, Collection) api, but i can remove the \"isFirst\" and setHeader call (making sure header value is \"reset\") if unnecessary", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r551192240", "createdAt": "2021-01-04T09:10:53Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentResponse.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+/**\n+ * POJO representing response to be serialized and served by {@link NuxeoIdempotentFilter}.\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentResponse {\n+\n+    protected int status;\n+\n+    protected Map<String, Collection<String>> headers = new LinkedHashMap<>();\n+\n+    public int getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(int status) {\n+        this.status = status;\n+    }\n+\n+    public Map<String, Collection<String>> getHeaders() {\n+        return headers;\n+    }\n+\n+    public void setHeader(String name, Collection<String> value) {\n+        headers.put(name, value);\n+    }\n+\n+    protected static final ObjectMapper getMapper() {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\n+              .configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+        return mapper;\n+    }\n+\n+    public static final void restore(HttpServletResponse response, byte[] bytes) throws IOException {\n+        NuxeoIdempotentResponse stored = getMapper().readerFor(NuxeoIdempotentResponse.class)\n+                                                    .withoutRootName()\n+                                                    .without(JsonParser.Feature.AUTO_CLOSE_SOURCE)\n+                                                    .readValue(bytes);\n+        response.setStatus(stored.getStatus());\n+        stored.getHeaders().forEach((name, values) -> {\n+            boolean isFirst = true;\n+            for (String value : values) {\n+                if (isFirst) {\n+                    response.setHeader(name, value);\n+                } else {\n+                    response.addHeader(name, value);\n+                    isFirst = false;\n+                }\n+            }\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODExMzAzOQ=="}, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjM5Njc3OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODoyNToyN1rOIKuVQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODoyNToyN1rOIKuVQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODExNTc3OA==", "bodyText": "You should do this first, and if there's an IOException (due to errors parsing the JSON) log it but abandon everything and process normally the chain.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548115778", "createdAt": "2020-12-23T18:25:27Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter implements Filter {\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final long DEFAULT_TTL_SECONDS = Duration.ofDays(1).toSeconds();\n+\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.idempotency.ttl.seconds\";\n+\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = Set.of(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME,\n+            HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME);\n+\n+    // idempotent methods according to RFC 7231 4.2.2\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected long getTTLSeconds() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getLong(TTL_SECONDS_PROPERTY, DEFAULT_TTL_SECONDS);\n+        }\n+        return DEFAULT_TTL_SECONDS;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    protected boolean isIdempotentMethod(String method) {\n+        return SAFE_METHODS.contains(method) || IDEMPOTENT_METHODS.contains(method);\n+    }\n+\n+    @Override\n+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)\n+            throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) servletRequest;\n+        HttpServletResponse response = (HttpServletResponse) servletResponse;\n+        String method = request.getMethod();\n+        if (isIdempotentMethod(method)) {\n+            log.debug(\"No idempotent processing done: method is already idempotent: \" + method);\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(NuxeoIdempotentFilter.HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent processing done: no Idempotent-Key present\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        log.debug(\"Idempotent request key: \" + key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueService not present\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = kvs.getKeyValueStore(getStoreName());\n+        String status = store.getString(key + NuxeoIdempotentFilter.INFO_SUFFIX);\n+        if (status == null) {\n+            log.debug(\"Handle new request for key: \" + key);\n+            long ttl = getTTLSeconds();\n+            store.put(key + NuxeoIdempotentFilter.INFO_SUFFIX, NuxeoIdempotentFilter.INPROGRESS_MARKER, ttl);\n+            try {\n+                CopyingResponseWrapper wrapper = new CopyingResponseWrapper(DEFERRED_OUTPUT_STREAM_THRESHOLD, response);\n+                chain.doFilter(request, wrapper);\n+                store.put(key, wrapper.getCaptureAsBytes(), ttl);\n+                store.put(key + NuxeoIdempotentFilter.INFO_SUFFIX, NuxeoIdempotentResponse.write(wrapper), ttl);\n+                log.debug(\"Stored response for key: \" + key);\n+            } catch (IOException | ServletException e) {\n+                response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n+                throw e;\n+            } finally {\n+                if (response.getStatus() >= HttpServletResponse.SC_BAD_REQUEST) {\n+                    // error request: cleanup store\n+                    store.put(key, (String) null);\n+                    store.put(key + NuxeoIdempotentFilter.INFO_SUFFIX, (String) null);\n+                    log.debug(\"Cleanup store: error for key: \" + key);\n+                }\n+            }\n+        } else if (NuxeoIdempotentFilter.INPROGRESS_MARKER.equals(status)) {\n+            // request already in progress -> conflict\n+            // Don't call response.sendError, because it commits the response\n+            // which prevents NuxeoExceptionFilter from returning a custom error page.\n+            response.setStatus(HttpServletResponse.SC_CONFLICT);\n+            log.debug(\"Conflict response for key: \" + key);\n+        } else {\n+            // request already done: return stored result\n+            response.getOutputStream().write(store.get(key));\n+            NuxeoIdempotentResponse.restore(response, store.get(key + NuxeoIdempotentFilter.INFO_SUFFIX));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjQxMTQ3OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODoyODoyOVrOIKuepA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODoyODoyOVrOIKuepA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODExODE4MA==", "bodyText": "I'd prefer all the repeated chain.doFilter(request, response) in a caller method. So rename the current method to doFilterIdempotent and then have:\n@Override \npublic void doFilter(...) throws ... {\n    if (!doFilterIdempotent()) {\n        chain.doFilter(request, response);\n    }\n}\n\nAnd return false from doFilterIdempotent whenever you haven't done any processing.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548118180", "createdAt": "2020-12-23T18:28:29Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter implements Filter {\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final long DEFAULT_TTL_SECONDS = Duration.ofDays(1).toSeconds();\n+\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.idempotency.ttl.seconds\";\n+\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = Set.of(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME,\n+            HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME);\n+\n+    // idempotent methods according to RFC 7231 4.2.2\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected long getTTLSeconds() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getLong(TTL_SECONDS_PROPERTY, DEFAULT_TTL_SECONDS);\n+        }\n+        return DEFAULT_TTL_SECONDS;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    protected boolean isIdempotentMethod(String method) {\n+        return SAFE_METHODS.contains(method) || IDEMPOTENT_METHODS.contains(method);\n+    }\n+\n+    @Override\n+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)\n+            throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) servletRequest;\n+        HttpServletResponse response = (HttpServletResponse) servletResponse;\n+        String method = request.getMethod();\n+        if (isIdempotentMethod(method)) {\n+            log.debug(\"No idempotent processing done: method is already idempotent: \" + method);\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(NuxeoIdempotentFilter.HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent processing done: no Idempotent-Key present\");\n+            chain.doFilter(request, response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjQyNjIyOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODozMTozMFrOIKuoCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODozMTozMFrOIKuoCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEyMDU4Ng==", "bodyText": "Extend HttpFilter instead, which gives you doFilter methods overrides with parameters already converted to HttpServletRequest/HttpServletResponse.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548120586", "createdAt": "2020-12-23T18:31:30Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter implements Filter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjQ0NDkzOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODozNToyN1rOIKu0jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODozNToyN1rOIKu0jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEyMzc5MA==", "bodyText": "We should have a protection here against captures that are too big, as the k/v store is not designed to store arbitrarily big payloads.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548123790", "createdAt": "2020-12-23T18:35:27Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter implements Filter {\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final long DEFAULT_TTL_SECONDS = Duration.ofDays(1).toSeconds();\n+\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.idempotency.ttl.seconds\";\n+\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = Set.of(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME,\n+            HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME);\n+\n+    // idempotent methods according to RFC 7231 4.2.2\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected long getTTLSeconds() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getLong(TTL_SECONDS_PROPERTY, DEFAULT_TTL_SECONDS);\n+        }\n+        return DEFAULT_TTL_SECONDS;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    protected boolean isIdempotentMethod(String method) {\n+        return SAFE_METHODS.contains(method) || IDEMPOTENT_METHODS.contains(method);\n+    }\n+\n+    @Override\n+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)\n+            throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) servletRequest;\n+        HttpServletResponse response = (HttpServletResponse) servletResponse;\n+        String method = request.getMethod();\n+        if (isIdempotentMethod(method)) {\n+            log.debug(\"No idempotent processing done: method is already idempotent: \" + method);\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(NuxeoIdempotentFilter.HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent processing done: no Idempotent-Key present\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        log.debug(\"Idempotent request key: \" + key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueService not present\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = kvs.getKeyValueStore(getStoreName());\n+        String status = store.getString(key + NuxeoIdempotentFilter.INFO_SUFFIX);\n+        if (status == null) {\n+            log.debug(\"Handle new request for key: \" + key);\n+            long ttl = getTTLSeconds();\n+            store.put(key + NuxeoIdempotentFilter.INFO_SUFFIX, NuxeoIdempotentFilter.INPROGRESS_MARKER, ttl);\n+            try {\n+                CopyingResponseWrapper wrapper = new CopyingResponseWrapper(DEFERRED_OUTPUT_STREAM_THRESHOLD, response);\n+                chain.doFilter(request, wrapper);\n+                store.put(key, wrapper.getCaptureAsBytes(), ttl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjQ0ODA0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODozNjowNFrOIKu2iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODozNjowNFrOIKu2iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEyNDI5Nw==", "bodyText": "I'd like to see the response size in bytes logged as well, and the status (here and in the \"return stored result\" case)", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548124297", "createdAt": "2020-12-23T18:36:04Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter implements Filter {\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final long DEFAULT_TTL_SECONDS = Duration.ofDays(1).toSeconds();\n+\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.idempotency.ttl.seconds\";\n+\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    // safe methods according to RFC 7231 4.2.1\n+    protected static final Set<String> SAFE_METHODS = Set.of(HttpGet.METHOD_NAME, HttpHead.METHOD_NAME,\n+            HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME);\n+\n+    // idempotent methods according to RFC 7231 4.2.2\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected long getTTLSeconds() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getLong(TTL_SECONDS_PROPERTY, DEFAULT_TTL_SECONDS);\n+        }\n+        return DEFAULT_TTL_SECONDS;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    protected boolean isIdempotentMethod(String method) {\n+        return SAFE_METHODS.contains(method) || IDEMPOTENT_METHODS.contains(method);\n+    }\n+\n+    @Override\n+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)\n+            throws IOException, ServletException {\n+        HttpServletRequest request = (HttpServletRequest) servletRequest;\n+        HttpServletResponse response = (HttpServletResponse) servletResponse;\n+        String method = request.getMethod();\n+        if (isIdempotentMethod(method)) {\n+            log.debug(\"No idempotent processing done: method is already idempotent: \" + method);\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        String key = request.getHeader(NuxeoIdempotentFilter.HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent processing done: no Idempotent-Key present\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        log.debug(\"Idempotent request key: \" + key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueService not present\");\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+        KeyValueStore store = kvs.getKeyValueStore(getStoreName());\n+        String status = store.getString(key + NuxeoIdempotentFilter.INFO_SUFFIX);\n+        if (status == null) {\n+            log.debug(\"Handle new request for key: \" + key);\n+            long ttl = getTTLSeconds();\n+            store.put(key + NuxeoIdempotentFilter.INFO_SUFFIX, NuxeoIdempotentFilter.INPROGRESS_MARKER, ttl);\n+            try {\n+                CopyingResponseWrapper wrapper = new CopyingResponseWrapper(DEFERRED_OUTPUT_STREAM_THRESHOLD, response);\n+                chain.doFilter(request, wrapper);\n+                store.put(key, wrapper.getCaptureAsBytes(), ttl);\n+                store.put(key + NuxeoIdempotentFilter.INFO_SUFFIX, NuxeoIdempotentResponse.write(wrapper), ttl);\n+                log.debug(\"Stored response for key: \" + key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjQ2MDk0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODozODo0NlrOIKu-uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODozODo0NlrOIKu-uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEyNjM5Mg==", "bodyText": "Let's make this {\"inprogress\":true} so that it's at least valid JSON.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548126392", "createdAt": "2020-12-23T18:38:46Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter implements Filter {\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final long DEFAULT_TTL_SECONDS = Duration.ofDays(1).toSeconds();\n+\n+    public static final String TTL_SECONDS_PROPERTY = \"org.nuxeo.request.idempotency.ttl.seconds\";\n+\n+    public static final String INPROGRESS_MARKER = \"IDEMPOTENCY_INPROGRESS_MARKER\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjQ4NDk4OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/test/java/org/nuxeo/ecm/platform/web/requestcontroller/filter/TestNuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODo0NDowNFrOIKvOxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDo1NzoxNVrOINtfSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEzMDUwMw==", "bodyText": "Could you add case with a multi-value header? For example Set-Cookie and Accept are common headers seen multiple times.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r548130503", "createdAt": "2020-12-23T18:44:04Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/test/java/org/nuxeo/ecm/platform/web/requestcontroller/filter/TestNuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,386 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.requestcontroller.filter;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.nuxeo.ecm.platform.web.common.idempotency.NuxeoIdempotentFilter;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStoreProvider;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * Checks idempotent requests management.\n+ *\n+ * @since 11.5\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.ecm.platform.web.common:OSGI-INF/web-request-controller-framework.xml\")\n+public class TestNuxeoIdempotentFilter {\n+\n+    protected static final String KEY = \"mykey\";\n+\n+    protected static final String CONTENT = \"test content\";\n+\n+    protected static final Map<String, Collection<String>> RESPONSE_HEADERS = new LinkedHashMap<>();\n+    static {\n+        RESPONSE_HEADERS.put(\"Connection\", List.of(\"Keep-Alive\"));\n+        RESPONSE_HEADERS.put(\"Content-Encoding\", List.of(\"gzip\"));\n+        RESPONSE_HEADERS.put(\"Content-Type\", List.of(\"text/html; charset=utf-8\"));\n+    }\n+\n+    protected NuxeoIdempotentFilter filter;\n+\n+    protected FilterChain chain;\n+\n+    protected HttpServletRequest request;\n+\n+    protected MockResponse mockResponse;\n+\n+    @Inject\n+    protected KeyValueService kvs;\n+\n+    protected KeyValueStoreProvider store;\n+\n+    protected static class MockResponse {\n+\n+        protected HttpServletResponse response;\n+\n+        protected int status;\n+\n+        protected Map<String, Collection<String>> headers = new LinkedHashMap<>();\n+\n+        protected OutputStream output;\n+\n+        public MockResponse() throws IOException {\n+            super();\n+            response = mock(HttpServletResponse.class);\n+            // output mock\n+            output = new ByteArrayOutputStream();\n+            ServletOutputStream servletOutput = mock(ServletOutputStream.class);\n+            doAnswer(invocation -> {\n+                output.write((byte[]) invocation.getArguments()[0]);\n+                return null;\n+            }).when(servletOutput).write(any(byte[].class));\n+            doAnswer(invocation -> {\n+                output.write((Integer) invocation.getArguments()[0]);\n+                return null;\n+            }).when(servletOutput).write(anyInt());\n+            when(response.getOutputStream()).thenReturn(servletOutput);\n+            PrintWriter writer = mock(PrintWriter.class);\n+            doAnswer(invocation -> {\n+                output.write(((String) invocation.getArguments()[0]).getBytes());\n+                return null;\n+            }).when(writer).write(anyString());\n+            doAnswer(invocation -> {\n+                return writer;\n+            }).when(response).getWriter();\n+            when(response.getCharacterEncoding()).thenReturn(UTF_8.name());\n+            // status mock\n+            doAnswer(invocation -> {\n+                return status;\n+            }).when(response).getStatus();\n+            doAnswer(invocation -> {\n+                status = (Integer) invocation.getArguments()[0];\n+                return null;\n+            }).when(response).setStatus(anyInt());\n+            // headers mock\n+            when(response.getHeaderNames()).thenReturn(headers.keySet());\n+            doAnswer(invocation -> {\n+                return headers.get(invocation.getArguments()[0]).stream().findFirst().get();\n+            }).when(response).getHeader(anyString());\n+            doAnswer(invocation -> {\n+                return headers.get(invocation.getArguments()[0]);\n+            }).when(response).getHeaders(anyString());\n+            doAnswer(invocation -> {\n+                headers.put((String) invocation.getArguments()[0], List.of((String) invocation.getArguments()[1]));\n+                return null;\n+            }).when(response).setHeader(anyString(), anyString());\n+            doAnswer(invocation -> {\n+                headers.computeIfAbsent((String) invocation.getArguments()[0], k -> new ArrayList<>())\n+                       .add((String) invocation.getArguments()[1]);\n+                return null;\n+            }).when(response).addHeader(anyString(), anyString());\n+        }\n+\n+        public int getStatus() {\n+            return status;\n+        }\n+\n+        public HttpServletResponse getResponse() {\n+            return response;\n+        }\n+\n+        public OutputStream getOutput() {\n+            return output;\n+        }\n+\n+    }\n+\n+    @Before\n+    public void setUp() throws IOException {\n+        filter = new NuxeoIdempotentFilter();\n+        chain = mock(FilterChain.class);\n+        request = mock(HttpServletRequest.class);\n+        mockResponse = new MockResponse();\n+        // handle store\n+        store = (KeyValueStoreProvider) kvs.getKeyValueStore(NuxeoIdempotentFilter.DEFAULT_STORE);\n+        store.clear();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        if (filter != null) {\n+            filter.destroy();\n+        }\n+        if (store != null) {\n+            store.clear();\n+        }\n+    }\n+\n+    protected void checkResponse(MockResponse mockResponse, Integer status, String content, boolean hasHeaders) {\n+        assertEquals(status, (Integer) mockResponse.getStatus());\n+        assertEquals(content, mockResponse.getOutput().toString());\n+        if (hasHeaders) {\n+            assertEquals(RESPONSE_HEADERS.keySet(), mockResponse.getResponse().getHeaderNames());\n+            RESPONSE_HEADERS.forEach((k, v) -> {\n+                assertEquals(v, mockResponse.getResponse().getHeaders(k));\n+            });\n+        } else {\n+            assertTrue(mockResponse.getResponse().getHeaderNames().isEmpty());\n+        }\n+    }\n+\n+    protected void checkStore(String status, String content) {\n+        assertEquals(content, store.getString(KEY));\n+        String ikey = KEY + NuxeoIdempotentFilter.INFO_SUFFIX;\n+        if (status == null) {\n+            assertNull(store.getString(ikey));\n+        } else {\n+            if (NuxeoIdempotentFilter.INPROGRESS_MARKER.equals(status)) {\n+                assertEquals(status, store.getString(ikey));\n+            } else {\n+                String info = \"{\\\"headers\\\":\" //\n+                        + \"{\\\"Connection\\\":[\\\"Keep-Alive\\\"],\" //\n+                        + \"\\\"Content-Encoding\\\":[\\\"gzip\\\"],\" //\n+                        + \"\\\"Content-Type\\\":[\\\"text/html; charset=utf-8\\\"]\" //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0NzY5MQ==", "bodyText": "Fixed the \"isFirst\" buggy logic with these additional checks \ud83d\udc4d", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r551247691", "createdAt": "2021-01-04T10:57:15Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/test/java/org/nuxeo/ecm/platform/web/requestcontroller/filter/TestNuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,386 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.requestcontroller.filter;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.nuxeo.ecm.platform.web.common.idempotency.NuxeoIdempotentFilter;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStoreProvider;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * Checks idempotent requests management.\n+ *\n+ * @since 11.5\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.ecm.platform.web.common:OSGI-INF/web-request-controller-framework.xml\")\n+public class TestNuxeoIdempotentFilter {\n+\n+    protected static final String KEY = \"mykey\";\n+\n+    protected static final String CONTENT = \"test content\";\n+\n+    protected static final Map<String, Collection<String>> RESPONSE_HEADERS = new LinkedHashMap<>();\n+    static {\n+        RESPONSE_HEADERS.put(\"Connection\", List.of(\"Keep-Alive\"));\n+        RESPONSE_HEADERS.put(\"Content-Encoding\", List.of(\"gzip\"));\n+        RESPONSE_HEADERS.put(\"Content-Type\", List.of(\"text/html; charset=utf-8\"));\n+    }\n+\n+    protected NuxeoIdempotentFilter filter;\n+\n+    protected FilterChain chain;\n+\n+    protected HttpServletRequest request;\n+\n+    protected MockResponse mockResponse;\n+\n+    @Inject\n+    protected KeyValueService kvs;\n+\n+    protected KeyValueStoreProvider store;\n+\n+    protected static class MockResponse {\n+\n+        protected HttpServletResponse response;\n+\n+        protected int status;\n+\n+        protected Map<String, Collection<String>> headers = new LinkedHashMap<>();\n+\n+        protected OutputStream output;\n+\n+        public MockResponse() throws IOException {\n+            super();\n+            response = mock(HttpServletResponse.class);\n+            // output mock\n+            output = new ByteArrayOutputStream();\n+            ServletOutputStream servletOutput = mock(ServletOutputStream.class);\n+            doAnswer(invocation -> {\n+                output.write((byte[]) invocation.getArguments()[0]);\n+                return null;\n+            }).when(servletOutput).write(any(byte[].class));\n+            doAnswer(invocation -> {\n+                output.write((Integer) invocation.getArguments()[0]);\n+                return null;\n+            }).when(servletOutput).write(anyInt());\n+            when(response.getOutputStream()).thenReturn(servletOutput);\n+            PrintWriter writer = mock(PrintWriter.class);\n+            doAnswer(invocation -> {\n+                output.write(((String) invocation.getArguments()[0]).getBytes());\n+                return null;\n+            }).when(writer).write(anyString());\n+            doAnswer(invocation -> {\n+                return writer;\n+            }).when(response).getWriter();\n+            when(response.getCharacterEncoding()).thenReturn(UTF_8.name());\n+            // status mock\n+            doAnswer(invocation -> {\n+                return status;\n+            }).when(response).getStatus();\n+            doAnswer(invocation -> {\n+                status = (Integer) invocation.getArguments()[0];\n+                return null;\n+            }).when(response).setStatus(anyInt());\n+            // headers mock\n+            when(response.getHeaderNames()).thenReturn(headers.keySet());\n+            doAnswer(invocation -> {\n+                return headers.get(invocation.getArguments()[0]).stream().findFirst().get();\n+            }).when(response).getHeader(anyString());\n+            doAnswer(invocation -> {\n+                return headers.get(invocation.getArguments()[0]);\n+            }).when(response).getHeaders(anyString());\n+            doAnswer(invocation -> {\n+                headers.put((String) invocation.getArguments()[0], List.of((String) invocation.getArguments()[1]));\n+                return null;\n+            }).when(response).setHeader(anyString(), anyString());\n+            doAnswer(invocation -> {\n+                headers.computeIfAbsent((String) invocation.getArguments()[0], k -> new ArrayList<>())\n+                       .add((String) invocation.getArguments()[1]);\n+                return null;\n+            }).when(response).addHeader(anyString(), anyString());\n+        }\n+\n+        public int getStatus() {\n+            return status;\n+        }\n+\n+        public HttpServletResponse getResponse() {\n+            return response;\n+        }\n+\n+        public OutputStream getOutput() {\n+            return output;\n+        }\n+\n+    }\n+\n+    @Before\n+    public void setUp() throws IOException {\n+        filter = new NuxeoIdempotentFilter();\n+        chain = mock(FilterChain.class);\n+        request = mock(HttpServletRequest.class);\n+        mockResponse = new MockResponse();\n+        // handle store\n+        store = (KeyValueStoreProvider) kvs.getKeyValueStore(NuxeoIdempotentFilter.DEFAULT_STORE);\n+        store.clear();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        if (filter != null) {\n+            filter.destroy();\n+        }\n+        if (store != null) {\n+            store.clear();\n+        }\n+    }\n+\n+    protected void checkResponse(MockResponse mockResponse, Integer status, String content, boolean hasHeaders) {\n+        assertEquals(status, (Integer) mockResponse.getStatus());\n+        assertEquals(content, mockResponse.getOutput().toString());\n+        if (hasHeaders) {\n+            assertEquals(RESPONSE_HEADERS.keySet(), mockResponse.getResponse().getHeaderNames());\n+            RESPONSE_HEADERS.forEach((k, v) -> {\n+                assertEquals(v, mockResponse.getResponse().getHeaders(k));\n+            });\n+        } else {\n+            assertTrue(mockResponse.getResponse().getHeaderNames().isEmpty());\n+        }\n+    }\n+\n+    protected void checkStore(String status, String content) {\n+        assertEquals(content, store.getString(KEY));\n+        String ikey = KEY + NuxeoIdempotentFilter.INFO_SUFFIX;\n+        if (status == null) {\n+            assertNull(store.getString(ikey));\n+        } else {\n+            if (NuxeoIdempotentFilter.INPROGRESS_MARKER.equals(status)) {\n+                assertEquals(status, store.getString(ikey));\n+            } else {\n+                String info = \"{\\\"headers\\\":\" //\n+                        + \"{\\\"Connection\\\":[\\\"Keep-Alive\\\"],\" //\n+                        + \"\\\"Content-Encoding\\\":[\\\"gzip\\\"],\" //\n+                        + \"\\\"Content-Type\\\":[\\\"text/html; charset=utf-8\\\"]\" //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODEzMDUwMw=="}, "originalCommit": {"oid": "6862e80459534c763a5c14930e00290b00fc7482"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzE0MTQwOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingResponseWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOToyMzoxM1rOIO3ZBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTowNDoyOVrOIO6g5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1ODUwMg==", "bodyText": "Any point making these protected?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552458502", "createdAt": "2021-01-06T09:23:13Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingResponseWrapper.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.output.DeferredFileOutputStream;\n+\n+/**\n+ * Response wrapper that can capture response result, using a {@link DeferredFileOutputStream}.\n+ *\n+ * @since 11.5\n+ */\n+public class CopyingResponseWrapper extends HttpServletResponseWrapper implements AutoCloseable {\n+\n+    private final DeferredFileOutputStream capture;\n+\n+    private ServletOutputStream output;\n+\n+    private PrintWriter writer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83df4398363ae990615b619ee63a2300c81b5477"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUwOTY3MA==", "bodyText": "I can make that change", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552509670", "createdAt": "2021-01-06T11:04:29Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingResponseWrapper.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.output.DeferredFileOutputStream;\n+\n+/**\n+ * Response wrapper that can capture response result, using a {@link DeferredFileOutputStream}.\n+ *\n+ * @since 11.5\n+ */\n+public class CopyingResponseWrapper extends HttpServletResponseWrapper implements AutoCloseable {\n+\n+    private final DeferredFileOutputStream capture;\n+\n+    private ServletOutputStream output;\n+\n+    private PrintWriter writer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ1ODUwMg=="}, "originalCommit": {"oid": "83df4398363ae990615b619ee63a2300c81b5477"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzE3MjI2OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingResponseWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOTozMjozOVrOIO3rmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOTozMjozOVrOIO3rmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2MzI1Nw==", "bodyText": "You can use:\nFiles.delete(file.toPath());\n\nto fix the Sonar warning: Use \"java.nio.file.Files#delete\" here for better messages on error conditions.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552463257", "createdAt": "2021-01-06T09:32:39Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingResponseWrapper.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.output.DeferredFileOutputStream;\n+\n+/**\n+ * Response wrapper that can capture response result, using a {@link DeferredFileOutputStream}.\n+ *\n+ * @since 11.5\n+ */\n+public class CopyingResponseWrapper extends HttpServletResponseWrapper implements AutoCloseable {\n+\n+    private final DeferredFileOutputStream capture;\n+\n+    private ServletOutputStream output;\n+\n+    private PrintWriter writer;\n+\n+    public CopyingResponseWrapper(int threshold, HttpServletResponse response) {\n+        super(response);\n+        capture = new DeferredFileOutputStream(threshold, response.getBufferSize(), \"nxidem\", null, null);\n+    }\n+\n+    protected CopyingServletOutputStream getCopyingOutputStream() throws IOException {\n+        return new CopyingServletOutputStream(getResponse().getOutputStream(), capture);\n+    }\n+\n+    @Override\n+    public ServletOutputStream getOutputStream() throws IOException {\n+        if (writer != null) {\n+            throw new IllegalStateException(\"getWriter() has already been called on this response.\");\n+        }\n+\n+        if (output == null) {\n+            output = getCopyingOutputStream();\n+        }\n+\n+        return output;\n+    }\n+\n+    @Override\n+    public PrintWriter getWriter() throws IOException {\n+        if (output != null) {\n+            throw new IllegalStateException(\"getOutputStream() has already been called on this response.\");\n+        }\n+\n+        if (writer == null) {\n+            writer = new PrintWriter(new OutputStreamWriter(getCopyingOutputStream(), getCharacterEncoding()));\n+        }\n+\n+        return writer;\n+    }\n+\n+    @Override\n+    public void flushBuffer() throws IOException {\n+        super.flushBuffer();\n+\n+        if (writer != null) {\n+            writer.flush();\n+        } else if (output != null) {\n+            output.flush();\n+        }\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        if (writer != null) {\n+            writer.close();\n+        } else if (output != null) {\n+            output.close();\n+        }\n+        if (!capture.isInMemory()) {\n+            // tmp file cleanup\n+            File file = capture.getFile();\n+            if (file != null) {\n+                file.delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83df4398363ae990615b619ee63a2300c81b5477"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzIwMTk3OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOTozODo0MVrOIO396Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMTowNzoyOFrOIO6mFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2Nzk0NQ==", "bodyText": "Can it be null without getService throwing or an exception having been thrown before?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552467945", "createdAt": "2021-01-06T09:38:41Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpFilter;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter extends HttpFilter {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final Duration DEFAULT_TTL = Duration.ofDays(1);\n+\n+    public static final String TTL_DURATION_PROPERTY = \"org.nuxeo.request.idempotency.ttl.duration\";\n+\n+    public static final String INPROGRESS_MARKER = \"{\\\"inprogress\\\":true}\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    protected static final int MAX_CONTENT_SIZE = 1024 * 1024 * 5; // 5 MB\n+\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(\n+            // safe methods according to RFC 7231 4.2.1\n+            HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME,\n+            // idempotent methods according to RFC 7231 4.2.2\n+            HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected Duration getTTL() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83df4398363ae990615b619ee63a2300c81b5477"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUxMDk5OA==", "bodyText": "getService will throw an error only if the runtime is not initialized, otherwise it could return null until the target component is activated (which can in theory happen as the servlet can be called regardless of the runtime status, especially during hot reload, but at startup too)", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552510998", "createdAt": "2021-01-06T11:07:28Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpFilter;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter extends HttpFilter {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final Duration DEFAULT_TTL = Duration.ofDays(1);\n+\n+    public static final String TTL_DURATION_PROPERTY = \"org.nuxeo.request.idempotency.ttl.duration\";\n+\n+    public static final String INPROGRESS_MARKER = \"{\\\"inprogress\\\":true}\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    protected static final int MAX_CONTENT_SIZE = 1024 * 1024 * 5; // 5 MB\n+\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(\n+            // safe methods according to RFC 7231 4.2.1\n+            HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME,\n+            // idempotent methods according to RFC 7231 4.2.2\n+            HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected Duration getTTL() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2Nzk0NQ=="}, "originalCommit": {"oid": "83df4398363ae990615b619ee63a2300c81b5477"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzIwNDc4OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOTozOTozM1rOIO3_kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMToxMjo0OFrOIO6u6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2ODM2OQ==", "bodyText": "Same remark as above, can this happen?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552468369", "createdAt": "2021-01-06T09:39:33Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpFilter;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter extends HttpFilter {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final Duration DEFAULT_TTL = Duration.ofDays(1);\n+\n+    public static final String TTL_DURATION_PROPERTY = \"org.nuxeo.request.idempotency.ttl.duration\";\n+\n+    public static final String INPROGRESS_MARKER = \"{\\\"inprogress\\\":true}\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    protected static final int MAX_CONTENT_SIZE = 1024 * 1024 * 5; // 5 MB\n+\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(\n+            // safe methods according to RFC 7231 4.2.1\n+            HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME,\n+            // idempotent methods according to RFC 7231 4.2.2\n+            HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected Duration getTTL() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getDuration(TTL_DURATION_PROPERTY, DEFAULT_TTL);\n+        }\n+        return DEFAULT_TTL;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    @Override\n+    protected void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!doFilterIdempotent(request, response, chain)) {\n+            chain.doFilter(request, response);\n+        }\n+    }\n+\n+    protected boolean doFilterIdempotent(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        if (IDEMPOTENT_METHODS.contains(method)) {\n+            log.debug(\"No idempotent processing done: method is already idempotent: {}\", method);\n+            return false;\n+        }\n+        String key = request.getHeader(HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent processing done: no {} header present\", HEADER_KEY);\n+            return false;\n+        }\n+        log.debug(\"Idempotent request key: {}\", key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83df4398363ae990615b619ee63a2300c81b5477"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUxMzI1Ng==", "bodyText": "In theory yes (and Florent stated earlier \"You should protect against NPEs here, for the service and the store. Filters may be called very early/late and independently of Nuxeo startup itself.\")", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552513256", "createdAt": "2021-01-06T11:12:48Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpFilter;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter extends HttpFilter {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final Duration DEFAULT_TTL = Duration.ofDays(1);\n+\n+    public static final String TTL_DURATION_PROPERTY = \"org.nuxeo.request.idempotency.ttl.duration\";\n+\n+    public static final String INPROGRESS_MARKER = \"{\\\"inprogress\\\":true}\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    protected static final int MAX_CONTENT_SIZE = 1024 * 1024 * 5; // 5 MB\n+\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(\n+            // safe methods according to RFC 7231 4.2.1\n+            HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME,\n+            // idempotent methods according to RFC 7231 4.2.2\n+            HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected Duration getTTL() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getDuration(TTL_DURATION_PROPERTY, DEFAULT_TTL);\n+        }\n+        return DEFAULT_TTL;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    @Override\n+    protected void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!doFilterIdempotent(request, response, chain)) {\n+            chain.doFilter(request, response);\n+        }\n+    }\n+\n+    protected boolean doFilterIdempotent(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        if (IDEMPOTENT_METHODS.contains(method)) {\n+            log.debug(\"No idempotent processing done: method is already idempotent: {}\", method);\n+            return false;\n+        }\n+        String key = request.getHeader(HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent processing done: no {} header present\", HEADER_KEY);\n+            return false;\n+        }\n+        log.debug(\"Idempotent request key: {}\", key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ2ODM2OQ=="}, "originalCommit": {"oid": "83df4398363ae990615b619ee63a2300c81b5477"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzI1Mzk1OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOTo1MzozNFrOIO4cPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMToxNjowNVrOIO604Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ3NTcwOQ==", "bodyText": "Why don't we need chain.doFilter(request, wrapper); in this block?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552475709", "createdAt": "2021-01-06T09:53:34Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpFilter;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter extends HttpFilter {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final Duration DEFAULT_TTL = Duration.ofDays(1);\n+\n+    public static final String TTL_DURATION_PROPERTY = \"org.nuxeo.request.idempotency.ttl.duration\";\n+\n+    public static final String INPROGRESS_MARKER = \"{\\\"inprogress\\\":true}\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    protected static final int MAX_CONTENT_SIZE = 1024 * 1024 * 5; // 5 MB\n+\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(\n+            // safe methods according to RFC 7231 4.2.1\n+            HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME,\n+            // idempotent methods according to RFC 7231 4.2.2\n+            HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected Duration getTTL() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getDuration(TTL_DURATION_PROPERTY, DEFAULT_TTL);\n+        }\n+        return DEFAULT_TTL;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    @Override\n+    protected void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!doFilterIdempotent(request, response, chain)) {\n+            chain.doFilter(request, response);\n+        }\n+    }\n+\n+    protected boolean doFilterIdempotent(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        if (IDEMPOTENT_METHODS.contains(method)) {\n+            log.debug(\"No idempotent processing done: method is already idempotent: {}\", method);\n+            return false;\n+        }\n+        String key = request.getHeader(HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent processing done: no {} header present\", HEADER_KEY);\n+            return false;\n+        }\n+        log.debug(\"Idempotent request key: {}\", key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueService not present\");\n+            return false;\n+        }\n+        KeyValueStore store = kvs.getKeyValueStore(getStoreName());\n+        String status = store.getString(key + INFO_SUFFIX);\n+        if (status == null) {\n+            log.debug(\"Handle new request for key: {}\", key);\n+            long ttl = getTTL().toSeconds();\n+            store.put(key + INFO_SUFFIX, INPROGRESS_MARKER, ttl);\n+            try {\n+                try (CopyingResponseWrapper wrapper = new CopyingResponseWrapper(DEFERRED_OUTPUT_STREAM_THRESHOLD,\n+                        response)) {\n+                    chain.doFilter(request, wrapper);\n+                    wrapper.flushBuffer();\n+                    byte[] content = wrapper.getCaptureAsBytes();\n+                    if (content.length > MAX_CONTENT_SIZE) {\n+                        log.debug(\n+                                \"Not storing response for key: {} (status: {}, size in bytes: {}), max content size exceeded: {}\",\n+                                key, wrapper.getStatus(), content.length, MAX_CONTENT_SIZE);\n+                        return true;\n+                    }\n+                    store.put(key, content, ttl);\n+                    store.put(key + INFO_SUFFIX, NuxeoIdempotentResponse.write(wrapper), ttl);\n+                    log.debug(\"Stored response for key: {} (status: {}, size in bytes: {})\", key, wrapper.getStatus(),\n+                            content.length);\n+                    return true;\n+                }\n+            } catch (IOException | ServletException e) {\n+                response.setStatus(SC_INTERNAL_SERVER_ERROR);\n+                throw e;\n+            } finally {\n+                if (response.getStatus() >= SC_BAD_REQUEST) {\n+                    // error request: cleanup store\n+                    store.put(key, (String) null);\n+                    store.put(key + INFO_SUFFIX, (String) null);\n+                    log.debug(\"Cleanup store: error for key: {}\", key);\n+                }\n+            }\n+        } else if (INPROGRESS_MARKER.equals(status)) {\n+            // request already in progress -> conflict", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83df4398363ae990615b619ee63a2300c81b5477"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUxNDc4NQ==", "bodyText": "That's the goal of idempotent processing: we want to protect against the request to be processed (here because it is already being processed)", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552514785", "createdAt": "2021-01-06T11:16:05Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpFilter;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter extends HttpFilter {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final Duration DEFAULT_TTL = Duration.ofDays(1);\n+\n+    public static final String TTL_DURATION_PROPERTY = \"org.nuxeo.request.idempotency.ttl.duration\";\n+\n+    public static final String INPROGRESS_MARKER = \"{\\\"inprogress\\\":true}\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    protected static final int MAX_CONTENT_SIZE = 1024 * 1024 * 5; // 5 MB\n+\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(\n+            // safe methods according to RFC 7231 4.2.1\n+            HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME,\n+            // idempotent methods according to RFC 7231 4.2.2\n+            HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected Duration getTTL() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getDuration(TTL_DURATION_PROPERTY, DEFAULT_TTL);\n+        }\n+        return DEFAULT_TTL;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    @Override\n+    protected void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!doFilterIdempotent(request, response, chain)) {\n+            chain.doFilter(request, response);\n+        }\n+    }\n+\n+    protected boolean doFilterIdempotent(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        if (IDEMPOTENT_METHODS.contains(method)) {\n+            log.debug(\"No idempotent processing done: method is already idempotent: {}\", method);\n+            return false;\n+        }\n+        String key = request.getHeader(HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent processing done: no {} header present\", HEADER_KEY);\n+            return false;\n+        }\n+        log.debug(\"Idempotent request key: {}\", key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueService not present\");\n+            return false;\n+        }\n+        KeyValueStore store = kvs.getKeyValueStore(getStoreName());\n+        String status = store.getString(key + INFO_SUFFIX);\n+        if (status == null) {\n+            log.debug(\"Handle new request for key: {}\", key);\n+            long ttl = getTTL().toSeconds();\n+            store.put(key + INFO_SUFFIX, INPROGRESS_MARKER, ttl);\n+            try {\n+                try (CopyingResponseWrapper wrapper = new CopyingResponseWrapper(DEFERRED_OUTPUT_STREAM_THRESHOLD,\n+                        response)) {\n+                    chain.doFilter(request, wrapper);\n+                    wrapper.flushBuffer();\n+                    byte[] content = wrapper.getCaptureAsBytes();\n+                    if (content.length > MAX_CONTENT_SIZE) {\n+                        log.debug(\n+                                \"Not storing response for key: {} (status: {}, size in bytes: {}), max content size exceeded: {}\",\n+                                key, wrapper.getStatus(), content.length, MAX_CONTENT_SIZE);\n+                        return true;\n+                    }\n+                    store.put(key, content, ttl);\n+                    store.put(key + INFO_SUFFIX, NuxeoIdempotentResponse.write(wrapper), ttl);\n+                    log.debug(\"Stored response for key: {} (status: {}, size in bytes: {})\", key, wrapper.getStatus(),\n+                            content.length);\n+                    return true;\n+                }\n+            } catch (IOException | ServletException e) {\n+                response.setStatus(SC_INTERNAL_SERVER_ERROR);\n+                throw e;\n+            } finally {\n+                if (response.getStatus() >= SC_BAD_REQUEST) {\n+                    // error request: cleanup store\n+                    store.put(key, (String) null);\n+                    store.put(key + INFO_SUFFIX, (String) null);\n+                    log.debug(\"Cleanup store: error for key: {}\", key);\n+                }\n+            }\n+        } else if (INPROGRESS_MARKER.equals(status)) {\n+            // request already in progress -> conflict", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ3NTcwOQ=="}, "originalCommit": {"oid": "83df4398363ae990615b619ee63a2300c81b5477"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzI1NTgzOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOTo1NDowM1rOIO4dVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMToxNTo1NFrOIO60jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ3NTk5MQ==", "bodyText": "Same remark: why don't we need chain.doFilter(request, wrapper); in this block?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552475991", "createdAt": "2021-01-06T09:54:03Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpFilter;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter extends HttpFilter {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final Duration DEFAULT_TTL = Duration.ofDays(1);\n+\n+    public static final String TTL_DURATION_PROPERTY = \"org.nuxeo.request.idempotency.ttl.duration\";\n+\n+    public static final String INPROGRESS_MARKER = \"{\\\"inprogress\\\":true}\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    protected static final int MAX_CONTENT_SIZE = 1024 * 1024 * 5; // 5 MB\n+\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(\n+            // safe methods according to RFC 7231 4.2.1\n+            HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME,\n+            // idempotent methods according to RFC 7231 4.2.2\n+            HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected Duration getTTL() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getDuration(TTL_DURATION_PROPERTY, DEFAULT_TTL);\n+        }\n+        return DEFAULT_TTL;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    @Override\n+    protected void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!doFilterIdempotent(request, response, chain)) {\n+            chain.doFilter(request, response);\n+        }\n+    }\n+\n+    protected boolean doFilterIdempotent(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        if (IDEMPOTENT_METHODS.contains(method)) {\n+            log.debug(\"No idempotent processing done: method is already idempotent: {}\", method);\n+            return false;\n+        }\n+        String key = request.getHeader(HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent processing done: no {} header present\", HEADER_KEY);\n+            return false;\n+        }\n+        log.debug(\"Idempotent request key: {}\", key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueService not present\");\n+            return false;\n+        }\n+        KeyValueStore store = kvs.getKeyValueStore(getStoreName());\n+        String status = store.getString(key + INFO_SUFFIX);\n+        if (status == null) {\n+            log.debug(\"Handle new request for key: {}\", key);\n+            long ttl = getTTL().toSeconds();\n+            store.put(key + INFO_SUFFIX, INPROGRESS_MARKER, ttl);\n+            try {\n+                try (CopyingResponseWrapper wrapper = new CopyingResponseWrapper(DEFERRED_OUTPUT_STREAM_THRESHOLD,\n+                        response)) {\n+                    chain.doFilter(request, wrapper);\n+                    wrapper.flushBuffer();\n+                    byte[] content = wrapper.getCaptureAsBytes();\n+                    if (content.length > MAX_CONTENT_SIZE) {\n+                        log.debug(\n+                                \"Not storing response for key: {} (status: {}, size in bytes: {}), max content size exceeded: {}\",\n+                                key, wrapper.getStatus(), content.length, MAX_CONTENT_SIZE);\n+                        return true;\n+                    }\n+                    store.put(key, content, ttl);\n+                    store.put(key + INFO_SUFFIX, NuxeoIdempotentResponse.write(wrapper), ttl);\n+                    log.debug(\"Stored response for key: {} (status: {}, size in bytes: {})\", key, wrapper.getStatus(),\n+                            content.length);\n+                    return true;\n+                }\n+            } catch (IOException | ServletException e) {\n+                response.setStatus(SC_INTERNAL_SERVER_ERROR);\n+                throw e;\n+            } finally {\n+                if (response.getStatus() >= SC_BAD_REQUEST) {\n+                    // error request: cleanup store\n+                    store.put(key, (String) null);\n+                    store.put(key + INFO_SUFFIX, (String) null);\n+                    log.debug(\"Cleanup store: error for key: {}\", key);\n+                }\n+            }\n+        } else if (INPROGRESS_MARKER.equals(status)) {\n+            // request already in progress -> conflict\n+            // Don't call response.sendError, because it commits the response\n+            // which prevents NuxeoExceptionFilter from returning a custom error page.\n+            response.setStatus(SC_CONFLICT);\n+            log.debug(\"Conflict response for key: {}\", key);\n+            return true;\n+        } else {\n+            try {\n+                // request already done: return stored result", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83df4398363ae990615b619ee63a2300c81b5477"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUxNDcwMw==", "bodyText": "Here because it was already processed: if we called the filter chain, the request would be processed again and potentially break idempotency (for Drive use case, the file would be imported again, and a new document would be created again)", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552514703", "createdAt": "2021-01-06T11:15:54Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpFilter;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter extends HttpFilter {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final Duration DEFAULT_TTL = Duration.ofDays(1);\n+\n+    public static final String TTL_DURATION_PROPERTY = \"org.nuxeo.request.idempotency.ttl.duration\";\n+\n+    public static final String INPROGRESS_MARKER = \"{\\\"inprogress\\\":true}\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    protected static final int MAX_CONTENT_SIZE = 1024 * 1024 * 5; // 5 MB\n+\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(\n+            // safe methods according to RFC 7231 4.2.1\n+            HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME,\n+            // idempotent methods according to RFC 7231 4.2.2\n+            HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected Duration getTTL() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getDuration(TTL_DURATION_PROPERTY, DEFAULT_TTL);\n+        }\n+        return DEFAULT_TTL;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    @Override\n+    protected void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!doFilterIdempotent(request, response, chain)) {\n+            chain.doFilter(request, response);\n+        }\n+    }\n+\n+    protected boolean doFilterIdempotent(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        if (IDEMPOTENT_METHODS.contains(method)) {\n+            log.debug(\"No idempotent processing done: method is already idempotent: {}\", method);\n+            return false;\n+        }\n+        String key = request.getHeader(HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent processing done: no {} header present\", HEADER_KEY);\n+            return false;\n+        }\n+        log.debug(\"Idempotent request key: {}\", key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueService not present\");\n+            return false;\n+        }\n+        KeyValueStore store = kvs.getKeyValueStore(getStoreName());\n+        String status = store.getString(key + INFO_SUFFIX);\n+        if (status == null) {\n+            log.debug(\"Handle new request for key: {}\", key);\n+            long ttl = getTTL().toSeconds();\n+            store.put(key + INFO_SUFFIX, INPROGRESS_MARKER, ttl);\n+            try {\n+                try (CopyingResponseWrapper wrapper = new CopyingResponseWrapper(DEFERRED_OUTPUT_STREAM_THRESHOLD,\n+                        response)) {\n+                    chain.doFilter(request, wrapper);\n+                    wrapper.flushBuffer();\n+                    byte[] content = wrapper.getCaptureAsBytes();\n+                    if (content.length > MAX_CONTENT_SIZE) {\n+                        log.debug(\n+                                \"Not storing response for key: {} (status: {}, size in bytes: {}), max content size exceeded: {}\",\n+                                key, wrapper.getStatus(), content.length, MAX_CONTENT_SIZE);\n+                        return true;\n+                    }\n+                    store.put(key, content, ttl);\n+                    store.put(key + INFO_SUFFIX, NuxeoIdempotentResponse.write(wrapper), ttl);\n+                    log.debug(\"Stored response for key: {} (status: {}, size in bytes: {})\", key, wrapper.getStatus(),\n+                            content.length);\n+                    return true;\n+                }\n+            } catch (IOException | ServletException e) {\n+                response.setStatus(SC_INTERNAL_SERVER_ERROR);\n+                throw e;\n+            } finally {\n+                if (response.getStatus() >= SC_BAD_REQUEST) {\n+                    // error request: cleanup store\n+                    store.put(key, (String) null);\n+                    store.put(key + INFO_SUFFIX, (String) null);\n+                    log.debug(\"Cleanup store: error for key: {}\", key);\n+                }\n+            }\n+        } else if (INPROGRESS_MARKER.equals(status)) {\n+            // request already in progress -> conflict\n+            // Don't call response.sendError, because it commits the response\n+            // which prevents NuxeoExceptionFilter from returning a custom error page.\n+            response.setStatus(SC_CONFLICT);\n+            log.debug(\"Conflict response for key: {}\", key);\n+            return true;\n+        } else {\n+            try {\n+                // request already done: return stored result", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ3NTk5MQ=="}, "originalCommit": {"oid": "83df4398363ae990615b619ee63a2300c81b5477"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzI3MDA5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwOTo1ODoxOFrOIO4lvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMToyMjoxMFrOIO6_MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ3ODE0Mg==", "bodyText": "Do we need to handle the edge case where the entry would expire between the previous call to store.getString(key + INFO_SUFFIX) and this call: store.get(key), in which case the latter would return null?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552478142", "createdAt": "2021-01-06T09:58:18Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpFilter;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter extends HttpFilter {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final Duration DEFAULT_TTL = Duration.ofDays(1);\n+\n+    public static final String TTL_DURATION_PROPERTY = \"org.nuxeo.request.idempotency.ttl.duration\";\n+\n+    public static final String INPROGRESS_MARKER = \"{\\\"inprogress\\\":true}\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    protected static final int MAX_CONTENT_SIZE = 1024 * 1024 * 5; // 5 MB\n+\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(\n+            // safe methods according to RFC 7231 4.2.1\n+            HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME,\n+            // idempotent methods according to RFC 7231 4.2.2\n+            HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected Duration getTTL() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getDuration(TTL_DURATION_PROPERTY, DEFAULT_TTL);\n+        }\n+        return DEFAULT_TTL;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    @Override\n+    protected void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!doFilterIdempotent(request, response, chain)) {\n+            chain.doFilter(request, response);\n+        }\n+    }\n+\n+    protected boolean doFilterIdempotent(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        if (IDEMPOTENT_METHODS.contains(method)) {\n+            log.debug(\"No idempotent processing done: method is already idempotent: {}\", method);\n+            return false;\n+        }\n+        String key = request.getHeader(HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent processing done: no {} header present\", HEADER_KEY);\n+            return false;\n+        }\n+        log.debug(\"Idempotent request key: {}\", key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueService not present\");\n+            return false;\n+        }\n+        KeyValueStore store = kvs.getKeyValueStore(getStoreName());\n+        String status = store.getString(key + INFO_SUFFIX);\n+        if (status == null) {\n+            log.debug(\"Handle new request for key: {}\", key);\n+            long ttl = getTTL().toSeconds();\n+            store.put(key + INFO_SUFFIX, INPROGRESS_MARKER, ttl);\n+            try {\n+                try (CopyingResponseWrapper wrapper = new CopyingResponseWrapper(DEFERRED_OUTPUT_STREAM_THRESHOLD,\n+                        response)) {\n+                    chain.doFilter(request, wrapper);\n+                    wrapper.flushBuffer();\n+                    byte[] content = wrapper.getCaptureAsBytes();\n+                    if (content.length > MAX_CONTENT_SIZE) {\n+                        log.debug(\n+                                \"Not storing response for key: {} (status: {}, size in bytes: {}), max content size exceeded: {}\",\n+                                key, wrapper.getStatus(), content.length, MAX_CONTENT_SIZE);\n+                        return true;\n+                    }\n+                    store.put(key, content, ttl);\n+                    store.put(key + INFO_SUFFIX, NuxeoIdempotentResponse.write(wrapper), ttl);\n+                    log.debug(\"Stored response for key: {} (status: {}, size in bytes: {})\", key, wrapper.getStatus(),\n+                            content.length);\n+                    return true;\n+                }\n+            } catch (IOException | ServletException e) {\n+                response.setStatus(SC_INTERNAL_SERVER_ERROR);\n+                throw e;\n+            } finally {\n+                if (response.getStatus() >= SC_BAD_REQUEST) {\n+                    // error request: cleanup store\n+                    store.put(key, (String) null);\n+                    store.put(key + INFO_SUFFIX, (String) null);\n+                    log.debug(\"Cleanup store: error for key: {}\", key);\n+                }\n+            }\n+        } else if (INPROGRESS_MARKER.equals(status)) {\n+            // request already in progress -> conflict\n+            // Don't call response.sendError, because it commits the response\n+            // which prevents NuxeoExceptionFilter from returning a custom error page.\n+            response.setStatus(SC_CONFLICT);\n+            log.debug(\"Conflict response for key: {}\", key);\n+            return true;\n+        } else {\n+            try {\n+                // request already done: return stored result\n+                NuxeoIdempotentResponse.restore(response, store.get(key + INFO_SUFFIX));\n+                byte[] content = store.get(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83df4398363ae990615b619ee63a2300c81b5477"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjUxNzQyNQ==", "bodyText": "In practice it would be very bad luck but maybe this can be made safer indeed", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552517425", "createdAt": "2021-01-06T11:22:10Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpFilter;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter extends HttpFilter {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final Duration DEFAULT_TTL = Duration.ofDays(1);\n+\n+    public static final String TTL_DURATION_PROPERTY = \"org.nuxeo.request.idempotency.ttl.duration\";\n+\n+    public static final String INPROGRESS_MARKER = \"{\\\"inprogress\\\":true}\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    protected static final int MAX_CONTENT_SIZE = 1024 * 1024 * 5; // 5 MB\n+\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(\n+            // safe methods according to RFC 7231 4.2.1\n+            HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME,\n+            // idempotent methods according to RFC 7231 4.2.2\n+            HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected Duration getTTL() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getDuration(TTL_DURATION_PROPERTY, DEFAULT_TTL);\n+        }\n+        return DEFAULT_TTL;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    @Override\n+    protected void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!doFilterIdempotent(request, response, chain)) {\n+            chain.doFilter(request, response);\n+        }\n+    }\n+\n+    protected boolean doFilterIdempotent(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        if (IDEMPOTENT_METHODS.contains(method)) {\n+            log.debug(\"No idempotent processing done: method is already idempotent: {}\", method);\n+            return false;\n+        }\n+        String key = request.getHeader(HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent processing done: no {} header present\", HEADER_KEY);\n+            return false;\n+        }\n+        log.debug(\"Idempotent request key: {}\", key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueService not present\");\n+            return false;\n+        }\n+        KeyValueStore store = kvs.getKeyValueStore(getStoreName());\n+        String status = store.getString(key + INFO_SUFFIX);\n+        if (status == null) {\n+            log.debug(\"Handle new request for key: {}\", key);\n+            long ttl = getTTL().toSeconds();\n+            store.put(key + INFO_SUFFIX, INPROGRESS_MARKER, ttl);\n+            try {\n+                try (CopyingResponseWrapper wrapper = new CopyingResponseWrapper(DEFERRED_OUTPUT_STREAM_THRESHOLD,\n+                        response)) {\n+                    chain.doFilter(request, wrapper);\n+                    wrapper.flushBuffer();\n+                    byte[] content = wrapper.getCaptureAsBytes();\n+                    if (content.length > MAX_CONTENT_SIZE) {\n+                        log.debug(\n+                                \"Not storing response for key: {} (status: {}, size in bytes: {}), max content size exceeded: {}\",\n+                                key, wrapper.getStatus(), content.length, MAX_CONTENT_SIZE);\n+                        return true;\n+                    }\n+                    store.put(key, content, ttl);\n+                    store.put(key + INFO_SUFFIX, NuxeoIdempotentResponse.write(wrapper), ttl);\n+                    log.debug(\"Stored response for key: {} (status: {}, size in bytes: {})\", key, wrapper.getStatus(),\n+                            content.length);\n+                    return true;\n+                }\n+            } catch (IOException | ServletException e) {\n+                response.setStatus(SC_INTERNAL_SERVER_ERROR);\n+                throw e;\n+            } finally {\n+                if (response.getStatus() >= SC_BAD_REQUEST) {\n+                    // error request: cleanup store\n+                    store.put(key, (String) null);\n+                    store.put(key + INFO_SUFFIX, (String) null);\n+                    log.debug(\"Cleanup store: error for key: {}\", key);\n+                }\n+            }\n+        } else if (INPROGRESS_MARKER.equals(status)) {\n+            // request already in progress -> conflict\n+            // Don't call response.sendError, because it commits the response\n+            // which prevents NuxeoExceptionFilter from returning a custom error page.\n+            response.setStatus(SC_CONFLICT);\n+            log.debug(\"Conflict response for key: {}\", key);\n+            return true;\n+        } else {\n+            try {\n+                // request already done: return stored result\n+                NuxeoIdempotentResponse.restore(response, store.get(key + INFO_SUFFIX));\n+                byte[] content = store.get(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ3ODE0Mg=="}, "originalCommit": {"oid": "83df4398363ae990615b619ee63a2300c81b5477"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzI4Mjk1OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/test/java/org/nuxeo/ecm/platform/web/idempotency/TestNuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMDowMjozOVrOIO4t0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMzo0MjoyNFrOIPBalA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ4MDIxMA==", "bodyText": "There are quite a few Sonar warnings about:\n\nRemove useless curly braces around statement.\nRemove useless curly braces around statement and then remove useless return keyword.\nDefine and throw a dedicated exception instead of using a generic one.\n\nEasy to fix if you can take the time!", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552480210", "createdAt": "2021-01-06T10:02:39Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-web-common/src/test/java/org/nuxeo/ecm/platform/web/idempotency/TestNuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.idempotency;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.nuxeo.ecm.platform.web.common.idempotency.NuxeoIdempotentFilter;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStoreProvider;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * Checks idempotent requests management.\n+ *\n+ * @since 11.5\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.ecm.platform.web.common:OSGI-INF/idempotency-configuration.xml\")\n+public class TestNuxeoIdempotentFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83df4398363ae990615b619ee63a2300c81b5477"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjYyMjc0MA==", "bodyText": "I fixed a few, please tell if you see remaining ones.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552622740", "createdAt": "2021-01-06T13:42:24Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/test/java/org/nuxeo/ecm/platform/web/idempotency/TestNuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,397 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.idempotency;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.nuxeo.ecm.platform.web.common.idempotency.NuxeoIdempotentFilter;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStoreProvider;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * Checks idempotent requests management.\n+ *\n+ * @since 11.5\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.ecm.platform.web.common:OSGI-INF/idempotency-configuration.xml\")\n+public class TestNuxeoIdempotentFilter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ4MDIxMA=="}, "originalCommit": {"oid": "83df4398363ae990615b619ee63a2300c81b5477"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzI4OTc5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/test/java/org/nuxeo/ecm/platform/web/idempotency/TestNuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMDowNDo1MlrOIO4x3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMDowNDo1MlrOIO4x3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ4MTI0NQ==", "bodyText": "missing blank line", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552481245", "createdAt": "2021-01-06T10:04:52Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-web-common/src/test/java/org/nuxeo/ecm/platform/web/idempotency/TestNuxeoIdempotentFilter.java", "diffHunk": "@@ -93,6 +93,12 @@\n         RESPONSE_HEADERS.put(\"Set-Cookie\", List.of(\"sessionId=38afes7a8\", \"id=a3fWa; Max-Age=2592000\"));\n     }\n \n+    protected static final Map<String, Collection<String>> FINAL_RESPONSE_HEADERS = new LinkedHashMap<>();\n+    static {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed65a6ea0c759429287d826238d59aa99c165dcc"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NzI5ODc5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMDowNzoxOVrOIO43IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxNDoxMDo1OVrOIPC6KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ4MjU5Mg==", "bodyText": "Cant this call and the subsequent ones be factorized? Or is there a case where we don't want to set this header?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552482592", "createdAt": "2021-01-06T10:07:19Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -149,13 +149,15 @@ protected boolean doFilterIdempotent(HttpServletRequest request, HttpServletResp\n                                 key, wrapper.getStatus(), content.length, MAX_CONTENT_SIZE);\n                         return true;\n                     }\n+                    response.setHeader(HEADER_KEY, key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed65a6ea0c759429287d826238d59aa99c165dcc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjYxNDc5Mw==", "bodyText": "I did not find any better way to handle it given the fact that response is wrapped when being processed (for response copy) and because of the pattern to return a boolean, as asked by Florent, to avoid repeating calls to chain.doFilter whenever the request is not handled.\nNote I did not set this header either when the response is too big to be stored in the KV store (maybe it should still be added ?)", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552614793", "createdAt": "2021-01-06T13:33:28Z", "author": {"login": "atchertchian"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -149,13 +149,15 @@ protected boolean doFilterIdempotent(HttpServletRequest request, HttpServletResp\n                                 key, wrapper.getStatus(), content.length, MAX_CONTENT_SIZE);\n                         return true;\n                     }\n+                    response.setHeader(HEADER_KEY, key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ4MjU5Mg=="}, "originalCommit": {"oid": "ed65a6ea0c759429287d826238d59aa99c165dcc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY0NzIwOQ==", "bodyText": "OK.\n\nmaybe it should still be added ?\n\nI'd say yes", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r552647209", "createdAt": "2021-01-06T14:10:59Z", "author": {"login": "ataillefer"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -149,13 +149,15 @@ protected boolean doFilterIdempotent(HttpServletRequest request, HttpServletResp\n                                 key, wrapper.getStatus(), content.length, MAX_CONTENT_SIZE);\n                         return true;\n                     }\n+                    response.setHeader(HEADER_KEY, key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ4MjU5Mg=="}, "originalCommit": {"oid": "ed65a6ea0c759429287d826238d59aa99c165dcc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MzY5ODY5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingResponseWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNzo1MTo1MVrOIP2KvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNzo1MTo1MVrOIP2KvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ4NzAzNw==", "bodyText": "Can you call this copy instead? Same in CopyingServletOutputStream.\nAlso, detail, define that field last like in CopyingServletOutputStream. Or both first, but be consistent.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r553487037", "createdAt": "2021-01-07T17:51:51Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingResponseWrapper.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.nio.file.Files;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.output.DeferredFileOutputStream;\n+\n+/**\n+ * Response wrapper that can capture response result, using a {@link DeferredFileOutputStream}.\n+ *\n+ * @since 11.5\n+ */\n+public class CopyingResponseWrapper extends HttpServletResponseWrapper implements AutoCloseable {\n+\n+    protected final DeferredFileOutputStream capture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60b9d9884031ab0dbd8e68fd9d1867d05da526cc"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MzcwMzUxOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingResponseWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNzo1MzoxOFrOIP2NuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNzo1MzoxOFrOIP2NuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ4NzgwMA==", "bodyText": "Could you add a comment: // invariant: only one of output or writer may be non-null, never both at the same time", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r553487800", "createdAt": "2021-01-07T17:53:18Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingResponseWrapper.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.nio.file.Files;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.output.DeferredFileOutputStream;\n+\n+/**\n+ * Response wrapper that can capture response result, using a {@link DeferredFileOutputStream}.\n+ *\n+ * @since 11.5\n+ */\n+public class CopyingResponseWrapper extends HttpServletResponseWrapper implements AutoCloseable {\n+\n+    protected final DeferredFileOutputStream capture;\n+\n+    protected ServletOutputStream output;\n+\n+    protected PrintWriter writer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60b9d9884031ab0dbd8e68fd9d1867d05da526cc"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MzcxMDUyOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingResponseWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNzo1NToxNVrOIP2SBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNzo1NToxNVrOIP2SBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ4ODkwMg==", "bodyText": "I'd remove all the extra empty lines in these small methods.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r553488902", "createdAt": "2021-01-07T17:55:15Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingResponseWrapper.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.nio.file.Files;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.output.DeferredFileOutputStream;\n+\n+/**\n+ * Response wrapper that can capture response result, using a {@link DeferredFileOutputStream}.\n+ *\n+ * @since 11.5\n+ */\n+public class CopyingResponseWrapper extends HttpServletResponseWrapper implements AutoCloseable {\n+\n+    protected final DeferredFileOutputStream capture;\n+\n+    protected ServletOutputStream output;\n+\n+    protected PrintWriter writer;\n+\n+    public CopyingResponseWrapper(int threshold, HttpServletResponse response) {\n+        super(response);\n+        capture = new DeferredFileOutputStream(threshold, response.getBufferSize(), \"nxidem\", null, null);\n+    }\n+\n+    protected CopyingServletOutputStream getCopyingOutputStream() throws IOException {\n+        return new CopyingServletOutputStream(getResponse().getOutputStream(), capture);\n+    }\n+\n+    @Override\n+    public ServletOutputStream getOutputStream() throws IOException {\n+        if (writer != null) {\n+            throw new IllegalStateException(\"getWriter() has already been called on this response.\");\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60b9d9884031ab0dbd8e68fd9d1867d05da526cc"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MzcyNDU5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingResponseWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNzo1OTowNVrOIP2ahQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNzo1OTowNVrOIP2ahQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ5MTA3Nw==", "bodyText": "Capture->copy here too.\nAs we probably don't want to materialize a huge byte array for nothing, let's also add a getCopySize method and check it first in the caller.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r553491077", "createdAt": "2021-01-07T17:59:05Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/CopyingResponseWrapper.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.nio.file.Files;\n+\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.output.DeferredFileOutputStream;\n+\n+/**\n+ * Response wrapper that can capture response result, using a {@link DeferredFileOutputStream}.\n+ *\n+ * @since 11.5\n+ */\n+public class CopyingResponseWrapper extends HttpServletResponseWrapper implements AutoCloseable {\n+\n+    protected final DeferredFileOutputStream capture;\n+\n+    protected ServletOutputStream output;\n+\n+    protected PrintWriter writer;\n+\n+    public CopyingResponseWrapper(int threshold, HttpServletResponse response) {\n+        super(response);\n+        capture = new DeferredFileOutputStream(threshold, response.getBufferSize(), \"nxidem\", null, null);\n+    }\n+\n+    protected CopyingServletOutputStream getCopyingOutputStream() throws IOException {\n+        return new CopyingServletOutputStream(getResponse().getOutputStream(), capture);\n+    }\n+\n+    @Override\n+    public ServletOutputStream getOutputStream() throws IOException {\n+        if (writer != null) {\n+            throw new IllegalStateException(\"getWriter() has already been called on this response.\");\n+        }\n+\n+        if (output == null) {\n+            output = getCopyingOutputStream();\n+        }\n+\n+        return output;\n+    }\n+\n+    @Override\n+    public PrintWriter getWriter() throws IOException {\n+        if (output != null) {\n+            throw new IllegalStateException(\"getOutputStream() has already been called on this response.\");\n+        }\n+\n+        if (writer == null) {\n+            writer = new PrintWriter(new OutputStreamWriter(getCopyingOutputStream(), getCharacterEncoding()));\n+        }\n+\n+        return writer;\n+    }\n+\n+    @Override\n+    public void flushBuffer() throws IOException {\n+        super.flushBuffer();\n+\n+        if (writer != null) {\n+            writer.flush();\n+        } else if (output != null) {\n+            output.flush();\n+        }\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        if (writer != null) {\n+            writer.close();\n+        } else if (output != null) {\n+            output.close();\n+        }\n+        if (!capture.isInMemory()) {\n+            // tmp file cleanup\n+            File file = capture.getFile();\n+            if (file != null) {\n+                Files.delete(file.toPath());\n+            }\n+        }\n+    }\n+\n+    public byte[] getCaptureAsBytes() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60b9d9884031ab0dbd8e68fd9d1867d05da526cc"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4Mzc2MTA5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxODowOTo1N1rOIP2xZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxODowOTo1N1rOIP2xZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ5NjkzMw==", "bodyText": "You have to set the header before sending the body, because in most cases (unless there's buffering, or in mocked classes) sending the body \"commits\" the response (see ServletResponse.isCommitted) and you can't set any header or status after that.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r553496933", "createdAt": "2021-01-07T18:09:57Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpFilter;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter extends HttpFilter {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final Duration DEFAULT_TTL = Duration.ofDays(1);\n+\n+    public static final String TTL_DURATION_PROPERTY = \"org.nuxeo.request.idempotency.ttl.duration\";\n+\n+    public static final String INPROGRESS_MARKER = \"{\\\"inprogress\\\":true}\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    protected static final int MAX_CONTENT_SIZE = 1024 * 1024 * 5; // 5 MB\n+\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(\n+            // safe methods according to RFC 7231 4.2.1\n+            HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME,\n+            // idempotent methods according to RFC 7231 4.2.2\n+            HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected Duration getTTL() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getDuration(TTL_DURATION_PROPERTY, DEFAULT_TTL);\n+        }\n+        return DEFAULT_TTL;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    @Override\n+    protected void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!doFilterIdempotent(request, response, chain)) {\n+            chain.doFilter(request, response);\n+        }\n+    }\n+\n+    protected boolean doFilterIdempotent(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        if (IDEMPOTENT_METHODS.contains(method)) {\n+            log.debug(\"No idempotent processing done: method is already idempotent: {}\", method);\n+            return false;\n+        }\n+        String key = request.getHeader(HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent processing done: no {} header present\", HEADER_KEY);\n+            return false;\n+        }\n+        log.debug(\"Idempotent request key: {}\", key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueService not present\");\n+            return false;\n+        }\n+        KeyValueStore store = kvs.getKeyValueStore(getStoreName());\n+        String storeStatus = store.getString(key + INFO_SUFFIX);\n+        byte[] storeContent = store.get(key);\n+        if (storeStatus == null) {\n+            log.debug(\"Handle new request for key: {}\", key);\n+            long ttl = getTTL().toSeconds();\n+            store.put(key + INFO_SUFFIX, INPROGRESS_MARKER, ttl);\n+            try {\n+                try (CopyingResponseWrapper wrapper = new CopyingResponseWrapper(DEFERRED_OUTPUT_STREAM_THRESHOLD,\n+                        response)) {\n+                    chain.doFilter(request, wrapper);\n+                    wrapper.flushBuffer();\n+                    byte[] content = wrapper.getCaptureAsBytes();\n+                    wrapper.setHeader(HEADER_KEY, key);\n+                    if (content.length > MAX_CONTENT_SIZE) {\n+                        log.debug(\n+                                \"Not storing response for key: {} (status: {}, size in bytes: {}), max content size exceeded: {}\",\n+                                key, wrapper.getStatus(), content.length, MAX_CONTENT_SIZE);\n+                        return true;\n+                    }\n+                    store.put(key, content, ttl);\n+                    store.put(key + INFO_SUFFIX, NuxeoIdempotentResponse.write(wrapper), ttl);\n+                    log.debug(\"Stored response for key: {} (status: {}, size in bytes: {})\", key, wrapper.getStatus(),\n+                            content.length);\n+                    return true;\n+                }\n+            } catch (IOException | ServletException e) {\n+                response.setHeader(HEADER_KEY, key);\n+                response.setStatus(SC_INTERNAL_SERVER_ERROR);\n+                throw e;\n+            } finally {\n+                if (response.getStatus() >= SC_BAD_REQUEST) {\n+                    // error request: cleanup store\n+                    store.put(key, (String) null);\n+                    store.put(key + INFO_SUFFIX, (String) null);\n+                    log.debug(\"Cleanup store: error for key: {}\", key);\n+                }\n+            }\n+        } else if (INPROGRESS_MARKER.equals(storeStatus)) {\n+            // request already in progress -> conflict\n+            // Don't call response.sendError, because it commits the response\n+            // which prevents NuxeoExceptionFilter from returning a custom error page.\n+            response.setStatus(SC_CONFLICT);\n+            response.setHeader(HEADER_KEY, key);\n+            log.debug(\"Conflict response for key: {}\", key);\n+            return true;\n+        } else {\n+            try {\n+                // request already done: return stored result\n+                NuxeoIdempotentResponse.restore(response, storeStatus.getBytes());\n+                response.getOutputStream().write(storeContent);\n+                response.setHeader(HEADER_KEY, key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60b9d9884031ab0dbd8e68fd9d1867d05da526cc"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4Mzc2NDcyOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxODoxMTowNVrOIP2zrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxODoxMTowNVrOIP2zrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ5NzUxNg==", "bodyText": "This should be wrapped with a if (!response.isCommitted())", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r553497516", "createdAt": "2021-01-07T18:11:05Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpFilter;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter extends HttpFilter {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final Duration DEFAULT_TTL = Duration.ofDays(1);\n+\n+    public static final String TTL_DURATION_PROPERTY = \"org.nuxeo.request.idempotency.ttl.duration\";\n+\n+    public static final String INPROGRESS_MARKER = \"{\\\"inprogress\\\":true}\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    protected static final int MAX_CONTENT_SIZE = 1024 * 1024 * 5; // 5 MB\n+\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(\n+            // safe methods according to RFC 7231 4.2.1\n+            HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME,\n+            // idempotent methods according to RFC 7231 4.2.2\n+            HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected Duration getTTL() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getDuration(TTL_DURATION_PROPERTY, DEFAULT_TTL);\n+        }\n+        return DEFAULT_TTL;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    @Override\n+    protected void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!doFilterIdempotent(request, response, chain)) {\n+            chain.doFilter(request, response);\n+        }\n+    }\n+\n+    protected boolean doFilterIdempotent(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        if (IDEMPOTENT_METHODS.contains(method)) {\n+            log.debug(\"No idempotent processing done: method is already idempotent: {}\", method);\n+            return false;\n+        }\n+        String key = request.getHeader(HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent processing done: no {} header present\", HEADER_KEY);\n+            return false;\n+        }\n+        log.debug(\"Idempotent request key: {}\", key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueService not present\");\n+            return false;\n+        }\n+        KeyValueStore store = kvs.getKeyValueStore(getStoreName());\n+        String storeStatus = store.getString(key + INFO_SUFFIX);\n+        byte[] storeContent = store.get(key);\n+        if (storeStatus == null) {\n+            log.debug(\"Handle new request for key: {}\", key);\n+            long ttl = getTTL().toSeconds();\n+            store.put(key + INFO_SUFFIX, INPROGRESS_MARKER, ttl);\n+            try {\n+                try (CopyingResponseWrapper wrapper = new CopyingResponseWrapper(DEFERRED_OUTPUT_STREAM_THRESHOLD,\n+                        response)) {\n+                    chain.doFilter(request, wrapper);\n+                    wrapper.flushBuffer();\n+                    byte[] content = wrapper.getCaptureAsBytes();\n+                    wrapper.setHeader(HEADER_KEY, key);\n+                    if (content.length > MAX_CONTENT_SIZE) {\n+                        log.debug(\n+                                \"Not storing response for key: {} (status: {}, size in bytes: {}), max content size exceeded: {}\",\n+                                key, wrapper.getStatus(), content.length, MAX_CONTENT_SIZE);\n+                        return true;\n+                    }\n+                    store.put(key, content, ttl);\n+                    store.put(key + INFO_SUFFIX, NuxeoIdempotentResponse.write(wrapper), ttl);\n+                    log.debug(\"Stored response for key: {} (status: {}, size in bytes: {})\", key, wrapper.getStatus(),\n+                            content.length);\n+                    return true;\n+                }\n+            } catch (IOException | ServletException e) {\n+                response.setHeader(HEADER_KEY, key);\n+                response.setStatus(SC_INTERNAL_SERVER_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60b9d9884031ab0dbd8e68fd9d1867d05da526cc"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4Mzc2ODYzOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxODoxMjoyNVrOIP22PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxODoxMjoyNVrOIP22PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ5ODE3Mg==", "bodyText": "You won't be able to set the header if the response is committed, which will usually be the case (unless buffering) after the flush. So maybe set before calling doFilter?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r553498172", "createdAt": "2021-01-07T18:12:25Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Set;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpFilter;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpDelete;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpHead;\n+import org.apache.http.client.methods.HttpOptions;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.methods.HttpTrace;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStore;\n+import org.nuxeo.runtime.services.config.ConfigurationService;\n+\n+/**\n+ * Filter handling an idempotency key in POST requests.\n+ * <p>\n+ * If {@link #HEADER_KEY} is found in the request header, will intercept request handling to:\n+ * <ul>\n+ * <li>mark the request as being processed\n+ * <li>capture the response when request was processed without any error and store it\n+ * <li>return the stored response if a subsequent request with the same key is processed again\n+ * <li>return a conflict response if a request with the same key is processed while the first request is still in\n+ * progress.\n+ * </ul>\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentFilter extends HttpFilter {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final Logger log = LogManager.getLogger(NuxeoIdempotentFilter.class);\n+\n+    public static final String HEADER_KEY = \"Idempotency-Key\";\n+\n+    public static final String STORE_PROPERTY = \"org.nuxeo.request.idempotency.keyvaluestore.name\";\n+\n+    public static final String DEFAULT_STORE = \"idempotentrequest\";\n+\n+    protected static final Duration DEFAULT_TTL = Duration.ofDays(1);\n+\n+    public static final String TTL_DURATION_PROPERTY = \"org.nuxeo.request.idempotency.ttl.duration\";\n+\n+    public static final String INPROGRESS_MARKER = \"{\\\"inprogress\\\":true}\";\n+\n+    public static final String INFO_SUFFIX = \"_info\";\n+\n+    protected static final int DEFERRED_OUTPUT_STREAM_THRESHOLD = 1024 * 1024; // 1 MB\n+\n+    protected static final int MAX_CONTENT_SIZE = 1024 * 1024 * 5; // 5 MB\n+\n+    protected static final Set<String> IDEMPOTENT_METHODS = Set.of(\n+            // safe methods according to RFC 7231 4.2.1\n+            HttpGet.METHOD_NAME, HttpHead.METHOD_NAME, HttpOptions.METHOD_NAME, HttpTrace.METHOD_NAME,\n+            // idempotent methods according to RFC 7231 4.2.2\n+            HttpPut.METHOD_NAME, HttpDelete.METHOD_NAME);\n+\n+    protected Duration getTTL() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getDuration(TTL_DURATION_PROPERTY, DEFAULT_TTL);\n+        }\n+        return DEFAULT_TTL;\n+    }\n+\n+    protected String getStoreName() {\n+        ConfigurationService cs = Framework.getService(ConfigurationService.class);\n+        if (cs != null) {\n+            return cs.getString(STORE_PROPERTY, DEFAULT_STORE);\n+        }\n+        return DEFAULT_STORE;\n+    }\n+\n+    @Override\n+    protected void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        if (!doFilterIdempotent(request, response, chain)) {\n+            chain.doFilter(request, response);\n+        }\n+    }\n+\n+    protected boolean doFilterIdempotent(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n+            throws IOException, ServletException {\n+        String method = request.getMethod();\n+        if (IDEMPOTENT_METHODS.contains(method)) {\n+            log.debug(\"No idempotent processing done: method is already idempotent: {}\", method);\n+            return false;\n+        }\n+        String key = request.getHeader(HEADER_KEY);\n+        if (key == null) {\n+            log.debug(\"No idempotent processing done: no {} header present\", HEADER_KEY);\n+            return false;\n+        }\n+        log.debug(\"Idempotent request key: {}\", key);\n+        KeyValueService kvs = Framework.getService(KeyValueService.class);\n+        if (kvs == null) {\n+            log.debug(\"KeyValueService not present\");\n+            return false;\n+        }\n+        KeyValueStore store = kvs.getKeyValueStore(getStoreName());\n+        String storeStatus = store.getString(key + INFO_SUFFIX);\n+        byte[] storeContent = store.get(key);\n+        if (storeStatus == null) {\n+            log.debug(\"Handle new request for key: {}\", key);\n+            long ttl = getTTL().toSeconds();\n+            store.put(key + INFO_SUFFIX, INPROGRESS_MARKER, ttl);\n+            try {\n+                try (CopyingResponseWrapper wrapper = new CopyingResponseWrapper(DEFERRED_OUTPUT_STREAM_THRESHOLD,\n+                        response)) {\n+                    chain.doFilter(request, wrapper);\n+                    wrapper.flushBuffer();\n+                    byte[] content = wrapper.getCaptureAsBytes();\n+                    wrapper.setHeader(HEADER_KEY, key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60b9d9884031ab0dbd8e68fd9d1867d05da526cc"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4Mzc5NDI2OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxODoyMDozMFrOIP3Fyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxODoyMDozMFrOIP3Fyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUwMjE1NQ==", "bodyText": "Constants -> all-uppercase", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r553502155", "createdAt": "2021-01-07T18:20:30Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentResponse.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+/**\n+ * POJO representing response to be serialized and served by {@link NuxeoIdempotentFilter}.\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentResponse {\n+\n+    protected int status;\n+\n+    protected Map<String, Collection<String>> headers = new LinkedHashMap<>();\n+\n+    protected static final ObjectMapper mapper = //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60b9d9884031ab0dbd8e68fd9d1867d05da526cc"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MzgwMDAxOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxODoyMjoyM1rOIP3JXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxODoyMjoyM1rOIP3JXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUwMzA3MQ==", "bodyText": "I don't like write much. Maybe save instead?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r553503071", "createdAt": "2021-01-07T18:22:23Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/java/org/nuxeo/ecm/platform/web/common/idempotency/NuxeoIdempotentResponse.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.common.idempotency;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+/**\n+ * POJO representing response to be serialized and served by {@link NuxeoIdempotentFilter}.\n+ *\n+ * @since 11.5\n+ */\n+public class NuxeoIdempotentResponse {\n+\n+    protected int status;\n+\n+    protected Map<String, Collection<String>> headers = new LinkedHashMap<>();\n+\n+    protected static final ObjectMapper mapper = //\n+            new ObjectMapper().configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true)\n+                              .configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS, true);\n+\n+    protected static final ObjectReader readMapper = mapper.readerFor(NuxeoIdempotentResponse.class)\n+                                                           .withoutRootName()\n+                                                           .without(JsonParser.Feature.AUTO_CLOSE_SOURCE);\n+\n+    protected static final ObjectWriter writeMapper = mapper.writerFor(NuxeoIdempotentResponse.class)\n+                                                            .withoutRootName()\n+                                                            .with(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)\n+                                                            .without(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n+\n+    public int getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(int status) {\n+        this.status = status;\n+    }\n+\n+    public Map<String, Collection<String>> getHeaders() {\n+        return headers;\n+    }\n+\n+    public void setHeader(String name, Collection<String> value) {\n+        headers.put(name, value);\n+    }\n+\n+    public static final void restore(HttpServletResponse response, byte[] bytes) throws IOException {\n+        NuxeoIdempotentResponse stored = readMapper.readValue(bytes);\n+        response.setStatus(stored.getStatus());\n+        stored.getHeaders().forEach((name, values) -> {\n+            boolean isFirst = true;\n+            for (String value : values) {\n+                if (isFirst) {\n+                    response.setHeader(name, value);\n+                    isFirst = false;\n+                } else {\n+                    response.addHeader(name, value);\n+                }\n+            }\n+        });\n+    }\n+\n+    public static final byte[] write(HttpServletResponse response) throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60b9d9884031ab0dbd8e68fd9d1867d05da526cc"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MzgwMTkxOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/main/resources/OSGI-INF/idempotency-configuration.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxODoyMzowM1rOIP3Kgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxODoyMzowM1rOIP3Kgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUwMzM2Mw==", "bodyText": "1d would probably be more readable.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r553503363", "createdAt": "2021-01-07T18:23:03Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/main/resources/OSGI-INF/idempotency-configuration.xml", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\"?>\n+<component name=\"org.nuxeo.ecm.platform.web.idempotency\">\n+\n+  <extension target=\"org.nuxeo.runtime.ConfigurationService\" point=\"configuration\">\n+    <documentation>\n+      Properties controlling idempotent requests TTL and KeyValue storename.\n+\n+      Default TTL in seconds matches 1 day.\n+\n+      @since 11.5\n+    </documentation>\n+    <property name=\"org.nuxeo.request.idempotency.ttl.duration\">P1D</property>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60b9d9884031ab0dbd8e68fd9d1867d05da526cc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5OTMwMTA2OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-web-common/src/test/java/org/nuxeo/ecm/platform/web/idempotency/TestNuxeoIdempotentFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNDo1Mzo1MVrOISFQsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNDo1Mzo1MVrOISFQsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgzMTQ3NA==", "bodyText": "FINAL_COPY_RESPONSE_HEADERS.keySet().removeAll(SKIPPED_HEADERS) instead for clarity?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r555831474", "createdAt": "2021-01-12T14:53:51Z", "author": {"login": "efge"}, "path": "modules/platform/nuxeo-platform-web-common/src/test/java/org/nuxeo/ecm/platform/web/idempotency/TestNuxeoIdempotentFilter.java", "diffHunk": "@@ -0,0 +1,406 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ecm.platform.web.idempotency;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static javax.servlet.http.HttpServletResponse.SC_CONFLICT;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyInt;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.nuxeo.ecm.platform.web.common.idempotency.NuxeoIdempotentResponse.SKIPPED_HEADERS;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.methods.HttpPost;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.nuxeo.ecm.platform.web.common.idempotency.NuxeoIdempotentFilter;\n+import org.nuxeo.runtime.kv.KeyValueService;\n+import org.nuxeo.runtime.kv.KeyValueStoreProvider;\n+import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.test.runner.Features;\n+import org.nuxeo.runtime.test.runner.FeaturesRunner;\n+import org.nuxeo.runtime.test.runner.RuntimeFeature;\n+\n+/**\n+ * Checks idempotent requests management.\n+ *\n+ * @since 11.5\n+ */\n+@RunWith(FeaturesRunner.class)\n+@Features(RuntimeFeature.class)\n+@Deploy(\"org.nuxeo.runtime.kv\")\n+@Deploy(\"org.nuxeo.ecm.platform.web.common:OSGI-INF/idempotency-configuration.xml\")\n+public class TestNuxeoIdempotentFilter {\n+\n+    protected static final String KEY = \"mykey\";\n+\n+    protected static final String CONTENT = \"test content\";\n+\n+    protected static final Map<String, Collection<String>> RESPONSE_HEADERS = new LinkedHashMap<>();\n+\n+    static {\n+        RESPONSE_HEADERS.put(\"Accept\", List.of(\"text/html\", \"application/xhtml+xml\", \"*/*;q=0.8\"));\n+        RESPONSE_HEADERS.put(\"Connection\", List.of(\"Keep-Alive\"));\n+        RESPONSE_HEADERS.put(\"Content-Encoding\", List.of(\"gzip\"));\n+        RESPONSE_HEADERS.put(\"Content-Type\", List.of(\"text/html; charset=utf-8\"));\n+        RESPONSE_HEADERS.put(\"Set-Cookie\", List.of(\"sessionId=38afes7a8\", \"id=a3fWa; Max-Age=2592000\"));\n+        RESPONSE_HEADERS.put(\"Transfer-Encoding\", List.of(\"chunked\")); // should be filtered\n+    }\n+\n+    protected static final Map<String, Collection<String>> KEY_RESPONSE_HEADERS = new LinkedHashMap<>();\n+\n+    static {\n+        KEY_RESPONSE_HEADERS.put(NuxeoIdempotentFilter.HEADER_KEY, List.of(KEY));\n+    }\n+\n+    protected static final Map<String, Collection<String>> FINAL_RESPONSE_HEADERS = new LinkedHashMap<>();\n+\n+    static {\n+        FINAL_RESPONSE_HEADERS.putAll(RESPONSE_HEADERS);\n+        FINAL_RESPONSE_HEADERS.putAll(KEY_RESPONSE_HEADERS);\n+    }\n+\n+    protected static final Map<String, Collection<String>> FINAL_COPY_RESPONSE_HEADERS = new LinkedHashMap<>();\n+\n+    static {\n+        FINAL_COPY_RESPONSE_HEADERS.putAll(FINAL_RESPONSE_HEADERS);\n+        SKIPPED_HEADERS.forEach(FINAL_COPY_RESPONSE_HEADERS::remove);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c62f92a76d6ab663695e59088ab7b78b3d8987d7"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMjIxMzk2OnYy", "diffSide": "RIGHT", "path": "ftests/nuxeo-server-tests/src/test/java/org/nuxeo/ftest/server/ITNuxeoIdempotentRequestTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwNTo1ODozM1rOISgoCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QwODo0MToxNFrOISk1Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI3OTgxNg==", "bodyText": "How come? There should be no async jobs involved here, and I guess the transaction should always have been committed when getting  the answer from createDocument @kevinleturc?", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r556279816", "createdAt": "2021-01-13T05:58:33Z", "author": {"login": "ataillefer"}, "path": "ftests/nuxeo-server-tests/src/test/java/org/nuxeo/ftest/server/ITNuxeoIdempotentRequestTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ftest.server;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.nuxeo.ecm.platform.web.common.idempotency.NuxeoIdempotentFilter.HEADER_KEY;\n+import static org.nuxeo.functionaltests.AbstractTest.NUXEO_URL;\n+import static org.nuxeo.functionaltests.Constants.ADMINISTRATOR;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.nuxeo.client.NuxeoClient;\n+import org.nuxeo.client.objects.Document;\n+import org.nuxeo.ecm.core.query.sql.NXQL;\n+import org.nuxeo.ecm.platform.dublincore.constants.DublinCoreConstants;\n+import org.nuxeo.functionaltests.RestHelper.NuxeoClientForNuxeo;\n+\n+/**\n+ * Tests for idempotent request mechanism.\n+ *\n+ * @since 11.5\n+ */\n+public class ITNuxeoIdempotentRequestTest {\n+\n+    private static final String TEST_KEY = \"idempotenttestkey\" + new Date().getTime();\n+\n+    private static final NuxeoClient.Builder CLIENT_BUILDER = new NuxeoClientForNuxeo.BuilderForNuxeo().url(\n+            NUXEO_URL).authentication(ADMINISTRATOR, ADMINISTRATOR).schemas(\"*\");\n+\n+    private static final NuxeoClient CLIENT = CLIENT_BUILDER.connect();\n+\n+    private static final NuxeoClient IDEMPOTENT_CLIENT = CLIENT_BUILDER.header(HEADER_KEY, TEST_KEY).connect();\n+\n+    private static final String PARENT_PATH = \"/default-domain/workspaces/\";\n+\n+    private static final String QUERY_CHILDREN = String.format(\"SELECT * FROM Document WHERE %s STARTSWITH '%s'\",\n+            NXQL.ECM_PATH, PARENT_PATH);\n+\n+    private static final String TEST_TITLE = \"testdoc\";\n+\n+    private static final String TEST_TYPE = \"File\";\n+\n+    protected String createDocument(NuxeoClient client) {\n+        Document document = Document.createWithName(TEST_TITLE, TEST_TYPE);\n+        document.setProperties(Map.of(DublinCoreConstants.DUBLINCORE_TITLE_PROPERTY, TEST_TITLE));\n+        Document created = client.repository().createDocumentByPath(PARENT_PATH, document);\n+        waitForAsyncWork();\n+        return created.getId();\n+    }\n+\n+    /**\n+     * Prevents from random failures when counting children.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656c458a341c83868279c7be3dbbe9d9f7a0a232"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjMwMjAzOA==", "bodyText": "The rest query API (used to count children) relies on the page provider REST_API_SEARCH_ADAPTER, using ElasticSearch and not the CoreSession, hence the need for this to avoid random failures.\nNote i needed this trick in Explorer ftests too, so i think this whole method would be useful on the RestHelper API.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r556302038", "createdAt": "2021-01-13T07:05:14Z", "author": {"login": "atchertchian"}, "path": "ftests/nuxeo-server-tests/src/test/java/org/nuxeo/ftest/server/ITNuxeoIdempotentRequestTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ftest.server;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.nuxeo.ecm.platform.web.common.idempotency.NuxeoIdempotentFilter.HEADER_KEY;\n+import static org.nuxeo.functionaltests.AbstractTest.NUXEO_URL;\n+import static org.nuxeo.functionaltests.Constants.ADMINISTRATOR;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.nuxeo.client.NuxeoClient;\n+import org.nuxeo.client.objects.Document;\n+import org.nuxeo.ecm.core.query.sql.NXQL;\n+import org.nuxeo.ecm.platform.dublincore.constants.DublinCoreConstants;\n+import org.nuxeo.functionaltests.RestHelper.NuxeoClientForNuxeo;\n+\n+/**\n+ * Tests for idempotent request mechanism.\n+ *\n+ * @since 11.5\n+ */\n+public class ITNuxeoIdempotentRequestTest {\n+\n+    private static final String TEST_KEY = \"idempotenttestkey\" + new Date().getTime();\n+\n+    private static final NuxeoClient.Builder CLIENT_BUILDER = new NuxeoClientForNuxeo.BuilderForNuxeo().url(\n+            NUXEO_URL).authentication(ADMINISTRATOR, ADMINISTRATOR).schemas(\"*\");\n+\n+    private static final NuxeoClient CLIENT = CLIENT_BUILDER.connect();\n+\n+    private static final NuxeoClient IDEMPOTENT_CLIENT = CLIENT_BUILDER.header(HEADER_KEY, TEST_KEY).connect();\n+\n+    private static final String PARENT_PATH = \"/default-domain/workspaces/\";\n+\n+    private static final String QUERY_CHILDREN = String.format(\"SELECT * FROM Document WHERE %s STARTSWITH '%s'\",\n+            NXQL.ECM_PATH, PARENT_PATH);\n+\n+    private static final String TEST_TITLE = \"testdoc\";\n+\n+    private static final String TEST_TYPE = \"File\";\n+\n+    protected String createDocument(NuxeoClient client) {\n+        Document document = Document.createWithName(TEST_TITLE, TEST_TYPE);\n+        document.setProperties(Map.of(DublinCoreConstants.DUBLINCORE_TITLE_PROPERTY, TEST_TITLE));\n+        Document created = client.repository().createDocumentByPath(PARENT_PATH, document);\n+        waitForAsyncWork();\n+        return created.getId();\n+    }\n+\n+    /**\n+     * Prevents from random failures when counting children.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI3OTgxNg=="}, "originalCommit": {"oid": "656c458a341c83868279c7be3dbbe9d9f7a0a232"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM0ODcxOA==", "bodyText": "And just to answer the fact that this would be needed to get the document id after creation: it's not.\nI'm just following a test pattern where the async jobs should be waited for after the action triggering them, as shutting down the test server while async jobs are still running is also exposing tests to random failures, with errors in logs, typically.", "url": "https://github.com/nuxeo/nuxeo/pull/4545#discussion_r556348718", "createdAt": "2021-01-13T08:41:14Z", "author": {"login": "atchertchian"}, "path": "ftests/nuxeo-server-tests/src/test/java/org/nuxeo/ftest/server/ITNuxeoIdempotentRequestTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * (C) Copyright 2021 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     Anahide Tchertchian\n+ */\n+package org.nuxeo.ftest.server;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.nuxeo.ecm.platform.web.common.idempotency.NuxeoIdempotentFilter.HEADER_KEY;\n+import static org.nuxeo.functionaltests.AbstractTest.NUXEO_URL;\n+import static org.nuxeo.functionaltests.Constants.ADMINISTRATOR;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+import org.nuxeo.client.NuxeoClient;\n+import org.nuxeo.client.objects.Document;\n+import org.nuxeo.ecm.core.query.sql.NXQL;\n+import org.nuxeo.ecm.platform.dublincore.constants.DublinCoreConstants;\n+import org.nuxeo.functionaltests.RestHelper.NuxeoClientForNuxeo;\n+\n+/**\n+ * Tests for idempotent request mechanism.\n+ *\n+ * @since 11.5\n+ */\n+public class ITNuxeoIdempotentRequestTest {\n+\n+    private static final String TEST_KEY = \"idempotenttestkey\" + new Date().getTime();\n+\n+    private static final NuxeoClient.Builder CLIENT_BUILDER = new NuxeoClientForNuxeo.BuilderForNuxeo().url(\n+            NUXEO_URL).authentication(ADMINISTRATOR, ADMINISTRATOR).schemas(\"*\");\n+\n+    private static final NuxeoClient CLIENT = CLIENT_BUILDER.connect();\n+\n+    private static final NuxeoClient IDEMPOTENT_CLIENT = CLIENT_BUILDER.header(HEADER_KEY, TEST_KEY).connect();\n+\n+    private static final String PARENT_PATH = \"/default-domain/workspaces/\";\n+\n+    private static final String QUERY_CHILDREN = String.format(\"SELECT * FROM Document WHERE %s STARTSWITH '%s'\",\n+            NXQL.ECM_PATH, PARENT_PATH);\n+\n+    private static final String TEST_TITLE = \"testdoc\";\n+\n+    private static final String TEST_TYPE = \"File\";\n+\n+    protected String createDocument(NuxeoClient client) {\n+        Document document = Document.createWithName(TEST_TITLE, TEST_TYPE);\n+        document.setProperties(Map.of(DublinCoreConstants.DUBLINCORE_TITLE_PROPERTY, TEST_TITLE));\n+        Document created = client.repository().createDocumentByPath(PARENT_PATH, document);\n+        waitForAsyncWork();\n+        return created.getId();\n+    }\n+\n+    /**\n+     * Prevents from random failures when counting children.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI3OTgxNg=="}, "originalCommit": {"oid": "656c458a341c83868279c7be3dbbe9d9f7a0a232"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4301, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}