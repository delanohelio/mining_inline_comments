{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4ODc4NjA2", "number": 4177, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODoyMjo0MVrOEIRGGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzozMDo0MFrOEIXeeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTA0MTU1OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODoyMjo0MVrOGoH-LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDoxNToyMVrOGoL7Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcyNjgyOQ==", "bodyText": "Eclipse formatter puts com imports after org (and a blank line between the two sections)", "url": "https://github.com/nuxeo/nuxeo/pull/4177#discussion_r444726829", "createdAt": "2020-06-24T08:22:41Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "diffHunk": "@@ -31,6 +31,7 @@\n \n import javax.servlet.http.HttpServletRequest;\n \n+import com.amazonaws.services.s3.transfer.TransferManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f913b9f30ce6e03db14776b47c83b7c9256c94e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc5MTYzOA==", "bodyText": "Forgot to setup nuxeo.importorder in IDEA, thx.", "url": "https://github.com/nuxeo/nuxeo/pull/4177#discussion_r444791638", "createdAt": "2020-06-24T10:15:21Z", "author": {"login": "nelsonsilva"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3BlobProvider.java", "diffHunk": "@@ -31,6 +31,7 @@\n \n import javax.servlet.http.HttpServletRequest;\n \n+import com.amazonaws.services.s3.transfer.TransferManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcyNjgyOQ=="}, "originalCommit": {"oid": "8f913b9f30ce6e03db14776b47c83b7c9256c94e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTA0NDYzOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3ManagedTransfer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODoyMzozOFrOGoIARQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODoyMzozOFrOGoIARQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcyNzM2NQ==", "bodyText": "Please add Javadoc to interface and method, and blank lines around the method.", "url": "https://github.com/nuxeo/nuxeo/pull/4177#discussion_r444727365", "createdAt": "2020-06-24T08:23:38Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3ManagedTransfer.java", "diffHunk": "@@ -12,22 +12,12 @@\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- *\n- * Contributors:\n- *     pierre\n- */\n-package org.nuxeo.ecm.core.storage.sql;\n-\n-/**\n- * Mocked S3 Direct Upload handler to be tested.\n- *\n- * @since 10.2\n  */\n-public class MockedS3DirectBatchHandler extends S3DirectBatchHandler {\n+package org.nuxeo.ecm.blob.s3;\n \n-    @Override\n-    protected long lowerThresholdToUseMultipartCopy() {\n-        return TestS3DirectBatchHandler.MULTIPART_THRESHOLD + 1;\n-    }\n+import com.amazonaws.services.s3.transfer.TransferManager;\n \n+/** @since 11.1 */\n+public interface S3ManagedTransfer {\n+    TransferManager getTransferManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f913b9f30ce6e03db14776b47c83b7c9256c94e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTA0NTMzOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3ManagedTransfer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODoyMzo0OFrOGoIArw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODoyMzo0OFrOGoIArw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcyNzQ3MQ==", "bodyText": "11.2", "url": "https://github.com/nuxeo/nuxeo/pull/4177#discussion_r444727471", "createdAt": "2020-06-24T08:23:48Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3ManagedTransfer.java", "diffHunk": "@@ -12,22 +12,12 @@\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- *\n- * Contributors:\n- *     pierre\n- */\n-package org.nuxeo.ecm.core.storage.sql;\n-\n-/**\n- * Mocked S3 Direct Upload handler to be tested.\n- *\n- * @since 10.2\n  */\n-public class MockedS3DirectBatchHandler extends S3DirectBatchHandler {\n+package org.nuxeo.ecm.blob.s3;\n \n-    @Override\n-    protected long lowerThresholdToUseMultipartCopy() {\n-        return TestS3DirectBatchHandler.MULTIPART_THRESHOLD + 1;\n-    }\n+import com.amazonaws.services.s3.transfer.TransferManager;\n \n+/** @since 11.1 */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f913b9f30ce6e03db14776b47c83b7c9256c94e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTA2MTkxOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3BinaryManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODoyODowNlrOGoILOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODoyODowNlrOGoILOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczMDE3MQ==", "bodyText": "It's enough to do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Copy copy = getTransferManager().copy(copyObjectRequest, amazonS3, null);\n          \n          \n            \n                        Copy copy = transferManager.copy(copyObjectRequest);", "url": "https://github.com/nuxeo/nuxeo/pull/4177#discussion_r444730171", "createdAt": "2020-06-24T08:28:06Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3BinaryManager.java", "diffHunk": "@@ -556,17 +564,24 @@ protected String copyBlob(S3BinaryManager sourceBlobProvider, String blobKey) th\n         }\n         long length = sourceMetadata.getContentLength();\n         try {\n-            String sseAlgorithm;\n+            CopyObjectRequest copyObjectRequest = new CopyObjectRequest(sourceBucketName, sourceKey, bucketName, key);\n             if (useServerSideEncryption) {\n                 if (isNotBlank(serverSideKMSKeyID)) { // TODO\n                     log.warn(\"S3 copy not supported with KMS, falling back to regular copy\");\n                     return null;\n                 }\n-                sseAlgorithm = ObjectMetadata.AES_256_SERVER_SIDE_ENCRYPTION;\n-            } else {\n-                sseAlgorithm = null;\n+                // SSE-S3\n+                ObjectMetadata newObjectMetadata = new ObjectMetadata();\n+                newObjectMetadata.setSSEAlgorithm(ObjectMetadata.AES_256_SERVER_SIDE_ENCRYPTION);\n+                copyObjectRequest.setNewObjectMetadata(newObjectMetadata);\n+            }\n+            Copy copy = getTransferManager().copy(copyObjectRequest, amazonS3, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f913b9f30ce6e03db14776b47c83b7c9256c94e"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTA2ODMzOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3DirectBatchHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODoyOTo1MlrOGoIPMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODoyOTo1MlrOGoIPMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczMTE4NA==", "bodyText": "com imports after org", "url": "https://github.com/nuxeo/nuxeo/pull/4177#discussion_r444731184", "createdAt": "2020-06-24T08:29:52Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3DirectBatchHandler.java", "diffHunk": "@@ -34,24 +34,27 @@\n import static org.nuxeo.ecm.core.storage.sql.S3BinaryManager.BUCKET_REGION_PROPERTY;\n import static org.nuxeo.ecm.core.storage.sql.S3BinaryManager.ENDPOINT_PROPERTY;\n import static org.nuxeo.ecm.core.storage.sql.S3BinaryManager.PATHSTYLEACCESS_PROPERTY;\n-import static org.nuxeo.ecm.core.storage.sql.S3Utils.NON_MULTIPART_COPY_MAX_SIZE;\n \n import java.io.IOException;\n import java.io.Serializable;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Objects;\n-import java.util.regex.Pattern;\n \n+import com.amazonaws.services.s3.model.CopyObjectRequest;\n+import com.amazonaws.services.s3.transfer.Copy;\n+import com.amazonaws.services.s3.transfer.TransferManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f913b9f30ce6e03db14776b47c83b7c9256c94e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTA3ODY3OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3DirectBatchHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODozMjo0NVrOGoIVow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODozMjo0NVrOGoIVow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczMjgzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    TransferManager transferManager = getTransferManager();\n          \n          \n            \n                    Copy copy = transferManager.copy(copyObjectRequest, amazonS3, null);\n          \n          \n            \n                    Copy copy = getTransferManager().copy(copyObjectRequest);", "url": "https://github.com/nuxeo/nuxeo/pull/4177#discussion_r444732835", "createdAt": "2020-06-24T08:32:45Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3DirectBatchHandler.java", "diffHunk": "@@ -258,29 +257,28 @@ public boolean completeUpload(String batchId, String fileIndex, BatchFileInfo fi\n         blobInfo.filename = fileInfo.getFilename();\n         blobInfo.length = metadata.getContentLength();\n \n+        CopyObjectRequest copyObjectRequest = new CopyObjectRequest(bucket, fileKey, bucket, bucketKey);\n         // server-side encryption\n-        String targetSSEAlgorithm;\n         if (useServerSideEncryption) { // TODO KMS\n-            targetSSEAlgorithm = ObjectMetadata.AES_256_SERVER_SIDE_ENCRYPTION;\n-        } else {\n-            targetSSEAlgorithm = null;\n+            // SSE-S3\n+            ObjectMetadata newObjectMetadata = new ObjectMetadata();\n+            newObjectMetadata.setSSEAlgorithm(ObjectMetadata.AES_256_SERVER_SIDE_ENCRYPTION);\n+            copyObjectRequest.setNewObjectMetadata(newObjectMetadata);\n         }\n \n-        ObjectMetadata newMetadata;\n-        if (metadata.getContentLength() > lowerThresholdToUseMultipartCopy()) {\n-            newMetadata = S3Utils.copyFileMultipart(amazonS3, metadata, bucket, fileKey, bucket, bucketKey,\n-                    targetSSEAlgorithm, true);\n-        } else {\n-            newMetadata = S3Utils.copyFile(amazonS3, metadata, bucket, fileKey, bucket, bucketKey, targetSSEAlgorithm, true);\n-            boolean isMultipartUpload = REGEX_MULTIPART_ETAG.matcher(key).find();\n-            if (isMultipartUpload) {\n-                key = newMetadata.getETag();\n-                String previousBucketKey = bucketKey;\n-                bucketKey = bucketPrefix + key;\n-                newMetadata = S3Utils.copyFile(amazonS3, metadata, bucket, previousBucketKey, bucket, bucketKey, true);\n-            }\n+        TransferManager transferManager = getTransferManager();\n+        Copy copy = transferManager.copy(copyObjectRequest, amazonS3, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f913b9f30ce6e03db14776b47c83b7c9256c94e"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTEwNTYwOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3DirectBatchHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODo0MDoxN1rOGoImcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMDoyMzoyNlrOGoMMHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczNzEzOA==", "bodyText": "Instead of copy.waitForCompletion if you call copy.waitForCopyResult it will a return a CopyResult object with a getETag method. It's better than doing an additional round-trip but it doesn't do the same as newMetadata.getContentMD5()... as the ETag may not be an MD5.\nI see internal AWS SDK code that just checks for the presence of - to determine if it's an ETag from multipart upload... I think we could just say that if it's 32 chars en length then it's a proper MD5 and we can use it as the digest. Or maybe keep it for now and refactor later.", "url": "https://github.com/nuxeo/nuxeo/pull/4177#discussion_r444737138", "createdAt": "2020-06-24T08:40:17Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3DirectBatchHandler.java", "diffHunk": "@@ -258,29 +257,28 @@ public boolean completeUpload(String batchId, String fileIndex, BatchFileInfo fi\n         blobInfo.filename = fileInfo.getFilename();\n         blobInfo.length = metadata.getContentLength();\n \n+        CopyObjectRequest copyObjectRequest = new CopyObjectRequest(bucket, fileKey, bucket, bucketKey);\n         // server-side encryption\n-        String targetSSEAlgorithm;\n         if (useServerSideEncryption) { // TODO KMS\n-            targetSSEAlgorithm = ObjectMetadata.AES_256_SERVER_SIDE_ENCRYPTION;\n-        } else {\n-            targetSSEAlgorithm = null;\n+            // SSE-S3\n+            ObjectMetadata newObjectMetadata = new ObjectMetadata();\n+            newObjectMetadata.setSSEAlgorithm(ObjectMetadata.AES_256_SERVER_SIDE_ENCRYPTION);\n+            copyObjectRequest.setNewObjectMetadata(newObjectMetadata);\n         }\n \n-        ObjectMetadata newMetadata;\n-        if (metadata.getContentLength() > lowerThresholdToUseMultipartCopy()) {\n-            newMetadata = S3Utils.copyFileMultipart(amazonS3, metadata, bucket, fileKey, bucket, bucketKey,\n-                    targetSSEAlgorithm, true);\n-        } else {\n-            newMetadata = S3Utils.copyFile(amazonS3, metadata, bucket, fileKey, bucket, bucketKey, targetSSEAlgorithm, true);\n-            boolean isMultipartUpload = REGEX_MULTIPART_ETAG.matcher(key).find();\n-            if (isMultipartUpload) {\n-                key = newMetadata.getETag();\n-                String previousBucketKey = bucketKey;\n-                bucketKey = bucketPrefix + key;\n-                newMetadata = S3Utils.copyFile(amazonS3, metadata, bucket, previousBucketKey, bucket, bucketKey, true);\n-            }\n+        TransferManager transferManager = getTransferManager();\n+        Copy copy = transferManager.copy(copyObjectRequest, amazonS3, null);\n+        try {\n+            copy.waitForCompletion();\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new NuxeoException(e);\n+        } finally {\n+            amazonS3.deleteObject(bucket, fileKey);\n         }\n \n+        ObjectMetadata newMetadata = amazonS3.getObjectMetadata(bucket, bucketKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f913b9f30ce6e03db14776b47c83b7c9256c94e"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc5NTkzNA==", "bodyText": "I plan to do another PR where the usage of a generic etag vs md5 is possible behind a flag, will take that into account", "url": "https://github.com/nuxeo/nuxeo/pull/4177#discussion_r444795934", "createdAt": "2020-06-24T10:23:26Z", "author": {"login": "nelsonsilva"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3DirectBatchHandler.java", "diffHunk": "@@ -258,29 +257,28 @@ public boolean completeUpload(String batchId, String fileIndex, BatchFileInfo fi\n         blobInfo.filename = fileInfo.getFilename();\n         blobInfo.length = metadata.getContentLength();\n \n+        CopyObjectRequest copyObjectRequest = new CopyObjectRequest(bucket, fileKey, bucket, bucketKey);\n         // server-side encryption\n-        String targetSSEAlgorithm;\n         if (useServerSideEncryption) { // TODO KMS\n-            targetSSEAlgorithm = ObjectMetadata.AES_256_SERVER_SIDE_ENCRYPTION;\n-        } else {\n-            targetSSEAlgorithm = null;\n+            // SSE-S3\n+            ObjectMetadata newObjectMetadata = new ObjectMetadata();\n+            newObjectMetadata.setSSEAlgorithm(ObjectMetadata.AES_256_SERVER_SIDE_ENCRYPTION);\n+            copyObjectRequest.setNewObjectMetadata(newObjectMetadata);\n         }\n \n-        ObjectMetadata newMetadata;\n-        if (metadata.getContentLength() > lowerThresholdToUseMultipartCopy()) {\n-            newMetadata = S3Utils.copyFileMultipart(amazonS3, metadata, bucket, fileKey, bucket, bucketKey,\n-                    targetSSEAlgorithm, true);\n-        } else {\n-            newMetadata = S3Utils.copyFile(amazonS3, metadata, bucket, fileKey, bucket, bucketKey, targetSSEAlgorithm, true);\n-            boolean isMultipartUpload = REGEX_MULTIPART_ETAG.matcher(key).find();\n-            if (isMultipartUpload) {\n-                key = newMetadata.getETag();\n-                String previousBucketKey = bucketKey;\n-                bucketKey = bucketPrefix + key;\n-                newMetadata = S3Utils.copyFile(amazonS3, metadata, bucket, previousBucketKey, bucket, bucketKey, true);\n-            }\n+        TransferManager transferManager = getTransferManager();\n+        Copy copy = transferManager.copy(copyObjectRequest, amazonS3, null);\n+        try {\n+            copy.waitForCompletion();\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            throw new NuxeoException(e);\n+        } finally {\n+            amazonS3.deleteObject(bucket, fileKey);\n         }\n \n+        ObjectMetadata newMetadata = amazonS3.getObjectMetadata(bucket, bucketKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczNzEzOA=="}, "originalCommit": {"oid": "8f913b9f30ce6e03db14776b47c83b7c9256c94e"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTEwNzUzOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3DirectBatchHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODo0MDo0N1rOGoInqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODo0MDo0N1rOGoInqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczNzQ0OA==", "bodyText": "11.2, but not needed for protected methods", "url": "https://github.com/nuxeo/nuxeo/pull/4177#discussion_r444737448", "createdAt": "2020-06-24T08:40:47Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3DirectBatchHandler.java", "diffHunk": "@@ -302,8 +300,13 @@ public boolean completeUpload(String batchId, String fileIndex, BatchFileInfo fi\n         return true;\n     }\n \n-    protected long lowerThresholdToUseMultipartCopy() {\n-        return NON_MULTIPART_COPY_MAX_SIZE;\n+    /** @since 11.1 */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f913b9f30ce6e03db14776b47c83b7c9256c94e"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTExMjg2OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3Utils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODo0MjoyNFrOGoIrPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwODo0MjoyNFrOGoIrPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczODM2Ng==", "bodyText": "@since -> @deprecated since", "url": "https://github.com/nuxeo/nuxeo/pull/4177#discussion_r444738366", "createdAt": "2020-06-24T08:42:24Z", "author": {"login": "efge"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3Utils.java", "diffHunk": "@@ -168,7 +170,9 @@ public static ObjectMetadata copyFileMultipart(AmazonS3 amazonS3, ObjectMetadata\n      * @param targetSSEAlgorithm the target SSE Algorithm to use, or {@code null}\n      * @param deleteSource whether to delete the source object if the copy is successful\n      * @since 11.1\n+     * @since 11.2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f913b9f30ce6e03db14776b47c83b7c9256c94e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjA3NDU1OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3ManagedTransfer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzoyNzo1M1rOGoSFLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzoyNzo1M1rOGoSFLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg5MjQ2Mw==", "bodyText": "There should be a blank line before the tags.", "url": "https://github.com/nuxeo/nuxeo/pull/4177#discussion_r444892463", "createdAt": "2020-06-24T13:27:53Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3ManagedTransfer.java", "diffHunk": "@@ -12,22 +12,21 @@\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- *\n- * Contributors:\n- *     pierre\n  */\n-package org.nuxeo.ecm.core.storage.sql;\n+package org.nuxeo.ecm.blob.s3;\n+\n+import com.amazonaws.services.s3.transfer.TransferManager;\n \n /**\n- * Mocked S3 Direct Upload handler to be tested.\n- *\n- * @since 10.2\n+ * S3 transfers relying on {@link TransferManager}\n+ * @since 11.2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afe272961c1961ac826c1f78bf102bbb7fa3e765"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjA3NTUxOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3ManagedTransfer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzoyODowN1rOGoSFzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzoyODowN1rOGoSFzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg5MjYyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * S3 transfers relying on {@link TransferManager}\n          \n          \n            \n             * S3 transfers relying on {@link TransferManager}.", "url": "https://github.com/nuxeo/nuxeo/pull/4177#discussion_r444892622", "createdAt": "2020-06-24T13:28:07Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3ManagedTransfer.java", "diffHunk": "@@ -12,22 +12,21 @@\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- *\n- * Contributors:\n- *     pierre\n  */\n-package org.nuxeo.ecm.core.storage.sql;\n+package org.nuxeo.ecm.blob.s3;\n+\n+import com.amazonaws.services.s3.transfer.TransferManager;\n \n /**\n- * Mocked S3 Direct Upload handler to be tested.\n- *\n- * @since 10.2\n+ * S3 transfers relying on {@link TransferManager}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afe272961c1961ac826c1f78bf102bbb7fa3e765"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjA3NjQyOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3ManagedTransfer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzoyODoxN1rOGoSGVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzoyODoxN1rOGoSGVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg5Mjc1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns the {@link TransferManager}\n          \n          \n            \n                 * Returns the {@link TransferManager}.", "url": "https://github.com/nuxeo/nuxeo/pull/4177#discussion_r444892756", "createdAt": "2020-06-24T13:28:17Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3ManagedTransfer.java", "diffHunk": "@@ -12,22 +12,21 @@\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- *\n- * Contributors:\n- *     pierre\n  */\n-package org.nuxeo.ecm.core.storage.sql;\n+package org.nuxeo.ecm.blob.s3;\n+\n+import com.amazonaws.services.s3.transfer.TransferManager;\n \n /**\n- * Mocked S3 Direct Upload handler to be tested.\n- *\n- * @since 10.2\n+ * S3 transfers relying on {@link TransferManager}\n+ * @since 11.2\n  */\n-public class MockedS3DirectBatchHandler extends S3DirectBatchHandler {\n+public interface S3ManagedTransfer {\n \n-    @Override\n-    protected long lowerThresholdToUseMultipartCopy() {\n-        return TestS3DirectBatchHandler.MULTIPART_THRESHOLD + 1;\n-    }\n+    /**\n+     * Returns the {@link TransferManager}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afe272961c1961ac826c1f78bf102bbb7fa3e765"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjA3NzAzOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3ManagedTransfer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzoyODoyNlrOGoSGtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzoyODoyNlrOGoSGtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg5Mjg1NA==", "bodyText": "Blank line before.", "url": "https://github.com/nuxeo/nuxeo/pull/4177#discussion_r444892854", "createdAt": "2020-06-24T13:28:26Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/blob/s3/S3ManagedTransfer.java", "diffHunk": "@@ -12,22 +12,21 @@\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- *\n- * Contributors:\n- *     pierre\n  */\n-package org.nuxeo.ecm.core.storage.sql;\n+package org.nuxeo.ecm.blob.s3;\n+\n+import com.amazonaws.services.s3.transfer.TransferManager;\n \n /**\n- * Mocked S3 Direct Upload handler to be tested.\n- *\n- * @since 10.2\n+ * S3 transfers relying on {@link TransferManager}\n+ * @since 11.2\n  */\n-public class MockedS3DirectBatchHandler extends S3DirectBatchHandler {\n+public interface S3ManagedTransfer {\n \n-    @Override\n-    protected long lowerThresholdToUseMultipartCopy() {\n-        return TestS3DirectBatchHandler.MULTIPART_THRESHOLD + 1;\n-    }\n+    /**\n+     * Returns the {@link TransferManager}\n+     * @since 11.2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afe272961c1961ac826c1f78bf102bbb7fa3e765"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjA4NTU5OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3Utils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzozMDoyMlrOGoSMDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzozMDoyMlrOGoSMDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg5NDIyMg==", "bodyText": "Specify what to use instead.\n@deprecated since 11.2, use XXXX instead", "url": "https://github.com/nuxeo/nuxeo/pull/4177#discussion_r444894222", "createdAt": "2020-06-24T13:30:22Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3Utils.java", "diffHunk": "@@ -125,7 +125,9 @@ public static void processSlices(long slice, long length, SliceConsumer consumer\n      * @param targetSSEAlgorithm the target SSE Algorithm to use, or {@code null}\n      * @param deleteSource whether to delete the source object if the copy is successful\n      * @since 11.1\n+     * @deprecated since 11.2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afe272961c1961ac826c1f78bf102bbb7fa3e765"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjA4NjE1OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3Utils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzozMDozMlrOGoSMcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzozMDozMlrOGoSMcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg5NDMyMg==", "bodyText": "Same as above.", "url": "https://github.com/nuxeo/nuxeo/pull/4177#discussion_r444894322", "createdAt": "2020-06-24T13:30:32Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3Utils.java", "diffHunk": "@@ -168,7 +170,9 @@ public static ObjectMetadata copyFileMultipart(AmazonS3 amazonS3, ObjectMetadata\n      * @param targetSSEAlgorithm the target SSE Algorithm to use, or {@code null}\n      * @param deleteSource whether to delete the source object if the copy is successful\n      * @since 11.1\n+     * @deprecated since 11.2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afe272961c1961ac826c1f78bf102bbb7fa3e765"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjA4Njk3OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3Utils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzozMDo0MFrOGoSM5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzozMDo0MFrOGoSM5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg5NDQzNw==", "bodyText": "Same as above.", "url": "https://github.com/nuxeo/nuxeo/pull/4177#discussion_r444894437", "createdAt": "2020-06-24T13:30:40Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-binarymanager-cloud/nuxeo-core-binarymanager-s3/src/main/java/org/nuxeo/ecm/core/storage/sql/S3Utils.java", "diffHunk": "@@ -249,7 +253,9 @@ public static ObjectMetadata copyFile(AmazonS3 amazonS3, ObjectMetadata objectMe\n      * @param targetSSEAlgorithm the target SSE Algorithm to use, or {@code null}\n      * @param deleteSource whether to delete the source object if the copy is successful\n      * @since 11.1\n+     * @deprecated since 11.2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afe272961c1961ac826c1f78bf102bbb7fa3e765"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4139, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}