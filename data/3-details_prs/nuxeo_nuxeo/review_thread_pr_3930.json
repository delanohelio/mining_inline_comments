{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0OTk4OTE0", "number": 3930, "reviewThreads": {"totalCount": 94, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzowNzoxMlrOD0vzfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjo0NDoyMlrOD8dgpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjM1NzcyOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/StreamMetricsComputation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzowNzoxMlrOGJ1Z2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzowNzoxMlrOGJ1Z2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk2NTMzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    log.debug(\"start update metrics: \" + metrics.size());\n          \n          \n            \n                    log.debug(\"start update metrics: {}\", metrics::size);", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r412965336", "createdAt": "2020-04-22T13:07:12Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/StreamMetricsComputation.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.stream;\n+\n+import static org.nuxeo.lib.stream.computation.log.ComputationRunner.NUXEO_METRICS_REGISTRY_NAME;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.lib.stream.codec.AvroMessageCodec;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.AbstractComputation;\n+import org.nuxeo.lib.stream.computation.ComputationContext;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.lib.stream.computation.Watermark;\n+import org.nuxeo.lib.stream.log.Latency;\n+import org.nuxeo.lib.stream.log.LogManager;\n+import org.nuxeo.lib.stream.log.internals.LogPartitionGroup;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import io.dropwizard.metrics5.Gauge;\n+import io.dropwizard.metrics5.MetricName;\n+import io.dropwizard.metrics5.MetricRegistry;\n+import io.dropwizard.metrics5.SharedMetricRegistries;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class StreamMetricsComputation extends AbstractComputation {\n+    private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(\n+            StreamMetricsComputation.class);\n+\n+    protected static final String NAME = \"streamMetrics\";\n+\n+    protected MetricRegistry registry = SharedMetricRegistries.getOrCreate(NUXEO_METRICS_REGISTRY_NAME);\n+\n+    protected final long intervalMs;\n+\n+    protected final List<String> inputStreams;\n+\n+    protected final List<String> streams = new ArrayList<>();\n+\n+    protected final Set<String> invalidStreams = new HashSet<>();\n+\n+    protected final List<LogPartitionGroup> groups = new ArrayList<>();\n+\n+    protected final List<LatencyMetric> metrics = new ArrayList<>();\n+\n+    protected LogManager manager;\n+\n+    protected final Codec<Record> codec = new AvroMessageCodec<>(Record.class);\n+\n+    protected long refreshGroupCounter;\n+\n+    public StreamMetricsComputation(Duration interval, List<String> streams) {\n+        super(NAME, 1, 0);\n+        this.intervalMs = interval.toMillis();\n+        this.inputStreams = streams;\n+    }\n+\n+    @Override\n+    public void init(ComputationContext context) {\n+        if (context.isSpareComputation()) {\n+            log.info(\"Spare instance nothing to report\");\n+            unregisterMetrics();\n+        } else {\n+            log.warn(\"Instance elected to report stream metrics\");\n+            context.setTimer(\"tracker\", System.currentTimeMillis() + intervalMs);\n+        }\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        unregisterMetrics();\n+    }\n+\n+    protected void registerMetrics() {\n+        unregisterMetrics();\n+        getGroups().forEach(group -> metrics.add(new LatencyMetric(group, registry)));\n+    }\n+\n+    protected void unregisterMetrics() {\n+        metrics.forEach(LatencyMetric::destroy);\n+        metrics.clear();\n+    }\n+\n+    @Override\n+    public void processTimer(ComputationContext context, String key, long timestamp) {\n+        refreshMetricsIfNeeded();\n+        log.debug(\"start update metrics: \" + metrics.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "097bd71e0de4e843113fa3b998381c284da3688a"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjM5OTI0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-audit/nuxeo-platform-audit-core/src/main/java/org/nuxeo/ecm/platform/audit/listener/StreamAuditEventListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoxNToyM1rOGJ1ycw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoxNToyM1rOGJ1ycw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk3MTYzNQ==", "bodyText": "Should recordOf call be inside the if?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r412971635", "createdAt": "2020-04-22T13:15:23Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-audit/nuxeo-platform-audit-core/src/main/java/org/nuxeo/ecm/platform/audit/listener/StreamAuditEventListener.java", "diffHunk": "@@ -119,18 +118,23 @@ protected void writeEntries() {\n         if (entries.get().isEmpty()) {\n             return;\n         }\n-        LogAppender<Record> appender = getLogManager().getAppender(STREAM_NAME);\n-        entries.get().forEach(entry -> writeEntry(appender, entry));\n+        StreamManager streamManager = getStreamManager();\n+        for (LogEntry entry : entries.get()) {\n+            Record record = recordOf(entry);\n+            if (entry != null) {\n+                streamManager.append(STREAM_NAME, record);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e473a8a93e4cc9a5a443585cd3cc35334ef9cdae"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjQzODgyOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/Name.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoyMzowMVrOGJ2KMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoyMzowMVrOGJ2KMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk3NzcxNQ==", "bodyText": "Missing some curly brackets", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r412977715", "createdAt": "2020-04-22T13:23:01Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/Name.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.lib.stream.log;\n+\n+import java.util.Objects;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * An identifier composed of a namespace and a specific name with 2 string representations:<br>\n+ * - an uniform resource name (urn) represented as a relative path: {@code namespace/name}<br>\n+ * - an identifier (id): encode the urn as {@code namespace-name}<br>\n+ *\n+ *\n+ * When there is no namespace, URN and id are identical.\n+ *\n+ * @since 11.1\n+ */\n+public class Name {\n+    public static final String NAMESPACE_GLOBAL = \"_GLOBAL_\";\n+\n+    public static final String NAMESPACE_URN_SEP = \"/\";\n+\n+    public static final String NAMESPACE_ID_SEP = \"-\";\n+\n+    protected static final Pattern VALID_NAMESPACE_PATTERN = Pattern.compile(\"[A-Za-z][A-Za-z0-9_]*\");\n+\n+    protected static final Pattern VALID_LOG_NAME_PATTERN = Pattern.compile(\"[A-Za-z0-9][A-Za-z0-9_\\\\-]*\");\n+\n+    protected static final Pattern VALID_LOG_NAME_WITHOUT_NS_PATTERN = Pattern.compile(\"[A-Za-z0-9][A-Za-z0-9_]*\");\n+\n+    protected final String namespace;\n+\n+    protected final String name;\n+\n+    protected final String id;\n+\n+    protected final String urn;\n+\n+    private Name(String namespace, String name) {\n+        checkNameSpace(namespace);\n+        this.namespace = namespace;\n+        this.name = name;\n+        if (NAMESPACE_GLOBAL.equals(namespace)) {\n+            checkLogNameWithoutNamespace(name);\n+            this.id = name;\n+            this.urn = name;\n+        } else {\n+            checkLogName(name);\n+            this.id = namespace + NAMESPACE_ID_SEP + name;\n+            this.urn = namespace + NAMESPACE_URN_SEP + name;\n+        }\n+    }\n+\n+    public static Name of(String namespace, String name) {\n+        return new Name(namespace, name);\n+    }\n+\n+    public static Name ofUrn(String urn) {\n+        Objects.requireNonNull(urn, \"Null URN\");\n+        int pos = urn.indexOf(NAMESPACE_URN_SEP);\n+        if (pos < 0) {\n+            return new Name(NAMESPACE_GLOBAL, urn);\n+        }\n+        return new Name(urn.substring(0, pos), urn.substring(pos + 1));\n+    }\n+\n+    public static Name ofId(String id) {\n+        Objects.requireNonNull(id, \"Null id\");\n+        int pos = id.indexOf(NAMESPACE_ID_SEP);\n+        if (pos < 0) {\n+            return new Name(NAMESPACE_GLOBAL, id);\n+        }\n+        return new Name(id.substring(0, pos), id.substring(pos + 1));\n+    }\n+\n+    public static String idOfUrn(String urn) {\n+        return Name.ofUrn(urn).getId();\n+    }\n+\n+    public static String urnOfId(String id) {\n+        return Name.ofId(id).getUrn();\n+    }\n+\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public String getUrn() {\n+        return urn;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Name{\" + \"namespace='\" + namespace + '\\'' + \", name='\" + name + '\\'' + \", id='\" + id + '\\'' + \", urn='\"\n+                + urn + '\\'' + '}';\n+    }\n+\n+    protected static void checkLogName(String name) {\n+        if (!VALID_LOG_NAME_PATTERN.matcher(name).matches()) {\n+            throw new IllegalArgumentException(\"Invalid name: '\" + name + \"'.\");\n+        }\n+    }\n+\n+    protected static void checkLogNameWithoutNamespace(String name) {\n+        if (!VALID_LOG_NAME_WITHOUT_NS_PATTERN.matcher(name).matches()) {\n+            throw new IllegalArgumentException(\"Invalid name without namespace: '\" + name + \"'\");\n+        }\n+    }\n+\n+    protected static void checkNameSpace(String name) {\n+        if (!VALID_NAMESPACE_PATTERN.matcher(name).matches() & !NAMESPACE_GLOBAL.equals(name)) {\n+            throw new IllegalArgumentException(\"Invalid namespace: '\" + name + \"'\");\n+        }\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o)\n+            return true;\n+        if (o == null || getClass() != o.getClass())\n+            return false;\n+        Name name = (Name) o;\n+        return Objects.equals(urn, name.urn);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e473a8a93e4cc9a5a443585cd3cc35334ef9cdae"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjU1NDY3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/RestoreCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzo0NDoyOFrOGJ3O8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzo0NDoyOFrOGJ3O8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk5NTMxNA==", "bodyText": "You can use Stream#of instead of Arrays.asList().stream().", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r412995314", "createdAt": "2020-04-22T13:44:28Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/RestoreCommand.java", "diffHunk": "@@ -210,15 +211,12 @@ protected Latency decodeLatency(byte[] data) {\n         return Latency.fromJson(new String(data, StandardCharsets.UTF_8));\n     }\n \n-    protected List<String> getLogNames(LogManager manager, String names) {\n+    protected List<Name> getLogNames(LogManager manager, String names) {\n         if (ALL_LOGS.equalsIgnoreCase(names)) {\n-            return manager.listAll()\n-                          .stream()\n-                          .filter(name -> !name.startsWith(INTERNAL_LOG_PREFIX))\n-                          .collect(Collectors.toList());\n+            return manager.listAll();\n         }\n-        List<String> ret = Arrays.asList(names.split(\",\"));\n-        for (String name : ret) {\n+        List<Name> ret = Arrays.asList(names.split(\",\")).stream().map(Name::ofUrn).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e473a8a93e4cc9a5a443585cd3cc35334ef9cdae"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjU4Mzc3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/TrackerCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzo0OTo1OFrOGJ3hCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzo0OTo1OFrOGJ3hCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk5OTk0Ng==", "bodyText": "INPUT_STREAM should be wrapped by Name or we should call getName from name ?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r412999946", "createdAt": "2020-04-22T13:49:58Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/TrackerCommand.java", "diffHunk": "@@ -126,19 +127,16 @@ public boolean run(LogManager manager, CommandLine cmd) {\n         return runProcessor(manager);\n     }\n \n-    protected List<String> getLogNames(LogManager manager, String names) {\n+    protected List<Name> getLogNames(LogManager manager, String names) {\n         if (ALL_LOGS.equalsIgnoreCase(names)) {\n-            return manager.listAll()\n-                          .stream()\n-                          .filter(name -> !name.startsWith(INTERNAL_LOG_PREFIX))\n-                          .filter(name -> !name.startsWith(INPUT_STREAM))\n+            return manager.listAll().stream().filter(name -> !INPUT_STREAM.equals(name))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e473a8a93e4cc9a5a443585cd3cc35334ef9cdae"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjU4ODU5OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/TrackerCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzo1MDo1M1rOGJ3j8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzo1MDo1M1rOGJ3j8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAwMDY5MA==", "bodyText": "Stream#of should be used.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r413000690", "createdAt": "2020-04-22T13:50:53Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/tools/command/TrackerCommand.java", "diffHunk": "@@ -126,19 +127,16 @@ public boolean run(LogManager manager, CommandLine cmd) {\n         return runProcessor(manager);\n     }\n \n-    protected List<String> getLogNames(LogManager manager, String names) {\n+    protected List<Name> getLogNames(LogManager manager, String names) {\n         if (ALL_LOGS.equalsIgnoreCase(names)) {\n-            return manager.listAll()\n-                          .stream()\n-                          .filter(name -> !name.startsWith(INTERNAL_LOG_PREFIX))\n-                          .filter(name -> !name.startsWith(INPUT_STREAM))\n+            return manager.listAll().stream().filter(name -> !INPUT_STREAM.equals(name))\n                           .collect(Collectors.toList());\n         }\n-        List<String> ret = Arrays.asList(names.split(\",\"));\n+        List<Name> ret = Arrays.asList(names.split(\",\")).stream().map(Name::ofUrn).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e473a8a93e4cc9a5a443585cd3cc35334ef9cdae"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjgxNzk4OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkActionDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDozMzo0NFrOGJ5wYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDozMzo0NFrOGJ5wYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzNjY0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return isBlank(inputStream) ? name : inputStream;\n          \n          \n            \n                    return defaultIfBlank(inputStream, name);", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r413036641", "createdAt": "2020-04-22T14:33:44Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkActionDescriptor.java", "diffHunk": "@@ -98,4 +103,10 @@ public void setEnabled(boolean isEnabled) {\n     public String getDefaultScroller() {\n         return defaultScroller;\n     }\n+\n+    // @since 11.1\n+    public String getInputStream() {\n+        return isBlank(inputStream) ? name : inputStream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32dc5fb7b2cfe48a613f5081726684dd980f0dee"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Njg4MDM2OnYy", "diffSide": "LEFT", "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/main/resources/OSGI-INF/imaging-bulk-contrib.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo0NTowMVrOGJ6WSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNjo0Nzo0M1rOGOb4Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA0NjM0Ng==", "bodyText": "I saw several produceImmediate removal, is it wanted?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r413046346", "createdAt": "2020-04-22T14:45:01Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/main/resources/OSGI-INF/imaging-bulk-contrib.xml", "diffHunk": "@@ -4,16 +4,14 @@\n   <require>org.nuxeo.ecm.core.bulk</require>\n \n   <extension target=\"org.nuxeo.ecm.core.bulk\" point=\"actions\">\n-    <action name=\"recomputeViews\" bucketSize=\"100\" batchSize=\"50\" httpEnabled=\"false\"\n+    <action name=\"recomputeViews\" inputStream=\"bulk/recomputeViews\" bucketSize=\"100\" batchSize=\"50\" httpEnabled=\"false\"\n       validationClass=\"org.nuxeo.ecm.platform.picture.recompute.RecomputeViewsActionValidation\" />\n   </extension>\n \n   <extension target=\"org.nuxeo.runtime.stream.service\" point=\"streamProcessor\">\n-    <streamProcessor name=\"recomputeViews\"\n-      class=\"org.nuxeo.ecm.platform.picture.recompute.RecomputeViewsAction\" logConfig=\"bulk\" defaultConcurrency=\"2\"\n-      defaultPartitions=\"2\">\n+    <streamProcessor name=\"recomputeViews\" class=\"org.nuxeo.ecm.platform.picture.recompute.RecomputeViewsAction\"\n+      defaultConcurrency=\"2\" defaultPartitions=\"2\">\n       <policy name=\"default\" maxRetries=\"3\" delay=\"1s\" maxDelay=\"10s\" continueOnFailure=\"true\" />\n-      <option name=\"produceImmediate\">false</option>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32dc5fb7b2cfe48a613f5081726684dd980f0dee"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc5MDAxNA==", "bodyText": "yes, produceImmediate option is not used by these action processors, they come from a bad copy/paste.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r417790014", "createdAt": "2020-04-30T06:47:43Z", "author": {"login": "bdelbosc"}, "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/main/resources/OSGI-INF/imaging-bulk-contrib.xml", "diffHunk": "@@ -4,16 +4,14 @@\n   <require>org.nuxeo.ecm.core.bulk</require>\n \n   <extension target=\"org.nuxeo.ecm.core.bulk\" point=\"actions\">\n-    <action name=\"recomputeViews\" bucketSize=\"100\" batchSize=\"50\" httpEnabled=\"false\"\n+    <action name=\"recomputeViews\" inputStream=\"bulk/recomputeViews\" bucketSize=\"100\" batchSize=\"50\" httpEnabled=\"false\"\n       validationClass=\"org.nuxeo.ecm.platform.picture.recompute.RecomputeViewsActionValidation\" />\n   </extension>\n \n   <extension target=\"org.nuxeo.runtime.stream.service\" point=\"streamProcessor\">\n-    <streamProcessor name=\"recomputeViews\"\n-      class=\"org.nuxeo.ecm.platform.picture.recompute.RecomputeViewsAction\" logConfig=\"bulk\" defaultConcurrency=\"2\"\n-      defaultPartitions=\"2\">\n+    <streamProcessor name=\"recomputeViews\" class=\"org.nuxeo.ecm.platform.picture.recompute.RecomputeViewsAction\"\n+      defaultConcurrency=\"2\" defaultPartitions=\"2\">\n       <policy name=\"default\" maxRetries=\"3\" delay=\"1s\" maxDelay=\"10s\" continueOnFailure=\"true\" />\n-      <option name=\"produceImmediate\">false</option>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA0NjM0Ng=="}, "originalCommit": {"oid": "32dc5fb7b2cfe48a613f5081726684dd980f0dee"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Njk0OTE4OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-importer/nuxeo-importer-stream/src/test/java/org/nuxeo/importer/stream/tests/importer/TestBlobImport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo1NzoxNlrOGJ7A0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNjo0ODoxOFrOGOb5KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA1NzIzMg==", "bodyText": "You may want to configure in the RuntimeStreamFeature or add LogManager and StreamManager as services of StreamServiceImpl component?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r413057232", "createdAt": "2020-04-22T14:57:16Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-platform-importer/nuxeo-importer-stream/src/test/java/org/nuxeo/importer/stream/tests/importer/TestBlobImport.java", "diffHunk": "@@ -49,20 +51,24 @@\n import org.nuxeo.lib.stream.pattern.consumer.ConsumerStatus;\n import org.nuxeo.lib.stream.pattern.producer.ProducerPool;\n import org.nuxeo.lib.stream.pattern.producer.ProducerStatus;\n-import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.stream.StreamService;\n import org.nuxeo.runtime.test.runner.Features;\n import org.nuxeo.runtime.test.runner.FeaturesRunner;\n \n @RunWith(FeaturesRunner.class)\n @Features(CoreFeature.class)\n-@Deploy(\"org.nuxeo.runtime.stream\")\n-public abstract class TestBlobImport {\n+public class TestBlobImport {\n     protected static final Log log = LogFactory.getLog(TestBlobImport.class);\n \n     @Rule\n     public TemporaryFolder folder = new TemporaryFolder();\n \n-    public abstract LogManager getManager() throws Exception;\n+    @Inject\n+    StreamService streamService;\n+\n+    protected LogManager getManager() {\n+        return streamService.getLogManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdc69c611775d5e0b16482425936bee8ec90762"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc5MDI0OQ==", "bodyText": "I agree there is something to do here, let's discuss about that.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r417790249", "createdAt": "2020-04-30T06:48:18Z", "author": {"login": "bdelbosc"}, "path": "modules/platform/nuxeo-platform-importer/nuxeo-importer-stream/src/test/java/org/nuxeo/importer/stream/tests/importer/TestBlobImport.java", "diffHunk": "@@ -49,20 +51,24 @@\n import org.nuxeo.lib.stream.pattern.consumer.ConsumerStatus;\n import org.nuxeo.lib.stream.pattern.producer.ProducerPool;\n import org.nuxeo.lib.stream.pattern.producer.ProducerStatus;\n-import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.stream.StreamService;\n import org.nuxeo.runtime.test.runner.Features;\n import org.nuxeo.runtime.test.runner.FeaturesRunner;\n \n @RunWith(FeaturesRunner.class)\n @Features(CoreFeature.class)\n-@Deploy(\"org.nuxeo.runtime.stream\")\n-public abstract class TestBlobImport {\n+public class TestBlobImport {\n     protected static final Log log = LogFactory.getLog(TestBlobImport.class);\n \n     @Rule\n     public TemporaryFolder folder = new TemporaryFolder();\n \n-    public abstract LogManager getManager() throws Exception;\n+    @Inject\n+    StreamService streamService;\n+\n+    protected LogManager getManager() {\n+        return streamService.getLogManager();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA1NzIzMg=="}, "originalCommit": {"oid": "dcdc69c611775d5e0b16482425936bee8ec90762"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDE1ODQ0OnYy", "diffSide": "LEFT", "path": "Jenkinsfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNTo0Mjo0MFrOGRZUuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzowMTo1M1rOGUwbrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5Mzg4MA==", "bodyText": "We want to keep it, no?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r420893880", "createdAt": "2020-05-06T15:42:40Z", "author": {"login": "kevinleturc"}, "path": "Jenkinsfile", "diffHunk": "@@ -30,7 +30,6 @@ testEnvironments= [\n properties([\n   [$class: 'GithubProjectProperty', projectUrlStr: repositoryUrl],\n   [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', daysToKeepStr: '60', numToKeepStr: '60', artifactNumToKeepStr: '5']],\n-  disableConcurrentBuilds(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2701ff337d32ee3577d2308956dce8c47d96e9f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQxODIyMQ==", "bodyText": "yes it was for speed up testing, I will remove the commit", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424418221", "createdAt": "2020-05-13T13:01:53Z", "author": {"login": "bdelbosc"}, "path": "Jenkinsfile", "diffHunk": "@@ -30,7 +30,6 @@ testEnvironments= [\n properties([\n   [$class: 'GithubProjectProperty', projectUrlStr: repositoryUrl],\n   [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', daysToKeepStr: '60', numToKeepStr: '60', artifactNumToKeepStr: '5']],\n-  disableConcurrentBuilds(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5Mzg4MA=="}, "originalCommit": {"oid": "d2701ff337d32ee3577d2308956dce8c47d96e9f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDU4ODY5OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/action/DeletionAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzoyNjoyMFrOGRdlvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzo0MjowN1rOGVP0Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2Mzc3Mw==", "bodyText": "Isn't problematic to leave a document in repository?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r420963773", "createdAt": "2020-05-06T17:26:20Z", "author": {"login": "kevinleturc"}, "path": "modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/action/DeletionAction.java", "diffHunk": "@@ -70,6 +77,8 @@ protected void compute(CoreSession session, List<String> ids, Map<String, Serial\n                     doc.removeSingleton();\n                 } catch (DocumentNotFoundException e) {\n                     // Document is already deleted\n+                } catch (DocumentExistsException e) {\n+                    log.debug(\"Cannot delete {}: {}\", id, e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2701ff337d32ee3577d2308956dce8c47d96e9f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxMTYyNw==", "bodyText": "Not really for documents under legal hold/retention I guess?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424511627", "createdAt": "2020-05-13T15:05:32Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/action/DeletionAction.java", "diffHunk": "@@ -70,6 +77,8 @@ protected void compute(CoreSession session, List<String> ids, Map<String, Serial\n                     doc.removeSingleton();\n                 } catch (DocumentNotFoundException e) {\n                     // Document is already deleted\n+                } catch (DocumentExistsException e) {\n+                    log.debug(\"Cannot delete {}: {}\", id, e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2Mzc3Mw=="}, "originalCommit": {"oid": "d2701ff337d32ee3577d2308956dce8c47d96e9f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkzMjM1NA==", "bodyText": "Yes, this is going to create an orphan document, we need to discuss this with the PO. For now, I just want to avoid a stuck action.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424932354", "createdAt": "2020-05-14T07:42:07Z", "author": {"login": "bdelbosc"}, "path": "modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/action/DeletionAction.java", "diffHunk": "@@ -70,6 +77,8 @@ protected void compute(CoreSession session, List<String> ids, Map<String, Serial\n                     doc.removeSingleton();\n                 } catch (DocumentNotFoundException e) {\n                     // Document is already deleted\n+                } catch (DocumentExistsException e) {\n+                    log.debug(\"Cannot delete {}: {}\", id, e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2Mzc3Mw=="}, "originalCommit": {"oid": "d2701ff337d32ee3577d2308956dce8c47d96e9f"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDU5MTYxOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/services/TestWorkManagerRunWorkInFailure.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzoyNzowM1rOGRdnlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzoyNzowM1rOGRdnlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk2NDI0NA==", "bodyText": "new line not needed", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r420964244", "createdAt": "2020-05-06T17:27:03Z", "author": {"login": "kevinleturc"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/test/java/org/nuxeo/ecm/automation/core/operations/services/TestWorkManagerRunWorkInFailure.java", "diffHunk": "@@ -57,8 +57,8 @@\n @Features({ RuntimeStreamFeature.class, CoreFeature.class })\n @Deploy(\"org.nuxeo.ecm.automation.core\")\n @Deploy(\"org.nuxeo.ecm.automation.features\")\n-@Deploy(\"org.nuxeo.ecm.core.event:test-work-dead-letter-queue.xml\")\n @RepositoryConfig(cleanup = Granularity.METHOD)\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2701ff337d32ee3577d2308956dce8c47d96e9f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzI0ODA0OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDowMDozMlrOGUzDnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDowMDozMlrOGUzDnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ2MTIxNQ==", "bodyText": "We probably could add it by default too MAVEN_ARGS and explicitly set it to false at the package step?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424461215", "createdAt": "2020-05-13T14:00:32Z", "author": {"login": "troger"}, "path": "Jenkinsfile", "diffHunk": "@@ -86,7 +86,7 @@ String getDockerTagFrom(String version) {\n \n void runFunctionalTests(String baseDir) {\n   try {\n-    sh \"mvn ${MAVEN_ARGS} -f ${baseDir}/pom.xml verify\"\n+    sh \"mvn ${MAVEN_ARGS} -Dnuxeo.skip.enforcer=true -f ${baseDir}/pom.xml verify\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzI3MDA1OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDowNToyMVrOGUzRtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDowNToyMVrOGUzRtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ2NDgyMg==", "bodyText": "Could be removed as we know use TEST_LONG_ROLLOUT_STATUS_TIMEOUT, right?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424464822", "createdAt": "2020-05-13T14:05:21Z", "author": {"login": "troger"}, "path": "Jenkinsfile", "diffHunk": "@@ -261,16 +302,25 @@ pipeline {\n     TEST_HELM_CHART_RELEASE = 'test-release'\n     TEST_NAMESPACE_PREFIX = \"nuxeo-unit-tests-$BRANCH_NAME-$BUILD_NUMBER\".toLowerCase()\n     TEST_SERVICE_DOMAIN_SUFFIX = 'svc.cluster.local'\n-    TEST_REDIS_RESOURCE = \"${TEST_HELM_CHART_RELEASE}-redis-master\"\n-    TEST_ELASTICSEARCH_RESOURCE = \"${TEST_HELM_CHART_RELEASE}-elasticsearch-client\"\n+    TEST_REDIS_K8S_OBJECT = \"${TEST_HELM_CHART_RELEASE}-redis-master\"\n+    TEST_MONGODB_K8S_OBJECT = \"${TEST_HELM_CHART_RELEASE}-mongodb\"\n+    TEST_POSTGRESQL_K8S_OBJECT = \"${TEST_HELM_CHART_RELEASE}-postgresql\"\n+    TEST_ELASTICSEARCH_DATA_K8S_OBJECT = \"${TEST_HELM_CHART_RELEASE}-elasticsearch-data\"\n+    TEST_ELASTICSEARCH_MASTER_K8S_OBJECT = \"${TEST_HELM_CHART_RELEASE}-elasticsearch-master\"\n+    TEST_ELASTICSEARCH_CLIENT_K8S_OBJECT = \"${TEST_HELM_CHART_RELEASE}-elasticsearch-client\"\n+    TEST_KAFKA_K8S_OBJECT = \"${TEST_HELM_CHART_RELEASE}-kafka\"\n+    TEST_KAFKA_PORT = '9092'\n+    TEST_KAFKA_POD_NAME = \"${TEST_KAFKA_K8S_OBJECT}-0\"\n     TEST_DEFAULT_ROLLOUT_STATUS_TIMEOUT = '1m'\n-     // Elasticsearch might take longer\n+    // Elasticsearch might take longer\n     TEST_ELASTICSEARCH_ROLLOUT_STATUS_TIMEOUT = '3m'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzI5MTc3OnYy", "diffSide": "RIGHT", "path": "ci/helm/nuxeo-test-elasticsearch-values.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxMDoyMFrOGUzf-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzozODo0NlrOGVcs-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ2ODQ3NQ==", "bodyText": "Shouldn't we need\npodLabels:\n  branch: $BRANCH_NAME\n  resource: pod\n  team: platform\n  usage: utests\n\non each Elasticsearch pod also for tracking purposes?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424468475", "createdAt": "2020-05-13T14:10:20Z", "author": {"login": "troger"}, "path": "ci/helm/nuxeo-test-elasticsearch-values.yaml", "diffHunk": "@@ -0,0 +1,27 @@\n+elasticsearch:\n+  client:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE0MzU0NQ==", "bodyText": "ok let's try", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425143545", "createdAt": "2020-05-14T13:38:46Z", "author": {"login": "bdelbosc"}, "path": "ci/helm/nuxeo-test-elasticsearch-values.yaml", "diffHunk": "@@ -0,0 +1,27 @@\n+elasticsearch:\n+  client:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ2ODQ3NQ=="}, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzMwMDI5OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkActionDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxMjoxNFrOGUzlbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxMjoxNFrOGUzlbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ2OTg2OQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424469869", "createdAt": "2020-05-13T14:12:14Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkActionDescriptor.java", "diffHunk": "@@ -41,6 +43,9 @@\n     @XNode(\"@name\")\n     public String name;\n \n+    @XNode(\"@inputStream\")\n+    public String inputStream;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzMwNjM2OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxMzoyOVrOGUzpMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxMzoyOVrOGUzpMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3MDgzNA==", "bodyText": "Worth adding a @deprecated since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424470834", "createdAt": "2020-05-13T14:13:29Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "diffHunk": "@@ -57,15 +58,23 @@\n \n     private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(BulkServiceImpl.class);\n \n+    // log config is not needed anymore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzMwOTE1OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxNDoxMFrOGUzq_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxNDoxMFrOGUzq_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3MTI5Mw==", "bodyText": "Missing @since on new public constants.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424471293", "createdAt": "2020-05-13T14:14:10Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-bulk/src/main/java/org/nuxeo/ecm/core/bulk/BulkServiceImpl.java", "diffHunk": "@@ -57,15 +58,23 @@\n \n     private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(BulkServiceImpl.class);\n \n+    // log config is not needed anymore\n+    @Deprecated\n     public static final String BULK_LOG_MANAGER_NAME = \"bulk\";\n \n     public static final String BULK_KV_STORE_NAME = \"bulk\";\n \n-    public static final String COMMAND_STREAM = \"command\";\n+    public static final String COMMAND_STREAM = \"bulk/command\";\n \n-    public static final String STATUS_STREAM = \"status\";\n+    public static final Name COMMAND_STREAM_NAME = Name.ofUrn(COMMAND_STREAM);\n \n-    public static final String DONE_STREAM = \"done\";\n+    public static final String STATUS_STREAM = \"bulk/status\";\n+\n+    public static final Name STATUS_STREAM_NAME = Name.ofUrn(STATUS_STREAM);\n+\n+    public static final String DONE_STREAM = \"bulk/done\";\n+\n+    public static final Name DONE_STREAM_NAME = Name.ofUrn(DONE_STREAM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzM2ODYxOnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-event/src/main/java/org/nuxeo/ecm/core/work/StreamWorkManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoyNzowNFrOGU0SGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoyNzowNFrOGU0SGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4MTMwNw==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424481307", "createdAt": "2020-05-13T14:27:04Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-event/src/main/java/org/nuxeo/ecm/core/work/StreamWorkManager.java", "diffHunk": "@@ -106,6 +107,8 @@\n \n     protected long CACHE_LAST_METRIC_DURATION_MS = 1000;\n \n+    public static final String NAMESPACE_PREFIX = \"work/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzM5NDU5OnYy", "diffSide": "LEFT", "path": "modules/core/nuxeo-core-event/src/main/java/org/nuxeo/ecm/core/work/WorkManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDozMjozOFrOGU0i1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzo1MjoxMVrOGVdUFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4NTU5MA==", "bodyText": "Shouldn't we keep it for backward compat'?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424485590", "createdAt": "2020-05-13T14:32:38Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-event/src/main/java/org/nuxeo/ecm/core/work/WorkManagerImpl.java", "diffHunk": "@@ -114,19 +115,12 @@\n      */\n     public static final String WORKMANAGER_PROCESSING_DISABLE = \"nuxeo.work.processing.disable\";\n \n-    /**\n-     * The Log Manager name to use for accessing the dead letter queue stream.\n-     *\n-     * @since 11.1\n-     */\n-    public static final String DEFAULT_LOG_MANAGER = \"default\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1MzU1Ng==", "bodyText": "to be backward compat with 11.1 :)", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425153556", "createdAt": "2020-05-14T13:52:11Z", "author": {"login": "bdelbosc"}, "path": "modules/core/nuxeo-core-event/src/main/java/org/nuxeo/ecm/core/work/WorkManagerImpl.java", "diffHunk": "@@ -114,19 +115,12 @@\n      */\n     public static final String WORKMANAGER_PROCESSING_DISABLE = \"nuxeo.work.processing.disable\";\n \n-    /**\n-     * The Log Manager name to use for accessing the dead letter queue stream.\n-     *\n-     * @since 11.1\n-     */\n-    public static final String DEFAULT_LOG_MANAGER = \"default\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4NTU5MA=="}, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzUyNTA0OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/work/StreamWorkManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDo1OToyM1rOGU12Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDo1OToyM1rOGU12Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwNjg5OQ==", "bodyText": "Not formatted?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424506899", "createdAt": "2020-05-13T14:59:23Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/work/StreamWorkManagerTest.java", "diffHunk": "@@ -86,20 +86,26 @@ public void testWorkManagerConfigDisableAllAfterStart() {\n \n     @Test\n     public void testWorkIdempotent() throws InterruptedException {\n-        SleepWork work = new SleepWork(getDurationMillis());\n+        long durationMs = 1_000;\n+        SleepWork work = new SleepWork(durationMs);\n         assertTrue(work.isIdempotent());\n+\n         service.schedule(work);\n-        assertTrue(service.awaitCompletion(getDurationMillis() * 5L, TimeUnit.MILLISECONDS));\n+        assertTrue(service.awaitCompletion(60, TimeUnit.SECONDS));\n         tracker.assertDiff(0, 0, 1, 0);\n \n-        // schedule again the exact same work 3 times\n-        service.schedule(work);\n-        service.schedule(work);\n-        service.schedule(work);\n+        // schedule again the exact same work many times\n+        for (int i=0; i<10; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzUzMDk2OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/work/StreamWorkManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowMDozOFrOGU156A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzo1NDo0MFrOGVdbaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwNzg4MA==", "bodyText": "Do we need the String.valueOf(elapsed) as message? As elapsed will be displayed anyway if it fails?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424507880", "createdAt": "2020-05-13T15:00:38Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/work/StreamWorkManagerTest.java", "diffHunk": "@@ -86,20 +86,26 @@ public void testWorkManagerConfigDisableAllAfterStart() {\n \n     @Test\n     public void testWorkIdempotent() throws InterruptedException {\n-        SleepWork work = new SleepWork(getDurationMillis());\n+        long durationMs = 1_000;\n+        SleepWork work = new SleepWork(durationMs);\n         assertTrue(work.isIdempotent());\n+\n         service.schedule(work);\n-        assertTrue(service.awaitCompletion(getDurationMillis() * 5L, TimeUnit.MILLISECONDS));\n+        assertTrue(service.awaitCompletion(60, TimeUnit.SECONDS));\n         tracker.assertDiff(0, 0, 1, 0);\n \n-        // schedule again the exact same work 3 times\n-        service.schedule(work);\n-        service.schedule(work);\n-        service.schedule(work);\n+        // schedule again the exact same work many times\n+        for (int i=0; i<10; i++) {\n+            service.schedule(work);\n+        }\n \n-        // works with the same id are skipped immediately and marked as completed, we don't have to wait 5s\n-        assertTrue(service.awaitCompletion(getDurationMillis() / 2, TimeUnit.MILLISECONDS));\n-        tracker.assertDiff(0, 0, 4, 0);\n+        long start = System.currentTimeMillis();\n+        assertTrue(service.awaitCompletion(60, TimeUnit.SECONDS));\n+        long elapsed = System.currentTimeMillis() - start;\n+        tracker.assertDiff(0, 0, 11, 0);\n+\n+        // works with the same id are skipped immediately and marked as completed\n+        assertTrue(String.valueOf(elapsed), elapsed <= 4_000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1NTQzNQ==", "bodyText": "\ud83e\udd14", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425155435", "createdAt": "2020-05-14T13:54:40Z", "author": {"login": "bdelbosc"}, "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/work/StreamWorkManagerTest.java", "diffHunk": "@@ -86,20 +86,26 @@ public void testWorkManagerConfigDisableAllAfterStart() {\n \n     @Test\n     public void testWorkIdempotent() throws InterruptedException {\n-        SleepWork work = new SleepWork(getDurationMillis());\n+        long durationMs = 1_000;\n+        SleepWork work = new SleepWork(durationMs);\n         assertTrue(work.isIdempotent());\n+\n         service.schedule(work);\n-        assertTrue(service.awaitCompletion(getDurationMillis() * 5L, TimeUnit.MILLISECONDS));\n+        assertTrue(service.awaitCompletion(60, TimeUnit.SECONDS));\n         tracker.assertDiff(0, 0, 1, 0);\n \n-        // schedule again the exact same work 3 times\n-        service.schedule(work);\n-        service.schedule(work);\n-        service.schedule(work);\n+        // schedule again the exact same work many times\n+        for (int i=0; i<10; i++) {\n+            service.schedule(work);\n+        }\n \n-        // works with the same id are skipped immediately and marked as completed, we don't have to wait 5s\n-        assertTrue(service.awaitCompletion(getDurationMillis() / 2, TimeUnit.MILLISECONDS));\n-        tracker.assertDiff(0, 0, 4, 0);\n+        long start = System.currentTimeMillis();\n+        assertTrue(service.awaitCompletion(60, TimeUnit.SECONDS));\n+        long elapsed = System.currentTimeMillis() - start;\n+        tracker.assertDiff(0, 0, 11, 0);\n+\n+        // works with the same id are skipped immediately and marked as completed\n+        assertTrue(String.valueOf(elapsed), elapsed <= 4_000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwNzg4MA=="}, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzUzOTE5OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/work/StreamWorkManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowMjozMlrOGU1_aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowMjozMlrOGU1_aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwOTI5MQ==", "bodyText": "Sane as above.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424509291", "createdAt": "2020-05-13T15:02:32Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core-event/src/test/java/org/nuxeo/ecm/core/work/StreamWorkManagerTest.java", "diffHunk": "@@ -158,23 +164,23 @@ public void testNoConcurrentJobsWithSameId() throws InterruptedException {\n     public void onlyLastCoalescingWorkShouldBeExecuted() throws InterruptedException {\n         log.debug(\"StreamWorkManagerTest.onlyLastCoalescingWorkShouldBeExecuted() beginning\");\n         // long work, to serve as a filler\n-        SleepWork longWork = createCoalescing(getDurationMillis() * 100L);\n+        int longDurationMs = 20_000;\n+        int shortDurationMs = 1_000;\n+        SleepWork longWork = createCoalescing(longDurationMs);\n         // short work the only to be actually computed\n-        SleepWork shortWork = createCoalescing(getDurationMillis());\n+        SleepWork shortWork = createCoalescing(shortDurationMs);\n \n-        // we have to let the service warm up as the first offset is falsely set to 0\n         service.schedule(shortWork);\n-        assertTrue(service.awaitCompletion(getDurationMillis() * 2L, TimeUnit.MILLISECONDS));\n-        tracker.assertDiff(0, 0, 1, 0);\n-\n-        // a work will actually be executed only if handled before the next one is scheduled\n-        // it's not the case here and the long works will be skipped\n         service.schedule(longWork);\n         service.schedule(longWork);\n-        // only the last, short work, will actually be computed and waiting for it's execution time is enough\n+        // only the last, short work, will actually be computed and waiting less than a long work is enough\n         service.schedule(shortWork);\n-        assertTrue(service.awaitCompletion(getDurationMillis(), TimeUnit.MILLISECONDS));\n+\n+        long start = System.currentTimeMillis();\n+        assertTrue(service.awaitCompletion(60, TimeUnit.SECONDS));\n+        long elapsed = System.currentTimeMillis() - start;\n         tracker.assertDiff(0, 0, 4, 0);\n+        assertTrue(String.valueOf(elapsed), elapsed < longDurationMs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzU1NDI1OnYy", "diffSide": "RIGHT", "path": "modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/security/RetentionExpiredAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowNTo0NFrOGU2JIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMzo1NzozN1rOGVdkNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxMTc3Nw==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424511777", "createdAt": "2020-05-13T15:05:44Z", "author": {"login": "troger"}, "path": "modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/security/RetentionExpiredAction.java", "diffHunk": "@@ -58,11 +58,13 @@\n \n     public static final String ACTION_NAME = \"retentionExpired\";\n \n+    public static final String ACTION_FULL_NAME = \"retention/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE1NzY4Ng==", "bodyText": "the class is created in 11.1", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425157686", "createdAt": "2020-05-14T13:57:37Z", "author": {"login": "bdelbosc"}, "path": "modules/core/nuxeo-core/src/main/java/org/nuxeo/ecm/core/security/RetentionExpiredAction.java", "diffHunk": "@@ -58,11 +58,13 @@\n \n     public static final String ACTION_NAME = \"retentionExpired\";\n \n+    public static final String ACTION_FULL_NAME = \"retention/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxMTc3Nw=="}, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzU2MTc2OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/TestSnapshotPersist.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowNzoxOVrOGU2N1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzoyNDowMFrOGWqcHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxMjk4Mg==", "bodyText": "Is there a NXP to fix it and remove the @Ignore?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424512982", "createdAt": "2020-05-13T15:07:19Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/TestSnapshotPersist.java", "diffHunk": "@@ -52,6 +53,7 @@\n \n @RunWith(FeaturesRunner.class)\n @Features(RuntimeSnaphotFeature.class)\n+@Ignore(\"Fail to udpate on multi stream env\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxNzE4Mw==", "bodyText": "yes it is now removed", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r426417183", "createdAt": "2020-05-18T07:24:00Z", "author": {"login": "bdelbosc"}, "path": "modules/platform/nuxeo-apidoc-server/nuxeo-apidoc-repo/src/test/java/org/nuxeo/apidoc/test/TestSnapshotPersist.java", "diffHunk": "@@ -52,6 +53,7 @@\n \n @RunWith(FeaturesRunner.class)\n @Features(RuntimeSnaphotFeature.class)\n+@Ignore(\"Fail to udpate on multi stream env\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxMjk4Mg=="}, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzU2NDA5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/services/bulk/AutomationBulkAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowNzo1MlrOGU2PWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowNzo1MlrOGU2PWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxMzM2OA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424513368", "createdAt": "2020-05-13T15:07:52Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/services/bulk/AutomationBulkAction.java", "diffHunk": "@@ -56,14 +56,16 @@\n \n     public static final String ACTION_NAME = \"automation\";\n \n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzU2NTQ0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/services/bulk/BulkRunAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowODowNlrOGU2QKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowODowNlrOGU2QKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxMzU3Nw==", "bodyText": "Not used?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424513577", "createdAt": "2020-05-13T15:08:06Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-automation/nuxeo-automation-features/src/main/java/org/nuxeo/ecm/automation/core/operations/services/bulk/BulkRunAction.java", "diffHunk": "@@ -50,6 +52,8 @@\n @Operation(id = BulkRunAction.ID, category = Constants.CAT_SERVICES, label = \"Run a bulk command\", addToStudio = true, description = \"Run a bulk action on a set of documents expressed by a NXQL.\")\n public class BulkRunAction {\n \n+    private static Logger log = LogManager.getLogger(BulkRunAction.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzU3MDg5OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/bulk/IndexAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowOToxOFrOGU2Tzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowOToxOFrOGU2Tzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxNDUxMQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424514511", "createdAt": "2020-05-13T15:09:18Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-elasticsearch/nuxeo-elasticsearch-core/src/main/java/org/nuxeo/elasticsearch/bulk/IndexAction.java", "diffHunk": "@@ -39,6 +39,8 @@\n public class IndexAction implements StreamProcessorTopology {\n     public static final String ACTION_NAME = \"index\";\n \n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzU4NTI5OnYy", "diffSide": "LEFT", "path": "modules/platform/nuxeo-platform-audit/nuxeo-platform-audit-core/src/main/java/org/nuxeo/ecm/platform/audit/listener/StreamAuditEventListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxMjozOFrOGU2ddw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDowOTowOFrOGVeFMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxNjk4Mw==", "bodyText": "Should we keep them for backward compat'? Or anyway it's not working anymore and customers must update their code?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424516983", "createdAt": "2020-05-13T15:12:38Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-audit/nuxeo-platform-audit-core/src/main/java/org/nuxeo/ecm/platform/audit/listener/StreamAuditEventListener.java", "diffHunk": "@@ -61,11 +60,7 @@\n \n     public static final String STREAM_AUDIT_ENABLED_PROP = \"nuxeo.stream.audit.enabled\";\n \n-    public static final String AUDIT_LOG_CONFIG_PROP = \"nuxeo.stream.audit.log.config\";\n-\n-    public static final String DEFAULT_LOG_CONFIG = \"audit\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE2NjEyOA==", "bodyText": "ok I to keep DEFAULT_LOG_CONFIG as deprecated.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425166128", "createdAt": "2020-05-14T14:09:08Z", "author": {"login": "bdelbosc"}, "path": "modules/platform/nuxeo-platform-audit/nuxeo-platform-audit-core/src/main/java/org/nuxeo/ecm/platform/audit/listener/StreamAuditEventListener.java", "diffHunk": "@@ -61,11 +60,7 @@\n \n     public static final String STREAM_AUDIT_ENABLED_PROP = \"nuxeo.stream.audit.enabled\";\n \n-    public static final String AUDIT_LOG_CONFIG_PROP = \"nuxeo.stream.audit.log.config\";\n-\n-    public static final String DEFAULT_LOG_CONFIG = \"audit\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxNjk4Mw=="}, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzU5MzAzOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-csv-export/src/main/java/org/nuxeo/ecm/platform/csv/export/action/CSVExportAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxNDoyM1rOGU2irg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxNDoyM1rOGU2irg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxODMxOA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424518318", "createdAt": "2020-05-13T15:14:23Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-csv-export/src/main/java/org/nuxeo/ecm/platform/csv/export/action/CSVExportAction.java", "diffHunk": "@@ -43,12 +43,14 @@\n \n     public static final String ACTION_NAME = \"csvExport\";\n \n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzU5NDgwOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestCommentsMigrator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxNDo0N1rOGU2j5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjo0NjozNlrOGVlPaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxODYzMQ==", "bodyText": "Same comment as before, do we really need the String.valueOf(eventSize) as message?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424518631", "createdAt": "2020-05-13T15:14:47Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestCommentsMigrator.java", "diffHunk": "@@ -222,7 +222,8 @@ public void testMigrationFromPropertyToSecuredWithCommentParentEmpty() {\n         transactionalFeature.nextTransaction();\n \n         List<LogEvent> events = logCaptureResult.getCaughtEvents();\n-        assertEquals(NB_COMMENTS_BY_FILE + 1, events.size());\n+        int eventSize = events.size();\n+        assertTrue(String.valueOf(eventSize), eventSize >= NB_COMMENTS_BY_FILE + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI4MzQzMw==", "bodyText": "yes", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425283433", "createdAt": "2020-05-14T16:46:36Z", "author": {"login": "bdelbosc"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestCommentsMigrator.java", "diffHunk": "@@ -222,7 +222,8 @@ public void testMigrationFromPropertyToSecuredWithCommentParentEmpty() {\n         transactionalFeature.nextTransaction();\n \n         List<LogEvent> events = logCaptureResult.getCaughtEvents();\n-        assertEquals(NB_COMMENTS_BY_FILE + 1, events.size());\n+        int eventSize = events.size();\n+        assertTrue(String.valueOf(eventSize), eventSize >= NB_COMMENTS_BY_FILE + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxODYzMQ=="}, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzU5NTM4OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestCommentsMigrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxNDo1NVrOGU2kUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxNDo1NVrOGU2kUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxODczNw==", "bodyText": "Same as above :)", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424518737", "createdAt": "2020-05-13T15:14:55Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-comment/nuxeo-platform-comment/src/test/java/org/nuxeo/ecm/platform/comment/TestCommentsMigrator.java", "diffHunk": "@@ -265,7 +266,8 @@ public void testMigrationFromPropertyToSecuredWithRemovedParentComment() {\n         transactionalFeature.nextTransaction();\n \n         List<LogEvent> events = logCaptureResult.getCaughtEvents();\n-        assertEquals(NB_COMMENTS_BY_FILE + 1, events.size());\n+        int eventSize = events.size();\n+        assertTrue(String.valueOf(eventSize), eventSize >= NB_COMMENTS_BY_FILE + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzU5NzMzOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/main/java/org/nuxeo/ecm/platform/picture/recompute/RecomputeViewsAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxNToxNlrOGU2liw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxNToxNlrOGU2liw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxOTA1MQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424519051", "createdAt": "2020-05-13T15:15:16Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/main/java/org/nuxeo/ecm/platform/picture/recompute/RecomputeViewsAction.java", "diffHunk": "@@ -61,14 +61,16 @@\n \n     public static final String ACTION_NAME = \"recomputeViews\";\n \n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzYwMjEwOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/test/java/org/nuxeo/ecm/platform/picture/core/test/TestPictureConversions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxNjoyMVrOGU2osg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzoyNjo0NlrOGWqhpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxOTg1OA==", "bodyText": "Shouldn't we use assumeTrue/assumeFalse for that?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424519858", "createdAt": "2020-05-13T15:16:21Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/test/java/org/nuxeo/ecm/platform/picture/core/test/TestPictureConversions.java", "diffHunk": "@@ -196,6 +199,10 @@ public void shouldFilterPictureConversions() throws Exception {\n \n     @Test\n     public void pictureConversionsAlwaysHaveExtensions() throws IOException {\n+        if (coreFeature.getStorageConfiguration().isVCSPostgreSQL()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxODU5Nw==", "bodyText": "Maybe but the above check looks like a common pattern", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r426418597", "createdAt": "2020-05-18T07:26:46Z", "author": {"login": "bdelbosc"}, "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/test/java/org/nuxeo/ecm/platform/picture/core/test/TestPictureConversions.java", "diffHunk": "@@ -196,6 +199,10 @@ public void shouldFilterPictureConversions() throws Exception {\n \n     @Test\n     public void pictureConversionsAlwaysHaveExtensions() throws IOException {\n+        if (coreFeature.getStorageConfiguration().isVCSPostgreSQL()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxOTg1OA=="}, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzYwMjg0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/test/java/org/nuxeo/ecm/platform/picture/core/test/TestRecomputePictureViews.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxNjozM1rOGU2pRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxNjozM1rOGU2pRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMDAwNQ==", "bodyText": "Same as above.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424520005", "createdAt": "2020-05-13T15:16:33Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-imaging/nuxeo-platform-imaging-core/src/test/java/org/nuxeo/ecm/platform/picture/core/test/TestRecomputePictureViews.java", "diffHunk": "@@ -69,9 +70,17 @@\n     @Inject\n     protected AutomationService automationService;\n \n+    @Inject\n+    protected CoreFeature coreFeature;\n+\n     @Test\n     @SuppressWarnings(\"unchecked\")\n     public void testRecomputePictureViews() throws Exception {\n+        if (coreFeature.getStorageConfiguration().isVCSPostgreSQL()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzYzMTcxOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-importer/nuxeo-importer-stream/src/test/java/org/nuxeo/importer/stream/tests/importer/TestBlobImport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyMjo1M1rOGU276Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyMjo1M1rOGU276Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyNDc3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                StreamService streamService;\n          \n          \n            \n                protected StreamService streamService;", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424524777", "createdAt": "2020-05-13T15:22:53Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-importer/nuxeo-importer-stream/src/test/java/org/nuxeo/importer/stream/tests/importer/TestBlobImport.java", "diffHunk": "@@ -42,26 +44,31 @@\n import org.nuxeo.importer.stream.producer.RandomStringBlobMessageProducerFactory;\n import org.nuxeo.lib.stream.codec.Codec;\n import org.nuxeo.lib.stream.log.LogManager;\n+import org.nuxeo.lib.stream.log.Name;\n import org.nuxeo.lib.stream.pattern.consumer.BatchPolicy;\n import org.nuxeo.lib.stream.pattern.consumer.ConsumerPolicy;\n import org.nuxeo.lib.stream.pattern.consumer.ConsumerPool;\n import org.nuxeo.lib.stream.pattern.consumer.ConsumerStatus;\n import org.nuxeo.lib.stream.pattern.producer.ProducerPool;\n import org.nuxeo.lib.stream.pattern.producer.ProducerStatus;\n-import org.nuxeo.runtime.test.runner.Deploy;\n+import org.nuxeo.runtime.stream.StreamService;\n import org.nuxeo.runtime.test.runner.Features;\n import org.nuxeo.runtime.test.runner.FeaturesRunner;\n \n @RunWith(FeaturesRunner.class)\n @Features(CoreFeature.class)\n-@Deploy(\"org.nuxeo.runtime.stream\")\n-public abstract class TestBlobImport {\n+public class TestBlobImport {\n     protected static final Log log = LogFactory.getLog(TestBlobImport.class);\n \n     @Rule\n     public TemporaryFolder folder = new TemporaryFolder();\n \n-    public abstract LogManager getManager() throws Exception;\n+    @Inject\n+    StreamService streamService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzYzNzUwOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-importer/nuxeo-importer-stream/src/test/java/org/nuxeo/importer/stream/tests/importer/TestDocumentImport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyNDoxNFrOGU2_vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyNDoxNFrOGU2_vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyNTc1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                StreamService streamService;\n          \n          \n            \n                protected StreamService streamService;", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424525759", "createdAt": "2020-05-13T15:24:14Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-importer/nuxeo-importer-stream/src/test/java/org/nuxeo/importer/stream/tests/importer/TestDocumentImport.java", "diffHunk": "@@ -67,53 +65,58 @@\n import org.nuxeo.lib.stream.pattern.producer.ProducerPool;\n import org.nuxeo.lib.stream.pattern.producer.ProducerStatus;\n import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.stream.StreamService;\n import org.nuxeo.runtime.test.runner.Deploy;\n import org.nuxeo.runtime.test.runner.Features;\n import org.nuxeo.runtime.test.runner.FeaturesRunner;\n import org.nuxeo.runtime.transaction.TransactionHelper;\n \n @RunWith(FeaturesRunner.class)\n @Features({ CoreFeature.class, RedisFeature.class })\n-@Deploy(\"org.nuxeo.runtime.stream\")\n @Deploy(\"org.nuxeo.importer.stream\")\n @Deploy(\"org.nuxeo.ecm.platform.dublincore\")\n @Deploy(\"org.nuxeo.importer.stream:test-core-type-contrib.xml\")\n-public abstract class TestDocumentImport {\n+public class TestDocumentImport {\n \n     protected static final Log log = LogFactory.getLog(TestDocumentImport.class);\n \n-    public abstract LogManager getManager() throws Exception;\n+    @Inject\n+    StreamService streamService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzY0MjM0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-platform-importer/nuxeo-importer-stream/src/test/java/org/nuxeo/importer/stream/tests/importer/TestDocumentImport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyNToxNlrOGU3C0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyNToxNlrOGU3C0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyNjU0Ng==", "bodyText": "This comment could be removed, right?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424526546", "createdAt": "2020-05-13T15:25:16Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-platform-importer/nuxeo-importer-stream/src/test/java/org/nuxeo/importer/stream/tests/importer/TestDocumentImport.java", "diffHunk": "@@ -284,22 +289,21 @@ public void testRedisImport() throws Exception {\n         final short NB_PRODUCERS = 5;\n         final int NB_DOCUMENTS = 2 * 100;\n         final String REDIS_PREFIX = \"test.imp\";\n+        final Name LOG_DOC = Name.ofUrn(\"import/redis-doc\");\n         Codec<DocumentMessage> docCodec = StreamImporters.getDocCodec();\n-        try (LogManager manager = getManager()) {\n-            // 1. generate documents with blobs\n-            manager.createIfNotExists(DEFAULT_LOG_DOC_NAME, NB_QUEUE);\n-            ProducerPool<DocumentMessage> producers = new ProducerPool<>(DEFAULT_LOG_DOC_NAME, manager, docCodec,\n-                    new RandomDocumentMessageProducerFactory(NB_DOCUMENTS, \"en_US\", 2, false), NB_PRODUCERS);\n-            List<ProducerStatus> ret = producers.start().get();\n-            assertEquals(NB_PRODUCERS, ret.size());\n-\n-            // 2. import documents into Redis\n-            // DocumentModel root = session.getRootDocument();\n-            ConsumerPool<DocumentMessage> consumers = new ConsumerPool<>(DEFAULT_LOG_DOC_NAME, manager, docCodec,\n-                    new RedisDocumentMessageConsumerFactory(REDIS_PREFIX), ConsumerPolicy.BOUNDED);\n-            List<ConsumerStatus> ret2 = consumers.start().get();\n-            assertEquals(NB_QUEUE, ret2.size());\n-        }\n+        // 1. generate documents with blobs\n+        getLogManager().createIfNotExists(LOG_DOC, NB_QUEUE);\n+        ProducerPool<DocumentMessage> producers = new ProducerPool<>(LOG_DOC.getUrn(), getLogManager(), docCodec,\n+                new RandomDocumentMessageProducerFactory(NB_DOCUMENTS, \"en_US\", 2, false), NB_PRODUCERS);\n+        List<ProducerStatus> ret = producers.start().get();\n+        assertEquals(NB_PRODUCERS, ret.size());\n+\n+        // 2. import documents into Redis\n+        // DocumentModel root = session.getRootDocument();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 349}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzY1NTkyOnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/AttachRetentionRuleAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyODowNFrOGU3LWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzozMDowN1rOGWqoaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyODcyOA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424528728", "createdAt": "2020-05-13T15:28:04Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/AttachRetentionRuleAction.java", "diffHunk": "@@ -47,13 +47,15 @@\n \n     public static final String ACTION_NAME = \"attachRetentionRule\";\n \n+    public static final String ACTION_FULL_NAME = \"retention/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyMDMyOA==", "bodyText": "the class is 11.1", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r426420328", "createdAt": "2020-05-18T07:30:07Z", "author": {"login": "bdelbosc"}, "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/AttachRetentionRuleAction.java", "diffHunk": "@@ -47,13 +47,15 @@\n \n     public static final String ACTION_NAME = \"attachRetentionRule\";\n \n+    public static final String ACTION_FULL_NAME = \"retention/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyODcyOA=="}, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzY1Njg1OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/EvalInputEventBasedRuleAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyODoxNFrOGU3L8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzozMDozMlrOGWqpXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyODg4Mg==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424528882", "createdAt": "2020-05-13T15:28:14Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/EvalInputEventBasedRuleAction.java", "diffHunk": "@@ -52,11 +52,13 @@\n \n     public static final String ACTION_NAME = \"evalInputEventBasedRule\";\n \n+    public static final String ACTION_FULL_NAME = \"retention/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyMDU3Mg==", "bodyText": "The class is 11.1", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r426420572", "createdAt": "2020-05-18T07:30:32Z", "author": {"login": "bdelbosc"}, "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/EvalInputEventBasedRuleAction.java", "diffHunk": "@@ -52,11 +52,13 @@\n \n     public static final String ACTION_NAME = \"evalInputEventBasedRule\";\n \n+    public static final String ACTION_FULL_NAME = \"retention/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyODg4Mg=="}, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzY1NzY2OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/HoldDocumentsAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyODoyMlrOGU3MdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzozMTo0NFrOGWqr6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyOTAxMg==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424529012", "createdAt": "2020-05-13T15:28:22Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/HoldDocumentsAction.java", "diffHunk": "@@ -43,13 +43,15 @@\n \n     public static final String ACTION_NAME = \"holdDocumentsAction\";\n \n+    public static final String ACTION_FULL_NAME = \"retention/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyMTIyNg==", "bodyText": "the class is 11.1", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r426421226", "createdAt": "2020-05-18T07:31:44Z", "author": {"login": "bdelbosc"}, "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/HoldDocumentsAction.java", "diffHunk": "@@ -43,13 +43,15 @@\n \n     public static final String ACTION_NAME = \"holdDocumentsAction\";\n \n+    public static final String ACTION_FULL_NAME = \"retention/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyOTAxMg=="}, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzY1ODM0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/ProcessRetentionEventAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyODozMVrOGU3M5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzozMTo1M1rOGWqsQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyOTEyNg==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424529126", "createdAt": "2020-05-13T15:28:31Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/ProcessRetentionEventAction.java", "diffHunk": "@@ -54,11 +54,13 @@\n \n     public static final String ACTION_NAME = \"processRetentionEvent\";\n \n+    public static final String ACTION_FULL_NAME = \"retention/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyMTMxMw==", "bodyText": "same", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r426421313", "createdAt": "2020-05-18T07:31:53Z", "author": {"login": "bdelbosc"}, "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/ProcessRetentionEventAction.java", "diffHunk": "@@ -54,11 +54,13 @@\n \n     public static final String ACTION_NAME = \"processRetentionEvent\";\n \n+    public static final String ACTION_FULL_NAME = \"retention/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyOTEyNg=="}, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzY1OTg0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/UnholdDocumentsAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyODo0N1rOGU3NxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzozMjowNlrOGWqszg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyOTM0OA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424529348", "createdAt": "2020-05-13T15:28:47Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/UnholdDocumentsAction.java", "diffHunk": "@@ -43,18 +43,20 @@\n \n     public static final String ACTION_NAME = \"unholdDocumentsAction\";\n \n+    public static final String ACTION_FULL_NAME = \"retention/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyMTQ1NA==", "bodyText": "same", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r426421454", "createdAt": "2020-05-18T07:32:06Z", "author": {"login": "bdelbosc"}, "path": "modules/platform/nuxeo-retention-core/src/main/java/org/nuxeo/retention/actions/UnholdDocumentsAction.java", "diffHunk": "@@ -43,18 +43,20 @@\n \n     public static final String ACTION_NAME = \"unholdDocumentsAction\";\n \n+    public static final String ACTION_FULL_NAME = \"retention/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyOTM0OA=="}, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzk0NDI0OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-search/nuxeo-search-rest-api/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/search/test/bulk/RemoveDocumentAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozNDoxNlrOGU6C5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozNDoxNlrOGU6C5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NTcxOA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424575718", "createdAt": "2020-05-13T16:34:16Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-search/nuxeo-search-rest-api/src/test/java/org/nuxeo/ecm/restapi/server/jaxrs/search/test/bulk/RemoveDocumentAction.java", "diffHunk": "@@ -40,25 +42,27 @@\n \n     public static final String ACTION_NAME = \"removeDocuments\";\n \n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzk0NTE1OnYy", "diffSide": "RIGHT", "path": "modules/platform/nuxeo-thumbnail/src/main/java/org/nuxeo/ecm/platform/thumbnail/action/RecomputeThumbnailsAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozNDozMFrOGU6Deg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozNDozMFrOGU6Deg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NTg2Ng==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424575866", "createdAt": "2020-05-13T16:34:30Z", "author": {"login": "troger"}, "path": "modules/platform/nuxeo-thumbnail/src/main/java/org/nuxeo/ecm/platform/thumbnail/action/RecomputeThumbnailsAction.java", "diffHunk": "@@ -61,18 +61,20 @@\n \n     public static final String ACTION_NAME = \"recomputeThumbnails\";\n \n+    public static final String ACTION_FULL_NAME = \"bulk/\" + ACTION_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzk1NTQ4OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaConfigDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozNjo0NlrOGU6JrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozNjo0NlrOGU6JrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NzQ1Mg==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424577452", "createdAt": "2020-05-13T16:36:46Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaConfigDescriptor.java", "diffHunk": "@@ -41,6 +41,12 @@\n         protected Properties properties = new Properties();\n     }\n \n+    @XObject(\"admin\")\n+    public static class AdminProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzk1NTkxOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaConfigDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozNjo1MVrOGU6J7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozNjo1MVrOGU6J7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NzUxNg==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424577516", "createdAt": "2020-05-13T16:36:51Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaConfigDescriptor.java", "diffHunk": "@@ -59,6 +65,9 @@\n     @XNode(\"consumer\")\n     public ConsumerProperties consumerProperties = new ConsumerProperties();\n \n+    @XNode(\"admin\")\n+    public AdminProperties adminProperties = new AdminProperties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzk1ODQwOnYy", "diffSide": "LEFT", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaConfigService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozNzozMFrOGU6Lgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzozNjozN1rOGWq10A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NzkyMw==", "bodyText": "Safe to remove? (just to check)", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424577923", "createdAt": "2020-05-13T16:37:30Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaConfigService.java", "diffHunk": "@@ -34,26 +34,25 @@\n      */\n     Set<String> listConfigNames();\n \n-    /**\n-     * Returns the Zookeeper servers for a configuration.\n-     *\n-     * @deprecated since 10.2 NXP-24634: we don't want to depend anymore on Zookeeper\n-     */\n-    @Deprecated\n-    String getZkServers(String configName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyMzc2MA==", "bodyText": "Yes, we don't use zookeeper at all.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r426423760", "createdAt": "2020-05-18T07:36:37Z", "author": {"login": "bdelbosc"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/kafka/KafkaConfigService.java", "diffHunk": "@@ -34,26 +34,25 @@\n      */\n     Set<String> listConfigNames();\n \n-    /**\n-     * Returns the Zookeeper servers for a configuration.\n-     *\n-     * @deprecated since 10.2 NXP-24634: we don't want to depend anymore on Zookeeper\n-     */\n-    @Deprecated\n-    String getZkServers(String configName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3NzkyMw=="}, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzk2MjAwOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/LogConfigDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozODoyNFrOGU6NzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozODoyNFrOGU6NzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3ODUwOQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424578509", "createdAt": "2020-05-13T16:38:24Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/LogConfigDescriptor.java", "diffHunk": "@@ -33,10 +34,16 @@\n @XObject(\"logConfig\")\n public class LogConfigDescriptor implements Descriptor {\n \n+    public static final String SEP = \":\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mzk2Mjc5OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/LogConfigDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozODo0MVrOGU6OZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjozODo0MVrOGU6OZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU3ODY2MA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424578660", "createdAt": "2020-05-13T16:38:41Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/LogConfigDescriptor.java", "diffHunk": "@@ -54,6 +61,21 @@ public String getId() {\n         }\n     }\n \n+    @XObject(value = \"match\")\n+    public static class LogMatchDescriptor implements Descriptor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1030c72f81fd7449173b14135a0165e620df43a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjMzNzY2OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/LogConfigDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODoyNjo0M1rOGVRaSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODoyNjo0M1rOGVRaSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk1ODUzOA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424958538", "createdAt": "2020-05-14T08:26:43Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/LogConfigDescriptor.java", "diffHunk": "@@ -66,6 +88,9 @@ public String getId() {\n     @XNodeList(value = \"log\", type = ArrayList.class, componentType = LogDescriptor.class)\n     public List<LogDescriptor> logs = new ArrayList<>();\n \n+    @XNodeList(value = \"match\", type = ArrayList.class, componentType = LogMatchDescriptor.class)\n+    public List<LogMatchDescriptor> matches = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjMzODI2OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/LogConfigDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODoyNjo1MVrOGVRapg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODoyNjo1MVrOGVRapg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk1ODYzMA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424958630", "createdAt": "2020-05-14T08:26:51Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/LogConfigDescriptor.java", "diffHunk": "@@ -80,4 +105,19 @@ public boolean isEnabled() {\n     public void setEnabled(boolean isEnabled) {\n         this.isEnabled = isEnabled;\n     }\n+\n+    // @since 11.1\n+    public boolean isDefault() {\n+        return isDefault;\n+    }\n+\n+    // @since 11.1\n+    public boolean onlyLogDeclaration() {\n+        return name == null && type == null;\n+    }\n+\n+    public List<String> getPatterns() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjM0OTA3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/StreamMetricsComputation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODoyOTo0MFrOGVRhhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzozOTo1N1rOGWq8jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk2MDM5MQ==", "bodyText": "I remembered we prefer to not cache services, for hotreload purposes maybe? @kevinleturc ?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424960391", "createdAt": "2020-05-14T08:29:40Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/StreamMetricsComputation.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.stream;\n+\n+import static org.nuxeo.lib.stream.computation.log.ComputationRunner.NUXEO_METRICS_REGISTRY_NAME;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.lib.stream.codec.AvroMessageCodec;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.AbstractComputation;\n+import org.nuxeo.lib.stream.computation.ComputationContext;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.lib.stream.computation.Watermark;\n+import org.nuxeo.lib.stream.log.Latency;\n+import org.nuxeo.lib.stream.log.LogManager;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.lib.stream.log.internals.LogPartitionGroup;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import io.dropwizard.metrics5.Gauge;\n+import io.dropwizard.metrics5.MetricName;\n+import io.dropwizard.metrics5.MetricRegistry;\n+import io.dropwizard.metrics5.SharedMetricRegistries;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class StreamMetricsComputation extends AbstractComputation {\n+    private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(\n+            StreamMetricsComputation.class);\n+\n+    protected static final String NAME = \"stream/metrics\";\n+\n+    protected MetricRegistry registry = SharedMetricRegistries.getOrCreate(NUXEO_METRICS_REGISTRY_NAME);\n+\n+    protected final long intervalMs;\n+\n+    protected final List<String> inputStreams;\n+\n+    protected final List<Name> streams = new ArrayList<>();\n+\n+    protected final Set<Name> invalidStreams = new HashSet<>();\n+\n+    protected final List<LogPartitionGroup> groups = new ArrayList<>();\n+\n+    protected final List<LatencyMetric> metrics = new ArrayList<>();\n+\n+    protected LogManager manager;\n+\n+    protected final Codec<Record> codec = new AvroMessageCodec<>(Record.class);\n+\n+    protected long refreshGroupCounter;\n+\n+    public StreamMetricsComputation(Duration interval, List<String> streams) {\n+        super(NAME, 1, 0);\n+        this.intervalMs = interval.toMillis();\n+        this.inputStreams = streams;\n+    }\n+\n+    @Override\n+    public void init(ComputationContext context) {\n+        if (context.isSpareComputation()) {\n+            log.info(\"Spare instance nothing to report\");\n+            unregisterMetrics();\n+        } else {\n+            log.warn(\"Instance elected to report stream metrics\");\n+            context.setTimer(\"tracker\", System.currentTimeMillis() + intervalMs);\n+        }\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        unregisterMetrics();\n+    }\n+\n+    protected void registerMetrics() {\n+        unregisterMetrics();\n+        getGroups().forEach(group -> metrics.add(new LatencyMetric(group, registry)));\n+    }\n+\n+    protected void unregisterMetrics() {\n+        metrics.forEach(LatencyMetric::destroy);\n+        metrics.clear();\n+    }\n+\n+    @Override\n+    public void processTimer(ComputationContext context, String key, long timestamp) {\n+        refreshMetricsIfNeeded();\n+        log.debug(\"start update metrics: {}\", metrics::size);\n+        List<LatencyMetric> toRemove = metrics.stream()\n+                                              .filter(metric -> metric.update(getManager(), codec))\n+                                              .collect(Collectors.toList());\n+        toRemove.forEach(LatencyMetric::destroy);\n+        toRemove.forEach(metric -> invalidStreams.add(metric.getStream()));\n+        metrics.removeAll(toRemove);\n+        context.setTimer(\"tracker\", System.currentTimeMillis() + intervalMs);\n+    }\n+\n+    protected void refreshMetricsIfNeeded() {\n+        if (streams.isEmpty() || groups.isEmpty() || metrics.isEmpty() || ++refreshGroupCounter % 5 == 0) {\n+            streams.clear();\n+            groups.clear();\n+            registerMetrics();\n+        }\n+    }\n+\n+    protected List<Name> getStreams() {\n+        if (streams.isEmpty()) {\n+            if (inputStreams == null || inputStreams.isEmpty()) {\n+                streams.addAll(getManager().listAll());\n+                log.debug(\"Use all available streams: {}\", streams);\n+            } else {\n+                inputStreams.forEach(stream -> streams.add(Name.ofUrn(stream)));\n+                log.debug(\"Use input streams: {}\", streams);\n+            }\n+            if (!invalidStreams.isEmpty()) {\n+                streams.removeAll(invalidStreams);\n+                log.debug(\"Filtered list of streams: {}\", streams);\n+            }\n+        }\n+        return streams;\n+    }\n+\n+    protected List<LogPartitionGroup> getGroups() {\n+        if (groups.isEmpty()) {\n+            getStreams().forEach(name -> {\n+                getManager().listConsumerGroups(name)\n+                            .forEach(group -> groups.add(new LogPartitionGroup(group, name, 0)));\n+            });\n+            log.info(\"Update list of consumers: {}\", groups);\n+        }\n+        return groups;\n+    }\n+\n+    protected LogManager getManager() {\n+        if (manager == null) {\n+            manager = Framework.getService(StreamService.class).getLogManager();\n+        }\n+        return manager;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEzOTcwMA==", "bodyText": "You're right.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425139700", "createdAt": "2020-05-14T13:33:34Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/StreamMetricsComputation.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.stream;\n+\n+import static org.nuxeo.lib.stream.computation.log.ComputationRunner.NUXEO_METRICS_REGISTRY_NAME;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.lib.stream.codec.AvroMessageCodec;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.AbstractComputation;\n+import org.nuxeo.lib.stream.computation.ComputationContext;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.lib.stream.computation.Watermark;\n+import org.nuxeo.lib.stream.log.Latency;\n+import org.nuxeo.lib.stream.log.LogManager;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.lib.stream.log.internals.LogPartitionGroup;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import io.dropwizard.metrics5.Gauge;\n+import io.dropwizard.metrics5.MetricName;\n+import io.dropwizard.metrics5.MetricRegistry;\n+import io.dropwizard.metrics5.SharedMetricRegistries;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class StreamMetricsComputation extends AbstractComputation {\n+    private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(\n+            StreamMetricsComputation.class);\n+\n+    protected static final String NAME = \"stream/metrics\";\n+\n+    protected MetricRegistry registry = SharedMetricRegistries.getOrCreate(NUXEO_METRICS_REGISTRY_NAME);\n+\n+    protected final long intervalMs;\n+\n+    protected final List<String> inputStreams;\n+\n+    protected final List<Name> streams = new ArrayList<>();\n+\n+    protected final Set<Name> invalidStreams = new HashSet<>();\n+\n+    protected final List<LogPartitionGroup> groups = new ArrayList<>();\n+\n+    protected final List<LatencyMetric> metrics = new ArrayList<>();\n+\n+    protected LogManager manager;\n+\n+    protected final Codec<Record> codec = new AvroMessageCodec<>(Record.class);\n+\n+    protected long refreshGroupCounter;\n+\n+    public StreamMetricsComputation(Duration interval, List<String> streams) {\n+        super(NAME, 1, 0);\n+        this.intervalMs = interval.toMillis();\n+        this.inputStreams = streams;\n+    }\n+\n+    @Override\n+    public void init(ComputationContext context) {\n+        if (context.isSpareComputation()) {\n+            log.info(\"Spare instance nothing to report\");\n+            unregisterMetrics();\n+        } else {\n+            log.warn(\"Instance elected to report stream metrics\");\n+            context.setTimer(\"tracker\", System.currentTimeMillis() + intervalMs);\n+        }\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        unregisterMetrics();\n+    }\n+\n+    protected void registerMetrics() {\n+        unregisterMetrics();\n+        getGroups().forEach(group -> metrics.add(new LatencyMetric(group, registry)));\n+    }\n+\n+    protected void unregisterMetrics() {\n+        metrics.forEach(LatencyMetric::destroy);\n+        metrics.clear();\n+    }\n+\n+    @Override\n+    public void processTimer(ComputationContext context, String key, long timestamp) {\n+        refreshMetricsIfNeeded();\n+        log.debug(\"start update metrics: {}\", metrics::size);\n+        List<LatencyMetric> toRemove = metrics.stream()\n+                                              .filter(metric -> metric.update(getManager(), codec))\n+                                              .collect(Collectors.toList());\n+        toRemove.forEach(LatencyMetric::destroy);\n+        toRemove.forEach(metric -> invalidStreams.add(metric.getStream()));\n+        metrics.removeAll(toRemove);\n+        context.setTimer(\"tracker\", System.currentTimeMillis() + intervalMs);\n+    }\n+\n+    protected void refreshMetricsIfNeeded() {\n+        if (streams.isEmpty() || groups.isEmpty() || metrics.isEmpty() || ++refreshGroupCounter % 5 == 0) {\n+            streams.clear();\n+            groups.clear();\n+            registerMetrics();\n+        }\n+    }\n+\n+    protected List<Name> getStreams() {\n+        if (streams.isEmpty()) {\n+            if (inputStreams == null || inputStreams.isEmpty()) {\n+                streams.addAll(getManager().listAll());\n+                log.debug(\"Use all available streams: {}\", streams);\n+            } else {\n+                inputStreams.forEach(stream -> streams.add(Name.ofUrn(stream)));\n+                log.debug(\"Use input streams: {}\", streams);\n+            }\n+            if (!invalidStreams.isEmpty()) {\n+                streams.removeAll(invalidStreams);\n+                log.debug(\"Filtered list of streams: {}\", streams);\n+            }\n+        }\n+        return streams;\n+    }\n+\n+    protected List<LogPartitionGroup> getGroups() {\n+        if (groups.isEmpty()) {\n+            getStreams().forEach(name -> {\n+                getManager().listConsumerGroups(name)\n+                            .forEach(group -> groups.add(new LogPartitionGroup(group, name, 0)));\n+            });\n+            log.info(\"Update list of consumers: {}\", groups);\n+        }\n+        return groups;\n+    }\n+\n+    protected LogManager getManager() {\n+        if (manager == null) {\n+            manager = Framework.getService(StreamService.class).getLogManager();\n+        }\n+        return manager;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk2MDM5MQ=="}, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQyNTQ4Nw==", "bodyText": "Hotreload will terminate and recreate the computation pool, so not a problem here", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r426425487", "createdAt": "2020-05-18T07:39:57Z", "author": {"login": "bdelbosc"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/StreamMetricsComputation.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo SA (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.stream;\n+\n+import static org.nuxeo.lib.stream.computation.log.ComputationRunner.NUXEO_METRICS_REGISTRY_NAME;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.lib.stream.codec.AvroMessageCodec;\n+import org.nuxeo.lib.stream.codec.Codec;\n+import org.nuxeo.lib.stream.computation.AbstractComputation;\n+import org.nuxeo.lib.stream.computation.ComputationContext;\n+import org.nuxeo.lib.stream.computation.Record;\n+import org.nuxeo.lib.stream.computation.Watermark;\n+import org.nuxeo.lib.stream.log.Latency;\n+import org.nuxeo.lib.stream.log.LogManager;\n+import org.nuxeo.lib.stream.log.Name;\n+import org.nuxeo.lib.stream.log.internals.LogPartitionGroup;\n+import org.nuxeo.runtime.api.Framework;\n+\n+import io.dropwizard.metrics5.Gauge;\n+import io.dropwizard.metrics5.MetricName;\n+import io.dropwizard.metrics5.MetricRegistry;\n+import io.dropwizard.metrics5.SharedMetricRegistries;\n+\n+/**\n+ * @since 11.1\n+ */\n+public class StreamMetricsComputation extends AbstractComputation {\n+    private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(\n+            StreamMetricsComputation.class);\n+\n+    protected static final String NAME = \"stream/metrics\";\n+\n+    protected MetricRegistry registry = SharedMetricRegistries.getOrCreate(NUXEO_METRICS_REGISTRY_NAME);\n+\n+    protected final long intervalMs;\n+\n+    protected final List<String> inputStreams;\n+\n+    protected final List<Name> streams = new ArrayList<>();\n+\n+    protected final Set<Name> invalidStreams = new HashSet<>();\n+\n+    protected final List<LogPartitionGroup> groups = new ArrayList<>();\n+\n+    protected final List<LatencyMetric> metrics = new ArrayList<>();\n+\n+    protected LogManager manager;\n+\n+    protected final Codec<Record> codec = new AvroMessageCodec<>(Record.class);\n+\n+    protected long refreshGroupCounter;\n+\n+    public StreamMetricsComputation(Duration interval, List<String> streams) {\n+        super(NAME, 1, 0);\n+        this.intervalMs = interval.toMillis();\n+        this.inputStreams = streams;\n+    }\n+\n+    @Override\n+    public void init(ComputationContext context) {\n+        if (context.isSpareComputation()) {\n+            log.info(\"Spare instance nothing to report\");\n+            unregisterMetrics();\n+        } else {\n+            log.warn(\"Instance elected to report stream metrics\");\n+            context.setTimer(\"tracker\", System.currentTimeMillis() + intervalMs);\n+        }\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        unregisterMetrics();\n+    }\n+\n+    protected void registerMetrics() {\n+        unregisterMetrics();\n+        getGroups().forEach(group -> metrics.add(new LatencyMetric(group, registry)));\n+    }\n+\n+    protected void unregisterMetrics() {\n+        metrics.forEach(LatencyMetric::destroy);\n+        metrics.clear();\n+    }\n+\n+    @Override\n+    public void processTimer(ComputationContext context, String key, long timestamp) {\n+        refreshMetricsIfNeeded();\n+        log.debug(\"start update metrics: {}\", metrics::size);\n+        List<LatencyMetric> toRemove = metrics.stream()\n+                                              .filter(metric -> metric.update(getManager(), codec))\n+                                              .collect(Collectors.toList());\n+        toRemove.forEach(LatencyMetric::destroy);\n+        toRemove.forEach(metric -> invalidStreams.add(metric.getStream()));\n+        metrics.removeAll(toRemove);\n+        context.setTimer(\"tracker\", System.currentTimeMillis() + intervalMs);\n+    }\n+\n+    protected void refreshMetricsIfNeeded() {\n+        if (streams.isEmpty() || groups.isEmpty() || metrics.isEmpty() || ++refreshGroupCounter % 5 == 0) {\n+            streams.clear();\n+            groups.clear();\n+            registerMetrics();\n+        }\n+    }\n+\n+    protected List<Name> getStreams() {\n+        if (streams.isEmpty()) {\n+            if (inputStreams == null || inputStreams.isEmpty()) {\n+                streams.addAll(getManager().listAll());\n+                log.debug(\"Use all available streams: {}\", streams);\n+            } else {\n+                inputStreams.forEach(stream -> streams.add(Name.ofUrn(stream)));\n+                log.debug(\"Use input streams: {}\", streams);\n+            }\n+            if (!invalidStreams.isEmpty()) {\n+                streams.removeAll(invalidStreams);\n+                log.debug(\"Filtered list of streams: {}\", streams);\n+            }\n+        }\n+        return streams;\n+    }\n+\n+    protected List<LogPartitionGroup> getGroups() {\n+        if (groups.isEmpty()) {\n+            getStreams().forEach(name -> {\n+                getManager().listConsumerGroups(name)\n+                            .forEach(group -> groups.add(new LogPartitionGroup(group, name, 0)));\n+            });\n+            log.info(\"Update list of consumers: {}\", groups);\n+        }\n+        return groups;\n+    }\n+\n+    protected LogManager getManager() {\n+        if (manager == null) {\n+            manager = Framework.getService(StreamService.class).getLogManager();\n+        }\n+        return manager;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk2MDM5MQ=="}, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjM4Njg0OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/StreamServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODozOTowNlrOGVR5jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODozOTowNlrOGVR5jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk2NjU0Mg==", "bodyText": "Could be just set as default in the interface maybe?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424966542", "createdAt": "2020-05-14T08:39:06Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/StreamServiceImpl.java", "diffHunk": "@@ -77,83 +80,100 @@ public int getApplicationStartedOrder() {\n     }\n \n     @Override\n-    public LogManager getLogManager(String name) {\n-        // TODO: returns a wrapper that don't expose the LogManager#close\n-        if (!logManagers.containsKey(name)) {\n-            LogConfigDescriptor config = getDescriptor(XP_LOG_CONFIG, name);\n-            if (config == null || !config.isEnabled()) {\n-                throw new IllegalArgumentException(\"Unknown or disabled logConfig: \" + name);\n-            }\n-            if (\"kafka\".equalsIgnoreCase(config.type)) {\n-                logManagers.put(name, createKafkaLogManager(config));\n-            } else {\n-                logManagers.put(name, createChronicleLogManager(config));\n-            }\n-        }\n-        return logManagers.get(name);\n+    public LogManager getLogManager() {\n+        return logManager;\n     }\n \n     @Override\n-    public StreamManager getStreamManager(String name) {\n-        return streamManagers.computeIfAbsent(name, app -> new LogStreamManager(getLogManager(name)));\n+    public StreamManager getStreamManager() {\n+        return streamManager;\n     }\n \n-    protected LogManager createKafkaLogManager(LogConfigDescriptor config) {\n-        String kafkaConfig = config.options.getOrDefault(\"kafkaConfig\", \"default\");\n-        KafkaConfigService service = Framework.getService(KafkaConfigService.class);\n-        return new KafkaLogManager(service.getTopicPrefix(kafkaConfig), service.getProducerProperties(kafkaConfig),\n-                service.getConsumerProperties(kafkaConfig));\n+    @Override\n+    public LogManager getLogManager(String name) {\n+        // TODO: returns a wrapper that don't expose the LogManager#close\n+        return getLogManager();\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjM4ODIyOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/StreamServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODozOToyOVrOGVR6hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwODozOToyOVrOGVR6hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk2Njc4OA==", "bodyText": "Same as above.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r424966788", "createdAt": "2020-05-14T08:39:29Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-runtime-stream/src/main/java/org/nuxeo/runtime/stream/StreamServiceImpl.java", "diffHunk": "@@ -77,83 +80,100 @@ public int getApplicationStartedOrder() {\n     }\n \n     @Override\n-    public LogManager getLogManager(String name) {\n-        // TODO: returns a wrapper that don't expose the LogManager#close\n-        if (!logManagers.containsKey(name)) {\n-            LogConfigDescriptor config = getDescriptor(XP_LOG_CONFIG, name);\n-            if (config == null || !config.isEnabled()) {\n-                throw new IllegalArgumentException(\"Unknown or disabled logConfig: \" + name);\n-            }\n-            if (\"kafka\".equalsIgnoreCase(config.type)) {\n-                logManagers.put(name, createKafkaLogManager(config));\n-            } else {\n-                logManagers.put(name, createChronicleLogManager(config));\n-            }\n-        }\n-        return logManagers.get(name);\n+    public LogManager getLogManager() {\n+        return logManager;\n     }\n \n     @Override\n-    public StreamManager getStreamManager(String name) {\n-        return streamManagers.computeIfAbsent(name, app -> new LogStreamManager(getLogManager(name)));\n+    public StreamManager getStreamManager() {\n+        return streamManager;\n     }\n \n-    protected LogManager createKafkaLogManager(LogConfigDescriptor config) {\n-        String kafkaConfig = config.options.getOrDefault(\"kafkaConfig\", \"default\");\n-        KafkaConfigService service = Framework.getService(KafkaConfigService.class);\n-        return new KafkaLogManager(service.getTopicPrefix(kafkaConfig), service.getProducerProperties(kafkaConfig),\n-                service.getConsumerProperties(kafkaConfig));\n+    @Override\n+    public LogManager getLogManager(String name) {\n+        // TODO: returns a wrapper that don't expose the LogManager#close\n+        return getLogManager();\n     }\n \n-    protected LogManager createChronicleLogManager(LogConfigDescriptor config) {\n-        String basePath = config.options.getOrDefault(\"basePath\", null);\n-        String directory = config.options.getOrDefault(\"directory\", config.getId());\n-        Path path = getChroniclePath(basePath, directory);\n-        String retention = getChronicleRetention(config.options.getOrDefault(\"retention\", null));\n-        return new ChronicleLogManager(path, retention);\n+    @Override\n+    public StreamManager getStreamManager(String name) {\n+        return streamManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjY3MzkwOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1Mzo0MFrOGVUykw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1Mzo0MFrOGVUykw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxMzkwNw==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425013907", "createdAt": "2020-05-14T09:53:40Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "diffHunk": "@@ -150,18 +167,26 @@ public boolean isExternal(String streamName) {\n      *\n      * @since 10.2\n      */\n-    public Settings setCodec(String streamName, Codec<Record> codec) {\n+    public Settings setCodec(Name streamName, Codec<Record> codec) {\n         Objects.requireNonNull(codec);\n         codecs.put(streamName, codec);\n         return this;\n     }\n \n+    public Settings setCodec(String streamName, Codec<Record> codec) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjY3NjgxOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1NDozM1rOGVU0pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1NDozM1rOGVU0pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxNDQzNw==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425014437", "createdAt": "2020-05-14T09:54:33Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "diffHunk": "@@ -150,18 +167,26 @@ public boolean isExternal(String streamName) {\n      *\n      * @since 10.2\n      */\n-    public Settings setCodec(String streamName, Codec<Record> codec) {\n+    public Settings setCodec(Name streamName, Codec<Record> codec) {\n         Objects.requireNonNull(codec);\n         codecs.put(streamName, codec);\n         return this;\n     }\n \n+    public Settings setCodec(String streamName, Codec<Record> codec) {\n+        return setCodec(Name.ofUrn(streamName), codec);\n+    }\n+\n     /**\n      * Gets the codec for a stream.\n      *\n      * @since 10.2\n      */\n     public Codec<Record> getCodec(String streamName) {\n+        return getCodec(Name.ofUrn(streamName));\n+    }\n+\n+    public Codec<Record> getCodec(Name streamName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjY3ODY0OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1NDo1N1rOGVU1wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1NDo1N1rOGVU1wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxNDcyMg==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425014722", "createdAt": "2020-05-14T09:54:57Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "diffHunk": "@@ -171,7 +196,7 @@ public Settings setCodec(String streamName, Codec<Record> codec) {\n      *\n      * @since 10.3\n      */\n-    public Settings setPolicy(String computationName, ComputationPolicy policy) {\n+    public Settings setPolicy(Name computationName, ComputationPolicy policy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjY4MDIzOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1NToxMVrOGVU2lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1NToxMVrOGVU2lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxNDkzNQ==", "bodyText": "Since 10.3.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425014935", "createdAt": "2020-05-14T09:55:11Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "diffHunk": "@@ -180,21 +205,29 @@ public Settings setPolicy(String computationName, ComputationPolicy policy) {\n         return this;\n     }\n \n+    public Settings setPolicy(String computationName, ComputationPolicy policy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjY4Mjc4OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1NTo0OFrOGVU4Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1NTo0OFrOGVU4Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxNTMzOQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425015339", "createdAt": "2020-05-14T09:55:48Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "diffHunk": "@@ -180,21 +205,29 @@ public Settings setPolicy(String computationName, ComputationPolicy policy) {\n         return this;\n     }\n \n+    public Settings setPolicy(String computationName, ComputationPolicy policy) {\n+        return setPolicy(Name.ofUrn(computationName), policy);\n+    }\n+\n     /**\n      * Gets the policy for a computation.\n      *\n      * @since 10.3\n      */\n-    public ComputationPolicy getPolicy(String computationName) {\n+    public ComputationPolicy getPolicy(Name computationName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjY4MzIyOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1NTo1N1rOGVU4ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1NTo1N1rOGVU4ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxNTQzNA==", "bodyText": "Since 10.3.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425015434", "createdAt": "2020-05-14T09:55:57Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "diffHunk": "@@ -180,21 +205,29 @@ public Settings setPolicy(String computationName, ComputationPolicy policy) {\n         return this;\n     }\n \n+    public Settings setPolicy(String computationName, ComputationPolicy policy) {\n+        return setPolicy(Name.ofUrn(computationName), policy);\n+    }\n+\n     /**\n      * Gets the policy for a computation.\n      *\n      * @since 10.3\n      */\n-    public ComputationPolicy getPolicy(String computationName) {\n+    public ComputationPolicy getPolicy(Name computationName) {\n         return policies.getOrDefault(computationName, defaultPolicy);\n     }\n \n+    public ComputationPolicy getPolicy(String computationName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjY4NDU5OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1NjoxOVrOGVU5fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1NjoxOVrOGVU5fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxNTY3Ng==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425015676", "createdAt": "2020-05-14T09:56:19Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "diffHunk": "@@ -204,13 +237,21 @@ public Settings addFilter(String streamName, RecordFilter filter) {\n         return this;\n     }\n \n+    public Settings addFilter(String streamName, RecordFilter filter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjY4NTQ3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1NjozMVrOGVU6CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo1NjozMVrOGVU6CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxNTgxNw==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425015817", "createdAt": "2020-05-14T09:56:31Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/computation/Settings.java", "diffHunk": "@@ -204,13 +237,21 @@ public Settings addFilter(String streamName, RecordFilter filter) {\n         return this;\n     }\n \n+    public Settings addFilter(String streamName, RecordFilter filter) {\n+        return addFilter(Name.ofUrn(streamName), filter);\n+    }\n+\n     /**\n      * Gets the filter chain for a stream.\n      *\n      * @since 11.1\n      */\n-    public RecordFilterChain getFilterChain(String streamName) {\n+    public RecordFilterChain getFilterChain(Name streamName) {\n         return filters.getOrDefault(streamName, defaultFilter);\n     }\n \n+    public RecordFilterChain getFilterChain(String streamName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcwMDM5OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/AbstractLogConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMDozOFrOGVVDxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMDozOFrOGVVDxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxODMwOQ==", "bodyText": "Why not just returning the result of patterns.stream().anyMatch(pattern -> name.getUrn().startsWith(pattern)).", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425018309", "createdAt": "2020-05-14T10:00:38Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/AbstractLogConfig.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.lib.stream.log;\n+\n+import java.util.List;\n+\n+/**\n+ * @since 11.1\n+ */\n+public abstract class AbstractLogConfig implements LogConfig {\n+\n+    protected final List<String> patterns;\n+\n+    protected final boolean defaultConfig;\n+\n+    public AbstractLogConfig(boolean defaultConfig, List<String> patterns) {\n+        this.defaultConfig = defaultConfig;\n+        if (patterns == null) {\n+            throw new IllegalArgumentException(\"patterns required\");\n+        }\n+        this.patterns = patterns;\n+    }\n+\n+    @Override\n+    public boolean isDefault() {\n+        return defaultConfig;\n+    }\n+\n+    @Override\n+    public boolean match(Name name) {\n+        if (patterns.stream().anyMatch(pattern -> name.getUrn().startsWith(pattern))) {\n+            return true;\n+        }\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcwNTk4OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/AbstractLogConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMjoxMlrOGVVHcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMjoxMlrOGVVHcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxOTI0OQ==", "bodyText": "Not needed.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425019249", "createdAt": "2020-05-14T10:02:12Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/AbstractLogConfig.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.lib.stream.log;\n+\n+import java.util.List;\n+\n+/**\n+ * @since 11.1\n+ */\n+public abstract class AbstractLogConfig implements LogConfig {\n+\n+    protected final List<String> patterns;\n+\n+    protected final boolean defaultConfig;\n+\n+    public AbstractLogConfig(boolean defaultConfig, List<String> patterns) {\n+        this.defaultConfig = defaultConfig;\n+        if (patterns == null) {\n+            throw new IllegalArgumentException(\"patterns required\");\n+        }\n+        this.patterns = patterns;\n+    }\n+\n+    @Override\n+    public boolean isDefault() {\n+        return defaultConfig;\n+    }\n+\n+    @Override\n+    public boolean match(Name name) {\n+        if (patterns.stream().anyMatch(pattern -> name.getUrn().startsWith(pattern))) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean match(Name name, Name group) {\n+        if (patterns.stream().anyMatch(pattern -> group.getUrn().startsWith(pattern))) {\n+            return true;\n+        }\n+        if (match(name)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcwNzE0OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/AbstractLogConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMjozNVrOGVVINA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMjozNVrOGVVINA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxOTQ0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (match(name)) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    return false;\n          \n          \n            \n                    return match(name);", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425019444", "createdAt": "2020-05-14T10:02:35Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/AbstractLogConfig.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.lib.stream.log;\n+\n+import java.util.List;\n+\n+/**\n+ * @since 11.1\n+ */\n+public abstract class AbstractLogConfig implements LogConfig {\n+\n+    protected final List<String> patterns;\n+\n+    protected final boolean defaultConfig;\n+\n+    public AbstractLogConfig(boolean defaultConfig, List<String> patterns) {\n+        this.defaultConfig = defaultConfig;\n+        if (patterns == null) {\n+            throw new IllegalArgumentException(\"patterns required\");\n+        }\n+        this.patterns = patterns;\n+    }\n+\n+    @Override\n+    public boolean isDefault() {\n+        return defaultConfig;\n+    }\n+\n+    @Override\n+    public boolean match(Name name) {\n+        if (patterns.stream().anyMatch(pattern -> name.getUrn().startsWith(pattern))) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean match(Name name, Name group) {\n+        if (patterns.stream().anyMatch(pattern -> group.getUrn().startsWith(pattern))) {\n+            return true;\n+        }\n+        if (match(name)) {\n+            return true;\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcxMzYyOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNDoyNlrOGVVMfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNDoyNlrOGVVMfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMDU0MA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425020540", "createdAt": "2020-05-14T10:04:26Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -42,39 +42,87 @@\n     /**\n      * Returns {@code true} if a Log with this {@code name} exists.\n      */\n-    boolean exists(String name);\n+    boolean exists(Name name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcxNDEzOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNDozN1rOGVVM5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNDozN1rOGVVM5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMDY0NQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425020645", "createdAt": "2020-05-14T10:04:37Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -42,39 +42,87 @@\n     /**\n      * Returns {@code true} if a Log with this {@code name} exists.\n      */\n-    boolean exists(String name);\n+    boolean exists(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #exists(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean exists(String name) {\n+        return exists(Name.ofUrn(name));\n+    }\n \n     /**\n      * Creates a new Log with {@code size} partitions if the Log does not exists. Returns true it the Log has been\n      * created.\n      */\n-    boolean createIfNotExists(String name, int size);\n+    boolean createIfNotExists(Name name, int size);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcxNTI2OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNDo1M1rOGVVNkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNDo1M1rOGVVNkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMDgxOA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425020818", "createdAt": "2020-05-14T10:04:53Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -42,39 +42,87 @@\n     /**\n      * Returns {@code true} if a Log with this {@code name} exists.\n      */\n-    boolean exists(String name);\n+    boolean exists(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #exists(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean exists(String name) {\n+        return exists(Name.ofUrn(name));\n+    }\n \n     /**\n      * Creates a new Log with {@code size} partitions if the Log does not exists. Returns true it the Log has been\n      * created.\n      */\n-    boolean createIfNotExists(String name, int size);\n+    boolean createIfNotExists(Name name, int size);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #createIfNotExists(Name, int)} instead\n+     */\n+    @Deprecated\n+    default boolean createIfNotExists(String name, int size) {\n+        return createIfNotExists(Name.ofUrn(name), size);\n+    }\n \n     /**\n      * Tries to delete a Log. Returns true if successfully deleted, might not be possible depending on the\n      * implementation.\n      */\n-    boolean delete(String name);\n+    boolean delete(Name name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcxNjM4OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNToxNFrOGVVORw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNToxNFrOGVVORw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMDk5OQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425020999", "createdAt": "2020-05-14T10:05:14Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -42,39 +42,87 @@\n     /**\n      * Returns {@code true} if a Log with this {@code name} exists.\n      */\n-    boolean exists(String name);\n+    boolean exists(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #exists(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean exists(String name) {\n+        return exists(Name.ofUrn(name));\n+    }\n \n     /**\n      * Creates a new Log with {@code size} partitions if the Log does not exists. Returns true it the Log has been\n      * created.\n      */\n-    boolean createIfNotExists(String name, int size);\n+    boolean createIfNotExists(Name name, int size);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #createIfNotExists(Name, int)} instead\n+     */\n+    @Deprecated\n+    default boolean createIfNotExists(String name, int size) {\n+        return createIfNotExists(Name.ofUrn(name), size);\n+    }\n \n     /**\n      * Tries to delete a Log. Returns true if successfully deleted, might not be possible depending on the\n      * implementation.\n      */\n-    boolean delete(String name);\n+    boolean delete(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #delete(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean delete(String name) {\n+        return delete(Name.ofUrn(name));\n+    }\n \n     /**\n      * Returns the number of partition of a Log.\n      *\n      * @since 10.2\n      */\n-    int size(String name);\n+    int size(Name name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjcxOTY3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNjowMlrOGVVQVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowNjowMlrOGVVQVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyMTUyNA==", "bodyText": "Keep the existing @since 10.2.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425021524", "createdAt": "2020-05-14T10:06:02Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -42,39 +42,87 @@\n     /**\n      * Returns {@code true} if a Log with this {@code name} exists.\n      */\n-    boolean exists(String name);\n+    boolean exists(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #exists(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean exists(String name) {\n+        return exists(Name.ofUrn(name));\n+    }\n \n     /**\n      * Creates a new Log with {@code size} partitions if the Log does not exists. Returns true it the Log has been\n      * created.\n      */\n-    boolean createIfNotExists(String name, int size);\n+    boolean createIfNotExists(Name name, int size);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #createIfNotExists(Name, int)} instead\n+     */\n+    @Deprecated\n+    default boolean createIfNotExists(String name, int size) {\n+        return createIfNotExists(Name.ofUrn(name), size);\n+    }\n \n     /**\n      * Tries to delete a Log. Returns true if successfully deleted, might not be possible depending on the\n      * implementation.\n      */\n-    boolean delete(String name);\n+    boolean delete(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #delete(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean delete(String name) {\n+        return delete(Name.ofUrn(name));\n+    }\n \n     /**\n      * Returns the number of partition of a Log.\n      *\n      * @since 10.2\n      */\n-    int size(String name);\n+    int size(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #size(Name)} instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc1MjIxOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxNDo0N1rOGVVlLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxNDo0N1rOGVVlLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNjg2Mw==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425026863", "createdAt": "2020-05-14T10:14:47Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -42,39 +42,87 @@\n     /**\n      * Returns {@code true} if a Log with this {@code name} exists.\n      */\n-    boolean exists(String name);\n+    boolean exists(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #exists(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean exists(String name) {\n+        return exists(Name.ofUrn(name));\n+    }\n \n     /**\n      * Creates a new Log with {@code size} partitions if the Log does not exists. Returns true it the Log has been\n      * created.\n      */\n-    boolean createIfNotExists(String name, int size);\n+    boolean createIfNotExists(Name name, int size);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #createIfNotExists(Name, int)} instead\n+     */\n+    @Deprecated\n+    default boolean createIfNotExists(String name, int size) {\n+        return createIfNotExists(Name.ofUrn(name), size);\n+    }\n \n     /**\n      * Tries to delete a Log. Returns true if successfully deleted, might not be possible depending on the\n      * implementation.\n      */\n-    boolean delete(String name);\n+    boolean delete(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #delete(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean delete(String name) {\n+        return delete(Name.ofUrn(name));\n+    }\n \n     /**\n      * Returns the number of partition of a Log.\n      *\n      * @since 10.2\n      */\n-    int size(String name);\n+    int size(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #size(Name)} instead\n+     */\n+    @Deprecated\n+    default int size(String name) {\n+        return size(Name.ofUrn(name));\n+    }\n \n     /**\n      * Gets an appender for the Log named {@code name}, uses {@code codec} to encode records. An appender is thread\n      * safe.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogAppender<M> getAppender(String name, Codec<M> codec);\n+    <M extends Externalizable> LogAppender<M> getAppender(Name name, Codec<M> codec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc1MzEwOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxNTowM1rOGVVl0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxNTowM1rOGVVl0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNzAyNA==", "bodyText": "Keep the existing @since 10.2.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425027024", "createdAt": "2020-05-14T10:15:03Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -42,39 +42,87 @@\n     /**\n      * Returns {@code true} if a Log with this {@code name} exists.\n      */\n-    boolean exists(String name);\n+    boolean exists(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #exists(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean exists(String name) {\n+        return exists(Name.ofUrn(name));\n+    }\n \n     /**\n      * Creates a new Log with {@code size} partitions if the Log does not exists. Returns true it the Log has been\n      * created.\n      */\n-    boolean createIfNotExists(String name, int size);\n+    boolean createIfNotExists(Name name, int size);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #createIfNotExists(Name, int)} instead\n+     */\n+    @Deprecated\n+    default boolean createIfNotExists(String name, int size) {\n+        return createIfNotExists(Name.ofUrn(name), size);\n+    }\n \n     /**\n      * Tries to delete a Log. Returns true if successfully deleted, might not be possible depending on the\n      * implementation.\n      */\n-    boolean delete(String name);\n+    boolean delete(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #delete(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean delete(String name) {\n+        return delete(Name.ofUrn(name));\n+    }\n \n     /**\n      * Returns the number of partition of a Log.\n      *\n      * @since 10.2\n      */\n-    int size(String name);\n+    int size(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #size(Name)} instead\n+     */\n+    @Deprecated\n+    default int size(String name) {\n+        return size(Name.ofUrn(name));\n+    }\n \n     /**\n      * Gets an appender for the Log named {@code name}, uses {@code codec} to encode records. An appender is thread\n      * safe.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogAppender<M> getAppender(String name, Codec<M> codec);\n+    <M extends Externalizable> LogAppender<M> getAppender(Name name, Codec<M> codec);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getAppender(Name, Codec)} instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc1Njk3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxNjowNVrOGVVoHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxNjowNVrOGVVoHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNzYxNA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425027614", "createdAt": "2020-05-14T10:16:05Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -42,39 +42,87 @@\n     /**\n      * Returns {@code true} if a Log with this {@code name} exists.\n      */\n-    boolean exists(String name);\n+    boolean exists(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #exists(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean exists(String name) {\n+        return exists(Name.ofUrn(name));\n+    }\n \n     /**\n      * Creates a new Log with {@code size} partitions if the Log does not exists. Returns true it the Log has been\n      * created.\n      */\n-    boolean createIfNotExists(String name, int size);\n+    boolean createIfNotExists(Name name, int size);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #createIfNotExists(Name, int)} instead\n+     */\n+    @Deprecated\n+    default boolean createIfNotExists(String name, int size) {\n+        return createIfNotExists(Name.ofUrn(name), size);\n+    }\n \n     /**\n      * Tries to delete a Log. Returns true if successfully deleted, might not be possible depending on the\n      * implementation.\n      */\n-    boolean delete(String name);\n+    boolean delete(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #delete(Name)} instead\n+     */\n+    @Deprecated\n+    default boolean delete(String name) {\n+        return delete(Name.ofUrn(name));\n+    }\n \n     /**\n      * Returns the number of partition of a Log.\n      *\n      * @since 10.2\n      */\n-    int size(String name);\n+    int size(Name name);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #size(Name)} instead\n+     */\n+    @Deprecated\n+    default int size(String name) {\n+        return size(Name.ofUrn(name));\n+    }\n \n     /**\n      * Gets an appender for the Log named {@code name}, uses {@code codec} to encode records. An appender is thread\n      * safe.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogAppender<M> getAppender(String name, Codec<M> codec);\n+    <M extends Externalizable> LogAppender<M> getAppender(Name name, Codec<M> codec);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getAppender(Name, Codec)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogAppender<M> getAppender(String name, Codec<M> codec) {\n+        return getAppender(Name.ofUrn(name), codec);\n+    }\n \n     /**\n      * Gets an appender for the Log named {@code name}, uses an already defined codec or the legacy encoding to encode\n      * records. An appender is thread safe.\n      */\n+    default <M extends Externalizable> LogAppender<M> getAppender(Name name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc1Nzc3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxNjoyMFrOGVVorw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxNjoyMFrOGVVorw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNzc1OQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425027759", "createdAt": "2020-05-14T10:16:20Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -85,51 +133,92 @@\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+    <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc1ODQ0OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxNjozM1rOGVVpIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxNjozM1rOGVVpIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyNzg3Mg==", "bodyText": "Keep also @since 10.2.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425027872", "createdAt": "2020-05-14T10:16:33Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -85,51 +133,92 @@\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+    <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions,\n             Codec<M> codec);\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name, Codec)} (Name)} instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc2MTc3OnYy", "diffSide": "LEFT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxNzozOVrOGVVrig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODoxOToyNVrOGWsUBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyODQ5MA==", "bodyText": "No backward compatibility as other methods?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425028490", "createdAt": "2020-05-14T10:17:39Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -168,73 +284,79 @@\n      * Returns the lag between consumer {@code group} and the producers for each partition. The result list is ordered,\n      * for instance index 0 is lag for partition 0.\n      */\n-    List<LogLag> getLagPerPartition(String name, String group);\n+    List<LogLag> getLagPerPartition(Name name, Name group);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getLagPerPartition(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default List<LogLag> getLagPerPartition(String name, String group) {\n+        return getLagPerPartition(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n \n     /**\n      * Returns the lag between consumer {@code group} and producers for a Log.\n      */\n-    default LogLag getLag(String name, String group) {\n+    default LogLag getLag(Name name, Name group) {\n         return LogLag.of(getLagPerPartition(name, group));\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #getLag(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default LogLag getLag(String name, String group) {\n+        return getLag(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n+\n     /**\n      * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n+     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(Name, Name)}. <br/>\n      * Two functions need to be provided to extract the timestamp and a key from a record.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n+    <M extends Externalizable> List<Latency> getLatencyPerPartition(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor);\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.2\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n-    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,\n+    @Deprecated\n+    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n+        return getLatencyPerPartition(Name.ofUrn(name), Name.ofUrn(group), codec, timestampExtractor, keyExtractor);\n     }\n \n     /**\n-     * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n-     * Two functions need to be provided to extract the timestamp and a key from a record.\n+     * Returns the latency between consumer {@code group} and producers for a Log.\n      *\n-     * @since 10.1\n-     * @deprecated 10.2 use {@link #getLatencyPerPartition(String, String, Codec, Function, Function)} instead.\n+     * @since 10.2\n      */\n-    @Deprecated\n-    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group,\n+    default <M extends Externalizable> Latency getLatency(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return getLatencyPerPartition(name, group, NO_CODEC, timestampExtractor, keyExtractor);\n+        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n     }\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.1\n-     * @deprecated 10.2 use {@link #getLatency(String, String, Codec, Function, Function)} instead.\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n     @Deprecated\n-    default <M extends Externalizable> Latency getLatency(String name, String group,\n-            Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return getLatency(name, group, NO_CODEC, timestampExtractor, keyExtractor);\n+    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,\n+                                                          Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n+        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n     }\n \n     /**\n      * Returns all the Log names.\n      */\n-    List<String> listAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 333}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ0Nzg3OQ==", "bodyText": "yes, I will keep it as deprecated and introduce a new listAllNames", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r426447879", "createdAt": "2020-05-18T08:19:25Z", "author": {"login": "bdelbosc"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -168,73 +284,79 @@\n      * Returns the lag between consumer {@code group} and the producers for each partition. The result list is ordered,\n      * for instance index 0 is lag for partition 0.\n      */\n-    List<LogLag> getLagPerPartition(String name, String group);\n+    List<LogLag> getLagPerPartition(Name name, Name group);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getLagPerPartition(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default List<LogLag> getLagPerPartition(String name, String group) {\n+        return getLagPerPartition(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n \n     /**\n      * Returns the lag between consumer {@code group} and producers for a Log.\n      */\n-    default LogLag getLag(String name, String group) {\n+    default LogLag getLag(Name name, Name group) {\n         return LogLag.of(getLagPerPartition(name, group));\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #getLag(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default LogLag getLag(String name, String group) {\n+        return getLag(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n+\n     /**\n      * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n+     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(Name, Name)}. <br/>\n      * Two functions need to be provided to extract the timestamp and a key from a record.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n+    <M extends Externalizable> List<Latency> getLatencyPerPartition(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor);\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.2\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n-    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,\n+    @Deprecated\n+    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n+        return getLatencyPerPartition(Name.ofUrn(name), Name.ofUrn(group), codec, timestampExtractor, keyExtractor);\n     }\n \n     /**\n-     * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n-     * Two functions need to be provided to extract the timestamp and a key from a record.\n+     * Returns the latency between consumer {@code group} and producers for a Log.\n      *\n-     * @since 10.1\n-     * @deprecated 10.2 use {@link #getLatencyPerPartition(String, String, Codec, Function, Function)} instead.\n+     * @since 10.2\n      */\n-    @Deprecated\n-    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group,\n+    default <M extends Externalizable> Latency getLatency(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return getLatencyPerPartition(name, group, NO_CODEC, timestampExtractor, keyExtractor);\n+        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n     }\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.1\n-     * @deprecated 10.2 use {@link #getLatency(String, String, Codec, Function, Function)} instead.\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n     @Deprecated\n-    default <M extends Externalizable> Latency getLatency(String name, String group,\n-            Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return getLatency(name, group, NO_CODEC, timestampExtractor, keyExtractor);\n+    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,\n+                                                          Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n+        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n     }\n \n     /**\n      * Returns all the Log names.\n      */\n-    List<String> listAll();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyODQ5MA=="}, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 333}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc2MjE1OnYy", "diffSide": "LEFT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxNzo0NlrOGVVryQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODoxMDoyM1rOGWr-8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyODU1Mw==", "bodyText": "No backward compatibility as other methods?", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425028553", "createdAt": "2020-05-14T10:17:46Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -168,73 +284,79 @@\n      * Returns the lag between consumer {@code group} and the producers for each partition. The result list is ordered,\n      * for instance index 0 is lag for partition 0.\n      */\n-    List<LogLag> getLagPerPartition(String name, String group);\n+    List<LogLag> getLagPerPartition(Name name, Name group);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getLagPerPartition(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default List<LogLag> getLagPerPartition(String name, String group) {\n+        return getLagPerPartition(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n \n     /**\n      * Returns the lag between consumer {@code group} and producers for a Log.\n      */\n-    default LogLag getLag(String name, String group) {\n+    default LogLag getLag(Name name, Name group) {\n         return LogLag.of(getLagPerPartition(name, group));\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #getLag(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default LogLag getLag(String name, String group) {\n+        return getLag(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n+\n     /**\n      * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n+     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(Name, Name)}. <br/>\n      * Two functions need to be provided to extract the timestamp and a key from a record.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n+    <M extends Externalizable> List<Latency> getLatencyPerPartition(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor);\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.2\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n-    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,\n+    @Deprecated\n+    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n+        return getLatencyPerPartition(Name.ofUrn(name), Name.ofUrn(group), codec, timestampExtractor, keyExtractor);\n     }\n \n     /**\n-     * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n-     * Two functions need to be provided to extract the timestamp and a key from a record.\n+     * Returns the latency between consumer {@code group} and producers for a Log.\n      *\n-     * @since 10.1\n-     * @deprecated 10.2 use {@link #getLatencyPerPartition(String, String, Codec, Function, Function)} instead.\n+     * @since 10.2\n      */\n-    @Deprecated\n-    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group,\n+    default <M extends Externalizable> Latency getLatency(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return getLatencyPerPartition(name, group, NO_CODEC, timestampExtractor, keyExtractor);\n+        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n     }\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.1\n-     * @deprecated 10.2 use {@link #getLatency(String, String, Codec, Function, Function)} instead.\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n     @Deprecated\n-    default <M extends Externalizable> Latency getLatency(String name, String group,\n-            Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return getLatency(name, group, NO_CODEC, timestampExtractor, keyExtractor);\n+    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,\n+                                                          Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n+        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n     }\n \n     /**\n      * Returns all the Log names.\n      */\n-    List<String> listAll();\n+    List<Name> listAll();\n \n     /**\n      * List the consumer groups for a Log.<br/>\n      * Note that for Kafka it returns only consumers that use the subscribe API.\n      */\n-    List<String> listConsumerGroups(String name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 340}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ0MjQ4Mg==", "bodyText": "I will add the backward compat", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r426442482", "createdAt": "2020-05-18T08:10:23Z", "author": {"login": "bdelbosc"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -168,73 +284,79 @@\n      * Returns the lag between consumer {@code group} and the producers for each partition. The result list is ordered,\n      * for instance index 0 is lag for partition 0.\n      */\n-    List<LogLag> getLagPerPartition(String name, String group);\n+    List<LogLag> getLagPerPartition(Name name, Name group);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getLagPerPartition(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default List<LogLag> getLagPerPartition(String name, String group) {\n+        return getLagPerPartition(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n \n     /**\n      * Returns the lag between consumer {@code group} and producers for a Log.\n      */\n-    default LogLag getLag(String name, String group) {\n+    default LogLag getLag(Name name, Name group) {\n         return LogLag.of(getLagPerPartition(name, group));\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #getLag(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default LogLag getLag(String name, String group) {\n+        return getLag(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n+\n     /**\n      * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n+     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(Name, Name)}. <br/>\n      * Two functions need to be provided to extract the timestamp and a key from a record.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n+    <M extends Externalizable> List<Latency> getLatencyPerPartition(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor);\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.2\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n-    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,\n+    @Deprecated\n+    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n+        return getLatencyPerPartition(Name.ofUrn(name), Name.ofUrn(group), codec, timestampExtractor, keyExtractor);\n     }\n \n     /**\n-     * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n-     * Two functions need to be provided to extract the timestamp and a key from a record.\n+     * Returns the latency between consumer {@code group} and producers for a Log.\n      *\n-     * @since 10.1\n-     * @deprecated 10.2 use {@link #getLatencyPerPartition(String, String, Codec, Function, Function)} instead.\n+     * @since 10.2\n      */\n-    @Deprecated\n-    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group,\n+    default <M extends Externalizable> Latency getLatency(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return getLatencyPerPartition(name, group, NO_CODEC, timestampExtractor, keyExtractor);\n+        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n     }\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.1\n-     * @deprecated 10.2 use {@link #getLatency(String, String, Codec, Function, Function)} instead.\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n     @Deprecated\n-    default <M extends Externalizable> Latency getLatency(String name, String group,\n-            Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return getLatency(name, group, NO_CODEC, timestampExtractor, keyExtractor);\n+    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,\n+                                                          Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n+        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n     }\n \n     /**\n      * Returns all the Log names.\n      */\n-    List<String> listAll();\n+    List<Name> listAll();\n \n     /**\n      * List the consumer groups for a Log.<br/>\n      * Note that for Kafka it returns only consumers that use the subscribe API.\n      */\n-    List<String> listConsumerGroups(String name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyODU1Mw=="}, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 340}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc2MzM2OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxODowNFrOGVVshw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxODowNFrOGVVshw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyODc0Mw==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425028743", "createdAt": "2020-05-14T10:18:04Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -85,51 +133,92 @@\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+    <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions,\n             Codec<M> codec);\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name, Codec)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+            Codec<M> codec) {\n+        return createTailer(Name.ofUrn(group), partitions, codec);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign multiple {@code partitions}. Note that\n      * {@code partitions} can be from different Logs. Reads records using the legacy decoder. A tailer is NOT thread\n      * safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc2NDc3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxODoyOVrOGVVtbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxODoyOVrOGVVtbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyODk3Mg==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425028972", "createdAt": "2020-05-14T10:18:29Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -85,51 +133,92 @@\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+    <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions,\n             Codec<M> codec);\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name, Codec)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+            Codec<M> codec) {\n+        return createTailer(Name.ofUrn(group), partitions, codec);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign multiple {@code partitions}. Note that\n      * {@code partitions} can be from different Logs. Reads records using the legacy decoder. A tailer is NOT thread\n      * safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions) {\n         return createTailer(group, partitions, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Collection<LogPartition>)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+        return createTailer(Name.ofUrn(group), partitions);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign a single {@code partition}. Reads records using the\n      * legacy decoder. A tailer is NOT thread safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, LogPartition partition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc2Njk3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxOTowNlrOGVVuvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxOTowNlrOGVVuvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyOTMxMA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425029310", "createdAt": "2020-05-14T10:19:06Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -85,51 +133,92 @@\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+    <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions,\n             Codec<M> codec);\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name, Codec)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+            Codec<M> codec) {\n+        return createTailer(Name.ofUrn(group), partitions, codec);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign multiple {@code partitions}. Note that\n      * {@code partitions} can be from different Logs. Reads records using the legacy decoder. A tailer is NOT thread\n      * safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions) {\n         return createTailer(group, partitions, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Collection<LogPartition>)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+        return createTailer(Name.ofUrn(group), partitions);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign a single {@code partition}. Reads records using the\n      * legacy decoder. A tailer is NOT thread safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, LogPartition partition) {\n         return createTailer(group, partition, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Collection<LogPartition>)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition) {\n+        return createTailer(Name.ofUrn(group), partition);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign all {@code partitions} of the Log. Reads records using\n      * the legacy decoder. A tailer is NOT thread safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, String name) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Name name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc2NzQ5OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxOToxNVrOGVVvEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxOToxNVrOGVVvEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyOTM5Mg==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425029392", "createdAt": "2020-05-14T10:19:15Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -85,51 +133,92 @@\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+    <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions,\n             Codec<M> codec);\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name, Codec)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+            Codec<M> codec) {\n+        return createTailer(Name.ofUrn(group), partitions, codec);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign multiple {@code partitions}. Note that\n      * {@code partitions} can be from different Logs. Reads records using the legacy decoder. A tailer is NOT thread\n      * safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions) {\n         return createTailer(group, partitions, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Collection<LogPartition>)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+        return createTailer(Name.ofUrn(group), partitions);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign a single {@code partition}. Reads records using the\n      * legacy decoder. A tailer is NOT thread safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, LogPartition partition) {\n         return createTailer(group, partition, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Collection<LogPartition>)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition) {\n+        return createTailer(Name.ofUrn(group), partition);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign all {@code partitions} of the Log. Reads records using\n      * the legacy decoder. A tailer is NOT thread safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, String name) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Name name) {\n         return createTailer(group, name, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, String name) {\n+        return createTailer(Name.ofUrn(group), Name.ofUrn(name));\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign a single {@code partition}. Use an explicit codec to\n      * decode records. A tailer is NOT thread safe.\n      *\n      * @since 10.2\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition, Codec<M> codec) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, LogPartition partition, Codec<M> codec) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc2ODAwOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxOToyN1rOGVVvbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxOToyN1rOGVVvbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyOTQ4NA==", "bodyText": "Keep since 10.2.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425029484", "createdAt": "2020-05-14T10:19:27Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -85,51 +133,92 @@\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+    <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions,\n             Codec<M> codec);\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name, Codec)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+            Codec<M> codec) {\n+        return createTailer(Name.ofUrn(group), partitions, codec);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign multiple {@code partitions}. Note that\n      * {@code partitions} can be from different Logs. Reads records using the legacy decoder. A tailer is NOT thread\n      * safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions) {\n         return createTailer(group, partitions, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Collection<LogPartition>)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+        return createTailer(Name.ofUrn(group), partitions);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign a single {@code partition}. Reads records using the\n      * legacy decoder. A tailer is NOT thread safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, LogPartition partition) {\n         return createTailer(group, partition, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Collection<LogPartition>)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition) {\n+        return createTailer(Name.ofUrn(group), partition);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign all {@code partitions} of the Log. Reads records using\n      * the legacy decoder. A tailer is NOT thread safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, String name) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Name name) {\n         return createTailer(group, name, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, String name) {\n+        return createTailer(Name.ofUrn(group), Name.ofUrn(name));\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign a single {@code partition}. Use an explicit codec to\n      * decode records. A tailer is NOT thread safe.\n      *\n      * @since 10.2\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition, Codec<M> codec) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, LogPartition partition, Codec<M> codec) {\n         return createTailer(group, Collections.singletonList(partition), codec);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, LogPartition, Codec)} instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc2ODcxOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxOTo0MVrOGVVv5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxOTo0MVrOGVVv5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyOTYwNQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425029605", "createdAt": "2020-05-14T10:19:41Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -85,51 +133,92 @@\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+    <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions,\n             Codec<M> codec);\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name, Codec)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions,\n+            Codec<M> codec) {\n+        return createTailer(Name.ofUrn(group), partitions, codec);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign multiple {@code partitions}. Note that\n      * {@code partitions} can be from different Logs. Reads records using the legacy decoder. A tailer is NOT thread\n      * safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Collection<LogPartition> partitions) {\n         return createTailer(group, partitions, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Collection<LogPartition>)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, Collection<LogPartition> partitions) {\n+        return createTailer(Name.ofUrn(group), partitions);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign a single {@code partition}. Reads records using the\n      * legacy decoder. A tailer is NOT thread safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, LogPartition partition) {\n         return createTailer(group, partition, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Collection<LogPartition>)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition) {\n+        return createTailer(Name.ofUrn(group), partition);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign all {@code partitions} of the Log. Reads records using\n      * the legacy decoder. A tailer is NOT thread safe.\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, String name) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Name name) {\n         return createTailer(group, name, NO_CODEC);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name)} (Name)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, String name) {\n+        return createTailer(Name.ofUrn(group), Name.ofUrn(name));\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assign a single {@code partition}. Use an explicit codec to\n      * decode records. A tailer is NOT thread safe.\n      *\n      * @since 10.2\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition, Codec<M> codec) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, LogPartition partition, Codec<M> codec) {\n         return createTailer(group, Collections.singletonList(partition), codec);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, LogPartition, Codec)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> createTailer(String group, LogPartition partition, Codec<M> codec) {\n+        return createTailer(Name.ofUrn(group), Collections.singletonList(partition), codec);\n+    }\n+\n     /**\n      * Creates a tailer for a consumer {@code group} and assigns all {@code partitions} of the Log. Uses {@code codec}\n      * to decode records. A tailer is NOT thread safe.\n      *\n      * @since 10.2\n      */\n-    default <M extends Externalizable> LogTailer<M> createTailer(String group, String name, Codec<M> codec) {\n+    default <M extends Externalizable> LogTailer<M> createTailer(Name group, Name name, Codec<M> codec) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc2OTQ5OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxOTo1NlrOGVVwZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoxOTo1NlrOGVVwZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyOTczNA==", "bodyText": "Keep since 10.2.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425029734", "createdAt": "2020-05-14T10:19:56Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -142,6 +231,14 @@\n                 codec);\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #createTailer(Name, Name, Codec)} instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc3MDE3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoyMDowOFrOGVVw0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoyMDowOFrOGVVw0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAyOTg0Mw==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425029843", "createdAt": "2020-05-14T10:20:08Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -156,9 +253,28 @@\n      * <p/>\n      * You should not mix {@link #createTailer} and {@code subscribe} usage using the same {@code group}.\n      */\n-    <M extends Externalizable> LogTailer<M> subscribe(String group, Collection<String> names,\n+    <M extends Externalizable> LogTailer<M> subscribe(Name group, Collection<Name> names,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc3MTMyOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoyMDozMFrOGVVxjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoyMDozMFrOGVVxjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAzMDAyOA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425030028", "createdAt": "2020-05-14T10:20:30Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -156,9 +253,28 @@\n      * <p/>\n      * You should not mix {@link #createTailer} and {@code subscribe} usage using the same {@code group}.\n      */\n-    <M extends Externalizable> LogTailer<M> subscribe(String group, Collection<String> names,\n+    <M extends Externalizable> LogTailer<M> subscribe(Name group, Collection<Name> names,\n             RebalanceListener listener, Codec<M> codec);\n \n+    /**\n+     * @deprecated since 11.1 use {@link #subscribe(Name, Collection, RebalanceListener, Codec)} instead\n+     */\n+    @Deprecated\n+    default <M extends Externalizable> LogTailer<M> subscribe(String group, Collection<String> names,\n+            RebalanceListener listener, Codec<M> codec) {\n+        return subscribe(Name.ofUrn(group), names.stream().map(Name::ofUrn).collect(Collectors.toList()), listener,\n+                codec);\n+    }\n+\n+    default <M extends Externalizable> LogTailer<M> subscribe(Name group, Collection<Name> names,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc3NDE3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoyMToyNFrOGVVzXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoyMToyNFrOGVVzXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAzMDQ5NQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425030495", "createdAt": "2020-05-14T10:21:24Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -168,73 +284,79 @@\n      * Returns the lag between consumer {@code group} and the producers for each partition. The result list is ordered,\n      * for instance index 0 is lag for partition 0.\n      */\n-    List<LogLag> getLagPerPartition(String name, String group);\n+    List<LogLag> getLagPerPartition(Name name, Name group);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc3NDY3OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoyMTozNFrOGVVztQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoyMTozNFrOGVVztQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAzMDU4MQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425030581", "createdAt": "2020-05-14T10:21:34Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -168,73 +284,79 @@\n      * Returns the lag between consumer {@code group} and the producers for each partition. The result list is ordered,\n      * for instance index 0 is lag for partition 0.\n      */\n-    List<LogLag> getLagPerPartition(String name, String group);\n+    List<LogLag> getLagPerPartition(Name name, Name group);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getLagPerPartition(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default List<LogLag> getLagPerPartition(String name, String group) {\n+        return getLagPerPartition(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n \n     /**\n      * Returns the lag between consumer {@code group} and producers for a Log.\n      */\n-    default LogLag getLag(String name, String group) {\n+    default LogLag getLag(Name name, Name group) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 256}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc3NTYyOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoyMTo1NVrOGVV0YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoyMTo1NVrOGVV0YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAzMDc1Mg==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425030752", "createdAt": "2020-05-14T10:21:55Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -168,73 +284,79 @@\n      * Returns the lag between consumer {@code group} and the producers for each partition. The result list is ordered,\n      * for instance index 0 is lag for partition 0.\n      */\n-    List<LogLag> getLagPerPartition(String name, String group);\n+    List<LogLag> getLagPerPartition(Name name, Name group);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getLagPerPartition(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default List<LogLag> getLagPerPartition(String name, String group) {\n+        return getLagPerPartition(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n \n     /**\n      * Returns the lag between consumer {@code group} and producers for a Log.\n      */\n-    default LogLag getLag(String name, String group) {\n+    default LogLag getLag(Name name, Name group) {\n         return LogLag.of(getLagPerPartition(name, group));\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #getLag(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default LogLag getLag(String name, String group) {\n+        return getLag(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n+\n     /**\n      * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n+     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(Name, Name)}. <br/>\n      * Two functions need to be provided to extract the timestamp and a key from a record.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n+    <M extends Externalizable> List<Latency> getLatencyPerPartition(Name name, Name group, Codec<M> codec,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 278}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc3ODU2OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoyMjo1MVrOGVV2Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoyMjo1MVrOGVV2Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAzMTI1MA==", "bodyText": "Keep since 10.2.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425031250", "createdAt": "2020-05-14T10:22:51Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -168,73 +284,79 @@\n      * Returns the lag between consumer {@code group} and the producers for each partition. The result list is ordered,\n      * for instance index 0 is lag for partition 0.\n      */\n-    List<LogLag> getLagPerPartition(String name, String group);\n+    List<LogLag> getLagPerPartition(Name name, Name group);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getLagPerPartition(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default List<LogLag> getLagPerPartition(String name, String group) {\n+        return getLagPerPartition(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n \n     /**\n      * Returns the lag between consumer {@code group} and producers for a Log.\n      */\n-    default LogLag getLag(String name, String group) {\n+    default LogLag getLag(Name name, Name group) {\n         return LogLag.of(getLagPerPartition(name, group));\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #getLag(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default LogLag getLag(String name, String group) {\n+        return getLag(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n+\n     /**\n      * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n+     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(Name, Name)}. <br/>\n      * Two functions need to be provided to extract the timestamp and a key from a record.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n+    <M extends Externalizable> List<Latency> getLatencyPerPartition(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor);\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.2\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n-    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,\n+    @Deprecated\n+    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 289}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc3OTIwOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoyMzowNFrOGVV2tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoyMzowNFrOGVV2tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAzMTM1MA==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425031350", "createdAt": "2020-05-14T10:23:04Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -168,73 +284,79 @@\n      * Returns the lag between consumer {@code group} and the producers for each partition. The result list is ordered,\n      * for instance index 0 is lag for partition 0.\n      */\n-    List<LogLag> getLagPerPartition(String name, String group);\n+    List<LogLag> getLagPerPartition(Name name, Name group);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getLagPerPartition(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default List<LogLag> getLagPerPartition(String name, String group) {\n+        return getLagPerPartition(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n \n     /**\n      * Returns the lag between consumer {@code group} and producers for a Log.\n      */\n-    default LogLag getLag(String name, String group) {\n+    default LogLag getLag(Name name, Name group) {\n         return LogLag.of(getLagPerPartition(name, group));\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #getLag(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default LogLag getLag(String name, String group) {\n+        return getLag(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n+\n     /**\n      * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n+     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(Name, Name)}. <br/>\n      * Two functions need to be provided to extract the timestamp and a key from a record.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n+    <M extends Externalizable> List<Latency> getLatencyPerPartition(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor);\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.2\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n-    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,\n+    @Deprecated\n+    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n+        return getLatencyPerPartition(Name.ofUrn(name), Name.ofUrn(group), codec, timestampExtractor, keyExtractor);\n     }\n \n     /**\n-     * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n-     * Two functions need to be provided to extract the timestamp and a key from a record.\n+     * Returns the latency between consumer {@code group} and producers for a Log.\n      *\n-     * @since 10.1\n-     * @deprecated 10.2 use {@link #getLatencyPerPartition(String, String, Codec, Function, Function)} instead.\n+     * @since 10.2\n      */\n-    @Deprecated\n-    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group,\n+    default <M extends Externalizable> Latency getLatency(Name name, Name group, Codec<M> codec,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 308}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Njc4MzgwOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoyNDoyN1rOGVV5ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDoyNDoyN1rOGVV5ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAzMjA5OQ==", "bodyText": "Keep existing @since 10.2 (?)", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425032099", "createdAt": "2020-05-14T10:24:27Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/LogManager.java", "diffHunk": "@@ -168,73 +284,79 @@\n      * Returns the lag between consumer {@code group} and the producers for each partition. The result list is ordered,\n      * for instance index 0 is lag for partition 0.\n      */\n-    List<LogLag> getLagPerPartition(String name, String group);\n+    List<LogLag> getLagPerPartition(Name name, Name group);\n+\n+    /**\n+     * @deprecated since 11.1 use {@link #getLagPerPartition(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default List<LogLag> getLagPerPartition(String name, String group) {\n+        return getLagPerPartition(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n \n     /**\n      * Returns the lag between consumer {@code group} and producers for a Log.\n      */\n-    default LogLag getLag(String name, String group) {\n+    default LogLag getLag(Name name, Name group) {\n         return LogLag.of(getLagPerPartition(name, group));\n     }\n \n+    /**\n+     * @deprecated since 11.1 use {@link #getLag(Name, Name)} instead\n+     */\n+    @Deprecated\n+    default LogLag getLag(String name, String group) {\n+        return getLag(Name.ofUrn(name), Name.ofUrn(group));\n+    }\n+\n     /**\n      * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n+     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(Name, Name)}. <br/>\n      * Two functions need to be provided to extract the timestamp and a key from a record.\n      *\n      * @since 10.2\n      */\n-    <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n+    <M extends Externalizable> List<Latency> getLatencyPerPartition(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor);\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.2\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n-    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,\n+    @Deprecated\n+    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n+        return getLatencyPerPartition(Name.ofUrn(name), Name.ofUrn(group), codec, timestampExtractor, keyExtractor);\n     }\n \n     /**\n-     * Returns the lag with latency. Timestamps used to compute the latencies are extracted from the records. This\n-     * requires to read one record per partition so it costs more than {@link #getLagPerPartition(String, String)}.\n-     * <br/>\n-     * Two functions need to be provided to extract the timestamp and a key from a record.\n+     * Returns the latency between consumer {@code group} and producers for a Log.\n      *\n-     * @since 10.1\n-     * @deprecated 10.2 use {@link #getLatencyPerPartition(String, String, Codec, Function, Function)} instead.\n+     * @since 10.2\n      */\n-    @Deprecated\n-    default <M extends Externalizable> List<Latency> getLatencyPerPartition(String name, String group,\n+    default <M extends Externalizable> Latency getLatency(Name name, Name group, Codec<M> codec,\n             Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return getLatencyPerPartition(name, group, NO_CODEC, timestampExtractor, keyExtractor);\n+        return Latency.of(getLatencyPerPartition(name, group, codec, timestampExtractor, keyExtractor));\n     }\n \n     /**\n-     * Returns the latency between consumer {@code group} and producers for a Log.\n-     *\n-     * @since 10.1\n-     * @deprecated 10.2 use {@link #getLatency(String, String, Codec, Function, Function)} instead.\n+     * @deprecated since 11.1 use {@link #getLatencyPerPartition(Name, Name, Codec, Function, Function)} instead\n      */\n     @Deprecated\n-    default <M extends Externalizable> Latency getLatency(String name, String group,\n-            Function<M, Long> timestampExtractor, Function<M, String> keyExtractor) {\n-        return getLatency(name, group, NO_CODEC, timestampExtractor, keyExtractor);\n+    default <M extends Externalizable> Latency getLatency(String name, String group, Codec<M> codec,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 325}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzI0NjQ0OnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/RebalanceListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjo0NDoyMlrOGVabrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjo0NDoyMlrOGVabrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEwNjM1MQ==", "bodyText": "Since 11.1.", "url": "https://github.com/nuxeo/nuxeo/pull/3930#discussion_r425106351", "createdAt": "2020-05-14T12:44:22Z", "author": {"login": "troger"}, "path": "modules/runtime/nuxeo-stream/src/main/java/org/nuxeo/lib/stream/log/RebalanceListener.java", "diffHunk": "@@ -31,4 +31,7 @@\n \n     void onPartitionsAssigned(Collection<LogPartition> partitions);\n \n+    default void onPartitionsLost(Collection<LogPartition> partitions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4f409008a2e70995de4c801058ea05dba489448"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4176, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}