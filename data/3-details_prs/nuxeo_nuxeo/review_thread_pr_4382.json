{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMjUzOTEw", "number": 4382, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDozMzozMlrOEubSKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo0NDo1MFrOEubmfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTE2OTcxOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-metrics/src/main/java/org/nuxeo/runtime/metrics/reporter/StackdriverTraceReporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDozMzozMlrOHi0eog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNzowMDoxOVrOHkAPZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3MzQ0Mg==", "bodyText": "Why not using StringUtils#defaultIfBlank?", "url": "https://github.com/nuxeo/nuxeo/pull/4382#discussion_r506273442", "createdAt": "2020-10-16T10:33:32Z", "author": {"login": "kevinleturc"}, "path": "modules/runtime/nuxeo-runtime-metrics/src/main/java/org/nuxeo/runtime/metrics/reporter/StackdriverTraceReporter.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.metrics.reporter;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.common.utils.DurationUtils;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.metrics.AbstractMetricsReporter;\n+\n+import io.dropwizard.metrics5.MetricAttribute;\n+import io.dropwizard.metrics5.MetricFilter;\n+import io.dropwizard.metrics5.MetricRegistry;\n+import io.opencensus.common.Duration;\n+import io.opencensus.exporter.trace.stackdriver.StackdriverTraceConfiguration;\n+import io.opencensus.exporter.trace.stackdriver.StackdriverTraceExporter;\n+\n+/**\n+ * Reports trace to Google Stackdriver.\n+ *\n+ * @since 11.4\n+ */\n+public class StackdriverTraceReporter extends AbstractMetricsReporter {\n+\n+    private static final Logger log = LogManager.getLogger(StackdriverTraceReporter.class);\n+\n+    public static final String GCP_PROJECT_ID_ENV_PROP = \"GCP_PROJECT_ID\";\n+\n+    public static final String GCP_PROJECT_ID_OPTION_PROP = \"gcpProjectId\";\n+\n+    protected boolean activated;\n+\n+    @Override\n+    public void start(MetricRegistry registry, MetricFilter filter, Set<MetricAttribute> deniedExpansions) {\n+        log.warn(\"Creating Stackdriver trace reporter\");\n+        Duration timeout = Duration.create(\n+                DurationUtils.parsePositive(options.get(TIMEOUT_OPTION), DEFAULT_TIMEOUT).getSeconds(), 0);\n+        String projectId = getGcpProjectId(options);\n+        StackdriverTraceConfiguration configuration = StackdriverTraceConfiguration.builder()\n+                                                                                   .setDeadline(timeout)\n+                                                                                   .setProjectId(projectId)\n+                                                                                   .build();\n+        try {\n+            StackdriverTraceExporter.createAndRegister(configuration);\n+        } catch (IOException e) {\n+            log.error(\"Fail to create a Stackdriver trace reporter\", e);\n+            return;\n+        }\n+        activated = true;\n+        enableTracing();\n+    }\n+\n+    protected static String getGcpProjectId(Map<String, String> options) {\n+        return getFirstValue(options.get(GCP_PROJECT_ID_OPTION_PROP), Framework.getProperty(GCP_PROJECT_ID_ENV_PROP));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab0407a0b2fe576497b2e9cf365eab085a5afdd"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxNDcyNQ==", "bodyText": "maybe, I could handle more alternative here, like option, then property else default", "url": "https://github.com/nuxeo/nuxeo/pull/4382#discussion_r507514725", "createdAt": "2020-10-19T07:00:19Z", "author": {"login": "bdelbosc"}, "path": "modules/runtime/nuxeo-runtime-metrics/src/main/java/org/nuxeo/runtime/metrics/reporter/StackdriverTraceReporter.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.metrics.reporter;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.common.utils.DurationUtils;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.metrics.AbstractMetricsReporter;\n+\n+import io.dropwizard.metrics5.MetricAttribute;\n+import io.dropwizard.metrics5.MetricFilter;\n+import io.dropwizard.metrics5.MetricRegistry;\n+import io.opencensus.common.Duration;\n+import io.opencensus.exporter.trace.stackdriver.StackdriverTraceConfiguration;\n+import io.opencensus.exporter.trace.stackdriver.StackdriverTraceExporter;\n+\n+/**\n+ * Reports trace to Google Stackdriver.\n+ *\n+ * @since 11.4\n+ */\n+public class StackdriverTraceReporter extends AbstractMetricsReporter {\n+\n+    private static final Logger log = LogManager.getLogger(StackdriverTraceReporter.class);\n+\n+    public static final String GCP_PROJECT_ID_ENV_PROP = \"GCP_PROJECT_ID\";\n+\n+    public static final String GCP_PROJECT_ID_OPTION_PROP = \"gcpProjectId\";\n+\n+    protected boolean activated;\n+\n+    @Override\n+    public void start(MetricRegistry registry, MetricFilter filter, Set<MetricAttribute> deniedExpansions) {\n+        log.warn(\"Creating Stackdriver trace reporter\");\n+        Duration timeout = Duration.create(\n+                DurationUtils.parsePositive(options.get(TIMEOUT_OPTION), DEFAULT_TIMEOUT).getSeconds(), 0);\n+        String projectId = getGcpProjectId(options);\n+        StackdriverTraceConfiguration configuration = StackdriverTraceConfiguration.builder()\n+                                                                                   .setDeadline(timeout)\n+                                                                                   .setProjectId(projectId)\n+                                                                                   .build();\n+        try {\n+            StackdriverTraceExporter.createAndRegister(configuration);\n+        } catch (IOException e) {\n+            log.error(\"Fail to create a Stackdriver trace reporter\", e);\n+            return;\n+        }\n+        activated = true;\n+        enableTracing();\n+    }\n+\n+    protected static String getGcpProjectId(Map<String, String> options) {\n+        return getFirstValue(options.get(GCP_PROJECT_ID_OPTION_PROP), Framework.getProperty(GCP_PROJECT_ID_ENV_PROP));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3MzQ0Mg=="}, "originalCommit": {"oid": "8ab0407a0b2fe576497b2e9cf365eab085a5afdd"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTIwNDEzOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-metrics/src/main/java/org/nuxeo/runtime/metrics/reporter/StackdriverReporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo0MDo0N1rOHi01uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNzowMzoyMFrOHkAUfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3OTM1Mg==", "bodyText": "warn -> debug", "url": "https://github.com/nuxeo/nuxeo/pull/4382#discussion_r506279352", "createdAt": "2020-10-16T10:40:47Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime-metrics/src/main/java/org/nuxeo/runtime/metrics/reporter/StackdriverReporter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.metrics.reporter;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.common.utils.DurationUtils;\n+import org.nuxeo.runtime.metrics.AbstractMetricsReporter;\n+\n+import io.dropwizard.metrics5.MetricAttribute;\n+import io.dropwizard.metrics5.MetricFilter;\n+import io.dropwizard.metrics5.MetricRegistry;\n+import io.opencensus.common.Duration;\n+import io.opencensus.contrib.dropwizard5.DropWizardMetrics;\n+import io.opencensus.exporter.stats.stackdriver.StackdriverStatsConfiguration;\n+import io.opencensus.exporter.stats.stackdriver.StackdriverStatsExporter;\n+import io.opencensus.metrics.Metrics;\n+\n+/**\n+ * Reports metrics to Google Stackdriver.\n+ *\n+ * @since 11.4\n+ */\n+public class StackdriverReporter extends AbstractMetricsReporter {\n+\n+    private static final Logger log = LogManager.getLogger(StackdriverReporter.class);\n+\n+    protected static final String PREFIX_OPTION = \"prefix\";\n+\n+    protected static final String DEFAULT_PREFIX = \"custom.googleapis.com/nuxeo/\";\n+\n+    protected boolean activated;\n+\n+    @Override\n+    public void start(MetricRegistry registry, MetricFilter filter, Set<MetricAttribute> deniedExpansions) {\n+        log.warn(\"Creating Stackdriver metrics reporter\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab0407a0b2fe576497b2e9cf365eab085a5afdd"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxNjAyOQ==", "bodyText": "All reporters state their activity at warning level, this is something that we don't want to miss when doing support.", "url": "https://github.com/nuxeo/nuxeo/pull/4382#discussion_r507516029", "createdAt": "2020-10-19T07:03:20Z", "author": {"login": "bdelbosc"}, "path": "modules/runtime/nuxeo-runtime-metrics/src/main/java/org/nuxeo/runtime/metrics/reporter/StackdriverReporter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.metrics.reporter;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.common.utils.DurationUtils;\n+import org.nuxeo.runtime.metrics.AbstractMetricsReporter;\n+\n+import io.dropwizard.metrics5.MetricAttribute;\n+import io.dropwizard.metrics5.MetricFilter;\n+import io.dropwizard.metrics5.MetricRegistry;\n+import io.opencensus.common.Duration;\n+import io.opencensus.contrib.dropwizard5.DropWizardMetrics;\n+import io.opencensus.exporter.stats.stackdriver.StackdriverStatsConfiguration;\n+import io.opencensus.exporter.stats.stackdriver.StackdriverStatsExporter;\n+import io.opencensus.metrics.Metrics;\n+\n+/**\n+ * Reports metrics to Google Stackdriver.\n+ *\n+ * @since 11.4\n+ */\n+public class StackdriverReporter extends AbstractMetricsReporter {\n+\n+    private static final Logger log = LogManager.getLogger(StackdriverReporter.class);\n+\n+    protected static final String PREFIX_OPTION = \"prefix\";\n+\n+    protected static final String DEFAULT_PREFIX = \"custom.googleapis.com/nuxeo/\";\n+\n+    protected boolean activated;\n+\n+    @Override\n+    public void start(MetricRegistry registry, MetricFilter filter, Set<MetricAttribute> deniedExpansions) {\n+        log.warn(\"Creating Stackdriver metrics reporter\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3OTM1Mg=="}, "originalCommit": {"oid": "8ab0407a0b2fe576497b2e9cf365eab085a5afdd"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTIwNjczOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-metrics/src/main/java/org/nuxeo/runtime/metrics/reporter/StackdriverTraceReporter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo0MToyNVrOHi03dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzoxNDo1NVrOHkNszQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3OTc5Ng==", "bodyText": "warn -> debug", "url": "https://github.com/nuxeo/nuxeo/pull/4382#discussion_r506279796", "createdAt": "2020-10-16T10:41:25Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime-metrics/src/main/java/org/nuxeo/runtime/metrics/reporter/StackdriverTraceReporter.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.metrics.reporter;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.common.utils.DurationUtils;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.metrics.AbstractMetricsReporter;\n+\n+import io.dropwizard.metrics5.MetricAttribute;\n+import io.dropwizard.metrics5.MetricFilter;\n+import io.dropwizard.metrics5.MetricRegistry;\n+import io.opencensus.common.Duration;\n+import io.opencensus.exporter.trace.stackdriver.StackdriverTraceConfiguration;\n+import io.opencensus.exporter.trace.stackdriver.StackdriverTraceExporter;\n+\n+/**\n+ * Reports trace to Google Stackdriver.\n+ *\n+ * @since 11.4\n+ */\n+public class StackdriverTraceReporter extends AbstractMetricsReporter {\n+\n+    private static final Logger log = LogManager.getLogger(StackdriverTraceReporter.class);\n+\n+    public static final String GCP_PROJECT_ID_ENV_PROP = \"GCP_PROJECT_ID\";\n+\n+    public static final String GCP_PROJECT_ID_OPTION_PROP = \"gcpProjectId\";\n+\n+    protected boolean activated;\n+\n+    @Override\n+    public void start(MetricRegistry registry, MetricFilter filter, Set<MetricAttribute> deniedExpansions) {\n+        log.warn(\"Creating Stackdriver trace reporter\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab0407a0b2fe576497b2e9cf365eab085a5afdd"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxNjEzOQ==", "bodyText": "All reporters state their activity at warning level, this is something that we don't want to miss when doing support.", "url": "https://github.com/nuxeo/nuxeo/pull/4382#discussion_r507516139", "createdAt": "2020-10-19T07:03:38Z", "author": {"login": "bdelbosc"}, "path": "modules/runtime/nuxeo-runtime-metrics/src/main/java/org/nuxeo/runtime/metrics/reporter/StackdriverTraceReporter.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.metrics.reporter;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.common.utils.DurationUtils;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.metrics.AbstractMetricsReporter;\n+\n+import io.dropwizard.metrics5.MetricAttribute;\n+import io.dropwizard.metrics5.MetricFilter;\n+import io.dropwizard.metrics5.MetricRegistry;\n+import io.opencensus.common.Duration;\n+import io.opencensus.exporter.trace.stackdriver.StackdriverTraceConfiguration;\n+import io.opencensus.exporter.trace.stackdriver.StackdriverTraceExporter;\n+\n+/**\n+ * Reports trace to Google Stackdriver.\n+ *\n+ * @since 11.4\n+ */\n+public class StackdriverTraceReporter extends AbstractMetricsReporter {\n+\n+    private static final Logger log = LogManager.getLogger(StackdriverTraceReporter.class);\n+\n+    public static final String GCP_PROJECT_ID_ENV_PROP = \"GCP_PROJECT_ID\";\n+\n+    public static final String GCP_PROJECT_ID_OPTION_PROP = \"gcpProjectId\";\n+\n+    protected boolean activated;\n+\n+    @Override\n+    public void start(MetricRegistry registry, MetricFilter filter, Set<MetricAttribute> deniedExpansions) {\n+        log.warn(\"Creating Stackdriver trace reporter\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3OTc5Ng=="}, "originalCommit": {"oid": "8ab0407a0b2fe576497b2e9cf365eab085a5afdd"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczNTI0NQ==", "bodyText": "We'll need to have a discussion about that, there's many things that could go in this category and I don't find it a good argument. At least you should consider info. But it's really not a warning.", "url": "https://github.com/nuxeo/nuxeo/pull/4382#discussion_r507735245", "createdAt": "2020-10-19T13:14:55Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime-metrics/src/main/java/org/nuxeo/runtime/metrics/reporter/StackdriverTraceReporter.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.metrics.reporter;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.common.utils.DurationUtils;\n+import org.nuxeo.runtime.api.Framework;\n+import org.nuxeo.runtime.metrics.AbstractMetricsReporter;\n+\n+import io.dropwizard.metrics5.MetricAttribute;\n+import io.dropwizard.metrics5.MetricFilter;\n+import io.dropwizard.metrics5.MetricRegistry;\n+import io.opencensus.common.Duration;\n+import io.opencensus.exporter.trace.stackdriver.StackdriverTraceConfiguration;\n+import io.opencensus.exporter.trace.stackdriver.StackdriverTraceExporter;\n+\n+/**\n+ * Reports trace to Google Stackdriver.\n+ *\n+ * @since 11.4\n+ */\n+public class StackdriverTraceReporter extends AbstractMetricsReporter {\n+\n+    private static final Logger log = LogManager.getLogger(StackdriverTraceReporter.class);\n+\n+    public static final String GCP_PROJECT_ID_ENV_PROP = \"GCP_PROJECT_ID\";\n+\n+    public static final String GCP_PROJECT_ID_OPTION_PROP = \"gcpProjectId\";\n+\n+    protected boolean activated;\n+\n+    @Override\n+    public void start(MetricRegistry registry, MetricFilter filter, Set<MetricAttribute> deniedExpansions) {\n+        log.warn(\"Creating Stackdriver trace reporter\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3OTc5Ng=="}, "originalCommit": {"oid": "8ab0407a0b2fe576497b2e9cf365eab085a5afdd"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTIyMTczOnYy", "diffSide": "RIGHT", "path": "modules/runtime/nuxeo-runtime-metrics/src/main/java/org/nuxeo/runtime/metrics/reporter/StackdriverReporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo0NDo1MFrOHi1Bvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo0NDo1MFrOHi1Bvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4MjQzMA==", "bodyText": "Maybe put exportInterval in a local variable to avoid having 3 lines hyper indented", "url": "https://github.com/nuxeo/nuxeo/pull/4382#discussion_r506282430", "createdAt": "2020-10-16T10:44:50Z", "author": {"login": "efge"}, "path": "modules/runtime/nuxeo-runtime-metrics/src/main/java/org/nuxeo/runtime/metrics/reporter/StackdriverReporter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * (C) Copyright 2020 Nuxeo (http://nuxeo.com/) and others.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ * Contributors:\n+ *     bdelbosc\n+ */\n+package org.nuxeo.runtime.metrics.reporter;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.nuxeo.common.utils.DurationUtils;\n+import org.nuxeo.runtime.metrics.AbstractMetricsReporter;\n+\n+import io.dropwizard.metrics5.MetricAttribute;\n+import io.dropwizard.metrics5.MetricFilter;\n+import io.dropwizard.metrics5.MetricRegistry;\n+import io.opencensus.common.Duration;\n+import io.opencensus.contrib.dropwizard5.DropWizardMetrics;\n+import io.opencensus.exporter.stats.stackdriver.StackdriverStatsConfiguration;\n+import io.opencensus.exporter.stats.stackdriver.StackdriverStatsExporter;\n+import io.opencensus.metrics.Metrics;\n+\n+/**\n+ * Reports metrics to Google Stackdriver.\n+ *\n+ * @since 11.4\n+ */\n+public class StackdriverReporter extends AbstractMetricsReporter {\n+\n+    private static final Logger log = LogManager.getLogger(StackdriverReporter.class);\n+\n+    protected static final String PREFIX_OPTION = \"prefix\";\n+\n+    protected static final String DEFAULT_PREFIX = \"custom.googleapis.com/nuxeo/\";\n+\n+    protected boolean activated;\n+\n+    @Override\n+    public void start(MetricRegistry registry, MetricFilter filter, Set<MetricAttribute> deniedExpansions) {\n+        log.warn(\"Creating Stackdriver metrics reporter\");\n+        DropWizardMetrics registries = new DropWizardMetrics(Collections.singletonList(registry), filter);\n+        Metrics.getExportComponent().getMetricProducerManager().add(registries);\n+        Duration timeout = Duration.create(\n+                DurationUtils.parsePositive(options.get(TIMEOUT_OPTION), DEFAULT_TIMEOUT).getSeconds(), 0);\n+        String projectId = StackdriverTraceReporter.getGcpProjectId(options);\n+        String prefix = options.getOrDefault(PREFIX_OPTION, DEFAULT_PREFIX);\n+        StackdriverStatsConfiguration configuration = StackdriverStatsConfiguration.builder()\n+                                                                                   .setDeadline(timeout)\n+                                                                                   .setProjectId(projectId)\n+                                                                                   .setMetricNamePrefix(prefix)\n+                                                                                   .setExportInterval(\n+                                                                                           Duration.fromMillis(\n+                                                                                                   getPollInterval()\n+                                                                                                           * 1000))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab0407a0b2fe576497b2e9cf365eab085a5afdd"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4351, "cost": 1, "resetAt": "2021-11-03T18:41:40Z"}}}