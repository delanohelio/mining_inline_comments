{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MzkyODQw", "number": 518, "title": "feat(plugins): Add `@ExtensionConfiguration` annotation, removing `@SpinnakerExtension` and `ConfigurableExtension` interface", "bodyText": "Breaking change:\nBuilding off work @robzienert did to add constructor injection, this simplifies the story around configuring extensions.  We now annotate configuration classes with @ExtensionConfiguration, provide an annotation value that lines up with our config, and things should Just Work.\nThe constructor injection will fail if the constructor contains anything other than an @ExtensionConfiguration class or a PluginsSdkImpl.  I also added the (currently unused) concept of a plugin configuration, if we at some point want a high level config for a plugin.", "createdAt": "2020-02-18T03:04:28Z", "url": "https://github.com/spinnaker/kork/pull/518", "merged": true, "mergeCommit": {"oid": "f6082f7cf7dd3cdbd2e75cccdf6df79f00f7f180"}, "closed": true, "closedAt": "2020-02-18T19:20:21Z", "author": {"login": "jonsie"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFZEhQABqjMwNDU1MzEwNzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFm5HggH2gAyMzc2MzkyODQwOjA1MjgxMzcyODg3Y2VkODRiOTI5ZDI3NWRiZDdiYWY0Mjc0YTc4YzY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06747b5530fcbf3389df82a71ea77ed2bdf5a6e7", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/06747b5530fcbf3389df82a71ea77ed2bdf5a6e7", "committedDate": "2020-02-18T03:03:20Z", "message": "feat(plugins): Add `@ExtensionConfiguration` annotation, removing `@SpinnakerExtension` and `ConfigurableExtension` interface\n\nBuilding off work @rz did to add constructor injection, this simplifies the story around configuring extensions.  We now annotate configuration classes with `@ExtensionConfiguration`, provide an annotation value that lines up with our config, and things should Just Work.  The constructor injection will fail if the constructor contains anything other than an `@ExtensionConfiguration` or a `PluginsSdkImpl`.  I also added the (currently unused) concept of a plugin configuration, if we at some point want a high level config for a plugin."}, "afterCommit": {"oid": "d91d96ae40e76e29bd7319fac10fe93cf49586a6", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/d91d96ae40e76e29bd7319fac10fe93cf49586a6", "committedDate": "2020-02-18T03:08:01Z", "message": "feat(plugins): Add `@ExtensionConfiguration` annotation, removing `@SpinnakerExtension` and `ConfigurableExtension` interface\n\nBuilding off work @rz did to add constructor injection, this simplifies the story around configuring extensions.  We now annotate configuration classes with `@ExtensionConfiguration`, provide an annotation value that lines up with our config, and things should Just Work.  The constructor injection will fail if the constructor contains anything other than an `@ExtensionConfiguration` or a `PluginsSdkImpl`.  I also added the (currently unused) concept of a plugin configuration, if we at some point want a high level config for a plugin."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d91d96ae40e76e29bd7319fac10fe93cf49586a6", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/d91d96ae40e76e29bd7319fac10fe93cf49586a6", "committedDate": "2020-02-18T03:08:01Z", "message": "feat(plugins): Add `@ExtensionConfiguration` annotation, removing `@SpinnakerExtension` and `ConfigurableExtension` interface\n\nBuilding off work @rz did to add constructor injection, this simplifies the story around configuring extensions.  We now annotate configuration classes with `@ExtensionConfiguration`, provide an annotation value that lines up with our config, and things should Just Work.  The constructor injection will fail if the constructor contains anything other than an `@ExtensionConfiguration` or a `PluginsSdkImpl`.  I also added the (currently unused) concept of a plugin configuration, if we at some point want a high level config for a plugin."}, "afterCommit": {"oid": "ac233e74e260e4f7db06b15ac555dc028035d90b", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/ac233e74e260e4f7db06b15ac555dc028035d90b", "committedDate": "2020-02-18T03:14:31Z", "message": "feat(plugins): Add `@ExtensionConfiguration` annotation, removing `@SpinnakerExtension` and `ConfigurableExtension` interface\n\nBuilding off work @rz did to add constructor injection, this simplifies the story around configuring extensions.  We now annotate configuration classes with `@ExtensionConfiguration`, provide an annotation value that lines up with our config, and things should Just Work.  The constructor injection will fail if the constructor contains anything other than an `@ExtensionConfiguration` or a `PluginsSdkImpl`.  I also added the (currently unused) concept of a plugin configuration, if we at some point want a high level config for a plugin."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac233e74e260e4f7db06b15ac555dc028035d90b", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/ac233e74e260e4f7db06b15ac555dc028035d90b", "committedDate": "2020-02-18T03:14:31Z", "message": "feat(plugins): Add `@ExtensionConfiguration` annotation, removing `@SpinnakerExtension` and `ConfigurableExtension` interface\n\nBuilding off work @rz did to add constructor injection, this simplifies the story around configuring extensions.  We now annotate configuration classes with `@ExtensionConfiguration`, provide an annotation value that lines up with our config, and things should Just Work.  The constructor injection will fail if the constructor contains anything other than an `@ExtensionConfiguration` or a `PluginsSdkImpl`.  I also added the (currently unused) concept of a plugin configuration, if we at some point want a high level config for a plugin."}, "afterCommit": {"oid": "6eb96cbf8d4501e44de58e2b01ba32fec958393b", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/6eb96cbf8d4501e44de58e2b01ba32fec958393b", "committedDate": "2020-02-18T03:19:42Z", "message": "feat(plugins): Add `@ExtensionConfiguration` annotation, removing `@SpinnakerExtension` and `ConfigurableExtension` interface\n\nBuilding off work @rz did to add constructor injection, this simplifies the story around configuring extensions.  We now annotate configuration classes with `@ExtensionConfiguration`, provide an annotation value that lines up with our config, and things should Just Work.  The constructor injection will fail if the constructor contains anything other than an `@ExtensionConfiguration` or a `PluginsSdkImpl`.  I also added the (currently unused) concept of a plugin configuration, if we at some point want a high level config for a plugin."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22396d664e5476ce75bbb510a16d96cc1b2128b1", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/22396d664e5476ce75bbb510a16d96cc1b2128b1", "committedDate": "2020-02-18T03:26:03Z", "message": "feat(plugins): Add `@ExtensionConfiguration` annotation, removing `@SpinnakerExtension` and `ConfigurableExtension` interface\n\nBuilding off work @rz did to add constructor injection, this simplifies the story around configuring extensions.  We now annotate configuration classes with `@ExtensionConfiguration`, provide an annotation value that lines up with our config, and things should Just Work.  The constructor injection will fail if the constructor contains anything other than an `@ExtensionConfiguration` or a `PluginsSdkImpl`.  I also added the (currently unused) concept of a plugin configuration, if we at some point want a high level config for a plugin."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6eb96cbf8d4501e44de58e2b01ba32fec958393b", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/6eb96cbf8d4501e44de58e2b01ba32fec958393b", "committedDate": "2020-02-18T03:19:42Z", "message": "feat(plugins): Add `@ExtensionConfiguration` annotation, removing `@SpinnakerExtension` and `ConfigurableExtension` interface\n\nBuilding off work @rz did to add constructor injection, this simplifies the story around configuring extensions.  We now annotate configuration classes with `@ExtensionConfiguration`, provide an annotation value that lines up with our config, and things should Just Work.  The constructor injection will fail if the constructor contains anything other than an `@ExtensionConfiguration` or a `PluginsSdkImpl`.  I also added the (currently unused) concept of a plugin configuration, if we at some point want a high level config for a plugin."}, "afterCommit": {"oid": "22396d664e5476ce75bbb510a16d96cc1b2128b1", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/22396d664e5476ce75bbb510a16d96cc1b2128b1", "committedDate": "2020-02-18T03:26:03Z", "message": "feat(plugins): Add `@ExtensionConfiguration` annotation, removing `@SpinnakerExtension` and `ConfigurableExtension` interface\n\nBuilding off work @rz did to add constructor injection, this simplifies the story around configuring extensions.  We now annotate configuration classes with `@ExtensionConfiguration`, provide an annotation value that lines up with our config, and things should Just Work.  The constructor injection will fail if the constructor contains anything other than an `@ExtensionConfiguration` or a `PluginsSdkImpl`.  I also added the (currently unused) concept of a plugin configuration, if we at some point want a high level config for a plugin."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ee6e7db931b371ac42dcc63de216d18f4b33684", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/8ee6e7db931b371ac42dcc63de216d18f4b33684", "committedDate": "2020-02-18T07:40:18Z", "message": "fix(plugins): Clarify constructor integration exception message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMTI0Mjc4", "url": "https://github.com/spinnaker/kork/pull/518#pullrequestreview-360124278", "createdAt": "2020-02-18T07:48:08Z", "commit": {"oid": "8ee6e7db931b371ac42dcc63de216d18f4b33684"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNzo0ODowOFrOFq4FUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNzo0ODowOFrOFq4FUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMzM3Ng==", "bodyText": "While writing this message I thought - should we have configuration classes implement a config interface?  With that mechanism we would be able to load config classes without requiring the @ExtensionConfiguration annotation.  The benefit being one would not have to think about the YAML config structure when writing a config class if the default member values suffice. Update: We could always add this down the road if we feel it's necessary, after reviewing this I think it's OK as-is for now.", "url": "https://github.com/spinnaker/kork/pull/518#discussion_r380503376", "createdAt": "2020-02-18T07:48:08Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerExtensionFactory.kt", "diffHunk": "@@ -68,10 +63,22 @@ class SpinnakerExtensionFactory(\n     val ctor = candidates.first()\n \n     val paramValues = ctor.parameterTypes.map { paramType ->\n-      if (paramType == PluginSdks::class.java) {\n-        PluginSdksImpl(pluginSdkFactories.map { it.create(extensionClass, pluginWrapper) })\n-      } else {\n-        extensionConfigFactory.provide(extensionClass, pluginWrapper)\n+      when {\n+          paramType == PluginSdks::class.java -> {\n+            PluginSdksImpl(pluginSdkFactories.map { it.create(extensionClass, pluginWrapper) })\n+          }\n+          paramType.isAnnotationPresent(ExtensionConfiguration::class.java) -> {\n+            configFactory.createExtensionConfig(\n+              paramType,\n+              paramType.getAnnotation(ExtensionConfiguration::class.java).value,\n+              pluginWrapper?.descriptor?.pluginId\n+            )\n+          }\n+          else -> {\n+            throw IntegrationException(\"'${extensionClass.simpleName}' extension has unsupported \" +\n+              \"constructor argument class '${paramType.simpleName}'.  Expected argument classes \" +\n+              \"should be annotated with @ExpectedConfiguration or implement PluginSdks.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee6e7db931b371ac42dcc63de216d18f4b33684"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNTQxMjQw", "url": "https://github.com/spinnaker/kork/pull/518#pullrequestreview-360541240", "createdAt": "2020-02-18T17:42:22Z", "commit": {"oid": "8ee6e7db931b371ac42dcc63de216d18f4b33684"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0MjoyMlrOFrME9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0NTo1MlrOFrMMLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMDk2NQ==", "bodyText": "Let's add some docs on what the the value actually is supposed to be. There's currently no indicator that this value is supposed to be the configuration key (path?)", "url": "https://github.com/spinnaker/kork/pull/518#discussion_r380830965", "createdAt": "2020-02-18T17:42:22Z", "author": {"login": "robzienert"}, "path": "kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/ExtensionConfiguration.java", "diffHunk": "@@ -22,20 +22,23 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n-import org.pf4j.Extension;\n+import javax.annotation.Nonnull;\n \n /**\n- * The primary marker annotation for extensions within Spinnaker.\n+ * Denotes that a class provides extension configuration. For example:\n  *\n- * <p>This annotation must be used in lieu of {@link org.pf4j.Extension} as this annotation is used\n- * for critical loading capabilities.\n+ * <pre>{@code\n+ * &#064;ExtensionConfiguration(\"my-extension\")\n+ * public class MyExtensionConfiguration {\n+ *   private String someProperty;\n+ * }\n+ * }</pre>\n  */\n @Alpha\n-@Extension\n @Retention(RetentionPolicy.RUNTIME)\n @Target(ElementType.TYPE)\n @Documented\n-public @interface SpinnakerExtension {\n-  /** The unique canonical id of the extension. */\n-  String id();\n+public @interface ExtensionConfiguration {\n+  @Nonnull\n+  String value();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee6e7db931b371ac42dcc63de216d18f4b33684"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMTk2Nw==", "bodyText": "Personally, I prefer annotations over implementing interfaces / extending classes for use cases like this.", "url": "https://github.com/spinnaker/kork/pull/518#discussion_r380831967", "createdAt": "2020-02-18T17:44:19Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerExtensionFactory.kt", "diffHunk": "@@ -68,10 +63,22 @@ class SpinnakerExtensionFactory(\n     val ctor = candidates.first()\n \n     val paramValues = ctor.parameterTypes.map { paramType ->\n-      if (paramType == PluginSdks::class.java) {\n-        PluginSdksImpl(pluginSdkFactories.map { it.create(extensionClass, pluginWrapper) })\n-      } else {\n-        extensionConfigFactory.provide(extensionClass, pluginWrapper)\n+      when {\n+          paramType == PluginSdks::class.java -> {\n+            PluginSdksImpl(pluginSdkFactories.map { it.create(extensionClass, pluginWrapper) })\n+          }\n+          paramType.isAnnotationPresent(ExtensionConfiguration::class.java) -> {\n+            configFactory.createExtensionConfig(\n+              paramType,\n+              paramType.getAnnotation(ExtensionConfiguration::class.java).value,\n+              pluginWrapper?.descriptor?.pluginId\n+            )\n+          }\n+          else -> {\n+            throw IntegrationException(\"'${extensionClass.simpleName}' extension has unsupported \" +\n+              \"constructor argument class '${paramType.simpleName}'.  Expected argument classes \" +\n+              \"should be annotated with @ExpectedConfiguration or implement PluginSdks.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMzM3Ng=="}, "originalCommit": {"oid": "8ee6e7db931b371ac42dcc63de216d18f4b33684"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMjgxMg==", "bodyText": "Side thought: We should probably do more to normalize these config coordinates (toLowerCase() and maybe even converting from camelCase to snake-case automatically for people. This would obviously be a different PR, just putting a thought out there.", "url": "https://github.com/spinnaker/kork/pull/518#discussion_r380832812", "createdAt": "2020-02-18T17:45:52Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/config/ConfigCoordinates.kt", "diffHunk": "@@ -24,15 +24,31 @@ sealed class ConfigCoordinates {\n /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee6e7db931b371ac42dcc63de216d18f4b33684"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "020610d3e1bef2ce3bc2af2befa481883f25c7bb", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/020610d3e1bef2ce3bc2af2befa481883f25c7bb", "committedDate": "2020-02-18T19:13:26Z", "message": "fix(plugins): Add annotation field docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05281372887ced84b929d275dbd7baf4274a78c6", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/05281372887ced84b929d275dbd7baf4274a78c6", "committedDate": "2020-02-18T19:14:29Z", "message": "Merge branch 'master' into feat-extension-configuration"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1555, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}