{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2OTAxMTQ4", "number": 621, "title": "feat(plugins): Adding server group plugin version pinning", "bodyText": "Depends on: spinnaker/front50#791", "createdAt": "2020-04-21T20:49:27Z", "url": "https://github.com/spinnaker/kork/pull/621", "merged": true, "mergeCommit": {"oid": "ef6a24dc0988c24898a8c1cffba47131665adf3b"}, "closed": true, "closedAt": "2020-04-29T02:01:33Z", "author": {"login": "robzienert"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ6D2IgFqTM5NzY2NjcyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABccMDhQABqjMyODI0MzAzMTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NjY2NzI0", "url": "https://github.com/spinnaker/kork/pull/621#pullrequestreview-397666724", "createdAt": "2020-04-21T20:52:52Z", "commit": {"oid": "6eb400052e1ff88fd521d8734c4de95aea8a5419"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDo1Mjo1MlrOGJX_iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDo1Mjo1MlrOGJX_iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ4MzQ2NA==", "bodyText": "What if we call this Front50PluginInfoReleaseProvider?  Similar to how we have the Front50UpdateRepository.", "url": "https://github.com/spinnaker/kork/pull/621#discussion_r412483464", "createdAt": "2020-04-21T20:52:52Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/release/VersionPinningPluginInfoReleaseProvider.kt", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.update.release\n+\n+import com.netflix.spinnaker.kork.plugins.update.ServerGroupNameResolver\n+import com.netflix.spinnaker.kork.plugins.update.internal.Front50Service\n+import org.pf4j.update.PluginInfo\n+import org.slf4j.LoggerFactory\n+\n+/**\n+ * Attempts to use Front50 to pin plugin versions that are loaded for a particular server group.\n+ *\n+ * When a service starts up, it will load local plugins, reaching out to an UpdateRepository for additional\n+ * plugins to download. The service will then use [releaseProvider] to resolve the plugin versions that should be\n+ * loaded. These resolved plugins are then sent to Front50 for pinning.\n+ *\n+ * If the server group has not been seen before, Front50 will save the service-resolved versions as the pinned versions\n+ * for the server group. If the server group has been seen before, Front50 will return a corrected set of plugin\n+ * versions back to the service, which it will use instead.\n+ *\n+ * Should any part of this process fail, the service-selected versions will be used as a fallback, making this\n+ * functionality optional.\n+ */\n+class VersionPinningPluginInfoReleaseProvider(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb400052e1ff88fd521d8734c4de95aea8a5419"}, "originalPosition": 37}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6eb400052e1ff88fd521d8734c4de95aea8a5419", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/6eb400052e1ff88fd521d8734c4de95aea8a5419", "committedDate": "2020-04-21T20:48:19Z", "message": "feat(plugins): Adding server group plugin version pinning"}, "afterCommit": {"oid": "0a73659207bf9d133fff8402d1b4bdc5386c2fc5", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/0a73659207bf9d133fff8402d1b4bdc5386c2fc5", "committedDate": "2020-04-21T20:58:57Z", "message": "feat(plugins): Adding server group plugin version pinning"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NjcyODM0", "url": "https://github.com/spinnaker/kork/pull/621#pullrequestreview-397672834", "createdAt": "2020-04-21T21:02:23Z", "commit": {"oid": "0a73659207bf9d133fff8402d1b4bdc5386c2fc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTowMjoyM1rOGJYVqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTowMjoyM1rOGJYVqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ4OTEyOA==", "bodyText": "Instead of passing in a PluginInfoReleaseProvider, what if we pass a list of these providers to a resolver class? Then in ExtensionBeanDefinitionRegistryPostProcessor we use said resolver?  Then we have this Front50PluginInfoReleaseProvider enabled behind a config (since we should probably roll it out as optional?).", "url": "https://github.com/spinnaker/kork/pull/621#discussion_r412489128", "createdAt": "2020-04-21T21:02:23Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/release/Front50PluginInfoReleaseProvider.kt", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.update.release\n+\n+import com.netflix.spinnaker.kork.plugins.update.ServerGroupNameResolver\n+import com.netflix.spinnaker.kork.plugins.update.internal.Front50Service\n+import org.pf4j.update.PluginInfo\n+import org.slf4j.LoggerFactory\n+\n+/**\n+ * Attempts to use Front50 to pin plugin versions that are loaded for a particular server group.\n+ *\n+ * When a service starts up, it will load local plugins, reaching out to an UpdateRepository for additional\n+ * plugins to download. The service will then use [releaseProvider] to resolve the plugin versions that should be\n+ * loaded. These resolved plugins are then sent to Front50 for pinning.\n+ *\n+ * If the server group has not been seen before, Front50 will save the service-resolved versions as the pinned versions\n+ * for the server group. If the server group has been seen before, Front50 will return a corrected set of plugin\n+ * versions back to the service, which it will use instead.\n+ *\n+ * Should any part of this process fail, the service-selected versions will be used as a fallback, making this\n+ * functionality optional.\n+ */\n+class Front50PluginInfoReleaseProvider(\n+  private val releaseProvider: PluginInfoReleaseProvider,\n+  private val front50Service: Front50Service,\n+  private val serverGroupNameResolver: ServerGroupNameResolver\n+) : PluginInfoReleaseProvider {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun getReleases(pluginInfo: List<PluginInfo>): Set<PluginInfoRelease> {\n+    val resolvedPlugins = releaseProvider.getReleases(pluginInfo)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a73659207bf9d133fff8402d1b4bdc5386c2fc5"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3Njc4MTAx", "url": "https://github.com/spinnaker/kork/pull/621#pullrequestreview-397678101", "createdAt": "2020-04-21T21:10:36Z", "commit": {"oid": "0a73659207bf9d133fff8402d1b4bdc5386c2fc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMToxMDozNlrOGJYokg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMToxMDozNlrOGJYokg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ5Mzk3MA==", "bodyText": "In what scenario , will we see a drift between what the service is resolving(a plugin version) to and what front50 says ?\nFor the service, source of truth is in the config bundled and that is what gets pull down and loaded.\nDay #1\nInitial plugin v0.0.1 , ASG V001 -- registers with Front50 .\nDay #2\nAutoscale happens . config says v0.0.1 and Front50 says v0.0.1 ( everything is good )\nDay #3\nNew commit happens in the service config and now plugin version moves to v0.0.2 , gets launched into a new ASG V002 and registers with Front50, but operator can decide to stay on v0.0.1.  Something like that..?", "url": "https://github.com/spinnaker/kork/pull/621#discussion_r412493970", "createdAt": "2020-04-21T21:10:36Z", "author": {"login": "srekapalli"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/release/Front50PluginInfoReleaseProvider.kt", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.update.release\n+\n+import com.netflix.spinnaker.kork.plugins.update.ServerGroupNameResolver\n+import com.netflix.spinnaker.kork.plugins.update.internal.Front50Service\n+import org.pf4j.update.PluginInfo\n+import org.slf4j.LoggerFactory\n+\n+/**\n+ * Attempts to use Front50 to pin plugin versions that are loaded for a particular server group.\n+ *\n+ * When a service starts up, it will load local plugins, reaching out to an UpdateRepository for additional\n+ * plugins to download. The service will then use [releaseProvider] to resolve the plugin versions that should be\n+ * loaded. These resolved plugins are then sent to Front50 for pinning.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a73659207bf9d133fff8402d1b4bdc5386c2fc5"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0a73659207bf9d133fff8402d1b4bdc5386c2fc5", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/0a73659207bf9d133fff8402d1b4bdc5386c2fc5", "committedDate": "2020-04-21T20:58:57Z", "message": "feat(plugins): Adding server group plugin version pinning"}, "afterCommit": {"oid": "eb3a8d9bea4cda6fb870dbed597dce31da0840d1", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/eb3a8d9bea4cda6fb870dbed597dce31da0840d1", "committedDate": "2020-04-21T22:42:04Z", "message": "feat(plugins): Adding server group plugin version pinning"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjU0MDU2", "url": "https://github.com/spinnaker/kork/pull/621#pullrequestreview-398654056", "createdAt": "2020-04-22T23:14:19Z", "commit": {"oid": "2c8aa027ddd836aed38a4cf694561b4303b0eeb2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzoxNDoxOVrOGKPplg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzoxNDoxOVrOGKPplg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5NTM1MA==", "bodyText": "Log is a bit misleading.  Probably something like Could not resolve my server group name, skipping front50 plugin version resolution.", "url": "https://github.com/spinnaker/kork/pull/621#discussion_r413395350", "createdAt": "2020-04-22T23:14:19Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/release/Front50PluginInfoReleaseProvider.kt", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.update.release\n+\n+import com.netflix.spinnaker.kork.plugins.update.ServerGroupNameResolver\n+import com.netflix.spinnaker.kork.plugins.update.internal.Front50Service\n+import org.pf4j.update.PluginInfo\n+import org.slf4j.LoggerFactory\n+\n+/**\n+ * Attempts to use Front50 to pin plugin versions that are loaded for a particular server group.\n+ *\n+ * When a service starts up, it will load local plugins, reaching out to an UpdateRepository for additional\n+ * plugins to download. The service will then use [releaseProvider] to resolve the plugin versions that should be\n+ * loaded. These resolved plugins are then sent to Front50 for pinning.\n+ *\n+ * If the server group has not been seen before, Front50 will save the service-resolved versions as the pinned versions\n+ * for the server group. If the server group has been seen before, Front50 will return a corrected set of plugin\n+ * versions back to the service, which it will use instead.\n+ *\n+ * Should any part of this process fail, the service-selected versions will be used as a fallback, making this\n+ * functionality optional.\n+ */\n+class Front50PluginInfoReleaseProvider(\n+  private val releaseProvider: PluginInfoReleaseProvider,\n+  private val front50Service: Front50Service,\n+  private val serverGroupNameResolver: ServerGroupNameResolver,\n+  private val serviceName: String\n+) : PluginInfoReleaseProvider {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun getReleases(pluginInfo: List<PluginInfo>): Set<PluginInfoRelease> {\n+    val resolvedPlugins = releaseProvider.getReleases(pluginInfo)\n+\n+    val serverGroupName = serverGroupNameResolver.get()\n+    if (serverGroupName == null) {\n+      log.warn(\"Could not resolve my server group name: Plugin versioning is disabled\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8aa027ddd836aed38a4cf694561b4303b0eeb2"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjU0MzM1", "url": "https://github.com/spinnaker/kork/pull/621#pullrequestreview-398654335", "createdAt": "2020-04-22T23:15:03Z", "commit": {"oid": "2c8aa027ddd836aed38a4cf694561b4303b0eeb2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzoxNTowM1rOGKPqjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzoxNTowM1rOGKPqjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5NTU5Nw==", "bodyText": "I would include the server group name in this log too.", "url": "https://github.com/spinnaker/kork/pull/621#discussion_r413395597", "createdAt": "2020-04-22T23:15:03Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/release/Front50PluginInfoReleaseProvider.kt", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.update.release\n+\n+import com.netflix.spinnaker.kork.plugins.update.ServerGroupNameResolver\n+import com.netflix.spinnaker.kork.plugins.update.internal.Front50Service\n+import org.pf4j.update.PluginInfo\n+import org.slf4j.LoggerFactory\n+\n+/**\n+ * Attempts to use Front50 to pin plugin versions that are loaded for a particular server group.\n+ *\n+ * When a service starts up, it will load local plugins, reaching out to an UpdateRepository for additional\n+ * plugins to download. The service will then use [releaseProvider] to resolve the plugin versions that should be\n+ * loaded. These resolved plugins are then sent to Front50 for pinning.\n+ *\n+ * If the server group has not been seen before, Front50 will save the service-resolved versions as the pinned versions\n+ * for the server group. If the server group has been seen before, Front50 will return a corrected set of plugin\n+ * versions back to the service, which it will use instead.\n+ *\n+ * Should any part of this process fail, the service-selected versions will be used as a fallback, making this\n+ * functionality optional.\n+ */\n+class Front50PluginInfoReleaseProvider(\n+  private val releaseProvider: PluginInfoReleaseProvider,\n+  private val front50Service: Front50Service,\n+  private val serverGroupNameResolver: ServerGroupNameResolver,\n+  private val serviceName: String\n+) : PluginInfoReleaseProvider {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun getReleases(pluginInfo: List<PluginInfo>): Set<PluginInfoRelease> {\n+    val resolvedPlugins = releaseProvider.getReleases(pluginInfo)\n+\n+    val serverGroupName = serverGroupNameResolver.get()\n+    if (serverGroupName == null) {\n+      log.warn(\"Could not resolve my server group name: Plugin versioning is disabled\")\n+      return resolvedPlugins\n+    }\n+\n+    val response = front50Service.pinVersions(\n+      serviceName,\n+      serverGroupName,\n+      resolvedPlugins.toPinnedVersions()\n+    ).execute()\n+\n+    if (!response.isSuccessful) {\n+      log.error(\n+        \"Failed pinning plugin versions, falling back to locally-sourced plugin versions: {}\",\n+        response.message()\n+      )\n+      return resolvedPlugins\n+    }\n+\n+    response.body()?.updateReleases(resolvedPlugins)\n+\n+    return resolvedPlugins\n+  }\n+\n+  private fun Set<PluginInfoRelease>.toPinnedVersions(): PinnedVersions =\n+    PinnedVersions(map { it.pluginId to it.props.version }.toMap())\n+\n+  private fun PinnedVersions.updateReleases(pluginInfoReleases: Set<PluginInfoRelease>) {\n+    pluginInfoReleases.forEach {\n+      pluginVersions[it.pluginId]?.let { version ->\n+        if (it.props.version != version) {\n+          log.info(\"Aligning plugin '${it.pluginId}' to pinned version: ${it.props.version} -> $version\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8aa027ddd836aed38a4cf694561b4303b0eeb2"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzE2Mjc0", "url": "https://github.com/spinnaker/kork/pull/621#pullrequestreview-398716274", "createdAt": "2020-04-23T02:26:49Z", "commit": {"oid": "2c8aa027ddd836aed38a4cf694561b4303b0eeb2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMjoyNjo0OVrOGKTu6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMjoyNjo0OVrOGKTu6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MjI1MQ==", "bodyText": "We will probably want to disable this PluginInfoReleaseProvider until the front50 side is in place.", "url": "https://github.com/spinnaker/kork/pull/621#discussion_r413462251", "createdAt": "2020-04-23T02:26:49Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/Front50PluginsConfiguration.java", "diffHunk": "@@ -118,6 +134,20 @@ public static UpdateRepository pluginFront50UpdateRepository(\n         front50Service);\n   }\n \n+  @Bean\n+  @Primary\n+  public static PluginInfoReleaseProvider front50PluginReleaseProvider(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c8aa027ddd836aed38a4cf694561b4303b0eeb2"}, "originalPosition": 82}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c8aa027ddd836aed38a4cf694561b4303b0eeb2", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/2c8aa027ddd836aed38a4cf694561b4303b0eeb2", "committedDate": "2020-04-22T22:09:36Z", "message": "Merge branch 'master' into plugin-version-pinning"}, "afterCommit": {"oid": "df1fa852e65afacf85dafc17f2d3ed20eb25b380", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/df1fa852e65afacf85dafc17f2d3ed20eb25b380", "committedDate": "2020-04-27T18:52:26Z", "message": "feat(plugins): Adding server group plugin version pinning"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzk3OTMz", "url": "https://github.com/spinnaker/kork/pull/621#pullrequestreview-401397933", "createdAt": "2020-04-27T23:30:48Z", "commit": {"oid": "df1fa852e65afacf85dafc17f2d3ed20eb25b380"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzozMDo0OVrOGM7_DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzozMDo0OVrOGM7_DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIxODg5Mg==", "bodyText": "Hm.  Just realized we'll need to change props to a var in PluginInfoRelease.  Front50 will also need to return the PF4J PluginInfo.Release object here.  We can't simply swap out the version, because just the version field will change but we'll still end up downloading the artifact set in the url field.", "url": "https://github.com/spinnaker/kork/pull/621#discussion_r416218892", "createdAt": "2020-04-27T23:30:49Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/release/Front50PluginInfoReleaseProvider.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.update.release\n+\n+import com.netflix.spinnaker.kork.plugins.update.ServerGroupLocationResolver\n+import com.netflix.spinnaker.kork.plugins.update.ServerGroupNameResolver\n+import com.netflix.spinnaker.kork.plugins.update.internal.Front50Service\n+import org.pf4j.update.PluginInfo\n+import org.slf4j.LoggerFactory\n+\n+/**\n+ * Attempts to use Front50 to pin plugin versions that are loaded for a particular server group.\n+ *\n+ * When a service starts up, it will load local plugins, reaching out to an UpdateRepository for additional\n+ * plugins to download. The service will then use [releaseProvider] to resolve the plugin versions that should be\n+ * loaded. These resolved plugins are then sent to Front50 for pinning.\n+ *\n+ * If the server group has not been seen before, Front50 will save the service-resolved versions as the pinned versions\n+ * for the server group. If the server group has been seen before, Front50 will return a corrected set of plugin\n+ * versions back to the service, which it will use instead.\n+ *\n+ * Should any part of this process fail, the service-selected versions will be used as a fallback, making this\n+ * functionality optional.\n+ */\n+class Front50PluginInfoReleaseProvider(\n+  private val releaseProvider: PluginInfoReleaseProvider,\n+  private val front50Service: Front50Service,\n+  private val serverGroupNameResolver: ServerGroupNameResolver,\n+  private val serverGroupLocationResolver: ServerGroupLocationResolver,\n+  private val serviceName: String\n+) : PluginInfoReleaseProvider {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun getReleases(pluginInfo: List<PluginInfo>): Set<PluginInfoRelease> {\n+    val resolvedPlugins = releaseProvider.getReleases(pluginInfo)\n+\n+    val serverGroupName = serverGroupNameResolver.get()\n+    if (serverGroupName == null) {\n+      log.warn(\"Could not resolve server group name: Skipping front50 plugin version resolution\")\n+      return resolvedPlugins\n+    }\n+    val serverGroupLocation = serverGroupLocationResolver.get()\n+    if (serverGroupLocation == null) {\n+      log.warn(\"Could not resolve server group location: Skipping front50 plugin version resolution\")\n+      return resolvedPlugins\n+    }\n+\n+    val response = front50Service.pinVersions(\n+      serviceName,\n+      serverGroupLocation,\n+      serverGroupName,\n+      resolvedPlugins.toPinnedVersions()\n+    ).execute()\n+\n+    if (!response.isSuccessful) {\n+      log.error(\n+        \"Failed pinning plugin versions in front50, falling back to locally-sourced plugin versions: {}\",\n+        response.message()\n+      )\n+      return resolvedPlugins\n+    }\n+\n+    response.body()?.updateReleases(resolvedPlugins)\n+\n+    return resolvedPlugins\n+  }\n+\n+  private fun Set<PluginInfoRelease>.toPinnedVersions(): PinnedVersions =\n+    PinnedVersions(map { it.pluginId to it.props.version }.toMap())\n+\n+  private fun PinnedVersions.updateReleases(pluginInfoReleases: Set<PluginInfoRelease>) {\n+    pluginInfoReleases.forEach {\n+      pluginVersions[it.pluginId]?.let { version ->\n+        if (it.props.version != version) {\n+          log.info(\"Aligning plugin '${it.pluginId}' to pinned version: ${it.props.version} -> $version\")\n+          it.props.version = version", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df1fa852e65afacf85dafc17f2d3ed20eb25b380"}, "originalPosition": 90}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df1fa852e65afacf85dafc17f2d3ed20eb25b380", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/df1fa852e65afacf85dafc17f2d3ed20eb25b380", "committedDate": "2020-04-27T18:52:26Z", "message": "feat(plugins): Adding server group plugin version pinning"}, "afterCommit": {"oid": "064baf760a785a62666449d3ad78c5f07d33a698", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/064baf760a785a62666449d3ad78c5f07d33a698", "committedDate": "2020-04-28T00:33:35Z", "message": "feat(plugins): Adding server group plugin version pinning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e3da88493e09ab4344dd56a74b1332b27cee808", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/1e3da88493e09ab4344dd56a74b1332b27cee808", "committedDate": "2020-04-28T22:58:33Z", "message": "feat(plugins): Adding server group plugin version pinning"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "064baf760a785a62666449d3ad78c5f07d33a698", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/064baf760a785a62666449d3ad78c5f07d33a698", "committedDate": "2020-04-28T00:33:35Z", "message": "feat(plugins): Adding server group plugin version pinning"}, "afterCommit": {"oid": "1e3da88493e09ab4344dd56a74b1332b27cee808", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/1e3da88493e09ab4344dd56a74b1332b27cee808", "committedDate": "2020-04-28T22:58:33Z", "message": "feat(plugins): Adding server group plugin version pinning"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1502, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}