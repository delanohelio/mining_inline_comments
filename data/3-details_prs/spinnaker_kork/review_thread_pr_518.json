{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MzkyODQw", "number": 518, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNzo0ODowOFrODgl3mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0NTo1MlrODgysIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTAxNDY3OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerExtensionFactory.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNzo0ODowOFrOFq4FUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0NDoxOVrOFrMI3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMzM3Ng==", "bodyText": "While writing this message I thought - should we have configuration classes implement a config interface?  With that mechanism we would be able to load config classes without requiring the @ExtensionConfiguration annotation.  The benefit being one would not have to think about the YAML config structure when writing a config class if the default member values suffice. Update: We could always add this down the road if we feel it's necessary, after reviewing this I think it's OK as-is for now.", "url": "https://github.com/spinnaker/kork/pull/518#discussion_r380503376", "createdAt": "2020-02-18T07:48:08Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerExtensionFactory.kt", "diffHunk": "@@ -68,10 +63,22 @@ class SpinnakerExtensionFactory(\n     val ctor = candidates.first()\n \n     val paramValues = ctor.parameterTypes.map { paramType ->\n-      if (paramType == PluginSdks::class.java) {\n-        PluginSdksImpl(pluginSdkFactories.map { it.create(extensionClass, pluginWrapper) })\n-      } else {\n-        extensionConfigFactory.provide(extensionClass, pluginWrapper)\n+      when {\n+          paramType == PluginSdks::class.java -> {\n+            PluginSdksImpl(pluginSdkFactories.map { it.create(extensionClass, pluginWrapper) })\n+          }\n+          paramType.isAnnotationPresent(ExtensionConfiguration::class.java) -> {\n+            configFactory.createExtensionConfig(\n+              paramType,\n+              paramType.getAnnotation(ExtensionConfiguration::class.java).value,\n+              pluginWrapper?.descriptor?.pluginId\n+            )\n+          }\n+          else -> {\n+            throw IntegrationException(\"'${extensionClass.simpleName}' extension has unsupported \" +\n+              \"constructor argument class '${paramType.simpleName}'.  Expected argument classes \" +\n+              \"should be annotated with @ExpectedConfiguration or implement PluginSdks.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee6e7db931b371ac42dcc63de216d18f4b33684"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMTk2Nw==", "bodyText": "Personally, I prefer annotations over implementing interfaces / extending classes for use cases like this.", "url": "https://github.com/spinnaker/kork/pull/518#discussion_r380831967", "createdAt": "2020-02-18T17:44:19Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerExtensionFactory.kt", "diffHunk": "@@ -68,10 +63,22 @@ class SpinnakerExtensionFactory(\n     val ctor = candidates.first()\n \n     val paramValues = ctor.parameterTypes.map { paramType ->\n-      if (paramType == PluginSdks::class.java) {\n-        PluginSdksImpl(pluginSdkFactories.map { it.create(extensionClass, pluginWrapper) })\n-      } else {\n-        extensionConfigFactory.provide(extensionClass, pluginWrapper)\n+      when {\n+          paramType == PluginSdks::class.java -> {\n+            PluginSdksImpl(pluginSdkFactories.map { it.create(extensionClass, pluginWrapper) })\n+          }\n+          paramType.isAnnotationPresent(ExtensionConfiguration::class.java) -> {\n+            configFactory.createExtensionConfig(\n+              paramType,\n+              paramType.getAnnotation(ExtensionConfiguration::class.java).value,\n+              pluginWrapper?.descriptor?.pluginId\n+            )\n+          }\n+          else -> {\n+            throw IntegrationException(\"'${extensionClass.simpleName}' extension has unsupported \" +\n+              \"constructor argument class '${paramType.simpleName}'.  Expected argument classes \" +\n+              \"should be annotated with @ExpectedConfiguration or implement PluginSdks.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMzM3Ng=="}, "originalCommit": {"oid": "8ee6e7db931b371ac42dcc63de216d18f4b33684"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzEwMzc1OnYy", "diffSide": "RIGHT", "path": "kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/ExtensionConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0MjoyMlrOFrME9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0MjoyMlrOFrME9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMDk2NQ==", "bodyText": "Let's add some docs on what the the value actually is supposed to be. There's currently no indicator that this value is supposed to be the configuration key (path?)", "url": "https://github.com/spinnaker/kork/pull/518#discussion_r380830965", "createdAt": "2020-02-18T17:42:22Z", "author": {"login": "robzienert"}, "path": "kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/ExtensionConfiguration.java", "diffHunk": "@@ -22,20 +22,23 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n-import org.pf4j.Extension;\n+import javax.annotation.Nonnull;\n \n /**\n- * The primary marker annotation for extensions within Spinnaker.\n+ * Denotes that a class provides extension configuration. For example:\n  *\n- * <p>This annotation must be used in lieu of {@link org.pf4j.Extension} as this annotation is used\n- * for critical loading capabilities.\n+ * <pre>{@code\n+ * &#064;ExtensionConfiguration(\"my-extension\")\n+ * public class MyExtensionConfiguration {\n+ *   private String someProperty;\n+ * }\n+ * }</pre>\n  */\n @Alpha\n-@Extension\n @Retention(RetentionPolicy.RUNTIME)\n @Target(ElementType.TYPE)\n @Documented\n-public @interface SpinnakerExtension {\n-  /** The unique canonical id of the extension. */\n-  String id();\n+public @interface ExtensionConfiguration {\n+  @Nonnull\n+  String value();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee6e7db931b371ac42dcc63de216d18f4b33684"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzExNTIxOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/config/ConfigCoordinates.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0NTo1MlrOFrMMLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOToxMjozNFrOFrO8uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMjgxMg==", "bodyText": "Side thought: We should probably do more to normalize these config coordinates (toLowerCase() and maybe even converting from camelCase to snake-case automatically for people. This would obviously be a different PR, just putting a thought out there.", "url": "https://github.com/spinnaker/kork/pull/518#discussion_r380832812", "createdAt": "2020-02-18T17:45:52Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/config/ConfigCoordinates.kt", "diffHunk": "@@ -24,15 +24,31 @@ sealed class ConfigCoordinates {\n /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee6e7db931b371ac42dcc63de216d18f4b33684"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg3ODAwOQ==", "bodyText": "Good idea.", "url": "https://github.com/spinnaker/kork/pull/518#discussion_r380878009", "createdAt": "2020-02-18T19:12:34Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/config/ConfigCoordinates.kt", "diffHunk": "@@ -24,15 +24,31 @@ sealed class ConfigCoordinates {\n /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMjgxMg=="}, "originalCommit": {"oid": "8ee6e7db931b371ac42dcc63de216d18f4b33684"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3587, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}