{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4ODA3NzEy", "number": 819, "title": "fix(misc): Skip header check if the endpoint is not matching the prov\u2026", "bodyText": "Skip header check if the endpoint is not matching the supplied pattern.", "createdAt": "2020-11-10T22:41:59Z", "url": "https://github.com/spinnaker/kork/pull/819", "merged": true, "mergeCommit": {"oid": "149c137d9014825a441960442880e32c2dae3e9d"}, "closed": true, "closedAt": "2020-11-13T17:49:10Z", "author": {"login": "srekapalli"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbiztzgFqTUyODQ1NjY2OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdb4ZFCAFqTUyOTQ2MDczMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NDU2NjY4", "url": "https://github.com/spinnaker/kork/pull/819#pullrequestreview-528456668", "createdAt": "2020-11-11T19:06:27Z", "commit": {"oid": "d90ac3b642befbb53fbc6160f7e9adb6cac8b3f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOTowNjoyN1rOHxah2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOTowNjoyN1rOHxah2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3NjkyMA==", "bodyText": "Small nitpick:  This tripped me up.  Instead of creating a member variable headerCheckPattern and assigning the value from okHttpMetricsInterceptorProperties I think it's fine to just call okHttpMetricsInterceptorProperties.getHeaderCheckRegExPattern() where it used below.", "url": "https://github.com/spinnaker/kork/pull/819#discussion_r521576920", "createdAt": "2020-11-11T19:06:27Z", "author": {"login": "jonsie"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/MetricsInterceptor.java", "diffHunk": "@@ -27,12 +29,16 @@\n  */\n class MetricsInterceptor {\n   private final Provider<Registry> registry;\n-  private final boolean skipHeaderCheck;\n+  private final OkHttpMetricsInterceptorProperties okHttpMetricsInterceptorProperties;\n   private final Logger log;\n+  private final Pattern headerCheckPattern;\n \n-  MetricsInterceptor(Provider<Registry> registry, boolean skipHeaderCheck) {\n+  MetricsInterceptor(\n+      Provider<Registry> registry,\n+      OkHttpMetricsInterceptorProperties okHttpMetricsInterceptorProperties) {\n     this.registry = registry;\n-    this.skipHeaderCheck = skipHeaderCheck;\n+    this.okHttpMetricsInterceptorProperties = okHttpMetricsInterceptorProperties;\n+    this.headerCheckPattern = okHttpMetricsInterceptorProperties.getHeaderCheckRegExPattern();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d90ac3b642befbb53fbc6160f7e9adb6cac8b3f9"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NTQ0MjM1", "url": "https://github.com/spinnaker/kork/pull/819#pullrequestreview-528544235", "createdAt": "2020-11-11T21:22:41Z", "commit": {"oid": "d90ac3b642befbb53fbc6160f7e9adb6cac8b3f9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMToyMjo0MVrOHxexFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMToyNjoxMVrOHxe3WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0NjM1OQ==", "bodyText": "I think the properties class could keep track of the compiled pattern.", "url": "https://github.com/spinnaker/kork/pull/819#discussion_r521646359", "createdAt": "2020-11-11T21:22:41Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/MetricsInterceptor.java", "diffHunk": "@@ -27,12 +29,16 @@\n  */\n class MetricsInterceptor {\n   private final Provider<Registry> registry;\n-  private final boolean skipHeaderCheck;\n+  private final OkHttpMetricsInterceptorProperties okHttpMetricsInterceptorProperties;\n   private final Logger log;\n+  private final Pattern headerCheckPattern;\n \n-  MetricsInterceptor(Provider<Registry> registry, boolean skipHeaderCheck) {\n+  MetricsInterceptor(\n+      Provider<Registry> registry,\n+      OkHttpMetricsInterceptorProperties okHttpMetricsInterceptorProperties) {\n     this.registry = registry;\n-    this.skipHeaderCheck = skipHeaderCheck;\n+    this.okHttpMetricsInterceptorProperties = okHttpMetricsInterceptorProperties;\n+    this.headerCheckPattern = okHttpMetricsInterceptorProperties.getHeaderCheckRegExPattern();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3NjkyMA=="}, "originalCommit": {"oid": "d90ac3b642befbb53fbc6160f7e9adb6cac8b3f9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0Nzk2MA==", "bodyText": "String headerCheckRegex or String headerCheckPattern imo (looking at ~/.spinnaker/* we have more instances of \"*Pattern\" for regexes).\nNot sure why we have public instance variables and getters/setters?", "url": "https://github.com/spinnaker/kork/pull/819#discussion_r521647960", "createdAt": "2020-11-11T21:26:11Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/groovy/com/netflix/spinnaker/config/OkHttpMetricsInterceptorProperties.java", "diffHunk": "@@ -15,18 +15,42 @@\n  */\n package com.netflix.spinnaker.config;\n \n+import java.util.regex.Pattern;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.util.StringUtils;\n \n @ConfigurationProperties(\"ok-http-client.interceptor\")\n public class OkHttpMetricsInterceptorProperties {\n \n+  /** If set to true, will skip header check completely. */\n   public boolean skipHeaderCheck = false;\n \n+  /**\n+   * If Skip header check is set to false and regex is set, header check will be skipped for all\n+   * endpoints except for the ones that match the provided regex.\n+   */\n+  public String headerCheckRegEx = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d90ac3b642befbb53fbc6160f7e9adb6cac8b3f9"}, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d90ac3b642befbb53fbc6160f7e9adb6cac8b3f9", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/d90ac3b642befbb53fbc6160f7e9adb6cac8b3f9", "committedDate": "2020-11-10T22:32:01Z", "message": "fix(misc): Skip header check if the endpoint is not matching the provided regex"}, "afterCommit": {"oid": "e96263a9f5ac7bcab5d415c6594b9749d05b5368", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/e96263a9f5ac7bcab5d415c6594b9749d05b5368", "committedDate": "2020-11-11T22:49:45Z", "message": "fix(misc): Skip header check if the endpoint is not matching the provided regex"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "347d529f96bf3ecf29741de7cb23e74e3762ed86", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/347d529f96bf3ecf29741de7cb23e74e3762ed86", "committedDate": "2020-11-12T20:08:30Z", "message": "fix(misc): Skip header check if the endpoint is not matching the provided regex"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e96263a9f5ac7bcab5d415c6594b9749d05b5368", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/e96263a9f5ac7bcab5d415c6594b9749d05b5368", "committedDate": "2020-11-11T22:49:45Z", "message": "fix(misc): Skip header check if the endpoint is not matching the provided regex"}, "afterCommit": {"oid": "347d529f96bf3ecf29741de7cb23e74e3762ed86", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/347d529f96bf3ecf29741de7cb23e74e3762ed86", "committedDate": "2020-11-12T20:08:30Z", "message": "fix(misc): Skip header check if the endpoint is not matching the provided regex"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NDYwNzMx", "url": "https://github.com/spinnaker/kork/pull/819#pullrequestreview-529460731", "createdAt": "2020-11-12T20:15:16Z", "commit": {"oid": "347d529f96bf3ecf29741de7cb23e74e3762ed86"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1427, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}