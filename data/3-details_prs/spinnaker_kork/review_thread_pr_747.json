{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NTYwOTE3", "number": 747, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMzo0Mjo1NVrOEY4Y4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjozODo0MlrOEaMWzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTI1MTUzOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/remote/RemotePluginConfigChangedListener.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMzo0Mjo1NVrOHBYyEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMzo0Mjo1NVrOHBYyEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIxNjY1Nw==", "bodyText": "Previous change added the config here - this is resolved internally and used to be build up the client.", "url": "https://github.com/spinnaker/kork/pull/747#discussion_r471216657", "createdAt": "2020-08-17T03:42:55Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/remote/RemotePluginConfigChangedListener.kt", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.remote\n+\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import com.netflix.spinnaker.config.DefaultServiceEndpoint\n+import com.netflix.spinnaker.config.okhttp3.OkHttpClientProvider\n+import com.netflix.spinnaker.kork.annotations.Beta\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import com.netflix.spinnaker.kork.plugins.events.RemotePluginConfigChanged\n+import com.netflix.spinnaker.kork.plugins.events.RemotePluginConfigChanged.Status.DISABLED\n+import com.netflix.spinnaker.kork.plugins.events.RemotePluginConfigChanged.Status.ENABLED\n+import com.netflix.spinnaker.kork.plugins.events.RemotePluginConfigChanged.Status.UPDATED\n+import com.netflix.spinnaker.kork.plugins.remote.transport.OkHttpRemoteExtensionTransport\n+import org.slf4j.LoggerFactory\n+import org.springframework.context.ApplicationListener\n+\n+@Beta\n+class RemotePluginConfigChangedListener(\n+  private val objectMapper: ObjectMapper,\n+  private val okHttpClientProvider: OkHttpClientProvider,\n+  private val remotePluginsCache: RemotePluginsCache\n+) : ApplicationListener<RemotePluginConfigChanged> {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun onApplicationEvent(event: RemotePluginConfigChanged) {\n+    when (event.status) {\n+      ENABLED -> put(event)\n+      UPDATED -> put(event)\n+      DISABLED -> remotePluginsCache.remove(event.pluginId)\n+    }\n+  }\n+\n+  private fun put(event: RemotePluginConfigChanged) {\n+    val remoteExtensions: MutableSet<RemoteExtension> = mutableSetOf()\n+\n+    event.remoteExtensionConfigs.forEach { remoteExtensionConfig ->\n+\n+      // TODO(jonsie): Support enabling/disabling transports in the config.\n+      // Configure HTTP if it is available since it is the only configurable transport right now.\n+      val remoteExtensionTransport = if (remoteExtensionConfig.transport.http.url.isNotEmpty()) {\n+        val client = okHttpClientProvider.getClient(\n+          DefaultServiceEndpoint(\n+            remoteExtensionConfig.id,\n+            remoteExtensionConfig.transport.http.url,\n+            remoteExtensionConfig.transport.http.config", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c03e7f060d3c1fa30685475f3d0ad68897608f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTI2NDIyOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/remote/transport/OkHttpRemoteExtensionTransport.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMzo1MTo0NFrOHBY46w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTo1Nzo0M1rOHB8PCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIxODQxMQ==", "bodyText": "We'll need to register subtypes in services for this to work.", "url": "https://github.com/spinnaker/kork/pull/747#discussion_r471218411", "createdAt": "2020-08-17T03:51:44Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/remote/transport/OkHttpRemoteExtensionTransport.kt", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.remote.transport\n+\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import com.netflix.spinnaker.security.AuthenticatedRequest\n+import okhttp3.MediaType\n+import okhttp3.OkHttpClient\n+import okhttp3.Request\n+import okhttp3.RequestBody\n+\n+class OkHttpRemoteExtensionTransport(\n+  private val objectMapper: ObjectMapper,\n+  private val client: OkHttpClient,\n+  private val url: String\n+) : RemoteExtensionTransport {\n+\n+  override fun invoke(remoteExtensionPayload: RemoteExtensionPayload) {\n+    AuthenticatedRequest.propagate {\n+      val request = Request.Builder()\n+        .url(url)\n+        .post(\n+          RequestBody.create(\n+            MediaType.parse(\"application/json\"),\n+            objectMapper.writeValueAsString(remoteExtensionPayload)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c03e7f060d3c1fa30685475f3d0ad68897608f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5MTM0Mg==", "bodyText": "Downstream of what?", "url": "https://github.com/spinnaker/kork/pull/747#discussion_r471791342", "createdAt": "2020-08-17T21:42:52Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/remote/transport/OkHttpRemoteExtensionTransport.kt", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.remote.transport\n+\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import com.netflix.spinnaker.security.AuthenticatedRequest\n+import okhttp3.MediaType\n+import okhttp3.OkHttpClient\n+import okhttp3.Request\n+import okhttp3.RequestBody\n+\n+class OkHttpRemoteExtensionTransport(\n+  private val objectMapper: ObjectMapper,\n+  private val client: OkHttpClient,\n+  private val url: String\n+) : RemoteExtensionTransport {\n+\n+  override fun invoke(remoteExtensionPayload: RemoteExtensionPayload) {\n+    AuthenticatedRequest.propagate {\n+      val request = Request.Builder()\n+        .url(url)\n+        .post(\n+          RequestBody.create(\n+            MediaType.parse(\"application/json\"),\n+            objectMapper.writeValueAsString(remoteExtensionPayload)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIxODQxMQ=="}, "originalCommit": {"oid": "12c03e7f060d3c1fa30685475f3d0ad68897608f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5NzUxNQ==", "bodyText": "Really just in services, I'm overusing the term downstream (since kork just runs in a service, it's not really downstream of anything).  \ud83e\udd37\u200d\u2642\ufe0f", "url": "https://github.com/spinnaker/kork/pull/747#discussion_r471797515", "createdAt": "2020-08-17T21:57:43Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/remote/transport/OkHttpRemoteExtensionTransport.kt", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.remote.transport\n+\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import com.netflix.spinnaker.security.AuthenticatedRequest\n+import okhttp3.MediaType\n+import okhttp3.OkHttpClient\n+import okhttp3.Request\n+import okhttp3.RequestBody\n+\n+class OkHttpRemoteExtensionTransport(\n+  private val objectMapper: ObjectMapper,\n+  private val client: OkHttpClient,\n+  private val url: String\n+) : RemoteExtensionTransport {\n+\n+  override fun invoke(remoteExtensionPayload: RemoteExtensionPayload) {\n+    AuthenticatedRequest.propagate {\n+      val request = Request.Builder()\n+        .url(url)\n+        .post(\n+          RequestBody.create(\n+            MediaType.parse(\"application/json\"),\n+            objectMapper.writeValueAsString(remoteExtensionPayload)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIxODQxMQ=="}, "originalCommit": {"oid": "12c03e7f060d3c1fa30685475f3d0ad68897608f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTI4MDIwOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/remote/transport/OkHttpRemoteExtensionTransport.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNDowMzo0MFrOHBZBzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNDowMzo0MFrOHBZBzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyMDY4NA==", "bodyText": "I would expect the response code to be a 202 but I didn't want to be strict about it - so long as the remote extension uses the provided callback (which will either be another PR or part of this one) we are \ud83d\udc4d .", "url": "https://github.com/spinnaker/kork/pull/747#discussion_r471220684", "createdAt": "2020-08-17T04:03:40Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/remote/transport/OkHttpRemoteExtensionTransport.kt", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.remote.transport\n+\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import com.netflix.spinnaker.security.AuthenticatedRequest\n+import okhttp3.MediaType\n+import okhttp3.OkHttpClient\n+import okhttp3.Request\n+import okhttp3.RequestBody\n+\n+class OkHttpRemoteExtensionTransport(\n+  private val objectMapper: ObjectMapper,\n+  private val client: OkHttpClient,\n+  private val url: String\n+) : RemoteExtensionTransport {\n+\n+  override fun invoke(remoteExtensionPayload: RemoteExtensionPayload) {\n+    AuthenticatedRequest.propagate {\n+      val request = Request.Builder()\n+        .url(url)\n+        .post(\n+          RequestBody.create(\n+            MediaType.parse(\"application/json\"),\n+            objectMapper.writeValueAsString(remoteExtensionPayload)\n+          )\n+        )\n+        .build()\n+\n+      val response = client.newCall(request).execute()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12c03e7f060d3c1fa30685475f3d0ad68897608f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODkyMzA1OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/events/RemotePluginCacheRefresh.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTozODozN1rOHB7v-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTozODozN1rOHB7v-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc4OTU2Mg==", "bodyText": "downstream of what?", "url": "https://github.com/spinnaker/kork/pull/747#discussion_r471789562", "createdAt": "2020-08-17T21:38:37Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/events/RemotePluginCacheRefresh.kt", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.netflix.spinnaker.kork.plugins.events\n+\n+import com.netflix.spinnaker.kork.plugins.remote.RemotePluginsCache\n+import org.springframework.context.ApplicationEvent\n+\n+/**\n+ * A Spring [ApplicationEvent] that is emitted when the remote plugins cache is changed.\n+ *\n+ * The remote plugins cache is the cache of resolved remote plugins with remote transport\n+ * clients.  This can optionally be used in downstream Spinnaker services to ensure a remote", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7359eb9333f606d03b89a464a6f70d71c7483af7"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODkzMDM3OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/remote/RemotePluginConfigChangedListener.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTo0MToxOFrOHB70XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTo0MToxOFrOHB70XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5MDY4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                log.debug(\"Remote plugin '{}' added to cache due to '{}' event\", event.pluginId, event.status.toString())\n          \n          \n            \n                log.debug(\"Remote plugin '{}' added to cache due to '{}' event\", event.pluginId, event.status)\n          \n      \n    \n    \n  \n\nnit: toString() will be called for you.", "url": "https://github.com/spinnaker/kork/pull/747#discussion_r471790685", "createdAt": "2020-08-17T21:41:18Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/remote/RemotePluginConfigChangedListener.kt", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.remote\n+\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import com.netflix.spinnaker.config.DefaultServiceEndpoint\n+import com.netflix.spinnaker.config.okhttp3.OkHttpClientProvider\n+import com.netflix.spinnaker.kork.annotations.Beta\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import com.netflix.spinnaker.kork.plugins.events.RemotePluginConfigChanged\n+import com.netflix.spinnaker.kork.plugins.events.RemotePluginConfigChanged.Status.DISABLED\n+import com.netflix.spinnaker.kork.plugins.events.RemotePluginConfigChanged.Status.ENABLED\n+import com.netflix.spinnaker.kork.plugins.events.RemotePluginConfigChanged.Status.UPDATED\n+import com.netflix.spinnaker.kork.plugins.remote.transport.OkHttpRemoteExtensionTransport\n+import org.slf4j.LoggerFactory\n+import org.springframework.context.ApplicationListener\n+\n+@Beta\n+class RemotePluginConfigChangedListener(\n+  private val objectMapper: ObjectMapper,\n+  private val okHttpClientProvider: OkHttpClientProvider,\n+  private val remotePluginsCache: RemotePluginsCache\n+) : ApplicationListener<RemotePluginConfigChanged> {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun onApplicationEvent(event: RemotePluginConfigChanged) {\n+    when (event.status) {\n+      ENABLED -> put(event)\n+      UPDATED -> put(event)\n+      DISABLED -> remotePluginsCache.remove(event.pluginId)\n+    }\n+  }\n+\n+  private fun put(event: RemotePluginConfigChanged) {\n+    val remoteExtensions: MutableSet<RemoteExtension> = mutableSetOf()\n+\n+    event.remoteExtensionConfigs.forEach { remoteExtensionConfig ->\n+\n+      // TODO(jonsie): Support enabling/disabling transports in the config.\n+      // Configure HTTP if it is available since it is the only configurable transport right now.\n+      val remoteExtensionTransport = if (remoteExtensionConfig.transport.http.url.isNotEmpty()) {\n+        val client = okHttpClientProvider.getClient(\n+          DefaultServiceEndpoint(\n+            remoteExtensionConfig.id,\n+            remoteExtensionConfig.transport.http.url,\n+            remoteExtensionConfig.transport.http.config\n+          )\n+        )\n+        OkHttpRemoteExtensionTransport(\n+          objectMapper,\n+          client,\n+          remoteExtensionConfig.transport.http.url\n+        )\n+      } else {\n+        throw RemoteExtensionTransportConfigurationException(event.pluginId)\n+      }\n+\n+      remoteExtensions.add(\n+        RemoteExtension(\n+          remoteExtensionConfig.id,\n+          remoteExtensionConfig.type,\n+          remoteExtensionConfig.config ?: mapOf(),\n+          remoteExtensionTransport\n+        )\n+      )\n+    }\n+\n+    val remotePlugin = RemotePlugin(event.pluginId, event.version, remoteExtensions)\n+    remotePluginsCache.put(remotePlugin)\n+    log.debug(\"Remote plugin '{}' added to cache due to '{}' event\", event.pluginId, event.status.toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7359eb9333f606d03b89a464a6f70d71c7483af7"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODkzNjE3OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/remote/transport/RemoteExtensionTransport.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTo0MzozNVrOHB74CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMTo0MzozNVrOHB74CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc5MTYyNA==", "bodyText": "nit: I'd move this out to a separate file.", "url": "https://github.com/spinnaker/kork/pull/747#discussion_r471791624", "createdAt": "2020-08-17T21:43:35Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/remote/transport/RemoteExtensionTransport.kt", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.remote.transport\n+\n+import com.netflix.spinnaker.kork.annotations.Beta\n+\n+/**\n+ * The transport on which to address the remote extension.\n+ */\n+@Beta\n+interface RemoteExtensionTransport {\n+\n+  /**\n+   * Invoke the remote extension.  The remote extension is an async process with a callback, so we\n+   * do not wait for a particular response here - but the underlying [RemoteExtensionTransport]\n+   * implementation may throw an exception if something unexpected, like a connection error, occurs.\n+   */\n+  fun invoke(remoteExtensionPayload: RemoteExtensionPayload)\n+}\n+\n+/**\n+ * Marker interface for the payload for the remote extension - implemented at various extension\n+ * points throughout the services.\n+ */\n+@Beta\n+interface RemoteExtensionPayload", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7359eb9333f606d03b89a464a6f70d71c7483af7"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTAwODc3OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/remote/RemotePluginsCache.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjozODo0MlrOHDdxLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjo1MzowMlrOHDebDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5NTUwMA==", "bodyText": "Food for thought:\nIf a service already has pluginId@0.1.0 and then gets a changed event for pluginId@0.2.0, we'll just overwrite the cache object and it gets dereferenced. There's nothing preventing a service developer from having assigned the plugin to some other class, which could lead to problems and they'd be kinda hard to trace.\nTwo ways I see this going:\n\nWe add remote plugin lifecycles, which allow us to stop() a remote plugin (basically set a flag that any access to it will cause IllegalStateException) when replacing it in the cache.\nMake the remote plugin cache put operations more of an upsert, where the existing RemotePlugin object is updated with new values and refreshed when changes are made.\n\nI kinda like the first option more at this moment.", "url": "https://github.com/spinnaker/kork/pull/747#discussion_r473395500", "createdAt": "2020-08-19T22:38:42Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/remote/RemotePluginsCache.kt", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.remote\n+\n+import com.github.benmanes.caffeine.cache.Cache\n+import com.github.benmanes.caffeine.cache.Caffeine\n+import com.netflix.spinnaker.kork.plugins.events.RemotePluginCacheRefresh\n+import org.slf4j.LoggerFactory\n+import org.springframework.context.ApplicationEventPublisher\n+\n+/**\n+ * Provides a read/write remote plugin cache used by either the [RemotePluginConfigChangedListener]\n+ * to add plugins based on configuration changes or the [RemotePluginsProvider] to retrieve plugins\n+ * for use in services.\n+ */\n+class RemotePluginsCache(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e4c94b53864f03168109c20402d76106066f7b8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQwNjIyMg==", "bodyText": "Yep, I've been mulling this over but haven't landed on a solution yet.  I think this can merge in for now and continue forward, but I agree - this is something I think I will need to address.", "url": "https://github.com/spinnaker/kork/pull/747#discussion_r473406222", "createdAt": "2020-08-19T22:53:02Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/remote/RemotePluginsCache.kt", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.remote\n+\n+import com.github.benmanes.caffeine.cache.Cache\n+import com.github.benmanes.caffeine.cache.Caffeine\n+import com.netflix.spinnaker.kork.plugins.events.RemotePluginCacheRefresh\n+import org.slf4j.LoggerFactory\n+import org.springframework.context.ApplicationEventPublisher\n+\n+/**\n+ * Provides a read/write remote plugin cache used by either the [RemotePluginConfigChangedListener]\n+ * to add plugins based on configuration changes or the [RemotePluginsProvider] to retrieve plugins\n+ * for use in services.\n+ */\n+class RemotePluginsCache(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5NTUwMA=="}, "originalCommit": {"oid": "0e4c94b53864f03168109c20402d76106066f7b8"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3474, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}