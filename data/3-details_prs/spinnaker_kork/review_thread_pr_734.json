{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNjU4NjEw", "number": 734, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0NTowNVrOEVlqzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMTowNDoxN1rOEVoP9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDcyNzE5OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/update/release/remote/RemotePluginInfoReleaseCacheTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0NTowNVrOG8bvCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0NTowNVrOG8bvCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMjE1Mw==", "bodyText": "Test is a WIP.", "url": "https://github.com/spinnaker/kork/pull/734#discussion_r466022153", "createdAt": "2020-08-05T21:45:05Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/update/release/remote/RemotePluginInfoReleaseCacheTest.kt", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.update.release.remote\n+\n+import com.netflix.spinnaker.config.PluginsConfigurationProperties\n+import com.netflix.spinnaker.kork.dynamicconfig.DynamicConfigService\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginManager\n+import com.netflix.spinnaker.kork.plugins.SpringPluginStatusProvider\n+import com.netflix.spinnaker.kork.plugins.SpringStrictPluginLoaderStatusProvider\n+import com.netflix.spinnaker.kork.plugins.update.SpinnakerUpdateManager\n+import com.netflix.spinnaker.kork.plugins.update.internal.SpinnakerPluginInfo\n+import com.netflix.spinnaker.kork.plugins.update.release.PluginInfoRelease\n+import com.netflix.spinnaker.kork.plugins.update.release.plugin1\n+import com.netflix.spinnaker.kork.plugins.update.release.plugin2\n+import com.netflix.spinnaker.kork.plugins.update.release.plugin3\n+import com.netflix.spinnaker.kork.plugins.update.release.pluginNoReleases\n+import com.netflix.spinnaker.kork.plugins.update.release.provider.AggregatePluginInfoReleaseProvider\n+import com.netflix.spinnaker.kork.plugins.update.release.source.PluginInfoReleaseSource\n+import dev.minutest.junit.JUnit5Minutests\n+import dev.minutest.rootContext\n+import io.mockk.mockk\n+import org.springframework.context.ApplicationEventPublisher\n+\n+class RemotePluginInfoReleaseCacheTest : JUnit5Minutests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81efaf9eed451f0259c32bf710dece96073d56f1"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDcyODAzOnYy", "diffSide": "RIGHT", "path": "kork-api/src/main/java/com/netflix/spinnaker/kork/api/plugins/remote/RemoteExtension.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0NToyNVrOG8bvhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0NToyNVrOG8bvhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMjI3Nw==", "bodyText": "If we think it makes sense to move this here I will make the necessary front50 update.", "url": "https://github.com/spinnaker/kork/pull/734#discussion_r466022277", "createdAt": "2020-08-05T21:45:25Z", "author": {"login": "jonsie"}, "path": "kork-api/src/main/java/com/netflix/spinnaker/kork/api/plugins/remote/RemoteExtension.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.api.plugins.remote;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+/**\n+ * A Spinnaker plugin's remote extension configuration.\n+ *\n+ * <p>This model is used by Spinnaker to determine which extension points and services require\n+ * remote extension point configuration.\n+ *\n+ * <p>The plugin release {@link SpinnakerPluginInfo.Release#requires} field is used to inform\n+ * Spinnaker which service to use in configuring the extension point {@link #type} and additionally\n+ * if the remote extension is compatible with the running version of the Spinnaker service.\n+ */\n+@Data\n+@NoArgsConstructor\n+public class RemoteExtension {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81efaf9eed451f0259c32bf710dece96073d56f1"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDczMDEwOnYy", "diffSide": "RIGHT", "path": "kork-api/src/main/java/com/netflix/spinnaker/kork/api/plugins/remote/RemoteExtension.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0NjowN1rOG8bwwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0NjowN1rOG8bwwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMjU5Mw==", "bodyText": "After thinking it over and based on some feedback from @robzienert I think it may make more sense to leave this untyped and then allow the specific service (Orca, Keel, etc) to map it to a specific remote extension config object.  This gives us more flexibility.", "url": "https://github.com/spinnaker/kork/pull/734#discussion_r466022593", "createdAt": "2020-08-05T21:46:07Z", "author": {"login": "jonsie"}, "path": "kork-api/src/main/java/com/netflix/spinnaker/kork/api/plugins/remote/RemoteExtension.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.api.plugins.remote;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+/**\n+ * A Spinnaker plugin's remote extension configuration.\n+ *\n+ * <p>This model is used by Spinnaker to determine which extension points and services require\n+ * remote extension point configuration.\n+ *\n+ * <p>The plugin release {@link SpinnakerPluginInfo.Release#requires} field is used to inform\n+ * Spinnaker which service to use in configuring the extension point {@link #type} and additionally\n+ * if the remote extension is compatible with the running version of the Spinnaker service.\n+ */\n+@Data\n+@NoArgsConstructor\n+public class RemoteExtension {\n+\n+  /**\n+   * The remote extension type. The remote extension is configured in the service that implements\n+   * this extension type.\n+   */\n+  @Nonnull private String type;\n+\n+  /** Identifier of the remote extension. Used for tracing. */\n+  @Nonnull private String id;\n+\n+  /**\n+   * Outbound transport configuration for the remote extension point; the protocol to address it\n+   * with and the necessary configuration.\n+   */\n+  @Nonnull private RemoteExtensionTransport transport = new RemoteExtensionTransport();\n+\n+  /** Configures the remote extension point. */\n+  @Nullable private Map<String, Object> config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81efaf9eed451f0259c32bf710dece96073d56f1"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDczMjQzOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/events/RemotePluginExtensionsLoaded.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0Njo1N1rOG8byQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMToyNDoyOFrOG8f9mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMjk3Ng==", "bodyText": "I haven't quite settled on a pattern yet for how exactly these events will be consumed and wired up for the remote extension (HTTP client, necessary configuration) and I am open to suggestions.", "url": "https://github.com/spinnaker/kork/pull/734#discussion_r466022976", "createdAt": "2020-08-05T21:46:57Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/events/RemotePluginExtensionsLoaded.kt", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.events\n+\n+import com.netflix.spinnaker.kork.api.plugins.remote.RemoteExtension\n+import com.netflix.spinnaker.kork.plugins.update.release.remote.RemotePluginInfoReleaseCache\n+\n+class RemotePluginExtensionsLoaded(\n+  source: RemotePluginInfoReleaseCache,\n+  status: Status,\n+  pluginId: String,\n+  version: String,\n+  remoteExtensions: List<RemoteExtension>\n+) {\n+  enum class Status {\n+    ENABLED,\n+    DISABLED,\n+    UPDATED\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81efaf9eed451f0259c32bf710dece96073d56f1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4NjU1MA==", "bodyText": "Seems like this is out of scope of the PR? There's definitely a few ways forward here, but we haven't really built up the part where we're actually creating these remote extension transports yet. Perhaps we use ObjectProvider for components that are reloadable.", "url": "https://github.com/spinnaker/kork/pull/734#discussion_r466086550", "createdAt": "2020-08-06T01:06:25Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/events/RemotePluginExtensionsLoaded.kt", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.events\n+\n+import com.netflix.spinnaker.kork.api.plugins.remote.RemoteExtension\n+import com.netflix.spinnaker.kork.plugins.update.release.remote.RemotePluginInfoReleaseCache\n+\n+class RemotePluginExtensionsLoaded(\n+  source: RemotePluginInfoReleaseCache,\n+  status: Status,\n+  pluginId: String,\n+  version: String,\n+  remoteExtensions: List<RemoteExtension>\n+) {\n+  enum class Status {\n+    ENABLED,\n+    DISABLED,\n+    UPDATED\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMjk3Ng=="}, "originalCommit": {"oid": "81efaf9eed451f0259c32bf710dece96073d56f1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5MTQxNg==", "bodyText": "Yep - out of scope for this PR.  I think this is the next PR, basically.", "url": "https://github.com/spinnaker/kork/pull/734#discussion_r466091416", "createdAt": "2020-08-06T01:24:28Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/events/RemotePluginExtensionsLoaded.kt", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.events\n+\n+import com.netflix.spinnaker.kork.api.plugins.remote.RemoteExtension\n+import com.netflix.spinnaker.kork.plugins.update.release.remote.RemotePluginInfoReleaseCache\n+\n+class RemotePluginExtensionsLoaded(\n+  source: RemotePluginInfoReleaseCache,\n+  status: Status,\n+  pluginId: String,\n+  version: String,\n+  remoteExtensions: List<RemoteExtension>\n+) {\n+  enum class Status {\n+    ENABLED,\n+    DISABLED,\n+    UPDATED\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMjk3Ng=="}, "originalCommit": {"oid": "81efaf9eed451f0259c32bf710dece96073d56f1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDczNDc0OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0Nzo1MFrOG8bzqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMToyMjoxMFrOG8f7Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMzMzNw==", "bodyText": "Since these plugin releases are dynamic (more like Deck plugin releases in that way) I decided not to include the front50 pinning release source here - I feel like that is only really necessary for the plugins that are loaded in-process.", "url": "https://github.com/spinnaker/kork/pull/734#discussion_r466023337", "createdAt": "2020-08-05T21:47:50Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java", "diffHunk": "@@ -199,6 +200,29 @@ public static PluginInfoReleaseProvider pluginInfoReleaseProvider(\n         pluginInfoReleaseSources, springStrictPluginLoaderStatusProvider);\n   }\n \n+  @Bean\n+  public static RemotePluginInfoReleaseCache remotePluginInfoReleaseCache(\n+      LatestPluginInfoReleaseSource latestPluginInfoReleaseSource,\n+      SpringPluginInfoReleaseSource springPluginInfoReleaseSource,\n+      PreferredPluginInfoReleaseSource preferredPluginInfoReleaseSource,\n+      SpringStrictPluginLoaderStatusProvider springStrictPluginLoaderStatusProvider,\n+      ApplicationEventPublisher applicationEventPublisher,\n+      SpinnakerUpdateManager updateManager,\n+      SpinnakerPluginManager pluginManager,\n+      SpringPluginStatusProvider springPluginStatusProvider) {\n+    return new RemotePluginInfoReleaseCache(\n+        new AggregatePluginInfoReleaseProvider(\n+            Arrays.asList(\n+                latestPluginInfoReleaseSource,\n+                springPluginInfoReleaseSource,\n+                preferredPluginInfoReleaseSource),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81efaf9eed451f0259c32bf710dece96073d56f1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4NTM2NA==", "bodyText": "What happens when a new PluginInfoReleaseSource is added somewhere down the line? I'd have expected to see an injection ofCollection<PluginInfoReleaseSource> and filter out the types you know you don't want. Was this route considered?", "url": "https://github.com/spinnaker/kork/pull/734#discussion_r466085364", "createdAt": "2020-08-06T01:01:38Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java", "diffHunk": "@@ -199,6 +200,29 @@ public static PluginInfoReleaseProvider pluginInfoReleaseProvider(\n         pluginInfoReleaseSources, springStrictPluginLoaderStatusProvider);\n   }\n \n+  @Bean\n+  public static RemotePluginInfoReleaseCache remotePluginInfoReleaseCache(\n+      LatestPluginInfoReleaseSource latestPluginInfoReleaseSource,\n+      SpringPluginInfoReleaseSource springPluginInfoReleaseSource,\n+      PreferredPluginInfoReleaseSource preferredPluginInfoReleaseSource,\n+      SpringStrictPluginLoaderStatusProvider springStrictPluginLoaderStatusProvider,\n+      ApplicationEventPublisher applicationEventPublisher,\n+      SpinnakerUpdateManager updateManager,\n+      SpinnakerPluginManager pluginManager,\n+      SpringPluginStatusProvider springPluginStatusProvider) {\n+    return new RemotePluginInfoReleaseCache(\n+        new AggregatePluginInfoReleaseProvider(\n+            Arrays.asList(\n+                latestPluginInfoReleaseSource,\n+                springPluginInfoReleaseSource,\n+                preferredPluginInfoReleaseSource),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMzMzNw=="}, "originalCommit": {"oid": "81efaf9eed451f0259c32bf710dece96073d56f1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5MDgzNA==", "bodyText": "Yes, that's what I initially implemented. But then I reverted it because I didn't want someone inadvertently changing the behavior of this cache.  Now that you bring it up though - I agree.  I think it's reasonable to assume in kork-plugins land that any additional PluginInfoReleaseSource will be processed by the aggregate.", "url": "https://github.com/spinnaker/kork/pull/734#discussion_r466090834", "createdAt": "2020-08-06T01:22:10Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java", "diffHunk": "@@ -199,6 +200,29 @@ public static PluginInfoReleaseProvider pluginInfoReleaseProvider(\n         pluginInfoReleaseSources, springStrictPluginLoaderStatusProvider);\n   }\n \n+  @Bean\n+  public static RemotePluginInfoReleaseCache remotePluginInfoReleaseCache(\n+      LatestPluginInfoReleaseSource latestPluginInfoReleaseSource,\n+      SpringPluginInfoReleaseSource springPluginInfoReleaseSource,\n+      PreferredPluginInfoReleaseSource preferredPluginInfoReleaseSource,\n+      SpringStrictPluginLoaderStatusProvider springStrictPluginLoaderStatusProvider,\n+      ApplicationEventPublisher applicationEventPublisher,\n+      SpinnakerUpdateManager updateManager,\n+      SpinnakerPluginManager pluginManager,\n+      SpringPluginStatusProvider springPluginStatusProvider) {\n+    return new RemotePluginInfoReleaseCache(\n+        new AggregatePluginInfoReleaseProvider(\n+            Arrays.asList(\n+                latestPluginInfoReleaseSource,\n+                springPluginInfoReleaseSource,\n+                preferredPluginInfoReleaseSource),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyMzMzNw=="}, "originalCommit": {"oid": "81efaf9eed451f0259c32bf710dece96073d56f1"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDc0MzY0OnYy", "diffSide": "RIGHT", "path": "kork-plugins/kork-plugins.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo1MDo1N1rOG8b45A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo1MDo1N1rOG8b45A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyNDY3Ng==", "bodyText": "api dependency because RemoteExtension is used in SpinnakerPluginInfo (which I have not moved to kork-api yet) and that model is pulled into Gate.", "url": "https://github.com/spinnaker/kork/pull/734#discussion_r466024676", "createdAt": "2020-08-05T21:50:57Z", "author": {"login": "jonsie"}, "path": "kork-plugins/kork-plugins.gradle", "diffHunk": "@@ -5,6 +5,8 @@ apply from: \"$rootDir/gradle/lombok.gradle\"\n \n dependencies {\n   api(platform(project(\":spinnaker-dependencies\")))\n+  api project(\":kork-api\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81efaf9eed451f0259c32bf710dece96073d56f1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDc2NTI2OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/release/remote/RemotePluginInfoReleaseCache.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo1ODo0N1rOG8cF_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo1ODo0N1rOG8cF_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAyODAzMA==", "bodyText": "I wonder if we also want to call this manually when the application is starting up so we force refresh the remote plugins before the schedule kicks in.", "url": "https://github.com/spinnaker/kork/pull/734#discussion_r466028030", "createdAt": "2020-08-05T21:58:47Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/release/remote/RemotePluginInfoReleaseCache.kt", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.update.release.remote\n+\n+import com.github.benmanes.caffeine.cache.Cache\n+import com.github.benmanes.caffeine.cache.Caffeine\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginManager\n+import com.netflix.spinnaker.kork.plugins.SpringPluginStatusProvider\n+import com.netflix.spinnaker.kork.plugins.events.RemotePluginExtensionsLoaded\n+import com.netflix.spinnaker.kork.plugins.events.RemotePluginExtensionsLoaded.Status.DISABLED\n+import com.netflix.spinnaker.kork.plugins.events.RemotePluginExtensionsLoaded.Status.ENABLED\n+import com.netflix.spinnaker.kork.plugins.events.RemotePluginExtensionsLoaded.Status.UPDATED\n+import com.netflix.spinnaker.kork.plugins.update.SpinnakerUpdateManager\n+import com.netflix.spinnaker.kork.plugins.update.release.PluginInfoRelease\n+import com.netflix.spinnaker.kork.plugins.update.release.provider.PluginInfoReleaseProvider\n+import org.slf4j.LoggerFactory\n+import org.springframework.context.ApplicationEventPublisher\n+import org.springframework.scheduling.annotation.Scheduled\n+\n+/**\n+ * Provides a [PluginInfoRelease] cache of enabled plugins that contain remote extensions.\n+ *\n+ * Emits [ENABLED], [DISABLED], and [UPDATED] events that contain the plugin ID, version, and remote\n+ * extensions when a corresponding change is detected in the cache (added, updated, or removed).\n+ */\n+class RemotePluginInfoReleaseCache(\n+  private val pluginInfoReleaseProvider: PluginInfoReleaseProvider,\n+  private val applicationEventPublisher: ApplicationEventPublisher,\n+  private val updateManager: SpinnakerUpdateManager,\n+  private val pluginManager: SpinnakerPluginManager,\n+  private val springPluginStatusProvider: SpringPluginStatusProvider\n+) {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  // unbounded cache because we need an in-memory reference to all enabled plugins with remote extensions\n+  private val pluginCache: Cache<String, PluginInfoRelease> = Caffeine.newBuilder()\n+    .build<String, PluginInfoRelease>()\n+\n+  @Scheduled(fixedDelayString = \"\\${spinnaker.extensibility.remote-extension-loader.frequency:PT60S}\")\n+  fun refresh() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81efaf9eed451f0259c32bf710dece96073d56f1"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTE0OTk3OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/events/RemotePluginExtensionsLoaded.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMTowNDoxN1rOG8foZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMToyMjo1OVrOG8f8Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4NTk5MA==", "bodyText": "nit: data class?\nThe event name is kinda odd when combined with DISABLED status. Perhaps RemotePluginChanged?", "url": "https://github.com/spinnaker/kork/pull/734#discussion_r466085990", "createdAt": "2020-08-06T01:04:17Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/events/RemotePluginExtensionsLoaded.kt", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.events\n+\n+import com.netflix.spinnaker.kork.api.plugins.remote.RemoteExtension\n+import com.netflix.spinnaker.kork.plugins.update.release.remote.RemotePluginInfoReleaseCache\n+import org.springframework.context.ApplicationEvent\n+\n+/**\n+ * A Spring [ApplicationEvent] that is emitted when a remote extension is loaded/unloaded.\n+ *\n+ * @param source The source of the event\n+ * @param status Whether the remote extension is [ENABLED], [DISABLED], or [UPDATED]\n+ * @param pluginId The plugin ID for the remote extension\n+ * @param version The plugin release version\n+ * @param remoteExtensions The list of remote extensions associated with the plugin release\n+ */\n+class RemotePluginExtensionsLoaded(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f3299a9c9ce332f005af599d078fd32f45df632"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA5MTAyNw==", "bodyText": "Yes.  I wasn't a fan of the name of this event.  RemotePluginChanged is \ud83d\udcaf !", "url": "https://github.com/spinnaker/kork/pull/734#discussion_r466091027", "createdAt": "2020-08-06T01:22:59Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/events/RemotePluginExtensionsLoaded.kt", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.events\n+\n+import com.netflix.spinnaker.kork.api.plugins.remote.RemoteExtension\n+import com.netflix.spinnaker.kork.plugins.update.release.remote.RemotePluginInfoReleaseCache\n+import org.springframework.context.ApplicationEvent\n+\n+/**\n+ * A Spring [ApplicationEvent] that is emitted when a remote extension is loaded/unloaded.\n+ *\n+ * @param source The source of the event\n+ * @param status Whether the remote extension is [ENABLED], [DISABLED], or [UPDATED]\n+ * @param pluginId The plugin ID for the remote extension\n+ * @param version The plugin release version\n+ * @param remoteExtensions The list of remote extensions associated with the plugin release\n+ */\n+class RemotePluginExtensionsLoaded(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4NTk5MA=="}, "originalCommit": {"oid": "1f3299a9c9ce332f005af599d078fd32f45df632"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3466, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}