{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MzI5MjU1", "number": 493, "title": "feat(context): provide a RequestContext abstraction", "bodyText": "This PR lifts Header out of AuthenticatedRequest and moves it into kork-core so that it can be accessed from both kork-web and kork-security.\nIn kork-web, we introduce a RequestContext interface with a concrete implementation that pulls values from AuthenticatedRequest. Consumers that need to access values from a RequestContext just need to get an autowired RequestContextProvider.\nThis should make code that depends on these values to be more easily testable and make it easier to go from one type of context to another (as I am currently doing in gate).", "createdAt": "2020-01-29T01:29:44Z", "url": "https://github.com/spinnaker/kork/pull/493", "merged": true, "mergeCommit": {"oid": "4776c237c88f0b468e152716b9c83791174d4ae1"}, "closed": true, "closedAt": "2020-01-29T17:46:17Z", "author": {"login": "dreynaud"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-7mGhgH2gAyMzY4MzI5MjU1OmU5MGRlNjU2YjJiNGZmNzAzODk0NWI2MzM3YmE0NjU1MTkyMzhmOWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_JjgQgH2gAyMzY4MzI5MjU1OjMzZWI2ZTdjMzQ1MGI0ODBmMDBiOGIxYzdkMzM4M2EzNGNiMTZkM2E=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e90de656b2b4ff7038945b6337ba465519238f9a", "author": {"user": {"login": "dreynaud", "name": "Daniel Reynaud"}}, "url": "https://github.com/spinnaker/kork/commit/e90de656b2b4ff7038945b6337ba465519238f9a", "committedDate": "2020-01-29T01:24:15Z", "message": "feat(context): provide a RequestContext abstraction\n\nThis PR lifts Header out of AuthenticatedRequest and moves it into kork-core so that it can be accessed from both kork-web and kork-security.\n\nIn kork-web, we introduce a RequestContext interface with a concrete implementation that pulls values from AuthenticatedRequest. Consumers that need to access values from a RequestContext just need to get an autowired RequestContextProvider.\n\nThis should make code that depends on these values to be more easily testable and make it easier to go from one type of context to another (as I am currently doing in gate)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODE1NTA4", "url": "https://github.com/spinnaker/kork/pull/493#pullrequestreview-349815508", "createdAt": "2020-01-29T01:31:08Z", "commit": {"oid": "e90de656b2b4ff7038945b6337ba465519238f9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMTozMTowOFrOFi6KmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMTozMTowOFrOFi6KmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0ODg4OQ==", "bodyText": "I forgot that I snuck this in there, I have been tripped by the unconditional appending of \".enabled\" which I did not expect. Seems reasonable enough?", "url": "https://github.com/spinnaker/kork/pull/493#discussion_r372148889", "createdAt": "2020-01-29T01:31:08Z", "author": {"login": "dreynaud"}, "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/dynamicconfig/SpringDynamicConfigService.java", "diffHunk": "@@ -87,6 +87,6 @@ public void setEnvironment(Environment environment) {\n   }\n \n   private static String flagPropertyName(String flagName) {\n-    return format(\"%s.enabled\", flagName);\n+    return flagName.endsWith(\".enabled\") ? flagName : format(\"%s.enabled\", flagName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e90de656b2b4ff7038945b6337ba465519238f9a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODE1NzA3", "url": "https://github.com/spinnaker/kork/pull/493#pullrequestreview-349815707", "createdAt": "2020-01-29T01:31:50Z", "commit": {"oid": "e90de656b2b4ff7038945b6337ba465519238f9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMTozMTo1MFrOFi6LNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMTozMTo1MFrOFi6LNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0OTA0Ng==", "bodyText": "no changes in this class, it's a pure move from AuthenticatedRequest", "url": "https://github.com/spinnaker/kork/pull/493#discussion_r372149046", "createdAt": "2020-01-29T01:31:50Z", "author": {"login": "dreynaud"}, "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/common/Header.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.common;\n+\n+/**\n+ * Known X-SPINNAKER headers, but any X-SPINNAKER-* key in the MDC will be automatically propagated\n+ * to the HTTP headers.\n+ *\n+ * <p>Use makeCustomerHeader() to add customer headers\n+ */\n+public enum Header {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e90de656b2b4ff7038945b6337ba465519238f9a"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODY5ODg3", "url": "https://github.com/spinnaker/kork/pull/493#pullrequestreview-349869887", "createdAt": "2020-01-29T05:30:36Z", "commit": {"oid": "e90de656b2b4ff7038945b6337ba465519238f9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTozMDozNlrOFi9CKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTozMDozNlrOFi9CKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NTg4Mw==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              default void setAccounts(String accounts) {\n          \n          \n            \n              default void setAccounts(String value) {", "url": "https://github.com/spinnaker/kork/pull/493#discussion_r372195883", "createdAt": "2020-01-29T05:30:36Z", "author": {"login": "marchello2000"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/context/RequestContext.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.web.context;\n+\n+import com.netflix.spinnaker.kork.common.Header;\n+import java.util.Optional;\n+\n+public interface RequestContext {\n+  default Optional<String> getAccounts() {\n+    return get(Header.ACCOUNTS);\n+  }\n+\n+  default Optional<String> getUser() {\n+    return get(Header.USER);\n+  }\n+\n+  default Optional<String> getUserOrigin() {\n+    return get(Header.USER_ORIGIN);\n+  }\n+\n+  default Optional<String> getRequestId() {\n+    return get(Header.REQUEST_ID);\n+  }\n+\n+  default Optional<String> getExecutionId() {\n+    return get(Header.EXECUTION_ID);\n+  }\n+\n+  default Optional<String> getApplication() {\n+    return get(Header.APPLICATION);\n+  }\n+\n+  default Optional<String> getExecutionType() {\n+    return get(Header.EXECUTION_TYPE);\n+  }\n+\n+  default Optional<String> get(Header header) {\n+    return get(header.getHeader());\n+  }\n+\n+  // setters\n+  default void setAccounts(String accounts) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e90de656b2b4ff7038945b6337ba465519238f9a"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODcwMDA4", "url": "https://github.com/spinnaker/kork/pull/493#pullrequestreview-349870008", "createdAt": "2020-01-29T05:31:05Z", "commit": {"oid": "e90de656b2b4ff7038945b6337ba465519238f9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTozMTowNlrOFi9Cjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTozMTowNlrOFi9Cjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NTk4Mw==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              default void setUser(String user) {\n          \n          \n            \n              default void setUser(String value) {\n          \n      \n    \n    \n  \n\nto make consistent with others..? \ud83e\udd37\u200d\u2642", "url": "https://github.com/spinnaker/kork/pull/493#discussion_r372195983", "createdAt": "2020-01-29T05:31:06Z", "author": {"login": "marchello2000"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/context/RequestContext.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.web.context;\n+\n+import com.netflix.spinnaker.kork.common.Header;\n+import java.util.Optional;\n+\n+public interface RequestContext {\n+  default Optional<String> getAccounts() {\n+    return get(Header.ACCOUNTS);\n+  }\n+\n+  default Optional<String> getUser() {\n+    return get(Header.USER);\n+  }\n+\n+  default Optional<String> getUserOrigin() {\n+    return get(Header.USER_ORIGIN);\n+  }\n+\n+  default Optional<String> getRequestId() {\n+    return get(Header.REQUEST_ID);\n+  }\n+\n+  default Optional<String> getExecutionId() {\n+    return get(Header.EXECUTION_ID);\n+  }\n+\n+  default Optional<String> getApplication() {\n+    return get(Header.APPLICATION);\n+  }\n+\n+  default Optional<String> getExecutionType() {\n+    return get(Header.EXECUTION_TYPE);\n+  }\n+\n+  default Optional<String> get(Header header) {\n+    return get(header.getHeader());\n+  }\n+\n+  // setters\n+  default void setAccounts(String accounts) {\n+    set(Header.ACCOUNTS, accounts);\n+  }\n+\n+  default void setUser(String user) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e90de656b2b4ff7038945b6337ba465519238f9a"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODcwMTA0", "url": "https://github.com/spinnaker/kork/pull/493#pullrequestreview-349870104", "createdAt": "2020-01-29T05:31:25Z", "commit": {"oid": "e90de656b2b4ff7038945b6337ba465519238f9a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33eb6e7c3450b480f00b8b1c7d3383a34cb16d3a", "author": {"user": {"login": "dreynaud", "name": "Daniel Reynaud"}}, "url": "https://github.com/spinnaker/kork/commit/33eb6e7c3450b480f00b8b1c7d3383a34cb16d3a", "committedDate": "2020-01-29T17:40:05Z", "message": "chore(context): use more consistent parameter names"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1637, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}