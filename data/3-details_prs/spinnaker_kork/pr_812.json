{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNTk0NDM3", "number": 812, "title": "v2 plugin framework: allow service-side extension injection without special handling", "bodyText": "", "createdAt": "2020-10-14T19:35:08Z", "url": "https://github.com/spinnaker/kork/pull/812", "merged": true, "mergeCommit": {"oid": "47bd625f762ee2868c2f3f51b1ad5c4530d9366b"}, "closed": true, "closedAt": "2020-10-27T19:18:56Z", "author": {"login": "danielpeach"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSin7BgFqTUwODY3NDY4Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWt6sCABqjM5Mjc3MDgxNTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4Njc0Njg3", "url": "https://github.com/spinnaker/kork/pull/812#pullrequestreview-508674687", "createdAt": "2020-10-14T19:46:49Z", "commit": {"oid": "79c264ea5de03651b3f1e82c0122e5caa21c8d5d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOTo0Njo1MFrOHhigng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOTo0Nzo1M1rOHhiixw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkzMDQ2Mg==", "bodyText": "The main idea is here. It creates lazy implementations for extension beans that will be created later on inside the plugin application context.", "url": "https://github.com/spinnaker/kork/pull/812#discussion_r504930462", "createdAt": "2020-10-14T19:46:50Z", "author": {"login": "danielpeach"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/SpinnakerPluginService.kt", "diffHunk": "@@ -84,7 +99,55 @@ class SpinnakerPluginService(\n         }\n \n         if (p is PluginContainer) {\n-          p.registerInitializer(registry)\n+          val pluginContext = p.pluginContext\n+          val pluginId = p.wrapper.pluginId\n+          val initializerBeanName = p.registerInitializer(registry)\n+\n+          // Find the plugin's SpinnakerExtensionPoints.\n+          ClassPathScanningCandidateComponentProvider(false).apply {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79c264ea5de03651b3f1e82c0122e5caa21c8d5d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkzMTAxNQ==", "bodyText": "There's no need for the bean promoter, since the proxies are injected into the parent context up front.", "url": "https://github.com/spinnaker/kork/pull/812#discussion_r504931015", "createdAt": "2020-10-14T19:47:53Z", "author": {"login": "danielpeach"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/SpringPluginFactory.kt", "diffHunk": "@@ -39,16 +38,10 @@ class SpringPluginFactory(\n   private val sdkFactories: List<SdkFactory>,\n   private val configFactory: ConfigFactory,\n   private val serviceApplicationContext: GenericApplicationContext,\n-  private val invocationAspects: List<InvocationAspect<*>>\n ) : PluginFactory {\n \n   private val log = LoggerFactory.getLogger(javaClass)\n \n-  /**\n-   * [DefaultBeanPromoter] is the One True [BeanPromoter] for non-testing scenarios.\n-   */\n-  private val beanPromoter = DefaultBeanPromoter(serviceApplicationContext)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79c264ea5de03651b3f1e82c0122e5caa21c8d5d"}, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79c264ea5de03651b3f1e82c0122e5caa21c8d5d", "author": {"user": {"login": "danielpeach", "name": "Daniel Peach"}}, "url": "https://github.com/spinnaker/kork/commit/79c264ea5de03651b3f1e82c0122e5caa21c8d5d", "committedDate": "2020-10-14T19:35:13Z", "message": "Merge branch 'master' into dp/plugin-service-injection"}, "afterCommit": {"oid": "625cada71878338030650cdd7255ae0b71eacfa4", "author": {"user": {"login": "danielpeach", "name": "Daniel Peach"}}, "url": "https://github.com/spinnaker/kork/commit/625cada71878338030650cdd7255ae0b71eacfa4", "committedDate": "2020-10-14T19:50:29Z", "message": "make lazy extension invocation proxy internal"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MTE0MzYz", "url": "https://github.com/spinnaker/kork/pull/812#pullrequestreview-514114363", "createdAt": "2020-10-21T19:34:08Z", "commit": {"oid": "bfffccf3512cef0aa0e6767310f93653b6e218ba"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOTozNDowOFrOHmAT8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOTo1MjowMFrOHmBI7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYxMzA0MQ==", "bodyText": "Docs need to be improved. It's not obvious why this class exists, or what it's used for based on the docs.", "url": "https://github.com/spinnaker/kork/pull/812#discussion_r509613041", "createdAt": "2020-10-21T19:34:08Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/proxy/LazyExtensionInvocationProxy.kt", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Armory, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.proxy\n+\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginDescriptor\n+import com.netflix.spinnaker.kork.plugins.api.internal.ExtensionInvocationHandler\n+import com.netflix.spinnaker.kork.plugins.api.internal.SpinnakerExtensionPoint\n+import com.netflix.spinnaker.kork.plugins.proxy.aspects.InvocationAspect\n+import com.netflix.spinnaker.kork.plugins.proxy.aspects.InvocationState\n+import java.lang.reflect.Method\n+import java.lang.reflect.Proxy\n+\n+/**\n+ * A wrapper around [ExtensionInvocationProxy].\n+ * The provided `target` is resolved at method-call time.\n+ * */\n+internal class LazyExtensionInvocationProxy(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfffccf3512cef0aa0e6767310f93653b6e218ba"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYyMDgzMQ==", "bodyText": "This message could be improved - there's no context into what plugin context was not configured, etc.", "url": "https://github.com/spinnaker/kork/pull/812#discussion_r509620831", "createdAt": "2020-10-21T19:44:30Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/SpinnakerPluginService.kt", "diffHunk": "@@ -84,7 +99,55 @@ class SpinnakerPluginService(\n         }\n \n         if (p is PluginContainer) {\n-          p.registerInitializer(registry)\n+          val pluginContext = p.pluginContext\n+          val pluginId = p.wrapper.pluginId\n+          val initializerBeanName = p.registerInitializer(registry)\n+\n+          // Find the plugin's SpinnakerExtensionPoints.\n+          ClassPathScanningCandidateComponentProvider(false).apply {\n+            addIncludeFilter(AssignableTypeFilter(SpinnakerExtensionPoint::class.java))\n+            resourceLoader = DefaultResourceLoader(p.wrapper.pluginClassLoader)\n+          }.findCandidateComponents(p.actual.basePackageName).forEach { extensionBeanDefinition ->\n+            val extensionBeanClass = p.wrapper.pluginClassLoader.loadClass(extensionBeanDefinition.beanClassName) as Class<out SpinnakerExtensionPoint>\n+\n+            // Find the name that the extension bean will (but hasn't yet) be given inside the plugin application context.\n+            // We'll use this to look up the extension inside the lazy loader.\n+            val pluginContextBeanName = AnnotationBeanNameGenerator.INSTANCE.generateBeanName(\n+              extensionBeanDefinition,\n+              pluginContext\n+            )\n+\n+            // Provide an implementation of the extension that can be injected immediately by service-level classes.\n+            val proxy = LazyExtensionInvocationProxy.proxy(\n+              lazy {\n+                // Force the plugin's initializer to run.\n+                pluginContext.parent?.also { it.getBean(initializerBeanName) }\n+                  ?: throw IllegalStateException(\"Plugin context was not configured with a parent context\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfffccf3512cef0aa0e6767310f93653b6e218ba"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYyMzE0Ng==", "bodyText": "This is a little confusing. Can we get some docs on why this is necessary (vs just making target a property from the constructor)? Can we rename one of these variables?", "url": "https://github.com/spinnaker/kork/pull/812#discussion_r509623146", "createdAt": "2020-10-21T19:47:10Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/proxy/LazyExtensionInvocationProxy.kt", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Armory, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.proxy\n+\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginDescriptor\n+import com.netflix.spinnaker.kork.plugins.api.internal.ExtensionInvocationHandler\n+import com.netflix.spinnaker.kork.plugins.api.internal.SpinnakerExtensionPoint\n+import com.netflix.spinnaker.kork.plugins.proxy.aspects.InvocationAspect\n+import com.netflix.spinnaker.kork.plugins.proxy.aspects.InvocationState\n+import java.lang.reflect.Method\n+import java.lang.reflect.Proxy\n+\n+/**\n+ * A wrapper around [ExtensionInvocationProxy].\n+ * The provided `target` is resolved at method-call time.\n+ * */\n+internal class LazyExtensionInvocationProxy(\n+  target: Lazy<SpinnakerExtensionPoint>,\n+  private val targetClass: Class<out SpinnakerExtensionPoint>,\n+  private val invocationAspects: List<InvocationAspect<InvocationState>>,\n+  private val descriptor: SpinnakerPluginDescriptor\n+) : ExtensionInvocationHandler {\n+\n+  private val target by target", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfffccf3512cef0aa0e6767310f93653b6e218ba"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYyNDQwMQ==", "bodyText": "nit: Would like to see this block of code split into a different private method - really not a fan of a lot of logic directly nested inside of loops.", "url": "https://github.com/spinnaker/kork/pull/812#discussion_r509624401", "createdAt": "2020-10-21T19:49:12Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/SpinnakerPluginService.kt", "diffHunk": "@@ -84,7 +99,55 @@ class SpinnakerPluginService(\n         }\n \n         if (p is PluginContainer) {\n-          p.registerInitializer(registry)\n+          val pluginContext = p.pluginContext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfffccf3512cef0aa0e6767310f93653b6e218ba"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYyNjYwNg==", "bodyText": "A proxy of a proxy. This method still returns the correct results? https://github.com/spinnaker/kork/blob/master/kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/internal/SpinnakerExtensionPoint.java#L31 (via https://github.com/spinnaker/kork/blob/master/kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/internal/ExtensionClassProvider.java#L24).\nBy the looks of it, I wouldn't expect it to.", "url": "https://github.com/spinnaker/kork/pull/812#discussion_r509626606", "createdAt": "2020-10-21T19:52:00Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/proxy/LazyExtensionInvocationProxy.kt", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Armory, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.proxy\n+\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginDescriptor\n+import com.netflix.spinnaker.kork.plugins.api.internal.ExtensionInvocationHandler\n+import com.netflix.spinnaker.kork.plugins.api.internal.SpinnakerExtensionPoint\n+import com.netflix.spinnaker.kork.plugins.proxy.aspects.InvocationAspect\n+import com.netflix.spinnaker.kork.plugins.proxy.aspects.InvocationState\n+import java.lang.reflect.Method\n+import java.lang.reflect.Proxy\n+\n+/**\n+ * A wrapper around [ExtensionInvocationProxy].\n+ * The provided `target` is resolved at method-call time.\n+ * */\n+internal class LazyExtensionInvocationProxy(\n+  target: Lazy<SpinnakerExtensionPoint>,\n+  private val targetClass: Class<out SpinnakerExtensionPoint>,\n+  private val invocationAspects: List<InvocationAspect<InvocationState>>,\n+  private val descriptor: SpinnakerPluginDescriptor\n+) : ExtensionInvocationHandler {\n+\n+  private val target by target\n+  private val delegate by lazy { ExtensionInvocationProxy(this.target, invocationAspects, descriptor) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfffccf3512cef0aa0e6767310f93653b6e218ba"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59a9ade2e1afa20620d82629e5ad5fa625095112", "author": {"user": {"login": "danielpeach", "name": "Daniel Peach"}}, "url": "https://github.com/spinnaker/kork/commit/59a9ade2e1afa20620d82629e5ad5fa625095112", "committedDate": "2020-10-27T19:10:22Z", "message": "feat(plugins): allow service-side extension injection without special\nhandling"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20f91c67c15daf743addba6d7e4f71066ca20a2d", "author": {"user": {"login": "danielpeach", "name": "Daniel Peach"}}, "url": "https://github.com/spinnaker/kork/commit/20f91c67c15daf743addba6d7e4f71066ca20a2d", "committedDate": "2020-10-27T19:00:51Z", "message": "a little more cleanup"}, "afterCommit": {"oid": "59a9ade2e1afa20620d82629e5ad5fa625095112", "author": {"user": {"login": "danielpeach", "name": "Daniel Peach"}}, "url": "https://github.com/spinnaker/kork/commit/59a9ade2e1afa20620d82629e5ad5fa625095112", "committedDate": "2020-10-27T19:10:22Z", "message": "feat(plugins): allow service-side extension injection without special\nhandling"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1422, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}