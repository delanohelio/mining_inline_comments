{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NDIwMzQ1", "number": 639, "title": "fix(misc): allow pluggable client providers", "bodyText": "To allow customizations of OkHttpClient per destination/host, we need to provide ways to customize the client before the client gets used/wired in for making calls. Current implementation as provided in OkHttp3ClientConfiguration doesn't have enough hooks to allow customization of the client and this change is mostly to address that. Also to keep backward compatibility and to not have to propagate this change to every service at the same time, I'm keeping the existing OkHttp3ClientConfiguration contracts/methods as is so that we can migrate every service to use the new Provider implementation individually and not do all at once.\nOnce we modify every service to use the new Provider implementation, we can do some clean up , and remove the use of OkHttp3ClientConfiguration  and also refactor other places where we create a brand new client instead of using the singelton.\nAnother change in here is to use Service configuration object as the main way of defining a dependency on a spinnaker internal or external service.\n@Autowired\nOkHttpClientProvider clientProvider;\n\nOkHttpClient client = clientProvider.getClient(serviceConfig);\n\nclient.sendRequest(serviceConfig.sendUrl)........// or inject the url and client into `Retrofit` client builders\n\n\nWe also need to revisit how we are constructing clients in the plugin sdk side of things and consolidate the factories/builders etc. The change is backward compatible and currently we autowire the OkHttp3ClientConfiguration and use that to build client impls using Retrofit or otherwise and with this change we will use the clientProvider and use that to build customized clients by Url.", "createdAt": "2020-05-07T02:06:20Z", "url": "https://github.com/spinnaker/kork/pull/639", "merged": true, "mergeCommit": {"oid": "61de656d3de30b928ef1f820e8e520e237386c89"}, "closed": true, "closedAt": "2020-05-11T20:07:43Z", "author": {"login": "srekapalli"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcezbpbAH2gAyNDE0NDIwMzQ1OjIzNzQwMThiM2ZlOTRjNmExNzU1ZTUyNDY5MTA4MWQyNzNkOTY2ZGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgVIQagH2gAyNDE0NDIwMzQ1OmEzYzhlNWZhZDFlMDM2N2FmZjc3MDBlZDc4NmUyM2YwNjdjMDMwNjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2374018b3fe94c6a1755e524691081d273d966de", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/2374018b3fe94c6a1755e524691081d273d966de", "committedDate": "2020-05-07T01:59:10Z", "message": "fix(misc): allow pluggable client providers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ee7147afc1b8b268227d3b4011bbef607cf0b64", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/9ee7147afc1b8b268227d3b4011bbef607cf0b64", "committedDate": "2020-05-07T06:20:30Z", "message": "fix(misc): Fix provider impls to work with new builder api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MTcyNjk0", "url": "https://github.com/spinnaker/kork/pull/639#pullrequestreview-407172694", "createdAt": "2020-05-07T06:09:48Z", "commit": {"oid": "2374018b3fe94c6a1755e524691081d273d966de"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowOTo0OFrOGRvtkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjozNDo1NlrOGRwR_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2MDY5MA==", "bodyText": "nit ... isn't [baseUrl] incorrect syntax for javadoc in java (vs. kotlin)?", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421260690", "createdAt": "2020-05-07T06:09:48Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.okhttp;\n+\n+import okhttp3.OkHttpClient;\n+\n+public abstract class OkHttpClientBuilderProvider {\n+\n+  private final OkHttpClient.Builder builder;\n+  private final OkHttpClientConfigurationProperties okHttpClientConfigurationProperties;\n+\n+  public OkHttpClientBuilderProvider(\n+      OkHttpClient okHttpClient,\n+      OkHttpClientConfigurationProperties okHttpClientConfigurationProperties) {\n+    this.builder = okHttpClient.newBuilder();\n+    this.okHttpClientConfigurationProperties = okHttpClientConfigurationProperties;\n+  }\n+\n+  /** Returns whether or not the provider supports the provided [baseUrl]. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2374018b3fe94c6a1755e524691081d273d966de"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2Mjk3Ng==", "bodyText": "Thoughts on just accepting an OkHttpClient.Builder since that seems to primarily what the class is dealing with?", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421262976", "createdAt": "2020-05-07T06:16:11Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/groovy/com/netflix/spinnaker/config/OkHttp3ClientConfiguration.groovy", "diffHunk": "@@ -38,50 +35,30 @@ import javax.net.ssl.X509TrustManager\n import java.security.KeyStore\n import java.security.NoSuchAlgorithmException\n import java.security.SecureRandom\n-import java.util.concurrent.TimeUnit\n \n @Slf4j\n @CompileStatic\n @Component\n-class OkHttp3ClientConfiguration {\n-  private final OkHttpClientConfigurationProperties okHttpClientConfigurationProperties\n-  private final OkHttp3MetricsInterceptor okHttp3MetricsInterceptor\n+class OkHttp3ClientConfiguration extends OkHttpClientBuilderProvider {\n \n   @Autowired\n-  public OkHttp3ClientConfiguration(OkHttpClientConfigurationProperties okHttpClientConfigurationProperties,\n-                                    OkHttp3MetricsInterceptor okHttp3MetricsInterceptor) {\n-    this.okHttpClientConfigurationProperties = okHttpClientConfigurationProperties\n-    this.okHttp3MetricsInterceptor = okHttp3MetricsInterceptor\n+  OkHttp3ClientConfiguration(OkHttpClient okHttpClient,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2374018b3fe94c6a1755e524691081d273d966de"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NDE0NA==", "bodyText": "Seems like in the future this class might be misnamed?\n(would it eventually become DefaultOkHttpClientBuilderProvider?)", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421264144", "createdAt": "2020-05-07T06:19:21Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/groovy/com/netflix/spinnaker/config/OkHttp3ClientConfiguration.groovy", "diffHunk": "@@ -38,50 +35,30 @@ import javax.net.ssl.X509TrustManager\n import java.security.KeyStore\n import java.security.NoSuchAlgorithmException\n import java.security.SecureRandom\n-import java.util.concurrent.TimeUnit\n \n @Slf4j\n @CompileStatic\n @Component\n-class OkHttp3ClientConfiguration {\n-  private final OkHttpClientConfigurationProperties okHttpClientConfigurationProperties\n-  private final OkHttp3MetricsInterceptor okHttp3MetricsInterceptor\n+class OkHttp3ClientConfiguration extends OkHttpClientBuilderProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2374018b3fe94c6a1755e524691081d273d966de"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NTM2MQ==", "bodyText": "Naming convention Q ... historically we've used OkHttpClient3 to distinguish.\nIs it more or less confusing not to do that here?", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421265361", "createdAt": "2020-05-07T06:22:35Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/OkHttpClientProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import static java.lang.String.format;\n+\n+import com.netflix.spinnaker.kork.exceptions.SystemException;\n+import com.netflix.spinnaker.okhttp.OkHttpClientBuilderProvider;\n+import java.util.List;\n+import okhttp3.OkHttpClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+class OkHttpClientProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2374018b3fe94c6a1755e524691081d273d966de"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NTY5Nw==", "bodyText": "Any reason why provider.create() couldn't take endPointUrl and setup the host name verifier? Why does it need to be separately invoked?", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421265697", "createdAt": "2020-05-07T06:23:28Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/OkHttpClientProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import static java.lang.String.format;\n+\n+import com.netflix.spinnaker.kork.exceptions.SystemException;\n+import com.netflix.spinnaker.okhttp.OkHttpClientBuilderProvider;\n+import java.util.List;\n+import okhttp3.OkHttpClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+class OkHttpClientProvider {\n+\n+  private final List<OkHttpClientBuilderProvider> providers;\n+\n+  public OkHttpClientProvider(List<OkHttpClientBuilderProvider> providers) {\n+    this.providers = providers;\n+  }\n+\n+  /**\n+   * consults the provider impls to decide which provider class can build a client for the given url\n+   * and delegates to that provider to build a client.\n+   *\n+   * @param endPointUrl\n+   * @return okHttpClient\n+   */\n+  OkHttpClient getClient(String endPointUrl) {\n+\n+    OkHttpClientBuilderProvider provider = findProvider(endPointUrl);\n+    if (provider == null) {\n+      throw new SystemException(format(\"Failed to create HTTP client for url (%s)\", endPointUrl));\n+    }\n+\n+    provider.create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2374018b3fe94c6a1755e524691081d273d966de"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NTk0MQ==", "bodyText": "provider.build() vs provider.getBuilder().build()?\nMight be irrelevant.", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421265941", "createdAt": "2020-05-07T06:24:04Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/OkHttpClientProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import static java.lang.String.format;\n+\n+import com.netflix.spinnaker.kork.exceptions.SystemException;\n+import com.netflix.spinnaker.okhttp.OkHttpClientBuilderProvider;\n+import java.util.List;\n+import okhttp3.OkHttpClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+class OkHttpClientProvider {\n+\n+  private final List<OkHttpClientBuilderProvider> providers;\n+\n+  public OkHttpClientProvider(List<OkHttpClientBuilderProvider> providers) {\n+    this.providers = providers;\n+  }\n+\n+  /**\n+   * consults the provider impls to decide which provider class can build a client for the given url\n+   * and delegates to that provider to build a client.\n+   *\n+   * @param endPointUrl\n+   * @return okHttpClient\n+   */\n+  OkHttpClient getClient(String endPointUrl) {\n+\n+    OkHttpClientBuilderProvider provider = findProvider(endPointUrl);\n+    if (provider == null) {\n+      throw new SystemException(format(\"Failed to create HTTP client for url (%s)\", endPointUrl));\n+    }\n+\n+    provider.create();\n+    provider.applyHostNameVerifier(endPointUrl);\n+\n+    return provider.getBuilder().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2374018b3fe94c6a1755e524691081d273d966de"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NjE3OA==", "bodyText": "What's the impact on returning null here ... we're throwing an exception above if we cannot find a provider.", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421266178", "createdAt": "2020-05-07T06:24:42Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/OkHttpClientProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import static java.lang.String.format;\n+\n+import com.netflix.spinnaker.kork.exceptions.SystemException;\n+import com.netflix.spinnaker.okhttp.OkHttpClientBuilderProvider;\n+import java.util.List;\n+import okhttp3.OkHttpClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+class OkHttpClientProvider {\n+\n+  private final List<OkHttpClientBuilderProvider> providers;\n+\n+  public OkHttpClientProvider(List<OkHttpClientBuilderProvider> providers) {\n+    this.providers = providers;\n+  }\n+\n+  /**\n+   * consults the provider impls to decide which provider class can build a client for the given url\n+   * and delegates to that provider to build a client.\n+   *\n+   * @param endPointUrl\n+   * @return okHttpClient\n+   */\n+  OkHttpClient getClient(String endPointUrl) {\n+\n+    OkHttpClientBuilderProvider provider = findProvider(endPointUrl);\n+    if (provider == null) {\n+      throw new SystemException(format(\"Failed to create HTTP client for url (%s)\", endPointUrl));\n+    }\n+\n+    provider.create();\n+    provider.applyHostNameVerifier(endPointUrl);\n+\n+    return provider.getBuilder().build();\n+  }\n+\n+  /**\n+   * Get normalized URL as decided by the provider that can serve the presented Url.\n+   *\n+   * @param endPointUrl\n+   * @return\n+   */\n+  String getNormalizedUrl(String endPointUrl) {\n+    OkHttpClientBuilderProvider provider = findProvider(endPointUrl);\n+    return (provider != null) ? provider.getNormalizedUrl(endPointUrl) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2374018b3fe94c6a1755e524691081d273d966de"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NjM5MQ==", "bodyText": "nit URL vs Url when it should just be url.", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421266391", "createdAt": "2020-05-07T06:25:14Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/OkHttpClientProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import static java.lang.String.format;\n+\n+import com.netflix.spinnaker.kork.exceptions.SystemException;\n+import com.netflix.spinnaker.okhttp.OkHttpClientBuilderProvider;\n+import java.util.List;\n+import okhttp3.OkHttpClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+class OkHttpClientProvider {\n+\n+  private final List<OkHttpClientBuilderProvider> providers;\n+\n+  public OkHttpClientProvider(List<OkHttpClientBuilderProvider> providers) {\n+    this.providers = providers;\n+  }\n+\n+  /**\n+   * consults the provider impls to decide which provider class can build a client for the given url\n+   * and delegates to that provider to build a client.\n+   *\n+   * @param endPointUrl\n+   * @return okHttpClient\n+   */\n+  OkHttpClient getClient(String endPointUrl) {\n+\n+    OkHttpClientBuilderProvider provider = findProvider(endPointUrl);\n+    if (provider == null) {\n+      throw new SystemException(format(\"Failed to create HTTP client for url (%s)\", endPointUrl));\n+    }\n+\n+    provider.create();\n+    provider.applyHostNameVerifier(endPointUrl);\n+\n+    return provider.getBuilder().build();\n+  }\n+\n+  /**\n+   * Get normalized URL as decided by the provider that can serve the presented Url.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2374018b3fe94c6a1755e524691081d273d966de"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2ODEyNg==", "bodyText": "Javadoc could potentially be improved.\n/**\n * Default {@link OkHttpClient} that is correctly configured for service-to-service communication.\n */\n\n^^ can likely be further improved (if we actually want/need javadoc on @Bean's).", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421268126", "createdAt": "2020-05-07T06:29:53Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/RawOkHttpClientConfiguration.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import com.netflix.spinnaker.okhttp.OkHttp3MetricsInterceptor;\n+import com.netflix.spinnaker.okhttp.OkHttpClientConfigurationProperties;\n+import okhttp3.OkHttpClient;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@EnableConfigurationProperties(OkHttpClientConfigurationProperties.class)\n+class RawOkHttpClientConfiguration {\n+\n+  /** OkHttpClient instance to be reused it for all HTTP calls. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2374018b3fe94c6a1755e524691081d273d966de"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2ODcwMg==", "bodyText": "nit javadoc needs some spacing ... at least move (eg: ... onto a separate line.\nNot sure what \"upstream\" means in this context. I think we mean something along the lines of subsequently customized depending on destination?", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421268702", "createdAt": "2020-05-07T06:31:25Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/RawOkHttpClientFactory.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import com.netflix.spinnaker.okhttp.OkHttp3MetricsInterceptor;\n+import com.netflix.spinnaker.okhttp.OkHttpClientConfigurationProperties;\n+import java.util.concurrent.TimeUnit;\n+import okhttp3.ConnectionPool;\n+import okhttp3.Dispatcher;\n+import okhttp3.OkHttpClient;\n+\n+public class RawOkHttpClientFactory {\n+\n+  /**\n+   * Returns a basic client which can be further customized for other needs upstream.(eg: SSL setup,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2374018b3fe94c6a1755e524691081d273d966de"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2OTQwOQ==", "bodyText": "Mentioned in an earlier comment but this may not be necessary.", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421269409", "createdAt": "2020-05-07T06:33:23Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.okhttp;\n+\n+import okhttp3.OkHttpClient;\n+\n+public abstract class OkHttpClientBuilderProvider {\n+\n+  private final OkHttpClient.Builder builder;\n+  private final OkHttpClientConfigurationProperties okHttpClientConfigurationProperties;\n+\n+  public OkHttpClientBuilderProvider(\n+      OkHttpClient okHttpClient,\n+      OkHttpClientConfigurationProperties okHttpClientConfigurationProperties) {\n+    this.builder = okHttpClient.newBuilder();\n+    this.okHttpClientConfigurationProperties = okHttpClientConfigurationProperties;\n+  }\n+\n+  /** Returns whether or not the provider supports the provided [baseUrl]. */\n+  public abstract Boolean supports(String baseUrl);\n+\n+  /** Allows custom implementations to adjust the url before making a call. */\n+  public String getNormalizedUrl(String baseUrl) {\n+    return baseUrl;\n+  }\n+\n+  /** Apply host name verifier for the provided [baseUrl] if any */\n+  public OkHttpClient.Builder applyHostNameVerifier(String baseUrl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2374018b3fe94c6a1755e524691081d273d966de"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2OTY3Ng==", "bodyText": "Is there anything here that would stop this from actually being an interface rather than abstract class?", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421269676", "createdAt": "2020-05-07T06:34:05Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.okhttp;\n+\n+import okhttp3.OkHttpClient;\n+\n+public abstract class OkHttpClientBuilderProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2374018b3fe94c6a1755e524691081d273d966de"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3MDAxMg==", "bodyText": "Having two methods that return an OkHttpClient.Builder might be confusing?", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421270012", "createdAt": "2020-05-07T06:34:56Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.okhttp;\n+\n+import okhttp3.OkHttpClient;\n+\n+public abstract class OkHttpClientBuilderProvider {\n+\n+  private final OkHttpClient.Builder builder;\n+  private final OkHttpClientConfigurationProperties okHttpClientConfigurationProperties;\n+\n+  public OkHttpClientBuilderProvider(\n+      OkHttpClient okHttpClient,\n+      OkHttpClientConfigurationProperties okHttpClientConfigurationProperties) {\n+    this.builder = okHttpClient.newBuilder();\n+    this.okHttpClientConfigurationProperties = okHttpClientConfigurationProperties;\n+  }\n+\n+  /** Returns whether or not the provider supports the provided [baseUrl]. */\n+  public abstract Boolean supports(String baseUrl);\n+\n+  /** Allows custom implementations to adjust the url before making a call. */\n+  public String getNormalizedUrl(String baseUrl) {\n+    return baseUrl;\n+  }\n+\n+  /** Apply host name verifier for the provided [baseUrl] if any */\n+  public OkHttpClient.Builder applyHostNameVerifier(String baseUrl) {\n+    // Concrete impls will override.\n+    return this.builder;\n+  }\n+\n+  /**\n+   * Creates an [OkHttpClient] Builder. The generated client builder is not set to talk to any\n+   * endpoint and it just constructs a bare minimum client\n+   */\n+  public abstract OkHttpClient.Builder create();\n+\n+  public OkHttpClient.Builder getBuilder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2374018b3fe94c6a1755e524691081d273d966de"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MTg4MDc2", "url": "https://github.com/spinnaker/kork/pull/639#pullrequestreview-407188076", "createdAt": "2020-05-07T06:44:12Z", "commit": {"oid": "9ee7147afc1b8b268227d3b4011bbef607cf0b64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjo0NDoxM1rOGRwgjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjo0NDoxM1rOGRwgjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3Mzc0MQ==", "bodyText": "Confusing to have a method that returns OkHttpClient.Builder and another that returns a full blown OkHttpClient?", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421273741", "createdAt": "2020-05-07T06:44:13Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -50,8 +50,8 @@ public String getNormalizedUrl(String baseUrl) {\n    */\n   public abstract OkHttpClient.Builder create();\n \n-  public OkHttpClient.Builder getBuilder() {\n-    return this.builder;\n+  public OkHttpClient getClient() {\n+    return this.okHttpClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ee7147afc1b8b268227d3b4011bbef607cf0b64"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MTkwOTk4", "url": "https://github.com/spinnaker/kork/pull/639#pullrequestreview-407190998", "createdAt": "2020-05-07T06:50:12Z", "commit": {"oid": "9ee7147afc1b8b268227d3b4011bbef607cf0b64"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjo1MDoxMlrOGRwqOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjo1MDoxMlrOGRwqOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3NjIxOQ==", "bodyText": "More generically could this be a collection of interceptors rather than this specific one?", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421276219", "createdAt": "2020-05-07T06:50:12Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/RawOkHttpClientConfiguration.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import com.netflix.spinnaker.okhttp.OkHttp3MetricsInterceptor;\n+import com.netflix.spinnaker.okhttp.OkHttpClientConfigurationProperties;\n+import okhttp3.OkHttpClient;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@EnableConfigurationProperties(OkHttpClientConfigurationProperties.class)\n+class RawOkHttpClientConfiguration {\n+\n+  /** OkHttpClient instance to be reused it for all HTTP calls. */\n+  @Bean\n+  OkHttpClient okHttpClient(\n+      OkHttpClientConfigurationProperties okHttpClientConfigurationProperties,\n+      OkHttp3MetricsInterceptor okHttp3MetricsInterceptor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ee7147afc1b8b268227d3b4011bbef607cf0b64"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Njk0MzI1", "url": "https://github.com/spinnaker/kork/pull/639#pullrequestreview-407694325", "createdAt": "2020-05-07T17:40:34Z", "commit": {"oid": "9ee7147afc1b8b268227d3b4011bbef607cf0b64"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzo0MDozNFrOGSJQig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzo0NzowNFrOGSJf3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3OTI0Mg==", "bodyText": "Is this actually necessary? I don't really like the idea of expanding the use of the Groovy compiler.", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421679242", "createdAt": "2020-05-07T17:40:34Z", "author": {"login": "robzienert"}, "path": "kork-web/kork-web.gradle", "diffHunk": "@@ -1,6 +1,13 @@\n apply plugin: \"java-library\"\n apply plugin: \"groovy\"\n \n+sourceSets {\n+  main {\n+    java { srcDirs = [] }\n+    groovy { srcDirs += ['src/main/java'] }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ee7147afc1b8b268227d3b4011bbef607cf0b64"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3OTc4NQ==", "bodyText": "+1, I think accepting a builder is probably better.", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421679785", "createdAt": "2020-05-07T17:41:30Z", "author": {"login": "robzienert"}, "path": "kork-web/src/main/groovy/com/netflix/spinnaker/config/OkHttp3ClientConfiguration.groovy", "diffHunk": "@@ -38,50 +35,30 @@ import javax.net.ssl.X509TrustManager\n import java.security.KeyStore\n import java.security.NoSuchAlgorithmException\n import java.security.SecureRandom\n-import java.util.concurrent.TimeUnit\n \n @Slf4j\n @CompileStatic\n @Component\n-class OkHttp3ClientConfiguration {\n-  private final OkHttpClientConfigurationProperties okHttpClientConfigurationProperties\n-  private final OkHttp3MetricsInterceptor okHttp3MetricsInterceptor\n+class OkHttp3ClientConfiguration extends OkHttpClientBuilderProvider {\n \n   @Autowired\n-  public OkHttp3ClientConfiguration(OkHttpClientConfigurationProperties okHttpClientConfigurationProperties,\n-                                    OkHttp3MetricsInterceptor okHttp3MetricsInterceptor) {\n-    this.okHttpClientConfigurationProperties = okHttpClientConfigurationProperties\n-    this.okHttp3MetricsInterceptor = okHttp3MetricsInterceptor\n+  OkHttp3ClientConfiguration(OkHttpClient okHttpClient,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2Mjk3Ng=="}, "originalCommit": {"oid": "2374018b3fe94c6a1755e524691081d273d966de"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4MDQ0OA==", "bodyText": "What's preventing us from renaming it now?", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421680448", "createdAt": "2020-05-07T17:42:35Z", "author": {"login": "robzienert"}, "path": "kork-web/src/main/groovy/com/netflix/spinnaker/config/OkHttp3ClientConfiguration.groovy", "diffHunk": "@@ -38,50 +35,30 @@ import javax.net.ssl.X509TrustManager\n import java.security.KeyStore\n import java.security.NoSuchAlgorithmException\n import java.security.SecureRandom\n-import java.util.concurrent.TimeUnit\n \n @Slf4j\n @CompileStatic\n @Component\n-class OkHttp3ClientConfiguration {\n-  private final OkHttpClientConfigurationProperties okHttpClientConfigurationProperties\n-  private final OkHttp3MetricsInterceptor okHttp3MetricsInterceptor\n+class OkHttp3ClientConfiguration extends OkHttpClientBuilderProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2NDE0NA=="}, "originalCommit": {"oid": "2374018b3fe94c6a1755e524691081d273d966de"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4MTUwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  throw new SystemException(format(\"Failed to create HTTP client for url (%s)\", endPointUrl));\n          \n          \n            \n                  throw new SystemException(format(\"Failed to create HTTP client: No provider found for endpoint '%s'\", endPointUrl));", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421681500", "createdAt": "2020-05-07T17:44:23Z", "author": {"login": "robzienert"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/OkHttpClientProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import static java.lang.String.format;\n+\n+import com.netflix.spinnaker.kork.exceptions.SystemException;\n+import com.netflix.spinnaker.okhttp.OkHttpClientBuilderProvider;\n+import java.util.List;\n+import okhttp3.OkHttpClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+class OkHttpClientProvider {\n+\n+  private final List<OkHttpClientBuilderProvider> providers;\n+\n+  public OkHttpClientProvider(List<OkHttpClientBuilderProvider> providers) {\n+    this.providers = providers;\n+  }\n+\n+  /**\n+   * consults the provider impls to decide which provider class can build a client for the given url\n+   * and delegates to that provider to build a client.\n+   *\n+   * @param endPointUrl\n+   * @return okHttpClient\n+   */\n+  OkHttpClient getClient(String endPointUrl) {\n+\n+    OkHttpClientBuilderProvider provider = findProvider(endPointUrl);\n+    if (provider == null) {\n+      throw new SystemException(format(\"Failed to create HTTP client for url (%s)\", endPointUrl));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ee7147afc1b8b268227d3b4011bbef607cf0b64"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4MjY5Nw==", "bodyText": "+1 this definitely looks like it should be an interface. I'd also like to see docs on the interface itself.", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421682697", "createdAt": "2020-05-07T17:46:17Z", "author": {"login": "robzienert"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.okhttp;\n+\n+import okhttp3.OkHttpClient;\n+\n+public abstract class OkHttpClientBuilderProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2OTY3Ng=="}, "originalCommit": {"oid": "2374018b3fe94c6a1755e524691081d273d966de"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4MzE2NA==", "bodyText": "Agreed. I would not expose OkHttpClient at all.", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421683164", "createdAt": "2020-05-07T17:47:04Z", "author": {"login": "robzienert"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -50,8 +50,8 @@ public String getNormalizedUrl(String baseUrl) {\n    */\n   public abstract OkHttpClient.Builder create();\n \n-  public OkHttpClient.Builder getBuilder() {\n-    return this.builder;\n+  public OkHttpClient getClient() {\n+    return this.okHttpClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3Mzc0MQ=="}, "originalCommit": {"oid": "9ee7147afc1b8b268227d3b4011bbef607cf0b64"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca434e6f590cd482627450658ee2da0a78316bff", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/ca434e6f590cd482627450658ee2da0a78316bff", "committedDate": "2020-05-07T20:14:59Z", "message": "Merge branch 'master' into client_prov"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b6514d589198e75ef48096d53c2d9a52b9f81d6", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/8b6514d589198e75ef48096d53c2d9a52b9f81d6", "committedDate": "2020-05-07T20:54:28Z", "message": "fix(misc): fix provider interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a94c6056b10fbbe596171480a4563f6d88a5fe22", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/a94c6056b10fbbe596171480a4563f6d88a5fe22", "committedDate": "2020-05-07T21:10:17Z", "message": "fix(misc): java doc and accept interceptors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5e5aa7aa632185b0bfe6ac58c20bd6309ef7772", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/f5e5aa7aa632185b0bfe6ac58c20bd6309ef7772", "committedDate": "2020-05-07T21:22:31Z", "message": "fix(misc):pass in interceptor list"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODU2NDU2", "url": "https://github.com/spinnaker/kork/pull/639#pullrequestreview-407856456", "createdAt": "2020-05-07T21:39:22Z", "commit": {"oid": "f5e5aa7aa632185b0bfe6ac58c20bd6309ef7772"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTozOToyM1rOGSRQbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTozOToyM1rOGSRQbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxMDI4NQ==", "bodyText": "nit: I suggest renaming these to get as it's more idiomatic on a provider.  It's always a bit strange to call create on a builder provider, and then call create again on the builder.", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421810285", "createdAt": "2020-05-07T21:39:23Z", "author": {"login": "jonsie"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.okhttp;\n+\n+import okhttp3.OkHttpClient;\n+\n+public abstract class OkHttpClientBuilderProvider {\n+\n+  private final OkHttpClient okHttpClient;\n+  private final OkHttpClientConfigurationProperties okHttpClientConfigurationProperties;\n+\n+  public OkHttpClientBuilderProvider(\n+      OkHttpClient okHttpClient,\n+      OkHttpClientConfigurationProperties okHttpClientConfigurationProperties) {\n+    this.okHttpClient = okHttpClient;\n+    this.okHttpClientConfigurationProperties = okHttpClientConfigurationProperties;\n+  }\n+\n+  /**\n+   * Returns whether or not the provider supports the provided url.\n+   *\n+   * @param baseUrl url\n+   * @return true if supports the url given\n+   */\n+  public abstract Boolean supports(String baseUrl);\n+\n+  /** Allows custom implementations to adjust the url before making a call. */\n+  public String getNormalizedUrl(String baseUrl) {\n+    return baseUrl;\n+  }\n+\n+  /**\n+   * Apply host name verifier for the provided url\n+   *\n+   * @param builder builder to operate on\n+   * @param baseUrl url\n+   * @return the builder.\n+   */\n+  public OkHttpClient.Builder applyHostNameVerifier(OkHttpClient.Builder builder, String baseUrl) {\n+    // Concrete impls will override.\n+    return builder;\n+  }\n+\n+  /**\n+   * Creates a new OkHttpClient Builder from the client. The generated client builder is not set to\n+   * talk to any endpoint and it just constructs a bare minimum client\n+   */\n+  public OkHttpClient.Builder create() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5e5aa7aa632185b0bfe6ac58c20bd6309ef7772"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODU2NTc1", "url": "https://github.com/spinnaker/kork/pull/639#pullrequestreview-407856575", "createdAt": "2020-05-07T21:39:36Z", "commit": {"oid": "f5e5aa7aa632185b0bfe6ac58c20bd6309ef7772"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTozOTozNlrOGSRQ1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTozOTozNlrOGSRQ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgxMDM4OQ==", "bodyText": "Same comment as above.", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r421810389", "createdAt": "2020-05-07T21:39:36Z", "author": {"login": "jonsie"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.okhttp;\n+\n+import okhttp3.OkHttpClient;\n+\n+public abstract class OkHttpClientBuilderProvider {\n+\n+  private final OkHttpClient okHttpClient;\n+  private final OkHttpClientConfigurationProperties okHttpClientConfigurationProperties;\n+\n+  public OkHttpClientBuilderProvider(\n+      OkHttpClient okHttpClient,\n+      OkHttpClientConfigurationProperties okHttpClientConfigurationProperties) {\n+    this.okHttpClient = okHttpClient;\n+    this.okHttpClientConfigurationProperties = okHttpClientConfigurationProperties;\n+  }\n+\n+  /**\n+   * Returns whether or not the provider supports the provided url.\n+   *\n+   * @param baseUrl url\n+   * @return true if supports the url given\n+   */\n+  public abstract Boolean supports(String baseUrl);\n+\n+  /** Allows custom implementations to adjust the url before making a call. */\n+  public String getNormalizedUrl(String baseUrl) {\n+    return baseUrl;\n+  }\n+\n+  /**\n+   * Apply host name verifier for the provided url\n+   *\n+   * @param builder builder to operate on\n+   * @param baseUrl url\n+   * @return the builder.\n+   */\n+  public OkHttpClient.Builder applyHostNameVerifier(OkHttpClient.Builder builder, String baseUrl) {\n+    // Concrete impls will override.\n+    return builder;\n+  }\n+\n+  /**\n+   * Creates a new OkHttpClient Builder from the client. The generated client builder is not set to\n+   * talk to any endpoint and it just constructs a bare minimum client\n+   */\n+  public OkHttpClient.Builder create() {\n+    return okHttpClient.newBuilder();\n+  }\n+\n+  public OkHttpClient.Builder create(String url) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5e5aa7aa632185b0bfe6ac58c20bd6309ef7772"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "305fdceec04ac5ed30289025d5c0648a492a9a49", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/305fdceec04ac5ed30289025d5c0648a492a9a49", "committedDate": "2020-05-07T21:41:22Z", "message": "fix(misc):pass in interceptor list"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "038d272928431c544e2b6a6a274feb0e0ce26213", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/038d272928431c544e2b6a6a274feb0e0ce26213", "committedDate": "2020-05-08T04:34:27Z", "message": "feat(misc): rename the default impl for client provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68e671da9b356a59d0eecd36c7760b6a95a1a419", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/68e671da9b356a59d0eecd36c7760b6a95a1a419", "committedDate": "2020-05-08T04:44:20Z", "message": "feat(misc): rename the default impl for client provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "159fda6c6510495d41959e1f80cd72a822a36b72", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/159fda6c6510495d41959e1f80cd72a822a36b72", "committedDate": "2020-05-08T05:00:21Z", "message": "Merge branch 'master' into client_prov"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MzQwMDk0", "url": "https://github.com/spinnaker/kork/pull/639#pullrequestreview-408340094", "createdAt": "2020-05-08T15:57:08Z", "commit": {"oid": "159fda6c6510495d41959e1f80cd72a822a36b72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNTo1NzowOFrOGSqiPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNTo1NzowOFrOGSqiPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyNDQ0Nw==", "bodyText": "would it be worth grabbing something like the Service object from gate, and making that the thing passed to this builder?\nIt feels like as it stands if you wanted some sort of switching behavior based on the URL you would need to encode the configuration of that into the URL itself (which is why we then have to normalize it back to the actual URL).\nMaybe the config could just come along in a dedicated object?", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r422224447", "createdAt": "2020-05-08T15:57:08Z", "author": {"login": "cfieber"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.config.okhttp3;\n+\n+import okhttp3.OkHttpClient;\n+\n+public interface OkHttpClientBuilderProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "159fda6c6510495d41959e1f80cd72a822a36b72"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d5c1cbf8686e56ecdef8470fbbcf5f5eef3e702", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/7d5c1cbf8686e56ecdef8470fbbcf5f5eef3e702", "committedDate": "2020-05-08T22:31:59Z", "message": "fix(misc): Add a concrete definition for a service that we pass around during client construction (similar to what we have in gate today)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTczMjMw", "url": "https://github.com/spinnaker/kork/pull/639#pullrequestreview-408573230", "createdAt": "2020-05-08T23:08:27Z", "commit": {"oid": "7d5c1cbf8686e56ecdef8470fbbcf5f5eef3e702"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzowODoyN1rOGS2G5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzowODoyN1rOGS2G5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxNDA1NA==", "bodyText": "I'm not totally sure we should lift this entire structure out of gate - there is a lot of stuff in here that seems overly specific and that we won't use generically in all the services.\nMaybe just a Service interface but not the opinion on how to map that class from configuration (at least to start with)\nAnd maybe all the Service interface has to supply out of the box is a getUrl method.\nFor our internal needs we can extend that to something that includes additional configuration.", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r422414054", "createdAt": "2020-05-08T23:08:27Z", "author": {"login": "cfieber"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/ServiceConfigurationProperties.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties\n+public class ServiceConfigurationProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d5c1cbf8686e56ecdef8470fbbcf5f5eef3e702"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dec7093b3e62fe9033540862062a40e790cfbe00", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/dec7093b3e62fe9033540862062a40e790cfbe00", "committedDate": "2020-05-09T04:24:59Z", "message": "fix(misc): Remove Service configuration obj and use value obj to describe a service endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba44b5087cd88a6d9bfffe764999e1b5d0fa3dce", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/ba44b5087cd88a6d9bfffe764999e1b5d0fa3dce", "committedDate": "2020-05-09T18:53:45Z", "message": "fix(misc): clean up interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c297dfa7ff1809184098ab86d3541da1ec94551b", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/c297dfa7ff1809184098ab86d3541da1ec94551b", "committedDate": "2020-05-09T19:19:45Z", "message": "fix(misc): java doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NDEwMjI0", "url": "https://github.com/spinnaker/kork/pull/639#pullrequestreview-409410224", "createdAt": "2020-05-11T18:10:39Z", "commit": {"oid": "c297dfa7ff1809184098ab86d3541da1ec94551b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODoxMDo0MFrOGTno5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODoxMDo0MFrOGTno5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNTU3NA==", "bodyText": "We could use the spring @ordered annotation on instances of these providers in which case the list of providers here comes in priority order", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423225574", "createdAt": "2020-05-11T18:10:40Z", "author": {"login": "cfieber"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.config.okhttp3;\n+\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+import okhttp3.OkHttpClient;\n+\n+public interface OkHttpClientBuilderProvider {\n+\n+  /**\n+   * Returns whether or not the provider supports the provided service endpoint.\n+   *\n+   * @param service service configuration\n+   * @return true if supports the url given\n+   */\n+  default Boolean supports(ServiceEndpoint service) {\n+    return service.getBaseUrl().startsWith(\"http://\")\n+        || service.getBaseUrl().startsWith(\"https://\");\n+  }\n+\n+  /**\n+   * Creates a new and customized {@link OkHttpClient.Builder} for the provided service.\n+   *\n+   * @param service service config\n+   * @return the builder\n+   */\n+  OkHttpClient.Builder get(ServiceEndpoint service);\n+\n+  /**\n+   * Decides the order in which this provider is consulted.\n+   *\n+   * @return the assigned priority\n+   */\n+  Integer priority();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c297dfa7ff1809184098ab86d3541da1ec94551b"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NDEwODg4", "url": "https://github.com/spinnaker/kork/pull/639#pullrequestreview-409410888", "createdAt": "2020-05-11T18:11:31Z", "commit": {"oid": "c297dfa7ff1809184098ab86d3541da1ec94551b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NDA3NjU3", "url": "https://github.com/spinnaker/kork/pull/639#pullrequestreview-409407657", "createdAt": "2020-05-11T18:06:57Z", "commit": {"oid": "c297dfa7ff1809184098ab86d3541da1ec94551b"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODowNjo1N1rOGTngyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODoxNDoyN1rOGTnxBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMzQ5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /** Represents an service endpoint URL and name. */\n          \n          \n            \n            /** Represents a service endpoint URL and name. */", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423223497", "createdAt": "2020-05-11T18:06:57Z", "author": {"login": "robzienert"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/DefaultServiceEndpoint.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+/** Represents an service endpoint URL and name. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c297dfa7ff1809184098ab86d3541da1ec94551b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMzY1Ng==", "bodyText": "Docs on interface. What is this for? How is it used?", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423223656", "createdAt": "2020-05-11T18:07:12Z", "author": {"login": "robzienert"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/ServiceEndpoint.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+public interface ServiceEndpoint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c297dfa7ff1809184098ab86d3541da1ec94551b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNDg2Ng==", "bodyText": "Shouldn't this be an int? I see the code doesn't handle nullability. Would a default value also be useful?", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423224866", "createdAt": "2020-05-11T18:09:19Z", "author": {"login": "robzienert"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.config.okhttp3;\n+\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+import okhttp3.OkHttpClient;\n+\n+public interface OkHttpClientBuilderProvider {\n+\n+  /**\n+   * Returns whether or not the provider supports the provided service endpoint.\n+   *\n+   * @param service service configuration\n+   * @return true if supports the url given\n+   */\n+  default Boolean supports(ServiceEndpoint service) {\n+    return service.getBaseUrl().startsWith(\"http://\")\n+        || service.getBaseUrl().startsWith(\"https://\");\n+  }\n+\n+  /**\n+   * Creates a new and customized {@link OkHttpClient.Builder} for the provided service.\n+   *\n+   * @param service service config\n+   * @return the builder\n+   */\n+  OkHttpClient.Builder get(ServiceEndpoint service);\n+\n+  /**\n+   * Decides the order in which this provider is consulted.\n+   *\n+   * @return the assigned priority\n+   */\n+  Integer priority();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c297dfa7ff1809184098ab86d3541da1ec94551b"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNTA0MA==", "bodyText": "Would like to see docs on all interfaces. Purpose, usage, etc.", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423225040", "createdAt": "2020-05-11T18:09:41Z", "author": {"login": "robzienert"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.config.okhttp3;\n+\n+import okhttp3.OkHttpClient;\n+\n+public interface OkHttpClientBuilderProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyNDQ0Nw=="}, "originalCommit": {"oid": "159fda6c6510495d41959e1f80cd72a822a36b72"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNTk4MQ==", "bodyText": "Are these methods actually returning nullable types? If not, @Nonnull. Same goes for all of other interfaces: Flag non-null method arguments and return types with @Nonnull where applicable.", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423225981", "createdAt": "2020-05-11T18:11:23Z", "author": {"login": "robzienert"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/ServiceEndpoint.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+public interface ServiceEndpoint {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyMzY1Ng=="}, "originalCommit": {"oid": "c297dfa7ff1809184098ab86d3541da1ec94551b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNjUyMQ==", "bodyText": "What's the purpose of this method? Seems leaky to me.", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423226521", "createdAt": "2020-05-11T18:12:20Z", "author": {"login": "robzienert"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/DefaultOkHttpClientBuilderProvider.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.config.okhttp3;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+import static java.lang.String.format;\n+\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+import com.netflix.spinnaker.kork.exceptions.SystemException;\n+import com.netflix.spinnaker.okhttp.OkHttpClientConfigurationProperties;\n+import java.io.FileInputStream;\n+import java.security.KeyStore;\n+import java.security.SecureRandom;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import javax.net.ssl.X509TrustManager;\n+import okhttp3.CipherSuite;\n+import okhttp3.ConnectionSpec;\n+import okhttp3.OkHttpClient;\n+import okhttp3.TlsVersion;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DefaultOkHttpClientBuilderProvider implements OkHttpClientBuilderProvider {\n+\n+  private static final Logger log =\n+      LoggerFactory.getLogger(DefaultOkHttpClientBuilderProvider.class);\n+\n+  private final OkHttpClient okHttpClient;\n+  private final OkHttpClientConfigurationProperties okHttpClientConfigurationProperties;\n+\n+  @Autowired\n+  public DefaultOkHttpClientBuilderProvider(\n+      OkHttpClient okHttpClient,\n+      OkHttpClientConfigurationProperties okHttpClientConfigurationProperties) {\n+    this.okHttpClient = okHttpClient;\n+    this.okHttpClientConfigurationProperties = okHttpClientConfigurationProperties;\n+  }\n+\n+  @Override\n+  public OkHttpClient.Builder get(ServiceEndpoint service) {\n+    OkHttpClient.Builder builder = okHttpClient.newBuilder();\n+    setSSLSocketFactory(builder, service);\n+    applyConnectionSpecs(builder);\n+    return builder;\n+  }\n+\n+  @Override\n+  public Integer priority() {\n+    return 0;\n+  }\n+\n+  protected OkHttpClient.Builder setSSLSocketFactory(\n+      OkHttpClient.Builder builder, ServiceEndpoint service) {\n+\n+    if (okHttpClientConfigurationProperties.getKeyStore() == null\n+        && okHttpClientConfigurationProperties.getTrustStore() == null) {\n+      return builder;\n+    }\n+\n+    try {\n+      KeyManagerFactory keyManagerFactory =\n+          KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+      KeyStore ks = KeyStore.getInstance(okHttpClientConfigurationProperties.getKeyStoreType());\n+      ks.load(\n+          new FileInputStream(okHttpClientConfigurationProperties.getKeyStore()),\n+          okHttpClientConfigurationProperties.getKeyStorePassword().toCharArray());\n+      keyManagerFactory.init(\n+          ks, okHttpClientConfigurationProperties.getKeyStorePassword().toCharArray());\n+\n+      TrustManagerFactory trustManagerFactory =\n+          TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+      KeyStore ts = KeyStore.getInstance(okHttpClientConfigurationProperties.getTrustStoreType());\n+      ts.load(\n+          new FileInputStream(okHttpClientConfigurationProperties.getTrustStore()),\n+          okHttpClientConfigurationProperties.getTrustStorePassword().toCharArray());\n+      trustManagerFactory.init(ts);\n+\n+      SecureRandom secureRandom =\n+          SecureRandom.getInstance(\n+              okHttpClientConfigurationProperties.getSecureRandomInstanceType());\n+      SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n+      sslContext.init(\n+          keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), secureRandom);\n+      TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n+      checkState(\n+          trustManagers.length == 1, \"Found multiple trust managers; don't know which one to use\");\n+      checkState(\n+          trustManagers[0] instanceof X509TrustManager,\n+          \"Configured TrustManager is a %s, not an X509TrustManager; don't know how to configure it\",\n+          trustManagers[0].getClass().getSimpleName());\n+      builder.sslSocketFactory(sslContext.getSocketFactory(), (X509TrustManager) trustManagers[0]);\n+    } catch (Exception e) {\n+      log.error(\"Unable to set ssl socket factory for {}\", service.getBaseUrl(), e);\n+      throw new SystemException(\n+          format(\"Unable to set ssl socket factory for (%s)\", service.getBaseUrl()), e);\n+    }\n+\n+    return builder;\n+  }\n+\n+  protected OkHttpClient.Builder applyConnectionSpecs(OkHttpClient.Builder builder) {\n+\n+    ConnectionSpec.Builder connectionSpecBuilder =\n+        new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS);\n+    if (okHttpClientConfigurationProperties.getCipherSuites() != null) {\n+      connectionSpecBuilder.cipherSuites(\n+          okHttpClientConfigurationProperties.getCipherSuites().toArray(new String[0]));\n+    } else {\n+      connectionSpecBuilder.cipherSuites(\n+          Objects.requireNonNull(ConnectionSpec.MODERN_TLS.cipherSuites()).stream()\n+              .map(CipherSuite::javaName)\n+              .toArray(String[]::new));\n+    }\n+\n+    if (okHttpClientConfigurationProperties.getTlsVersions() != null) {\n+      connectionSpecBuilder.tlsVersions(\n+          okHttpClientConfigurationProperties.getTlsVersions().toArray(new String[0]));\n+    } else {\n+      connectionSpecBuilder.tlsVersions(\n+          Objects.requireNonNull(ConnectionSpec.MODERN_TLS.tlsVersions()).stream()\n+              .map(TlsVersion::javaName)\n+              .toArray(String[]::new));\n+    }\n+\n+    ConnectionSpec connectionSpec = connectionSpecBuilder.build();\n+\n+    return builder.connectionSpecs(Arrays.asList(connectionSpec, ConnectionSpec.CLEARTEXT));\n+  }\n+\n+  public OkHttpClient getOkHttpClient() {\n+    return okHttpClient;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c297dfa7ff1809184098ab86d3541da1ec94551b"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNzA0Ng==", "bodyText": "nit: This can be shortened to .orElseThrow(() -> new SystemException(\"...\"));", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423227046", "createdAt": "2020-05-11T18:13:17Z", "author": {"login": "robzienert"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/OkHttpClientProvider.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config.okhttp3;\n+\n+import static java.lang.String.format;\n+\n+import com.netflix.spinnaker.config.DefaultServiceEndpoint;\n+import com.netflix.spinnaker.kork.exceptions.SystemException;\n+import java.util.Comparator;\n+import java.util.List;\n+import okhttp3.OkHttpClient;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+class OkHttpClientProvider {\n+\n+  private final List<OkHttpClientBuilderProvider> providers;\n+\n+  public OkHttpClientProvider(List<OkHttpClientBuilderProvider> providers) {\n+    this.providers = providers;\n+  }\n+\n+  /**\n+   * Consults the provider impls to decide which provider class can build a client for the given\n+   * service config and delegates to that provider to build a client.\n+   *\n+   * @param service service configuration\n+   * @return okHttpClient\n+   */\n+  OkHttpClient getClient(DefaultServiceEndpoint service) {\n+    OkHttpClientBuilderProvider provider = findProvider(service);\n+    return provider.get(service).build();\n+  }\n+\n+  private OkHttpClientBuilderProvider findProvider(DefaultServiceEndpoint service) {\n+    OkHttpClientBuilderProvider providerImpl =\n+        providers.stream()\n+            .sorted(Comparator.comparingInt(OkHttpClientBuilderProvider::priority).reversed())\n+            .filter(provider -> provider.supports(service))\n+            .findFirst()\n+            .orElse(null);\n+\n+    if (providerImpl == null) {\n+      throw new SystemException(\n+          format(\"No client provider found for url (%s)\", service.getBaseUrl()));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c297dfa7ff1809184098ab86d3541da1ec94551b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNzY1NA==", "bodyText": "If this is truly \"default\" should this factory method include @ConditionalOnMissingBean(OkHttpClient.class)?", "url": "https://github.com/spinnaker/kork/pull/639#discussion_r423227654", "createdAt": "2020-05-11T18:14:27Z", "author": {"login": "robzienert"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/RawOkHttpClientConfiguration.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config.okhttp3;\n+\n+import com.netflix.spinnaker.okhttp.OkHttpClientConfigurationProperties;\n+import java.util.List;\n+import okhttp3.Interceptor;\n+import okhttp3.OkHttpClient;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@EnableConfigurationProperties(OkHttpClientConfigurationProperties.class)\n+class RawOkHttpClientConfiguration {\n+\n+  /**\n+   * Default {@link OkHttpClient} that is correctly configured for service-to-service communication.\n+   */\n+  @Bean\n+  OkHttpClient okHttpClient(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c297dfa7ff1809184098ab86d3541da1ec94551b"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c89cc60530e4aad7f9d554665e7506fc88f6bf17", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/c89cc60530e4aad7f9d554665e7506fc88f6bf17", "committedDate": "2020-05-11T18:22:57Z", "message": "fix(misc): Order the providers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b313e892a270795b9aee2646ca73834ce74c04", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/d7b313e892a270795b9aee2646ca73834ce74c04", "committedDate": "2020-05-11T19:00:25Z", "message": "fix(misc): Order the providers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NDYwNzMz", "url": "https://github.com/spinnaker/kork/pull/639#pullrequestreview-409460733", "createdAt": "2020-05-11T19:21:07Z", "commit": {"oid": "d7b313e892a270795b9aee2646ca73834ce74c04"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3c8e5fad1e0367aff7700ed786e23f067c03062", "author": {"user": {"login": "srekapalli", "name": "Sairam Rekapalli"}}, "url": "https://github.com/spinnaker/kork/commit/a3c8e5fad1e0367aff7700ed786e23f067c03062", "committedDate": "2020-05-11T19:48:41Z", "message": "fix(misc): Java doc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1512, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}