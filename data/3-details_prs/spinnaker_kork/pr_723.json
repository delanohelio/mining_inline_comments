{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NTEyMzcy", "number": 723, "title": "feat(plugins): added the SpringLoaderPlugin", "bodyText": "It allows the use of package scanning and Spring Configurations.\nThe ExposeToApp annotation promotes beans to the application context.\nThis is a plugin written using SpringLoaderPlugin: spinnaker-plugin-examples/springExamplePlugin#4", "createdAt": "2020-07-13T21:43:03Z", "url": "https://github.com/spinnaker/kork/pull/723", "merged": true, "mergeCommit": {"oid": "fab18019d31941de9fc6440b339e0bea615e69af"}, "closed": true, "closedAt": "2020-07-16T19:58:41Z", "author": {"login": "claymccoy"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0oc07AH2gAyNDQ4NTEyMzcyOjdmNGY2YmE2ZjU2ODBjZjFmMGViYzNhMjRhOWRkZTQ4MTNjZTNiMWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1kbjogFqTQ1MDE1NDI0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7f4f6ba6f5680cf1f0ebc3a24a9dde4813ce3b1e", "author": {"user": {"login": "claymccoy", "name": "Clay McCoy"}}, "url": "https://github.com/spinnaker/kork/commit/7f4f6ba6f5680cf1f0ebc3a24a9dde4813ce3b1e", "committedDate": "2020-07-13T21:37:50Z", "message": "feat(plugins): added the SpringLoaderPlugin\n\nIt allows the use of package scanning and Spring Configurations.\nThe ExposeToApp annotation promotes beans to the application context.\nThis is a plugin written using SpringLoaderPlugin: https://github.com/spinnaker-plugin-examples/springExamplePlugin/pull/4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e7a3f0c03237d727ffc151c225a5ddba0ef6933", "author": {"user": {"login": "claymccoy", "name": "Clay McCoy"}}, "url": "https://github.com/spinnaker/kork/commit/5e7a3f0c03237d727ffc151c225a5ddba0ef6933", "committedDate": "2020-07-14T17:40:03Z", "message": "Merge branch 'master' into addSpringLoaderPlugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5Mzk3ODY5", "url": "https://github.com/spinnaker/kork/pull/723#pullrequestreview-449397869", "createdAt": "2020-07-15T22:55:29Z", "commit": {"oid": "5e7a3f0c03237d727ffc151c225a5ddba0ef6933"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjo1NToyOVrOGyUFjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjo1NToyOVrOGyUFjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMTA4Ng==", "bodyText": "Does this actually work with multiple plugins? Line 59, we register the SpringLoader bean but the next plugin will also try to do the same. Even in the event that it works, I imagine it wouldn't wait for the package scan of all loaders. Should we instead just register the bean with a unique name (e.g. this.getClass().getName())", "url": "https://github.com/spinnaker/kork/pull/723#discussion_r455411086", "createdAt": "2020-07-15T22:55:29Z", "author": {"login": "ncknt"}, "path": "kork-plugins-spring-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/spring/SpringLoaderPlugin.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Armory, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.api.spring;\n+\n+import com.netflix.spinnaker.kork.annotations.Alpha;\n+import java.util.Collections;\n+import java.util.List;\n+import org.pf4j.PluginWrapper;\n+import org.springframework.beans.factory.config.AutowireCapableBeanFactory;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n+import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+\n+/** Allows a plugin to scan packages for beans and load Spring Configurations. */\n+@Alpha\n+public abstract class SpringLoaderPlugin extends PrivilegedSpringPlugin {\n+\n+  protected AnnotationConfigApplicationContext pluginContext =\n+      new AnnotationConfigApplicationContext();\n+\n+  /**\n+   * Constructor to be used by plugin manager for plugin instantiation. Your plugins have to provide\n+   * constructor with this exact signature to be successfully loaded by manager.\n+   *\n+   * @param wrapper\n+   */\n+  public SpringLoaderPlugin(PluginWrapper wrapper) {\n+    super(wrapper);\n+  }\n+\n+  @Override\n+  public void registerBeanDefinitions(BeanDefinitionRegistry registry) {\n+    ClassLoader pluginClassLoader = getClass().getClassLoader();\n+    BeanDefinition springLoaderBeanDefinition =\n+        BeanDefinitionBuilder.genericBeanDefinition(SpringLoader.class)\n+            .setScope(BeanDefinition.SCOPE_SINGLETON)\n+            .setAutowireMode(AutowireCapableBeanFactory.AUTOWIRE_NO)\n+            .addConstructorArgValue(pluginContext)\n+            .addConstructorArgValue(pluginClassLoader)\n+            .addConstructorArgValue(getPackagesToScan())\n+            .addConstructorArgValue(getClassesToRegister())\n+            .getBeanDefinition();\n+    try {\n+      registerBean(springLoaderBeanDefinition, registry);\n+    } catch (ClassNotFoundException e) {\n+      throw new IllegalStateException(e);\n+    }\n+\n+    // delay controller mapping until after the plugin has a chance to load its own controllers\n+    registry\n+        .getBeanDefinition(\"requestMappingHandlerMapping\")\n+        .setDependsOn(\"com.netflix.spinnaker.kork.plugins.api.spring.SpringLoader\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7a3f0c03237d727ffc151c225a5ddba0ef6933"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NTM4NzQw", "url": "https://github.com/spinnaker/kork/pull/723#pullrequestreview-449538740", "createdAt": "2020-07-16T06:26:41Z", "commit": {"oid": "5e7a3f0c03237d727ffc151c225a5ddba0ef6933"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjoyNjo0MVrOGybykA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjoyNjo0MVrOGybykA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzNzI5Ng==", "bodyText": "Do you see a use for a standalone PrivilegedSpringPlugin or should this be consolidated into one class?", "url": "https://github.com/spinnaker/kork/pull/723#discussion_r455537296", "createdAt": "2020-07-16T06:26:41Z", "author": {"login": "jonsie"}, "path": "kork-plugins-spring-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/spring/SpringLoaderPlugin.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Armory, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.api.spring;\n+\n+import com.netflix.spinnaker.kork.annotations.Alpha;\n+import java.util.Collections;\n+import java.util.List;\n+import org.pf4j.PluginWrapper;\n+import org.springframework.beans.factory.config.AutowireCapableBeanFactory;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n+import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+\n+/** Allows a plugin to scan packages for beans and load Spring Configurations. */\n+@Alpha\n+public abstract class SpringLoaderPlugin extends PrivilegedSpringPlugin {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e7a3f0c03237d727ffc151c225a5ddba0ef6933"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91e0650f5c818ae1dad06d93faa90bd91a4013ef", "author": {"user": {"login": "claymccoy", "name": "Clay McCoy"}}, "url": "https://github.com/spinnaker/kork/commit/91e0650f5c818ae1dad06d93faa90bd91a4013ef", "committedDate": "2020-07-16T15:38:21Z", "message": "namespace SpringLoader bean name with pluginID\n\nThis allows multiple SpringLoaderPlugins to load without conflicting. Also had to beef up the dependency setting on request mapping to make sure the other plugins don't overwrite it."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e86c13cdd41612d46768b026a6a73d526aefb2ea", "author": {"user": {"login": "claymccoy", "name": "Clay McCoy"}}, "url": "https://github.com/spinnaker/kork/commit/e86c13cdd41612d46768b026a6a73d526aefb2ea", "committedDate": "2020-07-16T15:38:51Z", "message": "Merge branch 'master' into addSpringLoaderPlugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66366bebe867ac721ca586cc82c8c8fbfc5dc421", "author": {"user": {"login": "claymccoy", "name": "Clay McCoy"}}, "url": "https://github.com/spinnaker/kork/commit/66366bebe867ac721ca586cc82c8c8fbfc5dc421", "committedDate": "2020-07-16T15:49:20Z", "message": "fix unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMTU0MjQ3", "url": "https://github.com/spinnaker/kork/pull/723#pullrequestreview-450154247", "createdAt": "2020-07-16T19:30:45Z", "commit": {"oid": "66366bebe867ac721ca586cc82c8c8fbfc5dc421"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1443, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}