{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NzA2MDEz", "number": 712, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjo1ODo0MVrOEM-r8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjo1ODo0MVrOEM-r8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDQ1NDI0OnYy", "diffSide": "RIGHT", "path": "kork-sql/src/main/kotlin/com/netflix/spinnaker/kork/sql/config/DefaultSqlConfiguration.kt", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjo1ODo0MVrOGvZ5Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMTowMTowNFrOGvhpmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2MDU0Mw==", "bodyText": "I tend to prefer @ConditionalOnProperty(value = \"sql.read-only\", havingValue = \"false\", matchIfMissing = true) since it more clearly shows which properties are being used and hopefully one day we can get some tooling to help generate some property documentation...", "url": "https://github.com/spinnaker/kork/pull/712#discussion_r452360543", "createdAt": "2020-07-09T16:58:41Z", "author": {"login": "cfieber"}, "path": "kork-sql/src/main/kotlin/com/netflix/spinnaker/kork/sql/config/DefaultSqlConfiguration.kt", "diffHunk": "@@ -64,11 +65,13 @@ class DefaultSqlConfiguration {\n \n   @Bean\n   @ConditionalOnMissingBean(SpringLiquibase::class)\n+  @ConditionalOnExpression(\"\\${sql.read-only:false} == false\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49aaaf7f625f6008ccf3b29d6cbc88772494d17f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4MDMxMQ==", "bodyText": "I actually wrote that first, but I changed it to a ConditionalOnExpression because I can't nest multiple ConditionalOnProperty annotations without creating a new AllNestedConditions meta-annotation (needed for the secondaryLiquibase bean below)", "url": "https://github.com/spinnaker/kork/pull/712#discussion_r452380311", "createdAt": "2020-07-09T17:33:06Z", "author": {"login": "jervi"}, "path": "kork-sql/src/main/kotlin/com/netflix/spinnaker/kork/sql/config/DefaultSqlConfiguration.kt", "diffHunk": "@@ -64,11 +65,13 @@ class DefaultSqlConfiguration {\n \n   @Bean\n   @ConditionalOnMissingBean(SpringLiquibase::class)\n+  @ConditionalOnExpression(\"\\${sql.read-only:false} == false\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2MDU0Mw=="}, "originalCommit": {"oid": "49aaaf7f625f6008ccf3b29d6cbc88772494d17f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4MDY3MA==", "bodyText": "WDYT? Should I create a new annotation just for this purpose?", "url": "https://github.com/spinnaker/kork/pull/712#discussion_r452380670", "createdAt": "2020-07-09T17:33:49Z", "author": {"login": "jervi"}, "path": "kork-sql/src/main/kotlin/com/netflix/spinnaker/kork/sql/config/DefaultSqlConfiguration.kt", "diffHunk": "@@ -64,11 +65,13 @@ class DefaultSqlConfiguration {\n \n   @Bean\n   @ConditionalOnMissingBean(SpringLiquibase::class)\n+  @ConditionalOnExpression(\"\\${sql.read-only:false} == false\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2MDU0Mw=="}, "originalCommit": {"oid": "49aaaf7f625f6008ccf3b29d6cbc88772494d17f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NzU3Nw==", "bodyText": "nah, this seems fine in that case, thanks for the explaination", "url": "https://github.com/spinnaker/kork/pull/712#discussion_r452487577", "createdAt": "2020-07-09T21:01:04Z", "author": {"login": "cfieber"}, "path": "kork-sql/src/main/kotlin/com/netflix/spinnaker/kork/sql/config/DefaultSqlConfiguration.kt", "diffHunk": "@@ -64,11 +65,13 @@ class DefaultSqlConfiguration {\n \n   @Bean\n   @ConditionalOnMissingBean(SpringLiquibase::class)\n+  @ConditionalOnExpression(\"\\${sql.read-only:false} == false\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2MDU0Mw=="}, "originalCommit": {"oid": "49aaaf7f625f6008ccf3b29d6cbc88772494d17f"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3448, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}