{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MTc2NDM4", "number": 813, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTo1MTowNlrOEyGgSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTo1MTowNlrOEyGgSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTcwODI2OnYy", "diffSide": "LEFT", "path": "kork-expressions/src/main/kotlin/com/netflix/spinnaker/kork/expressions/ExpressionFunctionProvider.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTo1MTowNlrOHojwKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjoxOTozN1rOHpybyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5MDg1Ng==", "bodyText": "not necessary by any means but do you think it would be worthwhile to leave this here as a deprecated noop interface extending the new ExpressionFunctionProvider in -api?", "url": "https://github.com/spinnaker/kork/pull/813#discussion_r512290856", "createdAt": "2020-10-26T21:51:06Z", "author": {"login": "cfieber"}, "path": "kork-expressions/src/main/kotlin/com/netflix/spinnaker/kork/expressions/ExpressionFunctionProvider.kt", "diffHunk": "@@ -1,151 +0,0 @@\n-/*\n- * Copyright 2019 Netflix, Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.netflix.spinnaker.kork.expressions\n-\n-import org.pf4j.ExtensionPoint\n-\n-/**\n- * Provides a contract for adding new function definitions for SpEL evaluation.\n- *\n- * The SpEL expression evaluator expects the the function implementations are\n- * included in the same concrete class as the [ExpressionFunctionProvider], with\n- * method names matching those defined in the [functions] definitions.\n- *\n- * ```\n- *  class HelloFunctionProvider : ExpressionFunctionProvider {\n- *    override fun getNamespace(): String? = \"netflix\"\n- *    override fun getFunctions(): Functions =\n- *      Functions(\n- *        \"hello\",\n- *        FunctionParameter(\n- *          Execution::class.java,\n- *          \"execution\",\n- *          \"The pipeline execution object that this function is being invoked on\"\n- *        )\n- *      )\n- *\n- *    @JvmStatic\n- *    fun hello(execution: Execution): String =\n- *      \"Hello, ${execution.id}\"\n- *  }\n- * ```\n- *\n- * The above function provider could then be called in a SpEL expression:\n- *\n- * ```\n- * ${netflix.hello()}\n- * ```\n- */\n-interface ExpressionFunctionProvider : ExtensionPoint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f67c17814c6f5d6c2b09e0264433ff1fdb8da477"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3OTk3OQ==", "bodyText": "Oh, good call - yes, I will do that.", "url": "https://github.com/spinnaker/kork/pull/813#discussion_r513579979", "createdAt": "2020-10-28T16:19:37Z", "author": {"login": "robzienert"}, "path": "kork-expressions/src/main/kotlin/com/netflix/spinnaker/kork/expressions/ExpressionFunctionProvider.kt", "diffHunk": "@@ -1,151 +0,0 @@\n-/*\n- * Copyright 2019 Netflix, Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.netflix.spinnaker.kork.expressions\n-\n-import org.pf4j.ExtensionPoint\n-\n-/**\n- * Provides a contract for adding new function definitions for SpEL evaluation.\n- *\n- * The SpEL expression evaluator expects the the function implementations are\n- * included in the same concrete class as the [ExpressionFunctionProvider], with\n- * method names matching those defined in the [functions] definitions.\n- *\n- * ```\n- *  class HelloFunctionProvider : ExpressionFunctionProvider {\n- *    override fun getNamespace(): String? = \"netflix\"\n- *    override fun getFunctions(): Functions =\n- *      Functions(\n- *        \"hello\",\n- *        FunctionParameter(\n- *          Execution::class.java,\n- *          \"execution\",\n- *          \"The pipeline execution object that this function is being invoked on\"\n- *        )\n- *      )\n- *\n- *    @JvmStatic\n- *    fun hello(execution: Execution): String =\n- *      \"Hello, ${execution.id}\"\n- *  }\n- * ```\n- *\n- * The above function provider could then be called in a SpEL expression:\n- *\n- * ```\n- * ${netflix.hello()}\n- * ```\n- */\n-interface ExpressionFunctionProvider : ExtensionPoint {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5MDg1Ng=="}, "originalCommit": {"oid": "f67c17814c6f5d6c2b09e0264433ff1fdb8da477"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3427, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}