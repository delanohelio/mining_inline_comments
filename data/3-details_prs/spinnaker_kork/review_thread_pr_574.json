{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MzY2NDA5", "number": 574, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToxMTo1MFrODry4Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMTowMDoxMFrODr1OlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjQ4OTgzOnYy", "diffSide": "RIGHT", "path": "kork-telemetry/src/main/java/com/netflix/spinnaker/kork/telemetry/InstrumentedProxy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToxMTo1MFrOF8WcVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxOToxMTo1MFrOF8WcVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgyNjU4MA==", "bodyText": "This conditional was also incorrect. Just above, the method is added to seenMethods, so this would never evaluate to true.", "url": "https://github.com/spinnaker/kork/pull/574#discussion_r398826580", "createdAt": "2020-03-26T19:11:50Z", "author": {"login": "robzienert"}, "path": "kork-telemetry/src/main/java/com/netflix/spinnaker/kork/telemetry/InstrumentedProxy.java", "diffHunk": "@@ -177,7 +178,7 @@ private MethodMetrics getMethodMetrics(Method method) {\n         }\n       }\n \n-      if (!processed && !instrumentedMethods.containsKey(method) && !seenMethods.contains(method)) {\n+      if (!processed && !instrumentedMethods.containsKey(method)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bdf7beeda5cdd5ba4ad8983e570cfa55c54b554"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Mjg3NDQ0OnYy", "diffSide": "RIGHT", "path": "kork-telemetry/src/main/java/com/netflix/spinnaker/kork/telemetry/InstrumentedProxy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMTowMDoxMFrOF8aM5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMTowNzowNVrOF8agvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4ODE2Nw==", "bodyText": "Not sure if actually treating existingMethodMetrics as a ConcurrentHashMap and using the putIfAbsent semantics would be better/prefable.\nIn theory that would allow you to avoid this collision check and just safely use what pre-exists.", "url": "https://github.com/spinnaker/kork/pull/574#discussion_r398888167", "createdAt": "2020-03-26T21:00:10Z", "author": {"login": "ajordens"}, "path": "kork-telemetry/src/main/java/com/netflix/spinnaker/kork/telemetry/InstrumentedProxy.java", "diffHunk": "@@ -208,12 +209,10 @@ private void addInstrumentedMethod(\n     }\n \n     for (Map.Entry<Method, MethodMetrics> existingMethodMetric : existingMethodMetrics.entrySet()) {\n-      if (existingMethodMetric\n-          .getValue()\n-          .invocationsId\n-          .name()\n-          .equals(methodMetrics.invocationsId.name())) {\n-        throw new MetricNameCollisionException(target, existingMethodMetric.getKey(), method);\n+      String invocationsIdMetricName = existingMethodMetric.getValue().invocationsId.name();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bdf7beeda5cdd5ba4ad8983e570cfa55c54b554"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5MzI0NQ==", "bodyText": "Ah, yes true. I will change. It'll still need to be a CHM, though.", "url": "https://github.com/spinnaker/kork/pull/574#discussion_r398893245", "createdAt": "2020-03-26T21:07:05Z", "author": {"login": "robzienert"}, "path": "kork-telemetry/src/main/java/com/netflix/spinnaker/kork/telemetry/InstrumentedProxy.java", "diffHunk": "@@ -208,12 +209,10 @@ private void addInstrumentedMethod(\n     }\n \n     for (Map.Entry<Method, MethodMetrics> existingMethodMetric : existingMethodMetrics.entrySet()) {\n-      if (existingMethodMetric\n-          .getValue()\n-          .invocationsId\n-          .name()\n-          .equals(methodMetrics.invocationsId.name())) {\n-        throw new MetricNameCollisionException(target, existingMethodMetric.getKey(), method);\n+      String invocationsIdMetricName = existingMethodMetric.getValue().invocationsId.name();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4ODE2Nw=="}, "originalCommit": {"oid": "5bdf7beeda5cdd5ba4ad8983e570cfa55c54b554"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3634, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}