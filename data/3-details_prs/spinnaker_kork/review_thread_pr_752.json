{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMzg1OTIw", "number": 752, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTozMTo1N1rOEaHt8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODo0NTowM1rOEbEdwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODI0ODgyOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/ExtensionPromotionBeanPostProcessor.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTozMTo1N1rOHDWJPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDo0MTozOVrOHDi96w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3MDU4OQ==", "bodyText": "I'm wondering what happens if someone creates in the plugin classes MyExtensionImpl that implements a defined extension point MyExtension, since the bean class is MyExtensionImpl and only known to the plugin classloader, is spring able to resolve that the bean is an instance of MyExtension?\nI'm sort of wondering if this needs to register the bean class as the MyExtension class instead - but I have no idea whether this is an issue or not", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473270589", "createdAt": "2020-08-19T19:31:57Z", "author": {"login": "cfieber"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/ExtensionPromotionBeanPostProcessor.kt", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2\n+\n+import com.netflix.spinnaker.kork.plugins.api.internal.SpinnakerExtensionPoint\n+import org.pf4j.PluginWrapper\n+import org.slf4j.LoggerFactory\n+import org.springframework.beans.factory.config.BeanPostProcessor\n+import org.springframework.context.support.GenericApplicationContext\n+import org.springframework.core.Ordered\n+import org.springframework.core.PriorityOrdered\n+import org.springframework.util.Assert\n+\n+/**\n+ * Handles promotion of plugin beans to the parent service application context.\n+ *\n+ * Only beans that implement [SpinnakerExtensionPoint] are candidates for promotion.\n+ */\n+class ExtensionPromotionBeanPostProcessor(\n+  private val pluginWrapper: PluginWrapper,\n+  private val pluginApplicationContext: GenericApplicationContext,\n+  private val beanPromoter: BeanPromoter\n+) : BeanPostProcessor, PriorityOrdered {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun postProcessAfterInitialization(bean: Any, beanName: String): Any? {\n+    val definition = pluginApplicationContext.getBeanDefinition(beanName)\n+\n+    Assert.notNull(definition.beanClassName, \"Bean class name is null\")\n+\n+    val beanClass = getBeanClass(definition.beanClassName!!)\n+    if (SpinnakerExtensionPoint::class.java.isAssignableFrom(beanClass)) {\n+      log.debug(\"Promoting plugin extension to service context (${pluginWrapper.pluginId}): $beanClass\")\n+      beanPromoter.promote(\"${pluginWrapper.pluginId}_${beanName}\", bean, beanClass)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4MDY4Mw==", "bodyText": "It seems to work fine. The BeanPromoter does register both the bean instance, as well as the class, with the parent bean factory.", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473480683", "createdAt": "2020-08-20T00:41:39Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/ExtensionPromotionBeanPostProcessor.kt", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2\n+\n+import com.netflix.spinnaker.kork.plugins.api.internal.SpinnakerExtensionPoint\n+import org.pf4j.PluginWrapper\n+import org.slf4j.LoggerFactory\n+import org.springframework.beans.factory.config.BeanPostProcessor\n+import org.springframework.context.support.GenericApplicationContext\n+import org.springframework.core.Ordered\n+import org.springframework.core.PriorityOrdered\n+import org.springframework.util.Assert\n+\n+/**\n+ * Handles promotion of plugin beans to the parent service application context.\n+ *\n+ * Only beans that implement [SpinnakerExtensionPoint] are candidates for promotion.\n+ */\n+class ExtensionPromotionBeanPostProcessor(\n+  private val pluginWrapper: PluginWrapper,\n+  private val pluginApplicationContext: GenericApplicationContext,\n+  private val beanPromoter: BeanPromoter\n+) : BeanPostProcessor, PriorityOrdered {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun postProcessAfterInitialization(bean: Any, beanName: String): Any? {\n+    val definition = pluginApplicationContext.getBeanDefinition(beanName)\n+\n+    Assert.notNull(definition.beanClassName, \"Bean class name is null\")\n+\n+    val beanClass = getBeanClass(definition.beanClassName!!)\n+    if (SpinnakerExtensionPoint::class.java.isAssignableFrom(beanClass)) {\n+      log.debug(\"Promoting plugin extension to service context (${pluginWrapper.pluginId}): $beanClass\")\n+      beanPromoter.promote(\"${pluginWrapper.pluginId}_${beanName}\", bean, beanClass)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3MDU4OQ=="}, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODkxMDAyOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/testplugin/GeneratedPluginFixture.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxNjoxOVrOHDcvoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzo0NzozNlrOHEMwlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3ODcyMA==", "bodyText": "I wonder if there is an opportunity here to unify what we have in kork-plugins-tck.  We don't actually use TestPluginBuilder there, but instead use PluginJar and PluginZip.  Here's an example (and we also have examples in Orca, Echo, and Gate):\nhttps://github.com/spinnaker/kork/blob/master/kork-plugins-tck/src/test/kotlin/com/spinnaker/netflix/kork/plugins/tck/PluginsTckFixtureTest.kt#L73", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473378720", "createdAt": "2020-08-19T22:16:19Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/testplugin/GeneratedPluginFixture.kt", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.testplugin\n+\n+import com.netflix.spinnaker.config.PluginsAutoConfiguration\n+import com.netflix.spinnaker.kork.plugins.FRAMEWORK_V2\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginDescriptor\n+import com.netflix.spinnaker.kork.plugins.finders.SpinnakerPropertiesPluginDescriptorFinder\n+import com.netflix.spinnaker.kork.plugins.internal.TestPlugin\n+import org.springframework.boot.autoconfigure.AutoConfigurations\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner\n+import java.nio.file.Files\n+import java.nio.file.Path\n+\n+/**\n+ * Standard fixture for tests that need to generate a plugin.\n+ *\n+ * It is recommended to create a companion object to wrap this fixture so that a new plugin is\n+ * not generated for each test case.\n+ */\n+class GeneratedPluginFixture(pluginName: String, builder: TestPluginBuilder.() -> Unit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4MTMwMQ==", "bodyText": "Probably would be a good move. You're thinking of this for service owners, not plugin developers, right?", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473481301", "createdAt": "2020-08-20T00:42:40Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/testplugin/GeneratedPluginFixture.kt", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.testplugin\n+\n+import com.netflix.spinnaker.config.PluginsAutoConfiguration\n+import com.netflix.spinnaker.kork.plugins.FRAMEWORK_V2\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginDescriptor\n+import com.netflix.spinnaker.kork.plugins.finders.SpinnakerPropertiesPluginDescriptorFinder\n+import com.netflix.spinnaker.kork.plugins.internal.TestPlugin\n+import org.springframework.boot.autoconfigure.AutoConfigurations\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner\n+import java.nio.file.Files\n+import java.nio.file.Path\n+\n+/**\n+ * Standard fixture for tests that need to generate a plugin.\n+ *\n+ * It is recommended to create a companion object to wrap this fixture so that a new plugin is\n+ * not generated for each test case.\n+ */\n+class GeneratedPluginFixture(pluginName: String, builder: TestPluginBuilder.() -> Unit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3ODcyMA=="}, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2NTM5Ng==", "bodyText": "Yeah, kork-plugins-tck is used in services.  Though, it could be used in the framework too.  I think the plugin developer testing stuff would be a different library.", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474165396", "createdAt": "2020-08-20T17:47:36Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/testplugin/GeneratedPluginFixture.kt", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.testplugin\n+\n+import com.netflix.spinnaker.config.PluginsAutoConfiguration\n+import com.netflix.spinnaker.kork.plugins.FRAMEWORK_V2\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginDescriptor\n+import com.netflix.spinnaker.kork.plugins.finders.SpinnakerPropertiesPluginDescriptorFinder\n+import com.netflix.spinnaker.kork.plugins.internal.TestPlugin\n+import org.springframework.boot.autoconfigure.AutoConfigurations\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner\n+import java.nio.file.Files\n+import java.nio.file.Path\n+\n+/**\n+ * Standard fixture for tests that need to generate a plugin.\n+ *\n+ * It is recommended to create a companion object to wrap this fixture so that a new plugin is\n+ * not generated for each test case.\n+ */\n+class GeneratedPluginFixture(pluginName: String, builder: TestPluginBuilder.() -> Unit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3ODcyMA=="}, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDA3MjI5OnYy", "diffSide": "RIGHT", "path": "kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/PluginComponent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDowMjowMFrOHDosNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDowMjowMFrOHDosNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3NDQ1NA==", "bodyText": "nit: single imports.", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473574454", "createdAt": "2020-08-20T04:02:00Z", "author": {"login": "luispollo"}, "path": "kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/PluginComponent.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.api;\n+\n+import com.netflix.spinnaker.kork.annotations.Beta;\n+\n+import java.lang.annotation.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDA3NzA3OnYy", "diffSide": "RIGHT", "path": "kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/PluginComponent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDowNDo0MVrOHDou_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDowNDo0MVrOHDou_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3NTE2NA==", "bodyText": "The second part of this comment seems to be more encompassing than what's on line 23. Worth reconciling?", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473575164", "createdAt": "2020-08-20T04:04:41Z", "author": {"login": "luispollo"}, "path": "kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/PluginComponent.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.api;\n+\n+import com.netflix.spinnaker.kork.annotations.Beta;\n+\n+import java.lang.annotation.*;\n+\n+/**\n+ * Marks a class within a plugin as one that is candidate for dependency injection.\n+ *\n+ * Classes defined within the plugin, as well as classes exposed via a service's API are valid candidates for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDA4MDQ5OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDowNjoxNVrOHDowwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOToyMjowNlrOHEP3Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3NTYxNw==", "bodyText": "Hmm, are we relaxing the style on star imports? Then I won't nitpick elsewhere. \ud83d\ude42", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473575617", "createdAt": "2020-08-20T04:06:15Z", "author": {"login": "luispollo"}, "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java", "diffHunk": "@@ -20,11 +20,7 @@\n import com.netflix.spinnaker.config.PluginsConfigurationProperties.PluginRepositoryProperties;\n import com.netflix.spinnaker.kork.dynamicconfig.DynamicConfigService;\n import com.netflix.spinnaker.kork.dynamicconfig.SpringDynamicConfigService;\n-import com.netflix.spinnaker.kork.plugins.ExtensionBeanDefinitionRegistryPostProcessor;\n-import com.netflix.spinnaker.kork.plugins.SpinnakerPluginManager;\n-import com.netflix.spinnaker.kork.plugins.SpinnakerServiceVersionManager;\n-import com.netflix.spinnaker.kork.plugins.SpringPluginStatusProvider;\n-import com.netflix.spinnaker.kork.plugins.SpringStrictPluginLoaderStatusProvider;\n+import com.netflix.spinnaker.kork.plugins.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxNjI1NA==", "bodyText": "I'm doing whatever Spotless is doing. \ud83e\udd37", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474216254", "createdAt": "2020-08-20T19:22:06Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java", "diffHunk": "@@ -20,11 +20,7 @@\n import com.netflix.spinnaker.config.PluginsConfigurationProperties.PluginRepositoryProperties;\n import com.netflix.spinnaker.kork.dynamicconfig.DynamicConfigService;\n import com.netflix.spinnaker.kork.dynamicconfig.SpringDynamicConfigService;\n-import com.netflix.spinnaker.kork.plugins.ExtensionBeanDefinitionRegistryPostProcessor;\n-import com.netflix.spinnaker.kork.plugins.SpinnakerPluginManager;\n-import com.netflix.spinnaker.kork.plugins.SpinnakerServiceVersionManager;\n-import com.netflix.spinnaker.kork.plugins.SpringPluginStatusProvider;\n-import com.netflix.spinnaker.kork.plugins.SpringStrictPluginLoaderStatusProvider;\n+import com.netflix.spinnaker.kork.plugins.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3NTYxNw=="}, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDA5NDAxOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/DefaultBeanPromoter.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDoxMjoyMVrOHDo3yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODoyNjo1M1rOHE3Eew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3NzQxOA==", "bodyText": "(Just for my education) I'm curious how this works in the first place (even with PrivilegedSpringPlugin) since plugin classes are loaded in a separate class loader from the service's. Do the class loaders of the parent and the plugin interact in some way?", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473577418", "createdAt": "2020-08-20T04:12:21Z", "author": {"login": "luispollo"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/DefaultBeanPromoter.kt", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2\n+\n+import org.springframework.context.support.GenericApplicationContext\n+\n+/**\n+ * Promotes a given plugin bean to the provided [serviceApplicationContext].\n+ */\n+class DefaultBeanPromoter(\n+  private val serviceApplicationContext: GenericApplicationContext\n+) : BeanPromoter {\n+\n+  override fun promote(beanName: String, bean: Any, beanClass: Class<*>) {\n+    serviceApplicationContext.registerBean(\n+      beanName,\n+      beanClass,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzODg1Nw==", "bodyText": "This is more information than you asked for, but I think we could use a top-to-bottom.\nClassLoader is for loading classes; that is, they load compiled Java classes into the JVM. Once that's done, there's not much for them to do.\nIn Spinnaker's context, the service uses the default system ClassLoader (call it ServiceClassLoader), and then each plugin gets its own PluginClassLoader. PluginClassLoader is a child of the ServiceClassLoader, so whatever classes ServiceClassLoader has available to it, so does the PluginClassLoader. A child ClassLoader will first look to itself for a class it can load, and if it can't, it'll go to its parent and so-on. A parent ClassLoader cannot load classes that are in a child.\nAn object created by ClassLoaderA is going to be able to interact with objects created by ClassLoaderB and vice-versa: It isn't object isolation, it's class isolation. It's just bytecode in a VM, so once the Class is loaded, we're OK to use it wherever. The part where things lead to sadness is when a Class loaded from ClassLoaderA interacts with a Class from ClassLoaderB, both of which use the same dependency (Jackson, Spring, etc.) as part of their contract (an interface or some other public member), but are using different versions and then different bytecodes. In this case, Java cannot reconcile how these two classes can interact because the bytecodes for the contract between these two objects are incompatible.\nGoing back to parent-child relationships of ClassLoader, you can see why having a conflicting version of Spring would cause issues because the PluginClassLoader loads its definition of Spring for its own context, even though the ServiceClassLoader has already loaded another version, and the service has created a bunch of objects using a conflicting version.\nNow, for the Spring bit that you commented on.\nWe're registering a BeanDefinition into the parent application, which has a bunch of metadata that Spring needs to know how, in what order, etc. to create your bean. An ApplicationContext is tightly-coupled to one ClassLoader, which a BeanFactory will use to load the class -- this won't work for our case, obviously, since the service ClassLoader doesn't know about plugin classes. To get around this, I'm providing a Supplier as a factory method to the bean instance that was already created from the PluginClassLoader -- effectively making this plugin extension a singleton within the scope of the service. Furthermore, Spring is able to do all of its autowiring and what have you because I'm also providing that BeanFactory with the Class of the bean that we're promoting, so it'll be able to do whatever reflection magic it needs to do.\nHope that helps, I gotta run to a meeting, so that's the abrupt end to this comment.", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474238857", "createdAt": "2020-08-20T19:58:17Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/DefaultBeanPromoter.kt", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2\n+\n+import org.springframework.context.support.GenericApplicationContext\n+\n+/**\n+ * Promotes a given plugin bean to the provided [serviceApplicationContext].\n+ */\n+class DefaultBeanPromoter(\n+  private val serviceApplicationContext: GenericApplicationContext\n+) : BeanPromoter {\n+\n+  override fun promote(beanName: String, bean: Any, beanClass: Class<*>) {\n+    serviceApplicationContext.registerBean(\n+      beanName,\n+      beanClass,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3NzQxOA=="}, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg1ODYxOQ==", "bodyText": "Oof, what a master class! This was incredibly helpful, thanks so much for taking the time to write it! \u2764\ufe0f", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474858619", "createdAt": "2020-08-21T18:26:53Z", "author": {"login": "luispollo"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/DefaultBeanPromoter.kt", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2\n+\n+import org.springframework.context.support.GenericApplicationContext\n+\n+/**\n+ * Promotes a given plugin bean to the provided [serviceApplicationContext].\n+ */\n+class DefaultBeanPromoter(\n+  private val serviceApplicationContext: GenericApplicationContext\n+) : BeanPromoter {\n+\n+  override fun promote(beanName: String, bean: Any, beanClass: Class<*>) {\n+    serviceApplicationContext.registerBean(\n+      beanName,\n+      beanClass,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3NzQxOA=="}, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDExMDE1OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/PluginFrameworkInitializer.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDoyMjowMlrOHDpA5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjozMTowNFrOHEJssA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3OTc0OQ==", "bodyText": "Isn't this the other way around? Ordered.HIGHEST_PRECEDENCE is defined as Integer.MIN_VALUE (i.e. loads earlier).", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473579749", "createdAt": "2020-08-20T04:22:02Z", "author": {"login": "luispollo"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/PluginFrameworkInitializer.kt", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2\n+\n+import org.slf4j.LoggerFactory\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory\n+import org.springframework.beans.factory.support.BeanDefinitionRegistry\n+import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor\n+import org.springframework.context.ApplicationContext\n+import org.springframework.context.ApplicationContextAware\n+import org.springframework.core.Ordered\n+import org.springframework.core.PriorityOrdered\n+\n+/**\n+ * Responsible for initializing the plugin framework within a service.\n+ *\n+ * [PriorityOrdered] to run as early as possible in the service application lifecycle.\n+ */\n+class PluginFrameworkInitializer(\n+  private val pluginService: SpinnakerPluginService\n+) : BeanDefinitionRegistryPostProcessor, ApplicationContextAware, PriorityOrdered {\n+\n+  override fun postProcessBeanDefinitionRegistry(registry: BeanDefinitionRegistry) {\n+    pluginService.initialize()\n+    pluginService.startPlugins(registry)\n+  }\n+\n+  override fun postProcessBeanFactory(beanFactory: ConfigurableListableBeanFactory) {\n+  }\n+\n+  override fun setApplicationContext(applicationContext: ApplicationContext) {\n+    ApplicationContextGraph.serviceApplicationContext = applicationContext\n+  }\n+\n+  override fun getOrder(): Int = Ordered.LOWEST_PRECEDENCE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExNTI0OA==", "bodyText": "Ha. Whoops, yes.", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474115248", "createdAt": "2020-08-20T16:31:04Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/PluginFrameworkInitializer.kt", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2\n+\n+import org.slf4j.LoggerFactory\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory\n+import org.springframework.beans.factory.support.BeanDefinitionRegistry\n+import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor\n+import org.springframework.context.ApplicationContext\n+import org.springframework.context.ApplicationContextAware\n+import org.springframework.core.Ordered\n+import org.springframework.core.PriorityOrdered\n+\n+/**\n+ * Responsible for initializing the plugin framework within a service.\n+ *\n+ * [PriorityOrdered] to run as early as possible in the service application lifecycle.\n+ */\n+class PluginFrameworkInitializer(\n+  private val pluginService: SpinnakerPluginService\n+) : BeanDefinitionRegistryPostProcessor, ApplicationContextAware, PriorityOrdered {\n+\n+  override fun postProcessBeanDefinitionRegistry(registry: BeanDefinitionRegistry) {\n+    pluginService.initialize()\n+    pluginService.startPlugins(registry)\n+  }\n+\n+  override fun postProcessBeanFactory(beanFactory: ConfigurableListableBeanFactory) {\n+  }\n+\n+  override fun setApplicationContext(applicationContext: ApplicationContext) {\n+    ApplicationContextGraph.serviceApplicationContext = applicationContext\n+  }\n+\n+  override fun getOrder(): Int = Ordered.LOWEST_PRECEDENCE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3OTc0OQ=="}, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDEyNjg5OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/SpringPluginInitializer.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDozMTo0N1rOHDpKNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODoxMzoxMlrOHE2s8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU4MjEzNQ==", "bodyText": "Is this where the service and the plugin \"connect\" as far as class loaders go?", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473582135", "createdAt": "2020-08-20T04:31:47Z", "author": {"login": "luispollo"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/SpringPluginInitializer.kt", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2\n+\n+import com.netflix.spinnaker.kork.plugins.api.ExtensionConfiguration\n+import com.netflix.spinnaker.kork.plugins.api.PluginComponent\n+import com.netflix.spinnaker.kork.plugins.api.PluginConfiguration\n+import com.netflix.spinnaker.kork.plugins.api.internal.SpinnakerExtensionPoint\n+import org.pf4j.Plugin\n+import org.pf4j.PluginWrapper\n+import org.slf4j.LoggerFactory\n+import org.springframework.context.ApplicationContext\n+import org.springframework.context.ApplicationContextAware\n+import org.springframework.context.annotation.ClassPathBeanDefinitionScanner\n+import org.springframework.context.support.GenericApplicationContext\n+import org.springframework.core.io.DefaultResourceLoader\n+import org.springframework.core.type.filter.AnnotationTypeFilter\n+import org.springframework.core.type.filter.AssignableTypeFilter\n+\n+/**\n+ * Initializes the given [plugin]'s [pluginApplicationContext] after being connected to the service's\n+ * own [ApplicationContext].\n+ */\n+class SpringPluginInitializer(\n+  private val plugin: Plugin,\n+  private val pluginWrapper: PluginWrapper,\n+  private val pluginApplicationContext: GenericApplicationContext,\n+  private val beanPromoter: BeanPromoter\n+) : ApplicationContextAware {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun setApplicationContext(applicationContext: ApplicationContext) {\n+    log.info(\"Initializing '${pluginWrapper.pluginId}'\")\n+\n+    // For every bean created in the plugin ApplicationContext, we'll need to post-process to evaluate\n+    // which ones need to be promoted to the service ApplicationContext for autowiring into core functionality.\n+    pluginApplicationContext\n+      .beanFactory\n+      .addBeanPostProcessor(ExtensionPromotionBeanPostProcessor(\n+        pluginWrapper,\n+        pluginApplicationContext,\n+        beanPromoter\n+      ))\n+\n+    pluginApplicationContext.classLoader = pluginWrapper.pluginClassLoader", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI3OTM5Mw==", "bodyText": "Yeah, kind of. They don't really connect (aside from parent/child relationships of the class loaders themselves).\nThe service has its own ClassLoader and each plugin has its own ClassLoader. Similarly, the service has one Spring ApplicationContext and each plugin has its own ApplicationContext in a parent/child relationship. Just classes are isolated from each other with class loaders, the different ApplicationContexts isolate dependency graphs from each other, with child ApplicationContexts being able to reach into the parent for bean definitions should one not be available.", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474279393", "createdAt": "2020-08-20T21:20:52Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/SpringPluginInitializer.kt", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2\n+\n+import com.netflix.spinnaker.kork.plugins.api.ExtensionConfiguration\n+import com.netflix.spinnaker.kork.plugins.api.PluginComponent\n+import com.netflix.spinnaker.kork.plugins.api.PluginConfiguration\n+import com.netflix.spinnaker.kork.plugins.api.internal.SpinnakerExtensionPoint\n+import org.pf4j.Plugin\n+import org.pf4j.PluginWrapper\n+import org.slf4j.LoggerFactory\n+import org.springframework.context.ApplicationContext\n+import org.springframework.context.ApplicationContextAware\n+import org.springframework.context.annotation.ClassPathBeanDefinitionScanner\n+import org.springframework.context.support.GenericApplicationContext\n+import org.springframework.core.io.DefaultResourceLoader\n+import org.springframework.core.type.filter.AnnotationTypeFilter\n+import org.springframework.core.type.filter.AssignableTypeFilter\n+\n+/**\n+ * Initializes the given [plugin]'s [pluginApplicationContext] after being connected to the service's\n+ * own [ApplicationContext].\n+ */\n+class SpringPluginInitializer(\n+  private val plugin: Plugin,\n+  private val pluginWrapper: PluginWrapper,\n+  private val pluginApplicationContext: GenericApplicationContext,\n+  private val beanPromoter: BeanPromoter\n+) : ApplicationContextAware {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun setApplicationContext(applicationContext: ApplicationContext) {\n+    log.info(\"Initializing '${pluginWrapper.pluginId}'\")\n+\n+    // For every bean created in the plugin ApplicationContext, we'll need to post-process to evaluate\n+    // which ones need to be promoted to the service ApplicationContext for autowiring into core functionality.\n+    pluginApplicationContext\n+      .beanFactory\n+      .addBeanPostProcessor(ExtensionPromotionBeanPostProcessor(\n+        pluginWrapper,\n+        pluginApplicationContext,\n+        beanPromoter\n+      ))\n+\n+    pluginApplicationContext.classLoader = pluginWrapper.pluginClassLoader", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU4MjEzNQ=="}, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg1MjU5Mg==", "bodyText": "Thanks, that's very helpful! \ud83d\ude4f", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474852592", "createdAt": "2020-08-21T18:13:12Z", "author": {"login": "luispollo"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/SpringPluginInitializer.kt", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2\n+\n+import com.netflix.spinnaker.kork.plugins.api.ExtensionConfiguration\n+import com.netflix.spinnaker.kork.plugins.api.PluginComponent\n+import com.netflix.spinnaker.kork.plugins.api.PluginConfiguration\n+import com.netflix.spinnaker.kork.plugins.api.internal.SpinnakerExtensionPoint\n+import org.pf4j.Plugin\n+import org.pf4j.PluginWrapper\n+import org.slf4j.LoggerFactory\n+import org.springframework.context.ApplicationContext\n+import org.springframework.context.ApplicationContextAware\n+import org.springframework.context.annotation.ClassPathBeanDefinitionScanner\n+import org.springframework.context.support.GenericApplicationContext\n+import org.springframework.core.io.DefaultResourceLoader\n+import org.springframework.core.type.filter.AnnotationTypeFilter\n+import org.springframework.core.type.filter.AssignableTypeFilter\n+\n+/**\n+ * Initializes the given [plugin]'s [pluginApplicationContext] after being connected to the service's\n+ * own [ApplicationContext].\n+ */\n+class SpringPluginInitializer(\n+  private val plugin: Plugin,\n+  private val pluginWrapper: PluginWrapper,\n+  private val pluginApplicationContext: GenericApplicationContext,\n+  private val beanPromoter: BeanPromoter\n+) : ApplicationContextAware {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun setApplicationContext(applicationContext: ApplicationContext) {\n+    log.info(\"Initializing '${pluginWrapper.pluginId}'\")\n+\n+    // For every bean created in the plugin ApplicationContext, we'll need to post-process to evaluate\n+    // which ones need to be promoted to the service ApplicationContext for autowiring into core functionality.\n+    pluginApplicationContext\n+      .beanFactory\n+      .addBeanPostProcessor(ExtensionPromotionBeanPostProcessor(\n+        pluginWrapper,\n+        pluginApplicationContext,\n+        beanPromoter\n+      ))\n+\n+    pluginApplicationContext.classLoader = pluginWrapper.pluginClassLoader", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU4MjEzNQ=="}, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDE0NzI3OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/v2/fixtures/ParentServiceBean.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDo0MzoyMVrOHDpVWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDo0MzoyMVrOHDpVWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU4NDk4Ng==", "bodyText": "Is this used anywhere in the tests?", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473584986", "createdAt": "2020-08-20T04:43:21Z", "author": {"login": "luispollo"}, "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/v2/fixtures/ParentServiceBean.kt", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2.fixtures\n+\n+import org.springframework.beans.factory.annotation.Value\n+import org.springframework.stereotype.Component\n+\n+@Component(\"parentServiceBean\")\n+class ParentServiceBean(@Value(\"\\${someKey}\") val someKey: String)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzYxMzQ2OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/config/V2PluginConfiguration.kt", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzoxNjo1NFrOHELuMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo0MTozMVrOHE0Bjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0ODQwMQ==", "bodyText": "Since all the other configuration classes are Java, and we're importing this one into PluginsAutoConfiguration, should we make this one Java just to be uniform?", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474148401", "createdAt": "2020-08-20T17:16:54Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/config/V2PluginConfiguration.kt", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.config\n+\n+import com.netflix.spinnaker.kork.plugins.FRAMEWORK_V2\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginManager\n+import com.netflix.spinnaker.kork.plugins.SpringPluginStatusProvider\n+import com.netflix.spinnaker.kork.plugins.config.ConfigFactory\n+import com.netflix.spinnaker.kork.plugins.sdk.SdkFactory\n+import com.netflix.spinnaker.kork.plugins.update.SpinnakerUpdateManager\n+import com.netflix.spinnaker.kork.plugins.update.release.provider.PluginInfoReleaseProvider\n+import com.netflix.spinnaker.kork.plugins.v2.SpringPluginFactory\n+import com.netflix.spinnaker.kork.plugins.v2.PluginFrameworkInitializer\n+import com.netflix.spinnaker.kork.plugins.v2.SpinnakerPluginService\n+import org.pf4j.PluginFactory\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty\n+import org.springframework.context.ApplicationEventPublisher\n+import org.springframework.context.annotation.Bean\n+import org.springframework.context.annotation.Configuration\n+import org.springframework.context.support.GenericApplicationContext\n+\n+@Configuration\n+@ConditionalOnProperty(value = [\"spinnaker.extensibility.framework.version\"], havingValue = FRAMEWORK_V2)\n+class V2PluginConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NTQ0NQ==", "bodyText": "I would really rather not; I'd prefer to get rid of the last remnants of Java in kork-plugins instead!", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474185445", "createdAt": "2020-08-20T18:24:33Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/config/V2PluginConfiguration.kt", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.config\n+\n+import com.netflix.spinnaker.kork.plugins.FRAMEWORK_V2\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginManager\n+import com.netflix.spinnaker.kork.plugins.SpringPluginStatusProvider\n+import com.netflix.spinnaker.kork.plugins.config.ConfigFactory\n+import com.netflix.spinnaker.kork.plugins.sdk.SdkFactory\n+import com.netflix.spinnaker.kork.plugins.update.SpinnakerUpdateManager\n+import com.netflix.spinnaker.kork.plugins.update.release.provider.PluginInfoReleaseProvider\n+import com.netflix.spinnaker.kork.plugins.v2.SpringPluginFactory\n+import com.netflix.spinnaker.kork.plugins.v2.PluginFrameworkInitializer\n+import com.netflix.spinnaker.kork.plugins.v2.SpinnakerPluginService\n+import org.pf4j.PluginFactory\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty\n+import org.springframework.context.ApplicationEventPublisher\n+import org.springframework.context.annotation.Bean\n+import org.springframework.context.annotation.Configuration\n+import org.springframework.context.support.GenericApplicationContext\n+\n+@Configuration\n+@ConditionalOnProperty(value = [\"spinnaker.extensibility.framework.version\"], havingValue = FRAMEWORK_V2)\n+class V2PluginConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0ODQwMQ=="}, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMyMTY1Nw==", "bodyText": "Would be nice, but haven't we seen issues with loading Kotlin ConfigurationProperties or Configuration classes though?  This is a bit vague, but I seem to recall an issue with that.", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474321657", "createdAt": "2020-08-20T23:15:00Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/config/V2PluginConfiguration.kt", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.config\n+\n+import com.netflix.spinnaker.kork.plugins.FRAMEWORK_V2\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginManager\n+import com.netflix.spinnaker.kork.plugins.SpringPluginStatusProvider\n+import com.netflix.spinnaker.kork.plugins.config.ConfigFactory\n+import com.netflix.spinnaker.kork.plugins.sdk.SdkFactory\n+import com.netflix.spinnaker.kork.plugins.update.SpinnakerUpdateManager\n+import com.netflix.spinnaker.kork.plugins.update.release.provider.PluginInfoReleaseProvider\n+import com.netflix.spinnaker.kork.plugins.v2.SpringPluginFactory\n+import com.netflix.spinnaker.kork.plugins.v2.PluginFrameworkInitializer\n+import com.netflix.spinnaker.kork.plugins.v2.SpinnakerPluginService\n+import org.pf4j.PluginFactory\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty\n+import org.springframework.context.ApplicationEventPublisher\n+import org.springframework.context.annotation.Bean\n+import org.springframework.context.annotation.Configuration\n+import org.springframework.context.support.GenericApplicationContext\n+\n+@Configuration\n+@ConditionalOnProperty(value = [\"spinnaker.extensibility.framework.version\"], havingValue = FRAMEWORK_V2)\n+class V2PluginConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0ODQwMQ=="}, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwMTE5Nw==", "bodyText": "Configuration classes should be fine, ConfigurationProperties might trip up the spring binder if they aren't mutable or annotated for constructor binding", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474801197", "createdAt": "2020-08-21T16:26:14Z", "author": {"login": "cfieber"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/config/V2PluginConfiguration.kt", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.config\n+\n+import com.netflix.spinnaker.kork.plugins.FRAMEWORK_V2\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginManager\n+import com.netflix.spinnaker.kork.plugins.SpringPluginStatusProvider\n+import com.netflix.spinnaker.kork.plugins.config.ConfigFactory\n+import com.netflix.spinnaker.kork.plugins.sdk.SdkFactory\n+import com.netflix.spinnaker.kork.plugins.update.SpinnakerUpdateManager\n+import com.netflix.spinnaker.kork.plugins.update.release.provider.PluginInfoReleaseProvider\n+import com.netflix.spinnaker.kork.plugins.v2.SpringPluginFactory\n+import com.netflix.spinnaker.kork.plugins.v2.PluginFrameworkInitializer\n+import com.netflix.spinnaker.kork.plugins.v2.SpinnakerPluginService\n+import org.pf4j.PluginFactory\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty\n+import org.springframework.context.ApplicationEventPublisher\n+import org.springframework.context.annotation.Bean\n+import org.springframework.context.annotation.Configuration\n+import org.springframework.context.support.GenericApplicationContext\n+\n+@Configuration\n+@ConditionalOnProperty(value = [\"spinnaker.extensibility.framework.version\"], havingValue = FRAMEWORK_V2)\n+class V2PluginConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0ODQwMQ=="}, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgwODcxOA==", "bodyText": "Yeah, I think we just had val on config properties - which we cannot do. We've been fine in other projects and modules in kork with Kotlin config / config properties.", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474808718", "createdAt": "2020-08-21T16:41:31Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/config/V2PluginConfiguration.kt", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.config\n+\n+import com.netflix.spinnaker.kork.plugins.FRAMEWORK_V2\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginManager\n+import com.netflix.spinnaker.kork.plugins.SpringPluginStatusProvider\n+import com.netflix.spinnaker.kork.plugins.config.ConfigFactory\n+import com.netflix.spinnaker.kork.plugins.sdk.SdkFactory\n+import com.netflix.spinnaker.kork.plugins.update.SpinnakerUpdateManager\n+import com.netflix.spinnaker.kork.plugins.update.release.provider.PluginInfoReleaseProvider\n+import com.netflix.spinnaker.kork.plugins.v2.SpringPluginFactory\n+import com.netflix.spinnaker.kork.plugins.v2.PluginFrameworkInitializer\n+import com.netflix.spinnaker.kork.plugins.v2.SpinnakerPluginService\n+import org.pf4j.PluginFactory\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty\n+import org.springframework.context.ApplicationEventPublisher\n+import org.springframework.context.annotation.Bean\n+import org.springframework.context.annotation.Configuration\n+import org.springframework.context.support.GenericApplicationContext\n+\n+@Configuration\n+@ConditionalOnProperty(value = [\"spinnaker.extensibility.framework.version\"], havingValue = FRAMEWORK_V2)\n+class V2PluginConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0ODQwMQ=="}, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzcxNTE4OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/SpinnakerPluginService.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzo0NjowN1rOHEMtaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzo0NjowN1rOHEMtaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2NDU4NA==", "bodyText": "Wrap this in withTiming?  Might be useful especially if we start doing more with a plugin start hook.", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474164584", "createdAt": "2020-08-20T17:46:07Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/SpinnakerPluginService.kt", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2\n+\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginManager\n+import com.netflix.spinnaker.kork.plugins.SpringPluginStatusProvider\n+import com.netflix.spinnaker.kork.plugins.api.spring.PrivilegedSpringPlugin\n+import com.netflix.spinnaker.kork.plugins.update.SpinnakerUpdateManager\n+import com.netflix.spinnaker.kork.plugins.update.release.provider.PluginInfoReleaseProvider\n+import org.slf4j.LoggerFactory\n+import org.springframework.beans.factory.support.BeanDefinitionRegistry\n+import org.springframework.context.ApplicationEventPublisher\n+import org.springframework.util.Assert\n+\n+/**\n+ * A service for managing the plugin framework.\n+ *\n+ * NOTE: Over time, we should be moving to this class over [SpinnakerPluginManager] and\n+ * [SpinnakerUpdateManager] as the primary touch points for the plugin framework, decoupling\n+ * Spinnaker-specific plugin framework logic from PF4J wherever possible.\n+ */\n+class SpinnakerPluginService(\n+  private val pluginManager: SpinnakerPluginManager,\n+  private val updateManager: SpinnakerUpdateManager,\n+  private val pluginInfoReleaseProvider: PluginInfoReleaseProvider,\n+  private val springPluginStatusProvider: SpringPluginStatusProvider\n+) {\n+\n+  private val log = LoggerFactory.getLogger(javaClass)\n+\n+  /**\n+   * Tracks the initialization state of the plugin framework: It can only be initialized once.\n+   */\n+  private var initialized: Boolean = false\n+\n+  /**\n+   * Starts the plugin framework and completely initializes extensions for use by the application.\n+   */\n+  fun initialize() {\n+    Assert.isTrue(!initialized, \"Plugin framework has already been initialized\")\n+\n+    withTiming(\"initializing plugins\") {\n+      // Load known plugins prior to downloading so we can resolve what needs to be updated.\n+      pluginManager.loadPlugins()\n+\n+      // Find the plugin releases for the currently enabled list of plugins\n+      val releases = updateManager.plugins\n+        .filter { springPluginStatusProvider.isPluginEnabled(it.id) }\n+        .let { enabledPlugins -> pluginInfoReleaseProvider.getReleases(enabledPlugins) }\n+\n+      // Download releases, if any, updating previously loaded plugins where necessary\n+      updateManager.downloadPluginReleases(releases).forEach { pluginPath ->\n+        pluginManager.loadPlugin(pluginPath)\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Start the plugins, attaching exported plugin extensions to the provided [registry].\n+   */\n+  fun startPlugins(registry: BeanDefinitionRegistry) {\n+    // Start plugins. This should only be called once.\n+    pluginManager.startPlugins()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODEyNjcyOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/v2/scenarios/ServiceDependenciesScenarioTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODoxODoyNlrOHE21xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODoxODoyNlrOHE21xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg1NDg1Mw==", "bodyText": "nit: This would be a little easier to read if you looked up the field by name, IMHO.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            val field = it.javaClass.declaredFields.first()\n          \n          \n            \n                            val field = it.javaClass.declaredField(\"parentServiceBean\")", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474854853", "createdAt": "2020-08-21T18:18:26Z", "author": {"login": "luispollo"}, "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/v2/scenarios/ServiceDependenciesScenarioTest.kt", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2.scenarios\n+\n+import com.netflix.spinnaker.config.PluginsAutoConfiguration\n+import com.netflix.spinnaker.kork.plugins.FRAMEWORK_V2\n+import com.netflix.spinnaker.kork.plugins.testplugin.testPlugin\n+import com.netflix.spinnaker.kork.plugins.v2.ApplicationContextGraph\n+import com.netflix.spinnaker.kork.plugins.v2.scenarios.fixtures.ParentServiceBean\n+import dev.minutest.junit.JUnit5Minutests\n+import dev.minutest.rootContext\n+import org.springframework.boot.autoconfigure.AutoConfigurations\n+import org.springframework.boot.test.context.assertj.AssertableApplicationContext\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner\n+import org.springframework.context.annotation.ComponentScan\n+import org.springframework.context.annotation.Configuration\n+import strikt.api.expectThat\n+import strikt.assertions.isEqualTo\n+import strikt.assertions.isNotNull\n+\n+/**\n+ * Tests that beans created by the service are injectable into plugin extensions.\n+ */\n+class ServiceDependenciesScenarioTest : JUnit5Minutests {\n+\n+  fun tests() = rootContext<Fixture> {\n+    fixture {\n+      Fixture()\n+    }\n+\n+    test(\"plugin extension is autowired with service bean\") {\n+      app\n+        .withUserConfiguration(TestApplicationConfiguration::class.java)\n+        .run { ctx: AssertableApplicationContext ->\n+          val serviceBean = ctx.getBean(ParentServiceBean::class.java)\n+\n+          expectThat(ApplicationContextGraph.pluginContext(generated.plugin.pluginId))\n+            .isNotNull()\n+            .get {\n+              getBean(\"myExtension\").let {\n+                val field = it.javaClass.declaredFields.first()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11777fc25e49ca4a4239568c64d93203f1e0320"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODIwMTYxOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/v2/scenarios/ServiceDependenciesScenarioTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODo0NTowM1rOHE3j1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODo0NTowM1rOHE3j1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NjY0Ng==", "bodyText": "Sorry, my bad.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            val field = it.javaClass.declaredField(\"parentServiceBean\")\n          \n          \n            \n                            val field = it.javaClass.getDeclaredField(\"parentServiceBean\")", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474866646", "createdAt": "2020-08-21T18:45:03Z", "author": {"login": "luispollo"}, "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/v2/scenarios/ServiceDependenciesScenarioTest.kt", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2.scenarios\n+\n+import com.netflix.spinnaker.config.PluginsAutoConfiguration\n+import com.netflix.spinnaker.kork.plugins.FRAMEWORK_V2\n+import com.netflix.spinnaker.kork.plugins.testplugin.testPlugin\n+import com.netflix.spinnaker.kork.plugins.v2.ApplicationContextGraph\n+import com.netflix.spinnaker.kork.plugins.v2.scenarios.fixtures.ParentServiceBean\n+import dev.minutest.junit.JUnit5Minutests\n+import dev.minutest.rootContext\n+import org.springframework.boot.autoconfigure.AutoConfigurations\n+import org.springframework.boot.test.context.assertj.AssertableApplicationContext\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner\n+import org.springframework.context.annotation.ComponentScan\n+import org.springframework.context.annotation.Configuration\n+import strikt.api.expectThat\n+import strikt.assertions.isEqualTo\n+import strikt.assertions.isNotNull\n+\n+/**\n+ * Tests that beans created by the service are injectable into plugin extensions.\n+ */\n+class ServiceDependenciesScenarioTest : JUnit5Minutests {\n+\n+  fun tests() = rootContext<Fixture> {\n+    fixture {\n+      Fixture()\n+    }\n+\n+    test(\"plugin extension is autowired with service bean\") {\n+      app\n+        .withUserConfiguration(TestApplicationConfiguration::class.java)\n+        .run { ctx: AssertableApplicationContext ->\n+          val serviceBean = ctx.getBean(ParentServiceBean::class.java)\n+\n+          expectThat(ApplicationContextGraph.pluginContext(generated.plugin.pluginId))\n+            .isNotNull()\n+            .get {\n+              getBean(\"myExtension\").let {\n+                val field = it.javaClass.declaredField(\"parentServiceBean\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "258a07447d0dc9307a5bf45cc0561edfa1474793"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3477, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}