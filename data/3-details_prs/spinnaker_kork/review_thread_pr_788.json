{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMDg1NDEx", "number": 788, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzowNTo0MVrOEmz-fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDoyNzo1NVrOEnNRYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTMyOTI0OnYy", "diffSide": "RIGHT", "path": "kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/ExceptionSummary.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzowNTo0MVrOHXD4jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzowNTo0MVrOHXD4jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0MjkyNg==", "bodyText": "Also moved this to kork-api.  I think we should migrate all of kork-exceptions to kork-api.  I know we have plugins that pull in kork-exceptions, so all the more reason to get ahead of this and do it soon.", "url": "https://github.com/spinnaker/kork/pull/788#discussion_r493942926", "createdAt": "2020-09-23T23:05:41Z", "author": {"login": "jonsie"}, "path": "kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/ExceptionSummary.java", "diffHunk": "@@ -30,55 +27,8 @@\n  */\n @Getter\n @Builder\n-@Wither\n public class ExceptionSummary {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57031e9780cfcec5be04a8e11e1d3c96a3c11bc5"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTMzMTkzOnYy", "diffSide": "RIGHT", "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/ExceptionSummaryService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzowNjo1OFrOHXD6Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzowNjo1OFrOHXD6Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0MzMxNQ==", "bodyText": "This code was lifted and shifted from ExceptionSummary to this service ExceptionSummaryService.  The main difference here is that we build the user message via the UserMessageService.\nThis is a breaking change and there will be a corresponding CloudDriver PR.", "url": "https://github.com/spinnaker/kork/pull/788#discussion_r493943315", "createdAt": "2020-09-23T23:06:58Z", "author": {"login": "jonsie"}, "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/ExceptionSummaryService.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.netflix.spinnaker.kork.web.exceptions;\n+\n+import com.netflix.spinnaker.kork.api.exceptions.ExceptionSummary;\n+import com.netflix.spinnaker.kork.api.exceptions.ExceptionSummary.TraceDetail;\n+import com.netflix.spinnaker.kork.api.exceptions.ExceptionSummary.TraceDetail.TraceDetailBuilder;\n+import com.netflix.spinnaker.kork.exceptions.HasAdditionalAttributes;\n+import com.netflix.spinnaker.kork.exceptions.SpinnakerException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Builds a {@link ExceptionSummary} object from a given Exception. This object is meant to help\n+ * provide context to end-users to help resolve issues, while still offering enough detail for\n+ * operators and developers to trace internal bugs.\n+ */\n+public class ExceptionSummaryService {\n+\n+  private final UserMessageService userMessageService;\n+\n+  public ExceptionSummaryService(UserMessageService userMessageService) {\n+    this.userMessageService = userMessageService;\n+  }\n+\n+  /**\n+   * Provides the {@link ExceptionSummary} given the thrown exception.\n+   *\n+   * @param throwable {@link Throwable}\n+   * @return {@link ExceptionSummary}\n+   */\n+  public ExceptionSummary summary(Throwable throwable) {\n+    List<TraceDetail> details = new ArrayList<>();\n+\n+    Throwable cause = throwable;\n+    do {\n+      details.add(createTraceDetail(cause));\n+      cause = cause.getCause();\n+    } while (cause != null);\n+\n+    List<TraceDetail> reversedDetails = new ArrayList<>(details);\n+    Collections.reverse(reversedDetails);\n+\n+    Boolean retryable =\n+        reversedDetails.stream()\n+            .filter(d -> d.getRetryable() != null)\n+            .findFirst()\n+            .map(TraceDetail::getRetryable)\n+            .orElse(null);\n+\n+    return ExceptionSummary.builder()\n+        .cause(details.get(details.size() - 1).getMessage())\n+        .message(details.get(0).getMessage())\n+        .details(reversedDetails)\n+        .retryable(retryable)\n+        .build();\n+  }\n+\n+  private TraceDetail createTraceDetail(Throwable throwable) {\n+    TraceDetailBuilder detailBuilder = TraceDetail.builder().message(throwable.getMessage());\n+\n+    if (throwable instanceof SpinnakerException) {\n+      SpinnakerException spinnakerException = (SpinnakerException) throwable;\n+\n+      detailBuilder\n+          .userMessage(\n+              userMessageService.toUserMessage(throwable, spinnakerException.getUserMessage()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57031e9780cfcec5be04a8e11e1d3c96a3c11bc5"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTQ1NDQ0OnYy", "diffSide": "RIGHT", "path": "kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/AccessDeniedDetails.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDoyMjowM1rOHXrQpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDoyMjowM1rOHXrQpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4ODA2OQ==", "bodyText": "Maybe worth using @NonnullByDefault in package-info.java?", "url": "https://github.com/spinnaker/kork/pull/788#discussion_r494588069", "createdAt": "2020-09-24T20:22:03Z", "author": {"login": "robzienert"}, "path": "kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/AccessDeniedDetails.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.netflix.spinnaker.kork.api.exceptions;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Details regarding an access denied exception.\n+ *\n+ * <p>TODO(jonsie): We need to migrate fiat-api into a kork module (like kork-authz) so that we can\n+ * create a proper fiat-api module which would provide things like Fiat's Authorization and\n+ * ResourceType objects. For now, this object just uses strings to represent resource type and\n+ * authorization, but eventually should support types provided from fiat-api.\n+ */\n+public class AccessDeniedDetails implements ExceptionDetails {\n+  @Nonnull private final String resourceType;\n+  @Nonnull private final String resourceName;\n+  @Nullable private final String authorization;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56cb1be552ea74f8dc959b0ac478c81154ffe1ba"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTQ1NjYyOnYy", "diffSide": "RIGHT", "path": "kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/AccessDeniedDetails.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDoyMjo0MFrOHXrR9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDoyMjo0MFrOHXrR9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4ODQwNA==", "bodyText": "Using @NonnullByDefault would also correctly apply @Nonnull here, which is good - since it would be a javac warning as-is.", "url": "https://github.com/spinnaker/kork/pull/788#discussion_r494588404", "createdAt": "2020-09-24T20:22:40Z", "author": {"login": "robzienert"}, "path": "kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/AccessDeniedDetails.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.netflix.spinnaker.kork.api.exceptions;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Details regarding an access denied exception.\n+ *\n+ * <p>TODO(jonsie): We need to migrate fiat-api into a kork module (like kork-authz) so that we can\n+ * create a proper fiat-api module which would provide things like Fiat's Authorization and\n+ * ResourceType objects. For now, this object just uses strings to represent resource type and\n+ * authorization, but eventually should support types provided from fiat-api.\n+ */\n+public class AccessDeniedDetails implements ExceptionDetails {\n+  @Nonnull private final String resourceType;\n+  @Nonnull private final String resourceName;\n+  @Nullable private final String authorization;\n+\n+  public AccessDeniedDetails(String resourceType, String resourceName, String authorization) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56cb1be552ea74f8dc959b0ac478c81154ffe1ba"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTQ2MjMwOnYy", "diffSide": "RIGHT", "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/ExceptionSummaryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDoyNDozNlrOHXrVmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDoyNDozNlrOHXrVmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4OTMzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Builds a {@link ExceptionSummary} object from a given Exception. This object is meant to help\n          \n          \n            \n             * Builds an {@link ExceptionSummary} object from a given Exception. This object is meant to help", "url": "https://github.com/spinnaker/kork/pull/788#discussion_r494589336", "createdAt": "2020-09-24T20:24:36Z", "author": {"login": "robzienert"}, "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/ExceptionSummaryService.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.netflix.spinnaker.kork.web.exceptions;\n+\n+import com.netflix.spinnaker.kork.api.exceptions.ExceptionSummary;\n+import com.netflix.spinnaker.kork.api.exceptions.ExceptionSummary.TraceDetail;\n+import com.netflix.spinnaker.kork.api.exceptions.ExceptionSummary.TraceDetail.TraceDetailBuilder;\n+import com.netflix.spinnaker.kork.exceptions.HasAdditionalAttributes;\n+import com.netflix.spinnaker.kork.exceptions.SpinnakerException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Builds a {@link ExceptionSummary} object from a given Exception. This object is meant to help", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56cb1be552ea74f8dc959b0ac478c81154ffe1ba"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTQ3MzYzOnYy", "diffSide": "RIGHT", "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/UserMessageService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDoyNzo1NVrOHXrcSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMToyNzo0NFrOHXtP3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU5MTA0OQ==", "bodyText": "Perhaps decorateException or something? It's always weird when a method takes the same name as the class that it belongs to. For someone who isn't familiar with the codebase, a call to userMessageService.userMessage(e, \"Hello\") is going to pretty confusing.", "url": "https://github.com/spinnaker/kork/pull/788#discussion_r494591049", "createdAt": "2020-09-24T20:27:55Z", "author": {"login": "robzienert"}, "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/UserMessageService.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.netflix.spinnaker.kork.web.exceptions;\n+\n+import com.netflix.spinnaker.kork.api.exceptions.ExceptionDetails;\n+import com.netflix.spinnaker.kork.api.exceptions.UserMessage;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.springframework.beans.factory.ObjectProvider;\n+\n+/**\n+ * Used to add additional information to an exception message. Messages on exceptions are immutable,\n+ * so this is mostly used when a message is pulled from an exception prior to being sent to an end\n+ * user.\n+ */\n+public class UserMessageService {\n+\n+  private final ObjectProvider<List<UserMessage>> userMessagesProvider;\n+\n+  public UserMessageService(ObjectProvider<List<UserMessage>> userMessagesProvider) {\n+    this.userMessagesProvider = userMessagesProvider;\n+  }\n+\n+  /**\n+   * Provided an exception type, original message, and optional exception details, return a message\n+   * for the end-user.\n+   *\n+   * @param throwable {@link Throwable}\n+   * @param message The user exception message\n+   * @param exceptionDetails Additional {@link ExceptionDetails} about the exception.\n+   * @return The final exception message for the end-user.\n+   */\n+  public String userMessage(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56cb1be552ea74f8dc959b0ac478c81154ffe1ba"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU5NDUzOA==", "bodyText": "Yeah I struggled with the name of this service - wasn't happy with what I settled on.  Gonna have a think on this.", "url": "https://github.com/spinnaker/kork/pull/788#discussion_r494594538", "createdAt": "2020-09-24T20:34:21Z", "author": {"login": "jonsie"}, "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/UserMessageService.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.netflix.spinnaker.kork.web.exceptions;\n+\n+import com.netflix.spinnaker.kork.api.exceptions.ExceptionDetails;\n+import com.netflix.spinnaker.kork.api.exceptions.UserMessage;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.springframework.beans.factory.ObjectProvider;\n+\n+/**\n+ * Used to add additional information to an exception message. Messages on exceptions are immutable,\n+ * so this is mostly used when a message is pulled from an exception prior to being sent to an end\n+ * user.\n+ */\n+public class UserMessageService {\n+\n+  private final ObjectProvider<List<UserMessage>> userMessagesProvider;\n+\n+  public UserMessageService(ObjectProvider<List<UserMessage>> userMessagesProvider) {\n+    this.userMessagesProvider = userMessagesProvider;\n+  }\n+\n+  /**\n+   * Provided an exception type, original message, and optional exception details, return a message\n+   * for the end-user.\n+   *\n+   * @param throwable {@link Throwable}\n+   * @param message The user exception message\n+   * @param exceptionDetails Additional {@link ExceptionDetails} about the exception.\n+   * @return The final exception message for the end-user.\n+   */\n+  public String userMessage(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU5MTA0OQ=="}, "originalCommit": {"oid": "56cb1be552ea74f8dc959b0ac478c81154ffe1ba"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYyMDYzNg==", "bodyText": "Ok, gonna go with ExceptionMessageDecorator#decorate.  That way that arguments passed to decorate are more self explanatory.", "url": "https://github.com/spinnaker/kork/pull/788#discussion_r494620636", "createdAt": "2020-09-24T21:27:44Z", "author": {"login": "jonsie"}, "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/UserMessageService.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.netflix.spinnaker.kork.web.exceptions;\n+\n+import com.netflix.spinnaker.kork.api.exceptions.ExceptionDetails;\n+import com.netflix.spinnaker.kork.api.exceptions.UserMessage;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.springframework.beans.factory.ObjectProvider;\n+\n+/**\n+ * Used to add additional information to an exception message. Messages on exceptions are immutable,\n+ * so this is mostly used when a message is pulled from an exception prior to being sent to an end\n+ * user.\n+ */\n+public class UserMessageService {\n+\n+  private final ObjectProvider<List<UserMessage>> userMessagesProvider;\n+\n+  public UserMessageService(ObjectProvider<List<UserMessage>> userMessagesProvider) {\n+    this.userMessagesProvider = userMessagesProvider;\n+  }\n+\n+  /**\n+   * Provided an exception type, original message, and optional exception details, return a message\n+   * for the end-user.\n+   *\n+   * @param throwable {@link Throwable}\n+   * @param message The user exception message\n+   * @param exceptionDetails Additional {@link ExceptionDetails} about the exception.\n+   * @return The final exception message for the end-user.\n+   */\n+  public String userMessage(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU5MTA0OQ=="}, "originalCommit": {"oid": "56cb1be552ea74f8dc959b0ac478c81154ffe1ba"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3512, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}