{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNjA3NDk1", "number": 595, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo1Nzo1NFrODwGlgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTo1ODo1OVrODw_OOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzY2MTQ0OnYy", "diffSide": "RIGHT", "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/PlatformComponents.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo1Nzo1NFrOGC6kfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo1Nzo1NFrOGC6kfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwOTk0OA==", "bodyText": "ManifestVersionResolver was flawed and I didn't see a good path forward to keep using it.  It assembles URLS to manifest files from the filesystem, but then it tries to match the manifest against a package (com.netflix.spinnaker.orca, for example). This works in the unit test when looking up the manifest for org.springframework.boot because the dependency comes from the local maven cache which stores deps on the filesystem according to their package (/org/springframework/boot). However, this doesn\u2019t work when running a test on a service locally and the service JAR exists at something like ~/orca/orca-web/build/libs/orca-web.jar or when running in an env wherein the JAR is at some non-package specific path.", "url": "https://github.com/spinnaker/kork/pull/595#discussion_r405709948", "createdAt": "2020-04-08T17:57:54Z", "author": {"login": "jonsie"}, "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/PlatformComponents.java", "diffHunk": "@@ -63,9 +61,9 @@ ServiceVersion serviceVersion(\n   }\n \n   @Bean\n-  @ConditionalOnMissingBean(ManifestVersionResolver.class)\n-  VersionResolver manifestVersionResolver(ManifestVersionResolver.Properties properties) {\n-    return new ManifestVersionResolver(properties.useOssVersionManifestAttribute);\n+  @ConditionalOnMissingBean(SpringPackageVersionResolver.class)\n+  VersionResolver springPackageVersionResolver(ApplicationContext applicationContext) {\n+    return new SpringPackageVersionResolver(applicationContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ca3f30d6158495db048aff06c69f9dea416d5d3"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzY2MzI3OnYy", "diffSide": "RIGHT", "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/version/SpringPackageVersionResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo1ODoyN1rOGC6lug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1ODo1MlrOGEDAyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMDI2Ng==", "bodyText": "We use SpringBootApplication annotation on some of our main classes, but not all.  As a follow up to this PR, I will add the annotation where necessary.", "url": "https://github.com/spinnaker/kork/pull/595#discussion_r405710266", "createdAt": "2020-04-08T17:58:27Z", "author": {"login": "jonsie"}, "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/version/SpringPackageVersionResolver.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.version;\n+\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.ApplicationContext;\n+\n+/**\n+ * Resolves the version by finding the Spring bean annotated with {@link\n+ * org.springframework.boot.autoconfigure.SpringBootApplication} and then determining the\n+ * Implementation-Version attribute from the package.\n+ *\n+ * <p>See {@link java.lang.Package#getImplementationVersion()}\n+ */\n+public class SpringPackageVersionResolver implements VersionResolver {\n+\n+  ApplicationContext applicationContext;\n+\n+  public SpringPackageVersionResolver(ApplicationContext applicationContext) {\n+    this.applicationContext = applicationContext;\n+  }\n+\n+  @Nullable\n+  @Override\n+  public String resolve(@Nonnull String serviceName) {\n+    Map<String, Object> annotatedBeans =\n+        applicationContext.getBeansWithAnnotation(SpringBootApplication.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ca3f30d6158495db048aff06c69f9dea416d5d3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4NzQ3Mg==", "bodyText": "If more service alignment falls out of this work, I'm all for it! Do you know if there's any reason to not add that annotation to each Main?", "url": "https://github.com/spinnaker/kork/pull/595#discussion_r406887472", "createdAt": "2020-04-10T18:35:23Z", "author": {"login": "robzienert"}, "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/version/SpringPackageVersionResolver.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.version;\n+\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.ApplicationContext;\n+\n+/**\n+ * Resolves the version by finding the Spring bean annotated with {@link\n+ * org.springframework.boot.autoconfigure.SpringBootApplication} and then determining the\n+ * Implementation-Version attribute from the package.\n+ *\n+ * <p>See {@link java.lang.Package#getImplementationVersion()}\n+ */\n+public class SpringPackageVersionResolver implements VersionResolver {\n+\n+  ApplicationContext applicationContext;\n+\n+  public SpringPackageVersionResolver(ApplicationContext applicationContext) {\n+    this.applicationContext = applicationContext;\n+  }\n+\n+  @Nullable\n+  @Override\n+  public String resolve(@Nonnull String serviceName) {\n+    Map<String, Object> annotatedBeans =\n+        applicationContext.getBeansWithAnnotation(SpringBootApplication.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMDI2Ng=="}, "originalCommit": {"oid": "7ca3f30d6158495db048aff06c69f9dea416d5d3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5Njg0MQ==", "bodyText": "I couldn't find a reason not to add the annotation, seems harmless.", "url": "https://github.com/spinnaker/kork/pull/595#discussion_r406896841", "createdAt": "2020-04-10T18:58:52Z", "author": {"login": "jonsie"}, "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/version/SpringPackageVersionResolver.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.version;\n+\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.context.ApplicationContext;\n+\n+/**\n+ * Resolves the version by finding the Spring bean annotated with {@link\n+ * org.springframework.boot.autoconfigure.SpringBootApplication} and then determining the\n+ * Implementation-Version attribute from the package.\n+ *\n+ * <p>See {@link java.lang.Package#getImplementationVersion()}\n+ */\n+public class SpringPackageVersionResolver implements VersionResolver {\n+\n+  ApplicationContext applicationContext;\n+\n+  public SpringPackageVersionResolver(ApplicationContext applicationContext) {\n+    this.applicationContext = applicationContext;\n+  }\n+\n+  @Nullable\n+  @Override\n+  public String resolve(@Nonnull String serviceName) {\n+    Map<String, Object> annotatedBeans =\n+        applicationContext.getBeansWithAnnotation(SpringBootApplication.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMDI2Ng=="}, "originalCommit": {"oid": "7ca3f30d6158495db048aff06c69f9dea416d5d3"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzY2Njg5OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo1OToyMlrOGC6n-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo1OToyMlrOGC6n-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMDg0MA==", "bodyText": "This change allows the path to the root plugins dir to be relative, so that we can easily test plugins in Spinnaker services.", "url": "https://github.com/spinnaker/kork/pull/595#discussion_r405710840", "createdAt": "2020-04-08T17:59:22Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java", "diffHunk": "@@ -140,15 +134,24 @@ public static SpinnakerPluginManager pluginManager(\n         sdkFactories,\n         Objects.requireNonNull(\n             applicationContext.getEnvironment().getProperty(\"spring.application.name\")),\n-        Paths.get(\n-            applicationContext\n-                .getEnvironment()\n-                .getProperty(\n-                    PluginsConfigurationProperties.ROOT_PATH_CONFIG,\n-                    PluginsConfigurationProperties.DEFAULT_ROOT_PATH)),\n+        determineRootPluginPath(applicationContext),\n         pluginBundleExtractor);\n   }\n \n+  /**\n+   * If the plugins-root-path property is set, returns the absolute path to the property. Otherwise,\n+   * returns the default root path 'plugins'.\n+   */\n+  private static Path determineRootPluginPath(ApplicationContext applicationContext) {\n+    String rootPathConfig =\n+        applicationContext\n+            .getEnvironment()\n+            .getProperty(PluginsConfigurationProperties.ROOT_PATH_CONFIG);\n+    return rootPathConfig == null\n+        ? Paths.get(PluginsConfigurationProperties.DEFAULT_ROOT_PATH)\n+        : Paths.get(rootPathConfig).toAbsolutePath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ca3f30d6158495db048aff06c69f9dea416d5d3"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzY3OTYwOnYy", "diffSide": "RIGHT", "path": "kork-plugins-tck/src/main/kotlin/com/netflix/spinnaker/kork/plugins/tck/PluginsTck.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODowMjo1NFrOGC6wLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozOTowNFrOGECiJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMjk0MA==", "bodyText": "Does this seem like a reasonable set of default tests?", "url": "https://github.com/spinnaker/kork/pull/595#discussion_r405712940", "createdAt": "2020-04-08T18:02:54Z", "author": {"login": "jonsie"}, "path": "kork-plugins-tck/src/main/kotlin/com/netflix/spinnaker/kork/plugins/tck/PluginsTck.kt", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.tck\n+\n+import dev.minutest.ContextBuilder\n+import dev.minutest.TestContextBuilder\n+import dev.minutest.TestDescriptor\n+import dev.minutest.junit.JUnit5Minutests\n+import org.pf4j.PluginWrapper\n+import org.springframework.test.context.TestContextManager\n+import strikt.api.expect\n+import strikt.assertions.isA\n+import strikt.assertions.isGreaterThanOrEqualTo\n+import strikt.assertions.isNull\n+import strikt.assertions.isTrue\n+\n+/**\n+ * The default tests that run in a plugin test suite.\n+ */\n+abstract class PluginsTck<T : PluginsTckFixture> : JUnit5Minutests {\n+\n+  fun ContextBuilder<T>.defaultPluginTests() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f8f3ed0f0b2482982ca11e1ddbe358f02e0101d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4ODk5Ng==", "bodyText": "Yes, I think this is a good start. We'll eventually need tests around the lifecycle as well (verification that start & stop method are invoked when expected, etc). I don't think we need to add these now.", "url": "https://github.com/spinnaker/kork/pull/595#discussion_r406888996", "createdAt": "2020-04-10T18:39:04Z", "author": {"login": "robzienert"}, "path": "kork-plugins-tck/src/main/kotlin/com/netflix/spinnaker/kork/plugins/tck/PluginsTck.kt", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.tck\n+\n+import dev.minutest.ContextBuilder\n+import dev.minutest.TestContextBuilder\n+import dev.minutest.TestDescriptor\n+import dev.minutest.junit.JUnit5Minutests\n+import org.pf4j.PluginWrapper\n+import org.springframework.test.context.TestContextManager\n+import strikt.api.expect\n+import strikt.assertions.isA\n+import strikt.assertions.isGreaterThanOrEqualTo\n+import strikt.assertions.isNull\n+import strikt.assertions.isTrue\n+\n+/**\n+ * The default tests that run in a plugin test suite.\n+ */\n+abstract class PluginsTck<T : PluginsTckFixture> : JUnit5Minutests {\n+\n+  fun ContextBuilder<T>.defaultPluginTests() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMjk0MA=="}, "originalCommit": {"oid": "6f8f3ed0f0b2482982ca11e1ddbe358f02e0101d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzg4MTAyOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerPluginManager.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODo1ODowMFrOGC8uwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODo1ODowMFrOGC8uwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0NTM0NA==", "bodyText": "systemVersion needs to be set on initialization, otherwise it is never set and defaults to \"0.0.0\" in AbstractPluginManager which causes all sorts of problems.", "url": "https://github.com/spinnaker/kork/pull/595#discussion_r405745344", "createdAt": "2020-04-08T18:58:00Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerPluginManager.kt", "diffHunk": "@@ -143,4 +143,8 @@ open class SpinnakerPluginManager(\n         it.descriptor.pluginId\n       }\n   }\n+\n+  init {\n+    systemVersion = getSystemVersion()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e01857db9e337e1c8f9bc971e9824596818a015b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTI2Mzg5OnYy", "diffSide": "RIGHT", "path": "kork-plugins-tck/src/main/kotlin/com/netflix/spinnaker/kork/plugins/tck/PluginsTckFixture.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozOTo1MlrOGECjaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODozOTo1MlrOGECjaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4OTMyMQ==", "bodyText": "Wrap in code block so that this will render correctly in dokka (same as the rest below)", "url": "https://github.com/spinnaker/kork/pull/595#discussion_r406889321", "createdAt": "2020-04-10T18:39:52Z", "author": {"login": "robzienert"}, "path": "kork-plugins-tck/src/main/kotlin/com/netflix/spinnaker/kork/plugins/tck/PluginsTckFixture.kt", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.tck\n+\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginManager\n+import com.netflix.spinnaker.kork.plugins.internal.PluginJar\n+import java.io.File\n+\n+/**\n+ * Enforces a set of requirements and conventions that implementors adhere to when testing\n+ * plugins in Spinnaker services.\n+ */\n+interface PluginsTckFixture {\n+\n+  /**\n+   * The PF4J [org.pf4j.PluginManager] implementation, used to assert plugin and extension loading.\n+   */\n+  val spinnakerPluginManager: SpinnakerPluginManager\n+\n+  /**\n+   * The path to write plugins to the filesystem.  The path should match the configuration:\n+   *\n+   * spinnaker:\n+   *   extensibility:\n+   *     plugins-root-path: build/plugins", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d29c0ac2c90251c68c7d94ae052a9db294d52730"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjk0MDc1OnYy", "diffSide": "RIGHT", "path": "kork-plugins-tck/src/test/kotlin/com/spinnaker/netflix/kork/plugins/tck/PluginsTckFixtureTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTo1ODo1OVrOGEQWdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMTo1ODo1OVrOGEQWdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNTM4Mw==", "bodyText": "Added a PluginsTck test.", "url": "https://github.com/spinnaker/kork/pull/595#discussion_r407115383", "createdAt": "2020-04-11T21:58:59Z", "author": {"login": "jonsie"}, "path": "kork-plugins-tck/src/test/kotlin/com/spinnaker/netflix/kork/plugins/tck/PluginsTckFixtureTest.kt", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.spinnaker.netflix.kork.plugins.tck\n+\n+import com.netflix.spinnaker.config.PluginsAutoConfiguration\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginManager\n+import com.netflix.spinnaker.kork.plugins.internal.PluginJar\n+import com.netflix.spinnaker.kork.plugins.tck.PluginsTck\n+import com.netflix.spinnaker.kork.plugins.tck.PluginsTckFixture\n+import com.netflix.spinnaker.kork.plugins.tck.serviceFixture\n+import com.spinnaker.netflix.kork.plugins.SomeFeatureExtension\n+import com.spinnaker.netflix.kork.plugins.TestPlugin\n+import dev.minutest.rootContext\n+import java.io.File\n+import org.junit.runner.RunWith\n+import org.springframework.beans.factory.annotation.Autowired\n+import org.springframework.boot.autoconfigure.SpringBootApplication\n+import org.springframework.boot.test.context.SpringBootTest\n+import org.springframework.context.annotation.Import\n+import org.springframework.test.context.junit4.SpringRunner\n+\n+class PluginsTckFixtureTest : PluginsTck<PluginsTckFixtureImpl>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7570f640a091eb98b3a8ed1cdcf27f4e658e5ab0"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3653, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}