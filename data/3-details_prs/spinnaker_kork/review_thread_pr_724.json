{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NTgyNzQ2", "number": 724, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoxODoxMlrOEOVMAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMTowNTo1OVrOEQbLUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDYyNjU3OnYy", "diffSide": "RIGHT", "path": "kork-serviceclient-retrofit/kork-serviceclient-retrofit.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoxODoxMlrOGxbHYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoxODoxMlrOGxbHYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3NzY2Nw==", "bodyText": "these should all be implementation or runtimeOnly if this module doesn't expose a public interface", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r454477667", "createdAt": "2020-07-14T16:18:12Z", "author": {"login": "cfieber"}, "path": "kork-serviceclient-retrofit/kork-serviceclient-retrofit.gradle", "diffHunk": "@@ -0,0 +1,18 @@\n+apply plugin: \"java-library\"\n+\n+dependencies {\n+  api(platform(project(\":spinnaker-dependencies\")))\n+\n+  implementation project(\":kork-web\")\n+\n+  api \"com.squareup.retrofit:retrofit\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3594dead2ad56461ab32ba02d5af206e17b3c39b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDY0OTE4OnYy", "diffSide": "RIGHT", "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/serviceclient/ServiceClientFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoyMzozNFrOGxbVtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMDo1NDowNFrOGxk8Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4MTMzMg==", "bodyText": "It will be interesting to see how often this method is needed in client code.\nI wonder if we could define an interface something like ServiceClientCustomizer<B>, and let customizations happen via beans that implement that as needed so this doesn't have to happen at the service client creation call site.\nJust a thought though", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r454481332", "createdAt": "2020-07-14T16:23:34Z", "author": {"login": "cfieber"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/serviceclient/ServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.web.serviceclient;\n+\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+\n+/**\n+ * Factory to build clients/builders that help to make remote http calls.\n+ *\n+ * @param <B> represents client builder type\n+ */\n+public interface ServiceClientFactory<B> {\n+\n+  /**\n+   * Builds a concrete client capable of making HTTP calls.\n+   *\n+   * @param type client type\n+   * @param serviceEndpoint endpoint configuration\n+   * @param <T> type of client , usually a interface with all the remote method definitions.\n+   * @return a implementation of the type of client given.\n+   */\n+  public <T> T create(Class<T> type, ServiceEndpoint serviceEndpoint);\n+\n+  /**\n+   * Initializes and returns the underlying client builder implementation for further customizations\n+   * as needed.\n+   *\n+   * @param type client type\n+   * @param serviceEndpoint endpoint configuration\n+   * @param <T> type of client , usually represents a interface with all the remote method\n+   *     definitions.\n+   * @return a client builder\n+   */\n+  public <T> B build(Class<T> type, ServiceEndpoint serviceEndpoint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3594dead2ad56461ab32ba02d5af206e17b3c39b"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYzODY5NQ==", "bodyText": "Good point. Probably worth having specialized clients also built the same way as default one by implementing the same interface.  Will put in a different approach.", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r454638695", "createdAt": "2020-07-14T20:54:04Z", "author": {"login": "srekapalli"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/serviceclient/ServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.web.serviceclient;\n+\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+\n+/**\n+ * Factory to build clients/builders that help to make remote http calls.\n+ *\n+ * @param <B> represents client builder type\n+ */\n+public interface ServiceClientFactory<B> {\n+\n+  /**\n+   * Builds a concrete client capable of making HTTP calls.\n+   *\n+   * @param type client type\n+   * @param serviceEndpoint endpoint configuration\n+   * @param <T> type of client , usually a interface with all the remote method definitions.\n+   * @return a implementation of the type of client given.\n+   */\n+  public <T> T create(Class<T> type, ServiceEndpoint serviceEndpoint);\n+\n+  /**\n+   * Initializes and returns the underlying client builder implementation for further customizations\n+   * as needed.\n+   *\n+   * @param type client type\n+   * @param serviceEndpoint endpoint configuration\n+   * @param <T> type of client , usually represents a interface with all the remote method\n+   *     definitions.\n+   * @return a client builder\n+   */\n+  public <T> B build(Class<T> type, ServiceEndpoint serviceEndpoint);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4MTMzMg=="}, "originalCommit": {"oid": "3594dead2ad56461ab32ba02d5af206e17b3c39b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjA3MzM3OnYy", "diffSide": "RIGHT", "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/serviceclient/ServiceClientFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzozNTowMVrOGxo9jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMzozNTowMVrOGxo9jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNDUyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public default <T> boolean supports(Class<T> type, ServiceEndpoint serviceEndpoint) {\n          \n          \n            \n              public default boolean supports(Class<?> type, ServiceEndpoint serviceEndpoint) {\n          \n      \n    \n    \n  \n\nI think the type isn't going to be known for implementors of this method (if it is, <T> could be moved to the class level)", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r454704525", "createdAt": "2020-07-14T23:35:01Z", "author": {"login": "cfieber"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/serviceclient/ServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.web.serviceclient;\n+\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+\n+/** Factory to build clients/builders that help to make remote http calls. */\n+public interface ServiceClientFactory {\n+\n+  /**\n+   * Builds a concrete client capable of making HTTP calls.\n+   *\n+   * @param type client type\n+   * @param serviceEndpoint endpoint configuration\n+   * @param <T> type of client , usually a interface with all the remote method definitions.\n+   * @return a implementation of the type of client given.\n+   */\n+  public <T> T getClient(Class<T> type, ServiceEndpoint serviceEndpoint);\n+\n+  /**\n+   * Decide if this factory can support the endpoint provided.\n+   *\n+   * @param type client type\n+   * @param serviceEndpoint endpoint configuration\n+   * @param <T> type of client , usually represents a interface with all the remote method\n+   *     definitions.\n+   * @return a client builder\n+   */\n+  public default <T> boolean supports(Class<T> type, ServiceEndpoint serviceEndpoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7f6252c34012bcf309cba1717354a09382a4c67"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTU4NzQ0OnYy", "diffSide": "RIGHT", "path": "kork-serviceclient-retrofit/src/main/java/com/netflix/spinnaker/kork/web/serviceclient/DefaultServiceClientFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODo1NTo0NlrOG0bJEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODo1NTo0NlrOG0bJEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYyMzgyNg==", "bodyText": "I would also change this to getService.", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r457623826", "createdAt": "2020-07-20T18:55:46Z", "author": {"login": "jonsie"}, "path": "kork-serviceclient-retrofit/src/main/java/com/netflix/spinnaker/kork/web/serviceclient/DefaultServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.web.serviceclient;\n+\n+import static retrofit.Endpoints.newFixedEndpoint;\n+\n+import com.jakewharton.retrofit.Ok3Client;\n+import com.netflix.spinnaker.config.DefaultServiceEndpoint;\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+import com.netflix.spinnaker.config.okhttp3.OkHttpClientProvider;\n+import com.netflix.spinnaker.kork.annotations.NonnullByDefault;\n+import com.netflix.spinnaker.retrofit.Slf4jRetrofitLogger;\n+import retrofit.Endpoint;\n+import retrofit.RequestInterceptor;\n+import retrofit.RestAdapter;\n+import retrofit.converter.JacksonConverter;\n+\n+@NonnullByDefault\n+public class DefaultServiceClientFactory implements ServiceClientFactory {\n+\n+  private final RestAdapter.LogLevel retrofitLogLevel;\n+  private final OkHttpClientProvider clientProvider;\n+  private final RequestInterceptor spinnakerRequestInterceptor;\n+\n+  DefaultServiceClientFactory(\n+      RestAdapter.LogLevel retrofitLogLevel,\n+      OkHttpClientProvider clientProvider,\n+      RequestInterceptor spinnakerRequestInterceptor) {\n+    this.retrofitLogLevel = retrofitLogLevel;\n+    this.clientProvider = clientProvider;\n+    this.spinnakerRequestInterceptor = spinnakerRequestInterceptor;\n+  }\n+\n+  @Override\n+  public <T> T getClient(Class<T> type, ServiceEndpoint serviceEndpoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a4a989686346265e51f3f5e923c65f1dd43350b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjIyNDc4OnYy", "diffSide": "RIGHT", "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/serviceclient/ServiceClientFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjoxNzoxMFrOG0hMQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0NzowNVrOG0h3nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyMjk0NQ==", "bodyText": "Probably change this to RetrofitServiceFactory too.", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r457722945", "createdAt": "2020-07-20T22:17:10Z", "author": {"login": "jonsie"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/serviceclient/ServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.web.serviceclient;\n+\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+\n+/** Factory to build a client for a service. */\n+public interface ServiceClientFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc123e951375865ced93ed96422b2cb2979f30c5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDA0NA==", "bodyText": "I will leave this as is (ServiceClientFactory), since it doesn't carry Retrofit knowledge.", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r457734044", "createdAt": "2020-07-20T22:47:05Z", "author": {"login": "srekapalli"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/serviceclient/ServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.web.serviceclient;\n+\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+\n+/** Factory to build a client for a service. */\n+public interface ServiceClientFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyMjk0NQ=="}, "originalCommit": {"oid": "bc123e951375865ced93ed96422b2cb2979f30c5"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMzNzA3OnYy", "diffSide": "RIGHT", "path": "kork-retrofit/src/main/java/com/netflix/spinnaker/kork/web/serviceclient/DefaultRetrofitServiceFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMzowMjoyNVrOG0iNJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMzowMjoyNVrOG0iNJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczOTU1Ng==", "bodyText": "Maybe this can just be called the RetrofitServiceFactory?", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r457739556", "createdAt": "2020-07-20T23:02:25Z", "author": {"login": "jonsie"}, "path": "kork-retrofit/src/main/java/com/netflix/spinnaker/kork/web/serviceclient/DefaultRetrofitServiceFactory.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.web.serviceclient;\n+\n+import static retrofit.Endpoints.newFixedEndpoint;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.jakewharton.retrofit.Ok3Client;\n+import com.netflix.spinnaker.config.DefaultServiceEndpoint;\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+import com.netflix.spinnaker.config.okhttp3.OkHttpClientProvider;\n+import com.netflix.spinnaker.kork.annotations.NonnullByDefault;\n+import com.netflix.spinnaker.retrofit.Slf4jRetrofitLogger;\n+import retrofit.Endpoint;\n+import retrofit.RequestInterceptor;\n+import retrofit.RestAdapter;\n+import retrofit.converter.JacksonConverter;\n+\n+@NonnullByDefault\n+class DefaultRetrofitServiceFactory implements ServiceClientFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "602d87936e23fe3504bca76370cdf8080aec65ce"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjU3OTM2OnYy", "diffSide": "RIGHT", "path": "kork-retrofit/src/main/java/com/netflix/spinnaker/kork/retrofit/RetrofitServiceFactoryAutoConfiguration.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMTowNTo1OVrOG0kanA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMToxNjozNlrOG0kmKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3NTc3Mg==", "bodyText": "Under what context would we disable this?", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r457775772", "createdAt": "2020-07-21T01:05:59Z", "author": {"login": "jonsie"}, "path": "kork-retrofit/src/main/java/com/netflix/spinnaker/kork/retrofit/RetrofitServiceFactoryAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.retrofit;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.netflix.spinnaker.config.okhttp3.OkHttpClientProvider;\n+import java.util.List;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.Order;\n+import retrofit.RequestInterceptor;\n+import retrofit.RestAdapter;\n+\n+@Configuration\n+@ConditionalOnProperty(value = \"retrofit.enabled\", matchIfMissing = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded018770f7ba47ab2b70bb35296f16967d7f26c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3NzY3NQ==", "bodyText": "Probably never if we have this as a dependency in the application , but during test phase sometimes It's useful to turn off things if needed and wire up the bare minimum instead of making custom configurations.", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r457777675", "createdAt": "2020-07-21T01:13:03Z", "author": {"login": "srekapalli"}, "path": "kork-retrofit/src/main/java/com/netflix/spinnaker/kork/retrofit/RetrofitServiceFactoryAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.retrofit;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.netflix.spinnaker.config.okhttp3.OkHttpClientProvider;\n+import java.util.List;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.Order;\n+import retrofit.RequestInterceptor;\n+import retrofit.RestAdapter;\n+\n+@Configuration\n+@ConditionalOnProperty(value = \"retrofit.enabled\", matchIfMissing = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3NTc3Mg=="}, "originalCommit": {"oid": "ded018770f7ba47ab2b70bb35296f16967d7f26c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3ODcyOQ==", "bodyText": "Sounds good.", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r457778729", "createdAt": "2020-07-21T01:16:36Z", "author": {"login": "jonsie"}, "path": "kork-retrofit/src/main/java/com/netflix/spinnaker/kork/retrofit/RetrofitServiceFactoryAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.retrofit;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.netflix.spinnaker.config.okhttp3.OkHttpClientProvider;\n+import java.util.List;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.Order;\n+import retrofit.RequestInterceptor;\n+import retrofit.RestAdapter;\n+\n+@Configuration\n+@ConditionalOnProperty(value = \"retrofit.enabled\", matchIfMissing = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3NTc3Mg=="}, "originalCommit": {"oid": "ded018770f7ba47ab2b70bb35296f16967d7f26c"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3457, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}