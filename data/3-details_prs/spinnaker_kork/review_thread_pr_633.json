{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNzE0NTI1", "number": 633, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoxMDoxNVrOD5Dv7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoxMDoxNVrOD5Dv7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMTU2ODQ1OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/proxy/aspects/MetricInvocationAspect.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjoxMDoxNVrOGQHakQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNzozMzowMVrOGQKsPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1MTg4OQ==", "bodyText": "I think you implicitly get invocation counts already from a timer metric (it keeps track of total time recorded and the count)", "url": "https://github.com/spinnaker/kork/pull/633#discussion_r419551889", "createdAt": "2020-05-04T16:10:15Z", "author": {"login": "cfieber"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/proxy/aspects/MetricInvocationAspect.kt", "diffHunk": "@@ -123,36 +125,41 @@ class MetricInvocationAspect(\n       return null\n     } else {\n       return this.get(method) { m ->\n-        val metricIds = MetricIds(\n-          timingId = registry.createId(toMetricId(m, descriptor.pluginId, TIMING), mapOf(\n-            Pair(\"pluginVersion\", descriptor.version),\n-            Pair(\"pluginExtension\", target.javaClass.simpleName.toString())\n-          )),\n-          invocationId = registry.createId(toMetricId(m, descriptor.pluginId, INVOCATIONS), mapOf(\n-            Pair(\"pluginVersion\", descriptor.version),\n-            Pair(\"pluginExtension\", target.javaClass.simpleName.toString())\n-          ))\n-        )\n-\n-        for (mutableEntry in this.asMap()) {\n-          if (mutableEntry.value.invocationId.name() == metricIds.invocationId.name()) {\n-            throw MetricNameCollisionException(target, mutableEntry.key, m)\n+        m.declaredAnnotations\n+          .find { it is Meter }\n+          .let { meterAnnotation ->\n+            (meterAnnotation as Meter)\n+\n+            val metricIds = MetricIds(\n+              timingId = registry.createId(toMetricId(m, descriptor.pluginId, meterAnnotation.id, TIMING), mapOf(\n+                Pair(\"pluginVersion\", descriptor.version),\n+                Pair(\"pluginExtension\", target.javaClass.simpleName.toString())\n+              )),\n+              invocationId = registry.createId(toMetricId(m, descriptor.pluginId, meterAnnotation.id, INVOCATIONS), mapOf(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43c0a71ad6e2e293b9009c0b5c083443aa953136"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwNTU2Nw==", "bodyText": "Well them, I shall remove this.", "url": "https://github.com/spinnaker/kork/pull/633#discussion_r419605567", "createdAt": "2020-05-04T17:33:01Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/proxy/aspects/MetricInvocationAspect.kt", "diffHunk": "@@ -123,36 +125,41 @@ class MetricInvocationAspect(\n       return null\n     } else {\n       return this.get(method) { m ->\n-        val metricIds = MetricIds(\n-          timingId = registry.createId(toMetricId(m, descriptor.pluginId, TIMING), mapOf(\n-            Pair(\"pluginVersion\", descriptor.version),\n-            Pair(\"pluginExtension\", target.javaClass.simpleName.toString())\n-          )),\n-          invocationId = registry.createId(toMetricId(m, descriptor.pluginId, INVOCATIONS), mapOf(\n-            Pair(\"pluginVersion\", descriptor.version),\n-            Pair(\"pluginExtension\", target.javaClass.simpleName.toString())\n-          ))\n-        )\n-\n-        for (mutableEntry in this.asMap()) {\n-          if (mutableEntry.value.invocationId.name() == metricIds.invocationId.name()) {\n-            throw MetricNameCollisionException(target, mutableEntry.key, m)\n+        m.declaredAnnotations\n+          .find { it is Meter }\n+          .let { meterAnnotation ->\n+            (meterAnnotation as Meter)\n+\n+            val metricIds = MetricIds(\n+              timingId = registry.createId(toMetricId(m, descriptor.pluginId, meterAnnotation.id, TIMING), mapOf(\n+                Pair(\"pluginVersion\", descriptor.version),\n+                Pair(\"pluginExtension\", target.javaClass.simpleName.toString())\n+              )),\n+              invocationId = registry.createId(toMetricId(m, descriptor.pluginId, meterAnnotation.id, INVOCATIONS), mapOf(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1MTg4OQ=="}, "originalCommit": {"oid": "43c0a71ad6e2e293b9009c0b5c083443aa953136"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3531, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}