{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjIxMjIz", "number": 537, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTozNzo0N1rODkbsVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTo0MToyNFrODkbw9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTI5MDQ0OnYy", "diffSide": "LEFT", "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsConfigurationProperties.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTozNzo0N1rOFwwMVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTozNzo0N1rOFwwMVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2NTU1OA==", "bodyText": "This was moved to a different properties file and no longer necessary here.", "url": "https://github.com/spinnaker/kork/pull/537#discussion_r386665558", "createdAt": "2020-03-02T21:37:47Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsConfigurationProperties.java", "diffHunk": "@@ -98,13 +98,4 @@ public boolean isEnabled() {\n       return enabled;\n     }\n   }\n-\n-  /**\n-   * Defines what MANIFEST.MF attribute to use in determining a service version. By default, a\n-   * service version is determined by reading the \"Implementation-Version\" attribute. If this\n-   * property is set to true, however, \"Implementation-OSS-Version\" will be used to support use\n-   * cases where services are being extended and rebuilt. Unless you're re-building services, this\n-   * should remain its default value.\n-   */\n-  public boolean useOssVersionManifestAttribute = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dc680bb174a3229e63c4c24e5ec3b3be8c22718"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTI5NDEzOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/ExtensionBeanDefinitionRegistryPostProcessor.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTozODo1OVrOFwwOlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTozODo1OVrOFwwOlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2NjEzMw==", "bodyText": "Apparently, availablePlugins only returns the available plugins that are not yet loaded by the plugin manager.  This will allow us to determine the release against all plugins.", "url": "https://github.com/spinnaker/kork/pull/537#discussion_r386666133", "createdAt": "2020-03-02T21:38:59Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/ExtensionBeanDefinitionRegistryPostProcessor.kt", "diffHunk": "@@ -53,8 +53,8 @@ class ExtensionBeanDefinitionRegistryPostProcessor(\n     // 1) Load plugins prior to downloading so we can resolve what needs to be updated\n     pluginManager.loadPlugins()\n \n-    // 2) Determine the plugins for release from the list of available plugins\n-    val releases = pluginInfoReleaseProvider.getReleases(updateManager.availablePlugins)\n+    // 2) Determine the plugins for release from the list of plugins\n+    val releases = pluginInfoReleaseProvider.getReleases(updateManager.plugins)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dc680bb174a3229e63c4c24e5ec3b3be8c22718"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTI5NzU5OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/SpinnakerUpdateManager.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTozOTo1NVrOFwwQnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzoxMzoxM1rOFwyyrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2NjY1NQ==", "bodyText": "We should be making a point of building all our plugins with the Plugin-Version attribute (which we aren't doing in the helloworld plugin I was testing with), but just to be safe this will force us to use the correctly configured version.", "url": "https://github.com/spinnaker/kork/pull/537#discussion_r386666655", "createdAt": "2020-03-02T21:39:55Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/SpinnakerUpdateManager.kt", "diffHunk": "@@ -58,7 +58,9 @@ class SpinnakerUpdateManager(\n         if (loadedPlugin != null) {\n           val loadedPluginVersion = loadedPlugin.descriptor.version\n \n-          if (pluginManager.versionManager.compareVersions(release.props.version, loadedPluginVersion) > 0) {\n+          // If a plugin was built without a version specified (via the Plugin-Version MANIFEST.MF\n+          // attribute), to be safe we always check for the configured plugin version.\n+          if (loadedPluginVersion == \"unspecified\" || pluginManager.versionManager.compareVersions(release.props.version, loadedPluginVersion) > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dc680bb174a3229e63c4c24e5ec3b3be8c22718"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwODE0MQ==", "bodyText": "I thought this was being populated by the gradle project?", "url": "https://github.com/spinnaker/kork/pull/537#discussion_r386708141", "createdAt": "2020-03-02T23:13:13Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/SpinnakerUpdateManager.kt", "diffHunk": "@@ -58,7 +58,9 @@ class SpinnakerUpdateManager(\n         if (loadedPlugin != null) {\n           val loadedPluginVersion = loadedPlugin.descriptor.version\n \n-          if (pluginManager.versionManager.compareVersions(release.props.version, loadedPluginVersion) > 0) {\n+          // If a plugin was built without a version specified (via the Plugin-Version MANIFEST.MF\n+          // attribute), to be safe we always check for the configured plugin version.\n+          if (loadedPluginVersion == \"unspecified\" || pluginManager.versionManager.compareVersions(release.props.version, loadedPluginVersion) > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2NjY1NQ=="}, "originalCommit": {"oid": "6dc680bb174a3229e63c4c24e5ec3b3be8c22718"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTMwMjMxOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/downloader/Front50FileDownloader.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTo0MToyNFrOFwwThw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTo0MToyNFrOFwwThw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2NzM5OQ==", "bodyText": "Since we don't ask Front50 for file + extension type (though it is constructed in Front50's PluginBinaryController) we need to do this to correctly save the file (otherwise it is saved as a binary file with no extension).", "url": "https://github.com/spinnaker/kork/pull/537#discussion_r386667399", "createdAt": "2020-03-02T21:41:24Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/downloader/Front50FileDownloader.kt", "diffHunk": "@@ -48,13 +48,14 @@ class Front50FileDownloader(\n       throw NotFoundException(\"Plugin binary could not be downloaded, received HTTP ${response.code()}\")\n     }\n \n-    return downloadDir.resolve(Paths.get(fileUrl.path).fileName).also {\n+    return downloadDir.resolve(Paths.get(fileUrl.path + binaryExtension).fileName).also {\n       Files.write(it, body.bytes())\n     }\n   }\n \n   companion object {\n     private val downloadDir = Files.createTempDirectory(\"plugin-downloads\")\n     private val retry = Retry.ofDefaults(\"plugin-front50-downloader\")\n+    private const val binaryExtension = \".zip\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dc680bb174a3229e63c4c24e5ec3b3be8c22718"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3604, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}