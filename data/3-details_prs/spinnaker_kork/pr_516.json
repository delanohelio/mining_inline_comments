{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NTU2ODA5", "number": 516, "title": "feat(pubsub): initial port of kork-pubsub", "bodyText": "This is mostly a port of echo's pubsub support, with some additional SNS support coming from clouddriver.\nThere are minor differences with some classes from echo, but overall the idea is that one can configure a subscription (topic + queue) through Spring these classes will:\n\nparse the list of subscriptions from the configuration\nmake sure the topics and queues for each subscription exist\nstart a polling thread to read messages from each queue\nhand over messages to the handlers registered by the application", "createdAt": "2020-02-14T20:17:01Z", "url": "https://github.com/spinnaker/kork/pull/516", "merged": true, "mergeCommit": {"oid": "3fd8c735c6f748de682217b8ce1ae68563cd8957"}, "closed": true, "closedAt": "2020-02-20T17:36:52Z", "author": {"login": "dreynaud"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEVQZrAH2gAyMzc1NTU2ODA5OjcyMzA2YTA3NjkzYWYzNWZjOGRkMWY3NTczMjQ2MTAwODIzMGY3OTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGOk_RAH2gAyMzc1NTU2ODA5OjQ4MDg3MGFhZjdiNDQxNGMwNDRkMzY4N2ZkMTNmODY5NzE3NWYxOTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798", "author": {"user": {"login": "dreynaud", "name": "Daniel Reynaud"}}, "url": "https://github.com/spinnaker/kork/commit/72306a07693af35fc8dd1f75732461008230f798", "committedDate": "2020-02-14T20:07:42Z", "message": "feat(pubsub): initial port of kork-pubsub\n\nThis is mostly a port of echo's pubsub support, with some additional SNS coming from clouddriver.\n\nThere are minor differences with some classes from echo, but overall the idea is that one can configure a subscription (topic + queue) through Spring these classes will:\n- parse the list of subscriptions from the configuration\n- make sure the topics and queues for each subscription exist\n- start a polling thread to read messages from each queue\n- hand over messages to the handlers registered by the application"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTk5NTQ4", "url": "https://github.com/spinnaker/kork/pull/516#pullrequestreview-359199548", "createdAt": "2020-02-14T20:25:49Z", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDoyNTo0OVrOFqCuoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDoyNTo0OVrOFqCuoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyOTIxNw==", "bodyText": "There might be something weird with having an args constructor and not having a no args constructor and serialization... I don't remember.", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379629217", "createdAt": "2020-02-14T20:25:49Z", "author": {"login": "emjburns"}, "path": "kork-pubsub-aws/src/main/java/com/netflix/spinnaker/kork/pubsub/aws/config/AmazonPubsubProperties.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.pubsub.aws.config;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotEmpty;\n+import lombok.Data;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@Data\n+@ConfigurationProperties(prefix = \"pubsub.amazon\")\n+public class AmazonPubsubProperties {\n+\n+  @Valid private List<AmazonPubsubSubscription> subscriptions;\n+\n+  @Data\n+  public static class AmazonPubsubSubscription {\n+    private static final Logger log = LoggerFactory.getLogger(AmazonPubsubSubscription.class);\n+\n+    @NotEmpty private String name;\n+\n+    @NotEmpty private String topicARN;\n+\n+    @NotEmpty private String queueARN;\n+\n+    private List<String> accountIds = Collections.emptyList();\n+\n+    int visibilityTimeout = 30;\n+    int sqsMessageRetentionPeriodSeconds = 120;\n+    int waitTimeSeconds = 5;\n+    int maxNumberOfMessages = 1;\n+\n+    // TODO: why the constructors?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjAwMjYz", "url": "https://github.com/spinnaker/kork/pull/516#pullrequestreview-359200263", "createdAt": "2020-02-14T20:27:11Z", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjEzNjE1", "url": "https://github.com/spinnaker/kork/pull/516#pullrequestreview-359213615", "createdAt": "2020-02-14T20:55:13Z", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDo1NToxM1rOFqDaDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDo1NToxM1rOFqDaDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0MDMzMg==", "bodyText": "do you need groovy here? (is it just for tests?)", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379640332", "createdAt": "2020-02-14T20:55:13Z", "author": {"login": "marchello2000"}, "path": "kork-pubsub-aws/kork-pubsub-aws.gradle", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+apply plugin: 'java-library'\n+apply plugin: \"groovy\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjE4MjE5", "url": "https://github.com/spinnaker/kork/pull/516#pullrequestreview-359218219", "createdAt": "2020-02-14T21:05:04Z", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTowNTowNFrOFqDnpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTowNTowNFrOFqDnpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0MzgxNA==", "bodyText": "why not init it once and store as instance var?", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379643814", "createdAt": "2020-02-14T21:05:04Z", "author": {"login": "marchello2000"}, "path": "kork-pubsub-aws/src/main/java/com/netflix/spinnaker/kork/pubsub/aws/SNSPublisher.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.pubsub.aws;\n+\n+import com.amazonaws.services.sns.AmazonSNS;\n+import com.amazonaws.services.sns.model.PublishRequest;\n+import com.amazonaws.services.sns.model.PublishResult;\n+import com.netflix.spectator.api.Counter;\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.spinnaker.kork.aws.ARN;\n+import com.netflix.spinnaker.kork.pubsub.aws.config.AmazonPubsubProperties;\n+import com.netflix.spinnaker.kork.pubsub.model.PubsubPublisher;\n+import com.netflix.spinnaker.kork.pubsub.model.PubsubSystem;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** One publisher for each topic */\n+public class SNSPublisher implements PubsubPublisher {\n+  private static final Logger log = LoggerFactory.getLogger(SNSPublisher.class);\n+\n+  private final AmazonSNS amazonSNS;\n+  private final AmazonPubsubProperties.AmazonPubsubSubscription subscription;\n+  private final Registry registry;\n+  private final Supplier<Boolean> isEnabled;\n+\n+  private final ARN topicARN;\n+\n+  public SNSPublisher(\n+      AmazonPubsubProperties.AmazonPubsubSubscription subscription,\n+      AmazonSNS amazonSNS,\n+      Supplier<Boolean> isEnabled,\n+      Registry registry) {\n+    this.subscription = subscription;\n+    this.amazonSNS = amazonSNS;\n+    this.isEnabled = isEnabled;\n+    this.registry = registry;\n+    this.topicARN = new ARN(subscription.getTopicARN());\n+\n+    initializeTopic();\n+  }\n+\n+  @Override\n+  public PubsubSystem getPubsubSystem() {\n+    return PubsubSystem.AMAZON;\n+  }\n+\n+  @Override\n+  public String getTopicName() {\n+    return subscription.getName();\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return getTopicName();\n+  }\n+\n+  private void initializeTopic() {\n+    PubSubUtils.ensureTopicExists(amazonSNS, topicARN, subscription);\n+  }\n+\n+  @Override\n+  public void publish(String message, Map<String, String> attributes) {\n+    publishMessage(message);\n+  }\n+\n+  public Optional<PublishResult> publishMessage(String message) {\n+    if (!isEnabled.get()) {\n+      log.warn(\"Publishing is disabled for topic {}, dropping message {}\", topicARN, message);\n+      return Optional.empty();\n+    }\n+\n+    try {\n+      PublishRequest publishRequest = new PublishRequest(topicARN.getArn(), message);\n+      PublishResult publishResponse = amazonSNS.publish(publishRequest);\n+      log.debug(\n+          \"Published message {} with id {} to topic {}\",\n+          message,\n+          publishResponse.getMessageId(),\n+          topicARN);\n+      getSuccessCounter().increment();\n+      return Optional.of(publishResponse);\n+    } catch (Exception e) {\n+      log.error(\"failed to publish message {} to topic {}\", message, topicARN, e);\n+      getErrorCounter(e).increment();\n+      return Optional.empty();\n+    }\n+  }\n+\n+  private Counter getSuccessCounter() {\n+    return registry.counter(\"pubsub.amazon.published\", \"name\", getName(), \"topic\", getTopicName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjE5Mjg0", "url": "https://github.com/spinnaker/kork/pull/516#pullrequestreview-359219284", "createdAt": "2020-02-14T21:07:23Z", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTowNzoyNFrOFqDq0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTowNzoyNFrOFqDq0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY0NDYyNQ==", "bodyText": "personally, i prefer something like this:\nhttps://github.com/spinnaker/orca/pull/3430/files#diff-9c5eb62982a1c7e4a37c3f0b83973543R96\nand\nhttps://github.com/spinnaker/orca/pull/3430/files#diff-541df92cd9036d3155fe9bf54405fac3R23\nbut... don't feel strongly but slight less work on every invocation", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379644625", "createdAt": "2020-02-14T21:07:24Z", "author": {"login": "marchello2000"}, "path": "kork-pubsub-aws/src/main/java/com/netflix/spinnaker/kork/pubsub/aws/SNSPublisher.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.pubsub.aws;\n+\n+import com.amazonaws.services.sns.AmazonSNS;\n+import com.amazonaws.services.sns.model.PublishRequest;\n+import com.amazonaws.services.sns.model.PublishResult;\n+import com.netflix.spectator.api.Counter;\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.spinnaker.kork.aws.ARN;\n+import com.netflix.spinnaker.kork.pubsub.aws.config.AmazonPubsubProperties;\n+import com.netflix.spinnaker.kork.pubsub.model.PubsubPublisher;\n+import com.netflix.spinnaker.kork.pubsub.model.PubsubSystem;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** One publisher for each topic */\n+public class SNSPublisher implements PubsubPublisher {\n+  private static final Logger log = LoggerFactory.getLogger(SNSPublisher.class);\n+\n+  private final AmazonSNS amazonSNS;\n+  private final AmazonPubsubProperties.AmazonPubsubSubscription subscription;\n+  private final Registry registry;\n+  private final Supplier<Boolean> isEnabled;\n+\n+  private final ARN topicARN;\n+\n+  public SNSPublisher(\n+      AmazonPubsubProperties.AmazonPubsubSubscription subscription,\n+      AmazonSNS amazonSNS,\n+      Supplier<Boolean> isEnabled,\n+      Registry registry) {\n+    this.subscription = subscription;\n+    this.amazonSNS = amazonSNS;\n+    this.isEnabled = isEnabled;\n+    this.registry = registry;\n+    this.topicARN = new ARN(subscription.getTopicARN());\n+\n+    initializeTopic();\n+  }\n+\n+  @Override\n+  public PubsubSystem getPubsubSystem() {\n+    return PubsubSystem.AMAZON;\n+  }\n+\n+  @Override\n+  public String getTopicName() {\n+    return subscription.getName();\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return getTopicName();\n+  }\n+\n+  private void initializeTopic() {\n+    PubSubUtils.ensureTopicExists(amazonSNS, topicARN, subscription);\n+  }\n+\n+  @Override\n+  public void publish(String message, Map<String, String> attributes) {\n+    publishMessage(message);\n+  }\n+\n+  public Optional<PublishResult> publishMessage(String message) {\n+    if (!isEnabled.get()) {\n+      log.warn(\"Publishing is disabled for topic {}, dropping message {}\", topicARN, message);\n+      return Optional.empty();\n+    }\n+\n+    try {\n+      PublishRequest publishRequest = new PublishRequest(topicARN.getArn(), message);\n+      PublishResult publishResponse = amazonSNS.publish(publishRequest);\n+      log.debug(\n+          \"Published message {} with id {} to topic {}\",\n+          message,\n+          publishResponse.getMessageId(),\n+          topicARN);\n+      getSuccessCounter().increment();\n+      return Optional.of(publishResponse);\n+    } catch (Exception e) {\n+      log.error(\"failed to publish message {} to topic {}\", message, topicARN, e);\n+      getErrorCounter(e).increment();\n+      return Optional.empty();\n+    }\n+  }\n+\n+  private Counter getSuccessCounter() {\n+    return registry.counter(\"pubsub.amazon.published\", \"name\", getName(), \"topic\", getTopicName());\n+  }\n+\n+  private Counter getErrorCounter(Exception e) {\n+    return registry.counter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjM2Mjkw", "url": "https://github.com/spinnaker/kork/pull/516#pullrequestreview-359236290", "createdAt": "2020-02-14T21:42:33Z", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo0MjozM1rOFqEf8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo0MjozM1rOFqEf8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1ODIyNA==", "bodyText": "We should probably stay consistent in OSS on calling Eureka, Eureka rather than also calling it Discovery.", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379658224", "createdAt": "2020-02-14T21:42:33Z", "author": {"login": "robzienert"}, "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/eureka/EurekaActivated.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.eureka;\n+\n+import com.netflix.appinfo.InstanceInfo;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationListener;\n+\n+/**\n+ * A component that starts doing something when the instance is up in discovery and stops doing that\n+ * thing when it goes down.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjM3OTU5", "url": "https://github.com/spinnaker/kork/pull/516#pullrequestreview-359237959", "createdAt": "2020-02-14T21:46:07Z", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo0NjowN1rOFqElEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo1MToyM1rOFqEsTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1OTUzNw==", "bodyText": "I feel like this should throw an exception, or at minimum log an error. If you've gone the distance of setting up configuration to the point that @ConditionalOnExpression(\"${pubsub.enabled:false} && ${pubsub.amazon.enabled:false}\") evaluates true, I would think the application is misconfigured and should not silently fail to do what it's supposedly enabled to do.", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379659537", "createdAt": "2020-02-14T21:46:07Z", "author": {"login": "robzienert"}, "path": "kork-pubsub-aws/src/main/java/com/netflix/spinnaker/kork/pubsub/aws/SQSSubscriberProvider.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.pubsub.aws;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.services.sns.AmazonSNSClientBuilder;\n+import com.amazonaws.services.sqs.AmazonSQSClientBuilder;\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.spinnaker.kork.aws.ARN;\n+import com.netflix.spinnaker.kork.eureka.EurekaActivated;\n+import com.netflix.spinnaker.kork.pubsub.PubsubSubscribers;\n+import com.netflix.spinnaker.kork.pubsub.aws.api.AmazonPubsubMessageHandlerFactory;\n+import com.netflix.spinnaker.kork.pubsub.aws.config.AmazonPubsubProperties;\n+import com.netflix.spinnaker.kork.pubsub.model.PubsubSubscriber;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.RejectedExecutionException;\n+import javax.annotation.PostConstruct;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.stereotype.Component;\n+\n+/** * Starts the individual SQS workers (one for each subscription) */\n+@Component\n+@ConditionalOnExpression(\"${pubsub.enabled:false} && ${pubsub.amazon.enabled:false}\")\n+public class SQSSubscriberProvider implements EurekaActivated {\n+  private static final Logger log = LoggerFactory.getLogger(SQSSubscriberProvider.class);\n+\n+  private final AWSCredentialsProvider awsCredentialsProvider;\n+  private final AmazonPubsubProperties properties;\n+  private final PubsubSubscribers pubsubSubscribers;\n+  private final AmazonPubsubMessageHandlerFactory pubsubMessageHandlerFactory;\n+  private final Registry registry;\n+\n+  @Autowired\n+  public SQSSubscriberProvider(\n+      AWSCredentialsProvider awsCredentialsProvider,\n+      AmazonPubsubProperties properties,\n+      PubsubSubscribers pubsubSubscribers,\n+      AmazonPubsubMessageHandlerFactory pubsubMessageHandlerFactory,\n+      Registry registry) {\n+    this.awsCredentialsProvider = awsCredentialsProvider;\n+    this.properties = properties;\n+    this.pubsubSubscribers = pubsubSubscribers;\n+    this.pubsubMessageHandlerFactory = pubsubMessageHandlerFactory;\n+    this.registry = registry;\n+  }\n+\n+  @PostConstruct\n+  public void start() {\n+    if (properties == null) {\n+      return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1OTYzMg==", "bodyText": "Class and method docs on interfaces.", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379659632", "createdAt": "2020-02-14T21:46:27Z", "author": {"login": "robzienert"}, "path": "kork-pubsub-aws/src/main/java/com/netflix/spinnaker/kork/pubsub/aws/api/AmazonPubsubMessageHandler.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.pubsub.aws.api;\n+\n+import com.amazonaws.services.sqs.model.Message;\n+\n+public interface AmazonPubsubMessageHandler {\n+  void handleMessage(Message message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1OTcxOA==", "bodyText": "Docs on interfaces.", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379659718", "createdAt": "2020-02-14T21:46:42Z", "author": {"login": "robzienert"}, "path": "kork-pubsub-aws/src/main/java/com/netflix/spinnaker/kork/pubsub/aws/api/AmazonPubsubMessageHandlerFactory.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.pubsub.aws.api;\n+\n+import com.netflix.spinnaker.kork.pubsub.aws.config.AmazonPubsubProperties;\n+\n+public interface AmazonPubsubMessageHandlerFactory {\n+  AmazonPubsubMessageHandler create(AmazonPubsubProperties.AmazonPubsubSubscription subscription);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MDIxMw==", "bodyText": "Now that I see this, SQSSubscriberProvider has a redundant @ConditionalOnExpression annotation, and the conditional handling that its properties member is null will always evaluate to false.", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379660213", "createdAt": "2020-02-14T21:48:02Z", "author": {"login": "robzienert"}, "path": "kork-pubsub-aws/src/main/java/com/netflix/spinnaker/kork/pubsub/aws/config/AmazonPubsubConfig.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.pubsub.aws.config;\n+\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.spinnaker.kork.aws.bastion.BastionConfig;\n+import com.netflix.spinnaker.kork.pubsub.PubsubPublishers;\n+import com.netflix.spinnaker.kork.pubsub.PubsubSubscribers;\n+import com.netflix.spinnaker.kork.pubsub.aws.SNSPublisherProvider;\n+import com.netflix.spinnaker.kork.pubsub.aws.SQSSubscriberProvider;\n+import com.netflix.spinnaker.kork.pubsub.aws.api.AmazonPubsubMessageHandlerFactory;\n+import javax.validation.Valid;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+\n+@Configuration\n+@ConditionalOnExpression(\"${pubsub.enabled:false} && ${pubsub.amazon.enabled:false}\")\n+@EnableConfigurationProperties(AmazonPubsubProperties.class)\n+@Import(BastionConfig.class)\n+public class AmazonPubsubConfig {\n+  @Valid @Autowired private AmazonPubsubProperties amazonPubsubProperties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MDY0MQ==", "bodyText": "Do we serialize these configuration properties anywhere? Spring does not need constructors for its properties.", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379660641", "createdAt": "2020-02-14T21:49:14Z", "author": {"login": "robzienert"}, "path": "kork-pubsub-aws/src/main/java/com/netflix/spinnaker/kork/pubsub/aws/config/AmazonPubsubProperties.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.pubsub.aws.config;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import javax.validation.Valid;\n+import javax.validation.constraints.NotEmpty;\n+import lombok.Data;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@Data\n+@ConfigurationProperties(prefix = \"pubsub.amazon\")\n+public class AmazonPubsubProperties {\n+\n+  @Valid private List<AmazonPubsubSubscription> subscriptions;\n+\n+  @Data\n+  public static class AmazonPubsubSubscription {\n+    private static final Logger log = LoggerFactory.getLogger(AmazonPubsubSubscription.class);\n+\n+    @NotEmpty private String name;\n+\n+    @NotEmpty private String topicARN;\n+\n+    @NotEmpty private String queueARN;\n+\n+    private List<String> accountIds = Collections.emptyList();\n+\n+    int visibilityTimeout = 30;\n+    int sqsMessageRetentionPeriodSeconds = 120;\n+    int waitTimeSeconds = 5;\n+    int maxNumberOfMessages = 1;\n+\n+    // TODO: why the constructors?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyOTIxNw=="}, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MDk1Nw==", "bodyText": "Docs.", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379660957", "createdAt": "2020-02-14T21:50:08Z", "author": {"login": "robzienert"}, "path": "kork-pubsub/src/main/java/com/netflix/spinnaker/kork/pubsub/model/PubsubPublisher.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.pubsub.model;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public interface PubsubPublisher {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MTM4OA==", "bodyText": "nit: I'm not particularly stoked on using enums for things like this. It means that if anyone comes along and wants to add an extension for their own pubsub implementation, they need to make a change to core Spinnaker code before it's even possible to do so.", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379661388", "createdAt": "2020-02-14T21:51:23Z", "author": {"login": "robzienert"}, "path": "kork-pubsub/src/main/java/com/netflix/spinnaker/kork/pubsub/model/PubsubSystem.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.pubsub.model;\n+\n+public enum PubsubSystem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjQ2MDg3", "url": "https://github.com/spinnaker/kork/pull/516#pullrequestreview-359246087", "createdAt": "2020-02-14T22:04:44Z", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjowNDo0NFrOFqE-RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjowNDo0NFrOFqE-RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NTk4OA==", "bodyText": "this field is static since declared on the interface - I feel like if that is the intention then there should be a single concrete EurekaActivated object in the application context that other components could have injected rather than having things extend this interface", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379665988", "createdAt": "2020-02-14T22:04:44Z", "author": {"login": "cfieber"}, "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/eureka/EurekaActivated.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.eureka;\n+\n+import com.netflix.appinfo.InstanceInfo;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationListener;\n+\n+/**\n+ * A component that starts doing something when the instance is up in discovery and stops doing that\n+ * thing when it goes down.\n+ */\n+public interface EurekaActivated extends ApplicationListener<RemoteStatusChangedEvent> {\n+\n+  Logger log = LoggerFactory.getLogger(EurekaActivated.class);\n+\n+  AtomicBoolean enabled = new AtomicBoolean();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjQ2OTEx", "url": "https://github.com/spinnaker/kork/pull/516#pullrequestreview-359246911", "createdAt": "2020-02-14T22:06:52Z", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjowNjo1MlrOFqFAvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjowNjo1MlrOFqFAvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NjYyMg==", "bodyText": "I think you can control constructors via some lombokery (@NoArgsConstructor and @AllArgsConstructor some of which you maybe get for free from @Data)", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379666622", "createdAt": "2020-02-14T22:06:52Z", "author": {"login": "cfieber"}, "path": "kork-pubsub-aws/src/main/java/com/netflix/spinnaker/kork/pubsub/aws/MessageAttribute.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.pubsub.aws;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Data;\n+\n+@Data\n+public class MessageAttribute {\n+\n+  @JsonProperty(\"Type\")\n+  private String attributeType;\n+\n+  @JsonProperty(\"Value\")\n+  private String attributeValue;\n+\n+  public MessageAttribute() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjQ3MzIx", "url": "https://github.com/spinnaker/kork/pull/516#pullrequestreview-359247321", "createdAt": "2020-02-14T22:07:56Z", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjowNzo1N1rOFqFCBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjowNzo1N1rOFqFCBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2Njk1MQ==", "bodyText": "would type this if you can't get the constructors for free", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379666951", "createdAt": "2020-02-14T22:07:57Z", "author": {"login": "cfieber"}, "path": "kork-pubsub-aws/src/main/java/com/netflix/spinnaker/kork/pubsub/aws/NotificationMessage.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.pubsub.aws;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.Map;\n+import lombok.Data;\n+\n+@Data\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class NotificationMessage {\n+  @JsonProperty(\"Type\")\n+  private String type;\n+\n+  @JsonProperty(\"MessageId\")\n+  private String messageId;\n+\n+  @JsonProperty(\"TopicArn\")\n+  private String topicArn;\n+\n+  @JsonProperty(\"Subject\")\n+  private String subject;\n+\n+  @JsonProperty(\"Message\")\n+  private String message;\n+\n+  @JsonProperty(\"MessageAttributes\")\n+  private Map<String, MessageAttribute> messageAttributes;\n+\n+  public NotificationMessage() {}\n+\n+  public NotificationMessage(\n+      String type,\n+      String messageId,\n+      String topicArn,\n+      String subject,\n+      String message,\n+      Map messageAttributes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjQ3NTc1", "url": "https://github.com/spinnaker/kork/pull/516#pullrequestreview-359247575", "createdAt": "2020-02-14T22:08:34Z", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjowODozNVrOFqFC1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjowODozNVrOFqFC1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NzE1Ng==", "bodyText": "maybe worth some retrys around this bit", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379667156", "createdAt": "2020-02-14T22:08:35Z", "author": {"login": "cfieber"}, "path": "kork-pubsub-aws/src/main/java/com/netflix/spinnaker/kork/pubsub/aws/PubSubUtils.java", "diffHunk": "@@ -14,26 +14,44 @@\n  * limitations under the License.\n  */\n \n-package com.netflix.spinnaker.kork.aws.pubsub;\n+package com.netflix.spinnaker.kork.pubsub.aws;\n \n import com.amazonaws.auth.policy.*;\n+import com.amazonaws.auth.policy.actions.SNSActions;\n import com.amazonaws.auth.policy.actions.SQSActions;\n import com.amazonaws.services.sns.AmazonSNS;\n+import com.amazonaws.services.sns.model.SetTopicAttributesRequest;\n import com.amazonaws.services.sqs.AmazonSQS;\n+import com.amazonaws.services.sqs.model.QueueDoesNotExistException;\n import com.netflix.spinnaker.kork.aws.ARN;\n+import com.netflix.spinnaker.kork.pubsub.aws.config.AmazonPubsubProperties.AmazonPubsubSubscription;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /** Utils for working with AWS SNS and SQS across services */\n public class PubSubUtils {\n   private static final Logger log = LoggerFactory.getLogger(PubSubUtils.class);\n \n+  private static String getQueueUrl(AmazonSQS amazonSQS, ARN queueARN) {\n+    String queueUrl;\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjQ4MDYw", "url": "https://github.com/spinnaker/kork/pull/516#pullrequestreview-359248060", "createdAt": "2020-02-14T22:09:47Z", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjowOTo0N1rOFqFEMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjowOTo0N1rOFqFEMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2NzUwNA==", "bodyText": "maybe worth some retries on this too - I suspect topic creation is idempotentish so probably safe to retry.", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379667504", "createdAt": "2020-02-14T22:09:47Z", "author": {"login": "cfieber"}, "path": "kork-pubsub-aws/src/main/java/com/netflix/spinnaker/kork/pubsub/aws/PubSubUtils.java", "diffHunk": "@@ -63,4 +81,37 @@ public static Policy buildSQSPolicy(ARN queue, ARN topic) {\n \n     return new Policy(\"allow-sns-send\", Collections.singletonList(snsStatement));\n   }\n+\n+  /**\n+   * Ensure that the topic exists and has a policy granting the specified accounts permission to\n+   * publish messages to it\n+   */\n+  public static String ensureTopicExists(\n+      AmazonSNS amazonSNS, ARN topicARN, AmazonPubsubSubscription subscription) {\n+    String createdTopicARN = amazonSNS.createTopic(topicARN.getName()).getTopicArn();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjQ4NDUy", "url": "https://github.com/spinnaker/kork/pull/516#pullrequestreview-359248452", "createdAt": "2020-02-14T22:10:46Z", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjoxMDo0NlrOFqFFRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjoxMDo0NlrOFqFFRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2Nzc4Mg==", "bodyText": "any thing we could do to safely retry in here?", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379667782", "createdAt": "2020-02-14T22:10:46Z", "author": {"login": "cfieber"}, "path": "kork-pubsub-aws/src/main/java/com/netflix/spinnaker/kork/pubsub/aws/SNSPublisher.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.pubsub.aws;\n+\n+import com.amazonaws.services.sns.AmazonSNS;\n+import com.amazonaws.services.sns.model.PublishRequest;\n+import com.amazonaws.services.sns.model.PublishResult;\n+import com.netflix.spectator.api.Counter;\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.spinnaker.kork.aws.ARN;\n+import com.netflix.spinnaker.kork.pubsub.aws.config.AmazonPubsubProperties;\n+import com.netflix.spinnaker.kork.pubsub.model.PubsubPublisher;\n+import com.netflix.spinnaker.kork.pubsub.model.PubsubSystem;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** One publisher for each topic */\n+public class SNSPublisher implements PubsubPublisher {\n+  private static final Logger log = LoggerFactory.getLogger(SNSPublisher.class);\n+\n+  private final AmazonSNS amazonSNS;\n+  private final AmazonPubsubProperties.AmazonPubsubSubscription subscription;\n+  private final Registry registry;\n+  private final Supplier<Boolean> isEnabled;\n+\n+  private final ARN topicARN;\n+\n+  public SNSPublisher(\n+      AmazonPubsubProperties.AmazonPubsubSubscription subscription,\n+      AmazonSNS amazonSNS,\n+      Supplier<Boolean> isEnabled,\n+      Registry registry) {\n+    this.subscription = subscription;\n+    this.amazonSNS = amazonSNS;\n+    this.isEnabled = isEnabled;\n+    this.registry = registry;\n+    this.topicARN = new ARN(subscription.getTopicARN());\n+\n+    initializeTopic();\n+  }\n+\n+  @Override\n+  public PubsubSystem getPubsubSystem() {\n+    return PubsubSystem.AMAZON;\n+  }\n+\n+  @Override\n+  public String getTopicName() {\n+    return subscription.getName();\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return getTopicName();\n+  }\n+\n+  private void initializeTopic() {\n+    PubSubUtils.ensureTopicExists(amazonSNS, topicARN, subscription);\n+  }\n+\n+  @Override\n+  public void publish(String message, Map<String, String> attributes) {\n+    publishMessage(message);\n+  }\n+\n+  public Optional<PublishResult> publishMessage(String message) {\n+    if (!isEnabled.get()) {\n+      log.warn(\"Publishing is disabled for topic {}, dropping message {}\", topicARN, message);\n+      return Optional.empty();\n+    }\n+\n+    try {\n+      PublishRequest publishRequest = new PublishRequest(topicARN.getArn(), message);\n+      PublishResult publishResponse = amazonSNS.publish(publishRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjUwODQ5", "url": "https://github.com/spinnaker/kork/pull/516#pullrequestreview-359250849", "createdAt": "2020-02-14T22:16:56Z", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjoxNjo1NlrOFqFNDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjoxNjo1NlrOFqFNDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2OTc3Mg==", "bodyText": "can replace this with @ConditionalOnProperty({\"pubsub.enabled\", \"pubsub.amazon.enabled\"})", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379669772", "createdAt": "2020-02-14T22:16:56Z", "author": {"login": "cfieber"}, "path": "kork-pubsub-aws/src/main/java/com/netflix/spinnaker/kork/pubsub/aws/SNSPublisherProvider.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.pubsub.aws;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.services.sns.AmazonSNSClientBuilder;\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.spinnaker.kork.aws.ARN;\n+import com.netflix.spinnaker.kork.eureka.EurekaActivated;\n+import com.netflix.spinnaker.kork.pubsub.PubsubPublishers;\n+import com.netflix.spinnaker.kork.pubsub.aws.config.AmazonPubsubProperties;\n+import com.netflix.spinnaker.kork.pubsub.model.PubsubPublisher;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.PostConstruct;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.stereotype.Component;\n+\n+/** Creates one SNSPublisher per subscription */\n+@Component\n+@ConditionalOnExpression(\"${pubsub.enabled:false} && ${pubsub.amazon.enabled:false}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjUxNDcw", "url": "https://github.com/spinnaker/kork/pull/516#pullrequestreview-359251470", "createdAt": "2020-02-14T22:18:35Z", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjoxODozNVrOFqFO-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjoxODozNVrOFqFO-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3MDI2Ng==", "bodyText": "might need error handling here not to break out of the while loop on an AmazonException", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379670266", "createdAt": "2020-02-14T22:18:35Z", "author": {"login": "cfieber"}, "path": "kork-pubsub-aws/src/main/java/com/netflix/spinnaker/kork/pubsub/aws/SQSSubscriber.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.pubsub.aws;\n+\n+import com.amazonaws.services.sns.AmazonSNS;\n+import com.amazonaws.services.sqs.AmazonSQS;\n+import com.amazonaws.services.sqs.model.Message;\n+import com.amazonaws.services.sqs.model.QueueDoesNotExistException;\n+import com.amazonaws.services.sqs.model.ReceiveMessageRequest;\n+import com.amazonaws.services.sqs.model.ReceiveMessageResult;\n+import com.netflix.spectator.api.Counter;\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.spinnaker.kork.aws.ARN;\n+import com.netflix.spinnaker.kork.pubsub.aws.api.AmazonPubsubMessageHandler;\n+import com.netflix.spinnaker.kork.pubsub.aws.config.AmazonPubsubProperties;\n+import com.netflix.spinnaker.kork.pubsub.model.PubsubSubscriber;\n+import com.netflix.spinnaker.kork.pubsub.model.PubsubSystem;\n+import java.util.function.Supplier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * One subscriber for each subscription. The subscriber makes sure the SQS queue is created,\n+ * subscribes to the SNS topic, polls the queue for messages, and removes them once processed.\n+ */\n+public class SQSSubscriber implements Runnable, PubsubSubscriber {\n+  private static final Logger log = LoggerFactory.getLogger(SQSSubscriber.class);\n+  private static final PubsubSystem pubsubSystem = PubsubSystem.AMAZON;\n+\n+  private final AmazonSNS amazonSNS;\n+  private final AmazonSQS amazonSQS;\n+  private final AmazonPubsubProperties.AmazonPubsubSubscription subscription;\n+  private final AmazonPubsubMessageHandler messageHandler;\n+  private final Registry registry;\n+  private final Supplier<Boolean> isEnabled;\n+\n+  private final ARN queueARN;\n+  private final ARN topicARN;\n+  private String queueUrl;\n+\n+  public SQSSubscriber(\n+      AmazonPubsubProperties.AmazonPubsubSubscription subscription,\n+      AmazonPubsubMessageHandler messageHandler,\n+      AmazonSNS amazonSNS,\n+      AmazonSQS amazonSQS,\n+      Supplier<Boolean> isEnabled,\n+      Registry registry) {\n+    this.subscription = subscription;\n+    this.messageHandler = messageHandler;\n+    this.amazonSNS = amazonSNS;\n+    this.amazonSQS = amazonSQS;\n+    this.isEnabled = isEnabled;\n+    this.registry = registry;\n+\n+    this.queueARN = new ARN(subscription.getQueueARN());\n+    this.topicARN = new ARN(subscription.getTopicARN());\n+  }\n+\n+  public String getWorkerName() {\n+    return queueARN.getArn() + \"/\" + SQSSubscriber.class.getSimpleName();\n+  }\n+\n+  @Override\n+  public PubsubSystem getPubsubSystem() {\n+    return pubsubSystem;\n+  }\n+\n+  @Override\n+  public String getSubscriptionName() {\n+    return subscription.getName();\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return getSubscriptionName();\n+  }\n+\n+  @Override\n+  public void run() {\n+    log.info(\"Starting {}\", getWorkerName());\n+    try {\n+      initializeQueue();\n+    } catch (Exception e) {\n+      log.error(\"Error initializing queue {}\", queueARN, e);\n+      throw e;\n+    }\n+\n+    while (true) {\n+      try {\n+        listenForMessages();\n+      } catch (QueueDoesNotExistException e) {\n+        log.warn(\"Queue {} does not exist, recreating\", queueARN, e);\n+        initializeQueue();\n+      } catch (Exception e) {\n+        log.error(\"Unexpected error running {}, restarting worker\", getWorkerName(), e);\n+        try {\n+          Thread.sleep(500);\n+        } catch (InterruptedException e1) {\n+          log.error(\"Thread {} interrupted while sleeping\", getWorkerName(), e1);\n+        }\n+      }\n+    }\n+  }\n+\n+  private void initializeQueue() {\n+    this.queueUrl =\n+        PubSubUtils.ensureQueueExists(\n+            amazonSQS, queueARN, topicARN, subscription.getSqsMessageRetentionPeriodSeconds());\n+    PubSubUtils.subscribeToTopic(amazonSNS, topicARN, queueARN);\n+  }\n+\n+  private void listenForMessages() {\n+    while (isEnabled.get()) {\n+      ReceiveMessageResult receiveMessageResult =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjUyNjg1", "url": "https://github.com/spinnaker/kork/pull/516#pullrequestreview-359252685", "createdAt": "2020-02-14T22:21:44Z", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjoyMTo0NFrOFqFS2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjoyMTo0NFrOFqFS2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3MTI1Nw==", "bodyText": "is it the messageHandler's job to mark the message as handled successfully?\nwould it make sense to put that responsibility in here, and then maybe on error we could know that we could return the message to the queue with a failure status and eventually it can get DLQ'd (otherwise it won't redrive until its visiblity timeout expires - maybe a longer backoff than we want)", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379671257", "createdAt": "2020-02-14T22:21:44Z", "author": {"login": "cfieber"}, "path": "kork-pubsub-aws/src/main/java/com/netflix/spinnaker/kork/pubsub/aws/SQSSubscriber.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.pubsub.aws;\n+\n+import com.amazonaws.services.sns.AmazonSNS;\n+import com.amazonaws.services.sqs.AmazonSQS;\n+import com.amazonaws.services.sqs.model.Message;\n+import com.amazonaws.services.sqs.model.QueueDoesNotExistException;\n+import com.amazonaws.services.sqs.model.ReceiveMessageRequest;\n+import com.amazonaws.services.sqs.model.ReceiveMessageResult;\n+import com.netflix.spectator.api.Counter;\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.spinnaker.kork.aws.ARN;\n+import com.netflix.spinnaker.kork.pubsub.aws.api.AmazonPubsubMessageHandler;\n+import com.netflix.spinnaker.kork.pubsub.aws.config.AmazonPubsubProperties;\n+import com.netflix.spinnaker.kork.pubsub.model.PubsubSubscriber;\n+import com.netflix.spinnaker.kork.pubsub.model.PubsubSystem;\n+import java.util.function.Supplier;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * One subscriber for each subscription. The subscriber makes sure the SQS queue is created,\n+ * subscribes to the SNS topic, polls the queue for messages, and removes them once processed.\n+ */\n+public class SQSSubscriber implements Runnable, PubsubSubscriber {\n+  private static final Logger log = LoggerFactory.getLogger(SQSSubscriber.class);\n+  private static final PubsubSystem pubsubSystem = PubsubSystem.AMAZON;\n+\n+  private final AmazonSNS amazonSNS;\n+  private final AmazonSQS amazonSQS;\n+  private final AmazonPubsubProperties.AmazonPubsubSubscription subscription;\n+  private final AmazonPubsubMessageHandler messageHandler;\n+  private final Registry registry;\n+  private final Supplier<Boolean> isEnabled;\n+\n+  private final ARN queueARN;\n+  private final ARN topicARN;\n+  private String queueUrl;\n+\n+  public SQSSubscriber(\n+      AmazonPubsubProperties.AmazonPubsubSubscription subscription,\n+      AmazonPubsubMessageHandler messageHandler,\n+      AmazonSNS amazonSNS,\n+      AmazonSQS amazonSQS,\n+      Supplier<Boolean> isEnabled,\n+      Registry registry) {\n+    this.subscription = subscription;\n+    this.messageHandler = messageHandler;\n+    this.amazonSNS = amazonSNS;\n+    this.amazonSQS = amazonSQS;\n+    this.isEnabled = isEnabled;\n+    this.registry = registry;\n+\n+    this.queueARN = new ARN(subscription.getQueueARN());\n+    this.topicARN = new ARN(subscription.getTopicARN());\n+  }\n+\n+  public String getWorkerName() {\n+    return queueARN.getArn() + \"/\" + SQSSubscriber.class.getSimpleName();\n+  }\n+\n+  @Override\n+  public PubsubSystem getPubsubSystem() {\n+    return pubsubSystem;\n+  }\n+\n+  @Override\n+  public String getSubscriptionName() {\n+    return subscription.getName();\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return getSubscriptionName();\n+  }\n+\n+  @Override\n+  public void run() {\n+    log.info(\"Starting {}\", getWorkerName());\n+    try {\n+      initializeQueue();\n+    } catch (Exception e) {\n+      log.error(\"Error initializing queue {}\", queueARN, e);\n+      throw e;\n+    }\n+\n+    while (true) {\n+      try {\n+        listenForMessages();\n+      } catch (QueueDoesNotExistException e) {\n+        log.warn(\"Queue {} does not exist, recreating\", queueARN, e);\n+        initializeQueue();\n+      } catch (Exception e) {\n+        log.error(\"Unexpected error running {}, restarting worker\", getWorkerName(), e);\n+        try {\n+          Thread.sleep(500);\n+        } catch (InterruptedException e1) {\n+          log.error(\"Thread {} interrupted while sleeping\", getWorkerName(), e1);\n+        }\n+      }\n+    }\n+  }\n+\n+  private void initializeQueue() {\n+    this.queueUrl =\n+        PubSubUtils.ensureQueueExists(\n+            amazonSQS, queueARN, topicARN, subscription.getSqsMessageRetentionPeriodSeconds());\n+    PubSubUtils.subscribeToTopic(amazonSNS, topicARN, queueARN);\n+  }\n+\n+  private void listenForMessages() {\n+    while (isEnabled.get()) {\n+      ReceiveMessageResult receiveMessageResult =\n+          amazonSQS.receiveMessage(\n+              new ReceiveMessageRequest(this.queueUrl)\n+                  .withMaxNumberOfMessages(subscription.getMaxNumberOfMessages())\n+                  .withVisibilityTimeout(subscription.getVisibilityTimeout())\n+                  .withWaitTimeSeconds(subscription.getWaitTimeSeconds())\n+                  .withMessageAttributeNames(\"All\"));\n+\n+      if (receiveMessageResult.getMessages().isEmpty()) {\n+        log.debug(\"Received no messages for queue {}\", queueARN);\n+        continue;\n+      }\n+\n+      receiveMessageResult.getMessages().forEach(this::handleMessage);\n+    }\n+  }\n+\n+  private void handleMessage(Message message) {\n+    try {\n+      messageHandler.handleMessage(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 147}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjUzNTYy", "url": "https://github.com/spinnaker/kork/pull/516#pullrequestreview-359253562", "createdAt": "2020-02-14T22:24:05Z", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjoyNDowNlrOFqFV6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMjoyNDowNlrOFqFV6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY3MjA0MQ==", "bodyText": "same on the collapsing this to a @ConditionalOnProperty", "url": "https://github.com/spinnaker/kork/pull/516#discussion_r379672041", "createdAt": "2020-02-14T22:24:06Z", "author": {"login": "cfieber"}, "path": "kork-pubsub-aws/src/main/java/com/netflix/spinnaker/kork/pubsub/aws/SQSSubscriberProvider.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.pubsub.aws;\n+\n+import com.amazonaws.ClientConfiguration;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.services.sns.AmazonSNSClientBuilder;\n+import com.amazonaws.services.sqs.AmazonSQSClientBuilder;\n+import com.netflix.spectator.api.Registry;\n+import com.netflix.spinnaker.kork.aws.ARN;\n+import com.netflix.spinnaker.kork.eureka.EurekaActivated;\n+import com.netflix.spinnaker.kork.pubsub.PubsubSubscribers;\n+import com.netflix.spinnaker.kork.pubsub.aws.api.AmazonPubsubMessageHandlerFactory;\n+import com.netflix.spinnaker.kork.pubsub.aws.config.AmazonPubsubProperties;\n+import com.netflix.spinnaker.kork.pubsub.model.PubsubSubscriber;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.RejectedExecutionException;\n+import javax.annotation.PostConstruct;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n+import org.springframework.stereotype.Component;\n+\n+/** * Starts the individual SQS workers (one for each subscription) */\n+@Component\n+@ConditionalOnExpression(\"${pubsub.enabled:false} && ${pubsub.amazon.enabled:false}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjU1NjQw", "url": "https://github.com/spinnaker/kork/pull/516#pullrequestreview-359255640", "createdAt": "2020-02-14T22:29:46Z", "commit": {"oid": "72306a07693af35fc8dd1f75732461008230f798"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dbc7315885afb8b4e99994a771eb1fc0d99c5fb", "author": {"user": {"login": "dreynaud", "name": "Daniel Reynaud"}}, "url": "https://github.com/spinnaker/kork/commit/3dbc7315885afb8b4e99994a771eb1fc0d99c5fb", "committedDate": "2020-02-15T01:31:59Z", "message": "chore(pubsub): retry support, docs and cleanups\n\n- add retry support in a few places where it makes sense\n- replace the PubsubSystem enum with a String\n- lombokify unnecessary constructors\n- document interfaces\n- replace a handful of @ConditionalOnExpression with @ConditionalOnProperty"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51dc54db6bb2442b342d12e47d6d4d2164942237", "author": {"user": {"login": "dreynaud", "name": "Daniel Reynaud"}}, "url": "https://github.com/spinnaker/kork/commit/51dc54db6bb2442b342d12e47d6d4d2164942237", "committedDate": "2020-02-18T21:28:32Z", "message": "feat(pubsub): check dynamic config for enabled flag\n\nAlso address an issue where EurekaActivated was an interface with a static enabled flag.\n\nInstead, let's replace it with single EurekaStatusListener bean that can be injected, per cfieber's recommendation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "755c00e10351811b9c750974035b64c455f89ebc", "author": {"user": {"login": "dreynaud", "name": "Daniel Reynaud"}}, "url": "https://github.com/spinnaker/kork/commit/755c00e10351811b9c750974035b64c455f89ebc", "committedDate": "2020-02-18T22:08:23Z", "message": "test(pubsub): add serde test for NotificationMessage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b9e18a5486e5f1d82337569f31b9dc0ed780663", "author": {"user": {"login": "dreynaud", "name": "Daniel Reynaud"}}, "url": "https://github.com/spinnaker/kork/commit/3b9e18a5486e5f1d82337569f31b9dc0ed780663", "committedDate": "2020-02-19T01:43:39Z", "message": "feat(pubsub): add message acknowledger interface\n\n+ default implementation for SQS that deletes messages and records metrics\n+ default config, conditional on missing bean so that it can be customized\n+ test that we either ack or nack based on the message handler throwing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9575cd37e8a7860877bf90d8bca48c11088f203a", "author": {"user": {"login": "dreynaud", "name": "Daniel Reynaud"}}, "url": "https://github.com/spinnaker/kork/commit/9575cd37e8a7860877bf90d8bca48c11088f203a", "committedDate": "2020-02-20T01:43:26Z", "message": "feat(pubsub): add a per-subscription toggle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c29674c46af8c631043777f43d7940455b019911", "author": {"user": {"login": "dreynaud", "name": "Daniel Reynaud"}}, "url": "https://github.com/spinnaker/kork/commit/c29674c46af8c631043777f43d7940455b019911", "committedDate": "2020-02-20T01:44:07Z", "message": "docs(pubsub): add a README file for kork-pubsub"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "480870aaf7b4414c044d3687fd13f8697175f194", "author": {"user": {"login": "dreynaud", "name": "Daniel Reynaud"}}, "url": "https://github.com/spinnaker/kork/commit/480870aaf7b4414c044d3687fd13f8697175f194", "committedDate": "2020-02-20T17:28:42Z", "message": "Merge branch 'master' into pubsub-squashed"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1553, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}