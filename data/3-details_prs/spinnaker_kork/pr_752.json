{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMzg1OTIw", "number": 752, "title": "feat(plugins): Spring-backed native plugin extensions", "bodyText": "There's a lot here, all of which is gated on spinnaker.extensibility.framework.version=V2. Services will continue to use V1 without configuration, and all existing plugins will continue to work, including existing kork-plugins-spring-api based plugins. This V2 framework is not yet feature complete, but the diff was getting large enough that I didn't want to big-bang it.\nThis PR satisfies the happy-path of backing native extension by Spring, meaning plugins can define both arbitrary classes as well as extensions for autowiring handled by Spring. Service dependencies will be injected if they are part of the service API module, and SpinnakerExtensionPoint classes in the plugin will be auto-promoted to the service ApplicationContext for autowiring into core components.\nThis work shares a lot of the same workflows that PrivilegedSpringPlugin has to make it work. What's different is that Spring is not exposed as part of the API. This means it continues to be less powerful, but has the advantage of not being subject to as many ClassLoader and bytecode incompatibility errors. As time goes on, I imagine we'll be able to continue to close the gap between kork-plugins-api and the functionality offered by kork-plugins-spring-api.\nOne big benefit of this change is that the plugin framework, once it's all said and done, will not need its factory beans defined a static, which will open the doors to a lot of simplification across the codebase as we'll be able to lean more heavily on Spring. \ud83c\udf08\nMajor things not done in this PR (to be done in subsequent PRs):\n\n@ExtensionConfiguration is not yet created correctly.\nExtension method proxying (metrics, logs, etc). This will transition to Spring AOP.\nExpanded testing. I wasn't happy with the testing libs that we have today, so I started down the path of making some improvements, but more need to be done.\nMoving v2 package into the rest of the codebase. I'm keeping it separate for my own sanity.", "createdAt": "2020-08-19T19:16:28Z", "url": "https://github.com/spinnaker/kork/pull/752", "merged": true, "mergeCommit": {"oid": "a0545f4f6e50ca2e403ad4b7571320776e8085e1"}, "closed": true, "closedAt": "2020-08-21T19:38:52Z", "author": {"login": "robzienert"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAg047AFqTQ3MDc3MzgxNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBKD3dAH2gAyNDcwMzg1OTIwOjY1ZGE3OWE5MWY5MGU2Y2Y1MDI0N2Y1YTA4ZmRlYWE0YzJlNGFkMGE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNzczODE0", "url": "https://github.com/spinnaker/kork/pull/752#pullrequestreview-470773814", "createdAt": "2020-08-19T19:31:57Z", "commit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTozMTo1N1rOHDWJPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTozMTo1N1rOHDWJPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3MDU4OQ==", "bodyText": "I'm wondering what happens if someone creates in the plugin classes MyExtensionImpl that implements a defined extension point MyExtension, since the bean class is MyExtensionImpl and only known to the plugin classloader, is spring able to resolve that the bean is an instance of MyExtension?\nI'm sort of wondering if this needs to register the bean class as the MyExtension class instead - but I have no idea whether this is an issue or not", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473270589", "createdAt": "2020-08-19T19:31:57Z", "author": {"login": "cfieber"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/ExtensionPromotionBeanPostProcessor.kt", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2\n+\n+import com.netflix.spinnaker.kork.plugins.api.internal.SpinnakerExtensionPoint\n+import org.pf4j.PluginWrapper\n+import org.slf4j.LoggerFactory\n+import org.springframework.beans.factory.config.BeanPostProcessor\n+import org.springframework.context.support.GenericApplicationContext\n+import org.springframework.core.Ordered\n+import org.springframework.core.PriorityOrdered\n+import org.springframework.util.Assert\n+\n+/**\n+ * Handles promotion of plugin beans to the parent service application context.\n+ *\n+ * Only beans that implement [SpinnakerExtensionPoint] are candidates for promotion.\n+ */\n+class ExtensionPromotionBeanPostProcessor(\n+  private val pluginWrapper: PluginWrapper,\n+  private val pluginApplicationContext: GenericApplicationContext,\n+  private val beanPromoter: BeanPromoter\n+) : BeanPostProcessor, PriorityOrdered {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun postProcessAfterInitialization(bean: Any, beanName: String): Any? {\n+    val definition = pluginApplicationContext.getBeanDefinition(beanName)\n+\n+    Assert.notNull(definition.beanClassName, \"Bean class name is null\")\n+\n+    val beanClass = getBeanClass(definition.beanClassName!!)\n+    if (SpinnakerExtensionPoint::class.java.isAssignableFrom(beanClass)) {\n+      log.debug(\"Promoting plugin extension to service context (${pluginWrapper.pluginId}): $beanClass\")\n+      beanPromoter.promote(\"${pluginWrapper.pluginId}_${beanName}\", bean, beanClass)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDAyNzgz", "url": "https://github.com/spinnaker/kork/pull/752#pullrequestreview-471002783", "createdAt": "2020-08-19T22:16:18Z", "commit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxNjoxOVrOHDcvoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoxNjoxOVrOHDcvoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3ODcyMA==", "bodyText": "I wonder if there is an opportunity here to unify what we have in kork-plugins-tck.  We don't actually use TestPluginBuilder there, but instead use PluginJar and PluginZip.  Here's an example (and we also have examples in Orca, Echo, and Gate):\nhttps://github.com/spinnaker/kork/blob/master/kork-plugins-tck/src/test/kotlin/com/spinnaker/netflix/kork/plugins/tck/PluginsTckFixtureTest.kt#L73", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473378720", "createdAt": "2020-08-19T22:16:19Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/testplugin/GeneratedPluginFixture.kt", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.testplugin\n+\n+import com.netflix.spinnaker.config.PluginsAutoConfiguration\n+import com.netflix.spinnaker.kork.plugins.FRAMEWORK_V2\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginDescriptor\n+import com.netflix.spinnaker.kork.plugins.finders.SpinnakerPropertiesPluginDescriptorFinder\n+import com.netflix.spinnaker.kork.plugins.internal.TestPlugin\n+import org.springframework.boot.autoconfigure.AutoConfigurations\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner\n+import java.nio.file.Files\n+import java.nio.file.Path\n+\n+/**\n+ * Standard fixture for tests that need to generate a plugin.\n+ *\n+ * It is recommended to create a companion object to wrap this fixture so that a new plugin is\n+ * not generated for each test case.\n+ */\n+class GeneratedPluginFixture(pluginName: String, builder: TestPluginBuilder.() -> Unit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMTUyNTkx", "url": "https://github.com/spinnaker/kork/pull/752#pullrequestreview-471152591", "createdAt": "2020-08-20T04:02:00Z", "commit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDowMjowMFrOHDosNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDowMjowMFrOHDosNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3NDQ1NA==", "bodyText": "nit: single imports.", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473574454", "createdAt": "2020-08-20T04:02:00Z", "author": {"login": "luispollo"}, "path": "kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/PluginComponent.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.api;\n+\n+import com.netflix.spinnaker.kork.annotations.Beta;\n+\n+import java.lang.annotation.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMTU3MDI1", "url": "https://github.com/spinnaker/kork/pull/752#pullrequestreview-471157025", "createdAt": "2020-08-20T04:04:40Z", "commit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDowNDo0MVrOHDou_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDowNDo0MVrOHDou_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3NTE2NA==", "bodyText": "The second part of this comment seems to be more encompassing than what's on line 23. Worth reconciling?", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473575164", "createdAt": "2020-08-20T04:04:41Z", "author": {"login": "luispollo"}, "path": "kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/PluginComponent.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.api;\n+\n+import com.netflix.spinnaker.kork.annotations.Beta;\n+\n+import java.lang.annotation.*;\n+\n+/**\n+ * Marks a class within a plugin as one that is candidate for dependency injection.\n+ *\n+ * Classes defined within the plugin, as well as classes exposed via a service's API are valid candidates for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMTU5Njg1", "url": "https://github.com/spinnaker/kork/pull/752#pullrequestreview-471159685", "createdAt": "2020-08-20T04:06:14Z", "commit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDowNjoxNVrOHDowwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDowNjoxNVrOHDowwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3NTYxNw==", "bodyText": "Hmm, are we relaxing the style on star imports? Then I won't nitpick elsewhere. \ud83d\ude42", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473575617", "createdAt": "2020-08-20T04:06:15Z", "author": {"login": "luispollo"}, "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java", "diffHunk": "@@ -20,11 +20,7 @@\n import com.netflix.spinnaker.config.PluginsConfigurationProperties.PluginRepositoryProperties;\n import com.netflix.spinnaker.kork.dynamicconfig.DynamicConfigService;\n import com.netflix.spinnaker.kork.dynamicconfig.SpringDynamicConfigService;\n-import com.netflix.spinnaker.kork.plugins.ExtensionBeanDefinitionRegistryPostProcessor;\n-import com.netflix.spinnaker.kork.plugins.SpinnakerPluginManager;\n-import com.netflix.spinnaker.kork.plugins.SpinnakerServiceVersionManager;\n-import com.netflix.spinnaker.kork.plugins.SpringPluginStatusProvider;\n-import com.netflix.spinnaker.kork.plugins.SpringStrictPluginLoaderStatusProvider;\n+import com.netflix.spinnaker.kork.plugins.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMTY5OTIy", "url": "https://github.com/spinnaker/kork/pull/752#pullrequestreview-471169922", "createdAt": "2020-08-20T04:12:21Z", "commit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDoxMjoyMVrOHDo3yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDoxMjoyMVrOHDo3yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3NzQxOA==", "bodyText": "(Just for my education) I'm curious how this works in the first place (even with PrivilegedSpringPlugin) since plugin classes are loaded in a separate class loader from the service's. Do the class loaders of the parent and the plugin interact in some way?", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473577418", "createdAt": "2020-08-20T04:12:21Z", "author": {"login": "luispollo"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/DefaultBeanPromoter.kt", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2\n+\n+import org.springframework.context.support.GenericApplicationContext\n+\n+/**\n+ * Promotes a given plugin bean to the provided [serviceApplicationContext].\n+ */\n+class DefaultBeanPromoter(\n+  private val serviceApplicationContext: GenericApplicationContext\n+) : BeanPromoter {\n+\n+  override fun promote(beanName: String, bean: Any, beanClass: Class<*>) {\n+    serviceApplicationContext.registerBean(\n+      beanName,\n+      beanClass,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMTg1NTUw", "url": "https://github.com/spinnaker/kork/pull/752#pullrequestreview-471185550", "createdAt": "2020-08-20T04:22:01Z", "commit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDoyMjowMlrOHDpA5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDoyMjowMlrOHDpA5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU3OTc0OQ==", "bodyText": "Isn't this the other way around? Ordered.HIGHEST_PRECEDENCE is defined as Integer.MIN_VALUE (i.e. loads earlier).", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473579749", "createdAt": "2020-08-20T04:22:02Z", "author": {"login": "luispollo"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/PluginFrameworkInitializer.kt", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2\n+\n+import org.slf4j.LoggerFactory\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory\n+import org.springframework.beans.factory.support.BeanDefinitionRegistry\n+import org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor\n+import org.springframework.context.ApplicationContext\n+import org.springframework.context.ApplicationContextAware\n+import org.springframework.core.Ordered\n+import org.springframework.core.PriorityOrdered\n+\n+/**\n+ * Responsible for initializing the plugin framework within a service.\n+ *\n+ * [PriorityOrdered] to run as early as possible in the service application lifecycle.\n+ */\n+class PluginFrameworkInitializer(\n+  private val pluginService: SpinnakerPluginService\n+) : BeanDefinitionRegistryPostProcessor, ApplicationContextAware, PriorityOrdered {\n+\n+  override fun postProcessBeanDefinitionRegistry(registry: BeanDefinitionRegistry) {\n+    pluginService.initialize()\n+    pluginService.startPlugins(registry)\n+  }\n+\n+  override fun postProcessBeanFactory(beanFactory: ConfigurableListableBeanFactory) {\n+  }\n+\n+  override fun setApplicationContext(applicationContext: ApplicationContext) {\n+    ApplicationContextGraph.serviceApplicationContext = applicationContext\n+  }\n+\n+  override fun getOrder(): Int = Ordered.LOWEST_PRECEDENCE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMjAxMjM4", "url": "https://github.com/spinnaker/kork/pull/752#pullrequestreview-471201238", "createdAt": "2020-08-20T04:31:47Z", "commit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDozMTo0N1rOHDpKNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDozMTo0N1rOHDpKNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU4MjEzNQ==", "bodyText": "Is this where the service and the plugin \"connect\" as far as class loaders go?", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473582135", "createdAt": "2020-08-20T04:31:47Z", "author": {"login": "luispollo"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/SpringPluginInitializer.kt", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2\n+\n+import com.netflix.spinnaker.kork.plugins.api.ExtensionConfiguration\n+import com.netflix.spinnaker.kork.plugins.api.PluginComponent\n+import com.netflix.spinnaker.kork.plugins.api.PluginConfiguration\n+import com.netflix.spinnaker.kork.plugins.api.internal.SpinnakerExtensionPoint\n+import org.pf4j.Plugin\n+import org.pf4j.PluginWrapper\n+import org.slf4j.LoggerFactory\n+import org.springframework.context.ApplicationContext\n+import org.springframework.context.ApplicationContextAware\n+import org.springframework.context.annotation.ClassPathBeanDefinitionScanner\n+import org.springframework.context.support.GenericApplicationContext\n+import org.springframework.core.io.DefaultResourceLoader\n+import org.springframework.core.type.filter.AnnotationTypeFilter\n+import org.springframework.core.type.filter.AssignableTypeFilter\n+\n+/**\n+ * Initializes the given [plugin]'s [pluginApplicationContext] after being connected to the service's\n+ * own [ApplicationContext].\n+ */\n+class SpringPluginInitializer(\n+  private val plugin: Plugin,\n+  private val pluginWrapper: PluginWrapper,\n+  private val pluginApplicationContext: GenericApplicationContext,\n+  private val beanPromoter: BeanPromoter\n+) : ApplicationContextAware {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun setApplicationContext(applicationContext: ApplicationContext) {\n+    log.info(\"Initializing '${pluginWrapper.pluginId}'\")\n+\n+    // For every bean created in the plugin ApplicationContext, we'll need to post-process to evaluate\n+    // which ones need to be promoted to the service ApplicationContext for autowiring into core functionality.\n+    pluginApplicationContext\n+      .beanFactory\n+      .addBeanPostProcessor(ExtensionPromotionBeanPostProcessor(\n+        pluginWrapper,\n+        pluginApplicationContext,\n+        beanPromoter\n+      ))\n+\n+    pluginApplicationContext.classLoader = pluginWrapper.pluginClassLoader", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMjE5NzI3", "url": "https://github.com/spinnaker/kork/pull/752#pullrequestreview-471219727", "createdAt": "2020-08-20T04:42:48Z", "commit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMjIwNjIz", "url": "https://github.com/spinnaker/kork/pull/752#pullrequestreview-471220623", "createdAt": "2020-08-20T04:43:21Z", "commit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDo0MzoyMVrOHDpVWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNDo0MzoyMVrOHDpVWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU4NDk4Ng==", "bodyText": "Is this used anywhere in the tests?", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r473584986", "createdAt": "2020-08-20T04:43:21Z", "author": {"login": "luispollo"}, "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/v2/fixtures/ParentServiceBean.kt", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2.fixtures\n+\n+import org.springframework.beans.factory.annotation.Value\n+import org.springframework.stereotype.Component\n+\n+@Component(\"parentServiceBean\")\n+class ParentServiceBean(@Value(\"\\${someKey}\") val someKey: String)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxODI2MTU1", "url": "https://github.com/spinnaker/kork/pull/752#pullrequestreview-471826155", "createdAt": "2020-08-20T17:16:54Z", "commit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzoxNjo1NFrOHELuMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzoxNjo1NFrOHELuMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE0ODQwMQ==", "bodyText": "Since all the other configuration classes are Java, and we're importing this one into PluginsAutoConfiguration, should we make this one Java just to be uniform?", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474148401", "createdAt": "2020-08-20T17:16:54Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/config/V2PluginConfiguration.kt", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.config\n+\n+import com.netflix.spinnaker.kork.plugins.FRAMEWORK_V2\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginManager\n+import com.netflix.spinnaker.kork.plugins.SpringPluginStatusProvider\n+import com.netflix.spinnaker.kork.plugins.config.ConfigFactory\n+import com.netflix.spinnaker.kork.plugins.sdk.SdkFactory\n+import com.netflix.spinnaker.kork.plugins.update.SpinnakerUpdateManager\n+import com.netflix.spinnaker.kork.plugins.update.release.provider.PluginInfoReleaseProvider\n+import com.netflix.spinnaker.kork.plugins.v2.SpringPluginFactory\n+import com.netflix.spinnaker.kork.plugins.v2.PluginFrameworkInitializer\n+import com.netflix.spinnaker.kork.plugins.v2.SpinnakerPluginService\n+import org.pf4j.PluginFactory\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty\n+import org.springframework.context.ApplicationEventPublisher\n+import org.springframework.context.annotation.Bean\n+import org.springframework.context.annotation.Configuration\n+import org.springframework.context.support.GenericApplicationContext\n+\n+@Configuration\n+@ConditionalOnProperty(value = [\"spinnaker.extensibility.framework.version\"], havingValue = FRAMEWORK_V2)\n+class V2PluginConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxODQ2OTAx", "url": "https://github.com/spinnaker/kork/pull/752#pullrequestreview-471846901", "createdAt": "2020-08-20T17:46:06Z", "commit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzo0NjowN1rOHEMtaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNzo0NjowN1rOHEMtaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE2NDU4NA==", "bodyText": "Wrap this in withTiming?  Might be useful especially if we start doing more with a plugin start hook.", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474164584", "createdAt": "2020-08-20T17:46:07Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/SpinnakerPluginService.kt", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2\n+\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginManager\n+import com.netflix.spinnaker.kork.plugins.SpringPluginStatusProvider\n+import com.netflix.spinnaker.kork.plugins.api.spring.PrivilegedSpringPlugin\n+import com.netflix.spinnaker.kork.plugins.update.SpinnakerUpdateManager\n+import com.netflix.spinnaker.kork.plugins.update.release.provider.PluginInfoReleaseProvider\n+import org.slf4j.LoggerFactory\n+import org.springframework.beans.factory.support.BeanDefinitionRegistry\n+import org.springframework.context.ApplicationEventPublisher\n+import org.springframework.util.Assert\n+\n+/**\n+ * A service for managing the plugin framework.\n+ *\n+ * NOTE: Over time, we should be moving to this class over [SpinnakerPluginManager] and\n+ * [SpinnakerUpdateManager] as the primary touch points for the plugin framework, decoupling\n+ * Spinnaker-specific plugin framework logic from PF4J wherever possible.\n+ */\n+class SpinnakerPluginService(\n+  private val pluginManager: SpinnakerPluginManager,\n+  private val updateManager: SpinnakerUpdateManager,\n+  private val pluginInfoReleaseProvider: PluginInfoReleaseProvider,\n+  private val springPluginStatusProvider: SpringPluginStatusProvider\n+) {\n+\n+  private val log = LoggerFactory.getLogger(javaClass)\n+\n+  /**\n+   * Tracks the initialization state of the plugin framework: It can only be initialized once.\n+   */\n+  private var initialized: Boolean = false\n+\n+  /**\n+   * Starts the plugin framework and completely initializes extensions for use by the application.\n+   */\n+  fun initialize() {\n+    Assert.isTrue(!initialized, \"Plugin framework has already been initialized\")\n+\n+    withTiming(\"initializing plugins\") {\n+      // Load known plugins prior to downloading so we can resolve what needs to be updated.\n+      pluginManager.loadPlugins()\n+\n+      // Find the plugin releases for the currently enabled list of plugins\n+      val releases = updateManager.plugins\n+        .filter { springPluginStatusProvider.isPluginEnabled(it.id) }\n+        .let { enabledPlugins -> pluginInfoReleaseProvider.getReleases(enabledPlugins) }\n+\n+      // Download releases, if any, updating previously loaded plugins where necessary\n+      updateManager.downloadPluginReleases(releases).forEach { pluginPath ->\n+        pluginManager.loadPlugin(pluginPath)\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Start the plugins, attaching exported plugin extensions to the provided [registry].\n+   */\n+  fun startPlugins(registry: BeanDefinitionRegistry) {\n+    // Start plugins. This should only be called once.\n+    pluginManager.startPlugins()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d"}, "originalPosition": 76}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "23dec8af65dc57a99e562acaad42d532add4ab2d", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/23dec8af65dc57a99e562acaad42d532add4ab2d", "committedDate": "2020-08-19T19:04:01Z", "message": "feat(plugins): Spring-backed native plugin extensions"}, "afterCommit": {"oid": "e34e1d4d7a5bbb55806e6294ea51474ef09d0160", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/e34e1d4d7a5bbb55806e6294ea51474ef09d0160", "committedDate": "2020-08-20T19:20:41Z", "message": "feat(plugins): Spring-backed native plugin extensions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e34e1d4d7a5bbb55806e6294ea51474ef09d0160", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/e34e1d4d7a5bbb55806e6294ea51474ef09d0160", "committedDate": "2020-08-20T19:20:41Z", "message": "feat(plugins): Spring-backed native plugin extensions"}, "afterCommit": {"oid": "cbb5407d5c02f7ef317f700f260568f7ef7be878", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/cbb5407d5c02f7ef317f700f260568f7ef7be878", "committedDate": "2020-08-20T21:21:56Z", "message": "feat(plugins): Spring-backed native plugin extensions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d11777fc25e49ca4a4239568c64d93203f1e0320", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/d11777fc25e49ca4a4239568c64d93203f1e0320", "committedDate": "2020-08-20T23:14:24Z", "message": "feat(plugins): Spring-backed native plugin extensions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cbb5407d5c02f7ef317f700f260568f7ef7be878", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/cbb5407d5c02f7ef317f700f260568f7ef7be878", "committedDate": "2020-08-20T21:21:56Z", "message": "feat(plugins): Spring-backed native plugin extensions"}, "afterCommit": {"oid": "d11777fc25e49ca4a4239568c64d93203f1e0320", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/d11777fc25e49ca4a4239568c64d93203f1e0320", "committedDate": "2020-08-20T23:14:24Z", "message": "feat(plugins): Spring-backed native plugin extensions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMDU1NTAy", "url": "https://github.com/spinnaker/kork/pull/752#pullrequestreview-472055502", "createdAt": "2020-08-20T23:44:13Z", "commit": {"oid": "d11777fc25e49ca4a4239568c64d93203f1e0320"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjI4NjY4", "url": "https://github.com/spinnaker/kork/pull/752#pullrequestreview-472628668", "createdAt": "2020-08-21T16:28:20Z", "commit": {"oid": "d11777fc25e49ca4a4239568c64d93203f1e0320"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjk2MDAy", "url": "https://github.com/spinnaker/kork/pull/752#pullrequestreview-472696002", "createdAt": "2020-08-21T18:18:26Z", "commit": {"oid": "d11777fc25e49ca4a4239568c64d93203f1e0320"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODoxODoyNlrOHE21xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODoxODoyNlrOHE21xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg1NDg1Mw==", "bodyText": "nit: This would be a little easier to read if you looked up the field by name, IMHO.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            val field = it.javaClass.declaredFields.first()\n          \n          \n            \n                            val field = it.javaClass.declaredField(\"parentServiceBean\")", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474854853", "createdAt": "2020-08-21T18:18:26Z", "author": {"login": "luispollo"}, "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/v2/scenarios/ServiceDependenciesScenarioTest.kt", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2.scenarios\n+\n+import com.netflix.spinnaker.config.PluginsAutoConfiguration\n+import com.netflix.spinnaker.kork.plugins.FRAMEWORK_V2\n+import com.netflix.spinnaker.kork.plugins.testplugin.testPlugin\n+import com.netflix.spinnaker.kork.plugins.v2.ApplicationContextGraph\n+import com.netflix.spinnaker.kork.plugins.v2.scenarios.fixtures.ParentServiceBean\n+import dev.minutest.junit.JUnit5Minutests\n+import dev.minutest.rootContext\n+import org.springframework.boot.autoconfigure.AutoConfigurations\n+import org.springframework.boot.test.context.assertj.AssertableApplicationContext\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner\n+import org.springframework.context.annotation.ComponentScan\n+import org.springframework.context.annotation.Configuration\n+import strikt.api.expectThat\n+import strikt.assertions.isEqualTo\n+import strikt.assertions.isNotNull\n+\n+/**\n+ * Tests that beans created by the service are injectable into plugin extensions.\n+ */\n+class ServiceDependenciesScenarioTest : JUnit5Minutests {\n+\n+  fun tests() = rootContext<Fixture> {\n+    fixture {\n+      Fixture()\n+    }\n+\n+    test(\"plugin extension is autowired with service bean\") {\n+      app\n+        .withUserConfiguration(TestApplicationConfiguration::class.java)\n+        .run { ctx: AssertableApplicationContext ->\n+          val serviceBean = ctx.getBean(ParentServiceBean::class.java)\n+\n+          expectThat(ApplicationContextGraph.pluginContext(generated.plugin.pluginId))\n+            .isNotNull()\n+            .get {\n+              getBean(\"myExtension\").let {\n+                val field = it.javaClass.declaredFields.first()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d11777fc25e49ca4a4239568c64d93203f1e0320"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNzAxNDIy", "url": "https://github.com/spinnaker/kork/pull/752#pullrequestreview-472701422", "createdAt": "2020-08-21T18:27:57Z", "commit": {"oid": "d11777fc25e49ca4a4239568c64d93203f1e0320"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "258a07447d0dc9307a5bf45cc0561edfa1474793", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/258a07447d0dc9307a5bf45cc0561edfa1474793", "committedDate": "2020-08-21T18:37:22Z", "message": "Update kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/v2/scenarios/ServiceDependenciesScenarioTest.kt\n\nCo-authored-by: Luis Pollo <1323478+luispollo@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNzExNTAy", "url": "https://github.com/spinnaker/kork/pull/752#pullrequestreview-472711502", "createdAt": "2020-08-21T18:45:02Z", "commit": {"oid": "258a07447d0dc9307a5bf45cc0561edfa1474793"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODo0NTowM1rOHE3j1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODo0NTowM1rOHE3j1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NjY0Ng==", "bodyText": "Sorry, my bad.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            val field = it.javaClass.declaredField(\"parentServiceBean\")\n          \n          \n            \n                            val field = it.javaClass.getDeclaredField(\"parentServiceBean\")", "url": "https://github.com/spinnaker/kork/pull/752#discussion_r474866646", "createdAt": "2020-08-21T18:45:03Z", "author": {"login": "luispollo"}, "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/v2/scenarios/ServiceDependenciesScenarioTest.kt", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.v2.scenarios\n+\n+import com.netflix.spinnaker.config.PluginsAutoConfiguration\n+import com.netflix.spinnaker.kork.plugins.FRAMEWORK_V2\n+import com.netflix.spinnaker.kork.plugins.testplugin.testPlugin\n+import com.netflix.spinnaker.kork.plugins.v2.ApplicationContextGraph\n+import com.netflix.spinnaker.kork.plugins.v2.scenarios.fixtures.ParentServiceBean\n+import dev.minutest.junit.JUnit5Minutests\n+import dev.minutest.rootContext\n+import org.springframework.boot.autoconfigure.AutoConfigurations\n+import org.springframework.boot.test.context.assertj.AssertableApplicationContext\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner\n+import org.springframework.context.annotation.ComponentScan\n+import org.springframework.context.annotation.Configuration\n+import strikt.api.expectThat\n+import strikt.assertions.isEqualTo\n+import strikt.assertions.isNotNull\n+\n+/**\n+ * Tests that beans created by the service are injectable into plugin extensions.\n+ */\n+class ServiceDependenciesScenarioTest : JUnit5Minutests {\n+\n+  fun tests() = rootContext<Fixture> {\n+    fixture {\n+      Fixture()\n+    }\n+\n+    test(\"plugin extension is autowired with service bean\") {\n+      app\n+        .withUserConfiguration(TestApplicationConfiguration::class.java)\n+        .run { ctx: AssertableApplicationContext ->\n+          val serviceBean = ctx.getBean(ParentServiceBean::class.java)\n+\n+          expectThat(ApplicationContextGraph.pluginContext(generated.plugin.pluginId))\n+            .isNotNull()\n+            .get {\n+              getBean(\"myExtension\").let {\n+                val field = it.javaClass.declaredField(\"parentServiceBean\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "258a07447d0dc9307a5bf45cc0561edfa1474793"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eba7c0460eaa5317b4669323b4e19c656a6e51f0", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/eba7c0460eaa5317b4669323b4e19c656a6e51f0", "committedDate": "2020-08-21T19:29:08Z", "message": "Update kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/v2/scenarios/ServiceDependenciesScenarioTest.kt\n\nCo-authored-by: Luis Pollo <1323478+luispollo@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65da79a91f90e6cf50247f5a08fdeaa4c2e4ad0a", "author": {"user": {"login": "mergify[bot]", "name": null}}, "url": "https://github.com/spinnaker/kork/commit/65da79a91f90e6cf50247f5a08fdeaa4c2e4ad0a", "committedDate": "2020-08-21T19:34:26Z", "message": "Merge branch 'master' into native-plugins-v2"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1464, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}