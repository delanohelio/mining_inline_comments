{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3ODYyNjIw", "number": 770, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToyNzoyMlrOEfgqDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToyOTo0MlrOEfguQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDc2MzY3OnYy", "diffSide": "RIGHT", "path": "kork-sql/src/test/kotlin/com/netflix/spinnaker/kork/sql/PagedIteratorSpec.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToyNzoyMlrOHL00ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToyNzoyMlrOHL00ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE2MTgyNw==", "bodyText": "Shouldn't that be a Then rather than a When?", "url": "https://github.com/spinnaker/kork/pull/770#discussion_r482161827", "createdAt": "2020-09-02T15:27:22Z", "author": {"login": "robfletcher"}, "path": "kork-sql/src/test/kotlin/com/netflix/spinnaker/kork/sql/PagedIteratorSpec.kt", "diffHunk": "@@ -28,42 +28,38 @@ import com.nhaarman.mockito_kotlin.whenever\n import org.assertj.core.api.AbstractAssert\n import org.assertj.core.api.Assertions.assertThat\n import org.assertj.core.api.Assertions.assertThatThrownBy\n-import org.jetbrains.spek.api.Spek\n-import org.jetbrains.spek.api.dsl.describe\n-import org.jetbrains.spek.api.dsl.given\n-import org.jetbrains.spek.api.dsl.it\n-import org.jetbrains.spek.api.dsl.on\n+import org.spekframework.spek2.Spek\n+import org.spekframework.spek2.style.gherkin.Feature\n \n internal object PagedIteratorSpec : Spek({\n \n-  describe(\"fetching paged data\") {\n-\n+  Feature(\"fetching paged data\") {\n     val pageSize = 3\n     val nextPage = mock<(Int, String?) -> Iterable<String>>()\n \n-    given(\"there is no data\") {\n+    Scenario(\"there is no data\") {\n       val subject = PagedIterator(pageSize, String::toString, nextPage)\n \n-      beforeGroup {\n+      beforeScenario {\n         whenever(nextPage(eq(pageSize), anyOrNull())) doReturn emptyList<String>()\n       }\n \n-      afterGroup { reset(nextPage) }\n+      afterScenario { reset(nextPage) }\n \n-      it(\"has no elements\") {\n+      When(\"has no elements\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8050833e7d6cf98ce6aa8189c6ab4d778875f95a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDc3NDQxOnYy", "diffSide": "RIGHT", "path": "kork-sql/src/test/kotlin/com/netflix/spinnaker/kork/sql/PagedIteratorSpec.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToyOTo0MlrOHL07kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODo1Mzo1MFrOHL9nSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE2MzYwMg==", "bodyText": "Seems weird you can have a declaration outside the DSL scope like this", "url": "https://github.com/spinnaker/kork/pull/770#discussion_r482163602", "createdAt": "2020-09-02T15:29:42Z", "author": {"login": "robfletcher"}, "path": "kork-sql/src/test/kotlin/com/netflix/spinnaker/kork/sql/PagedIteratorSpec.kt", "diffHunk": "@@ -107,32 +103,32 @@ internal object PagedIteratorSpec : Spek({\n         }\n       }\n \n-      afterGroup { reset(nextPage) }\n+      afterScenario { reset(nextPage) }\n \n-      it(\"has some elements\") {\n+      Given(\"has some elements\") {\n         assertThat(subject.hasNext()).isTrue()\n       }\n \n-      on(\"draining the iterator\") {\n-        val results = mutableListOf<String>()\n+      val results = mutableListOf<String>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8050833e7d6cf98ce6aa8189c6ab4d778875f95a"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwNTg2Ng==", "bodyText": "Maybe weird, but if you don't, the class won't compile - if you wanted to keep all variable definitions inside of the DSL scopes, you'd need to assign it into some holder object that is then passed implicitly from one function to the next. It's really no different than defining variables outside Scenario in this case?", "url": "https://github.com/spinnaker/kork/pull/770#discussion_r482305866", "createdAt": "2020-09-02T18:53:50Z", "author": {"login": "robzienert"}, "path": "kork-sql/src/test/kotlin/com/netflix/spinnaker/kork/sql/PagedIteratorSpec.kt", "diffHunk": "@@ -107,32 +103,32 @@ internal object PagedIteratorSpec : Spek({\n         }\n       }\n \n-      afterGroup { reset(nextPage) }\n+      afterScenario { reset(nextPage) }\n \n-      it(\"has some elements\") {\n+      Given(\"has some elements\") {\n         assertThat(subject.hasNext()).isTrue()\n       }\n \n-      on(\"draining the iterator\") {\n-        val results = mutableListOf<String>()\n+      val results = mutableListOf<String>()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE2MzYwMg=="}, "originalCommit": {"oid": "8050833e7d6cf98ce6aa8189c6ab4d778875f95a"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3497, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}