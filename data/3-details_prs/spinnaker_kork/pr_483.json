{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NTc5MjU0", "number": 483, "title": "fix(plugins): Fixes for SpinnakerPluginInfo, front50 update repository, and other minor issues", "bodyText": "", "createdAt": "2020-01-21T23:23:11Z", "url": "https://github.com/spinnaker/kork/pull/483", "merged": true, "mergeCommit": {"oid": "13645d0680076d4f0f8eb8c1b01f1bb5f177bc08"}, "closed": true, "closedAt": "2020-01-22T21:45:57Z", "author": {"login": "jonsie"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8p-iYAH2gAyMzY1NTc5MjU0OjdkMGQyODM4M2ZiOGYyNjYzZWZkNzc4MjU1OTkxMzJjYzE3NmY1MTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb88srCgFqTM0NjkxODM4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7d0d28383fb8f2663efd77825599132cc176f511", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/7d0d28383fb8f2663efd77825599132cc176f511", "committedDate": "2020-01-21T23:44:48Z", "message": "fix(plugins): Fixes for reading remote SpinnakerPluginInfo and other minor issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0514788d9bc0df168d4187b72599532d4dd0acf3", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/0514788d9bc0df168d4187b72599532d4dd0acf3", "committedDate": "2020-01-21T23:22:28Z", "message": "fix(plugins): Fixes for reading remote SpinnakerPluginInfo and other minor issues"}, "afterCommit": {"oid": "7d0d28383fb8f2663efd77825599132cc176f511", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/7d0d28383fb8f2663efd77825599132cc176f511", "committedDate": "2020-01-21T23:44:48Z", "message": "fix(plugins): Fixes for reading remote SpinnakerPluginInfo and other minor issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MjcyNzg0", "url": "https://github.com/spinnaker/kork/pull/483#pullrequestreview-346272784", "createdAt": "2020-01-21T23:59:47Z", "commit": {"oid": "7d0d28383fb8f2663efd77825599132cc176f511"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMzo1OTo0N1rOFgMyZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMzo1OTo0N1rOFgMyZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMwODI2MA==", "bodyText": "This basically ensures we have a decent configuration process such that if front50.baseUrl is already defined in the config the operator does not need to add the url to spinnaker.extensibility.repositories.front50.url.", "url": "https://github.com/spinnaker/kork/pull/483#discussion_r369308260", "createdAt": "2020-01-21T23:59:47Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/Front50UpdateRepositoryConfiguration.java", "diffHunk": "@@ -60,6 +61,21 @@ public static UpdateRepository pluginFront50UpdateRepository(\n                         \"Unable to bind ok-http-client property to \"\n                             + OkHttpClientConfigurationProperties.class.getSimpleName()));\n \n+    URL defaultFront50Url =\n+        Binder.get(environment)\n+            .bind(\"front50.base-url\", Bindable.of(URL.class))\n+            .orElseThrow(\n+                () ->\n+                    new BeanCreationException(\n+                        \"Unable to bind front50.base-url property to \"\n+                            + URL.class.getSimpleName()));\n+\n+    PluginRepositoryProperties front50RepositoryProps =\n+        pluginRepositoriesConfig.get(PluginsConfigurationProperties.FRONT5O_REPOSITORY);\n+\n+    URL front50Url =\n+        defaultFront50Url != null ? defaultFront50Url : front50RepositoryProps.getUrl();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d0d28383fb8f2663efd77825599132cc176f511"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MjczMzI5", "url": "https://github.com/spinnaker/kork/pull/483#pullrequestreview-346273329", "createdAt": "2020-01-22T00:01:30Z", "commit": {"oid": "7d0d28383fb8f2663efd77825599132cc176f511"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDowMTozMFrOFgM0OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDowMTozMFrOFgM0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMwODcyOA==", "bodyText": "There are no getters or setters on the parent PluginInfo public fields, so I had to do this to support SpinnakerPluginRelease.", "url": "https://github.com/spinnaker/kork/pull/483#discussion_r369308728", "createdAt": "2020-01-22T00:01:30Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/SpinnakerPluginInfo.kt", "diffHunk": "@@ -16,12 +16,20 @@\n \n package com.netflix.spinnaker.kork.plugins.update\n \n-import com.fasterxml.jackson.annotation.JsonProperty\n+import com.fasterxml.jackson.annotation.JsonSetter\n import org.pf4j.update.PluginInfo\n \n-data class SpinnakerPluginInfo(\n-  @JsonProperty(\"releases\") val spinnakerReleases: List<SpinnakerPluginRelease>\n-) : PluginInfo() {\n+class SpinnakerPluginInfo : PluginInfo() {\n+\n+  @Suppress(\"UNCHECKED_CAST\")\n+  fun getReleases(): List<SpinnakerPluginRelease> {\n+    return releases as List<SpinnakerPluginRelease>\n+  }\n+\n+  @JsonSetter(\"releases\")\n+  fun setReleases(spinnakerReleases: List<SpinnakerPluginRelease>) {\n+    releases = spinnakerReleases\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d0d28383fb8f2663efd77825599132cc176f511"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MjczNjc5", "url": "https://github.com/spinnaker/kork/pull/483#pullrequestreview-346273679", "createdAt": "2020-01-22T00:02:34Z", "commit": {"oid": "7d0d28383fb8f2663efd77825599132cc176f511"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDowMjozNFrOFgM1Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDowMjozNFrOFgM1Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMwOTAyMw==", "bodyText": "These changes ensure we load and start plugins once (from ExtensionBeanDefinitionRegistryPostProcessor).  This is more efficient and I think easier to understand.", "url": "https://github.com/spinnaker/kork/pull/483#discussion_r369309023", "createdAt": "2020-01-22T00:02:34Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/SpinnakerUpdateManager.kt", "diffHunk": "@@ -85,21 +73,24 @@ class SpinnakerUpdateManager(\n       return false\n     }\n \n-    val pluginsRoot = pluginManager.pluginsRoot\n-    val file = pluginsRoot.resolve(downloaded.fileName)\n-    try {\n-      Files.move(downloaded, file, StandardCopyOption.REPLACE_EXISTING)\n-    } catch (e: IOException) {\n-      throw PluginRuntimeException(\"Failed to write plugin file {} to plugin folder\", file)\n-    }\n-\n-    val newPluginId = pluginManager.loadPlugin(file)\n-    val state = pluginManager.startPlugin(newPluginId)\n-\n-    return PluginState.STARTED == state\n+    return pluginManager.pluginsRoot.write(downloaded)\n   }\n \n+  /**\n+   * Exists to expose protected [downloadPlugin]\n+   */\n   fun downloadPluginRelease(pluginId: String, version: String): Path {\n     return downloadPlugin(pluginId, version)\n   }\n+\n+  private fun Path.write(downloaded: Path): Boolean {\n+    val file = this.resolve(downloaded.fileName)\n+    File(this.toString()).mkdirs()\n+    try {\n+      return Files.move(downloaded, file, StandardCopyOption.REPLACE_EXISTING)\n+        .contains(downloaded.fileName)\n+    } catch (e: IOException) {\n+      throw PluginRuntimeException(e, \"Failed to write file '{}' to plugins folder\", file)\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d0d28383fb8f2663efd77825599132cc176f511"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2Mjc0MDgz", "url": "https://github.com/spinnaker/kork/pull/483#pullrequestreview-346274083", "createdAt": "2020-01-22T00:03:58Z", "commit": {"oid": "7d0d28383fb8f2663efd77825599132cc176f511"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDowMzo1OFrOFgM2wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDowMzo1OFrOFgM2wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMwOTM3OA==", "bodyText": "There may be a way around this, but I think it's the standard pattern with Retrofit2 to wrap the result in a Call.  Without this, we threw a Retrofit exception.", "url": "https://github.com/spinnaker/kork/pull/483#discussion_r369309378", "createdAt": "2020-01-22T00:03:58Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/front50/Front50Service.kt", "diffHunk": "@@ -29,8 +30,8 @@ import retrofit2.http.Query\n interface Front50Service {\n \n   @GET(\"/pluginInfo/{id}\")\n-  fun getById(@Path(\"id\") id: String): SpinnakerPluginInfo\n+  fun getById(@Path(\"id\") id: String): Call<SpinnakerPluginInfo>\n \n   @GET(\"/pluginInfo\")\n-  fun list(@Query(\"service\") service: String): Collection<SpinnakerPluginInfo>\n+  fun list(@Query(\"service\") service: String): Call<Collection<SpinnakerPluginInfo>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d0d28383fb8f2663efd77825599132cc176f511"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f06ba484f75766484b4f28f2d002743b0985ce3e", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/f06ba484f75766484b4f28f2d002743b0985ce3e", "committedDate": "2020-01-22T19:25:49Z", "message": "fix(plugins): Minor refactor to disable UpdateManager installPlugin and updatePlugin usage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODQ3MDk0", "url": "https://github.com/spinnaker/kork/pull/483#pullrequestreview-346847094", "createdAt": "2020-01-22T19:32:49Z", "commit": {"oid": "f06ba484f75766484b4f28f2d002743b0985ce3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTozMjo0OVrOFgoY3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxOTozMjo0OVrOFgoY3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTc2MDQ3Ng==", "bodyText": "applicationContext.getApplicationName() was returning null.  It didn't seem to be reading spring.application.name, this approach works though.", "url": "https://github.com/spinnaker/kork/pull/483#discussion_r369760476", "createdAt": "2020-01-22T19:32:49Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/Front50UpdateRepositoryConfiguration.java", "diffHunk": "@@ -73,21 +87,18 @@ public static UpdateRepository pluginFront50UpdateRepository(\n             .configure(SerializationFeature.INDENT_OUTPUT, true)\n             .setSerializationInclusion(JsonInclude.Include.NON_NULL);\n \n-    PluginRepositoryProperties front50RepositoryProps =\n-        pluginRepositoriesConfig.get(PluginsConfigurationProperties.FRONT5O_REPOSITORY);\n-\n     Front50Service front50Service =\n         new Retrofit.Builder()\n             .addConverterFactory(JacksonConverterFactory.create(objectMapper))\n-            .baseUrl(front50RepositoryProps.getUrl())\n+            .baseUrl(front50Url)\n             .client(okHttpClient)\n             .build()\n             .create(Front50Service.class);\n \n     return new Front50UpdateRepository(\n         PluginsConfigurationProperties.FRONT5O_REPOSITORY,\n-        applicationContext.getApplicationName(),\n-        front50RepositoryProps.getUrl(),\n+        Objects.requireNonNull(environment.getProperty(\"spring.application.name\")),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f06ba484f75766484b4f28f2d002743b0985ce3e"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76c9f22e37688a2c3708ffc4e644bf83b58ea62b", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/76c9f22e37688a2c3708ffc4e644bf83b58ea62b", "committedDate": "2020-01-22T20:57:45Z", "message": "fix(plugins): Update PluginUpdateServiceTest and remove obsolete comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODk5MjA1", "url": "https://github.com/spinnaker/kork/pull/483#pullrequestreview-346899205", "createdAt": "2020-01-22T21:01:08Z", "commit": {"oid": "76c9f22e37688a2c3708ffc4e644bf83b58ea62b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTowMTowOFrOFgq0_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMTowMTowOFrOFgq0_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgwMDQ0NA==", "bodyText": "Loading and starting plugins is no longer possible outside the context of ExtensionBeanDefinitionRegistryPostProcessor, so this comment no longer applies.  I think it's clearer to have just one path for loading and running plugins, until we want to explicitly tackle the problem of reloading plugins at runtime and refreshing the Spring context.", "url": "https://github.com/spinnaker/kork/pull/483#discussion_r369800444", "createdAt": "2020-01-22T21:01:08Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/PluginUpdateService.kt", "diffHunk": "@@ -33,23 +39,16 @@ import java.nio.file.Path\n  *\n  * All plugins that are returned by the repository will be downloaded and installed.\n  *\n- * While it's possible that this could be used after the application has started up, there is no guarantee that the\n- * extensions a plugin exposes will be correctly refreshed within the Spring context at this point. Therefore, it is\n- * strongly advised that if a plugin update needs to occur, the service should be redeployed. If live updates are\n- * desired in the future, we'll need to proxy extensions so that the real implementing object is delegated to, allowing\n- * Spring injection to continue working.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76c9f22e37688a2c3708ffc4e644bf83b58ea62b"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51435c76dfe43f4ab57fb2a22ed3936a1c75e33c", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/51435c76dfe43f4ab57fb2a22ed3936a1c75e33c", "committedDate": "2020-01-22T21:04:24Z", "message": "fix(plugins): spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15c949f16d20d563a65c72c05dd6a5d8c542ba19", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/15c949f16d20d563a65c72c05dd6a5d8c542ba19", "committedDate": "2020-01-22T21:09:26Z", "message": "fix(plugins): spotless prt 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d49577575ad85e589d7d7215e5fff8c9df3c4ee", "author": {"user": {"login": "jonsie", "name": "Chris Smalley"}}, "url": "https://github.com/spinnaker/kork/commit/8d49577575ad85e589d7d7215e5fff8c9df3c4ee", "committedDate": "2020-01-22T21:23:25Z", "message": "Merge branch 'master' into misc-kork-front50"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2OTE4Mzg2", "url": "https://github.com/spinnaker/kork/pull/483#pullrequestreview-346918386", "createdAt": "2020-01-22T21:33:29Z", "commit": {"oid": "8d49577575ad85e589d7d7215e5fff8c9df3c4ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1626, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}