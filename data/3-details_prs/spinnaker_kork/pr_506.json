{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMTcwODkz", "number": 506, "title": "feat(plugins): Constructor dependency injection for extensions", "bodyText": "This refactor changes how system dependencies are injected from a service into an extension (and likely, eventually, a plugin). Instead of using method-based injection, this PR refactors the SpringExtensionFactory (which is a misnomer) to not actually do the initialization of an extension, but passes it off to a new ExtensionInitializer interface, for which there is only one implementation at the moment: ConstructorExtensionInitializer.\nAn ExtensionInitializer works in tandem with DependencyProviders, defined within kork-plugins, to inject dependencies into an extension. For now, this is only for configuration, but an upcoming PR would be to also inject a HttpClientProvider, which provides a generic (and dependency-less) HTTP client for plugins to use that has its logic internalized to the service itself.\nMost of this PR is shuffling code around, rather than actually adding new code, but here we are anyway.", "createdAt": "2020-02-06T23:59:57Z", "url": "https://github.com/spinnaker/kork/pull/506", "merged": true, "mergeCommit": {"oid": "fc264be519e4b998a17961a8150ea7b6a3671d80"}, "closed": true, "closedAt": "2020-02-13T21:00:30Z", "author": {"login": "robzienert"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcB0CnyABqjMwMTU5NDg1NTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcEBUxDAH2gAyMzcyMTcwODkzOjhlMTk5OGUwY2RhZjY2ZGUzZGI5M2E4MmQwZWIyZTkzMzRmZWEwOGY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a58ae4ea8cf001c1fcf05172a797789b5bf2ae6", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/5a58ae4ea8cf001c1fcf05172a797789b5bf2ae6", "committedDate": "2020-02-06T23:52:31Z", "message": "feat(plugins): Constructor dependency injection for extensions"}, "afterCommit": {"oid": "189eb43ef60adaebca6a251bff08b41c1416ed9b", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/189eb43ef60adaebca6a251bff08b41c1416ed9b", "committedDate": "2020-02-07T00:17:47Z", "message": "feat(plugins): Constructor dependency injection for extensions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjA2MDI5", "url": "https://github.com/spinnaker/kork/pull/506#pullrequestreview-356206029", "createdAt": "2020-02-10T19:34:38Z", "commit": {"oid": "189eb43ef60adaebca6a251bff08b41c1416ed9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTozNDozOFrOFny3sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTozNDozOFrOFny3sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3MjI0MA==", "bodyText": "Wait - you're removing SpringPlugin in #508", "url": "https://github.com/spinnaker/kork/pull/506#discussion_r377272240", "createdAt": "2020-02-10T19:34:38Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpringExtensionFactory.kt", "diffHunk": "@@ -16,149 +16,49 @@\n package com.netflix.spinnaker.kork.plugins\n \n import com.netflix.spinnaker.kork.exceptions.IntegrationException\n-import com.netflix.spinnaker.kork.exceptions.SystemException\n-import com.netflix.spinnaker.kork.plugins.api.ConfigurableExtension\n import com.netflix.spinnaker.kork.plugins.api.SpinnakerExtension\n import com.netflix.spinnaker.kork.plugins.api.spring.SpringPlugin\n-import com.netflix.spinnaker.kork.plugins.config.ConfigCoordinates\n-import com.netflix.spinnaker.kork.plugins.config.ConfigResolver\n-import com.netflix.spinnaker.kork.plugins.config.PluginConfigCoordinates\n-import com.netflix.spinnaker.kork.plugins.config.SystemExtensionConfigCoordinates\n+import com.netflix.spinnaker.kork.plugins.inject.ExtensionInitializer\n import org.pf4j.ExtensionFactory\n-import org.pf4j.PluginRuntimeException\n import org.pf4j.PluginWrapper\n import org.slf4j.LoggerFactory\n import org.springframework.context.annotation.AnnotationConfigApplicationContext\n-import org.springframework.core.ResolvableType\n import org.springframework.core.env.StandardEnvironment\n-import java.lang.reflect.InvocationTargetException\n \n /**\n  * TODO(rz): Support creation of unsafe plugins\n  */\n class SpringExtensionFactory(\n   private val pluginManager: SpinnakerPluginManager,\n-  private val configResolver: ConfigResolver\n+  private val injector: ExtensionInitializer\n ) : ExtensionFactory {\n \n   private val log by lazy { LoggerFactory.getLogger(javaClass) }\n \n   override fun <T> create(extensionClass: Class<T>): T {\n-    val extension = createWithoutSpring(extensionClass)\n-      ?: throw PluginRuntimeException(\"Failed to create object of extension class: $extensionClass\")\n-\n-    val annot = getSpinnakerExtensionAnnotation(extension)\n-\n-    // Locate the plugin that provides this extension, if no plugin exists, then we know it's a system extension\n-    // and we can finalize its loading and return immediately.\n-    val pluginWrapper = pluginManager.whichPlugin(extensionClass) ?: return finalizeSystemExtension(extension, annot)\n-\n-    // If the plugin is a SpringPlugin, we'll create an [ApplicationContext] for it and autowire the extension\n-    val plugin = pluginWrapper.plugin\n-    if (plugin is SpringPlugin) {\n-      val applicationContext = getApplicationContext(pluginWrapper, plugin)\n+    extensionClass.getAnnotation(SpinnakerExtension::class.java)\n+      ?: throw IntegrationException(\"Extensions must be defined using @SpinnakerExtension\")\n \n-      plugin.applicationContext = applicationContext\n-      plugin.initApplicationContext()\n-      plugin.applicationContext.refresh()\n-      plugin.applicationContext.autowireCapableBeanFactory.autowireBean(extension)\n-    }\n+    val pluginWrapper = pluginManager.whichPlugin(extensionClass)\n \n-    // Finally, load the config according to the [SpinnakerExtension] settings\n-    val coordinates = pluginWrapper.getCoordinates()\n+    val extension = injector.createInstance(extensionClass, pluginWrapper)\n \n-    loadConfig(extension, PluginConfigCoordinates(\n-      coordinates.id,\n-      annot.id\n-    ))\n+    if (pluginWrapper != null) {\n+      // If the plugin is a SpringPlugin, we'll create an [ApplicationContext] for it and autowire the extension\n+      val plugin = pluginWrapper.plugin\n+      if (plugin is SpringPlugin) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "189eb43ef60adaebca6a251bff08b41c1416ed9b"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjEyMTY5", "url": "https://github.com/spinnaker/kork/pull/506#pullrequestreview-356212169", "createdAt": "2020-02-10T19:44:21Z", "commit": {"oid": "189eb43ef60adaebca6a251bff08b41c1416ed9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo0NDoyMVrOFnzKjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo0NDoyMVrOFnzKjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3NzA3MQ==", "bodyText": "I'm not actually seeing this used anywhere.  What are the plans for this?", "url": "https://github.com/spinnaker/kork/pull/506#discussion_r377277071", "createdAt": "2020-02-10T19:44:21Z", "author": {"login": "jonsie"}, "path": "kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/Injectable.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.netflix.spinnaker.kork.plugins.api;\n+\n+import java.lang.annotation.*;\n+\n+/**\n+ * A marker annotation that documents a type as being injectable into an Extension.\n+ *\n+ * <p>Any class in the Plugins API with this annotation will be available for injection into an\n+ * Extension at initialization time.\n+ *\n+ * <pre>{@code\n+ * @Extension\n+ * class MyExtension {\n+ *\n+ *   private final HttpClientProvider httpClientProvider;\n+ *\n+ *   public MyExtension(HttpClientProvider httpClientProvider) {\n+ *     this.httpClientProvider = httpClientProvider;\n+ *   }\n+ * }\n+ * }</pre>\n+ */\n+@Target(ElementType.TYPE)\n+@Retention(RetentionPolicy.CLASS)\n+@Documented\n+public @interface Injectable {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "189eb43ef60adaebca6a251bff08b41c1416ed9b"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjE2NDQ4", "url": "https://github.com/spinnaker/kork/pull/506#pullrequestreview-356216448", "createdAt": "2020-02-10T19:50:55Z", "commit": {"oid": "189eb43ef60adaebca6a251bff08b41c1416ed9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo1MDo1NVrOFnzXow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo1MDo1NVrOFnzXow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI4MDQxOQ==", "bodyText": "Can we call this variable extensionInitializer or initializer instead?", "url": "https://github.com/spinnaker/kork/pull/506#discussion_r377280419", "createdAt": "2020-02-10T19:50:55Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpringExtensionFactory.kt", "diffHunk": "@@ -16,149 +16,49 @@\n package com.netflix.spinnaker.kork.plugins\n \n import com.netflix.spinnaker.kork.exceptions.IntegrationException\n-import com.netflix.spinnaker.kork.exceptions.SystemException\n-import com.netflix.spinnaker.kork.plugins.api.ConfigurableExtension\n import com.netflix.spinnaker.kork.plugins.api.SpinnakerExtension\n import com.netflix.spinnaker.kork.plugins.api.spring.SpringPlugin\n-import com.netflix.spinnaker.kork.plugins.config.ConfigCoordinates\n-import com.netflix.spinnaker.kork.plugins.config.ConfigResolver\n-import com.netflix.spinnaker.kork.plugins.config.PluginConfigCoordinates\n-import com.netflix.spinnaker.kork.plugins.config.SystemExtensionConfigCoordinates\n+import com.netflix.spinnaker.kork.plugins.inject.ExtensionInitializer\n import org.pf4j.ExtensionFactory\n-import org.pf4j.PluginRuntimeException\n import org.pf4j.PluginWrapper\n import org.slf4j.LoggerFactory\n import org.springframework.context.annotation.AnnotationConfigApplicationContext\n-import org.springframework.core.ResolvableType\n import org.springframework.core.env.StandardEnvironment\n-import java.lang.reflect.InvocationTargetException\n \n /**\n  * TODO(rz): Support creation of unsafe plugins\n  */\n class SpringExtensionFactory(\n   private val pluginManager: SpinnakerPluginManager,\n-  private val configResolver: ConfigResolver\n+  private val injector: ExtensionInitializer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "189eb43ef60adaebca6a251bff08b41c1416ed9b"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjE3MzE4", "url": "https://github.com/spinnaker/kork/pull/506#pullrequestreview-356217318", "createdAt": "2020-02-10T19:52:19Z", "commit": {"oid": "189eb43ef60adaebca6a251bff08b41c1416ed9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo1MjoyMFrOFnzaSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo1MjoyMFrOFnzaSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI4MTA5Nw==", "bodyText": "extensionExtensionInitializer -- probably a typo.", "url": "https://github.com/spinnaker/kork/pull/506#discussion_r377281097", "createdAt": "2020-02-10T19:52:20Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java", "diffHunk": "@@ -86,10 +92,10 @@ public static ConfigResolver springEnvironmentConfigResolver(\n   public static SpinnakerPluginManager pluginManager(\n       PluginStatusProvider pluginStatusProvider,\n       ApplicationContext applicationContext,\n-      ConfigResolver configResolver) {\n+      ExtensionInitializer extensionExtensionInitializer) {\n     return new SpinnakerPluginManager(\n         pluginStatusProvider,\n-        configResolver,\n+        extensionExtensionInitializer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "189eb43ef60adaebca6a251bff08b41c1416ed9b"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjE5MTE2", "url": "https://github.com/spinnaker/kork/pull/506#pullrequestreview-356219116", "createdAt": "2020-02-10T19:55:05Z", "commit": {"oid": "189eb43ef60adaebca6a251bff08b41c1416ed9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo1NTowNVrOFnzgCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo1NTowNVrOFnzgCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI4MjU2OQ==", "bodyText": "It wont be long before we build up another DependencyProvider, so let's make the DependencyProvider objects separate beans and then add them to this extensionInjector factory so we keep the arguments clean (i.e. -- ConfigResolver is a dependency for ConfigDependencyProvider and not ExtensionInitializer).", "url": "https://github.com/spinnaker/kork/pull/506#discussion_r377282569", "createdAt": "2020-02-10T19:55:05Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java", "diffHunk": "@@ -74,6 +74,12 @@ public static ConfigResolver springEnvironmentConfigResolver(\n     return new SpringEnvironmentConfigResolver(environment);\n   }\n \n+  @Bean\n+  ExtensionInitializer extensionsInjector(ConfigResolver configResolver) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "189eb43ef60adaebca6a251bff08b41c1416ed9b"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjIxMjEz", "url": "https://github.com/spinnaker/kork/pull/506#pullrequestreview-356221213", "createdAt": "2020-02-10T19:58:20Z", "commit": {"oid": "189eb43ef60adaebca6a251bff08b41c1416ed9b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo1ODoyMFrOFnzmjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo1ODoyMFrOFnzmjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI4NDIzOA==", "bodyText": "Unfinished document.", "url": "https://github.com/spinnaker/kork/pull/506#discussion_r377284238", "createdAt": "2020-02-10T19:58:20Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/inject/ConstructorExtensionInitializer.kt", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.netflix.spinnaker.kork.plugins.inject\n+\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import org.pf4j.PluginWrapper\n+import org.slf4j.LoggerFactory\n+import java.lang.reflect.Constructor\n+import java.lang.reflect.InvocationTargetException\n+\n+/**\n+ * Initializes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "189eb43ef60adaebca6a251bff08b41c1416ed9b"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjU2MDg5", "url": "https://github.com/spinnaker/kork/pull/506#pullrequestreview-356256089", "createdAt": "2020-02-10T20:55:44Z", "commit": {"oid": "189eb43ef60adaebca6a251bff08b41c1416ed9b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "189eb43ef60adaebca6a251bff08b41c1416ed9b", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/189eb43ef60adaebca6a251bff08b41c1416ed9b", "committedDate": "2020-02-07T00:17:47Z", "message": "feat(plugins): Constructor dependency injection for extensions"}, "afterCommit": {"oid": "00ad18752349d168b0db47e8004a9936570a2743", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/00ad18752349d168b0db47e8004a9936570a2743", "committedDate": "2020-02-11T19:12:38Z", "message": "feat(plugins): Constructor dependency injection for extensions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9317b44bd19dd04a7e5affc22fedb210c8ebe39", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/b9317b44bd19dd04a7e5affc22fedb210c8ebe39", "committedDate": "2020-02-12T07:17:45Z", "message": "feat(plugins): Constructor dependency injection for extensions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "00ad18752349d168b0db47e8004a9936570a2743", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/00ad18752349d168b0db47e8004a9936570a2743", "committedDate": "2020-02-11T19:12:38Z", "message": "feat(plugins): Constructor dependency injection for extensions"}, "afterCommit": {"oid": "b9317b44bd19dd04a7e5affc22fedb210c8ebe39", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/b9317b44bd19dd04a7e5affc22fedb210c8ebe39", "committedDate": "2020-02-12T07:17:45Z", "message": "feat(plugins): Constructor dependency injection for extensions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d21feb897d2e380179212dcbc2de11c72a9ff88f", "author": {"user": {"login": "mergify[bot]", "name": null}}, "url": "https://github.com/spinnaker/kork/commit/d21feb897d2e380179212dcbc2de11c72a9ff88f", "committedDate": "2020-02-13T20:48:21Z", "message": "Merge branch 'master' into di"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e1998e0cdaf66de3db93a82d0eb2e9334fea08f", "author": {"user": {"login": "mergify[bot]", "name": null}}, "url": "https://github.com/spinnaker/kork/commit/8e1998e0cdaf66de3db93a82d0eb2e9334fea08f", "committedDate": "2020-02-13T20:54:22Z", "message": "Merge branch 'master' into di"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1545, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}