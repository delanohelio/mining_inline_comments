{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NTcyMjE1", "number": 545, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDo0MzoyMlrODlo4fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDo1ODoyNVrODlpK9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzkzNzI2OnYy", "diffSide": "LEFT", "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/HttpClientSdkConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDo0MzoyMlrOFypOcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDo0MzoyMlrOFypOcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY0ODU2Mg==", "bodyText": "Because we enabled configuration properties for OkHttpClientConfigurationProperties in this configuration static context (wherein beans are created early in the app lifecycle), I believe this properties object was being instantiated without all the parameters loaded from the configuration.  This resulted in missing configuration properties that are important for a functioning http client (like a keystore and a truststore, for example).", "url": "https://github.com/spinnaker/kork/pull/545#discussion_r388648562", "createdAt": "2020-03-06T00:43:22Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/HttpClientSdkConfiguration.java", "diffHunk": "@@ -25,30 +26,39 @@\n import com.netflix.spinnaker.okhttp.OkHttpClientConfigurationProperties;\n import java.util.ArrayList;\n import java.util.List;\n-import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import javax.inject.Provider;\n+import org.springframework.beans.factory.BeanCreationException;\n+import org.springframework.boot.context.properties.bind.Bindable;\n+import org.springframework.boot.context.properties.bind.Binder;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.Import;\n import org.springframework.core.env.Environment;\n \n @Configuration\n-@EnableConfigurationProperties(OkHttpClientConfigurationProperties.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f4930473adf2f108ebf7c761fe757dc71959bba"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzk0NjE4OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/proxy/aspects/LogInvocationAspectTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDo0ODoyMlrOFypT2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDo0ODoyMlrOFypT2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY0OTk0Nw==", "bodyText": "Unrelated test change I had locally, figure I may as well add it.", "url": "https://github.com/spinnaker/kork/pull/545#discussion_r388649947", "createdAt": "2020-03-06T00:48:22Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/proxy/aspects/LogInvocationAspectTest.kt", "diffHunk": "@@ -49,12 +50,15 @@ class LogInvocationAspectTest : JUnit5Minutests {\n       expectThat(subject.supports(metricInvocationState.javaClass)).isFalse()\n     }\n \n-    test(\"Plugin ID and extension name added to the MDC before invocation\") {\n-      subject.before(target, proxy, method, args, spinnakerPluginDescriptor)\n-      val mdcPluginId = MDC.get(Header.PLUGIN_ID.header)\n-      val mdcPluginExtension = MDC.get(Header.PLUGIN_EXTENSION.header)\n-      expectThat(mdcPluginId).isEqualTo(spinnakerPluginDescriptor.pluginId)\n-      expectThat(mdcPluginExtension).isEqualTo(target.javaClass.simpleName.toString())\n+    test(\"Plugin ID and extension name added to the MDC before invocation, removes in finally\") {\n+      val invocatonState = subject.before(target, proxy, method, args, spinnakerPluginDescriptor)\n+      expectThat(MDC.get(Header.PLUGIN_ID.header)).isEqualTo(spinnakerPluginDescriptor.pluginId)\n+      expectThat(MDC.get(Header.PLUGIN_EXTENSION.header)).isEqualTo(target.javaClass.simpleName.toString())\n+\n+      subject.finally(invocatonState)\n+\n+      expectThat(MDC.get(Header.PLUGIN_ID.header)).isNull()\n+      expectThat(MDC.get(Header.PLUGIN_EXTENSION.header)).isNull()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17a739263437e7dc76c9320172b9445f98cf577f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzk4NDUzOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDo1ODoyNVrOFypnjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMDo1ODoyNVrOFypnjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY1NDk5MA==", "bodyText": "I'd also like to not wire HttpClientSdkConfiguration as we work through some additional issues with plugin http clients.", "url": "https://github.com/spinnaker/kork/pull/545#discussion_r388654990", "createdAt": "2020-03-06T00:58:25Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java", "diffHunk": "@@ -66,7 +66,7 @@\n \n @Configuration\n @EnableConfigurationProperties(PluginsConfigurationProperties.class)\n-@Import({Front50PluginsConfiguration.class, HttpClientSdkConfiguration.class})\n+@Import({Front50PluginsConfiguration.class})\n public class PluginsAutoConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08596a3f537eed98c4ea0a3fded1943a64ac4833"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3613, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}