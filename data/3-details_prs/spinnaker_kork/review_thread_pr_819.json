{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4ODA3NzEy", "number": 819, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOTowNjoyN1rOE31ibw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMToyNjoxMVrOE34Uog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTg0MzAzOnYy", "diffSide": "RIGHT", "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/MetricsInterceptor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOTowNjoyN1rOHxah2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMToyMjo0MVrOHxexFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3NjkyMA==", "bodyText": "Small nitpick:  This tripped me up.  Instead of creating a member variable headerCheckPattern and assigning the value from okHttpMetricsInterceptorProperties I think it's fine to just call okHttpMetricsInterceptorProperties.getHeaderCheckRegExPattern() where it used below.", "url": "https://github.com/spinnaker/kork/pull/819#discussion_r521576920", "createdAt": "2020-11-11T19:06:27Z", "author": {"login": "jonsie"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/MetricsInterceptor.java", "diffHunk": "@@ -27,12 +29,16 @@\n  */\n class MetricsInterceptor {\n   private final Provider<Registry> registry;\n-  private final boolean skipHeaderCheck;\n+  private final OkHttpMetricsInterceptorProperties okHttpMetricsInterceptorProperties;\n   private final Logger log;\n+  private final Pattern headerCheckPattern;\n \n-  MetricsInterceptor(Provider<Registry> registry, boolean skipHeaderCheck) {\n+  MetricsInterceptor(\n+      Provider<Registry> registry,\n+      OkHttpMetricsInterceptorProperties okHttpMetricsInterceptorProperties) {\n     this.registry = registry;\n-    this.skipHeaderCheck = skipHeaderCheck;\n+    this.okHttpMetricsInterceptorProperties = okHttpMetricsInterceptorProperties;\n+    this.headerCheckPattern = okHttpMetricsInterceptorProperties.getHeaderCheckRegExPattern();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d90ac3b642befbb53fbc6160f7e9adb6cac8b3f9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwNDA1MQ==", "bodyText": "was keeping that in a member variable to avoid compiling the regex pattern every time we intercept the request.", "url": "https://github.com/spinnaker/kork/pull/819#discussion_r521604051", "createdAt": "2020-11-11T19:58:10Z", "author": {"login": "srekapalli"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/MetricsInterceptor.java", "diffHunk": "@@ -27,12 +29,16 @@\n  */\n class MetricsInterceptor {\n   private final Provider<Registry> registry;\n-  private final boolean skipHeaderCheck;\n+  private final OkHttpMetricsInterceptorProperties okHttpMetricsInterceptorProperties;\n   private final Logger log;\n+  private final Pattern headerCheckPattern;\n \n-  MetricsInterceptor(Provider<Registry> registry, boolean skipHeaderCheck) {\n+  MetricsInterceptor(\n+      Provider<Registry> registry,\n+      OkHttpMetricsInterceptorProperties okHttpMetricsInterceptorProperties) {\n     this.registry = registry;\n-    this.skipHeaderCheck = skipHeaderCheck;\n+    this.okHttpMetricsInterceptorProperties = okHttpMetricsInterceptorProperties;\n+    this.headerCheckPattern = okHttpMetricsInterceptorProperties.getHeaderCheckRegExPattern();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3NjkyMA=="}, "originalCommit": {"oid": "d90ac3b642befbb53fbc6160f7e9adb6cac8b3f9"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0NjM1OQ==", "bodyText": "I think the properties class could keep track of the compiled pattern.", "url": "https://github.com/spinnaker/kork/pull/819#discussion_r521646359", "createdAt": "2020-11-11T21:22:41Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/okhttp/MetricsInterceptor.java", "diffHunk": "@@ -27,12 +29,16 @@\n  */\n class MetricsInterceptor {\n   private final Provider<Registry> registry;\n-  private final boolean skipHeaderCheck;\n+  private final OkHttpMetricsInterceptorProperties okHttpMetricsInterceptorProperties;\n   private final Logger log;\n+  private final Pattern headerCheckPattern;\n \n-  MetricsInterceptor(Provider<Registry> registry, boolean skipHeaderCheck) {\n+  MetricsInterceptor(\n+      Provider<Registry> registry,\n+      OkHttpMetricsInterceptorProperties okHttpMetricsInterceptorProperties) {\n     this.registry = registry;\n-    this.skipHeaderCheck = skipHeaderCheck;\n+    this.okHttpMetricsInterceptorProperties = okHttpMetricsInterceptorProperties;\n+    this.headerCheckPattern = okHttpMetricsInterceptorProperties.getHeaderCheckRegExPattern();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU3NjkyMA=="}, "originalCommit": {"oid": "d90ac3b642befbb53fbc6160f7e9adb6cac8b3f9"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDI5OTIyOnYy", "diffSide": "RIGHT", "path": "kork-web/src/main/groovy/com/netflix/spinnaker/config/OkHttpMetricsInterceptorProperties.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMToyNjoxMVrOHxe3WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMjo1MjoxMlrOHxhLsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0Nzk2MA==", "bodyText": "String headerCheckRegex or String headerCheckPattern imo (looking at ~/.spinnaker/* we have more instances of \"*Pattern\" for regexes).\nNot sure why we have public instance variables and getters/setters?", "url": "https://github.com/spinnaker/kork/pull/819#discussion_r521647960", "createdAt": "2020-11-11T21:26:11Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/groovy/com/netflix/spinnaker/config/OkHttpMetricsInterceptorProperties.java", "diffHunk": "@@ -15,18 +15,42 @@\n  */\n package com.netflix.spinnaker.config;\n \n+import java.util.regex.Pattern;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.util.StringUtils;\n \n @ConfigurationProperties(\"ok-http-client.interceptor\")\n public class OkHttpMetricsInterceptorProperties {\n \n+  /** If set to true, will skip header check completely. */\n   public boolean skipHeaderCheck = false;\n \n+  /**\n+   * If Skip header check is set to false and regex is set, header check will be skipped for all\n+   * endpoints except for the ones that match the provided regex.\n+   */\n+  public String headerCheckRegEx = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d90ac3b642befbb53fbc6160f7e9adb6cac8b3f9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY4NTkzOA==", "bodyText": "yh.. Didn't notice those are public vars. Seems like a left over from groovy to java conversion. Fixed now.", "url": "https://github.com/spinnaker/kork/pull/819#discussion_r521685938", "createdAt": "2020-11-11T22:52:12Z", "author": {"login": "srekapalli"}, "path": "kork-web/src/main/groovy/com/netflix/spinnaker/config/OkHttpMetricsInterceptorProperties.java", "diffHunk": "@@ -15,18 +15,42 @@\n  */\n package com.netflix.spinnaker.config;\n \n+import java.util.regex.Pattern;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.util.StringUtils;\n \n @ConfigurationProperties(\"ok-http-client.interceptor\")\n public class OkHttpMetricsInterceptorProperties {\n \n+  /** If set to true, will skip header check completely. */\n   public boolean skipHeaderCheck = false;\n \n+  /**\n+   * If Skip header check is set to false and regex is set, header check will be skipped for all\n+   * endpoints except for the ones that match the provided regex.\n+   */\n+  public String headerCheckRegEx = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0Nzk2MA=="}, "originalCommit": {"oid": "d90ac3b642befbb53fbc6160f7e9adb6cac8b3f9"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3431, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}