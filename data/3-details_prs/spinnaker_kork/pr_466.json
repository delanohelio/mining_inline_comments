{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyODkxNDA5", "number": 466, "title": "feat(plugins): plugin reference plugin type for local development", "bodyText": "This introduces a new plugin type that is registered if pf4j is\nset to development mode to enable a local plugin development\nexperience.\nA plugin-ref is a JSON file with a pointer to the actual location\nof a plugin and a list of the classes and libraries to include\nwhen building the PluginClasspath.\nThis allows a runtime experience similar to dropping a fully\npackaged plugin into the host application, without requiring\nthe packaging and deployment step - aside from a one time\ngeneration and copy/link of the plugin-ref file.\nThis changeset includes all the plumbing to make plugin-ref\na supported type of plugin, but there is still work to do\nin tooling and documentation to make the development\nexperience reasonable.\nWith this changeset and the following set of steps, you can\nwork with the host application and the plugin project open\nin IntelliJ, launch the host application, and debug into\nthe plugin project. To do this you need to:\n\ncreate a plugin-ref file, which is a JSON document:\n\n{\n  \"pluginPath\": \"/path/to/plugin\",\n  \"classesDirs\": [\n    \"paths\",\n    \"with\",\n    \"code\",\n    \"e.g. PLUGIN_PROJECT/build/classes/java/main\"],\n  \"libsDirs\": [\n    \"paths\",\n    \"with\",\n    \"jars\"]\n}\n\n\n\ncopy or link the plugin-ref file into the host\napplications plugins directory\n\n\nconfigure the host-application with the plugin enabled:\n\n\nspinnaker.extensibility:\n  plugins:\n    <my plugin id>:\n      enabled: true\n\n\nrun the host application with pf4j.mode=development\n\nGiven that set of steps you can then open the host\napplication project in IntelliJ. You can then add the\nplugin project as a new project into the same workspace (\non the gradle tab, the + button).\nThen create a Run Configuration for the host application,\nbut edit the Before Launch to do a Build Project instead\nof just Build.\nWhen you have alllll these steps complete, if you run the\nhost application you should see it pick up your plugin-ref,\nand add your plugin. Additionally you can run in debug\nmode and you will be able to set breakpoints in your plugin\nand debug through it.", "createdAt": "2020-01-14T23:45:30Z", "url": "https://github.com/spinnaker/kork/pull/466", "merged": true, "mergeCommit": {"oid": "1cc88245dbcd066904e6349589aae23f38d54cd7"}, "closed": true, "closedAt": "2020-01-16T21:25:33Z", "author": {"login": "cfieber"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6Z3h6gFqTM0MjkxNDE4MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7A42CgBqjI5NTYwOTk1Mzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyOTE0MTgw", "url": "https://github.com/spinnaker/kork/pull/466#pullrequestreview-342914180", "createdAt": "2020-01-14T23:50:48Z", "commit": {"oid": "add4ad8d98018090245789dd31716ef21b78e1df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzo1MDo0OFrOFdpgUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMzo1MDo0OFrOFdpgUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYzMzA0Mg==", "bodyText": "this feels like a rebase error, will investigate", "url": "https://github.com/spinnaker/kork/pull/466#discussion_r366633042", "createdAt": "2020-01-14T23:50:48Z", "author": {"login": "cfieber"}, "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/loaders/SpinnakerPluginLoaderTests.kt", "diffHunk": "@@ -1,106 +0,0 @@\n-/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "add4ad8d98018090245789dd31716ef21b78e1df"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyOTIyOTg1", "url": "https://github.com/spinnaker/kork/pull/466#pullrequestreview-342922985", "createdAt": "2020-01-15T00:18:42Z", "commit": {"oid": "add4ad8d98018090245789dd31716ef21b78e1df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDoxODo0MlrOFdp9DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDoxODo0MlrOFdp9DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MDM5Nw==", "bodyText": "Maybe instead we pass in the RuntimeMode like so SpinnakerPluginDescriptorFinder(runtimeMode).\nThen in SpinnakerPluginDescriptorFinder we check that runtime mode equals RuntimeMode.DEVELOPMENT.  This way we're not passing around the PluginManager, we have the option to key off other runtime modes in SpinnakerPluginDescriptorFinder, and we still get to use the DefaultPluginManager implementation of getRuntimeMode.", "url": "https://github.com/spinnaker/kork/pull/466#discussion_r366640397", "createdAt": "2020-01-15T00:18:42Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerPluginManager.kt", "diffHunk": "@@ -64,14 +68,19 @@ open class SpinnakerPluginManager(\n \n   override fun createPluginLoader(): PluginLoader =\n     CompoundPluginLoader()\n+      .add(PluginRefPluginLoader(this), this::isDevelopment)\n       .add(SpinnakerDevelopmentPluginLoader(this), this::isDevelopment)\n       .add(SpinnakerDefaultPluginLoader(this))\n       .add(SpinnakerJarPluginLoader(this))\n \n   override fun createPluginDescriptorFinder(): PluginDescriptorFinder =\n-    SpinnakerPluginDescriptorFinder()\n+    SpinnakerPluginDescriptorFinder(this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "add4ad8d98018090245789dd31716ef21b78e1df"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNDUwODIx", "url": "https://github.com/spinnaker/kork/pull/466#pullrequestreview-343450821", "createdAt": "2020-01-15T19:04:49Z", "commit": {"oid": "add4ad8d98018090245789dd31716ef21b78e1df"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTowNDo0OVrOFeDI0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxOTowNToxNlrOFeDJhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA1MzAxMA==", "bodyText": "Why open?", "url": "https://github.com/spinnaker/kork/pull/466#discussion_r367053010", "createdAt": "2020-01-15T19:04:49Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/loaders/PluginRefPluginLoader.kt", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2019 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.loaders\n+\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginDescriptor\n+import com.netflix.spinnaker.kork.plugins.pluginref.PluginRef\n+import org.pf4j.BasePluginLoader\n+import org.pf4j.PluginClasspath\n+import org.pf4j.PluginDescriptor\n+import org.pf4j.PluginLoader\n+import org.pf4j.PluginManager\n+import java.nio.file.Path\n+\n+open class PluginRefPluginLoader(val pluginManager: PluginManager) : PluginLoader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "add4ad8d98018090245789dd31716ef21b78e1df"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA1MzE5MA==", "bodyText": "Would also like to see class-level docs on this, similar to the description you have in the commit.", "url": "https://github.com/spinnaker/kork/pull/466#discussion_r367053190", "createdAt": "2020-01-15T19:05:16Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/loaders/PluginRefPluginLoader.kt", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2019 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.loaders\n+\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginDescriptor\n+import com.netflix.spinnaker.kork.plugins.pluginref.PluginRef\n+import org.pf4j.BasePluginLoader\n+import org.pf4j.PluginClasspath\n+import org.pf4j.PluginDescriptor\n+import org.pf4j.PluginLoader\n+import org.pf4j.PluginManager\n+import java.nio.file.Path\n+\n+open class PluginRefPluginLoader(val pluginManager: PluginManager) : PluginLoader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA1MzAxMA=="}, "originalCommit": {"oid": "add4ad8d98018090245789dd31716ef21b78e1df"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "add4ad8d98018090245789dd31716ef21b78e1df", "author": {"user": {"login": "cfieber", "name": "Cameron Fieber"}}, "url": "https://github.com/spinnaker/kork/commit/add4ad8d98018090245789dd31716ef21b78e1df", "committedDate": "2020-01-14T23:42:59Z", "message": "feat(plugins): plugin reference plugin type for local development\n\nThis introduces a new plugin type that is registered if pf4j is\nset to development mode to enable a local plugin development\nexperience.\n\nA plugin-ref is a JSON file with a pointer to the actual location\nof a plugin and a list of the classes and libraries to include\nwhen building the PluginClasspath.\n\nThis allows a runtime experience similar to dropping a fully\npackaged plugin into the host application, without requiring\nthe packaging and deployment step - aside from a one time\ngeneration and copy/link of the plugin-ref file.\n\nThis changeset includes all the plumbing to make plugin-ref\na supported type of plugin, but there is still work to do\nin tooling and documentation to make the development\nexperience reasonable.\n\nWith this changeset and the following set of steps, you can\nwork with the host application and the plugin project open\nin IntelliJ, launch the host application, and debug into\nthe plugin project. To do this you need to:\n\n1. create a plugin-ref file, which is a JSON document:\n```\n{\n  \"pluginPath\": \"/path/to/plugin\",\n  \"classesDirs\": [\n    \"paths\",\n    \"with\",\n    \"code\",\n    \"e.g. PLUGIN_PROJECT/build/classes/java/main\"],\n  \"libsDirs\": [\n    \"paths\",\n    \"with\",\n    \"jars\"]\n}\n```\n\n2. copy or link the plugin-ref file into the host\napplications plugins directory\n\n3. configure the host-application with the plugin enabled:\n```\nspinnaker.extensibility:\n  plugins:\n    <my plugin id>:\n      enabled: true\n```\n\n4. run the host application with `pf4j.mode=development`\n\nGiven that set of steps you can then open the host\napplication project in IntelliJ. You can then add the\nplugin project as a new project into the same workspace (\non the gradle tab, the `+` button).\nThen create a Run Configuration for the host application,\nbut edit the Before Launch to do a Build Project instead\nof just Build.\n\nWhen you have alllll these steps complete, if you run the\nhost application you should see it pick up your plugin-ref,\nand add your plugin. Additionally you can run in debug\nmode and you will be able to set breakpoints in your plugin\nand debug through it."}, "afterCommit": {"oid": "b4aea49b15d63ac9ff8db310e5795ab661dc9315", "author": {"user": {"login": "cfieber", "name": "Cameron Fieber"}}, "url": "https://github.com/spinnaker/kork/commit/b4aea49b15d63ac9ff8db310e5795ab661dc9315", "committedDate": "2020-01-16T19:16:16Z", "message": "feat(plugins): plugin reference plugin type for local development\n\nThis introduces a new plugin type that is registered if pf4j is\nset to development mode to enable a local plugin development\nexperience.\n\nA plugin-ref is a JSON file with a pointer to the actual location\nof a plugin and a list of the classes and libraries to include\nwhen building the PluginClasspath.\n\nThis allows a runtime experience similar to dropping a fully\npackaged plugin into the host application, without requiring\nthe packaging and deployment step - aside from a one time\ngeneration and copy/link of the plugin-ref file.\n\nThis changeset includes all the plumbing to make plugin-ref\na supported type of plugin, but there is still work to do\nin tooling and documentation to make the development\nexperience reasonable.\n\nWith this changeset and the following set of steps, you can\nwork with the host application and the plugin project open\nin IntelliJ, launch the host application, and debug into\nthe plugin project. To do this you need to:\n\n1. create a plugin-ref file, which is a JSON document:\n```\n{\n  \"pluginPath\": \"/path/to/plugin\",\n  \"classesDirs\": [\n    \"paths\",\n    \"with\",\n    \"code\",\n    \"e.g. PLUGIN_PROJECT/build/classes/java/main\"],\n  \"libsDirs\": [\n    \"paths\",\n    \"with\",\n    \"jars\"]\n}\n```\n\n2. copy or link the plugin-ref file into the host\napplications plugins directory\n\n3. configure the host-application with the plugin enabled:\n```\nspinnaker.extensibility:\n  plugins:\n    <my plugin id>:\n      enabled: true\n```\n\n4. run the host application with `pf4j.mode=development`\n\nGiven that set of steps you can then open the host\napplication project in IntelliJ. You can then add the\nplugin project as a new project into the same workspace (\non the gradle tab, the `+` button).\nThen create a Run Configuration for the host application,\nbut edit the Before Launch to do a Build Project instead\nof just Build.\n\nWhen you have alllll these steps complete, if you run the\nhost application you should see it pick up your plugin-ref,\nand add your plugin. Additionally you can run in debug\nmode and you will be able to set breakpoints in your plugin\nand debug through it."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4aea49b15d63ac9ff8db310e5795ab661dc9315", "author": {"user": {"login": "cfieber", "name": "Cameron Fieber"}}, "url": "https://github.com/spinnaker/kork/commit/b4aea49b15d63ac9ff8db310e5795ab661dc9315", "committedDate": "2020-01-16T19:16:16Z", "message": "feat(plugins): plugin reference plugin type for local development\n\nThis introduces a new plugin type that is registered if pf4j is\nset to development mode to enable a local plugin development\nexperience.\n\nA plugin-ref is a JSON file with a pointer to the actual location\nof a plugin and a list of the classes and libraries to include\nwhen building the PluginClasspath.\n\nThis allows a runtime experience similar to dropping a fully\npackaged plugin into the host application, without requiring\nthe packaging and deployment step - aside from a one time\ngeneration and copy/link of the plugin-ref file.\n\nThis changeset includes all the plumbing to make plugin-ref\na supported type of plugin, but there is still work to do\nin tooling and documentation to make the development\nexperience reasonable.\n\nWith this changeset and the following set of steps, you can\nwork with the host application and the plugin project open\nin IntelliJ, launch the host application, and debug into\nthe plugin project. To do this you need to:\n\n1. create a plugin-ref file, which is a JSON document:\n```\n{\n  \"pluginPath\": \"/path/to/plugin\",\n  \"classesDirs\": [\n    \"paths\",\n    \"with\",\n    \"code\",\n    \"e.g. PLUGIN_PROJECT/build/classes/java/main\"],\n  \"libsDirs\": [\n    \"paths\",\n    \"with\",\n    \"jars\"]\n}\n```\n\n2. copy or link the plugin-ref file into the host\napplications plugins directory\n\n3. configure the host-application with the plugin enabled:\n```\nspinnaker.extensibility:\n  plugins:\n    <my plugin id>:\n      enabled: true\n```\n\n4. run the host application with `pf4j.mode=development`\n\nGiven that set of steps you can then open the host\napplication project in IntelliJ. You can then add the\nplugin project as a new project into the same workspace (\non the gradle tab, the `+` button).\nThen create a Run Configuration for the host application,\nbut edit the Before Launch to do a Build Project instead\nof just Build.\n\nWhen you have alllll these steps complete, if you run the\nhost application you should see it pick up your plugin-ref,\nand add your plugin. Additionally you can run in debug\nmode and you will be able to set breakpoints in your plugin\nand debug through it."}, "afterCommit": {"oid": "8d7e3eab303e9884945f2ed5f6ba10074fb8f556", "author": {"user": {"login": "cfieber", "name": "Cameron Fieber"}}, "url": "https://github.com/spinnaker/kork/commit/8d7e3eab303e9884945f2ed5f6ba10074fb8f556", "committedDate": "2020-01-16T19:24:11Z", "message": "feat(plugins): plugin reference plugin type for local development\n\nThis introduces a new plugin type that is registered if pf4j is\nset to development mode to enable a local plugin development\nexperience.\n\nA plugin-ref is a JSON file with a pointer to the actual location\nof a plugin and a list of the classes and libraries to include\nwhen building the PluginClasspath.\n\nThis allows a runtime experience similar to dropping a fully\npackaged plugin into the host application, without requiring\nthe packaging and deployment step - aside from a one time\ngeneration and copy/link of the plugin-ref file.\n\nThis changeset includes all the plumbing to make plugin-ref\na supported type of plugin, but there is still work to do\nin tooling and documentation to make the development\nexperience reasonable.\n\nWith this changeset and the following set of steps, you can\nwork with the host application and the plugin project open\nin IntelliJ, launch the host application, and debug into\nthe plugin project. To do this you need to:\n\n1. create a plugin-ref file, which is a JSON document:\n```\n{\n  \"pluginPath\": \"/path/to/plugin\",\n  \"classesDirs\": [\n    \"paths\",\n    \"with\",\n    \"code\",\n    \"e.g. PLUGIN_PROJECT/build/classes/java/main\"],\n  \"libsDirs\": [\n    \"paths\",\n    \"with\",\n    \"jars\"]\n}\n```\n\n2. copy or link the plugin-ref file into the host\napplications plugins directory\n\n3. configure the host-application with the plugin enabled:\n```\nspinnaker.extensibility:\n  plugins:\n    <my plugin id>:\n      enabled: true\n```\n\n4. run the host application with `pf4j.mode=development`\n\nGiven that set of steps you can then open the host\napplication project in IntelliJ. You can then add the\nplugin project as a new project into the same workspace (\non the gradle tab, the `+` button).\nThen create a Run Configuration for the host application,\nbut edit the Before Launch to do a Build Project instead\nof just Build.\n\nWhen you have alllll these steps complete, if you run the\nhost application you should see it pick up your plugin-ref,\nand add your plugin. Additionally you can run in debug\nmode and you will be able to set breakpoints in your plugin\nand debug through it."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MTU5Mjc4", "url": "https://github.com/spinnaker/kork/pull/466#pullrequestreview-344159278", "createdAt": "2020-01-16T19:27:12Z", "commit": {"oid": "8d7e3eab303e9884945f2ed5f6ba10074fb8f556"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d7e3eab303e9884945f2ed5f6ba10074fb8f556", "author": {"user": {"login": "cfieber", "name": "Cameron Fieber"}}, "url": "https://github.com/spinnaker/kork/commit/8d7e3eab303e9884945f2ed5f6ba10074fb8f556", "committedDate": "2020-01-16T19:24:11Z", "message": "feat(plugins): plugin reference plugin type for local development\n\nThis introduces a new plugin type that is registered if pf4j is\nset to development mode to enable a local plugin development\nexperience.\n\nA plugin-ref is a JSON file with a pointer to the actual location\nof a plugin and a list of the classes and libraries to include\nwhen building the PluginClasspath.\n\nThis allows a runtime experience similar to dropping a fully\npackaged plugin into the host application, without requiring\nthe packaging and deployment step - aside from a one time\ngeneration and copy/link of the plugin-ref file.\n\nThis changeset includes all the plumbing to make plugin-ref\na supported type of plugin, but there is still work to do\nin tooling and documentation to make the development\nexperience reasonable.\n\nWith this changeset and the following set of steps, you can\nwork with the host application and the plugin project open\nin IntelliJ, launch the host application, and debug into\nthe plugin project. To do this you need to:\n\n1. create a plugin-ref file, which is a JSON document:\n```\n{\n  \"pluginPath\": \"/path/to/plugin\",\n  \"classesDirs\": [\n    \"paths\",\n    \"with\",\n    \"code\",\n    \"e.g. PLUGIN_PROJECT/build/classes/java/main\"],\n  \"libsDirs\": [\n    \"paths\",\n    \"with\",\n    \"jars\"]\n}\n```\n\n2. copy or link the plugin-ref file into the host\napplications plugins directory\n\n3. configure the host-application with the plugin enabled:\n```\nspinnaker.extensibility:\n  plugins:\n    <my plugin id>:\n      enabled: true\n```\n\n4. run the host application with `pf4j.mode=development`\n\nGiven that set of steps you can then open the host\napplication project in IntelliJ. You can then add the\nplugin project as a new project into the same workspace (\non the gradle tab, the `+` button).\nThen create a Run Configuration for the host application,\nbut edit the Before Launch to do a Build Project instead\nof just Build.\n\nWhen you have alllll these steps complete, if you run the\nhost application you should see it pick up your plugin-ref,\nand add your plugin. Additionally you can run in debug\nmode and you will be able to set breakpoints in your plugin\nand debug through it."}, "afterCommit": {"oid": "3a334143ec827f5cd8e1f16bc554836014cce76e", "author": {"user": {"login": "cfieber", "name": "Cameron Fieber"}}, "url": "https://github.com/spinnaker/kork/commit/3a334143ec827f5cd8e1f16bc554836014cce76e", "committedDate": "2020-01-16T21:16:36Z", "message": "feat(plugins): plugin reference plugin type for local development\n\nThis introduces a new plugin type that is registered if pf4j is\nset to development mode to enable a local plugin development\nexperience.\n\nA plugin-ref is a JSON file with a pointer to the actual location\nof a plugin and a list of the classes and libraries to include\nwhen building the PluginClasspath.\n\nThis allows a runtime experience similar to dropping a fully\npackaged plugin into the host application, without requiring\nthe packaging and deployment step - aside from a one time\ngeneration and copy/link of the plugin-ref file.\n\nThis changeset includes all the plumbing to make plugin-ref\na supported type of plugin, but there is still work to do\nin tooling and documentation to make the development\nexperience reasonable.\n\nWith this changeset and the following set of steps, you can\nwork with the host application and the plugin project open\nin IntelliJ, launch the host application, and debug into\nthe plugin project. To do this you need to:\n\n1. create a plugin-ref file, which is a JSON document:\n```\n{\n  \"pluginPath\": \"/path/to/plugin\",\n  \"classesDirs\": [\n    \"paths\",\n    \"with\",\n    \"code\",\n    \"e.g. PLUGIN_PROJECT/build/classes/java/main\"],\n  \"libsDirs\": [\n    \"paths\",\n    \"with\",\n    \"jars\"]\n}\n```\n\n2. copy or link the plugin-ref file into the host\napplications plugins directory\n\n3. configure the host-application with the plugin enabled:\n```\nspinnaker.extensibility:\n  plugins:\n    <my plugin id>:\n      enabled: true\n```\n\n4. run the host application with `pf4j.mode=development`\n\nGiven that set of steps you can then open the host\napplication project in IntelliJ. You can then add the\nplugin project as a new project into the same workspace (\non the gradle tab, the `+` button).\nThen create a Run Configuration for the host application,\nbut edit the Before Launch to do a Build Project instead\nof just Build.\n\nWhen you have alllll these steps complete, if you run the\nhost application you should see it pick up your plugin-ref,\nand add your plugin. Additionally you can run in debug\nmode and you will be able to set breakpoints in your plugin\nand debug through it."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bcb7cfe5a5fce756e62c82efc59a1da1febce41", "author": {"user": {"login": "cfieber", "name": "Cameron Fieber"}}, "url": "https://github.com/spinnaker/kork/commit/3bcb7cfe5a5fce756e62c82efc59a1da1febce41", "committedDate": "2020-01-16T21:18:26Z", "message": "feat(plugins): plugin reference plugin type for local development\n\nThis introduces a new plugin type that is registered if pf4j is\nset to development mode to enable a local plugin development\nexperience.\n\nA plugin-ref is a JSON file with a pointer to the actual location\nof a plugin and a list of the classes and libraries to include\nwhen building the PluginClasspath.\n\nThis allows a runtime experience similar to dropping a fully\npackaged plugin into the host application, without requiring\nthe packaging and deployment step - aside from a one time\ngeneration and copy/link of the plugin-ref file.\n\nThis changeset includes all the plumbing to make plugin-ref\na supported type of plugin, but there is still work to do\nin tooling and documentation to make the development\nexperience reasonable.\n\nWith this changeset and the following set of steps, you can\nwork with the host application and the plugin project open\nin IntelliJ, launch the host application, and debug into\nthe plugin project. To do this you need to:\n\n1. create a plugin-ref file, which is a JSON document:\n```\n{\n  \"pluginPath\": \"/path/to/plugin\",\n  \"classesDirs\": [\n    \"paths\",\n    \"with\",\n    \"code\",\n    \"e.g. PLUGIN_PROJECT/build/classes/java/main\"],\n  \"libsDirs\": [\n    \"paths\",\n    \"with\",\n    \"jars\"]\n}\n```\n\n2. copy or link the plugin-ref file into the host\napplications plugins directory\n\n3. configure the host-application with the plugin enabled:\n```\nspinnaker.extensibility:\n  plugins:\n    <my plugin id>:\n      enabled: true\n```\n\n4. run the host application with `pf4j.mode=development`\n\nGiven that set of steps you can then open the host\napplication project in IntelliJ. You can then add the\nplugin project as a new project into the same workspace (\non the gradle tab, the `+` button).\nThen create a Run Configuration for the host application,\nbut edit the Before Launch to do a Build Project instead\nof just Build.\n\nWhen you have alllll these steps complete, if you run the\nhost application you should see it pick up your plugin-ref,\nand add your plugin. Additionally you can run in debug\nmode and you will be able to set breakpoints in your plugin\nand debug through it."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a334143ec827f5cd8e1f16bc554836014cce76e", "author": {"user": {"login": "cfieber", "name": "Cameron Fieber"}}, "url": "https://github.com/spinnaker/kork/commit/3a334143ec827f5cd8e1f16bc554836014cce76e", "committedDate": "2020-01-16T21:16:36Z", "message": "feat(plugins): plugin reference plugin type for local development\n\nThis introduces a new plugin type that is registered if pf4j is\nset to development mode to enable a local plugin development\nexperience.\n\nA plugin-ref is a JSON file with a pointer to the actual location\nof a plugin and a list of the classes and libraries to include\nwhen building the PluginClasspath.\n\nThis allows a runtime experience similar to dropping a fully\npackaged plugin into the host application, without requiring\nthe packaging and deployment step - aside from a one time\ngeneration and copy/link of the plugin-ref file.\n\nThis changeset includes all the plumbing to make plugin-ref\na supported type of plugin, but there is still work to do\nin tooling and documentation to make the development\nexperience reasonable.\n\nWith this changeset and the following set of steps, you can\nwork with the host application and the plugin project open\nin IntelliJ, launch the host application, and debug into\nthe plugin project. To do this you need to:\n\n1. create a plugin-ref file, which is a JSON document:\n```\n{\n  \"pluginPath\": \"/path/to/plugin\",\n  \"classesDirs\": [\n    \"paths\",\n    \"with\",\n    \"code\",\n    \"e.g. PLUGIN_PROJECT/build/classes/java/main\"],\n  \"libsDirs\": [\n    \"paths\",\n    \"with\",\n    \"jars\"]\n}\n```\n\n2. copy or link the plugin-ref file into the host\napplications plugins directory\n\n3. configure the host-application with the plugin enabled:\n```\nspinnaker.extensibility:\n  plugins:\n    <my plugin id>:\n      enabled: true\n```\n\n4. run the host application with `pf4j.mode=development`\n\nGiven that set of steps you can then open the host\napplication project in IntelliJ. You can then add the\nplugin project as a new project into the same workspace (\non the gradle tab, the `+` button).\nThen create a Run Configuration for the host application,\nbut edit the Before Launch to do a Build Project instead\nof just Build.\n\nWhen you have alllll these steps complete, if you run the\nhost application you should see it pick up your plugin-ref,\nand add your plugin. Additionally you can run in debug\nmode and you will be able to set breakpoints in your plugin\nand debug through it."}, "afterCommit": {"oid": "3bcb7cfe5a5fce756e62c82efc59a1da1febce41", "author": {"user": {"login": "cfieber", "name": "Cameron Fieber"}}, "url": "https://github.com/spinnaker/kork/commit/3bcb7cfe5a5fce756e62c82efc59a1da1febce41", "committedDate": "2020-01-16T21:18:26Z", "message": "feat(plugins): plugin reference plugin type for local development\n\nThis introduces a new plugin type that is registered if pf4j is\nset to development mode to enable a local plugin development\nexperience.\n\nA plugin-ref is a JSON file with a pointer to the actual location\nof a plugin and a list of the classes and libraries to include\nwhen building the PluginClasspath.\n\nThis allows a runtime experience similar to dropping a fully\npackaged plugin into the host application, without requiring\nthe packaging and deployment step - aside from a one time\ngeneration and copy/link of the plugin-ref file.\n\nThis changeset includes all the plumbing to make plugin-ref\na supported type of plugin, but there is still work to do\nin tooling and documentation to make the development\nexperience reasonable.\n\nWith this changeset and the following set of steps, you can\nwork with the host application and the plugin project open\nin IntelliJ, launch the host application, and debug into\nthe plugin project. To do this you need to:\n\n1. create a plugin-ref file, which is a JSON document:\n```\n{\n  \"pluginPath\": \"/path/to/plugin\",\n  \"classesDirs\": [\n    \"paths\",\n    \"with\",\n    \"code\",\n    \"e.g. PLUGIN_PROJECT/build/classes/java/main\"],\n  \"libsDirs\": [\n    \"paths\",\n    \"with\",\n    \"jars\"]\n}\n```\n\n2. copy or link the plugin-ref file into the host\napplications plugins directory\n\n3. configure the host-application with the plugin enabled:\n```\nspinnaker.extensibility:\n  plugins:\n    <my plugin id>:\n      enabled: true\n```\n\n4. run the host application with `pf4j.mode=development`\n\nGiven that set of steps you can then open the host\napplication project in IntelliJ. You can then add the\nplugin project as a new project into the same workspace (\non the gradle tab, the `+` button).\nThen create a Run Configuration for the host application,\nbut edit the Before Launch to do a Build Project instead\nof just Build.\n\nWhen you have alllll these steps complete, if you run the\nhost application you should see it pick up your plugin-ref,\nand add your plugin. Additionally you can run in debug\nmode and you will be able to set breakpoints in your plugin\nand debug through it."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1615, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}