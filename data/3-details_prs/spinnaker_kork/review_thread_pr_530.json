{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwOTg4NDkz", "number": 530, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo1ODozM1rODjjgqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo1ODozM1rODjjgqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjA4NTUzOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/repository/Front50UpdateRepository.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo1ODozM1rOFvbYrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODowMzoyNlrOFvbiyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3NjA3OQ==", "bodyText": "is there a way to log the exception here?", "url": "https://github.com/spinnaker/kork/pull/530#discussion_r385276079", "createdAt": "2020-02-27T17:58:33Z", "author": {"login": "dreynaud"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/repository/Front50UpdateRepository.kt", "diffHunk": "@@ -57,10 +58,17 @@ class Front50UpdateRepository(\n   override fun getPlugins(): MutableMap<String, SpinnakerPluginInfo> {\n     return plugins.ifEmpty {\n       log.debug(\"Populating plugin info cache from front50\")\n-      val response = front50Service.listAll().execute()\n+      val response = retry.executeSupplier { front50Service.listAll().execute() }\n \n       if (!response.isSuccessful) {\n-        throw SystemException(\"Unable to list front50 plugin info\", response.message())\n+        // We can't throw an exception here when we fail to talk to Front50 because it will prevent a service from\n+        // starting. We would rather a Spinnaker service start and be potentially misconfigured than have a hard\n+        // startup dependency on front50.\n+        log.error(\n+          \"Failed listing plugin info from front50: This service may not download plugins that it needs: {}\",\n+          response.message()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "726b0eba020d03f8c86b5399d1eb4171dadf2893"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3ODY2NA==", "bodyText": "Updated. It's not the greatest, but it'll get the job done.", "url": "https://github.com/spinnaker/kork/pull/530#discussion_r385278664", "createdAt": "2020-02-27T18:03:26Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/repository/Front50UpdateRepository.kt", "diffHunk": "@@ -57,10 +58,17 @@ class Front50UpdateRepository(\n   override fun getPlugins(): MutableMap<String, SpinnakerPluginInfo> {\n     return plugins.ifEmpty {\n       log.debug(\"Populating plugin info cache from front50\")\n-      val response = front50Service.listAll().execute()\n+      val response = retry.executeSupplier { front50Service.listAll().execute() }\n \n       if (!response.isSuccessful) {\n-        throw SystemException(\"Unable to list front50 plugin info\", response.message())\n+        // We can't throw an exception here when we fail to talk to Front50 because it will prevent a service from\n+        // starting. We would rather a Spinnaker service start and be potentially misconfigured than have a hard\n+        // startup dependency on front50.\n+        log.error(\n+          \"Failed listing plugin info from front50: This service may not download plugins that it needs: {}\",\n+          response.message()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3NjA3OQ=="}, "originalCommit": {"oid": "726b0eba020d03f8c86b5399d1eb4171dadf2893"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3601, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}