{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNjAzNDA1", "number": 703, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjoyOTozM1rOEMQ-XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMToxODo0N1rOENG55A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjk2NDc2OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/VersionRequirementsParser.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjoyOTozM1rOGuR14A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMzozNTo1NlrOGu8sAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MDAwMA==", "bodyText": "Oh jeez. This is what I get for using regex to begin with. \ud83e\udd23\nWe should switch this class to wrap jsemver instead of doubling down on our regex pattern.", "url": "https://github.com/spinnaker/kork/pull/703#discussion_r451180000", "createdAt": "2020-07-07T22:29:33Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/VersionRequirementsParser.kt", "diffHunk": "@@ -27,41 +27,54 @@ import java.util.regex.Pattern\n  * - `operator` is a version constraint operator (`>`, `<`, `>=`, `<=`)\n  * - `version` is the service version that is being constrained\n  *\n- * TODO(jonsie): Add range constraint support (>= 1.0.0 & < 2.0.0)\n  */\n object VersionRequirementsParser {\n \n   private val SUPPORTS_PATTERN = Pattern.compile(\n-    \"^(?<service>[\\\\w\\\\-]+)(?<operator>[><=]{1,2})(?<version>[0-9]+\\\\.[0-9]+\\\\.[0-9]+)$\")\n+    \"^(?<service>[\\\\w\\\\-]+)(?<operator>[><=]{1,2})(?<version>[0-9]+\\\\.[0-9]+\\\\.[0-9]+)( & (?<rOperator>[><=]{1,2})(?<rVersion>[0-9]+\\\\.[0-9]+\\\\.[0-9]+))?$\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165a556470cc85af15cc866157c8d349b1997fcb"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg4MTk4NQ==", "bodyText": "I agree, I don't like to have the regex growing when we want to support more constraints, I changed it to have two groups one for the service and another for the constraint, then I uses jsemver to validate if the constraint is a valid.", "url": "https://github.com/spinnaker/kork/pull/703#discussion_r451881985", "createdAt": "2020-07-08T23:35:56Z", "author": {"login": "edgarulg"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/VersionRequirementsParser.kt", "diffHunk": "@@ -27,41 +27,54 @@ import java.util.regex.Pattern\n  * - `operator` is a version constraint operator (`>`, `<`, `>=`, `<=`)\n  * - `version` is the service version that is being constrained\n  *\n- * TODO(jonsie): Add range constraint support (>= 1.0.0 & < 2.0.0)\n  */\n object VersionRequirementsParser {\n \n   private val SUPPORTS_PATTERN = Pattern.compile(\n-    \"^(?<service>[\\\\w\\\\-]+)(?<operator>[><=]{1,2})(?<version>[0-9]+\\\\.[0-9]+\\\\.[0-9]+)$\")\n+    \"^(?<service>[\\\\w\\\\-]+)(?<operator>[><=]{1,2})(?<version>[0-9]+\\\\.[0-9]+\\\\.[0-9]+)( & (?<rOperator>[><=]{1,2})(?<rVersion>[0-9]+\\\\.[0-9]+\\\\.[0-9]+))?$\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MDAwMA=="}, "originalCommit": {"oid": "165a556470cc85af15cc866157c8d349b1997fcb"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjk2NjAyOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/VersionRequirementsParser.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjozMDowM1rOGuR2pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMzo0MjowNFrOGu8zew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MDE5OA==", "bodyText": "Why?", "url": "https://github.com/spinnaker/kork/pull/703#discussion_r451180198", "createdAt": "2020-07-07T22:30:03Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/VersionRequirementsParser.kt", "diffHunk": "@@ -27,41 +27,54 @@ import java.util.regex.Pattern\n  * - `operator` is a version constraint operator (`>`, `<`, `>=`, `<=`)\n  * - `version` is the service version that is being constrained\n  *\n- * TODO(jonsie): Add range constraint support (>= 1.0.0 & < 2.0.0)\n  */\n object VersionRequirementsParser {\n \n   private val SUPPORTS_PATTERN = Pattern.compile(\n-    \"^(?<service>[\\\\w\\\\-]+)(?<operator>[><=]{1,2})(?<version>[0-9]+\\\\.[0-9]+\\\\.[0-9]+)$\")\n+    \"^(?<service>[\\\\w\\\\-]+)(?<operator>[><=]{1,2})(?<version>[0-9]+\\\\.[0-9]+\\\\.[0-9]+)( & (?<rOperator>[><=]{1,2})(?<rVersion>[0-9]+\\\\.[0-9]+\\\\.[0-9]+))?$\")\n \n   private const val SUPPORTS_PATTERN_SERVICE_GROUP = \"service\"\n   private const val SUPPORTS_PATTERN_OPERATOR_GROUP = \"operator\"\n   private const val SUPPORTS_PATTERN_VERSION_GROUP = \"version\"\n+  private const val SUPPORTS_PATTERN_RANGE_OPERATOR_GROUP = \"rOperator\"\n+  private const val SUPPORTS_PATTERN_RANGE_VERSION_GROUP = \"rVersion\"\n \n   /**\n    * Parse a single version.\n    */\n-  fun parse(version: String): VersionRequirements {\n-    return SUPPORTS_PATTERN.matcher(version)\n+  fun parse(version: String): List<VersionRequirements> {\n+    SUPPORTS_PATTERN.matcher(version)\n       .also {\n         if (!it.matches()) {\n           throw InvalidPluginVersionRequirementException(version)\n         }\n       }\n       .let {\n-        VersionRequirements(\n+        val versions = mutableListOf(VersionRequirements(\n           service = it.group(SUPPORTS_PATTERN_SERVICE_GROUP),\n           operator = VersionRequirementOperator.from(it.group(SUPPORTS_PATTERN_OPERATOR_GROUP)),\n           version = it.group(SUPPORTS_PATTERN_VERSION_GROUP)\n-        )\n+        ))\n+        if (!it.group(SUPPORTS_PATTERN_RANGE_OPERATOR_GROUP).isNullOrBlank()) {\n+          versions.add(VersionRequirements(\n+            service = it.group(SUPPORTS_PATTERN_SERVICE_GROUP),\n+            operator = VersionRequirementOperator.from(it.group(SUPPORTS_PATTERN_RANGE_OPERATOR_GROUP)),\n+            version = it.group(SUPPORTS_PATTERN_RANGE_VERSION_GROUP)))\n+        }\n+        return versions\n       }\n   }\n \n   /**\n    * Parse a list of comma-delimited versions.\n    */\n-  fun parseAll(version: String): List<VersionRequirements> =\n-    version.split(',').map { parse(it.trim()) }\n+  fun parseAll(version: String): List<VersionRequirements> {\n+    val result = mutableListOf<VersionRequirements>()\n+    version.split(',').forEach {\n+      result.addAll(parse(it.trim()))\n+    }\n+    return result", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "165a556470cc85af15cc866157c8d349b1997fcb"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg4Mzg5OQ==", "bodyText": "I did this because having a range constraint I could return multiple VersionRequirements to be validated by the SpinnakerServiceVersionManager but using jsemver it isn't necessary to keep doing that", "url": "https://github.com/spinnaker/kork/pull/703#discussion_r451883899", "createdAt": "2020-07-08T23:42:04Z", "author": {"login": "edgarulg"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/VersionRequirementsParser.kt", "diffHunk": "@@ -27,41 +27,54 @@ import java.util.regex.Pattern\n  * - `operator` is a version constraint operator (`>`, `<`, `>=`, `<=`)\n  * - `version` is the service version that is being constrained\n  *\n- * TODO(jonsie): Add range constraint support (>= 1.0.0 & < 2.0.0)\n  */\n object VersionRequirementsParser {\n \n   private val SUPPORTS_PATTERN = Pattern.compile(\n-    \"^(?<service>[\\\\w\\\\-]+)(?<operator>[><=]{1,2})(?<version>[0-9]+\\\\.[0-9]+\\\\.[0-9]+)$\")\n+    \"^(?<service>[\\\\w\\\\-]+)(?<operator>[><=]{1,2})(?<version>[0-9]+\\\\.[0-9]+\\\\.[0-9]+)( & (?<rOperator>[><=]{1,2})(?<rVersion>[0-9]+\\\\.[0-9]+\\\\.[0-9]+))?$\")\n \n   private const val SUPPORTS_PATTERN_SERVICE_GROUP = \"service\"\n   private const val SUPPORTS_PATTERN_OPERATOR_GROUP = \"operator\"\n   private const val SUPPORTS_PATTERN_VERSION_GROUP = \"version\"\n+  private const val SUPPORTS_PATTERN_RANGE_OPERATOR_GROUP = \"rOperator\"\n+  private const val SUPPORTS_PATTERN_RANGE_VERSION_GROUP = \"rVersion\"\n \n   /**\n    * Parse a single version.\n    */\n-  fun parse(version: String): VersionRequirements {\n-    return SUPPORTS_PATTERN.matcher(version)\n+  fun parse(version: String): List<VersionRequirements> {\n+    SUPPORTS_PATTERN.matcher(version)\n       .also {\n         if (!it.matches()) {\n           throw InvalidPluginVersionRequirementException(version)\n         }\n       }\n       .let {\n-        VersionRequirements(\n+        val versions = mutableListOf(VersionRequirements(\n           service = it.group(SUPPORTS_PATTERN_SERVICE_GROUP),\n           operator = VersionRequirementOperator.from(it.group(SUPPORTS_PATTERN_OPERATOR_GROUP)),\n           version = it.group(SUPPORTS_PATTERN_VERSION_GROUP)\n-        )\n+        ))\n+        if (!it.group(SUPPORTS_PATTERN_RANGE_OPERATOR_GROUP).isNullOrBlank()) {\n+          versions.add(VersionRequirements(\n+            service = it.group(SUPPORTS_PATTERN_SERVICE_GROUP),\n+            operator = VersionRequirementOperator.from(it.group(SUPPORTS_PATTERN_RANGE_OPERATOR_GROUP)),\n+            version = it.group(SUPPORTS_PATTERN_RANGE_VERSION_GROUP)))\n+        }\n+        return versions\n       }\n   }\n \n   /**\n    * Parse a list of comma-delimited versions.\n    */\n-  fun parseAll(version: String): List<VersionRequirements> =\n-    version.split(',').map { parse(it.trim()) }\n+  fun parseAll(version: String): List<VersionRequirements> {\n+    val result = mutableListOf<VersionRequirements>()\n+    version.split(',').forEach {\n+      result.addAll(parse(it.trim()))\n+    }\n+    return result", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MDE5OA=="}, "originalCommit": {"oid": "165a556470cc85af15cc866157c8d349b1997fcb"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTgwMDY4OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/VersionRequirementsParser.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMToxODo0N1rOGvm00w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOTo0NTo0NFrOGwDtVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3MjM3MQ==", "bodyText": "nit: Let's break this up into multiple lines.", "url": "https://github.com/spinnaker/kork/pull/703#discussion_r452572371", "createdAt": "2020-07-10T01:18:47Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/VersionRequirementsParser.kt", "diffHunk": "@@ -47,12 +47,12 @@ object VersionRequirementsParser {\n         if (!it.matches()) {\n           throw InvalidPluginVersionRequirementException(version)\n         }\n+        try { CONSTRAINT_VALIDATOR.satisfies(it.group(SUPPORTS_PATTERN_CONSTRAINT_GROUP)) } catch (e: ParseException) { throw InvalidPluginVersionRequirementException(version) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38545d75b4576123a9e887c581947a14d5012227"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA0NTU4OA==", "bodyText": "its done!", "url": "https://github.com/spinnaker/kork/pull/703#discussion_r453045588", "createdAt": "2020-07-10T19:45:44Z", "author": {"login": "edgarulg"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/VersionRequirementsParser.kt", "diffHunk": "@@ -47,12 +47,12 @@ object VersionRequirementsParser {\n         if (!it.matches()) {\n           throw InvalidPluginVersionRequirementException(version)\n         }\n+        try { CONSTRAINT_VALIDATOR.satisfies(it.group(SUPPORTS_PATTERN_CONSTRAINT_GROUP)) } catch (e: ParseException) { throw InvalidPluginVersionRequirementException(version) }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU3MjM3MQ=="}, "originalCommit": {"oid": "38545d75b4576123a9e887c581947a14d5012227"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3442, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}