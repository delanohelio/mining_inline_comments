{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2ODI1OTMy", "number": 767, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTo0NTo1M1rOEfDe9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDozODo1NFrOEffIzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTk4Mzg5OnYy", "diffSide": "RIGHT", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/DefaultServiceEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTo0NTo1M1rOHLFtQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo1NjoyOVrOHMKSiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4OTg4OQ==", "bodyText": "Let's set the defaults isSecure and config on the class fields instead of in the constructors.", "url": "https://github.com/spinnaker/kork/pull/767#discussion_r481389889", "createdAt": "2020-09-01T19:45:53Z", "author": {"login": "jonsie"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/DefaultServiceEndpoint.java", "diffHunk": "@@ -31,12 +31,24 @@\n   /** Base API url */\n   @Nonnull private final String baseUrl;\n \n+  /** Indicates whether the certificate/host verification is desired or not */\n+  @Nonnull private final Boolean isSecure;\n+\n   /** Misc. config necessary for the service client. */\n   @Nonnull private final Map<String, Object> config;\n \n   public DefaultServiceEndpoint(@Nonnull String name, @Nonnull String baseUrl) {\n     this.name = Objects.requireNonNull(name);\n     this.baseUrl = Objects.requireNonNull(baseUrl);\n+    this.isSecure = true;\n+    this.config = new HashMap<>();\n+  }\n+\n+  public DefaultServiceEndpoint(\n+      @Nonnull String name, @Nonnull String baseUrl, @Nonnull Boolean isSecure) {\n+    this.name = Objects.requireNonNull(name);\n+    this.baseUrl = Objects.requireNonNull(baseUrl);\n+    this.isSecure = Objects.requireNonNull(isSecure);\n     this.config = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f22140f2d5da60810ba5297e97c4e4d29acb2f19"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxMzU0Nw==", "bodyText": "we won't able to set them via constructor if we set the values on the class fields and we want those to be immutable so.", "url": "https://github.com/spinnaker/kork/pull/767#discussion_r482513547", "createdAt": "2020-09-02T21:56:29Z", "author": {"login": "srekapalli"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/DefaultServiceEndpoint.java", "diffHunk": "@@ -31,12 +31,24 @@\n   /** Base API url */\n   @Nonnull private final String baseUrl;\n \n+  /** Indicates whether the certificate/host verification is desired or not */\n+  @Nonnull private final Boolean isSecure;\n+\n   /** Misc. config necessary for the service client. */\n   @Nonnull private final Map<String, Object> config;\n \n   public DefaultServiceEndpoint(@Nonnull String name, @Nonnull String baseUrl) {\n     this.name = Objects.requireNonNull(name);\n     this.baseUrl = Objects.requireNonNull(baseUrl);\n+    this.isSecure = true;\n+    this.config = new HashMap<>();\n+  }\n+\n+  public DefaultServiceEndpoint(\n+      @Nonnull String name, @Nonnull String baseUrl, @Nonnull Boolean isSecure) {\n+    this.name = Objects.requireNonNull(name);\n+    this.baseUrl = Objects.requireNonNull(baseUrl);\n+    this.isSecure = Objects.requireNonNull(isSecure);\n     this.config = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4OTg4OQ=="}, "originalCommit": {"oid": "f22140f2d5da60810ba5297e97c4e4d29acb2f19"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTk5Njk4OnYy", "diffSide": "RIGHT", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/OkHttpClientBuilderProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTo0OTo1NVrOHLF1fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDo0MDoyMlrOHLybkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MTk5OQ==", "bodyText": "Seems like the operators should be lined up?", "url": "https://github.com/spinnaker/kork/pull/767#discussion_r481391999", "createdAt": "2020-09-01T19:49:55Z", "author": {"login": "jonsie"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -33,8 +33,9 @@\n    * @return true if supports the url given\n    */\n   default Boolean supports(ServiceEndpoint service) {\n-    return service.getBaseUrl().startsWith(\"http://\")\n-        || service.getBaseUrl().startsWith(\"https://\");\n+    return ((service.getBaseUrl().startsWith(\"http://\")\n+            || service.getBaseUrl().startsWith(\"https://\"))\n+        && service.isSecure());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f22140f2d5da60810ba5297e97c4e4d29acb2f19"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyMjY0MA==", "bodyText": "Spotless handles formatting.", "url": "https://github.com/spinnaker/kork/pull/767#discussion_r482122640", "createdAt": "2020-09-02T14:40:22Z", "author": {"login": "robzienert"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/OkHttpClientBuilderProvider.java", "diffHunk": "@@ -33,8 +33,9 @@\n    * @return true if supports the url given\n    */\n   default Boolean supports(ServiceEndpoint service) {\n-    return service.getBaseUrl().startsWith(\"http://\")\n-        || service.getBaseUrl().startsWith(\"https://\");\n+    return ((service.getBaseUrl().startsWith(\"http://\")\n+            || service.getBaseUrl().startsWith(\"https://\"))\n+        && service.isSecure());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM5MTk5OQ=="}, "originalCommit": {"oid": "f22140f2d5da60810ba5297e97c4e4d29acb2f19"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDUxMzQ3OnYy", "diffSide": "RIGHT", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/DefaultServiceEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDozODozNVrOHLyWaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDozODozNVrOHLyWaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyMTMyMQ==", "bodyText": "Just make isSecure an un-boxed primitive and then you can avoid @Nonnull and this Objects.requireNonNull check.", "url": "https://github.com/spinnaker/kork/pull/767#discussion_r482121321", "createdAt": "2020-09-02T14:38:35Z", "author": {"login": "robzienert"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/DefaultServiceEndpoint.java", "diffHunk": "@@ -31,12 +31,24 @@\n   /** Base API url */\n   @Nonnull private final String baseUrl;\n \n+  /** Indicates whether the certificate/host verification is desired or not */\n+  @Nonnull private final Boolean isSecure;\n+\n   /** Misc. config necessary for the service client. */\n   @Nonnull private final Map<String, Object> config;\n \n   public DefaultServiceEndpoint(@Nonnull String name, @Nonnull String baseUrl) {\n     this.name = Objects.requireNonNull(name);\n     this.baseUrl = Objects.requireNonNull(baseUrl);\n+    this.isSecure = true;\n+    this.config = new HashMap<>();\n+  }\n+\n+  public DefaultServiceEndpoint(\n+      @Nonnull String name, @Nonnull String baseUrl, @Nonnull Boolean isSecure) {\n+    this.name = Objects.requireNonNull(name);\n+    this.baseUrl = Objects.requireNonNull(baseUrl);\n+    this.isSecure = Objects.requireNonNull(isSecure);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f22140f2d5da60810ba5297e97c4e4d29acb2f19"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDUxNDcwOnYy", "diffSide": "RIGHT", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/DefaultServiceEndpoint.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDozODo1NFrOHLyXQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMTowMDozNFrOHMRfVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyMTUzOQ==", "bodyText": "Don't believe you need to have Objects.requireNonNull if you're defining the fields as @Nonnull.", "url": "https://github.com/spinnaker/kork/pull/767#discussion_r482121539", "createdAt": "2020-09-02T14:38:54Z", "author": {"login": "robzienert"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/DefaultServiceEndpoint.java", "diffHunk": "@@ -31,12 +31,24 @@\n   /** Base API url */\n   @Nonnull private final String baseUrl;\n \n+  /** Indicates whether the certificate/host verification is desired or not */\n+  @Nonnull private final Boolean isSecure;\n+\n   /** Misc. config necessary for the service client. */\n   @Nonnull private final Map<String, Object> config;\n \n   public DefaultServiceEndpoint(@Nonnull String name, @Nonnull String baseUrl) {\n     this.name = Objects.requireNonNull(name);\n     this.baseUrl = Objects.requireNonNull(baseUrl);\n+    this.isSecure = true;\n+    this.config = new HashMap<>();\n+  }\n+\n+  public DefaultServiceEndpoint(\n+      @Nonnull String name, @Nonnull String baseUrl, @Nonnull Boolean isSecure) {\n+    this.name = Objects.requireNonNull(name);\n+    this.baseUrl = Objects.requireNonNull(baseUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f22140f2d5da60810ba5297e97c4e4d29acb2f19"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxNTk5MA==", "bodyText": "Are we guarded during Runtime ..?  @Nonnull will do the IDE level checks only I thought ..", "url": "https://github.com/spinnaker/kork/pull/767#discussion_r482515990", "createdAt": "2020-09-02T21:59:30Z", "author": {"login": "srekapalli"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/DefaultServiceEndpoint.java", "diffHunk": "@@ -31,12 +31,24 @@\n   /** Base API url */\n   @Nonnull private final String baseUrl;\n \n+  /** Indicates whether the certificate/host verification is desired or not */\n+  @Nonnull private final Boolean isSecure;\n+\n   /** Misc. config necessary for the service client. */\n   @Nonnull private final Map<String, Object> config;\n \n   public DefaultServiceEndpoint(@Nonnull String name, @Nonnull String baseUrl) {\n     this.name = Objects.requireNonNull(name);\n     this.baseUrl = Objects.requireNonNull(baseUrl);\n+    this.isSecure = true;\n+    this.config = new HashMap<>();\n+  }\n+\n+  public DefaultServiceEndpoint(\n+      @Nonnull String name, @Nonnull String baseUrl, @Nonnull Boolean isSecure) {\n+    this.name = Objects.requireNonNull(name);\n+    this.baseUrl = Objects.requireNonNull(baseUrl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyMTUzOQ=="}, "originalCommit": {"oid": "f22140f2d5da60810ba5297e97c4e4d29acb2f19"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzMTUxMQ==", "bodyText": "Ah, true. nvm then!", "url": "https://github.com/spinnaker/kork/pull/767#discussion_r482631511", "createdAt": "2020-09-03T01:00:34Z", "author": {"login": "robzienert"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/DefaultServiceEndpoint.java", "diffHunk": "@@ -31,12 +31,24 @@\n   /** Base API url */\n   @Nonnull private final String baseUrl;\n \n+  /** Indicates whether the certificate/host verification is desired or not */\n+  @Nonnull private final Boolean isSecure;\n+\n   /** Misc. config necessary for the service client. */\n   @Nonnull private final Map<String, Object> config;\n \n   public DefaultServiceEndpoint(@Nonnull String name, @Nonnull String baseUrl) {\n     this.name = Objects.requireNonNull(name);\n     this.baseUrl = Objects.requireNonNull(baseUrl);\n+    this.isSecure = true;\n+    this.config = new HashMap<>();\n+  }\n+\n+  public DefaultServiceEndpoint(\n+      @Nonnull String name, @Nonnull String baseUrl, @Nonnull Boolean isSecure) {\n+    this.name = Objects.requireNonNull(name);\n+    this.baseUrl = Objects.requireNonNull(baseUrl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyMTUzOQ=="}, "originalCommit": {"oid": "f22140f2d5da60810ba5297e97c4e4d29acb2f19"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3492, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}