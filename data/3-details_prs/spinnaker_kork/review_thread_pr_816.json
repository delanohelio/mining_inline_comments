{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMzEwNjE4", "number": 816, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMjoxNzoyM1rOE0orIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjo1OToyMVrOE0rYdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjI3ODA4OnYy", "diffSide": "RIGHT", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/DefaultOkHttpClientBuilderProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMjoxNzoyM1rOHsePMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjo1NTo1NlrOHsh9PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5NDgwMQ==", "bodyText": "Hm, I feel like I'm missing something here.  So is it assumed that a PlainServiceEndpoint will have a keystore and a truststore?", "url": "https://github.com/spinnaker/kork/pull/816#discussion_r516394801", "createdAt": "2020-11-03T02:17:23Z", "author": {"login": "jonsie"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/DefaultOkHttpClientBuilderProvider.java", "diffHunk": "@@ -71,10 +72,11 @@ public DefaultOkHttpClientBuilderProvider(\n   }\n \n   protected OkHttpClient.Builder setSSLSocketFactory(\n-      OkHttpClient.Builder builder, ServiceEndpoint service) {\n+      OkHttpClient.Builder builder, ServiceEndpoint serviceEndpoint) {\n \n-    if (okHttpClientConfigurationProperties.getKeyStore() == null\n-        && okHttpClientConfigurationProperties.getTrustStore() == null) {\n+    if ((okHttpClientConfigurationProperties.getKeyStore() == null\n+            && okHttpClientConfigurationProperties.getTrustStore() == null)\n+        || serviceEndpoint instanceof PlainServiceEndpoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649c5af96930b848091b50bc692ee09e82943d9c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1NTc0MQ==", "bodyText": "We will assign system defaults to both and we will not use the keystore and truststore provided in the app configuration.", "url": "https://github.com/spinnaker/kork/pull/816#discussion_r516455741", "createdAt": "2020-11-03T06:55:56Z", "author": {"login": "srekapalli"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/okhttp3/DefaultOkHttpClientBuilderProvider.java", "diffHunk": "@@ -71,10 +72,11 @@ public DefaultOkHttpClientBuilderProvider(\n   }\n \n   protected OkHttpClient.Builder setSSLSocketFactory(\n-      OkHttpClient.Builder builder, ServiceEndpoint service) {\n+      OkHttpClient.Builder builder, ServiceEndpoint serviceEndpoint) {\n \n-    if (okHttpClientConfigurationProperties.getKeyStore() == null\n-        && okHttpClientConfigurationProperties.getTrustStore() == null) {\n+    if ((okHttpClientConfigurationProperties.getKeyStore() == null\n+            && okHttpClientConfigurationProperties.getTrustStore() == null)\n+        || serviceEndpoint instanceof PlainServiceEndpoint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5NDgwMQ=="}, "originalCommit": {"oid": "649c5af96930b848091b50bc692ee09e82943d9c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjcyMTgyOnYy", "diffSide": "RIGHT", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/PlainServiceEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNjo1OToyMVrOHsiBJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMzoyOToxMlrOHuan6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1Njc0Mg==", "bodyText": "Not sure about Plain but otherwise this seems reasonable to me.\nMaybe Simple or Basic?", "url": "https://github.com/spinnaker/kork/pull/816#discussion_r516456742", "createdAt": "2020-11-03T06:59:21Z", "author": {"login": "ajordens"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/PlainServiceEndpoint.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Represents a service endpoint URL and name.\n+ *\n+ * <p>If a client is constructed using this type, system defaults will be used for socket factory\n+ * and trust manager.\n+ */\n+public class PlainServiceEndpoint extends DefaultServiceEndpoint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649c5af96930b848091b50bc692ee09e82943d9c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQzMjc0NQ==", "bodyText": "I ended up modifying to be another attribute on the service endpoint instead of a separate data type.", "url": "https://github.com/spinnaker/kork/pull/816#discussion_r518432745", "createdAt": "2020-11-05T23:29:12Z", "author": {"login": "srekapalli"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/config/PlainServiceEndpoint.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Represents a service endpoint URL and name.\n+ *\n+ * <p>If a client is constructed using this type, system defaults will be used for socket factory\n+ * and trust manager.\n+ */\n+public class PlainServiceEndpoint extends DefaultServiceEndpoint {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ1Njc0Mg=="}, "originalCommit": {"oid": "649c5af96930b848091b50bc692ee09e82943d9c"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3428, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}