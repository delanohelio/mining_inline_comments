{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzczNDA2", "number": 462, "title": "feat(plugins): Add ability to download plugins with an external process", "bodyText": "\u26a0\ufe0f Do not merge. Just putting this out there, I need to do another pass on it and clean up the code. \u26a0\ufe0f\nPrior to this PR, plugins can only be downloaded from unauthenticated HTTP\nendpoints. This functionality adds the capability of specifying new\nfile downloader strategies, with an initial alternative strategy for\nrunning an external process to download a plugin artifact.\nWe will be writing a new default FileDownloader that can be configured for\ncustom certificates, as well as basic auth, and probably other integrations\nfor artifact repositories that need something extra.", "createdAt": "2020-01-13T23:32:59Z", "url": "https://github.com/spinnaker/kork/pull/462", "merged": true, "mergeCommit": {"oid": "36e39e4e7e73c6b79fd900cf164f63935afbd86b"}, "closed": true, "closedAt": "2020-01-14T17:53:45Z", "author": {"login": "robzienert"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6F3dHAFqTM0MjIyOTEzMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6UqqNAH2gAyMzYyMzczNDA2OjM3YzI5MzEzYjdiMTIxMjMzOWJmODMwMTNhYjhjYWU0NmM2NDU5ZDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMjI5MTMz", "url": "https://github.com/spinnaker/kork/pull/462#pullrequestreview-342229133", "createdAt": "2020-01-14T00:32:37Z", "commit": {"oid": "6e14b7d865ba7a06aa7ab6fa60a321fb5ab97fb7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozMjozN1rOFdJBWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozMjozN1rOFdJBWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMDgyNQ==", "bodyText": "I think this factory will need to support more than a ConfigurableUpdateRepository - for example, there will be a concrete Front50UpdateRepository implementation that we will want to instantiate.", "url": "https://github.com/spinnaker/kork/pull/462#discussion_r366100825", "createdAt": "2020-01-14T00:32:37Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/UpdateRepositoryFactory.kt", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.update\n+\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import com.netflix.spinnaker.config.PluginsConfigurationProperties.PluginRepositoryProperties.FileDownloaderProperties\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import com.netflix.spinnaker.kork.plugins.config.Configurable\n+import org.pf4j.update.FileDownloader\n+import org.pf4j.update.SimpleFileDownloader\n+import org.pf4j.update.UpdateRepository\n+import org.pf4j.update.verifier.CompoundVerifier\n+import java.net.URL\n+\n+/**\n+ * Factory for [UpdateRepository].\n+ */\n+class UpdateRepositoryFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e14b7d865ba7a06aa7ab6fa60a321fb5ab97fb7"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMjMwNTY4", "url": "https://github.com/spinnaker/kork/pull/462#pullrequestreview-342230568", "createdAt": "2020-01-14T00:37:30Z", "commit": {"oid": "6e14b7d865ba7a06aa7ab6fa60a321fb5ab97fb7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozNzozMVrOFdJF6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozNzozMVrOFdJF6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMTk5Mw==", "bodyText": "Will this wait for 1 minute regardless of the proc status?", "url": "https://github.com/spinnaker/kork/pull/462#discussion_r366101993", "createdAt": "2020-01-14T00:37:31Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/downloader/internal/DefaultProcessRunner.kt", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.update.downloader.internal\n+\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import com.netflix.spinnaker.kork.plugins.update.downloader.ProcessFileDownloader\n+import org.slf4j.Logger\n+import org.slf4j.LoggerFactory\n+import java.io.BufferedReader\n+import java.io.InputStreamReader\n+import java.util.concurrent.TimeUnit\n+\n+/**\n+ * Default [ProcessFileDownloader.ProcessRunner] implementation.\n+ */\n+internal class DefaultProcessRunner : ProcessFileDownloader.ProcessRunner {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun completeOrTimeout(processBuilder: ProcessBuilder): String {\n+    val process = processBuilder.start()\n+    val finished = process.waitFor(1, TimeUnit.MINUTES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e14b7d865ba7a06aa7ab6fa60a321fb5ab97fb7"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66dec0256d6647db392627f4da50f7343ebcf092", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/66dec0256d6647db392627f4da50f7343ebcf092", "committedDate": "2020-01-14T17:39:04Z", "message": "feat(plugins): Add ability to download plugins with an external process\n\nPrior to this PR, plugins can only be downloaded from unauthenticated HTTP\nendpoints. This functionality adds the capability of specifying new\nfile downloader strategies, with an initial alternative strategy for\nrunning an external process to download a plugin artifact.\n\nWe will be writing a new default FileDownloader that can be configured for\ncustom certificates, as well as basic auth, and probably other integrations\nfor artifact repositories that need something extra."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e14b7d865ba7a06aa7ab6fa60a321fb5ab97fb7", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/6e14b7d865ba7a06aa7ab6fa60a321fb5ab97fb7", "committedDate": "2020-01-13T23:32:00Z", "message": "feat(plugins): Add ability to download plugins with an external process\n\nPrior to this PR, plugins can only be downloaded from unauthenticated HTTP\nendpoints. This functionality adds the capability of specifying new\nfile downloader strategies, with an initial alternative strategy for\nrunning an external process to download a plugin artifact.\n\nWe will be writing a new default FileDownloader that can be configured for\ncustom certificates, as well as basic auth, and probably other integrations\nfor artifact repositories that need something extra."}, "afterCommit": {"oid": "66dec0256d6647db392627f4da50f7343ebcf092", "author": {"user": {"login": "robzienert", "name": "Rob Zienert"}}, "url": "https://github.com/spinnaker/kork/commit/66dec0256d6647db392627f4da50f7343ebcf092", "committedDate": "2020-01-14T17:39:04Z", "message": "feat(plugins): Add ability to download plugins with an external process\n\nPrior to this PR, plugins can only be downloaded from unauthenticated HTTP\nendpoints. This functionality adds the capability of specifying new\nfile downloader strategies, with an initial alternative strategy for\nrunning an external process to download a plugin artifact.\n\nWe will be writing a new default FileDownloader that can be configured for\ncustom certificates, as well as basic auth, and probably other integrations\nfor artifact repositories that need something extra."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37c29313b7b1212339bf83013ab8cae46c6459d8", "author": {"user": {"login": "mergify[bot]", "name": null}}, "url": "https://github.com/spinnaker/kork/commit/37c29313b7b1212339bf83013ab8cae46c6459d8", "committedDate": "2020-01-14T17:47:14Z", "message": "Merge branch 'master' into plugin-bin-github-releases"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1612, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}