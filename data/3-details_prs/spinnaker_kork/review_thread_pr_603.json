{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyODM4Mjc0", "number": 603, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDoxNDozM1rODxbo4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDoxNjozMVrODxbqVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTU5NjUwOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/sdk/serde/SerdeServiceSdkFactory.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDoxNDozM1rOGE5nUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDoxNDozM1rOGE5nUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5MTQ0Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/spinnaker/kork/pull/603#discussion_r407791442", "createdAt": "2020-04-14T00:14:33Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/sdk/serde/SerdeServiceSdkFactory.kt", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.sdk.serde\n+\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import com.netflix.spinnaker.kork.exceptions.SystemException\n+import com.netflix.spinnaker.kork.plugins.sdk.SdkFactory\n+import org.pf4j.PluginWrapper\n+import org.slf4j.LoggerFactory\n+import org.springframework.context.ApplicationContext\n+\n+class SerdeServiceSdkFactory(\n+  private val applicationContext: ApplicationContext\n+) : SdkFactory {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  private val serdeService by lazy {\n+    applicationContext.getBeansOfType(ObjectMapper::class.java)\n+      .values\n+      .let {\n+        if (it.isEmpty()) {\n+          // This should never happen. Obviously it probably will at some point, but it's better to explode than\n+          // provide a \"reasonable default\" since that seems to change depending on who you ask. Better to ensure\n+          // a service has wired up an ObjectMapper to matches what it has defined as reasonable defaults.\n+          throw SystemException(\"Failed to locate ObjectMapper in application context\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7e221dd54a5525ac984beaea1aad20702008b53"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTYwMDIyOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/sdk/serde/SerdeServiceSdkFactory.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDoxNjozMVrOGE5pnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDoxNjozMVrOGE5pnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5MjAyOA==", "bodyText": "If there's more than one ObjectMapper bean in the context, I'm assuming they'll have unique bean names.  Maybe we should log out the bean name here?", "url": "https://github.com/spinnaker/kork/pull/603#discussion_r407792028", "createdAt": "2020-04-14T00:16:31Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/sdk/serde/SerdeServiceSdkFactory.kt", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.sdk.serde\n+\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import com.netflix.spinnaker.kork.exceptions.SystemException\n+import com.netflix.spinnaker.kork.plugins.sdk.SdkFactory\n+import org.pf4j.PluginWrapper\n+import org.slf4j.LoggerFactory\n+import org.springframework.context.ApplicationContext\n+\n+class SerdeServiceSdkFactory(\n+  private val applicationContext: ApplicationContext\n+) : SdkFactory {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  private val serdeService by lazy {\n+    applicationContext.getBeansOfType(ObjectMapper::class.java)\n+      .values\n+      .let {\n+        if (it.isEmpty()) {\n+          // This should never happen. Obviously it probably will at some point, but it's better to explode than\n+          // provide a \"reasonable default\" since that seems to change depending on who you ask. Better to ensure\n+          // a service has wired up an ObjectMapper to matches what it has defined as reasonable defaults.\n+          throw SystemException(\"Failed to locate ObjectMapper in application context\")\n+        } else {\n+          if (it.size > 1) {\n+            // This is an indication that the service has multiple object mappers available, which will introduce\n+            // uncertainty in exactly how objects will be serialization/deserialized. We should be converging on one\n+            // ObjectMapper instance in the ApplicationContext in services, so this is really up to service maintainers\n+            // to resolve if it occurs, but it isn't the end of the world since most of our ObjectMappers are\n+            // configured roughly the same.\n+            log.warn(\"Found more than one ObjectMapper, selecting first\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7e221dd54a5525ac984beaea1aad20702008b53"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3517, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}