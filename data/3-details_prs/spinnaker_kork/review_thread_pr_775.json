{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5OTY5NTY3", "number": 775, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozNzo1NVrOEhXmuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOToxMTozMVrOEjRxbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI1MjExOnYy", "diffSide": "RIGHT", "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/CompositeCredentialsRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozNzo1NVrOHOpa7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozNzo1NVrOHOpa7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMDc0OA==", "bodyText": "Could be Strings.isEmptyOrNull()?", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r485120748", "createdAt": "2020-09-08T18:37:55Z", "author": {"login": "robzienert"}, "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/CompositeCredentialsRepository.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.credentials;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provides access to credentials (or extension of Credentials) across credentials types.\n+ *\n+ * @param <T>\n+ */\n+public class CompositeCredentialsRepository<T extends Credentials> {\n+  private Map<String, CredentialsRepository<? extends T>> allRepositories;\n+\n+  public CompositeCredentialsRepository(List<CredentialsRepository<? extends T>> repositories) {\n+    allRepositories = new HashMap<>();\n+    repositories.forEach(this::registerRepository);\n+  }\n+\n+  public void registerRepository(CredentialsRepository<? extends T> repository) {\n+    allRepositories.put(repository.getType(), repository);\n+  }\n+\n+  public T getCredentials(String accountName, String type) {\n+    if (accountName == null || accountName.equals(\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07bd0e32ca32915324961a6cd0c8e941f6252948"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI1NjMzOnYy", "diffSide": "RIGHT", "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/CompositeCredentialsRepository.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozOToxNFrOHOpdfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOToxOTo0OFrOHOqxYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMTQwNw==", "bodyText": "Please make use of SpinnakerException and its child exception classes, making subclasses where it makes sense.", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r485121407", "createdAt": "2020-09-08T18:39:14Z", "author": {"login": "robzienert"}, "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/CompositeCredentialsRepository.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.credentials;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provides access to credentials (or extension of Credentials) across credentials types.\n+ *\n+ * @param <T>\n+ */\n+public class CompositeCredentialsRepository<T extends Credentials> {\n+  private Map<String, CredentialsRepository<? extends T>> allRepositories;\n+\n+  public CompositeCredentialsRepository(List<CredentialsRepository<? extends T>> repositories) {\n+    allRepositories = new HashMap<>();\n+    repositories.forEach(this::registerRepository);\n+  }\n+\n+  public void registerRepository(CredentialsRepository<? extends T> repository) {\n+    allRepositories.put(repository.getType(), repository);\n+  }\n+\n+  public T getCredentials(String accountName, String type) {\n+    if (accountName == null || accountName.equals(\"\")) {\n+      throw new IllegalArgumentException(\"An account name must be supplied\");\n+    }\n+\n+    CredentialsRepository<? extends T> repository = allRepositories.get(type);\n+    if (repository == null) {\n+      throw new IllegalArgumentException(\"No credentials of type '\" + type + \"' found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07bd0e32ca32915324961a6cd0c8e941f6252948"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0Mjg4MA==", "bodyText": "I had copied the IllegalArgumentException from https://github.com/spinnaker/clouddriver/blob/master/clouddriver-artifacts/src/main/java/com/netflix/spinnaker/clouddriver/artifacts/ArtifactCredentialsRepository.java#L49 and tried to keep the same unchecked exception for backward compatibility. Adding a new exception for that.", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r485142880", "createdAt": "2020-09-08T19:19:48Z", "author": {"login": "ncknt"}, "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/CompositeCredentialsRepository.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.credentials;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provides access to credentials (or extension of Credentials) across credentials types.\n+ *\n+ * @param <T>\n+ */\n+public class CompositeCredentialsRepository<T extends Credentials> {\n+  private Map<String, CredentialsRepository<? extends T>> allRepositories;\n+\n+  public CompositeCredentialsRepository(List<CredentialsRepository<? extends T>> repositories) {\n+    allRepositories = new HashMap<>();\n+    repositories.forEach(this::registerRepository);\n+  }\n+\n+  public void registerRepository(CredentialsRepository<? extends T> repository) {\n+    allRepositories.put(repository.getType(), repository);\n+  }\n+\n+  public T getCredentials(String accountName, String type) {\n+    if (accountName == null || accountName.equals(\"\")) {\n+      throw new IllegalArgumentException(\"An account name must be supplied\");\n+    }\n+\n+    CredentialsRepository<? extends T> repository = allRepositories.get(type);\n+    if (repository == null) {\n+      throw new IllegalArgumentException(\"No credentials of type '\" + type + \"' found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMTQwNw=="}, "originalCommit": {"oid": "07bd0e32ca32915324961a6cd0c8e941f6252948"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI1ODkyOnYy", "diffSide": "RIGHT", "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/Credentials.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozOTo1N1rOHOpfAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozOTo1N1rOHOpfAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMTc5Mw==", "bodyText": "Need docs. What's the difference between these two, what are they used for?", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r485121793", "createdAt": "2020-09-08T18:39:57Z", "author": {"login": "robzienert"}, "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/Credentials.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.credentials;\n+\n+/** Credentials to an external system. Each credentials has a unique name for its type. */\n+public interface Credentials {\n+\n+  String getName();\n+\n+  String getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07bd0e32ca32915324961a6cd0c8e941f6252948"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI2MDA4OnYy", "diffSide": "RIGHT", "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/CredentialsLifecycleHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0MDoxOVrOHOpfnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0MDozM1rOHOpgKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMTk0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Credentials have been added. This is called before credentials are available in @{@link\n          \n          \n            \n               * Credentials have been added. This is called before credentials are available in {@link", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r485121949", "createdAt": "2020-09-08T18:40:19Z", "author": {"login": "robzienert"}, "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/CredentialsLifecycleHandler.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.credentials;\n+\n+/**\n+ * After {@link Credentials} have been parsed, they can be activated, refreshed, or retired - e.g.\n+ * adding agents. This happens before credentials are added or updated in the {@link\n+ * CredentialsRepository} and after credentials are removed from the {@link CredentialsRepository}.\n+ *\n+ * @param <T>\n+ */\n+public interface CredentialsLifecycleHandler<T extends Credentials> {\n+\n+  /**\n+   * Credentials have been added. This is called before credentials are available in @{@link", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07bd0e32ca32915324961a6cd0c8e941f6252948"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMjA5MA==", "bodyText": "This change should be applied to the other areas this happens, too.", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r485122090", "createdAt": "2020-09-08T18:40:33Z", "author": {"login": "robzienert"}, "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/CredentialsLifecycleHandler.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.credentials;\n+\n+/**\n+ * After {@link Credentials} have been parsed, they can be activated, refreshed, or retired - e.g.\n+ * adding agents. This happens before credentials are added or updated in the {@link\n+ * CredentialsRepository} and after credentials are removed from the {@link CredentialsRepository}.\n+ *\n+ * @param <T>\n+ */\n+public interface CredentialsLifecycleHandler<T extends Credentials> {\n+\n+  /**\n+   * Credentials have been added. This is called before credentials are available in @{@link", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMTk0OQ=="}, "originalCommit": {"oid": "07bd0e32ca32915324961a6cd0c8e941f6252948"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI2MzE0OnYy", "diffSide": "RIGHT", "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/CredentialsRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0MToxMVrOHOphbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0MToxMVrOHOphbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMjQxNQ==", "bodyText": "Docs on interfaces and their methods, as well as any classes that do not implement an interface and cannot inherit the docs from a parent.", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r485122415", "createdAt": "2020-09-08T18:41:11Z", "author": {"login": "robzienert"}, "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/CredentialsRepository.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.credentials;\n+\n+import java.util.Set;\n+\n+/**\n+ * Repository of credentials of a given type\n+ *\n+ * @param <T>\n+ */\n+public interface CredentialsRepository<T extends Credentials> {\n+  T getOne(String name);\n+\n+  boolean has(String name);\n+\n+  Set<T> getAll();\n+\n+  T save(T credentials);\n+\n+  void delete(String name);\n+\n+  String getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07bd0e32ca32915324961a6cd0c8e941f6252948"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI2Nzg0OnYy", "diffSide": "RIGHT", "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/MapBackedCredentialsRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0MjozMlrOHOpkOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTo1MDoyM1rOHOrvLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMzEzMA==", "bodyText": "Are we at risk of concurrent modification issues by having this just be a HashMap?", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r485123130", "createdAt": "2020-09-08T18:42:32Z", "author": {"login": "robzienert"}, "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/MapBackedCredentialsRepository.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.credentials;\n+\n+import java.util.*;\n+import javax.annotation.Nonnull;\n+import lombok.Getter;\n+\n+public class MapBackedCredentialsRepository<T extends Credentials>\n+    implements CredentialsRepository<T> {\n+  protected Map<String, T> credentials = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07bd0e32ca32915324961a6cd0c8e941f6252948"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE1ODcwMA==", "bodyText": "Yes, thanks!", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r485158700", "createdAt": "2020-09-08T19:50:23Z", "author": {"login": "ncknt"}, "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/MapBackedCredentialsRepository.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.credentials;\n+\n+import java.util.*;\n+import javax.annotation.Nonnull;\n+import lombok.Getter;\n+\n+public class MapBackedCredentialsRepository<T extends Credentials>\n+    implements CredentialsRepository<T> {\n+  protected Map<String, T> credentials = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMzEzMA=="}, "originalCommit": {"oid": "07bd0e32ca32915324961a6cd0c8e941f6252948"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI3NDEyOnYy", "diffSide": "RIGHT", "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/definition/AbstractCredentialsLoader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NDoxOVrOHOpn8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOToxMDo0OVrOHRi9Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNDA4Mw==", "bodyText": "Docs would be useful here. Since the return value is void, I'm having to assume each implementor would be responsible for adding the final loaded credentials into the CredentialsRepository themselves?", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r485124083", "createdAt": "2020-09-08T18:44:19Z", "author": {"login": "robzienert"}, "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/definition/AbstractCredentialsLoader.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.credentials.definition;\n+\n+import com.netflix.spinnaker.credentials.Credentials;\n+import com.netflix.spinnaker.credentials.CredentialsRepository;\n+import com.netflix.spinnaker.kork.annotations.NonnullByDefault;\n+import javax.annotation.PostConstruct;\n+import lombok.Getter;\n+\n+@NonnullByDefault\n+public abstract class AbstractCredentialsLoader<T extends Credentials> {\n+  @Getter protected final CredentialsRepository<T> credentialsRepository;\n+\n+  public AbstractCredentialsLoader(CredentialsRepository<T> credentialsRepository) {\n+    this.credentialsRepository = credentialsRepository;\n+  }\n+\n+  @PostConstruct\n+  public abstract void load();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07bd0e32ca32915324961a6cd0c8e941f6252948"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0NTg4Ng==", "bodyText": "I think it may be an improvement, actually, to do public Credentials load() and just handle the wiring in Poller, this would remove some boilerplate from implementations of CredentialsLoader (and wouldn't require an abstract class, which is a big win), and would improve the testability of CredentialsLoader implementations: Just assert on the response instead of mocking / verifying interactions with the CredentialsRepository.", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r485145886", "createdAt": "2020-09-08T19:25:25Z", "author": {"login": "robzienert"}, "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/definition/AbstractCredentialsLoader.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.credentials.definition;\n+\n+import com.netflix.spinnaker.credentials.Credentials;\n+import com.netflix.spinnaker.credentials.CredentialsRepository;\n+import com.netflix.spinnaker.kork.annotations.NonnullByDefault;\n+import javax.annotation.PostConstruct;\n+import lombok.Getter;\n+\n+@NonnullByDefault\n+public abstract class AbstractCredentialsLoader<T extends Credentials> {\n+  @Getter protected final CredentialsRepository<T> credentialsRepository;\n+\n+  public AbstractCredentialsLoader(CredentialsRepository<T> credentialsRepository) {\n+    this.credentialsRepository = credentialsRepository;\n+  }\n+\n+  @PostConstruct\n+  public abstract void load();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNDA4Mw=="}, "originalCommit": {"oid": "07bd0e32ca32915324961a6cd0c8e941f6252948"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE5Mjc0NA==", "bodyText": "load() loads all credentials of a given type (e.g. all AWS accounts) in the repository. The default (BasicCredentialsLoader) implementation takes an account source (by default a getter on a Spring config object) -> passes it in a parser -> (we get a collection of Credentials) -> applies differences to the repository. It's simple to use for services using it, e.g. for k8s:\n  public AbstractCredentialsLoader<KubernetesNamedAccountCredentials> kubernetesCredentialsLoader(\n      KubernetesConfigurationProperties configurationProperties,\n      KubernetesCredentials.Factory credentialFactory,\n      CredentialsRepository<KubernetesNamedAccountCredentials> kubernetesCredentialsRepository) {\n    return new BasicCredentialsLoader<>(\n        configurationProperties::getAccounts,\n        a -> new KubernetesNamedAccountCredentials(a, credentialFactory),\n        kubernetesCredentialsRepository);\n  }\n\nThe abstract class provides room for other implementations. For example, an event based implementation can query an external system and get responses such as account X removed or new account Y added. We have one implementation like that but it's hard to make generic enough to be included here.\nThe advantage for the developer of such an implementation is that the lifecycle (e.g. add agent A and B)  and the Spinnaker internal considerations (wire these beans to create Credentials) are separate and can evolve with each release without requiring maintenance of the associated plugin.", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r485192744", "createdAt": "2020-09-08T20:59:08Z", "author": {"login": "ncknt"}, "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/definition/AbstractCredentialsLoader.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.credentials.definition;\n+\n+import com.netflix.spinnaker.credentials.Credentials;\n+import com.netflix.spinnaker.credentials.CredentialsRepository;\n+import com.netflix.spinnaker.kork.annotations.NonnullByDefault;\n+import javax.annotation.PostConstruct;\n+import lombok.Getter;\n+\n+@NonnullByDefault\n+public abstract class AbstractCredentialsLoader<T extends Credentials> {\n+  @Getter protected final CredentialsRepository<T> credentialsRepository;\n+\n+  public AbstractCredentialsLoader(CredentialsRepository<T> credentialsRepository) {\n+    this.credentialsRepository = credentialsRepository;\n+  }\n+\n+  @PostConstruct\n+  public abstract void load();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNDA4Mw=="}, "originalCommit": {"oid": "07bd0e32ca32915324961a6cd0c8e941f6252948"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2MDUxOQ==", "bodyText": "This is helpful, thanks. I think it would be beneficial to capture this reasoning in the abstract class docs.", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r488160519", "createdAt": "2020-09-14T19:10:49Z", "author": {"login": "robzienert"}, "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/definition/AbstractCredentialsLoader.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.credentials.definition;\n+\n+import com.netflix.spinnaker.credentials.Credentials;\n+import com.netflix.spinnaker.credentials.CredentialsRepository;\n+import com.netflix.spinnaker.kork.annotations.NonnullByDefault;\n+import javax.annotation.PostConstruct;\n+import lombok.Getter;\n+\n+@NonnullByDefault\n+public abstract class AbstractCredentialsLoader<T extends Credentials> {\n+  @Getter protected final CredentialsRepository<T> credentialsRepository;\n+\n+  public AbstractCredentialsLoader(CredentialsRepository<T> credentialsRepository) {\n+    this.credentialsRepository = credentialsRepository;\n+  }\n+\n+  @PostConstruct\n+  public abstract void load();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNDA4Mw=="}, "originalCommit": {"oid": "07bd0e32ca32915324961a6cd0c8e941f6252948"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI3NjkzOnYy", "diffSide": "RIGHT", "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/definition/BasicCredentialsLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NTowNVrOHOppqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NTowNVrOHOppqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNDUyMA==", "bodyText": "Also curious about concurrency here.", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r485124520", "createdAt": "2020-09-08T18:45:05Z", "author": {"login": "robzienert"}, "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/definition/BasicCredentialsLoader.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.credentials.definition;\n+\n+import com.netflix.spinnaker.credentials.Credentials;\n+import com.netflix.spinnaker.credentials.CredentialsRepository;\n+import com.netflix.spinnaker.kork.annotations.NonnullByDefault;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+/**\n+ * CredentialsLoader that expects the full list of credentials on each load, and updates the\n+ * credential repository on each run. It can be run once or multiple times.\n+ *\n+ * @param <T>\n+ * @param <U>\n+ */\n+@NonnullByDefault\n+public class BasicCredentialsLoader<T extends CredentialsDefinition, U extends Credentials>\n+    extends AbstractCredentialsLoader<U> {\n+  protected final CredentialsParser<T, U> parser;\n+  protected final CredentialsDefinitionSource<T> definitionSource;\n+  /**\n+   * When parallel is true, the loader may apply changes in parallel. See {@link\n+   * java.util.concurrent.ForkJoinPool} for limitations. This can be useful when adding or updating\n+   * credentials is expected to take some time, as for instance when making a network call.\n+   */\n+  @Setter @Getter protected boolean parallel;\n+  // Definition is kept so we can quickly check for changes before parsing\n+  protected final Map<String, T> loadedDefinitions = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07bd0e32ca32915324961a6cd0c8e941f6252948"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI5ODc5OnYy", "diffSide": "RIGHT", "path": "kork-credentials/kork-credentials.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1MToxOFrOHOp3Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1MToxOFrOHOp3Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNzk3OA==", "bodyText": "You're not using Spock (yay!), don't need these deps.", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r485127978", "createdAt": "2020-09-08T18:51:18Z", "author": {"login": "robzienert"}, "path": "kork-credentials/kork-credentials.gradle", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+apply plugin: \"java-library\"\n+apply from: \"$rootDir/gradle/lombok.gradle\"\n+\n+dependencies {\n+  implementation(platform(project(\":spinnaker-dependencies\")))\n+  api project(\":kork-core\")\n+  api \"com.fasterxml.jackson.core:jackson-annotations\"\n+\n+  testImplementation \"org.spockframework:spock-core\"\n+  testImplementation \"org.spockframework:spock-spring\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07bd0e32ca32915324961a6cd0c8e941f6252948"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDMwNjYwOnYy", "diffSide": "RIGHT", "path": "kork-credentials/kork-credentials.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1MzozNFrOHOp7zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1MzozNFrOHOp7zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyOTE2Ng==", "bodyText": "Avoid api scope when possible. We're trying to be more mindful of transient dependencies.\nAlso, Jackson isn't even used in this PR, so it can be removed.", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r485129166", "createdAt": "2020-09-08T18:53:34Z", "author": {"login": "robzienert"}, "path": "kork-credentials/kork-credentials.gradle", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+apply plugin: \"java-library\"\n+apply from: \"$rootDir/gradle/lombok.gradle\"\n+\n+dependencies {\n+  implementation(platform(project(\":spinnaker-dependencies\")))\n+  api project(\":kork-core\")\n+  api \"com.fasterxml.jackson.core:jackson-annotations\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07bd0e32ca32915324961a6cd0c8e941f6252948"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDI1MjMzOnYy", "diffSide": "RIGHT", "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/CompositeCredentialsRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTowNzoxNFrOHRi1Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMTozMDowMFrOHRnRJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1ODQ5NQ==", "bodyText": "Would be useful to move to SpinnakerException family for all exceptions. There's a number of places in the PR that need to change beyond this one point. Also happy to explain this (or doc if I haven't) why it's beneficial to do so.", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r488158495", "createdAt": "2020-09-14T19:07:14Z", "author": {"login": "robzienert"}, "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/CompositeCredentialsRepository.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.credentials;\n+\n+import com.netflix.spinnaker.kork.exceptions.UnknownCredentialsTypeException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Provides access to credentials (or extension of Credentials) across credentials types.\n+ *\n+ * @param <T>\n+ */\n+public class CompositeCredentialsRepository<T extends Credentials> {\n+  private Map<String, CredentialsRepository<? extends T>> allRepositories;\n+\n+  public CompositeCredentialsRepository(List<CredentialsRepository<? extends T>> repositories) {\n+    allRepositories = new HashMap<>();\n+    repositories.forEach(this::registerRepository);\n+  }\n+\n+  public void registerRepository(CredentialsRepository<? extends T> repository) {\n+    allRepositories.put(repository.getType(), repository);\n+  }\n+\n+  public T getCredentials(String credentialsName, String type) {\n+    if (StringUtils.isEmpty(credentialsName)) {\n+      throw new IllegalArgumentException(\"Credentials name must be supplied\");\n+    }\n+\n+    CredentialsRepository<? extends T> repository = allRepositories.get(type);\n+    if (repository == null) {\n+      throw new UnknownCredentialsTypeException(\"No credentials of type '\" + type + \"' found\");\n+    }\n+\n+    T creds = repository.getOne(credentialsName);\n+    if (creds == null) {\n+      throw new IllegalArgumentException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b94eda1cf9036ee420c95fd7518b17c3ea9e8bb"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIzMTIwNQ==", "bodyText": "Oh I thought you had +1'd the backward compatibility of raising IllegalArgumentException. I like the typed exceptions.", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r488231205", "createdAt": "2020-09-14T21:30:00Z", "author": {"login": "ncknt"}, "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/CompositeCredentialsRepository.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.credentials;\n+\n+import com.netflix.spinnaker.kork.exceptions.UnknownCredentialsTypeException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Provides access to credentials (or extension of Credentials) across credentials types.\n+ *\n+ * @param <T>\n+ */\n+public class CompositeCredentialsRepository<T extends Credentials> {\n+  private Map<String, CredentialsRepository<? extends T>> allRepositories;\n+\n+  public CompositeCredentialsRepository(List<CredentialsRepository<? extends T>> repositories) {\n+    allRepositories = new HashMap<>();\n+    repositories.forEach(this::registerRepository);\n+  }\n+\n+  public void registerRepository(CredentialsRepository<? extends T> repository) {\n+    allRepositories.put(repository.getType(), repository);\n+  }\n+\n+  public T getCredentials(String credentialsName, String type) {\n+    if (StringUtils.isEmpty(credentialsName)) {\n+      throw new IllegalArgumentException(\"Credentials name must be supplied\");\n+    }\n+\n+    CredentialsRepository<? extends T> repository = allRepositories.get(type);\n+    if (repository == null) {\n+      throw new UnknownCredentialsTypeException(\"No credentials of type '\" + type + \"' found\");\n+    }\n+\n+    T creds = repository.getOne(credentialsName);\n+    if (creds == null) {\n+      throw new IllegalArgumentException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1ODQ5NQ=="}, "originalCommit": {"oid": "4b94eda1cf9036ee420c95fd7518b17c3ea9e8bb"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDI2Nzk5OnYy", "diffSide": "RIGHT", "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/poller/Poller.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOToxMTozMVrOHRi-pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMTo1MDoyOVrOHRnzlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2MDkzNQ==", "bodyText": "How is the interval configured? For sake of docs, I see it's done via PollerConfiguration here - even just {@link PollerConfiguration} would be valuable.", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r488160935", "createdAt": "2020-09-14T19:11:31Z", "author": {"login": "robzienert"}, "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/poller/Poller.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.credentials.poller;\n+\n+import com.netflix.spinnaker.credentials.Credentials;\n+import com.netflix.spinnaker.credentials.definition.AbstractCredentialsLoader;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * A poller attempts to reload credentials from its source at a regular interval.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b94eda1cf9036ee420c95fd7518b17c3ea9e8bb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI0MDAyMA==", "bodyText": "Added comments (credentials.poller.<type of creds>.reloadFrequencyMs -> credentials.poller.default.reloadFrequencyMs) + credentials.poller.enabled.", "url": "https://github.com/spinnaker/kork/pull/775#discussion_r488240020", "createdAt": "2020-09-14T21:50:29Z", "author": {"login": "ncknt"}, "path": "kork-credentials/src/main/java/com/netflix/spinnaker/credentials/poller/Poller.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Armory\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.credentials.poller;\n+\n+import com.netflix.spinnaker.credentials.Credentials;\n+import com.netflix.spinnaker.credentials.definition.AbstractCredentialsLoader;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+/**\n+ * A poller attempts to reload credentials from its source at a regular interval.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2MDkzNQ=="}, "originalCommit": {"oid": "4b94eda1cf9036ee420c95fd7518b17c3ea9e8bb"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3502, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}