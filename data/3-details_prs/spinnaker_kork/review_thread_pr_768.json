{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2ODcxMTQ2", "number": 768, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOToyMDozNVrOEfm9VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOToyMTo1OFrOEfnAQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTc5NjA0OnYy", "diffSide": "RIGHT", "path": "kork-retrofit/kork-retrofit.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOToyMDozNVrOHL_F6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOToyMDozNVrOHL_F6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMzMDA4OQ==", "bodyText": "Feels like we should have a kork-retrofit2, no?", "url": "https://github.com/spinnaker/kork/pull/768#discussion_r482330089", "createdAt": "2020-09-02T19:20:35Z", "author": {"login": "robzienert"}, "path": "kork-retrofit/kork-retrofit.gradle", "diffHunk": "@@ -10,10 +10,18 @@ dependencies {\n   implementation \"com.jakewharton.retrofit:retrofit1-okhttp3-client\"\n   implementation \"com.squareup.retrofit:converter-jackson\"\n \n+  implementation \"com.squareup.retrofit2:retrofit\"\n+  implementation \"com.squareup.retrofit2:converter-jackson\"\n+  implementation \"com.squareup.okhttp3:logging-interceptor:4.2.1\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62a7c5f752dab16250547adb8565b4d4d29ff489"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTgwMzU1OnYy", "diffSide": "RIGHT", "path": "kork-retrofit/src/main/java/com/netflix/spinnaker/kork/retrofit/Retrofit2ServiceFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOToyMTo1OFrOHL_K-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMDo1ODoyOFrOHMRdIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMzMTM4Ng==", "bodyText": "This looks kind of fragile - do all retrofit2 interfaces have a Call return type?", "url": "https://github.com/spinnaker/kork/pull/768#discussion_r482331386", "createdAt": "2020-09-02T19:21:58Z", "author": {"login": "robzienert"}, "path": "kork-retrofit/src/main/java/com/netflix/spinnaker/kork/retrofit/Retrofit2ServiceFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.retrofit;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.netflix.spinnaker.config.DefaultServiceEndpoint;\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+import com.netflix.spinnaker.config.okhttp3.OkHttpClientProvider;\n+import com.netflix.spinnaker.kork.annotations.NonnullByDefault;\n+import com.netflix.spinnaker.kork.client.ServiceClientFactory;\n+import java.util.Objects;\n+import okhttp3.HttpUrl;\n+import okhttp3.OkHttpClient;\n+import retrofit2.Call;\n+import retrofit2.Retrofit;\n+import retrofit2.converter.jackson.JacksonConverterFactory;\n+\n+@NonnullByDefault\n+public class Retrofit2ServiceFactory implements ServiceClientFactory {\n+\n+  private final OkHttpClientProvider clientProvider;\n+\n+  public Retrofit2ServiceFactory(OkHttpClientProvider clientProvider) {\n+    this.clientProvider = clientProvider;\n+  }\n+\n+  @Override\n+  public <T> T create(Class<T> type, ServiceEndpoint serviceEndpoint, ObjectMapper objectMapper) {\n+    OkHttpClient okHttpClient =\n+        clientProvider.getClient(\n+            new DefaultServiceEndpoint(serviceEndpoint.getName(), serviceEndpoint.getBaseUrl()));\n+\n+    return new Retrofit.Builder()\n+        .baseUrl(Objects.requireNonNull(HttpUrl.parse(serviceEndpoint.getBaseUrl())))\n+        .client(okHttpClient)\n+        .addConverterFactory(JacksonConverterFactory.create(objectMapper))\n+        .build()\n+        .create(type);\n+  }\n+\n+  @Override\n+  public boolean supports(Class<?> type, ServiceEndpoint serviceEndpoint) {\n+    return type.getMethods()[0].getReturnType().getName().equalsIgnoreCase(Call.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62a7c5f752dab16250547adb8565b4d4d29ff489"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUyOTg4Mg==", "bodyText": "the return value is always a parameterized Call<T>.  I thought about introducing another input var at the call site but that felt like more noise.", "url": "https://github.com/spinnaker/kork/pull/768#discussion_r482529882", "createdAt": "2020-09-02T22:17:49Z", "author": {"login": "srekapalli"}, "path": "kork-retrofit/src/main/java/com/netflix/spinnaker/kork/retrofit/Retrofit2ServiceFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.retrofit;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.netflix.spinnaker.config.DefaultServiceEndpoint;\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+import com.netflix.spinnaker.config.okhttp3.OkHttpClientProvider;\n+import com.netflix.spinnaker.kork.annotations.NonnullByDefault;\n+import com.netflix.spinnaker.kork.client.ServiceClientFactory;\n+import java.util.Objects;\n+import okhttp3.HttpUrl;\n+import okhttp3.OkHttpClient;\n+import retrofit2.Call;\n+import retrofit2.Retrofit;\n+import retrofit2.converter.jackson.JacksonConverterFactory;\n+\n+@NonnullByDefault\n+public class Retrofit2ServiceFactory implements ServiceClientFactory {\n+\n+  private final OkHttpClientProvider clientProvider;\n+\n+  public Retrofit2ServiceFactory(OkHttpClientProvider clientProvider) {\n+    this.clientProvider = clientProvider;\n+  }\n+\n+  @Override\n+  public <T> T create(Class<T> type, ServiceEndpoint serviceEndpoint, ObjectMapper objectMapper) {\n+    OkHttpClient okHttpClient =\n+        clientProvider.getClient(\n+            new DefaultServiceEndpoint(serviceEndpoint.getName(), serviceEndpoint.getBaseUrl()));\n+\n+    return new Retrofit.Builder()\n+        .baseUrl(Objects.requireNonNull(HttpUrl.parse(serviceEndpoint.getBaseUrl())))\n+        .client(okHttpClient)\n+        .addConverterFactory(JacksonConverterFactory.create(objectMapper))\n+        .build()\n+        .create(type);\n+  }\n+\n+  @Override\n+  public boolean supports(Class<?> type, ServiceEndpoint serviceEndpoint) {\n+    return type.getMethods()[0].getReturnType().getName().equalsIgnoreCase(Call.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMzMTM4Ng=="}, "originalCommit": {"oid": "62a7c5f752dab16250547adb8565b4d4d29ff489"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzMDk0Nw==", "bodyText": "Cool, thanks - looks good then.", "url": "https://github.com/spinnaker/kork/pull/768#discussion_r482630947", "createdAt": "2020-09-03T00:58:28Z", "author": {"login": "robzienert"}, "path": "kork-retrofit/src/main/java/com/netflix/spinnaker/kork/retrofit/Retrofit2ServiceFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.retrofit;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.netflix.spinnaker.config.DefaultServiceEndpoint;\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+import com.netflix.spinnaker.config.okhttp3.OkHttpClientProvider;\n+import com.netflix.spinnaker.kork.annotations.NonnullByDefault;\n+import com.netflix.spinnaker.kork.client.ServiceClientFactory;\n+import java.util.Objects;\n+import okhttp3.HttpUrl;\n+import okhttp3.OkHttpClient;\n+import retrofit2.Call;\n+import retrofit2.Retrofit;\n+import retrofit2.converter.jackson.JacksonConverterFactory;\n+\n+@NonnullByDefault\n+public class Retrofit2ServiceFactory implements ServiceClientFactory {\n+\n+  private final OkHttpClientProvider clientProvider;\n+\n+  public Retrofit2ServiceFactory(OkHttpClientProvider clientProvider) {\n+    this.clientProvider = clientProvider;\n+  }\n+\n+  @Override\n+  public <T> T create(Class<T> type, ServiceEndpoint serviceEndpoint, ObjectMapper objectMapper) {\n+    OkHttpClient okHttpClient =\n+        clientProvider.getClient(\n+            new DefaultServiceEndpoint(serviceEndpoint.getName(), serviceEndpoint.getBaseUrl()));\n+\n+    return new Retrofit.Builder()\n+        .baseUrl(Objects.requireNonNull(HttpUrl.parse(serviceEndpoint.getBaseUrl())))\n+        .client(okHttpClient)\n+        .addConverterFactory(JacksonConverterFactory.create(objectMapper))\n+        .build()\n+        .create(type);\n+  }\n+\n+  @Override\n+  public boolean supports(Class<?> type, ServiceEndpoint serviceEndpoint) {\n+    return type.getMethods()[0].getReturnType().getName().equalsIgnoreCase(Call.class.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMzMTM4Ng=="}, "originalCommit": {"oid": "62a7c5f752dab16250547adb8565b4d4d29ff489"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3495, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}