{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzczNDA2", "number": 462, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozMjozN1rODXs2Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozNzozMVrODXs5Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTc4NjExOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/UpdateRepositoryFactory.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozMjozN1rOFdJBWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzozMzo0MFrOFdf4tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMDgyNQ==", "bodyText": "I think this factory will need to support more than a ConfigurableUpdateRepository - for example, there will be a concrete Front50UpdateRepository implementation that we will want to instantiate.", "url": "https://github.com/spinnaker/kork/pull/462#discussion_r366100825", "createdAt": "2020-01-14T00:32:37Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/UpdateRepositoryFactory.kt", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.update\n+\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import com.netflix.spinnaker.config.PluginsConfigurationProperties.PluginRepositoryProperties.FileDownloaderProperties\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import com.netflix.spinnaker.kork.plugins.config.Configurable\n+import org.pf4j.update.FileDownloader\n+import org.pf4j.update.SimpleFileDownloader\n+import org.pf4j.update.UpdateRepository\n+import org.pf4j.update.verifier.CompoundVerifier\n+import java.net.URL\n+\n+/**\n+ * Factory for [UpdateRepository].\n+ */\n+class UpdateRepositoryFactory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e14b7d865ba7a06aa7ab6fa60a321fb5ab97fb7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3NTQ0NQ==", "bodyText": "I agree - but since we only have one UpdateRepository implementation today, this is all I can really build for.", "url": "https://github.com/spinnaker/kork/pull/462#discussion_r366475445", "createdAt": "2020-01-14T17:33:40Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/UpdateRepositoryFactory.kt", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.update\n+\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import com.netflix.spinnaker.config.PluginsConfigurationProperties.PluginRepositoryProperties.FileDownloaderProperties\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import com.netflix.spinnaker.kork.plugins.config.Configurable\n+import org.pf4j.update.FileDownloader\n+import org.pf4j.update.SimpleFileDownloader\n+import org.pf4j.update.UpdateRepository\n+import org.pf4j.update.verifier.CompoundVerifier\n+import java.net.URL\n+\n+/**\n+ * Factory for [UpdateRepository].\n+ */\n+class UpdateRepositoryFactory(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMDgyNQ=="}, "originalCommit": {"oid": "6e14b7d865ba7a06aa7ab6fa60a321fb5ab97fb7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTc5MzcxOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/downloader/internal/DefaultProcessRunner.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozNzozMVrOFdJF6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzozODo0MlrOFdgCpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMTk5Mw==", "bodyText": "Will this wait for 1 minute regardless of the proc status?", "url": "https://github.com/spinnaker/kork/pull/462#discussion_r366101993", "createdAt": "2020-01-14T00:37:31Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/downloader/internal/DefaultProcessRunner.kt", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.update.downloader.internal\n+\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import com.netflix.spinnaker.kork.plugins.update.downloader.ProcessFileDownloader\n+import org.slf4j.Logger\n+import org.slf4j.LoggerFactory\n+import java.io.BufferedReader\n+import java.io.InputStreamReader\n+import java.util.concurrent.TimeUnit\n+\n+/**\n+ * Default [ProcessFileDownloader.ProcessRunner] implementation.\n+ */\n+internal class DefaultProcessRunner : ProcessFileDownloader.ProcessRunner {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun completeOrTimeout(processBuilder: ProcessBuilder): String {\n+    val process = processBuilder.start()\n+    val finished = process.waitFor(1, TimeUnit.MINUTES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e14b7d865ba7a06aa7ab6fa60a321fb5ab97fb7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3MjcyNg==", "bodyText": "That's right.", "url": "https://github.com/spinnaker/kork/pull/462#discussion_r366472726", "createdAt": "2020-01-14T17:27:52Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/downloader/internal/DefaultProcessRunner.kt", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.update.downloader.internal\n+\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import com.netflix.spinnaker.kork.plugins.update.downloader.ProcessFileDownloader\n+import org.slf4j.Logger\n+import org.slf4j.LoggerFactory\n+import java.io.BufferedReader\n+import java.io.InputStreamReader\n+import java.util.concurrent.TimeUnit\n+\n+/**\n+ * Default [ProcessFileDownloader.ProcessRunner] implementation.\n+ */\n+internal class DefaultProcessRunner : ProcessFileDownloader.ProcessRunner {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun completeOrTimeout(processBuilder: ProcessBuilder): String {\n+    val process = processBuilder.start()\n+    val finished = process.waitFor(1, TimeUnit.MINUTES)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMTk5Mw=="}, "originalCommit": {"oid": "6e14b7d865ba7a06aa7ab6fa60a321fb5ab97fb7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ3Nzk4OA==", "bodyText": "I've changed this to not have a timeout and to wait for the process to finish.", "url": "https://github.com/spinnaker/kork/pull/462#discussion_r366477988", "createdAt": "2020-01-14T17:38:42Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/downloader/internal/DefaultProcessRunner.kt", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.update.downloader.internal\n+\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import com.netflix.spinnaker.kork.plugins.update.downloader.ProcessFileDownloader\n+import org.slf4j.Logger\n+import org.slf4j.LoggerFactory\n+import java.io.BufferedReader\n+import java.io.InputStreamReader\n+import java.util.concurrent.TimeUnit\n+\n+/**\n+ * Default [ProcessFileDownloader.ProcessRunner] implementation.\n+ */\n+internal class DefaultProcessRunner : ProcessFileDownloader.ProcessRunner {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun completeOrTimeout(processBuilder: ProcessBuilder): String {\n+    val process = processBuilder.start()\n+    val finished = process.waitFor(1, TimeUnit.MINUTES)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMTk5Mw=="}, "originalCommit": {"oid": "6e14b7d865ba7a06aa7ab6fa60a321fb5ab97fb7"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3658, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}