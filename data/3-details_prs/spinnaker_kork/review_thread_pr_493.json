{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MzI5MjU1", "number": 493, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMTozMTowOFrODbbV4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTozMTowNlrODbdPXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDg2MTE1OnYy", "diffSide": "RIGHT", "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/dynamicconfig/SpringDynamicConfigService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMTozMTowOFrOFi6KmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMTozMTowOFrOFi6KmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0ODg4OQ==", "bodyText": "I forgot that I snuck this in there, I have been tripped by the unconditional appending of \".enabled\" which I did not expect. Seems reasonable enough?", "url": "https://github.com/spinnaker/kork/pull/493#discussion_r372148889", "createdAt": "2020-01-29T01:31:08Z", "author": {"login": "dreynaud"}, "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/dynamicconfig/SpringDynamicConfigService.java", "diffHunk": "@@ -87,6 +87,6 @@ public void setEnvironment(Environment environment) {\n   }\n \n   private static String flagPropertyName(String flagName) {\n-    return format(\"%s.enabled\", flagName);\n+    return flagName.endsWith(\".enabled\") ? flagName : format(\"%s.enabled\", flagName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e90de656b2b4ff7038945b6337ba465519238f9a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDg2MjAxOnYy", "diffSide": "RIGHT", "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/common/Header.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMTozMTo1MFrOFi6LNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMTozMTo1MFrOFi6LNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0OTA0Ng==", "bodyText": "no changes in this class, it's a pure move from AuthenticatedRequest", "url": "https://github.com/spinnaker/kork/pull/493#discussion_r372149046", "createdAt": "2020-01-29T01:31:50Z", "author": {"login": "dreynaud"}, "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/common/Header.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.common;\n+\n+/**\n+ * Known X-SPINNAKER headers, but any X-SPINNAKER-* key in the MDC will be automatically propagated\n+ * to the HTTP headers.\n+ *\n+ * <p>Use makeCustomerHeader() to add customer headers\n+ */\n+public enum Header {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e90de656b2b4ff7038945b6337ba465519238f9a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTE3MTQ1OnYy", "diffSide": "RIGHT", "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/context/RequestContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTozMDozNlrOFi9CKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTozMDozNlrOFi9CKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NTg4Mw==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              default void setAccounts(String accounts) {\n          \n          \n            \n              default void setAccounts(String value) {", "url": "https://github.com/spinnaker/kork/pull/493#discussion_r372195883", "createdAt": "2020-01-29T05:30:36Z", "author": {"login": "marchello2000"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/context/RequestContext.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.web.context;\n+\n+import com.netflix.spinnaker.kork.common.Header;\n+import java.util.Optional;\n+\n+public interface RequestContext {\n+  default Optional<String> getAccounts() {\n+    return get(Header.ACCOUNTS);\n+  }\n+\n+  default Optional<String> getUser() {\n+    return get(Header.USER);\n+  }\n+\n+  default Optional<String> getUserOrigin() {\n+    return get(Header.USER_ORIGIN);\n+  }\n+\n+  default Optional<String> getRequestId() {\n+    return get(Header.REQUEST_ID);\n+  }\n+\n+  default Optional<String> getExecutionId() {\n+    return get(Header.EXECUTION_ID);\n+  }\n+\n+  default Optional<String> getApplication() {\n+    return get(Header.APPLICATION);\n+  }\n+\n+  default Optional<String> getExecutionType() {\n+    return get(Header.EXECUTION_TYPE);\n+  }\n+\n+  default Optional<String> get(Header header) {\n+    return get(header.getHeader());\n+  }\n+\n+  // setters\n+  default void setAccounts(String accounts) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e90de656b2b4ff7038945b6337ba465519238f9a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTE3MjE1OnYy", "diffSide": "RIGHT", "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/context/RequestContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTozMTowNlrOFi9Cjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTozMTowNlrOFi9Cjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5NTk4Mw==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              default void setUser(String user) {\n          \n          \n            \n              default void setUser(String value) {\n          \n      \n    \n    \n  \n\nto make consistent with others..? \ud83e\udd37\u200d\u2642", "url": "https://github.com/spinnaker/kork/pull/493#discussion_r372195983", "createdAt": "2020-01-29T05:31:06Z", "author": {"login": "marchello2000"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/context/RequestContext.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.web.context;\n+\n+import com.netflix.spinnaker.kork.common.Header;\n+import java.util.Optional;\n+\n+public interface RequestContext {\n+  default Optional<String> getAccounts() {\n+    return get(Header.ACCOUNTS);\n+  }\n+\n+  default Optional<String> getUser() {\n+    return get(Header.USER);\n+  }\n+\n+  default Optional<String> getUserOrigin() {\n+    return get(Header.USER_ORIGIN);\n+  }\n+\n+  default Optional<String> getRequestId() {\n+    return get(Header.REQUEST_ID);\n+  }\n+\n+  default Optional<String> getExecutionId() {\n+    return get(Header.EXECUTION_ID);\n+  }\n+\n+  default Optional<String> getApplication() {\n+    return get(Header.APPLICATION);\n+  }\n+\n+  default Optional<String> getExecutionType() {\n+    return get(Header.EXECUTION_TYPE);\n+  }\n+\n+  default Optional<String> get(Header header) {\n+    return get(header.getHeader());\n+  }\n+\n+  // setters\n+  default void setAccounts(String accounts) {\n+    set(Header.ACCOUNTS, accounts);\n+  }\n+\n+  default void setUser(String user) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e90de656b2b4ff7038945b6337ba465519238f9a"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3688, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}