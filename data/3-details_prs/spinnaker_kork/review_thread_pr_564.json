{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNDU5MzYx", "number": 564, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzoxMTo1MVrODp8zZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoxMjoxOFrODq898A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzE0NDA0OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerPluginManager.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzoxMTo1MVrOF5cXCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNzoxMTo1MVrOF5cXCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3NzgwMw==", "bodyText": "add a config / flag to allow for strict mode", "url": "https://github.com/spinnaker/kork/pull/564#discussion_r395777803", "createdAt": "2020-03-20T17:11:51Z", "author": {"login": "link108"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerPluginManager.kt", "diffHunk": "@@ -127,4 +131,14 @@ open class SpinnakerPluginManager(\n     .add(super.createPluginRepository())\n \n   override fun getPluginFactory(): PluginFactory = spinnakerPluginFactory\n+\n+  // TODO (link108): remove this override, once plugin deployments via halyard are fixed\n+  override fun loadPlugin(pluginPath: Path?): String? {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d317755f98a43fbe7a74b392945e691326653f4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzMwOTQ1OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/bundle/PluginBundleExtractor.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODozMDo1M1rOF690AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODozMDo1M1rOF690AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM3NDQ2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.warn(\"Downloaded plugin bundle: {}, does not have plugin for service: {}\", bundlePath.fileName, service)\n          \n          \n            \n                  log.warn(\"Downloaded plugin bundle '{}' does not have plugin for service: {}\", bundlePath.fileName, service)", "url": "https://github.com/spinnaker/kork/pull/564#discussion_r397374465", "createdAt": "2020-03-24T18:30:53Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/bundle/PluginBundleExtractor.kt", "diffHunk": "@@ -55,12 +58,20 @@ class PluginBundleExtractor {\n       return FileUtils.expandIfZip(servicePluginZipPath)\n     }\n \n-    // If thrown, this is an indicator that either: A) There's a bug in the plugin framework resolving which plugin\n-    // bundles should actually be downloaded, or B) The plugin author incorrectly identified this [service] as one\n-    // that the plugin extends (via the PluginInfo `requires` list).\n-    throw IntegrationException(\"Downloaded plugin bundle does not have plugin for service '$service'\")\n+    if (isStrictPluginLoading()) {\n+      // If thrown, this is an indicator that either: A) There's a bug in the plugin framework resolving which plugin\n+      // bundles should actually be downloaded, or B) The plugin author incorrectly identified this [service] as one\n+      // that the plugin extends (via the PluginInfo `requires` list).\n+      throw IntegrationException(\"Downloaded plugin bundle does not have plugin for service '$service'\")\n+    } else {\n+      log.warn(\"Downloaded plugin bundle: {}, does not have plugin for service: {}\", bundlePath.fileName, service)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c69c6738de5de109e549144c9eced351cc2b7e4a"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzMxMzk3OnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerPluginManager.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODozMjoxMVrOF6923A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODozMjoxMVrOF6923A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM3NTE5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                require(!(pluginPath == null || Files.notExists(pluginPath))) { String.format(\"Specified plugin %s does not exist!\", pluginPath) }\n          \n          \n            \n                require(!(pluginPath == null || Files.notExists(pluginPath))) { \"Specified plugin '$pluginPath' does not exist!\" }", "url": "https://github.com/spinnaker/kork/pull/564#discussion_r397375196", "createdAt": "2020-03-24T18:32:11Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerPluginManager.kt", "diffHunk": "@@ -127,4 +133,14 @@ open class SpinnakerPluginManager(\n     .add(super.createPluginRepository())\n \n   override fun getPluginFactory(): PluginFactory = spinnakerPluginFactory\n+\n+  // TODO (link108): remove this override, once plugin deployments via halyard are fixed\n+  override fun loadPlugin(pluginPath: Path?): String? {\n+    require(!(pluginPath == null || Files.notExists(pluginPath))) { String.format(\"Specified plugin %s does not exist!\", pluginPath) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c69c6738de5de109e549144c9eced351cc2b7e4a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzMyMzIxOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerPluginManager.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODozNDozOFrOF6982g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxNzo1M1rOF7FNQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM3NjczMA==", "bodyText": "!! is a code smell, let's avoid it when it's easy to do so:\nreturn loadPluginFromPath(pluginPath)\n  ?.let {\n    // try to resolve  the loaded plugin together with other possible plugins that depend on this plugin\n    resolvePlugins()\n    it.descriptor.pluginId\n  }", "url": "https://github.com/spinnaker/kork/pull/564#discussion_r397376730", "createdAt": "2020-03-24T18:34:38Z", "author": {"login": "robzienert"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerPluginManager.kt", "diffHunk": "@@ -127,4 +133,14 @@ open class SpinnakerPluginManager(\n     .add(super.createPluginRepository())\n \n   override fun getPluginFactory(): PluginFactory = spinnakerPluginFactory\n+\n+  // TODO (link108): remove this override, once plugin deployments via halyard are fixed\n+  override fun loadPlugin(pluginPath: Path?): String? {\n+    require(!(pluginPath == null || Files.notExists(pluginPath))) { String.format(\"Specified plugin %s does not exist!\", pluginPath) }\n+    log.debug(\"Loading plugin from '{}'\", pluginPath)\n+    val pluginWrapper = loadPluginFromPath(pluginPath) ?: return null\n+    // try to resolve  the loaded plugin together with other possible plugins that depend on this plugin\n+    resolvePlugins()\n+    return pluginWrapper!!.descriptor.pluginId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c69c6738de5de109e549144c9eced351cc2b7e4a"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5NTYxOQ==", "bodyText": "makes sense, updating \ud83d\udc4d", "url": "https://github.com/spinnaker/kork/pull/564#discussion_r397495619", "createdAt": "2020-03-24T22:17:53Z", "author": {"login": "link108"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerPluginManager.kt", "diffHunk": "@@ -127,4 +133,14 @@ open class SpinnakerPluginManager(\n     .add(super.createPluginRepository())\n \n   override fun getPluginFactory(): PluginFactory = spinnakerPluginFactory\n+\n+  // TODO (link108): remove this override, once plugin deployments via halyard are fixed\n+  override fun loadPlugin(pluginPath: Path?): String? {\n+    require(!(pluginPath == null || Files.notExists(pluginPath))) { String.format(\"Specified plugin %s does not exist!\", pluginPath) }\n+    log.debug(\"Loading plugin from '{}'\", pluginPath)\n+    val pluginWrapper = loadPluginFromPath(pluginPath) ?: return null\n+    // try to resolve  the loaded plugin together with other possible plugins that depend on this plugin\n+    resolvePlugins()\n+    return pluginWrapper!!.descriptor.pluginId", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM3NjczMA=="}, "originalCommit": {"oid": "c69c6738de5de109e549144c9eced351cc2b7e4a"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzY1NjgwOnYy", "diffSide": "RIGHT", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerPluginManager.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoxMjoxOFrOF7BRxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzowNzo0M1rOF7GZ5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzMTIzOQ==", "bodyText": "Nit: Mayne pass an instance of PluginBundleExtractor to the SpinnakerPluginManager and avoid adding a new member field environment which has the sole purpose of being used as a constructor arg for PluginBundleExtractor.", "url": "https://github.com/spinnaker/kork/pull/564#discussion_r397431239", "createdAt": "2020-03-24T20:12:18Z", "author": {"login": "jonsie"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerPluginManager.kt", "diffHunk": "@@ -54,16 +57,19 @@ open class SpinnakerPluginManager(\n   val statusProvider: PluginStatusProvider,\n   configFactory: ConfigFactory,\n   sdkFactories: List<SdkFactory>,\n-  private val serviceName: String,\n-  pluginsRoot: Path\n+  val serviceName: String,\n+  pluginsRoot: Path,\n+  private val environment: Environment\n ) : DefaultPluginManager(pluginsRoot) {\n \n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n   private val springExtensionFactory: ExtensionFactory = SpinnakerExtensionFactory(\n     this,\n     configFactory,\n     sdkFactories\n   )\n-  private val bundleExtractor = PluginBundleExtractor()\n+  private val bundleExtractor = PluginBundleExtractor(environment)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c69c6738de5de109e549144c9eced351cc2b7e4a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNTIzNw==", "bodyText": "totally, I like that approach \ud83d\udc4d", "url": "https://github.com/spinnaker/kork/pull/564#discussion_r397515237", "createdAt": "2020-03-24T23:07:43Z", "author": {"login": "link108"}, "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerPluginManager.kt", "diffHunk": "@@ -54,16 +57,19 @@ open class SpinnakerPluginManager(\n   val statusProvider: PluginStatusProvider,\n   configFactory: ConfigFactory,\n   sdkFactories: List<SdkFactory>,\n-  private val serviceName: String,\n-  pluginsRoot: Path\n+  val serviceName: String,\n+  pluginsRoot: Path,\n+  private val environment: Environment\n ) : DefaultPluginManager(pluginsRoot) {\n \n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n   private val springExtensionFactory: ExtensionFactory = SpinnakerExtensionFactory(\n     this,\n     configFactory,\n     sdkFactories\n   )\n-  private val bundleExtractor = PluginBundleExtractor()\n+  private val bundleExtractor = PluginBundleExtractor(environment)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzMTIzOQ=="}, "originalCommit": {"oid": "c69c6738de5de109e549144c9eced351cc2b7e4a"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3627, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}