{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NjQ3OTI5", "number": 592, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzozOToyN1rODvIdiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMjo0Nzo1OFrODxAXRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzQ4Mjk2OnYy", "diffSide": "RIGHT", "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/interceptors/MetricsInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzozOToyN1rOGBYKbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzozOToyN1rOGBYKbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA5NzY0NA==", "bodyText": "We are exporting our metrics to Prometheus and requirement is that all meters with the same name must have the same set of tag keys. I've used default behavior for this kind of metrics from spring mvc metrics filter. If you guys think this is not backward compatible I could probably make it customizable via property. What do you think?", "url": "https://github.com/spinnaker/kork/pull/592#discussion_r404097644", "createdAt": "2020-04-06T13:39:27Z", "author": {"login": "Aloren"}, "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/interceptors/MetricsInterceptor.java", "diffHunk": "@@ -111,13 +127,24 @@ public void afterCompletion(\n       for (String pathVariable : pathVariablesToTag) {\n         if (variables.containsKey(pathVariable)) {\n           id = id.withTag(pathVariable, variables.get(pathVariable).toString());\n+        } else {\n+          id = id.withTag(pathVariable, \"None\");\n+        }\n+      }\n+\n+      for (String queryParamName : queryParamsToTag) {\n+        String parameter = request.getParameter(queryParamName);\n+        if (parameter != null) {\n+          id = id.withTag(queryParamName, parameter);\n+        } else {\n+          id = id.withTag(queryParamName, \"None\");\n         }\n       }\n \n       if (ex != null) {\n         id = id.withTag(\"success\", \"false\").withTag(\"cause\", ex.getClass().getSimpleName());\n       } else {\n-        id = id.withTag(\"success\", \"true\");\n+        id = id.withTag(\"success\", \"true\").withTag(\"cause\", \"None\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "665fd2ba9a4a7ec70fbccdacfa73cbe1ae9b67fc"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzEyNzcyOnYy", "diffSide": "RIGHT", "path": "kork-core/kork-core.gradle", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMjo0Nzo1OFrOGERrxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOToxNzo1OFrOGI7llA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEzNzIyMQ==", "bodyText": "Should be implementation not api", "url": "https://github.com/spinnaker/kork/pull/592#discussion_r407137221", "createdAt": "2020-04-12T02:47:58Z", "author": {"login": "cfieber"}, "path": "kork-core/kork-core.gradle", "diffHunk": "@@ -13,6 +13,7 @@ dependencies {\n   api \"org.springframework.boot:spring-boot-starter-actuator\"\n   api \"com.netflix.eureka:eureka-client\"\n   api \"com.netflix.spectator:spectator-api\"\n+  api \"com.netflix.spectator:spectator-reg-micrometer\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09d6c9cf9ee3e32b11b2f9d03252f233a6fc53d5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxMzUxMA==", "bodyText": "hm.. not sure, why? I suppose, we expect this dependency to be provided by kork-core module, otherwise SpectatorConfiguration.java will fail with ClassNotFoundException if spectator-reg-micrometer is not on the classpath.", "url": "https://github.com/spinnaker/kork/pull/592#discussion_r407213510", "createdAt": "2020-04-12T15:25:28Z", "author": {"login": "Aloren"}, "path": "kork-core/kork-core.gradle", "diffHunk": "@@ -13,6 +13,7 @@ dependencies {\n   api \"org.springframework.boot:spring-boot-starter-actuator\"\n   api \"com.netflix.eureka:eureka-client\"\n   api \"com.netflix.spectator:spectator-api\"\n+  api \"com.netflix.spectator:spectator-reg-micrometer\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEzNzIyMQ=="}, "originalCommit": {"oid": "09d6c9cf9ee3e32b11b2f9d03252f233a6fc53d5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI1MzAzNQ==", "bodyText": "API exports the dependency as a compile time dependency to consumers of kork-core which is unnecessary, they only need it as a runtime dependency.\nMost things in here should be implementation not api but that is something I will be addressing separately.", "url": "https://github.com/spinnaker/kork/pull/592#discussion_r407253035", "createdAt": "2020-04-12T21:14:02Z", "author": {"login": "cfieber"}, "path": "kork-core/kork-core.gradle", "diffHunk": "@@ -13,6 +13,7 @@ dependencies {\n   api \"org.springframework.boot:spring-boot-starter-actuator\"\n   api \"com.netflix.eureka:eureka-client\"\n   api \"com.netflix.spectator:spectator-api\"\n+  api \"com.netflix.spectator:spectator-reg-micrometer\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEzNzIyMQ=="}, "originalCommit": {"oid": "09d6c9cf9ee3e32b11b2f9d03252f233a6fc53d5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAxODA2OA==", "bodyText": "fixed", "url": "https://github.com/spinnaker/kork/pull/592#discussion_r412018068", "createdAt": "2020-04-21T09:17:58Z", "author": {"login": "Aloren"}, "path": "kork-core/kork-core.gradle", "diffHunk": "@@ -13,6 +13,7 @@ dependencies {\n   api \"org.springframework.boot:spring-boot-starter-actuator\"\n   api \"com.netflix.eureka:eureka-client\"\n   api \"com.netflix.spectator:spectator-api\"\n+  api \"com.netflix.spectator:spectator-reg-micrometer\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEzNzIyMQ=="}, "originalCommit": {"oid": "09d6c9cf9ee3e32b11b2f9d03252f233a6fc53d5"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3649, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}