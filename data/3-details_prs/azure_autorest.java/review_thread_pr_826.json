{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxNDYzMjQ0", "number": 826, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDozMToxMlrOE_7Fvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDozMToxMlrOE_7Fvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDYzODcxOnYy", "diffSide": "RIGHT", "path": "fluentgen/src/test/java/com/azure/autorest/fluent/util/GeneratedUtilsClassWorkbenchTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDozMToxMlrOH95E-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMjozNjo1NVrOH--KsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY2MDM0NQ==", "bodyText": "Please review whether this part is OK.\nWith some special handling on \"scope\" parameter (which is expected as 1st segment in path).", "url": "https://github.com/Azure/autorest.java/pull/826#discussion_r534660345", "createdAt": "2020-12-03T04:31:12Z", "author": {"login": "weidongxu-microsoft"}, "path": "fluentgen/src/test/java/com/azure/autorest/fluent/util/GeneratedUtilsClassWorkbenchTests.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See License.txt in the project root for license information.\n+ */\n+\n+package com.azure.autorest.fluent.util;\n+\n+import com.azure.core.util.CoreUtils;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class GeneratedUtilsClassWorkbenchTests {\n+\n+    static final class Utils {\n+        static String getValueFromIdByName(String id, String name) {\n+            if (id == null) {\n+                return null;\n+            }\n+            Iterable<String> iterable = Arrays.asList(id.split(\"/\"));\n+            Iterator<String> itr = iterable.iterator();\n+            while (itr.hasNext()) {\n+                String part = itr.next();\n+                if (part != null && !part.trim().isEmpty()) {\n+                    if (part.equalsIgnoreCase(name)) {\n+                        if (itr.hasNext()) {\n+                            return itr.next();\n+                        } else {\n+                            return null;\n+                        }\n+                    }\n+                }\n+            }\n+            return null;\n+        }\n+\n+        static String getValueFromIdByParameterName(String id, String pathTemplate, String parameterName) {\n+            if (id == null || pathTemplate == null) {\n+                return null;\n+            }\n+            String parameterNameParentheses = \"{\" + parameterName +  \"}\";\n+            List<String> idSegmentsReverted = Arrays.asList(id.split(\"/\"));\n+            List<String> pathSegments = Arrays.asList(pathTemplate.split(\"/\"));\n+            Collections.reverse(idSegmentsReverted);\n+            Iterator<String> idItrReverted = idSegmentsReverted.iterator();\n+            int pathIndex = pathSegments.size();\n+            while (idItrReverted.hasNext() && pathIndex > 0) {\n+                String idSegment = idItrReverted.next();\n+                String pathSegment = pathSegments.get(--pathIndex);\n+                if (!CoreUtils.isNullOrEmpty(idSegment) && !CoreUtils.isNullOrEmpty(pathSegment)) {\n+                    if (pathSegment.equalsIgnoreCase(parameterNameParentheses)) {\n+                        if (\"scope\".equalsIgnoreCase(parameterName)\n+                                && pathIndex == 0 || (pathIndex == 1 && pathSegments.get(0).isEmpty())) {\n+                            List<String> segments = new ArrayList<>();\n+                            segments.add(idSegment);\n+                            idItrReverted.forEachRemaining(segments::add);\n+                            Collections.reverse(segments);\n+                            if (segments.size() > 0 && segments.get(0).isEmpty()) {\n+                                segments.remove(0);\n+                            }\n+                            return String.join(\"/\", segments);\n+                        } else {\n+                            return idSegment;\n+                        }\n+                    }\n+                }\n+            }\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd650c37cca663ae51fe4d80d88e4d36de94e622"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc5MjMwNQ==", "bodyText": "I think it is OK only check the first segment with \"/\"", "url": "https://github.com/Azure/autorest.java/pull/826#discussion_r535792305", "createdAt": "2020-12-04T02:36:55Z", "author": {"login": "ChenTanyi"}, "path": "fluentgen/src/test/java/com/azure/autorest/fluent/util/GeneratedUtilsClassWorkbenchTests.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See License.txt in the project root for license information.\n+ */\n+\n+package com.azure.autorest.fluent.util;\n+\n+import com.azure.core.util.CoreUtils;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class GeneratedUtilsClassWorkbenchTests {\n+\n+    static final class Utils {\n+        static String getValueFromIdByName(String id, String name) {\n+            if (id == null) {\n+                return null;\n+            }\n+            Iterable<String> iterable = Arrays.asList(id.split(\"/\"));\n+            Iterator<String> itr = iterable.iterator();\n+            while (itr.hasNext()) {\n+                String part = itr.next();\n+                if (part != null && !part.trim().isEmpty()) {\n+                    if (part.equalsIgnoreCase(name)) {\n+                        if (itr.hasNext()) {\n+                            return itr.next();\n+                        } else {\n+                            return null;\n+                        }\n+                    }\n+                }\n+            }\n+            return null;\n+        }\n+\n+        static String getValueFromIdByParameterName(String id, String pathTemplate, String parameterName) {\n+            if (id == null || pathTemplate == null) {\n+                return null;\n+            }\n+            String parameterNameParentheses = \"{\" + parameterName +  \"}\";\n+            List<String> idSegmentsReverted = Arrays.asList(id.split(\"/\"));\n+            List<String> pathSegments = Arrays.asList(pathTemplate.split(\"/\"));\n+            Collections.reverse(idSegmentsReverted);\n+            Iterator<String> idItrReverted = idSegmentsReverted.iterator();\n+            int pathIndex = pathSegments.size();\n+            while (idItrReverted.hasNext() && pathIndex > 0) {\n+                String idSegment = idItrReverted.next();\n+                String pathSegment = pathSegments.get(--pathIndex);\n+                if (!CoreUtils.isNullOrEmpty(idSegment) && !CoreUtils.isNullOrEmpty(pathSegment)) {\n+                    if (pathSegment.equalsIgnoreCase(parameterNameParentheses)) {\n+                        if (\"scope\".equalsIgnoreCase(parameterName)\n+                                && pathIndex == 0 || (pathIndex == 1 && pathSegments.get(0).isEmpty())) {\n+                            List<String> segments = new ArrayList<>();\n+                            segments.add(idSegment);\n+                            idItrReverted.forEachRemaining(segments::add);\n+                            Collections.reverse(segments);\n+                            if (segments.size() > 0 && segments.get(0).isEmpty()) {\n+                                segments.remove(0);\n+                            }\n+                            return String.join(\"/\", segments);\n+                        } else {\n+                            return idSegment;\n+                        }\n+                    }\n+                }\n+            }\n+            return null;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY2MDM0NQ=="}, "originalCommit": {"oid": "bd650c37cca663ae51fe4d80d88e4d36de94e622"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3017, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}