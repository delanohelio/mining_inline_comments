{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0MzA5MzY2", "number": 661, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOToyNToyM1rOEQijPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyODowMlrOEQ93KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Nzc4NzUwOnYy", "diffSide": "RIGHT", "path": "javagen/src/main/java/com/azure/autorest/template/prototype/MethodTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOToyNToyM1rOG0vr5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOToyNToyM1rOG0vr5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2MDQyMQ==", "bodyText": "Add a MethodTemplate so things related to a method can be grouped together (import, javadoc, method signature and code).", "url": "https://github.com/Azure/autorest.java/pull/661#discussion_r457960421", "createdAt": "2020-07-21T09:25:23Z", "author": {"login": "weidongxu-microsoft"}, "path": "javagen/src/main/java/com/azure/autorest/template/prototype/MethodTemplate.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See License.txt in the project root for license information.\n+ */\n+\n+package com.azure.autorest.template.prototype;\n+\n+import com.azure.autorest.model.javamodel.JavaBlock;\n+import com.azure.autorest.model.javamodel.JavaClass;\n+import com.azure.autorest.model.javamodel.JavaJavadocComment;\n+import com.azure.autorest.model.javamodel.JavaModifier;\n+import com.azure.autorest.model.javamodel.JavaVisibility;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+\n+public class MethodTemplate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cdc3f864af22254626ff77f2f0774440b9dd8b4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MjI2MjE3OnYy", "diffSide": "RIGHT", "path": "fluentgen/src/main/java/com/azure/autorest/fluent/template/FluentServiceClientTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyODowMlrOG1aacw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyODowMlrOG1aacw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2MDQ2Nw==", "bodyText": "Desirable to automatically infer all (or most) of these import classes from code itself.", "url": "https://github.com/Azure/autorest.java/pull/661#discussion_r458660467", "createdAt": "2020-07-22T09:28:02Z", "author": {"login": "weidongxu-microsoft"}, "path": "fluentgen/src/main/java/com/azure/autorest/fluent/template/FluentServiceClientTemplate.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See License.txt in the project root for license information.\n+ */\n+\n+package com.azure.autorest.fluent.template;\n+\n+import com.azure.autorest.extension.base.plugin.JavaSettings;\n+import com.azure.autorest.template.ServiceClientTemplate;\n+import com.azure.autorest.template.prototype.MethodTemplate;\n+import com.azure.core.http.rest.Response;\n+import com.azure.core.management.exception.ManagementError;\n+import com.azure.core.management.exception.ManagementException;\n+import com.azure.core.management.polling.PollResult;\n+import com.azure.core.management.polling.PollerFactory;\n+import com.azure.core.util.Context;\n+import com.azure.core.util.polling.AsyncPollResponse;\n+import com.azure.core.util.polling.LongRunningOperationStatus;\n+import com.azure.core.util.polling.PollerFlux;\n+import com.azure.core.util.serializer.SerializerEncoding;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Type;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public class FluentServiceClientTemplate extends ServiceClientTemplate {\n+\n+    private static final FluentServiceClientTemplate instance = new FluentServiceClientTemplate();\n+    static {\n+        if (JavaSettings.getInstance().isFluentLite()) {\n+            MethodTemplate getContextMethod = MethodTemplate.builder()\n+                    .imports(Collections.singleton(Context.class.getName()))\n+                    .methodSignature(\"Context getContext()\")\n+                    .comment(comment -> {\n+                        comment.description(\"Gets default client context.\");\n+                        comment.methodReturns(\"the default client context.\");\n+                    })\n+                    .method(method -> {\n+                        method.methodReturn(\"Context.NONE\");\n+                    })\n+                    .build();\n+\n+            MethodTemplate mergeContextMethod = MethodTemplate.builder()\n+                    .imports(Arrays.asList(Context.class.getName(), Map.class.getName()))\n+                    .methodSignature(\"Context mergeContext(Context context)\")\n+                    .comment(comment -> {\n+                        comment.description(\"Merges default client context with provided context.\");\n+                        comment.param(\"context\", \"the context to be merged with default client context.\");\n+                        comment.methodReturns(\"the merged context.\");\n+                    })\n+                    .method(method -> {\n+                        method.block(\"for (Map.Entry<Object, Object> entry : this.getContext().getValues().entrySet())\", block -> {\n+                            block.line(\"context = context.addData(entry.getKey(), entry.getValue());\");\n+                        });\n+                        method.methodReturn(\"context\");\n+                    })\n+                    .build();\n+\n+            MethodTemplate getLroResultMethod = MethodTemplate.builder()\n+                    .imports(Arrays.asList(PollerFlux.class.getName(), PollResult.class.getName(),\n+                            Mono.class.getName(), Flux.class.getName(), Response.class.getName(),\n+                            ByteBuffer.class.getName(), Type.class.getName(),\n+                            PollerFactory.class.getName()))\n+                    .methodSignature(\"<T, U> PollerFlux<PollResult<T>, U> getLroResultAsync(Mono<Response<Flux<ByteBuffer>>> activationResponse, HttpPipeline httpPipeline, Type pollResultType, Type finalResultType)\")\n+                    .comment(comment -> {\n+                        comment.description(\"Gets long running operation result.\");\n+                        comment.param(\"activationResponse\", \"the response of activation operation.\");\n+                        comment.param(\"httpPipeline\", \"the http pipeline.\");\n+                        comment.param(\"pollResultType\", \"type of poll result.\");\n+                        comment.param(\"finalResultType\", \"type of final result.\");\n+                        comment.param(\"<T>\", \"type of poll result.\");\n+                        comment.param(\"<U>\", \"type of final result.\");\n+                        comment.methodReturns(\"poller flux for poll result and final result.\");\n+                    })\n+                    .method(method -> {\n+                        method.methodReturn(\"PollerFactory.create(serializerAdapter, httpPipeline, pollResultType, finalResultType, defaultPollInterval, activationResponse)\");\n+                    })\n+                    .build();\n+\n+            MethodTemplate getLroFinalResultOrErrorMethod = MethodTemplate.builder()\n+                    .imports(Arrays.asList(PollerFlux.class.getName(), PollResult.class.getName(),\n+                            Mono.class.getName(), AsyncPollResponse.class.getName(),\n+                            ManagementError.class.getName(), ManagementException.class.getName(),\n+                            LongRunningOperationStatus.class.getName(), SerializerEncoding.class.getName(), IOException.class.getName()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae94721a2730591568701e65838d7de089930b46"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3101, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}