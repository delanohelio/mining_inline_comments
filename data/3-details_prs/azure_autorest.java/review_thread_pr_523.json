{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMjk4OTEw", "number": 523, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMjoxNzoyNlrODk48dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMjoxNzoyNlrODk48dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDA4MzEwOnYy", "diffSide": "RIGHT", "path": "javagen/src/main/java/com/azure/autorest/mapper/ProxyMethodMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMjoxNzoyNlrOFxdzgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMzowNjo1M1rOFxeodg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQxMjg2Ng==", "bodyText": "An operation can now generate multiple proxy methods, per request.", "url": "https://github.com/Azure/autorest.java/pull/523#discussion_r387412866", "createdAt": "2020-03-04T02:17:26Z", "author": {"login": "jianghaolu"}, "path": "javagen/src/main/java/com/azure/autorest/mapper/ProxyMethodMapper.java", "diffHunk": "@@ -23,14 +25,14 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-public class ProxyMethodMapper implements IMapper<Operation, ProxyMethod> {\n+public class ProxyMethodMapper implements IMapper<Operation, Map<Request, ProxyMethod>> {\n     private static final List<IType> unixTimeTypes = Arrays.asList(PrimitiveType.UnixTimeLong, ClassType.UnixTimeLong, ClassType.UnixTimeDateTime);\n     private static final List<IType> returnValueWireTypeOptions = Stream.concat(Stream.of(ClassType.Base64Url, ClassType.DateTimeRfc1123), unixTimeTypes.stream()).collect(Collectors.toList());\n     private static ProxyMethodMapper instance = new ProxyMethodMapper();\n \n //    private static final jdk.nashorn.internal.runtime.regexp.joni.Regex methodTypeLeading = new Regex(\"^/+\");\n //    private static final Regex methodTypeTrailing = new Regex(\"/+$\");\n-    private Map<Operation, ProxyMethod> parsed = new HashMap<Operation, ProxyMethod>();\n+    private Map<Request, ProxyMethod> parsed = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad03f07db93803c15defddbc47d15237bd2f350"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyNjQyMg==", "bodyText": "I see. The input of json schema and input of binary upload is put to 2 different requests...", "url": "https://github.com/Azure/autorest.java/pull/523#discussion_r387426422", "createdAt": "2020-03-04T03:06:53Z", "author": {"login": "weidongxu-microsoft"}, "path": "javagen/src/main/java/com/azure/autorest/mapper/ProxyMethodMapper.java", "diffHunk": "@@ -23,14 +25,14 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-public class ProxyMethodMapper implements IMapper<Operation, ProxyMethod> {\n+public class ProxyMethodMapper implements IMapper<Operation, Map<Request, ProxyMethod>> {\n     private static final List<IType> unixTimeTypes = Arrays.asList(PrimitiveType.UnixTimeLong, ClassType.UnixTimeLong, ClassType.UnixTimeDateTime);\n     private static final List<IType> returnValueWireTypeOptions = Stream.concat(Stream.of(ClassType.Base64Url, ClassType.DateTimeRfc1123), unixTimeTypes.stream()).collect(Collectors.toList());\n     private static ProxyMethodMapper instance = new ProxyMethodMapper();\n \n //    private static final jdk.nashorn.internal.runtime.regexp.joni.Regex methodTypeLeading = new Regex(\"^/+\");\n //    private static final Regex methodTypeTrailing = new Regex(\"/+$\");\n-    private Map<Operation, ProxyMethod> parsed = new HashMap<Operation, ProxyMethod>();\n+    private Map<Request, ProxyMethod> parsed = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQxMjg2Ng=="}, "originalCommit": {"oid": "3ad03f07db93803c15defddbc47d15237bd2f350"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3130, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}