{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMjk5NTE4", "number": 524, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMjoyMTowMlrODk4-sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODo1MToyN1rODlKXBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDA4ODgxOnYy", "diffSide": "RIGHT", "path": "javagen/src/main/java/com/azure/autorest/template/ClientMethodTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMjoyMTowMlrOFxd3BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMjoyMTowMlrOFxd3BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQxMzc2NQ==", "bodyText": "Use a fooInternal to do conditional assignment, leave foo as effectively final, for lambda.\nHope it will not get into future naming conflict.", "url": "https://github.com/Azure/autorest.java/pull/524#discussion_r387413765", "createdAt": "2020-03-04T02:21:02Z", "author": {"login": "weidongxu-microsoft"}, "path": "javagen/src/main/java/com/azure/autorest/template/ClientMethodTemplate.java", "diffHunk": "@@ -109,10 +109,14 @@ private static void ApplyParameterTransformations(JavaBlock function, ClientMeth\n                         return parameterName + \" != null\";\n                     }).collect(Collectors.joining(\" || \"));\n             boolean conditionalAssignment = nullCheck != null && !nullCheck.isEmpty() && !transformation.getOutParameter().getIsRequired() && !clientMethod.getOnlyRequiredParameters();\n+            // Use a mutable internal variable, leave the original name for effectively final variable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209bc57e042cd6407035573cc36e9c230b69953e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDA5Mjk2OnYy", "diffSide": "RIGHT", "path": "javagen/src/main/java/com/azure/autorest/mapper/ProxyMethodMapper.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMjoyMzo1NlrOFxd5qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNTo1ODowNVrOFzboHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQxNDQ0Mw==", "bodyText": "Why is it required?", "url": "https://github.com/Azure/autorest.java/pull/524#discussion_r387414443", "createdAt": "2020-03-04T02:23:56Z", "author": {"login": "jianghaolu"}, "path": "javagen/src/main/java/com/azure/autorest/mapper/ProxyMethodMapper.java", "diffHunk": "@@ -130,6 +131,27 @@ public ProxyMethod map(Operation operation) {\n             parameters.add(Mappers.getProxyParameterMapper().map(parameter));\n         }\n \n+        if (settings.getAddContextParameter()) {\n+            ProxyMethodParameter contextParameter = new ProxyMethodParameter(\n+                \"The context to associate with this operation.\",\n+                    ClassType.Context,\n+                    ClassType.Context,\n+                    \"context\",\n+                    RequestParameterLocation.None,\n+                    \"context\",\n+                    true,\n+                    false,\n+                    true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209bc57e042cd6407035573cc36e9c230b69953e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQxNjcwMA==", "bodyText": "I think I've copied it from v3.\nCurrently the flags is not used, since client code will use FluxUtil.withContext to let user provide context via reactor subscriberContext to the Mono/Flux after SDK call, as is currently done in manual code of storage data-plane (though it probably not working nicely for PagedFlux).\nhttps://github.com/Azure/azure-sdk-for-java/blob/master/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/specialized/BlockBlobAsyncClient.java#L411\nIf we instead decide to let client provide 2 sets of client method (one with context, one without), then we would need isRequred=false here.", "url": "https://github.com/Azure/autorest.java/pull/524#discussion_r387416700", "createdAt": "2020-03-04T02:31:55Z", "author": {"login": "weidongxu-microsoft"}, "path": "javagen/src/main/java/com/azure/autorest/mapper/ProxyMethodMapper.java", "diffHunk": "@@ -130,6 +131,27 @@ public ProxyMethod map(Operation operation) {\n             parameters.add(Mappers.getProxyParameterMapper().map(parameter));\n         }\n \n+        if (settings.getAddContextParameter()) {\n+            ProxyMethodParameter contextParameter = new ProxyMethodParameter(\n+                \"The context to associate with this operation.\",\n+                    ClassType.Context,\n+                    ClassType.Context,\n+                    \"context\",\n+                    RequestParameterLocation.None,\n+                    \"context\",\n+                    true,\n+                    false,\n+                    true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQxNDQ0Mw=="}, "originalCommit": {"oid": "209bc57e042cd6407035573cc36e9c230b69953e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMDg5OA==", "bodyText": "Just FYI client method parameters are ordered so that required params are asked first, and optional params follow.", "url": "https://github.com/Azure/autorest.java/pull/524#discussion_r389200898", "createdAt": "2020-03-07T00:09:41Z", "author": {"login": "jianghaolu"}, "path": "javagen/src/main/java/com/azure/autorest/mapper/ProxyMethodMapper.java", "diffHunk": "@@ -130,6 +131,27 @@ public ProxyMethod map(Operation operation) {\n             parameters.add(Mappers.getProxyParameterMapper().map(parameter));\n         }\n \n+        if (settings.getAddContextParameter()) {\n+            ProxyMethodParameter contextParameter = new ProxyMethodParameter(\n+                \"The context to associate with this operation.\",\n+                    ClassType.Context,\n+                    ClassType.Context,\n+                    \"context\",\n+                    RequestParameterLocation.None,\n+                    \"context\",\n+                    true,\n+                    false,\n+                    true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQxNDQ0Mw=="}, "originalCommit": {"oid": "209bc57e042cd6407035573cc36e9c230b69953e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ3NDMzMw==", "bodyText": "I see. I've changed it to isRequired=false", "url": "https://github.com/Azure/autorest.java/pull/524#discussion_r389474333", "createdAt": "2020-03-09T05:58:05Z", "author": {"login": "weidongxu-microsoft"}, "path": "javagen/src/main/java/com/azure/autorest/mapper/ProxyMethodMapper.java", "diffHunk": "@@ -130,6 +131,27 @@ public ProxyMethod map(Operation operation) {\n             parameters.add(Mappers.getProxyParameterMapper().map(parameter));\n         }\n \n+        if (settings.getAddContextParameter()) {\n+            ProxyMethodParameter contextParameter = new ProxyMethodParameter(\n+                \"The context to associate with this operation.\",\n+                    ClassType.Context,\n+                    ClassType.Context,\n+                    \"context\",\n+                    RequestParameterLocation.None,\n+                    \"context\",\n+                    true,\n+                    false,\n+                    true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQxNDQ0Mw=="}, "originalCommit": {"oid": "209bc57e042cd6407035573cc36e9c230b69953e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjkzNjM5OnYy", "diffSide": "RIGHT", "path": "tests/src/main/java/fixtures/bodyboolean/Bools.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODo1MToyN1rOFx5Yjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNjo1NTozNFrOF0q_uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2NDcxOA==", "bodyText": "The way we currently generate in v3 is by adding the context on the method signature: https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/storage/azure-storage-blob/src/main/java/com/azure/storage/blob/implementation/BlobsImpl.java#L273", "url": "https://github.com/Azure/autorest.java/pull/524#discussion_r387864718", "createdAt": "2020-03-04T18:51:27Z", "author": {"login": "jianghaolu"}, "path": "tests/src/main/java/fixtures/bodyboolean/Bools.java", "diffHunk": "@@ -90,7 +92,7 @@ public Bools(AutoRestBoolTestService client) {\n         if (this.client.getHost() == null) {\n             throw new IllegalArgumentException(\"Parameter this.client.getHost() is required and cannot be null.\");\n         }\n-        return service.getTrue(this.client.getHost());\n+        return FluxUtil.withContext(context -> service.getTrue(this.client.getHost(), context));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97364a6302d33f4e7604939c2afc9f4b3dfabd63"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NDQyOQ==", "bodyText": "Do you prefer we do this on v4 as well (add Context into client method)?", "url": "https://github.com/Azure/autorest.java/pull/524#discussion_r388144429", "createdAt": "2020-03-05T08:38:06Z", "author": {"login": "weidongxu-microsoft"}, "path": "tests/src/main/java/fixtures/bodyboolean/Bools.java", "diffHunk": "@@ -90,7 +92,7 @@ public Bools(AutoRestBoolTestService client) {\n         if (this.client.getHost() == null) {\n             throw new IllegalArgumentException(\"Parameter this.client.getHost() is required and cannot be null.\");\n         }\n-        return service.getTrue(this.client.getHost());\n+        return FluxUtil.withContext(context -> service.getTrue(this.client.getHost(), context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2NDcxOA=="}, "originalCommit": {"oid": "97364a6302d33f4e7604939c2afc9f4b3dfabd63"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwMDQxMw==", "bodyText": "@srnagar may know the correct design for this", "url": "https://github.com/Azure/autorest.java/pull/524#discussion_r389200413", "createdAt": "2020-03-07T00:07:24Z", "author": {"login": "jianghaolu"}, "path": "tests/src/main/java/fixtures/bodyboolean/Bools.java", "diffHunk": "@@ -90,7 +92,7 @@ public Bools(AutoRestBoolTestService client) {\n         if (this.client.getHost() == null) {\n             throw new IllegalArgumentException(\"Parameter this.client.getHost() is required and cannot be null.\");\n         }\n-        return service.getTrue(this.client.getHost());\n+        return FluxUtil.withContext(context -> service.getTrue(this.client.getHost(), context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2NDcxOA=="}, "originalCommit": {"oid": "97364a6302d33f4e7604939c2afc9f4b3dfabd63"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ3NTQ0OQ==", "bodyText": "@srnagar\nHere is sample generated code for simple REST.\nHere is sample generated code for paging (withContext is called inside SinglePageAsync and NextSinglePageAsync method).\n\n  \n    \n      autorest.java/tests/src/main/java/fixtures/paging/Pagings.java\n    \n    \n        Lines 344 to 386\n      in\n      3639f7f\n    \n    \n    \n    \n\n        \n          \n               @ServiceMethod(returns = ReturnType.SINGLE) \n        \n\n        \n          \n               public Mono<PagedResponse<Product>> getMultiplePagesSinglePageAsync(String clientRequestId, PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions) { \n        \n\n        \n          \n                   if (this.client.getHost() == null) { \n        \n\n        \n          \n                       throw new IllegalArgumentException(\"Parameter this.client.getHost() is required and cannot be null.\"); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n                   if (pagingGetMultiplePagesOptions != null) { \n        \n\n        \n          \n                       pagingGetMultiplePagesOptions.validate(); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n                   Integer maxresultsInternal = null; \n        \n\n        \n          \n                   if (pagingGetMultiplePagesOptions != null) { \n        \n\n        \n          \n                       maxresultsInternal = pagingGetMultiplePagesOptions.getMaxresults(); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n                   Integer maxresults = maxresultsInternal; \n        \n\n        \n          \n                   Integer timeoutInternal = null; \n        \n\n        \n          \n                   if (pagingGetMultiplePagesOptions != null) { \n        \n\n        \n          \n                       timeoutInternal = pagingGetMultiplePagesOptions.getTimeout(); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n                   Integer timeout = timeoutInternal; \n        \n\n        \n          \n                   return FluxUtil.withContext(context -> service.getMultiplePages(this.client.getHost(), clientRequestId, maxresults, timeout, context)) \n        \n\n        \n          \n                       .map(res -> new PagedResponseBase<>( \n        \n\n        \n          \n                           res.getRequest(), \n        \n\n        \n          \n                           res.getStatusCode(), \n        \n\n        \n          \n                           res.getHeaders(), \n        \n\n        \n          \n                           res.getValue().getValues(), \n        \n\n        \n          \n                           res.getValue().getNextLink(), \n        \n\n        \n          \n                           null)); \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               /** \n        \n\n        \n          \n                * A paging operation that includes a nextLink that has 10 pages. \n        \n\n        \n          \n                *  \n        \n\n        \n          \n                * @param clientRequestId  \n        \n\n        \n          \n                * @param pagingGetMultiplePagesOptions Parameter group. \n        \n\n        \n          \n                * @throws IllegalArgumentException thrown if parameters fail the validation. \n        \n\n        \n          \n                * @throws HttpResponseException thrown if the request is rejected by server. \n        \n\n        \n          \n                * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent. \n        \n\n        \n          \n                */ \n        \n\n        \n          \n               @ServiceMethod(returns = ReturnType.COLLECTION) \n        \n\n        \n          \n               public PagedFlux<Product> getMultiplePagesAsync(String clientRequestId, PagingGetMultiplePagesOptions pagingGetMultiplePagesOptions) { \n        \n\n        \n          \n                   return new PagedFlux<>( \n        \n\n        \n          \n                       () -> getMultiplePagesSinglePageAsync(clientRequestId, pagingGetMultiplePagesOptions), \n        \n\n        \n          \n                       nextLink -> getMultiplePagesNextSinglePageAsync(nextLink)); \n        \n\n        \n          \n               } \n        \n    \n  \n\n\nLet me know if this is OK for you.", "url": "https://github.com/Azure/autorest.java/pull/524#discussion_r389475449", "createdAt": "2020-03-09T06:03:23Z", "author": {"login": "weidongxu-microsoft"}, "path": "tests/src/main/java/fixtures/bodyboolean/Bools.java", "diffHunk": "@@ -90,7 +92,7 @@ public Bools(AutoRestBoolTestService client) {\n         if (this.client.getHost() == null) {\n             throw new IllegalArgumentException(\"Parameter this.client.getHost() is required and cannot be null.\");\n         }\n-        return service.getTrue(this.client.getHost());\n+        return FluxUtil.withContext(context -> service.getTrue(this.client.getHost(), context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2NDcxOA=="}, "originalCommit": {"oid": "97364a6302d33f4e7604939c2afc9f4b3dfabd63"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc3NDcxMg==", "bodyText": "I see this pattern is used across the existing SDKs. Not sure why they put it in the FluxUtil but fine.", "url": "https://github.com/Azure/autorest.java/pull/524#discussion_r390774712", "createdAt": "2020-03-11T06:55:34Z", "author": {"login": "jianghaolu"}, "path": "tests/src/main/java/fixtures/bodyboolean/Bools.java", "diffHunk": "@@ -90,7 +92,7 @@ public Bools(AutoRestBoolTestService client) {\n         if (this.client.getHost() == null) {\n             throw new IllegalArgumentException(\"Parameter this.client.getHost() is required and cannot be null.\");\n         }\n-        return service.getTrue(this.client.getHost());\n+        return FluxUtil.withContext(context -> service.getTrue(this.client.getHost(), context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2NDcxOA=="}, "originalCommit": {"oid": "97364a6302d33f4e7604939c2afc9f4b3dfabd63"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3133, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}