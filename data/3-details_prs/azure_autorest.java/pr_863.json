{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1MDIzMDI4", "number": 863, "title": "docs", "bodyText": "@jianghaolu is doing the dev section firsts, will update the PR with this section later.\nI couldn't figure out how to add a samples section like python has, will try to do so in the new year.\nFinally, left faq and the migrate section mostly blank, (here's the python faq, and the python migrate), lmk what your breaking changes / new features are from the previous c# generator, will do this in the new year too.\nalso a lot these links are probably broken (all of the ones referring to the main docs)", "createdAt": "2020-12-23T20:47:13Z", "url": "https://github.com/Azure/autorest.java/pull/863", "merged": true, "mergeCommit": {"oid": "cdcf3f62f67b8baf908006603845bbc525960526"}, "closed": true, "closedAt": "2021-01-08T18:50:10Z", "author": {"login": "iscai-msft"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdpFZ9ygH2gAyNTQ1MDIzMDI4OmM4NTMyZjJmYmJlZGE5MzRiZDU0MGU2ZjhkYzBjNDBlYWZhZmExZGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABduM5HiAH2gAyNTQ1MDIzMDI4OmZmNmI3MGY4OTJkNTBiZDQ2MzQ0OGFkMWE3MGUxNDhkM2JhM2Q0ZGY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd", "author": {"user": {"login": "iscai-msft", "name": null}}, "url": "https://github.com/Azure/autorest.java/commit/c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd", "committedDate": "2020-12-23T20:46:01Z", "message": "add docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Mjk2NDQw", "url": "https://github.com/Azure/autorest.java/pull/863#pullrequestreview-558296440", "createdAt": "2020-12-24T01:35:56Z", "commit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMTozNTo1NlrOIK8O1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMTo1OTo0MlrOIK8hUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM0MzUxMA==", "bodyText": "@jianghaolu What does regenerate-pom intend to do? Does it decide whether pom.xml is generated or not? If yes, I could use this in fluent to skip pom in Lite.\nI think currently data-plane does not generate pom.xml.", "url": "https://github.com/Azure/autorest.java/pull/863#discussion_r548343510", "createdAt": "2020-12-24T01:35:56Z", "author": {"login": "weidongxu-microsoft"}, "path": "docs/client/initializing.md", "diffHunk": "@@ -0,0 +1,81 @@\n+# <img align=\"center\" src=\"../images/logo.png\">  Initializing Your Java Client\n+\n+The first step to using your generated client in code is to import and initialize your client. Our SDKs are modelled such\n+that the client is the main point of access to the generated code.\n+\n+## Importing Your Client\n+\n+You include the package from the namespace specified when generating (under flag `--namespace`). For the sake of this example,\n+let's say the namespace is `com.azure.pets`.\n+\n+Putting this together, we import our client like so:\n+\n+```java\n+package com.azure.pets;\n+```\n+\n+## Initializing and Authenticating Your Client\n+\n+Your client's name is detailed in the swagger, (TODO link to swagger docs), and let's say\n+ours is called `PetsClient`. We use builders to build our client, with each builder being the service client's name + suffix `Builder()`.\n+The builder takes in any number of parameters, and ultimately calls `buildClient()`, which ultimately what returns the built client.\n+\n+```java\n+package com.azure.pets;\n+\n+public static void main(String args[])\n+{\n+    PetsClient client = new PetsClientBuilder().buildClient();\n+}\n+```\n+\n+You can also install your client with a credential, using the flag `--credential-types`. If you generate with `--credential-types=TokenCredential`, your\n+client will take in an [Azure Active Directory (AAD) token credential][aad_authentication]. We always recommend\n+using a [credential type][identity_credentials] obtained from the [`com.azure.identity`][azure_identity_library] package for AAD authentication. For this example,\n+we use the most common [`DefaultAzureCredential`][default_azure_credential].\n+\n+As an installation note, the [`com.azure.identity`][azure_identity_library] is not listed as a dependency in the `pom` we generate\n+(see `--regenerate-pom` in our [flag index][flag_index] for more information), so you would need to install this library separately.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM0NjkyOA==", "bodyText": "Right now, we probably do not yet support LRO in data-plane code generator.", "url": "https://github.com/Azure/autorest.java/pull/863#discussion_r548346928", "createdAt": "2020-12-24T01:53:42Z", "author": {"login": "weidongxu-microsoft"}, "path": "docs/client/operations.md", "diffHunk": "@@ -0,0 +1,228 @@\n+# <img align=\"center\" src=\"../images/logo.png\">  Calling Operations with Your Java Client\n+\n+AutoRest provides both synchronous and asynchronous method overloads for each service operation.\n+Depending on your swagger definition, operations can be accessed through operation groups (TODO: link to swagger docs) on the client,\n+or directly on the client.\n+\n+## Operation Group vs No Operation Group\n+\n+If your swagger defines an operation group for your operation (for example, in [this][operation_group_example] swagger, the operation `list`\n+is part of operation group `application`), you would access the operation through the operation group getter on the client, `getApplications()`.\n+This makes the call `client.getApplications().list()`.\n+\n+If there's no operation group, as in [this][mixin_example] case, you would access the operation directly from the client\n+itself, i.e. `client.getDog()`.\n+\n+## Regular Operations\n+\n+### Sync Operations\n+\n+We will be using the [example swagger][pets_swagger] in our main docs repo. After [initializing][initializing] our client, we\n+call our operation like this:\n+\n+```java\n+package com.azure.pets;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.pets.models.Dog;\n+\n+public static void main(String args[])\n+{\n+    PetsClient client = new PetsClientBuilder()\n+        .credential(new DefaultAzureCredentialBuilder().build())\n+        .buildClient();\n+\n+    Dog dog = client.getDog();\n+}\n+```\n+\n+### Async Operations\n+\n+When calling our async operations, we use our async client, which is suffixed with `AsyncClient` instead of `Client`. Our async operations\n+return an [`Observable`][observable], so they need to be subscribed to. Following the [example above](#sync-operations Sync Operations),\n+our call to `getDog` looks like this:\n+\n+```java\n+package com.azure.pets;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.pets.models.Dog;\n+\n+public static void main(String args[])\n+{\n+    PetsAsyncClient client = new PetsClientBuilder()\n+        .credential(new DefaultAzureCredentialBuilder().build())\n+        .buildAsyncClient();\n+\n+    client.getDog().subscribe(\n+        d -> dog = d\n+    );\n+}\n+```\n+\n+## Long Running Operations\n+\n+Long-running operations are operations which consist of an initial request sent to the service to start an operation, followed by polling the service at intervals to determine whether the operation has completed or failed, and if it has succeeded, to get the result.\n+\n+In concurrence with our [java guidelines][poller_guidelines], all of our long running operations are prefixed with `begin`, to signify the starting of the long running operation.\n+\n+For our example, we will use the long running operation generated from [this][example_swagger] swagger. Let's say we generated this swagger with namespace `com.azure.lro`.\n+\n+### Sync Long Running Operations\n+\n+Our sync long running operations return a [`SyncPoller`][lro_poller] polling object. Calling `.getFinalResult()` on this poller", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM0NzY3Nw==", "bodyText": "One of the recommendation is to avoid en-us in msdoc link. It would improve i18n.", "url": "https://github.com/Azure/autorest.java/pull/863#discussion_r548347677", "createdAt": "2020-12-24T01:56:49Z", "author": {"login": "weidongxu-microsoft"}, "path": "docs/client/initializing.md", "diffHunk": "@@ -0,0 +1,81 @@\n+# <img align=\"center\" src=\"../images/logo.png\">  Initializing Your Java Client\n+\n+The first step to using your generated client in code is to import and initialize your client. Our SDKs are modelled such\n+that the client is the main point of access to the generated code.\n+\n+## Importing Your Client\n+\n+You include the package from the namespace specified when generating (under flag `--namespace`). For the sake of this example,\n+let's say the namespace is `com.azure.pets`.\n+\n+Putting this together, we import our client like so:\n+\n+```java\n+package com.azure.pets;\n+```\n+\n+## Initializing and Authenticating Your Client\n+\n+Your client's name is detailed in the swagger, (TODO link to swagger docs), and let's say\n+ours is called `PetsClient`. We use builders to build our client, with each builder being the service client's name + suffix `Builder()`.\n+The builder takes in any number of parameters, and ultimately calls `buildClient()`, which ultimately what returns the built client.\n+\n+```java\n+package com.azure.pets;\n+\n+public static void main(String args[])\n+{\n+    PetsClient client = new PetsClientBuilder().buildClient();\n+}\n+```\n+\n+You can also install your client with a credential, using the flag `--credential-types`. If you generate with `--credential-types=TokenCredential`, your\n+client will take in an [Azure Active Directory (AAD) token credential][aad_authentication]. We always recommend\n+using a [credential type][identity_credentials] obtained from the [`com.azure.identity`][azure_identity_library] package for AAD authentication. For this example,\n+we use the most common [`DefaultAzureCredential`][default_azure_credential].\n+\n+As an installation note, the [`com.azure.identity`][azure_identity_library] is not listed as a dependency in the `pom` we generate\n+(see `--regenerate-pom` in our [flag index][flag_index] for more information), so you would need to install this library separately.\n+\n+```java\n+package com.azure.pets;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+\n+public static void main(String args[])\n+{\n+    PetsClient client = new PetsClientBuilder()\n+        .credential(new DefaultAzureCredentialBuilder().build())\n+        .buildClient();\n+}\n+```\n+\n+You can also have your generated client take in an [`AzureKeyCredential`][azure_key_credential] instead. To do so, generate with flag `--credential-types=AzureKeyCredential`,\n+and for more information on this flag, see our [flag index][flag_index]\n+\n+```java\n+package com.azure.pets;\n+\n+import com.azure.core.credential.AzureKeyCredential;\n+\n+public static void main(String args[])\n+{\n+    PetsClient client = new PetsClientBuilder()\n+        .credential(new AzureKeyCredential(\"{key}\"))\n+        .buildClient();\n+}\n+```\n+\n+Currently, we only support generating credentials of type `TokenCredential` and / or `AzureKeyCredential`.\n+\n+<!-- LINKS -->\n+[multiapi_generation]: ../generate/multiapi.md\n+[azure_core_library]: https://pypi.org/project/azure-core/\n+[msrest_library]: https://pypi.org/project/msrest/\n+[azure_mgmt_core_library]: https://pypi.org/project/azure-mgmt-core/\n+[azure_identity_library]: https://docs.microsoft.com/en-us/java/api/com.azure.identity?view=azure-java-stable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM0ODI0Mw==", "bodyText": "Maybe better just use github URL for the json?\n../../../../node_modules/@microsoft.azure would likely not be there until user do \"npm install\".", "url": "https://github.com/Azure/autorest.java/pull/863#discussion_r548348243", "createdAt": "2020-12-24T01:59:42Z", "author": {"login": "weidongxu-microsoft"}, "path": "docs/samples/specification/azure_key_credential/readme.md", "diffHunk": "@@ -0,0 +1,16 @@\n+# Sample Azure Key Credential Generation\n+\n+Use the flag `--credential-types` to specify you want your credential to be of type [`AzureKeyCredential`][azure_key_credential].\n+\n+### Settings\n+\n+``` yaml\n+input-file: ../../../../node_modules/@microsoft.azure/autorest.testserver/swagger/head.json", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMTcwODA1", "url": "https://github.com/Azure/autorest.java/pull/863#pullrequestreview-561170805", "createdAt": "2021-01-04T16:38:16Z", "commit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjozODoxNlrOIN4lpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjozODoxNlrOIN4lpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQyOTU0MA==", "bodyText": "We don't actually require importing the client manually in the code so I would use this section to specify how to import the maven dependency.", "url": "https://github.com/Azure/autorest.java/pull/863#discussion_r551429540", "createdAt": "2021-01-04T16:38:16Z", "author": {"login": "jianghaolu"}, "path": "docs/client/initializing.md", "diffHunk": "@@ -0,0 +1,81 @@\n+# <img align=\"center\" src=\"../images/logo.png\">  Initializing Your Java Client\n+\n+The first step to using your generated client in code is to import and initialize your client. Our SDKs are modelled such\n+that the client is the main point of access to the generated code.\n+\n+## Importing Your Client\n+\n+You include the package from the namespace specified when generating (under flag `--namespace`). For the sake of this example,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMTg3OTM4", "url": "https://github.com/Azure/autorest.java/pull/863#pullrequestreview-561187938", "createdAt": "2021-01-04T17:01:45Z", "commit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzowMTo0NVrOIN5e2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzowMTo0NVrOIN5e2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NDE4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Models and enums are generated in the `models` namespace. So, say you are using package `azure.pets`. To access model `Dog`, you would use the following code\n          \n          \n            \n            Models and enums are generated in the `models` sub-package. So, say you are using package `azure.pets`. To access model `Dog`, you would use the following code snippet", "url": "https://github.com/Azure/autorest.java/pull/863#discussion_r551444184", "createdAt": "2021-01-04T17:01:45Z", "author": {"login": "jianghaolu"}, "path": "docs/client/models.md", "diffHunk": "@@ -0,0 +1,50 @@\n+# <img align=\"center\" src=\"../images/logo.png\">  Accessing Models and Enums\n+\n+## General\n+\n+Models and enums are generated in the `models` namespace. So, say you are using package `azure.pets`. To access model `Dog`, you would use the following code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMTg4MDU5", "url": "https://github.com/Azure/autorest.java/pull/863#pullrequestreview-561188059", "createdAt": "2021-01-04T17:01:57Z", "commit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzowMTo1OFrOIN5fQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzowMTo1OFrOIN5fQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NDI5MA==", "bodyText": "Why is this on a separate line?", "url": "https://github.com/Azure/autorest.java/pull/863#discussion_r551444290", "createdAt": "2021-01-04T17:01:58Z", "author": {"login": "jianghaolu"}, "path": "docs/client/models.md", "diffHunk": "@@ -0,0 +1,50 @@\n+# <img align=\"center\" src=\"../images/logo.png\">  Accessing Models and Enums\n+\n+## General\n+\n+Models and enums are generated in the `models` namespace. So, say you are using package `azure.pets`. To access model `Dog`, you would use the following code\n+snippet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMTg4NTU1", "url": "https://github.com/Azure/autorest.java/pull/863#pullrequestreview-561188555", "createdAt": "2021-01-04T17:02:42Z", "commit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzowMjo0M1rOIN5g6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzowMjo0M1rOIN5g6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NDcxMg==", "bodyText": "Imports in Java IDEs are automatic - we can remove any instructions to import.", "url": "https://github.com/Azure/autorest.java/pull/863#discussion_r551444712", "createdAt": "2021-01-04T17:02:43Z", "author": {"login": "jianghaolu"}, "path": "docs/client/models.md", "diffHunk": "@@ -0,0 +1,50 @@\n+# <img align=\"center\" src=\"../images/logo.png\">  Accessing Models and Enums\n+\n+## General\n+\n+Models and enums are generated in the `models` namespace. So, say you are using package `azure.pets`. To access model `Dog`, you would use the following code\n+snippet\n+\n+```java\n+import azure.pets.models.Dog\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMTkwNjkz", "url": "https://github.com/Azure/autorest.java/pull/863#pullrequestreview-561190693", "createdAt": "2021-01-04T17:05:44Z", "commit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzowNTo0NFrOIN5n6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzowNTo0NFrOIN5n6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NjUwNw==", "bodyText": "In Java the return type would be DogTypes even for expandable enums.", "url": "https://github.com/Azure/autorest.java/pull/863#discussion_r551446507", "createdAt": "2021-01-04T17:05:44Z", "author": {"login": "jianghaolu"}, "path": "docs/client/models.md", "diffHunk": "@@ -0,0 +1,50 @@\n+# <img align=\"center\" src=\"../images/logo.png\">  Accessing Models and Enums\n+\n+## General\n+\n+Models and enums are generated in the `models` namespace. So, say you are using package `azure.pets`. To access model `Dog`, you would use the following code\n+snippet\n+\n+```java\n+import azure.pets.models.Dog\n+```\n+\n+You access properties of the model through getters, so getting the name of the dog would look like\n+\n+```java\n+package com.azure.pets;\n+\n+import azure.pets.models.Dog;\n+\n+public static void main(String args[])\n+{\n+    String dogName = Dog().getName();\n+}\n+```\n+\n+You set properties of the model through setters, so setting the name of the dog would look like\n+\n+```java\n+package com.azure.pets;\n+\n+import azure.pets.models.Dog;\n+\n+public static void main(String args[])\n+{\n+    Dog dog = new Dog();\n+    dog.setName(\"goodBoy\");\n+}\n+```\n+\n+Enums are also listed in the `models` namespace, so say you have enum class `DogTypes`. To access the `DALMATION` enum, your code would look like\n+\n+```java\n+package com.azure.pets;\n+\n+import azure.pets.models.DogTypes;\n+\n+public static void main(String args[])\n+{\n+    String myDogType = DogTypes.DALMATION;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMTk1ODc0", "url": "https://github.com/Azure/autorest.java/pull/863#pullrequestreview-561195874", "createdAt": "2021-01-04T17:13:11Z", "commit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoxMzoxMlrOIN54Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoxMzoxMlrOIN54Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1MDcxMA==", "bodyText": "Where is dog defined? I guess we could do a simple System.out.println() on one of the d's properties.", "url": "https://github.com/Azure/autorest.java/pull/863#discussion_r551450710", "createdAt": "2021-01-04T17:13:12Z", "author": {"login": "jianghaolu"}, "path": "docs/client/operations.md", "diffHunk": "@@ -0,0 +1,228 @@\n+# <img align=\"center\" src=\"../images/logo.png\">  Calling Operations with Your Java Client\n+\n+AutoRest provides both synchronous and asynchronous method overloads for each service operation.\n+Depending on your swagger definition, operations can be accessed through operation groups (TODO: link to swagger docs) on the client,\n+or directly on the client.\n+\n+## Operation Group vs No Operation Group\n+\n+If your swagger defines an operation group for your operation (for example, in [this][operation_group_example] swagger, the operation `list`\n+is part of operation group `application`), you would access the operation through the operation group getter on the client, `getApplications()`.\n+This makes the call `client.getApplications().list()`.\n+\n+If there's no operation group, as in [this][mixin_example] case, you would access the operation directly from the client\n+itself, i.e. `client.getDog()`.\n+\n+## Regular Operations\n+\n+### Sync Operations\n+\n+We will be using the [example swagger][pets_swagger] in our main docs repo. After [initializing][initializing] our client, we\n+call our operation like this:\n+\n+```java\n+package com.azure.pets;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.pets.models.Dog;\n+\n+public static void main(String args[])\n+{\n+    PetsClient client = new PetsClientBuilder()\n+        .credential(new DefaultAzureCredentialBuilder().build())\n+        .buildClient();\n+\n+    Dog dog = client.getDog();\n+}\n+```\n+\n+### Async Operations\n+\n+When calling our async operations, we use our async client, which is suffixed with `AsyncClient` instead of `Client`. Our async operations\n+return an [`Observable`][observable], so they need to be subscribed to. Following the [example above](#sync-operations Sync Operations),\n+our call to `getDog` looks like this:\n+\n+```java\n+package com.azure.pets;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.pets.models.Dog;\n+\n+public static void main(String args[])\n+{\n+    PetsAsyncClient client = new PetsClientBuilder()\n+        .credential(new DefaultAzureCredentialBuilder().build())\n+        .buildAsyncClient();\n+\n+    client.getDog().subscribe(\n+        d -> dog = d", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMTk3NjA5", "url": "https://github.com/Azure/autorest.java/pull/863#pullrequestreview-561197609", "createdAt": "2021-01-04T17:15:49Z", "commit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoxNTo1MFrOIN5-GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoxNTo1MFrOIN5-GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1MjE4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For our example, we will use the long running operation generated from [this][example_swagger] swagger. Let's say we generated this swagger with namespace `com.azure.paging`.\n          \n          \n            \n            For our example, we will use the pageable operation generated from [this][example_swagger] swagger. Let's say we generated this swagger with namespace `com.azure.paging`.", "url": "https://github.com/Azure/autorest.java/pull/863#discussion_r551452185", "createdAt": "2021-01-04T17:15:50Z", "author": {"login": "jianghaolu"}, "path": "docs/client/operations.md", "diffHunk": "@@ -0,0 +1,228 @@\n+# <img align=\"center\" src=\"../images/logo.png\">  Calling Operations with Your Java Client\n+\n+AutoRest provides both synchronous and asynchronous method overloads for each service operation.\n+Depending on your swagger definition, operations can be accessed through operation groups (TODO: link to swagger docs) on the client,\n+or directly on the client.\n+\n+## Operation Group vs No Operation Group\n+\n+If your swagger defines an operation group for your operation (for example, in [this][operation_group_example] swagger, the operation `list`\n+is part of operation group `application`), you would access the operation through the operation group getter on the client, `getApplications()`.\n+This makes the call `client.getApplications().list()`.\n+\n+If there's no operation group, as in [this][mixin_example] case, you would access the operation directly from the client\n+itself, i.e. `client.getDog()`.\n+\n+## Regular Operations\n+\n+### Sync Operations\n+\n+We will be using the [example swagger][pets_swagger] in our main docs repo. After [initializing][initializing] our client, we\n+call our operation like this:\n+\n+```java\n+package com.azure.pets;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.pets.models.Dog;\n+\n+public static void main(String args[])\n+{\n+    PetsClient client = new PetsClientBuilder()\n+        .credential(new DefaultAzureCredentialBuilder().build())\n+        .buildClient();\n+\n+    Dog dog = client.getDog();\n+}\n+```\n+\n+### Async Operations\n+\n+When calling our async operations, we use our async client, which is suffixed with `AsyncClient` instead of `Client`. Our async operations\n+return an [`Observable`][observable], so they need to be subscribed to. Following the [example above](#sync-operations Sync Operations),\n+our call to `getDog` looks like this:\n+\n+```java\n+package com.azure.pets;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.pets.models.Dog;\n+\n+public static void main(String args[])\n+{\n+    PetsAsyncClient client = new PetsClientBuilder()\n+        .credential(new DefaultAzureCredentialBuilder().build())\n+        .buildAsyncClient();\n+\n+    client.getDog().subscribe(\n+        d -> dog = d\n+    );\n+}\n+```\n+\n+## Long Running Operations\n+\n+Long-running operations are operations which consist of an initial request sent to the service to start an operation, followed by polling the service at intervals to determine whether the operation has completed or failed, and if it has succeeded, to get the result.\n+\n+In concurrence with our [java guidelines][poller_guidelines], all of our long running operations are prefixed with `begin`, to signify the starting of the long running operation.\n+\n+For our example, we will use the long running operation generated from [this][example_swagger] swagger. Let's say we generated this swagger with namespace `com.azure.lro`.\n+\n+### Sync Long Running Operations\n+\n+Our sync long running operations return a [`SyncPoller`][lro_poller] polling object. Calling `.getFinalResult()` on this poller\n+waits for the operation to finish and returns the final result.\n+\n+```java\n+package com.azure.lro;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.lro.models.Product;\n+import com.azure.lro.models.OperationResult;\n+import com.azure.core.util.polling.SyncPoller;\n+\n+public static void main(String args[])\n+{\n+    PollingPagingExampleClient client = new PollingPagingExampleClientBuilder()\n+        .credential(new DefaultAzureCredentialBuilder().build())\n+        .buildClient();\n+\n+    Product inputProduct = new Product(1, \"My Polling Example\");\n+    SyncPoller<OperationResult, Product> poller = client.beginBasicPolling(inputProduct);\n+    Product outputProduct = poller.getFinalResult();\n+}\n+```\n+\n+### Async Long Running Operations\n+\n+By default, our async long running operations return a [`PollerFlux`][poller_flux] polling object. This `PollerFlux` eventually returns a [`Mono`][mono]\n+\n+```python\n+import asyncio\n+from azure.identity import DefaultAzureCredential\n+from azure.lro.aio import PollingPagingExampleClient\n+from azure.lro.models import Product\n+\n+async def basic_polling():\n+    async with PollingPagingExampleClient(credential=DefaultAzureCredential()) as client:\n+        input_product = Product(id=1, name=\"My Polling Example\")\n+        poller = await client.begin_basic_polling(product=input_product)\n+        output_product = await poller.result()\n+\n+loop = asyncio.get_event_loop()\n+loop.run_until_complete(basic_polling())\n+loop.close()\n+```\n+\n+```java\n+package com.azure.lro;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.lro.models.Product;\n+import com.azure.lro.models.OperationResult;\n+import reactor.core.publisher.Mono;\n+import com.azure.core.util.polling.PollerFlux;\n+\n+public static void main(String args[])\n+{\n+    PollingPagingExampleAsyncClient client = new PollingPagingExampleClientBuilder()\n+        .credential(new DefaultAzureCredentialBuilder().build())\n+        .buildAsyncClient();\n+\n+    Product inputProduct = new Product(1, \"My Polling Example\");\n+\n+    PollerFlux<OperationResult, Product> poller = client.beginBasicPolling(inputProduct);\n+    Mono<Product> productMono =\n+        poller\n+            .last()\n+            .flatMap(pollResponse -> {\n+                if (pollResponse.getStatus().isComplete()) {\n+                    System.out.println(\"Polling completed successfully\");\n+                    // completed successfully, retrieving final result.\n+                    return pollResponse.getFinalResult();\n+                } else {\n+                    return Mono.error(\n+                        new RuntimeException(\"Polling completed unsuccessfully with status:\" + pollResponse.getStatus()));\n+                }\n+            });\n+\n+    productMono.subscribe(\n+        p -> outputProduct = p\n+    );\n+}\n+```\n+\n+## Paging Operations\n+\n+A paging operation pages through lists of data, returning an iterator for the items. Network calls get made when users start iterating through the output, not when the operation\n+is initially called.\n+\n+For our example, we will use the long running operation generated from [this][example_swagger] swagger. Let's say we generated this swagger with namespace `com.azure.paging`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8532f2fbbeda934bd540e6f8dc0c40eafafa1dd"}, "originalPosition": 160}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c017652ef053096303a6d26ebeaa5ea5f7d3507f", "author": {"user": {"login": "iscai-msft", "name": null}}, "url": "https://github.com/Azure/autorest.java/commit/c017652ef053096303a6d26ebeaa5ea5f7d3507f", "committedDate": "2021-01-04T20:51:01Z", "message": "address jianghao and weidong's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNTIzNjEz", "url": "https://github.com/Azure/autorest.java/pull/863#pullrequestreview-561523613", "createdAt": "2021-01-05T05:31:16Z", "commit": {"oid": "c017652ef053096303a6d26ebeaa5ea5f7d3507f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNTozMToxNlrOIOKnjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwNTozMToxNlrOIOKnjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTcyNDk0Mw==", "bodyText": "Would be Sample Java Generation. Easy to change later though.", "url": "https://github.com/Azure/autorest.java/pull/863#discussion_r551724943", "createdAt": "2021-01-05T05:31:16Z", "author": {"login": "weidongxu-microsoft"}, "path": "docs/samples/readme.md", "diffHunk": "@@ -0,0 +1,21 @@\n+# <img align=\"center\" src=\"../images/logo.png\"> Sample Python Generation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c017652ef053096303a6d26ebeaa5ea5f7d3507f"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyNDA5NDQz", "url": "https://github.com/Azure/autorest.java/pull/863#pullrequestreview-562409443", "createdAt": "2021-01-06T08:41:33Z", "commit": {"oid": "c017652ef053096303a6d26ebeaa5ea5f7d3507f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9068e21396e2e49529be395b409f870baeff6b74", "author": {"user": {"login": "iscai-msft", "name": null}}, "url": "https://github.com/Azure/autorest.java/commit/9068e21396e2e49529be395b409f870baeff6b74", "committedDate": "2021-01-06T16:09:33Z", "message": "fix python references and add lro section"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2508b60f0a8115193bb14de8e3f7202cd5be5c8a", "author": {"user": {"login": "iscai-msft", "name": null}}, "url": "https://github.com/Azure/autorest.java/commit/2508b60f0a8115193bb14de8e3f7202cd5be5c8a", "committedDate": "2021-01-06T19:32:14Z", "message": "generate samples"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dff059c2c60196bb60b05edbdea303e82c631a8f", "author": {"user": {"login": "iscai-msft", "name": null}}, "url": "https://github.com/Azure/autorest.java/commit/dff059c2c60196bb60b05edbdea303e82c631a8f", "committedDate": "2021-01-07T21:21:00Z", "message": "add samples to generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff6b70f892d50bd463448ad1a70e148d3ba3d4df", "author": {"user": {"login": "iscai-msft", "name": null}}, "url": "https://github.com/Azure/autorest.java/commit/ff6b70f892d50bd463448ad1a70e148d3ba3d4df", "committedDate": "2021-01-08T18:19:00Z", "message": "Merge branch 'v4' of https://github.com/Azure/autorest.java into docs\n\n* 'v4' of https://github.com/Azure/autorest.java: (69 commits)\n  v4 fluentlite load input-file from autorest (#878)\n  [Automation] Report\n  v4 fluentlite use regenerate-pom option (#876)\n  [Automation] Report\n  Support customization code in README (#804)\n  [Automation] Report\n  v4, bug fix, camel case on additionalPropertiesProperty (#874)\n  [Automation] Report\n  bump version for 4.0.8 (#872)\n  handle case sensitivity on client name (#871)\n  [Automation] Report\n  [Automation] Report\n  [Automation] Report\n  [Automation] Report\n  [Automation] Report\n  [Automation] Report\n  [Automation] Report\n  add a derived getFluentModelsSubpackage method in JavaSetting, and deduplicate on modules-info (#869)\n  v4 support for times (#868)\n  [Automation] Report\n  ..."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1861, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}