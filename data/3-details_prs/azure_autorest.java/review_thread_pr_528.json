{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NzQ3MjUz", "number": 528, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDoyNzo0NVrODl0KlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDoyNzo0NVrODl0KlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTc4NTgxOnYy", "diffSide": "RIGHT", "path": "javagen/src/main/java/com/azure/autorest/mapper/ModelMapper.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDoyNzo0NVrOFy6jZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMjo0Mjo1NFrOFzZnmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMjQ1NA==", "bodyText": "Some mgmt-plane swagger has type with multiple base type. Currently I only take the first one as base, and flatten the rest. Could there be a better heuristic, like take the one that itself inherits a base class or got a discriminator?\nv1 flatten it as well. But not sure how it pick the base class.", "url": "https://github.com/Azure/autorest.java/pull/528#discussion_r388932454", "createdAt": "2020-03-06T14:27:45Z", "author": {"login": "weidongxu-microsoft"}, "path": "javagen/src/main/java/com/azure/autorest/mapper/ModelMapper.java", "diffHunk": "@@ -46,31 +47,46 @@ public ClientModel map(ObjectSchema compositeType) {\n \n             String parentModel = null;\n             boolean hasAdditionalProperties = false;\n+            List<ObjectSchema> parentsNeedFlatten = new ArrayList<>();\n             if (compositeType.getParents() != null && compositeType.getParents().getImmediate() != null) {\n-                if (!(compositeType.getParents().getImmediate().get(0) instanceof DictionarySchema)) {\n-//                ComplexSchema baseSchema = compositeType.getParents().getImmediate().get(0);\n-//                if (baseSchema instanceof ObjectSchema) {\n-//                    parentModel = map((ObjectSchema) baseSchema);\n-//                    serviceModels.addModel(parentModel);\n-//                } else {\n-//                    throw new RuntimeException(\"Wait what? How? Parent is not an object but a \" + baseSchema.getClass() + \"?\");\n-//                }\n-                    ComplexSchema parentComplexSchema = compositeType.getParents().getImmediate().get(0);\n-                    if (parentComplexSchema instanceof ObjectSchema) {\n-                        ClassType parentType = objectMapper.map((ObjectSchema) parentComplexSchema);\n-                        parentModel = parentType.getName();\n-                        modelImports.add(parentType.getPackage() + \".\" + parentModel);\n-                    } else {\n-                        parentModel = compositeType.getParents().getImmediate().get(0).getLanguage().getJava().getName();\n+                hasAdditionalProperties = compositeType.getParents().getImmediate().stream()\n+                        .anyMatch(s -> s instanceof DictionarySchema);\n+\n+                ObjectSchema firstParentComplexSchema = null;\n+                for (Schema parent : compositeType.getParents().getImmediate()) {\n+                    if (parent instanceof ObjectSchema) {\n+                        if (firstParentComplexSchema == null) {\n+                            firstParentComplexSchema = (ObjectSchema) parent;\n+                        } else {\n+                            parentsNeedFlatten.add((ObjectSchema) parent);\n+                        }\n                     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1426f10cb8774cd3182769668b6e5e32a808f0c8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExMDI1Mg==", "bodyText": "I agree the right way to handle multiple inheritance in Java is through composition. In v1 flattening was done by modeler so we didn't have to implement that.\nWhile we can reach out to Garrett for advice, I think keeping the same behavior as v1 should be okay.", "url": "https://github.com/Azure/autorest.java/pull/528#discussion_r389110252", "createdAt": "2020-03-06T19:47:57Z", "author": {"login": "jianghaolu"}, "path": "javagen/src/main/java/com/azure/autorest/mapper/ModelMapper.java", "diffHunk": "@@ -46,31 +47,46 @@ public ClientModel map(ObjectSchema compositeType) {\n \n             String parentModel = null;\n             boolean hasAdditionalProperties = false;\n+            List<ObjectSchema> parentsNeedFlatten = new ArrayList<>();\n             if (compositeType.getParents() != null && compositeType.getParents().getImmediate() != null) {\n-                if (!(compositeType.getParents().getImmediate().get(0) instanceof DictionarySchema)) {\n-//                ComplexSchema baseSchema = compositeType.getParents().getImmediate().get(0);\n-//                if (baseSchema instanceof ObjectSchema) {\n-//                    parentModel = map((ObjectSchema) baseSchema);\n-//                    serviceModels.addModel(parentModel);\n-//                } else {\n-//                    throw new RuntimeException(\"Wait what? How? Parent is not an object but a \" + baseSchema.getClass() + \"?\");\n-//                }\n-                    ComplexSchema parentComplexSchema = compositeType.getParents().getImmediate().get(0);\n-                    if (parentComplexSchema instanceof ObjectSchema) {\n-                        ClassType parentType = objectMapper.map((ObjectSchema) parentComplexSchema);\n-                        parentModel = parentType.getName();\n-                        modelImports.add(parentType.getPackage() + \".\" + parentModel);\n-                    } else {\n-                        parentModel = compositeType.getParents().getImmediate().get(0).getLanguage().getJava().getName();\n+                hasAdditionalProperties = compositeType.getParents().getImmediate().stream()\n+                        .anyMatch(s -> s instanceof DictionarySchema);\n+\n+                ObjectSchema firstParentComplexSchema = null;\n+                for (Schema parent : compositeType.getParents().getImmediate()) {\n+                    if (parent instanceof ObjectSchema) {\n+                        if (firstParentComplexSchema == null) {\n+                            firstParentComplexSchema = (ObjectSchema) parent;\n+                        } else {\n+                            parentsNeedFlatten.add((ObjectSchema) parent);\n+                        }\n                     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMjQ1NA=="}, "originalCommit": {"oid": "1426f10cb8774cd3182769668b6e5e32a808f0c8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxOTI1MA==", "bodyText": "Yes, agree. I will try composition, see if I can pull off the serialization/de-serialization correctly.", "url": "https://github.com/Azure/autorest.java/pull/528#discussion_r389219250", "createdAt": "2020-03-07T02:25:57Z", "author": {"login": "weidongxu-microsoft"}, "path": "javagen/src/main/java/com/azure/autorest/mapper/ModelMapper.java", "diffHunk": "@@ -46,31 +47,46 @@ public ClientModel map(ObjectSchema compositeType) {\n \n             String parentModel = null;\n             boolean hasAdditionalProperties = false;\n+            List<ObjectSchema> parentsNeedFlatten = new ArrayList<>();\n             if (compositeType.getParents() != null && compositeType.getParents().getImmediate() != null) {\n-                if (!(compositeType.getParents().getImmediate().get(0) instanceof DictionarySchema)) {\n-//                ComplexSchema baseSchema = compositeType.getParents().getImmediate().get(0);\n-//                if (baseSchema instanceof ObjectSchema) {\n-//                    parentModel = map((ObjectSchema) baseSchema);\n-//                    serviceModels.addModel(parentModel);\n-//                } else {\n-//                    throw new RuntimeException(\"Wait what? How? Parent is not an object but a \" + baseSchema.getClass() + \"?\");\n-//                }\n-                    ComplexSchema parentComplexSchema = compositeType.getParents().getImmediate().get(0);\n-                    if (parentComplexSchema instanceof ObjectSchema) {\n-                        ClassType parentType = objectMapper.map((ObjectSchema) parentComplexSchema);\n-                        parentModel = parentType.getName();\n-                        modelImports.add(parentType.getPackage() + \".\" + parentModel);\n-                    } else {\n-                        parentModel = compositeType.getParents().getImmediate().get(0).getLanguage().getJava().getName();\n+                hasAdditionalProperties = compositeType.getParents().getImmediate().stream()\n+                        .anyMatch(s -> s instanceof DictionarySchema);\n+\n+                ObjectSchema firstParentComplexSchema = null;\n+                for (Schema parent : compositeType.getParents().getImmediate()) {\n+                    if (parent instanceof ObjectSchema) {\n+                        if (firstParentComplexSchema == null) {\n+                            firstParentComplexSchema = (ObjectSchema) parent;\n+                        } else {\n+                            parentsNeedFlatten.add((ObjectSchema) parent);\n+                        }\n                     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMjQ1NA=="}, "originalCommit": {"oid": "1426f10cb8774cd3182769668b6e5e32a808f0c8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ0MTQzNA==", "bodyText": "JsonUnwrapper should do (however even when I do not add this, the serialization/de-serialization of the properties under composition still works...).\nHowever the complete task would affect quite much to ClientModel and ModelTemplate, since the currently ModelTemplate and ClientModelProperty appears not able to handle the properties from composition.\nI will delay the implementation of composition to a future task.", "url": "https://github.com/Azure/autorest.java/pull/528#discussion_r389441434", "createdAt": "2020-03-09T02:42:54Z", "author": {"login": "weidongxu-microsoft"}, "path": "javagen/src/main/java/com/azure/autorest/mapper/ModelMapper.java", "diffHunk": "@@ -46,31 +47,46 @@ public ClientModel map(ObjectSchema compositeType) {\n \n             String parentModel = null;\n             boolean hasAdditionalProperties = false;\n+            List<ObjectSchema> parentsNeedFlatten = new ArrayList<>();\n             if (compositeType.getParents() != null && compositeType.getParents().getImmediate() != null) {\n-                if (!(compositeType.getParents().getImmediate().get(0) instanceof DictionarySchema)) {\n-//                ComplexSchema baseSchema = compositeType.getParents().getImmediate().get(0);\n-//                if (baseSchema instanceof ObjectSchema) {\n-//                    parentModel = map((ObjectSchema) baseSchema);\n-//                    serviceModels.addModel(parentModel);\n-//                } else {\n-//                    throw new RuntimeException(\"Wait what? How? Parent is not an object but a \" + baseSchema.getClass() + \"?\");\n-//                }\n-                    ComplexSchema parentComplexSchema = compositeType.getParents().getImmediate().get(0);\n-                    if (parentComplexSchema instanceof ObjectSchema) {\n-                        ClassType parentType = objectMapper.map((ObjectSchema) parentComplexSchema);\n-                        parentModel = parentType.getName();\n-                        modelImports.add(parentType.getPackage() + \".\" + parentModel);\n-                    } else {\n-                        parentModel = compositeType.getParents().getImmediate().get(0).getLanguage().getJava().getName();\n+                hasAdditionalProperties = compositeType.getParents().getImmediate().stream()\n+                        .anyMatch(s -> s instanceof DictionarySchema);\n+\n+                ObjectSchema firstParentComplexSchema = null;\n+                for (Schema parent : compositeType.getParents().getImmediate()) {\n+                    if (parent instanceof ObjectSchema) {\n+                        if (firstParentComplexSchema == null) {\n+                            firstParentComplexSchema = (ObjectSchema) parent;\n+                        } else {\n+                            parentsNeedFlatten.add((ObjectSchema) parent);\n+                        }\n                     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMjQ1NA=="}, "originalCommit": {"oid": "1426f10cb8774cd3182769668b6e5e32a808f0c8"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3135, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}