{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NDA5MDc2", "number": 652, "title": "support pagination with 1st page LRO", "bodyText": "fix #638\ngenerated code\n    @ServiceMethod(returns = ReturnType.SINGLE)\n    public Mono<PagedResponse<SiteInner>> changeVnetSinglePageAsync(\n        String resourceGroupName, String name, VirtualNetworkProfile vnetInfo, Context context) {\n        if (this.client.getEndpoint() == null) {\n            return Mono\n                .error(\n                    new IllegalArgumentException(\n                        \"Parameter this.client.getEndpoint() is required and cannot be null.\"));\n        }\n        if (resourceGroupName == null) {\n            return Mono\n                .error(new IllegalArgumentException(\"Parameter resourceGroupName is required and cannot be null.\"));\n        }\n        if (name == null) {\n            return Mono.error(new IllegalArgumentException(\"Parameter name is required and cannot be null.\"));\n        }\n        if (this.client.getSubscriptionId() == null) {\n            return Mono\n                .error(\n                    new IllegalArgumentException(\n                        \"Parameter this.client.getSubscriptionId() is required and cannot be null.\"));\n        }\n        if (vnetInfo == null) {\n            return Mono.error(new IllegalArgumentException(\"Parameter vnetInfo is required and cannot be null.\"));\n        } else {\n            vnetInfo.validate();\n        }\n        context = this.client.mergeContext(context);\n        Mono<Response<Flux<ByteBuffer>>> mono =\n            service\n                .changeVnet(\n                    this.client.getEndpoint(),\n                    resourceGroupName,\n                    name,\n                    this.client.getSubscriptionId(),\n                    this.client.getApiVersion(),\n                    vnetInfo,\n                    context)\n                .cache();\n        return Mono\n            .zip(\n                mono,\n                this\n                    .client\n                    .<WebAppCollectionInner, WebAppCollectionInner>getLroResultAsync(\n                        mono, this.client.getHttpPipeline(), WebAppCollectionInner.class, WebAppCollectionInner.class)\n                    .last()\n                    .flatMap(this.client::getLroFinalResultOrError))\n            .map(\n                res ->\n                    new PagedResponseBase<>(\n                        res.getT1().getRequest(),\n                        res.getT1().getStatusCode(),\n                        res.getT1().getHeaders(),\n                        res.getT2().value(),\n                        res.getT2().nextLink(),\n                        null));\n    }", "createdAt": "2020-07-10T12:22:25Z", "url": "https://github.com/Azure/autorest.java/pull/652", "merged": true, "mergeCommit": {"oid": "3102ecc80b9bb225f3ba5ea9a8171bb243a0cd6b"}, "closed": true, "closedAt": "2020-07-13T01:57:13Z", "author": {"login": "weidongxu-microsoft"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcziYQOgH2gAyNDQ3NDA5MDc2OmY5ZGE4YjI1MDQwMWViOTg1ZjZkYmFlNTc1ZTVmZDQ4OWEyZTI1ZDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczixTvgFqTQ0NjM1OTI5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f9da8b250401eb985f6dbae575e5fd489a2e25d6", "author": {"user": {"login": "weidongxu-microsoft", "name": "Weidong Xu"}}, "url": "https://github.com/Azure/autorest.java/commit/f9da8b250401eb985f6dbae575e5fd489a2e25d6", "committedDate": "2020-07-10T11:59:29Z", "message": "support pagination with 1st page LRO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fadf469d351bcfdd89f624e72eaa3fd50803ca24", "author": {"user": {"login": "weidongxu-microsoft", "name": "Weidong Xu"}}, "url": "https://github.com/Azure/autorest.java/commit/fadf469d351bcfdd89f624e72eaa3fd50803ca24", "committedDate": "2020-07-10T12:16:28Z", "message": "fix bug"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MzU5Mjkw", "url": "https://github.com/Azure/autorest.java/pull/652#pullrequestreview-446359290", "createdAt": "2020-07-10T12:26:50Z", "commit": {"oid": "fadf469d351bcfdd89f624e72eaa3fd50803ca24"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoyNjo1MFrOGv1ZDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoyNjo1MFrOGv1ZDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMTAyMQ==", "bodyText": "unrelated bug fix", "url": "https://github.com/Azure/autorest.java/pull/652#discussion_r452811021", "createdAt": "2020-07-10T12:26:50Z", "author": {"login": "weidongxu-microsoft"}, "path": "javagen/src/main/java/com/azure/autorest/template/ClientMethodTemplate.java", "diffHunk": "@@ -385,7 +385,7 @@ public final void write(ClientMethod clientMethod, JavaType typeBlock) {\n                 typeBlock.publicMethod(clientMethod.getDeclaration(), function -> {\n                     AddOptionalVariables(function, clientMethod, restAPIMethod.getParameters(), settings);\n                     if (clientMethod.getReturnValue().getType() == ClassType.InputStream) {\n-                        function.line(\"Iterator<ByteBufferBackedInputStream> iterator = %s(%S).map(ByteBufferBackedInputStream::new).toStream().iterator();\",\n+                        function.line(\"Iterator<ByteBufferBackedInputStream> iterator = %s(%s).map(ByteBufferBackedInputStream::new).toStream().iterator();\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fadf469d351bcfdd89f624e72eaa3fd50803ca24"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1962, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}