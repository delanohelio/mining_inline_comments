{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4OTY5MzU1", "number": 686, "title": "Instead of ServiceClient, taking ServiceClient.Builder from Client builder, expose CredentailInterceptor in Client builder", "bodyText": "", "createdAt": "2020-08-17T17:29:37Z", "url": "https://github.com/Azure/autorest.java/pull/686", "merged": true, "mergeCommit": {"oid": "75f11d6c25196a7b3cbf7d74ffd600a6109202fb"}, "closed": true, "closedAt": "2020-08-17T21:50:57Z", "author": {"login": "anuchandy"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc_12apgH2gAyNDY4OTY5MzU1OmY4M2M4MmE2NzAwMzkyNDEyODZhNzNhNDdiY2RkN2RhNjA2MjlmNDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_3Pc5AFqTQ2ODc0NjE4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f83c82a670039241286a73a47bcdd7da60629f48", "author": {"user": {"login": "anuchandy", "name": "Anu Thomas Chandy"}}, "url": "https://github.com/Azure/autorest.java/commit/f83c82a670039241286a73a47bcdd7da60629f48", "committedDate": "2020-08-17T17:27:43Z", "message": "Instead of ServiceClient, taking ServiceClient.Builder from Client builder, expose CredentailInterceptor in Client builder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4NzQ2MTgx", "url": "https://github.com/Azure/autorest.java/pull/686#pullrequestreview-468746181", "createdAt": "2020-08-17T18:44:45Z", "commit": {"oid": "f83c82a670039241286a73a47bcdd7da60629f48"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo0NDo0NVrOHB2pTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODo0OToxMFrOHB2yPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwNTkzMg==", "bodyText": "Honestly, I don't like this. Can we do it right first time rather than \"fix\" it later?", "url": "https://github.com/Azure/autorest.java/pull/686#discussion_r471705932", "createdAt": "2020-08-17T18:44:45Z", "author": {"login": "JianpingChen"}, "path": "androidgen/src/main/java/com/azure/autorest/android/template/AndroidServiceClientBuilderTemplate.java", "diffHunk": "@@ -197,4 +232,133 @@ protected String primaryBuildMethodName(JavaSettings settings) {\n                 ? \"buildInnerClient\"\n                 : \"buildClient\";\n     }\n+\n+    private List<ClientMethodParameter> commonPropertiesFromCtr(final Constructor constructor) {\n+        return constructor.getParameters()\n+                .stream()\n+                .map(p -> {\n+                    if (p.getWireType() == ClassType.AndroidRestClient) {\n+                        return new ClientMethodParameter.Builder()\n+                                .description(\"The Azure Core generic ServiceClient Builder.\")\n+                                .isFinal(false)\n+                                .wireType(ClassType.AndroidRestClientBuilder)\n+                                .name(\"serviceClientBuilder\")\n+                                .isRequired(true)\n+                                .isConstant(false)\n+                                .fromClient(true)\n+                                .annotations(new ArrayList<>())\n+                                .defaultValue(\"new ServiceClient.Builder()\")\n+                                .build();\n+                    } else {\n+                        return p;\n+                    }\n+                }).collect(Collectors.toList());\n+    }\n+\n+    private ClientMethodParameter credentialInterceptorParameter() {\n+        return new ClientMethodParameter.Builder()\n+                .description(\"The Interceptor to set intercept request and set credentials.\")\n+                .isFinal(false)\n+                .wireType(ClassType.AndroidOkHttpInterceptor)\n+                .name(\"credentialInterceptor\")\n+                .isRequired(true)\n+                .isConstant(false)\n+                .fromClient(true)\n+                .annotations(new ArrayList<>())\n+                .build();\n+    }\n+\n+    private static void writeBuilderProperty(JavaSettings settings,\n+                                      JavaClass classBlock,\n+                                      String builderName,\n+                                      String propDescription,\n+                                      String propName,\n+                                      IType propType) {\n+        classBlock.blockComment(settings.getMaximumJavadocCommentWidth(), comment ->\n+        {\n+            comment.line(propDescription);\n+        });\n+        classBlock.privateMemberVariable(String.format(\"%1$s %2$s\", propType, propName));\n+\n+        classBlock.javadocComment(comment ->\n+        {\n+            comment.description(String.format(\"Sets %1$s\", propDescription));\n+            comment.param(propName, String.format(\"the %1$s value.\", propName));\n+            comment.methodReturns(String.format(\"the %1$s\", builderName));\n+        });\n+        classBlock.publicMethod(String.format(\"%1$s %2$s(%3$s %4$s)\",\n+                builderName,\n+                CodeNamer.toCamelCase(propName),\n+                propType,\n+                propName), function ->\n+        {\n+            function.line(String.format(\"this.%1$s = %2$s;\", propName, propName));\n+            function.methodReturn(\"this\");\n+        });\n+    }\n+\n+    private void fixImportForBuilderParameters(List<ClientMethodParameter> parameters, Set<String> imports) {\n+        parameters.stream()\n+                .forEach(p -> {\n+                    fixImportIfBuilderParameter(p, imports);\n+                });\n+    }\n+\n+    private void fixImportIfBuilderParameter(ClientMethodParameter parameter, Set<String> imports) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83c82a670039241286a73a47bcdd7da60629f48"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwNzA0Nw==", "bodyText": "Ideally, all properties should be handled the same way.", "url": "https://github.com/Azure/autorest.java/pull/686#discussion_r471707047", "createdAt": "2020-08-17T18:46:49Z", "author": {"login": "JianpingChen"}, "path": "androidgen/src/main/java/com/azure/autorest/android/template/AndroidServiceClientBuilderTemplate.java", "diffHunk": "@@ -120,25 +127,53 @@ public void write(ServiceClient serviceClient, JavaFile javaFile) {\n             });\n             classBlock.method(visibility, null, String.format(\"%1$s %2$s()\", buildReturnType, buildMethodName), function ->\n             {\n-                for (ServiceClientProperty serviceClientProperty : Stream.concat(serviceClient.getProperties().stream().filter(p -> !p.isReadOnly()), commonProperties.stream()).collect(Collectors.toList())) {\n-                    if (serviceClientProperty.getDefaultValueExpression() != null) {\n-                        function.ifBlock(String.format(\"%1$s == null\", serviceClientProperty.getName()), ifBlock ->\n-                        {\n-                            function.line(String.format(\"this.%1$s = %2$s;\", serviceClientProperty.getName(), serviceClientProperty.getDefaultValueExpression()));\n+                final List<String> constructorArgsSet1 = new ArrayList<>();\n+                serviceClient.getProperties()\n+                        .stream()\n+                        .filter(p -> !p.isReadOnly())\n+                        .forEach(p -> {\n+                            // 1. Collect ServiceClient Ctr args.\n+                            constructorArgsSet1.add(p.getName());\n+                            // 2. Set default value for ServiceClient properties whose builder setters are not called by the app.\n+                            if (p.getDefaultValueExpression() != null) {\n+                                function.ifBlock(String.format(\"%1$s == null\", p.getName()), ifBlock ->\n+                                {\n+                                    function.line(\"this.%1$s = %2$s;\", p.getName(), p.getDefaultValueExpression());\n+                                });\n+                            }\n                         });\n-                    }\n-                }\n \n-                // additional service client properties in constructor arguments\n-                String constructorArgs = serviceClient.getProperties().stream()\n-                        .filter(p -> !p.isReadOnly())\n-                        .map(ServiceClientProperty::getName)\n+                final List<String> constructorArgsSet2 = new ArrayList<>();\n+                commonProperties.stream()\n+                        .filter(p -> p.getWireType() != ClassType.AndroidOkHttpInterceptor)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83c82a670039241286a73a47bcdd7da60629f48"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwODIyMQ==", "bodyText": "Could have done this when the constructor is defined", "url": "https://github.com/Azure/autorest.java/pull/686#discussion_r471708221", "createdAt": "2020-08-17T18:49:10Z", "author": {"login": "JianpingChen"}, "path": "androidgen/src/main/java/com/azure/autorest/android/template/AndroidServiceClientBuilderTemplate.java", "diffHunk": "@@ -197,4 +232,133 @@ protected String primaryBuildMethodName(JavaSettings settings) {\n                 ? \"buildInnerClient\"\n                 : \"buildClient\";\n     }\n+\n+    private List<ClientMethodParameter> commonPropertiesFromCtr(final Constructor constructor) {\n+        return constructor.getParameters()\n+                .stream()\n+                .map(p -> {\n+                    if (p.getWireType() == ClassType.AndroidRestClient) {\n+                        return new ClientMethodParameter.Builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83c82a670039241286a73a47bcdd7da60629f48"}, "originalPosition": 199}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1869, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}