{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3OTEyNTY0", "number": 782, "title": "[Autorest.Android]: Add Body-Integer Test with test server", "bodyText": "Set up Android test framework\nAdd tests with sync clients for body-string and body-integer", "createdAt": "2020-11-09T17:12:27Z", "url": "https://github.com/Azure/autorest.java/pull/782", "merged": true, "mergeCommit": {"oid": "735be16a95d4b6e6baa7c7f03eb0fdc02123ec9e"}, "closed": true, "closedAt": "2020-11-09T18:59:28Z", "author": {"login": "JianpingChen"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZSqBeAH2gAyNTE3OTEyNTY0OjE4YWFjMTM1YzJmMjYwNWI4NWFiYjMyY2I0MjgzMzY5NjRkZjhjZDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABda47YygH2gAyNTE3OTEyNTY0OmEzNzU1Zjc5YmUzN2I5NWMyYzNkOTNmZmFhNWNlZmM4ZWEwZGJhM2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "18aac135c2f2605b85abb32cb428336964df8cd5", "author": {"user": null}, "url": "https://github.com/Azure/autorest.java/commit/18aac135c2f2605b85abb32cb428336964df8cd5", "committedDate": "2020-11-04T19:09:32Z", "message": "Set up an Android testable library"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b275e76320d1c7a5166bf17d09a83f8b4d842718", "author": {"user": null}, "url": "https://github.com/Azure/autorest.java/commit/b275e76320d1c7a5166bf17d09a83f8b4d842718", "committedDate": "2020-11-04T21:42:19Z", "message": "Got first test to run in emulator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b026e74c37e26b876ca2821e71a7ceca5a0fccbc", "author": {"user": null}, "url": "https://github.com/Azure/autorest.java/commit/b026e74c37e26b876ca2821e71a7ceca5a0fccbc", "committedDate": "2020-11-04T23:40:58Z", "message": "Add one real test; Add a Readme file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b136e4a778194fb4e5fec9a924a5106d32e5412", "author": {"user": null}, "url": "https://github.com/Azure/autorest.java/commit/1b136e4a778194fb4e5fec9a924a5106d32e5412", "committedDate": "2020-11-05T17:33:42Z", "message": "Update IP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6365a25d32a3988dbb444a0fc8eb7664c94bb8d", "author": {"user": null}, "url": "https://github.com/Azure/autorest.java/commit/a6365a25d32a3988dbb444a0fc8eb7664c94bb8d", "committedDate": "2020-11-06T22:17:10Z", "message": "Add body-integer tests; Fix problems found from body-integer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDk0ODM3", "url": "https://github.com/Azure/autorest.java/pull/782#pullrequestreview-526494837", "createdAt": "2020-11-09T17:36:53Z", "commit": {"oid": "a6365a25d32a3988dbb444a0fc8eb7664c94bb8d"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzozNjo1M1rOHv6Aag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzozOTowOFrOHv6Fzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5NTQ5OA==", "bodyText": "looks like we are expecting the putNullWithRestResponse call to succeeded with 200, if so do we need the try block for NPE?", "url": "https://github.com/Azure/autorest.java/pull/782#discussion_r519995498", "createdAt": "2020-11-09T17:36:53Z", "author": {"login": "anuchandy"}, "path": "android-tests/app/src/androidTest/java/com/azure/autoresttest/BodyStringSyncClientTests.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package com.azure.autoresttest;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.util.Base64Url;\n+import com.azure.androidtest.fixtures.bodystring.StringOperationClient;\n+\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class BodyStringSyncClientTests {\n+    private static StringOperationClient client;\n+\n+    @BeforeClass\n+    public static void setup() {\n+        client = new StringOperationClient.Builder().host(TestConstants.TestServerRootUrl).build();\n+    }\n+\n+    @Test\n+    public void getNull() throws Exception {\n+        Assert.assertNull(client.getNullWithRestResponse().getValue());\n+    }\n+\n+    @Test\n+    public void putNull() throws Exception {\n+        try {\n+            Response<Void> putResult = client.putNullWithRestResponse(null);\n+            assertEquals(200, putResult.getStatusCode());\n+        } catch (Exception ex) {\n+            Assert.assertEquals(NullPointerException.class, ex.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6365a25d32a3988dbb444a0fc8eb7664c94bb8d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5Njg3OA==", "bodyText": "the same question as above, we're expecting this to succeed, so try block may not be needed.", "url": "https://github.com/Azure/autorest.java/pull/782#discussion_r519996878", "createdAt": "2020-11-09T17:39:08Z", "author": {"login": "anuchandy"}, "path": "android-tests/app/src/androidTest/java/com/azure/autoresttest/BodyStringSyncClientTests.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package com.azure.autoresttest;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import com.azure.android.core.http.Response;\n+import com.azure.android.core.http.exception.HttpResponseException;\n+import com.azure.android.core.util.Base64Url;\n+import com.azure.androidtest.fixtures.bodystring.StringOperationClient;\n+\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class BodyStringSyncClientTests {\n+    private static StringOperationClient client;\n+\n+    @BeforeClass\n+    public static void setup() {\n+        client = new StringOperationClient.Builder().host(TestConstants.TestServerRootUrl).build();\n+    }\n+\n+    @Test\n+    public void getNull() throws Exception {\n+        Assert.assertNull(client.getNullWithRestResponse().getValue());\n+    }\n+\n+    @Test\n+    public void putNull() throws Exception {\n+        try {\n+            Response<Void> putResult = client.putNullWithRestResponse(null);\n+            assertEquals(200, putResult.getStatusCode());\n+        } catch (Exception ex) {\n+            Assert.assertEquals(NullPointerException.class, ex.getClass());\n+        }\n+    }\n+\n+    @Test\n+    public void getEmpty() throws Exception {\n+        String result = client.getEmptyWithRestResponse().getValue();\n+        Assert.assertEquals(\"\", result);\n+    }\n+\n+    @Test\n+    public void putEmpty() throws Exception {\n+        Response<Void> putResult = client.putEmptyWithRestResponse();\n+        assertEquals(200, putResult.getStatusCode());\n+    }\n+\n+    @Test\n+    public void getMbcs() throws Exception {\n+        String result = client.getMbcsWithRestResponse().getValue();\n+        String expected = \"\u554a\u9f44\u4e02\u72db\u72dc\uf9f1\uf92c\uf9f1\ufa0c\ufa29\u02ca\u301e\u3021\uffe4\u2121\u3231\u2010\u30fc\ufe61\ufe62\ufe6b\u3001\u3013\u2170\u2179\u2488\u20ac\u3220\u3229\u2160\u216b\uff01\uffe3\u3041\u3093\u30a1\u30f6\u0391\ufe34\u0410\u042f\u0430\u044f\u0101\u0261\u3105\u3129\u2500\u254b\ufe35\ufe44\ufe3b\ufe31\ufe33\ufe34\u2170\u2179\u0251\\uE7C7\u0261\u3007\u303e\u2ffb\u2e81\\uE843\u4723\\uE864\u20ac\";\n+        Assert.assertEquals(expected, result);\n+    }\n+\n+    @Test\n+    public void putMbcs() throws Exception {\n+        Response<Void> putResult = client.putMbcsWithRestResponse();\n+        assertEquals(200, putResult.getStatusCode());\n+    }\n+\n+    @Test\n+    public void getWhitespace() throws Exception {\n+        String result = client.getWhitespaceWithRestResponse().getValue();\n+        Assert.assertEquals(\"    Now is the time for all good men to come to the aid of their country    \", result);\n+    }\n+\n+    @Test\n+    public void putWhitespace() throws Exception {\n+        Response<Void> putResult = client.putWhitespaceWithRestResponse();\n+        assertEquals(200, putResult.getStatusCode());\n+    }\n+\n+    @Test\n+    public void getNotProvided() throws Exception {\n+        try {\n+            client.getNotProvidedWithRestResponse();\n+        } catch (Exception ex) {\n+            Assert.assertEquals(HttpResponseException.class, ex.getClass());\n+            assertTrue(ex.getMessage().contains(\"JsonMappingException\"));\n+        }\n+    }\n+\n+    @Test\n+    public void getBase64Encoded() throws Exception {\n+        byte[] result = client.getBase64EncodedWithRestResponse().getValue();\n+        Assert.assertEquals(\"a string that gets encoded with base64\", new String(result, StandardCharsets.UTF_8));\n+    }\n+\n+    // copied from azure-core\n+    private static String unquote(String string) {\n+        if (string != null && !string.isEmpty()) {\n+            final char firstCharacter = string.charAt(0);\n+            if (firstCharacter == '\\\"' || firstCharacter == '\\'') {\n+                final int base64UrlStringLength = string.length();\n+                final char lastCharacter = string.charAt(base64UrlStringLength - 1);\n+                if (lastCharacter == firstCharacter) {\n+                    string = string.substring(1, base64UrlStringLength - 1);\n+                }\n+            }\n+        }\n+        return string;\n+    }\n+\n+    @Test\n+    public void getBase64UrlEncoded() throws Exception {\n+        byte[] result = client.getBase64EncodedWithRestResponse().getValue();\n+        String resultString = new String(result);\n+        Assert.assertEquals(\"a string that gets encoded with base64\", resultString);\n+    }\n+\n+    @Test\n+    public void getNullBase64UrlEncoded() throws Exception {\n+        Base64Url result = client.getNullBase64UrlEncodedWithRestResponse().getValue();\n+        Assert.assertNull(result);\n+    }\n+\n+    @Test\n+    public void putBase64UrlEncoded() throws Exception {\n+        try {\n+            Response<Void> putResult = client.putBase64UrlEncodedWithRestResponse(new Base64Url(\"http://myhost.com/path?email=a.b@c.com&value=a%20B\"));\n+            assertEquals(200, putResult.getStatusCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6365a25d32a3988dbb444a0fc8eb7664c94bb8d"}, "originalPosition": 129}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcb5ea6e027bd908e73f36507f0b05391b5f945c", "author": {"user": null}, "url": "https://github.com/Azure/autorest.java/commit/dcb5ea6e027bd908e73f36507f0b05391b5f945c", "committedDate": "2020-11-09T18:13:40Z", "message": "Fix typo in Readme.md in android-tests folder; Minor fix for body-string test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3755f79be37b95c2c3d93ffaa5cefc8ea0dba3f", "author": {"user": null}, "url": "https://github.com/Azure/autorest.java/commit/a3755f79be37b95c2c3d93ffaa5cefc8ea0dba3f", "committedDate": "2020-11-09T18:18:49Z", "message": "More fix for body-string in exception cases"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1910, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}