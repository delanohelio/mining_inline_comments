{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNzUzMjg1", "number": 804, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo1MjowNVrOE7AiVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjozNzozM1rOE7B9yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzEwMjI5OnYy", "diffSide": "RIGHT", "path": "customization-tests/swagger/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo1MjowNVrOH2Zz9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjo1MDoxNFrOH21MRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwODA1NA==", "bodyText": "Would the user be able to write this code in a README without the help of compilable code?", "url": "https://github.com/Azure/autorest.java/pull/804#discussion_r526808054", "createdAt": "2020-11-19T11:52:05Z", "author": {"login": "srnagar"}, "path": "customization-tests/swagger/README.md", "diffHunk": "@@ -33,6 +33,40 @@ license-header: MICROSOFT_MIT_SMALL\n add-context-parameter: true\n models-subpackage: implementation.models\n context-client-method-parameter: true\n-customization-jar-path: target/bodycomplex-customization-1.0.0-beta.1.jar\n-customization-class: fixtures.bodycomplex.customization.BodyComplexCustomization\n+customization-class: BodyComplexCustomization\n ```\n+\n+### Customization\n+```java\n+public class BodyComplexCustomization extends Customization {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f21c2e5d31b77df921ad084d49786ba277bb739"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1NjY0NA==", "bodyText": "Without an IDE it's definitely harder to write this. But that's a tradeoff users will have to make. They can opt for easier customization coding but have to set up a maven project, or opt for easier setup but lose IDE features.", "url": "https://github.com/Azure/autorest.java/pull/804#discussion_r527256644", "createdAt": "2020-11-19T22:50:14Z", "author": {"login": "jianghaolu"}, "path": "customization-tests/swagger/README.md", "diffHunk": "@@ -33,6 +33,40 @@ license-header: MICROSOFT_MIT_SMALL\n add-context-parameter: true\n models-subpackage: implementation.models\n context-client-method-parameter: true\n-customization-jar-path: target/bodycomplex-customization-1.0.0-beta.1.jar\n-customization-class: fixtures.bodycomplex.customization.BodyComplexCustomization\n+customization-class: BodyComplexCustomization\n ```\n+\n+### Customization\n+```java\n+public class BodyComplexCustomization extends Customization {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwODA1NA=="}, "originalCommit": {"oid": "8f21c2e5d31b77df921ad084d49786ba277bb739"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzExMTU0OnYy", "diffSide": "RIGHT", "path": "customization-tests/swagger/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo1NDozNlrOH2Z5hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjo0ODowN1rOH21IkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwOTQ3OQ==", "bodyText": "How does the user specify import statements if this code requires some additional classes that have to be imported?", "url": "https://github.com/Azure/autorest.java/pull/804#discussion_r526809479", "createdAt": "2020-11-19T11:54:36Z", "author": {"login": "srnagar"}, "path": "customization-tests/swagger/README.md", "diffHunk": "@@ -33,6 +33,40 @@ license-header: MICROSOFT_MIT_SMALL\n add-context-parameter: true\n models-subpackage: implementation.models\n context-client-method-parameter: true\n-customization-jar-path: target/bodycomplex-customization-1.0.0-beta.1.jar\n-customization-class: fixtures.bodycomplex.customization.BodyComplexCustomization\n+customization-class: BodyComplexCustomization\n ```\n+\n+### Customization\n+```java\n+public class BodyComplexCustomization extends Customization {\n+    @Override\n+    public void customize(LibraryCustomization customization) {\n+        PackageCustomization implementationModels = customization.getPackage(\"fixtures.bodycomplex.implementation.models\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f21c2e5d31b77df921ad084d49786ba277bb739"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1NTY5Ng==", "bodyText": "The users don't have to specify the imports if they are not ambiguous. Otherwise they could write import aa.bbb.ccc; above the class definition. The code here is simply injected into a maven project that has customization-base as a dependency.", "url": "https://github.com/Azure/autorest.java/pull/804#discussion_r527255696", "createdAt": "2020-11-19T22:48:07Z", "author": {"login": "jianghaolu"}, "path": "customization-tests/swagger/README.md", "diffHunk": "@@ -33,6 +33,40 @@ license-header: MICROSOFT_MIT_SMALL\n add-context-parameter: true\n models-subpackage: implementation.models\n context-client-method-parameter: true\n-customization-jar-path: target/bodycomplex-customization-1.0.0-beta.1.jar\n-customization-class: fixtures.bodycomplex.customization.BodyComplexCustomization\n+customization-class: BodyComplexCustomization\n ```\n+\n+### Customization\n+```java\n+public class BodyComplexCustomization extends Customization {\n+    @Override\n+    public void customize(LibraryCustomization customization) {\n+        PackageCustomization implementationModels = customization.getPackage(\"fixtures.bodycomplex.implementation.models\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwOTQ3OQ=="}, "originalCommit": {"oid": "8f21c2e5d31b77df921ad084d49786ba277bb739"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMzMzNjQxOnYy", "diffSide": "RIGHT", "path": "postprocessor/src/main/java/com/azure/autorest/postprocessor/Postprocessor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjozNzozM1rOH2cJhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMzoyNDo0MFrOIOrK6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg0NjM0MQ==", "bodyText": "Could there be a security risk if jarUrl can be loaded from remote?", "url": "https://github.com/Azure/autorest.java/pull/804#discussion_r526846341", "createdAt": "2020-11-19T12:37:33Z", "author": {"login": "weidongxu-microsoft"}, "path": "postprocessor/src/main/java/com/azure/autorest/postprocessor/Postprocessor.java", "diffHunk": "@@ -26,16 +40,25 @@ public Postprocessor(Connection connection, String plugin, String sessionId) {\n     super(connection, plugin, sessionId);\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n   @Override\n   public boolean processInternal() {\n     List<String> files = listInputs();\n     Map<String, String> fileContents = files.stream().collect(Collectors.toMap(f -> f, this::readFile));\n \n+    String jarPath = JavaSettings.getInstance().getCustomizationJarPath();\n+    String className = JavaSettings.getInstance().getCustomizationClass();\n+    Map.Entry<String, String> readme = getReadme();\n+\n+    if (className == null || (jarPath == null && readme == null)) {\n+      logger.warn(\"Must provide a JAR path or a README.md config containing the customization class {}\", className);\n+      return false;\n+    }\n+\n     try {\n       //Step 1: post process\n-      String jarPath = JavaSettings.getInstance().getCustomizationJarPath();\n-      String className = JavaSettings.getInstance().getCustomizationClass();\n-      if (jarPath != null && className != null) {\n+      Class<? extends Customization> customizationClass;\n+      if (jarPath != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f21c2e5d31b77df921ad084d49786ba277bb739"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzMyNjQ4NQ==", "bodyText": "Can you elaborate on the risk here? It can be loaded from anywhere over the Internet, but it's passed in by the user and it's the user's responsibility to make sure they don't load random jars from untrusted sources.", "url": "https://github.com/Azure/autorest.java/pull/804#discussion_r527326485", "createdAt": "2020-11-20T00:58:33Z", "author": {"login": "jianghaolu"}, "path": "postprocessor/src/main/java/com/azure/autorest/postprocessor/Postprocessor.java", "diffHunk": "@@ -26,16 +40,25 @@ public Postprocessor(Connection connection, String plugin, String sessionId) {\n     super(connection, plugin, sessionId);\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n   @Override\n   public boolean processInternal() {\n     List<String> files = listInputs();\n     Map<String, String> fileContents = files.stream().collect(Collectors.toMap(f -> f, this::readFile));\n \n+    String jarPath = JavaSettings.getInstance().getCustomizationJarPath();\n+    String className = JavaSettings.getInstance().getCustomizationClass();\n+    Map.Entry<String, String> readme = getReadme();\n+\n+    if (className == null || (jarPath == null && readme == null)) {\n+      logger.warn(\"Must provide a JAR path or a README.md config containing the customization class {}\", className);\n+      return false;\n+    }\n+\n     try {\n       //Step 1: post process\n-      String jarPath = JavaSettings.getInstance().getCustomizationJarPath();\n-      String className = JavaSettings.getInstance().getCustomizationClass();\n-      if (jarPath != null && className != null) {\n+      Class<? extends Customization> customizationClass;\n+      if (jarPath != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg0NjM0MQ=="}, "originalCommit": {"oid": "8f21c2e5d31b77df921ad084d49786ba277bb739"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODI5NjkxNQ==", "bodyText": "Actually, I do not exactly know. Theoretically someone can modify the url hiding it among other changes in a submitted PR (to a lib that uses autorest.java), trick dev to test the PR and hence run the jar, and the jar would grab env and pass file from local disk, upload them to remote site. Will it happen? No idea. The risk probably is not significant at this stage. Does it worth some mitigation e.g. SecurityManager, or just disable remote jar? Not sure.", "url": "https://github.com/Azure/autorest.java/pull/804#discussion_r528296915", "createdAt": "2020-11-22T07:47:05Z", "author": {"login": "weidongxu-microsoft"}, "path": "postprocessor/src/main/java/com/azure/autorest/postprocessor/Postprocessor.java", "diffHunk": "@@ -26,16 +40,25 @@ public Postprocessor(Connection connection, String plugin, String sessionId) {\n     super(connection, plugin, sessionId);\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n   @Override\n   public boolean processInternal() {\n     List<String> files = listInputs();\n     Map<String, String> fileContents = files.stream().collect(Collectors.toMap(f -> f, this::readFile));\n \n+    String jarPath = JavaSettings.getInstance().getCustomizationJarPath();\n+    String className = JavaSettings.getInstance().getCustomizationClass();\n+    Map.Entry<String, String> readme = getReadme();\n+\n+    if (className == null || (jarPath == null && readme == null)) {\n+      logger.warn(\"Must provide a JAR path or a README.md config containing the customization class {}\", className);\n+      return false;\n+    }\n+\n     try {\n       //Step 1: post process\n-      String jarPath = JavaSettings.getInstance().getCustomizationJarPath();\n-      String className = JavaSettings.getInstance().getCustomizationClass();\n-      if (jarPath != null && className != null) {\n+      Class<? extends Customization> customizationClass;\n+      if (jarPath != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg0NjM0MQ=="}, "originalCommit": {"oid": "8f21c2e5d31b77df921ad084d49786ba277bb739"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI1ODI4Mw==", "bodyText": "I think we should phase out passing in a separate jar - and use either the readme or a central location in the repo. So I'll not do too much here", "url": "https://github.com/Azure/autorest.java/pull/804#discussion_r552258283", "createdAt": "2021-01-05T23:24:40Z", "author": {"login": "jianghaolu"}, "path": "postprocessor/src/main/java/com/azure/autorest/postprocessor/Postprocessor.java", "diffHunk": "@@ -26,16 +40,25 @@ public Postprocessor(Connection connection, String plugin, String sessionId) {\n     super(connection, plugin, sessionId);\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n   @Override\n   public boolean processInternal() {\n     List<String> files = listInputs();\n     Map<String, String> fileContents = files.stream().collect(Collectors.toMap(f -> f, this::readFile));\n \n+    String jarPath = JavaSettings.getInstance().getCustomizationJarPath();\n+    String className = JavaSettings.getInstance().getCustomizationClass();\n+    Map.Entry<String, String> readme = getReadme();\n+\n+    if (className == null || (jarPath == null && readme == null)) {\n+      logger.warn(\"Must provide a JAR path or a README.md config containing the customization class {}\", className);\n+      return false;\n+    }\n+\n     try {\n       //Step 1: post process\n-      String jarPath = JavaSettings.getInstance().getCustomizationJarPath();\n-      String className = JavaSettings.getInstance().getCustomizationClass();\n-      if (jarPath != null && className != null) {\n+      Class<? extends Customization> customizationClass;\n+      if (jarPath != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg0NjM0MQ=="}, "originalCommit": {"oid": "8f21c2e5d31b77df921ad084d49786ba277bb739"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3006, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}