{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwODY1MDAw", "number": 743, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoyNzowNVrOEA46NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjozNTowMlrOEE8q-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzY3ODYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/J2V8.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoyNzowNVrOGcckag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoyNzowNVrOGcckag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4MTM4Ng==", "bodyText": "I'm unsure what will happen when you call executeScript (with promises) in a multithreaded environment.. In the graphviz bit I made sure to use a new environment. Maybe you could have a look, potentially create a junit test for it.", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r432481386", "createdAt": "2020-05-29T13:27:05Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/J2V8.java", "diffHunk": "@@ -107,4 +114,20 @@ public Object invoke(V8Object receiver, V8Array parameters) {\n \t\t\t}\n \t\t}, sender.getName());\n \t}\n+\n+\t@Override\n+\tpublic void setResultHandler(ResultHandler resultHandler) {\n+\t\tgetEngine().registerJavaMethod(new JavaVoidCallback() {\n+\t\t\t@Override\n+\t\t\tpublic void invoke(V8Object receiver, V8Array parameters) {\n+\t\t\t\tresultHandler.setResult(parameters.getString(0));\n+\t\t\t}\n+\t\t}, \"result\");\n+\t\tgetEngine().registerJavaMethod(new JavaVoidCallback() {\n+\t\t\t@Override\n+\t\t\tpublic void invoke(V8Object receiver, V8Array parameters) {\n+\t\t\t\tresultHandler.setError(parameters.getString(0));\n+\t\t\t}\n+\t\t}, \"error\");\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe7dcb2e99921bdf2d4a930a2a9d06d6ec41b87"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzY4MjY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/J2V8.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoyODoxMVrOGccnAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoyODoxMVrOGccnAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4MjA0OA==", "bodyText": "I dislike these spaces being added purely because your IDE likes it. There is a codestyle which we all have to follow.", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r432482048", "createdAt": "2020-05-29T13:28:11Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/J2V8.java", "diffHunk": "@@ -35,41 +37,46 @@\n \n \tprivate Logger log = LogUtil.getLogger(this);\n \tprivate V8 v8;\n+\tprivate String alias = null;\n \n \t@Override\n-\tpublic void startRuntime() {\n-\t\tstartRuntime(null, null);\n+\tpublic void setScriptAlias(String alias) {\n+\t\tthis.alias = alias;\n \t}\n \n-\t/**\n-\t * If path is null or empty, it will use the log.dir\n-\t * If the log.dir is relative it will turn it into an absolute path\n-\t */\n-\tpublic void startRuntime(String alias, String path) {\n-\t\tString directory = path;\n-\t\tif(StringUtils.isEmpty(directory)) {\n-\t\t\tdirectory = AppConstants.getInstance().getResolvedProperty(\"ibis.tmpdir\");\n-\t\t}\n-\t\tif(directory != null) {\n+\tprivate String getTempDirectory() {\n+\t\tString directory = AppConstants.getInstance().getResolvedProperty(\"ibis.tmpdir\");\n+\n+\t\tif (StringUtils.isNotEmpty(directory)) {\n \t\t\tFile file = new File(directory);\n \t\t\tif (!file.isAbsolute()) {\n \t\t\t\tString absPath = new File(\"\").getAbsolutePath();\n-\t\t\t\tif(absPath != null) {\n+\t\t\t\tif (absPath != null) {\n \t\t\t\t\tfile = new File(absPath, directory);\n \t\t\t\t}\n \t\t\t}\n-\t\t\tif(!file.exists()) {\n+\t\t\tif (!file.exists()) {\n \t\t\t\tfile.mkdirs();\n \t\t\t}\n \t\t\tString fileDir = file.getPath();\n-\t\t\tif(StringUtils.isEmpty(fileDir) || !file.isDirectory()) {\n-\t\t\t\tthrow new IllegalStateException(\"unknown or invalid path [\"+((StringUtils.isEmpty(fileDir))?\"NULL\":fileDir)+\"], unable to load J2V8 binaries\");\n+\t\t\tif (StringUtils.isEmpty(fileDir) || !file.isDirectory()) {\n+\t\t\t\tthrow new IllegalStateException(\"unknown or invalid path [\" + ((StringUtils.isEmpty(fileDir)) ? \"NULL\" : fileDir) + \"], unable to load J2V8 binaries\");\n \t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe7dcb2e99921bdf2d4a930a2a9d06d6ec41b87"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzY4NTcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoyODo1N1rOGccozA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzoyODo1N1rOGccozA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4MjUwOA==", "bodyText": "This needs to be configurable. J2V8 is by far much faster then nashorn. Nashorn should be a backup if the v8 engine can't be loaded", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r432482508", "createdAt": "2020-05-29T13:28:57Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java", "diffHunk": "@@ -157,7 +157,7 @@ private String getVisJsWrapper() {\n \tprivate static class Env {\n \t\tprotected Logger log = LogUtil.getLogger(this);\n \n-\t\tJ2V8 V8Instance = new J2V8();\n+\t\tJavascriptEngine<NashornScriptEngine> jsEngine = new Nashorn();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe7dcb2e99921bdf2d4a930a2a9d06d6ec41b87"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTM5ODEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/Nashorn.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODoxNDoxN1rOGgTacQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODoxNDoxN1rOGgTacQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyNTY4MQ==", "bodyText": "I think you can just use ScriptEngine here. There is nothing special/specific happening in the NashornScriptEngine class afaik.", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r436525681", "createdAt": "2020-06-08T08:14:17Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/Nashorn.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package nl.nn.adapterframework.extensions.javascript;\n+\n+import jdk.nashorn.api.scripting.NashornScriptEngine;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42c0a84a6d549eb97294613d060b2c275bf49a49"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTM5OTM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/Nashorn.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODoxNDozOFrOGgTbLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODoxNDozOFrOGgTbLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyNTg3MA==", "bodyText": "Don't forget to add a copyright notice :)", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r436525870", "createdAt": "2020-06-08T08:14:38Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/Nashorn.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package nl.nn.adapterframework.extensions.javascript;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42c0a84a6d549eb97294613d060b2c275bf49a49"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTQwMTg2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/Rhino.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODoxNTozM1rOGgTcxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODoxNTozM1rOGgTcxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyNjI3OQ==", "bodyText": "When you work on a class you have to update the copyright notice. And since we change name Integration Partners can be changed with WeAreFrank!", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r436526279", "createdAt": "2020-06-08T08:15:33Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/Rhino.java", "diffHunk": "@@ -15,6 +15,7 @@\n */\n package nl.nn.adapterframework.extensions.javascript;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42c0a84a6d549eb97294613d060b2c275bf49a49"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTQwMzcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/J2V8.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODoxNjowNFrOGgTd5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODoxNjowNFrOGgTd5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyNjU2NQ==", "bodyText": "When you work on a class you have to update the copyright notice. And since we change name Integration Partners can be changed with WeAreFrank!", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r436526565", "createdAt": "2020-06-08T08:16:04Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/J2V8.java", "diffHunk": "@@ -17,6 +17,8 @@\n \n import java.io.File;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42c0a84a6d549eb97294613d060b2c275bf49a49"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjIxODk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjoyNjo1NFrOGi4ffQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjoyNjo1NFrOGi4ffQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMDMzMw==", "bodyText": "geen log.dir, daar hebben we ibis.tmpdir voor.", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r439230333", "createdAt": "2020-06-12T06:26:54Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java", "diffHunk": "@@ -156,46 +153,59 @@ private String getVisJsWrapper() {\n \n \tprivate static class Env {\n \t\tprotected Logger log = LogUtil.getLogger(this);\n-\n-\t\tJ2V8 V8Instance = new J2V8();\n-\t\tfinal ResultHandler resultHandler = new ResultHandler();\n+\t\tprivate JavascriptEngine<?> jsEngine;\n+\t\tprivate ResultHandler resultHandler;\n \n \t\t/**\n \t\t * It's important to register the JS scripts under the same alias so it can be cached\n \t\t * Use the log.dir to extract the SO/DLL files into, make sure this is using an absolute path and not a relative one!!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0af1c993a8a121c7accac2cef7f0f6c075701c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjIyNDY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjoyOTozOFrOGi4jLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjoyOTozOFrOGi4jLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMTI3Nw==", "bodyText": "Hoezo 'same alias'? Snap er niks van. Je bedoelt vast niet dat je vijf scripts hebt die je allemaal hetzelfde noemt.", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r439231277", "createdAt": "2020-06-12T06:29:38Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/extensions/graphviz/GraphvizEngine.java", "diffHunk": "@@ -156,46 +153,59 @@ private String getVisJsWrapper() {\n \n \tprivate static class Env {\n \t\tprotected Logger log = LogUtil.getLogger(this);\n-\n-\t\tJ2V8 V8Instance = new J2V8();\n-\t\tfinal ResultHandler resultHandler = new ResultHandler();\n+\t\tprivate JavascriptEngine<?> jsEngine;\n+\t\tprivate ResultHandler resultHandler;\n \n \t\t/**\n \t\t * It's important to register the JS scripts under the same alias so it can be cached", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0af1c993a8a121c7accac2cef7f0f6c075701c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjIyNzY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/JavascriptEngine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjozMDo0N1rOGi4k6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjozMDo0N1rOGi4k6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMTcyMQ==", "bodyText": "Ik snap niet wat een alias is.", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r439231721", "createdAt": "2020-06-12T06:30:47Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/JavascriptEngine.java", "diffHunk": "@@ -29,6 +30,11 @@\n \n public interface JavascriptEngine<E> {\n \n+\t/**\n+\t * @param alias\t\ta string describing the source, such as a filename\n+\t */\n+\tvoid setScriptAlias(String alias);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0af1c993a8a121c7accac2cef7f0f6c075701c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjIzMjQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/Rhino.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjozMjozN1rOGi4nkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjozMjozN1rOGi4nkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMjQwMg==", "bodyText": "Wat doet deze default?", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r439232402", "createdAt": "2020-06-12T06:32:37Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/extensions/javascript/Rhino.java", "diffHunk": "@@ -24,25 +25,36 @@\n \n \tprivate Context cx;\n \tprivate Scriptable scope;\n+\tprivate String alias = \"jsScript\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0af1c993a8a121c7accac2cef7f0f6c075701c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjIzODAzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/extensions/javascript/NashornTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjozNTowMlrOGi4qpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODoxNToxNFrOGjNb1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMzE5MQ==", "bodyText": "Hier zou ik eigenlijk graag zien dat dit geimplementeerd was als:\nextends JavascriptEngineTest<NashhornEngine>", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r439233191", "createdAt": "2020-06-12T06:35:02Z", "author": {"login": "gvanbrakel"}, "path": "core/src/test/java/nl/nn/adapterframework/extensions/javascript/NashornTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.extensions.javascript;\n+\n+import nl.nn.adapterframework.extensions.graphviz.ResultHandler;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class NashornTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0af1c993a8a121c7accac2cef7f0f6c075701c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU3MzQ2Mg==", "bodyText": "Ja goed idee!", "url": "https://github.com/ibissource/iaf/pull/743#discussion_r439573462", "createdAt": "2020-06-12T18:15:14Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/extensions/javascript/NashornTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.extensions.javascript;\n+\n+import nl.nn.adapterframework.extensions.graphviz.ResultHandler;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class NashornTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIzMzE5MQ=="}, "originalCommit": {"oid": "ef0af1c993a8a121c7accac2cef7f0f6c075701c"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 356, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}