{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MDY5MDE2", "number": 543, "title": "Add type definitions to JSON schema generator", "bodyText": "As reported in #530.\nAttributes added to JSON schema:\n\nDataType\nFormat\nPattern\nEnumeration\nMaximum\nMinimum\nExclusiveMaximum\nExclusiveMinimum\nMaxLength\nMinLength\n\n**NOTE: Please see the comment at line 383 in XmlTypeToJsonSchemaConverter.java", "createdAt": "2020-03-26T10:02:19Z", "url": "https://github.com/ibissource/iaf/pull/543", "merged": true, "mergeCommit": {"oid": "bfe83136038c83c541dd56bdcdc641357d166771"}, "closed": true, "closedAt": "2020-03-26T13:45:29Z", "author": {"login": "Laurens-makel"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRLX3UgH2gAyMzk0MDY5MDE2OmM2ZTdmNjg0YzI5OTVjNDRiMWRmNzA0OTY1YTViNjU0YTk3NzU4NjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRcWw2AFqTM4MjAyMTQzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c6e7f684c2995c44b1df704965a5b654a9775865", "author": {"user": null}, "url": "https://github.com/ibissource/iaf/commit/c6e7f684c2995c44b1df704965a5b654a9775865", "committedDate": "2020-03-25T17:57:49Z", "message": "Add facets in JSON schema converter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9333cefc4b6abcd44f754ba9a07e981d6f9d0882", "author": {"user": null}, "url": "https://github.com/ibissource/iaf/commit/9333cefc4b6abcd44f754ba9a07e981d6f9d0882", "committedDate": "2020-03-25T19:45:48Z", "message": "Improve handling different data types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35bba0cfd149b14743a5bef8b2734db3ef7cf9ce", "author": {"user": null}, "url": "https://github.com/ibissource/iaf/commit/35bba0cfd149b14743a5bef8b2734db3ef7cf9ce", "committedDate": "2020-03-26T09:29:44Z", "message": "Handle date types as strings with format attribute"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d781e1fe4d4def01091815d0abefe653f5d11e68", "author": {"user": null}, "url": "https://github.com/ibissource/iaf/commit/d781e1fe4d4def01091815d0abefe653f5d11e68", "committedDate": "2020-03-26T09:43:21Z", "message": "Fix handling different data types correctly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "206aab0cef3805ebf3efe70d338c6825b47ae60c", "author": {"user": null}, "url": "https://github.com/ibissource/iaf/commit/206aab0cef3805ebf3efe70d338c6825b47ae60c", "committedDate": "2020-03-26T09:49:41Z", "message": "Improve handling numeric types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4678fddd0cae054e634e5368bb77c1e1b2f6d35a", "author": {"user": null}, "url": "https://github.com/ibissource/iaf/commit/4678fddd0cae054e634e5368bb77c1e1b2f6d35a", "committedDate": "2020-03-26T09:54:13Z", "message": "Update tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxODk2OTQ2", "url": "https://github.com/ibissource/iaf/pull/543#pullrequestreview-381896946", "createdAt": "2020-03-26T10:56:45Z", "commit": {"oid": "4678fddd0cae054e634e5368bb77c1e1b2f6d35a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDo1Njo0NVrOF8Bapg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMTowNTowMVrOF8Bttg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4MjA4Ng==", "bodyText": "Voor nu in elk geval een warning loggen naar de log file, en zo mogelijk een commentaar in het gegenereerde schema opnemen.\nEffectief wordt er dan geen constraint aan het schema toegevoegd, maar is het wel een valide schema.\nZou wel goed zijn om er een test voor te maken,", "url": "https://github.com/ibissource/iaf/pull/543#discussion_r398482086", "createdAt": "2020-03-26T10:56:45Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/align/XmlTypeToJsonSchemaConverter.java", "diffHunk": "@@ -340,4 +367,82 @@ public JsonStructure nillable(JsonStructure type) {\n \t\treturn typeBuilder.build();\n \t}\n \n-}\n+\tprivate void applyFacet(XSSimpleTypeDefinition simpleTypeDefinition, JsonObjectBuilder builder, String key, short facet){\n+\t\tif(simpleTypeDefinition.getFacet(facet) != null){\n+\t\t\tif(simpleTypeDefinition.getLexicalFacetValue(facet) != null){\n+\t\t\t\tswitch(facet){\n+\t\t\t\t\tcase XSSimpleTypeDefinition.FACET_MAXINCLUSIVE:\n+\t\t\t\t\tcase XSSimpleTypeDefinition.FACET_MININCLUSIVE:\n+\t\t\t\t\tcase XSSimpleTypeDefinition.FACET_MAXEXCLUSIVE:\n+\t\t\t\t\tcase XSSimpleTypeDefinition.FACET_MINEXCLUSIVE:\n+\t\t\t\t\tcase XSSimpleTypeDefinition.FACET_MAXLENGTH:\n+\t\t\t\t\tcase XSSimpleTypeDefinition.FACET_MINLENGTH:\n+\t\t\t\t\t\t/*\n+\t\t\t\t\t\t\tNot sure about this.. \n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tsimpleTypeDefinition.getLexicalFacetValue(facet) returns a numeric value as string\n+\t\t\t\t\t\t\tif value > MAX_INT, Integer.parseInt(value) will throw NumberFormatException\n+\n+\t\t\t\t\t\t\tcurrently this exception is catched and retried as Long.ParseLong(value)\n+\t\t\t\t\t\t\tbut what if this throws NumberFormatException?\n+\n+\t\t\t\t\t\t\thow to deal with this properly?\n+\t\t\t\t\t\t*/\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tbuilder.add(key, Integer.parseInt(simpleTypeDefinition.getLexicalFacetValue(facet)));\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tbuilder.add(key, Long.parseLong(simpleTypeDefinition.getLexicalFacetValue(facet)));\n+\t\t\t\t\t\t\t} catch (NumberFormatException nfex) {\n+\t\t\t\t\t\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4678fddd0cae054e634e5368bb77c1e1b2f6d35a"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4MjU0Ng==", "bodyText": "kan je niet gewoon meteen deze value als een Long parsen? Gaat er dan iets mis?", "url": "https://github.com/ibissource/iaf/pull/543#discussion_r398482546", "createdAt": "2020-03-26T10:57:34Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/align/XmlTypeToJsonSchemaConverter.java", "diffHunk": "@@ -340,4 +367,82 @@ public JsonStructure nillable(JsonStructure type) {\n \t\treturn typeBuilder.build();\n \t}\n \n-}\n+\tprivate void applyFacet(XSSimpleTypeDefinition simpleTypeDefinition, JsonObjectBuilder builder, String key, short facet){\n+\t\tif(simpleTypeDefinition.getFacet(facet) != null){\n+\t\t\tif(simpleTypeDefinition.getLexicalFacetValue(facet) != null){\n+\t\t\t\tswitch(facet){\n+\t\t\t\t\tcase XSSimpleTypeDefinition.FACET_MAXINCLUSIVE:\n+\t\t\t\t\tcase XSSimpleTypeDefinition.FACET_MININCLUSIVE:\n+\t\t\t\t\tcase XSSimpleTypeDefinition.FACET_MAXEXCLUSIVE:\n+\t\t\t\t\tcase XSSimpleTypeDefinition.FACET_MINEXCLUSIVE:\n+\t\t\t\t\tcase XSSimpleTypeDefinition.FACET_MAXLENGTH:\n+\t\t\t\t\tcase XSSimpleTypeDefinition.FACET_MINLENGTH:\n+\t\t\t\t\t\t/*\n+\t\t\t\t\t\t\tNot sure about this.. \n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tsimpleTypeDefinition.getLexicalFacetValue(facet) returns a numeric value as string\n+\t\t\t\t\t\t\tif value > MAX_INT, Integer.parseInt(value) will throw NumberFormatException\n+\n+\t\t\t\t\t\t\tcurrently this exception is catched and retried as Long.ParseLong(value)\n+\t\t\t\t\t\t\tbut what if this throws NumberFormatException?\n+\n+\t\t\t\t\t\t\thow to deal with this properly?\n+\t\t\t\t\t\t*/\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tbuilder.add(key, Integer.parseInt(simpleTypeDefinition.getLexicalFacetValue(facet)));\n+\t\t\t\t\t\t} catch (NumberFormatException nfe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4678fddd0cae054e634e5368bb77c1e1b2f6d35a"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4Njk2Ng==", "bodyText": "Zou je nog een test kunnen maken (of Datatypes uitbreiden) voor 'pattern' en 'enumeration'? Die kom ik niet tegen in de test resultaten, en ik zie de applyFacet() ervoor hierboven twee keer.", "url": "https://github.com/ibissource/iaf/pull/543#discussion_r398486966", "createdAt": "2020-03-26T11:05:01Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/align/XmlTypeToJsonSchemaConverter.java", "diffHunk": "@@ -145,14 +146,40 @@ public JsonStructure getDefinition(XSTypeDefinition typeDefinition) {\n \t\t\treturn builder.build();\n \t\t} else {\n \t\t\tXSSimpleTypeDefinition simpleTypeDefinition = (XSSimpleTypeDefinition)typeDefinition;\n-\t\t\tif (DEBUG) log.debug(\"typeDefinition.name [\"+typeDefinition.getName()+\"]\");\n+\t\t\tif (DEBUG) log.debug(\"typeDefinition.name [\"+typeDefinition.getName()+\"]\");;\n+\t\t\tif (DEBUG) log.debug(\"simpleTypeDefinition.getBuiltInKind [\"+simpleTypeDefinition.getBuiltInKind()+\"]\");\n \t\t\tif (DEBUG) log.debug(ToStringBuilder.reflectionToString(typeDefinition,ToStringStyle.MULTI_LINE_STYLE));\n+\n  \t\t\tJsonObjectBuilder builder = Json.createObjectBuilder();\n-\t\t\tif (simpleTypeDefinition.getNumeric()) {\n-\t\t\t\tbuilder.add(\"type\", \"number\");\n-\t\t\t} else if (simpleTypeDefinition.getBuiltInKind() == XSConstants.BOOLEAN_DT) {\n+\t\t\tshort builtInKind = simpleTypeDefinition.getBuiltInKind();\n+\t\t\tString dataType = getJsonDataType(builtInKind);\n+\t\t\t\n+\t\t\tif (dataType.equalsIgnoreCase(\"integer\") || dataType.equalsIgnoreCase(\"number\")) {\n+\t\t\t\tbuilder.add(\"type\", dataType.toLowerCase());\n+\n+\t\t\t\tapplyFacet(simpleTypeDefinition, builder, \"maximum\", XSSimpleTypeDefinition.FACET_MAXINCLUSIVE);\n+\t\t\t\tapplyFacet(simpleTypeDefinition, builder, \"minimum\", XSSimpleTypeDefinition.FACET_MININCLUSIVE);\n+\t\t\t\tapplyFacet(simpleTypeDefinition, builder, \"exclusiveMaximum\", XSSimpleTypeDefinition.FACET_MAXEXCLUSIVE);\n+\t\t\t\tapplyFacet(simpleTypeDefinition, builder, \"exclusiveMinimum\", XSSimpleTypeDefinition.FACET_MINEXCLUSIVE);\n+\t\t\t\tapplyFacet(simpleTypeDefinition, builder, \"enumeration\", XSSimpleTypeDefinition.FACET_ENUMERATION);\n+\t\t\t} else if (dataType.equalsIgnoreCase(\"boolean\")) {\n \t\t\t\tbuilder.add(\"type\", \"boolean\");\n+\t\t\t} else if (dataType.equalsIgnoreCase(\"string\")) {\t\n+\t\t\t\tbuilder.add(\"type\", \"string\");\n+\t\t\t\n+\t\t\t\tapplyFacet(simpleTypeDefinition, builder, \"maxLength\", XSSimpleTypeDefinition.FACET_MAXLENGTH);\n+\t\t\t\tapplyFacet(simpleTypeDefinition, builder, \"minLength\", XSSimpleTypeDefinition.FACET_MINLENGTH);\n+\t\t\t\tapplyFacet(simpleTypeDefinition, builder, \"pattern\", XSSimpleTypeDefinition.FACET_PATTERN);\n+\t\t\t\tapplyFacet(simpleTypeDefinition, builder, \"enumeration\", XSSimpleTypeDefinition.FACET_ENUMERATION);\n+\t\t\t} else if (dataType.equalsIgnoreCase(\"date\") || dataType.equalsIgnoreCase(\"date-time\") || dataType.equalsIgnoreCase(\"time\")) {\t\t\n+\t\t\t\tbuilder.add(\"type\", \"string\");\n+\t\t\t\t\n+\t\t\t\tbuilder.add(\"format\", dataType);\n+\n+\t\t\t\tapplyFacet(simpleTypeDefinition, builder, \"pattern\", XSSimpleTypeDefinition.FACET_PATTERN);\n+\t\t\t\tapplyFacet(simpleTypeDefinition, builder, \"enumeration\", XSSimpleTypeDefinition.FACET_ENUMERATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4678fddd0cae054e634e5368bb77c1e1b2f6d35a"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "879e02c5920910fc3e2ab681046de93711ce8d9c", "author": {"user": null}, "url": "https://github.com/ibissource/iaf/commit/879e02c5920910fc3e2ab681046de93711ce8d9c", "committedDate": "2020-03-26T12:39:16Z", "message": "Fix support for bigints, patterns and enums"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ec163e7ae3a1a2b0aca4dc882227db90d2e3293", "author": {"user": null}, "url": "https://github.com/ibissource/iaf/commit/2ec163e7ae3a1a2b0aca4dc882227db90d2e3293", "committedDate": "2020-03-26T12:55:40Z", "message": "Remove name attribute from simpleType"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMDIxNDM5", "url": "https://github.com/ibissource/iaf/pull/543#pullrequestreview-382021439", "createdAt": "2020-03-26T13:45:00Z", "commit": {"oid": "2ec163e7ae3a1a2b0aca4dc882227db90d2e3293"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1287, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}