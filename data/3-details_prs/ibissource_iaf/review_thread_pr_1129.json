{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MjY5NDAw", "number": 1129, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjoxMDoxNFrOErr7rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNjo1MDo1OFrOEsfpxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjQ0MDEyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/http/WebServiceSenderResultTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjoxMDoxNFrOHel_xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjoxMDoxNFrOHel_xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0MTg2MA==", "bodyText": "What is happening here? an inputstream to bytearray to inputstream to reader?", "url": "https://github.com/ibissource/iaf/pull/1129#discussion_r501841860", "createdAt": "2020-10-08T16:10:14Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/http/WebServiceSenderResultTest.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.http;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpHost;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpRequestBase;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.message.BasicHeader;\n+import org.apache.http.protocol.HttpContext;\n+import org.junit.After;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.mockito.Mockito;\n+\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.SenderException;\n+import nl.nn.adapterframework.stream.Message;\n+import nl.nn.adapterframework.util.Misc;\n+\n+public class WebServiceSenderResultTest extends Mockito {\n+\n+\t@Rule\n+\tpublic ExpectedException thrown = ExpectedException.none();\n+\n+\tprivate WebServiceSender sender = null;\n+\n+\tpublic WebServiceSender createWebSeriveSender(InputStream responseStream, String contentType, int statusCode) throws IOException {\n+\t\tCloseableHttpClient httpClient = mock(CloseableHttpClient.class);\n+\t\tCloseableHttpResponse httpResponse = mock(CloseableHttpResponse.class);\n+\t\tStatusLine statusLine = mock(StatusLine.class);\n+\t\tHttpEntity httpEntity = mock(HttpEntity.class);\n+\n+\t\twhen(statusLine.getStatusCode()).thenReturn(statusCode);\n+\t\twhen(httpResponse.getStatusLine()).thenReturn(statusLine);\n+\t\twhen(httpResponse.getStatusLine().getStatusCode()).thenReturn(statusCode);\n+\n+\t\tif(contentType != null) {\n+\t\t\tHeader contentTypeHeader = new BasicHeader(\"Content-Type\", contentType);\n+\t\t\twhen(httpEntity.getContentType()).thenReturn(contentTypeHeader);\n+\t\t}\n+\t\twhen(httpEntity.getContent()).thenReturn(responseStream);\n+\t\twhen(httpResponse.getEntity()).thenReturn(httpEntity);\n+\n+\t\t//Mock all requests\n+\t\twhen(httpClient.execute(any(HttpHost.class), any(HttpRequestBase.class), any(HttpContext.class))).thenReturn(httpResponse);\n+\n+\t\tWebServiceSender sender = spy(new WebServiceSender());\n+\t\twhen(sender.getHttpClient()).thenReturn(httpClient);\n+\n+\t\t//Some default settings, url will be mocked.\n+\t\tsender.setUrl(\"http://127.0.0.1/\");\n+\t\tsender.setIgnoreRedirects(true);\n+\t\tsender.setVerifyHostname(false);\n+\t\tsender.setAllowSelfSignedCertificates(true);\n+\n+\t\tthis.sender = sender;\n+\t\treturn sender;\n+\t}\n+\n+\tpublic WebServiceSender createWebServiceSenderFromFile(String testFile, int statusCode) throws IOException {\n+\t\tInputStream file = getFile(testFile);\n+\t\tbyte[] fileArray = Misc.streamToBytes(file);\n+\t\tString contentType = null;\n+\n+\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(fileArray)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3769aaf10dd240d4685f15c047b4c08bd966aeb"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjQ0MTY4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/http/WebServiceSenderResultTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjoxMDozOFrOHemAzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjoxMDozOFrOHemAzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0MjEyNA==", "bodyText": "createWebSeriveSender should be createWebServiceSender", "url": "https://github.com/ibissource/iaf/pull/1129#discussion_r501842124", "createdAt": "2020-10-08T16:10:38Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/http/WebServiceSenderResultTest.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.http;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpHost;\n+import org.apache.http.StatusLine;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpRequestBase;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.message.BasicHeader;\n+import org.apache.http.protocol.HttpContext;\n+import org.junit.After;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.mockito.Mockito;\n+\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.SenderException;\n+import nl.nn.adapterframework.stream.Message;\n+import nl.nn.adapterframework.util.Misc;\n+\n+public class WebServiceSenderResultTest extends Mockito {\n+\n+\t@Rule\n+\tpublic ExpectedException thrown = ExpectedException.none();\n+\n+\tprivate WebServiceSender sender = null;\n+\n+\tpublic WebServiceSender createWebSeriveSender(InputStream responseStream, String contentType, int statusCode) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3769aaf10dd240d4685f15c047b4c08bd966aeb"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDkxMzk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNjo1MDo1OFrOHfxIYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODowNDowNlrOHgaSzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA3Mjg2Nw==", "bodyText": "And what happens to the exception then? It's just gone?\nAt least log it!", "url": "https://github.com/ibissource/iaf/pull/1129#discussion_r503072867", "createdAt": "2020-10-12T06:50:58Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -577,7 +583,16 @@ public String getResponseBodyAsString(HttpResponseHandler responseHandler) throw\n \t\t\t}\n \t\t\treturn headersXml.toXML();\n \t\t}\n-\t\tString responseBody = responseHandler.getResponseAsString(true);\n+\t\tString responseBody = null;\n+\t\ttry {\n+\t\t\tresponseBody = responseHandler.getResponseAsString(true);\n+\t\t} catch(IOException e) {\n+\t\t\tif(throwIOExceptionWhenParsingResponse) {\n+\t\t\t\tthrow e;\n+\t\t\t}\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e436f8388a3da1f0899febfbe14e3b70f6a6e458"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MDc3NQ==", "bodyText": "This method will be called in case of an exception. The exception thrown by this method is not the actual cause. Therefore, it can be ignored. The caller methods will throw the actual exception", "url": "https://github.com/ibissource/iaf/pull/1129#discussion_r503090775", "createdAt": "2020-10-12T07:29:29Z", "author": {"login": "alisihab"}, "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -577,7 +583,16 @@ public String getResponseBodyAsString(HttpResponseHandler responseHandler) throw\n \t\t\t}\n \t\t\treturn headersXml.toXML();\n \t\t}\n-\t\tString responseBody = responseHandler.getResponseAsString(true);\n+\t\tString responseBody = null;\n+\t\ttry {\n+\t\t\tresponseBody = responseHandler.getResponseAsString(true);\n+\t\t} catch(IOException e) {\n+\t\t\tif(throwIOExceptionWhenParsingResponse) {\n+\t\t\t\tthrow e;\n+\t\t\t}\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA3Mjg2Nw=="}, "originalCommit": {"oid": "e436f8388a3da1f0899febfbe14e3b70f6a6e458"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0NzI3Ng==", "bodyText": "I think it would be wise to add a comment describing the problem. Either near the try/catch or as javadoc above the method.\nWhen an exception occurs and the response cannot be parsed, we do not want to throw a 'missing response' exception. Since this method is used when handling other exceptions (link to wss exception here) (link to http exception here), silently return null, to avoid npe's, ioexceptions etc.", "url": "https://github.com/ibissource/iaf/pull/1129#discussion_r503747276", "createdAt": "2020-10-13T08:04:06Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -577,7 +583,16 @@ public String getResponseBodyAsString(HttpResponseHandler responseHandler) throw\n \t\t\t}\n \t\t\treturn headersXml.toXML();\n \t\t}\n-\t\tString responseBody = responseHandler.getResponseAsString(true);\n+\t\tString responseBody = null;\n+\t\ttry {\n+\t\t\tresponseBody = responseHandler.getResponseAsString(true);\n+\t\t} catch(IOException e) {\n+\t\t\tif(throwIOExceptionWhenParsingResponse) {\n+\t\t\t\tthrow e;\n+\t\t\t}\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA3Mjg2Nw=="}, "originalCommit": {"oid": "e436f8388a3da1f0899febfbe14e3b70f6a6e458"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 554, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}