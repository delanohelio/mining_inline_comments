{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMjE0NjE0", "number": 978, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo0MDoyMVrOEVDpvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoxNToyOFrOEVEkSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTE1MzkxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/scheduler/JobDef.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo0MDoyMVrOG7mNxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTozNzo1MFrOG8PTsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0NTI4NQ==", "bodyText": "Ik snap niet waarom een Jobdef aan z'n locker naar z'n datasource moet vragen, maar dat was dus al zo", "url": "https://github.com/ibissource/iaf/pull/978#discussion_r465145285", "createdAt": "2020-08-04T15:40:21Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/scheduler/JobDef.java", "diffHunk": "@@ -623,17 +625,19 @@ protected void runJob(IbisManager ibisManager) {\n \t\tstatsKeeper.addValue(endTime - startTime);\n \t}\n \n-\tprivate void cleanupDatabase(IbisManager ibisManager) {\n-\t\tDate date = new Date();\n-\n-\t\tList<String> jmsRealmNames = new ArrayList<String>();\n+\t/**\n+\t * Locate all Lockers, and find out which datasources are used.\n+\t * @return distinct list of all datasourceNames used by lockers\n+\t */\n+\tprivate List<String> getAllLockerDatasourceNames(IbisManager ibisManager) {\n+\t\tList<String> datasourceNames = new ArrayList<>();\n \n \t\tfor (Configuration configuration : ibisManager.getConfigurations()) {\n \t\t\tfor (JobDef jobdef : configuration.getScheduledJobs()) {\n \t\t\t\tif (jobdef.getLocker()!=null) {\n-\t\t\t\t\tString jmsRealmName = jobdef.getLocker().getJmsRealName();\n-\t\t\t\t\tif (!jmsRealmNames.contains(jmsRealmName)) {\n-\t\t\t\t\t\tjmsRealmNames.add(jmsRealmName);\n+\t\t\t\t\tString datasourceName = jobdef.getLocker().getDatasourceName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f35eb6b15f503173f1e7a0ee2595cae222c759e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxODU0Ng==", "bodyText": "Tja, schijnbaar wilt hij een lijst met alle lockers die mogelijk verschillende datasources kunnen hebben.", "url": "https://github.com/ibissource/iaf/pull/978#discussion_r465818546", "createdAt": "2020-08-05T15:37:50Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/scheduler/JobDef.java", "diffHunk": "@@ -623,17 +625,19 @@ protected void runJob(IbisManager ibisManager) {\n \t\tstatsKeeper.addValue(endTime - startTime);\n \t}\n \n-\tprivate void cleanupDatabase(IbisManager ibisManager) {\n-\t\tDate date = new Date();\n-\n-\t\tList<String> jmsRealmNames = new ArrayList<String>();\n+\t/**\n+\t * Locate all Lockers, and find out which datasources are used.\n+\t * @return distinct list of all datasourceNames used by lockers\n+\t */\n+\tprivate List<String> getAllLockerDatasourceNames(IbisManager ibisManager) {\n+\t\tList<String> datasourceNames = new ArrayList<>();\n \n \t\tfor (Configuration configuration : ibisManager.getConfigurations()) {\n \t\t\tfor (JobDef jobdef : configuration.getScheduledJobs()) {\n \t\t\t\tif (jobdef.getLocker()!=null) {\n-\t\t\t\t\tString jmsRealmName = jobdef.getLocker().getJmsRealName();\n-\t\t\t\t\tif (!jmsRealmNames.contains(jmsRealmName)) {\n-\t\t\t\t\t\tjmsRealmNames.add(jmsRealmName);\n+\t\t\t\t\tString datasourceName = jobdef.getLocker().getDatasourceName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0NTI4NQ=="}, "originalCommit": {"oid": "6f35eb6b15f503173f1e7a0ee2595cae222c759e"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTE4NzY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/extensions/test/IbisTester.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo0ODoxMlrOG7mi2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo0ODoxMlrOG7mi2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1MDY4Mg==", "bodyText": "Moet dit? Waarom dan?", "url": "https://github.com/ibissource/iaf/pull/978#discussion_r465150682", "createdAt": "2020-08-04T15:48:12Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/extensions/test/IbisTester.java", "diffHunk": "@@ -142,6 +144,10 @@ public void initTest() {\n \t\tSystem.setProperty(\"flow.create.url\", \"\");\n \t\tdebug(\"***start***\");\n \t\tibisContext = null;\n+\n+\t\tJmsRealmFactory realmFactory = JmsRealmFactory.getInstance();\n+\t\trealmFactory.clear();\n+\t\trealmFactory.registerJmsRealm(JmsRealm.defaultRealm());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f35eb6b15f503173f1e7a0ee2595cae222c759e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTE5MDgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/jms/JMSFacade.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo0OTowMVrOG7mk1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTozNzoyMVrOG8PSRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1MTE5MQ==", "bodyText": "Dit moet er al 100 jaar zo in zitten. Onbegrijpelijk.\nOf toch niet. Ik zie dat het alleen de getter is waarvan de naam verkeerd gespeld is.", "url": "https://github.com/ibissource/iaf/pull/978#discussion_r465151191", "createdAt": "2020-08-04T15:49:01Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/jms/JMSFacade.java", "diffHunk": "@@ -454,11 +454,11 @@ public String getPhysicalDestinationName() {\n \t\t\tresult+=\" selector [\"+getMessageSelector()+\"]\";\n \t\t}\n \t\tJmsRealm jmsRealm=null;\n-\t\tif (getJmsRealName()!=null) {\n-\t\t\tjmsRealm=JmsRealmFactory.getInstance().getJmsRealm(getJmsRealName());\n+\t\tif (getJmsRealmName()!=null) {\n+\t\t\tjmsRealm=JmsRealmFactory.getInstance().getJmsRealm(getJmsRealmName());\n \t\t}\n \t    if (jmsRealm==null) {\n-\t    \tlog.warn(\"Could not find jmsRealm [\"+getJmsRealName()+\"]\");\n+\t    \tlog.warn(\"Could not find jmsRealm [\"+getJmsRealmName()+\"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f35eb6b15f503173f1e7a0ee2595cae222c759e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxODE4Mw==", "bodyText": "Ja leuk he, ik snapte er ook al niets van", "url": "https://github.com/ibissource/iaf/pull/978#discussion_r465818183", "createdAt": "2020-08-05T15:37:21Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/jms/JMSFacade.java", "diffHunk": "@@ -454,11 +454,11 @@ public String getPhysicalDestinationName() {\n \t\t\tresult+=\" selector [\"+getMessageSelector()+\"]\";\n \t\t}\n \t\tJmsRealm jmsRealm=null;\n-\t\tif (getJmsRealName()!=null) {\n-\t\t\tjmsRealm=JmsRealmFactory.getInstance().getJmsRealm(getJmsRealName());\n+\t\tif (getJmsRealmName()!=null) {\n+\t\t\tjmsRealm=JmsRealmFactory.getInstance().getJmsRealm(getJmsRealmName());\n \t\t}\n \t    if (jmsRealm==null) {\n-\t    \tlog.warn(\"Could not find jmsRealm [\"+getJmsRealName()+\"]\");\n+\t    \tlog.warn(\"Could not find jmsRealm [\"+getJmsRealmName()+\"]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1MTE5MQ=="}, "originalCommit": {"oid": "6f35eb6b15f503173f1e7a0ee2595cae222c759e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTIwNDcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/jms/JmsRealm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1MjowOFrOG7mtOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1MjowOFrOG7mtOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1MzMzOA==", "bodyText": "Moet dit? Als je een default datasource wil hebben, dan kan je toch gewoon ${jdbc.datasource.default} gebruiken?", "url": "https://github.com/ibissource/iaf/pull/978#discussion_r465153338", "createdAt": "2020-08-04T15:52:08Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/jms/JmsRealm.java", "diffHunk": "@@ -65,6 +66,14 @@ public JmsRealm() {\n \t\tsuper();\n \t}\n \n+\tpublic static JmsRealm defaultRealm() {\n+\t\tJmsRealm defaultJmsRealm = new JmsRealm();\n+\t\tdefaultJmsRealm.setRealmName(\"jdbc\");\n+\t\tString defaultDatasource = AppConstants.getInstance().getResolvedProperty(\"jdbc.datasource.default\");\n+\t\tdefaultJmsRealm.setDatasourceName(defaultDatasource);\n+\t\treturn defaultJmsRealm;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f35eb6b15f503173f1e7a0ee2595cae222c759e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTIxMjQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/scheduler/JobDef.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1NDowNVrOG7myJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1NDowNVrOG7myJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1NDU5OA==", "bodyText": "Ik snap niet waarom getLocker() een member is van IExtendedPipe, maar dat was dus al zo.", "url": "https://github.com/ibissource/iaf/pull/978#discussion_r465154598", "createdAt": "2020-08-04T15:54:05Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/scheduler/JobDef.java", "diffHunk": "@@ -647,9 +651,9 @@ private void cleanupDatabase(IbisManager ibisManager) {\n \t\t\t\t\t\tif (pipe instanceof IExtendedPipe) {\n \t\t\t\t\t\t\tIExtendedPipe extendedPipe = (IExtendedPipe)pipe;\n \t\t\t\t\t\t\tif (extendedPipe.getLocker() != null) {\n-\t\t\t\t\t\t\t\tString jmsRealmName = extendedPipe.getLocker().getJmsRealName();\n-\t\t\t\t\t\t\t\tif (!jmsRealmNames.contains(jmsRealmName)) {\n-\t\t\t\t\t\t\t\t\tjmsRealmNames.add(jmsRealmName);\n+\t\t\t\t\t\t\t\tString datasourceName = extendedPipe.getLocker().getDatasourceName();\n+\t\t\t\t\t\t\t\tif(StringUtils.isNotEmpty(datasourceName) && !datasourceNames.contains(datasourceName)) {\n+\t\t\t\t\t\t\t\t\tdatasourceNames.add(datasourceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f35eb6b15f503173f1e7a0ee2595cae222c759e"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTIyODU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1Nzo0M1rOG7m8GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1Nzo0M1rOG7m8GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1NzE0NA==", "bodyText": "Krijg hier toch een beetje baron van Munchhausen gevoel, die zichzelf aan z'n haren uit het moeras trekt, maar ja, dat was dus al.", "url": "https://github.com/ibissource/iaf/pull/978#discussion_r465157144", "createdAt": "2020-08-04T15:57:43Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java", "diffHunk": "@@ -1013,13 +1013,13 @@ public static void executeStatement(Connection connection, String query, int par\n \n \tpublic static synchronized Properties retrieveJdbcPropertiesFromDatabase() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f35eb6b15f503173f1e7a0ee2595cae222c759e"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTIzNTI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1OToxOFrOG7nAVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1OToxOFrOG7nAVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1ODIzMQ==", "bodyText": "Dus hier zeg je volgens mij: Als er een realm is met een datasource, dan krijgt die realm prioriteit over jdbc.datasource.default, vanwege compatibiliteit met bestaande configuraties.\nHet lijkt me goed om dat hier te documenteren.", "url": "https://github.com/ibissource/iaf/pull/978#discussion_r465158231", "createdAt": "2020-08-04T15:59:18Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java", "diffHunk": "@@ -1013,13 +1013,13 @@ public static void executeStatement(Connection connection, String query, int par\n \n \tpublic static synchronized Properties retrieveJdbcPropertiesFromDatabase() {\n \t\tif (jdbcProperties == null) {\n-\t\t\tString jmsRealm = JmsRealmFactory.getInstance()\n-\t\t\t\t\t.getFirstDatasourceJmsRealm();\n+\t\t\tString jmsRealm = JmsRealmFactory.getInstance().getFirstDatasourceJmsRealm();\n \t\t\tif (jmsRealm != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f35eb6b15f503173f1e7a0ee2595cae222c759e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTIzOTc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjowMDoyMVrOG7nDOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTozOTozOFrOG8PYYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1ODk2OA==", "bodyText": "Ik snap dit commentaar niet. Is het niet genoeg om een datasource te hebben?\nVolgens mij klopt de logica niet, volgt het niet mijn commentaar bij regel 1017, maar zou het dat wel moeten doen.\nZoiets als\nif (jmsRealm != null) {\n  ibisProp.setJmsRealm(jmsRealm)\n} else {\n  ibisProp.setDatasource(appConstants.getProperty(\"jdbc.datasource.default\")\n}", "url": "https://github.com/ibissource/iaf/pull/978#discussion_r465158968", "createdAt": "2020-08-04T16:00:21Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java", "diffHunk": "@@ -1013,13 +1013,13 @@ public static void executeStatement(Connection connection, String query, int par\n \n \tpublic static synchronized Properties retrieveJdbcPropertiesFromDatabase() {\n \t\tif (jdbcProperties == null) {\n-\t\t\tString jmsRealm = JmsRealmFactory.getInstance()\n-\t\t\t\t\t.getFirstDatasourceJmsRealm();\n+\t\t\tString jmsRealm = JmsRealmFactory.getInstance().getFirstDatasourceJmsRealm();\n \t\t\tif (jmsRealm != null) {\n \t\t\t\tjdbcProperties = new Properties();\n \t\t\t\tJdbcFacade ibisProp = new JdbcFacade();\n-\t\t\t\tibisProp.setJmsRealm(jmsRealm);\n-\t\t\t\t\n+\t\t\t\tibisProp.setJmsRealm(jmsRealm); //Use a realm here so it copies over proxied datasources", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f35eb6b15f503173f1e7a0ee2595cae222c759e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxOTc0Nw==", "bodyText": "Ja eigenlijk wel, maar dit ding moet helemaal niets met een realm doen toch? ipv daarvan met een datasource oid? ik vond het te veel om er vanalles mee te doen dus heb het maar gelaten.", "url": "https://github.com/ibissource/iaf/pull/978#discussion_r465819747", "createdAt": "2020-08-05T15:39:38Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/util/JdbcUtil.java", "diffHunk": "@@ -1013,13 +1013,13 @@ public static void executeStatement(Connection connection, String query, int par\n \n \tpublic static synchronized Properties retrieveJdbcPropertiesFromDatabase() {\n \t\tif (jdbcProperties == null) {\n-\t\t\tString jmsRealm = JmsRealmFactory.getInstance()\n-\t\t\t\t\t.getFirstDatasourceJmsRealm();\n+\t\t\tString jmsRealm = JmsRealmFactory.getInstance().getFirstDatasourceJmsRealm();\n \t\t\tif (jmsRealm != null) {\n \t\t\t\tjdbcProperties = new Properties();\n \t\t\t\tJdbcFacade ibisProp = new JdbcFacade();\n-\t\t\t\tibisProp.setJmsRealm(jmsRealm);\n-\t\t\t\t\n+\t\t\t\tibisProp.setJmsRealm(jmsRealm); //Use a realm here so it copies over proxied datasources", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1ODk2OA=="}, "originalCommit": {"oid": "6f35eb6b15f503173f1e7a0ee2595cae222c759e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTMwMzc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/scheduler/JobDef.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoxNToyOFrOG7nqUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjoxNToyOFrOG7nqUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE2ODk3OQ==", "bodyText": "Hier moet niet een specifieke test op Dbms.MSSQL zijn, maar moet er gebruik gemaakt worden van generieke functies in dbmsSupport. Zal ik wel doen na mijn vakantie.\nIk wil dat wat nu (geloof ik) heet prepareSessionForDirtyRead() hernoemen in prepareSessionForNonLockingRead(), en de method prepareQueryForWorkqueuePeeking() in prepareQueryForNonLockingRead().\nDie moeten dan hier ook gebruikt worden.", "url": "https://github.com/ibissource/iaf/pull/978#discussion_r465168979", "createdAt": "2020-08-04T16:15:28Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/scheduler/JobDef.java", "diffHunk": "@@ -696,26 +692,75 @@ private void cleanupDatabase(IbisManager ibisManager) {\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\t\treturn messageLogs;\n+\t}\n \n-\t\tfor (MessageLogObject mlo: messageLogs) {\n-\t\t\tsetJmsRealm(mlo.getJmsRealmName());\n-\t\t\tDirectQuerySender qs;\n-\t\t\tqs = (DirectQuerySender)ibisManager.getIbisContext().createBeanAutowireByName(DirectQuerySender.class);\n-\t\t\tqs.setJmsRealm(mlo.getJmsRealmName());\n-\t\t\tString deleteQuery;\n-\t\t\tif (qs.getDatabaseType() == Dbms.MSSQL) {\n-\t\t\t\tdeleteQuery = \"DELETE FROM \" + mlo.getTableName() + \" WHERE \" + mlo.getKeyField() + \" IN (SELECT \" + mlo.getKeyField() + \" FROM \" + mlo.getTableName()\n-\t\t\t\t\t\t+ \" WITH (readpast) WHERE \" + mlo.getTypeField() + \" IN ('\" + IMessageBrowser.StorageType.MESSAGELOG_PIPE.getCode() + \"','\" + IMessageBrowser.StorageType.MESSAGELOG_RECEIVER.getCode()\n-\t\t\t\t\t\t+ \"') AND \" + mlo.getExpiryDateField() + \" < \"+qs.getDbmsSupport().getDatetimeLiteral(date)+\")\";\n+\tprivate void cleanupDatabase(IbisManager ibisManager) {\n+\t\tDate date = new Date();\n+\n+\t\tList<String> datasourceNames = getAllLockerDatasourceNames(ibisManager);\n+\n+\t\tfor (Iterator<String> iter = datasourceNames.iterator(); iter.hasNext();) {\n+\t\t\tString datasourceName = iter.next();\n+\t\t\tDirectQuerySender qs = null;\n+\t\t\tString deleteQuery = null;\n+\t\t\ttry {\n+\t\t\t\tqs = ibisManager.getIbisContext().createBeanAutowireByName(DirectQuerySender.class);\n+\t\t\t\tqs.setDatasourceName(datasourceName);\n+\t\t\t\tqs.setName(\"executeQueryJob\");\n+\t\t\t\tqs.setQueryType(\"other\");\n+\t\t\t\tqs.setTimeout(getQueryTimeout());\n+\t\t\t\tqs.configure(true);\n+\t\t\t\tqs.open();\n+\n+\t\t\t\tdeleteQuery = \"DELETE FROM IBISLOCK WHERE EXPIRYDATE < \"+qs.getDbmsSupport().getDatetimeLiteral(date);\n+\t\t\t\tMessage result = qs.sendMessage(new Message(deleteQuery), null);\n+\t\t\t\tlog.info(\"result [\" + result + \"]\");\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tString msg = \"error while executing query [\"+deleteQuery+\"] (as part of scheduled job execution): \" + e.getMessage();\n+\t\t\t\tgetMessageKeeper().add(msg, MessageKeeperLevel.ERROR);\n+\t\t\t\tlog.error(getLogPrefix()+msg);\n+\t\t\t} finally {\n+\t\t\t\tif(qs != null) {\n+\t\t\t\t\tqs.close();\n+\t\t\t\t}\n \t\t\t}\n-\t\t\telse {\n-\t\t\t\tdeleteQuery = \"DELETE FROM \" + mlo.getTableName() \n-\t\t\t\t\t+ \" WHERE \" + mlo.getTypeField() + \" IN ('\" + IMessageBrowser.StorageType.MESSAGELOG_PIPE.getCode() + \"','\" + IMessageBrowser.StorageType.MESSAGELOG_RECEIVER.getCode() + \"') AND \" + mlo.getExpiryDateField() + \" < \"+qs.getDbmsSupport().getDatetimeLiteral(date);\n+\t\t}\n+\n+\t\tList<MessageLogObject> messageLogs = getAllMessageLogsAndErrorstorages(ibisManager);\n+\n+\t\tfor (MessageLogObject mlo: messageLogs) {\n+\t\t\tDirectQuerySender qs = null;\n+\t\t\tString deleteQuery = null;\n+\t\t\ttry {\n+\t\t\t\tqs = ibisManager.getIbisContext().createBeanAutowireByName(DirectQuerySender.class);\n+\t\t\t\tqs.setDatasourceName(mlo.getDatasourceName());\n+\t\t\t\tqs.setName(\"executeQueryJob\");\n+\t\t\t\tqs.setQueryType(\"other\");\n+\t\t\t\tqs.setTimeout(getQueryTimeout());\n+\t\t\t\tqs.configure(true);\n+\t\t\t\tqs.open();\n+\n+\t\t\t\tif (qs.getDatabaseType() == Dbms.MSSQL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f35eb6b15f503173f1e7a0ee2595cae222c759e"}, "originalPosition": 186}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 309, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}