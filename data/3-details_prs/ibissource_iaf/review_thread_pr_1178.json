{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3NDc4MTI3", "number": 1178, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzozMzoyM1rOEwQILg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDowOToyMVrOEyvQrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDMxMzQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/core/PipeLine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzozMzoyM1rOHlsZHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNTo0ODowM1rOHlzYXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI4NjY4Ng==", "bodyText": "Ik wil graag de volgende volgorde voorstellen:\n10 InputValidator\n20 OutputValidator\n30 InputWrapper\n40 OutputWrapper\n50 Exit\n60 Locker\n70 Cache\n80 Pipe", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r509286686", "createdAt": "2020-10-21T13:33:23Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/core/PipeLine.java", "diffHunk": "@@ -161,6 +161,7 @@\n \t * to prevail.\n \t * @see AbstractPipe\n \t **/\n+\t@IbisDoc(\"60\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9702de09c2504d2e228bbadf0cf89e646b8649"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQwMTE4Mg==", "bodyText": "Gedaan.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r509401182", "createdAt": "2020-10-21T15:48:03Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/core/PipeLine.java", "diffHunk": "@@ -161,6 +161,7 @@\n \t * to prevail.\n \t * @see AbstractPipe\n \t **/\n+\t@IbisDoc(\"60\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI4NjY4Ng=="}, "originalCommit": {"oid": "1b9702de09c2504d2e228bbadf0cf89e646b8649"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDM2ODE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzo0NDozOFrOHls7rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjowNToxM1rOHl0KFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI5NTUzMg==", "bodyText": "Voor Receiver:\n10 listener\n20 sender\n30 errorSender\n40 messageLog\n50 errorStorage", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r509295532", "createdAt": "2020-10-21T13:44:38Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "diffHunk": "@@ -1724,6 +1724,7 @@ public ISender getSender() {\n \t\treturn sender;\n \t}\n \t\n+\t@IbisDoc(\"60\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b9702de09c2504d2e228bbadf0cf89e646b8649"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQxMzkwOA==", "bodyText": "Gedaan.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r509413908", "createdAt": "2020-10-21T16:05:13Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "diffHunk": "@@ -1724,6 +1724,7 @@ public ISender getSender() {\n \t\treturn sender;\n \t}\n \t\n+\t@IbisDoc(\"60\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI5NTUzMg=="}, "originalCommit": {"oid": "1b9702de09c2504d2e228bbadf0cf89e646b8649"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDY5MTE2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChildDictionary.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDo0MDo1OVrOHlwFQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODo1MzozNlrOHmXcUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM0NzEzNw==", "bodyText": "Je moet niet zomaar RuntimeExceptions gooien, maar altijd checked exceptions.\nOok moet je niet het path als parameter meegeven, alleen maar om in de foutmelding te kunnen gebruiken.\nAls je hier een SaxParseException gooit, dan kan je op regel 94 daar het pad aan toevoegen, en hoef je het hier niet te hebben.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r509347137", "createdAt": "2020-10-21T14:40:59Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChildDictionary.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.Logger;\n+import org.xml.sax.SAXException;\n+\n+import lombok.Getter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n+import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n+\n+class ConfigChildDictionary {\n+\tprivate static Logger log = LogUtil.getLogger(ConfigChildDictionary.class);\n+\n+\tpublic static final ConfigChildDictionary EMPTY = new ConfigChildDictionary();\n+\n+\tclass Item {\n+\t\tprivate @Getter String methodName;\n+\t\tprivate @Getter boolean mandatory;\n+\t\tprivate @Getter boolean allowMultiple;\n+\t\tprivate @Getter String syntax1Name;\n+\t\tprivate @Getter Integer defaultOrder;\n+\n+\t\tItem(String methodName, String syntax1Name, String path) {\n+\t\t\tthis.methodName = methodName;\n+\t\t\tthis.syntax1Name = syntax1Name;\n+\t\t\tmandatory = false;\n+\t\t\tif(methodName.startsWith(\"set\")) {\n+\t\t\t\tallowMultiple = false;\n+\t\t\t} else if((methodName.startsWith(\"add\")) || methodName.startsWith(\"register\")) {\n+\t\t\t\tallowMultiple = true;\n+\t\t\t} else {\n+\t\t\t\tthrow new RuntimeException(String.format(\n+\t\t\t\t\t\t\"Do not know how many elements go in method [%s], digester rules from [%s]\", methodName, path));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f554fb40206ea75785a969b6048929dc661b52c1"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQyNjEwMg==", "bodyText": "Voordat ik het zo kan maken, moet ik meer code aanpassen. Deze RuntimeException wordt gegooid in ConfigChildDictionary.Handler.handle(). Deze method vervangt DigesterRulesHandler.handle(), maar die method gooit geen SAXException. Ik kan de SAXException dus niet door het call stack laten reizen tot ik bij de constructor van ConfigChildDictionary ben.\nWil je dat ik DigesterRulesHandler.handle() een SAXException laat gooien en dat ik de andere derived classes van DigesterRulesHandler aanpas?", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r509426102", "createdAt": "2020-10-21T16:22:53Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChildDictionary.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.Logger;\n+import org.xml.sax.SAXException;\n+\n+import lombok.Getter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n+import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n+\n+class ConfigChildDictionary {\n+\tprivate static Logger log = LogUtil.getLogger(ConfigChildDictionary.class);\n+\n+\tpublic static final ConfigChildDictionary EMPTY = new ConfigChildDictionary();\n+\n+\tclass Item {\n+\t\tprivate @Getter String methodName;\n+\t\tprivate @Getter boolean mandatory;\n+\t\tprivate @Getter boolean allowMultiple;\n+\t\tprivate @Getter String syntax1Name;\n+\t\tprivate @Getter Integer defaultOrder;\n+\n+\t\tItem(String methodName, String syntax1Name, String path) {\n+\t\t\tthis.methodName = methodName;\n+\t\t\tthis.syntax1Name = syntax1Name;\n+\t\t\tmandatory = false;\n+\t\t\tif(methodName.startsWith(\"set\")) {\n+\t\t\t\tallowMultiple = false;\n+\t\t\t} else if((methodName.startsWith(\"add\")) || methodName.startsWith(\"register\")) {\n+\t\t\t\tallowMultiple = true;\n+\t\t\t} else {\n+\t\t\t\tthrow new RuntimeException(String.format(\n+\t\t\t\t\t\t\"Do not know how many elements go in method [%s], digester rules from [%s]\", methodName, path));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM0NzEzNw=="}, "originalCommit": {"oid": "f554fb40206ea75785a969b6048929dc661b52c1"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2MDgyMA==", "bodyText": "Ja, dat lijkt me in dit geval het beste", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r509960820", "createdAt": "2020-10-22T08:06:53Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChildDictionary.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.Logger;\n+import org.xml.sax.SAXException;\n+\n+import lombok.Getter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n+import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n+\n+class ConfigChildDictionary {\n+\tprivate static Logger log = LogUtil.getLogger(ConfigChildDictionary.class);\n+\n+\tpublic static final ConfigChildDictionary EMPTY = new ConfigChildDictionary();\n+\n+\tclass Item {\n+\t\tprivate @Getter String methodName;\n+\t\tprivate @Getter boolean mandatory;\n+\t\tprivate @Getter boolean allowMultiple;\n+\t\tprivate @Getter String syntax1Name;\n+\t\tprivate @Getter Integer defaultOrder;\n+\n+\t\tItem(String methodName, String syntax1Name, String path) {\n+\t\t\tthis.methodName = methodName;\n+\t\t\tthis.syntax1Name = syntax1Name;\n+\t\t\tmandatory = false;\n+\t\t\tif(methodName.startsWith(\"set\")) {\n+\t\t\t\tallowMultiple = false;\n+\t\t\t} else if((methodName.startsWith(\"add\")) || methodName.startsWith(\"register\")) {\n+\t\t\t\tallowMultiple = true;\n+\t\t\t} else {\n+\t\t\t\tthrow new RuntimeException(String.format(\n+\t\t\t\t\t\t\"Do not know how many elements go in method [%s], digester rules from [%s]\", methodName, path));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM0NzEzNw=="}, "originalCommit": {"oid": "f554fb40206ea75785a969b6048929dc661b52c1"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk5MjAxOQ==", "bodyText": "Gedaan.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r509992019", "createdAt": "2020-10-22T08:53:36Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChildDictionary.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.Logger;\n+import org.xml.sax.SAXException;\n+\n+import lombok.Getter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n+import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n+\n+class ConfigChildDictionary {\n+\tprivate static Logger log = LogUtil.getLogger(ConfigChildDictionary.class);\n+\n+\tpublic static final ConfigChildDictionary EMPTY = new ConfigChildDictionary();\n+\n+\tclass Item {\n+\t\tprivate @Getter String methodName;\n+\t\tprivate @Getter boolean mandatory;\n+\t\tprivate @Getter boolean allowMultiple;\n+\t\tprivate @Getter String syntax1Name;\n+\t\tprivate @Getter Integer defaultOrder;\n+\n+\t\tItem(String methodName, String syntax1Name, String path) {\n+\t\t\tthis.methodName = methodName;\n+\t\t\tthis.syntax1Name = syntax1Name;\n+\t\t\tmandatory = false;\n+\t\t\tif(methodName.startsWith(\"set\")) {\n+\t\t\t\tallowMultiple = false;\n+\t\t\t} else if((methodName.startsWith(\"add\")) || methodName.startsWith(\"register\")) {\n+\t\t\t\tallowMultiple = true;\n+\t\t\t} else {\n+\t\t\t\tthrow new RuntimeException(String.format(\n+\t\t\t\t\t\t\"Do not know how many elements go in method [%s], digester rules from [%s]\", methodName, path));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM0NzEzNw=="}, "originalCommit": {"oid": "f554fb40206ea75785a969b6048929dc661b52c1"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDcyNzU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChildDictionary.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNDo0NzozN1rOHlwbug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMjoyNToxNVrOHnLnFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM1Mjg5MA==", "bodyText": "Is het nodig om hier ConfigChildDictionary.Item te introduceren? Kan je niet meteen een ConfigChild maken/gebruiken?", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r509352890", "createdAt": "2020-10-21T14:47:37Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChildDictionary.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.Logger;\n+import org.xml.sax.SAXException;\n+\n+import lombok.Getter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n+import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n+\n+class ConfigChildDictionary {\n+\tprivate static Logger log = LogUtil.getLogger(ConfigChildDictionary.class);\n+\n+\tpublic static final ConfigChildDictionary EMPTY = new ConfigChildDictionary();\n+\n+\tclass Item {\n+\t\tprivate @Getter String methodName;\n+\t\tprivate @Getter boolean mandatory;\n+\t\tprivate @Getter boolean allowMultiple;\n+\t\tprivate @Getter String syntax1Name;\n+\t\tprivate @Getter Integer defaultOrder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f554fb40206ea75785a969b6048929dc661b52c1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM4NzUwOA==", "bodyText": "Hier hebben we het over de telefoon over gehad. Ik heb inmiddels een comment gemaakt waarin ik uitleg waarom deze class wordt ge\u00efntroduceerd.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r509387508", "createdAt": "2020-10-21T15:30:11Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChildDictionary.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.Logger;\n+import org.xml.sax.SAXException;\n+\n+import lombok.Getter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n+import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n+\n+class ConfigChildDictionary {\n+\tprivate static Logger log = LogUtil.getLogger(ConfigChildDictionary.class);\n+\n+\tpublic static final ConfigChildDictionary EMPTY = new ConfigChildDictionary();\n+\n+\tclass Item {\n+\t\tprivate @Getter String methodName;\n+\t\tprivate @Getter boolean mandatory;\n+\t\tprivate @Getter boolean allowMultiple;\n+\t\tprivate @Getter String syntax1Name;\n+\t\tprivate @Getter Integer defaultOrder;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM1Mjg5MA=="}, "originalCommit": {"oid": "f554fb40206ea75785a969b6048929dc661b52c1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2NzIwMA==", "bodyText": "Ik stel voor dat je deze class 'ConfigChildSetter' noemt, en dat je er niet een inner class van maakt, maar een gewone.\nConfigChildDictionary is vervolgens (volgens mij) alleen maar een Map<String,ConfigChildSetter>, waarbij de string de methodname is. Hij kan dat zijn (extenden), hij hoeft niet zo'n map te hebben.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r509967200", "createdAt": "2020-10-22T08:16:48Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChildDictionary.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.Logger;\n+import org.xml.sax.SAXException;\n+\n+import lombok.Getter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n+import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n+\n+class ConfigChildDictionary {\n+\tprivate static Logger log = LogUtil.getLogger(ConfigChildDictionary.class);\n+\n+\tpublic static final ConfigChildDictionary EMPTY = new ConfigChildDictionary();\n+\n+\tclass Item {\n+\t\tprivate @Getter String methodName;\n+\t\tprivate @Getter boolean mandatory;\n+\t\tprivate @Getter boolean allowMultiple;\n+\t\tprivate @Getter String syntax1Name;\n+\t\tprivate @Getter Integer defaultOrder;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM1Mjg5MA=="}, "originalCommit": {"oid": "f554fb40206ea75785a969b6048929dc661b52c1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwOTk1Mw==", "bodyText": "ConfigChildDictionary is iets meer dan een Map, want hij heeft method setMethodNameOrder(). Deze method kunnen we straks gebruiken om de default volgorde te configureren op de ConfigChildDictionary. De method heeft een check dat je alleen volgordes kan zetten voor methods die in digester-rules.xml voorkomen. Het configureren van de default volgordes gaat straks zo: dictionary.setMethodNameOrder(\"registerX\", 100). Met jouw voorstel wordt dit omslachtiger en minder robuust. Je krijgt iets als dictionary.get(\"registerX\").setDefaultSequenceInConfig(100)). Dit maakt een NullPointerException als je naar een method vraagt die niet in digester-rules.xml staat, in plaats van een duidelijke foutmelding.\nAls ConfigChildDictionary een subclass van Map wordt, dan hebben we minder controle over wat er met dit object gebeurt. Het is een object dat je configureert voordat je de rest van het model maakt, en dat na creatie niet meer verandert. Als we compositie met Map gebruiken in plaats van inheritance, dan kunnen we dat beter afdwingen, denk ik.\nIk begrijp de naam ConfigChildSetter niet goed, want deze class heeft geen method copyTo(ConfigChild target) of zo. Na creatie zit er alleen data in die gekopi\u00eberd wordt om ConfigChild te vullen. Wat vind je van de naam ConfigChildSeed?", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r510009953", "createdAt": "2020-10-22T09:20:03Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChildDictionary.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.Logger;\n+import org.xml.sax.SAXException;\n+\n+import lombok.Getter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n+import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n+\n+class ConfigChildDictionary {\n+\tprivate static Logger log = LogUtil.getLogger(ConfigChildDictionary.class);\n+\n+\tpublic static final ConfigChildDictionary EMPTY = new ConfigChildDictionary();\n+\n+\tclass Item {\n+\t\tprivate @Getter String methodName;\n+\t\tprivate @Getter boolean mandatory;\n+\t\tprivate @Getter boolean allowMultiple;\n+\t\tprivate @Getter String syntax1Name;\n+\t\tprivate @Getter Integer defaultOrder;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM1Mjg5MA=="}, "originalCommit": {"oid": "f554fb40206ea75785a969b6048929dc661b52c1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMwNTA2MA==", "bodyText": "t.a.v. Item / ConfigChildSetter:\nIk begrijp je punt dat wat ik een ConfigChildSetter wil noemen niet een setter van ConfigChilds is. Maar het beschrijft wel methods die ConfigChildSetters zijn. Dus nieuw voorstel: ConfigChildSetterDescriptor.\nDit kan ook een publieke class in een eigen file zijn, in plaats van een inner class\nt.a.v. structuur ConfigChildDictionary:\nIk vind eigenlijk niet dat die setMethodNameOrder() zo belangrijk is dat hij de structuur van de class moet bepalen. Ik denk eigenlijk ook dat we die defaultOrders niet gaan gebruiken. Het is net zo makkelijk en overzichtelijk om bij de bewuste methods een IbisDoc annotatie te zetten, om de volgorde aan te geven, maar uiteindelijk ook om het subelement te documenteren.\nIk denk dus dat\n\nwe het veld defaultOrder uit Item / ConfigChildSetterDescriptor weg moeten halen;\nde method setMethodNameOrder() uit ConfigChildDictionary weg moeten halen;\nEn dan blijft er over dat ConfigChildDictionary een Map van Items / ConfigChildSetterDescriptors is.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r510305060", "createdAt": "2020-10-22T16:38:41Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChildDictionary.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.Logger;\n+import org.xml.sax.SAXException;\n+\n+import lombok.Getter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n+import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n+\n+class ConfigChildDictionary {\n+\tprivate static Logger log = LogUtil.getLogger(ConfigChildDictionary.class);\n+\n+\tpublic static final ConfigChildDictionary EMPTY = new ConfigChildDictionary();\n+\n+\tclass Item {\n+\t\tprivate @Getter String methodName;\n+\t\tprivate @Getter boolean mandatory;\n+\t\tprivate @Getter boolean allowMultiple;\n+\t\tprivate @Getter String syntax1Name;\n+\t\tprivate @Getter Integer defaultOrder;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM1Mjg5MA=="}, "originalCommit": {"oid": "f554fb40206ea75785a969b6048929dc661b52c1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4MTIyMA==", "bodyText": "De structuur is aangepast zoals je voorstelt. Dan lijkt het me wel goed om in deze pull request alle @IbisDoc annotaties goed te zetten, ook degenen waarvan we eerst een default wilden doen. Kan je me vertellen welke volgordes we gaan doen?", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r510781220", "createdAt": "2020-10-23T10:12:59Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChildDictionary.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.Logger;\n+import org.xml.sax.SAXException;\n+\n+import lombok.Getter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n+import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n+\n+class ConfigChildDictionary {\n+\tprivate static Logger log = LogUtil.getLogger(ConfigChildDictionary.class);\n+\n+\tpublic static final ConfigChildDictionary EMPTY = new ConfigChildDictionary();\n+\n+\tclass Item {\n+\t\tprivate @Getter String methodName;\n+\t\tprivate @Getter boolean mandatory;\n+\t\tprivate @Getter boolean allowMultiple;\n+\t\tprivate @Getter String syntax1Name;\n+\t\tprivate @Getter Integer defaultOrder;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM1Mjg5MA=="}, "originalCommit": {"oid": "f554fb40206ea75785a969b6048929dc661b52c1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0Njc0Mw==", "bodyText": "Akkoord dat we de extra benodigde @IbisDoc annotaties uitstellen. Misschien vinden we nog een andere structuur voor ibisdoc.xsd, waardoor we in ibisdoc.xsd geen volgorde hoeven vast te leggen. In dit geval hoeft de volgorde ook niet in de Java code.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r510846743", "createdAt": "2020-10-23T12:25:15Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChildDictionary.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.Logger;\n+import org.xml.sax.SAXException;\n+\n+import lombok.Getter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n+import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n+\n+class ConfigChildDictionary {\n+\tprivate static Logger log = LogUtil.getLogger(ConfigChildDictionary.class);\n+\n+\tpublic static final ConfigChildDictionary EMPTY = new ConfigChildDictionary();\n+\n+\tclass Item {\n+\t\tprivate @Getter String methodName;\n+\t\tprivate @Getter boolean mandatory;\n+\t\tprivate @Getter boolean allowMultiple;\n+\t\tprivate @Getter String syntax1Name;\n+\t\tprivate @Getter Integer defaultOrder;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM1Mjg5MA=="}, "originalCommit": {"oid": "f554fb40206ea75785a969b6048929dc661b52c1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDg3OTUyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/pipes/AbstractPipe.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNToxNzoyOVrOHlx7aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjoyODo0NFrOHl1J2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM3NzM4NQ==", "bodyText": "Deze verandering hoeft niet. ClassLoaderManager is bij de imports opgenomen.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r509377385", "createdAt": "2020-10-21T15:17:29Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/pipes/AbstractPipe.java", "diffHunk": "@@ -403,7 +403,7 @@ public IAdapter getAdapter() {\n \n \t/**\n \t * This ClassLoader is set upon creation of the pipe, used to retrieve resources configured by the Ibis application.\n-\t * @return returns the ClassLoader created by the {@link ClassLoaderManager ClassLoaderManager}.\n+\t * @return returns the ClassLoader created by the {@link nl.nn.adapterframework.configuration.ClassLoaderManager ClassLoaderManager}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f554fb40206ea75785a969b6048929dc661b52c1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzMDIzMg==", "bodyText": "Gedaan.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r509430232", "createdAt": "2020-10-21T16:28:44Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/pipes/AbstractPipe.java", "diffHunk": "@@ -403,7 +403,7 @@ public IAdapter getAdapter() {\n \n \t/**\n \t * This ClassLoader is set upon creation of the pipe, used to retrieve resources configured by the Ibis application.\n-\t * @return returns the ClassLoader created by the {@link ClassLoaderManager ClassLoaderManager}.\n+\t * @return returns the ClassLoader created by the {@link nl.nn.adapterframework.configuration.ClassLoaderManager ClassLoaderManager}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM3NzM4NQ=="}, "originalCommit": {"oid": "f554fb40206ea75785a969b6048929dc661b52c1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDg4ODg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/doc/InfoBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNToxOToxN1rOHlyBDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODowNzo0MlrOHmVkig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM3ODgyOA==", "bodyText": "Dit lijkt me te kort door de bocht. Je kan de documenatie-tekst hier gebruiken om het subelement te documenteren.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r509378828", "createdAt": "2020-10-21T15:19:17Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/InfoBuilder.java", "diffHunk": "@@ -231,6 +231,9 @@ private void enrichPropertyOfIbisBean(BeanProperty beanProperty, IbisBean ibisBe\n \t}\n \n \tprivate static FromAnnotations parseIbisDocAndIbisDocRef(Method method, boolean isJson) {\n+\t\tif(!InfoBuilderSource.isGetterOrSetter(method)) {\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f554fb40206ea75785a969b6048929dc661b52c1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzMzUxOA==", "bodyText": "Het documenteren van het subelement komt denk ik pas als we het nieuwe model gebruiken. Deze wijziging is alleen om de code zonder het nieuwe model te fixen. Die oude code mag niet in de war raken van onzen nieuwe @IbisDoc annotaties. Dat  regel ik met deze regels code.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r509433518", "createdAt": "2020-10-21T16:33:41Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/InfoBuilder.java", "diffHunk": "@@ -231,6 +231,9 @@ private void enrichPropertyOfIbisBean(BeanProperty beanProperty, IbisBean ibisBe\n \t}\n \n \tprivate static FromAnnotations parseIbisDocAndIbisDocRef(Method method, boolean isJson) {\n+\t\tif(!InfoBuilderSource.isGetterOrSetter(method)) {\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM3ODgyOA=="}, "originalCommit": {"oid": "f554fb40206ea75785a969b6048929dc661b52c1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk2MTM1NA==", "bodyText": "OK", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r509961354", "createdAt": "2020-10-22T08:07:42Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/InfoBuilder.java", "diffHunk": "@@ -231,6 +231,9 @@ private void enrichPropertyOfIbisBean(BeanProperty beanProperty, IbisBean ibisBe\n \t}\n \n \tprivate static FromAnnotations parseIbisDocAndIbisDocRef(Method method, boolean isJson) {\n+\t\tif(!InfoBuilderSource.isGetterOrSetter(method)) {\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM3ODgyOA=="}, "originalCommit": {"oid": "f554fb40206ea75785a969b6048929dc661b52c1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDUwOTIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwODoyMTo0NlrOHmWIjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDoxMDozMFrOHnHhvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MDU3Mw==", "bodyText": "Ik stel voor dat ConfigChildDictionary een veld wordt van FrankDocModel, dat je meegeeft bij het aanroepen van de constructor, zodat je zeker weet dat er er voordat je het model gaat maken.\nJe moet het niet steeds doorgeven als parameter, want hij verandert nooit.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r509970573", "createdAt": "2020-10-22T08:21:46Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -17,33 +17,64 @@\n import lombok.Setter;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n import nl.nn.adapterframework.util.LogUtil;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n \n \tprivate @Getter List<FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n \n \tpublic FrankDocModel() {\n \t\tgroups = new ArrayList<>();\n \t}\n \n-\tpublic FrankElement findOrCreateFrankElement(Class<?> clazz) {\n+\tpublic ElementType findOrCreateElementType(Class<?> clazz, ConfigChildDictionary dictionary) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "111ceaf5aac7430de3e3124fa6a9983364e3c5e3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAxMjU4OA==", "bodyText": "Akkoord. Ik kan dit doen als ik antwoord heb op mijn nieuwe vragen over ConfigChildDictionary.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r510012588", "createdAt": "2020-10-22T09:24:01Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -17,33 +17,64 @@\n import lombok.Setter;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n import nl.nn.adapterframework.util.LogUtil;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n \n \tprivate @Getter List<FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n \n \tpublic FrankDocModel() {\n \t\tgroups = new ArrayList<>();\n \t}\n \n-\tpublic FrankElement findOrCreateFrankElement(Class<?> clazz) {\n+\tpublic ElementType findOrCreateElementType(Class<?> clazz, ConfigChildDictionary dictionary) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MDU3Mw=="}, "originalCommit": {"oid": "111ceaf5aac7430de3e3124fa6a9983364e3c5e3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc3OTgzOA==", "bodyText": "Het model bevat nu een Map<String, ConfigChildSetterDescriptor>. De constructor van het model maakt een lege Map. Die is handig bij het unit testen. Er is een method om deze map te vullen op basis van een (fake) digester-rules.xml file.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r510779838", "createdAt": "2020-10-23T10:10:30Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -17,33 +17,64 @@\n import lombok.Setter;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n import nl.nn.adapterframework.util.LogUtil;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n \n \tprivate @Getter List<FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n \n \tpublic FrankDocModel() {\n \t\tgroups = new ArrayList<>();\n \t}\n \n-\tpublic FrankElement findOrCreateFrankElement(Class<?> clazz) {\n+\tpublic ElementType findOrCreateElementType(Class<?> clazz, ConfigChildDictionary dictionary) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTk3MDU3Mw=="}, "originalCommit": {"oid": "111ceaf5aac7430de3e3124fa6a9983364e3c5e3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDIyNzM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChildSetterDescriptor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzowNToyN1rOHnM_-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMTozNjo0N1rOHoLnoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg2OTQ5OQ==", "bodyText": "Ik denk dat je deze javadoc het beste kan beginnen met wat het is, bijvoorbeeld:\nThis class describes a method that a child element can call to register itself at its parent.\nIf such a method exists for a class, that class can have ConfigChildren of the type of the parameter of the method.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r510869499", "createdAt": "2020-10-23T13:05:27Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChildSetterDescriptor.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import org.xml.sax.SAXException;\n+\n+import lombok.Getter;\n+\n+/**\n+ * This class is similar to {@link ConfigChild}, but it is not the same. As an example,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb47d48f30e60c052aa732b3b5d98a4b262b6bd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwNTUwMg==", "bodyText": "Akkoord, ga ik verbeteren.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r511005502", "createdAt": "2020-10-23T16:36:12Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChildSetterDescriptor.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import org.xml.sax.SAXException;\n+\n+import lombok.Getter;\n+\n+/**\n+ * This class is similar to {@link ConfigChild}, but it is not the same. As an example,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg2OTQ5OQ=="}, "originalCommit": {"oid": "3fb47d48f30e60c052aa732b3b5d98a4b262b6bd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg5NTQ1Nw==", "bodyText": "Ik heb de Javadoc veranderd, maar er zit nog iets niet lekker. Ik vermoed dat ik altijd een ander idee heb gehad dan jij over wat ConfigChildSetterDescriptor is. Ik ben benieuwd wat je van de Javadoc vindt die ik gemaakt heb. Is de naam ConfigChildSetterDescriptor nu nog goed? Of zal ik je suggestie over de Javadoc tekst overnemen zoals je die gegeven hebt?", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r511895457", "createdAt": "2020-10-26T11:36:47Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChildSetterDescriptor.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import org.xml.sax.SAXException;\n+\n+import lombok.Getter;\n+\n+/**\n+ * This class is similar to {@link ConfigChild}, but it is not the same. As an example,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg2OTQ5OQ=="}, "originalCommit": {"oid": "3fb47d48f30e60c052aa732b3b5d98a4b262b6bd"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDI0OTU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzoxMToxN1rOHnNNZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMTo1NTozMlrOHoMN6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3MjkzMg==", "bodyText": "Met 'this can happen' bedoel je denk ik: dat dit FrankElement al aangemaakt is als gevolg van het aanmaken van de parent class. Als dat zo is, dan moet je dat concreter zeggen.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r510872932", "createdAt": "2020-10-23T13:11:17Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -1,46 +1,136 @@\n package nl.nn.adapterframework.doc.model;\n \n+import java.io.IOException;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.StringTokenizer;\n import java.util.Map.Entry;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n \n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n \tprivate @Getter List<FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n \n \tpublic FrankDocModel() {\n+\t\tconfigChildDescriptors = new HashMap<>();\n \t\tgroups = new ArrayList<>();\n \t}\n \n+\tpublic void createConfigChildDescriptorsFrom(String path) {\n+\t\tResource resource = Resource.getResource(path);\n+\t\tif(resource == null) {\n+\t\t\tthrow new RuntimeException(String.format(\"Cannot find resource on the classpath: [%s]\", path));\n+\t\t}\n+\t\ttry {\n+\t\t\tXmlUtils.parseXml(resource.asInputSource(), new Handler(path));\n+\t\t}\n+\t\tcatch(IOException e) {\n+\t\t\tthrow new RuntimeException(String.format(\"An IOException occurred while parsing XML from [%s]\", path), e);\n+\t\t}\n+\t\tcatch(SAXException e) {\n+\t\t\tthrow new RuntimeException(String.format(\"A SAXException occurred while parsing XML from [%s]\", path), e);\n+\t\t}\n+\t}\n+\n+\tprivate class Handler extends DigesterRulesHandler {\n+\t\tprivate final String path;\n+\n+\t\tHandler(String path) {\n+\t\t\tthis.path = path;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void handle(DigesterRule rule) throws SAXException {\n+\t\t\tString pattern = rule.getPattern();\n+\t\t\tStringTokenizer tokenizer = new StringTokenizer(pattern, \"/\");\n+\t\t\tString syntax1Name = null;\n+\t\t\twhile(tokenizer.hasMoreElements()) {\n+\t\t\t\tString token = tokenizer.nextToken();\n+\t\t\t\tif(!\"*\".equals(token)) {\n+\t\t\t\t\tsyntax1Name = token;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif(StringUtils.isNotEmpty(rule.getRegisterMethod())) {\n+\t\t\t\tadd(rule.getRegisterMethod(), syntax1Name);\n+\t\t\t}\t\t\t\n+\t\t}\n+\n+\t\tprivate void add(String registerMethod, String syntax1Name) throws SAXException {\n+\t\t\tConfigChildSetterDescriptor item = new ConfigChildSetterDescriptor(registerMethod, syntax1Name);\n+\t\t\tif(configChildDescriptors.containsKey(item.getMethodName())) {\n+\t\t\t\tlog.warn(String.format(\"In digester rules [%s], duplicate method name [%s]\", path, registerMethod));\n+\t\t\t} else {\n+\t\t\t\tconfigChildDescriptors.put(item.getMethodName(), item);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic ElementType findOrCreateElementType(Class<?> clazz) {\n+\t\tif(allTypes.containsKey(clazz.getName())) {\n+\t\t\treturn allTypes.get(clazz.getName());\n+\t\t}\n+\t\tfinal ElementType result = new ElementType(clazz);\n+\t\t// If a containing FrankElement contains the type being created, we do not\n+\t\t// want recursion.\n+\t\tallTypes.put(result.getFullName(), result);\n+\t\tif(clazz.isInterface()) {\n+\t\t\tUtils.getSpringBeans(clazz.getName()).stream()\n+\t\t\t\t\t.map(b -> b.getClazz())\n+\t\t\t\t\t.map(cl -> findOrCreateFrankElement(cl))\n+\t\t\t\t\t.forEach(result::addMember);\n+\t\t} else {\n+\t\t\tresult.addMember(findOrCreateFrankElement(clazz));\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tpublic boolean hasType(String typeName) {\n+\t\treturn allTypes.containsKey(typeName);\n+\t}\n+\n \tpublic FrankElement findOrCreateFrankElement(Class<?> clazz) {\n \t\tif(allElements.containsKey(clazz.getName())) {\n \t\t\treturn allElements.get(clazz.getName());\n \t\t}\n \t\tClass<?> superClass = clazz.getSuperclass();\n \t\tFrankElement parent = superClass == null ? null : findOrCreateFrankElement(superClass);\n-\t\tFrankElement current = new FrankElement(clazz, parent);\n-\t\tcurrent.setAttributes(createAttributes(clazz.getDeclaredMethods(), current));\n-\t\tallElements.put(current.getFullName(), current);\n-\t\treturn current;\n+\t\tif(allElements.containsKey(clazz.getName())) {\n+\t\t\t// This can happen when element C inherits from element P, while P can have\n+\t\t\t// C as a configuration child.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb47d48f30e60c052aa732b3b5d98a4b262b6bd"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwNTM2OA==", "bodyText": "Akkoord, ga ik verbeteren.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r511005368", "createdAt": "2020-10-23T16:35:56Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -1,46 +1,136 @@\n package nl.nn.adapterframework.doc.model;\n \n+import java.io.IOException;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.StringTokenizer;\n import java.util.Map.Entry;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n \n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n \tprivate @Getter List<FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n \n \tpublic FrankDocModel() {\n+\t\tconfigChildDescriptors = new HashMap<>();\n \t\tgroups = new ArrayList<>();\n \t}\n \n+\tpublic void createConfigChildDescriptorsFrom(String path) {\n+\t\tResource resource = Resource.getResource(path);\n+\t\tif(resource == null) {\n+\t\t\tthrow new RuntimeException(String.format(\"Cannot find resource on the classpath: [%s]\", path));\n+\t\t}\n+\t\ttry {\n+\t\t\tXmlUtils.parseXml(resource.asInputSource(), new Handler(path));\n+\t\t}\n+\t\tcatch(IOException e) {\n+\t\t\tthrow new RuntimeException(String.format(\"An IOException occurred while parsing XML from [%s]\", path), e);\n+\t\t}\n+\t\tcatch(SAXException e) {\n+\t\t\tthrow new RuntimeException(String.format(\"A SAXException occurred while parsing XML from [%s]\", path), e);\n+\t\t}\n+\t}\n+\n+\tprivate class Handler extends DigesterRulesHandler {\n+\t\tprivate final String path;\n+\n+\t\tHandler(String path) {\n+\t\t\tthis.path = path;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void handle(DigesterRule rule) throws SAXException {\n+\t\t\tString pattern = rule.getPattern();\n+\t\t\tStringTokenizer tokenizer = new StringTokenizer(pattern, \"/\");\n+\t\t\tString syntax1Name = null;\n+\t\t\twhile(tokenizer.hasMoreElements()) {\n+\t\t\t\tString token = tokenizer.nextToken();\n+\t\t\t\tif(!\"*\".equals(token)) {\n+\t\t\t\t\tsyntax1Name = token;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif(StringUtils.isNotEmpty(rule.getRegisterMethod())) {\n+\t\t\t\tadd(rule.getRegisterMethod(), syntax1Name);\n+\t\t\t}\t\t\t\n+\t\t}\n+\n+\t\tprivate void add(String registerMethod, String syntax1Name) throws SAXException {\n+\t\t\tConfigChildSetterDescriptor item = new ConfigChildSetterDescriptor(registerMethod, syntax1Name);\n+\t\t\tif(configChildDescriptors.containsKey(item.getMethodName())) {\n+\t\t\t\tlog.warn(String.format(\"In digester rules [%s], duplicate method name [%s]\", path, registerMethod));\n+\t\t\t} else {\n+\t\t\t\tconfigChildDescriptors.put(item.getMethodName(), item);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic ElementType findOrCreateElementType(Class<?> clazz) {\n+\t\tif(allTypes.containsKey(clazz.getName())) {\n+\t\t\treturn allTypes.get(clazz.getName());\n+\t\t}\n+\t\tfinal ElementType result = new ElementType(clazz);\n+\t\t// If a containing FrankElement contains the type being created, we do not\n+\t\t// want recursion.\n+\t\tallTypes.put(result.getFullName(), result);\n+\t\tif(clazz.isInterface()) {\n+\t\t\tUtils.getSpringBeans(clazz.getName()).stream()\n+\t\t\t\t\t.map(b -> b.getClazz())\n+\t\t\t\t\t.map(cl -> findOrCreateFrankElement(cl))\n+\t\t\t\t\t.forEach(result::addMember);\n+\t\t} else {\n+\t\t\tresult.addMember(findOrCreateFrankElement(clazz));\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tpublic boolean hasType(String typeName) {\n+\t\treturn allTypes.containsKey(typeName);\n+\t}\n+\n \tpublic FrankElement findOrCreateFrankElement(Class<?> clazz) {\n \t\tif(allElements.containsKey(clazz.getName())) {\n \t\t\treturn allElements.get(clazz.getName());\n \t\t}\n \t\tClass<?> superClass = clazz.getSuperclass();\n \t\tFrankElement parent = superClass == null ? null : findOrCreateFrankElement(superClass);\n-\t\tFrankElement current = new FrankElement(clazz, parent);\n-\t\tcurrent.setAttributes(createAttributes(clazz.getDeclaredMethods(), current));\n-\t\tallElements.put(current.getFullName(), current);\n-\t\treturn current;\n+\t\tif(allElements.containsKey(clazz.getName())) {\n+\t\t\t// This can happen when element C inherits from element P, while P can have\n+\t\t\t// C as a configuration child.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3MjkzMg=="}, "originalCommit": {"oid": "3fb47d48f30e60c052aa732b3b5d98a4b262b6bd"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc0MjY4OQ==", "bodyText": "Ook over deze if():\nAls je problemen met circular references wil voorkomen (bijvoorbeeld door een IbisDocRef van een class naar een child), dan moet je niet deze if doen, maar het element al aanmaken en in de lijst opnemen v\u00f3\u00f3r dat je findOrCreateFrankElement(superClass) aanroept.\nDe if() die je nu hebt gaat je er niet bij helpen, die komt te laat. Ik denk dus dat hij weg kan.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r511742689", "createdAt": "2020-10-26T06:35:15Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -1,46 +1,136 @@\n package nl.nn.adapterframework.doc.model;\n \n+import java.io.IOException;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.StringTokenizer;\n import java.util.Map.Entry;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n \n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n \tprivate @Getter List<FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n \n \tpublic FrankDocModel() {\n+\t\tconfigChildDescriptors = new HashMap<>();\n \t\tgroups = new ArrayList<>();\n \t}\n \n+\tpublic void createConfigChildDescriptorsFrom(String path) {\n+\t\tResource resource = Resource.getResource(path);\n+\t\tif(resource == null) {\n+\t\t\tthrow new RuntimeException(String.format(\"Cannot find resource on the classpath: [%s]\", path));\n+\t\t}\n+\t\ttry {\n+\t\t\tXmlUtils.parseXml(resource.asInputSource(), new Handler(path));\n+\t\t}\n+\t\tcatch(IOException e) {\n+\t\t\tthrow new RuntimeException(String.format(\"An IOException occurred while parsing XML from [%s]\", path), e);\n+\t\t}\n+\t\tcatch(SAXException e) {\n+\t\t\tthrow new RuntimeException(String.format(\"A SAXException occurred while parsing XML from [%s]\", path), e);\n+\t\t}\n+\t}\n+\n+\tprivate class Handler extends DigesterRulesHandler {\n+\t\tprivate final String path;\n+\n+\t\tHandler(String path) {\n+\t\t\tthis.path = path;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void handle(DigesterRule rule) throws SAXException {\n+\t\t\tString pattern = rule.getPattern();\n+\t\t\tStringTokenizer tokenizer = new StringTokenizer(pattern, \"/\");\n+\t\t\tString syntax1Name = null;\n+\t\t\twhile(tokenizer.hasMoreElements()) {\n+\t\t\t\tString token = tokenizer.nextToken();\n+\t\t\t\tif(!\"*\".equals(token)) {\n+\t\t\t\t\tsyntax1Name = token;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif(StringUtils.isNotEmpty(rule.getRegisterMethod())) {\n+\t\t\t\tadd(rule.getRegisterMethod(), syntax1Name);\n+\t\t\t}\t\t\t\n+\t\t}\n+\n+\t\tprivate void add(String registerMethod, String syntax1Name) throws SAXException {\n+\t\t\tConfigChildSetterDescriptor item = new ConfigChildSetterDescriptor(registerMethod, syntax1Name);\n+\t\t\tif(configChildDescriptors.containsKey(item.getMethodName())) {\n+\t\t\t\tlog.warn(String.format(\"In digester rules [%s], duplicate method name [%s]\", path, registerMethod));\n+\t\t\t} else {\n+\t\t\t\tconfigChildDescriptors.put(item.getMethodName(), item);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic ElementType findOrCreateElementType(Class<?> clazz) {\n+\t\tif(allTypes.containsKey(clazz.getName())) {\n+\t\t\treturn allTypes.get(clazz.getName());\n+\t\t}\n+\t\tfinal ElementType result = new ElementType(clazz);\n+\t\t// If a containing FrankElement contains the type being created, we do not\n+\t\t// want recursion.\n+\t\tallTypes.put(result.getFullName(), result);\n+\t\tif(clazz.isInterface()) {\n+\t\t\tUtils.getSpringBeans(clazz.getName()).stream()\n+\t\t\t\t\t.map(b -> b.getClazz())\n+\t\t\t\t\t.map(cl -> findOrCreateFrankElement(cl))\n+\t\t\t\t\t.forEach(result::addMember);\n+\t\t} else {\n+\t\t\tresult.addMember(findOrCreateFrankElement(clazz));\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tpublic boolean hasType(String typeName) {\n+\t\treturn allTypes.containsKey(typeName);\n+\t}\n+\n \tpublic FrankElement findOrCreateFrankElement(Class<?> clazz) {\n \t\tif(allElements.containsKey(clazz.getName())) {\n \t\t\treturn allElements.get(clazz.getName());\n \t\t}\n \t\tClass<?> superClass = clazz.getSuperclass();\n \t\tFrankElement parent = superClass == null ? null : findOrCreateFrankElement(superClass);\n-\t\tFrankElement current = new FrankElement(clazz, parent);\n-\t\tcurrent.setAttributes(createAttributes(clazz.getDeclaredMethods(), current));\n-\t\tallElements.put(current.getFullName(), current);\n-\t\treturn current;\n+\t\tif(allElements.containsKey(clazz.getName())) {\n+\t\t\t// This can happen when element C inherits from element P, while P can have\n+\t\t\t// C as a configuration child.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3MjkzMg=="}, "originalCommit": {"oid": "3fb47d48f30e60c052aa732b3b5d98a4b262b6bd"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkwNTI1Ng==", "bodyText": "Gedaan.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r511905256", "createdAt": "2020-10-26T11:55:32Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -1,46 +1,136 @@\n package nl.nn.adapterframework.doc.model;\n \n+import java.io.IOException;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.StringTokenizer;\n import java.util.Map.Entry;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n \n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n \tprivate @Getter List<FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n \n \tpublic FrankDocModel() {\n+\t\tconfigChildDescriptors = new HashMap<>();\n \t\tgroups = new ArrayList<>();\n \t}\n \n+\tpublic void createConfigChildDescriptorsFrom(String path) {\n+\t\tResource resource = Resource.getResource(path);\n+\t\tif(resource == null) {\n+\t\t\tthrow new RuntimeException(String.format(\"Cannot find resource on the classpath: [%s]\", path));\n+\t\t}\n+\t\ttry {\n+\t\t\tXmlUtils.parseXml(resource.asInputSource(), new Handler(path));\n+\t\t}\n+\t\tcatch(IOException e) {\n+\t\t\tthrow new RuntimeException(String.format(\"An IOException occurred while parsing XML from [%s]\", path), e);\n+\t\t}\n+\t\tcatch(SAXException e) {\n+\t\t\tthrow new RuntimeException(String.format(\"A SAXException occurred while parsing XML from [%s]\", path), e);\n+\t\t}\n+\t}\n+\n+\tprivate class Handler extends DigesterRulesHandler {\n+\t\tprivate final String path;\n+\n+\t\tHandler(String path) {\n+\t\t\tthis.path = path;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void handle(DigesterRule rule) throws SAXException {\n+\t\t\tString pattern = rule.getPattern();\n+\t\t\tStringTokenizer tokenizer = new StringTokenizer(pattern, \"/\");\n+\t\t\tString syntax1Name = null;\n+\t\t\twhile(tokenizer.hasMoreElements()) {\n+\t\t\t\tString token = tokenizer.nextToken();\n+\t\t\t\tif(!\"*\".equals(token)) {\n+\t\t\t\t\tsyntax1Name = token;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif(StringUtils.isNotEmpty(rule.getRegisterMethod())) {\n+\t\t\t\tadd(rule.getRegisterMethod(), syntax1Name);\n+\t\t\t}\t\t\t\n+\t\t}\n+\n+\t\tprivate void add(String registerMethod, String syntax1Name) throws SAXException {\n+\t\t\tConfigChildSetterDescriptor item = new ConfigChildSetterDescriptor(registerMethod, syntax1Name);\n+\t\t\tif(configChildDescriptors.containsKey(item.getMethodName())) {\n+\t\t\t\tlog.warn(String.format(\"In digester rules [%s], duplicate method name [%s]\", path, registerMethod));\n+\t\t\t} else {\n+\t\t\t\tconfigChildDescriptors.put(item.getMethodName(), item);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic ElementType findOrCreateElementType(Class<?> clazz) {\n+\t\tif(allTypes.containsKey(clazz.getName())) {\n+\t\t\treturn allTypes.get(clazz.getName());\n+\t\t}\n+\t\tfinal ElementType result = new ElementType(clazz);\n+\t\t// If a containing FrankElement contains the type being created, we do not\n+\t\t// want recursion.\n+\t\tallTypes.put(result.getFullName(), result);\n+\t\tif(clazz.isInterface()) {\n+\t\t\tUtils.getSpringBeans(clazz.getName()).stream()\n+\t\t\t\t\t.map(b -> b.getClazz())\n+\t\t\t\t\t.map(cl -> findOrCreateFrankElement(cl))\n+\t\t\t\t\t.forEach(result::addMember);\n+\t\t} else {\n+\t\t\tresult.addMember(findOrCreateFrankElement(clazz));\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tpublic boolean hasType(String typeName) {\n+\t\treturn allTypes.containsKey(typeName);\n+\t}\n+\n \tpublic FrankElement findOrCreateFrankElement(Class<?> clazz) {\n \t\tif(allElements.containsKey(clazz.getName())) {\n \t\t\treturn allElements.get(clazz.getName());\n \t\t}\n \t\tClass<?> superClass = clazz.getSuperclass();\n \t\tFrankElement parent = superClass == null ? null : findOrCreateFrankElement(superClass);\n-\t\tFrankElement current = new FrankElement(clazz, parent);\n-\t\tcurrent.setAttributes(createAttributes(clazz.getDeclaredMethods(), current));\n-\t\tallElements.put(current.getFullName(), current);\n-\t\treturn current;\n+\t\tif(allElements.containsKey(clazz.getName())) {\n+\t\t\t// This can happen when element C inherits from element P, while P can have\n+\t\t\t// C as a configuration child.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3MjkzMg=="}, "originalCommit": {"oid": "3fb47d48f30e60c052aa732b3b5d98a4b262b6bd"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDI3MTQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzoxNzowMFrOHnNatA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjozNTozNlrOHnVSEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3NjM0MA==", "bodyText": "Kan createConfigChildren() (en ook createAttributes()) niet een method van FrankElement zijn?", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r510876340", "createdAt": "2020-10-23T13:17:00Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -201,9 +277,43 @@ private static Method getParentMethod(String className, String methodName) {\n \t\t}\n \t}\n \n-\tpublic FrankDocGroup addGroup(String name) {\n-\t\tFrankDocGroup group = new FrankDocGroup(name);\n-\t\tgroups.add(group);\n-\t\treturn group;\n+\tprivate List<ConfigChild> createConfigChildren(\tMethod[] methods, FrankElement parent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb47d48f30e60c052aa732b3b5d98a4b262b6bd"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwNTIwMQ==", "bodyText": "Hier hebben we het daarnet over gehad door de telefoon. Om attributes te cre\u00ebren moet je @IbisDocRef annotaties parsen en de betreffende FrankElement objecten cre\u00ebren. Dat zit weer in het model. Je voorstel zou betekenen dat FrankDocModel de class FrankAttribute moet importeren en ook omgekeerd. Dat lukt niet.\nHetzelfde geldt voor configuration children. Om een ConfigChild te maken moet je het ElementType cre\u00ebren dat erin gaat.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r511005201", "createdAt": "2020-10-23T16:35:36Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -201,9 +277,43 @@ private static Method getParentMethod(String className, String methodName) {\n \t\t}\n \t}\n \n-\tpublic FrankDocGroup addGroup(String name) {\n-\t\tFrankDocGroup group = new FrankDocGroup(name);\n-\t\tgroups.add(group);\n-\t\treturn group;\n+\tprivate List<ConfigChild> createConfigChildren(\tMethod[] methods, FrankElement parent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3NjM0MA=="}, "originalCommit": {"oid": "3fb47d48f30e60c052aa732b3b5d98a4b262b6bd"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDI4MTM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzoxOTozM1rOHnNgzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMToxNjowMVrOHoK-Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3NzkwMw==", "bodyText": "Deze parseIbisDocAnnotation() is er alleen voor ConfigChildren. Kan hij dan niet daar een method van zijn?", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r510877903", "createdAt": "2020-10-23T13:19:33Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -201,9 +277,43 @@ private static Method getParentMethod(String className, String methodName) {\n \t\t}\n \t}\n \n-\tpublic FrankDocGroup addGroup(String name) {\n-\t\tFrankDocGroup group = new FrankDocGroup(name);\n-\t\tgroups.add(group);\n-\t\treturn group;\n+\tprivate List<ConfigChild> createConfigChildren(\tMethod[] methods, FrankElement parent) {\n+\t\tList<Method> configChildSetters = Arrays.asList(methods).stream()\n+\t\t\t\t.filter(Utils::isConfigChildSetter)\n+\t\t\t\t.filter(m -> configChildDescriptors.get(m.getName()) != null)\n+\t\t\t\t.collect(Collectors.toList());\n+\t\tList<ConfigChild> result = new ArrayList<>();\n+\t\tfor(Method m: configChildSetters) {\n+\t\t\tConfigChild configChild = new ConfigChild(parent);\n+\t\t\tConfigChildSetterDescriptor configChildDescriptor = configChildDescriptors.get(m.getName());\n+\t\t\tIbisDoc ibisDoc = AnnotationUtils.findAnnotation(m, IbisDoc.class);\n+\t\t\tInteger optionalOrder = parseIbisDocAnnotation(ibisDoc);\n+\t\t\tif(optionalOrder != null) {\n+\t\t\t\tconfigChild.setSequenceInConfig(optionalOrder);\n+\t\t\t} else {\n+\t\t\t\tlog.warn(String.format(\"No config child order for method [%s] of Frank element [%s]\",\n+\t\t\t\t\t\tm.getName(), parent.getSimpleName()));\n+\t\t\t\tconfigChild.setSequenceInConfig(Integer.MAX_VALUE);\n+\t\t\t}\n+\t\t\tClass<?> elementClass = m.getParameterTypes()[0];\n+\t\t\tconfigChild.setElementType(findOrCreateElementType(elementClass));\n+\t\t\tconfigChild.setAllowMultiple(configChildDescriptor.isAllowMultiple());\n+\t\t\tconfigChild.setMandatory(configChildDescriptor.isMandatory());\n+\t\t\tconfigChild.setSyntax1Name(configChildDescriptor.getSyntax1Name());\n+\t\t\tresult.add(configChild);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tprivate static Integer parseIbisDocAnnotation(IbisDoc ibisDoc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb47d48f30e60c052aa732b3b5d98a4b262b6bd"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwNDU4NQ==", "bodyText": "Hier hebben we het daarnet over gehad door de telefoon. Om attributes te cre\u00ebren moet je @IbisDocRef annotaties parsen en de betreffende FrankElement objecten cre\u00ebren. Dat zit weer in het model. Je voorstel zou betekenen dat FrankDocModel de class FrankAttribute moet importeren en ook omgekeerd. Dat lukt niet.\nHetzelfde geldt voor configuration children. Om een ConfigChild te maken moet je het ElementType cre\u00ebren dat erin gaat.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r511004585", "createdAt": "2020-10-23T16:34:24Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -201,9 +277,43 @@ private static Method getParentMethod(String className, String methodName) {\n \t\t}\n \t}\n \n-\tpublic FrankDocGroup addGroup(String name) {\n-\t\tFrankDocGroup group = new FrankDocGroup(name);\n-\t\tgroups.add(group);\n-\t\treturn group;\n+\tprivate List<ConfigChild> createConfigChildren(\tMethod[] methods, FrankElement parent) {\n+\t\tList<Method> configChildSetters = Arrays.asList(methods).stream()\n+\t\t\t\t.filter(Utils::isConfigChildSetter)\n+\t\t\t\t.filter(m -> configChildDescriptors.get(m.getName()) != null)\n+\t\t\t\t.collect(Collectors.toList());\n+\t\tList<ConfigChild> result = new ArrayList<>();\n+\t\tfor(Method m: configChildSetters) {\n+\t\t\tConfigChild configChild = new ConfigChild(parent);\n+\t\t\tConfigChildSetterDescriptor configChildDescriptor = configChildDescriptors.get(m.getName());\n+\t\t\tIbisDoc ibisDoc = AnnotationUtils.findAnnotation(m, IbisDoc.class);\n+\t\t\tInteger optionalOrder = parseIbisDocAnnotation(ibisDoc);\n+\t\t\tif(optionalOrder != null) {\n+\t\t\t\tconfigChild.setSequenceInConfig(optionalOrder);\n+\t\t\t} else {\n+\t\t\t\tlog.warn(String.format(\"No config child order for method [%s] of Frank element [%s]\",\n+\t\t\t\t\t\tm.getName(), parent.getSimpleName()));\n+\t\t\t\tconfigChild.setSequenceInConfig(Integer.MAX_VALUE);\n+\t\t\t}\n+\t\t\tClass<?> elementClass = m.getParameterTypes()[0];\n+\t\t\tconfigChild.setElementType(findOrCreateElementType(elementClass));\n+\t\t\tconfigChild.setAllowMultiple(configChildDescriptor.isAllowMultiple());\n+\t\t\tconfigChild.setMandatory(configChildDescriptor.isMandatory());\n+\t\t\tconfigChild.setSyntax1Name(configChildDescriptor.getSyntax1Name());\n+\t\t\tresult.add(configChild);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tprivate static Integer parseIbisDocAnnotation(IbisDoc ibisDoc) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3NzkwMw=="}, "originalCommit": {"oid": "3fb47d48f30e60c052aa732b3b5d98a4b262b6bd"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwNTAxOA==", "bodyText": "Oh sorry, verkeerd gekeken. Dit punt kan ik w\u00e8l meenemen.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r511005018", "createdAt": "2020-10-23T16:35:15Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -201,9 +277,43 @@ private static Method getParentMethod(String className, String methodName) {\n \t\t}\n \t}\n \n-\tpublic FrankDocGroup addGroup(String name) {\n-\t\tFrankDocGroup group = new FrankDocGroup(name);\n-\t\tgroups.add(group);\n-\t\treturn group;\n+\tprivate List<ConfigChild> createConfigChildren(\tMethod[] methods, FrankElement parent) {\n+\t\tList<Method> configChildSetters = Arrays.asList(methods).stream()\n+\t\t\t\t.filter(Utils::isConfigChildSetter)\n+\t\t\t\t.filter(m -> configChildDescriptors.get(m.getName()) != null)\n+\t\t\t\t.collect(Collectors.toList());\n+\t\tList<ConfigChild> result = new ArrayList<>();\n+\t\tfor(Method m: configChildSetters) {\n+\t\t\tConfigChild configChild = new ConfigChild(parent);\n+\t\t\tConfigChildSetterDescriptor configChildDescriptor = configChildDescriptors.get(m.getName());\n+\t\t\tIbisDoc ibisDoc = AnnotationUtils.findAnnotation(m, IbisDoc.class);\n+\t\t\tInteger optionalOrder = parseIbisDocAnnotation(ibisDoc);\n+\t\t\tif(optionalOrder != null) {\n+\t\t\t\tconfigChild.setSequenceInConfig(optionalOrder);\n+\t\t\t} else {\n+\t\t\t\tlog.warn(String.format(\"No config child order for method [%s] of Frank element [%s]\",\n+\t\t\t\t\t\tm.getName(), parent.getSimpleName()));\n+\t\t\t\tconfigChild.setSequenceInConfig(Integer.MAX_VALUE);\n+\t\t\t}\n+\t\t\tClass<?> elementClass = m.getParameterTypes()[0];\n+\t\t\tconfigChild.setElementType(findOrCreateElementType(elementClass));\n+\t\t\tconfigChild.setAllowMultiple(configChildDescriptor.isAllowMultiple());\n+\t\t\tconfigChild.setMandatory(configChildDescriptor.isMandatory());\n+\t\t\tconfigChild.setSyntax1Name(configChildDescriptor.getSyntax1Name());\n+\t\t\tresult.add(configChild);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tprivate static Integer parseIbisDocAnnotation(IbisDoc ibisDoc) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3NzkwMw=="}, "originalCommit": {"oid": "3fb47d48f30e60c052aa732b3b5d98a4b262b6bd"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg4NDgzOA==", "bodyText": "Gedaan.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r511884838", "createdAt": "2020-10-26T11:16:01Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -201,9 +277,43 @@ private static Method getParentMethod(String className, String methodName) {\n \t\t}\n \t}\n \n-\tpublic FrankDocGroup addGroup(String name) {\n-\t\tFrankDocGroup group = new FrankDocGroup(name);\n-\t\tgroups.add(group);\n-\t\treturn group;\n+\tprivate List<ConfigChild> createConfigChildren(\tMethod[] methods, FrankElement parent) {\n+\t\tList<Method> configChildSetters = Arrays.asList(methods).stream()\n+\t\t\t\t.filter(Utils::isConfigChildSetter)\n+\t\t\t\t.filter(m -> configChildDescriptors.get(m.getName()) != null)\n+\t\t\t\t.collect(Collectors.toList());\n+\t\tList<ConfigChild> result = new ArrayList<>();\n+\t\tfor(Method m: configChildSetters) {\n+\t\t\tConfigChild configChild = new ConfigChild(parent);\n+\t\t\tConfigChildSetterDescriptor configChildDescriptor = configChildDescriptors.get(m.getName());\n+\t\t\tIbisDoc ibisDoc = AnnotationUtils.findAnnotation(m, IbisDoc.class);\n+\t\t\tInteger optionalOrder = parseIbisDocAnnotation(ibisDoc);\n+\t\t\tif(optionalOrder != null) {\n+\t\t\t\tconfigChild.setSequenceInConfig(optionalOrder);\n+\t\t\t} else {\n+\t\t\t\tlog.warn(String.format(\"No config child order for method [%s] of Frank element [%s]\",\n+\t\t\t\t\t\tm.getName(), parent.getSimpleName()));\n+\t\t\t\tconfigChild.setSequenceInConfig(Integer.MAX_VALUE);\n+\t\t\t}\n+\t\t\tClass<?> elementClass = m.getParameterTypes()[0];\n+\t\t\tconfigChild.setElementType(findOrCreateElementType(elementClass));\n+\t\t\tconfigChild.setAllowMultiple(configChildDescriptor.isAllowMultiple());\n+\t\t\tconfigChild.setMandatory(configChildDescriptor.isMandatory());\n+\t\t\tconfigChild.setSyntax1Name(configChildDescriptor.getSyntax1Name());\n+\t\t\tresult.add(configChild);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tprivate static Integer parseIbisDocAnnotation(IbisDoc ibisDoc) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg3NzkwMw=="}, "originalCommit": {"oid": "3fb47d48f30e60c052aa732b3b5d98a4b262b6bd"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDMwODYwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/doc/InfoBuilderSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzoyNjoxNVrOHnNxNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNTo1MjoyOVrOHnTxIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg4MjEwMw==", "bodyText": "Kunnen deze niet het beste ook naar Utils verhuizen?", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r510882103", "createdAt": "2020-10-23T13:26:15Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/InfoBuilderSource.java", "diffHunk": "@@ -386,4 +397,25 @@ private static void getBeanProperties(Class<?> clazz, String verb, Map<String, M\n \t\t}\n \t}\n \n+\tpublic static boolean isGetterOrSetter(Method method) {\n+\t\tboolean isSetter = method.getReturnType().isPrimitive()\n+\t\t\t\t&& method.getReturnType().getName().equals(\"void\")\n+\t\t\t\t&& (method.getParameterTypes().length == 1)\n+\t\t\t\t&& (method.getParameterTypes()[0].isPrimitive()\n+\t\t\t\t\t\t|| JAVA_BOXED.contains(method.getParameterTypes()[0].getName()));\n+\t\tboolean isGetter = (\n+\t\t\t\t\t(method.getReturnType().isPrimitive()\n+\t\t\t\t\t\t\t&& !method.getReturnType().getName().equals(\"void\"))\n+\t\t\t\t\t|| JAVA_BOXED.contains(method.getReturnType().getName())\n+\t\t\t\t) && (method.getParameterTypes().length == 0);\n+\t\treturn isSetter || isGetter;\n+\t}\n+\n+\tpublic static boolean isConfigChildSetter(Method method) {\n+\t\treturn (method.getParameterTypes().length == 1)\n+\t\t\t\t&& (! method.getParameterTypes()[0].isPrimitive())\n+\t\t\t\t&& (! JAVA_BOXED.contains(method.getParameterTypes()[0].getName()))\n+\t\t\t\t&& (method.getReturnType().isPrimitive())\n+\t\t\t\t&& (method.getReturnType().getName().equals(\"void\"));\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb47d48f30e60c052aa732b3b5d98a4b262b6bd"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4MDM4NA==", "bodyText": "Op termijn moeten ze daar komen, maar nu is dat nog lastig. In de oude code ben ik isGetterOrSetter gaan gebruiken, om te zorgen dat de nieuwe @IbisDoc annotaties de Frank!Doc niet stuk maken. Die implementatie gebruikt de static variabele JAVA_BOXED. Alle methods die JAVA_BOXED ook gebruiken heb ik er hier maar bij gezet. In Utils zijn al methods die de methods uit InfoBuilderSource aanroepen. In de code die we hier ontwikkelen roep ik de methods uit Utils aan.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r510980384", "createdAt": "2020-10-23T15:52:29Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/InfoBuilderSource.java", "diffHunk": "@@ -386,4 +397,25 @@ private static void getBeanProperties(Class<?> clazz, String verb, Map<String, M\n \t\t}\n \t}\n \n+\tpublic static boolean isGetterOrSetter(Method method) {\n+\t\tboolean isSetter = method.getReturnType().isPrimitive()\n+\t\t\t\t&& method.getReturnType().getName().equals(\"void\")\n+\t\t\t\t&& (method.getParameterTypes().length == 1)\n+\t\t\t\t&& (method.getParameterTypes()[0].isPrimitive()\n+\t\t\t\t\t\t|| JAVA_BOXED.contains(method.getParameterTypes()[0].getName()));\n+\t\tboolean isGetter = (\n+\t\t\t\t\t(method.getReturnType().isPrimitive()\n+\t\t\t\t\t\t\t&& !method.getReturnType().getName().equals(\"void\"))\n+\t\t\t\t\t|| JAVA_BOXED.contains(method.getReturnType().getName())\n+\t\t\t\t) && (method.getParameterTypes().length == 0);\n+\t\treturn isSetter || isGetter;\n+\t}\n+\n+\tpublic static boolean isConfigChildSetter(Method method) {\n+\t\treturn (method.getParameterTypes().length == 1)\n+\t\t\t\t&& (! method.getParameterTypes()[0].isPrimitive())\n+\t\t\t\t&& (! JAVA_BOXED.contains(method.getParameterTypes()[0].getName()))\n+\t\t\t\t&& (method.getReturnType().isPrimitive())\n+\t\t\t\t&& (method.getReturnType().getName().equals(\"void\"));\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg4MjEwMw=="}, "originalCommit": {"oid": "3fb47d48f30e60c052aa732b3b5d98a4b262b6bd"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwMDMzMTkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMzozMjowN1rOHnN_bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDoxNjo0MlrOHogtrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg4NTc0MA==", "bodyText": "Het lijkt me goed als je ook nog een  method maakt zoals 'populateModel()', die het model vult in de volgorde waarin dat hoort. Als ik het goed heb is dat:\n\nconfigChildDescriptors bepalen uit digesterRules\nelementTypes creeren uit configChildDescriptors\nSpringBeans ophalen voor alle elementTypes\nFrankElements en Attributes creeren uit SpringBeans", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r510885740", "createdAt": "2020-10-23T13:32:07Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -1,46 +1,136 @@\n package nl.nn.adapterframework.doc.model;\n \n+import java.io.IOException;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.StringTokenizer;\n import java.util.Map.Entry;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n \n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n \tprivate @Getter List<FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n \n \tpublic FrankDocModel() {\n+\t\tconfigChildDescriptors = new HashMap<>();\n \t\tgroups = new ArrayList<>();\n \t}\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb47d48f30e60c052aa732b3b5d98a4b262b6bd"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAwMzA3NQ==", "bodyText": "Ik snap het na ons telefoongesprek van daarnet. Als ik een FrankElement maak voor bijvoorbeeld <Module>, dan ontstaan alle relevante types vanzelf vanwege hierarchie van config children. Dat kan ik inderdaad nu al toevoegen.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r511003075", "createdAt": "2020-10-23T16:31:34Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -1,46 +1,136 @@\n package nl.nn.adapterframework.doc.model;\n \n+import java.io.IOException;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.StringTokenizer;\n import java.util.Map.Entry;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n \n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n \tprivate @Getter List<FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n \n \tpublic FrankDocModel() {\n+\t\tconfigChildDescriptors = new HashMap<>();\n \t\tgroups = new ArrayList<>();\n \t}\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg4NTc0MA=="}, "originalCommit": {"oid": "3fb47d48f30e60c052aa732b3b5d98a4b262b6bd"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0MTA2OA==", "bodyText": "Gedaan. Ik heb de code voor het parsen van @IbisDocRef en @IbisDoc voor attributes wel lelijker moeten maken. Soms wijzen @IbisDocRef annotaties naar methods die er niet zijn. Daarvoor heb ik warnings toegevoegd. Ik stel voor dat we voor een volgende pull request naar alle warnings gaan kijken om te zien waar annotaties missen.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r512241068", "createdAt": "2020-10-26T20:16:42Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -1,46 +1,136 @@\n package nl.nn.adapterframework.doc.model;\n \n+import java.io.IOException;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.StringTokenizer;\n import java.util.Map.Entry;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n \n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n \tprivate @Getter List<FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n \n \tpublic FrankDocModel() {\n+\t\tconfigChildDescriptors = new HashMap<>();\n \t\tgroups = new ArrayList<>();\n \t}\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg4NTc0MA=="}, "originalCommit": {"oid": "3fb47d48f30e60c052aa732b3b5d98a4b262b6bd"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTMyNzQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOToyOToxMlrOHoyqSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNToyNjo0NlrOHpCNag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUzNTExMg==", "bodyText": "Ik wil graag de IbisDoc annotatie bij childElementSetters gaan gebruiken om de functie van de children te gaan documenteren. Daarop moet deze method niet stuk gaan; hij moet er dus tegen kunnen dat er meer dan \u00e9\u00e9n argument is. Hij moet dus:\n\nals er minimaal \u00e9\u00e9n argument is\nchecken of dat argument een integer is\nals dat zo is, dan dat als de order teruggeven.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r512535112", "createdAt": "2020-10-27T09:29:12Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import java.text.ParseException;\n+import java.util.Arrays;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import nl.nn.adapterframework.doc.IbisDoc;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+public class ConfigChild {\n+\tprivate static Logger log = LogUtil.getLogger(ConfigChild.class);\n+\n+\tprivate @Getter FrankElement configParent;\n+\tprivate @Getter @Setter ElementType elementType;\n+\tprivate @Getter int sequenceInConfig;\n+\tprivate @Getter @Setter boolean mandatory;\n+\tprivate @Getter @Setter boolean allowMultiple;\n+\tprivate @Getter @Setter String syntax1Name;\n+\n+\tConfigChild(FrankElement configParent) {\n+\t\tthis.configParent = configParent;\n+\t}\n+\n+\tpublic void setSequenceInConfigFromIbisDocAnnotation(IbisDoc ibisDoc) throws ParseException {\n+\t\tsequenceInConfig = Integer.MAX_VALUE;\n+\t\tif(ibisDoc == null) {\n+\t\t\tthrow new ParseException(\"No @IbisDoc available\", 0);\n+\t\t}\n+\t\tInteger optionalOrder = parseIbisDocAnnotation(ibisDoc);\n+\t\tif(optionalOrder != null) {\n+\t\t\tsequenceInConfig = optionalOrder;\n+\t\t} else {\n+\t\t\tthrow new ParseException(String.format(\"Could not get order from @IbisDoc annotation with value [%s]\",\n+\t\t\t\t\tArrays.asList(ibisDoc.value()).stream().collect(Collectors.joining(\", \"))), 0);\n+\t\t}\n+\t}\n+\n+\tprivate static Integer parseIbisDocAnnotation(IbisDoc ibisDoc) {\n+\t\tInteger result = null;\n+\t\tif((ibisDoc != null) && (ibisDoc.value().length == 1)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94c570724f745508e089434619ce1a80b2047c8f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc4OTg2Ng==", "bodyText": "Gedaan", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r512789866", "createdAt": "2020-10-27T15:26:46Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/ConfigChild.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package nl.nn.adapterframework.doc.model;\n+\n+import java.text.ParseException;\n+import java.util.Arrays;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.Logger;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import nl.nn.adapterframework.doc.IbisDoc;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+public class ConfigChild {\n+\tprivate static Logger log = LogUtil.getLogger(ConfigChild.class);\n+\n+\tprivate @Getter FrankElement configParent;\n+\tprivate @Getter @Setter ElementType elementType;\n+\tprivate @Getter int sequenceInConfig;\n+\tprivate @Getter @Setter boolean mandatory;\n+\tprivate @Getter @Setter boolean allowMultiple;\n+\tprivate @Getter @Setter String syntax1Name;\n+\n+\tConfigChild(FrankElement configParent) {\n+\t\tthis.configParent = configParent;\n+\t}\n+\n+\tpublic void setSequenceInConfigFromIbisDocAnnotation(IbisDoc ibisDoc) throws ParseException {\n+\t\tsequenceInConfig = Integer.MAX_VALUE;\n+\t\tif(ibisDoc == null) {\n+\t\t\tthrow new ParseException(\"No @IbisDoc available\", 0);\n+\t\t}\n+\t\tInteger optionalOrder = parseIbisDocAnnotation(ibisDoc);\n+\t\tif(optionalOrder != null) {\n+\t\t\tsequenceInConfig = optionalOrder;\n+\t\t} else {\n+\t\t\tthrow new ParseException(String.format(\"Could not get order from @IbisDoc annotation with value [%s]\",\n+\t\t\t\t\tArrays.asList(ibisDoc.value()).stream().collect(Collectors.joining(\", \"))), 0);\n+\t\t}\n+\t}\n+\n+\tprivate static Integer parseIbisDocAnnotation(IbisDoc ibisDoc) {\n+\t\tInteger result = null;\n+\t\tif((ibisDoc != null) && (ibisDoc.value().length == 1)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjUzNTExMg=="}, "originalCommit": {"oid": "94c570724f745508e089434619ce1a80b2047c8f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTM2NjI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTozODo0OVrOHozCeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDo0Nzo0MlrOHpAKfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU0MTMwNA==", "bodyText": "Ik denk dat je hier het beste kan beginnen met nl.nn.adapterframework.configuration.Configuration", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r512541304", "createdAt": "2020-10-27T09:38:49Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -1,45 +1,143 @@\n package nl.nn.adapterframework.doc.model;\n \n+import java.io.IOException;\n import java.lang.reflect.Method;\n+import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.StringTokenizer;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n-\n+\tprivate static final String DIGESTER_RULES = \"digester-rules.xml\";\n+\t\n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n \tprivate @Getter List<FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n+\n+\t/**\n+\t * Get the FrankDocModel needed in production. This is just a first draft. The\n+\t * present version does not have groups yet. It will be improved in future\n+\t * pull requests. \n+\t */\n+\tpublic static FrankDocModel populate() {\n+\t\tFrankDocModel result = new FrankDocModel();\n+\t\tresult.createConfigChildDescriptorsFrom(DIGESTER_RULES);\n+\t\tresult.findOrCreateElementType(Utils.getClass(\"nl.nn.adapterframework.core.IAdapter\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94c570724f745508e089434619ce1a80b2047c8f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc1NjM0OQ==", "bodyText": "Gedaan.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r512756349", "createdAt": "2020-10-27T14:47:42Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -1,45 +1,143 @@\n package nl.nn.adapterframework.doc.model;\n \n+import java.io.IOException;\n import java.lang.reflect.Method;\n+import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.StringTokenizer;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n-\n+\tprivate static final String DIGESTER_RULES = \"digester-rules.xml\";\n+\t\n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n \tprivate @Getter List<FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n+\n+\t/**\n+\t * Get the FrankDocModel needed in production. This is just a first draft. The\n+\t * present version does not have groups yet. It will be improved in future\n+\t * pull requests. \n+\t */\n+\tpublic static FrankDocModel populate() {\n+\t\tFrankDocModel result = new FrankDocModel();\n+\t\tresult.createConfigChildDescriptorsFrom(DIGESTER_RULES);\n+\t\tresult.findOrCreateElementType(Utils.getClass(\"nl.nn.adapterframework.core.IAdapter\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU0MTMwNA=="}, "originalCommit": {"oid": "94c570724f745508e089434619ce1a80b2047c8f"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTM4NjE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo0Mzo0OVrOHozPBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDoxMTo1MlrOHo-SQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU0NDUxOQ==", "bodyText": "Je moet hier, en op andere plekken, niet zomaar RuntimeExceptions gooien, maar 'normale' (checked) exceptions, die je vangt en afhandelt op een plek waar je er wat mee kan.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r512544519", "createdAt": "2020-10-27T09:43:49Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -1,45 +1,143 @@\n package nl.nn.adapterframework.doc.model;\n \n+import java.io.IOException;\n import java.lang.reflect.Method;\n+import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.StringTokenizer;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n-\n+\tprivate static final String DIGESTER_RULES = \"digester-rules.xml\";\n+\t\n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n \tprivate @Getter List<FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n+\n+\t/**\n+\t * Get the FrankDocModel needed in production. This is just a first draft. The\n+\t * present version does not have groups yet. It will be improved in future\n+\t * pull requests. \n+\t */\n+\tpublic static FrankDocModel populate() {\n+\t\tFrankDocModel result = new FrankDocModel();\n+\t\tresult.createConfigChildDescriptorsFrom(DIGESTER_RULES);\n+\t\tresult.findOrCreateElementType(Utils.getClass(\"nl.nn.adapterframework.core.IAdapter\"));\n+\t\treturn result;\n+\t}\n \n \tpublic FrankDocModel() {\n+\t\tconfigChildDescriptors = new HashMap<>();\n \t\tgroups = new ArrayList<>();\n \t}\n \n+\tpublic void createConfigChildDescriptorsFrom(String path) {\n+\t\tResource resource = Resource.getResource(path);\n+\t\tif(resource == null) {\n+\t\t\tthrow new RuntimeException(String.format(\"Cannot find resource on the classpath: [%s]\", path));\n+\t\t}\n+\t\ttry {\n+\t\t\tXmlUtils.parseXml(resource.asInputSource(), new Handler(path));\n+\t\t}\n+\t\tcatch(IOException e) {\n+\t\t\tthrow new RuntimeException(String.format(\"An IOException occurred while parsing XML from [%s]\", path), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94c570724f745508e089434619ce1a80b2047c8f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcyNTU2OQ==", "bodyText": "Ik heb alle runtime exceptions uit de \"nieuwe\" code weggehaald. In de oude Frank!Doc code kwamen al runtime exceptions voor. Die heb ik laten staan. In test code heb ik de runtime exceptions ook laten staan.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r512725569", "createdAt": "2020-10-27T14:11:52Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -1,45 +1,143 @@\n package nl.nn.adapterframework.doc.model;\n \n+import java.io.IOException;\n import java.lang.reflect.Method;\n+import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.StringTokenizer;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n-\n+\tprivate static final String DIGESTER_RULES = \"digester-rules.xml\";\n+\t\n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n \tprivate @Getter List<FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n+\n+\t/**\n+\t * Get the FrankDocModel needed in production. This is just a first draft. The\n+\t * present version does not have groups yet. It will be improved in future\n+\t * pull requests. \n+\t */\n+\tpublic static FrankDocModel populate() {\n+\t\tFrankDocModel result = new FrankDocModel();\n+\t\tresult.createConfigChildDescriptorsFrom(DIGESTER_RULES);\n+\t\tresult.findOrCreateElementType(Utils.getClass(\"nl.nn.adapterframework.core.IAdapter\"));\n+\t\treturn result;\n+\t}\n \n \tpublic FrankDocModel() {\n+\t\tconfigChildDescriptors = new HashMap<>();\n \t\tgroups = new ArrayList<>();\n \t}\n \n+\tpublic void createConfigChildDescriptorsFrom(String path) {\n+\t\tResource resource = Resource.getResource(path);\n+\t\tif(resource == null) {\n+\t\t\tthrow new RuntimeException(String.format(\"Cannot find resource on the classpath: [%s]\", path));\n+\t\t}\n+\t\ttry {\n+\t\t\tXmlUtils.parseXml(resource.asInputSource(), new Handler(path));\n+\t\t}\n+\t\tcatch(IOException e) {\n+\t\t\tthrow new RuntimeException(String.format(\"An IOException occurred while parsing XML from [%s]\", path), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU0NDUxOQ=="}, "originalCommit": {"oid": "94c570724f745508e089434619ce1a80b2047c8f"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTM5OTI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo0NzowMlrOHozXQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzoxNTowMlrOHo7iNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU0NjYyNg==", "bodyText": "Ik denk dat het ook handig is om de waarde van clazz.isInterface() te bewaren in ElementType result. Die gaat nog van pas komen denk ik.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r512546626", "createdAt": "2020-10-27T09:47:02Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -1,45 +1,143 @@\n package nl.nn.adapterframework.doc.model;\n \n+import java.io.IOException;\n import java.lang.reflect.Method;\n+import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.StringTokenizer;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n-\n+\tprivate static final String DIGESTER_RULES = \"digester-rules.xml\";\n+\t\n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n \tprivate @Getter List<FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n+\n+\t/**\n+\t * Get the FrankDocModel needed in production. This is just a first draft. The\n+\t * present version does not have groups yet. It will be improved in future\n+\t * pull requests. \n+\t */\n+\tpublic static FrankDocModel populate() {\n+\t\tFrankDocModel result = new FrankDocModel();\n+\t\tresult.createConfigChildDescriptorsFrom(DIGESTER_RULES);\n+\t\tresult.findOrCreateElementType(Utils.getClass(\"nl.nn.adapterframework.core.IAdapter\"));\n+\t\treturn result;\n+\t}\n \n \tpublic FrankDocModel() {\n+\t\tconfigChildDescriptors = new HashMap<>();\n \t\tgroups = new ArrayList<>();\n \t}\n \n+\tpublic void createConfigChildDescriptorsFrom(String path) {\n+\t\tResource resource = Resource.getResource(path);\n+\t\tif(resource == null) {\n+\t\t\tthrow new RuntimeException(String.format(\"Cannot find resource on the classpath: [%s]\", path));\n+\t\t}\n+\t\ttry {\n+\t\t\tXmlUtils.parseXml(resource.asInputSource(), new Handler(path));\n+\t\t}\n+\t\tcatch(IOException e) {\n+\t\t\tthrow new RuntimeException(String.format(\"An IOException occurred while parsing XML from [%s]\", path), e);\n+\t\t}\n+\t\tcatch(SAXException e) {\n+\t\t\tthrow new RuntimeException(String.format(\"A SAXException occurred while parsing XML from [%s]\", path), e);\n+\t\t}\n+\t}\n+\n+\tprivate class Handler extends DigesterRulesHandler {\n+\t\tprivate final String path;\n+\n+\t\tHandler(String path) {\n+\t\t\tthis.path = path;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void handle(DigesterRule rule) throws SAXException {\n+\t\t\tString pattern = rule.getPattern();\n+\t\t\tStringTokenizer tokenizer = new StringTokenizer(pattern, \"/\");\n+\t\t\tString syntax1Name = null;\n+\t\t\twhile(tokenizer.hasMoreElements()) {\n+\t\t\t\tString token = tokenizer.nextToken();\n+\t\t\t\tif(!\"*\".equals(token)) {\n+\t\t\t\t\tsyntax1Name = token;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif(StringUtils.isNotEmpty(rule.getRegisterMethod())) {\n+\t\t\t\tadd(rule.getRegisterMethod(), syntax1Name);\n+\t\t\t}\t\t\t\n+\t\t}\n+\n+\t\tprivate void add(String registerMethod, String syntax1Name) throws SAXException {\n+\t\t\tConfigChildSetterDescriptor item = new ConfigChildSetterDescriptor(registerMethod, syntax1Name);\n+\t\t\tif(configChildDescriptors.containsKey(item.getMethodName())) {\n+\t\t\t\tlog.warn(String.format(\"In digester rules [%s], duplicate method name [%s]\", path, registerMethod));\n+\t\t\t} else {\n+\t\t\t\tconfigChildDescriptors.put(item.getMethodName(), item);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic ElementType findOrCreateElementType(Class<?> clazz) {\n+\t\tif(allTypes.containsKey(clazz.getName())) {\n+\t\t\treturn allTypes.get(clazz.getName());\n+\t\t}\n+\t\tfinal ElementType result = new ElementType(clazz);\n+\t\t// If a containing FrankElement contains the type being created, we do not\n+\t\t// want recursion.\n+\t\tallTypes.put(result.getFullName(), result);\n+\t\tif(clazz.isInterface()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94c570724f745508e089434619ce1a80b2047c8f"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY4MDUwMQ==", "bodyText": "Gedaan.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r512680501", "createdAt": "2020-10-27T13:15:02Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -1,45 +1,143 @@\n package nl.nn.adapterframework.doc.model;\n \n+import java.io.IOException;\n import java.lang.reflect.Method;\n+import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.StringTokenizer;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n-\n+\tprivate static final String DIGESTER_RULES = \"digester-rules.xml\";\n+\t\n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n \tprivate @Getter List<FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n+\n+\t/**\n+\t * Get the FrankDocModel needed in production. This is just a first draft. The\n+\t * present version does not have groups yet. It will be improved in future\n+\t * pull requests. \n+\t */\n+\tpublic static FrankDocModel populate() {\n+\t\tFrankDocModel result = new FrankDocModel();\n+\t\tresult.createConfigChildDescriptorsFrom(DIGESTER_RULES);\n+\t\tresult.findOrCreateElementType(Utils.getClass(\"nl.nn.adapterframework.core.IAdapter\"));\n+\t\treturn result;\n+\t}\n \n \tpublic FrankDocModel() {\n+\t\tconfigChildDescriptors = new HashMap<>();\n \t\tgroups = new ArrayList<>();\n \t}\n \n+\tpublic void createConfigChildDescriptorsFrom(String path) {\n+\t\tResource resource = Resource.getResource(path);\n+\t\tif(resource == null) {\n+\t\t\tthrow new RuntimeException(String.format(\"Cannot find resource on the classpath: [%s]\", path));\n+\t\t}\n+\t\ttry {\n+\t\t\tXmlUtils.parseXml(resource.asInputSource(), new Handler(path));\n+\t\t}\n+\t\tcatch(IOException e) {\n+\t\t\tthrow new RuntimeException(String.format(\"An IOException occurred while parsing XML from [%s]\", path), e);\n+\t\t}\n+\t\tcatch(SAXException e) {\n+\t\t\tthrow new RuntimeException(String.format(\"A SAXException occurred while parsing XML from [%s]\", path), e);\n+\t\t}\n+\t}\n+\n+\tprivate class Handler extends DigesterRulesHandler {\n+\t\tprivate final String path;\n+\n+\t\tHandler(String path) {\n+\t\t\tthis.path = path;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void handle(DigesterRule rule) throws SAXException {\n+\t\t\tString pattern = rule.getPattern();\n+\t\t\tStringTokenizer tokenizer = new StringTokenizer(pattern, \"/\");\n+\t\t\tString syntax1Name = null;\n+\t\t\twhile(tokenizer.hasMoreElements()) {\n+\t\t\t\tString token = tokenizer.nextToken();\n+\t\t\t\tif(!\"*\".equals(token)) {\n+\t\t\t\t\tsyntax1Name = token;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif(StringUtils.isNotEmpty(rule.getRegisterMethod())) {\n+\t\t\t\tadd(rule.getRegisterMethod(), syntax1Name);\n+\t\t\t}\t\t\t\n+\t\t}\n+\n+\t\tprivate void add(String registerMethod, String syntax1Name) throws SAXException {\n+\t\t\tConfigChildSetterDescriptor item = new ConfigChildSetterDescriptor(registerMethod, syntax1Name);\n+\t\t\tif(configChildDescriptors.containsKey(item.getMethodName())) {\n+\t\t\t\tlog.warn(String.format(\"In digester rules [%s], duplicate method name [%s]\", path, registerMethod));\n+\t\t\t} else {\n+\t\t\t\tconfigChildDescriptors.put(item.getMethodName(), item);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic ElementType findOrCreateElementType(Class<?> clazz) {\n+\t\tif(allTypes.containsKey(clazz.getName())) {\n+\t\t\treturn allTypes.get(clazz.getName());\n+\t\t}\n+\t\tfinal ElementType result = new ElementType(clazz);\n+\t\t// If a containing FrankElement contains the type being created, we do not\n+\t\t// want recursion.\n+\t\tallTypes.put(result.getFullName(), result);\n+\t\tif(clazz.isInterface()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU0NjYyNg=="}, "originalCommit": {"oid": "94c570724f745508e089434619ce1a80b2047c8f"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTQwODEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo0OToxMFrOHozctQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzowNjoyNlrOHo7Lsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU0ODAyMQ==", "bodyText": "Ik zou hier voor de duidelijkheid allElements.put(clazz.getName(), current) zetten. Dat je dezelfde key gebruikt voor je put als dat je voor containsKey() hebt gebruikt", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r512548021", "createdAt": "2020-10-27T09:49:10Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -1,45 +1,143 @@\n package nl.nn.adapterframework.doc.model;\n \n+import java.io.IOException;\n import java.lang.reflect.Method;\n+import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.StringTokenizer;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n-\n+\tprivate static final String DIGESTER_RULES = \"digester-rules.xml\";\n+\t\n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n \tprivate @Getter List<FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n+\n+\t/**\n+\t * Get the FrankDocModel needed in production. This is just a first draft. The\n+\t * present version does not have groups yet. It will be improved in future\n+\t * pull requests. \n+\t */\n+\tpublic static FrankDocModel populate() {\n+\t\tFrankDocModel result = new FrankDocModel();\n+\t\tresult.createConfigChildDescriptorsFrom(DIGESTER_RULES);\n+\t\tresult.findOrCreateElementType(Utils.getClass(\"nl.nn.adapterframework.core.IAdapter\"));\n+\t\treturn result;\n+\t}\n \n \tpublic FrankDocModel() {\n+\t\tconfigChildDescriptors = new HashMap<>();\n \t\tgroups = new ArrayList<>();\n \t}\n \n+\tpublic void createConfigChildDescriptorsFrom(String path) {\n+\t\tResource resource = Resource.getResource(path);\n+\t\tif(resource == null) {\n+\t\t\tthrow new RuntimeException(String.format(\"Cannot find resource on the classpath: [%s]\", path));\n+\t\t}\n+\t\ttry {\n+\t\t\tXmlUtils.parseXml(resource.asInputSource(), new Handler(path));\n+\t\t}\n+\t\tcatch(IOException e) {\n+\t\t\tthrow new RuntimeException(String.format(\"An IOException occurred while parsing XML from [%s]\", path), e);\n+\t\t}\n+\t\tcatch(SAXException e) {\n+\t\t\tthrow new RuntimeException(String.format(\"A SAXException occurred while parsing XML from [%s]\", path), e);\n+\t\t}\n+\t}\n+\n+\tprivate class Handler extends DigesterRulesHandler {\n+\t\tprivate final String path;\n+\n+\t\tHandler(String path) {\n+\t\t\tthis.path = path;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void handle(DigesterRule rule) throws SAXException {\n+\t\t\tString pattern = rule.getPattern();\n+\t\t\tStringTokenizer tokenizer = new StringTokenizer(pattern, \"/\");\n+\t\t\tString syntax1Name = null;\n+\t\t\twhile(tokenizer.hasMoreElements()) {\n+\t\t\t\tString token = tokenizer.nextToken();\n+\t\t\t\tif(!\"*\".equals(token)) {\n+\t\t\t\t\tsyntax1Name = token;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif(StringUtils.isNotEmpty(rule.getRegisterMethod())) {\n+\t\t\t\tadd(rule.getRegisterMethod(), syntax1Name);\n+\t\t\t}\t\t\t\n+\t\t}\n+\n+\t\tprivate void add(String registerMethod, String syntax1Name) throws SAXException {\n+\t\t\tConfigChildSetterDescriptor item = new ConfigChildSetterDescriptor(registerMethod, syntax1Name);\n+\t\t\tif(configChildDescriptors.containsKey(item.getMethodName())) {\n+\t\t\t\tlog.warn(String.format(\"In digester rules [%s], duplicate method name [%s]\", path, registerMethod));\n+\t\t\t} else {\n+\t\t\t\tconfigChildDescriptors.put(item.getMethodName(), item);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic ElementType findOrCreateElementType(Class<?> clazz) {\n+\t\tif(allTypes.containsKey(clazz.getName())) {\n+\t\t\treturn allTypes.get(clazz.getName());\n+\t\t}\n+\t\tfinal ElementType result = new ElementType(clazz);\n+\t\t// If a containing FrankElement contains the type being created, we do not\n+\t\t// want recursion.\n+\t\tallTypes.put(result.getFullName(), result);\n+\t\tif(clazz.isInterface()) {\n+\t\t\tUtils.getSpringBeans(clazz.getName()).stream()\n+\t\t\t\t\t.map(b -> b.getClazz())\n+\t\t\t\t\t.map(cl -> findOrCreateFrankElement(cl))\n+\t\t\t\t\t.forEach(result::addMember);\n+\t\t} else {\n+\t\t\tresult.addMember(findOrCreateFrankElement(clazz));\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tpublic boolean hasType(String typeName) {\n+\t\treturn allTypes.containsKey(typeName);\n+\t}\n+\n \tpublic FrankElement findOrCreateFrankElement(Class<?> clazz) {\n \t\tif(allElements.containsKey(clazz.getName())) {\n \t\t\treturn allElements.get(clazz.getName());\n \t\t}\n+\t\tFrankElement current = new FrankElement(clazz);\n+\t\tallElements.put(current.getFullName(), current);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94c570724f745508e089434619ce1a80b2047c8f"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3NDczOA==", "bodyText": "Gedaan.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r512674738", "createdAt": "2020-10-27T13:06:26Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -1,45 +1,143 @@\n package nl.nn.adapterframework.doc.model;\n \n+import java.io.IOException;\n import java.lang.reflect.Method;\n+import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.StringTokenizer;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n-\n+\tprivate static final String DIGESTER_RULES = \"digester-rules.xml\";\n+\t\n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n \tprivate @Getter List<FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n+\n+\t/**\n+\t * Get the FrankDocModel needed in production. This is just a first draft. The\n+\t * present version does not have groups yet. It will be improved in future\n+\t * pull requests. \n+\t */\n+\tpublic static FrankDocModel populate() {\n+\t\tFrankDocModel result = new FrankDocModel();\n+\t\tresult.createConfigChildDescriptorsFrom(DIGESTER_RULES);\n+\t\tresult.findOrCreateElementType(Utils.getClass(\"nl.nn.adapterframework.core.IAdapter\"));\n+\t\treturn result;\n+\t}\n \n \tpublic FrankDocModel() {\n+\t\tconfigChildDescriptors = new HashMap<>();\n \t\tgroups = new ArrayList<>();\n \t}\n \n+\tpublic void createConfigChildDescriptorsFrom(String path) {\n+\t\tResource resource = Resource.getResource(path);\n+\t\tif(resource == null) {\n+\t\t\tthrow new RuntimeException(String.format(\"Cannot find resource on the classpath: [%s]\", path));\n+\t\t}\n+\t\ttry {\n+\t\t\tXmlUtils.parseXml(resource.asInputSource(), new Handler(path));\n+\t\t}\n+\t\tcatch(IOException e) {\n+\t\t\tthrow new RuntimeException(String.format(\"An IOException occurred while parsing XML from [%s]\", path), e);\n+\t\t}\n+\t\tcatch(SAXException e) {\n+\t\t\tthrow new RuntimeException(String.format(\"A SAXException occurred while parsing XML from [%s]\", path), e);\n+\t\t}\n+\t}\n+\n+\tprivate class Handler extends DigesterRulesHandler {\n+\t\tprivate final String path;\n+\n+\t\tHandler(String path) {\n+\t\t\tthis.path = path;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected void handle(DigesterRule rule) throws SAXException {\n+\t\t\tString pattern = rule.getPattern();\n+\t\t\tStringTokenizer tokenizer = new StringTokenizer(pattern, \"/\");\n+\t\t\tString syntax1Name = null;\n+\t\t\twhile(tokenizer.hasMoreElements()) {\n+\t\t\t\tString token = tokenizer.nextToken();\n+\t\t\t\tif(!\"*\".equals(token)) {\n+\t\t\t\t\tsyntax1Name = token;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif(StringUtils.isNotEmpty(rule.getRegisterMethod())) {\n+\t\t\t\tadd(rule.getRegisterMethod(), syntax1Name);\n+\t\t\t}\t\t\t\n+\t\t}\n+\n+\t\tprivate void add(String registerMethod, String syntax1Name) throws SAXException {\n+\t\t\tConfigChildSetterDescriptor item = new ConfigChildSetterDescriptor(registerMethod, syntax1Name);\n+\t\t\tif(configChildDescriptors.containsKey(item.getMethodName())) {\n+\t\t\t\tlog.warn(String.format(\"In digester rules [%s], duplicate method name [%s]\", path, registerMethod));\n+\t\t\t} else {\n+\t\t\t\tconfigChildDescriptors.put(item.getMethodName(), item);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic ElementType findOrCreateElementType(Class<?> clazz) {\n+\t\tif(allTypes.containsKey(clazz.getName())) {\n+\t\t\treturn allTypes.get(clazz.getName());\n+\t\t}\n+\t\tfinal ElementType result = new ElementType(clazz);\n+\t\t// If a containing FrankElement contains the type being created, we do not\n+\t\t// want recursion.\n+\t\tallTypes.put(result.getFullName(), result);\n+\t\tif(clazz.isInterface()) {\n+\t\t\tUtils.getSpringBeans(clazz.getName()).stream()\n+\t\t\t\t\t.map(b -> b.getClazz())\n+\t\t\t\t\t.map(cl -> findOrCreateFrankElement(cl))\n+\t\t\t\t\t.forEach(result::addMember);\n+\t\t} else {\n+\t\t\tresult.addMember(findOrCreateFrankElement(clazz));\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tpublic boolean hasType(String typeName) {\n+\t\treturn allTypes.containsKey(typeName);\n+\t}\n+\n \tpublic FrankElement findOrCreateFrankElement(Class<?> clazz) {\n \t\tif(allElements.containsKey(clazz.getName())) {\n \t\t\treturn allElements.get(clazz.getName());\n \t\t}\n+\t\tFrankElement current = new FrankElement(clazz);\n+\t\tallElements.put(current.getFullName(), current);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU0ODAyMQ=="}, "originalCommit": {"oid": "94c570724f745508e089434619ce1a80b2047c8f"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTQzNjY1OnYy", "diffSide": "RIGHT", "path": "test/src/test/resources/TestTool/IbisDoc/ibisdoc.xsd", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1NTo0OVrOHozuYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzowMTowMVrOHo6-Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MjU0Nw==", "bodyText": "Dit zijn geen attributen, maar child elements", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r512552547", "createdAt": "2020-10-27T09:55:49Z", "author": {"login": "gvanbrakel"}, "path": "test/src/test/resources/TestTool/IbisDoc/ibisdoc.xsd", "diffHunk": "@@ -31841,11 +31836,16 @@\n         <xs:documentation>forces that each pipe in the pipeline is not automatically added to the globalforwards table (default: application default)</xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n+    <xs:attribute name=\"inputValidator\" type=\"xs:string\" />\n+    <xs:attribute name=\"inputWrapper\" type=\"xs:string\" />\n+    <xs:attribute name=\"locker\" type=\"xs:string\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94c570724f745508e089434619ce1a80b2047c8f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3MTI5NA==", "bodyText": "Gefixed, voor zover ik weet.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r512671294", "createdAt": "2020-10-27T13:01:01Z", "author": {"login": "mhdirkse"}, "path": "test/src/test/resources/TestTool/IbisDoc/ibisdoc.xsd", "diffHunk": "@@ -31841,11 +31836,16 @@\n         <xs:documentation>forces that each pipe in the pipeline is not automatically added to the globalforwards table (default: application default)</xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n+    <xs:attribute name=\"inputValidator\" type=\"xs:string\" />\n+    <xs:attribute name=\"inputWrapper\" type=\"xs:string\" />\n+    <xs:attribute name=\"locker\" type=\"xs:string\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MjU0Nw=="}, "originalCommit": {"oid": "94c570724f745508e089434619ce1a80b2047c8f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTQzNjk2OnYy", "diffSide": "RIGHT", "path": "test/src/test/resources/TestTool/IbisDoc/ibisdoc.xsd", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwOTo1NTo1NVrOHozuoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzowMDoyNFrOHo68sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MjYwOQ==", "bodyText": "Dit zijn geen attributen, maar child elements", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r512552609", "createdAt": "2020-10-27T09:55:55Z", "author": {"login": "gvanbrakel"}, "path": "test/src/test/resources/TestTool/IbisDoc/ibisdoc.xsd", "diffHunk": "@@ -31841,11 +31836,16 @@\n         <xs:documentation>forces that each pipe in the pipeline is not automatically added to the globalforwards table (default: application default)</xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n+    <xs:attribute name=\"inputValidator\" type=\"xs:string\" />\n+    <xs:attribute name=\"inputWrapper\" type=\"xs:string\" />\n+    <xs:attribute name=\"locker\" type=\"xs:string\" />\n     <xs:attribute name=\"messageSizeWarn\" type=\"xs:string\">\n       <xs:annotation>\n         <xs:documentation>if messagesizewarn&gt;=0 and the size of the input or result pipe message exceeds the value specified a warning message is logged (default: application default (3mb))</xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n+    <xs:attribute name=\"outputValidator\" type=\"xs:string\" />\n+    <xs:attribute name=\"outputWrapper\" type=\"xs:string\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94c570724f745508e089434619ce1a80b2047c8f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3MDg5Nw==", "bodyText": "Gefixed, voor zover ik kan zien.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r512670897", "createdAt": "2020-10-27T13:00:24Z", "author": {"login": "mhdirkse"}, "path": "test/src/test/resources/TestTool/IbisDoc/ibisdoc.xsd", "diffHunk": "@@ -31841,11 +31836,16 @@\n         <xs:documentation>forces that each pipe in the pipeline is not automatically added to the globalforwards table (default: application default)</xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n+    <xs:attribute name=\"inputValidator\" type=\"xs:string\" />\n+    <xs:attribute name=\"inputWrapper\" type=\"xs:string\" />\n+    <xs:attribute name=\"locker\" type=\"xs:string\" />\n     <xs:attribute name=\"messageSizeWarn\" type=\"xs:string\">\n       <xs:annotation>\n         <xs:documentation>if messagesizewarn&gt;=0 and the size of the input or result pipe message exceeds the value specified a warning message is logged (default: application default (3mb))</xs:documentation>\n       </xs:annotation>\n     </xs:attribute>\n+    <xs:attribute name=\"outputValidator\" type=\"xs:string\" />\n+    <xs:attribute name=\"outputWrapper\" type=\"xs:string\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU1MjYwOQ=="}, "originalCommit": {"oid": "94c570724f745508e089434619ce1a80b2047c8f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzI3MjEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjoyNzozNVrOHpFaAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzozOTo0OVrOHpIttA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg0MjI0Mw==", "bodyText": "Ik denk dat groups een Map<Class, List> moet zijn, waarbij de key de interface van het child element is, of 'null' voor de elementTypes die niet een interface representeren, maar een class. De group met class null wordt dan de group 'overig'", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r512842243", "createdAt": "2020-10-27T16:27:35Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -8,42 +9,145 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.StringTokenizer;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n+import nl.nn.adapterframework.doc.objects.SpringBean;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n-\n+\tprivate static final String DIGESTER_RULES = \"digester-rules.xml\";\n+\t\n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n \tprivate @Getter List<FrankDocGroup> groups;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97028cc28e555914ecf05b4e5a88a96fdb24689c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg5NTYwNg==", "bodyText": "Gedaan.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r512895606", "createdAt": "2020-10-27T17:38:47Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -8,42 +9,145 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.StringTokenizer;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n+import nl.nn.adapterframework.doc.objects.SpringBean;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n-\n+\tprivate static final String DIGESTER_RULES = \"digester-rules.xml\";\n+\t\n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n \tprivate @Getter List<FrankDocGroup> groups;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg0MjI0Mw=="}, "originalCommit": {"oid": "97028cc28e555914ecf05b4e5a88a96fdb24689c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg5NjQzNg==", "bodyText": "Maar ik heb niet Class als key gebruikt. Die mogen we niet in het model stoppen omdat het dan niet meer voor compile-time Frank!Doc gebruikt kan worden.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r512896436", "createdAt": "2020-10-27T17:39:49Z", "author": {"login": "mhdirkse"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -8,42 +9,145 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.StringTokenizer;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n+import nl.nn.adapterframework.doc.objects.SpringBean;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n-\n+\tprivate static final String DIGESTER_RULES = \"digester-rules.xml\";\n+\t\n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n \tprivate @Getter List<FrankDocGroup> groups;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg0MjI0Mw=="}, "originalCommit": {"oid": "97028cc28e555914ecf05b4e5a88a96fdb24689c"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjMzNzU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/doc/InfoBuilderSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOTo1NzoyOFrOHpiOrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOTo1NzoyOFrOHpiOrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMxNDQ3OA==", "bodyText": "Handige tip, de HashSet kan ook als volgt geschreven worden:\nnew HashSet<>(Arrays.asList(JAVA_STRING, JAVA_INTEGER, JAVA_BOOLEAN, JAVA_LONG, JAVA_BYTE, JAVA_SHORT));", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r513314478", "createdAt": "2020-10-28T09:57:28Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/InfoBuilderSource.java", "diffHunk": "@@ -51,6 +52,16 @@\n import nl.nn.adapterframework.util.XmlUtils;\n \n class InfoBuilderSource {\n+\tprivate static final String JAVA_STRING = \"java.lang.String\";\n+\tprivate static final String JAVA_INTEGER = \"java.lang.Integer\";\n+\tprivate static final String JAVA_BOOLEAN = \"java.lang.Boolean\";\n+\tprivate static final String JAVA_LONG = \"java.lang.Long\";\n+\tprivate static final String JAVA_BYTE = \"java.lang.Byte\";\n+\tprivate static final String JAVA_SHORT = \"java.lang.Short\";\n+\n+\tprivate static final Set<String> JAVA_BOXED = new HashSet<String>(Arrays.asList(new String[] {\n+\t\t\tJAVA_STRING, JAVA_INTEGER, JAVA_BOOLEAN, JAVA_LONG, JAVA_BYTE, JAVA_SHORT}));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e659d52fa7574a6f04a725fd35c9b2b93958b234"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjM4NTcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDowOToyMVrOHpissg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDowOToyMVrOHpissg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzMyMjE2Mg==", "bodyText": "Een kleine kanttekening betreft excepties, soms zie ik je message: %s en soms zie ik je message [%s] gebruiken. Hier staat nu een combinatie van de twee message: [%s]. Binnen de framework meldingen gebruiken wij [%s] omdat je dan een 'postfix' hebt waar de melding ophoudt.", "url": "https://github.com/ibissource/iaf/pull/1178#discussion_r513322162", "createdAt": "2020-10-28T10:09:21Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/doc/model/FrankDocModel.java", "diffHunk": "@@ -8,42 +9,145 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.StringTokenizer;\n import java.util.stream.Collectors;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.Logger;\n import org.springframework.core.annotation.AnnotationUtils;\n+import org.xml.sax.SAXException;\n \n import lombok.Getter;\n import lombok.Setter;\n+import nl.nn.adapterframework.configuration.digester.DigesterRule;\n+import nl.nn.adapterframework.configuration.digester.DigesterRulesHandler;\n+import nl.nn.adapterframework.core.Resource;\n import nl.nn.adapterframework.doc.IbisDoc;\n import nl.nn.adapterframework.doc.IbisDocRef;\n+import nl.nn.adapterframework.doc.Utils;\n+import nl.nn.adapterframework.doc.objects.SpringBean;\n import nl.nn.adapterframework.util.LogUtil;\n+import nl.nn.adapterframework.util.XmlUtils;\n \n public class FrankDocModel {\n-\tprivate static final String JAVA_STRING = \"java.lang.String\";\n-\n \tprivate static Logger log = LogUtil.getLogger(FrankDocModel.class);\n-\n-\tprivate @Getter List<FrankDocGroup> groups;\n+\tprivate static final String DIGESTER_RULES = \"digester-rules.xml\";\n+\t\n+\tprivate @Getter Map<String, ConfigChildSetterDescriptor> configChildDescriptors;\n+\tprivate @Getter Map<String, FrankDocGroup> groups;\n \tprivate @Getter Map<String, FrankElement> allElements = new HashMap<>();\n+\tprivate @Getter Map<String, ElementType> allTypes = new HashMap<>();\n+\n+\t/**\n+\t * Get the FrankDocModel needed in production. This is just a first draft. The\n+\t * present version does not have groups yet. It will be improved in future\n+\t * pull requests. \n+\t */\n+\tpublic static FrankDocModel populate() {\n+\t\tFrankDocModel result = new FrankDocModel();\n+\t\ttry {\n+\t\t\tresult.createConfigChildDescriptorsFrom(DIGESTER_RULES);\n+\t\t\tresult.findOrCreateElementType(Utils.getClass(\"nl.nn.adapterframework.configuration.Configuration\"));\n+\t\t} catch(Exception e) {\n+\t\t\tlog.fatal(\"Could not populate FrankDocModel\", e);\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn result;\n+\t}\n \n \tpublic FrankDocModel() {\n-\t\tgroups = new ArrayList<>();\n+\t\tconfigChildDescriptors = new HashMap<>();\n+\t\tgroups = new HashMap<>();\n+\t}\n+\n+\tpublic void createConfigChildDescriptorsFrom(String path) throws IOException, SAXException {\n+\t\tResource resource = Resource.getResource(path);\n+\t\tif(resource == null) {\n+\t\t\tthrow new IOException(String.format(\"Cannot find resource on the classpath: [%s]\", path));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e659d52fa7574a6f04a725fd35c9b2b93958b234"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 583, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}