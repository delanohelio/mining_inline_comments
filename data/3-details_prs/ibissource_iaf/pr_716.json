{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3ODM5Mzk4", "number": 716, "title": "Merge 4 Util test classes", "bodyText": "Possible changes for Misc class:\n\n:  Changing the naming of listToString method to stringListToString, or even better, add support for other types such as integers.\n: In cleanseMessage, the parameter \"hideRegex\" should be renamed. It can be understood as a boolean to hide the regex portions in the string or not. A possible renaming can be \"regexForCleaning\" or \"regexForHiding\".", "createdAt": "2020-05-14T08:35:45Z", "url": "https://github.com/ibissource/iaf/pull/716", "merged": true, "mergeCommit": {"oid": "f0238435b17aff32632953355862b6135bb74fd6"}, "closed": true, "closedAt": "2020-06-16T09:26:16Z", "author": {"login": "sinasen2000"}, "timelineItems": {"totalCount": 62, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFiWQRgH2gAyNDE3ODM5Mzk4OmY5MjNhNjc1Njg4MmFhOGYyMjc3NmNlODRmZjg1MzJjOGJjOWRjZmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrxzM7AFqTQzMTMyMjE0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f923a6756882aa8f22776ce84ff8532c8bc9dcfb", "author": {"user": {"login": "nielsm5", "name": "Niels"}}, "url": "https://github.com/ibissource/iaf/commit/f923a6756882aa8f22776ce84ff8532c8bc9dcfb", "committedDate": "2020-02-18T13:56:47Z", "message": "[maven-release-plugin] prepare release v7.5-RC1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bab86966e83621208227871eafc4504bdc6d2d21", "author": {"user": {"login": "nielsm5", "name": "Niels"}}, "url": "https://github.com/ibissource/iaf/commit/bab86966e83621208227871eafc4504bdc6d2d21", "committedDate": "2020-02-18T13:56:48Z", "message": "[maven-release-plugin] prepare for next development iteration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "331ffb127fa2c18b59892b4d9de013b87ae57f6c", "author": {"user": {"login": "nielsm5", "name": "Niels"}}, "url": "https://github.com/ibissource/iaf/commit/331ffb127fa2c18b59892b4d9de013b87ae57f6c", "committedDate": "2020-02-18T15:44:41Z", "message": "Update releases.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef4d497de45dc4bd07cbd86d9547167a37db93e2", "author": {"user": {"login": "gvanbrakel", "name": "Gerrit van Brakel"}}, "url": "https://github.com/ibissource/iaf/commit/ef4d497de45dc4bd07cbd86d9547167a37db93e2", "committedDate": "2020-02-19T11:10:42Z", "message": "Fix for #426: null sender result throws NPE in MessageSendingPipe (#431)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39a54bd2ea32632918c676d60c0c66669c1b1e3d", "author": {"user": {"login": "gvanbrakel", "name": "Gerrit van Brakel"}}, "url": "https://github.com/ibissource/iaf/commit/39a54bd2ea32632918c676d60c0c66669c1b1e3d", "committedDate": "2020-02-19T11:11:44Z", "message": "Fix version dependency in iaf-test (#430)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b7842eb9f04547575f7d222233ff8e222ea67f9", "author": {"user": {"login": "gvanbrakel", "name": "Gerrit van Brakel"}}, "url": "https://github.com/ibissource/iaf/commit/2b7842eb9f04547575f7d222233ff8e222ea67f9", "committedDate": "2020-02-19T11:57:40Z", "message": "Fix for #425: Nested stacktrace ends at ForEachChildElementPipe (#429)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9a3ed66855c3030e7b3e5bc00e1b83117205984", "author": {"user": {"login": "nielsm5", "name": "Niels"}}, "url": "https://github.com/ibissource/iaf/commit/e9a3ed66855c3030e7b3e5bc00e1b83117205984", "committedDate": "2020-02-21T13:27:26Z", "message": "Make sure the proper SpringBus is passed through to the IbisContext #445 (#446)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c022e55e45569932581e0fb37ac823d01d42c28", "author": {"user": {"login": "nielsm5", "name": "Niels"}}, "url": "https://github.com/ibissource/iaf/commit/0c022e55e45569932581e0fb37ac823d01d42c28", "committedDate": "2020-03-02T11:04:38Z", "message": "Add timeout to window reload"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8d68ed98409cf3c5285d5e1a32c105e99cf2f80", "author": {"user": {"login": "nielsm5", "name": "Niels"}}, "url": "https://github.com/ibissource/iaf/commit/c8d68ed98409cf3c5285d5e1a32c105e99cf2f80", "committedDate": "2020-03-02T11:05:22Z", "message": "Add confirm when removing schedules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "195654e097893ac580592a1f882d4d1ed586af0c", "author": {"user": {"login": "nielsm5", "name": "Niels"}}, "url": "https://github.com/ibissource/iaf/commit/195654e097893ac580592a1f882d4d1ed586af0c", "committedDate": "2020-03-02T15:12:45Z", "message": "Move menu expand button"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc409974d2461da5609e24ebaad1696bd07a1b1a", "author": {"user": {"login": "nielsm5", "name": "Niels"}}, "url": "https://github.com/ibissource/iaf/commit/fc409974d2461da5609e24ebaad1696bd07a1b1a", "committedDate": "2020-03-02T16:26:47Z", "message": "Fix security role bindings not being displayed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "278971105b5d310a0512c036984be0d92ce7df18", "author": {"user": {"login": "nielsm5", "name": "Niels"}}, "url": "https://github.com/ibissource/iaf/commit/278971105b5d310a0512c036984be0d92ce7df18", "committedDate": "2020-03-02T17:07:09Z", "message": "Make sure menu item and breadcrum are consistent #448"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e64a6b4ee0da568939e053aa1ad66765c22c361", "author": {"user": {"login": "nielsm5", "name": "Niels"}}, "url": "https://github.com/ibissource/iaf/commit/8e64a6b4ee0da568939e053aa1ad66765c22c361", "committedDate": "2020-03-03T10:14:44Z", "message": "Add ladda and log full stacktrace #450"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6616ff4d8e841cb50169f430ae4b3a2deb0a4c70", "author": {"user": {"login": "nielsm5", "name": "Niels"}}, "url": "https://github.com/ibissource/iaf/commit/6616ff4d8e841cb50169f430ae4b3a2deb0a4c70", "committedDate": "2020-03-03T13:31:04Z", "message": "Remove formatted strings in IAF API #443"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6a910f179fa3b260c13353e219fca74b2ef41fc", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/d6a910f179fa3b260c13353e219fca74b2ef41fc", "committedDate": "2020-05-14T08:20:24Z", "message": "fix conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b702386fcadd7779591e9fc76091006853c34d9", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/0b702386fcadd7779591e9fc76091006853c34d9", "committedDate": "2020-05-14T08:32:52Z", "message": "add 4 UtilTest files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5305ed0215649467f4e47d00e51ac579b43eec4", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/e5305ed0215649467f4e47d00e51ac579b43eec4", "committedDate": "2020-05-14T08:56:20Z", "message": "add tabs and spaces to changed files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2240df43859781c98a00ec2e15820c20f92fd06", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/d2240df43859781c98a00ec2e15820c20f92fd06", "committedDate": "2020-05-14T12:28:47Z", "message": "improve code quality"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNjQ1ODcz", "url": "https://github.com/ibissource/iaf/pull/716#pullrequestreview-412645873", "createdAt": "2020-05-15T13:25:02Z", "commit": {"oid": "d2240df43859781c98a00ec2e15820c20f92fd06"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzoyNTowMlrOGWEvfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzoyNjo1NlrOGWE0TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5OTU1MQ==", "bodyText": "code style dictates that the closing bracket, when present should be on a new line.\nApplies in multiple tests", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r425799551", "createdAt": "2020-05-15T13:25:02Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/CounterStatisticTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * CounterStatistic Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class CounterStatisticTest {\n+\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformAction01() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(0);\n+        assertEquals(cs.getValue(), 10);\n+    }\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformAction2() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(2);\n+        assertEquals(cs.getValue(), 0);    }\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformAction34() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(3);\n+        assertEquals(cs.getValue(), 10);    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2240df43859781c98a00ec2e15820c20f92fd06"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwMDc4MQ==", "bodyText": "Try to also test the function of this class. set a limit, add limit +1 messages to the vector.\nTest the size\nTest that the first item has been removed", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r425800781", "createdAt": "2020-05-15T13:26:56Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * SizeLimitedVector Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class SizeLimitedVectorTest {\n+\n+\n+    /**\n+     *\n+     * Method: add(Object o)\n+     *\n+     */\n+    @Test\n+    public void testAdd() throws Exception {\n+        SizeLimitedVector slv = new SizeLimitedVector(10);\n+        slv.add(\"testString\");\n+        assertEquals(slv.getMaxSize(), 10);\n+        assertEquals(slv.get(0), \"testString\");\n+    }\n+\n+    /**\n+     *\n+     * Method: setMaxSize(int maxSize)\n+     *\n+     */\n+    @Test\n+    public void testSetMaxSize() throws Exception {\n+        SizeLimitedVector slv = new SizeLimitedVector(10);\n+        slv.setMaxSize(14);\n+        assertEquals(slv.getMaxSize(), 14);\n+    }\n+\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2240df43859781c98a00ec2e15820c20f92fd06"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa03bfc34db5e5ee02ab6e1e77c0f4cdfd600ff0", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/fa03bfc34db5e5ee02ab6e1e77c0f4cdfd600ff0", "committedDate": "2020-05-21T14:04:28Z", "message": "fix merge request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dc5e8ba14e5217e8fea4051ebabd63fe18d94eb", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/9dc5e8ba14e5217e8fea4051ebabd63fe18d94eb", "committedDate": "2020-05-21T14:06:18Z", "message": "fix merge request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46f778aad12f5858e1d552b1f8a4449c392f2ae9", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/46f778aad12f5858e1d552b1f8a4449c392f2ae9", "committedDate": "2020-05-21T14:07:28Z", "message": "."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7bcb9bae655532a24f62dd5725429d1bf331e97", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/f7bcb9bae655532a24f62dd5725429d1bf331e97", "committedDate": "2020-05-21T14:09:48Z", "message": "fix merge request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cad1d4df905fdb6d15a6045cabc60cd6da0a21a3", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/cad1d4df905fdb6d15a6045cabc60cd6da0a21a3", "committedDate": "2020-05-21T14:11:34Z", "message": "fix mr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1204c629d33153debc35e7dc1d0117b8bbdee598", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/1204c629d33153debc35e7dc1d0117b8bbdee598", "committedDate": "2020-05-21T14:12:34Z", "message": "fix mr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "566f3650ca9919002073f484a54daf93547107fa", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/566f3650ca9919002073f484a54daf93547107fa", "committedDate": "2020-05-21T14:42:17Z", "message": "added test cases and refactored code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14126dbdf9c525dd3e00d3c01b7ab42a8c676f89", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/14126dbdf9c525dd3e00d3c01b7ab42a8c676f89", "committedDate": "2020-05-21T14:46:47Z", "message": "Fix codacy error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b922bf6feadbd0f72d9976523e7ea7877a4474f", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/3b922bf6feadbd0f72d9976523e7ea7877a4474f", "committedDate": "2020-05-21T14:54:38Z", "message": "rerun CI in github"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abc300d7801ef7bf9ea17139ca601989742b67ab", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/abc300d7801ef7bf9ea17139ca601989742b67ab", "committedDate": "2020-05-22T11:35:42Z", "message": "Add FileNameUtils Test\n\ntested all the methods, all 29 tests passing, did not spot any issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "236e3082633a26c4c8398a5741446b70c232f3c1", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/236e3082633a26c4c8398a5741446b70c232f3c1", "committedDate": "2020-05-22T11:38:36Z", "message": "Improve code quality"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2ODQ4MTA3", "url": "https://github.com/ibissource/iaf/pull/716#pullrequestreview-416848107", "createdAt": "2020-05-22T11:44:26Z", "commit": {"oid": "236e3082633a26c4c8398a5741446b70c232f3c1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo0NDoyNlrOGZUPNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo0NTo1MlrOGZURnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5OTE1Nw==", "bodyText": "What exactly are you testing here? this catch clause should never happen?\nMaybe add some test assertions :)", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r429199157", "createdAt": "2020-05-22T11:44:26Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * SizeLimitedVector Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class SizeLimitedVectorTest {\n+\n+\n+    /**\n+     *\n+     * Method: add(Object o)\n+     *\n+     */\n+    @Test\n+    public void testAdd() throws ArrayIndexOutOfBoundsException {\n+        SizeLimitedVector slv = new SizeLimitedVector(10);\n+        slv.add(\"testString\");\n+        assertEquals(slv.getMaxSize(), 10);\n+        assertEquals(slv.get(0), \"testString\");\n+\n+    }\n+\n+\n+    @Test\n+    public void testMaxSizePassed() throws ArrayIndexOutOfBoundsException {\n+        try{SizeLimitedVector slv = new SizeLimitedVector(1);\n+        slv.add(13);\n+        slv.add(14);\n+        }\n+        catch (ArrayIndexOutOfBoundsException e) {\n+            fail(\"array capacity is passed, capacity was 1, but 2 elements got added\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236e3082633a26c4c8398a5741446b70c232f3c1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5OTU5Mg==", "bodyText": "This class didn't require any tests. It's a utilities class copied from apache commons io.\nThe only reason it's here is in order to avoid websphere compilations and runtime issues.", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r429199592", "createdAt": "2020-05-22T11:45:27Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FilenameUtilsTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+/**\n+ * FilenameUtils Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FilenameUtilsTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236e3082633a26c4c8398a5741446b70c232f3c1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5OTc3Mw==", "bodyText": "You might run on windows, but many of our servers do not :) this will fail on Travis and Jenkins", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r429199773", "createdAt": "2020-05-22T11:45:52Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FilenameUtilsTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+/**\n+ * FilenameUtils Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FilenameUtilsTest {\n+\n+\n+\n+    /**\n+     * Method: isSystemWindows()\n+     */\n+    @Test\n+    public void testIsSystemWindows() throws Exception {\n+        assertEquals(FilenameUtils.isSystemWindows(), true);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236e3082633a26c4c8398a5741446b70c232f3c1"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eb6a4889391ade0fd586aae484ec15b986e5d4e", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/3eb6a4889391ade0fd586aae484ec15b986e5d4e", "committedDate": "2020-05-22T11:52:09Z", "message": "Fix testing errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88b24b93afb78d5645b992d2324ec0d927ad19d7", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/88b24b93afb78d5645b992d2324ec0d927ad19d7", "committedDate": "2020-05-22T11:56:44Z", "message": "Fix build error on method testConcat"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MDc3Nzc5", "url": "https://github.com/ibissource/iaf/pull/716#pullrequestreview-418077779", "createdAt": "2020-05-26T08:27:45Z", "commit": {"oid": "88b24b93afb78d5645b992d2324ec0d927ad19d7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyNzo0NVrOGaT3yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODozMTozNFrOGaUAnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0MTczOQ==", "bodyText": "The whole point of the SizeLimitedVector is that you can append as many things to it as you like but it only stores the last X amount.", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r430241739", "createdAt": "2020-05-26T08:27:45Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * SizeLimitedVector Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class SizeLimitedVectorTest {\n+\n+\n+    /**\n+     *\n+     * Method: add(Object o)\n+     *\n+     */\n+    @Test\n+    public void testAdd() throws ArrayIndexOutOfBoundsException {\n+        SizeLimitedVector slv = new SizeLimitedVector(10);\n+        slv.add(\"testString\");\n+        assertEquals(slv.getMaxSize(), 10);\n+        assertEquals(slv.get(0), \"testString\");\n+\n+    }\n+\n+\n+    @Test\n+    public void testMaxSizePassed() throws ArrayIndexOutOfBoundsException {\n+        try{SizeLimitedVector slv = new SizeLimitedVector(1);\n+        slv.add(13);\n+        slv.add(14);\n+        }\n+        catch (ArrayIndexOutOfBoundsException e) {\n+            fail(\"array capacity is passed, capacity was 1, but 2 elements got added\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5OTE1Nw=="}, "originalCommit": {"oid": "236e3082633a26c4c8398a5741446b70c232f3c1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0MjgyMw==", "bodyText": "Please also add 14+1 elements and verify more then just the setter being changed.\ne.g. calling getSize or capacity to verify the contents of the vector.", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r430242823", "createdAt": "2020-05-26T08:29:36Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * SizeLimitedVector Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class SizeLimitedVectorTest {\n+\n+\n+    /**\n+     *\n+     * Method: add(Object o)\n+     *\n+     */\n+    @Test\n+    public void testAdd() throws ArrayIndexOutOfBoundsException {\n+        SizeLimitedVector slv = new SizeLimitedVector(10);\n+        slv.add(\"testString\");\n+        assertEquals(slv.getMaxSize(), 10);\n+        assertEquals(slv.get(0), \"testString\");\n+\n+    }\n+\n+\n+    @Test\n+    public void testMaxSizePassed() throws ArrayIndexOutOfBoundsException {\n+        try{SizeLimitedVector slv = new SizeLimitedVector(1);\n+        slv.add(13);\n+        slv.add(14);\n+        }\n+        catch (ArrayIndexOutOfBoundsException e) {\n+            fail(\"array capacity is passed, capacity was 1, but 2 elements got added\");\n+        }\n+\n+    }\n+    /**\n+     *\n+     * Method: setMaxSize(int maxSize)\n+     *\n+     */\n+    @Test\n+    public void testSetMaxSize() throws Exception {\n+        SizeLimitedVector slv = new SizeLimitedVector(10);\n+        slv.setMaxSize(14);\n+        assertEquals(slv.getMaxSize(), 14);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b24b93afb78d5645b992d2324ec0d927ad19d7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0MzQ2Ng==", "bodyText": "You dont have to declare this RuntimeException here do you? Non of the functions are throwing any exceptions", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r430243466", "createdAt": "2020-05-26T08:30:42Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * SizeLimitedVector Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class SizeLimitedVectorTest {\n+\n+\n+    /**\n+     *\n+     * Method: add(Object o)\n+     *\n+     */\n+    @Test\n+    public void testAdd() throws ArrayIndexOutOfBoundsException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b24b93afb78d5645b992d2324ec0d927ad19d7"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0Mzk5Nw==", "bodyText": "Try to use more descriptive names.  testAction1, testAction2, etc. is a bit vague when you're going through the log files :)", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r430243997", "createdAt": "2020-05-26T08:31:34Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/CounterStatisticTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * CounterStatistic Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class CounterStatisticTest {\n+\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformAction01() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(0);\n+        assertEquals(cs.getValue(), 10);\n+    }\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformAction2() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(2);\n+        assertEquals(cs.getValue(), 0);\n+    }\n+    \n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformAction34() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b24b93afb78d5645b992d2324ec0d927ad19d7"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a4ddb46cadfb92c502c7e911c83d32a5d1b571c", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/0a4ddb46cadfb92c502c7e911c83d32a5d1b571c", "committedDate": "2020-05-27T13:24:50Z", "message": "Add MiscTest\n\nAdd the finished MiscTest. However, some tests still have issues to be resolved with respect to methods like filetowriter, filetostream, etc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfc5a37328ad82d08cca3a038954de36496f6cee", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/bfc5a37328ad82d08cca3a038954de36496f6cee", "committedDate": "2020-06-02T11:50:57Z", "message": "Update the misc test with all working test cases."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4814066dc9c929774917cde983a368740d179da6", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/4814066dc9c929774917cde983a368740d179da6", "committedDate": "2020-06-02T11:58:24Z", "message": "Resolve ci/cd errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45cb5ff3ff55d31d312ee35842c2bbc4539736c3", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/45cb5ff3ff55d31d312ee35842c2bbc4539736c3", "committedDate": "2020-06-02T12:03:40Z", "message": "Fix CI/CD errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9e02d86fb564088ddaa6be78f44bcd301e81f35", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/c9e02d86fb564088ddaa6be78f44bcd301e81f35", "committedDate": "2020-06-02T12:22:12Z", "message": "Fix build errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a1b7d6dc16fafba8ed570956eb27705fc37a97c", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/2a1b7d6dc16fafba8ed570956eb27705fc37a97c", "committedDate": "2020-06-02T12:30:44Z", "message": "Fix travis build."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2206044153fbfd0962e04963b8d9252ccce7e397", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/2206044153fbfd0962e04963b8d9252ccce7e397", "committedDate": "2020-06-02T12:40:13Z", "message": "Improve code quality of the pr."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdbab891359f2c93a8afaccf933ad9ce64055138", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/bdbab891359f2c93a8afaccf933ad9ce64055138", "committedDate": "2020-06-02T12:46:00Z", "message": "Convert paths to work on any filesystem."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43b3faa1a9ee577e90629a2e5808c8bb449a8d49", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/43b3faa1a9ee577e90629a2e5808c8bb449a8d49", "committedDate": "2020-06-02T12:51:26Z", "message": "Improve code quality."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8310239fdacef147a117abb15b945149e78a2bb9", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/8310239fdacef147a117abb15b945149e78a2bb9", "committedDate": "2020-06-02T13:55:20Z", "message": "Make changes w.r.t Niels' feedback on the pr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f1918e5d970105ae1103607fb3ccf1a3923cebd", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/8f1918e5d970105ae1103607fb3ccf1a3923cebd", "committedDate": "2020-06-02T14:00:56Z", "message": "Fix build errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0c8fdaf839a94c4e4d4cff1b89184e32ec81d9b", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/b0c8fdaf839a94c4e4d4cff1b89184e32ec81d9b", "committedDate": "2020-06-03T09:23:57Z", "message": "Increase code coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "153939b9289d701449b013f3672af19127c0e2fb", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/153939b9289d701449b013f3672af19127c0e2fb", "committedDate": "2020-06-03T09:29:18Z", "message": "Fix build error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/de8c74960b4a2926132b0c198bcf49d0a6e21fab", "committedDate": "2020-06-03T09:29:47Z", "message": "Fix build error."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MzAxODYw", "url": "https://github.com/ibissource/iaf/pull/716#pullrequestreview-425301860", "createdAt": "2020-06-05T13:33:07Z", "commit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzozMzowOFrOGfupuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzozMzowOFrOGfupuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyMzM4NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r435923384", "createdAt": "2020-06-05T13:33:08Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * SizeLimitedVector Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class SizeLimitedVectorTest {\n+\n+\n+    /**\n+     *\n+     * Method: add(Object o)\n+     *\n+     */\n+    @Test\n+    public void testAdd() {\n+        SizeLimitedVector slv = new SizeLimitedVector(10);\n+        slv.add(\"testString\");\n+        assertEquals(slv.getMaxSize(), 10);\n+        assertEquals(slv.get(0), \"testString\");\n+\n+    }\n+\n+\n+    @Test\n+    public void testMaxSizePassed() throws ArrayIndexOutOfBoundsException {\n+        SizeLimitedVector slv = new SizeLimitedVector(1);\n+        slv.add(13);\n+        slv.add(14);\n+        assertEquals(slv.get(0), 14);\n+\n+    }\n+    /**\n+     *\n+     * Method: setMaxSize(int maxSize)\n+     *\n+     */\n+    @Test\n+    public void testSetMaxSize() throws Exception {\n+        SizeLimitedVector slv = new SizeLimitedVector(5);\n+        slv.setMaxSize(6);\n+        slv.add(1); slv.add(2); slv.add(3); slv.add(4); slv.add(5); slv.add(6); slv.add(7);\n+        assertEquals(slv.getMaxSize(), 6);\n+        assertEquals(slv.capacity(), 10);\n+        assertEquals(slv.size(), 6);\n+        assertEquals(slv.get(0), 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MzA0Nzk0", "url": "https://github.com/ibissource/iaf/pull/716#pullrequestreview-425304794", "createdAt": "2020-06-05T13:36:37Z", "commit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzozNjozN1rOGfuyJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzo0NDo1OVrOGfvGYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNTU0Mw==", "bodyText": "You are testing the actions here, instead of using the integer values, 123, could you use the more descriptive HasStatistics integer fields? So action 2 would become HasStatistics.STATISTICS_ACTION_RESET.\nMaybe you could also write 2 more tests for action 3 and 4 (mark main and mark full)", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r435925543", "createdAt": "2020-06-05T13:36:37Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/CounterStatisticTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * CounterStatistic Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class CounterStatisticTest {\n+\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformActionSummaryOrFull() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(0);\n+        assertEquals(cs.getValue(), 10);\n+    }\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformActionReset() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(2);\n+        assertEquals(cs.getValue(), 0);\n+    }\n+    \n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformActionMarkMainOrFull() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(3);\n+        assertEquals(cs.getValue(), 10);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNzk4OA==", "bodyText": "You're not testing the endOfLineString string here?", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r435927988", "createdAt": "2020-06-05T13:40:30Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 287}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyODcxNA==", "bodyText": "I see you're testing it in another test, maybe to not confuse things leave it blank or null instead :)", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r435928714", "createdAt": "2020-06-05T13:41:40Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNzk4OA=="}, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 287}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyOTU2OQ==", "bodyText": "Maybe also test the compressed variant to validate if it has actually been compressed", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r435929569", "createdAt": "2020-06-05T13:43:05Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");\n+    }\n+\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringNoXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", false);\n+        assertEquals(s, \"<root> 23    <name>GeeksforGeeks</name> 23    <address> 23        <sector>142</sector> 23        <location>Noida</location> 23    </address> 23</root> r\");\n+    }\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", true);\n+        assertEquals(s, \"&lt;root&gt; 23    &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23    &lt;address&gt; 23        &lt;sector&gt;142&lt;/sector&gt; 23        &lt;location&gt;Noida&lt;/location&gt; 23    &lt;/address&gt; 23&lt;/root&gt; r\");\n+    }\n+\n+\n+\n+    /**\n+     * Method: replace(String source, String from, String to)\n+     */\n+    @Test\n+    public void testReplace() throws Exception {\n+        String a = \"Kobe\";\n+        String res = Misc.replace(a, \"Ko\", \"Phoe\");\n+        assertEquals(res, \"Phoebe\");\n+    }\n+\n+    /**\n+     * Method: concatStrings(String part1, String separator, String part2)\n+     */\n+    @Test\n+    public void testConcatStrings() throws Exception {\n+        String a = \"LeBron\";\n+        String b = \"James\";\n+        String seperator = \"//\";\n+        String res = Misc.concatStrings(a, seperator, b);\n+        assertEquals(res, \"LeBron//James\");\n+    }\n+\n+    /**\n+     * Method: hide(String string)\n+     */\n+    @Test\n+    public void testHideString() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a);\n+        assertEquals(res, \"****\");\n+    }\n+\n+    /**\n+     * Method: hide(String string, int mode)\n+     */\n+    @Test\n+    public void testHideForStringMode() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a, 1);\n+        assertEquals(res, \"t**t\");\n+    }\n+\n+    /**\n+     * Method: byteArrayToString(byte[] input, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testByteArrayToString() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        String res = Misc.byteArrayToString(arr, \"\", true);\n+        assertEquals(res, s);\n+    }\n+\n+    /**\n+     * Method: gzip(String input)\n+     */\n+    @Test\n+    public void testGzipGUnzipInput() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        byte[] zipped = Misc.gzip(arr);\n+        assertEquals(Misc.gunzipToString(zipped), \"test\");\n+    }\n+\n+    @Test\n+    public void testGzipString() throws Exception {\n+        String s = \"you deserved this\";\n+        byte[] zipped = Misc.gzip(s);\n+        assertEquals(Misc.gunzipToString(zipped), \"you deserved this\");\n+\n+    }\n+\n+    /**\n+     * Method: compress(String input)\n+     */\n+    @Test\n+    public void testCompressDecompressInput() throws Exception {\n+        String s = \"test\";\n+        byte[] compressed = Misc.compress(s);\n+        String decompressed = Misc.decompressToString(compressed);\n+        assertEquals(decompressed, \"test\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 406}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkzMDMzMA==", "bodyText": "In stead of using a big concatinated string, it might be easier and more readable to use TestFileUtils.getResource and read the contents from a file instead", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r435930330", "createdAt": "2020-06-05T13:44:23Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");\n+    }\n+\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringNoXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", false);\n+        assertEquals(s, \"<root> 23    <name>GeeksforGeeks</name> 23    <address> 23        <sector>142</sector> 23        <location>Noida</location> 23    </address> 23</root> r\");\n+    }\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", true);\n+        assertEquals(s, \"&lt;root&gt; 23    &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23    &lt;address&gt; 23        &lt;sector&gt;142&lt;/sector&gt; 23        &lt;location&gt;Noida&lt;/location&gt; 23    &lt;/address&gt; 23&lt;/root&gt; r\");\n+    }\n+\n+\n+\n+    /**\n+     * Method: replace(String source, String from, String to)\n+     */\n+    @Test\n+    public void testReplace() throws Exception {\n+        String a = \"Kobe\";\n+        String res = Misc.replace(a, \"Ko\", \"Phoe\");\n+        assertEquals(res, \"Phoebe\");\n+    }\n+\n+    /**\n+     * Method: concatStrings(String part1, String separator, String part2)\n+     */\n+    @Test\n+    public void testConcatStrings() throws Exception {\n+        String a = \"LeBron\";\n+        String b = \"James\";\n+        String seperator = \"//\";\n+        String res = Misc.concatStrings(a, seperator, b);\n+        assertEquals(res, \"LeBron//James\");\n+    }\n+\n+    /**\n+     * Method: hide(String string)\n+     */\n+    @Test\n+    public void testHideString() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a);\n+        assertEquals(res, \"****\");\n+    }\n+\n+    /**\n+     * Method: hide(String string, int mode)\n+     */\n+    @Test\n+    public void testHideForStringMode() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a, 1);\n+        assertEquals(res, \"t**t\");\n+    }\n+\n+    /**\n+     * Method: byteArrayToString(byte[] input, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testByteArrayToString() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        String res = Misc.byteArrayToString(arr, \"\", true);\n+        assertEquals(res, s);\n+    }\n+\n+    /**\n+     * Method: gzip(String input)\n+     */\n+    @Test\n+    public void testGzipGUnzipInput() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        byte[] zipped = Misc.gzip(arr);\n+        assertEquals(Misc.gunzipToString(zipped), \"test\");\n+    }\n+\n+    @Test\n+    public void testGzipString() throws Exception {\n+        String s = \"you deserved this\";\n+        byte[] zipped = Misc.gzip(s);\n+        assertEquals(Misc.gunzipToString(zipped), \"you deserved this\");\n+\n+    }\n+\n+    /**\n+     * Method: compress(String input)\n+     */\n+    @Test\n+    public void testCompressDecompressInput() throws Exception {\n+        String s = \"test\";\n+        byte[] compressed = Misc.compress(s);\n+        String decompressed = Misc.decompressToString(compressed);\n+        assertEquals(decompressed, \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: copyContext(String keys, Map<String,Object> from, Map<String,Object> to)\n+     */\n+    @Test\n+    public void testCopyContext() throws Exception {\n+        Map<String, Object> context1 = new HashMap<>();\n+        Map<String, Object> context2 = new HashMap<>();\n+        String keys = \"a,b\";\n+        context1.put(\"a\", 15);\n+        context1.put(\"b\", 16);\n+        Misc.copyContext(keys, context1, context2);\n+        assertTrue(context1.equals(context2));\n+    }\n+\n+    /**\n+     * Method: toFileSize(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testToFileSizeForValueDefaultValue() throws Exception {\n+        long res = Misc.toFileSize(\"14GB\", 20);\n+        assertEquals(Long.toString(res), \"15032385536\");\n+    }\n+\n+    /**\n+     * Method: toFileSize(long value)\n+     */\n+    @Test\n+    public void testToFileSizeValue() throws Exception {\n+        String kb = Misc.toFileSize(150000, false, true);\n+        String mb = Misc.toFileSize(15000000, true);\n+        String gb = Misc.toFileSize(Long.parseLong(\"3221225472\"));\n+        assertEquals(gb, \"3GB\");\n+        assertEquals(mb, \"14 MB\");\n+        assertEquals(kb, \"146KB\");\n+    }\n+\n+\n+    @Test\n+    public void testListToStringWithStringList() {\n+        List list = new ArrayList<Integer>();\n+        list.add(\"bailar\");\n+        list.add(\"besos\");\n+        String res = Misc.listToString(list);\n+        assertEquals(res, \"bailarbesos\");\n+    }\n+\n+    /**\n+     * Method: addItemsToList(Collection<String> collection, String list, String collectionDescription, boolean lowercase)\n+     */\n+    @Test\n+    public void testAddItemsToList() throws Exception {\n+        List<String> stringCollection = new ArrayList<>();\n+        String list = \"a,b,C\";\n+        String collectionDescription = \"First 3 letters of the alphabet\";\n+        Misc.addItemsToList(stringCollection, list, collectionDescription, true);\n+        ArrayList<String> arrayList = new ArrayList<>();\n+        arrayList.add(\"a\");  arrayList.add(\"b\"); arrayList.add(\"c\");\n+        assertTrue(stringCollection.size() == 3);\n+        assertEquals(stringCollection.get(stringCollection.size()-1), \"c\");\n+    }\n+\n+    /**\n+     * Method: getFileSystemTotalSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemTotalSpace() throws Exception {\n+assertFalse(Misc.getFileSystemTotalSpace().isEmpty());    }\n+\n+    /**\n+     * Method: getFileSystemFreeSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemFreeSpace() throws Exception {\n+assertFalse(Misc.getFileSystemFreeSpace().isEmpty());    }\n+\n+    /**\n+     * Method: getAge(long value)\n+     */\n+    @Test\n+    public void testGetAge() throws Exception {\n+        assertFalse(Misc.getAge(1).isEmpty());\n+    }\n+    /**\n+     * Method: getDurationInMs(long value)\n+     */\n+    @Test\n+    public void testGetDurationInMs() throws Exception {\n+        assertFalse(Misc.getDurationInMs(14).isEmpty());\n+    }\n+\n+    /**\n+     * Method: parseAge(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testParseAge() throws Exception {\n+        long res = Misc.parseAge(\"2D\", 100);\n+        assertEquals(res, 172800000);\n+    }\n+\n+    /**\n+     * Method: cleanseMessage(String inputString, String hideRegex, String hideMethod)\n+     */\n+    @Test\n+    public void testCleanseMessage() throws Exception {\n+        String s = \"Donald Duck 23  Hey hey  14  Wooo\";\n+        String regex = \"\\\\d\";\n+        String res = Misc.cleanseMessage(s, regex, \" does not matter\");\n+        assertEquals(res, \"Donald Duck **  Hey hey  **  Wooo\");\n+        }\n+\n+    /**\n+     * Method: hideFirstHalf(String inputString, String regex)\n+     */\n+    @Test\n+    public void testHideFirstHalf() throws Exception {\n+        String s = \"Donald Duck     Hey hey     Wooo\";\n+        String hideRegex = \"[^\\\\s*].*[^\\\\s*]\";\n+        String res = Misc.hideFirstHalf(s, hideRegex);\n+        assertEquals(res, \"****************Hey hey     Wooo\");\n+\n+    }\n+\n+\n+    /**\n+     * Method: getBuildOutputDirectory()\n+     */\n+    @Test\n+    public void testGetBuildOutputDirectory() throws Exception {\n+        String outputDirectory = Misc.getBuildOutputDirectory();\n+assertEquals(outputDirectory.substring(outputDirectory.length()-29, outputDirectory.length()), pathSeperator+\"iaf\"+pathSeperator+\"core\"+pathSeperator+\"target\"+pathSeperator+\"test-classes\");    }\n+\n+    /**\n+     * Method: getProjectBaseDir()\n+     */\n+    @Test\n+    public void testGetProjectBaseDir() throws Exception {\n+        String baseDir = Misc.getBuildOutputDirectory();\n+        assertEquals(baseDir.substring(baseDir.length()-29, baseDir.length()), pathSeperator+\"iaf\"+pathSeperator+\"core\"+pathSeperator+\"target\"+pathSeperator+\"test-classes\");\n+    }\n+\n+    /**\n+     * Method: toSortName(String name)\n+     */\n+    @Test\n+    public void testToSortName() throws Exception {\n+assertEquals(Misc.toSortName(\"new_name\"), \"NEW*NAME\");    }\n+\n+    /**\n+     * Method: countRegex(String string, String regex)\n+     */\n+    @Test\n+    public void testCountRegex() throws Exception {\n+String s = \"12ab34\";\n+    String regex = \"\\\\d\";\n+    int regexCount = Misc.countRegex(s, regex);\n+    assertEquals(regexCount, 4);\n+    }\n+\n+    /**\n+     * Method: resourceToString(URL resource)\n+     */\n+    @Test\n+    public void testResourceToStringResource() throws Exception {\n+        URL resource = new URL(\"http://example.com/\");\n+        String s1 = Misc.resourceToString(resource);\n+        assertEquals(s1, \"<!doctype html>\\n\" +\n+                \"<html>\\n\" +\n+                \"<head>\\n\" +\n+                \"    <title>Example Domain</title>\\n\" +\n+                \"\\n\" +\n+                \"    <meta charset=\\\"utf-8\\\" />\\n\" +\n+                \"    <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\" />\\n\" +\n+                \"    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n\" +\n+                \"    <style type=\\\"text/css\\\">\\n\" +\n+                \"    body {\\n\" +\n+                \"        background-color: #f0f0f2;\\n\" +\n+                \"        margin: 0;\\n\" +\n+                \"        padding: 0;\\n\" +\n+                \"        font-family: -apple-system, system-ui, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Open Sans\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\n\" +\n+                \"        \\n\" +\n+                \"    }\\n\" +\n+                \"    div {\\n\" +\n+                \"        width: 600px;\\n\" +\n+                \"        margin: 5em auto;\\n\" +\n+                \"        padding: 2em;\\n\" +\n+                \"        background-color: #fdfdff;\\n\" +\n+                \"        border-radius: 0.5em;\\n\" +\n+                \"        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\\n\" +\n+                \"    }\\n\" +\n+                \"    a:link, a:visited {\\n\" +\n+                \"        color: #38488f;\\n\" +\n+                \"        text-decoration: none;\\n\" +\n+                \"    }\\n\" +\n+                \"    @media (max-width: 700px) {\\n\" +\n+                \"        div {\\n\" +\n+                \"            margin: 0 auto;\\n\" +\n+                \"            width: auto;\\n\" +\n+                \"        }\\n\" +\n+                \"    }\\n\" +\n+                \"    </style>    \\n\" +\n+                \"</head>\\n\" +\n+                \"\\n\" +\n+                \"<body>\\n\" +\n+                \"<div>\\n\" +\n+                \"    <h1>Example Domain</h1>\\n\" +\n+                \"    <p>This domain is for use in illustrative examples in documents. You may use this\\n\" +\n+                \"    domain in literature without prior coordination or asking for permission.</p>\\n\" +\n+                \"    <p><a href=\\\"https://www.iana.org/domains/example\\\">More information...</a></p>\\n\" +\n+                \"</div>\\n\" +\n+                \"</body>\\n\" +\n+                \"</html>\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 619}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkzMDY2Mg==", "bodyText": "In stead of using a big concatinated string, it might be easier and more readable to use TestFileUtils.getResource and read the contents from a file instead", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r435930662", "createdAt": "2020-06-05T13:44:55Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");\n+    }\n+\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringNoXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", false);\n+        assertEquals(s, \"<root> 23    <name>GeeksforGeeks</name> 23    <address> 23        <sector>142</sector> 23        <location>Noida</location> 23    </address> 23</root> r\");\n+    }\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", true);\n+        assertEquals(s, \"&lt;root&gt; 23    &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23    &lt;address&gt; 23        &lt;sector&gt;142&lt;/sector&gt; 23        &lt;location&gt;Noida&lt;/location&gt; 23    &lt;/address&gt; 23&lt;/root&gt; r\");\n+    }\n+\n+\n+\n+    /**\n+     * Method: replace(String source, String from, String to)\n+     */\n+    @Test\n+    public void testReplace() throws Exception {\n+        String a = \"Kobe\";\n+        String res = Misc.replace(a, \"Ko\", \"Phoe\");\n+        assertEquals(res, \"Phoebe\");\n+    }\n+\n+    /**\n+     * Method: concatStrings(String part1, String separator, String part2)\n+     */\n+    @Test\n+    public void testConcatStrings() throws Exception {\n+        String a = \"LeBron\";\n+        String b = \"James\";\n+        String seperator = \"//\";\n+        String res = Misc.concatStrings(a, seperator, b);\n+        assertEquals(res, \"LeBron//James\");\n+    }\n+\n+    /**\n+     * Method: hide(String string)\n+     */\n+    @Test\n+    public void testHideString() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a);\n+        assertEquals(res, \"****\");\n+    }\n+\n+    /**\n+     * Method: hide(String string, int mode)\n+     */\n+    @Test\n+    public void testHideForStringMode() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a, 1);\n+        assertEquals(res, \"t**t\");\n+    }\n+\n+    /**\n+     * Method: byteArrayToString(byte[] input, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testByteArrayToString() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        String res = Misc.byteArrayToString(arr, \"\", true);\n+        assertEquals(res, s);\n+    }\n+\n+    /**\n+     * Method: gzip(String input)\n+     */\n+    @Test\n+    public void testGzipGUnzipInput() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        byte[] zipped = Misc.gzip(arr);\n+        assertEquals(Misc.gunzipToString(zipped), \"test\");\n+    }\n+\n+    @Test\n+    public void testGzipString() throws Exception {\n+        String s = \"you deserved this\";\n+        byte[] zipped = Misc.gzip(s);\n+        assertEquals(Misc.gunzipToString(zipped), \"you deserved this\");\n+\n+    }\n+\n+    /**\n+     * Method: compress(String input)\n+     */\n+    @Test\n+    public void testCompressDecompressInput() throws Exception {\n+        String s = \"test\";\n+        byte[] compressed = Misc.compress(s);\n+        String decompressed = Misc.decompressToString(compressed);\n+        assertEquals(decompressed, \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: copyContext(String keys, Map<String,Object> from, Map<String,Object> to)\n+     */\n+    @Test\n+    public void testCopyContext() throws Exception {\n+        Map<String, Object> context1 = new HashMap<>();\n+        Map<String, Object> context2 = new HashMap<>();\n+        String keys = \"a,b\";\n+        context1.put(\"a\", 15);\n+        context1.put(\"b\", 16);\n+        Misc.copyContext(keys, context1, context2);\n+        assertTrue(context1.equals(context2));\n+    }\n+\n+    /**\n+     * Method: toFileSize(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testToFileSizeForValueDefaultValue() throws Exception {\n+        long res = Misc.toFileSize(\"14GB\", 20);\n+        assertEquals(Long.toString(res), \"15032385536\");\n+    }\n+\n+    /**\n+     * Method: toFileSize(long value)\n+     */\n+    @Test\n+    public void testToFileSizeValue() throws Exception {\n+        String kb = Misc.toFileSize(150000, false, true);\n+        String mb = Misc.toFileSize(15000000, true);\n+        String gb = Misc.toFileSize(Long.parseLong(\"3221225472\"));\n+        assertEquals(gb, \"3GB\");\n+        assertEquals(mb, \"14 MB\");\n+        assertEquals(kb, \"146KB\");\n+    }\n+\n+\n+    @Test\n+    public void testListToStringWithStringList() {\n+        List list = new ArrayList<Integer>();\n+        list.add(\"bailar\");\n+        list.add(\"besos\");\n+        String res = Misc.listToString(list);\n+        assertEquals(res, \"bailarbesos\");\n+    }\n+\n+    /**\n+     * Method: addItemsToList(Collection<String> collection, String list, String collectionDescription, boolean lowercase)\n+     */\n+    @Test\n+    public void testAddItemsToList() throws Exception {\n+        List<String> stringCollection = new ArrayList<>();\n+        String list = \"a,b,C\";\n+        String collectionDescription = \"First 3 letters of the alphabet\";\n+        Misc.addItemsToList(stringCollection, list, collectionDescription, true);\n+        ArrayList<String> arrayList = new ArrayList<>();\n+        arrayList.add(\"a\");  arrayList.add(\"b\"); arrayList.add(\"c\");\n+        assertTrue(stringCollection.size() == 3);\n+        assertEquals(stringCollection.get(stringCollection.size()-1), \"c\");\n+    }\n+\n+    /**\n+     * Method: getFileSystemTotalSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemTotalSpace() throws Exception {\n+assertFalse(Misc.getFileSystemTotalSpace().isEmpty());    }\n+\n+    /**\n+     * Method: getFileSystemFreeSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemFreeSpace() throws Exception {\n+assertFalse(Misc.getFileSystemFreeSpace().isEmpty());    }\n+\n+    /**\n+     * Method: getAge(long value)\n+     */\n+    @Test\n+    public void testGetAge() throws Exception {\n+        assertFalse(Misc.getAge(1).isEmpty());\n+    }\n+    /**\n+     * Method: getDurationInMs(long value)\n+     */\n+    @Test\n+    public void testGetDurationInMs() throws Exception {\n+        assertFalse(Misc.getDurationInMs(14).isEmpty());\n+    }\n+\n+    /**\n+     * Method: parseAge(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testParseAge() throws Exception {\n+        long res = Misc.parseAge(\"2D\", 100);\n+        assertEquals(res, 172800000);\n+    }\n+\n+    /**\n+     * Method: cleanseMessage(String inputString, String hideRegex, String hideMethod)\n+     */\n+    @Test\n+    public void testCleanseMessage() throws Exception {\n+        String s = \"Donald Duck 23  Hey hey  14  Wooo\";\n+        String regex = \"\\\\d\";\n+        String res = Misc.cleanseMessage(s, regex, \" does not matter\");\n+        assertEquals(res, \"Donald Duck **  Hey hey  **  Wooo\");\n+        }\n+\n+    /**\n+     * Method: hideFirstHalf(String inputString, String regex)\n+     */\n+    @Test\n+    public void testHideFirstHalf() throws Exception {\n+        String s = \"Donald Duck     Hey hey     Wooo\";\n+        String hideRegex = \"[^\\\\s*].*[^\\\\s*]\";\n+        String res = Misc.hideFirstHalf(s, hideRegex);\n+        assertEquals(res, \"****************Hey hey     Wooo\");\n+\n+    }\n+\n+\n+    /**\n+     * Method: getBuildOutputDirectory()\n+     */\n+    @Test\n+    public void testGetBuildOutputDirectory() throws Exception {\n+        String outputDirectory = Misc.getBuildOutputDirectory();\n+assertEquals(outputDirectory.substring(outputDirectory.length()-29, outputDirectory.length()), pathSeperator+\"iaf\"+pathSeperator+\"core\"+pathSeperator+\"target\"+pathSeperator+\"test-classes\");    }\n+\n+    /**\n+     * Method: getProjectBaseDir()\n+     */\n+    @Test\n+    public void testGetProjectBaseDir() throws Exception {\n+        String baseDir = Misc.getBuildOutputDirectory();\n+        assertEquals(baseDir.substring(baseDir.length()-29, baseDir.length()), pathSeperator+\"iaf\"+pathSeperator+\"core\"+pathSeperator+\"target\"+pathSeperator+\"test-classes\");\n+    }\n+\n+    /**\n+     * Method: toSortName(String name)\n+     */\n+    @Test\n+    public void testToSortName() throws Exception {\n+assertEquals(Misc.toSortName(\"new_name\"), \"NEW*NAME\");    }\n+\n+    /**\n+     * Method: countRegex(String string, String regex)\n+     */\n+    @Test\n+    public void testCountRegex() throws Exception {\n+String s = \"12ab34\";\n+    String regex = \"\\\\d\";\n+    int regexCount = Misc.countRegex(s, regex);\n+    assertEquals(regexCount, 4);\n+    }\n+\n+    /**\n+     * Method: resourceToString(URL resource)\n+     */\n+    @Test\n+    public void testResourceToStringResource() throws Exception {\n+        URL resource = new URL(\"http://example.com/\");\n+        String s1 = Misc.resourceToString(resource);\n+        assertEquals(s1, \"<!doctype html>\\n\" +\n+                \"<html>\\n\" +\n+                \"<head>\\n\" +\n+                \"    <title>Example Domain</title>\\n\" +\n+                \"\\n\" +\n+                \"    <meta charset=\\\"utf-8\\\" />\\n\" +\n+                \"    <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\" />\\n\" +\n+                \"    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n\" +\n+                \"    <style type=\\\"text/css\\\">\\n\" +\n+                \"    body {\\n\" +\n+                \"        background-color: #f0f0f2;\\n\" +\n+                \"        margin: 0;\\n\" +\n+                \"        padding: 0;\\n\" +\n+                \"        font-family: -apple-system, system-ui, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Open Sans\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\n\" +\n+                \"        \\n\" +\n+                \"    }\\n\" +\n+                \"    div {\\n\" +\n+                \"        width: 600px;\\n\" +\n+                \"        margin: 5em auto;\\n\" +\n+                \"        padding: 2em;\\n\" +\n+                \"        background-color: #fdfdff;\\n\" +\n+                \"        border-radius: 0.5em;\\n\" +\n+                \"        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\\n\" +\n+                \"    }\\n\" +\n+                \"    a:link, a:visited {\\n\" +\n+                \"        color: #38488f;\\n\" +\n+                \"        text-decoration: none;\\n\" +\n+                \"    }\\n\" +\n+                \"    @media (max-width: 700px) {\\n\" +\n+                \"        div {\\n\" +\n+                \"            margin: 0 auto;\\n\" +\n+                \"            width: auto;\\n\" +\n+                \"        }\\n\" +\n+                \"    }\\n\" +\n+                \"    </style>    \\n\" +\n+                \"</head>\\n\" +\n+                \"\\n\" +\n+                \"<body>\\n\" +\n+                \"<div>\\n\" +\n+                \"    <h1>Example Domain</h1>\\n\" +\n+                \"    <p>This domain is for use in illustrative examples in documents. You may use this\\n\" +\n+                \"    domain in literature without prior coordination or asking for permission.</p>\\n\" +\n+                \"    <p><a href=\\\"https://www.iana.org/domains/example\\\">More information...</a></p>\\n\" +\n+                \"</div>\\n\" +\n+                \"</body>\\n\" +\n+                \"</html>\\n\");\n+    }\n+\n+    /**\n+     * Method: resourceToString(URL resource, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testResourceToStringForResourceEndOfLineStringXmlEncode() throws Exception {\n+        URL resource = new URL(\"http://example.com/\");\n+        String s1 = Misc.resourceToString(resource, \"end of the page\", true);\n+        assertEquals(s1, \"&lt;!doctype html&gt;end of the page&lt;html&gt;end of the page&lt;head&gt;end of the page    &lt;title&gt;Example Domain&lt;/title&gt;end of the pageend of the page    &lt;meta charset=&quot;utf-8&quot; /&gt;end of the page    &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;end of the page    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;end of the page    &lt;style type=&quot;text/css&quot;&gt;end of the page    body {end of the page        background-color: #f0f0f2;end of the page        margin: 0;end of the page        padding: 0;end of the page        font-family: -apple-system, system-ui, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;end of the page        end of the page    }end of the page    div {end of the page        width: 600px;end of the page        margin: 5em auto;end of the page        padding: 2em;end of the page        background-color: #fdfdff;end of the page        border-radius: 0.5em;end of the page        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);end of the page    }end of the page    a:link, a:visited {end of the page        color: #38488f;end of the page        text-decoration: none;end of the page    }end of the page    @media (max-width: 700px) {end of the page        div {end of the page            margin: 0 auto;end of the page            width: auto;end of the page        }end of the page    }end of the page    &lt;/style&gt;    end of the page&lt;/head&gt;end of the pageend of the page&lt;body&gt;end of the page&lt;div&gt;end of the page    &lt;h1&gt;Example Domain&lt;/h1&gt;end of the page    &lt;p&gt;This domain is for use in illustrative examples in documents. You may use thisend of the page    domain in literature without prior coordination or asking for permission.&lt;/p&gt;end of the page    &lt;p&gt;&lt;a href=&quot;https://www.iana.org/domains/example&quot;&gt;More information...&lt;/a&gt;&lt;/p&gt;end of the page&lt;/div&gt;end of the page&lt;/body&gt;end of the page&lt;/html&gt;end of the page\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 630}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkzMDcyMQ==", "bodyText": "In stead of using a big concatinated string, it might be easier and more readable to use TestFileUtils.getResource and read the contents from a file instead", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r435930721", "createdAt": "2020-06-05T13:44:59Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");\n+    }\n+\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringNoXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", false);\n+        assertEquals(s, \"<root> 23    <name>GeeksforGeeks</name> 23    <address> 23        <sector>142</sector> 23        <location>Noida</location> 23    </address> 23</root> r\");\n+    }\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", true);\n+        assertEquals(s, \"&lt;root&gt; 23    &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23    &lt;address&gt; 23        &lt;sector&gt;142&lt;/sector&gt; 23        &lt;location&gt;Noida&lt;/location&gt; 23    &lt;/address&gt; 23&lt;/root&gt; r\");\n+    }\n+\n+\n+\n+    /**\n+     * Method: replace(String source, String from, String to)\n+     */\n+    @Test\n+    public void testReplace() throws Exception {\n+        String a = \"Kobe\";\n+        String res = Misc.replace(a, \"Ko\", \"Phoe\");\n+        assertEquals(res, \"Phoebe\");\n+    }\n+\n+    /**\n+     * Method: concatStrings(String part1, String separator, String part2)\n+     */\n+    @Test\n+    public void testConcatStrings() throws Exception {\n+        String a = \"LeBron\";\n+        String b = \"James\";\n+        String seperator = \"//\";\n+        String res = Misc.concatStrings(a, seperator, b);\n+        assertEquals(res, \"LeBron//James\");\n+    }\n+\n+    /**\n+     * Method: hide(String string)\n+     */\n+    @Test\n+    public void testHideString() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a);\n+        assertEquals(res, \"****\");\n+    }\n+\n+    /**\n+     * Method: hide(String string, int mode)\n+     */\n+    @Test\n+    public void testHideForStringMode() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a, 1);\n+        assertEquals(res, \"t**t\");\n+    }\n+\n+    /**\n+     * Method: byteArrayToString(byte[] input, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testByteArrayToString() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        String res = Misc.byteArrayToString(arr, \"\", true);\n+        assertEquals(res, s);\n+    }\n+\n+    /**\n+     * Method: gzip(String input)\n+     */\n+    @Test\n+    public void testGzipGUnzipInput() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        byte[] zipped = Misc.gzip(arr);\n+        assertEquals(Misc.gunzipToString(zipped), \"test\");\n+    }\n+\n+    @Test\n+    public void testGzipString() throws Exception {\n+        String s = \"you deserved this\";\n+        byte[] zipped = Misc.gzip(s);\n+        assertEquals(Misc.gunzipToString(zipped), \"you deserved this\");\n+\n+    }\n+\n+    /**\n+     * Method: compress(String input)\n+     */\n+    @Test\n+    public void testCompressDecompressInput() throws Exception {\n+        String s = \"test\";\n+        byte[] compressed = Misc.compress(s);\n+        String decompressed = Misc.decompressToString(compressed);\n+        assertEquals(decompressed, \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: copyContext(String keys, Map<String,Object> from, Map<String,Object> to)\n+     */\n+    @Test\n+    public void testCopyContext() throws Exception {\n+        Map<String, Object> context1 = new HashMap<>();\n+        Map<String, Object> context2 = new HashMap<>();\n+        String keys = \"a,b\";\n+        context1.put(\"a\", 15);\n+        context1.put(\"b\", 16);\n+        Misc.copyContext(keys, context1, context2);\n+        assertTrue(context1.equals(context2));\n+    }\n+\n+    /**\n+     * Method: toFileSize(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testToFileSizeForValueDefaultValue() throws Exception {\n+        long res = Misc.toFileSize(\"14GB\", 20);\n+        assertEquals(Long.toString(res), \"15032385536\");\n+    }\n+\n+    /**\n+     * Method: toFileSize(long value)\n+     */\n+    @Test\n+    public void testToFileSizeValue() throws Exception {\n+        String kb = Misc.toFileSize(150000, false, true);\n+        String mb = Misc.toFileSize(15000000, true);\n+        String gb = Misc.toFileSize(Long.parseLong(\"3221225472\"));\n+        assertEquals(gb, \"3GB\");\n+        assertEquals(mb, \"14 MB\");\n+        assertEquals(kb, \"146KB\");\n+    }\n+\n+\n+    @Test\n+    public void testListToStringWithStringList() {\n+        List list = new ArrayList<Integer>();\n+        list.add(\"bailar\");\n+        list.add(\"besos\");\n+        String res = Misc.listToString(list);\n+        assertEquals(res, \"bailarbesos\");\n+    }\n+\n+    /**\n+     * Method: addItemsToList(Collection<String> collection, String list, String collectionDescription, boolean lowercase)\n+     */\n+    @Test\n+    public void testAddItemsToList() throws Exception {\n+        List<String> stringCollection = new ArrayList<>();\n+        String list = \"a,b,C\";\n+        String collectionDescription = \"First 3 letters of the alphabet\";\n+        Misc.addItemsToList(stringCollection, list, collectionDescription, true);\n+        ArrayList<String> arrayList = new ArrayList<>();\n+        arrayList.add(\"a\");  arrayList.add(\"b\"); arrayList.add(\"c\");\n+        assertTrue(stringCollection.size() == 3);\n+        assertEquals(stringCollection.get(stringCollection.size()-1), \"c\");\n+    }\n+\n+    /**\n+     * Method: getFileSystemTotalSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemTotalSpace() throws Exception {\n+assertFalse(Misc.getFileSystemTotalSpace().isEmpty());    }\n+\n+    /**\n+     * Method: getFileSystemFreeSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemFreeSpace() throws Exception {\n+assertFalse(Misc.getFileSystemFreeSpace().isEmpty());    }\n+\n+    /**\n+     * Method: getAge(long value)\n+     */\n+    @Test\n+    public void testGetAge() throws Exception {\n+        assertFalse(Misc.getAge(1).isEmpty());\n+    }\n+    /**\n+     * Method: getDurationInMs(long value)\n+     */\n+    @Test\n+    public void testGetDurationInMs() throws Exception {\n+        assertFalse(Misc.getDurationInMs(14).isEmpty());\n+    }\n+\n+    /**\n+     * Method: parseAge(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testParseAge() throws Exception {\n+        long res = Misc.parseAge(\"2D\", 100);\n+        assertEquals(res, 172800000);\n+    }\n+\n+    /**\n+     * Method: cleanseMessage(String inputString, String hideRegex, String hideMethod)\n+     */\n+    @Test\n+    public void testCleanseMessage() throws Exception {\n+        String s = \"Donald Duck 23  Hey hey  14  Wooo\";\n+        String regex = \"\\\\d\";\n+        String res = Misc.cleanseMessage(s, regex, \" does not matter\");\n+        assertEquals(res, \"Donald Duck **  Hey hey  **  Wooo\");\n+        }\n+\n+    /**\n+     * Method: hideFirstHalf(String inputString, String regex)\n+     */\n+    @Test\n+    public void testHideFirstHalf() throws Exception {\n+        String s = \"Donald Duck     Hey hey     Wooo\";\n+        String hideRegex = \"[^\\\\s*].*[^\\\\s*]\";\n+        String res = Misc.hideFirstHalf(s, hideRegex);\n+        assertEquals(res, \"****************Hey hey     Wooo\");\n+\n+    }\n+\n+\n+    /**\n+     * Method: getBuildOutputDirectory()\n+     */\n+    @Test\n+    public void testGetBuildOutputDirectory() throws Exception {\n+        String outputDirectory = Misc.getBuildOutputDirectory();\n+assertEquals(outputDirectory.substring(outputDirectory.length()-29, outputDirectory.length()), pathSeperator+\"iaf\"+pathSeperator+\"core\"+pathSeperator+\"target\"+pathSeperator+\"test-classes\");    }\n+\n+    /**\n+     * Method: getProjectBaseDir()\n+     */\n+    @Test\n+    public void testGetProjectBaseDir() throws Exception {\n+        String baseDir = Misc.getBuildOutputDirectory();\n+        assertEquals(baseDir.substring(baseDir.length()-29, baseDir.length()), pathSeperator+\"iaf\"+pathSeperator+\"core\"+pathSeperator+\"target\"+pathSeperator+\"test-classes\");\n+    }\n+\n+    /**\n+     * Method: toSortName(String name)\n+     */\n+    @Test\n+    public void testToSortName() throws Exception {\n+assertEquals(Misc.toSortName(\"new_name\"), \"NEW*NAME\");    }\n+\n+    /**\n+     * Method: countRegex(String string, String regex)\n+     */\n+    @Test\n+    public void testCountRegex() throws Exception {\n+String s = \"12ab34\";\n+    String regex = \"\\\\d\";\n+    int regexCount = Misc.countRegex(s, regex);\n+    assertEquals(regexCount, 4);\n+    }\n+\n+    /**\n+     * Method: resourceToString(URL resource)\n+     */\n+    @Test\n+    public void testResourceToStringResource() throws Exception {\n+        URL resource = new URL(\"http://example.com/\");\n+        String s1 = Misc.resourceToString(resource);\n+        assertEquals(s1, \"<!doctype html>\\n\" +\n+                \"<html>\\n\" +\n+                \"<head>\\n\" +\n+                \"    <title>Example Domain</title>\\n\" +\n+                \"\\n\" +\n+                \"    <meta charset=\\\"utf-8\\\" />\\n\" +\n+                \"    <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\" />\\n\" +\n+                \"    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n\" +\n+                \"    <style type=\\\"text/css\\\">\\n\" +\n+                \"    body {\\n\" +\n+                \"        background-color: #f0f0f2;\\n\" +\n+                \"        margin: 0;\\n\" +\n+                \"        padding: 0;\\n\" +\n+                \"        font-family: -apple-system, system-ui, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Open Sans\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\n\" +\n+                \"        \\n\" +\n+                \"    }\\n\" +\n+                \"    div {\\n\" +\n+                \"        width: 600px;\\n\" +\n+                \"        margin: 5em auto;\\n\" +\n+                \"        padding: 2em;\\n\" +\n+                \"        background-color: #fdfdff;\\n\" +\n+                \"        border-radius: 0.5em;\\n\" +\n+                \"        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\\n\" +\n+                \"    }\\n\" +\n+                \"    a:link, a:visited {\\n\" +\n+                \"        color: #38488f;\\n\" +\n+                \"        text-decoration: none;\\n\" +\n+                \"    }\\n\" +\n+                \"    @media (max-width: 700px) {\\n\" +\n+                \"        div {\\n\" +\n+                \"            margin: 0 auto;\\n\" +\n+                \"            width: auto;\\n\" +\n+                \"        }\\n\" +\n+                \"    }\\n\" +\n+                \"    </style>    \\n\" +\n+                \"</head>\\n\" +\n+                \"\\n\" +\n+                \"<body>\\n\" +\n+                \"<div>\\n\" +\n+                \"    <h1>Example Domain</h1>\\n\" +\n+                \"    <p>This domain is for use in illustrative examples in documents. You may use this\\n\" +\n+                \"    domain in literature without prior coordination or asking for permission.</p>\\n\" +\n+                \"    <p><a href=\\\"https://www.iana.org/domains/example\\\">More information...</a></p>\\n\" +\n+                \"</div>\\n\" +\n+                \"</body>\\n\" +\n+                \"</html>\\n\");\n+    }\n+\n+    /**\n+     * Method: resourceToString(URL resource, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testResourceToStringForResourceEndOfLineStringXmlEncode() throws Exception {\n+        URL resource = new URL(\"http://example.com/\");\n+        String s1 = Misc.resourceToString(resource, \"end of the page\", true);\n+        assertEquals(s1, \"&lt;!doctype html&gt;end of the page&lt;html&gt;end of the page&lt;head&gt;end of the page    &lt;title&gt;Example Domain&lt;/title&gt;end of the pageend of the page    &lt;meta charset=&quot;utf-8&quot; /&gt;end of the page    &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;end of the page    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;end of the page    &lt;style type=&quot;text/css&quot;&gt;end of the page    body {end of the page        background-color: #f0f0f2;end of the page        margin: 0;end of the page        padding: 0;end of the page        font-family: -apple-system, system-ui, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;end of the page        end of the page    }end of the page    div {end of the page        width: 600px;end of the page        margin: 5em auto;end of the page        padding: 2em;end of the page        background-color: #fdfdff;end of the page        border-radius: 0.5em;end of the page        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);end of the page    }end of the page    a:link, a:visited {end of the page        color: #38488f;end of the page        text-decoration: none;end of the page    }end of the page    @media (max-width: 700px) {end of the page        div {end of the page            margin: 0 auto;end of the page            width: auto;end of the page        }end of the page    }end of the page    &lt;/style&gt;    end of the page&lt;/head&gt;end of the pageend of the page&lt;body&gt;end of the page&lt;div&gt;end of the page    &lt;h1&gt;Example Domain&lt;/h1&gt;end of the page    &lt;p&gt;This domain is for use in illustrative examples in documents. You may use thisend of the page    domain in literature without prior coordination or asking for permission.&lt;/p&gt;end of the page    &lt;p&gt;&lt;a href=&quot;https://www.iana.org/domains/example&quot;&gt;More information...&lt;/a&gt;&lt;/p&gt;end of the page&lt;/div&gt;end of the page&lt;/body&gt;end of the page&lt;/html&gt;end of the page\");\n+    }\n+\n+    @Test\n+    public void testResourceToStringForResourceEndOfLineString() throws Exception {\n+        URL resource = new URL(\"http://example.com/\");\n+        String s1 = Misc.resourceToString(resource, \"end of the page\");\n+        assertEquals(s1, \"<!doctype html>end of the page<html>end of the page<head>end of the page    <title>Example Domain</title>end of the pageend of the page    <meta charset=\\\"utf-8\\\" />end of the page    <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\" />end of the page    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />end of the page    <style type=\\\"text/css\\\">end of the page    body {end of the page        background-color: #f0f0f2;end of the page        margin: 0;end of the page        padding: 0;end of the page        font-family: -apple-system, system-ui, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Open Sans\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;end of the page        end of the page    }end of the page    div {end of the page        width: 600px;end of the page        margin: 5em auto;end of the page        padding: 2em;end of the page        background-color: #fdfdff;end of the page        border-radius: 0.5em;end of the page        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);end of the page    }end of the page    a:link, a:visited {end of the page        color: #38488f;end of the page        text-decoration: none;end of the page    }end of the page    @media (max-width: 700px) {end of the page        div {end of the page            margin: 0 auto;end of the page            width: auto;end of the page        }end of the page    }end of the page    </style>    end of the page</head>end of the pageend of the page<body>end of the page<div>end of the page    <h1>Example Domain</h1>end of the page    <p>This domain is for use in illustrative examples in documents. You may use thisend of the page    domain in literature without prior coordination or asking for permission.</p>end of the page    <p><a href=\\\"https://www.iana.org/domains/example\\\">More information...</a></p>end of the page</div>end of the page</body>end of the page</html>end of the page\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 637}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b475c62416a09a8db4aa24e78438ea64ee92923", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/2b475c62416a09a8db4aa24e78438ea64ee92923", "committedDate": "2020-06-09T12:20:47Z", "message": "Refactor test class.\n\nRefactored with respect to the requests of Niels."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9b50396efd18aa056dc32571078b85c7c0b5f5e", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/e9b50396efd18aa056dc32571078b85c7c0b5f5e", "committedDate": "2020-06-10T11:56:05Z", "message": "Add test case to test compression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16ad3021f7d70d8ffff1498d3c580b16a3151ba0", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/16ad3021f7d70d8ffff1498d3c580b16a3151ba0", "committedDate": "2020-06-10T14:27:49Z", "message": "Change testing for resource to string method, and compression method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MTczMDk5", "url": "https://github.com/ibissource/iaf/pull/716#pullrequestreview-428173099", "createdAt": "2020-06-10T15:26:44Z", "commit": {"oid": "16ad3021f7d70d8ffff1498d3c580b16a3151ba0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNToyNjo0NFrOGh6W4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNToyNjo0NFrOGh6W4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxMjMyMg==", "bodyText": "Travis is failing :O MiscTest.testResourceToStringResource:571 \u00bb StringIndexOutOfBounds String inde...", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r438212322", "createdAt": "2020-06-10T15:26:44Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,590 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import nl.nn.adapterframework.testutil.TestFileUtils;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");\n+    }\n+\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringNoXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", false);\n+        assertEquals(s, \"<root> 23    <name>GeeksforGeeks</name> 23    <address> 23        <sector>142</sector> 23        <location>Noida</location> 23    </address> 23</root> r\");\n+    }\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringXMLEncodeWithEndOfLineString() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", true);\n+        assertEquals(s, \"&lt;root&gt; 23    &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23    &lt;address&gt; 23        &lt;sector&gt;142&lt;/sector&gt; 23        &lt;location&gt;Noida&lt;/location&gt; 23    &lt;/address&gt; 23&lt;/root&gt; r\");\n+    }\n+\n+\n+    /**\n+     * Method: replace(String source, String from, String to)\n+     */\n+    @Test\n+    public void testReplace() throws Exception {\n+        String a = \"Kobe\";\n+        String res = Misc.replace(a, \"Ko\", \"Phoe\");\n+        assertEquals(res, \"Phoebe\");\n+    }\n+\n+    /**\n+     * Method: concatStrings(String part1, String separator, String part2)\n+     */\n+    @Test\n+    public void testConcatStrings() throws Exception {\n+        String a = \"LeBron\";\n+        String b = \"James\";\n+        String seperator = \"//\";\n+        String res = Misc.concatStrings(a, seperator, b);\n+        assertEquals(res, \"LeBron//James\");\n+    }\n+\n+    /**\n+     * Method: hide(String string)\n+     */\n+    @Test\n+    public void testHideString() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a);\n+        assertEquals(res, \"****\");\n+    }\n+\n+    /**\n+     * Method: hide(String string, int mode)\n+     */\n+    @Test\n+    public void testHideForStringMode() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a, 1);\n+        assertEquals(res, \"t**t\");\n+    }\n+\n+    /**\n+     * Method: byteArrayToString(byte[] input, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testByteArrayToString() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        String res = Misc.byteArrayToString(arr, \"\", true);\n+        assertEquals(res, s);\n+    }\n+\n+    /**\n+     * Method: gzip(String input)\n+     */\n+    @Test\n+    public void testGzipGUnzipInput() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        byte[] zipped = Misc.gzip(arr);\n+        assertEquals(Misc.gunzipToString(zipped), \"test\");\n+    }\n+\n+    @Test\n+    public void testGzipString() throws Exception {\n+        String s = \"you deserved this\";\n+        byte[] zipped = Misc.gzip(s);\n+        assertEquals(Misc.gunzipToString(zipped), \"you deserved this\");\n+\n+    }\n+\n+    /**\n+     * Method: compress(String input)\n+     */\n+    @Test\n+    public void testCompressed() throws Exception {\n+        String s = \"#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$\";\n+        String s1 = \"teststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststests\";\n+        String s3 = \"123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123\";\n+        byte[] compressedSymbols = Misc.compress(s);\n+        byte[] compressedText = Misc.compress(s1);\n+        byte[] compressedNumbers = Misc.compress(s3);\n+        assertTrue(compressedNumbers.length < s3.length());\n+        assertEquals(compressedNumbers[0], 120);\n+        assertEquals(compressedNumbers[1], -38);\n+        assertTrue(compressedText.length < s1.length());\n+        assertEquals(compressedText[0], 120);\n+        assertEquals(compressedText[1], -38);\n+        assertTrue(compressedSymbols.length < s.length());\n+        assertEquals(compressedSymbols[0], 120);\n+        assertEquals(compressedSymbols[1], -38);\n+    }\n+\n+    @Test\n+    public void testCompressDecompressInput() throws Exception {\n+        String s = \"test\";\n+        byte[] compressed = Misc.compress(s);\n+        String decompressed = Misc.decompressToString(compressed);\n+        assertEquals(decompressed, \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: copyContext(String keys, Map<String,Object> from, Map<String,Object> to)\n+     */\n+    @Test\n+    public void testCopyContext() throws Exception {\n+        Map<String, Object> context1 = new HashMap<>();\n+        Map<String, Object> context2 = new HashMap<>();\n+        String keys = \"a,b\";\n+        context1.put(\"a\", 15);\n+        context1.put(\"b\", 16);\n+        Misc.copyContext(keys, context1, context2);\n+        assertTrue(context1.equals(context2));\n+    }\n+\n+    /**\n+     * Method: toFileSize(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testToFileSizeForValueDefaultValue() throws Exception {\n+        long res = Misc.toFileSize(\"14GB\", 20);\n+        assertEquals(Long.toString(res), \"15032385536\");\n+    }\n+\n+    /**\n+     * Method: toFileSize(long value)\n+     */\n+    @Test\n+    public void testToFileSizeValue() throws Exception {\n+        String kb = Misc.toFileSize(150000, false, true);\n+        String mb = Misc.toFileSize(15000000, true);\n+        String gb = Misc.toFileSize(Long.parseLong(\"3221225472\"));\n+        assertEquals(gb, \"3GB\");\n+        assertEquals(mb, \"14 MB\");\n+        assertEquals(kb, \"146KB\");\n+    }\n+\n+\n+    @Test\n+    public void testListToStringWithStringList() {\n+        List list = new ArrayList<Integer>();\n+        list.add(\"bailar\");\n+        list.add(\"besos\");\n+        String res = Misc.listToString(list);\n+        assertEquals(res, \"bailarbesos\");\n+    }\n+\n+    /**\n+     * Method: addItemsToList(Collection<String> collection, String list, String collectionDescription, boolean lowercase)\n+     */\n+    @Test\n+    public void testAddItemsToList() throws Exception {\n+        List<String> stringCollection = new ArrayList<>();\n+        String list = \"a,b,C\";\n+        String collectionDescription = \"First 3 letters of the alphabet\";\n+        Misc.addItemsToList(stringCollection, list, collectionDescription, true);\n+        ArrayList<String> arrayList = new ArrayList<>();\n+        arrayList.add(\"a\");\n+        arrayList.add(\"b\");\n+        arrayList.add(\"c\");\n+        assertTrue(stringCollection.size() == 3);\n+        assertEquals(stringCollection.get(stringCollection.size() - 1), \"c\");\n+    }\n+\n+    /**\n+     * Method: getFileSystemTotalSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemTotalSpace() throws Exception {\n+        assertFalse(Misc.getFileSystemTotalSpace().isEmpty());\n+    }\n+\n+    /**\n+     * Method: getFileSystemFreeSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemFreeSpace() throws Exception {\n+        assertFalse(Misc.getFileSystemFreeSpace().isEmpty());\n+    }\n+\n+    /**\n+     * Method: getAge(long value)\n+     */\n+    @Test\n+    public void testGetAge() throws Exception {\n+        assertFalse(Misc.getAge(1).isEmpty());\n+    }\n+\n+    /**\n+     * Method: getDurationInMs(long value)\n+     */\n+    @Test\n+    public void testGetDurationInMs() throws Exception {\n+        assertFalse(Misc.getDurationInMs(14).isEmpty());\n+    }\n+\n+    /**\n+     * Method: parseAge(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testParseAge() throws Exception {\n+        long res = Misc.parseAge(\"2D\", 100);\n+        assertEquals(res, 172800000);\n+    }\n+\n+    /**\n+     * Method: cleanseMessage(String inputString, String hideRegex, String hideMethod)\n+     */\n+    @Test\n+    public void testCleanseMessage() throws Exception {\n+        String s = \"Donald Duck 23  Hey hey  14  Wooo\";\n+        String regex = \"\\\\d\";\n+        String res = Misc.cleanseMessage(s, regex, \" does not matter\");\n+        assertEquals(res, \"Donald Duck **  Hey hey  **  Wooo\");\n+    }\n+\n+    /**\n+     * Method: hideFirstHalf(String inputString, String regex)\n+     */\n+    @Test\n+    public void testHideFirstHalf() throws Exception {\n+        String s = \"Donald Duck     Hey hey     Wooo\";\n+        String hideRegex = \"[^\\\\s*].*[^\\\\s*]\";\n+        String res = Misc.hideFirstHalf(s, hideRegex);\n+        assertEquals(res, \"****************Hey hey     Wooo\");\n+    }\n+\n+\n+    /**\n+     * Method: getBuildOutputDirectory()\n+     */\n+    @Test\n+    public void testGetBuildOutputDirectory() throws Exception {\n+        String outputDirectory = Misc.getBuildOutputDirectory();\n+        assertEquals(outputDirectory.substring(outputDirectory.length() - 29, outputDirectory.length()), pathSeperator + \"iaf\" + pathSeperator + \"core\" + pathSeperator + \"target\" + pathSeperator + \"test-classes\");\n+    }\n+\n+    /**\n+     * Method: getProjectBaseDir()\n+     */\n+    @Test\n+    public void testGetProjectBaseDir() throws Exception {\n+        String baseDir = Misc.getBuildOutputDirectory();\n+        assertEquals(baseDir.substring(baseDir.length() - 29, baseDir.length()), pathSeperator + \"iaf\" + pathSeperator + \"core\" + pathSeperator + \"target\" + pathSeperator + \"test-classes\");\n+    }\n+\n+    /**\n+     * Method: toSortName(String name)\n+     */\n+    @Test\n+    public void testToSortName() throws Exception {\n+        assertEquals(Misc.toSortName(\"new_name\"), \"NEW*NAME\");\n+    }\n+\n+    /**\n+     * Method: countRegex(String string, String regex)\n+     */\n+    @Test\n+    public void testCountRegex() throws Exception {\n+        String s = \"12ab34\";\n+        String regex = \"\\\\d\";\n+        int regexCount = Misc.countRegex(s, regex);\n+        assertEquals(regexCount, 4);\n+    }\n+\n+    /**\n+     * Method: resourceToString(URL resource)\n+     */\n+    @Test\n+    public void testResourceToStringResource() throws Exception {\n+        URL resource = TestFileUtils.getTestFileURL(\"/Misc/test_file_for_resource_to_string_misc.txt\");\n+        String s1 = Misc.resourceToString(resource);\n+        assertEquals(s1.substring(0, 62), \"<!doctype txt>this is a text file.\\r\\nnew line in the text file.\");\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ad3021f7d70d8ffff1498d3c580b16a3151ba0"}, "originalPosition": 601}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29bba0026b7102857941c119901fb2d8023b0b5d", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/29bba0026b7102857941c119901fb2d8023b0b5d", "committedDate": "2020-06-10T18:26:03Z", "message": "Fix build errror"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c40b7e86126f0ce76a173ee6b45f84fa2ed2c1a6", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/c40b7e86126f0ce76a173ee6b45f84fa2ed2c1a6", "committedDate": "2020-06-10T18:48:56Z", "message": "Fix build error."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "475b59d239c47ee341787a76de3cf141e5b581a5", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/475b59d239c47ee341787a76de3cf141e5b581a5", "committedDate": "2020-06-10T18:59:01Z", "message": "Fix build error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc82ddda395181b7a012e3ac2a9d0bbcf5342341", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/fc82ddda395181b7a012e3ac2a9d0bbcf5342341", "committedDate": "2020-06-16T08:45:36Z", "message": "Fix build error."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "503e83d01af2e7a5280c2d9b090fe5176d9dd9ca", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/503e83d01af2e7a5280c2d9b090fe5176d9dd9ca", "committedDate": "2020-06-16T08:52:07Z", "message": "Verify build passes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8bf9f52e50c6c043533a09e954b36515480a35f", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/f8bf9f52e50c6c043533a09e954b36515480a35f", "committedDate": "2020-06-16T09:12:52Z", "message": "Use assertEqualsIgnoreWhitespaces instead of dealing with whitespaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2964734773879fdf9a8c2fb19b8203e854f70a99", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/2964734773879fdf9a8c2fb19b8203e854f70a99", "committedDate": "2020-06-16T09:16:44Z", "message": "Remove Codacy warning by adding an assertFalse."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMzIyMTQ5", "url": "https://github.com/ibissource/iaf/pull/716#pullrequestreview-431322149", "createdAt": "2020-06-16T09:26:06Z", "commit": {"oid": "2964734773879fdf9a8c2fb19b8203e854f70a99"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1206, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}