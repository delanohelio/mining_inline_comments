{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NDg4OTYz", "number": 817, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjozNzoxNVrOEFhJfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NTowMFrOEFnmCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjIxNDM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemMessageBrowser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjozNzoxNVrOGjwSaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjozNzoxNVrOGjwSaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE0NDQ5MQ==", "bodyText": "Moet je hier niet ook de folder meegeven?", "url": "https://github.com/ibissource/iaf/pull/817#discussion_r440144491", "createdAt": "2020-06-15T12:37:15Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemMessageBrowser.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.filesystem;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+\n+import org.apache.logging.log4j.Logger;\n+\n+import nl.nn.adapterframework.core.IMessageBrowser;\n+import nl.nn.adapterframework.core.IMessageBrowsingIterator;\n+import nl.nn.adapterframework.core.IMessageBrowsingIteratorItem;\n+import nl.nn.adapterframework.core.ListenerException;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+public class FileSystemMessageBrowser<F, FS extends IBasicFileSystem<F>> implements IMessageBrowser<F> {\n+\tprotected Logger log = LogUtil.getLogger(this);\n+\n+\tprivate FS fileSystem;\n+\tprivate String folder;\n+\n+\tprivate String hideRegex = null;\n+\tprivate String hideMethod = \"all\";\n+\n+\n+\tpublic FileSystemMessageBrowser(FS fileSystem, String folder) {\n+\t\tthis.fileSystem = fileSystem;\n+\t\tthis.folder = folder;\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean isTransacted() {\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic IMessageBrowsingIterator getIterator() throws ListenerException {\n+\t\ttry {\n+\t\t\treturn new FileSystemMessageBrowsingIterator<F, FS>(fileSystem, folder);\n+\t\t} catch (FileSystemException e) {\n+\t\t\tthrow new ListenerException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IMessageBrowsingIterator getIterator(Date startTime, Date endTime, SortOrder order) throws ListenerException {\n+\t\treturn getIterator(); // TODO: implement filter and sort order\n+\t}\n+\n+\t@Override\n+\tpublic IMessageBrowsingIteratorItem getContext(String messageId) throws ListenerException {\n+\t\treturn new FileSystemMessageBrowsingIteratorItem<F, FS>(fileSystem, getMessage(messageId));\n+\t}\n+\n+\t@Override\n+\tpublic boolean containsMessageId(String originalMessageId) throws ListenerException {\n+\t\ttry {\n+\t\t\treturn fileSystem.exists(fileSystem.toFile(originalMessageId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df0f0562b7efe49d93eeae8865619e071bbcb50b"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjIyMDgwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemMessageBrowser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjozOTowNVrOGjwWOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjozOTowNVrOGjwWOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE0NTQ2Ng==", "bodyText": "Deze moet ook de message verwijderen toch? Dit is namelijk wat aangeroepen wordt bij het herverzenden...\nZie JdbcTransactionalStorage\n\t@Override\n\tpublic S getMessage(String messageId) throws ListenerException {\n\t\tS result = browseMessage(messageId);\n\t\tdeleteMessage(messageId);\n\t\treturn result;\n\t}", "url": "https://github.com/ibissource/iaf/pull/817#discussion_r440145466", "createdAt": "2020-06-15T12:39:05Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemMessageBrowser.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.filesystem;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+\n+import org.apache.logging.log4j.Logger;\n+\n+import nl.nn.adapterframework.core.IMessageBrowser;\n+import nl.nn.adapterframework.core.IMessageBrowsingIterator;\n+import nl.nn.adapterframework.core.IMessageBrowsingIteratorItem;\n+import nl.nn.adapterframework.core.ListenerException;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+public class FileSystemMessageBrowser<F, FS extends IBasicFileSystem<F>> implements IMessageBrowser<F> {\n+\tprotected Logger log = LogUtil.getLogger(this);\n+\n+\tprivate FS fileSystem;\n+\tprivate String folder;\n+\n+\tprivate String hideRegex = null;\n+\tprivate String hideMethod = \"all\";\n+\n+\n+\tpublic FileSystemMessageBrowser(FS fileSystem, String folder) {\n+\t\tthis.fileSystem = fileSystem;\n+\t\tthis.folder = folder;\n+\t}\n+\t\n+\t@Override\n+\tpublic boolean isTransacted() {\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic IMessageBrowsingIterator getIterator() throws ListenerException {\n+\t\ttry {\n+\t\t\treturn new FileSystemMessageBrowsingIterator<F, FS>(fileSystem, folder);\n+\t\t} catch (FileSystemException e) {\n+\t\t\tthrow new ListenerException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic IMessageBrowsingIterator getIterator(Date startTime, Date endTime, SortOrder order) throws ListenerException {\n+\t\treturn getIterator(); // TODO: implement filter and sort order\n+\t}\n+\n+\t@Override\n+\tpublic IMessageBrowsingIteratorItem getContext(String messageId) throws ListenerException {\n+\t\treturn new FileSystemMessageBrowsingIteratorItem<F, FS>(fileSystem, getMessage(messageId));\n+\t}\n+\n+\t@Override\n+\tpublic boolean containsMessageId(String originalMessageId) throws ListenerException {\n+\t\ttry {\n+\t\t\treturn fileSystem.exists(fileSystem.toFile(originalMessageId));\n+\t\t} catch (FileSystemException e) {\n+\t\t\tthrow new ListenerException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean containsCorrelationId(String correlationId) throws ListenerException {\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic F browseMessage(String messageId) throws ListenerException {\n+\t\ttry {\n+\t\t\treturn fileSystem.toFile(folder, messageId);\n+\t\t} catch (FileSystemException e) {\n+\t\t\tthrow new ListenerException(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic F getMessage(String messageId) throws ListenerException {\n+\t\ttry {\n+\t\t\treturn fileSystem.toFile(folder, messageId);\n+\t\t} catch (FileSystemException e) {\n+\t\t\tthrow new ListenerException(e);\n+\t\t}\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df0f0562b7efe49d93eeae8865619e071bbcb50b"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjI0MzE4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjo0NTo0M1rOGjwkew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjo0NTo0M1rOGjwkew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE0OTExNQ==", "bodyText": "Misschien leuk om te melding te geven wanneer men zelf een errorstorage implementeerd terwijl dit anders al 'native' gebeurd.", "url": "https://github.com/ibissource/iaf/pull/817#discussion_r440149115", "createdAt": "2020-06-15T12:45:43Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "diffHunk": "@@ -615,6 +617,10 @@ public void configure() throws ConfigurationException {\n \t\t\t\t\tinfo(\"has errorStorage to \"+((HasPhysicalDestination)errorStorage).getPhysicalDestinationName());\n \t\t\t\t}\n \t\t\t\tregisterEvent(RCV_MESSAGE_TO_ERRORSTORE_EVENT);\n+\t\t\t} else {\n+\t\t\t\tif (getListener() instanceof IProvidesMessageBrowsers) {\n+\t\t\t\t\tthis.errorStorage = ((IProvidesMessageBrowsers)getListener()).getErrorStoreBrowser();\n+\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df0f0562b7efe49d93eeae8865619e071bbcb50b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjI0Nzk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjo0NzowMVrOGjwngg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjo0NzowMVrOGjwngg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE0OTg5MA==", "bodyText": "Ik zou het op prijs stellen als bij deze twee methodes javadoc aanwezig zou zijn.", "url": "https://github.com/ibissource/iaf/pull/817#discussion_r440149890", "createdAt": "2020-06-15T12:47:01Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "diffHunk": "@@ -1719,9 +1731,12 @@ public ISender getErrorSender() {\n \t\treturn errorSender;\n \t}\n \n-\tpublic ITransactionalStorage<Serializable> getErrorStorage() {\n+\tpublic IMessageBrowser<Serializable> getErrorStorageBrowser() {\n \t\treturn errorStorage;\n \t}\n+\tpublic ITransactionalStorage<Serializable> getErrorStorage() {\n+\t\treturn errorStorage!=null && errorStorage instanceof ITransactionalStorage ? (ITransactionalStorage)errorStorage: null;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df0f0562b7efe49d93eeae8865619e071bbcb50b"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjI1ODQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjo0OTo1NFrOGjwuOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjo0OTo1NFrOGjwuOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1MTYwOA==", "bodyText": "Ik zou het op prijs stellen als bij deze twee methodes javadoc aanwezig zou zijn.", "url": "https://github.com/ibissource/iaf/pull/817#discussion_r440151608", "createdAt": "2020-06-15T12:49:54Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "diffHunk": "@@ -1756,9 +1771,12 @@ protected void setMessageLog(ITransactionalStorage<Serializable> messageLog) {\n \t\t\tmessageLog.setType(ITransactionalStorage.TYPE_MESSAGELOG_RECEIVER);\n \t\t}\n \t}\n-\tpublic ITransactionalStorage<Serializable> getMessageLog() {\n+\tpublic IMessageBrowser<Serializable> getMessageLogBrowser() {\n \t\treturn messageLog;\n \t}\n+\tpublic ITransactionalStorage<Serializable> getMessageLog() {\n+\t\treturn messageLog!=null && messageLog instanceof ITransactionalStorage ? (ITransactionalStorage)messageLog: null;\n+\t}\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df0f0562b7efe49d93eeae8865619e071bbcb50b"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzI2MTQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1MjoxMFrOGj6lpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1MjoxMFrOGj6lpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxMzI1Mw==", "bodyText": "overrided moet zijn: overridden maar dan leest de zin niet zo lekker.", "url": "https://github.com/ibissource/iaf/pull/817#discussion_r440313253", "createdAt": "2020-06-15T16:52:10Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "diffHunk": "@@ -615,6 +617,13 @@ public void configure() throws ConfigurationException {\n \t\t\t\t\tinfo(\"has errorStorage to \"+((HasPhysicalDestination)errorStorage).getPhysicalDestinationName());\n \t\t\t\t}\n \t\t\t\tregisterEvent(RCV_MESSAGE_TO_ERRORSTORE_EVENT);\n+\t\t\t\tif (getListener() instanceof IProvidesMessageBrowsers && ((IProvidesMessageBrowsers)getListener()).getErrorStoreBrowser()!=null) {\n+\t\t\t\t\tConfigurationWarnings.add(this, log, \"configuration overrided default errorStorageBrowser provided by listener\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44257a554f1901b8d053a57e810f4a943c3dfaa9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzI2NDgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1MzowOVrOGj6n3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1MzowOVrOGj6n3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxMzgyMA==", "bodyText": "idem", "url": "https://github.com/ibissource/iaf/pull/817#discussion_r440313820", "createdAt": "2020-06-15T16:53:09Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "diffHunk": "@@ -625,6 +634,13 @@ public void configure() throws ConfigurationException {\n \t\t\t\tif (StringUtils.isNotEmpty(getLabelXPath()) || StringUtils.isNotEmpty(getLabelStyleSheet())) {\n \t\t\t\t\tlabelTp=TransformerPool.configureTransformer0(getLogPrefix(), classLoader, getLabelNamespaceDefs(), getLabelXPath(), getLabelStyleSheet(),\"text\",false,null,0);\n \t\t\t\t}\n+\t\t\t\tif (getListener() instanceof IProvidesMessageBrowsers && ((IProvidesMessageBrowsers)getListener()).getMessageLogBrowser()!=null) {\n+\t\t\t\t\tConfigurationWarnings.add(this, log, \"configuration overrided default messageLogBrowser provided by listener\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44257a554f1901b8d053a57e810f4a943c3dfaa9"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzI3MDUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NTowMFrOGj6rrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NTowMFrOGj6rrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNDc5Ng==", "bodyText": "It is used to store failed messages", "url": "https://github.com/ibissource/iaf/pull/817#discussion_r440314796", "createdAt": "2020-06-15T16:55:00Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/receivers/ReceiverBase.java", "diffHunk": "@@ -1719,9 +1743,18 @@ public ISender getErrorSender() {\n \t\treturn errorSender;\n \t}\n \n-\tpublic ITransactionalStorage<Serializable> getErrorStorage() {\n+\t/**\n+\t * returns a browser for the errorStorage, either provided as a {@link IMessageBrowser} by the listener itself, or as a {@link ITransactionalStorage} in the configuration. \n+\t */\n+\tpublic IMessageBrowser<Serializable> getErrorStorageBrowser() {\n \t\treturn errorStorage;\n \t}\n+\t/**\n+\t * returns the {@link ITransactionalStorage} if it is provided in the configuration. It is used to store failed message. If present, this storage will be managed by the Receiver.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44257a554f1901b8d053a57e810f4a943c3dfaa9"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 383, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}