{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMTIxMzQx", "number": 1208, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNzozMjoxM1rOEyNtcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzowMDo0N1rOEy6W8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDg4ODgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/stream/Message.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNzozMjoxM1rOHoufqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNzozMjoxM1rOHoufqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2Njg1Ng==", "bodyText": "Volgens mij moet je length() op de onderliggende byteArray doen.", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r512466856", "createdAt": "2020-10-27T07:32:13Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/stream/Message.java", "diffHunk": "@@ -414,4 +415,37 @@ private void readObject(ObjectInputStream stream) throws IOException, ClassNotFo\n \t\tstream.defaultReadObject();\n \t}\n \n+\t/**\n+\t * @return Message size or -1 if it can't determine the size.\n+\t */\n+\tpublic long size() {\n+\t\tif(request == null) {\n+\t\t\treturn -1;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tif (request instanceof FileInputStream) {\n+\t\t\t\tFileInputStream fileStream = (FileInputStream) request;\n+\t\t\t\treturn fileStream.getChannel().size();\n+\t\t\t}\n+\t\t} catch (IOException e) {\n+\t\t\tlog.debug(\"unable to determine size of stream [\"+ClassUtils.nameOf(request)+\"]\", e);\n+\t\t}\n+\n+\t\tif (request instanceof ByteArrayInputStream) {\n+\t\t\treturn ((ByteArrayInputStream) request).available();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86c88facaa39fe1fb9ea665c70fb800d9fbc52ce"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjU4MDgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/http/cxf/InputStreamAttachmentPart.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDo1OTozMFrOHpklEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDo1OTozMFrOHpklEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1Mjk3Ng==", "bodyText": "Voor deze aanpassing hoef je de serialVersionUID niet aan te passen.", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513352976", "createdAt": "2020-10-28T10:59:30Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/http/cxf/InputStreamAttachmentPart.java", "diffHunk": "@@ -33,7 +33,7 @@\n  */\n public class InputStreamAttachmentPart extends AttachmentPart {\n \n-\tprivate static final long serialVersionUID = 1L;\n+\tprivate static final long serialVersionUID = 2L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f630c849f891da44f2e4e21c135fd7cffaf768"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjU5NDc5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/http/HttpSenderResultTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMTowMzoxMlrOHpktUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMTowMzoxMlrOHpktUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1NTA5MA==", "bodyText": "Maar nu zit er opeens een message in die session variable, in plaats van een byte array!", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513355090", "createdAt": "2020-10-28T11:03:12Z", "author": {"login": "gvanbrakel"}, "path": "core/src/test/java/nl/nn/adapterframework/http/HttpSenderResultTest.java", "diffHunk": "@@ -221,8 +221,8 @@ public void simpleByteArrayInSessionKeyMockedHttpPost() throws Exception {\n \t\tString result = sender.sendMessage(new Message(\"tralala\"), pls).asString();\n \t\tassertEquals(null, result);\n \n-\t\tbyte[] byteArray = (byte[])pls.get(SESSIONKEY_KEY);\n-\t\tassertEquals(\"<dummy result/>\", new String(byteArray, \"UTF-8\"));\n+\t\tMessage message = (Message)pls.get(SESSIONKEY_KEY);\n+\t\tassertEquals(\"<dummy result/>\", message.asString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f630c849f891da44f2e4e21c135fd7cffaf768"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjYwNTg4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/stream/MessageTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMTowNjowM1rOHpk0Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjoyNTozOVrOHpng8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1NjgyMg==", "bodyText": "Waarom?", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513356822", "createdAt": "2020-10-28T11:06:03Z", "author": {"login": "gvanbrakel"}, "path": "core/src/test/java/nl/nn/adapterframework/stream/MessageTest.java", "diffHunk": "@@ -388,7 +388,7 @@ public void testSerializeWithURL() throws Exception {\n \t\tfolder.create();\n \t\tFile file = folder.newFile();\n \t\twriteContentsToFile(file, testString);\n-\t\tURL source = file.toURL();\n+\t\tURL source = file.toURI().toURL();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f630c849f891da44f2e4e21c135fd7cffaf768"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMTA3NQ==", "bodyText": "Javadoc zegt deprecated", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513401075", "createdAt": "2020-10-28T12:25:39Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/stream/MessageTest.java", "diffHunk": "@@ -388,7 +388,7 @@ public void testSerializeWithURL() throws Exception {\n \t\tfolder.create();\n \t\tFile file = folder.newFile();\n \t\twriteContentsToFile(file, testString);\n-\t\tURL source = file.toURL();\n+\t\tURL source = file.toURI().toURL();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1NjgyMg=="}, "originalCommit": {"oid": "91f630c849f891da44f2e4e21c135fd7cffaf768"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjYxMDkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/stream/Message.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMTowNzozMFrOHpk3MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjoyNzozNlrOHpnlng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1NzYxNg==", "bodyText": "Deze moet dan toch voor regel 424", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513357616", "createdAt": "2020-10-28T11:07:30Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/stream/Message.java", "diffHunk": "@@ -414,4 +414,37 @@ private void readObject(ObjectInputStream stream) throws IOException, ClassNotFo\n \t\tstream.defaultReadObject();\n \t}\n \n+\t/**\n+\t * @return Message size or -1 if it can't determine the size.\n+\t */\n+\tpublic long size() {\n+\t\tif(request == null) {\n+\t\t\treturn -1;\n+\t\t}\n+\t\tif(request instanceof InputStream || request instanceof Reader) {\n+\t\t\treturn -1; //Unable to determine the size of a Stream\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tif (request instanceof FileInputStream) {\n+\t\t\t\tFileInputStream fileStream = (FileInputStream) request;\n+\t\t\t\treturn fileStream.getChannel().size();\n+\t\t\t}\n+\t\t} catch (IOException e) {\n+\t\t\tlog.debug(\"unable to determine size of stream [\"+ClassUtils.nameOf(request)+\"]\", e);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f630c849f891da44f2e4e21c135fd7cffaf768"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMjI3MA==", "bodyText": "En gelijk een test voor maken!", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513402270", "createdAt": "2020-10-28T12:27:36Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/stream/Message.java", "diffHunk": "@@ -414,4 +414,37 @@ private void readObject(ObjectInputStream stream) throws IOException, ClassNotFo\n \t\tstream.defaultReadObject();\n \t}\n \n+\t/**\n+\t * @return Message size or -1 if it can't determine the size.\n+\t */\n+\tpublic long size() {\n+\t\tif(request == null) {\n+\t\t\treturn -1;\n+\t\t}\n+\t\tif(request instanceof InputStream || request instanceof Reader) {\n+\t\t\treturn -1; //Unable to determine the size of a Stream\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tif (request instanceof FileInputStream) {\n+\t\t\t\tFileInputStream fileStream = (FileInputStream) request;\n+\t\t\t\treturn fileStream.getChannel().size();\n+\t\t\t}\n+\t\t} catch (IOException e) {\n+\t\t\tlog.debug(\"unable to determine size of stream [\"+ClassUtils.nameOf(request)+\"]\", e);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1NzYxNg=="}, "originalCommit": {"oid": "91f630c849f891da44f2e4e21c135fd7cffaf768"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjYxNTQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/stream/Message.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMTowODo1M1rOHpk6Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjoyODozMFrOHpnnmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1ODM1NQ==", "bodyText": "Hoeft niet te veranderen, toch?", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513358355", "createdAt": "2020-10-28T11:08:53Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/stream/Message.java", "diffHunk": "@@ -30,18 +30,19 @@\n import javax.xml.transform.Source;\n \n import org.apache.commons.io.input.ReaderInputStream;\n-import org.apache.logging.log4j.Logger;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.Logger;\n import org.xml.sax.InputSource;\n import org.xml.sax.SAXException;\n \n+import nl.nn.adapterframework.util.ClassUtils;\n import nl.nn.adapterframework.util.LogUtil;\n import nl.nn.adapterframework.util.StreamUtil;\n import nl.nn.adapterframework.util.XmlUtils;\n \n public class Message implements Serializable {\n \n-\tprivate static final long serialVersionUID = 437863352486501445L;\n+\tprivate static final long serialVersionUID = 437863352486501446L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f630c849f891da44f2e4e21c135fd7cffaf768"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwMjc3Ng==", "bodyText": "Had oorspronkelijk iets met de charset gedaan, maar toen ik zag dat jij het anders had opgelost teruggedraaid. Zal deze ook reverten!", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513402776", "createdAt": "2020-10-28T12:28:30Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/stream/Message.java", "diffHunk": "@@ -30,18 +30,19 @@\n import javax.xml.transform.Source;\n \n import org.apache.commons.io.input.ReaderInputStream;\n-import org.apache.logging.log4j.Logger;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.logging.log4j.Logger;\n import org.xml.sax.InputSource;\n import org.xml.sax.SAXException;\n \n+import nl.nn.adapterframework.util.ClassUtils;\n import nl.nn.adapterframework.util.LogUtil;\n import nl.nn.adapterframework.util.StreamUtil;\n import nl.nn.adapterframework.util.XmlUtils;\n \n public class Message implements Serializable {\n \n-\tprivate static final long serialVersionUID = 437863352486501445L;\n+\tprivate static final long serialVersionUID = 437863352486501446L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM1ODM1NQ=="}, "originalCommit": {"oid": "91f630c849f891da44f2e4e21c135fd7cffaf768"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjgxNzc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjowNToxOFrOHpm0Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjozNjoyNlrOHpn4xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4OTYxOQ==", "bodyText": "Je stopt nu een Message in de sessie, in plaats van een Stream of byte array. Het is maar de vraag of de ontvangende partijen daarmee om kunnen gaan.", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513389619", "createdAt": "2020-10-28T12:05:18Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -546,36 +551,30 @@ protected Message extractResult(HttpResponseHandler responseHandler, IPipeLineSe\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tthrow new SenderException(\"cannot find filename to stream result to\", e);\n \t\t\t\t}\n-\t\t\t} else if (isBase64()) {\n+\t\t\t} else if (isBase64()) { //This should be removed in a future iteration\n \t\t\t\treturn getResponseBodyAsBase64(responseHandler.getResponse());\n-\t\t\t} else if (StringUtils.isNotEmpty(getStoreResultAsStreamInSessionKey())) {\n-\t\t\t\tsession.put(getStoreResultAsStreamInSessionKey(), responseHandler.getResponse());\n-\t\t\t\treturn Message.nullMessage();\n-\t\t\t} else if (StringUtils.isNotEmpty(getStoreResultAsByteArrayInSessionKey())) {\n-\t\t\t\tsession.put(getStoreResultAsByteArrayInSessionKey(), Misc.streamToBytes(responseHandler.getResponse()));\n+\t\t\t} else if (StringUtils.isNotEmpty(storeResultInSessionKey)) { //This should be removed in a future iteration\n+\t\t\t\tMessage message = new Message(responseHandler.getResponse());\n+\t\t\t\tsession.put(storeResultInSessionKey, message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f630c849f891da44f2e4e21c135fd7cffaf768"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQwNzE3Mw==", "bodyText": "Gelukkig is dat wel het geval. Deze wordt namelijk als parameter meegegeven, en die kan met Message objecten overweg. Zal hier nog een extra test voor maken.", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513407173", "createdAt": "2020-10-28T12:36:26Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -546,36 +551,30 @@ protected Message extractResult(HttpResponseHandler responseHandler, IPipeLineSe\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tthrow new SenderException(\"cannot find filename to stream result to\", e);\n \t\t\t\t}\n-\t\t\t} else if (isBase64()) {\n+\t\t\t} else if (isBase64()) { //This should be removed in a future iteration\n \t\t\t\treturn getResponseBodyAsBase64(responseHandler.getResponse());\n-\t\t\t} else if (StringUtils.isNotEmpty(getStoreResultAsStreamInSessionKey())) {\n-\t\t\t\tsession.put(getStoreResultAsStreamInSessionKey(), responseHandler.getResponse());\n-\t\t\t\treturn Message.nullMessage();\n-\t\t\t} else if (StringUtils.isNotEmpty(getStoreResultAsByteArrayInSessionKey())) {\n-\t\t\t\tsession.put(getStoreResultAsByteArrayInSessionKey(), Misc.streamToBytes(responseHandler.getResponse()));\n+\t\t\t} else if (StringUtils.isNotEmpty(storeResultInSessionKey)) { //This should be removed in a future iteration\n+\t\t\t\tMessage message = new Message(responseHandler.getResponse());\n+\t\t\t\tsession.put(storeResultInSessionKey, message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM4OTYxOQ=="}, "originalCommit": {"oid": "91f630c849f891da44f2e4e21c135fd7cffaf768"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjgyNzQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjowNzo1NVrOHpm6AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjowNzo1NVrOHpm6AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM5MTEwNA==", "bodyText": "Je hebt nu het optionele niet throwen van excepties verplaatst naar try { } catches van de aanroepers. Waarom?", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513391104", "createdAt": "2020-10-28T12:07:55Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -546,36 +551,30 @@ protected Message extractResult(HttpResponseHandler responseHandler, IPipeLineSe\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tthrow new SenderException(\"cannot find filename to stream result to\", e);\n \t\t\t\t}\n-\t\t\t} else if (isBase64()) {\n+\t\t\t} else if (isBase64()) { //This should be removed in a future iteration\n \t\t\t\treturn getResponseBodyAsBase64(responseHandler.getResponse());\n-\t\t\t} else if (StringUtils.isNotEmpty(getStoreResultAsStreamInSessionKey())) {\n-\t\t\t\tsession.put(getStoreResultAsStreamInSessionKey(), responseHandler.getResponse());\n-\t\t\t\treturn Message.nullMessage();\n-\t\t\t} else if (StringUtils.isNotEmpty(getStoreResultAsByteArrayInSessionKey())) {\n-\t\t\t\tsession.put(getStoreResultAsByteArrayInSessionKey(), Misc.streamToBytes(responseHandler.getResponse()));\n+\t\t\t} else if (StringUtils.isNotEmpty(storeResultInSessionKey)) { //This should be removed in a future iteration\n+\t\t\t\tMessage message = new Message(responseHandler.getResponse());\n+\t\t\t\tsession.put(storeResultInSessionKey, message);\n \t\t\t\treturn Message.nullMessage();\n \t\t\t} else if (BooleanUtils.isTrue(isMultipartResponse()) || responseHandler.isMultipart()) {\n \t\t\t\tif(BooleanUtils.isFalse(isMultipartResponse())) {\n \t\t\t\t\tlog.warn(\"multipart response was set to false, but the response is multipart!\");\n \t\t\t\t}\n \t\t\t\treturn handleMultipartResponse(responseHandler, session);\n \t\t\t} else {\n-\t\t\t\t//TODO remove getResponseBodyAsString method and return a Message object\n-\t\t\t\treturn Message.asMessage(getResponseBodyAsString(responseHandler, true));\n+\t\t\t\treturn getResponseBody(responseHandler);\n \t\t\t}\n \t\t} else {\n \t\t\tstreamResponseBody(responseHandler, response);\n \t\t\treturn Message.nullMessage();\n \t\t}\n \t}\n \n-\t/**\n-\t * When an exception occurs and the response cannot be parsed, we do not want to throw a 'missing response' exception. \n-\t * Since this method is used when handling other exceptions thrown by {@link WebServiceSender} and {@link HttpSender} , silently return null, to avoid npe's, ioexceptions etc.\n-\t */\n-\tpublic String getResponseBodyAsString(HttpResponseHandler responseHandler, boolean throwIOExceptionWhenParsingResponse) throws IOException {\n+\tpublic Message getResponseBody(HttpResponseHandler responseHandler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f630c849f891da44f2e4e21c135fd7cffaf768"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjgzMzYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/receivers/ExchangeMailListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjowOTozMVrOHpm9tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMjowOTozMVrOHpm9tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM5MjA1NA==", "bodyText": "Je stopt hier een Message in de sessie, in plaats van een byte array. Het is maar de vraag of de ontvangende partij daarmee om kan gaan.", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513392054", "createdAt": "2020-10-28T12:09:31Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/receivers/ExchangeMailListener.java", "diffHunk": "@@ -99,28 +98,28 @@ public Message extractMessage(Item rawMessage, Map<String,Object> threadContext)\n \t\tif (!EMAIL_MESSAGE_TYPE.equals(getMessageType())) {\n \t\t\treturn super.extractMessage(rawMessage, threadContext);\n \t\t}\n-\t\tItem item = (Item) rawMessage;\n+\n \t\ttry {\n \t\t\tXmlBuilder emailXml = new XmlBuilder(\"email\");\n \t\t\tEmailMessage emailMessage;\n \t\t\tPropertySet ps;\n \t\t\tif (isSimple()) {\n \t\t\t\tps = new PropertySet(EmailMessageSchema.Subject);\n-\t\t\t\temailMessage = EmailMessage.bind(getFileSystem().getExchangeService(), item.getId(), ps);\n+\t\t\t\temailMessage = EmailMessage.bind(getFileSystem().getExchangeService(), rawMessage.getId(), ps);\n \t\t\t\temailMessage.load();\n \t\t\t\taddEmailInfoSimple(emailMessage, emailXml);\n \t\t\t} else {\n \t\t\t\tps = new PropertySet(EmailMessageSchema.DateTimeReceived, EmailMessageSchema.From, EmailMessageSchema.Subject, EmailMessageSchema.Body, EmailMessageSchema.DateTimeSent);\n-\t\t\t\temailMessage = EmailMessage.bind(getFileSystem().getExchangeService(), item.getId(), ps);\n+\t\t\t\temailMessage = EmailMessage.bind(getFileSystem().getExchangeService(), rawMessage.getId(), ps);\n \t\t\t\temailMessage.load();\n \t\t\t\taddEmailInfo(emailMessage, emailXml);\n \t\t\t}\n \n-\t\t\tif (StringUtils.isNotEmpty(getStoreEmailAsStreamInSessionKey())) {\n+\t\t\tif (StringUtils.isNotEmpty(getStoreEmailInSessionKey())) {\n \t\t\t\temailMessage.load(new PropertySet(ItemSchema.MimeContent));\n \t\t\t\tMimeContent mc = emailMessage.getMimeContent();\n-\t\t\t\tByteArrayInputStream bis = new ByteArrayInputStream(mc.getContent());\n-\t\t\t\tthreadContext.put(getStoreEmailAsStreamInSessionKey(), bis);\n+\t\t\t\tMessage message = new Message(mc.getContent(), mc.getCharacterSet());\n+\t\t\t\tthreadContext.put(getStoreEmailInSessionKey(), message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f630c849f891da44f2e4e21c135fd7cffaf768"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODEyNDA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo0MzozOFrOHpzlUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo0MzozOFrOHpzlUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU5ODgwMQ==", "bodyText": "warning moet gaan over dat het niet meer nodig is om result in session te bewaren, want resultaat van sender mag nu ook stream zijn", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513598801", "createdAt": "2020-10-28T16:43:38Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -734,33 +730,39 @@ public boolean isIgnoreRedirects() {\n \t\treturn ignoreRedirects;\n \t}\n \n-\tpublic String getStreamResultToFileNameSessionKey() {\n-\t\treturn streamResultToFileNameSessionKey;\n-\t}\n-\n \t@IbisDoc({\"if set, the result is streamed to a file (instead of passed as a string)\", \"\"})\n+\t@Deprecated\n+\t@ConfigurationWarning(\"remove this attribute and use a LocalFileSystemPipe as next pipe to save the contents as a file\")\n \tpublic void setStreamResultToFileNameSessionKey(String string) {\n \t\tstreamResultToFileNameSessionKey = string;\n \t}\n-\n-\tpublic String getStoreResultAsStreamInSessionKey() {\n-\t\treturn storeResultAsStreamInSessionKey;\n+\tpublic String getStreamResultToFileNameSessionKey() {\n+\t\treturn streamResultToFileNameSessionKey;\n \t}\n \n \t@IbisDoc({\"if set, a pointer to an input stream of the result is put in the specified sessionkey (as the sender interface only allows a sender to return a string a sessionkey is used instead to return the stream)\", \"\"})\n+\t@Deprecated\n+\t@ConfigurationWarning(\"use storeResultInSessionKey on the MessageSendingPipe instead\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db45c347ef2c7c8904ffde15d34c4e1cf13148a6"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODEyODgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo0NDozNlrOHpzoPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo0NDozNlrOHpzoPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU5OTU1MQ==", "bodyText": "Ook hier zeggen dat bewaren in sessionKey niet meer nodig is.", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513599551", "createdAt": "2020-10-28T16:44:36Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/http/HttpSender.java", "diffHunk": "@@ -734,33 +730,39 @@ public boolean isIgnoreRedirects() {\n \t\treturn ignoreRedirects;\n \t}\n \n-\tpublic String getStreamResultToFileNameSessionKey() {\n-\t\treturn streamResultToFileNameSessionKey;\n-\t}\n-\n \t@IbisDoc({\"if set, the result is streamed to a file (instead of passed as a string)\", \"\"})\n+\t@Deprecated\n+\t@ConfigurationWarning(\"remove this attribute and use a LocalFileSystemPipe as next pipe to save the contents as a file\")\n \tpublic void setStreamResultToFileNameSessionKey(String string) {\n \t\tstreamResultToFileNameSessionKey = string;\n \t}\n-\n-\tpublic String getStoreResultAsStreamInSessionKey() {\n-\t\treturn storeResultAsStreamInSessionKey;\n+\tpublic String getStreamResultToFileNameSessionKey() {\n+\t\treturn streamResultToFileNameSessionKey;\n \t}\n \n \t@IbisDoc({\"if set, a pointer to an input stream of the result is put in the specified sessionkey (as the sender interface only allows a sender to return a string a sessionkey is used instead to return the stream)\", \"\"})\n+\t@Deprecated\n+\t@ConfigurationWarning(\"use storeResultInSessionKey on the MessageSendingPipe instead\")\n \tpublic void setStoreResultAsStreamInSessionKey(String storeResultAsStreamInSessionKey) {\n \t\tthis.storeResultAsStreamInSessionKey = storeResultAsStreamInSessionKey;\n \t}\n-\n-\tpublic String getStoreResultAsByteArrayInSessionKey() {\n-\t\treturn storeResultAsByteArrayInSessionKey;\n+\tpublic String getStoreResultAsStreamInSessionKey() {\n+\t\treturn storeResultAsStreamInSessionKey;\n \t}\n+\n+\t@Deprecated\n+\t@ConfigurationWarning(\"use storeResultInSessionKey on the MessageSendingPipe instead\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db45c347ef2c7c8904ffde15d34c4e1cf13148a6"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODE2NDQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/parameters/Parameter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo1MjoyMlrOHpz-aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo1MjoyMlrOHpz-aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYwNTIyNw==", "bodyText": "Maar toch is dit niet helemaal jofel, want op regel 427/429 en 438/440 kunnen nog transformaties gedaan worden, die je zou willen doen met message.getSource(),", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513605227", "createdAt": "2020-10-28T16:52:22Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/parameters/Parameter.java", "diffHunk": "@@ -377,7 +377,7 @@ public Object getValue(ParameterValueList alreadyResolvedParameters, Message mes\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tif (result !=null && result instanceof Message && ((Message)result).asObject() instanceof String) {\n+\t\tif (result !=null && result instanceof Message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db45c347ef2c7c8904ffde15d34c4e1cf13148a6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODE3NTM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/processors/CheckMessageSizePipeProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo1NDo0M1rOHp0FdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo1NDo0M1rOHp0FdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYwNzAyOQ==", "bodyText": "Is het niet een beetje overdreven om op elke Pipe telkens zowel request als response te checken?", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513607029", "createdAt": "2020-10-28T16:54:43Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/processors/CheckMessageSizePipeProcessor.java", "diffHunk": "@@ -30,19 +30,32 @@\n  * @author Jaco de Groot\n  */\n public class CheckMessageSizePipeProcessor extends PipeProcessorBase {\n-\t\n+\n \t@Override\n \tpublic PipeRunResult processPipe(PipeLine pipeLine, IPipe pipe, Message message, IPipeLineSession pipeLineSession ) throws PipeRunException {\n-\t\tcheckMessageSize(message, pipeLine, pipe, true);\n+\t\tcheckMessageSize(getMessageLength(message), pipeLine, pipe, true);\n \t\tPipeRunResult pipeRunResult = pipeProcessor.processPipe(pipeLine, pipe, message, pipeLineSession);\n+\n \t\tMessage result = pipeRunResult.getResult();\n-\t\tcheckMessageSize(result.asObject(), pipeLine, pipe, false);\n+\t\tcheckMessageSize(result.size(), pipeLine, pipe, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db45c347ef2c7c8904ffde15d34c4e1cf13148a6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODE4Mjg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/processors/CheckMessageSizePipeProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo1NjowOVrOHp0KBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo1NjowOVrOHp0KBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYwODE5OA==", "bodyText": "Als je de check op het request wilt handhaven, dan kan je daar ook message.size() gebruiken", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513608198", "createdAt": "2020-10-28T16:56:09Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/processors/CheckMessageSizePipeProcessor.java", "diffHunk": "@@ -30,19 +30,32 @@\n  * @author Jaco de Groot\n  */\n public class CheckMessageSizePipeProcessor extends PipeProcessorBase {\n-\t\n+\n \t@Override\n \tpublic PipeRunResult processPipe(PipeLine pipeLine, IPipe pipe, Message message, IPipeLineSession pipeLineSession ) throws PipeRunException {\n-\t\tcheckMessageSize(message, pipeLine, pipe, true);\n+\t\tcheckMessageSize(getMessageLength(message), pipeLine, pipe, true);\n \t\tPipeRunResult pipeRunResult = pipeProcessor.processPipe(pipeLine, pipe, message, pipeLineSession);\n+\n \t\tMessage result = pipeRunResult.getResult();\n-\t\tcheckMessageSize(result.asObject(), pipeLine, pipe, false);\n+\t\tcheckMessageSize(result.size(), pipeLine, pipe, false);\n \t\treturn pipeRunResult;\n \t}\n \n-\tprivate void checkMessageSize(Object message, PipeLine pipeLine, IPipe pipe, boolean input) {\n-\t\tif (message!=null && message instanceof String) {\n-\t\t\tint messageLength = message.toString().length();\n+\tprivate long getMessageLength(Object message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db45c347ef2c7c8904ffde15d34c4e1cf13148a6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODIwMTI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/receivers/ExchangeMailListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzowMDowN1rOHp0Vrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzowMDowN1rOHp0Vrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxMTE4Mg==", "bodyText": "Deze functionaliteit is helemaal niet nodig. Als je meteen al over de email wil beschikken, dan kan je gewoon messageType op 'contents' zetten. Dat moet dan ook in de deprecated-warnings staan, en deze nieuwe optie moet weg.", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513611182", "createdAt": "2020-10-28T17:00:07Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/receivers/ExchangeMailListener.java", "diffHunk": "@@ -329,12 +344,21 @@ public boolean isSimple() {\n \t\treturn simple;\n \t}\n \n+\t@Deprecated\n+\t@ConfigurationWarning(\"use storeResultInSessionKey instead\")\n \tpublic void setStoreEmailAsStreamInSessionKey(String string) {\n \t\tstoreEmailAsStreamInSessionKey = string;\n \t}\n \tpublic String getStoreEmailAsStreamInSessionKey() {\n \t\treturn storeEmailAsStreamInSessionKey;\n \t}\n \n+\tpublic void setStoreEmailInSessionKey(String string) {\n+\t\tstoreEmailInSessionKey = string;\n+\t}\n+\tpublic String getStoreEmailInSessionKey() {\n+\t\treturn storeEmailInSessionKey;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db45c347ef2c7c8904ffde15d34c4e1cf13148a6"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODIwNDAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/stream/Message.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNzowMDo0N1rOHp0XhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODo0NDoyOVrOHqRj2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxMTY1Mw==", "bodyText": "Is dit dan niet 0? -1 betekent \"ik weet het niet\"", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r513611653", "createdAt": "2020-10-28T17:00:47Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/stream/Message.java", "diffHunk": "@@ -414,4 +414,37 @@ private void readObject(ObjectInputStream stream) throws IOException, ClassNotFo\n \t\tstream.defaultReadObject();\n \t}\n \n+\t/**\n+\t * @return Message size or -1 if it can't determine the size.\n+\t */\n+\tpublic long size() {\n+\t\tif(request == null) {\n+\t\t\treturn -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db45c347ef2c7c8904ffde15d34c4e1cf13148a6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA4OTk0NA==", "bodyText": "Ja potverdorie je hebt helemaal gelijk", "url": "https://github.com/ibissource/iaf/pull/1208#discussion_r514089944", "createdAt": "2020-10-29T08:44:29Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/stream/Message.java", "diffHunk": "@@ -414,4 +414,37 @@ private void readObject(ObjectInputStream stream) throws IOException, ClassNotFo\n \t\tstream.defaultReadObject();\n \t}\n \n+\t/**\n+\t * @return Message size or -1 if it can't determine the size.\n+\t */\n+\tpublic long size() {\n+\t\tif(request == null) {\n+\t\t\treturn -1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxMTY1Mw=="}, "originalCommit": {"oid": "db45c347ef2c7c8904ffde15d34c4e1cf13148a6"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 603, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}