{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzOTc0ODQ1", "number": 981, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzoyNDo1NVrOEe5u2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzoyOTowNVrOEg78nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODM4NjE2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzoyNDo1NVrOHK2IOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzoyNDo1NVrOHK2IOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEzNDY0OQ==", "bodyText": "Instead of giving exact values, perhaps you can use\n ... == 0, ... < 0 and ... > 0 instead.", "url": "https://github.com/ibissource/iaf/pull/981#discussion_r481134649", "createdAt": "2020-09-01T13:24:55Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * FileNameComparator Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FileNameComparatorTest {\n+\n+\n+\t@Test\n+\tpublic void testComparator() throws Exception {\n+\t\tList<File> list = new ArrayList<>();\n+\t\tlist.add(new File(\"test.txt\"));list.add(new File( \"teSt.txt\"));\n+\t\tlist.add(new File(\"0123.py\")); list.add(new File(\"test.xml\")); list.add(new File(\"document.txt\"));\n+\t\tCollections.sort(list, new FileNameComparator());\n+\t\tassertEquals(\"0123.py\", list.get(0).getName());\n+\t\tassertEquals(\"document.txt\", list.get(1).getName());\n+\t\tassertEquals(\"teSt.txt\", list.get(2).getName());\n+\t\tassertEquals(\"test.txt\", list.get(3).getName());\n+\t\tassertEquals(\"test.xml\", list.get(4).getName());\n+\n+\t}\n+\n+\t/**\n+\t * Method: getNextIndex(String s, int start, boolean numericPart)\n+\t */\n+\t@Test\n+\tpublic void testGetNextIndex() throws Exception {\n+\t\tint i = FileNameComparator.getNextIndex(\"test.txt\", 0, true);\n+\t\tint j = FileNameComparator.getNextIndex(\"test.txt\", 0, false);\n+\t\tassertEquals(0, i);\n+\t\tassertEquals(8, j);\n+\t}\n+\n+\t/**\n+\t * Method: skipWhitespace(String s, int start)\n+\t */\n+\t@Test\n+\tpublic void testSkipWhitespace() throws Exception {\n+\t\tint i = FileNameComparator.skipWhitespace(\"   file.txt\", 0);\n+\t\tassertEquals(3, i);\n+\n+\t}\n+\n+\t/**\n+\t * Method: compareStringsNaturalOrder(String s0, String s1, boolean caseSensitive)\n+\t */\n+\t@Test\n+\tpublic void testCompareStringsNaturalOrder() throws Exception {\n+\t\tString s1 = \"file1.txt\";\n+\t\tString s2 = \"File2.txt\";\n+\t\tString s3 = \"file1.txt\";\n+\t\tString s4 = \"File2.txt\";\n+\t\tint a = FileNameComparator.compareStringsNaturalOrder(s1, s2, true);\n+\t\tint b = FileNameComparator.compareStringsNaturalOrder(s1, s3, true);\n+\t\tint c = FileNameComparator.compareStringsNaturalOrder(s2, s3, true);\n+\t\tint d = FileNameComparator.compareStringsNaturalOrder(s2, s4, true);\n+\t\tassertEquals(32, a);\n+\t\tassertEquals(0, b);\n+\t\tassertEquals(-32, c);\n+\t\tassertEquals(0, d);\n+\t}\n+\n+\t/**\n+\t * Method: compareFilenames(File f0, File f1)\n+\t */\n+\t@Test\n+\tpublic void testCompareFilenames() throws Exception {\n+\t\tFile f1 = new File(\"first.txt\");\n+\t\tFile f2 = new File(\"second.txt\");\n+\t\tFile f3 = new File(\"first.txt\");\n+\t\tFile f4 = new File(\"FiRst.txt\");\n+\t\tint i = FileNameComparator.compareFilenames(f1, f2);\n+\t\tint j = FileNameComparator.compareFilenames(f1, f3);\n+\t\tint k = FileNameComparator.compareFilenames(f1, f4);\n+\t\tint l = FileNameComparator.compareFilenames(f2, f1);\n+\t\tassertEquals(-13, i);\n+\t\tassertEquals(0, j);\n+\t\tassertEquals(32, k);\n+\t\tassertEquals(13, l);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "459bac46fe0b97ae3d1dbf1bdfa1c6627f5616a4"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODQwNDY2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzoyOToyMlrOHK2T1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzoyOToyMlrOHK2T1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEzNzYyMw==", "bodyText": "This test looks a lot like the test underneath, perhaps here you can test the 3rd argument of the compareStringsNaturalOrder method instead (case sensitivity)", "url": "https://github.com/ibissource/iaf/pull/981#discussion_r481137623", "createdAt": "2020-09-01T13:29:22Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * FileNameComparator Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FileNameComparatorTest {\n+\n+\n+\t@Test\n+\tpublic void testComparator() throws Exception {\n+\t\tList<File> list = new ArrayList<>();\n+\t\tlist.add(new File(\"test.txt\"));list.add(new File( \"teSt.txt\"));\n+\t\tlist.add(new File(\"0123.py\")); list.add(new File(\"test.xml\")); list.add(new File(\"document.txt\"));\n+\t\tCollections.sort(list, new FileNameComparator());\n+\t\tassertEquals(\"0123.py\", list.get(0).getName());\n+\t\tassertEquals(\"document.txt\", list.get(1).getName());\n+\t\tassertEquals(\"teSt.txt\", list.get(2).getName());\n+\t\tassertEquals(\"test.txt\", list.get(3).getName());\n+\t\tassertEquals(\"test.xml\", list.get(4).getName());\n+\n+\t}\n+\n+\t/**\n+\t * Method: getNextIndex(String s, int start, boolean numericPart)\n+\t */\n+\t@Test\n+\tpublic void testGetNextIndex() throws Exception {\n+\t\tint i = FileNameComparator.getNextIndex(\"test.txt\", 0, true);\n+\t\tint j = FileNameComparator.getNextIndex(\"test.txt\", 0, false);\n+\t\tassertEquals(0, i);\n+\t\tassertEquals(8, j);\n+\t}\n+\n+\t/**\n+\t * Method: skipWhitespace(String s, int start)\n+\t */\n+\t@Test\n+\tpublic void testSkipWhitespace() throws Exception {\n+\t\tint i = FileNameComparator.skipWhitespace(\"   file.txt\", 0);\n+\t\tassertEquals(3, i);\n+\n+\t}\n+\n+\t/**\n+\t * Method: compareStringsNaturalOrder(String s0, String s1, boolean caseSensitive)\n+\t */\n+\t@Test\n+\tpublic void testCompareStringsNaturalOrder() throws Exception {\n+\t\tString s1 = \"file1.txt\";\n+\t\tString s2 = \"File2.txt\";\n+\t\tString s3 = \"file1.txt\";\n+\t\tString s4 = \"File2.txt\";\n+\t\tint a = FileNameComparator.compareStringsNaturalOrder(s1, s2, true);\n+\t\tint b = FileNameComparator.compareStringsNaturalOrder(s1, s3, true);\n+\t\tint c = FileNameComparator.compareStringsNaturalOrder(s2, s3, true);\n+\t\tint d = FileNameComparator.compareStringsNaturalOrder(s2, s4, true);\n+\t\tassertEquals(32, a);\n+\t\tassertEquals(0, b);\n+\t\tassertEquals(-32, c);\n+\t\tassertEquals(0, d);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "459bac46fe0b97ae3d1dbf1bdfa1c6627f5616a4"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODQ0MDk5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzozNzoxN1rOHK2pvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzozNzoxN1rOHK2pvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0MzIyOQ==", "bodyText": "This is an edge case. In a filesystem it's not possible to have 2 files with the same name. Use test.txt twice theoretically cannot happen. Also don't test for an exact integer, but rather something equal, higher or lower then 0.", "url": "https://github.com/ibissource/iaf/pull/981#discussion_r481143229", "createdAt": "2020-09-01T13:37:17Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * FileNameComparator Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FileNameComparatorTest {\n+\n+\n+\t@Test\n+\tpublic void testComparator() throws Exception {\n+\t\tList<File> list = new ArrayList<>();\n+\t\tlist.add(new File(\"test.txt\"));list.add(new File( \"teSt.txt\"));\n+\t\tlist.add(new File(\"0123.py\")); list.add(new File(\"test.xml\")); list.add(new File(\"document.txt\"));\n+\t\tCollections.sort(list, new FileNameComparator());\n+\t\tassertEquals(\"0123.py\", list.get(0).getName());\n+\t\tassertEquals(\"document.txt\", list.get(1).getName());\n+\t\tassertEquals(\"teSt.txt\", list.get(2).getName());\n+\t\tassertEquals(\"test.txt\", list.get(3).getName());\n+\t\tassertEquals(\"test.xml\", list.get(4).getName());\n+\n+\t}\n+\n+\t/**\n+\t * Method: getNextIndex(String s, int start, boolean numericPart)\n+\t */\n+\t@Test\n+\tpublic void testGetNextIndex() throws Exception {\n+\t\tint i = FileNameComparator.getNextIndex(\"test.txt\", 0, true);\n+\t\tint j = FileNameComparator.getNextIndex(\"test.txt\", 0, false);\n+\t\tassertEquals(0, i);\n+\t\tassertEquals(8, j);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "459bac46fe0b97ae3d1dbf1bdfa1c6627f5616a4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTcxNTYzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzoyNzozOFrOHN_Xbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMDowMDowN1rOHPsTwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMTcyNw==", "bodyText": "Please put each of these test on a single line, like:\nassertTrue(FileNameComparator.compareFilenames(f1, f2) < 0);\n\n(also for other similar cases)", "url": "https://github.com/ibissource/iaf/pull/981#discussion_r484431727", "createdAt": "2020-09-07T13:27:38Z", "author": {"login": "gvanbrakel"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * FileNameComparator Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FileNameComparatorTest {\n+\n+\n+\t@Test\n+\tpublic void testComparator() throws Exception {\n+\t\tList<File> list = new ArrayList<>();\n+\t\tlist.add(new File(\"test.txt\"));list.add(new File( \"teSt.txt\"));\n+\t\tlist.add(new File(\"0123.py\")); list.add(new File(\"test.xml\")); list.add(new File(\"document.txt\"));\n+\t\tCollections.sort(list, new FileNameComparator());\n+\t\tassertEquals(\"0123.py\", list.get(0).getName());\n+\t\tassertEquals(\"document.txt\", list.get(1).getName());\n+\t\tassertEquals(\"teSt.txt\", list.get(2).getName());\n+\t\tassertEquals(\"test.txt\", list.get(3).getName());\n+\t\tassertEquals(\"test.xml\", list.get(4).getName());\n+\n+\t}\n+\n+\t/**\n+\t * Method: skipWhitespace(String s, int start)\n+\t */\n+\t@Test\n+\tpublic void testSkipWhitespace() throws Exception {\n+\t\tint i = FileNameComparator.skipWhitespace(\"   file.txt\", 0);\n+\t\tassertEquals(3, i);\n+\t}\n+\n+\t/**\n+\t * Method: compareStringsNaturalOrder(String s0, String s1, boolean caseSensitive)\n+\t */\n+\t@Test\n+\tpublic void testCompareStringsNaturalOrder() throws Exception {\n+\t\tString s1 = \"file1.txt\";\n+\t\tString s2 = \"File2.txt\";\n+\t\tString s4 = \"file2.txt\";\n+\t\tint a = FileNameComparator.compareStringsNaturalOrder(s1, s2, true);\n+\t\tint d = FileNameComparator.compareStringsNaturalOrder(s2, s4, false);\n+\t\tassertTrue(a > 0);\n+\t\tassertTrue(d == 0);\n+\t}\n+\n+\t/**\n+\t * Method: compareFilenames(File f0, File f1)\n+\t */\n+\t@Test\n+\tpublic void testCompareFilenames() throws Exception {\n+\t\tFile f1 = new File(\"first.txt\");\n+\t\tFile f2 = new File(\"second.txt\");\n+\t\tFile f3 = new File(\"first.txt\");\n+\t\tFile f4 = new File(\"FiRst.txt\");\n+\t\tint i = FileNameComparator.compareFilenames(f1, f2);\n+\t\tint j = FileNameComparator.compareFilenames(f1, f3);\n+\t\tint k = FileNameComparator.compareFilenames(f1, f4);\n+\t\tint l = FileNameComparator.compareFilenames(f2, f1);\n+\t\tassertTrue(i < 0);\n+\t\tassertTrue(j == 0);\n+\t\tassertTrue(k > 0);\n+\t\tassertTrue(l > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7defce1a7751e1e0f23b38c9442ed1092b423600"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIxNjY0MQ==", "bodyText": "thank you, changing right now!", "url": "https://github.com/ibissource/iaf/pull/981#discussion_r486216641", "createdAt": "2020-09-10T10:00:07Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * FileNameComparator Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FileNameComparatorTest {\n+\n+\n+\t@Test\n+\tpublic void testComparator() throws Exception {\n+\t\tList<File> list = new ArrayList<>();\n+\t\tlist.add(new File(\"test.txt\"));list.add(new File( \"teSt.txt\"));\n+\t\tlist.add(new File(\"0123.py\")); list.add(new File(\"test.xml\")); list.add(new File(\"document.txt\"));\n+\t\tCollections.sort(list, new FileNameComparator());\n+\t\tassertEquals(\"0123.py\", list.get(0).getName());\n+\t\tassertEquals(\"document.txt\", list.get(1).getName());\n+\t\tassertEquals(\"teSt.txt\", list.get(2).getName());\n+\t\tassertEquals(\"test.txt\", list.get(3).getName());\n+\t\tassertEquals(\"test.xml\", list.get(4).getName());\n+\n+\t}\n+\n+\t/**\n+\t * Method: skipWhitespace(String s, int start)\n+\t */\n+\t@Test\n+\tpublic void testSkipWhitespace() throws Exception {\n+\t\tint i = FileNameComparator.skipWhitespace(\"   file.txt\", 0);\n+\t\tassertEquals(3, i);\n+\t}\n+\n+\t/**\n+\t * Method: compareStringsNaturalOrder(String s0, String s1, boolean caseSensitive)\n+\t */\n+\t@Test\n+\tpublic void testCompareStringsNaturalOrder() throws Exception {\n+\t\tString s1 = \"file1.txt\";\n+\t\tString s2 = \"File2.txt\";\n+\t\tString s4 = \"file2.txt\";\n+\t\tint a = FileNameComparator.compareStringsNaturalOrder(s1, s2, true);\n+\t\tint d = FileNameComparator.compareStringsNaturalOrder(s2, s4, false);\n+\t\tassertTrue(a > 0);\n+\t\tassertTrue(d == 0);\n+\t}\n+\n+\t/**\n+\t * Method: compareFilenames(File f0, File f1)\n+\t */\n+\t@Test\n+\tpublic void testCompareFilenames() throws Exception {\n+\t\tFile f1 = new File(\"first.txt\");\n+\t\tFile f2 = new File(\"second.txt\");\n+\t\tFile f3 = new File(\"first.txt\");\n+\t\tFile f4 = new File(\"FiRst.txt\");\n+\t\tint i = FileNameComparator.compareFilenames(f1, f2);\n+\t\tint j = FileNameComparator.compareFilenames(f1, f3);\n+\t\tint k = FileNameComparator.compareFilenames(f1, f4);\n+\t\tint l = FileNameComparator.compareFilenames(f2, f1);\n+\t\tassertTrue(i < 0);\n+\t\tassertTrue(j == 0);\n+\t\tassertTrue(k > 0);\n+\t\tassertTrue(l > 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMTcyNw=="}, "originalCommit": {"oid": "7defce1a7751e1e0f23b38c9442ed1092b423600"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTcyMDYzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzoyOTowNVrOHN_aUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMDo1NjowMVrOHPuJfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMjQ2NQ==", "bodyText": "Can you also add test for file names that end with a number? ibis_xml.log.1  ibis_xml.log.2 etc\nthose should also be sorted properly.\nAlso the ibis-stats_2020W31.log files?", "url": "https://github.com/ibissource/iaf/pull/981#discussion_r484432465", "createdAt": "2020-09-07T13:29:05Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * FileNameComparator Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FileNameComparatorTest {\n+\n+\n+\t@Test\n+\tpublic void testComparator() throws Exception {\n+\t\tList<File> list = new ArrayList<>();\n+\t\tlist.add(new File(\"test.txt\"));list.add(new File( \"teSt.txt\"));\n+\t\tlist.add(new File(\"0123.py\")); list.add(new File(\"test.xml\")); list.add(new File(\"document.txt\"));\n+\t\tCollections.sort(list, new FileNameComparator());\n+\t\tassertEquals(\"0123.py\", list.get(0).getName());\n+\t\tassertEquals(\"document.txt\", list.get(1).getName());\n+\t\tassertEquals(\"teSt.txt\", list.get(2).getName());\n+\t\tassertEquals(\"test.txt\", list.get(3).getName());\n+\t\tassertEquals(\"test.xml\", list.get(4).getName());\n+\n+\t}\n+\n+\t/**\n+\t * Method: skipWhitespace(String s, int start)\n+\t */\n+\t@Test\n+\tpublic void testSkipWhitespace() throws Exception {\n+\t\tint i = FileNameComparator.skipWhitespace(\"   file.txt\", 0);\n+\t\tassertEquals(3, i);\n+\t}\n+\n+\t/**\n+\t * Method: compareStringsNaturalOrder(String s0, String s1, boolean caseSensitive)\n+\t */\n+\t@Test\n+\tpublic void testCompareStringsNaturalOrder() throws Exception {\n+\t\tString s1 = \"file1.txt\";\n+\t\tString s2 = \"File2.txt\";\n+\t\tString s4 = \"file2.txt\";\n+\t\tint a = FileNameComparator.compareStringsNaturalOrder(s1, s2, true);\n+\t\tint d = FileNameComparator.compareStringsNaturalOrder(s2, s4, false);\n+\t\tassertTrue(a > 0);\n+\t\tassertTrue(d == 0);\n+\t}\n+\n+\t/**\n+\t * Method: compareFilenames(File f0, File f1)\n+\t */\n+\t@Test\n+\tpublic void testCompareFilenames() throws Exception {\n+\t\tFile f1 = new File(\"first.txt\");\n+\t\tFile f2 = new File(\"second.txt\");\n+\t\tFile f3 = new File(\"first.txt\");\n+\t\tFile f4 = new File(\"FiRst.txt\");\n+\t\tint i = FileNameComparator.compareFilenames(f1, f2);\n+\t\tint j = FileNameComparator.compareFilenames(f1, f3);\n+\t\tint k = FileNameComparator.compareFilenames(f1, f4);\n+\t\tint l = FileNameComparator.compareFilenames(f2, f1);\n+\t\tassertTrue(i < 0);\n+\t\tassertTrue(j == 0);\n+\t\tassertTrue(k > 0);\n+\t\tassertTrue(l > 0);\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7defce1a7751e1e0f23b38c9442ed1092b423600"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMjgxNQ==", "bodyText": "And also compare filename4.txt to filename13.txt", "url": "https://github.com/ibissource/iaf/pull/981#discussion_r484432815", "createdAt": "2020-09-07T13:29:39Z", "author": {"login": "gvanbrakel"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * FileNameComparator Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FileNameComparatorTest {\n+\n+\n+\t@Test\n+\tpublic void testComparator() throws Exception {\n+\t\tList<File> list = new ArrayList<>();\n+\t\tlist.add(new File(\"test.txt\"));list.add(new File( \"teSt.txt\"));\n+\t\tlist.add(new File(\"0123.py\")); list.add(new File(\"test.xml\")); list.add(new File(\"document.txt\"));\n+\t\tCollections.sort(list, new FileNameComparator());\n+\t\tassertEquals(\"0123.py\", list.get(0).getName());\n+\t\tassertEquals(\"document.txt\", list.get(1).getName());\n+\t\tassertEquals(\"teSt.txt\", list.get(2).getName());\n+\t\tassertEquals(\"test.txt\", list.get(3).getName());\n+\t\tassertEquals(\"test.xml\", list.get(4).getName());\n+\n+\t}\n+\n+\t/**\n+\t * Method: skipWhitespace(String s, int start)\n+\t */\n+\t@Test\n+\tpublic void testSkipWhitespace() throws Exception {\n+\t\tint i = FileNameComparator.skipWhitespace(\"   file.txt\", 0);\n+\t\tassertEquals(3, i);\n+\t}\n+\n+\t/**\n+\t * Method: compareStringsNaturalOrder(String s0, String s1, boolean caseSensitive)\n+\t */\n+\t@Test\n+\tpublic void testCompareStringsNaturalOrder() throws Exception {\n+\t\tString s1 = \"file1.txt\";\n+\t\tString s2 = \"File2.txt\";\n+\t\tString s4 = \"file2.txt\";\n+\t\tint a = FileNameComparator.compareStringsNaturalOrder(s1, s2, true);\n+\t\tint d = FileNameComparator.compareStringsNaturalOrder(s2, s4, false);\n+\t\tassertTrue(a > 0);\n+\t\tassertTrue(d == 0);\n+\t}\n+\n+\t/**\n+\t * Method: compareFilenames(File f0, File f1)\n+\t */\n+\t@Test\n+\tpublic void testCompareFilenames() throws Exception {\n+\t\tFile f1 = new File(\"first.txt\");\n+\t\tFile f2 = new File(\"second.txt\");\n+\t\tFile f3 = new File(\"first.txt\");\n+\t\tFile f4 = new File(\"FiRst.txt\");\n+\t\tint i = FileNameComparator.compareFilenames(f1, f2);\n+\t\tint j = FileNameComparator.compareFilenames(f1, f3);\n+\t\tint k = FileNameComparator.compareFilenames(f1, f4);\n+\t\tint l = FileNameComparator.compareFilenames(f2, f1);\n+\t\tassertTrue(i < 0);\n+\t\tassertTrue(j == 0);\n+\t\tassertTrue(k > 0);\n+\t\tassertTrue(l > 0);\n+\t}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMjQ2NQ=="}, "originalCommit": {"oid": "7defce1a7751e1e0f23b38c9442ed1092b423600"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI0Njc4MQ==", "bodyText": "Added both, adding some more interesting cases as well.", "url": "https://github.com/ibissource/iaf/pull/981#discussion_r486246781", "createdAt": "2020-09-10T10:56:01Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FileNameComparatorTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * FileNameComparator Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FileNameComparatorTest {\n+\n+\n+\t@Test\n+\tpublic void testComparator() throws Exception {\n+\t\tList<File> list = new ArrayList<>();\n+\t\tlist.add(new File(\"test.txt\"));list.add(new File( \"teSt.txt\"));\n+\t\tlist.add(new File(\"0123.py\")); list.add(new File(\"test.xml\")); list.add(new File(\"document.txt\"));\n+\t\tCollections.sort(list, new FileNameComparator());\n+\t\tassertEquals(\"0123.py\", list.get(0).getName());\n+\t\tassertEquals(\"document.txt\", list.get(1).getName());\n+\t\tassertEquals(\"teSt.txt\", list.get(2).getName());\n+\t\tassertEquals(\"test.txt\", list.get(3).getName());\n+\t\tassertEquals(\"test.xml\", list.get(4).getName());\n+\n+\t}\n+\n+\t/**\n+\t * Method: skipWhitespace(String s, int start)\n+\t */\n+\t@Test\n+\tpublic void testSkipWhitespace() throws Exception {\n+\t\tint i = FileNameComparator.skipWhitespace(\"   file.txt\", 0);\n+\t\tassertEquals(3, i);\n+\t}\n+\n+\t/**\n+\t * Method: compareStringsNaturalOrder(String s0, String s1, boolean caseSensitive)\n+\t */\n+\t@Test\n+\tpublic void testCompareStringsNaturalOrder() throws Exception {\n+\t\tString s1 = \"file1.txt\";\n+\t\tString s2 = \"File2.txt\";\n+\t\tString s4 = \"file2.txt\";\n+\t\tint a = FileNameComparator.compareStringsNaturalOrder(s1, s2, true);\n+\t\tint d = FileNameComparator.compareStringsNaturalOrder(s2, s4, false);\n+\t\tassertTrue(a > 0);\n+\t\tassertTrue(d == 0);\n+\t}\n+\n+\t/**\n+\t * Method: compareFilenames(File f0, File f1)\n+\t */\n+\t@Test\n+\tpublic void testCompareFilenames() throws Exception {\n+\t\tFile f1 = new File(\"first.txt\");\n+\t\tFile f2 = new File(\"second.txt\");\n+\t\tFile f3 = new File(\"first.txt\");\n+\t\tFile f4 = new File(\"FiRst.txt\");\n+\t\tint i = FileNameComparator.compareFilenames(f1, f2);\n+\t\tint j = FileNameComparator.compareFilenames(f1, f3);\n+\t\tint k = FileNameComparator.compareFilenames(f1, f4);\n+\t\tint l = FileNameComparator.compareFilenames(f2, f1);\n+\t\tassertTrue(i < 0);\n+\t\tassertTrue(j == 0);\n+\t\tassertTrue(k > 0);\n+\t\tassertTrue(l > 0);\n+\t}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMjQ2NQ=="}, "originalCommit": {"oid": "7defce1a7751e1e0f23b38c9442ed1092b423600"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 313, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}