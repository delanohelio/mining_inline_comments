{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NDM0Njc4", "number": 914, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDo0ODoyMFrOEMHNlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzoyOToxM1rOEMfQWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTM2NTM1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/webcontrol/api/ServerStatisticsTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDo0ODoyMFrOGuCKuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzoyNjowMFrOGun8AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkyMzE5Mw==", "bodyText": "Wil je hier niet wat meer testen? Als in asserten wat er allemaal in de response zit?", "url": "https://github.com/ibissource/iaf/pull/914#discussion_r450923193", "createdAt": "2020-07-07T14:48:20Z", "author": {"login": "gvanbrakel"}, "path": "core/src/test/java/nl/nn/adapterframework/webcontrol/api/ServerStatisticsTest.java", "diffHunk": "@@ -37,6 +46,7 @@ public void testServerInfo() {\n \t\tassertEquals(MediaType.APPLICATION_JSON, response.getMediaType().toString());\n \n \t\t//TODO: validate response.getEntity()\n+\t\tassertNotNull(response.getEntity());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfbdd4f30362ceeaec302809f6eb3878f907ee97"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MjA3Mg==", "bodyText": "Tja het is erg lastig.. ik zou alleen de json 'keys' kunnen testen, aangezien de values mijn computernaam, jvm geheugen, etc bevatten", "url": "https://github.com/ibissource/iaf/pull/914#discussion_r451442072", "createdAt": "2020-07-08T10:28:24Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/webcontrol/api/ServerStatisticsTest.java", "diffHunk": "@@ -37,6 +46,7 @@ public void testServerInfo() {\n \t\tassertEquals(MediaType.APPLICATION_JSON, response.getMediaType().toString());\n \n \t\t//TODO: validate response.getEntity()\n+\t\tassertNotNull(response.getEntity());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkyMzE5Mw=="}, "originalCommit": {"oid": "bfbdd4f30362ceeaec302809f6eb3878f907ee97"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0MjAxNw==", "bodyText": "Maar je zou wel kunnen testen dat bepaalde keys er in zitten, zonder op de waarde zelf te testen", "url": "https://github.com/ibissource/iaf/pull/914#discussion_r451542017", "createdAt": "2020-07-08T13:26:00Z", "author": {"login": "gvanbrakel"}, "path": "core/src/test/java/nl/nn/adapterframework/webcontrol/api/ServerStatisticsTest.java", "diffHunk": "@@ -37,6 +46,7 @@ public void testServerInfo() {\n \t\tassertEquals(MediaType.APPLICATION_JSON, response.getMediaType().toString());\n \n \t\t//TODO: validate response.getEntity()\n+\t\tassertNotNull(response.getEntity());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkyMzE5Mw=="}, "originalCommit": {"oid": "bfbdd4f30362ceeaec302809f6eb3878f907ee97"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTM5NjA5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/webcontrol/api/ApiTestBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDo1NDo1N1rOGuCeVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDo1NDo1N1rOGuCeVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkyODIxMw==", "bodyText": "Dit is een key method, waarvan niet direct duidelijk is dat dat zo is.\nHet zou prettig zijn als er javadoc was die vertelt wat hij doet, en er op strategische punten in de code vertelt wordt hoe het daar gedaan wordt.", "url": "https://github.com/ibissource/iaf/pull/914#discussion_r450928213", "createdAt": "2020-07-07T14:54:57Z", "author": {"login": "gvanbrakel"}, "path": "core/src/test/java/nl/nn/adapterframework/webcontrol/api/ApiTestBase.java", "diffHunk": "@@ -117,43 +123,205 @@ public void register(M jaxRsResource) {\n \n \t\t//Uppercase method, make sure url begins with a /\n \t\tpublic String compileKey(String method, String path) {\n-\t\t\tString url = path; //May contain QueryParameters\n+\t\t\tString url = getRawUrl(path); //May contain QueryParameters\n+\n+\t\t\treturn String.format(\"%S:%s\", method, url);\n+\t\t}\n+\n+\t\tprivate String getRawUrl(String path) { //String QueryParams off path\n+\t\t\tString url = path;\n \t\t\tif(!url.startsWith(\"/\")) {\n \t\t\t\turl = \"/\"+url;\n \t\t\t}\n \t\t\tint questionMark = url.indexOf(\"?\");\n \t\t\tif(questionMark != -1) {\n \t\t\t\turl = url.substring(0, questionMark);\n \t\t\t}\n+\t\t\treturn url;\n+\t\t}\n \n-\t\t\treturn String.format(\"%S:%s\", method, url);\n+\t\tprivate Method findRequest(String rsResourceKey) {\n+\t\t\tString uriSegments[] = rsResourceKey.split(\"/\");\n+\n+\t\t\tfor (Iterator<String> it = rsRequests.keySet().iterator(); it.hasNext();) {\n+\t\t\t\tString pattern = it.next();\n+\t\t\t\tString patternSegments[] = pattern.split(\"/\");\n+\n+\t\t\t\tif (patternSegments.length != uriSegments.length || patternSegments.length < uriSegments.length) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\n+\t\t\t\tint matches = 0;\n+\t\t\t\tfor (int i = 0; i < uriSegments.length; i++) {\n+\t\t\t\t\tif(patternSegments[i].equals(uriSegments[i]) || (patternSegments[i].startsWith(\"{\") && patternSegments[i].endsWith(\"}\"))) {\n+\t\t\t\t\t\tmatches++;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif(matches == uriSegments.length) {\n+\t\t\t\t\treturn rsRequests.get(pattern);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn null;\n \t\t}\n \n \t\tpublic Response dispatchRequest(String httpMethod, String url) {\n+\t\t\treturn dispatchRequest(httpMethod, url, null);\n+\t\t}\n+\n+\t\tpublic Response dispatchRequest(String httpMethod, String url, Object jsonOrFormdata) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfbdd4f30362ceeaec302809f6eb3878f907ee97"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTMwMTMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/webcontrol/api/AuthorizationFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzoyODozMFrOGuoDrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzoyODozMFrOGuoDrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0Mzk4MA==", "bodyText": "Dit is niet 'verify username and password', toch?", "url": "https://github.com/ibissource/iaf/pull/914#discussion_r451543980", "createdAt": "2020-07-08T13:28:30Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/webcontrol/api/AuthorizationFilter.java", "diffHunk": "@@ -93,13 +94,13 @@ public void filter(ContainerRequestContext requestContext) throws IOException {\n \t\t\t\t\trequestContext.abortWith(UNAUTHORIZED);\n \t\t\t\t\treturn;\n \t\t\t\t} else {\n-\t\t\t\t\tSystem.out.println(\"manually logged in user [\" + securityContext.getUserPrincipal().getName()+\"]\");\n+\t\t\t\t\tlog.info(\"manually logged in user [\" + securityContext.getUserPrincipal().getName()+\"]\");\n \t\t\t\t}\n \t\t\t}\n \n \t\t\tRolesAllowed rolesAnnotation = method.getAnnotation(RolesAllowed.class);\n \t\t\tSet<String> rolesSet = new HashSet<String>(Arrays.asList(rolesAnnotation.value()));\n-\t\t\tSystem.out.println(\"Checking authentication for user [\"+securityContext.getUserPrincipal().getName()+\"] uri [\"+method.getAnnotation(javax.ws.rs.Path.class).value()+\"] roles \" + rolesSet.toString());\n+\t\t\tlog.info(\"checking authentication for user [\"+securityContext.getUserPrincipal().getName()+\"] on uri [\"+method.getAnnotation(javax.ws.rs.Path.class).value()+\"] required roles \" + rolesSet.toString());\n \n \t\t\t//Verifying username and password", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ae578c0b77e58134e39b5fddd392cbcf8f6f85"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTMwNDU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/webcontrol/api/AuthorizationFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzoyOToxM1rOGuoFvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzoyOToxM1rOGuoFvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0NDUxMQ==", "bodyText": "En dit is checking authorisation, niet authentication", "url": "https://github.com/ibissource/iaf/pull/914#discussion_r451544511", "createdAt": "2020-07-08T13:29:13Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/webcontrol/api/AuthorizationFilter.java", "diffHunk": "@@ -93,13 +94,13 @@ public void filter(ContainerRequestContext requestContext) throws IOException {\n \t\t\t\t\trequestContext.abortWith(UNAUTHORIZED);\n \t\t\t\t\treturn;\n \t\t\t\t} else {\n-\t\t\t\t\tSystem.out.println(\"manually logged in user [\" + securityContext.getUserPrincipal().getName()+\"]\");\n+\t\t\t\t\tlog.info(\"manually logged in user [\" + securityContext.getUserPrincipal().getName()+\"]\");\n \t\t\t\t}\n \t\t\t}\n \n \t\t\tRolesAllowed rolesAnnotation = method.getAnnotation(RolesAllowed.class);\n \t\t\tSet<String> rolesSet = new HashSet<String>(Arrays.asList(rolesAnnotation.value()));\n-\t\t\tSystem.out.println(\"Checking authentication for user [\"+securityContext.getUserPrincipal().getName()+\"] uri [\"+method.getAnnotation(javax.ws.rs.Path.class).value()+\"] roles \" + rolesSet.toString());\n+\t\t\tlog.info(\"checking authentication for user [\"+securityContext.getUserPrincipal().getName()+\"] on uri [\"+method.getAnnotation(javax.ws.rs.Path.class).value()+\"] required roles \" + rolesSet.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17ae578c0b77e58134e39b5fddd392cbcf8f6f85"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 295, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}