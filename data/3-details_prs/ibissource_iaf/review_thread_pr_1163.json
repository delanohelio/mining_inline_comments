{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MDc0OTM4", "number": 1163, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyOToyN1rOEvwEXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjozNzoyNFrOEvwRAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTA2MDc2OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyOToyN1rOHk523A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjoyOToyN1rOHk523A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1ODcxNg==", "bodyText": "Is er een usecase te verzinnen waarin je deze modules (inclusief core dus) uit zou willen zetten?\nZo nee, dan lijkt het me beter om ook niet de last te hebben van deze switch\nZo ja, dan zou ik de property zoiets noemen als 'suppress-default-modules' of 'no-default-modules'", "url": "https://github.com/ibissource/iaf/pull/1163#discussion_r508458716", "createdAt": "2020-10-20T12:29:27Z", "author": {"login": "gvanbrakel"}, "path": "pom.xml", "diffHunk": "@@ -442,7 +442,7 @@\n       <id>default-modules</id>\n       <activation>\n         <property>\n-          <name>!default-modules</name>\n+          <name>!default-modules</name> <!-- Defaults to ON, when set it will turn off -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "528fdb5e536c5f8315db3811133a839a8feb80f0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTA3MzU2OnYy", "diffSide": "RIGHT", "path": "cmis/src/main/java/nl/nn/adapterframework/extensions/cmis/mtom/MtomProxy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjozMjo0MlrOHk5-9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODo1MDo1MVrOHlhNCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2MDc4OQ==", "bodyText": "Kan je niet in plaats van deze proxy te bouwen, het MtomFilter voor de cmisWebServiceServlet zetten?", "url": "https://github.com/ibissource/iaf/pull/1163#discussion_r508460789", "createdAt": "2020-10-20T12:32:42Z", "author": {"login": "gvanbrakel"}, "path": "cmis/src/main/java/nl/nn/adapterframework/extensions/cmis/mtom/MtomProxy.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package nl.nn.adapterframework.extensions.cmis.mtom;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.context.annotation.DependsOn;\n+\n+import nl.nn.adapterframework.http.HttpServletBase;\n+import nl.nn.adapterframework.lifecycle.DynamicRegistration;\n+import nl.nn.adapterframework.lifecycle.IbisInitializer;\n+import nl.nn.adapterframework.lifecycle.ServletManager;\n+import nl.nn.adapterframework.util.AppConstants;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+@IbisInitializer\n+@DependsOn({\"webServices10\", \"webServices11\"})\n+public class MtomProxy extends HttpServletBase implements InitializingBean, ApplicationContextAware {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b5258afbfb65b8405699c78eda22a8ed249df74"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwMzM2OA==", "bodyText": "Ja ik vind het ook stom, hij is nu deprecated, helaas zit hij er nog wel in; legacy probleempjes..", "url": "https://github.com/ibissource/iaf/pull/1163#discussion_r509103368", "createdAt": "2020-10-21T08:50:51Z", "author": {"login": "nielsm5"}, "path": "cmis/src/main/java/nl/nn/adapterframework/extensions/cmis/mtom/MtomProxy.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package nl.nn.adapterframework.extensions.cmis.mtom;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.context.annotation.DependsOn;\n+\n+import nl.nn.adapterframework.http.HttpServletBase;\n+import nl.nn.adapterframework.lifecycle.DynamicRegistration;\n+import nl.nn.adapterframework.lifecycle.IbisInitializer;\n+import nl.nn.adapterframework.lifecycle.ServletManager;\n+import nl.nn.adapterframework.util.AppConstants;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+@IbisInitializer\n+@DependsOn({\"webServices10\", \"webServices11\"})\n+public class MtomProxy extends HttpServletBase implements InitializingBean, ApplicationContextAware {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2MDc4OQ=="}, "originalCommit": {"oid": "7b5258afbfb65b8405699c78eda22a8ed249df74"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTA4MjA2OnYy", "diffSide": "RIGHT", "path": "cmis/src/main/java/nl/nn/adapterframework/extensions/cmis/mtom/MtomRequestWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjozNDo0NlrOHk6ERw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODo1MDoyMlrOHlhLtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2MjE1MQ==", "bodyText": "Hier lees je denk ik het hele request in je geheugen in. Zou dat te vermijden zijn?", "url": "https://github.com/ibissource/iaf/pull/1163#discussion_r508462151", "createdAt": "2020-10-20T12:34:46Z", "author": {"login": "gvanbrakel"}, "path": "cmis/src/main/java/nl/nn/adapterframework/extensions/cmis/mtom/MtomRequestWrapper.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package nl.nn.adapterframework.extensions.cmis.mtom;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import javax.mail.BodyPart;\n+import javax.mail.internet.MimeMultipart;\n+import javax.servlet.ServletInputStream;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.entity.ContentType;\n+import org.apache.logging.log4j.Logger;\n+import org.springframework.mock.web.DelegatingServletInputStream;\n+\n+import nl.nn.adapterframework.http.InputStreamDataSource;\n+import nl.nn.adapterframework.http.mime.MultipartEntityBuilder;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+public class MtomRequestWrapper extends HttpServletRequestWrapper {\n+\tprotected Logger log = LogUtil.getLogger(this);\n+\n+\tprivate HttpEntity entity;\n+\tprivate static final ContentType MTOM_XOP = ContentType.parse(\"application/xop+xml; charset=UTF-8\");\n+\n+\tpublic MtomRequestWrapper(ServletRequest request) throws IOException {\n+\t\tthis((HttpServletRequest) request);\n+\t}\n+\n+\tpublic MtomRequestWrapper(HttpServletRequest request) throws IOException {\n+\t\tsuper(request);\n+\n+\t\tString contentType = super.getHeader(\"content-type\");\n+\t\tif(\"POST\".equalsIgnoreCase(request.getMethod())) {\n+\t\t\ttry {\n+\t\t\t\tif(log.isTraceEnabled()) log.trace(\"found message with ContentType [\"+contentType+\"]\");\n+\t\t\t\tboolean isMultipartRequest = contentType.contains(\"multipart\");\n+\t\t\t\tMultipartEntityBuilder multipart = MultipartEntityBuilder.create();\n+\t\t\t\tmultipart.setMtomMultipart();\n+\n+\t\t\t\tif(isMultipartRequest) { // Multiple parts we need to iterate over\n+\t\t\t\t\tInputStreamDataSource dataSource = new InputStreamDataSource(contentType, super.getInputStream());\n+\t\t\t\t\tMimeMultipart mp = new MimeMultipart(dataSource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b5258afbfb65b8405699c78eda22a8ed249df74"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwMzAyOQ==", "bodyText": "Misschien wel, misschien niet.", "url": "https://github.com/ibissource/iaf/pull/1163#discussion_r509103029", "createdAt": "2020-10-21T08:50:22Z", "author": {"login": "nielsm5"}, "path": "cmis/src/main/java/nl/nn/adapterframework/extensions/cmis/mtom/MtomRequestWrapper.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package nl.nn.adapterframework.extensions.cmis.mtom;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import javax.mail.BodyPart;\n+import javax.mail.internet.MimeMultipart;\n+import javax.servlet.ServletInputStream;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletRequestWrapper;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.entity.ContentType;\n+import org.apache.logging.log4j.Logger;\n+import org.springframework.mock.web.DelegatingServletInputStream;\n+\n+import nl.nn.adapterframework.http.InputStreamDataSource;\n+import nl.nn.adapterframework.http.mime.MultipartEntityBuilder;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+public class MtomRequestWrapper extends HttpServletRequestWrapper {\n+\tprotected Logger log = LogUtil.getLogger(this);\n+\n+\tprivate HttpEntity entity;\n+\tprivate static final ContentType MTOM_XOP = ContentType.parse(\"application/xop+xml; charset=UTF-8\");\n+\n+\tpublic MtomRequestWrapper(ServletRequest request) throws IOException {\n+\t\tthis((HttpServletRequest) request);\n+\t}\n+\n+\tpublic MtomRequestWrapper(HttpServletRequest request) throws IOException {\n+\t\tsuper(request);\n+\n+\t\tString contentType = super.getHeader(\"content-type\");\n+\t\tif(\"POST\".equalsIgnoreCase(request.getMethod())) {\n+\t\t\ttry {\n+\t\t\t\tif(log.isTraceEnabled()) log.trace(\"found message with ContentType [\"+contentType+\"]\");\n+\t\t\t\tboolean isMultipartRequest = contentType.contains(\"multipart\");\n+\t\t\t\tMultipartEntityBuilder multipart = MultipartEntityBuilder.create();\n+\t\t\t\tmultipart.setMtomMultipart();\n+\n+\t\t\t\tif(isMultipartRequest) { // Multiple parts we need to iterate over\n+\t\t\t\t\tInputStreamDataSource dataSource = new InputStreamDataSource(contentType, super.getInputStream());\n+\t\t\t\t\tMimeMultipart mp = new MimeMultipart(dataSource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2MjE1MQ=="}, "originalCommit": {"oid": "7b5258afbfb65b8405699c78eda22a8ed249df74"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTA5MzEzOnYy", "diffSide": "RIGHT", "path": "cmis/src/main/java/nl/nn/adapterframework/extensions/cmis/mtom/MtomResponseWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjozNzoyNFrOHk6LLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODo1MDoxM1rOHlhLTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2MzkxNg==", "bodyText": "Hier lees je de hele stream in een byte array in geheugen in, om hem daarna maar \u00e9\u00e9n keer als stream te lezen", "url": "https://github.com/ibissource/iaf/pull/1163#discussion_r508463916", "createdAt": "2020-10-20T12:37:24Z", "author": {"login": "gvanbrakel"}, "path": "cmis/src/main/java/nl/nn/adapterframework/extensions/cmis/mtom/MtomResponseWrapper.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package nl.nn.adapterframework.extensions.cmis.mtom;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.StringTokenizer;\n+\n+import javax.mail.BodyPart;\n+import javax.mail.internet.MimeMultipart;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.InputStreamEntity;\n+import org.apache.http.entity.mime.FormBodyPartBuilder;\n+import org.apache.http.entity.mime.content.InputStreamBody;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.logging.log4j.Logger;\n+import org.springframework.mock.web.DelegatingServletOutputStream;\n+\n+import nl.nn.adapterframework.http.InputStreamDataSource;\n+import nl.nn.adapterframework.http.mime.MultipartEntityBuilder;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+public class MtomResponseWrapper extends HttpServletResponseWrapper {\n+\tprotected Logger log = LogUtil.getLogger(this);\n+\n+\tprivate ContentType contentType;\n+\n+\tpublic MtomResponseWrapper(ServletResponse response) throws IOException {\n+\t\tthis((HttpServletResponse) response);\n+\t}\n+\n+\tpublic MtomResponseWrapper(HttpServletResponse response) throws IOException {\n+\t\tsuper(response);\n+\t}\n+\n+\t@Override\n+\tpublic ServletOutputStream getOutputStream() throws IOException {\n+\n+\t\tcontentType = ContentType.parse(getContentType());\n+\t\tif(log.isTraceEnabled()) log.trace(\"recieved response with ContentType [\"+contentType+\"]\");\n+\n+\t\t// Als mimeType == text/html dan geen multipart doen :)\n+\t\tif(!contentType.getMimeType().contains(\"multipart\")) {\n+\t\t\treturn super.getOutputStream();\n+\t\t} else {\n+\t\t\treturn new DelegatingServletOutputStream(new MtomOutputStream(super.getOutputStream()));\n+\t\t}\n+\t}\n+\n+\tprivate class MtomOutputStream extends FilterOutputStream {\n+\t\tprivate ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();\n+\n+\t\tpublic MtomOutputStream(OutputStream out) {\n+\t\t\tsuper(out);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void write(int b) throws IOException {\n+\t\t\tbufferStream.write(b);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void write(byte[] b, int off, int len) throws IOException {\n+\t\t\tbufferStream.write(b, off, len);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic synchronized void flush() throws IOException {\n+\t\t\ttry {\n+\t\t\t\tByteArrayInputStream is = new ByteArrayInputStream(bufferStream.toByteArray());\n+\t\t\t\tInputStreamDataSource dataSource = new InputStreamDataSource(contentType.toString(), is);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b5258afbfb65b8405699c78eda22a8ed249df74"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwMjkyNA==", "bodyText": "Ja klopt.", "url": "https://github.com/ibissource/iaf/pull/1163#discussion_r509102924", "createdAt": "2020-10-21T08:50:13Z", "author": {"login": "nielsm5"}, "path": "cmis/src/main/java/nl/nn/adapterframework/extensions/cmis/mtom/MtomResponseWrapper.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package nl.nn.adapterframework.extensions.cmis.mtom;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.StringTokenizer;\n+\n+import javax.mail.BodyPart;\n+import javax.mail.internet.MimeMultipart;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpServletResponseWrapper;\n+\n+import org.apache.http.Header;\n+import org.apache.http.HttpEntity;\n+import org.apache.http.NameValuePair;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.InputStreamEntity;\n+import org.apache.http.entity.mime.FormBodyPartBuilder;\n+import org.apache.http.entity.mime.content.InputStreamBody;\n+import org.apache.http.message.BasicNameValuePair;\n+import org.apache.logging.log4j.Logger;\n+import org.springframework.mock.web.DelegatingServletOutputStream;\n+\n+import nl.nn.adapterframework.http.InputStreamDataSource;\n+import nl.nn.adapterframework.http.mime.MultipartEntityBuilder;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+public class MtomResponseWrapper extends HttpServletResponseWrapper {\n+\tprotected Logger log = LogUtil.getLogger(this);\n+\n+\tprivate ContentType contentType;\n+\n+\tpublic MtomResponseWrapper(ServletResponse response) throws IOException {\n+\t\tthis((HttpServletResponse) response);\n+\t}\n+\n+\tpublic MtomResponseWrapper(HttpServletResponse response) throws IOException {\n+\t\tsuper(response);\n+\t}\n+\n+\t@Override\n+\tpublic ServletOutputStream getOutputStream() throws IOException {\n+\n+\t\tcontentType = ContentType.parse(getContentType());\n+\t\tif(log.isTraceEnabled()) log.trace(\"recieved response with ContentType [\"+contentType+\"]\");\n+\n+\t\t// Als mimeType == text/html dan geen multipart doen :)\n+\t\tif(!contentType.getMimeType().contains(\"multipart\")) {\n+\t\t\treturn super.getOutputStream();\n+\t\t} else {\n+\t\t\treturn new DelegatingServletOutputStream(new MtomOutputStream(super.getOutputStream()));\n+\t\t}\n+\t}\n+\n+\tprivate class MtomOutputStream extends FilterOutputStream {\n+\t\tprivate ByteArrayOutputStream bufferStream = new ByteArrayOutputStream();\n+\n+\t\tpublic MtomOutputStream(OutputStream out) {\n+\t\t\tsuper(out);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void write(int b) throws IOException {\n+\t\t\tbufferStream.write(b);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void write(byte[] b, int off, int len) throws IOException {\n+\t\t\tbufferStream.write(b, off, len);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic synchronized void flush() throws IOException {\n+\t\t\ttry {\n+\t\t\t\tByteArrayInputStream is = new ByteArrayInputStream(bufferStream.toByteArray());\n+\t\t\t\tInputStreamDataSource dataSource = new InputStreamDataSource(contentType.toString(), is);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2MzkxNg=="}, "originalCommit": {"oid": "7b5258afbfb65b8405699c78eda22a8ed249df74"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 578, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}