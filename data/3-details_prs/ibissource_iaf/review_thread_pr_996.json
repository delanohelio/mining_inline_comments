{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMTgyNzA1", "number": 996, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjozNToxNVrOEpdCKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzo0NzozN1rOFE_Zqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTAyNzYxOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/FileUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjozNToxNVrOHbIQhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjozNToxNVrOHbIQhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIwODkwMw==", "bodyText": "Since this is a field that doesn't change, I recommend you turning it in to a public static final String and with final fields it's a java standard to use all caps as field name, so for example public static final String FILE_SEPARATOR = File.separator Not sure if it will be any shorter then File.separator which I believe was the idea here but just my 2c.", "url": "https://github.com/ibissource/iaf/pull/996#discussion_r498208903", "createdAt": "2020-10-01T12:35:15Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FileUtilsTest.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * FileUtils Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FileUtilsTest {\n+\n+\t@ClassRule\n+\tpublic static TemporaryFolder testFolderSource = new TemporaryFolder();\n+\n+\t@ClassRule\n+\tpublic static TemporaryFolder testFolderDest = new TemporaryFolder();\n+\n+\tpublic static String sourceFolderPath;\n+\n+\tpublic static String destFolderPath;\n+\n+\tprivate static File f1;\n+\n+\tpublic String sep = File.separator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc6096210fb5b9dcca93f3a243fec7df767922da"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTAzNjgxOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/FileUtilsTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjozNzozNVrOHbIWCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0NzoyM1rOHbIuNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxMDMxMw==", "bodyText": "Please use an URL and turn that into a file here. Renaming the path or whatever would otherwise needlessly break the test.\nthis.getClass().getResource(\"/Pipes/movingFile.txt\"); will return an URL (to which you could apply a null check (assertNotNull(xxxx)) which you can then feed to the new File constructor :)", "url": "https://github.com/ibissource/iaf/pull/996#discussion_r498210313", "createdAt": "2020-10-01T12:37:35Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FileUtilsTest.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * FileUtils Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FileUtilsTest {\n+\n+\t@ClassRule\n+\tpublic static TemporaryFolder testFolderSource = new TemporaryFolder();\n+\n+\t@ClassRule\n+\tpublic static TemporaryFolder testFolderDest = new TemporaryFolder();\n+\n+\tpublic static String sourceFolderPath;\n+\n+\tpublic static String destFolderPath;\n+\n+\tprivate static File f1;\n+\n+\tpublic String sep = File.separator;\n+\n+\t@BeforeClass\n+\tpublic static void setUpTest() throws IOException {\n+\t\tsourceFolderPath = testFolderSource.getRoot().getPath();\n+\t\tf1 = testFolderSource.newFile(\"1.txt\");\n+\t\tdestFolderPath = testFolderDest.getRoot().getPath();\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testGetFreeFile() throws Exception {\n+\t\tFile f = new File(\"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"Pipes\");\n+\t\tFile res = FileUtils.getFreeFile(f);\n+\t\tassertEquals(\"Pipes\", res.getName());\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testMoveFile() throws Exception {\n+\t\tFile toBeMoved = new File(\"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"Pipes\" + sep + \"movingFile.txt\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc6096210fb5b9dcca93f3a243fec7df767922da"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxMTYzNQ==", "bodyText": "I just realized you do this more often, maybe you could create a method that does all this and returns a File?", "url": "https://github.com/ibissource/iaf/pull/996#discussion_r498211635", "createdAt": "2020-10-01T12:39:42Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FileUtilsTest.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * FileUtils Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FileUtilsTest {\n+\n+\t@ClassRule\n+\tpublic static TemporaryFolder testFolderSource = new TemporaryFolder();\n+\n+\t@ClassRule\n+\tpublic static TemporaryFolder testFolderDest = new TemporaryFolder();\n+\n+\tpublic static String sourceFolderPath;\n+\n+\tpublic static String destFolderPath;\n+\n+\tprivate static File f1;\n+\n+\tpublic String sep = File.separator;\n+\n+\t@BeforeClass\n+\tpublic static void setUpTest() throws IOException {\n+\t\tsourceFolderPath = testFolderSource.getRoot().getPath();\n+\t\tf1 = testFolderSource.newFile(\"1.txt\");\n+\t\tdestFolderPath = testFolderDest.getRoot().getPath();\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testGetFreeFile() throws Exception {\n+\t\tFile f = new File(\"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"Pipes\");\n+\t\tFile res = FileUtils.getFreeFile(f);\n+\t\tassertEquals(\"Pipes\", res.getName());\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testMoveFile() throws Exception {\n+\t\tFile toBeMoved = new File(\"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"Pipes\" + sep + \"movingFile.txt\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxMDMxMw=="}, "originalCommit": {"oid": "cc6096210fb5b9dcca93f3a243fec7df767922da"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNjUwMA==", "bodyText": "yes, I will create a method for this and replace all.", "url": "https://github.com/ibissource/iaf/pull/996#discussion_r498216500", "createdAt": "2020-10-01T12:47:23Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FileUtilsTest.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * FileUtils Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FileUtilsTest {\n+\n+\t@ClassRule\n+\tpublic static TemporaryFolder testFolderSource = new TemporaryFolder();\n+\n+\t@ClassRule\n+\tpublic static TemporaryFolder testFolderDest = new TemporaryFolder();\n+\n+\tpublic static String sourceFolderPath;\n+\n+\tpublic static String destFolderPath;\n+\n+\tprivate static File f1;\n+\n+\tpublic String sep = File.separator;\n+\n+\t@BeforeClass\n+\tpublic static void setUpTest() throws IOException {\n+\t\tsourceFolderPath = testFolderSource.getRoot().getPath();\n+\t\tf1 = testFolderSource.newFile(\"1.txt\");\n+\t\tdestFolderPath = testFolderDest.getRoot().getPath();\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testGetFreeFile() throws Exception {\n+\t\tFile f = new File(\"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"Pipes\");\n+\t\tFile res = FileUtils.getFreeFile(f);\n+\t\tassertEquals(\"Pipes\", res.getName());\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testMoveFile() throws Exception {\n+\t\tFile toBeMoved = new File(\"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"Pipes\" + sep + \"movingFile.txt\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxMDMxMw=="}, "originalCommit": {"oid": "cc6096210fb5b9dcca93f3a243fec7df767922da"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTA0MTg0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/FileUtilsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjozODo0NlrOHbIZDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjozODo0NlrOHbIZDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxMTA4NQ==", "bodyText": "Try to add some funky characters that require to be encoded, such as /. :, ? to spice things up a bit.", "url": "https://github.com/ibissource/iaf/pull/996#discussion_r498211085", "createdAt": "2020-10-01T12:38:46Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FileUtilsTest.java", "diffHunk": "@@ -0,0 +1,283 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * FileUtils Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FileUtilsTest {\n+\n+\t@ClassRule\n+\tpublic static TemporaryFolder testFolderSource = new TemporaryFolder();\n+\n+\t@ClassRule\n+\tpublic static TemporaryFolder testFolderDest = new TemporaryFolder();\n+\n+\tpublic static String sourceFolderPath;\n+\n+\tpublic static String destFolderPath;\n+\n+\tprivate static File f1;\n+\n+\tpublic String sep = File.separator;\n+\n+\t@BeforeClass\n+\tpublic static void setUpTest() throws IOException {\n+\t\tsourceFolderPath = testFolderSource.getRoot().getPath();\n+\t\tf1 = testFolderSource.newFile(\"1.txt\");\n+\t\tdestFolderPath = testFolderDest.getRoot().getPath();\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testGetFreeFile() throws Exception {\n+\t\tFile f = new File(\"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"Pipes\");\n+\t\tFile res = FileUtils.getFreeFile(f);\n+\t\tassertEquals(\"Pipes\", res.getName());\n+\t}\n+\n+\n+\t@Test\n+\tpublic void testMoveFile() throws Exception {\n+\t\tFile toBeMoved = new File(\"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"Pipes\" + sep + \"movingFile.txt\");\n+\t\tString destDir = \"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"Pipes\" + sep + \"javascript\";\n+\t\tString s = FileUtils.moveFile(toBeMoved, destDir, true, 2);\n+\t\tString movedPath = destDir + sep + \"movingFile.txt\";\n+\t\tFile moveBack =  new File(\"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"Pipes\" + sep + \"javascript\" + sep + \"movingFile.txt\");\n+\t\tdestDir = \"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"Pipes\";\n+\t\tmoveBack(moveBack, destDir);\n+\t\tassertEquals(movedPath.substring(2, movedPath.length()), s.substring(s.length()-56, s.length()));\n+\n+\t}\n+\n+\tpublic void moveBack(File f, String dir) throws IOException, InterruptedException {\n+\t\tFileUtils.moveFile(f, dir, true, 2);\n+\t}\n+\n+\n+\t/**\n+\t * Method: appendFile(File orgFile, File destFile, int nrRetries, long waitTime)\n+\t */\n+\t@Test\n+\tpublic void testAppendFile() throws Exception {\n+\t\tFile orgFile = new File(\"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"Pipes\" + sep + \"fileToAppend.txt\");\n+\t\tFile destFile = new File(\"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"Pipes\" + sep + \"destinationFile.txt\");\n+\t\tString res = FileUtils.appendFile(orgFile, destFile, 5, 5000);\n+\t\tassertEquals(destFile.getAbsolutePath(), res);\n+\t}\n+\n+\t@Test\n+\tpublic void testCopyFile() throws Exception {\n+\t\tFile sourceFile = new File(\"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"Pipes\" + sep + \"fileToAppend.txt\");\n+\t\tFile destFile = new File(\"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"Pipes\" + sep + \"copyFile.txt\");\n+\t\tboolean b = FileUtils.copyFile(sourceFile, destFile, true);\n+\t\tassertEquals(true, b);\n+\t}\n+\n+\n+\t/**\n+\t * Method: createTempDir(File baseDir)\n+\t */\n+\t@Test\n+\tpublic void testCreateTempDirBaseDir() throws Exception {\n+\t\tString path = \"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"Pipes\";\n+\t\tFile f = new File(path);\n+\t\tFile file = FileUtils.createTempDir(f);\n+\t\tboolean b = file.exists();\n+\t\tfile.delete();\n+\t\tassertTrue(b);\n+\t}\n+\n+\t/**\n+\t * Method: makeBackups(File targetFile, int numBackups)\n+\t */\n+\t@Test\n+\tpublic void testMakeBackups() throws Exception {\n+\t\tFileUtils.makeBackups(f1, 5);\n+\t\tassertEquals(3, 3);\n+\t}\n+\n+\t/**\n+\t * Method: getFiles(String directory, String wildcard, String excludeWildcard, long minStability)\n+\t */\n+\n+\t@Test\n+\tpublic void testGetFiles() throws Exception {\n+\t\tString path = \"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"StreamUtil\";\n+\t\tFile[] files = FileUtils.getFiles(path, \"*\", null, 5);\n+\t\tFile numFiles = new File(path);\n+\t\tString[] s = numFiles.list();\n+\t\tassertEquals(s[0], files[0].getName());\n+\t\tassertEquals(s[1], files[1].getName());\n+\t}\n+\n+\n+\t/**\n+\t * Method: getFirstFile(File directory)\n+\t */\n+\t@Test\n+\tpublic void testGetFirstFileDirectory() throws Exception {\n+\t\tString path = \"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"StreamUtil\";\n+\t\tFile f = new File(path);\n+\t\tFile file = FileUtils.getFirstFile(f);\n+\t\tString[] l = f.list();\n+\t\tassertEquals(l[0], file.getName());\n+\t}\n+\n+\t/**\n+\t * Method: getListFromNames(String names, char seperator)\n+\t */\n+\t@Test\n+\tpublic void testGetListFromNamesForNamesSeperator() throws Exception {\n+\t\tList<String> list = FileUtils.getListFromNames(\"abc.txt,test.txt,jkl.txt\", ',');\n+\t\tassertEquals(\"abc.txt\", list.get(0));\n+\t\tassertEquals(\"test.txt\", list.get(1));\n+\t\tassertEquals(\"jkl.txt\", list.get(2));\n+\t}\n+\n+\t/**\n+\t * Method: getListFromNames(String[] names)\n+\t */\n+\t@Test\n+\tpublic void testGetListFromNamesNames() throws Exception {\n+\t\tString[] names = {\"abc.txt\", \"test.txt\", \"jkl.txt\"};\n+\t\tList<String> list = FileUtils.getListFromNames(names);\n+\t\tassertEquals(\"abc.txt\", list.get(0));\n+\t\tassertEquals(\"test.txt\", list.get(1));\n+\t\tassertEquals(\"jkl.txt\", list.get(2));\n+\n+\t}\n+\n+\t/**\n+\t * Method: getNamesFromArray(String[] names, char seperator)\n+\t */\n+\t@Test\n+\tpublic void testGetNamesFromArray() throws Exception {\n+\t\tString[] names = {\"abc.txt\", \"test.txt\", \"jkl.txt\"};\n+\t\tString res = FileUtils.getNamesFromArray(names, ',');\n+\t\tassertEquals(\"abc.txt,test.txt,jkl.txt\", res);\n+\t}\n+\n+\t/**\n+\t * Method: getNamesFromList(List<String> filenames, char seperator)\n+\t */\n+\t@Test\n+\tpublic void testGetNamesFromList() throws Exception {\n+\t\tString[] names = {\"abc.txt\", \"test.txt\", \"jkl.txt\"};\n+\t\tList<String> list = FileUtils.getListFromNames(names);\n+\t\tString res = FileUtils.getNamesFromList(list, ',');\n+\t\tassertEquals(\"abc.txt,test.txt,jkl.txt\", res);\n+\t}\n+\n+\t/**\n+\t * Method: align(String val, int length, boolean leftAlign, char fillchar)\n+\t */\n+\t@Test\n+\tpublic void testAlignForValLengthLeftAlignFillchar() throws Exception {\n+\t\tString s = \"test\";\n+\t\tString res = FileUtils.align(s, 10, true, 'b');\n+\t\tString res2 = FileUtils.align(s, 2, true, 'b');\n+\t\tassertEquals(\"testbbbbbb\", res);\n+\t\tassertEquals(\"te\", res2);\n+\t}\n+\n+\t/**\n+\t * Method: getFilledArray(int length, char fillchar)\n+\t */\n+\t@Test\n+\tpublic void testGetFilledArray() throws Exception {\n+\t\tchar[] arr = FileUtils.getFilledArray(5, 'a');\n+\t\tassertEquals('a', arr[2]);\n+\t}\n+\n+\t/**\n+\t * Method: getFileNameExtension(String fileName)\n+\t */\n+\t@Test\n+\tpublic void testGetFileNameExtension() throws Exception {\n+\t\tString s = FileUtils.getFileNameExtension(\"file.txt\");\n+\t\tassertEquals(\"txt\", s);\n+\t}\n+\n+\t/**\n+\t * Method: getBaseName(String fileName)\n+\t */\n+\t@Test\n+\tpublic void testGetBaseName() throws Exception {\n+\t\tString s = FileUtils.getBaseName(\"file.txt\");\n+\t\tassertEquals(\"file\", s);\n+\t}\n+\n+\t/**\n+\t * Method: extensionEqualsIgnoreCase(String fileName, String extension)\n+\t */\n+\t@Test\n+\tpublic void testExtensionEqualsIgnoreCase() throws Exception {\n+\t\tString x1 = \"a.txt\";\n+\t\tString x2 = \"a.tXt\";\n+\t\tboolean b = FileUtils.extensionEqualsIgnoreCase(x2, \"txt\");\n+\t\tboolean b2 = FileUtils.extensionEqualsIgnoreCase(x1, \"txt\");\n+\t\tassertTrue(b);\n+\t\tassertTrue(b2);\n+\t}\n+\n+\t/**\n+\t * Method: canWrite(String directory)\n+\t */\n+\t@Test\n+\tpublic void testCanWrite() throws Exception {\n+\t\tString p1 = \"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"Utils\";\n+\t\tString p2 = \"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"Pipes\" + sep + \"2.txt\";\n+\t\tboolean b = FileUtils.canWrite(p1);\n+\t\tboolean b2 = FileUtils.canWrite(p2);\n+\t\tassertTrue(b);\n+\t\tassertFalse(b2);\n+\t}\n+\n+\t@Test\n+\tpublic void testGetFirstFile() {\n+\t\tString p2 = \"..\" + sep + \"core\" + sep + \"src\" + sep + \"test\" + sep + \"resources\" + sep + \"StreamUtil\";\n+\t\tFile f = new File(p2);\n+\t\tFile res = FileUtils.getFirstFile(f);\n+\t\tString[] l = f.list();\n+\t\tassertEquals(l[0], res.getName());\n+\t}\n+\t/**\n+\t * Method: encodeFileName(String fileName)\n+\t */\n+\t@Test\n+\tpublic void testEncodeFileName() throws Exception {\n+\t\tString s = \" abc.txt\";\n+\t\tString encoded = FileUtils.encodeFileName(s);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc6096210fb5b9dcca93f3a243fec7df767922da"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzc3Mzg2OnYy", "diffSide": "RIGHT", "path": "core/src/test/resources/Util/FileUtils/copyFile.txt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzo0NzozN1rOIFRNWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzo0NzozN1rOIFRNWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM5NTczNw==", "bodyText": "Ik vind het een beetje stom om zo'n bij elkaar gebaggerde file te hebben. De inhoud kan ook enkelvoudig zijn en begrijpelijker", "url": "https://github.com/ibissource/iaf/pull/996#discussion_r542395737", "createdAt": "2020-12-14T13:47:37Z", "author": {"login": "gvanbrakel"}, "path": "core/src/test/resources/Util/FileUtils/copyFile.txt", "diffHunk": "@@ -0,0 +1 @@\n+will be copied to copyFIle.txt and appended to destinationFile.txtwill be copied to copyFIle.txt and appended to destinationFile.txtwill be copied to copyFIle.txt and appended to destinationFile.txtwill be copied to copyFIle.txt and appended to destinationFile.txtwill be copied to copyFIle.txt and appended to destinationFile.txtwill be copied to copyFIle.txt and appended to destinationFile.txtwill be copied to copyFIle.txt and appended to destinationFile.txtwill be copied to copyFIle.txt and appended to destinationFile.txtwill be copied to copyFIle.txt and appended to destinationFile.txtwill be copied to copyFIle.txt and appended to destinationFile.txt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cf6bcbaf9ac20b77c7e3bb415e5b64639454f68"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 324, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}