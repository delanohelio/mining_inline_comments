{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNDgxMzk0", "number": 598, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDozMzo0MVrODwjnJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoyNzo1M1rOEKalFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjQxNzAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/translator/MssqlTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDozMzo0MVrOGDoaFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo0MTo1NFrOGFCDZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2MDk0OQ==", "bodyText": "This will work only when the query searched has exactly this form", "url": "https://github.com/ibissource/iaf/pull/598#discussion_r406460949", "createdAt": "2020-04-09T20:33:41Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/translator/MssqlTranslator.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package nl.nn.adapterframework.jdbc.dbms.translator;\n+\n+public class MssqlTranslator extends ITranslator {\n+\tpublic MssqlTranslator(ITranslator target) {\n+\t\tsuper(target);\n+\t}\n+\n+\tpublic MssqlTranslator() {\n+\t\tsuper();\n+\t}\n+\n+\t@Override\n+\tprotected void populateMaps() {\n+\t\tregexes.put(\"NEXTVAL\", toPattern(\"NEXT VALUE FOR (\\\\w+)\"));\n+\t\treplacements.put(\"NEXTVAL\", \"(NEXT VALUE FOR $1)\");\n+\n+\t\tregexes.put(\"CURRVAL\", toPattern(\"SELECT CURRENT_VALUE FROM SYS.SEQUENCES WHERE NAME\\\\s+=\\\\s+'(\\\\w+)'\"));\n+\t\treplacements.put(\"CURRVAL\", \"(SELECT current_value FROM sys.sequences WHERE name = '$1')\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "572fd56886aecd2f8707827114dd112243fa7b4a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyOTcwMA==", "bodyText": "I know, currently these regex strings are more of a placeholder. I'm testing and improving them as i go along, one by one.", "url": "https://github.com/ibissource/iaf/pull/598#discussion_r407929700", "createdAt": "2020-04-14T07:41:54Z", "author": {"login": "mkmeral"}, "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/translator/MssqlTranslator.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package nl.nn.adapterframework.jdbc.dbms.translator;\n+\n+public class MssqlTranslator extends ITranslator {\n+\tpublic MssqlTranslator(ITranslator target) {\n+\t\tsuper(target);\n+\t}\n+\n+\tpublic MssqlTranslator() {\n+\t\tsuper();\n+\t}\n+\n+\t@Override\n+\tprotected void populateMaps() {\n+\t\tregexes.put(\"NEXTVAL\", toPattern(\"NEXT VALUE FOR (\\\\w+)\"));\n+\t\treplacements.put(\"NEXTVAL\", \"(NEXT VALUE FOR $1)\");\n+\n+\t\tregexes.put(\"CURRVAL\", toPattern(\"SELECT CURRENT_VALUE FROM SYS.SEQUENCES WHERE NAME\\\\s+=\\\\s+'(\\\\w+)'\"));\n+\t\treplacements.put(\"CURRVAL\", \"(SELECT current_value FROM sys.sequences WHERE name = '$1')\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2MDk0OQ=="}, "originalCommit": {"oid": "572fd56886aecd2f8707827114dd112243fa7b4a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzQ2NjE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/SqlTranslator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODowMDowOVrOGrbIRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODowMDowOVrOGrbIRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4NjQzNw==", "bodyText": "SqlTranslationPatterns.properties ?", "url": "https://github.com/ibissource/iaf/pull/598#discussion_r448186437", "createdAt": "2020-07-01T08:00:09Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/SqlTranslator.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.jdbc.dbms;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.logging.log4j.Logger;\n+\n+import nl.nn.adapterframework.jdbc.JdbcException;\n+import nl.nn.adapterframework.util.ClassUtils;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+/**\n+ * Sql syntax translator to translate queries\n+ * for different database management systems (e.g. Oracle to MsSql or PostgreSql to MySql)\n+ */\n+public class SqlTranslator implements ISqlTranslator {\n+\tprivate final Logger log = LogUtil.getLogger(this);\n+\n+\tprivate static final String PATTERN_FILE = \"sql-translate.properties\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba2b42bac6cee2400f90b23889233e3da9b267a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzQ4MDMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/SqlTranslator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODowNDozN1rOGrbRUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODowNDozN1rOGrbRUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4ODc1Mg==", "bodyText": "Moet dit niet configured heten? Of anders een check doen om te kijken of er een Match is in de properties file voor de betreffende translatie?", "url": "https://github.com/ibissource/iaf/pull/598#discussion_r448188752", "createdAt": "2020-07-01T08:04:37Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/SqlTranslator.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.jdbc.dbms;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.logging.log4j.Logger;\n+\n+import nl.nn.adapterframework.jdbc.JdbcException;\n+import nl.nn.adapterframework.util.ClassUtils;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+/**\n+ * Sql syntax translator to translate queries\n+ * for different database management systems (e.g. Oracle to MsSql or PostgreSql to MySql)\n+ */\n+public class SqlTranslator implements ISqlTranslator {\n+\tprivate final Logger log = LogUtil.getLogger(this);\n+\n+\tprivate static final String PATTERN_FILE = \"sql-translate.properties\";\n+\n+\tprivate Map<String,Pattern> sources;\n+\tprivate Map<String,String>  targets;\n+\t\n+\tprivate boolean configured=false;\n+\n+\tpublic SqlTranslator(String source, String target) throws JdbcException {\n+\t\tif (StringUtils.isEmpty(source) || StringUtils.isEmpty(target))\n+\t\t\tthrow new IllegalArgumentException(\"Can not translate from [\" + source + \"] to [\" + target + \"]\");\n+\t\tif (source.equalsIgnoreCase(target)) {\n+\t\t\tlog.warn(\"Same source and target for SqlTranslator. Skipping pattern generation.\");\n+\t\t\treturn;\n+\t\t}\n+\t\ttry {\n+\t\t\tif (!readPatterns(source,target)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new JdbcException(\"cannot create SqlTranslator\",e);\n+\t\t}\n+\t\tconfigured = true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean canConvert(String from, String to) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba2b42bac6cee2400f90b23889233e3da9b267a"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzQ4MzIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/SqlTranslator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODowNToyMVrOGrbTCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODowNToyMVrOGrbTCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4OTE5NA==", "bodyText": "is nu een properties file?", "url": "https://github.com/ibissource/iaf/pull/598#discussion_r448189194", "createdAt": "2020-07-01T08:05:21Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/SqlTranslator.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.jdbc.dbms;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.logging.log4j.Logger;\n+\n+import nl.nn.adapterframework.jdbc.JdbcException;\n+import nl.nn.adapterframework.util.ClassUtils;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+/**\n+ * Sql syntax translator to translate queries\n+ * for different database management systems (e.g. Oracle to MsSql or PostgreSql to MySql)\n+ */\n+public class SqlTranslator implements ISqlTranslator {\n+\tprivate final Logger log = LogUtil.getLogger(this);\n+\n+\tprivate static final String PATTERN_FILE = \"sql-translate.properties\";\n+\n+\tprivate Map<String,Pattern> sources;\n+\tprivate Map<String,String>  targets;\n+\t\n+\tprivate boolean configured=false;\n+\n+\tpublic SqlTranslator(String source, String target) throws JdbcException {\n+\t\tif (StringUtils.isEmpty(source) || StringUtils.isEmpty(target))\n+\t\t\tthrow new IllegalArgumentException(\"Can not translate from [\" + source + \"] to [\" + target + \"]\");\n+\t\tif (source.equalsIgnoreCase(target)) {\n+\t\t\tlog.warn(\"Same source and target for SqlTranslator. Skipping pattern generation.\");\n+\t\t\treturn;\n+\t\t}\n+\t\ttry {\n+\t\t\tif (!readPatterns(source,target)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new JdbcException(\"cannot create SqlTranslator\",e);\n+\t\t}\n+\t\tconfigured = true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean canConvert(String from, String to) {\n+\t\treturn configured;\n+\t}\n+\t\n+\t/**\n+\t * Translates the given query to the target language.\n+\t * Uses the translation rules set by this and the target translators.\n+\t *\n+\t * @param original Original query to be translated.\n+\t * @return Translated query.\n+\t */\n+\t@Override\n+\tpublic String translate(String original) {\n+\t\tString query = original;\n+\t\tif (sources!=null) {\n+\t\t\tfor (String label:sources.keySet()) {\n+\t\t\t\tMatcher matcher = sources.get(label).matcher(query);\n+\t\t\t\tif (matcher.find()) {\n+\t\t\t\t\tif (log.isTraceEnabled()) log.trace(String.format(\"Found a match for label [%s] pattern [%s]\",label, sources.get(label)));\n+\t\t\t\t\tString replacement = targets.get(label);\n+\t\t\t\t\tif (StringUtils.isNotEmpty(replacement)) {\n+\t\t\t\t\t\tquery = matcher.replaceAll(replacement);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tquery = matcher.replaceAll(\"\");\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (StringUtils.isEmpty(query)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn query;\n+\t}\n+\n+\t/**\n+\t * Compiles a pattern with necessary flags.\n+\t * @param str String to be compiled.\n+\t * @return Output pattern.\n+\t */\n+\tprotected Pattern toPattern(String str) {\n+\t\t// Make sure there are no greedy matchers.\n+\t\tString pattern = str.replaceAll(\"\\\\.\\\\*\", \".*?\");\n+\t\tlog.trace(\"Compiling pattern [\" + pattern + \"]\");\n+\t\treturn Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);\n+\t}\n+\n+\t/**\n+\t * Reads data from SOURCE_CSV file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba2b42bac6cee2400f90b23889233e3da9b267a"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzUxMzI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/SqlTranslator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoxMzo1NVrOGrbldQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoxMzo1NVrOGrbldQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MzkwOQ==", "bodyText": "Ik vind het raar om een timeout mee te geven voor het lokaal ophalen van een bestand.  Zie ook dat de betreffende methode nog nergens anders gebruikt wordt. De methode an zich is wel handig maar dan wel de connectietimeout argumenten verwijderen.\nIn de methode zit een catch om UnsupportedEncodingException heen en vervolgens wordt een IOException gegooid, is ook een beetje raar toch? Die inheriten elkaar...", "url": "https://github.com/ibissource/iaf/pull/598#discussion_r448193909", "createdAt": "2020-07-01T08:13:55Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/SqlTranslator.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.jdbc.dbms;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.logging.log4j.Logger;\n+\n+import nl.nn.adapterframework.jdbc.JdbcException;\n+import nl.nn.adapterframework.util.ClassUtils;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+/**\n+ * Sql syntax translator to translate queries\n+ * for different database management systems (e.g. Oracle to MsSql or PostgreSql to MySql)\n+ */\n+public class SqlTranslator implements ISqlTranslator {\n+\tprivate final Logger log = LogUtil.getLogger(this);\n+\n+\tprivate static final String PATTERN_FILE = \"sql-translate.properties\";\n+\n+\tprivate Map<String,Pattern> sources;\n+\tprivate Map<String,String>  targets;\n+\t\n+\tprivate boolean configured=false;\n+\n+\tpublic SqlTranslator(String source, String target) throws JdbcException {\n+\t\tif (StringUtils.isEmpty(source) || StringUtils.isEmpty(target))\n+\t\t\tthrow new IllegalArgumentException(\"Can not translate from [\" + source + \"] to [\" + target + \"]\");\n+\t\tif (source.equalsIgnoreCase(target)) {\n+\t\t\tlog.warn(\"Same source and target for SqlTranslator. Skipping pattern generation.\");\n+\t\t\treturn;\n+\t\t}\n+\t\ttry {\n+\t\t\tif (!readPatterns(source,target)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new JdbcException(\"cannot create SqlTranslator\",e);\n+\t\t}\n+\t\tconfigured = true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean canConvert(String from, String to) {\n+\t\treturn configured;\n+\t}\n+\t\n+\t/**\n+\t * Translates the given query to the target language.\n+\t * Uses the translation rules set by this and the target translators.\n+\t *\n+\t * @param original Original query to be translated.\n+\t * @return Translated query.\n+\t */\n+\t@Override\n+\tpublic String translate(String original) {\n+\t\tString query = original;\n+\t\tif (sources!=null) {\n+\t\t\tfor (String label:sources.keySet()) {\n+\t\t\t\tMatcher matcher = sources.get(label).matcher(query);\n+\t\t\t\tif (matcher.find()) {\n+\t\t\t\t\tif (log.isTraceEnabled()) log.trace(String.format(\"Found a match for label [%s] pattern [%s]\",label, sources.get(label)));\n+\t\t\t\t\tString replacement = targets.get(label);\n+\t\t\t\t\tif (StringUtils.isNotEmpty(replacement)) {\n+\t\t\t\t\t\tquery = matcher.replaceAll(replacement);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tquery = matcher.replaceAll(\"\");\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (StringUtils.isEmpty(query)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn query;\n+\t}\n+\n+\t/**\n+\t * Compiles a pattern with necessary flags.\n+\t * @param str String to be compiled.\n+\t * @return Output pattern.\n+\t */\n+\tprotected Pattern toPattern(String str) {\n+\t\t// Make sure there are no greedy matchers.\n+\t\tString pattern = str.replaceAll(\"\\\\.\\\\*\", \".*?\");\n+\t\tlog.trace(\"Compiling pattern [\" + pattern + \"]\");\n+\t\treturn Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);\n+\t}\n+\n+\t/**\n+\t * Reads data from SOURCE_CSV file.\n+\t * Puts the data in memory to be used later.\n+\t * @throws IOException If database name can not be found or file can not be read.\n+\t */\n+\tprivate boolean readPatterns(String sourceDialect, String targetDialect) throws IOException {\n+\t\tsources = new LinkedHashMap<>();\n+\t\ttargets = new LinkedHashMap<>();\n+\n+\t\tString sourceMatch=\".source.\"+sourceDialect.replaceAll(\" \", \"_\");\n+\t\tString targetMatch=\".target.\"+targetDialect.replaceAll(\" \", \"_\");\n+\n+\t\tURL resourceUrl = ClassUtils.getResourceURL(Thread.currentThread().getContextClassLoader(), PATTERN_FILE);\n+\n+\t\ttry (BufferedReader reader = new BufferedReader(ClassUtils.urlToReader(resourceUrl, 10000))) {\n+\t\t\tString line= reader.readLine();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba2b42bac6cee2400f90b23889233e3da9b267a"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzUyMDYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/SqlTranslator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoxNTo1OVrOGrbqAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoxNTo1OVrOGrbqAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5NTA3Mw==", "bodyText": "install of configured?", "url": "https://github.com/ibissource/iaf/pull/598#discussion_r448195073", "createdAt": "2020-07-01T08:15:59Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/SqlTranslator.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n+package nl.nn.adapterframework.jdbc.dbms;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.logging.log4j.Logger;\n+\n+import nl.nn.adapterframework.jdbc.JdbcException;\n+import nl.nn.adapterframework.util.ClassUtils;\n+import nl.nn.adapterframework.util.LogUtil;\n+\n+/**\n+ * Sql syntax translator to translate queries\n+ * for different database management systems (e.g. Oracle to MsSql or PostgreSql to MySql)\n+ */\n+public class SqlTranslator implements ISqlTranslator {\n+\tprivate final Logger log = LogUtil.getLogger(this);\n+\n+\tprivate static final String PATTERN_FILE = \"sql-translate.properties\";\n+\n+\tprivate Map<String,Pattern> sources;\n+\tprivate Map<String,String>  targets;\n+\t\n+\tprivate boolean configured=false;\n+\n+\tpublic SqlTranslator(String source, String target) throws JdbcException {\n+\t\tif (StringUtils.isEmpty(source) || StringUtils.isEmpty(target))\n+\t\t\tthrow new IllegalArgumentException(\"Can not translate from [\" + source + \"] to [\" + target + \"]\");\n+\t\tif (source.equalsIgnoreCase(target)) {\n+\t\t\tlog.warn(\"Same source and target for SqlTranslator. Skipping pattern generation.\");\n+\t\t\treturn;\n+\t\t}\n+\t\ttry {\n+\t\t\tif (!readPatterns(source,target)) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new JdbcException(\"cannot create SqlTranslator\",e);\n+\t\t}\n+\t\tconfigured = true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean canConvert(String from, String to) {\n+\t\treturn configured;\n+\t}\n+\t\n+\t/**\n+\t * Translates the given query to the target language.\n+\t * Uses the translation rules set by this and the target translators.\n+\t *\n+\t * @param original Original query to be translated.\n+\t * @return Translated query.\n+\t */\n+\t@Override\n+\tpublic String translate(String original) {\n+\t\tString query = original;\n+\t\tif (sources!=null) {\n+\t\t\tfor (String label:sources.keySet()) {\n+\t\t\t\tMatcher matcher = sources.get(label).matcher(query);\n+\t\t\t\tif (matcher.find()) {\n+\t\t\t\t\tif (log.isTraceEnabled()) log.trace(String.format(\"Found a match for label [%s] pattern [%s]\",label, sources.get(label)));\n+\t\t\t\t\tString replacement = targets.get(label);\n+\t\t\t\t\tif (StringUtils.isNotEmpty(replacement)) {\n+\t\t\t\t\t\tquery = matcher.replaceAll(replacement);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tquery = matcher.replaceAll(\"\");\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tif (StringUtils.isEmpty(query)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn query;\n+\t}\n+\n+\t/**\n+\t * Compiles a pattern with necessary flags.\n+\t * @param str String to be compiled.\n+\t * @return Output pattern.\n+\t */\n+\tprotected Pattern toPattern(String str) {\n+\t\t// Make sure there are no greedy matchers.\n+\t\tString pattern = str.replaceAll(\"\\\\.\\\\*\", \".*?\");\n+\t\tlog.trace(\"Compiling pattern [\" + pattern + \"]\");\n+\t\treturn Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);\n+\t}\n+\n+\t/**\n+\t * Reads data from SOURCE_CSV file.\n+\t * Puts the data in memory to be used later.\n+\t * @throws IOException If database name can not be found or file can not be read.\n+\t */\n+\tprivate boolean readPatterns(String sourceDialect, String targetDialect) throws IOException {\n+\t\tsources = new LinkedHashMap<>();\n+\t\ttargets = new LinkedHashMap<>();\n+\n+\t\tString sourceMatch=\".source.\"+sourceDialect.replaceAll(\" \", \"_\");\n+\t\tString targetMatch=\".target.\"+targetDialect.replaceAll(\" \", \"_\");\n+\n+\t\tURL resourceUrl = ClassUtils.getResourceURL(Thread.currentThread().getContextClassLoader(), PATTERN_FILE);\n+\n+\t\ttry (BufferedReader reader = new BufferedReader(ClassUtils.urlToReader(resourceUrl, 10000))) {\n+\t\t\tString line= reader.readLine();\n+\t\t\twhile (line!=null) {\n+\t\t\t\tint equalsPos = line.indexOf(\"=\");\n+\t\t\t\tif (!line.startsWith(\"#\") && equalsPos>=0) {\n+\t\t\t\t\tString key = line.substring(0,equalsPos).trim();\n+\t\t\t\t\tString value = line.substring(equalsPos+1).trim();\n+\t\t\t\t\tif (log.isTraceEnabled()) log.trace(\"read key [\"+key+\"] value [\"+value+\"]\");\n+\t\t\t\t\tint sourceMatchPos = key.indexOf(sourceMatch);\n+\t\t\t\t\tif (sourceMatchPos>0) {\n+\t\t\t\t\t\tString label = key.substring(0,sourceMatchPos);\n+\t\t\t\t\t\tsources.put(label, toPattern(value));\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tint targetMatchPos = key.indexOf(targetMatch);\n+\t\t\t\t\t\tif (targetMatchPos>0) {\n+\t\t\t\t\t\t\tString label = key.substring(0,targetMatchPos);\n+\t\t\t\t\t\t\ttargets.put(label, value);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tline= reader.readLine();\n+\t\t\t}\n+\t\t}\n+\t\tfor (Iterator<String> it=sources.keySet().iterator();it.hasNext();) {\n+\t\t\tString label = it.next();\n+\t\t\tString source = sources.get(label).toString();\n+\t\t\tString target = targets.get(label);\n+\t\t\tif (target==null || target.equals(source) || target.equals(\"$0\")) {\n+\t\t\t\tit.remove();\n+\t\t\t} else {\n+\t\t\t\tlog.debug(String.format(\"install translation pattern label [%s] source [%s] target [%s]\", label,  source,  target));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba2b42bac6cee2400f90b23889233e3da9b267a"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzUyODY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/resources/sql-translate.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoxODowNVrOGrbu8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoxODowNVrOGrbu8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5NjMzNg==", "bodyText": "Misschien is het handig boven aan dit bestand wat uitleg te geven hoe de opbouw in elkaar zit. Je mag comments (met # prefix) gebruiken.", "url": "https://github.com/ibissource/iaf/pull/598#discussion_r448196336", "createdAt": "2020-07-01T08:18:05Z", "author": {"login": "nielsm5"}, "path": "core/src/main/resources/sql-translate.properties", "diffHunk": "@@ -0,0 +1,103 @@\n+nextval.source.Oracle=(\\w+)\\.NEXTVAL\n+nextval.target.MS_SQL=NEXT VALUE FOR $1\n+nextval.target.MySql =NULL\n+\n+currval.source.Oracle=(\\w+)\\.CURRVAL\n+currval.target.MS_SQL=(SELECT current_value FROM sys.sequences WHERE name = '$1')\n+currval.target.MySql =NULL\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba2b42bac6cee2400f90b23889233e3da9b267a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzU0ODQzOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/jdbc/dbms/OracleToH2TranslatorDedicatedTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoyMzoxNFrOGrb7Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoyMzoxNFrOGrb7Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5OTQ3OA==", "bodyText": "Ik snap de Dedicated niet in de naam....", "url": "https://github.com/ibissource/iaf/pull/598#discussion_r448199478", "createdAt": "2020-07-01T08:23:14Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/jdbc/dbms/OracleToH2TranslatorDedicatedTest.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package nl.nn.adapterframework.jdbc.dbms;\n+\n+import java.sql.SQLException;\n+\n+import nl.nn.adapterframework.jdbc.JdbcException;\n+import nl.nn.adapterframework.jdbc.QueryExecutionContext;\n+\n+public class OracleToH2TranslatorDedicatedTest extends OracleToH2TranslatorTest {\n+\n+\t@Override\n+\tprotected String convertQuery(QueryExecutionContext queryExecutionContext, boolean canModifyQueryExecutionContext) throws JdbcException, SQLException {\n+\t\treturn OracleToH2Translator.convertQuery(queryExecutionContext, canModifyQueryExecutionContext);\n+\t}\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba2b42bac6cee2400f90b23889233e3da9b267a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzU2MDE1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/jdbc/dbms/SqlTranslatorTestOracleToH2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoyNjowNlrOGrcCYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoyNjowNlrOGrcCYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwMTMxMg==", "bodyText": "De IbisStore is wel de belangrijkste tabel. Omdat dit nu uit staat wil dat zeggen dat geen identity translaties gedaan kunnen worden?", "url": "https://github.com/ibissource/iaf/pull/598#discussion_r448201312", "createdAt": "2020-07-01T08:26:06Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/jdbc/dbms/SqlTranslatorTestOracleToH2.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package nl.nn.adapterframework.jdbc.dbms;\n+\n+import java.sql.SQLException;\n+\n+import org.junit.Ignore;\n+\n+import nl.nn.adapterframework.jdbc.JdbcException;\n+import nl.nn.adapterframework.jdbc.QueryExecutionContext;\n+\n+public class SqlTranslatorTestOracleToH2 extends OracleToH2TranslatorTest {\n+\n+\t@Override\n+\tprotected String convertQuery(QueryExecutionContext queryExecutionContext, boolean canModifyQueryExecutionContext) throws JdbcException, SQLException {\n+\t\tSqlTranslator translator = new SqlTranslator(\"Oracle\", \"H2\");\n+\t\treturn translator.translate(queryExecutionContext.getQuery());\n+\t}\n+\n+\t@Ignore(\"too hard for SqlTranslator to create identity column\")\n+\t@Override\n+\tpublic void testIgnoreAlterTableIbisStore() throws JdbcException, SQLException {\n+\t\t//super.testIgnoreAlterTableIbisStore();\n+\t}\n+\t@Ignore(\"too hard for SqlTranslator to create identity column\")\n+\t@Override\n+\tpublic void testConvertQueryCreateTableIbisStore() throws JdbcException, SQLException {\n+\t\t//super.testConvertQueryCreateTableIbisStore();\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba2b42bac6cee2400f90b23889233e3da9b267a"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzU2MzA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoyNjo1MVrOGrcEOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoyNjo1MVrOGrcEOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwMTc4Nw==", "bodyText": "Graag bij de warnConvertQuery een comment waarom dit zo in elkaar zit", "url": "https://github.com/ibissource/iaf/pull/598#discussion_r448201787", "createdAt": "2020-07-01T08:26:51Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java", "diffHunk": "@@ -413,10 +417,49 @@ public String getBooleanValue(boolean value) {\n \t\treturn (\"\"+value).toUpperCase();\n \t}\n \n+\tprotected ISqlTranslator createTranslator(String source, String target) throws JdbcException {\n+\t\treturn new SqlTranslator(source, target);\n+\t}\n+\n \t@Override\n \tpublic void convertQuery(QueryExecutionContext queryExecutionContext, String sqlDialectFrom) throws SQLException, JdbcException {\n \t\tif (isQueryConversionRequired(sqlDialectFrom)) {\n-\t\t\twarnConvertQuery(sqlDialectFrom);\n+\t\t\tISqlTranslator translator = sqlTranslators.get(sqlDialectFrom);\n+\t\t\tif (translator==null) {\n+\t\t\t\tif (sqlTranslators.containsKey(sqlDialectFrom)) {\n+\t\t\t\t\twarnConvertQuery(sqlDialectFrom);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\ttry {\n+\t\t\t\t\ttranslator = createTranslator(sqlDialectFrom, getDbmsName());\n+\t\t\t\t} catch (IllegalArgumentException e) {\n+\t\t\t\t\twarnConvertQuery(sqlDialectFrom);\n+\t\t\t\t\tsqlTranslators.put(sqlDialectFrom, null);\n+\t\t\t\t\treturn;\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tthrow new JdbcException(\"Could not translate sql query from \" + sqlDialectFrom + \" to \" + getDbmsName(), e);\n+\t\t\t\t}\n+\t\t\t\tif (!translator.canConvert(sqlDialectFrom, getDbmsName())) {\n+\t\t\t\t\twarnConvertQuery(sqlDialectFrom);\n+\t\t\t\t\tsqlTranslators.put(sqlDialectFrom, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba2b42bac6cee2400f90b23889233e3da9b267a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzU2Njk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoyNzo1M1rOGrcGzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoyNzo1M1rOGrcGzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwMjQ0NQ==", "bodyText": "Als ik echt mag zeuren vind ik dat we ergens onze dialecten hard moeten defineren. Nu gebeurd dat half in een spring bestand en kan iedereen elk dialect opgeven dat hij of zij wilt.", "url": "https://github.com/ibissource/iaf/pull/598#discussion_r448202445", "createdAt": "2020-07-01T08:27:53Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/GenericDbmsSupport.java", "diffHunk": "@@ -413,10 +417,49 @@ public String getBooleanValue(boolean value) {\n \t\treturn (\"\"+value).toUpperCase();\n \t}\n \n+\tprotected ISqlTranslator createTranslator(String source, String target) throws JdbcException {\n+\t\treturn new SqlTranslator(source, target);\n+\t}\n+\n \t@Override\n \tpublic void convertQuery(QueryExecutionContext queryExecutionContext, String sqlDialectFrom) throws SQLException, JdbcException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba2b42bac6cee2400f90b23889233e3da9b267a"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 425, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}