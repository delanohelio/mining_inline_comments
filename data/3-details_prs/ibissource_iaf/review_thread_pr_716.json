{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3ODM5Mzk4", "number": 716, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzoyNTowMlrOD83tZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNToyNjo0NFrOEEWPtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTUzODk0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/CounterStatisticTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzoyNTowMlrOGWEvfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDo0MzoyMlrOGY1hqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5OTU1MQ==", "bodyText": "code style dictates that the closing bracket, when present should be on a new line.\nApplies in multiple tests", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r425799551", "createdAt": "2020-05-15T13:25:02Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/CounterStatisticTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * CounterStatistic Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class CounterStatisticTest {\n+\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformAction01() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(0);\n+        assertEquals(cs.getValue(), 10);\n+    }\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformAction2() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(2);\n+        assertEquals(cs.getValue(), 0);    }\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformAction34() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(3);\n+        assertEquals(cs.getValue(), 10);    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2240df43859781c98a00ec2e15820c20f92fd06"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5NTk3Nw==", "bodyText": "changed it", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r428695977", "createdAt": "2020-05-21T14:43:22Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/CounterStatisticTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * CounterStatistic Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class CounterStatisticTest {\n+\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformAction01() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(0);\n+        assertEquals(cs.getValue(), 10);\n+    }\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformAction2() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(2);\n+        assertEquals(cs.getValue(), 0);    }\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformAction34() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(3);\n+        assertEquals(cs.getValue(), 10);    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc5OTU1MQ=="}, "originalCommit": {"oid": "d2240df43859781c98a00ec2e15820c20f92fd06"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTU0NjQ5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMzoyNjo1NlrOGWE0TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDo0Mzo0N1rOGY1inw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwMDc4MQ==", "bodyText": "Try to also test the function of this class. set a limit, add limit +1 messages to the vector.\nTest the size\nTest that the first item has been removed", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r425800781", "createdAt": "2020-05-15T13:26:56Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * SizeLimitedVector Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class SizeLimitedVectorTest {\n+\n+\n+    /**\n+     *\n+     * Method: add(Object o)\n+     *\n+     */\n+    @Test\n+    public void testAdd() throws Exception {\n+        SizeLimitedVector slv = new SizeLimitedVector(10);\n+        slv.add(\"testString\");\n+        assertEquals(slv.getMaxSize(), 10);\n+        assertEquals(slv.get(0), \"testString\");\n+    }\n+\n+    /**\n+     *\n+     * Method: setMaxSize(int maxSize)\n+     *\n+     */\n+    @Test\n+    public void testSetMaxSize() throws Exception {\n+        SizeLimitedVector slv = new SizeLimitedVector(10);\n+        slv.setMaxSize(14);\n+        assertEquals(slv.getMaxSize(), 14);\n+    }\n+\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2240df43859781c98a00ec2e15820c20f92fd06"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY5NjIyMw==", "bodyText": "If I understood what you meant correctly, now it is tested", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r428696223", "createdAt": "2020-05-21T14:43:47Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * SizeLimitedVector Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class SizeLimitedVectorTest {\n+\n+\n+    /**\n+     *\n+     * Method: add(Object o)\n+     *\n+     */\n+    @Test\n+    public void testAdd() throws Exception {\n+        SizeLimitedVector slv = new SizeLimitedVector(10);\n+        slv.add(\"testString\");\n+        assertEquals(slv.getMaxSize(), 10);\n+        assertEquals(slv.get(0), \"testString\");\n+    }\n+\n+    /**\n+     *\n+     * Method: setMaxSize(int maxSize)\n+     *\n+     */\n+    @Test\n+    public void testSetMaxSize() throws Exception {\n+        SizeLimitedVector slv = new SizeLimitedVector(10);\n+        slv.setMaxSize(14);\n+        assertEquals(slv.getMaxSize(), 14);\n+    }\n+\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgwMDc4MQ=="}, "originalCommit": {"oid": "d2240df43859781c98a00ec2e15820c20f92fd06"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzA0NTc0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo0NDoyNlrOGZUPNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDowNjo1MlrOGdzbdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5OTE1Nw==", "bodyText": "What exactly are you testing here? this catch clause should never happen?\nMaybe add some test assertions :)", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r429199157", "createdAt": "2020-05-22T11:44:26Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * SizeLimitedVector Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class SizeLimitedVectorTest {\n+\n+\n+    /**\n+     *\n+     * Method: add(Object o)\n+     *\n+     */\n+    @Test\n+    public void testAdd() throws ArrayIndexOutOfBoundsException {\n+        SizeLimitedVector slv = new SizeLimitedVector(10);\n+        slv.add(\"testString\");\n+        assertEquals(slv.getMaxSize(), 10);\n+        assertEquals(slv.get(0), \"testString\");\n+\n+    }\n+\n+\n+    @Test\n+    public void testMaxSizePassed() throws ArrayIndexOutOfBoundsException {\n+        try{SizeLimitedVector slv = new SizeLimitedVector(1);\n+        slv.add(13);\n+        slv.add(14);\n+        }\n+        catch (ArrayIndexOutOfBoundsException e) {\n+            fail(\"array capacity is passed, capacity was 1, but 2 elements got added\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236e3082633a26c4c8398a5741446b70c232f3c1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMTAxNQ==", "bodyText": "why shouldn't the catch clause happen? The second add operation passes the size of the vector thus raises and AIOoBounds exception. I'm testing the case that if one adds more items to the vector than the size obliges, what happens next. In the original method .add there was not such a case that raises an expception so I used my own one.", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r429201015", "createdAt": "2020-05-22T11:49:07Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * SizeLimitedVector Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class SizeLimitedVectorTest {\n+\n+\n+    /**\n+     *\n+     * Method: add(Object o)\n+     *\n+     */\n+    @Test\n+    public void testAdd() throws ArrayIndexOutOfBoundsException {\n+        SizeLimitedVector slv = new SizeLimitedVector(10);\n+        slv.add(\"testString\");\n+        assertEquals(slv.getMaxSize(), 10);\n+        assertEquals(slv.get(0), \"testString\");\n+\n+    }\n+\n+\n+    @Test\n+    public void testMaxSizePassed() throws ArrayIndexOutOfBoundsException {\n+        try{SizeLimitedVector slv = new SizeLimitedVector(1);\n+        slv.add(13);\n+        slv.add(14);\n+        }\n+        catch (ArrayIndexOutOfBoundsException e) {\n+            fail(\"array capacity is passed, capacity was 1, but 2 elements got added\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5OTE1Nw=="}, "originalCommit": {"oid": "236e3082633a26c4c8398a5741446b70c232f3c1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0MTczOQ==", "bodyText": "The whole point of the SizeLimitedVector is that you can append as many things to it as you like but it only stores the last X amount.", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r430241739", "createdAt": "2020-05-26T08:27:45Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * SizeLimitedVector Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class SizeLimitedVectorTest {\n+\n+\n+    /**\n+     *\n+     * Method: add(Object o)\n+     *\n+     */\n+    @Test\n+    public void testAdd() throws ArrayIndexOutOfBoundsException {\n+        SizeLimitedVector slv = new SizeLimitedVector(10);\n+        slv.add(\"testString\");\n+        assertEquals(slv.getMaxSize(), 10);\n+        assertEquals(slv.get(0), \"testString\");\n+\n+    }\n+\n+\n+    @Test\n+    public void testMaxSizePassed() throws ArrayIndexOutOfBoundsException {\n+        try{SizeLimitedVector slv = new SizeLimitedVector(1);\n+        slv.add(13);\n+        slv.add(14);\n+        }\n+        catch (ArrayIndexOutOfBoundsException e) {\n+            fail(\"array capacity is passed, capacity was 1, but 2 elements got added\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5OTE1Nw=="}, "originalCommit": {"oid": "236e3082633a26c4c8398a5741446b70c232f3c1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkwNDUwMw==", "bodyText": "yes, I changed the test accordingly.", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r433904503", "createdAt": "2020-06-02T14:06:52Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * SizeLimitedVector Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class SizeLimitedVectorTest {\n+\n+\n+    /**\n+     *\n+     * Method: add(Object o)\n+     *\n+     */\n+    @Test\n+    public void testAdd() throws ArrayIndexOutOfBoundsException {\n+        SizeLimitedVector slv = new SizeLimitedVector(10);\n+        slv.add(\"testString\");\n+        assertEquals(slv.getMaxSize(), 10);\n+        assertEquals(slv.get(0), \"testString\");\n+\n+    }\n+\n+\n+    @Test\n+    public void testMaxSizePassed() throws ArrayIndexOutOfBoundsException {\n+        try{SizeLimitedVector slv = new SizeLimitedVector(1);\n+        slv.add(13);\n+        slv.add(14);\n+        }\n+        catch (ArrayIndexOutOfBoundsException e) {\n+            fail(\"array capacity is passed, capacity was 1, but 2 elements got added\");\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5OTE1Nw=="}, "originalCommit": {"oid": "236e3082633a26c4c8398a5741446b70c232f3c1"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzA0ODI5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/FilenameUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo0NToyN1rOGZUQ6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDowNjozMVrOGdzaJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5OTU5Mg==", "bodyText": "This class didn't require any tests. It's a utilities class copied from apache commons io.\nThe only reason it's here is in order to avoid websphere compilations and runtime issues.", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r429199592", "createdAt": "2020-05-22T11:45:27Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FilenameUtilsTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+/**\n+ * FilenameUtils Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FilenameUtilsTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236e3082633a26c4c8398a5741446b70c232f3c1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkwNDE2Nw==", "bodyText": "okay, more communication will be assured on testing new classes.", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r433904167", "createdAt": "2020-06-02T14:06:31Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FilenameUtilsTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+/**\n+ * FilenameUtils Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FilenameUtilsTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5OTU5Mg=="}, "originalCommit": {"oid": "236e3082633a26c4c8398a5741446b70c232f3c1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzA0OTQ5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/FilenameUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo0NTo1MlrOGZURnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo1Mjo0N1rOGZUcUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5OTc3Mw==", "bodyText": "You might run on windows, but many of our servers do not :) this will fail on Travis and Jenkins", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r429199773", "createdAt": "2020-05-22T11:45:52Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FilenameUtilsTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+/**\n+ * FilenameUtils Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FilenameUtilsTest {\n+\n+\n+\n+    /**\n+     * Method: isSystemWindows()\n+     */\n+    @Test\n+    public void testIsSystemWindows() throws Exception {\n+        assertEquals(FilenameUtils.isSystemWindows(), true);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "236e3082633a26c4c8398a5741446b70c232f3c1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMjUxMw==", "bodyText": "yes indeed, I removed this test case.", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r429202513", "createdAt": "2020-05-22T11:52:47Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/FilenameUtilsTest.java", "diffHunk": "@@ -0,0 +1,272 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+/**\n+ * FilenameUtils Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FilenameUtilsTest {\n+\n+\n+\n+    /**\n+     * Method: isSystemWindows()\n+     */\n+    @Test\n+    public void testIsSystemWindows() throws Exception {\n+        assertEquals(FilenameUtils.isSystemWindows(), true);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5OTc3Mw=="}, "originalCommit": {"oid": "236e3082633a26c4c8398a5741446b70c232f3c1"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTg4NzYwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyOTozNlrOGaT8Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODoyOTozNlrOGaT8Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0MjgyMw==", "bodyText": "Please also add 14+1 elements and verify more then just the setter being changed.\ne.g. calling getSize or capacity to verify the contents of the vector.", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r430242823", "createdAt": "2020-05-26T08:29:36Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * SizeLimitedVector Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class SizeLimitedVectorTest {\n+\n+\n+    /**\n+     *\n+     * Method: add(Object o)\n+     *\n+     */\n+    @Test\n+    public void testAdd() throws ArrayIndexOutOfBoundsException {\n+        SizeLimitedVector slv = new SizeLimitedVector(10);\n+        slv.add(\"testString\");\n+        assertEquals(slv.getMaxSize(), 10);\n+        assertEquals(slv.get(0), \"testString\");\n+\n+    }\n+\n+\n+    @Test\n+    public void testMaxSizePassed() throws ArrayIndexOutOfBoundsException {\n+        try{SizeLimitedVector slv = new SizeLimitedVector(1);\n+        slv.add(13);\n+        slv.add(14);\n+        }\n+        catch (ArrayIndexOutOfBoundsException e) {\n+            fail(\"array capacity is passed, capacity was 1, but 2 elements got added\");\n+        }\n+\n+    }\n+    /**\n+     *\n+     * Method: setMaxSize(int maxSize)\n+     *\n+     */\n+    @Test\n+    public void testSetMaxSize() throws Exception {\n+        SizeLimitedVector slv = new SizeLimitedVector(10);\n+        slv.setMaxSize(14);\n+        assertEquals(slv.getMaxSize(), 14);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b24b93afb78d5645b992d2324ec0d927ad19d7"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTg5MTYwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODozMDo0MlrOGaT-ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODozOToyNFrOGaUTDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0MzQ2Ng==", "bodyText": "You dont have to declare this RuntimeException here do you? Non of the functions are throwing any exceptions", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r430243466", "createdAt": "2020-05-26T08:30:42Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * SizeLimitedVector Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class SizeLimitedVectorTest {\n+\n+\n+    /**\n+     *\n+     * Method: add(Object o)\n+     *\n+     */\n+    @Test\n+    public void testAdd() throws ArrayIndexOutOfBoundsException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b24b93afb78d5645b992d2324ec0d927ad19d7"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0ODcxNg==", "bodyText": "Yes. I am going to remove it, thanks for pointing out.", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r430248716", "createdAt": "2020-05-26T08:39:24Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * SizeLimitedVector Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class SizeLimitedVectorTest {\n+\n+\n+    /**\n+     *\n+     * Method: add(Object o)\n+     *\n+     */\n+    @Test\n+    public void testAdd() throws ArrayIndexOutOfBoundsException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0MzQ2Ng=="}, "originalCommit": {"oid": "88b24b93afb78d5645b992d2324ec0d927ad19d7"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTg5NDc5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/CounterStatisticTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODozMTozNFrOGaUAnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODo0MDo1NFrOGaUWjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0Mzk5Nw==", "bodyText": "Try to use more descriptive names.  testAction1, testAction2, etc. is a bit vague when you're going through the log files :)", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r430243997", "createdAt": "2020-05-26T08:31:34Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/CounterStatisticTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * CounterStatistic Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class CounterStatisticTest {\n+\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformAction01() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(0);\n+        assertEquals(cs.getValue(), 10);\n+    }\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformAction2() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(2);\n+        assertEquals(cs.getValue(), 0);\n+    }\n+    \n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformAction34() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b24b93afb78d5645b992d2324ec0d927ad19d7"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0OTYxNA==", "bodyText": "Indeed, the naming I used looks terrible, I used numbers to reflect the action with number given in the CounterStatistic class, however using the action names rather than the number will be more descriptive. I am changing that.", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r430249614", "createdAt": "2020-05-26T08:40:54Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/CounterStatisticTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * CounterStatistic Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class CounterStatisticTest {\n+\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformAction01() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(0);\n+        assertEquals(cs.getValue(), 10);\n+    }\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformAction2() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(2);\n+        assertEquals(cs.getValue(), 0);\n+    }\n+    \n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformAction34() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0Mzk5Nw=="}, "originalCommit": {"oid": "88b24b93afb78d5645b992d2324ec0d927ad19d7"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTM2NDIxOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzozMzowOFrOGfupuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzozMzowOFrOGfupuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyMzM4NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r435923384", "createdAt": "2020-06-05T13:33:08Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/SizeLimitedVectorTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * SizeLimitedVector Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class SizeLimitedVectorTest {\n+\n+\n+    /**\n+     *\n+     * Method: add(Object o)\n+     *\n+     */\n+    @Test\n+    public void testAdd() {\n+        SizeLimitedVector slv = new SizeLimitedVector(10);\n+        slv.add(\"testString\");\n+        assertEquals(slv.getMaxSize(), 10);\n+        assertEquals(slv.get(0), \"testString\");\n+\n+    }\n+\n+\n+    @Test\n+    public void testMaxSizePassed() throws ArrayIndexOutOfBoundsException {\n+        SizeLimitedVector slv = new SizeLimitedVector(1);\n+        slv.add(13);\n+        slv.add(14);\n+        assertEquals(slv.get(0), 14);\n+\n+    }\n+    /**\n+     *\n+     * Method: setMaxSize(int maxSize)\n+     *\n+     */\n+    @Test\n+    public void testSetMaxSize() throws Exception {\n+        SizeLimitedVector slv = new SizeLimitedVector(5);\n+        slv.setMaxSize(6);\n+        slv.add(1); slv.add(2); slv.add(3); slv.add(4); slv.add(5); slv.add(6); slv.add(7);\n+        assertEquals(slv.getMaxSize(), 6);\n+        assertEquals(slv.capacity(), 10);\n+        assertEquals(slv.size(), 6);\n+        assertEquals(slv.get(0), 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTM3Njk4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/CounterStatisticTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzozNjozN1rOGfuyJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDowOTo0OVrOGhCdlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNTU0Mw==", "bodyText": "You are testing the actions here, instead of using the integer values, 123, could you use the more descriptive HasStatistics integer fields? So action 2 would become HasStatistics.STATISTICS_ACTION_RESET.\nMaybe you could also write 2 more tests for action 3 and 4 (mark main and mark full)", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r435925543", "createdAt": "2020-06-05T13:36:37Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/CounterStatisticTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * CounterStatistic Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class CounterStatisticTest {\n+\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformActionSummaryOrFull() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(0);\n+        assertEquals(cs.getValue(), 10);\n+    }\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformActionReset() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(2);\n+        assertEquals(cs.getValue(), 0);\n+    }\n+    \n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformActionMarkMainOrFull() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(3);\n+        assertEquals(cs.getValue(), 10);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIxMDk0NA==", "bodyText": "will add.", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r437210944", "createdAt": "2020-06-09T07:59:32Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/CounterStatisticTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * CounterStatistic Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class CounterStatisticTest {\n+\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformActionSummaryOrFull() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(0);\n+        assertEquals(cs.getValue(), 10);\n+    }\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformActionReset() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(2);\n+        assertEquals(cs.getValue(), 0);\n+    }\n+    \n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformActionMarkMainOrFull() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(3);\n+        assertEquals(cs.getValue(), 10);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNTU0Mw=="}, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5NjUzMw==", "bodyText": "added", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r437296533", "createdAt": "2020-06-09T10:09:49Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/CounterStatisticTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * CounterStatistic Tester.\n+ *\n+ * @author <Sina Sen>\n+\n+ */\n+public class CounterStatisticTest {\n+\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformActionSummaryOrFull() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(0);\n+        assertEquals(cs.getValue(), 10);\n+    }\n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformActionReset() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(2);\n+        assertEquals(cs.getValue(), 0);\n+    }\n+    \n+\n+    /**\n+     *\n+     * Method: performAction(int action)\n+     *\n+     */\n+    @Test\n+    public void testPerformActionMarkMainOrFull() throws Exception {\n+        CounterStatistic cs = new CounterStatistic(10);\n+        cs.performAction(3);\n+        assertEquals(cs.getValue(), 10);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNTU0Mw=="}, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTM5MjA4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzo0MDozMFrOGfu7tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxNzo0MVrOGhCuRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNzk4OA==", "bodyText": "You're not testing the endOfLineString string here?", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r435927988", "createdAt": "2020-06-05T13:40:30Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 287}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyODcxNA==", "bodyText": "I see you're testing it in another test, maybe to not confuse things leave it blank or null instead :)", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r435928714", "createdAt": "2020-06-05T13:41:40Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNzk4OA=="}, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 287}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwMDgwNQ==", "bodyText": "I removed this test. It was not testing anything unique.", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r437300805", "createdAt": "2020-06-09T10:17:41Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNzk4OA=="}, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 287}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTQwMTYwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzo0MzowNVrOGfvB4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMzoyNzoxMVrOGh0vnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyOTU2OQ==", "bodyText": "Maybe also test the compressed variant to validate if it has actually been compressed", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r435929569", "createdAt": "2020-06-05T13:43:05Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");\n+    }\n+\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringNoXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", false);\n+        assertEquals(s, \"<root> 23    <name>GeeksforGeeks</name> 23    <address> 23        <sector>142</sector> 23        <location>Noida</location> 23    </address> 23</root> r\");\n+    }\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", true);\n+        assertEquals(s, \"&lt;root&gt; 23    &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23    &lt;address&gt; 23        &lt;sector&gt;142&lt;/sector&gt; 23        &lt;location&gt;Noida&lt;/location&gt; 23    &lt;/address&gt; 23&lt;/root&gt; r\");\n+    }\n+\n+\n+\n+    /**\n+     * Method: replace(String source, String from, String to)\n+     */\n+    @Test\n+    public void testReplace() throws Exception {\n+        String a = \"Kobe\";\n+        String res = Misc.replace(a, \"Ko\", \"Phoe\");\n+        assertEquals(res, \"Phoebe\");\n+    }\n+\n+    /**\n+     * Method: concatStrings(String part1, String separator, String part2)\n+     */\n+    @Test\n+    public void testConcatStrings() throws Exception {\n+        String a = \"LeBron\";\n+        String b = \"James\";\n+        String seperator = \"//\";\n+        String res = Misc.concatStrings(a, seperator, b);\n+        assertEquals(res, \"LeBron//James\");\n+    }\n+\n+    /**\n+     * Method: hide(String string)\n+     */\n+    @Test\n+    public void testHideString() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a);\n+        assertEquals(res, \"****\");\n+    }\n+\n+    /**\n+     * Method: hide(String string, int mode)\n+     */\n+    @Test\n+    public void testHideForStringMode() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a, 1);\n+        assertEquals(res, \"t**t\");\n+    }\n+\n+    /**\n+     * Method: byteArrayToString(byte[] input, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testByteArrayToString() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        String res = Misc.byteArrayToString(arr, \"\", true);\n+        assertEquals(res, s);\n+    }\n+\n+    /**\n+     * Method: gzip(String input)\n+     */\n+    @Test\n+    public void testGzipGUnzipInput() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        byte[] zipped = Misc.gzip(arr);\n+        assertEquals(Misc.gunzipToString(zipped), \"test\");\n+    }\n+\n+    @Test\n+    public void testGzipString() throws Exception {\n+        String s = \"you deserved this\";\n+        byte[] zipped = Misc.gzip(s);\n+        assertEquals(Misc.gunzipToString(zipped), \"you deserved this\");\n+\n+    }\n+\n+    /**\n+     * Method: compress(String input)\n+     */\n+    @Test\n+    public void testCompressDecompressInput() throws Exception {\n+        String s = \"test\";\n+        byte[] compressed = Misc.compress(s);\n+        String decompressed = Misc.decompressToString(compressed);\n+        assertEquals(decompressed, \"test\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 406}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAxOTMxMQ==", "bodyText": "I didn't see this yesterday, will take a look at it now.", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r438019311", "createdAt": "2020-06-10T10:22:03Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");\n+    }\n+\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringNoXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", false);\n+        assertEquals(s, \"<root> 23    <name>GeeksforGeeks</name> 23    <address> 23        <sector>142</sector> 23        <location>Noida</location> 23    </address> 23</root> r\");\n+    }\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", true);\n+        assertEquals(s, \"&lt;root&gt; 23    &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23    &lt;address&gt; 23        &lt;sector&gt;142&lt;/sector&gt; 23        &lt;location&gt;Noida&lt;/location&gt; 23    &lt;/address&gt; 23&lt;/root&gt; r\");\n+    }\n+\n+\n+\n+    /**\n+     * Method: replace(String source, String from, String to)\n+     */\n+    @Test\n+    public void testReplace() throws Exception {\n+        String a = \"Kobe\";\n+        String res = Misc.replace(a, \"Ko\", \"Phoe\");\n+        assertEquals(res, \"Phoebe\");\n+    }\n+\n+    /**\n+     * Method: concatStrings(String part1, String separator, String part2)\n+     */\n+    @Test\n+    public void testConcatStrings() throws Exception {\n+        String a = \"LeBron\";\n+        String b = \"James\";\n+        String seperator = \"//\";\n+        String res = Misc.concatStrings(a, seperator, b);\n+        assertEquals(res, \"LeBron//James\");\n+    }\n+\n+    /**\n+     * Method: hide(String string)\n+     */\n+    @Test\n+    public void testHideString() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a);\n+        assertEquals(res, \"****\");\n+    }\n+\n+    /**\n+     * Method: hide(String string, int mode)\n+     */\n+    @Test\n+    public void testHideForStringMode() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a, 1);\n+        assertEquals(res, \"t**t\");\n+    }\n+\n+    /**\n+     * Method: byteArrayToString(byte[] input, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testByteArrayToString() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        String res = Misc.byteArrayToString(arr, \"\", true);\n+        assertEquals(res, s);\n+    }\n+\n+    /**\n+     * Method: gzip(String input)\n+     */\n+    @Test\n+    public void testGzipGUnzipInput() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        byte[] zipped = Misc.gzip(arr);\n+        assertEquals(Misc.gunzipToString(zipped), \"test\");\n+    }\n+\n+    @Test\n+    public void testGzipString() throws Exception {\n+        String s = \"you deserved this\";\n+        byte[] zipped = Misc.gzip(s);\n+        assertEquals(Misc.gunzipToString(zipped), \"you deserved this\");\n+\n+    }\n+\n+    /**\n+     * Method: compress(String input)\n+     */\n+    @Test\n+    public void testCompressDecompressInput() throws Exception {\n+        String s = \"test\";\n+        byte[] compressed = Misc.compress(s);\n+        String decompressed = Misc.decompressToString(compressed);\n+        assertEquals(decompressed, \"test\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyOTU2OQ=="}, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 406}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA2NjM1Nw==", "bodyText": "I added a case that tests if the string is compressed. However, I did this by testing the first two indexes of the compressed byte array, which was the same for all compressed Strings, so I assumed this is a sign that it is compressed. Am I correct? Is there another way of testing if it is actually compressed? @nielsm5", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r438066357", "createdAt": "2020-06-10T11:58:08Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");\n+    }\n+\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringNoXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", false);\n+        assertEquals(s, \"<root> 23    <name>GeeksforGeeks</name> 23    <address> 23        <sector>142</sector> 23        <location>Noida</location> 23    </address> 23</root> r\");\n+    }\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", true);\n+        assertEquals(s, \"&lt;root&gt; 23    &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23    &lt;address&gt; 23        &lt;sector&gt;142&lt;/sector&gt; 23        &lt;location&gt;Noida&lt;/location&gt; 23    &lt;/address&gt; 23&lt;/root&gt; r\");\n+    }\n+\n+\n+\n+    /**\n+     * Method: replace(String source, String from, String to)\n+     */\n+    @Test\n+    public void testReplace() throws Exception {\n+        String a = \"Kobe\";\n+        String res = Misc.replace(a, \"Ko\", \"Phoe\");\n+        assertEquals(res, \"Phoebe\");\n+    }\n+\n+    /**\n+     * Method: concatStrings(String part1, String separator, String part2)\n+     */\n+    @Test\n+    public void testConcatStrings() throws Exception {\n+        String a = \"LeBron\";\n+        String b = \"James\";\n+        String seperator = \"//\";\n+        String res = Misc.concatStrings(a, seperator, b);\n+        assertEquals(res, \"LeBron//James\");\n+    }\n+\n+    /**\n+     * Method: hide(String string)\n+     */\n+    @Test\n+    public void testHideString() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a);\n+        assertEquals(res, \"****\");\n+    }\n+\n+    /**\n+     * Method: hide(String string, int mode)\n+     */\n+    @Test\n+    public void testHideForStringMode() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a, 1);\n+        assertEquals(res, \"t**t\");\n+    }\n+\n+    /**\n+     * Method: byteArrayToString(byte[] input, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testByteArrayToString() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        String res = Misc.byteArrayToString(arr, \"\", true);\n+        assertEquals(res, s);\n+    }\n+\n+    /**\n+     * Method: gzip(String input)\n+     */\n+    @Test\n+    public void testGzipGUnzipInput() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        byte[] zipped = Misc.gzip(arr);\n+        assertEquals(Misc.gunzipToString(zipped), \"test\");\n+    }\n+\n+    @Test\n+    public void testGzipString() throws Exception {\n+        String s = \"you deserved this\";\n+        byte[] zipped = Misc.gzip(s);\n+        assertEquals(Misc.gunzipToString(zipped), \"you deserved this\");\n+\n+    }\n+\n+    /**\n+     * Method: compress(String input)\n+     */\n+    @Test\n+    public void testCompressDecompressInput() throws Exception {\n+        String s = \"test\";\n+        byte[] compressed = Misc.compress(s);\n+        String decompressed = Misc.decompressToString(compressed);\n+        assertEquals(decompressed, \"test\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyOTU2OQ=="}, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 406}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNzcwMg==", "bodyText": "I would say when the size of the bytearray is less then the original string and the content is not equal to the string it must be compressed :)", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r438117702", "createdAt": "2020-06-10T13:23:27Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");\n+    }\n+\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringNoXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", false);\n+        assertEquals(s, \"<root> 23    <name>GeeksforGeeks</name> 23    <address> 23        <sector>142</sector> 23        <location>Noida</location> 23    </address> 23</root> r\");\n+    }\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", true);\n+        assertEquals(s, \"&lt;root&gt; 23    &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23    &lt;address&gt; 23        &lt;sector&gt;142&lt;/sector&gt; 23        &lt;location&gt;Noida&lt;/location&gt; 23    &lt;/address&gt; 23&lt;/root&gt; r\");\n+    }\n+\n+\n+\n+    /**\n+     * Method: replace(String source, String from, String to)\n+     */\n+    @Test\n+    public void testReplace() throws Exception {\n+        String a = \"Kobe\";\n+        String res = Misc.replace(a, \"Ko\", \"Phoe\");\n+        assertEquals(res, \"Phoebe\");\n+    }\n+\n+    /**\n+     * Method: concatStrings(String part1, String separator, String part2)\n+     */\n+    @Test\n+    public void testConcatStrings() throws Exception {\n+        String a = \"LeBron\";\n+        String b = \"James\";\n+        String seperator = \"//\";\n+        String res = Misc.concatStrings(a, seperator, b);\n+        assertEquals(res, \"LeBron//James\");\n+    }\n+\n+    /**\n+     * Method: hide(String string)\n+     */\n+    @Test\n+    public void testHideString() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a);\n+        assertEquals(res, \"****\");\n+    }\n+\n+    /**\n+     * Method: hide(String string, int mode)\n+     */\n+    @Test\n+    public void testHideForStringMode() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a, 1);\n+        assertEquals(res, \"t**t\");\n+    }\n+\n+    /**\n+     * Method: byteArrayToString(byte[] input, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testByteArrayToString() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        String res = Misc.byteArrayToString(arr, \"\", true);\n+        assertEquals(res, s);\n+    }\n+\n+    /**\n+     * Method: gzip(String input)\n+     */\n+    @Test\n+    public void testGzipGUnzipInput() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        byte[] zipped = Misc.gzip(arr);\n+        assertEquals(Misc.gunzipToString(zipped), \"test\");\n+    }\n+\n+    @Test\n+    public void testGzipString() throws Exception {\n+        String s = \"you deserved this\";\n+        byte[] zipped = Misc.gzip(s);\n+        assertEquals(Misc.gunzipToString(zipped), \"you deserved this\");\n+\n+    }\n+\n+    /**\n+     * Method: compress(String input)\n+     */\n+    @Test\n+    public void testCompressDecompressInput() throws Exception {\n+        String s = \"test\";\n+        byte[] compressed = Misc.compress(s);\n+        String decompressed = Misc.decompressToString(compressed);\n+        assertEquals(decompressed, \"test\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyOTU2OQ=="}, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 406}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyMDM1MQ==", "bodyText": "I checked the first thing you said, but the size of the byte array was always bigger than the length of the string.", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r438120351", "createdAt": "2020-06-10T13:27:11Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");\n+    }\n+\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringNoXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", false);\n+        assertEquals(s, \"<root> 23    <name>GeeksforGeeks</name> 23    <address> 23        <sector>142</sector> 23        <location>Noida</location> 23    </address> 23</root> r\");\n+    }\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", true);\n+        assertEquals(s, \"&lt;root&gt; 23    &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23    &lt;address&gt; 23        &lt;sector&gt;142&lt;/sector&gt; 23        &lt;location&gt;Noida&lt;/location&gt; 23    &lt;/address&gt; 23&lt;/root&gt; r\");\n+    }\n+\n+\n+\n+    /**\n+     * Method: replace(String source, String from, String to)\n+     */\n+    @Test\n+    public void testReplace() throws Exception {\n+        String a = \"Kobe\";\n+        String res = Misc.replace(a, \"Ko\", \"Phoe\");\n+        assertEquals(res, \"Phoebe\");\n+    }\n+\n+    /**\n+     * Method: concatStrings(String part1, String separator, String part2)\n+     */\n+    @Test\n+    public void testConcatStrings() throws Exception {\n+        String a = \"LeBron\";\n+        String b = \"James\";\n+        String seperator = \"//\";\n+        String res = Misc.concatStrings(a, seperator, b);\n+        assertEquals(res, \"LeBron//James\");\n+    }\n+\n+    /**\n+     * Method: hide(String string)\n+     */\n+    @Test\n+    public void testHideString() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a);\n+        assertEquals(res, \"****\");\n+    }\n+\n+    /**\n+     * Method: hide(String string, int mode)\n+     */\n+    @Test\n+    public void testHideForStringMode() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a, 1);\n+        assertEquals(res, \"t**t\");\n+    }\n+\n+    /**\n+     * Method: byteArrayToString(byte[] input, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testByteArrayToString() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        String res = Misc.byteArrayToString(arr, \"\", true);\n+        assertEquals(res, s);\n+    }\n+\n+    /**\n+     * Method: gzip(String input)\n+     */\n+    @Test\n+    public void testGzipGUnzipInput() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        byte[] zipped = Misc.gzip(arr);\n+        assertEquals(Misc.gunzipToString(zipped), \"test\");\n+    }\n+\n+    @Test\n+    public void testGzipString() throws Exception {\n+        String s = \"you deserved this\";\n+        byte[] zipped = Misc.gzip(s);\n+        assertEquals(Misc.gunzipToString(zipped), \"you deserved this\");\n+\n+    }\n+\n+    /**\n+     * Method: compress(String input)\n+     */\n+    @Test\n+    public void testCompressDecompressInput() throws Exception {\n+        String s = \"test\";\n+        byte[] compressed = Misc.compress(s);\n+        String decompressed = Misc.decompressToString(compressed);\n+        assertEquals(decompressed, \"test\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyOTU2OQ=="}, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 406}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTQwNjI3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzo0NDoyM1rOGfvE2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDo0NDoyNVrOGhDldA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkzMDMzMA==", "bodyText": "In stead of using a big concatinated string, it might be easier and more readable to use TestFileUtils.getResource and read the contents from a file instead", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r435930330", "createdAt": "2020-06-05T13:44:23Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");\n+    }\n+\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringNoXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", false);\n+        assertEquals(s, \"<root> 23    <name>GeeksforGeeks</name> 23    <address> 23        <sector>142</sector> 23        <location>Noida</location> 23    </address> 23</root> r\");\n+    }\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", true);\n+        assertEquals(s, \"&lt;root&gt; 23    &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23    &lt;address&gt; 23        &lt;sector&gt;142&lt;/sector&gt; 23        &lt;location&gt;Noida&lt;/location&gt; 23    &lt;/address&gt; 23&lt;/root&gt; r\");\n+    }\n+\n+\n+\n+    /**\n+     * Method: replace(String source, String from, String to)\n+     */\n+    @Test\n+    public void testReplace() throws Exception {\n+        String a = \"Kobe\";\n+        String res = Misc.replace(a, \"Ko\", \"Phoe\");\n+        assertEquals(res, \"Phoebe\");\n+    }\n+\n+    /**\n+     * Method: concatStrings(String part1, String separator, String part2)\n+     */\n+    @Test\n+    public void testConcatStrings() throws Exception {\n+        String a = \"LeBron\";\n+        String b = \"James\";\n+        String seperator = \"//\";\n+        String res = Misc.concatStrings(a, seperator, b);\n+        assertEquals(res, \"LeBron//James\");\n+    }\n+\n+    /**\n+     * Method: hide(String string)\n+     */\n+    @Test\n+    public void testHideString() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a);\n+        assertEquals(res, \"****\");\n+    }\n+\n+    /**\n+     * Method: hide(String string, int mode)\n+     */\n+    @Test\n+    public void testHideForStringMode() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a, 1);\n+        assertEquals(res, \"t**t\");\n+    }\n+\n+    /**\n+     * Method: byteArrayToString(byte[] input, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testByteArrayToString() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        String res = Misc.byteArrayToString(arr, \"\", true);\n+        assertEquals(res, s);\n+    }\n+\n+    /**\n+     * Method: gzip(String input)\n+     */\n+    @Test\n+    public void testGzipGUnzipInput() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        byte[] zipped = Misc.gzip(arr);\n+        assertEquals(Misc.gunzipToString(zipped), \"test\");\n+    }\n+\n+    @Test\n+    public void testGzipString() throws Exception {\n+        String s = \"you deserved this\";\n+        byte[] zipped = Misc.gzip(s);\n+        assertEquals(Misc.gunzipToString(zipped), \"you deserved this\");\n+\n+    }\n+\n+    /**\n+     * Method: compress(String input)\n+     */\n+    @Test\n+    public void testCompressDecompressInput() throws Exception {\n+        String s = \"test\";\n+        byte[] compressed = Misc.compress(s);\n+        String decompressed = Misc.decompressToString(compressed);\n+        assertEquals(decompressed, \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: copyContext(String keys, Map<String,Object> from, Map<String,Object> to)\n+     */\n+    @Test\n+    public void testCopyContext() throws Exception {\n+        Map<String, Object> context1 = new HashMap<>();\n+        Map<String, Object> context2 = new HashMap<>();\n+        String keys = \"a,b\";\n+        context1.put(\"a\", 15);\n+        context1.put(\"b\", 16);\n+        Misc.copyContext(keys, context1, context2);\n+        assertTrue(context1.equals(context2));\n+    }\n+\n+    /**\n+     * Method: toFileSize(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testToFileSizeForValueDefaultValue() throws Exception {\n+        long res = Misc.toFileSize(\"14GB\", 20);\n+        assertEquals(Long.toString(res), \"15032385536\");\n+    }\n+\n+    /**\n+     * Method: toFileSize(long value)\n+     */\n+    @Test\n+    public void testToFileSizeValue() throws Exception {\n+        String kb = Misc.toFileSize(150000, false, true);\n+        String mb = Misc.toFileSize(15000000, true);\n+        String gb = Misc.toFileSize(Long.parseLong(\"3221225472\"));\n+        assertEquals(gb, \"3GB\");\n+        assertEquals(mb, \"14 MB\");\n+        assertEquals(kb, \"146KB\");\n+    }\n+\n+\n+    @Test\n+    public void testListToStringWithStringList() {\n+        List list = new ArrayList<Integer>();\n+        list.add(\"bailar\");\n+        list.add(\"besos\");\n+        String res = Misc.listToString(list);\n+        assertEquals(res, \"bailarbesos\");\n+    }\n+\n+    /**\n+     * Method: addItemsToList(Collection<String> collection, String list, String collectionDescription, boolean lowercase)\n+     */\n+    @Test\n+    public void testAddItemsToList() throws Exception {\n+        List<String> stringCollection = new ArrayList<>();\n+        String list = \"a,b,C\";\n+        String collectionDescription = \"First 3 letters of the alphabet\";\n+        Misc.addItemsToList(stringCollection, list, collectionDescription, true);\n+        ArrayList<String> arrayList = new ArrayList<>();\n+        arrayList.add(\"a\");  arrayList.add(\"b\"); arrayList.add(\"c\");\n+        assertTrue(stringCollection.size() == 3);\n+        assertEquals(stringCollection.get(stringCollection.size()-1), \"c\");\n+    }\n+\n+    /**\n+     * Method: getFileSystemTotalSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemTotalSpace() throws Exception {\n+assertFalse(Misc.getFileSystemTotalSpace().isEmpty());    }\n+\n+    /**\n+     * Method: getFileSystemFreeSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemFreeSpace() throws Exception {\n+assertFalse(Misc.getFileSystemFreeSpace().isEmpty());    }\n+\n+    /**\n+     * Method: getAge(long value)\n+     */\n+    @Test\n+    public void testGetAge() throws Exception {\n+        assertFalse(Misc.getAge(1).isEmpty());\n+    }\n+    /**\n+     * Method: getDurationInMs(long value)\n+     */\n+    @Test\n+    public void testGetDurationInMs() throws Exception {\n+        assertFalse(Misc.getDurationInMs(14).isEmpty());\n+    }\n+\n+    /**\n+     * Method: parseAge(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testParseAge() throws Exception {\n+        long res = Misc.parseAge(\"2D\", 100);\n+        assertEquals(res, 172800000);\n+    }\n+\n+    /**\n+     * Method: cleanseMessage(String inputString, String hideRegex, String hideMethod)\n+     */\n+    @Test\n+    public void testCleanseMessage() throws Exception {\n+        String s = \"Donald Duck 23  Hey hey  14  Wooo\";\n+        String regex = \"\\\\d\";\n+        String res = Misc.cleanseMessage(s, regex, \" does not matter\");\n+        assertEquals(res, \"Donald Duck **  Hey hey  **  Wooo\");\n+        }\n+\n+    /**\n+     * Method: hideFirstHalf(String inputString, String regex)\n+     */\n+    @Test\n+    public void testHideFirstHalf() throws Exception {\n+        String s = \"Donald Duck     Hey hey     Wooo\";\n+        String hideRegex = \"[^\\\\s*].*[^\\\\s*]\";\n+        String res = Misc.hideFirstHalf(s, hideRegex);\n+        assertEquals(res, \"****************Hey hey     Wooo\");\n+\n+    }\n+\n+\n+    /**\n+     * Method: getBuildOutputDirectory()\n+     */\n+    @Test\n+    public void testGetBuildOutputDirectory() throws Exception {\n+        String outputDirectory = Misc.getBuildOutputDirectory();\n+assertEquals(outputDirectory.substring(outputDirectory.length()-29, outputDirectory.length()), pathSeperator+\"iaf\"+pathSeperator+\"core\"+pathSeperator+\"target\"+pathSeperator+\"test-classes\");    }\n+\n+    /**\n+     * Method: getProjectBaseDir()\n+     */\n+    @Test\n+    public void testGetProjectBaseDir() throws Exception {\n+        String baseDir = Misc.getBuildOutputDirectory();\n+        assertEquals(baseDir.substring(baseDir.length()-29, baseDir.length()), pathSeperator+\"iaf\"+pathSeperator+\"core\"+pathSeperator+\"target\"+pathSeperator+\"test-classes\");\n+    }\n+\n+    /**\n+     * Method: toSortName(String name)\n+     */\n+    @Test\n+    public void testToSortName() throws Exception {\n+assertEquals(Misc.toSortName(\"new_name\"), \"NEW*NAME\");    }\n+\n+    /**\n+     * Method: countRegex(String string, String regex)\n+     */\n+    @Test\n+    public void testCountRegex() throws Exception {\n+String s = \"12ab34\";\n+    String regex = \"\\\\d\";\n+    int regexCount = Misc.countRegex(s, regex);\n+    assertEquals(regexCount, 4);\n+    }\n+\n+    /**\n+     * Method: resourceToString(URL resource)\n+     */\n+    @Test\n+    public void testResourceToStringResource() throws Exception {\n+        URL resource = new URL(\"http://example.com/\");\n+        String s1 = Misc.resourceToString(resource);\n+        assertEquals(s1, \"<!doctype html>\\n\" +\n+                \"<html>\\n\" +\n+                \"<head>\\n\" +\n+                \"    <title>Example Domain</title>\\n\" +\n+                \"\\n\" +\n+                \"    <meta charset=\\\"utf-8\\\" />\\n\" +\n+                \"    <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\" />\\n\" +\n+                \"    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n\" +\n+                \"    <style type=\\\"text/css\\\">\\n\" +\n+                \"    body {\\n\" +\n+                \"        background-color: #f0f0f2;\\n\" +\n+                \"        margin: 0;\\n\" +\n+                \"        padding: 0;\\n\" +\n+                \"        font-family: -apple-system, system-ui, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Open Sans\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\n\" +\n+                \"        \\n\" +\n+                \"    }\\n\" +\n+                \"    div {\\n\" +\n+                \"        width: 600px;\\n\" +\n+                \"        margin: 5em auto;\\n\" +\n+                \"        padding: 2em;\\n\" +\n+                \"        background-color: #fdfdff;\\n\" +\n+                \"        border-radius: 0.5em;\\n\" +\n+                \"        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\\n\" +\n+                \"    }\\n\" +\n+                \"    a:link, a:visited {\\n\" +\n+                \"        color: #38488f;\\n\" +\n+                \"        text-decoration: none;\\n\" +\n+                \"    }\\n\" +\n+                \"    @media (max-width: 700px) {\\n\" +\n+                \"        div {\\n\" +\n+                \"            margin: 0 auto;\\n\" +\n+                \"            width: auto;\\n\" +\n+                \"        }\\n\" +\n+                \"    }\\n\" +\n+                \"    </style>    \\n\" +\n+                \"</head>\\n\" +\n+                \"\\n\" +\n+                \"<body>\\n\" +\n+                \"<div>\\n\" +\n+                \"    <h1>Example Domain</h1>\\n\" +\n+                \"    <p>This domain is for use in illustrative examples in documents. You may use this\\n\" +\n+                \"    domain in literature without prior coordination or asking for permission.</p>\\n\" +\n+                \"    <p><a href=\\\"https://www.iana.org/domains/example\\\">More information...</a></p>\\n\" +\n+                \"</div>\\n\" +\n+                \"</body>\\n\" +\n+                \"</html>\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 619}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMxNDkzMg==", "bodyText": "I assumed you meant TestFileUtils.getTestFile which uses getResource. So I'm using this method.", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r437314932", "createdAt": "2020-06-09T10:44:25Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");\n+    }\n+\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringNoXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", false);\n+        assertEquals(s, \"<root> 23    <name>GeeksforGeeks</name> 23    <address> 23        <sector>142</sector> 23        <location>Noida</location> 23    </address> 23</root> r\");\n+    }\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", true);\n+        assertEquals(s, \"&lt;root&gt; 23    &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23    &lt;address&gt; 23        &lt;sector&gt;142&lt;/sector&gt; 23        &lt;location&gt;Noida&lt;/location&gt; 23    &lt;/address&gt; 23&lt;/root&gt; r\");\n+    }\n+\n+\n+\n+    /**\n+     * Method: replace(String source, String from, String to)\n+     */\n+    @Test\n+    public void testReplace() throws Exception {\n+        String a = \"Kobe\";\n+        String res = Misc.replace(a, \"Ko\", \"Phoe\");\n+        assertEquals(res, \"Phoebe\");\n+    }\n+\n+    /**\n+     * Method: concatStrings(String part1, String separator, String part2)\n+     */\n+    @Test\n+    public void testConcatStrings() throws Exception {\n+        String a = \"LeBron\";\n+        String b = \"James\";\n+        String seperator = \"//\";\n+        String res = Misc.concatStrings(a, seperator, b);\n+        assertEquals(res, \"LeBron//James\");\n+    }\n+\n+    /**\n+     * Method: hide(String string)\n+     */\n+    @Test\n+    public void testHideString() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a);\n+        assertEquals(res, \"****\");\n+    }\n+\n+    /**\n+     * Method: hide(String string, int mode)\n+     */\n+    @Test\n+    public void testHideForStringMode() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a, 1);\n+        assertEquals(res, \"t**t\");\n+    }\n+\n+    /**\n+     * Method: byteArrayToString(byte[] input, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testByteArrayToString() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        String res = Misc.byteArrayToString(arr, \"\", true);\n+        assertEquals(res, s);\n+    }\n+\n+    /**\n+     * Method: gzip(String input)\n+     */\n+    @Test\n+    public void testGzipGUnzipInput() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        byte[] zipped = Misc.gzip(arr);\n+        assertEquals(Misc.gunzipToString(zipped), \"test\");\n+    }\n+\n+    @Test\n+    public void testGzipString() throws Exception {\n+        String s = \"you deserved this\";\n+        byte[] zipped = Misc.gzip(s);\n+        assertEquals(Misc.gunzipToString(zipped), \"you deserved this\");\n+\n+    }\n+\n+    /**\n+     * Method: compress(String input)\n+     */\n+    @Test\n+    public void testCompressDecompressInput() throws Exception {\n+        String s = \"test\";\n+        byte[] compressed = Misc.compress(s);\n+        String decompressed = Misc.decompressToString(compressed);\n+        assertEquals(decompressed, \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: copyContext(String keys, Map<String,Object> from, Map<String,Object> to)\n+     */\n+    @Test\n+    public void testCopyContext() throws Exception {\n+        Map<String, Object> context1 = new HashMap<>();\n+        Map<String, Object> context2 = new HashMap<>();\n+        String keys = \"a,b\";\n+        context1.put(\"a\", 15);\n+        context1.put(\"b\", 16);\n+        Misc.copyContext(keys, context1, context2);\n+        assertTrue(context1.equals(context2));\n+    }\n+\n+    /**\n+     * Method: toFileSize(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testToFileSizeForValueDefaultValue() throws Exception {\n+        long res = Misc.toFileSize(\"14GB\", 20);\n+        assertEquals(Long.toString(res), \"15032385536\");\n+    }\n+\n+    /**\n+     * Method: toFileSize(long value)\n+     */\n+    @Test\n+    public void testToFileSizeValue() throws Exception {\n+        String kb = Misc.toFileSize(150000, false, true);\n+        String mb = Misc.toFileSize(15000000, true);\n+        String gb = Misc.toFileSize(Long.parseLong(\"3221225472\"));\n+        assertEquals(gb, \"3GB\");\n+        assertEquals(mb, \"14 MB\");\n+        assertEquals(kb, \"146KB\");\n+    }\n+\n+\n+    @Test\n+    public void testListToStringWithStringList() {\n+        List list = new ArrayList<Integer>();\n+        list.add(\"bailar\");\n+        list.add(\"besos\");\n+        String res = Misc.listToString(list);\n+        assertEquals(res, \"bailarbesos\");\n+    }\n+\n+    /**\n+     * Method: addItemsToList(Collection<String> collection, String list, String collectionDescription, boolean lowercase)\n+     */\n+    @Test\n+    public void testAddItemsToList() throws Exception {\n+        List<String> stringCollection = new ArrayList<>();\n+        String list = \"a,b,C\";\n+        String collectionDescription = \"First 3 letters of the alphabet\";\n+        Misc.addItemsToList(stringCollection, list, collectionDescription, true);\n+        ArrayList<String> arrayList = new ArrayList<>();\n+        arrayList.add(\"a\");  arrayList.add(\"b\"); arrayList.add(\"c\");\n+        assertTrue(stringCollection.size() == 3);\n+        assertEquals(stringCollection.get(stringCollection.size()-1), \"c\");\n+    }\n+\n+    /**\n+     * Method: getFileSystemTotalSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemTotalSpace() throws Exception {\n+assertFalse(Misc.getFileSystemTotalSpace().isEmpty());    }\n+\n+    /**\n+     * Method: getFileSystemFreeSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemFreeSpace() throws Exception {\n+assertFalse(Misc.getFileSystemFreeSpace().isEmpty());    }\n+\n+    /**\n+     * Method: getAge(long value)\n+     */\n+    @Test\n+    public void testGetAge() throws Exception {\n+        assertFalse(Misc.getAge(1).isEmpty());\n+    }\n+    /**\n+     * Method: getDurationInMs(long value)\n+     */\n+    @Test\n+    public void testGetDurationInMs() throws Exception {\n+        assertFalse(Misc.getDurationInMs(14).isEmpty());\n+    }\n+\n+    /**\n+     * Method: parseAge(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testParseAge() throws Exception {\n+        long res = Misc.parseAge(\"2D\", 100);\n+        assertEquals(res, 172800000);\n+    }\n+\n+    /**\n+     * Method: cleanseMessage(String inputString, String hideRegex, String hideMethod)\n+     */\n+    @Test\n+    public void testCleanseMessage() throws Exception {\n+        String s = \"Donald Duck 23  Hey hey  14  Wooo\";\n+        String regex = \"\\\\d\";\n+        String res = Misc.cleanseMessage(s, regex, \" does not matter\");\n+        assertEquals(res, \"Donald Duck **  Hey hey  **  Wooo\");\n+        }\n+\n+    /**\n+     * Method: hideFirstHalf(String inputString, String regex)\n+     */\n+    @Test\n+    public void testHideFirstHalf() throws Exception {\n+        String s = \"Donald Duck     Hey hey     Wooo\";\n+        String hideRegex = \"[^\\\\s*].*[^\\\\s*]\";\n+        String res = Misc.hideFirstHalf(s, hideRegex);\n+        assertEquals(res, \"****************Hey hey     Wooo\");\n+\n+    }\n+\n+\n+    /**\n+     * Method: getBuildOutputDirectory()\n+     */\n+    @Test\n+    public void testGetBuildOutputDirectory() throws Exception {\n+        String outputDirectory = Misc.getBuildOutputDirectory();\n+assertEquals(outputDirectory.substring(outputDirectory.length()-29, outputDirectory.length()), pathSeperator+\"iaf\"+pathSeperator+\"core\"+pathSeperator+\"target\"+pathSeperator+\"test-classes\");    }\n+\n+    /**\n+     * Method: getProjectBaseDir()\n+     */\n+    @Test\n+    public void testGetProjectBaseDir() throws Exception {\n+        String baseDir = Misc.getBuildOutputDirectory();\n+        assertEquals(baseDir.substring(baseDir.length()-29, baseDir.length()), pathSeperator+\"iaf\"+pathSeperator+\"core\"+pathSeperator+\"target\"+pathSeperator+\"test-classes\");\n+    }\n+\n+    /**\n+     * Method: toSortName(String name)\n+     */\n+    @Test\n+    public void testToSortName() throws Exception {\n+assertEquals(Misc.toSortName(\"new_name\"), \"NEW*NAME\");    }\n+\n+    /**\n+     * Method: countRegex(String string, String regex)\n+     */\n+    @Test\n+    public void testCountRegex() throws Exception {\n+String s = \"12ab34\";\n+    String regex = \"\\\\d\";\n+    int regexCount = Misc.countRegex(s, regex);\n+    assertEquals(regexCount, 4);\n+    }\n+\n+    /**\n+     * Method: resourceToString(URL resource)\n+     */\n+    @Test\n+    public void testResourceToStringResource() throws Exception {\n+        URL resource = new URL(\"http://example.com/\");\n+        String s1 = Misc.resourceToString(resource);\n+        assertEquals(s1, \"<!doctype html>\\n\" +\n+                \"<html>\\n\" +\n+                \"<head>\\n\" +\n+                \"    <title>Example Domain</title>\\n\" +\n+                \"\\n\" +\n+                \"    <meta charset=\\\"utf-8\\\" />\\n\" +\n+                \"    <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\" />\\n\" +\n+                \"    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n\" +\n+                \"    <style type=\\\"text/css\\\">\\n\" +\n+                \"    body {\\n\" +\n+                \"        background-color: #f0f0f2;\\n\" +\n+                \"        margin: 0;\\n\" +\n+                \"        padding: 0;\\n\" +\n+                \"        font-family: -apple-system, system-ui, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Open Sans\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\n\" +\n+                \"        \\n\" +\n+                \"    }\\n\" +\n+                \"    div {\\n\" +\n+                \"        width: 600px;\\n\" +\n+                \"        margin: 5em auto;\\n\" +\n+                \"        padding: 2em;\\n\" +\n+                \"        background-color: #fdfdff;\\n\" +\n+                \"        border-radius: 0.5em;\\n\" +\n+                \"        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\\n\" +\n+                \"    }\\n\" +\n+                \"    a:link, a:visited {\\n\" +\n+                \"        color: #38488f;\\n\" +\n+                \"        text-decoration: none;\\n\" +\n+                \"    }\\n\" +\n+                \"    @media (max-width: 700px) {\\n\" +\n+                \"        div {\\n\" +\n+                \"            margin: 0 auto;\\n\" +\n+                \"            width: auto;\\n\" +\n+                \"        }\\n\" +\n+                \"    }\\n\" +\n+                \"    </style>    \\n\" +\n+                \"</head>\\n\" +\n+                \"\\n\" +\n+                \"<body>\\n\" +\n+                \"<div>\\n\" +\n+                \"    <h1>Example Domain</h1>\\n\" +\n+                \"    <p>This domain is for use in illustrative examples in documents. You may use this\\n\" +\n+                \"    domain in literature without prior coordination or asking for permission.</p>\\n\" +\n+                \"    <p><a href=\\\"https://www.iana.org/domains/example\\\">More information...</a></p>\\n\" +\n+                \"</div>\\n\" +\n+                \"</body>\\n\" +\n+                \"</html>\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkzMDMzMA=="}, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 619}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTQwODM2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzo0NDo1NVrOGfvGJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoxMjozNFrOGhGUEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkzMDY2Mg==", "bodyText": "In stead of using a big concatinated string, it might be easier and more readable to use TestFileUtils.getResource and read the contents from a file instead", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r435930662", "createdAt": "2020-06-05T13:44:55Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");\n+    }\n+\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringNoXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", false);\n+        assertEquals(s, \"<root> 23    <name>GeeksforGeeks</name> 23    <address> 23        <sector>142</sector> 23        <location>Noida</location> 23    </address> 23</root> r\");\n+    }\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", true);\n+        assertEquals(s, \"&lt;root&gt; 23    &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23    &lt;address&gt; 23        &lt;sector&gt;142&lt;/sector&gt; 23        &lt;location&gt;Noida&lt;/location&gt; 23    &lt;/address&gt; 23&lt;/root&gt; r\");\n+    }\n+\n+\n+\n+    /**\n+     * Method: replace(String source, String from, String to)\n+     */\n+    @Test\n+    public void testReplace() throws Exception {\n+        String a = \"Kobe\";\n+        String res = Misc.replace(a, \"Ko\", \"Phoe\");\n+        assertEquals(res, \"Phoebe\");\n+    }\n+\n+    /**\n+     * Method: concatStrings(String part1, String separator, String part2)\n+     */\n+    @Test\n+    public void testConcatStrings() throws Exception {\n+        String a = \"LeBron\";\n+        String b = \"James\";\n+        String seperator = \"//\";\n+        String res = Misc.concatStrings(a, seperator, b);\n+        assertEquals(res, \"LeBron//James\");\n+    }\n+\n+    /**\n+     * Method: hide(String string)\n+     */\n+    @Test\n+    public void testHideString() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a);\n+        assertEquals(res, \"****\");\n+    }\n+\n+    /**\n+     * Method: hide(String string, int mode)\n+     */\n+    @Test\n+    public void testHideForStringMode() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a, 1);\n+        assertEquals(res, \"t**t\");\n+    }\n+\n+    /**\n+     * Method: byteArrayToString(byte[] input, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testByteArrayToString() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        String res = Misc.byteArrayToString(arr, \"\", true);\n+        assertEquals(res, s);\n+    }\n+\n+    /**\n+     * Method: gzip(String input)\n+     */\n+    @Test\n+    public void testGzipGUnzipInput() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        byte[] zipped = Misc.gzip(arr);\n+        assertEquals(Misc.gunzipToString(zipped), \"test\");\n+    }\n+\n+    @Test\n+    public void testGzipString() throws Exception {\n+        String s = \"you deserved this\";\n+        byte[] zipped = Misc.gzip(s);\n+        assertEquals(Misc.gunzipToString(zipped), \"you deserved this\");\n+\n+    }\n+\n+    /**\n+     * Method: compress(String input)\n+     */\n+    @Test\n+    public void testCompressDecompressInput() throws Exception {\n+        String s = \"test\";\n+        byte[] compressed = Misc.compress(s);\n+        String decompressed = Misc.decompressToString(compressed);\n+        assertEquals(decompressed, \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: copyContext(String keys, Map<String,Object> from, Map<String,Object> to)\n+     */\n+    @Test\n+    public void testCopyContext() throws Exception {\n+        Map<String, Object> context1 = new HashMap<>();\n+        Map<String, Object> context2 = new HashMap<>();\n+        String keys = \"a,b\";\n+        context1.put(\"a\", 15);\n+        context1.put(\"b\", 16);\n+        Misc.copyContext(keys, context1, context2);\n+        assertTrue(context1.equals(context2));\n+    }\n+\n+    /**\n+     * Method: toFileSize(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testToFileSizeForValueDefaultValue() throws Exception {\n+        long res = Misc.toFileSize(\"14GB\", 20);\n+        assertEquals(Long.toString(res), \"15032385536\");\n+    }\n+\n+    /**\n+     * Method: toFileSize(long value)\n+     */\n+    @Test\n+    public void testToFileSizeValue() throws Exception {\n+        String kb = Misc.toFileSize(150000, false, true);\n+        String mb = Misc.toFileSize(15000000, true);\n+        String gb = Misc.toFileSize(Long.parseLong(\"3221225472\"));\n+        assertEquals(gb, \"3GB\");\n+        assertEquals(mb, \"14 MB\");\n+        assertEquals(kb, \"146KB\");\n+    }\n+\n+\n+    @Test\n+    public void testListToStringWithStringList() {\n+        List list = new ArrayList<Integer>();\n+        list.add(\"bailar\");\n+        list.add(\"besos\");\n+        String res = Misc.listToString(list);\n+        assertEquals(res, \"bailarbesos\");\n+    }\n+\n+    /**\n+     * Method: addItemsToList(Collection<String> collection, String list, String collectionDescription, boolean lowercase)\n+     */\n+    @Test\n+    public void testAddItemsToList() throws Exception {\n+        List<String> stringCollection = new ArrayList<>();\n+        String list = \"a,b,C\";\n+        String collectionDescription = \"First 3 letters of the alphabet\";\n+        Misc.addItemsToList(stringCollection, list, collectionDescription, true);\n+        ArrayList<String> arrayList = new ArrayList<>();\n+        arrayList.add(\"a\");  arrayList.add(\"b\"); arrayList.add(\"c\");\n+        assertTrue(stringCollection.size() == 3);\n+        assertEquals(stringCollection.get(stringCollection.size()-1), \"c\");\n+    }\n+\n+    /**\n+     * Method: getFileSystemTotalSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemTotalSpace() throws Exception {\n+assertFalse(Misc.getFileSystemTotalSpace().isEmpty());    }\n+\n+    /**\n+     * Method: getFileSystemFreeSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemFreeSpace() throws Exception {\n+assertFalse(Misc.getFileSystemFreeSpace().isEmpty());    }\n+\n+    /**\n+     * Method: getAge(long value)\n+     */\n+    @Test\n+    public void testGetAge() throws Exception {\n+        assertFalse(Misc.getAge(1).isEmpty());\n+    }\n+    /**\n+     * Method: getDurationInMs(long value)\n+     */\n+    @Test\n+    public void testGetDurationInMs() throws Exception {\n+        assertFalse(Misc.getDurationInMs(14).isEmpty());\n+    }\n+\n+    /**\n+     * Method: parseAge(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testParseAge() throws Exception {\n+        long res = Misc.parseAge(\"2D\", 100);\n+        assertEquals(res, 172800000);\n+    }\n+\n+    /**\n+     * Method: cleanseMessage(String inputString, String hideRegex, String hideMethod)\n+     */\n+    @Test\n+    public void testCleanseMessage() throws Exception {\n+        String s = \"Donald Duck 23  Hey hey  14  Wooo\";\n+        String regex = \"\\\\d\";\n+        String res = Misc.cleanseMessage(s, regex, \" does not matter\");\n+        assertEquals(res, \"Donald Duck **  Hey hey  **  Wooo\");\n+        }\n+\n+    /**\n+     * Method: hideFirstHalf(String inputString, String regex)\n+     */\n+    @Test\n+    public void testHideFirstHalf() throws Exception {\n+        String s = \"Donald Duck     Hey hey     Wooo\";\n+        String hideRegex = \"[^\\\\s*].*[^\\\\s*]\";\n+        String res = Misc.hideFirstHalf(s, hideRegex);\n+        assertEquals(res, \"****************Hey hey     Wooo\");\n+\n+    }\n+\n+\n+    /**\n+     * Method: getBuildOutputDirectory()\n+     */\n+    @Test\n+    public void testGetBuildOutputDirectory() throws Exception {\n+        String outputDirectory = Misc.getBuildOutputDirectory();\n+assertEquals(outputDirectory.substring(outputDirectory.length()-29, outputDirectory.length()), pathSeperator+\"iaf\"+pathSeperator+\"core\"+pathSeperator+\"target\"+pathSeperator+\"test-classes\");    }\n+\n+    /**\n+     * Method: getProjectBaseDir()\n+     */\n+    @Test\n+    public void testGetProjectBaseDir() throws Exception {\n+        String baseDir = Misc.getBuildOutputDirectory();\n+        assertEquals(baseDir.substring(baseDir.length()-29, baseDir.length()), pathSeperator+\"iaf\"+pathSeperator+\"core\"+pathSeperator+\"target\"+pathSeperator+\"test-classes\");\n+    }\n+\n+    /**\n+     * Method: toSortName(String name)\n+     */\n+    @Test\n+    public void testToSortName() throws Exception {\n+assertEquals(Misc.toSortName(\"new_name\"), \"NEW*NAME\");    }\n+\n+    /**\n+     * Method: countRegex(String string, String regex)\n+     */\n+    @Test\n+    public void testCountRegex() throws Exception {\n+String s = \"12ab34\";\n+    String regex = \"\\\\d\";\n+    int regexCount = Misc.countRegex(s, regex);\n+    assertEquals(regexCount, 4);\n+    }\n+\n+    /**\n+     * Method: resourceToString(URL resource)\n+     */\n+    @Test\n+    public void testResourceToStringResource() throws Exception {\n+        URL resource = new URL(\"http://example.com/\");\n+        String s1 = Misc.resourceToString(resource);\n+        assertEquals(s1, \"<!doctype html>\\n\" +\n+                \"<html>\\n\" +\n+                \"<head>\\n\" +\n+                \"    <title>Example Domain</title>\\n\" +\n+                \"\\n\" +\n+                \"    <meta charset=\\\"utf-8\\\" />\\n\" +\n+                \"    <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\" />\\n\" +\n+                \"    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n\" +\n+                \"    <style type=\\\"text/css\\\">\\n\" +\n+                \"    body {\\n\" +\n+                \"        background-color: #f0f0f2;\\n\" +\n+                \"        margin: 0;\\n\" +\n+                \"        padding: 0;\\n\" +\n+                \"        font-family: -apple-system, system-ui, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Open Sans\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\n\" +\n+                \"        \\n\" +\n+                \"    }\\n\" +\n+                \"    div {\\n\" +\n+                \"        width: 600px;\\n\" +\n+                \"        margin: 5em auto;\\n\" +\n+                \"        padding: 2em;\\n\" +\n+                \"        background-color: #fdfdff;\\n\" +\n+                \"        border-radius: 0.5em;\\n\" +\n+                \"        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\\n\" +\n+                \"    }\\n\" +\n+                \"    a:link, a:visited {\\n\" +\n+                \"        color: #38488f;\\n\" +\n+                \"        text-decoration: none;\\n\" +\n+                \"    }\\n\" +\n+                \"    @media (max-width: 700px) {\\n\" +\n+                \"        div {\\n\" +\n+                \"            margin: 0 auto;\\n\" +\n+                \"            width: auto;\\n\" +\n+                \"        }\\n\" +\n+                \"    }\\n\" +\n+                \"    </style>    \\n\" +\n+                \"</head>\\n\" +\n+                \"\\n\" +\n+                \"<body>\\n\" +\n+                \"<div>\\n\" +\n+                \"    <h1>Example Domain</h1>\\n\" +\n+                \"    <p>This domain is for use in illustrative examples in documents. You may use this\\n\" +\n+                \"    domain in literature without prior coordination or asking for permission.</p>\\n\" +\n+                \"    <p><a href=\\\"https://www.iana.org/domains/example\\\">More information...</a></p>\\n\" +\n+                \"</div>\\n\" +\n+                \"</body>\\n\" +\n+                \"</html>\\n\");\n+    }\n+\n+    /**\n+     * Method: resourceToString(URL resource, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testResourceToStringForResourceEndOfLineStringXmlEncode() throws Exception {\n+        URL resource = new URL(\"http://example.com/\");\n+        String s1 = Misc.resourceToString(resource, \"end of the page\", true);\n+        assertEquals(s1, \"&lt;!doctype html&gt;end of the page&lt;html&gt;end of the page&lt;head&gt;end of the page    &lt;title&gt;Example Domain&lt;/title&gt;end of the pageend of the page    &lt;meta charset=&quot;utf-8&quot; /&gt;end of the page    &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;end of the page    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;end of the page    &lt;style type=&quot;text/css&quot;&gt;end of the page    body {end of the page        background-color: #f0f0f2;end of the page        margin: 0;end of the page        padding: 0;end of the page        font-family: -apple-system, system-ui, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;end of the page        end of the page    }end of the page    div {end of the page        width: 600px;end of the page        margin: 5em auto;end of the page        padding: 2em;end of the page        background-color: #fdfdff;end of the page        border-radius: 0.5em;end of the page        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);end of the page    }end of the page    a:link, a:visited {end of the page        color: #38488f;end of the page        text-decoration: none;end of the page    }end of the page    @media (max-width: 700px) {end of the page        div {end of the page            margin: 0 auto;end of the page            width: auto;end of the page        }end of the page    }end of the page    &lt;/style&gt;    end of the page&lt;/head&gt;end of the pageend of the page&lt;body&gt;end of the page&lt;div&gt;end of the page    &lt;h1&gt;Example Domain&lt;/h1&gt;end of the page    &lt;p&gt;This domain is for use in illustrative examples in documents. You may use thisend of the page    domain in literature without prior coordination or asking for permission.&lt;/p&gt;end of the page    &lt;p&gt;&lt;a href=&quot;https://www.iana.org/domains/example&quot;&gt;More information...&lt;/a&gt;&lt;/p&gt;end of the page&lt;/div&gt;end of the page&lt;/body&gt;end of the page&lt;/html&gt;end of the page\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 630}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1OTYzNQ==", "bodyText": "done", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r437359635", "createdAt": "2020-06-09T12:12:34Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");\n+    }\n+\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringNoXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", false);\n+        assertEquals(s, \"<root> 23    <name>GeeksforGeeks</name> 23    <address> 23        <sector>142</sector> 23        <location>Noida</location> 23    </address> 23</root> r\");\n+    }\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", true);\n+        assertEquals(s, \"&lt;root&gt; 23    &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23    &lt;address&gt; 23        &lt;sector&gt;142&lt;/sector&gt; 23        &lt;location&gt;Noida&lt;/location&gt; 23    &lt;/address&gt; 23&lt;/root&gt; r\");\n+    }\n+\n+\n+\n+    /**\n+     * Method: replace(String source, String from, String to)\n+     */\n+    @Test\n+    public void testReplace() throws Exception {\n+        String a = \"Kobe\";\n+        String res = Misc.replace(a, \"Ko\", \"Phoe\");\n+        assertEquals(res, \"Phoebe\");\n+    }\n+\n+    /**\n+     * Method: concatStrings(String part1, String separator, String part2)\n+     */\n+    @Test\n+    public void testConcatStrings() throws Exception {\n+        String a = \"LeBron\";\n+        String b = \"James\";\n+        String seperator = \"//\";\n+        String res = Misc.concatStrings(a, seperator, b);\n+        assertEquals(res, \"LeBron//James\");\n+    }\n+\n+    /**\n+     * Method: hide(String string)\n+     */\n+    @Test\n+    public void testHideString() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a);\n+        assertEquals(res, \"****\");\n+    }\n+\n+    /**\n+     * Method: hide(String string, int mode)\n+     */\n+    @Test\n+    public void testHideForStringMode() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a, 1);\n+        assertEquals(res, \"t**t\");\n+    }\n+\n+    /**\n+     * Method: byteArrayToString(byte[] input, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testByteArrayToString() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        String res = Misc.byteArrayToString(arr, \"\", true);\n+        assertEquals(res, s);\n+    }\n+\n+    /**\n+     * Method: gzip(String input)\n+     */\n+    @Test\n+    public void testGzipGUnzipInput() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        byte[] zipped = Misc.gzip(arr);\n+        assertEquals(Misc.gunzipToString(zipped), \"test\");\n+    }\n+\n+    @Test\n+    public void testGzipString() throws Exception {\n+        String s = \"you deserved this\";\n+        byte[] zipped = Misc.gzip(s);\n+        assertEquals(Misc.gunzipToString(zipped), \"you deserved this\");\n+\n+    }\n+\n+    /**\n+     * Method: compress(String input)\n+     */\n+    @Test\n+    public void testCompressDecompressInput() throws Exception {\n+        String s = \"test\";\n+        byte[] compressed = Misc.compress(s);\n+        String decompressed = Misc.decompressToString(compressed);\n+        assertEquals(decompressed, \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: copyContext(String keys, Map<String,Object> from, Map<String,Object> to)\n+     */\n+    @Test\n+    public void testCopyContext() throws Exception {\n+        Map<String, Object> context1 = new HashMap<>();\n+        Map<String, Object> context2 = new HashMap<>();\n+        String keys = \"a,b\";\n+        context1.put(\"a\", 15);\n+        context1.put(\"b\", 16);\n+        Misc.copyContext(keys, context1, context2);\n+        assertTrue(context1.equals(context2));\n+    }\n+\n+    /**\n+     * Method: toFileSize(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testToFileSizeForValueDefaultValue() throws Exception {\n+        long res = Misc.toFileSize(\"14GB\", 20);\n+        assertEquals(Long.toString(res), \"15032385536\");\n+    }\n+\n+    /**\n+     * Method: toFileSize(long value)\n+     */\n+    @Test\n+    public void testToFileSizeValue() throws Exception {\n+        String kb = Misc.toFileSize(150000, false, true);\n+        String mb = Misc.toFileSize(15000000, true);\n+        String gb = Misc.toFileSize(Long.parseLong(\"3221225472\"));\n+        assertEquals(gb, \"3GB\");\n+        assertEquals(mb, \"14 MB\");\n+        assertEquals(kb, \"146KB\");\n+    }\n+\n+\n+    @Test\n+    public void testListToStringWithStringList() {\n+        List list = new ArrayList<Integer>();\n+        list.add(\"bailar\");\n+        list.add(\"besos\");\n+        String res = Misc.listToString(list);\n+        assertEquals(res, \"bailarbesos\");\n+    }\n+\n+    /**\n+     * Method: addItemsToList(Collection<String> collection, String list, String collectionDescription, boolean lowercase)\n+     */\n+    @Test\n+    public void testAddItemsToList() throws Exception {\n+        List<String> stringCollection = new ArrayList<>();\n+        String list = \"a,b,C\";\n+        String collectionDescription = \"First 3 letters of the alphabet\";\n+        Misc.addItemsToList(stringCollection, list, collectionDescription, true);\n+        ArrayList<String> arrayList = new ArrayList<>();\n+        arrayList.add(\"a\");  arrayList.add(\"b\"); arrayList.add(\"c\");\n+        assertTrue(stringCollection.size() == 3);\n+        assertEquals(stringCollection.get(stringCollection.size()-1), \"c\");\n+    }\n+\n+    /**\n+     * Method: getFileSystemTotalSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemTotalSpace() throws Exception {\n+assertFalse(Misc.getFileSystemTotalSpace().isEmpty());    }\n+\n+    /**\n+     * Method: getFileSystemFreeSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemFreeSpace() throws Exception {\n+assertFalse(Misc.getFileSystemFreeSpace().isEmpty());    }\n+\n+    /**\n+     * Method: getAge(long value)\n+     */\n+    @Test\n+    public void testGetAge() throws Exception {\n+        assertFalse(Misc.getAge(1).isEmpty());\n+    }\n+    /**\n+     * Method: getDurationInMs(long value)\n+     */\n+    @Test\n+    public void testGetDurationInMs() throws Exception {\n+        assertFalse(Misc.getDurationInMs(14).isEmpty());\n+    }\n+\n+    /**\n+     * Method: parseAge(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testParseAge() throws Exception {\n+        long res = Misc.parseAge(\"2D\", 100);\n+        assertEquals(res, 172800000);\n+    }\n+\n+    /**\n+     * Method: cleanseMessage(String inputString, String hideRegex, String hideMethod)\n+     */\n+    @Test\n+    public void testCleanseMessage() throws Exception {\n+        String s = \"Donald Duck 23  Hey hey  14  Wooo\";\n+        String regex = \"\\\\d\";\n+        String res = Misc.cleanseMessage(s, regex, \" does not matter\");\n+        assertEquals(res, \"Donald Duck **  Hey hey  **  Wooo\");\n+        }\n+\n+    /**\n+     * Method: hideFirstHalf(String inputString, String regex)\n+     */\n+    @Test\n+    public void testHideFirstHalf() throws Exception {\n+        String s = \"Donald Duck     Hey hey     Wooo\";\n+        String hideRegex = \"[^\\\\s*].*[^\\\\s*]\";\n+        String res = Misc.hideFirstHalf(s, hideRegex);\n+        assertEquals(res, \"****************Hey hey     Wooo\");\n+\n+    }\n+\n+\n+    /**\n+     * Method: getBuildOutputDirectory()\n+     */\n+    @Test\n+    public void testGetBuildOutputDirectory() throws Exception {\n+        String outputDirectory = Misc.getBuildOutputDirectory();\n+assertEquals(outputDirectory.substring(outputDirectory.length()-29, outputDirectory.length()), pathSeperator+\"iaf\"+pathSeperator+\"core\"+pathSeperator+\"target\"+pathSeperator+\"test-classes\");    }\n+\n+    /**\n+     * Method: getProjectBaseDir()\n+     */\n+    @Test\n+    public void testGetProjectBaseDir() throws Exception {\n+        String baseDir = Misc.getBuildOutputDirectory();\n+        assertEquals(baseDir.substring(baseDir.length()-29, baseDir.length()), pathSeperator+\"iaf\"+pathSeperator+\"core\"+pathSeperator+\"target\"+pathSeperator+\"test-classes\");\n+    }\n+\n+    /**\n+     * Method: toSortName(String name)\n+     */\n+    @Test\n+    public void testToSortName() throws Exception {\n+assertEquals(Misc.toSortName(\"new_name\"), \"NEW*NAME\");    }\n+\n+    /**\n+     * Method: countRegex(String string, String regex)\n+     */\n+    @Test\n+    public void testCountRegex() throws Exception {\n+String s = \"12ab34\";\n+    String regex = \"\\\\d\";\n+    int regexCount = Misc.countRegex(s, regex);\n+    assertEquals(regexCount, 4);\n+    }\n+\n+    /**\n+     * Method: resourceToString(URL resource)\n+     */\n+    @Test\n+    public void testResourceToStringResource() throws Exception {\n+        URL resource = new URL(\"http://example.com/\");\n+        String s1 = Misc.resourceToString(resource);\n+        assertEquals(s1, \"<!doctype html>\\n\" +\n+                \"<html>\\n\" +\n+                \"<head>\\n\" +\n+                \"    <title>Example Domain</title>\\n\" +\n+                \"\\n\" +\n+                \"    <meta charset=\\\"utf-8\\\" />\\n\" +\n+                \"    <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\" />\\n\" +\n+                \"    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n\" +\n+                \"    <style type=\\\"text/css\\\">\\n\" +\n+                \"    body {\\n\" +\n+                \"        background-color: #f0f0f2;\\n\" +\n+                \"        margin: 0;\\n\" +\n+                \"        padding: 0;\\n\" +\n+                \"        font-family: -apple-system, system-ui, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Open Sans\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\n\" +\n+                \"        \\n\" +\n+                \"    }\\n\" +\n+                \"    div {\\n\" +\n+                \"        width: 600px;\\n\" +\n+                \"        margin: 5em auto;\\n\" +\n+                \"        padding: 2em;\\n\" +\n+                \"        background-color: #fdfdff;\\n\" +\n+                \"        border-radius: 0.5em;\\n\" +\n+                \"        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\\n\" +\n+                \"    }\\n\" +\n+                \"    a:link, a:visited {\\n\" +\n+                \"        color: #38488f;\\n\" +\n+                \"        text-decoration: none;\\n\" +\n+                \"    }\\n\" +\n+                \"    @media (max-width: 700px) {\\n\" +\n+                \"        div {\\n\" +\n+                \"            margin: 0 auto;\\n\" +\n+                \"            width: auto;\\n\" +\n+                \"        }\\n\" +\n+                \"    }\\n\" +\n+                \"    </style>    \\n\" +\n+                \"</head>\\n\" +\n+                \"\\n\" +\n+                \"<body>\\n\" +\n+                \"<div>\\n\" +\n+                \"    <h1>Example Domain</h1>\\n\" +\n+                \"    <p>This domain is for use in illustrative examples in documents. You may use this\\n\" +\n+                \"    domain in literature without prior coordination or asking for permission.</p>\\n\" +\n+                \"    <p><a href=\\\"https://www.iana.org/domains/example\\\">More information...</a></p>\\n\" +\n+                \"</div>\\n\" +\n+                \"</body>\\n\" +\n+                \"</html>\\n\");\n+    }\n+\n+    /**\n+     * Method: resourceToString(URL resource, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testResourceToStringForResourceEndOfLineStringXmlEncode() throws Exception {\n+        URL resource = new URL(\"http://example.com/\");\n+        String s1 = Misc.resourceToString(resource, \"end of the page\", true);\n+        assertEquals(s1, \"&lt;!doctype html&gt;end of the page&lt;html&gt;end of the page&lt;head&gt;end of the page    &lt;title&gt;Example Domain&lt;/title&gt;end of the pageend of the page    &lt;meta charset=&quot;utf-8&quot; /&gt;end of the page    &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;end of the page    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;end of the page    &lt;style type=&quot;text/css&quot;&gt;end of the page    body {end of the page        background-color: #f0f0f2;end of the page        margin: 0;end of the page        padding: 0;end of the page        font-family: -apple-system, system-ui, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;end of the page        end of the page    }end of the page    div {end of the page        width: 600px;end of the page        margin: 5em auto;end of the page        padding: 2em;end of the page        background-color: #fdfdff;end of the page        border-radius: 0.5em;end of the page        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);end of the page    }end of the page    a:link, a:visited {end of the page        color: #38488f;end of the page        text-decoration: none;end of the page    }end of the page    @media (max-width: 700px) {end of the page        div {end of the page            margin: 0 auto;end of the page            width: auto;end of the page        }end of the page    }end of the page    &lt;/style&gt;    end of the page&lt;/head&gt;end of the pageend of the page&lt;body&gt;end of the page&lt;div&gt;end of the page    &lt;h1&gt;Example Domain&lt;/h1&gt;end of the page    &lt;p&gt;This domain is for use in illustrative examples in documents. You may use thisend of the page    domain in literature without prior coordination or asking for permission.&lt;/p&gt;end of the page    &lt;p&gt;&lt;a href=&quot;https://www.iana.org/domains/example&quot;&gt;More information...&lt;/a&gt;&lt;/p&gt;end of the page&lt;/div&gt;end of the page&lt;/body&gt;end of the page&lt;/html&gt;end of the page\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkzMDY2Mg=="}, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 630}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTQwODc3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzo0NDo1OVrOGfvGYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoxMjo0M1rOGhGUaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkzMDcyMQ==", "bodyText": "In stead of using a big concatinated string, it might be easier and more readable to use TestFileUtils.getResource and read the contents from a file instead", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r435930721", "createdAt": "2020-06-05T13:44:59Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");\n+    }\n+\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringNoXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", false);\n+        assertEquals(s, \"<root> 23    <name>GeeksforGeeks</name> 23    <address> 23        <sector>142</sector> 23        <location>Noida</location> 23    </address> 23</root> r\");\n+    }\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", true);\n+        assertEquals(s, \"&lt;root&gt; 23    &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23    &lt;address&gt; 23        &lt;sector&gt;142&lt;/sector&gt; 23        &lt;location&gt;Noida&lt;/location&gt; 23    &lt;/address&gt; 23&lt;/root&gt; r\");\n+    }\n+\n+\n+\n+    /**\n+     * Method: replace(String source, String from, String to)\n+     */\n+    @Test\n+    public void testReplace() throws Exception {\n+        String a = \"Kobe\";\n+        String res = Misc.replace(a, \"Ko\", \"Phoe\");\n+        assertEquals(res, \"Phoebe\");\n+    }\n+\n+    /**\n+     * Method: concatStrings(String part1, String separator, String part2)\n+     */\n+    @Test\n+    public void testConcatStrings() throws Exception {\n+        String a = \"LeBron\";\n+        String b = \"James\";\n+        String seperator = \"//\";\n+        String res = Misc.concatStrings(a, seperator, b);\n+        assertEquals(res, \"LeBron//James\");\n+    }\n+\n+    /**\n+     * Method: hide(String string)\n+     */\n+    @Test\n+    public void testHideString() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a);\n+        assertEquals(res, \"****\");\n+    }\n+\n+    /**\n+     * Method: hide(String string, int mode)\n+     */\n+    @Test\n+    public void testHideForStringMode() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a, 1);\n+        assertEquals(res, \"t**t\");\n+    }\n+\n+    /**\n+     * Method: byteArrayToString(byte[] input, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testByteArrayToString() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        String res = Misc.byteArrayToString(arr, \"\", true);\n+        assertEquals(res, s);\n+    }\n+\n+    /**\n+     * Method: gzip(String input)\n+     */\n+    @Test\n+    public void testGzipGUnzipInput() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        byte[] zipped = Misc.gzip(arr);\n+        assertEquals(Misc.gunzipToString(zipped), \"test\");\n+    }\n+\n+    @Test\n+    public void testGzipString() throws Exception {\n+        String s = \"you deserved this\";\n+        byte[] zipped = Misc.gzip(s);\n+        assertEquals(Misc.gunzipToString(zipped), \"you deserved this\");\n+\n+    }\n+\n+    /**\n+     * Method: compress(String input)\n+     */\n+    @Test\n+    public void testCompressDecompressInput() throws Exception {\n+        String s = \"test\";\n+        byte[] compressed = Misc.compress(s);\n+        String decompressed = Misc.decompressToString(compressed);\n+        assertEquals(decompressed, \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: copyContext(String keys, Map<String,Object> from, Map<String,Object> to)\n+     */\n+    @Test\n+    public void testCopyContext() throws Exception {\n+        Map<String, Object> context1 = new HashMap<>();\n+        Map<String, Object> context2 = new HashMap<>();\n+        String keys = \"a,b\";\n+        context1.put(\"a\", 15);\n+        context1.put(\"b\", 16);\n+        Misc.copyContext(keys, context1, context2);\n+        assertTrue(context1.equals(context2));\n+    }\n+\n+    /**\n+     * Method: toFileSize(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testToFileSizeForValueDefaultValue() throws Exception {\n+        long res = Misc.toFileSize(\"14GB\", 20);\n+        assertEquals(Long.toString(res), \"15032385536\");\n+    }\n+\n+    /**\n+     * Method: toFileSize(long value)\n+     */\n+    @Test\n+    public void testToFileSizeValue() throws Exception {\n+        String kb = Misc.toFileSize(150000, false, true);\n+        String mb = Misc.toFileSize(15000000, true);\n+        String gb = Misc.toFileSize(Long.parseLong(\"3221225472\"));\n+        assertEquals(gb, \"3GB\");\n+        assertEquals(mb, \"14 MB\");\n+        assertEquals(kb, \"146KB\");\n+    }\n+\n+\n+    @Test\n+    public void testListToStringWithStringList() {\n+        List list = new ArrayList<Integer>();\n+        list.add(\"bailar\");\n+        list.add(\"besos\");\n+        String res = Misc.listToString(list);\n+        assertEquals(res, \"bailarbesos\");\n+    }\n+\n+    /**\n+     * Method: addItemsToList(Collection<String> collection, String list, String collectionDescription, boolean lowercase)\n+     */\n+    @Test\n+    public void testAddItemsToList() throws Exception {\n+        List<String> stringCollection = new ArrayList<>();\n+        String list = \"a,b,C\";\n+        String collectionDescription = \"First 3 letters of the alphabet\";\n+        Misc.addItemsToList(stringCollection, list, collectionDescription, true);\n+        ArrayList<String> arrayList = new ArrayList<>();\n+        arrayList.add(\"a\");  arrayList.add(\"b\"); arrayList.add(\"c\");\n+        assertTrue(stringCollection.size() == 3);\n+        assertEquals(stringCollection.get(stringCollection.size()-1), \"c\");\n+    }\n+\n+    /**\n+     * Method: getFileSystemTotalSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemTotalSpace() throws Exception {\n+assertFalse(Misc.getFileSystemTotalSpace().isEmpty());    }\n+\n+    /**\n+     * Method: getFileSystemFreeSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemFreeSpace() throws Exception {\n+assertFalse(Misc.getFileSystemFreeSpace().isEmpty());    }\n+\n+    /**\n+     * Method: getAge(long value)\n+     */\n+    @Test\n+    public void testGetAge() throws Exception {\n+        assertFalse(Misc.getAge(1).isEmpty());\n+    }\n+    /**\n+     * Method: getDurationInMs(long value)\n+     */\n+    @Test\n+    public void testGetDurationInMs() throws Exception {\n+        assertFalse(Misc.getDurationInMs(14).isEmpty());\n+    }\n+\n+    /**\n+     * Method: parseAge(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testParseAge() throws Exception {\n+        long res = Misc.parseAge(\"2D\", 100);\n+        assertEquals(res, 172800000);\n+    }\n+\n+    /**\n+     * Method: cleanseMessage(String inputString, String hideRegex, String hideMethod)\n+     */\n+    @Test\n+    public void testCleanseMessage() throws Exception {\n+        String s = \"Donald Duck 23  Hey hey  14  Wooo\";\n+        String regex = \"\\\\d\";\n+        String res = Misc.cleanseMessage(s, regex, \" does not matter\");\n+        assertEquals(res, \"Donald Duck **  Hey hey  **  Wooo\");\n+        }\n+\n+    /**\n+     * Method: hideFirstHalf(String inputString, String regex)\n+     */\n+    @Test\n+    public void testHideFirstHalf() throws Exception {\n+        String s = \"Donald Duck     Hey hey     Wooo\";\n+        String hideRegex = \"[^\\\\s*].*[^\\\\s*]\";\n+        String res = Misc.hideFirstHalf(s, hideRegex);\n+        assertEquals(res, \"****************Hey hey     Wooo\");\n+\n+    }\n+\n+\n+    /**\n+     * Method: getBuildOutputDirectory()\n+     */\n+    @Test\n+    public void testGetBuildOutputDirectory() throws Exception {\n+        String outputDirectory = Misc.getBuildOutputDirectory();\n+assertEquals(outputDirectory.substring(outputDirectory.length()-29, outputDirectory.length()), pathSeperator+\"iaf\"+pathSeperator+\"core\"+pathSeperator+\"target\"+pathSeperator+\"test-classes\");    }\n+\n+    /**\n+     * Method: getProjectBaseDir()\n+     */\n+    @Test\n+    public void testGetProjectBaseDir() throws Exception {\n+        String baseDir = Misc.getBuildOutputDirectory();\n+        assertEquals(baseDir.substring(baseDir.length()-29, baseDir.length()), pathSeperator+\"iaf\"+pathSeperator+\"core\"+pathSeperator+\"target\"+pathSeperator+\"test-classes\");\n+    }\n+\n+    /**\n+     * Method: toSortName(String name)\n+     */\n+    @Test\n+    public void testToSortName() throws Exception {\n+assertEquals(Misc.toSortName(\"new_name\"), \"NEW*NAME\");    }\n+\n+    /**\n+     * Method: countRegex(String string, String regex)\n+     */\n+    @Test\n+    public void testCountRegex() throws Exception {\n+String s = \"12ab34\";\n+    String regex = \"\\\\d\";\n+    int regexCount = Misc.countRegex(s, regex);\n+    assertEquals(regexCount, 4);\n+    }\n+\n+    /**\n+     * Method: resourceToString(URL resource)\n+     */\n+    @Test\n+    public void testResourceToStringResource() throws Exception {\n+        URL resource = new URL(\"http://example.com/\");\n+        String s1 = Misc.resourceToString(resource);\n+        assertEquals(s1, \"<!doctype html>\\n\" +\n+                \"<html>\\n\" +\n+                \"<head>\\n\" +\n+                \"    <title>Example Domain</title>\\n\" +\n+                \"\\n\" +\n+                \"    <meta charset=\\\"utf-8\\\" />\\n\" +\n+                \"    <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\" />\\n\" +\n+                \"    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n\" +\n+                \"    <style type=\\\"text/css\\\">\\n\" +\n+                \"    body {\\n\" +\n+                \"        background-color: #f0f0f2;\\n\" +\n+                \"        margin: 0;\\n\" +\n+                \"        padding: 0;\\n\" +\n+                \"        font-family: -apple-system, system-ui, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Open Sans\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\n\" +\n+                \"        \\n\" +\n+                \"    }\\n\" +\n+                \"    div {\\n\" +\n+                \"        width: 600px;\\n\" +\n+                \"        margin: 5em auto;\\n\" +\n+                \"        padding: 2em;\\n\" +\n+                \"        background-color: #fdfdff;\\n\" +\n+                \"        border-radius: 0.5em;\\n\" +\n+                \"        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\\n\" +\n+                \"    }\\n\" +\n+                \"    a:link, a:visited {\\n\" +\n+                \"        color: #38488f;\\n\" +\n+                \"        text-decoration: none;\\n\" +\n+                \"    }\\n\" +\n+                \"    @media (max-width: 700px) {\\n\" +\n+                \"        div {\\n\" +\n+                \"            margin: 0 auto;\\n\" +\n+                \"            width: auto;\\n\" +\n+                \"        }\\n\" +\n+                \"    }\\n\" +\n+                \"    </style>    \\n\" +\n+                \"</head>\\n\" +\n+                \"\\n\" +\n+                \"<body>\\n\" +\n+                \"<div>\\n\" +\n+                \"    <h1>Example Domain</h1>\\n\" +\n+                \"    <p>This domain is for use in illustrative examples in documents. You may use this\\n\" +\n+                \"    domain in literature without prior coordination or asking for permission.</p>\\n\" +\n+                \"    <p><a href=\\\"https://www.iana.org/domains/example\\\">More information...</a></p>\\n\" +\n+                \"</div>\\n\" +\n+                \"</body>\\n\" +\n+                \"</html>\\n\");\n+    }\n+\n+    /**\n+     * Method: resourceToString(URL resource, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testResourceToStringForResourceEndOfLineStringXmlEncode() throws Exception {\n+        URL resource = new URL(\"http://example.com/\");\n+        String s1 = Misc.resourceToString(resource, \"end of the page\", true);\n+        assertEquals(s1, \"&lt;!doctype html&gt;end of the page&lt;html&gt;end of the page&lt;head&gt;end of the page    &lt;title&gt;Example Domain&lt;/title&gt;end of the pageend of the page    &lt;meta charset=&quot;utf-8&quot; /&gt;end of the page    &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;end of the page    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;end of the page    &lt;style type=&quot;text/css&quot;&gt;end of the page    body {end of the page        background-color: #f0f0f2;end of the page        margin: 0;end of the page        padding: 0;end of the page        font-family: -apple-system, system-ui, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;end of the page        end of the page    }end of the page    div {end of the page        width: 600px;end of the page        margin: 5em auto;end of the page        padding: 2em;end of the page        background-color: #fdfdff;end of the page        border-radius: 0.5em;end of the page        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);end of the page    }end of the page    a:link, a:visited {end of the page        color: #38488f;end of the page        text-decoration: none;end of the page    }end of the page    @media (max-width: 700px) {end of the page        div {end of the page            margin: 0 auto;end of the page            width: auto;end of the page        }end of the page    }end of the page    &lt;/style&gt;    end of the page&lt;/head&gt;end of the pageend of the page&lt;body&gt;end of the page&lt;div&gt;end of the page    &lt;h1&gt;Example Domain&lt;/h1&gt;end of the page    &lt;p&gt;This domain is for use in illustrative examples in documents. You may use thisend of the page    domain in literature without prior coordination or asking for permission.&lt;/p&gt;end of the page    &lt;p&gt;&lt;a href=&quot;https://www.iana.org/domains/example&quot;&gt;More information...&lt;/a&gt;&lt;/p&gt;end of the page&lt;/div&gt;end of the page&lt;/body&gt;end of the page&lt;/html&gt;end of the page\");\n+    }\n+\n+    @Test\n+    public void testResourceToStringForResourceEndOfLineString() throws Exception {\n+        URL resource = new URL(\"http://example.com/\");\n+        String s1 = Misc.resourceToString(resource, \"end of the page\");\n+        assertEquals(s1, \"<!doctype html>end of the page<html>end of the page<head>end of the page    <title>Example Domain</title>end of the pageend of the page    <meta charset=\\\"utf-8\\\" />end of the page    <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\" />end of the page    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />end of the page    <style type=\\\"text/css\\\">end of the page    body {end of the page        background-color: #f0f0f2;end of the page        margin: 0;end of the page        padding: 0;end of the page        font-family: -apple-system, system-ui, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Open Sans\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;end of the page        end of the page    }end of the page    div {end of the page        width: 600px;end of the page        margin: 5em auto;end of the page        padding: 2em;end of the page        background-color: #fdfdff;end of the page        border-radius: 0.5em;end of the page        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);end of the page    }end of the page    a:link, a:visited {end of the page        color: #38488f;end of the page        text-decoration: none;end of the page    }end of the page    @media (max-width: 700px) {end of the page        div {end of the page            margin: 0 auto;end of the page            width: auto;end of the page        }end of the page    }end of the page    </style>    end of the page</head>end of the pageend of the page<body>end of the page<div>end of the page    <h1>Example Domain</h1>end of the page    <p>This domain is for use in illustrative examples in documents. You may use thisend of the page    domain in literature without prior coordination or asking for permission.</p>end of the page    <p><a href=\\\"https://www.iana.org/domains/example\\\">More information...</a></p>end of the page</div>end of the page</body>end of the page</html>end of the page\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 637}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1OTcyMA==", "bodyText": "done", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r437359720", "createdAt": "2020-06-09T12:12:43Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,610 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");\n+    }\n+\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringNoXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", false);\n+        assertEquals(s, \"<root> 23    <name>GeeksforGeeks</name> 23    <address> 23        <sector>142</sector> 23        <location>Noida</location> 23    </address> 23</root> r\");\n+    }\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", true);\n+        assertEquals(s, \"&lt;root&gt; 23    &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23    &lt;address&gt; 23        &lt;sector&gt;142&lt;/sector&gt; 23        &lt;location&gt;Noida&lt;/location&gt; 23    &lt;/address&gt; 23&lt;/root&gt; r\");\n+    }\n+\n+\n+\n+    /**\n+     * Method: replace(String source, String from, String to)\n+     */\n+    @Test\n+    public void testReplace() throws Exception {\n+        String a = \"Kobe\";\n+        String res = Misc.replace(a, \"Ko\", \"Phoe\");\n+        assertEquals(res, \"Phoebe\");\n+    }\n+\n+    /**\n+     * Method: concatStrings(String part1, String separator, String part2)\n+     */\n+    @Test\n+    public void testConcatStrings() throws Exception {\n+        String a = \"LeBron\";\n+        String b = \"James\";\n+        String seperator = \"//\";\n+        String res = Misc.concatStrings(a, seperator, b);\n+        assertEquals(res, \"LeBron//James\");\n+    }\n+\n+    /**\n+     * Method: hide(String string)\n+     */\n+    @Test\n+    public void testHideString() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a);\n+        assertEquals(res, \"****\");\n+    }\n+\n+    /**\n+     * Method: hide(String string, int mode)\n+     */\n+    @Test\n+    public void testHideForStringMode() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a, 1);\n+        assertEquals(res, \"t**t\");\n+    }\n+\n+    /**\n+     * Method: byteArrayToString(byte[] input, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testByteArrayToString() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        String res = Misc.byteArrayToString(arr, \"\", true);\n+        assertEquals(res, s);\n+    }\n+\n+    /**\n+     * Method: gzip(String input)\n+     */\n+    @Test\n+    public void testGzipGUnzipInput() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        byte[] zipped = Misc.gzip(arr);\n+        assertEquals(Misc.gunzipToString(zipped), \"test\");\n+    }\n+\n+    @Test\n+    public void testGzipString() throws Exception {\n+        String s = \"you deserved this\";\n+        byte[] zipped = Misc.gzip(s);\n+        assertEquals(Misc.gunzipToString(zipped), \"you deserved this\");\n+\n+    }\n+\n+    /**\n+     * Method: compress(String input)\n+     */\n+    @Test\n+    public void testCompressDecompressInput() throws Exception {\n+        String s = \"test\";\n+        byte[] compressed = Misc.compress(s);\n+        String decompressed = Misc.decompressToString(compressed);\n+        assertEquals(decompressed, \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: copyContext(String keys, Map<String,Object> from, Map<String,Object> to)\n+     */\n+    @Test\n+    public void testCopyContext() throws Exception {\n+        Map<String, Object> context1 = new HashMap<>();\n+        Map<String, Object> context2 = new HashMap<>();\n+        String keys = \"a,b\";\n+        context1.put(\"a\", 15);\n+        context1.put(\"b\", 16);\n+        Misc.copyContext(keys, context1, context2);\n+        assertTrue(context1.equals(context2));\n+    }\n+\n+    /**\n+     * Method: toFileSize(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testToFileSizeForValueDefaultValue() throws Exception {\n+        long res = Misc.toFileSize(\"14GB\", 20);\n+        assertEquals(Long.toString(res), \"15032385536\");\n+    }\n+\n+    /**\n+     * Method: toFileSize(long value)\n+     */\n+    @Test\n+    public void testToFileSizeValue() throws Exception {\n+        String kb = Misc.toFileSize(150000, false, true);\n+        String mb = Misc.toFileSize(15000000, true);\n+        String gb = Misc.toFileSize(Long.parseLong(\"3221225472\"));\n+        assertEquals(gb, \"3GB\");\n+        assertEquals(mb, \"14 MB\");\n+        assertEquals(kb, \"146KB\");\n+    }\n+\n+\n+    @Test\n+    public void testListToStringWithStringList() {\n+        List list = new ArrayList<Integer>();\n+        list.add(\"bailar\");\n+        list.add(\"besos\");\n+        String res = Misc.listToString(list);\n+        assertEquals(res, \"bailarbesos\");\n+    }\n+\n+    /**\n+     * Method: addItemsToList(Collection<String> collection, String list, String collectionDescription, boolean lowercase)\n+     */\n+    @Test\n+    public void testAddItemsToList() throws Exception {\n+        List<String> stringCollection = new ArrayList<>();\n+        String list = \"a,b,C\";\n+        String collectionDescription = \"First 3 letters of the alphabet\";\n+        Misc.addItemsToList(stringCollection, list, collectionDescription, true);\n+        ArrayList<String> arrayList = new ArrayList<>();\n+        arrayList.add(\"a\");  arrayList.add(\"b\"); arrayList.add(\"c\");\n+        assertTrue(stringCollection.size() == 3);\n+        assertEquals(stringCollection.get(stringCollection.size()-1), \"c\");\n+    }\n+\n+    /**\n+     * Method: getFileSystemTotalSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemTotalSpace() throws Exception {\n+assertFalse(Misc.getFileSystemTotalSpace().isEmpty());    }\n+\n+    /**\n+     * Method: getFileSystemFreeSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemFreeSpace() throws Exception {\n+assertFalse(Misc.getFileSystemFreeSpace().isEmpty());    }\n+\n+    /**\n+     * Method: getAge(long value)\n+     */\n+    @Test\n+    public void testGetAge() throws Exception {\n+        assertFalse(Misc.getAge(1).isEmpty());\n+    }\n+    /**\n+     * Method: getDurationInMs(long value)\n+     */\n+    @Test\n+    public void testGetDurationInMs() throws Exception {\n+        assertFalse(Misc.getDurationInMs(14).isEmpty());\n+    }\n+\n+    /**\n+     * Method: parseAge(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testParseAge() throws Exception {\n+        long res = Misc.parseAge(\"2D\", 100);\n+        assertEquals(res, 172800000);\n+    }\n+\n+    /**\n+     * Method: cleanseMessage(String inputString, String hideRegex, String hideMethod)\n+     */\n+    @Test\n+    public void testCleanseMessage() throws Exception {\n+        String s = \"Donald Duck 23  Hey hey  14  Wooo\";\n+        String regex = \"\\\\d\";\n+        String res = Misc.cleanseMessage(s, regex, \" does not matter\");\n+        assertEquals(res, \"Donald Duck **  Hey hey  **  Wooo\");\n+        }\n+\n+    /**\n+     * Method: hideFirstHalf(String inputString, String regex)\n+     */\n+    @Test\n+    public void testHideFirstHalf() throws Exception {\n+        String s = \"Donald Duck     Hey hey     Wooo\";\n+        String hideRegex = \"[^\\\\s*].*[^\\\\s*]\";\n+        String res = Misc.hideFirstHalf(s, hideRegex);\n+        assertEquals(res, \"****************Hey hey     Wooo\");\n+\n+    }\n+\n+\n+    /**\n+     * Method: getBuildOutputDirectory()\n+     */\n+    @Test\n+    public void testGetBuildOutputDirectory() throws Exception {\n+        String outputDirectory = Misc.getBuildOutputDirectory();\n+assertEquals(outputDirectory.substring(outputDirectory.length()-29, outputDirectory.length()), pathSeperator+\"iaf\"+pathSeperator+\"core\"+pathSeperator+\"target\"+pathSeperator+\"test-classes\");    }\n+\n+    /**\n+     * Method: getProjectBaseDir()\n+     */\n+    @Test\n+    public void testGetProjectBaseDir() throws Exception {\n+        String baseDir = Misc.getBuildOutputDirectory();\n+        assertEquals(baseDir.substring(baseDir.length()-29, baseDir.length()), pathSeperator+\"iaf\"+pathSeperator+\"core\"+pathSeperator+\"target\"+pathSeperator+\"test-classes\");\n+    }\n+\n+    /**\n+     * Method: toSortName(String name)\n+     */\n+    @Test\n+    public void testToSortName() throws Exception {\n+assertEquals(Misc.toSortName(\"new_name\"), \"NEW*NAME\");    }\n+\n+    /**\n+     * Method: countRegex(String string, String regex)\n+     */\n+    @Test\n+    public void testCountRegex() throws Exception {\n+String s = \"12ab34\";\n+    String regex = \"\\\\d\";\n+    int regexCount = Misc.countRegex(s, regex);\n+    assertEquals(regexCount, 4);\n+    }\n+\n+    /**\n+     * Method: resourceToString(URL resource)\n+     */\n+    @Test\n+    public void testResourceToStringResource() throws Exception {\n+        URL resource = new URL(\"http://example.com/\");\n+        String s1 = Misc.resourceToString(resource);\n+        assertEquals(s1, \"<!doctype html>\\n\" +\n+                \"<html>\\n\" +\n+                \"<head>\\n\" +\n+                \"    <title>Example Domain</title>\\n\" +\n+                \"\\n\" +\n+                \"    <meta charset=\\\"utf-8\\\" />\\n\" +\n+                \"    <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\" />\\n\" +\n+                \"    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n\" +\n+                \"    <style type=\\\"text/css\\\">\\n\" +\n+                \"    body {\\n\" +\n+                \"        background-color: #f0f0f2;\\n\" +\n+                \"        margin: 0;\\n\" +\n+                \"        padding: 0;\\n\" +\n+                \"        font-family: -apple-system, system-ui, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Open Sans\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\n\" +\n+                \"        \\n\" +\n+                \"    }\\n\" +\n+                \"    div {\\n\" +\n+                \"        width: 600px;\\n\" +\n+                \"        margin: 5em auto;\\n\" +\n+                \"        padding: 2em;\\n\" +\n+                \"        background-color: #fdfdff;\\n\" +\n+                \"        border-radius: 0.5em;\\n\" +\n+                \"        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\\n\" +\n+                \"    }\\n\" +\n+                \"    a:link, a:visited {\\n\" +\n+                \"        color: #38488f;\\n\" +\n+                \"        text-decoration: none;\\n\" +\n+                \"    }\\n\" +\n+                \"    @media (max-width: 700px) {\\n\" +\n+                \"        div {\\n\" +\n+                \"            margin: 0 auto;\\n\" +\n+                \"            width: auto;\\n\" +\n+                \"        }\\n\" +\n+                \"    }\\n\" +\n+                \"    </style>    \\n\" +\n+                \"</head>\\n\" +\n+                \"\\n\" +\n+                \"<body>\\n\" +\n+                \"<div>\\n\" +\n+                \"    <h1>Example Domain</h1>\\n\" +\n+                \"    <p>This domain is for use in illustrative examples in documents. You may use this\\n\" +\n+                \"    domain in literature without prior coordination or asking for permission.</p>\\n\" +\n+                \"    <p><a href=\\\"https://www.iana.org/domains/example\\\">More information...</a></p>\\n\" +\n+                \"</div>\\n\" +\n+                \"</body>\\n\" +\n+                \"</html>\\n\");\n+    }\n+\n+    /**\n+     * Method: resourceToString(URL resource, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testResourceToStringForResourceEndOfLineStringXmlEncode() throws Exception {\n+        URL resource = new URL(\"http://example.com/\");\n+        String s1 = Misc.resourceToString(resource, \"end of the page\", true);\n+        assertEquals(s1, \"&lt;!doctype html&gt;end of the page&lt;html&gt;end of the page&lt;head&gt;end of the page    &lt;title&gt;Example Domain&lt;/title&gt;end of the pageend of the page    &lt;meta charset=&quot;utf-8&quot; /&gt;end of the page    &lt;meta http-equiv=&quot;Content-type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;end of the page    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;end of the page    &lt;style type=&quot;text/css&quot;&gt;end of the page    body {end of the page        background-color: #f0f0f2;end of the page        margin: 0;end of the page        padding: 0;end of the page        font-family: -apple-system, system-ui, BlinkMacSystemFont, &quot;Segoe UI&quot;, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;end of the page        end of the page    }end of the page    div {end of the page        width: 600px;end of the page        margin: 5em auto;end of the page        padding: 2em;end of the page        background-color: #fdfdff;end of the page        border-radius: 0.5em;end of the page        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);end of the page    }end of the page    a:link, a:visited {end of the page        color: #38488f;end of the page        text-decoration: none;end of the page    }end of the page    @media (max-width: 700px) {end of the page        div {end of the page            margin: 0 auto;end of the page            width: auto;end of the page        }end of the page    }end of the page    &lt;/style&gt;    end of the page&lt;/head&gt;end of the pageend of the page&lt;body&gt;end of the page&lt;div&gt;end of the page    &lt;h1&gt;Example Domain&lt;/h1&gt;end of the page    &lt;p&gt;This domain is for use in illustrative examples in documents. You may use thisend of the page    domain in literature without prior coordination or asking for permission.&lt;/p&gt;end of the page    &lt;p&gt;&lt;a href=&quot;https://www.iana.org/domains/example&quot;&gt;More information...&lt;/a&gt;&lt;/p&gt;end of the page&lt;/div&gt;end of the page&lt;/body&gt;end of the page&lt;/html&gt;end of the page\");\n+    }\n+\n+    @Test\n+    public void testResourceToStringForResourceEndOfLineString() throws Exception {\n+        URL resource = new URL(\"http://example.com/\");\n+        String s1 = Misc.resourceToString(resource, \"end of the page\");\n+        assertEquals(s1, \"<!doctype html>end of the page<html>end of the page<head>end of the page    <title>Example Domain</title>end of the pageend of the page    <meta charset=\\\"utf-8\\\" />end of the page    <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\" />end of the page    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />end of the page    <style type=\\\"text/css\\\">end of the page    body {end of the page        background-color: #f0f0f2;end of the page        margin: 0;end of the page        padding: 0;end of the page        font-family: -apple-system, system-ui, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Open Sans\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;end of the page        end of the page    }end of the page    div {end of the page        width: 600px;end of the page        margin: 5em auto;end of the page        padding: 2em;end of the page        background-color: #fdfdff;end of the page        border-radius: 0.5em;end of the page        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);end of the page    }end of the page    a:link, a:visited {end of the page        color: #38488f;end of the page        text-decoration: none;end of the page    }end of the page    @media (max-width: 700px) {end of the page        div {end of the page            margin: 0 auto;end of the page            width: auto;end of the page        }end of the page    }end of the page    </style>    end of the page</head>end of the pageend of the page<body>end of the page<div>end of the page    <h1>Example Domain</h1>end of the page    <p>This domain is for use in illustrative examples in documents. You may use thisend of the page    domain in literature without prior coordination or asking for permission.</p>end of the page    <p><a href=\\\"https://www.iana.org/domains/example\\\">More information...</a></p>end of the page</div>end of the page</body>end of the page</html>end of the page\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkzMDcyMQ=="}, "originalCommit": {"oid": "de8c74960b4a2926132b0c198bcf49d0a6e21fab"}, "originalPosition": 637}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTk0MjI4OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNToyNjo0NFrOGh6W4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNTozNjoxN1rOGh6xoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxMjMyMg==", "bodyText": "Travis is failing :O MiscTest.testResourceToStringResource:571 \u00bb StringIndexOutOfBounds String inde...", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r438212322", "createdAt": "2020-06-10T15:26:44Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,590 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import nl.nn.adapterframework.testutil.TestFileUtils;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");\n+    }\n+\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringNoXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", false);\n+        assertEquals(s, \"<root> 23    <name>GeeksforGeeks</name> 23    <address> 23        <sector>142</sector> 23        <location>Noida</location> 23    </address> 23</root> r\");\n+    }\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringXMLEncodeWithEndOfLineString() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", true);\n+        assertEquals(s, \"&lt;root&gt; 23    &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23    &lt;address&gt; 23        &lt;sector&gt;142&lt;/sector&gt; 23        &lt;location&gt;Noida&lt;/location&gt; 23    &lt;/address&gt; 23&lt;/root&gt; r\");\n+    }\n+\n+\n+    /**\n+     * Method: replace(String source, String from, String to)\n+     */\n+    @Test\n+    public void testReplace() throws Exception {\n+        String a = \"Kobe\";\n+        String res = Misc.replace(a, \"Ko\", \"Phoe\");\n+        assertEquals(res, \"Phoebe\");\n+    }\n+\n+    /**\n+     * Method: concatStrings(String part1, String separator, String part2)\n+     */\n+    @Test\n+    public void testConcatStrings() throws Exception {\n+        String a = \"LeBron\";\n+        String b = \"James\";\n+        String seperator = \"//\";\n+        String res = Misc.concatStrings(a, seperator, b);\n+        assertEquals(res, \"LeBron//James\");\n+    }\n+\n+    /**\n+     * Method: hide(String string)\n+     */\n+    @Test\n+    public void testHideString() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a);\n+        assertEquals(res, \"****\");\n+    }\n+\n+    /**\n+     * Method: hide(String string, int mode)\n+     */\n+    @Test\n+    public void testHideForStringMode() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a, 1);\n+        assertEquals(res, \"t**t\");\n+    }\n+\n+    /**\n+     * Method: byteArrayToString(byte[] input, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testByteArrayToString() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        String res = Misc.byteArrayToString(arr, \"\", true);\n+        assertEquals(res, s);\n+    }\n+\n+    /**\n+     * Method: gzip(String input)\n+     */\n+    @Test\n+    public void testGzipGUnzipInput() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        byte[] zipped = Misc.gzip(arr);\n+        assertEquals(Misc.gunzipToString(zipped), \"test\");\n+    }\n+\n+    @Test\n+    public void testGzipString() throws Exception {\n+        String s = \"you deserved this\";\n+        byte[] zipped = Misc.gzip(s);\n+        assertEquals(Misc.gunzipToString(zipped), \"you deserved this\");\n+\n+    }\n+\n+    /**\n+     * Method: compress(String input)\n+     */\n+    @Test\n+    public void testCompressed() throws Exception {\n+        String s = \"#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$\";\n+        String s1 = \"teststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststests\";\n+        String s3 = \"123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123\";\n+        byte[] compressedSymbols = Misc.compress(s);\n+        byte[] compressedText = Misc.compress(s1);\n+        byte[] compressedNumbers = Misc.compress(s3);\n+        assertTrue(compressedNumbers.length < s3.length());\n+        assertEquals(compressedNumbers[0], 120);\n+        assertEquals(compressedNumbers[1], -38);\n+        assertTrue(compressedText.length < s1.length());\n+        assertEquals(compressedText[0], 120);\n+        assertEquals(compressedText[1], -38);\n+        assertTrue(compressedSymbols.length < s.length());\n+        assertEquals(compressedSymbols[0], 120);\n+        assertEquals(compressedSymbols[1], -38);\n+    }\n+\n+    @Test\n+    public void testCompressDecompressInput() throws Exception {\n+        String s = \"test\";\n+        byte[] compressed = Misc.compress(s);\n+        String decompressed = Misc.decompressToString(compressed);\n+        assertEquals(decompressed, \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: copyContext(String keys, Map<String,Object> from, Map<String,Object> to)\n+     */\n+    @Test\n+    public void testCopyContext() throws Exception {\n+        Map<String, Object> context1 = new HashMap<>();\n+        Map<String, Object> context2 = new HashMap<>();\n+        String keys = \"a,b\";\n+        context1.put(\"a\", 15);\n+        context1.put(\"b\", 16);\n+        Misc.copyContext(keys, context1, context2);\n+        assertTrue(context1.equals(context2));\n+    }\n+\n+    /**\n+     * Method: toFileSize(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testToFileSizeForValueDefaultValue() throws Exception {\n+        long res = Misc.toFileSize(\"14GB\", 20);\n+        assertEquals(Long.toString(res), \"15032385536\");\n+    }\n+\n+    /**\n+     * Method: toFileSize(long value)\n+     */\n+    @Test\n+    public void testToFileSizeValue() throws Exception {\n+        String kb = Misc.toFileSize(150000, false, true);\n+        String mb = Misc.toFileSize(15000000, true);\n+        String gb = Misc.toFileSize(Long.parseLong(\"3221225472\"));\n+        assertEquals(gb, \"3GB\");\n+        assertEquals(mb, \"14 MB\");\n+        assertEquals(kb, \"146KB\");\n+    }\n+\n+\n+    @Test\n+    public void testListToStringWithStringList() {\n+        List list = new ArrayList<Integer>();\n+        list.add(\"bailar\");\n+        list.add(\"besos\");\n+        String res = Misc.listToString(list);\n+        assertEquals(res, \"bailarbesos\");\n+    }\n+\n+    /**\n+     * Method: addItemsToList(Collection<String> collection, String list, String collectionDescription, boolean lowercase)\n+     */\n+    @Test\n+    public void testAddItemsToList() throws Exception {\n+        List<String> stringCollection = new ArrayList<>();\n+        String list = \"a,b,C\";\n+        String collectionDescription = \"First 3 letters of the alphabet\";\n+        Misc.addItemsToList(stringCollection, list, collectionDescription, true);\n+        ArrayList<String> arrayList = new ArrayList<>();\n+        arrayList.add(\"a\");\n+        arrayList.add(\"b\");\n+        arrayList.add(\"c\");\n+        assertTrue(stringCollection.size() == 3);\n+        assertEquals(stringCollection.get(stringCollection.size() - 1), \"c\");\n+    }\n+\n+    /**\n+     * Method: getFileSystemTotalSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemTotalSpace() throws Exception {\n+        assertFalse(Misc.getFileSystemTotalSpace().isEmpty());\n+    }\n+\n+    /**\n+     * Method: getFileSystemFreeSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemFreeSpace() throws Exception {\n+        assertFalse(Misc.getFileSystemFreeSpace().isEmpty());\n+    }\n+\n+    /**\n+     * Method: getAge(long value)\n+     */\n+    @Test\n+    public void testGetAge() throws Exception {\n+        assertFalse(Misc.getAge(1).isEmpty());\n+    }\n+\n+    /**\n+     * Method: getDurationInMs(long value)\n+     */\n+    @Test\n+    public void testGetDurationInMs() throws Exception {\n+        assertFalse(Misc.getDurationInMs(14).isEmpty());\n+    }\n+\n+    /**\n+     * Method: parseAge(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testParseAge() throws Exception {\n+        long res = Misc.parseAge(\"2D\", 100);\n+        assertEquals(res, 172800000);\n+    }\n+\n+    /**\n+     * Method: cleanseMessage(String inputString, String hideRegex, String hideMethod)\n+     */\n+    @Test\n+    public void testCleanseMessage() throws Exception {\n+        String s = \"Donald Duck 23  Hey hey  14  Wooo\";\n+        String regex = \"\\\\d\";\n+        String res = Misc.cleanseMessage(s, regex, \" does not matter\");\n+        assertEquals(res, \"Donald Duck **  Hey hey  **  Wooo\");\n+    }\n+\n+    /**\n+     * Method: hideFirstHalf(String inputString, String regex)\n+     */\n+    @Test\n+    public void testHideFirstHalf() throws Exception {\n+        String s = \"Donald Duck     Hey hey     Wooo\";\n+        String hideRegex = \"[^\\\\s*].*[^\\\\s*]\";\n+        String res = Misc.hideFirstHalf(s, hideRegex);\n+        assertEquals(res, \"****************Hey hey     Wooo\");\n+    }\n+\n+\n+    /**\n+     * Method: getBuildOutputDirectory()\n+     */\n+    @Test\n+    public void testGetBuildOutputDirectory() throws Exception {\n+        String outputDirectory = Misc.getBuildOutputDirectory();\n+        assertEquals(outputDirectory.substring(outputDirectory.length() - 29, outputDirectory.length()), pathSeperator + \"iaf\" + pathSeperator + \"core\" + pathSeperator + \"target\" + pathSeperator + \"test-classes\");\n+    }\n+\n+    /**\n+     * Method: getProjectBaseDir()\n+     */\n+    @Test\n+    public void testGetProjectBaseDir() throws Exception {\n+        String baseDir = Misc.getBuildOutputDirectory();\n+        assertEquals(baseDir.substring(baseDir.length() - 29, baseDir.length()), pathSeperator + \"iaf\" + pathSeperator + \"core\" + pathSeperator + \"target\" + pathSeperator + \"test-classes\");\n+    }\n+\n+    /**\n+     * Method: toSortName(String name)\n+     */\n+    @Test\n+    public void testToSortName() throws Exception {\n+        assertEquals(Misc.toSortName(\"new_name\"), \"NEW*NAME\");\n+    }\n+\n+    /**\n+     * Method: countRegex(String string, String regex)\n+     */\n+    @Test\n+    public void testCountRegex() throws Exception {\n+        String s = \"12ab34\";\n+        String regex = \"\\\\d\";\n+        int regexCount = Misc.countRegex(s, regex);\n+        assertEquals(regexCount, 4);\n+    }\n+\n+    /**\n+     * Method: resourceToString(URL resource)\n+     */\n+    @Test\n+    public void testResourceToStringResource() throws Exception {\n+        URL resource = TestFileUtils.getTestFileURL(\"/Misc/test_file_for_resource_to_string_misc.txt\");\n+        String s1 = Misc.resourceToString(resource);\n+        assertEquals(s1.substring(0, 62), \"<!doctype txt>this is a text file.\\r\\nnew line in the text file.\");\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ad3021f7d70d8ffff1498d3c580b16a3151ba0"}, "originalPosition": 601}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxOTE2OA==", "bodyText": "See: https://travis-ci.org/github/ibissource/iaf/builds/696874345", "url": "https://github.com/ibissource/iaf/pull/716#discussion_r438219168", "createdAt": "2020-06-10T15:36:17Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/MiscTest.java", "diffHunk": "@@ -1,43 +1,590 @@\n package nl.nn.adapterframework.util;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileWriter;\n import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n+import nl.nn.adapterframework.testutil.TestFileUtils;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n \n+\n+/**\n+ * Misc Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n public class MiscTest {\n \n-\t@Test\n-\tpublic void testStreamToString() throws IOException {\n-\t\tString tekst = \"dit is een string\";\n-\t\tByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n-\t\t\n-\t\tCloseChecker closeChecker = new CloseChecker(bais); \n-\t\tString actual = Misc.streamToString(closeChecker);\n-\t\t\n-\t\tassertEquals(tekst, actual);\n-\t\tassertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n-\t}\n-\t\n-\tprivate class CloseChecker extends FilterInputStream {\n-\n-\t\tboolean inputStreamClosed;\n-\t\t\n-\t\tpublic CloseChecker(InputStream arg0) {\n-\t\t\tsuper(arg0);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void close() throws IOException {\n-\t\t\tinputStreamClosed=true;;\n-\t\t\tsuper.close();\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    @ClassRule\n+    public static TemporaryFolder testFolder = new TemporaryFolder();\n+    private static String sourceFolderPath;\n+\n+    private static File file;\n+\n+    private String pathSeperator = File.separator;\n+\n+    @BeforeClass\n+    public static void setUp() throws IOException {\n+        sourceFolderPath = testFolder.getRoot().getPath();\n+        file = testFolder.newFile(\"lebron.txt\");\n+        Writer w = new FileWriter(file.getName());\n+        w.write(\"inside the lebron file\");\n+        w.close();\n+    }\n+\n+    @AfterClass\n+    public static void cleanUp() {\n+        File f = new File(\"lebron.txt\");\n+        f.delete();\n+    }\n+\n+\n+    @Test\n+    public void testStreamToString() throws IOException {\n+        String tekst = \"dit is een string\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(tekst.getBytes());\n+\n+        CloseChecker closeChecker = new CloseChecker(bais);\n+        String actual = Misc.streamToString(closeChecker);\n+\n+        assertEquals(tekst, actual);\n+        assertTrue(\"inputstream was not closed\", closeChecker.inputStreamClosed);\n+    }\n+\n+    private class CloseChecker extends FilterInputStream {\n+\n+        boolean inputStreamClosed;\n+\n+        public CloseChecker(InputStream arg0) {\n+            super(arg0);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            inputStreamClosed = true;\n+\n+            super.close();\n+        }\n+    }\n+\n+    /**\n+     * Method: createSimpleUUID()\n+     */\n+    @Test\n+    public void testCreateSimpleUUID() throws Exception {\n+        String uuid = Misc.createSimpleUUID();\n+        assertFalse(sourceFolderPath.isEmpty()); // for avoiding code quality warnings\n+        assertEquals(uuid.substring(8, 9), \"-\");\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: createRandomUUID(boolean removeDashes)\n+     */\n+    @Test\n+    public void testCreateRandomUUIDRemoveDashes() throws Exception {\n+        String uuid = Misc.createRandomUUID(true);\n+        assertNotEquals(uuid.substring(8, 9), \"-\"); // assert that dashes are removed\n+        assertEquals(uuid.length(), 32);\n+    }\n+\n+    @Test\n+    public void testCreateRandomUUID() throws Exception {\n+        String uuid = Misc.createRandomUUID();\n+        assertFalse(uuid.isEmpty());\n+    }\n+\n+\n+    /**\n+     * Method: asHex(byte[] buf)\n+     */\n+    @Test\n+    public void testAsHex() throws Exception {\n+        String test = \"test\";\n+        String hex = Misc.asHex(test.getBytes());\n+        assertEquals(hex, \"74657374\");\n+    }\n+\n+    /**\n+     * Method: createNumericUUID()\n+     */\n+    @Test\n+    public void testCreateNumericUUID() throws Exception {\n+        String uuid = Misc.createNumericUUID();\n+        assertEquals(uuid.length(), 31);    //Unique string is <ipaddress with length 4*3><currentTime with length 13><hashcode with length 6>\n+    }\n+\n+    /**\n+     * Method: unsignedByteToInt(byte b)\n+     */\n+    @Test\n+    public void testUnsignedByteToInt() throws Exception {\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"-12\")), 244);\n+        assertEquals(Misc.unsignedByteToInt(new Byte(\"12\")), 12);\n+\n+    }\n+\n+\n+    /**\n+     * Method: fileToWriter(String filename, Writer writer)\n+     */\n+    @Test\n+    public void testFileToWriter() throws Exception {\n+        Writer writer = new StringWriter();\n+        Misc.fileToWriter(file.getName(), writer);\n+        assertEquals(writer.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: fileToStream(String filename, OutputStream output)\n+     */\n+    @Test\n+    public void testFileToStream() throws Exception {\n+        OutputStream os = new ByteArrayOutputStream();\n+        Misc.fileToStream(file.getName(), os);\n+        assertEquals(os.toString(), \"inside the lebron file\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToStream(InputStream input, OutputStream output, boolean closeInput)\n+     */\n+    @Test\n+    public void testStreamToStreamForInputOutputCloseInput() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        OutputStream baos = new ByteArrayOutputStream();\n+        Misc.streamToStream(bais, baos, true);\n+        assertEquals(baos.toString(), \"test\");\n+    }\n+\n+    /**\n+     * Method: streamToFile(InputStream inputStream, File file)\n+     */\n+    @Test\n+    public void testStreamToFile() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        Misc.streamToFile(bais, file);\n+\n+        // to read from the file\n+        InputStream is = new FileInputStream(file);\n+        BufferedReader buf = new BufferedReader(new InputStreamReader(is));\n+\n+        String line = buf.readLine();\n+        StringBuilder sb = new StringBuilder();\n+\n+        while (line != null) {\n+            sb.append(line).append(\"\\n\");\n+            line = buf.readLine();\n+        }\n+\n+        String fileAsString = sb.toString();\n+        assertEquals(fileAsString, \"test\\n\");\n+    }\n+\n+    /**\n+     * Method: streamToBytes(InputStream inputStream)\n+     */\n+    @Test\n+    public void testStreamToBytes() throws Exception {\n+        String test = \"test\";\n+        ByteArrayInputStream bais = new ByteArrayInputStream(test.getBytes());\n+        byte[] arr = Misc.streamToBytes(bais);\n+        assertEquals(new String(arr, StandardCharsets.UTF_8), \"test\");\n+    }\n+\n+    /**\n+     * Method: readerToWriter(Reader reader, Writer writer)\n+     */\n+    @Test\n+    public void testReaderToWriterForReaderWriter() throws Exception {\n+        Reader reader = new StringReader(\"test\");\n+        Writer writer = new StringWriter();\n+        Misc.readerToWriter(reader, writer);\n+        assertEquals(writer.toString(), \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: fileToString(String fileName)\n+     */\n+    @Test\n+    public void testFileToStringFileName() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName()), \"inside the lebron file\");\n+    }\n+\n+    @Test\n+    public void testFileToStringFileNameEndLine() throws Exception {\n+        //Misc.resourceToString()\n+        assertEquals(Misc.fileToString(file.getName(), \" the end\"), \"inside the lebron file\");\n+    }\n+\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringNoXMLEncode() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", false);\n+        assertEquals(s, \"<root> 23    <name>GeeksforGeeks</name> 23    <address> 23        <sector>142</sector> 23        <location>Noida</location> 23    </address> 23</root> r\");\n+    }\n+\n+    /**\n+     * Method: readerToString(Reader reader, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testReaderToStringXMLEncodeWithEndOfLineString() throws Exception {\n+        Reader r = new StringReader(\"<root> \\n\" +\n+                \"    <name>GeeksforGeeks</name> \\n\" +\n+                \"    <address> \\n\" +\n+                \"        <sector>142</sector> \\n\" +\n+                \"        <location>Noida</location> \\n\" +\n+                \"    </address> \\n\" +\n+                \"</root> r\");\n+        String s = Misc.readerToString(r, \"23\", true);\n+        assertEquals(s, \"&lt;root&gt; 23    &lt;name&gt;GeeksforGeeks&lt;/name&gt; 23    &lt;address&gt; 23        &lt;sector&gt;142&lt;/sector&gt; 23        &lt;location&gt;Noida&lt;/location&gt; 23    &lt;/address&gt; 23&lt;/root&gt; r\");\n+    }\n+\n+\n+    /**\n+     * Method: replace(String source, String from, String to)\n+     */\n+    @Test\n+    public void testReplace() throws Exception {\n+        String a = \"Kobe\";\n+        String res = Misc.replace(a, \"Ko\", \"Phoe\");\n+        assertEquals(res, \"Phoebe\");\n+    }\n+\n+    /**\n+     * Method: concatStrings(String part1, String separator, String part2)\n+     */\n+    @Test\n+    public void testConcatStrings() throws Exception {\n+        String a = \"LeBron\";\n+        String b = \"James\";\n+        String seperator = \"//\";\n+        String res = Misc.concatStrings(a, seperator, b);\n+        assertEquals(res, \"LeBron//James\");\n+    }\n+\n+    /**\n+     * Method: hide(String string)\n+     */\n+    @Test\n+    public void testHideString() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a);\n+        assertEquals(res, \"****\");\n+    }\n+\n+    /**\n+     * Method: hide(String string, int mode)\n+     */\n+    @Test\n+    public void testHideForStringMode() throws Exception {\n+        String a = \"test\";\n+        String res = Misc.hide(a, 1);\n+        assertEquals(res, \"t**t\");\n+    }\n+\n+    /**\n+     * Method: byteArrayToString(byte[] input, String endOfLineString, boolean xmlEncode)\n+     */\n+    @Test\n+    public void testByteArrayToString() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        String res = Misc.byteArrayToString(arr, \"\", true);\n+        assertEquals(res, s);\n+    }\n+\n+    /**\n+     * Method: gzip(String input)\n+     */\n+    @Test\n+    public void testGzipGUnzipInput() throws Exception {\n+        String s = \"test\";\n+        byte[] arr = s.getBytes();\n+        byte[] zipped = Misc.gzip(arr);\n+        assertEquals(Misc.gunzipToString(zipped), \"test\");\n+    }\n+\n+    @Test\n+    public void testGzipString() throws Exception {\n+        String s = \"you deserved this\";\n+        byte[] zipped = Misc.gzip(s);\n+        assertEquals(Misc.gunzipToString(zipped), \"you deserved this\");\n+\n+    }\n+\n+    /**\n+     * Method: compress(String input)\n+     */\n+    @Test\n+    public void testCompressed() throws Exception {\n+        String s = \"#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$#!@#$\";\n+        String s1 = \"teststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststeststests\";\n+        String s3 = \"123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123123\";\n+        byte[] compressedSymbols = Misc.compress(s);\n+        byte[] compressedText = Misc.compress(s1);\n+        byte[] compressedNumbers = Misc.compress(s3);\n+        assertTrue(compressedNumbers.length < s3.length());\n+        assertEquals(compressedNumbers[0], 120);\n+        assertEquals(compressedNumbers[1], -38);\n+        assertTrue(compressedText.length < s1.length());\n+        assertEquals(compressedText[0], 120);\n+        assertEquals(compressedText[1], -38);\n+        assertTrue(compressedSymbols.length < s.length());\n+        assertEquals(compressedSymbols[0], 120);\n+        assertEquals(compressedSymbols[1], -38);\n+    }\n+\n+    @Test\n+    public void testCompressDecompressInput() throws Exception {\n+        String s = \"test\";\n+        byte[] compressed = Misc.compress(s);\n+        String decompressed = Misc.decompressToString(compressed);\n+        assertEquals(decompressed, \"test\");\n+    }\n+\n+\n+    /**\n+     * Method: copyContext(String keys, Map<String,Object> from, Map<String,Object> to)\n+     */\n+    @Test\n+    public void testCopyContext() throws Exception {\n+        Map<String, Object> context1 = new HashMap<>();\n+        Map<String, Object> context2 = new HashMap<>();\n+        String keys = \"a,b\";\n+        context1.put(\"a\", 15);\n+        context1.put(\"b\", 16);\n+        Misc.copyContext(keys, context1, context2);\n+        assertTrue(context1.equals(context2));\n+    }\n+\n+    /**\n+     * Method: toFileSize(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testToFileSizeForValueDefaultValue() throws Exception {\n+        long res = Misc.toFileSize(\"14GB\", 20);\n+        assertEquals(Long.toString(res), \"15032385536\");\n+    }\n+\n+    /**\n+     * Method: toFileSize(long value)\n+     */\n+    @Test\n+    public void testToFileSizeValue() throws Exception {\n+        String kb = Misc.toFileSize(150000, false, true);\n+        String mb = Misc.toFileSize(15000000, true);\n+        String gb = Misc.toFileSize(Long.parseLong(\"3221225472\"));\n+        assertEquals(gb, \"3GB\");\n+        assertEquals(mb, \"14 MB\");\n+        assertEquals(kb, \"146KB\");\n+    }\n+\n+\n+    @Test\n+    public void testListToStringWithStringList() {\n+        List list = new ArrayList<Integer>();\n+        list.add(\"bailar\");\n+        list.add(\"besos\");\n+        String res = Misc.listToString(list);\n+        assertEquals(res, \"bailarbesos\");\n+    }\n+\n+    /**\n+     * Method: addItemsToList(Collection<String> collection, String list, String collectionDescription, boolean lowercase)\n+     */\n+    @Test\n+    public void testAddItemsToList() throws Exception {\n+        List<String> stringCollection = new ArrayList<>();\n+        String list = \"a,b,C\";\n+        String collectionDescription = \"First 3 letters of the alphabet\";\n+        Misc.addItemsToList(stringCollection, list, collectionDescription, true);\n+        ArrayList<String> arrayList = new ArrayList<>();\n+        arrayList.add(\"a\");\n+        arrayList.add(\"b\");\n+        arrayList.add(\"c\");\n+        assertTrue(stringCollection.size() == 3);\n+        assertEquals(stringCollection.get(stringCollection.size() - 1), \"c\");\n+    }\n+\n+    /**\n+     * Method: getFileSystemTotalSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemTotalSpace() throws Exception {\n+        assertFalse(Misc.getFileSystemTotalSpace().isEmpty());\n+    }\n+\n+    /**\n+     * Method: getFileSystemFreeSpace()\n+     */\n+    @Test\n+    public void testGetFileSystemFreeSpace() throws Exception {\n+        assertFalse(Misc.getFileSystemFreeSpace().isEmpty());\n+    }\n+\n+    /**\n+     * Method: getAge(long value)\n+     */\n+    @Test\n+    public void testGetAge() throws Exception {\n+        assertFalse(Misc.getAge(1).isEmpty());\n+    }\n+\n+    /**\n+     * Method: getDurationInMs(long value)\n+     */\n+    @Test\n+    public void testGetDurationInMs() throws Exception {\n+        assertFalse(Misc.getDurationInMs(14).isEmpty());\n+    }\n+\n+    /**\n+     * Method: parseAge(String value, long defaultValue)\n+     */\n+    @Test\n+    public void testParseAge() throws Exception {\n+        long res = Misc.parseAge(\"2D\", 100);\n+        assertEquals(res, 172800000);\n+    }\n+\n+    /**\n+     * Method: cleanseMessage(String inputString, String hideRegex, String hideMethod)\n+     */\n+    @Test\n+    public void testCleanseMessage() throws Exception {\n+        String s = \"Donald Duck 23  Hey hey  14  Wooo\";\n+        String regex = \"\\\\d\";\n+        String res = Misc.cleanseMessage(s, regex, \" does not matter\");\n+        assertEquals(res, \"Donald Duck **  Hey hey  **  Wooo\");\n+    }\n+\n+    /**\n+     * Method: hideFirstHalf(String inputString, String regex)\n+     */\n+    @Test\n+    public void testHideFirstHalf() throws Exception {\n+        String s = \"Donald Duck     Hey hey     Wooo\";\n+        String hideRegex = \"[^\\\\s*].*[^\\\\s*]\";\n+        String res = Misc.hideFirstHalf(s, hideRegex);\n+        assertEquals(res, \"****************Hey hey     Wooo\");\n+    }\n+\n+\n+    /**\n+     * Method: getBuildOutputDirectory()\n+     */\n+    @Test\n+    public void testGetBuildOutputDirectory() throws Exception {\n+        String outputDirectory = Misc.getBuildOutputDirectory();\n+        assertEquals(outputDirectory.substring(outputDirectory.length() - 29, outputDirectory.length()), pathSeperator + \"iaf\" + pathSeperator + \"core\" + pathSeperator + \"target\" + pathSeperator + \"test-classes\");\n+    }\n+\n+    /**\n+     * Method: getProjectBaseDir()\n+     */\n+    @Test\n+    public void testGetProjectBaseDir() throws Exception {\n+        String baseDir = Misc.getBuildOutputDirectory();\n+        assertEquals(baseDir.substring(baseDir.length() - 29, baseDir.length()), pathSeperator + \"iaf\" + pathSeperator + \"core\" + pathSeperator + \"target\" + pathSeperator + \"test-classes\");\n+    }\n+\n+    /**\n+     * Method: toSortName(String name)\n+     */\n+    @Test\n+    public void testToSortName() throws Exception {\n+        assertEquals(Misc.toSortName(\"new_name\"), \"NEW*NAME\");\n+    }\n+\n+    /**\n+     * Method: countRegex(String string, String regex)\n+     */\n+    @Test\n+    public void testCountRegex() throws Exception {\n+        String s = \"12ab34\";\n+        String regex = \"\\\\d\";\n+        int regexCount = Misc.countRegex(s, regex);\n+        assertEquals(regexCount, 4);\n+    }\n+\n+    /**\n+     * Method: resourceToString(URL resource)\n+     */\n+    @Test\n+    public void testResourceToStringResource() throws Exception {\n+        URL resource = TestFileUtils.getTestFileURL(\"/Misc/test_file_for_resource_to_string_misc.txt\");\n+        String s1 = Misc.resourceToString(resource);\n+        assertEquals(s1.substring(0, 62), \"<!doctype txt>this is a text file.\\r\\nnew line in the text file.\");\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxMjMyMg=="}, "originalCommit": {"oid": "16ad3021f7d70d8ffff1498d3c580b16a3151ba0"}, "originalPosition": 601}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 347, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}