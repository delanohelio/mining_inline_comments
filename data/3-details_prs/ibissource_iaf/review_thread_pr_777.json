{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NDAyMDg1", "number": 777, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODowMjo0NVrOEBoyHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDo0ODo1OFrOECMCvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTUyMjIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODowMjo0NVrOGdmfIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjozNTo0OFrOGd6TxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY5MjQ1MA==", "bodyText": "Ik zie een hoop duplicates als ik naar de methode findConfigForUri kijk..", "url": "https://github.com/ibissource/iaf/pull/777#discussion_r433692450", "createdAt": "2020-06-02T08:02:45Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java", "diffHunk": "@@ -89,6 +94,35 @@ public ApiDispatchConfig findConfigForUri(String uri) {\n \t\treturn config;\n \t}\n \n+\tpublic List<ApiDispatchConfig> findMatchingConfigsForUri(String uri) {\n+\t\tList<ApiDispatchConfig> results = new ArrayList<>();\n+\n+\t\tString uriSegments[] = uri.split(\"/\");\n+\n+\t\tfor (Iterator<String> it = patternClients.keySet().iterator(); it.hasNext();) {\n+\t\t\tString uriPattern = it.next();\n+\t\t\tlog.trace(\"comparing uri [\"+uri+\"] to pattern [\"+uriPattern+\"]\");\n+\n+\t\t\tString patternSegments[] = uriPattern.split(\"/\");\n+\t\t\tif(patternSegments.length < uriSegments.length)\n+\t\t\t\tcontinue;\n+\n+\t\t\tint matches = 0;\n+\t\t\tfor (int i = 0; i < uriSegments.length; i++) {\n+\t\t\t\tif(patternSegments[i].equals(uriSegments[i]) || patternSegments[i].equals(\"*\")) {\n+\t\t\t\t\tmatches++;\n+\t\t\t\t} else {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif(matches == uriSegments.length) {\n+\t\t\t\tresults.add(patternClients.get(uriPattern));\n+\t\t\t}\n+\t\t}\n+\t\treturn results;\n+\t\t\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a66f6400a9708f70dcdeda8a9a56283ee8940bb8"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxNzIyMA==", "bodyText": "Ik heb ze nu gecombineerd", "url": "https://github.com/ibissource/iaf/pull/777#discussion_r434017220", "createdAt": "2020-06-02T16:35:48Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/http/rest/ApiServiceDispatcher.java", "diffHunk": "@@ -89,6 +94,35 @@ public ApiDispatchConfig findConfigForUri(String uri) {\n \t\treturn config;\n \t}\n \n+\tpublic List<ApiDispatchConfig> findMatchingConfigsForUri(String uri) {\n+\t\tList<ApiDispatchConfig> results = new ArrayList<>();\n+\n+\t\tString uriSegments[] = uri.split(\"/\");\n+\n+\t\tfor (Iterator<String> it = patternClients.keySet().iterator(); it.hasNext();) {\n+\t\t\tString uriPattern = it.next();\n+\t\t\tlog.trace(\"comparing uri [\"+uri+\"] to pattern [\"+uriPattern+\"]\");\n+\n+\t\t\tString patternSegments[] = uriPattern.split(\"/\");\n+\t\t\tif(patternSegments.length < uriSegments.length)\n+\t\t\t\tcontinue;\n+\n+\t\t\tint matches = 0;\n+\t\t\tfor (int i = 0; i < uriSegments.length; i++) {\n+\t\t\t\tif(patternSegments[i].equals(uriSegments[i]) || patternSegments[i].equals(\"*\")) {\n+\t\t\t\t\tmatches++;\n+\t\t\t\t} else {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif(matches == uriSegments.length) {\n+\t\t\t\tresults.add(patternClients.get(uriPattern));\n+\t\t\t}\n+\t\t}\n+\t\treturn results;\n+\t\t\n+\t}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY5MjQ1MA=="}, "originalCommit": {"oid": "a66f6400a9708f70dcdeda8a9a56283ee8940bb8"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzI5OTE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/http/rest/ApiListenerServlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDo0ODo1OFrOGefdoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDo0ODo1OFrOGefdoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYyNTk1Mg==", "bodyText": "response.setStatus(200); is verdwenen?", "url": "https://github.com/ibissource/iaf/pull/777#discussion_r434625952", "createdAt": "2020-06-03T14:48:58Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/http/rest/ApiListenerServlet.java", "diffHunk": "@@ -92,6 +92,15 @@ public void destroy() {\n \t\tsuper.destroy();\n \t}\n \n+\tpublic void returnJson(HttpServletResponse response, int status, JsonObject json) throws IOException {\n+\t\tMap<String, Boolean> config = new HashMap<>();\n+\t\tconfig.put(JsonGenerator.PRETTY_PRINTING, true);\n+\t\tJsonWriterFactory factory = Json.createWriterFactory(config);\n+\t\tJsonWriter jsonWriter = factory.createWriter(response.getOutputStream(), Charset.forName(\"UTF-8\"));\n+\t\tjsonWriter.write(json);\n+\t\tjsonWriter.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b14292b71fc404ccbf7579d989534aeec8c1dc9c"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 376, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}