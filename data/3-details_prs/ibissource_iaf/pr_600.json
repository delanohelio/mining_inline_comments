{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxOTA4NjQx", "number": 600, "title": "Pipe Test Classes", "bodyText": "Pull Request for PipeTests notes:\n\nOverall problem: Based on my observations, some classes are highly dependent on each other, this makes it hard to test that single class as you need to change/set the parameters of lots of other classes in order to make the class you are working function normally. This is not ideal as high class coupling reduces ability for modifications and prevents all relevant code to be in one place, thus resulting in difficulty in testing.\n\nFor example;\n\n\nMessage sending pipe: This class is extremely hard to test as there are endless number of branches and blob code. I think it will be better for me to test it after I get a nearly perfect understanding of the whole system. Otherwise, it would be a blind testing for me and I can miss some errors or bugs. Plus, in addition to above, it is dependent on lots of other classes which the user should modify, namely: ParameterResolutionContext, ClassUtils, ISenderWithParameters (which is an interface so the user or extended classes define which one to use. This means it's harder for the tester\n\n\nFileLineIteratorTest: This class is also highly dependent on message sending pipe, I tested its methods that are not dependent on message sending pipe. However, I think it is also better to test this one after testing Message Sending Pipe.\n\n\nIsolatedServiceExecutor and IsolatedServiceCaller: These two use JavaListener class and ServiceDispatcher class and it requires modifying the parameters of that class, which is hard to do without testing that class. I tried out some things however couldn't find a way to register a listener in the JavaListener class. There's a registeredListeners map however this map is never used or never updated in a method.\n\n\nPostbox Retriever Pipe: For testing this class, I needed to initialize a IPostBoxListener, which is an interface. The only class that implements this class was PullingJMSListener, so I started using that class as a base of my IPostBoxListener. However, during testing, I realized that in the configuration step of the listener, PullingJMSListener extends JMSListenerBase, which also extends JMSFacade. And in the configuration of JMSFacade a destination name and type must be specified however those fields inaccessible through IPostBoxRetriever because of the class hierarchy.\n\n\nRhino Pipe: When I test with multiple arguments, the pipe fails. I tried a few different to pass multiple arguments, like \"3, 4\", \"3\\n4\", \"3 4\", etc, but all of them failed.\n\n\nCRL Pipe: I cannot find any implementations of the generateCRL method used in CRL Pipe. That's why I could only test bad weather cases. I also checked where CRL Pipes are used in the project to understand how it is used, but unfortunately it wasn't used anywhere. So I think it may be deprecated or not fully implemented yet?\n\n\nFixedForwardPipe: I think lines 85-86 and 87 are unreachable as the null check for that was done before. So those lines can be redundant\n\n\nStreamLineIteratorPipe: in the method getReader, the parameter threadContext is redundant, not used anywhere\n\n\nProblems to resolve on my side:\n\nPasswordHashPipeTest: The validation algorithm is private so it cannot be accessed from the test. This raised the following question on my head; how to mimic the hashing in testing?\nUnzip Pipe: Somehow, my the zipinput stream treat text file as an empty file. I need to dive deeper into this problem.", "createdAt": "2020-04-10T13:27:35Z", "url": "https://github.com/ibissource/iaf/pull/600", "merged": true, "mergeCommit": {"oid": "e44f07921b613fed0e675b6e0a756f3b46f7d006"}, "closed": true, "closedAt": "2020-06-10T15:29:10Z", "author": {"login": "sinasen2000"}, "timelineItems": {"totalCount": 49, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKqbZqAH2gAyNDAxOTA4NjQxOjg0NTExNjc3ZTQyZGQ5YjU1YzE2MDBmMzJkMDQzYzRmMTY4ZGIwMjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp7Y8IgFqTQyODE3NDg4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "84511677e42dd9b55c1600f32d043c4f168db027", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/84511677e42dd9b55c1600f32d043c4f168db027", "committedDate": "2020-03-05T12:11:16Z", "message": "added test classes for some pipes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c48ca4a5ea942bb81e4f0b1591de1452fed56131", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/c48ca4a5ea942bb81e4f0b1591de1452fed56131", "committedDate": "2020-03-05T14:54:47Z", "message": "added ReplacerPipe\n\nadded with full coverage, however I still need to add one case which does replace non xml characters and unicode supplementary characters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e47da865d46fdab0bdf7af05930f0357858aee4", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/0e47da865d46fdab0bdf7af05930f0357858aee4", "committedDate": "2020-03-05T15:48:51Z", "message": "created uploadFilePipe\n\ncreated a template of createFilePipe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58dfe76044a5ad630333d60a4dbf2cbe6f0ce436", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/58dfe76044a5ad630333d60a4dbf2cbe6f0ce436", "committedDate": "2020-03-06T09:51:32Z", "message": "added Text2XMLPipeTest\n\n%90 coverage, one fix or improvement can be to find a way to throw an io exception. i couldnt think of a case where the program throws an io exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccb78d47aafa2121fc9285637cbc3db3fa11a373", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/ccb78d47aafa2121fc9285637cbc3db3fa11a373", "committedDate": "2020-03-06T13:15:00Z", "message": "added UploadFilePipe\n\nWith full coverage. I think the class name should be changed to UploadZipFilePipe though, as it only supports zip files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ab68449d3f5d45dd9d194827900c5ec49269de4", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/3ab68449d3f5d45dd9d194827900c5ec49269de4", "committedDate": "2020-03-06T13:19:00Z", "message": "quick fix on replaceFilePipe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae9ddaf1ed238abbdf92d279380663b57b5f0433", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/ae9ddaf1ed238abbdf92d279380663b57b5f0433", "committedDate": "2020-03-06T13:20:27Z", "message": "ReplaceFilePipe back to original version\n\nI had to change the method access modifier to public to test out one method to understand how it works, now it is back to its normal version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8c48548dfe15dac4ca6732937760e1cea54fd05", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/d8c48548dfe15dac4ca6732937760e1cea54fd05", "committedDate": "2020-03-06T13:25:59Z", "message": "remove redundant tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9538cd22b2405d308b4e744f65c212e45a2030d4", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/9538cd22b2405d308b4e744f65c212e45a2030d4", "committedDate": "2020-03-06T15:04:22Z", "message": "Delete IsUserInRolePipeTest\n\ndeleted as I couldn't figure out a way yet to modify the roles, will look  further in this class after I finish the tests of other classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "268252a731237942cca83ebcad1f6be8600f8748", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/268252a731237942cca83ebcad1f6be8600f8748", "committedDate": "2020-03-12T11:06:00Z", "message": "add 2 complete test classes\n\nadded 2 complete classes and several incomplete classes that I will try to finish up this afternoon"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e92d47a98de655edb213867df56752962bda5403", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/e92d47a98de655edb213867df56752962bda5403", "committedDate": "2020-04-10T13:23:17Z", "message": "Add test classes for pipes\n\nNearly all pipe classes are tested now with a few important exceptions like MessageSendingPipe."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTc4MTA0", "url": "https://github.com/ibissource/iaf/pull/600#pullrequestreview-393578104", "createdAt": "2020-04-15T08:50:34Z", "commit": {"oid": "e92d47a98de655edb213867df56752962bda5403"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo1MDozNFrOGFwBNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTowMDoxNVrOGFwYfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MjgwNw==", "bodyText": "Try to not modify any files which don't have any functional changes.", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r408682807", "createdAt": "2020-04-15T08:50:34Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/http/AuthSSLProtocolSocketFactoryForJsse10x.java", "diffHunk": "@@ -101,7 +101,7 @@ public AuthSSLProtocolSocketFactoryForJsse10x(\n         }\n         log.debug(\"Initializing key manager\");\n         if (StringUtils.isEmpty(algorithm)) {\n-        \talgorithm=KeyManagerFactory.getDefaultAlgorithm();\n+        \talgorithm= KeyManagerFactory.getDefaultAlgorithm();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92d47a98de655edb213867df56752962bda5403"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MjkyMw==", "bodyText": "Try to not modify any files which don't have any functional changes.", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r408682923", "createdAt": "2020-04-15T08:50:46Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/pipes/FilePipe.java", "diffHunk": "@@ -54,7 +54,7 @@ public void configure() throws ConfigurationException {\n \t */\n \tpublic PipeRunResult doPipe(Object input, IPipeLineSession session) throws PipeRunException {\n \t\ttry {\n-\t\t\treturn new PipeRunResult(getForward(), fileHandler.handle(input, session, getParameterList()));\n+ \t\t\treturn new PipeRunResult(getForward(), fileHandler.handle(input, session, getParameterList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92d47a98de655edb213867df56752962bda5403"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MzAxNA==", "bodyText": "Try to not modify any files which don't have any functional changes.", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r408683014", "createdAt": "2020-04-15T08:50:55Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/pipes/MessageSendingPipe.java", "diffHunk": "@@ -258,6 +258,7 @@ public void addParameter(Parameter p){\n \t\t}\n \t}\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92d47a98de655edb213867df56752962bda5403"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MzgyMQ==", "bodyText": "Why did you removed these 2 tests?", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r408683821", "createdAt": "2020-04-15T08:52:15Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/CompareStringPipeTest.java", "diffHunk": "@@ -14,24 +15,12 @@ public CompareStringPipe createPipe() {\n \n     @Test(expected = ConfigurationException.class)\n     public void emptySessionKeys() throws ConfigurationException {\n+        PipeForward forw = new PipeForward(\"lessthan\", \"/Users/apollo11/Desktop/iaf2/core/src/test/resources/Pipes\");\n+        pipe.registerForward(forw);\n         pipe.setSessionKey1(\"\");\n         pipe.setSessionKey2(\"\");\n         pipe.configure();\n     }\n \n-    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92d47a98de655edb213867df56752962bda5403"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NTQxMg==", "bodyText": "We don't really use the since tag. When we do use these, we use the version number and not the date.\nFor all these tests you can remove them, as they don't add any additional value to the file(s).", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r408685412", "createdAt": "2020-04-15T08:54:51Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/ExceptionPipeTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.PipeRunException;\n+import org.junit.Test;\n+import org.junit.Before; \n+import org.junit.After;\n+\n+import java.nio.channels.Pipe;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * ExceptionPipe Tester.\n+ *\n+ * @author <Sina Sen>\n+ * @version 1.0\n+ * @since <pre>Mar 5, 2020</pre>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92d47a98de655edb213867df56752962bda5403"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NjEwMQ==", "bodyText": "Try not to add any unused imports.\nYou can have a look at Codacy (after pushing your changes, it will be available on your PR).", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r408686101", "createdAt": "2020-04-15T08:55:59Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/ExceptionPipeTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.PipeRunException;\n+import org.junit.Test;\n+import org.junit.Before; \n+import org.junit.After;\n+\n+import java.nio.channels.Pipe;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92d47a98de655edb213867df56752962bda5403"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4ODM0OA==", "bodyText": "This is a recipe for getting NullPointerExceptions", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r408688348", "createdAt": "2020-04-15T08:59:34Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/IfMultipartTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeForward;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Test;\n+import org.junit.Before; \n+import org.junit.After;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.*;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+/** \n+* IfMultipart Tester. \n+* \n+* @author <Sina Sen>\n+* @since <pre>Feb 28, 2020</pre> \n+* @version 1.0 \n+*/ \n+public class IfMultipartTest extends PipeTestBase<IfMultipart>{\n+    private final String thenForward = \"then\";\n+    private final String elseForward = \"else\";\n+\n+\n+    private MockHttpServletRequest request;\n+\n+    @Before\n+    public void before() throws Exception {\n+        request  = new MockHttpServletRequest();\n+\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Override\n+    public IfMultipart createPipe() {\n+        return new IfMultipart();\n+    }\n+\n+    @Test\n+    public void testInputNullElseForwardNull() throws Exception {\n+        exception.expect(PipeRunException.class);\n+        exception.expectMessage(\"Pipe [IfMultipart under test] cannot find forward or pipe named [null]\");\n+        pipe.setElseForwardName(null);\n+        pipe.doPipe(null, session);\n+    }\n+\n+    @Test\n+    public void testInputNotHTTPRequest() throws Exception {\n+        exception.expect(PipeRunException.class);\n+        exception.expectMessage(\"Pipe [IfMultipart under test] expected HttpServletRequest as input, got [String]\");\n+        pipe.doPipe(\"i am a string not a http req\", session);\n+    }\n+\n+    @Test\n+    public void testRequestUsesElseForward() throws Exception {\n+        PipeForward forw = new PipeForward(\"custom_else\", \"random/path\");\n+        pipe.registerForward(forw);\n+        pipe.setElseForwardName(\"custom_else\");\n+        assertEquals(pipe.doPipe(request, session).getPipeForward().getName().toString(), \"custom_else\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92d47a98de655edb213867df56752962bda5403"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4ODc2Nw==", "bodyText": "Please put all the setters underneath each other for better readability.", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r408688767", "createdAt": "2020-04-15T09:00:15Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/FilePipeTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeForward;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.parameters.Parameter;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.Before;\n+import org.junit.After;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UnsupportedEncodingException;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * FilePipe Tester.\n+ *\n+ * @author <Sina Sen>\n+ * @version 1.0\n+ * @since <pre>Feb 28, 2020</pre>\n+ */\n+public class FilePipeTest extends PipeTestBase<FilePipe> {\n+\n+    @ClassRule\n+    public static TemporaryFolder testFolderSource = new TemporaryFolder();\n+\n+    private static String sourceFolderPath;\n+\n+    @Mock\n+    private IPipeLineSession session1 = new PipeLineSessionBase();\n+\n+    private byte[] var = \"Some String you want\".getBytes();\n+    private ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(var);\n+\n+    @Override\n+    public FilePipe createPipe() {\n+        return new FilePipe();\n+    }\n+\n+\n+    @BeforeClass\n+    public static void before() throws Exception {\n+        testFolderSource.newFile(\"1.txt\");\n+        sourceFolderPath = testFolderSource.getRoot().getPath();\n+\n+    }\n+\n+\n+    @Test\n+    public void doTestSuccess() throws Exception {\n+        Parameter p = new Parameter();\n+        p.setSessionKey(\"key\"); p.setName(\"p1\"); p.setValue(\"15\"); p.setType(\"int\"); p.configure();\n+        session1.put(\"key\", p);\n+        PipeForward fw = new PipeForward();\n+        fw.setName(\"test\"); pipe.registerForward(fw); pipe.addParameter(p);\n+        pipe.setCharset(\"/\"); pipe.setDirectory(sourceFolderPath);\n+        pipe.setOutputType(\"stream\"); pipe.setActions(\"read\");\n+        pipe.setFileName(\"1.txt\"); pipe.setFileSource(\"filesystem\");\n+        pipe.setActions(\"create\");\n+        pipe.configure();\n+        PipeRunResult res = pipe.doPipe(var, session1);\n+        assertEquals(res.getPipeForward().getName(), \"success\");\n+    }\n+\n+    @Test\n+    public void doTestFailAsEncodingNotSupportedBase64() throws Exception {\n+        exception.expect(PipeRunException.class);\n+        exception.expectMessage(\"Pipe [FilePipe under test] msgId [null] Error while executing file action(s): (UnsupportedEncodingException) /\");\n+        Parameter p = new Parameter();\n+        p.setSessionKey(\"key\"); p.setName(\"p1\"); p.setValue(\"15\"); p.setType(\"int\"); p.configure();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92d47a98de655edb213867df56752962bda5403"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7365adaa0ae74b11b35eb3b789eaf2fab0e083b", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/d7365adaa0ae74b11b35eb3b789eaf2fab0e083b", "committedDate": "2020-04-16T14:21:07Z", "message": "Merge pull request #1 from ibissource/master\n\nsyncing the main and forked repository"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0f7abc29f07b60a70107559f9be6678936bc704", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/f0f7abc29f07b60a70107559f9be6678936bc704", "committedDate": "2020-04-16T14:33:55Z", "message": "Merge branch 'PipeTest' into master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c021e57eba2fdb46ec1920bc24df86c7b0df5f31", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/c021e57eba2fdb46ec1920bc24df86c7b0df5f31", "committedDate": "2020-04-16T14:34:12Z", "message": "Merge pull request #2 from sinasen2000/master\n\nmerge master into pipetest branch to sync the pipe test with the main master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99e183c1f21ecabb868caf854178a8adfd12cf45", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/99e183c1f21ecabb868caf854178a8adfd12cf45", "committedDate": "2020-04-17T12:17:49Z", "message": "refactor test files for syncing\n\nRefactored the test files for pipes with to have them in sync with the master. \nRemoved some test classes whose classes are deprecated."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c042d8aac2209b129108ef6fd4b8ef1a109ba7d", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/4c042d8aac2209b129108ef6fd4b8ef1a109ba7d", "committedDate": "2020-04-17T13:06:23Z", "message": "refactor code for code quality\n\nrefactored the code for improving the code quality.\ndeleted classes which are vaguely tested, will have to retest those."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef437faad8857f5a797d3b2f8ba7b58256346ed4", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/ef437faad8857f5a797d3b2f8ba7b58256346ed4", "committedDate": "2020-04-17T13:25:26Z", "message": "resolve build error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ceeee7d7db13df6657ea0b7f5a26a6eb814e749f", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/ceeee7d7db13df6657ea0b7f5a26a6eb814e749f", "committedDate": "2020-04-17T13:40:50Z", "message": "fix test that blocks the build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3af2dc43c7d8aed9decf8931a269b8a0a05a513d", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/3af2dc43c7d8aed9decf8931a269b8a0a05a513d", "committedDate": "2020-04-17T13:44:41Z", "message": "fix build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "235c623fc614dd353c62b248983dc53454a09d62", "author": {"user": {"login": "gvanbrakel", "name": "Gerrit van Brakel"}}, "url": "https://github.com/ibissource/iaf/commit/235c623fc614dd353c62b248983dc53454a09d62", "committedDate": "2020-04-22T09:29:31Z", "message": "Merge branch 'master' into PipeTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96b95df81a9fa3870b9742b3619bae2e117dda94", "author": {"user": {"login": "gvanbrakel", "name": "Gerrit van Brakel"}}, "url": "https://github.com/ibissource/iaf/commit/96b95df81a9fa3870b9742b3619bae2e117dda94", "committedDate": "2020-04-22T09:53:07Z", "message": "uncomment class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "883a95484b9f4fc6fd41e77df9eb4cc36142b39b", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/883a95484b9f4fc6fd41e77df9eb4cc36142b39b", "committedDate": "2020-05-15T08:37:10Z", "message": "fix test errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bfe18c49e6d23015341b05c85259da18a097e32", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/2bfe18c49e6d23015341b05c85259da18a097e32", "committedDate": "2020-05-15T08:41:30Z", "message": "Merge pull request #8 from ibissource/master\n\nsync pipe test branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97cbfdd5245b71d03957925393182d703953c5bd", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/97cbfdd5245b71d03957925393182d703953c5bd", "committedDate": "2020-05-15T09:09:37Z", "message": "fix test errors resulting from version difference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e917a8434f8b64e05ded269bb446b738832334b7", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/e917a8434f8b64e05ded269bb446b738832334b7", "committedDate": "2020-05-15T09:13:19Z", "message": "remove space to prevent changing class file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9797086d9b5c88c8a7c1b8b9a0261b7dae615433", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/9797086d9b5c88c8a7c1b8b9a0261b7dae615433", "committedDate": "2020-05-15T09:20:34Z", "message": "Revert \"fix test errors resulting from version difference\"\n\nThis reverts commit 97cbfdd5245b71d03957925393182d703953c5bd."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "862a826dab349956fbb7985342d1767db821e164", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/862a826dab349956fbb7985342d1767db821e164", "committedDate": "2020-05-15T09:23:53Z", "message": "Revert changes to commit to obey CI testing rules\n\nIn intelliJ, the expected output of an asserEquals with string is \"String: a\" while TravisCI expects only \"a\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7d0f5e3b5092846cafdf0665ed77ff70094fd87", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/d7d0f5e3b5092846cafdf0665ed77ff70094fd87", "committedDate": "2020-05-15T09:30:00Z", "message": "Revert \"Revert \"fix test errors resulting from version difference\"\"\n\nThis reverts commit 9797086d9b5c88c8a7c1b8b9a0261b7dae615433."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c55a1c99d82196bff2ac8eaf38b3541807f07ca", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/5c55a1c99d82196bff2ac8eaf38b3541807f07ca", "committedDate": "2020-05-15T09:36:17Z", "message": "Remove non-functional changes from pr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4b98cfbee7cb47e81a0a44d2536fd9630d87f10", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/e4b98cfbee7cb47e81a0a44d2536fd9630d87f10", "committedDate": "2020-05-15T09:39:09Z", "message": "Remove non-functional changes from pr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c84c9640fb7201eff1b04c07a4a378ede44f76e", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/7c84c9640fb7201eff1b04c07a4a378ede44f76e", "committedDate": "2020-05-15T09:40:17Z", "message": "Remove redundant blank line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0693421e248eacdedb4fd430541967313529dd0", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/c0693421e248eacdedb4fd430541967313529dd0", "committedDate": "2020-05-15T09:47:21Z", "message": "Fix build error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8930fc24c534c5c41c6945eacaeda7006b4e6e56", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/8930fc24c534c5c41c6945eacaeda7006b4e6e56", "committedDate": "2020-05-15T10:00:04Z", "message": "Fix build errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d", "committedDate": "2020-05-15T10:15:11Z", "message": "Fix build errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c57b697c0219ec222ea12cda3da535198b6077b", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/2c57b697c0219ec222ea12cda3da535198b6077b", "committedDate": "2020-05-15T12:11:46Z", "message": "Improve code quality"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNTgzNjE3", "url": "https://github.com/ibissource/iaf/pull/600#pullrequestreview-412583617", "createdAt": "2020-05-15T11:59:53Z", "commit": {"oid": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMTo1OTo1M1rOGWB6Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMjoxMjozMVrOGWCRbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1MzE2Ng==", "bodyText": "toString appends the type of the object that's used. In this case a String. Hence the String: prefix.\nIf you use asString() it will convert whatever object may be in the getResult() to a string.", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425753166", "createdAt": "2020-05-15T11:59:53Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/FixedResultTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.parameters.Parameter;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+\n+\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * FixedResult Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FixedResultTest extends PipeTestBase<FixedResult> {\n+\n+    @ClassRule\n+    public static TemporaryFolder testFolderSource = new TemporaryFolder();\n+\n+    private static String sourceFolderPath;\n+    @Mock\n+    private IPipeLineSession session1 = new PipeLineSessionBase();\n+\n+    @Override\n+    public FixedResult createPipe() {\n+        return new FixedResult();\n+    }\n+\n+    @BeforeClass\n+    public static void before() throws Exception {\n+        sourceFolderPath = \"/Pipes/2.txt\";\n+        testFolderSource.newFile(\"2.txt\");\n+\n+    }\n+\n+\n+\n+    /**\n+     * Method: configure()\n+     */\n+    @Test\n+    public void testSuccess() throws Exception {\n+        Parameter param = new Parameter();\n+        param.setName(\"param1\");\n+        param.setValue(\"abs\");\n+        param.setSessionKey(\"*\");\n+        session1.put(\"param1\",\"yarr\");\n+        pipe.addParameter(param);\n+        pipe.setLookupAtRuntime(true);\n+        pipe.setFileName(sourceFolderPath);\n+        pipe.setReplaceFrom(\"param1\");\n+        pipe.setReplaceTo(\"kar\");\n+        pipe.setReturnString(\"${param1}andandandparam2\");\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"whatisthis\", session1);\n+        assertEquals(res.getResult().toString(), \"String: inside the file\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1NTU2Mg==", "bodyText": "This wont be triggered as you're expecting doPipe to throw an exception correct?", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425755562", "createdAt": "2020-05-15T12:05:06Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/IncreaseIntegerPipeTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * IncreaseIntegerPipe Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class IncreaseIntegerPipeTest extends PipeTestBase<IncreaseIntegerPipe> {\n+\n+    @Mock\n+    private IPipeLineSession session = new PipeLineSessionBase();\n+\n+    @Override\n+    public IncreaseIntegerPipe createPipe() {\n+        return new IncreaseIntegerPipe();\n+    }\n+\n+\n+    /**\n+     * Method: doPipe(Object input, IPipeLineSession session)\n+     */\n+    @Test\n+    public void testIncreaseBy2() throws Exception {\n+\n+        session.put(\"a\", \"4\");\n+        pipe.setSessionKey(\"a\");\n+        pipe.setIncrement(2);\n+        pipe.configure();\n+        doPipe(pipe, \"doesnt matter\", session);\n+        assertEquals(session.get(\"a\"), \"6\");\n+    }\n+\n+    @Test\n+    public void testCannotIncreaseBy2AsNoSessionKey() throws Exception {\n+        exception.expect(ConfigurationException.class);\n+        exception.expectMessage(\"sessionKey must be filled\");\n+        session.put(\"a\", \"4\");\n+        pipe.setIncrement(2);\n+        pipe.configure();\n+        doPipe(pipe, \"doesnt matter\", session);\n+        assertEquals(session.get(\"a\"), \"6\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1NTk3OQ==", "bodyText": "Try to use asString instead", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425755979", "createdAt": "2020-05-15T12:05:57Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/PasswordGeneratorPipeTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Test;\n+import org.junit.Before;\n+import org.junit.After;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * PasswordGeneratorPipe Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class PasswordGeneratorPipeTest extends PipeTestBase<PasswordGeneratorPipe> {\n+\n+\n+    @Override\n+    public PasswordGeneratorPipe createPipe() {\n+        return new PasswordGeneratorPipe();\n+    }\n+\n+    /**\n+     * Method: configure()\n+     */\n+    @Test\n+    public void testConfigure() throws Exception {\n+        pipe.setUseSecureRandom(true);\n+        pipe.configure();\n+\n+    }\n+    /**\n+     * Method: generate(int numOfLCharacters, int numOfUCharacters, int numOfSigns, int numOfNumbers)\n+     */\n+    @Test\n+    public void testGenerate() throws Exception {\n+        pipe.configure();\n+        String res = pipe.generate(3, 4, 2, 1);\n+        assertEquals(res.length(), 10);\n+        assertFalse(res.isEmpty());\n+    }\n+\n+    /**\n+     * Method: doPipe(Object input, IPipeLineSession session)\n+     */\n+    @Test\n+    public void testDoPipe() throws Exception {\n+        pipe.setLCharacters(\"abcd\");\n+        pipe.setNumbers(\"12342\");\n+        pipe.setUCharacters(\"ASDF\");\n+        pipe.setSigns(\"!@#@\");\n+        pipe.setNumOfDigits(3);\n+        pipe.setNumOfLCharacters(4);\n+        pipe.setNumOfUCharacters(2);\n+        pipe.setNumOfSigns(2);\n+        pipe.setUseSecureRandom(false);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"pipey\", session);\n+        assertEquals(res.getResult().toString().length(), 19);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1NzEzMg==", "bodyText": "Maybe you can also convert the current PasswordHash tests (in the static main method of the class) to proper junit tests.", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425757132", "createdAt": "2020-05-15T12:08:21Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/PasswordHashPipeTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.util.PasswordHash;\n+import org.junit.Test;\n+import org.junit.Before;\n+import org.junit.After;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * PasswordHashPipe Tester.\n+ * @author <Sina>\n+ */\n+public class PasswordHashPipeTest extends PipeTestBase<PasswordHashPipe> {\n+\n+    @Mock\n+    private PipeLineSessionBase session = new PipeLineSessionBase();\n+\n+    @Override\n+    public PasswordHashPipe createPipe() {\n+        return new PasswordHashPipe();\n+    }\n+\n+\n+    /**\n+     * Method: doPipe(Object input, IPipeLineSession session)\n+     */\n+    @Test\n+    public void testHashPipe() throws Exception {\n+        session.put(\"key\", \"3:2342:2342\" );\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"password\", session);\n+        assertEquals(\"success\", res.getPipeForward().getName());\n+    }\n+\n+    @Test\n+    public void testValidatePipe() throws Exception {\n+\n+        String sc = PasswordHash.createHash(\"password\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1NzkzMA==", "bodyText": "You're expecting doPipe to throw an exception? then this assertion is not required :)", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425757930", "createdAt": "2020-05-15T12:10:04Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/PutInSessionTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Test;\n+\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+\n+/**\n+ * PutInSession Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class PutInSessionTest extends PipeTestBase<PutInSession> {\n+\n+    @Mock\n+    PipeLineSessionBase session = new PipeLineSessionBase();\n+\n+    @Override\n+    public PutInSession createPipe() {\n+        return new PutInSession();\n+    }\n+\n+\n+\n+    /**\n+     * Method: configure()\n+     */\n+    /*\n+    @Test\n+    public void testConfigureWithoutSessionKey() throws Exception {\n+        pipe.setSessionKey(\"hola\");\n+        pipe.configure();\n+        doPipe(pipe, \"val\", session);\n+        Message m = new Message(\"val\");\n+        assertEquals(new Message(\"val\") , session.get(\"hola\"));\n+\n+    }\n+\n+    PutInSessionPipeTest:\n+java.lang.AssertionError: expected: nl.nn.adapterframework.stream.Message<String: val> but was: nl.nn.adapterframework.stream.Message<String: val>\n+Expected :nl.nn.adapterframework.stream.Message<String: val>\n+Actual   :nl.nn.adapterframework.stream.Message<String: val>\n+<Click to see difference>\n+No Difference??\n+\n+    */\n+\n+\n+    /**\n+     * Method: doPipe(Object input, IPipeLineSession session)\n+     */\n+    @Test\n+    public void testPutWithSessionKey() throws Exception {\n+        pipe.setSessionKey(\"hola\");\n+        pipe.setValue(\"val\");\n+        pipe.configure();\n+        doPipe(pipe, \"notimportant\", session);\n+        assertEquals(\"val\", session.get(\"hola\"));\n+    }\n+\n+    @Test\n+    public void testNoSessionKey() throws Exception {\n+        exception.expectMessage(\"attribute sessionKey must be specified\");\n+        exception.expect(ConfigurationException.class);\n+        pipe.setValue(\"val\");\n+        pipe.configure();\n+        PipeRunResult res = pipe.doPipe(null, session);\n+        assertFalse(res.getPipeForward().getName().isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1ODEwNA==", "bodyText": "Try to use asString instead of toString", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425758104", "createdAt": "2020-05-15T12:10:25Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/RemoveFromSessionTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/** \n+* RemoveFromSession Tester. \n+* \n+* @author <Sina Sen>\n+*/ \n+public class RemoveFromSessionTest extends PipeTestBase<RemoveFromSession> {\n+\n+    @Mock\n+    private IPipeLineSession session = new PipeLineSessionBase();\n+    @Override\n+    public RemoveFromSession createPipe() {\n+        return new RemoveFromSession();\n+    }\n+\n+\n+/** \n+* \n+* Method: configure() \n+* \n+*/ \n+@Test\n+public void testEmptySessionKeyNonEmptyInput() throws Exception {\n+        pipe.setSessionKey(null);\n+        session.put(\"a\", \"123\");\n+        PipeRunResult res = doPipe(pipe, \"a\", session);\n+        assertEquals(res.getResult().toString(), \"String: 123\");\n+\n+}\n+\n+    @Test\n+    public void testNonEmptySessionKeyNonEmptyInput() throws Exception {\n+        pipe.setSessionKey(\"a\");\n+        session.put(\"a\", \"123\");\n+        PipeRunResult res = doPipe(pipe, \"a\", session);\n+        assertEquals(res.getResult().toString(), \"String: 123\");    }\n+\n+    @Test\n+    public void testNonEmptySessionKeyEmptyInput() throws Exception {\n+            pipe.setSessionKey(\"a\");\n+            session.put(\"a\", \"123\");\n+            PipeRunResult res = pipe.doPipe(null, session);\n+            assertEquals(res.getResult().toString(), \"String: 123\");\n+\n+    }\n+    @Test\n+    public void testEmptySessionKeyEmptyInput() throws Exception {\n+        exception.expect(NullPointerException.class);\n+        pipe.setSessionKey(null);\n+        session.put(\"a\", \"123\");\n+        PipeRunResult res = doPipe(pipe, null, session);\n+        assertEquals(res.getResult().toString(), \"[null]\");    }\n+\n+    @Test\n+    public void testFailAsKeyIsWrong() throws Exception {\n+        pipe.setSessionKey(\"ab\");\n+        session.put(\"a\", \"123\");\n+        PipeRunResult res = doPipe(pipe, \"ab\", session);\n+        assertEquals(res.getResult().toString(), \"String: [null]\");\n+\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1ODU3Nw==", "bodyText": "Try to use asString instead of toString", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425758577", "createdAt": "2020-05-15T12:11:22Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/ReplacerPipeTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Test;\n+import org.junit.Before;\n+import org.junit.After;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+\n+/**\n+ * ReplacerPipe Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class ReplacerPipeTest extends PipeTestBase<ReplacerPipe>{\n+\n+    @Override\n+    public ReplacerPipe createPipe() {\n+        return new ReplacerPipe();\n+    }\n+\n+\n+    @Test\n+    public void everythingNull() throws Exception {\n+        exception.expect(ConfigurationException.class);\n+        exception.expectMessage(\"cannot have a null replace-attribute\");\n+        pipe.setFind(\"laa\");\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"\", session);\n+        assertFalse(res.getPipeForward().getName().isEmpty());\n+\n+    }\n+\n+    @Test\n+    public void getFindEmpty() throws Exception {\n+        pipe.setFind(\"\");\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"dsf\", session);\n+        assertFalse(res.getPipeForward().getName().isEmpty());\n+\n+    }\n+\n+    /**\n+     * Method: configure()\n+     */\n+    @Test\n+    public void testConfigureWithSeperator() throws Exception {\n+        pipe.setFind(\"sina/murat/niels\");\n+        pipe.setLineSeparatorSymbol(\"/\");\n+        pipe.setReplace(\"yo\");\n+        pipe.setAllowUnicodeSupplementaryCharacters(true);\n+        pipe.configure();\n+        doPipe(pipe, pipe.getFind(), session);\n+        assertFalse( pipe.getFind().isEmpty());\n+    }\n+\n+    @Test\n+    public void replaceNonXMLChar() throws Exception{\n+        pipe.setFind(\"test\");\n+        pipe.setReplace(\"head\");\n+        pipe.setReplaceNonXmlChar(\"k\");\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"<test>lolo</test>/jacjac:)\", session);\n+        assertEquals(\"String: <head>lolo</head>/jacjac:)\", res.getResult().toString());\n+    }\n+\n+    @Test\n+    public void replaceStringSuccess() throws Exception{\n+        pipe.setFind(\"test\");\n+        pipe.setReplace(\"head\");\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"<test>lolo</test>/jacjac:)\", session);\n+        assertEquals(\"String: <head>lolo</head>/jacjac:)\", res.getResult().toString());\n+    }\n+\n+    @Test\n+    public void replaceNonXMLCharLongerThanOne() throws Exception{\n+        exception.expect(ConfigurationException.class);\n+        exception.expectMessage(\"replaceNonXmlChar [klkl] has to be one character\");\n+        pipe.setFind(\"test\");\n+        pipe.setReplace(\"head\");\n+        pipe.setReplaceNonXmlChar(\"klkl\");\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"<test>lolo</test>/jacjac:)\", session);\n+        assertEquals(\"<head>lolo</head>/jacjac:)\", res.getResult().toString());\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1OTA4Nw==", "bodyText": "This is javascript, please name the file accordingly, eg. /javascript/rhino-tests.js", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r425759087", "createdAt": "2020-05-15T12:12:31Z", "author": {"login": "nielsm5"}, "path": "core/src/test/resources/Pipes/1.txt", "diffHunk": "@@ -0,0 +1,3 @@\n+function giveNumber(x) {\n+    return x * x;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d"}, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c76bdce799eb07d045dd5fc05f7d4e3f7aacbd4", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/2c76bdce799eb07d045dd5fc05f7d4e3f7aacbd4", "committedDate": "2020-05-15T12:55:08Z", "message": "Refactor for code quality, better naming, replace toString with asString"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f4d70ed4fd281968fbbbf8c1d6960c38da57ae9", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/7f4d70ed4fd281968fbbbf8c1d6960c38da57ae9", "committedDate": "2020-05-15T12:55:23Z", "message": "Refactor for code quality, better naming, replace toString with asString"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69c1b6dae58aa609e4ee11456c95cbb66c0be342", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/69c1b6dae58aa609e4ee11456c95cbb66c0be342", "committedDate": "2020-05-15T13:11:40Z", "message": "Refactor for code quality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0007e560af62f49ef0a7b456588d0deacad195d", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/b0007e560af62f49ef0a7b456588d0deacad195d", "committedDate": "2020-05-15T13:17:22Z", "message": "refactor for code quality"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MDg2MTUx", "url": "https://github.com/ibissource/iaf/pull/600#pullrequestreview-418086151", "createdAt": "2020-05-26T08:38:53Z", "commit": {"oid": "b0007e560af62f49ef0a7b456588d0deacad195d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODozODo1M1rOGaUR2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDo0NToyMFrOGaYtug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0ODQwOA==", "bodyText": "See: PasswordHash:204", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r430248408", "createdAt": "2020-05-26T08:38:53Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/PasswordHashPipeTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.util.PasswordHash;\n+import org.junit.Test;\n+import org.junit.Before;\n+import org.junit.After;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * PasswordHashPipe Tester.\n+ * @author <Sina>\n+ */\n+public class PasswordHashPipeTest extends PipeTestBase<PasswordHashPipe> {\n+\n+    @Mock\n+    private PipeLineSessionBase session = new PipeLineSessionBase();\n+\n+    @Override\n+    public PasswordHashPipe createPipe() {\n+        return new PasswordHashPipe();\n+    }\n+\n+\n+    /**\n+     * Method: doPipe(Object input, IPipeLineSession session)\n+     */\n+    @Test\n+    public void testHashPipe() throws Exception {\n+        session.put(\"key\", \"3:2342:2342\" );\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"password\", session);\n+        assertEquals(\"success\", res.getPipeForward().getName());\n+    }\n+\n+    @Test\n+    public void testValidatePipe() throws Exception {\n+\n+        String sc = PasswordHash.createHash(\"password\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTc1NzEzMg=="}, "originalCommit": {"oid": "3d4d3f7ac0ca58223f63592cbb697e0981ea0e0d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1MTA0MA==", "bodyText": "Setters cannot be null (they would not be set).\nThey can however be empty \"\"", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r430251040", "createdAt": "2020-05-26T08:43:20Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/RemoveFromSessionTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/** \n+* RemoveFromSession Tester. \n+* \n+* @author <Sina Sen>\n+*/ \n+public class RemoveFromSessionTest extends PipeTestBase<RemoveFromSession> {\n+\n+    @Mock\n+    private IPipeLineSession session = new PipeLineSessionBase();\n+    @Override\n+    public RemoveFromSession createPipe() {\n+        return new RemoveFromSession();\n+    }\n+\n+\n+/** \n+* \n+* Method: configure() \n+* \n+*/ \n+@Test\n+public void testEmptySessionKeyNonEmptyInput() throws Exception {\n+        pipe.setSessionKey(null);\n+        session.put(\"a\", \"123\");\n+        PipeRunResult res = doPipe(pipe, \"a\", session);\n+        assertEquals(res.getResult().asString(), \"123\");\n+\n+}\n+\n+    @Test\n+    public void testNonEmptySessionKeyNonEmptyInput() throws Exception {\n+        pipe.setSessionKey(\"a\");\n+        session.put(\"a\", \"123\");\n+        PipeRunResult res = doPipe(pipe, \"a\", session);\n+        assertEquals(res.getResult().asString(), \"123\");    }\n+\n+    @Test\n+    public void testNonEmptySessionKeyEmptyInput() throws Exception {\n+            pipe.setSessionKey(\"a\");\n+            session.put(\"a\", \"123\");\n+            PipeRunResult res = pipe.doPipe(null, session);\n+            assertEquals(res.getResult().asString(), \"123\");\n+\n+    }\n+    @Test\n+    public void testEmptySessionKeyEmptyInput() throws Exception {\n+        exception.expect(NullPointerException.class);\n+        pipe.setSessionKey(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0007e560af62f49ef0a7b456588d0deacad195d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxODE0NA==", "bodyText": "You've only added tests with setReplaceNonXmlChars set to true?", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r430318144", "createdAt": "2020-05-26T10:39:46Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/ReplacerPipeTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Test;\n+\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * ReplacerPipe Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class ReplacerPipeTest extends PipeTestBase<ReplacerPipe>{\n+\n+    @Override\n+    public ReplacerPipe createPipe() {\n+        return new ReplacerPipe();\n+    }\n+\n+\n+    @Test\n+    public void everythingNull() throws Exception {\n+        exception.expect(ConfigurationException.class);\n+        exception.expectMessage(\"cannot have a null replace-attribute\");\n+        pipe.setFind(\"laa\");\n+        pipe.configure();\n+        doPipe(pipe, \"\", session);\n+        fail(\"this is expected to fail\");\n+\n+    }\n+\n+    @Test\n+    public void getFindEmpty() throws Exception {\n+        pipe.setFind(\"\");\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"dsf\", session);\n+        assertFalse(res.getPipeForward().getName().isEmpty());\n+\n+    }\n+\n+    /**\n+     * Method: configure()\n+     */\n+    @Test\n+    public void testConfigureWithSeperator() throws Exception {\n+        pipe.setFind(\"sina/murat/niels\");\n+        pipe.setLineSeparatorSymbol(\"/\");\n+        pipe.setReplace(\"yo\");\n+        pipe.setAllowUnicodeSupplementaryCharacters(true);\n+        pipe.configure();\n+        doPipe(pipe, pipe.getFind(), session);\n+        assertFalse( pipe.getFind().isEmpty());\n+    }\n+\n+    @Test\n+    public void replaceNonXMLChar() throws Exception{\n+        pipe.setFind(\"test\");\n+        pipe.setReplace(\"head\");\n+        pipe.setReplaceNonXmlChar(\"k\");\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"<test>lolo</test>/jacjac:)\", session);\n+        assertEquals(\"<head>lolo</head>/jacjac:)\", res.getResult().asString());\n+    }\n+\n+    @Test\n+    public void replaceStringSuccess() throws Exception{\n+        pipe.setFind(\"test\");\n+        pipe.setReplace(\"head\");\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"<test>lolo</test>/jacjac:)\", session);\n+        assertEquals(\"<head>lolo</head>/jacjac:)\", res.getResult().asString());\n+    }\n+\n+    @Test\n+    public void replaceNonXMLCharLongerThanOne() throws Exception{\n+        exception.expect(ConfigurationException.class);\n+        exception.expectMessage(\"replaceNonXmlChar [klkl] has to be one character\");\n+        pipe.setFind(\"test\");\n+        pipe.setReplace(\"head\");\n+        pipe.setReplaceNonXmlChar(\"klkl\");\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        doPipe(pipe, \"<test>lolo</test>/jacjac:)\", session);\n+        fail(\"this is expected to fail\");\n+    }\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0007e560af62f49ef0a7b456588d0deacad195d"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxOTc0Ng==", "bodyText": "Try to not test too many things in a single junittest\nIt will be harder to find issues if something might break in the future.\nTypically in a junit test you test the smallest possible bit of code, making sure that the entire code as a whole keeps performing well.", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r430319746", "createdAt": "2020-05-26T10:42:48Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/SkipPipeTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package nl.nn.adapterframework.pipes;\n+\n+\n+import nl.nn.adapterframework.core.PipeRunResult;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+\n+\n+/**\n+ * SkipPipe Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class SkipPipeTest extends PipeTestBase<SkipPipe>{\n+\n+\n+\n+    @Override\n+    public SkipPipe createPipe() {\n+        return new SkipPipe();\n+    }\n+\n+    /**\n+     * Method: setSkip(int skip)\n+     */\n+    @Test\n+    public void testDoPipeSkip3Read2WithString() throws Exception {\n+        pipe.setSkip(3); pipe.setLength(2);\n+        PipeRunResult res = doPipe(pipe, \"0123456\", session);\n+        assertEquals(res.getResult().asString(), \"34\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0007e560af62f49ef0a7b456588d0deacad195d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyMDY3Nw==", "bodyText": "For a test that has no additional properties you set a lot of properties", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r430320677", "createdAt": "2020-05-26T10:44:37Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/Text2XmlPipeTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+\n+\n+/**\n+ * Text2XmlPipe Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class Text2XmlPipeTest extends PipeTestBase<Text2XmlPipe> {\n+\n+    @Override\n+    public Text2XmlPipe createPipe() {\n+        return new Text2XmlPipe();\n+    }\n+\n+    /**\n+     * Method: doPipe(Object input, IPipeLineSession session)\n+     */\n+    @Test\n+    public void testSuccessCDataAndReplaceNonXMLSplitLines() throws Exception {\n+        pipe.setXmlTag(\"address\");\n+        pipe.setSplitLines(true);\n+        pipe.setUseCdataSection(true);\n+        pipe.setIncludeXmlDeclaration(true);\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"this is an example\\nim in cdata\", session);\n+        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><address><line><![CDATA[this is an example]]></line><line><![CDATA[im in cdata]]></line></address>\", res.getResult().asString());\n+    }\n+\n+    @Test\n+    public void testSuccessCDataAndXMLDeclaration() throws Exception {\n+        pipe.setXmlTag(\"address\");\n+        pipe.setSplitLines(false);\n+        pipe.setUseCdataSection(false);\n+        pipe.setIncludeXmlDeclaration(true);\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"this is an example\\nim in cdata\", session);\n+        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><address>this is an example\\n\" +\n+                \"im in cdata</address>\", res.getResult().asString());\n+    }\n+\n+    @Test\n+    public void testSuccessWithoutAdditionalProperties() throws Exception {\n+        pipe.setXmlTag(\"address\");\n+        pipe.setSplitLines(false);\n+        pipe.setUseCdataSection(false);\n+        pipe.setIncludeXmlDeclaration(true);\n+        pipe.setReplaceNonXmlChars(false);\n+        pipe.configure();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0007e560af62f49ef0a7b456588d0deacad195d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyMTA4Mg==", "bodyText": "this is not cdata. See wikipedia for more info", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r430321082", "createdAt": "2020-05-26T10:45:20Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/Text2XmlPipeTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+\n+\n+/**\n+ * Text2XmlPipe Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class Text2XmlPipeTest extends PipeTestBase<Text2XmlPipe> {\n+\n+    @Override\n+    public Text2XmlPipe createPipe() {\n+        return new Text2XmlPipe();\n+    }\n+\n+    /**\n+     * Method: doPipe(Object input, IPipeLineSession session)\n+     */\n+    @Test\n+    public void testSuccessCDataAndReplaceNonXMLSplitLines() throws Exception {\n+        pipe.setXmlTag(\"address\");\n+        pipe.setSplitLines(true);\n+        pipe.setUseCdataSection(true);\n+        pipe.setIncludeXmlDeclaration(true);\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"this is an example\\nim in cdata\", session);\n+        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><address><line><![CDATA[this is an example]]></line><line><![CDATA[im in cdata]]></line></address>\", res.getResult().asString());\n+    }\n+\n+    @Test\n+    public void testSuccessCDataAndXMLDeclaration() throws Exception {\n+        pipe.setXmlTag(\"address\");\n+        pipe.setSplitLines(false);\n+        pipe.setUseCdataSection(false);\n+        pipe.setIncludeXmlDeclaration(true);\n+        pipe.setReplaceNonXmlChars(true);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"this is an example\\nim in cdata\", session);\n+        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><address>this is an example\\n\" +\n+                \"im in cdata</address>\", res.getResult().asString());\n+    }\n+\n+    @Test\n+    public void testSuccessWithoutAdditionalProperties() throws Exception {\n+        pipe.setXmlTag(\"address\");\n+        pipe.setSplitLines(false);\n+        pipe.setUseCdataSection(false);\n+        pipe.setIncludeXmlDeclaration(true);\n+        pipe.setReplaceNonXmlChars(false);\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"this is an example\\nim in cdata\", session);\n+        assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><address>this is an example\\n\" +\n+                \"im in cdata</address>\", res.getResult().asString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0007e560af62f49ef0a7b456588d0deacad195d"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7152b2f6ba2b5b91e15751a34abaa4441d6c6b10", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/7152b2f6ba2b5b91e15751a34abaa4441d6c6b10", "committedDate": "2020-06-03T10:34:47Z", "message": "Merge pull request #10 from ibissource/master\n\nsync branch with base master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b6c3bc3cd9e4902b7e3a0787e82b71b7d44ca7f", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/7b6c3bc3cd9e4902b7e3a0787e82b71b7d44ca7f", "committedDate": "2020-06-03T12:36:02Z", "message": "Do the changes w.r.t Niels' feedback\n\n- Improved the quality of the test. \n- Deleted redundant tests and changed the content of tests that were written of misunderstood methods."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTA1ODMx", "url": "https://github.com/ibissource/iaf/pull/600#pullrequestreview-427105831", "createdAt": "2020-06-09T12:49:25Z", "commit": {"oid": "7b6c3bc3cd9e4902b7e3a0787e82b71b7d44ca7f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjo0OToyNVrOGhH6dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1Nzo1NVrOGhLbSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4NTg0Nw==", "bodyText": "Can you order all the tests according to their @Order annotation?", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r437385847", "createdAt": "2020-06-09T12:49:25Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/MoveFilePipeTest.java", "diffHunk": "@@ -0,0 +1,366 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.configuration.ConfigurationException;\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.core.PipeStartException;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+import org.springframework.core.annotation.Order;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+\n+/**\n+ * IfMultipart Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class MoveFilePipeTest extends PipeTestBase<MoveFilePipe>{\n+\n+    private String pipeForwardThen = \"success\";\n+\n+    @Mock\n+    private IPipeLineSession session = new PipeLineSessionBase();\n+\n+\n+\n+    @ClassRule\n+    public static TemporaryFolder testFolderSource = new TemporaryFolder();\n+\n+    private static String sourceFolderPath;\n+\n+    @ClassRule\n+    public static TemporaryFolder testFolderDest = new TemporaryFolder();;\n+\n+    private static String destFolderPath;\n+\n+    @ClassRule\n+    public static TemporaryFolder testFolderCantDelete = new TemporaryFolder();\n+\n+\n+    private static String cantdeleteFolderPath;\n+\n+    @ClassRule\n+    public static TemporaryFolder testFolderDelete = new TemporaryFolder();\n+\n+    private static String deleteFolderPath;\n+\n+    @Override\n+    public MoveFilePipe createPipe() { return new MoveFilePipe(); }\n+\n+    @BeforeClass\n+    public static void setUpTest() throws IOException {\n+            sourceFolderPath = testFolderSource.getRoot().getPath();\n+            destFolderPath = testFolderDest.getRoot().getPath();\n+            cantdeleteFolderPath = testFolderCantDelete.getRoot().getPath();\n+            deleteFolderPath = testFolderDelete.getRoot().getPath();\n+            testFolderSource.newFile(\"1.txt\"); testFolderSource.newFile(\"2.txt\"); testFolderSource.newFile(\"3.txt\"); testFolderSource.newFile(\"a.md\"); testFolderSource.newFile(\"b.md\"); testFolderSource.newFile(\"sad.lk\"); testFolderSource.newFile(\"notCompatible.txt\");\n+            testFolderSource.newFile(\"createDirectory.txt\"); testFolderSource.newFile(\"cantmove.sc\"); testFolderSource.newFile(\"prefixsuffix.txt\"); testFolderSource.newFile(\"toAppend1.txt\"); testFolderSource.newFile(\"toAppend2.txt\"); testFolderSource.newFile(\"xx.txt\"); testFolderSource.newFile(\"test.txt\");\n+            testFolderDest.newFile(\"cantmove.sc\"); testFolderDest.newFile(\"notcompatible.asd\"); testFolderDest.newFile(\"toBeAppended.txt\"); testFolderCantDelete.newFile(\"deletable.sd\"); testFolderCantDelete.newFile(\"deletionInterrupter.mz\");\n+            testFolderDelete.newFile(\"moveAndDeleteDirectory.txt\");\n+    }\n+\n+\n+\n+    @Test\n+    @Order(12)\n+    public void everythingNull() throws ConfigurationException, PipeStartException, PipeRunException {\n+        exception.expect(ConfigurationException.class);\n+        pipe.setFilename(null);\n+        pipe.configure();\n+        pipe.start();\n+\n+        pipe.doPipe(null, session);\n+\n+        fail(\"this is expected to fail\");\n+    }\n+\n+    @Test\n+    @Order(11)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b6c3bc3cd9e4902b7e3a0787e82b71b7d44ca7f"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4ODQzOA==", "bodyText": "This session thing doesn't do anything am I correct?", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r437388438", "createdAt": "2020-06-09T12:53:26Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/PasswordHashPipeTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.util.PasswordHash;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * PasswordHashPipe Tester.\n+ * @author <Sina>\n+ */\n+public class PasswordHashPipeTest extends PipeTestBase<PasswordHashPipe> {\n+\n+    @Mock\n+    private PipeLineSessionBase session = new PipeLineSessionBase();\n+\n+    @Override\n+    public PasswordHashPipe createPipe() {\n+        return new PasswordHashPipe();\n+    }\n+\n+\n+    /**\n+     * Method: doPipe(Object input, IPipeLineSession session)\n+     */\n+    @Test\n+    public void testHashPipe() throws Exception {\n+        session.put(\"key\", \"3:2342:2342\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b6c3bc3cd9e4902b7e3a0787e82b71b7d44ca7f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM4ODg2NA==", "bodyText": "I don't understand why the pipeforward equals null, that should never be the case :S what is happening here?", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r437388864", "createdAt": "2020-06-09T12:54:08Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/PasswordHashPipeTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.util.PasswordHash;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * PasswordHashPipe Tester.\n+ * @author <Sina>\n+ */\n+public class PasswordHashPipeTest extends PipeTestBase<PasswordHashPipe> {\n+\n+    @Mock\n+    private PipeLineSessionBase session = new PipeLineSessionBase();\n+\n+    @Override\n+    public PasswordHashPipe createPipe() {\n+        return new PasswordHashPipe();\n+    }\n+\n+\n+    /**\n+     * Method: doPipe(Object input, IPipeLineSession session)\n+     */\n+    @Test\n+    public void testHashPipe() throws Exception {\n+        session.put(\"key\", \"3:2342:2342\" );\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"password\", session);\n+        assertEquals(\"success\", res.getPipeForward().getName());\n+    }\n+\n+    @Test\n+    public void testValidatePipe() throws Exception {\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"password\", session);\n+        assertTrue(PasswordHash.validatePassword(\"password\", res.getResult().asString()));\n+        assertEquals(\"success\", res.getPipeForward().getName());\n+    }\n+    @Test\n+    public void testValidatePipeFailAsNotTheSame() throws Exception {\n+\n+        session.put(\"key\", \"2:22:22\");\n+        pipe.setHashSessionKey(\"key\");\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"password\", session);\n+        assertEquals(null, res.getPipeForward());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b6c3bc3cd9e4902b7e3a0787e82b71b7d44ca7f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0MzQwMQ==", "bodyText": "There are a lot of setters/parameters and for all 4 tests, and they are identical?\nThis class has grown out of proportions so I can understand it's difficult to test. Maybe you could create a separate PR for this or at least clean up the test a bit and maybe add some documentation/comments to see what's going on :)", "url": "https://github.com/ibissource/iaf/pull/600#discussion_r437443401", "createdAt": "2020-06-09T13:57:55Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/pipes/FixedResultTest.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package nl.nn.adapterframework.pipes;\n+\n+import nl.nn.adapterframework.core.IPipeLineSession;\n+import nl.nn.adapterframework.core.PipeLineSessionBase;\n+import nl.nn.adapterframework.core.PipeRunException;\n+import nl.nn.adapterframework.core.PipeRunResult;\n+import nl.nn.adapterframework.parameters.Parameter;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import org.junit.rules.TemporaryFolder;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+\n+/**\n+ * FixedResult Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class FixedResultTest extends PipeTestBase<FixedResult> {\n+\n+    @ClassRule\n+    public static TemporaryFolder testFolderSource = new TemporaryFolder();\n+\n+    private static String sourceFolderPath;\n+    @Mock\n+    private IPipeLineSession session1 = new PipeLineSessionBase();\n+\n+    @Override\n+    public FixedResult createPipe() {\n+        return new FixedResult();\n+    }\n+\n+    @BeforeClass\n+    public static void before() throws Exception {\n+        sourceFolderPath = \"/Pipes/2.txt\";\n+        testFolderSource.newFile(\"2.txt\");\n+\n+    }\n+\n+\n+\n+    /**\n+     * Method: configure()\n+     */\n+    @Test\n+    public void testSuccess() throws Exception {\n+        Parameter param = new Parameter();\n+        param.setName(\"param1\");\n+        param.setValue(\"abs\");\n+        param.setSessionKey(\"*\");\n+        session1.put(\"param1\",\"yarr\");\n+        pipe.addParameter(param);\n+        pipe.setLookupAtRuntime(true);\n+        pipe.setFileName(sourceFolderPath);\n+        pipe.setReplaceFrom(\"param1\");\n+        pipe.setReplaceTo(\"kar\");\n+        pipe.setReturnString(\"${param1}andandandparam2\");\n+        pipe.configure();\n+        PipeRunResult res = doPipe(pipe, \"whatisthis\", session1);\n+        assertEquals(res.getResult().asString(), \"inside the file\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b6c3bc3cd9e4902b7e3a0787e82b71b7d44ca7f"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d087d061645d6a9d1037c2fb1e22e0dbbb5f3a02", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/d087d061645d6a9d1037c2fb1e22e0dbbb5f3a02", "committedDate": "2020-06-10T11:19:22Z", "message": "Add changes to pr according to the feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f9014e8899905aba6bbcfff61a94a9fc4174c9f", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/5f9014e8899905aba6bbcfff61a94a9fc4174c9f", "committedDate": "2020-06-10T12:57:26Z", "message": "Add changes to PasswordHashTest for coherent testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0858e2de2e63df0fd35534b4b98cdfb467edd4ee", "author": {"user": {"login": "sinasen2000", "name": "Sina Sen"}}, "url": "https://github.com/ibissource/iaf/commit/0858e2de2e63df0fd35534b4b98cdfb467edd4ee", "committedDate": "2020-06-10T13:05:12Z", "message": "Eliminate code quality warnings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MTc0ODg2", "url": "https://github.com/ibissource/iaf/pull/600#pullrequestreview-428174886", "createdAt": "2020-06-10T15:28:37Z", "commit": {"oid": "0858e2de2e63df0fd35534b4b98cdfb467edd4ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1320, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}