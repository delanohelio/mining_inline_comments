{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MjQ0NzA3", "number": 1063, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoxNToxNVrOEjljww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNjozNDo1N1rOElhIqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzUwOTc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/configuration/BasicAdapterServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoxNToxNVrOHSBQdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNToyMTozOVrOHSHOjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY1NzAxNQ==", "bodyText": "Dat zal de super toch wel doen?", "url": "https://github.com/ibissource/iaf/pull/1063#discussion_r488657015", "createdAt": "2020-09-15T13:15:15Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/configuration/BasicAdapterServiceImpl.java", "diffHunk": "@@ -1,47 +1,80 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n package nl.nn.adapterframework.configuration;\n \n-import nl.nn.adapterframework.core.IAdapter;\n-import nl.nn.adapterframework.util.LogUtil;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.management.ObjectName;\n \n import org.apache.logging.log4j.Logger;\n+import org.springframework.beans.factory.BeanCreationException;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.jmx.export.MBeanExporter;\n+\n+import nl.nn.adapterframework.core.IAdapter;\n+import nl.nn.adapterframework.util.LogUtil;\n \n /**\n- * This implemention of {@link AdapterService} also registers the adapters to Jmx, and configures the registered Adapters.\n+ * This implementation of {@link AdapterService} also registers the adapters to a JMX server, and configures the registered Adapters.\n \n- * @author Michiel Meeuwissen\n+ * @author Niels Meijer\n  * @since 5.0.29\n  */\n-public class BasicAdapterServiceImpl extends AdapterServiceImpl {\n-\n-    private static final Logger LOG = LogUtil.getLogger(BasicAdapterServiceImpl.class);\n-\n-    @Override\n-    public void registerAdapter(IAdapter adapter) throws ConfigurationException {\n-        super.registerAdapter(adapter);\n-        try {\n-            // Throws javax.management.InstanceAlreadyExistsException when testing on\n-            // WebSphere 7. This code has probably never been enabled as previously it was\n-            // part of Configuration.java and was surrounded with \"if (isEnableJMX())\" with\n-            // enableJMX being false by default.\n-            LOG.debug(\"Registering adapter [\" + adapter.getName() + \"] to the JMX server\");\n-            JmxMbeanHelper.hookupAdapter(adapter);\n-            LOG.info(\"[\" + adapter.getName() + \"] registered to the JMX server\");\n-        } catch (Throwable t) {\n-            LOG.warn(t.getMessage());\n-        }\n-        adapter.configure();\n-    }\n-\n-    @Override\n-    public void unRegisterAdapter(IAdapter adapter) {\n-        super.unRegisterAdapter(adapter);\n-        try {\n-            JmxMbeanHelper.unhookAdapter(adapter);\n-        } catch (Throwable t) {\n-            LOG.warn(t.getMessage());\n-        }\n-    }\n+public class BasicAdapterServiceImpl extends AdapterServiceImpl implements ApplicationContextAware, InitializingBean {\n \n-}\n+\tprivate final Logger log = LogUtil.getLogger(BasicAdapterServiceImpl.class);\n+\tprivate MBeanExporter mBeanManager = null;\n+\tprivate static Map<IAdapter, ObjectName> registeredAdapters = new HashMap<>();\n+\n+\t@Override\n+\tpublic void afterPropertiesSet() throws Exception {\n+\t\tif(mBeanManager == null) {\n+\t\t\tthrow new BeanCreationException(\"unable to load JmxMBeanManager\");\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void registerAdapter(IAdapter adapter) throws ConfigurationException {\n+\t\tsuper.registerAdapter(adapter);\n \n+\t\tlog.debug(\"Registering adapter [\" + adapter.getName() + \"] to the JMX server\");\n+\t\tsynchronized(registeredAdapters) {\n+\t\t\tObjectName name = mBeanManager.registerManagedResource(adapter);\n+\t\t\tregisteredAdapters.put(adapter, name);\n+\t\t}\n+\t\tlog.info(\"[\" + adapter.getName() + \"] registered to the JMX server\");\n \n+\t\tadapter.configure();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215967e397770313f0f210cada4637b6dea773f2"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1NDgyOA==", "bodyText": "Ja dat dacht ik ook, gaan nu een aantal tests door kapot", "url": "https://github.com/ibissource/iaf/pull/1063#discussion_r488754828", "createdAt": "2020-09-15T15:21:39Z", "author": {"login": "nielsm5"}, "path": "core/src/main/java/nl/nn/adapterframework/configuration/BasicAdapterServiceImpl.java", "diffHunk": "@@ -1,47 +1,80 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n package nl.nn.adapterframework.configuration;\n \n-import nl.nn.adapterframework.core.IAdapter;\n-import nl.nn.adapterframework.util.LogUtil;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.management.ObjectName;\n \n import org.apache.logging.log4j.Logger;\n+import org.springframework.beans.factory.BeanCreationException;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.jmx.export.MBeanExporter;\n+\n+import nl.nn.adapterframework.core.IAdapter;\n+import nl.nn.adapterframework.util.LogUtil;\n \n /**\n- * This implemention of {@link AdapterService} also registers the adapters to Jmx, and configures the registered Adapters.\n+ * This implementation of {@link AdapterService} also registers the adapters to a JMX server, and configures the registered Adapters.\n \n- * @author Michiel Meeuwissen\n+ * @author Niels Meijer\n  * @since 5.0.29\n  */\n-public class BasicAdapterServiceImpl extends AdapterServiceImpl {\n-\n-    private static final Logger LOG = LogUtil.getLogger(BasicAdapterServiceImpl.class);\n-\n-    @Override\n-    public void registerAdapter(IAdapter adapter) throws ConfigurationException {\n-        super.registerAdapter(adapter);\n-        try {\n-            // Throws javax.management.InstanceAlreadyExistsException when testing on\n-            // WebSphere 7. This code has probably never been enabled as previously it was\n-            // part of Configuration.java and was surrounded with \"if (isEnableJMX())\" with\n-            // enableJMX being false by default.\n-            LOG.debug(\"Registering adapter [\" + adapter.getName() + \"] to the JMX server\");\n-            JmxMbeanHelper.hookupAdapter(adapter);\n-            LOG.info(\"[\" + adapter.getName() + \"] registered to the JMX server\");\n-        } catch (Throwable t) {\n-            LOG.warn(t.getMessage());\n-        }\n-        adapter.configure();\n-    }\n-\n-    @Override\n-    public void unRegisterAdapter(IAdapter adapter) {\n-        super.unRegisterAdapter(adapter);\n-        try {\n-            JmxMbeanHelper.unhookAdapter(adapter);\n-        } catch (Throwable t) {\n-            LOG.warn(t.getMessage());\n-        }\n-    }\n+public class BasicAdapterServiceImpl extends AdapterServiceImpl implements ApplicationContextAware, InitializingBean {\n \n-}\n+\tprivate final Logger log = LogUtil.getLogger(BasicAdapterServiceImpl.class);\n+\tprivate MBeanExporter mBeanManager = null;\n+\tprivate static Map<IAdapter, ObjectName> registeredAdapters = new HashMap<>();\n+\n+\t@Override\n+\tpublic void afterPropertiesSet() throws Exception {\n+\t\tif(mBeanManager == null) {\n+\t\t\tthrow new BeanCreationException(\"unable to load JmxMBeanManager\");\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void registerAdapter(IAdapter adapter) throws ConfigurationException {\n+\t\tsuper.registerAdapter(adapter);\n \n+\t\tlog.debug(\"Registering adapter [\" + adapter.getName() + \"] to the JMX server\");\n+\t\tsynchronized(registeredAdapters) {\n+\t\t\tObjectName name = mBeanManager.registerManagedResource(adapter);\n+\t\t\tregisteredAdapters.put(adapter, name);\n+\t\t}\n+\t\tlog.info(\"[\" + adapter.getName() + \"] registered to the JMX server\");\n \n+\t\tadapter.configure();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY1NzAxNQ=="}, "originalCommit": {"oid": "215967e397770313f0f210cada4637b6dea773f2"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzUxNjYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/configuration/Configuration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoxNjo0OVrOHSBUtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzoxNjo0OVrOHSBUtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY1ODEwMg==", "bodyText": "Hier mag toch wel een stukje commentaar bij", "url": "https://github.com/ibissource/iaf/pull/1063#discussion_r488658102", "createdAt": "2020-09-15T13:16:49Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/configuration/Configuration.java", "diffHunk": "@@ -63,7 +63,7 @@\n     private final List<JobDef> scheduledJobs = new ArrayList<JobDef>();\n \n     private String name;\n-    private String version;\n+    private String version = Integer.toHexString(this.hashCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "215967e397770313f0f210cada4637b6dea773f2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Nzc1NjU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/nl/nn/adapterframework/configuration/BasicAdapterServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNjozNDo1N1rOHVCK0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNjozNDo1N1rOHVCK0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgxNzY4MQ==", "bodyText": "Laten we deze class JmxRegisteringAdapterService noemen, want dat is wat hij doet. Er is niks basics aan.", "url": "https://github.com/ibissource/iaf/pull/1063#discussion_r491817681", "createdAt": "2020-09-21T06:34:57Z", "author": {"login": "gvanbrakel"}, "path": "core/src/main/java/nl/nn/adapterframework/configuration/BasicAdapterServiceImpl.java", "diffHunk": "@@ -1,47 +1,77 @@\n+/*\n+   Copyright 2020 WeAreFrank!\n+\n+   Licensed under the Apache License, Version 2.0 (the \"License\");\n+   you may not use this file except in compliance with the License.\n+   You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+*/\n package nl.nn.adapterframework.configuration;\n \n-import nl.nn.adapterframework.core.IAdapter;\n-import nl.nn.adapterframework.util.LogUtil;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.management.ObjectName;\n \n import org.apache.logging.log4j.Logger;\n+import org.springframework.beans.factory.BeanCreationException;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationContextAware;\n+import org.springframework.jmx.export.MBeanExporter;\n+\n+import nl.nn.adapterframework.core.IAdapter;\n+import nl.nn.adapterframework.util.LogUtil;\n \n /**\n- * This implemention of {@link AdapterService} also registers the adapters to Jmx, and configures the registered Adapters.\n+ * This implementation of {@link AdapterService} registers the adapters to a JMX server.\n \n- * @author Michiel Meeuwissen\n- * @since 5.0.29\n+ * @author Niels Meijer\n  */\n-public class BasicAdapterServiceImpl extends AdapterServiceImpl {\n-\n-    private static final Logger LOG = LogUtil.getLogger(BasicAdapterServiceImpl.class);\n-\n-    @Override\n-    public void registerAdapter(IAdapter adapter) throws ConfigurationException {\n-        super.registerAdapter(adapter);\n-        try {\n-            // Throws javax.management.InstanceAlreadyExistsException when testing on\n-            // WebSphere 7. This code has probably never been enabled as previously it was\n-            // part of Configuration.java and was surrounded with \"if (isEnableJMX())\" with\n-            // enableJMX being false by default.\n-            LOG.debug(\"Registering adapter [\" + adapter.getName() + \"] to the JMX server\");\n-            JmxMbeanHelper.hookupAdapter(adapter);\n-            LOG.info(\"[\" + adapter.getName() + \"] registered to the JMX server\");\n-        } catch (Throwable t) {\n-            LOG.warn(t.getMessage());\n-        }\n-        adapter.configure();\n-    }\n-\n-    @Override\n-    public void unRegisterAdapter(IAdapter adapter) {\n-        super.unRegisterAdapter(adapter);\n-        try {\n-            JmxMbeanHelper.unhookAdapter(adapter);\n-        } catch (Throwable t) {\n-            LOG.warn(t.getMessage());\n-        }\n-    }\n+public class BasicAdapterServiceImpl extends AdapterServiceImpl implements ApplicationContextAware, InitializingBean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb2b6093db49cb6b129130d2af9804ed5c406732"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 676, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}