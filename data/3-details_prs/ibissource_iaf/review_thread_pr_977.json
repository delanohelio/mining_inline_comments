{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NDUzMDgw", "number": 977, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMToyNDoxN1rOEf8iVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTozNjoyOFrOEf8yXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTMzMTQyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/DateUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMToyNDoxN1rOHMiJoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMTozMDo1N1rOHbGIFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwNDQ4MA==", "bodyText": "is it dd-mm-yyyy or mm-dd-yyyy?\nPlease use a different day and month", "url": "https://github.com/ibissource/iaf/pull/977#discussion_r482904480", "createdAt": "2020-09-03T11:24:17Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/DateUtilsTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import java.util.Date;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * DateUtils Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class DateUtilsTest {\n+\n+\n+\t/**\n+\t * Method: format(Date date, String dateFormat)\n+\t */\n+\t@Test\n+\tpublic void testFormatForDateDateFormat() throws Exception {\n+\t\tDate d = new Date(1500000000);\n+\t\tString s = DateUtils.format(d, DateUtils.FORMAT_FULL_GENERIC);\n+\t\tassertEquals(\"1970-01-18 09:40:00.000\", s);\n+\n+\t}\n+\n+\t/**\n+\t * Method: parseToDate(String s, String dateFormat)\n+\t */\n+\t@Test\n+\tpublic void testParseToDate() throws Exception {\n+\t\tDate d = DateUtils.parseToDate(\"10-10-2013\", DateUtils.FORMAT_DATE);\n+\t\tassertEquals(\"Thu Oct 10 00:00:00 CEST 2013\", d.toString());\n+\t}\n+\n+\t/**\n+\t * Method: parseXmlDateTime(String s)\n+\t */\n+\t@Test\n+\tpublic void testParseXmlDateTime() throws Exception {\n+\t\tDate d = DateUtils.parseXmlDateTime(\"2013-10-10\");\n+\t\tassertEquals(\"Thu Oct 10 00:00:00 CEST 2013\", d.toString());\n+\t}\n+\n+\t/**\n+\t * Method: parseAnyDate(String dateInAnyFormat)\n+\t */\n+\t@Test\n+\tpublic void testParseAnyDate() throws Exception {\n+\t\tDate d = DateUtils.parseAnyDate(\"10-2013-10\");\n+\t\tassertEquals(\"Thu Oct 10 00:00:00 CEST 2013\", d.toString());\n+\n+\t}\n+\n+\t/**\n+\t * Method: formatOptimal(Date d)\n+\t */\n+\t@Test\n+\tpublic void testFormatOptimal() throws Exception {\n+\t\tDate d = new Date(1500000000);\n+\t\tString s = DateUtils.formatOptimal(d);\n+\t\tassertEquals(\"1970-01-18 09:40\", s);\n+\t}\n+\n+\t/**\n+\t * Method: nextHigherValue(Date d)\n+\t */\n+\t@Test\n+\tpublic void testNextHigherValue() throws Exception {\n+\t\tDate d = new Date(1500000000);\n+\t\tDate s = DateUtils.nextHigherValue(d);\n+\t\tassertEquals(\"Sun Jan 18 09:41:00 CET 1970\", s.toString());\n+\t}\n+\n+\t/**\n+\t * Method: convertDate(String from, String to, String value)\n+\t */\n+\t@Test\n+\tpublic void testConvertDate() throws Exception {\n+\t\tString s = DateUtils.convertDate(DateUtils.FORMAT_DATE, DateUtils.FORMAT_FULL_GENERIC, \"10-10-13\");\n+\t\tassertEquals(\"2013-10-10 00:00:00.000\", s);\n+\t}\n+\n+\t/**\n+\t * Method: changeDate(String date, int years, int months, int days)\n+\t */\n+\t@Test\n+\tpublic void testChangeDateForDateYearsMonthsDays() throws Exception {\n+\t\tString date = DateUtils.changeDate(\"2013-10-10\", 2, 3, 5);\n+\t\tassertEquals(\"2016-01-15\", date);\n+\t}\n+\n+\t/**\n+\t * Method: changeDate(String date, int years, int months, int days, String dateFormat)\n+\t */\n+\t@Test\n+\tpublic void testChangeDateForDateYearsMonthsDaysDateFormat() throws Exception {\n+\t\tString date = DateUtils.changeDate(\"10-10-13\", 2, 3, 5, DateUtils.FORMAT_DATE);\n+\t\tassertEquals(\"15-01-16\", date);\n+\t}\n+\n+\t/**\n+\t * Method: isSameDay(Date date1, Date date2)\n+\t */\n+\t@Test\n+\tpublic void testIsSameDay() throws Exception {\n+\t\tDate d1 = DateUtils.parseAnyDate(\"10-10-2013\");\n+\t\tDate d2 = DateUtils.parseAnyDate(\"2013-10-10\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08d34ea6f88ae20563379700c2ad3d416457af2a"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE3Mzk3NA==", "bodyText": "Done", "url": "https://github.com/ibissource/iaf/pull/977#discussion_r498173974", "createdAt": "2020-10-01T11:30:57Z", "author": {"login": "sinasen2000"}, "path": "core/src/test/java/nl/nn/adapterframework/util/DateUtilsTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import java.util.Date;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * DateUtils Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class DateUtilsTest {\n+\n+\n+\t/**\n+\t * Method: format(Date date, String dateFormat)\n+\t */\n+\t@Test\n+\tpublic void testFormatForDateDateFormat() throws Exception {\n+\t\tDate d = new Date(1500000000);\n+\t\tString s = DateUtils.format(d, DateUtils.FORMAT_FULL_GENERIC);\n+\t\tassertEquals(\"1970-01-18 09:40:00.000\", s);\n+\n+\t}\n+\n+\t/**\n+\t * Method: parseToDate(String s, String dateFormat)\n+\t */\n+\t@Test\n+\tpublic void testParseToDate() throws Exception {\n+\t\tDate d = DateUtils.parseToDate(\"10-10-2013\", DateUtils.FORMAT_DATE);\n+\t\tassertEquals(\"Thu Oct 10 00:00:00 CEST 2013\", d.toString());\n+\t}\n+\n+\t/**\n+\t * Method: parseXmlDateTime(String s)\n+\t */\n+\t@Test\n+\tpublic void testParseXmlDateTime() throws Exception {\n+\t\tDate d = DateUtils.parseXmlDateTime(\"2013-10-10\");\n+\t\tassertEquals(\"Thu Oct 10 00:00:00 CEST 2013\", d.toString());\n+\t}\n+\n+\t/**\n+\t * Method: parseAnyDate(String dateInAnyFormat)\n+\t */\n+\t@Test\n+\tpublic void testParseAnyDate() throws Exception {\n+\t\tDate d = DateUtils.parseAnyDate(\"10-2013-10\");\n+\t\tassertEquals(\"Thu Oct 10 00:00:00 CEST 2013\", d.toString());\n+\n+\t}\n+\n+\t/**\n+\t * Method: formatOptimal(Date d)\n+\t */\n+\t@Test\n+\tpublic void testFormatOptimal() throws Exception {\n+\t\tDate d = new Date(1500000000);\n+\t\tString s = DateUtils.formatOptimal(d);\n+\t\tassertEquals(\"1970-01-18 09:40\", s);\n+\t}\n+\n+\t/**\n+\t * Method: nextHigherValue(Date d)\n+\t */\n+\t@Test\n+\tpublic void testNextHigherValue() throws Exception {\n+\t\tDate d = new Date(1500000000);\n+\t\tDate s = DateUtils.nextHigherValue(d);\n+\t\tassertEquals(\"Sun Jan 18 09:41:00 CET 1970\", s.toString());\n+\t}\n+\n+\t/**\n+\t * Method: convertDate(String from, String to, String value)\n+\t */\n+\t@Test\n+\tpublic void testConvertDate() throws Exception {\n+\t\tString s = DateUtils.convertDate(DateUtils.FORMAT_DATE, DateUtils.FORMAT_FULL_GENERIC, \"10-10-13\");\n+\t\tassertEquals(\"2013-10-10 00:00:00.000\", s);\n+\t}\n+\n+\t/**\n+\t * Method: changeDate(String date, int years, int months, int days)\n+\t */\n+\t@Test\n+\tpublic void testChangeDateForDateYearsMonthsDays() throws Exception {\n+\t\tString date = DateUtils.changeDate(\"2013-10-10\", 2, 3, 5);\n+\t\tassertEquals(\"2016-01-15\", date);\n+\t}\n+\n+\t/**\n+\t * Method: changeDate(String date, int years, int months, int days, String dateFormat)\n+\t */\n+\t@Test\n+\tpublic void testChangeDateForDateYearsMonthsDaysDateFormat() throws Exception {\n+\t\tString date = DateUtils.changeDate(\"10-10-13\", 2, 3, 5, DateUtils.FORMAT_DATE);\n+\t\tassertEquals(\"15-01-16\", date);\n+\t}\n+\n+\t/**\n+\t * Method: isSameDay(Date date1, Date date2)\n+\t */\n+\t@Test\n+\tpublic void testIsSameDay() throws Exception {\n+\t\tDate d1 = DateUtils.parseAnyDate(\"10-10-2013\");\n+\t\tDate d2 = DateUtils.parseAnyDate(\"2013-10-10\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwNDQ4MA=="}, "originalCommit": {"oid": "08d34ea6f88ae20563379700c2ad3d416457af2a"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTMzOTIwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/DateUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMToyNjo0NVrOHMiOUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMToyNjo0NVrOHMiOUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwNTY4MA==", "bodyText": "What's the dateformat here? You're actually testing the CalendarParser class here?", "url": "https://github.com/ibissource/iaf/pull/977#discussion_r482905680", "createdAt": "2020-09-03T11:26:45Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/DateUtilsTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import java.util.Date;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * DateUtils Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class DateUtilsTest {\n+\n+\n+\t/**\n+\t * Method: format(Date date, String dateFormat)\n+\t */\n+\t@Test\n+\tpublic void testFormatForDateDateFormat() throws Exception {\n+\t\tDate d = new Date(1500000000);\n+\t\tString s = DateUtils.format(d, DateUtils.FORMAT_FULL_GENERIC);\n+\t\tassertEquals(\"1970-01-18 09:40:00.000\", s);\n+\n+\t}\n+\n+\t/**\n+\t * Method: parseToDate(String s, String dateFormat)\n+\t */\n+\t@Test\n+\tpublic void testParseToDate() throws Exception {\n+\t\tDate d = DateUtils.parseToDate(\"10-10-2013\", DateUtils.FORMAT_DATE);\n+\t\tassertEquals(\"Thu Oct 10 00:00:00 CEST 2013\", d.toString());\n+\t}\n+\n+\t/**\n+\t * Method: parseXmlDateTime(String s)\n+\t */\n+\t@Test\n+\tpublic void testParseXmlDateTime() throws Exception {\n+\t\tDate d = DateUtils.parseXmlDateTime(\"2013-10-10\");\n+\t\tassertEquals(\"Thu Oct 10 00:00:00 CEST 2013\", d.toString());\n+\t}\n+\n+\t/**\n+\t * Method: parseAnyDate(String dateInAnyFormat)\n+\t */\n+\t@Test\n+\tpublic void testParseAnyDate() throws Exception {\n+\t\tDate d = DateUtils.parseAnyDate(\"10-2013-10\");\n+\t\tassertEquals(\"Thu Oct 10 00:00:00 CEST 2013\", d.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08d34ea6f88ae20563379700c2ad3d416457af2a"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTM3MjQ3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/nl/nn/adapterframework/util/DateUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTozNjoyOFrOHMih8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTozNjoyOFrOHMih8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkxMDcwNw==", "bodyText": "FORMAT_DATE is dd-MM-yy yet youre using yyyy maybe add more tests? does it ignore the last 2 yy?", "url": "https://github.com/ibissource/iaf/pull/977#discussion_r482910707", "createdAt": "2020-09-03T11:36:28Z", "author": {"login": "nielsm5"}, "path": "core/src/test/java/nl/nn/adapterframework/util/DateUtilsTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package nl.nn.adapterframework.util;\n+\n+import org.junit.Test;\n+\n+import java.util.Date;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * DateUtils Tester.\n+ *\n+ * @author <Sina Sen>\n+ */\n+public class DateUtilsTest {\n+\n+\n+\t/**\n+\t * Method: format(Date date, String dateFormat)\n+\t */\n+\t@Test\n+\tpublic void testFormatForDateDateFormat() throws Exception {\n+\t\tDate d = new Date(1500000000);\n+\t\tString s = DateUtils.format(d, DateUtils.FORMAT_FULL_GENERIC);\n+\t\tassertEquals(\"1970-01-18 09:40:00.000\", s);\n+\n+\t}\n+\n+\t/**\n+\t * Method: parseToDate(String s, String dateFormat)\n+\t */\n+\t@Test\n+\tpublic void testParseToDate() throws Exception {\n+\t\tDate d = DateUtils.parseToDate(\"10-10-2013\", DateUtils.FORMAT_DATE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08d34ea6f88ae20563379700c2ad3d416457af2a"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 308, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}