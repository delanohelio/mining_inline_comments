{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNTM4MDI5", "number": 1188, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo0NjowNVrODcyVeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo0NjoyOVrODcyV4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTExNDE3OnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo0NjowNVrOFlBENA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzozOTowM1rOFlnUdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM1OTA5Mg==", "bodyText": "This line changed", "url": "https://github.com/firebase/firebase-android-sdk/pull/1188#discussion_r374359092", "createdAt": "2020-02-03T21:46:05Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java", "diffHunk": "@@ -461,44 +461,49 @@ public void queriesCannotBeSortedByAnUncommittedServerTimestamp() {\n     TaskCompletionSource<Void> offlineCallbackDone = new TaskCompletionSource<>();\n     TaskCompletionSource<Void> onlineCallbackDone = new TaskCompletionSource<>();\n \n-    collection.addSnapshotListener(\n-        (snapshot, error) -> {\n-          assertNotNull(snapshot);\n-\n-          // Skip the initial empty snapshot.\n-          if (snapshot.isEmpty()) return;\n-\n-          assertThat(snapshot.getDocuments()).hasSize(1);\n-          DocumentSnapshot docSnap = snapshot.getDocuments().get(0);\n-\n-          if (snapshot.getMetadata().hasPendingWrites()) {\n-            // Offline snapshot. Since the server timestamp is uncommitted, we shouldn't be able to\n-            // query by it.\n-            assertThrows(\n-                IllegalArgumentException.class,\n-                () ->\n-                    collection\n-                        .orderBy(\"timestamp\")\n-                        .endAt(docSnap)\n-                        .addSnapshotListener((snapshot2, error2) -> {}));\n-            offlineCallbackDone.setResult(null);\n-          } else {\n-            // Online snapshot. Since the server timestamp is committed, we should be able to query\n-            // by it.\n-            collection\n-                .orderBy(\"timestamp\")\n-                .endAt(docSnap)\n-                .addSnapshotListener((snapshot2, error2) -> {});\n-            onlineCallbackDone.setResult(null);\n-          }\n-        });\n+    ListenerRegistration listenerRegistration =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ae01581b85432b6bc6080f2313f1cfbe0a9cf8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk3Njc5OA==", "bodyText": "FYI: You can enable a whitespace insensitive diff in the github UI which highlights these differences essentially just like your comments. You could just advise the reviewer enable that mode with less effort.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1188#discussion_r374976798", "createdAt": "2020-02-04T23:11:46Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java", "diffHunk": "@@ -461,44 +461,49 @@ public void queriesCannotBeSortedByAnUncommittedServerTimestamp() {\n     TaskCompletionSource<Void> offlineCallbackDone = new TaskCompletionSource<>();\n     TaskCompletionSource<Void> onlineCallbackDone = new TaskCompletionSource<>();\n \n-    collection.addSnapshotListener(\n-        (snapshot, error) -> {\n-          assertNotNull(snapshot);\n-\n-          // Skip the initial empty snapshot.\n-          if (snapshot.isEmpty()) return;\n-\n-          assertThat(snapshot.getDocuments()).hasSize(1);\n-          DocumentSnapshot docSnap = snapshot.getDocuments().get(0);\n-\n-          if (snapshot.getMetadata().hasPendingWrites()) {\n-            // Offline snapshot. Since the server timestamp is uncommitted, we shouldn't be able to\n-            // query by it.\n-            assertThrows(\n-                IllegalArgumentException.class,\n-                () ->\n-                    collection\n-                        .orderBy(\"timestamp\")\n-                        .endAt(docSnap)\n-                        .addSnapshotListener((snapshot2, error2) -> {}));\n-            offlineCallbackDone.setResult(null);\n-          } else {\n-            // Online snapshot. Since the server timestamp is committed, we should be able to query\n-            // by it.\n-            collection\n-                .orderBy(\"timestamp\")\n-                .endAt(docSnap)\n-                .addSnapshotListener((snapshot2, error2) -> {});\n-            onlineCallbackDone.setResult(null);\n-          }\n-        });\n+    ListenerRegistration listenerRegistration =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM1OTA5Mg=="}, "originalCommit": {"oid": "c7ae01581b85432b6bc6080f2313f1cfbe0a9cf8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4NTg0Nw==", "bodyText": "Whooaa. I wish I had known this about two years ago. Thanks!", "url": "https://github.com/firebase/firebase-android-sdk/pull/1188#discussion_r374985847", "createdAt": "2020-02-04T23:39:03Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java", "diffHunk": "@@ -461,44 +461,49 @@ public void queriesCannotBeSortedByAnUncommittedServerTimestamp() {\n     TaskCompletionSource<Void> offlineCallbackDone = new TaskCompletionSource<>();\n     TaskCompletionSource<Void> onlineCallbackDone = new TaskCompletionSource<>();\n \n-    collection.addSnapshotListener(\n-        (snapshot, error) -> {\n-          assertNotNull(snapshot);\n-\n-          // Skip the initial empty snapshot.\n-          if (snapshot.isEmpty()) return;\n-\n-          assertThat(snapshot.getDocuments()).hasSize(1);\n-          DocumentSnapshot docSnap = snapshot.getDocuments().get(0);\n-\n-          if (snapshot.getMetadata().hasPendingWrites()) {\n-            // Offline snapshot. Since the server timestamp is uncommitted, we shouldn't be able to\n-            // query by it.\n-            assertThrows(\n-                IllegalArgumentException.class,\n-                () ->\n-                    collection\n-                        .orderBy(\"timestamp\")\n-                        .endAt(docSnap)\n-                        .addSnapshotListener((snapshot2, error2) -> {}));\n-            offlineCallbackDone.setResult(null);\n-          } else {\n-            // Online snapshot. Since the server timestamp is committed, we should be able to query\n-            // by it.\n-            collection\n-                .orderBy(\"timestamp\")\n-                .endAt(docSnap)\n-                .addSnapshotListener((snapshot2, error2) -> {});\n-            onlineCallbackDone.setResult(null);\n-          }\n-        });\n+    ListenerRegistration listenerRegistration =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM1OTA5Mg=="}, "originalCommit": {"oid": "c7ae01581b85432b6bc6080f2313f1cfbe0a9cf8"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTExNDY3OnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo0NjoxNlrOFlBEhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo0NjoxNlrOFlBEhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM1OTE3NQ==", "bodyText": "These tree lines changed", "url": "https://github.com/firebase/firebase-android-sdk/pull/1188#discussion_r374359175", "createdAt": "2020-02-03T21:46:16Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java", "diffHunk": "@@ -461,44 +461,49 @@ public void queriesCannotBeSortedByAnUncommittedServerTimestamp() {\n     TaskCompletionSource<Void> offlineCallbackDone = new TaskCompletionSource<>();\n     TaskCompletionSource<Void> onlineCallbackDone = new TaskCompletionSource<>();\n \n-    collection.addSnapshotListener(\n-        (snapshot, error) -> {\n-          assertNotNull(snapshot);\n-\n-          // Skip the initial empty snapshot.\n-          if (snapshot.isEmpty()) return;\n-\n-          assertThat(snapshot.getDocuments()).hasSize(1);\n-          DocumentSnapshot docSnap = snapshot.getDocuments().get(0);\n-\n-          if (snapshot.getMetadata().hasPendingWrites()) {\n-            // Offline snapshot. Since the server timestamp is uncommitted, we shouldn't be able to\n-            // query by it.\n-            assertThrows(\n-                IllegalArgumentException.class,\n-                () ->\n-                    collection\n-                        .orderBy(\"timestamp\")\n-                        .endAt(docSnap)\n-                        .addSnapshotListener((snapshot2, error2) -> {}));\n-            offlineCallbackDone.setResult(null);\n-          } else {\n-            // Online snapshot. Since the server timestamp is committed, we should be able to query\n-            // by it.\n-            collection\n-                .orderBy(\"timestamp\")\n-                .endAt(docSnap)\n-                .addSnapshotListener((snapshot2, error2) -> {});\n-            onlineCallbackDone.setResult(null);\n-          }\n-        });\n+    ListenerRegistration listenerRegistration =\n+        collection.addSnapshotListener(\n+            (snapshot, error) -> {\n+              assertNotNull(snapshot);\n+\n+              // Skip the initial empty snapshot.\n+              if (snapshot.isEmpty()) return;\n+\n+              assertThat(snapshot.getDocuments()).hasSize(1);\n+              DocumentSnapshot docSnap = snapshot.getDocuments().get(0);\n+\n+              if (snapshot.getMetadata().hasPendingWrites()) {\n+                // Offline snapshot. Since the server timestamp is uncommitted, we shouldn't be able\n+                // to query by it.\n+                assertThrows(\n+                    IllegalArgumentException.class,\n+                    () ->\n+                        collection\n+                            .orderBy(\"timestamp\")\n+                            .endAt(docSnap)\n+                            .addSnapshotListener((snapshot2, error2) -> {}));\n+                // Use `trySetResult` since the callbacks fires twice if the WatchStream\n+                // acknowledges the Write before the WriteStream.\n+                offlineCallbackDone.trySetResult(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ae01581b85432b6bc6080f2313f1cfbe0a9cf8"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTExNDkyOnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo0NjoyM1rOFlBErw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo0NjoyM1rOFlBErw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM1OTIxNQ==", "bodyText": "This line changed", "url": "https://github.com/firebase/firebase-android-sdk/pull/1188#discussion_r374359215", "createdAt": "2020-02-03T21:46:23Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java", "diffHunk": "@@ -461,44 +461,49 @@ public void queriesCannotBeSortedByAnUncommittedServerTimestamp() {\n     TaskCompletionSource<Void> offlineCallbackDone = new TaskCompletionSource<>();\n     TaskCompletionSource<Void> onlineCallbackDone = new TaskCompletionSource<>();\n \n-    collection.addSnapshotListener(\n-        (snapshot, error) -> {\n-          assertNotNull(snapshot);\n-\n-          // Skip the initial empty snapshot.\n-          if (snapshot.isEmpty()) return;\n-\n-          assertThat(snapshot.getDocuments()).hasSize(1);\n-          DocumentSnapshot docSnap = snapshot.getDocuments().get(0);\n-\n-          if (snapshot.getMetadata().hasPendingWrites()) {\n-            // Offline snapshot. Since the server timestamp is uncommitted, we shouldn't be able to\n-            // query by it.\n-            assertThrows(\n-                IllegalArgumentException.class,\n-                () ->\n-                    collection\n-                        .orderBy(\"timestamp\")\n-                        .endAt(docSnap)\n-                        .addSnapshotListener((snapshot2, error2) -> {}));\n-            offlineCallbackDone.setResult(null);\n-          } else {\n-            // Online snapshot. Since the server timestamp is committed, we should be able to query\n-            // by it.\n-            collection\n-                .orderBy(\"timestamp\")\n-                .endAt(docSnap)\n-                .addSnapshotListener((snapshot2, error2) -> {});\n-            onlineCallbackDone.setResult(null);\n-          }\n-        });\n+    ListenerRegistration listenerRegistration =\n+        collection.addSnapshotListener(\n+            (snapshot, error) -> {\n+              assertNotNull(snapshot);\n+\n+              // Skip the initial empty snapshot.\n+              if (snapshot.isEmpty()) return;\n+\n+              assertThat(snapshot.getDocuments()).hasSize(1);\n+              DocumentSnapshot docSnap = snapshot.getDocuments().get(0);\n+\n+              if (snapshot.getMetadata().hasPendingWrites()) {\n+                // Offline snapshot. Since the server timestamp is uncommitted, we shouldn't be able\n+                // to query by it.\n+                assertThrows(\n+                    IllegalArgumentException.class,\n+                    () ->\n+                        collection\n+                            .orderBy(\"timestamp\")\n+                            .endAt(docSnap)\n+                            .addSnapshotListener((snapshot2, error2) -> {}));\n+                // Use `trySetResult` since the callbacks fires twice if the WatchStream\n+                // acknowledges the Write before the WriteStream.\n+                offlineCallbackDone.trySetResult(null);\n+              } else {\n+                // Online snapshot. Since the server timestamp is committed, we should be able to\n+                // query by it.\n+                collection\n+                    .orderBy(\"timestamp\")\n+                    .endAt(docSnap)\n+                    .addSnapshotListener((snapshot2, error2) -> {});\n+                onlineCallbackDone.trySetResult(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ae01581b85432b6bc6080f2313f1cfbe0a9cf8"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTExNTIxOnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo0NjoyOVrOFlBE3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMTo0NjoyOVrOFlBE3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM1OTI2Mg==", "bodyText": "This is new", "url": "https://github.com/firebase/firebase-android-sdk/pull/1188#discussion_r374359262", "createdAt": "2020-02-03T21:46:29Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java", "diffHunk": "@@ -461,44 +461,49 @@ public void queriesCannotBeSortedByAnUncommittedServerTimestamp() {\n     TaskCompletionSource<Void> offlineCallbackDone = new TaskCompletionSource<>();\n     TaskCompletionSource<Void> onlineCallbackDone = new TaskCompletionSource<>();\n \n-    collection.addSnapshotListener(\n-        (snapshot, error) -> {\n-          assertNotNull(snapshot);\n-\n-          // Skip the initial empty snapshot.\n-          if (snapshot.isEmpty()) return;\n-\n-          assertThat(snapshot.getDocuments()).hasSize(1);\n-          DocumentSnapshot docSnap = snapshot.getDocuments().get(0);\n-\n-          if (snapshot.getMetadata().hasPendingWrites()) {\n-            // Offline snapshot. Since the server timestamp is uncommitted, we shouldn't be able to\n-            // query by it.\n-            assertThrows(\n-                IllegalArgumentException.class,\n-                () ->\n-                    collection\n-                        .orderBy(\"timestamp\")\n-                        .endAt(docSnap)\n-                        .addSnapshotListener((snapshot2, error2) -> {}));\n-            offlineCallbackDone.setResult(null);\n-          } else {\n-            // Online snapshot. Since the server timestamp is committed, we should be able to query\n-            // by it.\n-            collection\n-                .orderBy(\"timestamp\")\n-                .endAt(docSnap)\n-                .addSnapshotListener((snapshot2, error2) -> {});\n-            onlineCallbackDone.setResult(null);\n-          }\n-        });\n+    ListenerRegistration listenerRegistration =\n+        collection.addSnapshotListener(\n+            (snapshot, error) -> {\n+              assertNotNull(snapshot);\n+\n+              // Skip the initial empty snapshot.\n+              if (snapshot.isEmpty()) return;\n+\n+              assertThat(snapshot.getDocuments()).hasSize(1);\n+              DocumentSnapshot docSnap = snapshot.getDocuments().get(0);\n+\n+              if (snapshot.getMetadata().hasPendingWrites()) {\n+                // Offline snapshot. Since the server timestamp is uncommitted, we shouldn't be able\n+                // to query by it.\n+                assertThrows(\n+                    IllegalArgumentException.class,\n+                    () ->\n+                        collection\n+                            .orderBy(\"timestamp\")\n+                            .endAt(docSnap)\n+                            .addSnapshotListener((snapshot2, error2) -> {}));\n+                // Use `trySetResult` since the callbacks fires twice if the WatchStream\n+                // acknowledges the Write before the WriteStream.\n+                offlineCallbackDone.trySetResult(null);\n+              } else {\n+                // Online snapshot. Since the server timestamp is committed, we should be able to\n+                // query by it.\n+                collection\n+                    .orderBy(\"timestamp\")\n+                    .endAt(docSnap)\n+                    .addSnapshotListener((snapshot2, error2) -> {});\n+                onlineCallbackDone.trySetResult(null);\n+              }\n+            });\n \n     DocumentReference document = collection.document();\n     document.set(map(\"timestamp\", FieldValue.serverTimestamp()));\n     waitFor(offlineCallbackDone.getTask());\n \n     waitFor(collection.firestore.getClient().enableNetwork());\n     waitFor(onlineCallbackDone.getTask());\n+\n+    listenerRegistration.remove();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ae01581b85432b6bc6080f2313f1cfbe0a9cf8"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 974, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}