{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMjc1NTA3", "number": 1120, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOToyOTo1NlrODX9pWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTo0Mjo1OFrODX94dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDUzODQ4OnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/AbtIntegrationHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOToyOTo1NlrOFdjPgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDo0NTowNVrOFdlP1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMDQzNQ==", "bodyText": "Lets add some docs on what this method does", "url": "https://github.com/firebase/firebase-android-sdk/pull/1120#discussion_r366530435", "createdAt": "2020-01-14T19:29:56Z", "author": {"login": "prakhar1989"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/AbtIntegrationHelper.java", "diffHunk": "@@ -0,0 +1,57 @@\n+// Copyright 2019 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.inappmessaging.internal;\n+\n+import com.google.firebase.abt.AbtException;\n+import com.google.firebase.abt.AbtExperimentInfo;\n+import com.google.firebase.abt.FirebaseABTesting;\n+import com.google.internal.firebase.inappmessaging.v1.CampaignProto;\n+import com.google.internal.firebase.inappmessaging.v1.sdkserving.FetchEligibleCampaignsResponse;\n+import java.util.ArrayList;\n+import javax.inject.Inject;\n+\n+/** @hide */\n+public class AbtIntegrationHelper {\n+  private static FirebaseABTesting abTesting;\n+\n+  @Inject\n+  public AbtIntegrationHelper(FirebaseABTesting abTesting) {\n+    this.abTesting = abTesting;\n+  }\n+\n+  public void updateRunningExperiments(FetchEligibleCampaignsResponse response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d380a362a472338ffc0ede835be86403f0794da"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2MzI4NQ==", "bodyText": "done", "url": "https://github.com/firebase/firebase-android-sdk/pull/1120#discussion_r366563285", "createdAt": "2020-01-14T20:45:05Z", "author": {"login": "JasonAHeron"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/AbtIntegrationHelper.java", "diffHunk": "@@ -0,0 +1,57 @@\n+// Copyright 2019 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.inappmessaging.internal;\n+\n+import com.google.firebase.abt.AbtException;\n+import com.google.firebase.abt.AbtExperimentInfo;\n+import com.google.firebase.abt.FirebaseABTesting;\n+import com.google.internal.firebase.inappmessaging.v1.CampaignProto;\n+import com.google.internal.firebase.inappmessaging.v1.sdkserving.FetchEligibleCampaignsResponse;\n+import java.util.ArrayList;\n+import javax.inject.Inject;\n+\n+/** @hide */\n+public class AbtIntegrationHelper {\n+  private static FirebaseABTesting abTesting;\n+\n+  @Inject\n+  public AbtIntegrationHelper(FirebaseABTesting abTesting) {\n+    this.abTesting = abTesting;\n+  }\n+\n+  public void updateRunningExperiments(FetchEligibleCampaignsResponse response) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMDQzNQ=="}, "originalCommit": {"oid": "1d380a362a472338ffc0ede835be86403f0794da"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDU0NDgxOnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/InAppMessageStreamManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozMjowN1rOFdjTlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTo1ODozMFrOFdkC1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMTQ3OA==", "bodyText": "Have we validated that this actually mimics what the user sets in the console for the expt?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1120#discussion_r366531478", "createdAt": "2020-01-14T19:32:07Z", "author": {"login": "prakhar1989"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/InAppMessageStreamManager.java", "diffHunk": "@@ -106,9 +108,19 @@ private static boolean hasAnalyticsTrigger(TriggeringCondition tc, String event)\n     return tc.getEvent().getName().equals(event);\n   }\n \n-  private static boolean isActive(Clock clock, VanillaCampaignPayload vanillaPayload) {\n-    long campaignStartTime = vanillaPayload.getCampaignStartTimeMillis();\n-    long campaignEndTime = vanillaPayload.getCampaignEndTimeMillis();\n+  private static boolean isActive(Clock clock, ThickContent content) {\n+    long campaignStartTime;\n+    long campaignEndTime;\n+    if (content.getPayloadCase().equals(ThickContent.PayloadCase.VANILLA_PAYLOAD)) {\n+      campaignStartTime = content.getVanillaPayload().getCampaignStartTimeMillis();\n+      campaignEndTime = content.getVanillaPayload().getCampaignEndTimeMillis();\n+    } else {\n+      campaignStartTime =\n+          content.getExperimentalPayload().getExperimentPayload().getExperimentStartTimeMillis();\n+      campaignEndTime =\n+          campaignStartTime\n+              + content.getExperimentalPayload().getExperimentPayload().getTimeToLiveMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d380a362a472338ffc0ede835be86403f0794da"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0MzU3Mg==", "bodyText": "Right now this does not, in the future we need to make a backend change to sync this. b/147681213", "url": "https://github.com/firebase/firebase-android-sdk/pull/1120#discussion_r366543572", "createdAt": "2020-01-14T19:58:30Z", "author": {"login": "JasonAHeron"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/InAppMessageStreamManager.java", "diffHunk": "@@ -106,9 +108,19 @@ private static boolean hasAnalyticsTrigger(TriggeringCondition tc, String event)\n     return tc.getEvent().getName().equals(event);\n   }\n \n-  private static boolean isActive(Clock clock, VanillaCampaignPayload vanillaPayload) {\n-    long campaignStartTime = vanillaPayload.getCampaignStartTimeMillis();\n-    long campaignEndTime = vanillaPayload.getCampaignEndTimeMillis();\n+  private static boolean isActive(Clock clock, ThickContent content) {\n+    long campaignStartTime;\n+    long campaignEndTime;\n+    if (content.getPayloadCase().equals(ThickContent.PayloadCase.VANILLA_PAYLOAD)) {\n+      campaignStartTime = content.getVanillaPayload().getCampaignStartTimeMillis();\n+      campaignEndTime = content.getVanillaPayload().getCampaignEndTimeMillis();\n+    } else {\n+      campaignStartTime =\n+          content.getExperimentalPayload().getExperimentPayload().getExperimentStartTimeMillis();\n+      campaignEndTime =\n+          campaignStartTime\n+              + content.getExperimentalPayload().getExperimentPayload().getTimeToLiveMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMTQ3OA=="}, "originalCommit": {"oid": "1d380a362a472338ffc0ede835be86403f0794da"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDU1MjM2OnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/injection/modules/AbTestingModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTozNDo1MlrOFdjYdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTo1OTo1OFrOFdkFeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMjcyNw==", "bodyText": "Module", "url": "https://github.com/firebase/firebase-android-sdk/pull/1120#discussion_r366532727", "createdAt": "2020-01-14T19:34:52Z", "author": {"login": "prakhar1989"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/injection/modules/AbTestingModule.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright 2019 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.inappmessaging.internal.injection.modules;\n+\n+import com.google.firebase.abt.FirebaseABTesting;\n+import com.google.firebase.inappmessaging.internal.AbtIntegrationHelper;\n+import dagger.Module;\n+import dagger.Provides;\n+\n+/**\n+ * Provider for ABTesting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d380a362a472338ffc0ede835be86403f0794da"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0NDI0OQ==", "bodyText": "done", "url": "https://github.com/firebase/firebase-android-sdk/pull/1120#discussion_r366544249", "createdAt": "2020-01-14T19:59:58Z", "author": {"login": "JasonAHeron"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/injection/modules/AbTestingModule.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright 2019 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.inappmessaging.internal.injection.modules;\n+\n+import com.google.firebase.abt.FirebaseABTesting;\n+import com.google.firebase.inappmessaging.internal.AbtIntegrationHelper;\n+import dagger.Module;\n+import dagger.Provides;\n+\n+/**\n+ * Provider for ABTesting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMjcyNw=="}, "originalCommit": {"oid": "1d380a362a472338ffc0ede835be86403f0794da"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDU3NzE2OnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/test/java/com/google/firebase/inappmessaging/internal/InAppMessageStreamManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTo0Mjo1OFrOFdjneg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOTo1ODo1NlrOFdkDqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzNjU3MA==", "bodyText": "bug?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1120#discussion_r366536570", "createdAt": "2020-01-14T19:42:58Z", "author": {"login": "prakhar1989"}, "path": "firebase-inappmessaging/src/test/java/com/google/firebase/inappmessaging/internal/InAppMessageStreamManagerTest.java", "diffHunk": "@@ -259,15 +285,43 @@ public void stream_onExpiredCampaign_doesNotTrigger() {\n   }\n \n   @Test\n-  public void stream_onNonVanillaCampaigns_doesNotTrigger() {\n-    String unrelatedAnalyticsEvent = \"some_other_event\";\n-    when(mockApiClient.getFiams(CAMPAIGN_IMPRESSIONS)).thenReturn(campaignsResponse);\n+  public void stream_onExpiredExperiment_doesNotTrigger() {\n+    ThickContent t =\n+        ThickContent.newBuilder(thickContent)\n+            .clearContent()\n+            .setExperimentalPayload(\n+                CampaignProto.ExperimentalCampaignPayload.newBuilder()\n+                    .setExperimentPayload(\n+                        FirebaseAbt.ExperimentPayload.newBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d380a362a472338ffc0ede835be86403f0794da"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0Mzc4NA==", "bodyText": "fixed!", "url": "https://github.com/firebase/firebase-android-sdk/pull/1120#discussion_r366543784", "createdAt": "2020-01-14T19:58:56Z", "author": {"login": "JasonAHeron"}, "path": "firebase-inappmessaging/src/test/java/com/google/firebase/inappmessaging/internal/InAppMessageStreamManagerTest.java", "diffHunk": "@@ -259,15 +285,43 @@ public void stream_onExpiredCampaign_doesNotTrigger() {\n   }\n \n   @Test\n-  public void stream_onNonVanillaCampaigns_doesNotTrigger() {\n-    String unrelatedAnalyticsEvent = \"some_other_event\";\n-    when(mockApiClient.getFiams(CAMPAIGN_IMPRESSIONS)).thenReturn(campaignsResponse);\n+  public void stream_onExpiredExperiment_doesNotTrigger() {\n+    ThickContent t =\n+        ThickContent.newBuilder(thickContent)\n+            .clearContent()\n+            .setExperimentalPayload(\n+                CampaignProto.ExperimentalCampaignPayload.newBuilder()\n+                    .setExperimentPayload(\n+                        FirebaseAbt.ExperimentPayload.newBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzNjU3MA=="}, "originalCommit": {"oid": "1d380a362a472338ffc0ede835be86403f0794da"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 917, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}