{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3OTA0NTM0", "number": 2038, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDo1OTo0NFrOErONVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDo1OTo0NFrOErONVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzU3MDEyOnYy", "diffSide": "RIGHT", "path": "firebase-components/src/main/java/com/google/firebase/components/LazySet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDo1OTo0NFrOHd3uOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjowNzoxN1rOHd61KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA4MzcwNw==", "bodyText": "shouldn't this be Provider<LazySet<?>> ?", "url": "https://github.com/firebase/firebase-android-sdk/pull/2038#discussion_r501083707", "createdAt": "2020-10-07T14:59:44Z", "author": {"login": "rlazo"}, "path": "firebase-components/src/main/java/com/google/firebase/components/LazySet.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.components;\n+\n+import com.google.firebase.inject.Provider;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Lazy mutable thread-safe {@link Provider} for {@link Set}s.\n+ *\n+ * <p>The actual set is materialized only when first requested via {@link #get()}.\n+ *\n+ * <p>As new values are added to the set via {@link #add(Provider)}, the underlying set is updated\n+ * with the new value.\n+ */\n+class LazySet<T> implements Provider<Set<T>> {\n+\n+  private volatile Set<Provider<T>> providers;\n+  private volatile Set<T> actualSet = null;\n+\n+  LazySet(Collection<Provider<T>> providers) {\n+    this.providers = Collections.newSetFromMap(new ConcurrentHashMap<>());\n+    this.providers.addAll(providers);\n+  }\n+\n+  static Provider<Set<?>> fromCollection(Collection<Provider<?>> providers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e0dac20b22cca439aa182df8d37c1c9888ae83c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzNDYzMw==", "bodyText": "No because LazySet<T> is a Provider<Set<T>> and does not implement Set<T> itself", "url": "https://github.com/firebase/firebase-android-sdk/pull/2038#discussion_r501134633", "createdAt": "2020-10-07T16:07:17Z", "author": {"login": "vkryachko"}, "path": "firebase-components/src/main/java/com/google/firebase/components/LazySet.java", "diffHunk": "@@ -0,0 +1,80 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.components;\n+\n+import com.google.firebase.inject.Provider;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Lazy mutable thread-safe {@link Provider} for {@link Set}s.\n+ *\n+ * <p>The actual set is materialized only when first requested via {@link #get()}.\n+ *\n+ * <p>As new values are added to the set via {@link #add(Provider)}, the underlying set is updated\n+ * with the new value.\n+ */\n+class LazySet<T> implements Provider<Set<T>> {\n+\n+  private volatile Set<Provider<T>> providers;\n+  private volatile Set<T> actualSet = null;\n+\n+  LazySet(Collection<Provider<T>> providers) {\n+    this.providers = Collections.newSetFromMap(new ConcurrentHashMap<>());\n+    this.providers.addAll(providers);\n+  }\n+\n+  static Provider<Set<?>> fromCollection(Collection<Provider<?>> providers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA4MzcwNw=="}, "originalCommit": {"oid": "4e0dac20b22cca439aa182df8d37c1c9888ae83c"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1059, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}