{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1OTM5NDQ1", "number": 1402, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzowNzoxN1rODs4s6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoyNjozMFrODtT2_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzkyOTM5OnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ImpressionStorageClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzowNzoxN1rOF9_epg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzowNzoxN1rOF9_epg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0NzQ5NA==", "bodyText": "make this a set", "url": "https://github.com/firebase/firebase-android-sdk/pull/1402#discussion_r400547494", "createdAt": "2020-03-30T23:07:17Z", "author": {"login": "prakhar1989"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ImpressionStorageClient.java", "diffHunk": "@@ -96,4 +98,38 @@ private void clearInMemCache() {\n         .map(CampaignImpression::getCampaignId)\n         .contains(campaignId);\n   }\n+\n+  /** */\n+  public void clearImpressions(FetchEligibleCampaignsResponse response) {\n+    ArrayList<String> idsToClear = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "780420bb463cb42020036799b8017c66f9872be7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzkzMjE4OnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ImpressionStorageClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzowODozNFrOF9_gQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDozMDo1NFrOF-BFWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0NzkwNg==", "bodyText": "I think these logs are for debugging? if not, lets remove this (here and below)", "url": "https://github.com/firebase/firebase-android-sdk/pull/1402#discussion_r400547906", "createdAt": "2020-03-30T23:08:34Z", "author": {"login": "prakhar1989"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ImpressionStorageClient.java", "diffHunk": "@@ -96,4 +98,38 @@ private void clearInMemCache() {\n         .map(CampaignImpression::getCampaignId)\n         .contains(campaignId);\n   }\n+\n+  /** */\n+  public void clearImpressions(FetchEligibleCampaignsResponse response) {\n+    ArrayList<String> idsToClear = new ArrayList<>();\n+\n+    for (CampaignProto.ThickContent content : response.getMessagesList()) {\n+      String id =\n+          content.getPayloadCase().equals(CampaignProto.ThickContent.PayloadCase.VANILLA_PAYLOAD)\n+              ? content.getVanillaPayload().getCampaignId()\n+              : content.getExperimentalPayload().getCampaignId();\n+      idsToClear.add(id);\n+    }\n+    Logging.logd(\"Clearing impressions for: \" + idsToClear.toString());\n+    getAllImpressions()\n+        .defaultIfEmpty(EMPTY_IMPRESSIONS)\n+        .flatMapCompletable(\n+            (storedImpressions) -> {\n+              Logging.logd(\"Existing impressions: \" + storedImpressions.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "780420bb463cb42020036799b8017c66f9872be7"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3Mzc4NQ==", "bodyText": "I think we can leave these logs as debug?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1402#discussion_r400573785", "createdAt": "2020-03-31T00:30:54Z", "author": {"login": "JasonAHeron"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ImpressionStorageClient.java", "diffHunk": "@@ -96,4 +98,38 @@ private void clearInMemCache() {\n         .map(CampaignImpression::getCampaignId)\n         .contains(campaignId);\n   }\n+\n+  /** */\n+  public void clearImpressions(FetchEligibleCampaignsResponse response) {\n+    ArrayList<String> idsToClear = new ArrayList<>();\n+\n+    for (CampaignProto.ThickContent content : response.getMessagesList()) {\n+      String id =\n+          content.getPayloadCase().equals(CampaignProto.ThickContent.PayloadCase.VANILLA_PAYLOAD)\n+              ? content.getVanillaPayload().getCampaignId()\n+              : content.getExperimentalPayload().getCampaignId();\n+      idsToClear.add(id);\n+    }\n+    Logging.logd(\"Clearing impressions for: \" + idsToClear.toString());\n+    getAllImpressions()\n+        .defaultIfEmpty(EMPTY_IMPRESSIONS)\n+        .flatMapCompletable(\n+            (storedImpressions) -> {\n+              Logging.logd(\"Existing impressions: \" + storedImpressions.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0NzkwNg=="}, "originalCommit": {"oid": "780420bb463cb42020036799b8017c66f9872be7"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mzk0MjAxOnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/DisplayCallbacksImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzoxMzowNFrOF9_mWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDozMDoxNVrOF-BEtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0OTQ2NA==", "bodyText": "Is this to test this whole thing e2e?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1402#discussion_r400549464", "createdAt": "2020-03-30T23:13:04Z", "author": {"login": "prakhar1989"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/DisplayCallbacksImpl.java", "diffHunk": "@@ -231,7 +232,7 @@ private Completable logToImpressionStore() {\n         impressionStorageClient\n             .storeImpression(\n                 CampaignImpression.newBuilder()\n-                    .setImpressionTimestampMillis(clock.now())\n+                    .setImpressionTimestampMillis(clock.now() - TimeUnit.DAYS.toMillis(2))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "780420bb463cb42020036799b8017c66f9872be7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3MzYyMg==", "bodyText": "Yep yep, will be removed", "url": "https://github.com/firebase/firebase-android-sdk/pull/1402#discussion_r400573622", "createdAt": "2020-03-31T00:30:15Z", "author": {"login": "JasonAHeron"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/DisplayCallbacksImpl.java", "diffHunk": "@@ -231,7 +232,7 @@ private Completable logToImpressionStore() {\n         impressionStorageClient\n             .storeImpression(\n                 CampaignImpression.newBuilder()\n-                    .setImpressionTimestampMillis(clock.now())\n+                    .setImpressionTimestampMillis(clock.now() - TimeUnit.DAYS.toMillis(2))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0OTQ2NA=="}, "originalCommit": {"oid": "780420bb463cb42020036799b8017c66f9872be7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDE2MTM3OnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ImpressionStorageClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMTowNDoxMVrOF-BpvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMTowNDoxMVrOF-BpvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4MzEwMQ==", "bodyText": "If you get rid of this and return the completable", "url": "https://github.com/firebase/firebase-android-sdk/pull/1402#discussion_r400583101", "createdAt": "2020-03-31T01:04:11Z", "author": {"login": "ashwinraghav"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ImpressionStorageClient.java", "diffHunk": "@@ -96,4 +98,38 @@ private void clearInMemCache() {\n         .map(CampaignImpression::getCampaignId)\n         .contains(campaignId);\n   }\n+\n+  /** */\n+  public void clearImpressions(FetchEligibleCampaignsResponse response) {\n+    ArrayList<String> idsToClear = new ArrayList<>();\n+\n+    for (CampaignProto.ThickContent content : response.getMessagesList()) {\n+      String id =\n+          content.getPayloadCase().equals(CampaignProto.ThickContent.PayloadCase.VANILLA_PAYLOAD)\n+              ? content.getVanillaPayload().getCampaignId()\n+              : content.getExperimentalPayload().getCampaignId();\n+      idsToClear.add(id);\n+    }\n+    Logging.logd(\"Clearing impressions for: \" + idsToClear.toString());\n+    getAllImpressions()\n+        .defaultIfEmpty(EMPTY_IMPRESSIONS)\n+        .flatMapCompletable(\n+            (storedImpressions) -> {\n+              Logging.logd(\"Existing impressions: \" + storedImpressions.toString());\n+              CampaignImpressionList.Builder clearedImpressionListBuilder =\n+                  CampaignImpressionList.newBuilder();\n+              for (CampaignImpression storedImpression :\n+                  storedImpressions.getAlreadySeenCampaignsList()) {\n+                if (!idsToClear.contains(storedImpression.getCampaignId())) {\n+                  clearedImpressionListBuilder.addAlreadySeenCampaigns(storedImpression);\n+                }\n+              }\n+              CampaignImpressionList clearedImpressionList = clearedImpressionListBuilder.build();\n+              Logging.logd(\"New impression list: \" + clearedImpressionList.toString());\n+              return storageClient\n+                  .write(clearedImpressionList)\n+                  .doOnComplete(() -> initInMemCache(clearedImpressionList));\n+            })\n+        .blockingAwait();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "780420bb463cb42020036799b8017c66f9872be7"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDE2OTUyOnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/InAppMessageStreamManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMTowODo0N1rOF-BucQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMTowODo0N1rOF-BucQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4NDMwNQ==", "bodyText": ".doOnSuccess(s -> impressionStorageClient.clearImpressions(s).subscribe()) similar to what cacheWrite does at line 266.\nThe key here is that doOnSuccess is a side effect type operator. The execution framework assumes that nothing needs to happen with the returned value. In your case, the return type of clearImpressions is a Completable that needs to either get chained into the observable or completed within the success consumer.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1402#discussion_r400584305", "createdAt": "2020-03-31T01:08:47Z", "author": {"login": "ashwinraghav"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/InAppMessageStreamManager.java", "diffHunk": "@@ -242,6 +242,7 @@ private boolean shouldIgnoreCache(String event) {\n                                           Locale.US,\n                                           \"Successfully fetched %d messages from backend\",\n                                           resp.getMessagesList().size())))\n+                          .doOnSuccess(impressionStorageClient::clearImpressions)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "780420bb463cb42020036799b8017c66f9872be7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODIzOTQ0OnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/test/java/com/google/firebase/inappmessaging/internal/InAppMessageStreamManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMTozNTozNlrOF-pHAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzo0MTozNFrOF_Llxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyOTU2OQ==", "bodyText": "PLs consider a new test that checks is the completable was subscribed to", "url": "https://github.com/firebase/firebase-android-sdk/pull/1402#discussion_r401229569", "createdAt": "2020-03-31T21:35:36Z", "author": {"login": "ashwinraghav"}, "path": "firebase-inappmessaging/src/test/java/com/google/firebase/inappmessaging/internal/InAppMessageStreamManagerTest.java", "diffHunk": "@@ -198,6 +198,8 @@ public void setup() {\n             abtIntegrationHelper);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14e7225ebbb3806f6e517c6d786648374e630997"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc5NDUwMg==", "bodyText": "this is tested (somewhat indirectly) by our flowable test", "url": "https://github.com/firebase/firebase-android-sdk/pull/1402#discussion_r401794502", "createdAt": "2020-04-01T17:41:34Z", "author": {"login": "JasonAHeron"}, "path": "firebase-inappmessaging/src/test/java/com/google/firebase/inappmessaging/internal/InAppMessageStreamManagerTest.java", "diffHunk": "@@ -198,6 +198,8 @@ public void setup() {\n             abtIntegrationHelper);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyOTU2OQ=="}, "originalCommit": {"oid": "14e7225ebbb3806f6e517c6d786648374e630997"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODM3MjY2OnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ImpressionStorageClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoyMzo1MVrOF-qZxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoyMzo1MVrOF-qZxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1MDc1OA==", "bodyText": "Lets add why we do this? (something like: this is required because we trust the server to tell us which campaigns can be re-impressed to honor frequency limits)?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1402#discussion_r401250758", "createdAt": "2020-03-31T22:23:51Z", "author": {"login": "prakhar1989"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ImpressionStorageClient.java", "diffHunk": "@@ -96,4 +98,39 @@ private void clearInMemCache() {\n         .map(CampaignImpression::getCampaignId)\n         .contains(campaignId);\n   }\n+\n+  /**\n+   * Clears impressions for all campaigns found in the provided {@link\n+   * FetchEligibleCampaignsResponse}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e636c74383b38373437ba41388441494dfe6c6ef"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODM3NTI4OnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ImpressionStorageClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoyNDo1NlrOF-qbWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoyMjoyOFrOF_K4KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1MTE2Mg==", "bodyText": "Did we test if this HashSet.toString logs the items and not the reference to the array?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1402#discussion_r401251162", "createdAt": "2020-03-31T22:24:56Z", "author": {"login": "prakhar1989"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ImpressionStorageClient.java", "diffHunk": "@@ -96,4 +98,39 @@ private void clearInMemCache() {\n         .map(CampaignImpression::getCampaignId)\n         .contains(campaignId);\n   }\n+\n+  /**\n+   * Clears impressions for all campaigns found in the provided {@link\n+   * FetchEligibleCampaignsResponse}\n+   */\n+  public Completable clearImpressions(FetchEligibleCampaignsResponse response) {\n+    HashSet<String> idsToClear = new HashSet<>();\n+    for (CampaignProto.ThickContent content : response.getMessagesList()) {\n+      String id =\n+          content.getPayloadCase().equals(CampaignProto.ThickContent.PayloadCase.VANILLA_PAYLOAD)\n+              ? content.getVanillaPayload().getCampaignId()\n+              : content.getExperimentalPayload().getCampaignId();\n+      idsToClear.add(id);\n+    }\n+    Logging.logd(\"Potential impressions to clear: \" + idsToClear.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e636c74383b38373437ba41388441494dfe6c6ef"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4MjgyNA==", "bodyText": "yeah it logs the items. it logs a reference to the array if the array is empty but if it contains items it logs the items.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1402#discussion_r401782824", "createdAt": "2020-04-01T17:22:28Z", "author": {"login": "JasonAHeron"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ImpressionStorageClient.java", "diffHunk": "@@ -96,4 +98,39 @@ private void clearInMemCache() {\n         .map(CampaignImpression::getCampaignId)\n         .contains(campaignId);\n   }\n+\n+  /**\n+   * Clears impressions for all campaigns found in the provided {@link\n+   * FetchEligibleCampaignsResponse}\n+   */\n+  public Completable clearImpressions(FetchEligibleCampaignsResponse response) {\n+    HashSet<String> idsToClear = new HashSet<>();\n+    for (CampaignProto.ThickContent content : response.getMessagesList()) {\n+      String id =\n+          content.getPayloadCase().equals(CampaignProto.ThickContent.PayloadCase.VANILLA_PAYLOAD)\n+              ? content.getVanillaPayload().getCampaignId()\n+              : content.getExperimentalPayload().getCampaignId();\n+      idsToClear.add(id);\n+    }\n+    Logging.logd(\"Potential impressions to clear: \" + idsToClear.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1MTE2Mg=="}, "originalCommit": {"oid": "e636c74383b38373437ba41388441494dfe6c6ef"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODM3ODg0OnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/InAppMessageStreamManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoyNjozMFrOF-qduA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoyNjozMFrOF-qduA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1MTc2OA==", "bodyText": "nice! this seems much better than blockingAwait", "url": "https://github.com/firebase/firebase-android-sdk/pull/1402#discussion_r401251768", "createdAt": "2020-03-31T22:26:30Z", "author": {"login": "prakhar1989"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/InAppMessageStreamManager.java", "diffHunk": "@@ -242,6 +242,8 @@ private boolean shouldIgnoreCache(String event) {\n                                           Locale.US,\n                                           \"Successfully fetched %d messages from backend\",\n                                           resp.getMessagesList().size())))\n+                          .doOnSuccess(\n+                              resp -> impressionStorageClient.clearImpressions(resp).subscribe())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e636c74383b38373437ba41388441494dfe6c6ef"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1424, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}