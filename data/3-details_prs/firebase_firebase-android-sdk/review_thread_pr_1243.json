{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDkwODc0", "number": 1243, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxOTowNFrODfs6wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxOTowNFrODfs6wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTY4Mzg0OnYy", "diffSide": "RIGHT", "path": "firebase-crashlytics/src/androidTest/java/com/google/firebase/crashlytics/internal/send/DataTransportCrashlyticsReportSenderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMToxOTowNFrOFpj5aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMzoyNjo1OVrOFp2ecg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNDA3Mg==", "bodyText": "It would be better to call Tasks.await(send1); before checking the result of the task. Even if the test happens to resolve the task synchronously right now, there are lots of reasons why it might become async in the future, and that way the tests will keep working as expected. Same for similar usages below.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1243#discussion_r379124072", "createdAt": "2020-02-13T21:19:04Z", "author": {"login": "bklimt"}, "path": "firebase-crashlytics/src/androidTest/java/com/google/firebase/crashlytics/internal/send/DataTransportCrashlyticsReportSenderTest.java", "diffHunk": "@@ -14,82 +14,96 @@\n \n package com.google.firebase.crashlytics.internal.send;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doAnswer;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.verify;\n \n import androidx.test.runner.AndroidJUnit4;\n-import com.google.android.datatransport.Event;\n import com.google.android.datatransport.Transport;\n+import com.google.android.datatransport.TransportScheduleCallback;\n+import com.google.android.gms.tasks.Task;\n import com.google.firebase.crashlytics.internal.model.CrashlyticsReport;\n-import java.util.ArrayList;\n-import java.util.List;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n+import org.mockito.stubbing.Answer;\n \n @RunWith(AndroidJUnit4.class)\n public class DataTransportCrashlyticsReportSenderTest {\n \n   @Mock private Transport<CrashlyticsReport> mockTransport;\n \n-  @Mock private SendCallback<CrashlyticsReport> mockCallback;\n-\n   private DataTransportCrashlyticsReportSender reportSender;\n \n   @Before\n   public void setUp() throws Exception {\n     MockitoAnnotations.initMocks(this);\n-    reportSender = new DataTransportCrashlyticsReportSender(mockTransport, mockCallback);\n+    reportSender = new DataTransportCrashlyticsReportSender(mockTransport);\n   }\n \n   @Test\n   public void testSendReportsSuccessful() {\n-    doAnswer(\n-            (i) -> {\n-              final Event<CrashlyticsReport> event = i.getArgument(0);\n-              mockCallback.onSendComplete(event.getPayload(), null);\n-              return null;\n-            })\n-        .when(mockTransport)\n-        .schedule(any(), any());\n+    doAnswer(callbackAnswer(null)).when(mockTransport).schedule(any(), any());\n \n     final CrashlyticsReport report1 = mock(CrashlyticsReport.class);\n     final CrashlyticsReport report2 = mock(CrashlyticsReport.class);\n \n-    final List<CrashlyticsReport> reports = new ArrayList<>();\n-    reports.add(report1);\n-    reports.add(report2);\n+    final Task<CrashlyticsReport> send1 = reportSender.sendReport(report1);\n+    final Task<CrashlyticsReport> send2 = reportSender.sendReport(report2);\n \n-    reportSender.sendReports(reports);\n-    verify(mockCallback).onSendComplete(report1, null);\n-    verify(mockCallback).onSendComplete(report2, null);\n+    assertTrue(send1.isSuccessful());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb081e0fee9e3ddf7837f46459da86df59d7c61"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQyODQ2Ng==", "bodyText": "Good call. I'll add that. Thanks!", "url": "https://github.com/firebase/firebase-android-sdk/pull/1243#discussion_r379428466", "createdAt": "2020-02-14T13:26:59Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/androidTest/java/com/google/firebase/crashlytics/internal/send/DataTransportCrashlyticsReportSenderTest.java", "diffHunk": "@@ -14,82 +14,96 @@\n \n package com.google.firebase.crashlytics.internal.send;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.doAnswer;\n import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.verify;\n \n import androidx.test.runner.AndroidJUnit4;\n-import com.google.android.datatransport.Event;\n import com.google.android.datatransport.Transport;\n+import com.google.android.datatransport.TransportScheduleCallback;\n+import com.google.android.gms.tasks.Task;\n import com.google.firebase.crashlytics.internal.model.CrashlyticsReport;\n-import java.util.ArrayList;\n-import java.util.List;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n+import org.mockito.stubbing.Answer;\n \n @RunWith(AndroidJUnit4.class)\n public class DataTransportCrashlyticsReportSenderTest {\n \n   @Mock private Transport<CrashlyticsReport> mockTransport;\n \n-  @Mock private SendCallback<CrashlyticsReport> mockCallback;\n-\n   private DataTransportCrashlyticsReportSender reportSender;\n \n   @Before\n   public void setUp() throws Exception {\n     MockitoAnnotations.initMocks(this);\n-    reportSender = new DataTransportCrashlyticsReportSender(mockTransport, mockCallback);\n+    reportSender = new DataTransportCrashlyticsReportSender(mockTransport);\n   }\n \n   @Test\n   public void testSendReportsSuccessful() {\n-    doAnswer(\n-            (i) -> {\n-              final Event<CrashlyticsReport> event = i.getArgument(0);\n-              mockCallback.onSendComplete(event.getPayload(), null);\n-              return null;\n-            })\n-        .when(mockTransport)\n-        .schedule(any(), any());\n+    doAnswer(callbackAnswer(null)).when(mockTransport).schedule(any(), any());\n \n     final CrashlyticsReport report1 = mock(CrashlyticsReport.class);\n     final CrashlyticsReport report2 = mock(CrashlyticsReport.class);\n \n-    final List<CrashlyticsReport> reports = new ArrayList<>();\n-    reports.add(report1);\n-    reports.add(report2);\n+    final Task<CrashlyticsReport> send1 = reportSender.sendReport(report1);\n+    final Task<CrashlyticsReport> send2 = reportSender.sendReport(report2);\n \n-    reportSender.sendReports(reports);\n-    verify(mockCallback).onSendComplete(report1, null);\n-    verify(mockCallback).onSendComplete(report2, null);\n+    assertTrue(send1.isSuccessful());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyNDA3Mg=="}, "originalCommit": {"oid": "5cb081e0fee9e3ddf7837f46459da86df59d7c61"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 773, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}