{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMjA2NTI3", "number": 2104, "title": "Add Ml shared preferences for custom model storage", "bodyText": "", "createdAt": "2020-10-26T17:55:13Z", "url": "https://github.com/firebase/firebase-android-sdk/pull/2104", "merged": true, "mergeCommit": {"oid": "428565969e625e6c199a2106cd800b619db5f520"}, "closed": true, "closedAt": "2020-10-29T13:33:52Z", "author": {"login": "annzimmer"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUchnngH2gAyNTEwMjA2NTI3OmUxYzU0MTE0MTJhYjgyMWMwNTM4OTQzN2YyM2M3OGQwYjk1OGYzYjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXExD1AFqTUxOTExMTg0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e1c5411412ab821c05389437f23c78d0b958f3b1", "author": {"user": {"login": "annzimmer", "name": "Ann Z"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/e1c5411412ab821c05389437f23c78d0b958f3b1", "committedDate": "2020-10-20T17:49:47Z", "message": "Refactor FirebaseMlModel* class names to FirebaseModel*."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f1b068e9f779aee92fb55b56e19113766ef8322", "author": {"user": {"login": "annzimmer", "name": "Ann Z"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/2f1b068e9f779aee92fb55b56e19113766ef8322", "committedDate": "2020-10-22T14:46:59Z", "message": "Create Storage for CustomModel Details."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b704d8b787f81166420b306c698f08603a76ba2", "author": {"user": {"login": "annzimmer", "name": "Ann Z"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/3b704d8b787f81166420b306c698f08603a76ba2", "committedDate": "2020-10-26T17:37:07Z", "message": "Update shared preference calls."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72d0d25f901a3055dc48feaa04873e16e3f8bbb4", "author": {"user": {"login": "annzimmer", "name": "Ann Z"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/72d0d25f901a3055dc48feaa04873e16e3f8bbb4", "committedDate": "2020-10-26T17:58:50Z", "message": "Merge branch 'master' into mlStorage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c201a0033fef79dc67ff86d2106aa5b63d1776ae", "author": {"user": {"login": "annzimmer", "name": "Ann Z"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/c201a0033fef79dc67ff86d2106aa5b63d1776ae", "committedDate": "2020-10-26T18:12:42Z", "message": "Fix formatting after merge."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Nzc5NDcw", "url": "https://github.com/firebase/firebase-android-sdk/pull/2104#pullrequestreview-518779470", "createdAt": "2020-10-28T15:17:45Z", "commit": {"oid": "c201a0033fef79dc67ff86d2106aa5b63d1776ae"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNToxNzo0NlrOHpvYhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo1OToxNlrOHp0TOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzUyOTk4OA==", "bodyText": "You could call the other constructor from here and assignments centralized in a single method.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2104#discussion_r513529988", "createdAt": "2020-10-28T15:17:46Z", "author": {"login": "rlazo"}, "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/CustomModel.java", "diffHunk": "@@ -28,7 +29,48 @@\n   private final long downloadId;\n   private final long fileSize;\n   private final String modelHash;\n-  private final String localFilePath = \"\";\n+  private final String localFilePath;\n+\n+  /**\n+   * Use when creating a custom model while the initial download is still in progress.\n+   *\n+   * @param name - model name\n+   * @param downloadId - Android Download Manger - download id\n+   * @param fileSize - model file size\n+   * @param modelHash - model hash size\n+   * @hide\n+   */\n+  public CustomModel(\n+      @NonNull String name, long downloadId, long fileSize, @NonNull String modelHash) {\n+    this.modelHash = modelHash;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c201a0033fef79dc67ff86d2106aa5b63d1776ae"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU0MDQ1OA==", "bodyText": "Override hashCode when overriding equals (Item 11 in Effective Java)", "url": "https://github.com/firebase/firebase-android-sdk/pull/2104#discussion_r513540458", "createdAt": "2020-10-28T15:30:48Z", "author": {"login": "rlazo"}, "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/CustomModel.java", "diffHunk": "@@ -76,18 +118,31 @@ public long getDownloadId() {\n     return downloadId;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c201a0033fef79dc67ff86d2106aa5b63d1776ae"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU0MjIzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * getDownloadingCustomModelDetails. If this is the initial download of a local file - the\n          \n          \n            \n               * {@link #getDownloadingCustomModelDetails}. If this is the initial download of a local file - the", "url": "https://github.com/firebase/firebase-android-sdk/pull/2104#discussion_r513542238", "createdAt": "2020-10-28T15:33:03Z", "author": {"login": "rlazo"}, "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/internal/SharedPreferencesUtil.java", "diffHunk": "@@ -0,0 +1,213 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.ml.modeldownloader.internal;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.os.SystemClock;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.ml.modeldownloader.CustomModel;\n+\n+/** @hide */\n+public class SharedPreferencesUtil {\n+\n+  @VisibleForTesting\n+  static final String PREFERENCES_PACKAGE_NAME = \"com.google.firebase.ml.modelDownloader\";\n+\n+  // local model details\n+  private static final String LOCAL_MODEL_HASH_PATTERN = \"current_model_hash_%s_%s\";\n+  private static final String LOCAL_MODEL_FILE_PATH_PATTERN = \"current_model_path_%s_%s\";\n+  private static final String LOCAL_MODEL_FILE_SIZE_PATTERN = \"current_model_size_%s_%s\";\n+  // details about model during download.\n+  private static final String DOWNLOADING_MODEL_HASH_PATTERN = \"downloading_model_hash_%s_%s\";\n+  private static final String DOWNLOADING_MODEL_SIZE_PATTERN = \"downloading_model_size_%s_%s\";\n+  private static final String DOWNLOADING_MODEL_ID_PATTERN = \"downloading_model_id_%s_%s\";\n+  private static final String DOWNLOAD_BEGIN_TIME_MS_PATTERN = \"downloading_begin_time_%s_%s\";\n+\n+  private final String persistenceKey;\n+  private final FirebaseApp firebaseApp;\n+\n+  public SharedPreferencesUtil(FirebaseApp firebaseApp) {\n+    this.firebaseApp = firebaseApp;\n+    this.persistenceKey = firebaseApp.getPersistenceKey();\n+  }\n+\n+  /**\n+   * Returns the Custom Model details currently associated with this model. If a fully downloaded\n+   * model is present - this returns the details of that model, including local file path. If an\n+   * update of an existing model is in progress, the local model plus the download id for the new\n+   * upload is returned. To get only details related to the downloading model use\n+   * getDownloadingCustomModelDetails. If this is the initial download of a local file - the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c201a0033fef79dc67ff86d2106aa5b63d1776ae"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4MjQxMg==", "bodyText": "Can this code be removed?", "url": "https://github.com/firebase/firebase-android-sdk/pull/2104#discussion_r513582412", "createdAt": "2020-10-28T16:22:46Z", "author": {"login": "rlazo"}, "path": "firebase-ml-modeldownloader/src/test/java/com/google/firebase/ml/modeldownloader/internal/SharedPreferencesUtilTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.ml.modeldownloader.internal;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.ml.modeldownloader.CustomModel;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+/** Tests for {@link SharedPreferencesUtil}. */\n+@RunWith(RobolectricTestRunner.class)\n+public class SharedPreferencesUtilTest {\n+\n+  private static final String TEST_PROJECT_ID = \"777777777777\";\n+\n+  private static final String MODEL_NAME = \"ModelName\";\n+  private static final String MODEL_HASH = \"dsf324\";\n+  private static final CustomModel CUSTOM_MODEL_DOWNLOAD_COMPLETE =\n+      new CustomModel(MODEL_NAME, 0, 100, MODEL_HASH, \"file/path/store/ModelName/1\");\n+\n+  private static final CustomModel CUSTOM_MODEL_UPDATE_IN_BACKGROUND =\n+      new CustomModel(MODEL_NAME, 986, 100, MODEL_HASH, \"file/path/store/ModelName/1\");\n+\n+  private static final CustomModel CUSTOM_MODEL_DOWNLOADING =\n+      new CustomModel(MODEL_NAME, 986, 100, MODEL_HASH);\n+\n+  //  private static final FirebaseApp FIREBASE_APP = FirebaseApp.initializeApp(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c201a0033fef79dc67ff86d2106aa5b63d1776ae"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYwNzY2MQ==", "bodyText": "Would it be useful to do the clearing as part of the change above? If yes, then you can pass the editor to clearDownloadingModelDetails and use it to add the remove statements in a single apply() call.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2104#discussion_r513607661", "createdAt": "2020-10-28T16:55:32Z", "author": {"login": "rlazo"}, "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/internal/SharedPreferencesUtil.java", "diffHunk": "@@ -0,0 +1,213 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.ml.modeldownloader.internal;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.os.SystemClock;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.ml.modeldownloader.CustomModel;\n+\n+/** @hide */\n+public class SharedPreferencesUtil {\n+\n+  @VisibleForTesting\n+  static final String PREFERENCES_PACKAGE_NAME = \"com.google.firebase.ml.modelDownloader\";\n+\n+  // local model details\n+  private static final String LOCAL_MODEL_HASH_PATTERN = \"current_model_hash_%s_%s\";\n+  private static final String LOCAL_MODEL_FILE_PATH_PATTERN = \"current_model_path_%s_%s\";\n+  private static final String LOCAL_MODEL_FILE_SIZE_PATTERN = \"current_model_size_%s_%s\";\n+  // details about model during download.\n+  private static final String DOWNLOADING_MODEL_HASH_PATTERN = \"downloading_model_hash_%s_%s\";\n+  private static final String DOWNLOADING_MODEL_SIZE_PATTERN = \"downloading_model_size_%s_%s\";\n+  private static final String DOWNLOADING_MODEL_ID_PATTERN = \"downloading_model_id_%s_%s\";\n+  private static final String DOWNLOAD_BEGIN_TIME_MS_PATTERN = \"downloading_begin_time_%s_%s\";\n+\n+  private final String persistenceKey;\n+  private final FirebaseApp firebaseApp;\n+\n+  public SharedPreferencesUtil(FirebaseApp firebaseApp) {\n+    this.firebaseApp = firebaseApp;\n+    this.persistenceKey = firebaseApp.getPersistenceKey();\n+  }\n+\n+  /**\n+   * Returns the Custom Model details currently associated with this model. If a fully downloaded\n+   * model is present - this returns the details of that model, including local file path. If an\n+   * update of an existing model is in progress, the local model plus the download id for the new\n+   * upload is returned. To get only details related to the downloading model use\n+   * getDownloadingCustomModelDetails. If this is the initial download of a local file - the\n+   * downloading model details are returned.\n+   *\n+   * @param modelName - name of the model\n+   * @return current version of the Custom Model\n+   */\n+  @Nullable\n+  public synchronized CustomModel getCustomModelDetails(@NonNull String modelName) {\n+    String modelHash =\n+        getSharedPreferences()\n+            .getString(String.format(LOCAL_MODEL_HASH_PATTERN, persistenceKey, modelName), null);\n+\n+    if (modelHash == null || modelHash.isEmpty()) {\n+      // no model downloaded - check if model is being downloaded.\n+      return getDownloadingCustomModelDetails(modelName);\n+    }\n+\n+    String filePath =\n+        getSharedPreferences()\n+            .getString(String.format(LOCAL_MODEL_FILE_PATH_PATTERN, persistenceKey, modelName), \"\");\n+\n+    long fileSize =\n+        getSharedPreferences()\n+            .getLong(String.format(LOCAL_MODEL_FILE_SIZE_PATTERN, persistenceKey, modelName), 0);\n+\n+    // if no-zero - local model is present and new model being downloaded\n+    long id =\n+        getSharedPreferences()\n+            .getLong(String.format(DOWNLOADING_MODEL_ID_PATTERN, persistenceKey, modelName), 0);\n+\n+    return new CustomModel(modelName, id, fileSize, modelHash, filePath);\n+  }\n+\n+  /**\n+   * Returns the Custom Model details associated with this version of this model currently being\n+   * downloaded. If no download is in progress return null. Contains no information about local\n+   * model, only download status.\n+   *\n+   * @param modelName name of the model\n+   * @return Download version of CustomModel\n+   */\n+  @Nullable\n+  public synchronized CustomModel getDownloadingCustomModelDetails(@NonNull String modelName) {\n+    String modelHash =\n+        getSharedPreferences()\n+            .getString(\n+                String.format(DOWNLOADING_MODEL_HASH_PATTERN, persistenceKey, modelName), null);\n+\n+    if (modelHash == null || modelHash.isEmpty()) {\n+      // no model hash means no download in progress\n+      return null;\n+    }\n+\n+    long fileSize =\n+        getSharedPreferences()\n+            .getLong(String.format(DOWNLOADING_MODEL_SIZE_PATTERN, persistenceKey, modelName), 0);\n+\n+    long id =\n+        getSharedPreferences()\n+            .getLong(String.format(DOWNLOADING_MODEL_ID_PATTERN, persistenceKey, modelName), 0);\n+\n+    return new CustomModel(modelName, id, fileSize, modelHash);\n+  }\n+\n+  /**\n+   * The information about the new custom model download that need to be stored.\n+   *\n+   * @param customModel custom model details to be stored.\n+   */\n+  public synchronized void setDownloadingCustomModelDetails(@NonNull CustomModel customModel) {\n+    String modelName = customModel.getName();\n+    String modelHash = customModel.getModelHash();\n+    long downloadId = customModel.getDownloadId();\n+    long modelSize = customModel.getSize();\n+    getSharedPreferences()\n+        .edit()\n+        .putString(\n+            String.format(DOWNLOADING_MODEL_HASH_PATTERN, persistenceKey, modelName), modelHash)\n+        .putLong(\n+            String.format(DOWNLOADING_MODEL_SIZE_PATTERN, persistenceKey, modelName), modelSize)\n+        .putLong(String.format(DOWNLOADING_MODEL_ID_PATTERN, persistenceKey, modelName), downloadId)\n+        // The following assumes the download will finish before the system reboots.\n+        // If not, the download duration won't be correct, which isn't critical.\n+        .putLong(\n+            String.format(DOWNLOAD_BEGIN_TIME_MS_PATTERN, persistenceKey, modelName),\n+            SystemClock.elapsedRealtime())\n+        .apply();\n+  }\n+\n+  /**\n+   * The information about a completed custom model download. Updates the local model information\n+   * and clears the download details associated with this model.\n+   *\n+   * @param customModel custom model details to be stored.\n+   */\n+  public synchronized void setUploadedCustomModelDetails(@NonNull CustomModel customModel)\n+      throws IllegalArgumentException {\n+    Long id = customModel.getDownloadId();\n+    // only call when download is completed and download id is reset to 0;\n+    if (!id.equals(0L)) {\n+      throw new IllegalArgumentException(\"Only call when Custom model has completed download.\");\n+    }\n+\n+    String modelName = customModel.getName();\n+    String hash = customModel.getModelHash();\n+    long size = customModel.getSize();\n+    String filePath = customModel.getLocalFilePath();\n+    getSharedPreferences()\n+        .edit()\n+        .putString(String.format(LOCAL_MODEL_HASH_PATTERN, persistenceKey, modelName), hash)\n+        .putLong(String.format(LOCAL_MODEL_FILE_SIZE_PATTERN, persistenceKey, modelName), size)\n+        .putString(\n+            String.format(LOCAL_MODEL_FILE_PATH_PATTERN, persistenceKey, modelName), filePath)\n+        .apply();\n+\n+    clearDownloadingModelDetails(customModel.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c201a0033fef79dc67ff86d2106aa5b63d1776ae"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYxMDU1Mw==", "bodyText": "apply() only alters the in-memory contents of the SharedPreferences, and eventually writes to disk, which may fail silently, unlike commit() that's synchronous. Just want to double check that this is an acceptable situation in this case.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2104#discussion_r513610553", "createdAt": "2020-10-28T16:59:16Z", "author": {"login": "rlazo"}, "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/internal/SharedPreferencesUtil.java", "diffHunk": "@@ -0,0 +1,213 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.ml.modeldownloader.internal;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.os.SystemClock;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.ml.modeldownloader.CustomModel;\n+\n+/** @hide */\n+public class SharedPreferencesUtil {\n+\n+  @VisibleForTesting\n+  static final String PREFERENCES_PACKAGE_NAME = \"com.google.firebase.ml.modelDownloader\";\n+\n+  // local model details\n+  private static final String LOCAL_MODEL_HASH_PATTERN = \"current_model_hash_%s_%s\";\n+  private static final String LOCAL_MODEL_FILE_PATH_PATTERN = \"current_model_path_%s_%s\";\n+  private static final String LOCAL_MODEL_FILE_SIZE_PATTERN = \"current_model_size_%s_%s\";\n+  // details about model during download.\n+  private static final String DOWNLOADING_MODEL_HASH_PATTERN = \"downloading_model_hash_%s_%s\";\n+  private static final String DOWNLOADING_MODEL_SIZE_PATTERN = \"downloading_model_size_%s_%s\";\n+  private static final String DOWNLOADING_MODEL_ID_PATTERN = \"downloading_model_id_%s_%s\";\n+  private static final String DOWNLOAD_BEGIN_TIME_MS_PATTERN = \"downloading_begin_time_%s_%s\";\n+\n+  private final String persistenceKey;\n+  private final FirebaseApp firebaseApp;\n+\n+  public SharedPreferencesUtil(FirebaseApp firebaseApp) {\n+    this.firebaseApp = firebaseApp;\n+    this.persistenceKey = firebaseApp.getPersistenceKey();\n+  }\n+\n+  /**\n+   * Returns the Custom Model details currently associated with this model. If a fully downloaded\n+   * model is present - this returns the details of that model, including local file path. If an\n+   * update of an existing model is in progress, the local model plus the download id for the new\n+   * upload is returned. To get only details related to the downloading model use\n+   * getDownloadingCustomModelDetails. If this is the initial download of a local file - the\n+   * downloading model details are returned.\n+   *\n+   * @param modelName - name of the model\n+   * @return current version of the Custom Model\n+   */\n+  @Nullable\n+  public synchronized CustomModel getCustomModelDetails(@NonNull String modelName) {\n+    String modelHash =\n+        getSharedPreferences()\n+            .getString(String.format(LOCAL_MODEL_HASH_PATTERN, persistenceKey, modelName), null);\n+\n+    if (modelHash == null || modelHash.isEmpty()) {\n+      // no model downloaded - check if model is being downloaded.\n+      return getDownloadingCustomModelDetails(modelName);\n+    }\n+\n+    String filePath =\n+        getSharedPreferences()\n+            .getString(String.format(LOCAL_MODEL_FILE_PATH_PATTERN, persistenceKey, modelName), \"\");\n+\n+    long fileSize =\n+        getSharedPreferences()\n+            .getLong(String.format(LOCAL_MODEL_FILE_SIZE_PATTERN, persistenceKey, modelName), 0);\n+\n+    // if no-zero - local model is present and new model being downloaded\n+    long id =\n+        getSharedPreferences()\n+            .getLong(String.format(DOWNLOADING_MODEL_ID_PATTERN, persistenceKey, modelName), 0);\n+\n+    return new CustomModel(modelName, id, fileSize, modelHash, filePath);\n+  }\n+\n+  /**\n+   * Returns the Custom Model details associated with this version of this model currently being\n+   * downloaded. If no download is in progress return null. Contains no information about local\n+   * model, only download status.\n+   *\n+   * @param modelName name of the model\n+   * @return Download version of CustomModel\n+   */\n+  @Nullable\n+  public synchronized CustomModel getDownloadingCustomModelDetails(@NonNull String modelName) {\n+    String modelHash =\n+        getSharedPreferences()\n+            .getString(\n+                String.format(DOWNLOADING_MODEL_HASH_PATTERN, persistenceKey, modelName), null);\n+\n+    if (modelHash == null || modelHash.isEmpty()) {\n+      // no model hash means no download in progress\n+      return null;\n+    }\n+\n+    long fileSize =\n+        getSharedPreferences()\n+            .getLong(String.format(DOWNLOADING_MODEL_SIZE_PATTERN, persistenceKey, modelName), 0);\n+\n+    long id =\n+        getSharedPreferences()\n+            .getLong(String.format(DOWNLOADING_MODEL_ID_PATTERN, persistenceKey, modelName), 0);\n+\n+    return new CustomModel(modelName, id, fileSize, modelHash);\n+  }\n+\n+  /**\n+   * The information about the new custom model download that need to be stored.\n+   *\n+   * @param customModel custom model details to be stored.\n+   */\n+  public synchronized void setDownloadingCustomModelDetails(@NonNull CustomModel customModel) {\n+    String modelName = customModel.getName();\n+    String modelHash = customModel.getModelHash();\n+    long downloadId = customModel.getDownloadId();\n+    long modelSize = customModel.getSize();\n+    getSharedPreferences()\n+        .edit()\n+        .putString(\n+            String.format(DOWNLOADING_MODEL_HASH_PATTERN, persistenceKey, modelName), modelHash)\n+        .putLong(\n+            String.format(DOWNLOADING_MODEL_SIZE_PATTERN, persistenceKey, modelName), modelSize)\n+        .putLong(String.format(DOWNLOADING_MODEL_ID_PATTERN, persistenceKey, modelName), downloadId)\n+        // The following assumes the download will finish before the system reboots.\n+        // If not, the download duration won't be correct, which isn't critical.\n+        .putLong(\n+            String.format(DOWNLOAD_BEGIN_TIME_MS_PATTERN, persistenceKey, modelName),\n+            SystemClock.elapsedRealtime())\n+        .apply();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c201a0033fef79dc67ff86d2106aa5b63d1776ae"}, "originalPosition": 141}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33eed38cc14e7284846394b0f132703b283de97a", "author": {"user": {"login": "annzimmer", "name": "Ann Z"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/33eed38cc14e7284846394b0f132703b283de97a", "committedDate": "2020-10-28T20:50:23Z", "message": "Updating based on reviewer comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MTExODQ0", "url": "https://github.com/firebase/firebase-android-sdk/pull/2104#pullrequestreview-519111844", "createdAt": "2020-10-28T21:50:42Z", "commit": {"oid": "33eed38cc14e7284846394b0f132703b283de97a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2415, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}