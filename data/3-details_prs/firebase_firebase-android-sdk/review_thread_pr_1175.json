{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NzU0MjA4", "number": 1175, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo1OTowMlrODbu-cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo1OTowMlrODbu-cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDA3Nzk1OnYy", "diffSide": "RIGHT", "path": "encoders/firebase-encoders-json/src/json/java/com/google/firebase/encoders/json/JsonValueObjectEncoderContext.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo1OTowMlrOFjY_9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMjozMzozN1rOFjZ4gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1NDA2OA==", "bodyText": "I think you can go further simplify by just adding here\nif (ignoreNullValues && o == null) return this;\n\nand the rest of the code can stay the same.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1175#discussion_r372654068", "createdAt": "2020-01-29T21:59:02Z", "author": {"login": "rlazo"}, "path": "encoders/firebase-encoders-json/src/json/java/com/google/firebase/encoders/json/JsonValueObjectEncoderContext.java", "diffHunk": "@@ -37,36 +37,37 @@\n   private final Map<Class<?>, ObjectEncoder<?>> objectEncoders;\n   private final Map<Class<?>, ValueEncoder<?>> valueEncoders;\n   private final ObjectEncoder<Object> fallbackEncoder;\n+  private final boolean ignoreNullValues;\n \n   JsonValueObjectEncoderContext(\n       @NonNull Writer writer,\n       @NonNull Map<Class<?>, ObjectEncoder<?>> objectEncoders,\n       @NonNull Map<Class<?>, ValueEncoder<?>> valueEncoders,\n-      ObjectEncoder<Object> fallbackEncoder) {\n+      ObjectEncoder<Object> fallbackEncoder,\n+      boolean ignoreNullValues) {\n     this.jsonWriter = new JsonWriter(writer);\n     this.objectEncoders = objectEncoders;\n     this.valueEncoders = valueEncoders;\n     this.fallbackEncoder = fallbackEncoder;\n+    this.ignoreNullValues = ignoreNullValues;\n   }\n \n   private JsonValueObjectEncoderContext(JsonValueObjectEncoderContext anotherContext) {\n     this.jsonWriter = anotherContext.jsonWriter;\n     this.objectEncoders = anotherContext.objectEncoders;\n     this.valueEncoders = anotherContext.valueEncoders;\n     this.fallbackEncoder = anotherContext.fallbackEncoder;\n+    this.ignoreNullValues = anotherContext.ignoreNullValues;\n   }\n \n   @NonNull\n   @Override\n   public JsonValueObjectEncoderContext add(@NonNull String name, @Nullable Object o)\n       throws IOException, EncodingException {\n-    maybeUnNest();\n-    jsonWriter.name(name);\n-    if (o == null) {\n-      jsonWriter.nullValue();\n-      return this;\n+    if (ignoreNullValues) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae2ca18015214cd34cf01fe6730bf79bc4e2ac57"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1NDk0OA==", "bodyText": "The reason I didn't go with that approach is that, in the case ignoreNullValues is true, and o is not null, it will be null-checked a second time unnecessarily.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1175#discussion_r372654948", "createdAt": "2020-01-29T22:01:04Z", "author": {"login": "mrwillis21"}, "path": "encoders/firebase-encoders-json/src/json/java/com/google/firebase/encoders/json/JsonValueObjectEncoderContext.java", "diffHunk": "@@ -37,36 +37,37 @@\n   private final Map<Class<?>, ObjectEncoder<?>> objectEncoders;\n   private final Map<Class<?>, ValueEncoder<?>> valueEncoders;\n   private final ObjectEncoder<Object> fallbackEncoder;\n+  private final boolean ignoreNullValues;\n \n   JsonValueObjectEncoderContext(\n       @NonNull Writer writer,\n       @NonNull Map<Class<?>, ObjectEncoder<?>> objectEncoders,\n       @NonNull Map<Class<?>, ValueEncoder<?>> valueEncoders,\n-      ObjectEncoder<Object> fallbackEncoder) {\n+      ObjectEncoder<Object> fallbackEncoder,\n+      boolean ignoreNullValues) {\n     this.jsonWriter = new JsonWriter(writer);\n     this.objectEncoders = objectEncoders;\n     this.valueEncoders = valueEncoders;\n     this.fallbackEncoder = fallbackEncoder;\n+    this.ignoreNullValues = ignoreNullValues;\n   }\n \n   private JsonValueObjectEncoderContext(JsonValueObjectEncoderContext anotherContext) {\n     this.jsonWriter = anotherContext.jsonWriter;\n     this.objectEncoders = anotherContext.objectEncoders;\n     this.valueEncoders = anotherContext.valueEncoders;\n     this.fallbackEncoder = anotherContext.fallbackEncoder;\n+    this.ignoreNullValues = anotherContext.ignoreNullValues;\n   }\n \n   @NonNull\n   @Override\n   public JsonValueObjectEncoderContext add(@NonNull String name, @Nullable Object o)\n       throws IOException, EncodingException {\n-    maybeUnNest();\n-    jsonWriter.name(name);\n-    if (o == null) {\n-      jsonWriter.nullValue();\n-      return this;\n+    if (ignoreNullValues) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1NDA2OA=="}, "originalCommit": {"oid": "ae2ca18015214cd34cf01fe6730bf79bc4e2ac57"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1Njg2NQ==", "bodyText": "Actually, both methods internalAdd and internalAddIgnoreNullValues have a if (o == null) condition, so the second check still happens.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1175#discussion_r372656865", "createdAt": "2020-01-29T22:05:32Z", "author": {"login": "rlazo"}, "path": "encoders/firebase-encoders-json/src/json/java/com/google/firebase/encoders/json/JsonValueObjectEncoderContext.java", "diffHunk": "@@ -37,36 +37,37 @@\n   private final Map<Class<?>, ObjectEncoder<?>> objectEncoders;\n   private final Map<Class<?>, ValueEncoder<?>> valueEncoders;\n   private final ObjectEncoder<Object> fallbackEncoder;\n+  private final boolean ignoreNullValues;\n \n   JsonValueObjectEncoderContext(\n       @NonNull Writer writer,\n       @NonNull Map<Class<?>, ObjectEncoder<?>> objectEncoders,\n       @NonNull Map<Class<?>, ValueEncoder<?>> valueEncoders,\n-      ObjectEncoder<Object> fallbackEncoder) {\n+      ObjectEncoder<Object> fallbackEncoder,\n+      boolean ignoreNullValues) {\n     this.jsonWriter = new JsonWriter(writer);\n     this.objectEncoders = objectEncoders;\n     this.valueEncoders = valueEncoders;\n     this.fallbackEncoder = fallbackEncoder;\n+    this.ignoreNullValues = ignoreNullValues;\n   }\n \n   private JsonValueObjectEncoderContext(JsonValueObjectEncoderContext anotherContext) {\n     this.jsonWriter = anotherContext.jsonWriter;\n     this.objectEncoders = anotherContext.objectEncoders;\n     this.valueEncoders = anotherContext.valueEncoders;\n     this.fallbackEncoder = anotherContext.fallbackEncoder;\n+    this.ignoreNullValues = anotherContext.ignoreNullValues;\n   }\n \n   @NonNull\n   @Override\n   public JsonValueObjectEncoderContext add(@NonNull String name, @Nullable Object o)\n       throws IOException, EncodingException {\n-    maybeUnNest();\n-    jsonWriter.name(name);\n-    if (o == null) {\n-      jsonWriter.nullValue();\n-      return this;\n+    if (ignoreNullValues) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1NDA2OA=="}, "originalCommit": {"oid": "ae2ca18015214cd34cf01fe6730bf79bc4e2ac57"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1NzkxMw==", "bodyText": "Yes, in either case, o gets null-checked once. But if I just added that line to the original method, o would get null-checked again after jsonWriter.name(name);", "url": "https://github.com/firebase/firebase-android-sdk/pull/1175#discussion_r372657913", "createdAt": "2020-01-29T22:08:06Z", "author": {"login": "mrwillis21"}, "path": "encoders/firebase-encoders-json/src/json/java/com/google/firebase/encoders/json/JsonValueObjectEncoderContext.java", "diffHunk": "@@ -37,36 +37,37 @@\n   private final Map<Class<?>, ObjectEncoder<?>> objectEncoders;\n   private final Map<Class<?>, ValueEncoder<?>> valueEncoders;\n   private final ObjectEncoder<Object> fallbackEncoder;\n+  private final boolean ignoreNullValues;\n \n   JsonValueObjectEncoderContext(\n       @NonNull Writer writer,\n       @NonNull Map<Class<?>, ObjectEncoder<?>> objectEncoders,\n       @NonNull Map<Class<?>, ValueEncoder<?>> valueEncoders,\n-      ObjectEncoder<Object> fallbackEncoder) {\n+      ObjectEncoder<Object> fallbackEncoder,\n+      boolean ignoreNullValues) {\n     this.jsonWriter = new JsonWriter(writer);\n     this.objectEncoders = objectEncoders;\n     this.valueEncoders = valueEncoders;\n     this.fallbackEncoder = fallbackEncoder;\n+    this.ignoreNullValues = ignoreNullValues;\n   }\n \n   private JsonValueObjectEncoderContext(JsonValueObjectEncoderContext anotherContext) {\n     this.jsonWriter = anotherContext.jsonWriter;\n     this.objectEncoders = anotherContext.objectEncoders;\n     this.valueEncoders = anotherContext.valueEncoders;\n     this.fallbackEncoder = anotherContext.fallbackEncoder;\n+    this.ignoreNullValues = anotherContext.ignoreNullValues;\n   }\n \n   @NonNull\n   @Override\n   public JsonValueObjectEncoderContext add(@NonNull String name, @Nullable Object o)\n       throws IOException, EncodingException {\n-    maybeUnNest();\n-    jsonWriter.name(name);\n-    if (o == null) {\n-      jsonWriter.nullValue();\n-      return this;\n+    if (ignoreNullValues) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1NDA2OA=="}, "originalCommit": {"oid": "ae2ca18015214cd34cf01fe6730bf79bc4e2ac57"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY2NzcyNg==", "bodyText": "TL;DR; LGTM\nLong form: Actually, the conditional will short-circuit if ignoreNullValues==false, so the \"first check\" will only happen when ignoreNullValues=true and o != null, which most like is going to be most common case :-)", "url": "https://github.com/firebase/firebase-android-sdk/pull/1175#discussion_r372667726", "createdAt": "2020-01-29T22:31:33Z", "author": {"login": "rlazo"}, "path": "encoders/firebase-encoders-json/src/json/java/com/google/firebase/encoders/json/JsonValueObjectEncoderContext.java", "diffHunk": "@@ -37,36 +37,37 @@\n   private final Map<Class<?>, ObjectEncoder<?>> objectEncoders;\n   private final Map<Class<?>, ValueEncoder<?>> valueEncoders;\n   private final ObjectEncoder<Object> fallbackEncoder;\n+  private final boolean ignoreNullValues;\n \n   JsonValueObjectEncoderContext(\n       @NonNull Writer writer,\n       @NonNull Map<Class<?>, ObjectEncoder<?>> objectEncoders,\n       @NonNull Map<Class<?>, ValueEncoder<?>> valueEncoders,\n-      ObjectEncoder<Object> fallbackEncoder) {\n+      ObjectEncoder<Object> fallbackEncoder,\n+      boolean ignoreNullValues) {\n     this.jsonWriter = new JsonWriter(writer);\n     this.objectEncoders = objectEncoders;\n     this.valueEncoders = valueEncoders;\n     this.fallbackEncoder = fallbackEncoder;\n+    this.ignoreNullValues = ignoreNullValues;\n   }\n \n   private JsonValueObjectEncoderContext(JsonValueObjectEncoderContext anotherContext) {\n     this.jsonWriter = anotherContext.jsonWriter;\n     this.objectEncoders = anotherContext.objectEncoders;\n     this.valueEncoders = anotherContext.valueEncoders;\n     this.fallbackEncoder = anotherContext.fallbackEncoder;\n+    this.ignoreNullValues = anotherContext.ignoreNullValues;\n   }\n \n   @NonNull\n   @Override\n   public JsonValueObjectEncoderContext add(@NonNull String name, @Nullable Object o)\n       throws IOException, EncodingException {\n-    maybeUnNest();\n-    jsonWriter.name(name);\n-    if (o == null) {\n-      jsonWriter.nullValue();\n-      return this;\n+    if (ignoreNullValues) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1NDA2OA=="}, "originalCommit": {"oid": "ae2ca18015214cd34cf01fe6730bf79bc4e2ac57"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY2ODU0NQ==", "bodyText": "I think this is essentially what I was saying before. :) And I agree, it will most likely be the common case when ignoreNullValues is true.\n\nThe reason I didn't go with that approach is that, in the case ignoreNullValues is true, and o is not null, it will be null-checked a second time unnecessarily.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1175#discussion_r372668545", "createdAt": "2020-01-29T22:33:37Z", "author": {"login": "mrwillis21"}, "path": "encoders/firebase-encoders-json/src/json/java/com/google/firebase/encoders/json/JsonValueObjectEncoderContext.java", "diffHunk": "@@ -37,36 +37,37 @@\n   private final Map<Class<?>, ObjectEncoder<?>> objectEncoders;\n   private final Map<Class<?>, ValueEncoder<?>> valueEncoders;\n   private final ObjectEncoder<Object> fallbackEncoder;\n+  private final boolean ignoreNullValues;\n \n   JsonValueObjectEncoderContext(\n       @NonNull Writer writer,\n       @NonNull Map<Class<?>, ObjectEncoder<?>> objectEncoders,\n       @NonNull Map<Class<?>, ValueEncoder<?>> valueEncoders,\n-      ObjectEncoder<Object> fallbackEncoder) {\n+      ObjectEncoder<Object> fallbackEncoder,\n+      boolean ignoreNullValues) {\n     this.jsonWriter = new JsonWriter(writer);\n     this.objectEncoders = objectEncoders;\n     this.valueEncoders = valueEncoders;\n     this.fallbackEncoder = fallbackEncoder;\n+    this.ignoreNullValues = ignoreNullValues;\n   }\n \n   private JsonValueObjectEncoderContext(JsonValueObjectEncoderContext anotherContext) {\n     this.jsonWriter = anotherContext.jsonWriter;\n     this.objectEncoders = anotherContext.objectEncoders;\n     this.valueEncoders = anotherContext.valueEncoders;\n     this.fallbackEncoder = anotherContext.fallbackEncoder;\n+    this.ignoreNullValues = anotherContext.ignoreNullValues;\n   }\n \n   @NonNull\n   @Override\n   public JsonValueObjectEncoderContext add(@NonNull String name, @Nullable Object o)\n       throws IOException, EncodingException {\n-    maybeUnNest();\n-    jsonWriter.name(name);\n-    if (o == null) {\n-      jsonWriter.nullValue();\n-      return this;\n+    if (ignoreNullValues) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1NDA2OA=="}, "originalCommit": {"oid": "ae2ca18015214cd34cf01fe6730bf79bc4e2ac57"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 958, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}