{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3ODY5MjQ5", "number": 2087, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoxMjo0NlrOEydgPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzo0NDo0MFrOE4xK2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzQ3NjQ3OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoxMjo0NlrOHpHa-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzo0NTo0NFrOHsPTXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3NTI1OQ==", "bodyText": "Nit: Drop the exclamation mark.\nBut my larger question is why we are offline here. Is this because we kick off going online only after this API call finishes (like we discussed before)?", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r512875259", "createdAt": "2020-10-27T17:12:46Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3401,6 +3406,101 @@ public void onComplete(DatabaseError error, DatabaseReference ref) {\n     IntegrationTestHelpers.waitFor(semaphore);\n   }\n \n+  @Test\n+  public void emptyQueryGet() throws DatabaseException, InterruptedException {\n+    DatabaseReference node = IntegrationTestHelpers.getRandomNode();\n+    DatabaseConfig cfg = IntegrationTestHelpers.newTestConfig();\n+    final Semaphore semaphore = new Semaphore(0);\n+    node.get()\n+        .addOnCompleteListener(\n+            new OnCompleteListener<DataSnapshot>() {\n+              @Override\n+              public void onComplete(@NonNull Task<DataSnapshot> task) {\n+                assertTrue(task.isSuccessful());\n+                assertNotNull(task.getException());\n+                assertEquals(task.getException().getMessage(), \"Client offline with empty cache!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c1f6cd83b291dd0044f22872939c6bb016acdc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE1MDExMQ==", "bodyText": "That is a mistake, this test should never be offline.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r516150111", "createdAt": "2020-11-02T17:45:44Z", "author": {"login": "IanWyszynski"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3401,6 +3406,101 @@ public void onComplete(DatabaseError error, DatabaseReference ref) {\n     IntegrationTestHelpers.waitFor(semaphore);\n   }\n \n+  @Test\n+  public void emptyQueryGet() throws DatabaseException, InterruptedException {\n+    DatabaseReference node = IntegrationTestHelpers.getRandomNode();\n+    DatabaseConfig cfg = IntegrationTestHelpers.newTestConfig();\n+    final Semaphore semaphore = new Semaphore(0);\n+    node.get()\n+        .addOnCompleteListener(\n+            new OnCompleteListener<DataSnapshot>() {\n+              @Override\n+              public void onComplete(@NonNull Task<DataSnapshot> task) {\n+                assertTrue(task.isSuccessful());\n+                assertNotNull(task.getException());\n+                assertEquals(task.getException().getMessage(), \"Client offline with empty cache!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3NTI1OQ=="}, "originalCommit": {"oid": "a0c1f6cd83b291dd0044f22872939c6bb016acdc"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzQ4NDc4OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoxNDo0OVrOHpHgbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoxNDo0OVrOHpHgbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3NjY1NA==", "bodyText": "FWIW, you can just do:\ntry {\nDataSnapshot snap = node.get().get();\nfail(...);\n} catch (ExcecutionException e) {\n...\n}\n\nOptional... especially since I just remembered that this might not work since it may block the UI thread that is running the test.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r512876654", "createdAt": "2020-10-27T17:14:49Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3401,6 +3406,101 @@ public void onComplete(DatabaseError error, DatabaseReference ref) {\n     IntegrationTestHelpers.waitFor(semaphore);\n   }\n \n+  @Test\n+  public void emptyQueryGet() throws DatabaseException, InterruptedException {\n+    DatabaseReference node = IntegrationTestHelpers.getRandomNode();\n+    DatabaseConfig cfg = IntegrationTestHelpers.newTestConfig();\n+    final Semaphore semaphore = new Semaphore(0);\n+    node.get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c1f6cd83b291dd0044f22872939c6bb016acdc"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzUwMjA2OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoxOTowM1rOHpHrcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoxOTowM1rOHpHrcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg3OTQ3Mw==", "bodyText": "If calling .get() works for these tests, this could be as simple as\nref.setValue(42).get() followed by ref.get().get().", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r512879473", "createdAt": "2020-10-27T17:19:03Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3401,6 +3406,101 @@ public void onComplete(DatabaseError error, DatabaseReference ref) {\n     IntegrationTestHelpers.waitFor(semaphore);\n   }\n \n+  @Test\n+  public void emptyQueryGet() throws DatabaseException, InterruptedException {\n+    DatabaseReference node = IntegrationTestHelpers.getRandomNode();\n+    DatabaseConfig cfg = IntegrationTestHelpers.newTestConfig();\n+    final Semaphore semaphore = new Semaphore(0);\n+    node.get()\n+        .addOnCompleteListener(\n+            new OnCompleteListener<DataSnapshot>() {\n+              @Override\n+              public void onComplete(@NonNull Task<DataSnapshot> task) {\n+                assertTrue(task.isSuccessful());\n+                assertNotNull(task.getException());\n+                assertEquals(task.getException().getMessage(), \"Client offline with empty cache!\");\n+                semaphore.release();\n+              }\n+            });\n+    IntegrationTestHelpers.waitFor(semaphore);\n+  }\n+\n+  @Test\n+  public void offlineQueryGet() throws DatabaseException {\n+    DatabaseConfig cfg = IntegrationTestHelpers.newTestConfig();\n+    IntegrationTestHelpers.goOffline(cfg);\n+    DatabaseReference node = IntegrationTestHelpers.getRandomNode();\n+    node.get()\n+        .addOnCompleteListener(\n+            new OnCompleteListener<DataSnapshot>() {\n+              @Override\n+              public void onComplete(@NonNull Task<DataSnapshot> task) {\n+                Log.d(\"QueryTest\", \"offlineQueryGet onCompleteListener running.\");\n+                assertFalse(task.isSuccessful());\n+                assertNotNull(task.getException());\n+                assertEquals(task.getException().getMessage(), \"Client offline with empty cache!\");\n+              }\n+            });\n+  }\n+\n+  @Test\n+  public void getQueryBasic() throws DatabaseException, InterruptedException {\n+    DatabaseReference ref = IntegrationTestHelpers.getRandomNode();\n+    final Semaphore semaphore = new Semaphore(0);\n+    ref.setValue(42)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c1f6cd83b291dd0044f22872939c6bb016acdc"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzUwNzUyOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyMDoxMlrOHpHurw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyMDoxMlrOHpHurw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4MDMwMw==", "bodyText": "Please drop exclamation mark as this is user facing. Maybe make this \"Client is offline\".", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r512880303", "createdAt": "2020-10-27T17:20:12Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "diffHunk": "@@ -344,6 +346,21 @@ public void listen(\n     doIdleCheck();\n   }\n \n+  @Override\n+  public Task<Object> get(List<String> path, Map<String, Object> queryParams) {\n+    QuerySpec query = new QuerySpec(path, queryParams);\n+    TaskCompletionSource<Object> source = new TaskCompletionSource<>();\n+    Task<Object> task;\n+    if (connected()) {\n+      task = sendGet(query, source);\n+    } else {\n+      source.setException(new Exception(\"Client offline!\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c1f6cd83b291dd0044f22872939c6bb016acdc"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzUxNDI3OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/core/Repo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyMTo0M1rOHpHyzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyMTo0M1rOHpHyzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4MTM1OA==", "bodyText": "Please also port the logging changes from JS.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r512881358", "createdAt": "2020-10-27T17:21:43Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/Repo.java", "diffHunk": "@@ -462,6 +467,37 @@ public void onRequestResult(String optErrorCode, String optErrorMessage) {\n     this.rerunTransactions(affectedPath);\n   }\n \n+  public Task<DataSnapshot> getValue(Query query) {\n+    return connection\n+        .get(query.getPath().asList(), query.getSpec().getParams().getWireProtocolParams())\n+        .continueWithTask(\n+            new Continuation<Object, Task<DataSnapshot>>() {\n+              @Override\n+              public Task<DataSnapshot> then(@NonNull Task<Object> task) throws Exception {\n+                TaskCompletionSource<DataSnapshot> source = new TaskCompletionSource<>();\n+                if (!task.isSuccessful()) {\n+                  Node cached =\n+                      serverSyncTree.calcCompleteEventCache(query.getPath(), new ArrayList<>());\n+                  if (cached.isEmpty()) {\n+                    source.setException(new Exception(\"Client offline with empty cache!\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c1f6cd83b291dd0044f22872939c6bb016acdc"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzUyMDA2OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyMjo1M1rOHpH2cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzoyNzo1OFrOHsOnFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4MjI5MA==", "bodyText": "Do we need to special case 404 as well and treat it as a successful response?", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r512882290", "createdAt": "2020-10-27T17:22:53Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "diffHunk": "@@ -1049,6 +1066,32 @@ public void onResponse(Map<String, Object> response) {\n         });\n   }\n \n+  private Task<Object> sendGet(final QuerySpec query, TaskCompletionSource<Object> source) {\n+    Map<String, Object> request = new HashMap<String, Object>();\n+    request.put(REQUEST_PATH, ConnectionUtils.pathToString(query.path));\n+    request.put(REQUEST_QUERIES, query.queryParams);\n+    sendAction(\n+        REQUEST_ACTION_QUERY,\n+        request,\n+        new ConnectionRequestCallback() {\n+          @Override\n+          public void onResponse(Map<String, Object> response) {\n+            String status = (String) response.get(REQUEST_STATUS);\n+            if (status.equals(\"ok\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c1f6cd83b291dd0044f22872939c6bb016acdc"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEzODc3Mw==", "bodyText": "We would return null if no data matches the query.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r516138773", "createdAt": "2020-11-02T17:27:58Z", "author": {"login": "IanWyszynski"}, "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "diffHunk": "@@ -1049,6 +1066,32 @@ public void onResponse(Map<String, Object> response) {\n         });\n   }\n \n+  private Task<Object> sendGet(final QuerySpec query, TaskCompletionSource<Object> source) {\n+    Map<String, Object> request = new HashMap<String, Object>();\n+    request.put(REQUEST_PATH, ConnectionUtils.pathToString(query.path));\n+    request.put(REQUEST_QUERIES, query.queryParams);\n+    sendAction(\n+        REQUEST_ACTION_QUERY,\n+        request,\n+        new ConnectionRequestCallback() {\n+          @Override\n+          public void onResponse(Map<String, Object> response) {\n+            String status = (String) response.get(REQUEST_STATUS);\n+            if (status.equals(\"ok\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4MjI5MA=="}, "originalCommit": {"oid": "a0c1f6cd83b291dd0044f22872939c6bb016acdc"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzUyMzI2OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyMzozMVrOHpH4fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNzowNzowN1rOHsNnrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4MjgxNQ==", "bodyText": "Does this need to be added to the Web PR?", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r512882815", "createdAt": "2020-10-27T17:23:31Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "diffHunk": "@@ -1049,6 +1066,32 @@ public void onResponse(Map<String, Object> response) {\n         });\n   }\n \n+  private Task<Object> sendGet(final QuerySpec query, TaskCompletionSource<Object> source) {\n+    Map<String, Object> request = new HashMap<String, Object>();\n+    request.put(REQUEST_PATH, ConnectionUtils.pathToString(query.path));\n+    request.put(REQUEST_QUERIES, query.queryParams);\n+    sendAction(\n+        REQUEST_ACTION_QUERY,\n+        request,\n+        new ConnectionRequestCallback() {\n+          @Override\n+          public void onResponse(Map<String, Object> response) {\n+            String status = (String) response.get(REQUEST_STATUS);\n+            if (status.equals(\"ok\")) {\n+              String pathString = (String) response.get(SERVER_DATA_UPDATE_PATH);\n+              List<String> path = ConnectionUtils.stringToPath(pathString);\n+              Object body = response.get(SERVER_DATA_UPDATE_BODY);\n+              Long tagNumber = ConnectionUtils.longFromObject(response.get(SERVER_DATA_TAG));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c1f6cd83b291dd0044f22872939c6bb016acdc"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEyMjU0MA==", "bodyText": "No I think this was a mistake in this PR. Gets won't send tags.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r516122540", "createdAt": "2020-11-02T17:07:07Z", "author": {"login": "IanWyszynski"}, "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "diffHunk": "@@ -1049,6 +1066,32 @@ public void onResponse(Map<String, Object> response) {\n         });\n   }\n \n+  private Task<Object> sendGet(final QuerySpec query, TaskCompletionSource<Object> source) {\n+    Map<String, Object> request = new HashMap<String, Object>();\n+    request.put(REQUEST_PATH, ConnectionUtils.pathToString(query.path));\n+    request.put(REQUEST_QUERIES, query.queryParams);\n+    sendAction(\n+        REQUEST_ACTION_QUERY,\n+        request,\n+        new ConnectionRequestCallback() {\n+          @Override\n+          public void onResponse(Map<String, Object> response) {\n+            String status = (String) response.get(REQUEST_STATUS);\n+            if (status.equals(\"ok\")) {\n+              String pathString = (String) response.get(SERVER_DATA_UPDATE_PATH);\n+              List<String> path = ConnectionUtils.stringToPath(pathString);\n+              Object body = response.get(SERVER_DATA_UPDATE_BODY);\n+              Long tagNumber = ConnectionUtils.longFromObject(response.get(SERVER_DATA_TAG));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4MjgxNQ=="}, "originalCommit": {"oid": "a0c1f6cd83b291dd0044f22872939c6bb016acdc"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTExMjM4OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzoyMDoxNFrOHs48ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzoyMDoxNFrOHs48ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgzMjM5NA==", "bodyText": "I am not sure what the intent of these 5 lines is. It seems like the test would be the same without them?", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r516832394", "createdAt": "2020-11-03T17:20:14Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3401,6 +3407,140 @@ public void onComplete(DatabaseError error, DatabaseReference ref) {\n     IntegrationTestHelpers.waitFor(semaphore);\n   }\n \n+  private static FirebaseApp appForDatabaseUrl(String url, String name) {\n+    return FirebaseApp.initializeApp(\n+        InstrumentationRegistry.getInstrumentation().getTargetContext(),\n+        new FirebaseOptions.Builder()\n+            .setApplicationId(\"appid\")\n+            .setApiKey(\"apikey\")\n+            .setDatabaseUrl(url)\n+            .build(),\n+        name);\n+  }\n+\n+  @Test\n+  public void emptyQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    try {\n+      Tasks.await(db.getReference(\"dummy/\").setValue(42L));\n+      assertNull(Tasks.await(db.getReference(\"null/\").get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void offlineQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference node = db.getReference();\n+    try {\n+      Tasks.await(node.setValue(42L));\n+    } catch (ExecutionException e) {\n+      fail();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10a11eee9e058f7f4e8a1fcc26146959cbab8e8"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTE3MTg5OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzozNToyNFrOHs5hvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzozNToyNFrOHs5hvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0MTkxOQ==", "bodyText": "You can just add ExecutionException to throws.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r516841919", "createdAt": "2020-11-03T17:35:24Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3401,6 +3407,140 @@ public void onComplete(DatabaseError error, DatabaseReference ref) {\n     IntegrationTestHelpers.waitFor(semaphore);\n   }\n \n+  private static FirebaseApp appForDatabaseUrl(String url, String name) {\n+    return FirebaseApp.initializeApp(\n+        InstrumentationRegistry.getInstrumentation().getTargetContext(),\n+        new FirebaseOptions.Builder()\n+            .setApplicationId(\"appid\")\n+            .setApiKey(\"apikey\")\n+            .setDatabaseUrl(url)\n+            .build(),\n+        name);\n+  }\n+\n+  @Test\n+  public void emptyQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    try {\n+      Tasks.await(db.getReference(\"dummy/\").setValue(42L));\n+      assertNull(Tasks.await(db.getReference(\"null/\").get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void offlineQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference node = db.getReference();\n+    try {\n+      Tasks.await(node.setValue(42L));\n+    } catch (ExecutionException e) {\n+      fail();\n+    }\n+    db.goOffline();\n+    try {\n+      Tasks.await(node.get());\n+    } catch (ExecutionException e) {\n+      assertEquals(e.getCause().getMessage(), \"Client is offline\");\n+      return;\n+    }\n+    fail(\"Client get succeeded even though offline.\");\n+  }\n+\n+  @Test\n+  public void getQueryBasic() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference node = db.getReference();\n+    try {\n+      Tasks.await(node.setValue(42));\n+      assertEquals(42L, Tasks.await(node.get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10a11eee9e058f7f4e8a1fcc26146959cbab8e8"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTE3MzU2OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzozNTo1M1rOHs5i3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzozNTo1M1rOHs5i3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0MjIwNQ==", "bodyText": "You can just add ExecutionException to throws.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r516842205", "createdAt": "2020-11-03T17:35:53Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3401,6 +3407,140 @@ public void onComplete(DatabaseError error, DatabaseReference ref) {\n     IntegrationTestHelpers.waitFor(semaphore);\n   }\n \n+  private static FirebaseApp appForDatabaseUrl(String url, String name) {\n+    return FirebaseApp.initializeApp(\n+        InstrumentationRegistry.getInstrumentation().getTargetContext(),\n+        new FirebaseOptions.Builder()\n+            .setApplicationId(\"appid\")\n+            .setApiKey(\"apikey\")\n+            .setDatabaseUrl(url)\n+            .build(),\n+        name);\n+  }\n+\n+  @Test\n+  public void emptyQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    try {\n+      Tasks.await(db.getReference(\"dummy/\").setValue(42L));\n+      assertNull(Tasks.await(db.getReference(\"null/\").get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void offlineQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference node = db.getReference();\n+    try {\n+      Tasks.await(node.setValue(42L));\n+    } catch (ExecutionException e) {\n+      fail();\n+    }\n+    db.goOffline();\n+    try {\n+      Tasks.await(node.get());\n+    } catch (ExecutionException e) {\n+      assertEquals(e.getCause().getMessage(), \"Client is offline\");\n+      return;\n+    }\n+    fail(\"Client get succeeded even though offline.\");\n+  }\n+\n+  @Test\n+  public void getQueryBasic() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference node = db.getReference();\n+    try {\n+      Tasks.await(node.setValue(42));\n+      assertEquals(42L, Tasks.await(node.get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void getQueryCached()\n+      throws DatabaseException, InterruptedException, TimeoutException, TestFailure {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getAltNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference ref = db.getReference();\n+    final Semaphore semaphore = new Semaphore(0);\n+    ValueEventListener listener =\n+        new ValueEventListener() {\n+          @Override\n+          public void onDataChange(@NonNull DataSnapshot snapshot) {\n+            if (snapshot.getValue() != null && snapshot.getValue().equals(42L)) {\n+              semaphore.release();\n+            }\n+          }\n+\n+          @Override\n+          public void onCancelled(@NonNull DatabaseError error) {}\n+        };\n+    ref.addValueEventListener(listener);\n+    ref.setValue(42L);\n+    IntegrationTestHelpers.waitFor(semaphore);\n+    db.goOffline();\n+    try {\n+      // Since we still have a listener on `ref`, the 42L should be cached here.\n+      assertEquals(42L, Tasks.await(ref.get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10a11eee9e058f7f4e8a1fcc26146959cbab8e8"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTE3OTE2OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzozNzoyOVrOHs5mbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzozNzoyOVrOHs5mbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0MzExOQ==", "bodyText": "Maybe s/semaphore/readerSemphore", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r516843119", "createdAt": "2020-11-03T17:37:29Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3401,6 +3407,140 @@ public void onComplete(DatabaseError error, DatabaseReference ref) {\n     IntegrationTestHelpers.waitFor(semaphore);\n   }\n \n+  private static FirebaseApp appForDatabaseUrl(String url, String name) {\n+    return FirebaseApp.initializeApp(\n+        InstrumentationRegistry.getInstrumentation().getTargetContext(),\n+        new FirebaseOptions.Builder()\n+            .setApplicationId(\"appid\")\n+            .setApiKey(\"apikey\")\n+            .setDatabaseUrl(url)\n+            .build(),\n+        name);\n+  }\n+\n+  @Test\n+  public void emptyQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    try {\n+      Tasks.await(db.getReference(\"dummy/\").setValue(42L));\n+      assertNull(Tasks.await(db.getReference(\"null/\").get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void offlineQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference node = db.getReference();\n+    try {\n+      Tasks.await(node.setValue(42L));\n+    } catch (ExecutionException e) {\n+      fail();\n+    }\n+    db.goOffline();\n+    try {\n+      Tasks.await(node.get());\n+    } catch (ExecutionException e) {\n+      assertEquals(e.getCause().getMessage(), \"Client is offline\");\n+      return;\n+    }\n+    fail(\"Client get succeeded even though offline.\");\n+  }\n+\n+  @Test\n+  public void getQueryBasic() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference node = db.getReference();\n+    try {\n+      Tasks.await(node.setValue(42));\n+      assertEquals(42L, Tasks.await(node.get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void getQueryCached()\n+      throws DatabaseException, InterruptedException, TimeoutException, TestFailure {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getAltNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference ref = db.getReference();\n+    final Semaphore semaphore = new Semaphore(0);\n+    ValueEventListener listener =\n+        new ValueEventListener() {\n+          @Override\n+          public void onDataChange(@NonNull DataSnapshot snapshot) {\n+            if (snapshot.getValue() != null && snapshot.getValue().equals(42L)) {\n+              semaphore.release();\n+            }\n+          }\n+\n+          @Override\n+          public void onCancelled(@NonNull DatabaseError error) {}\n+        };\n+    ref.addValueEventListener(listener);\n+    ref.setValue(42L);\n+    IntegrationTestHelpers.waitFor(semaphore);\n+    db.goOffline();\n+    try {\n+      // Since we still have a listener on `ref`, the 42L should be cached here.\n+      assertEquals(42L, Tasks.await(ref.get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    } finally {\n+      ref.removeEventListener(listener);\n+    }\n+  }\n+\n+  @Test\n+  public void getQuerySkipsCacheWhenOnline()\n+      throws DatabaseException, InterruptedException, ExecutionException, TestFailure,\n+          TimeoutException {\n+    FirebaseApp readerApp =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseApp writerApp =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase readerDb = FirebaseDatabase.getInstance(readerApp);\n+    FirebaseDatabase writerDb = FirebaseDatabase.getInstance(writerApp);\n+    DatabaseReference reader = readerDb.getReference();\n+    DatabaseReference writer = writerDb.getReference();\n+\n+    final Semaphore semaphore = new Semaphore(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10a11eee9e058f7f4e8a1fcc26146959cbab8e8"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTE4MjEyOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzozODoxMVrOHs5oOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzo0OTo1M1rOHtEfrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0MzU3OQ==", "bodyText": "Did you consider using ReadFuture to simplify this setup?", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r516843579", "createdAt": "2020-11-03T17:38:11Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3401,6 +3407,140 @@ public void onComplete(DatabaseError error, DatabaseReference ref) {\n     IntegrationTestHelpers.waitFor(semaphore);\n   }\n \n+  private static FirebaseApp appForDatabaseUrl(String url, String name) {\n+    return FirebaseApp.initializeApp(\n+        InstrumentationRegistry.getInstrumentation().getTargetContext(),\n+        new FirebaseOptions.Builder()\n+            .setApplicationId(\"appid\")\n+            .setApiKey(\"apikey\")\n+            .setDatabaseUrl(url)\n+            .build(),\n+        name);\n+  }\n+\n+  @Test\n+  public void emptyQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    try {\n+      Tasks.await(db.getReference(\"dummy/\").setValue(42L));\n+      assertNull(Tasks.await(db.getReference(\"null/\").get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void offlineQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference node = db.getReference();\n+    try {\n+      Tasks.await(node.setValue(42L));\n+    } catch (ExecutionException e) {\n+      fail();\n+    }\n+    db.goOffline();\n+    try {\n+      Tasks.await(node.get());\n+    } catch (ExecutionException e) {\n+      assertEquals(e.getCause().getMessage(), \"Client is offline\");\n+      return;\n+    }\n+    fail(\"Client get succeeded even though offline.\");\n+  }\n+\n+  @Test\n+  public void getQueryBasic() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference node = db.getReference();\n+    try {\n+      Tasks.await(node.setValue(42));\n+      assertEquals(42L, Tasks.await(node.get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void getQueryCached()\n+      throws DatabaseException, InterruptedException, TimeoutException, TestFailure {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getAltNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference ref = db.getReference();\n+    final Semaphore semaphore = new Semaphore(0);\n+    ValueEventListener listener =\n+        new ValueEventListener() {\n+          @Override\n+          public void onDataChange(@NonNull DataSnapshot snapshot) {\n+            if (snapshot.getValue() != null && snapshot.getValue().equals(42L)) {\n+              semaphore.release();\n+            }\n+          }\n+\n+          @Override\n+          public void onCancelled(@NonNull DatabaseError error) {}\n+        };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10a11eee9e058f7f4e8a1fcc26146959cbab8e8"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyMTYxMw==", "bodyText": "After talking offline, this is not possible since we need to run line 3489 and 3490.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r517021613", "createdAt": "2020-11-03T23:49:53Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3401,6 +3407,140 @@ public void onComplete(DatabaseError error, DatabaseReference ref) {\n     IntegrationTestHelpers.waitFor(semaphore);\n   }\n \n+  private static FirebaseApp appForDatabaseUrl(String url, String name) {\n+    return FirebaseApp.initializeApp(\n+        InstrumentationRegistry.getInstrumentation().getTargetContext(),\n+        new FirebaseOptions.Builder()\n+            .setApplicationId(\"appid\")\n+            .setApiKey(\"apikey\")\n+            .setDatabaseUrl(url)\n+            .build(),\n+        name);\n+  }\n+\n+  @Test\n+  public void emptyQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    try {\n+      Tasks.await(db.getReference(\"dummy/\").setValue(42L));\n+      assertNull(Tasks.await(db.getReference(\"null/\").get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void offlineQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference node = db.getReference();\n+    try {\n+      Tasks.await(node.setValue(42L));\n+    } catch (ExecutionException e) {\n+      fail();\n+    }\n+    db.goOffline();\n+    try {\n+      Tasks.await(node.get());\n+    } catch (ExecutionException e) {\n+      assertEquals(e.getCause().getMessage(), \"Client is offline\");\n+      return;\n+    }\n+    fail(\"Client get succeeded even though offline.\");\n+  }\n+\n+  @Test\n+  public void getQueryBasic() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference node = db.getReference();\n+    try {\n+      Tasks.await(node.setValue(42));\n+      assertEquals(42L, Tasks.await(node.get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void getQueryCached()\n+      throws DatabaseException, InterruptedException, TimeoutException, TestFailure {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getAltNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference ref = db.getReference();\n+    final Semaphore semaphore = new Semaphore(0);\n+    ValueEventListener listener =\n+        new ValueEventListener() {\n+          @Override\n+          public void onDataChange(@NonNull DataSnapshot snapshot) {\n+            if (snapshot.getValue() != null && snapshot.getValue().equals(42L)) {\n+              semaphore.release();\n+            }\n+          }\n+\n+          @Override\n+          public void onCancelled(@NonNull DatabaseError error) {}\n+        };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0MzU3OQ=="}, "originalCommit": {"oid": "a10a11eee9e058f7f4e8a1fcc26146959cbab8e8"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTIwNzA4OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzo0NDo1M1rOHs533w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzo0NDo1M1rOHs533w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg0NzU4Mw==", "bodyText": "Our implementation should also go online without this write. Right now, this test throws \"Client is offline\" without the previous write. We need to wait until the client goes online and then return the result.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r516847583", "createdAt": "2020-11-03T17:44:53Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3401,6 +3407,140 @@ public void onComplete(DatabaseError error, DatabaseReference ref) {\n     IntegrationTestHelpers.waitFor(semaphore);\n   }\n \n+  private static FirebaseApp appForDatabaseUrl(String url, String name) {\n+    return FirebaseApp.initializeApp(\n+        InstrumentationRegistry.getInstrumentation().getTargetContext(),\n+        new FirebaseOptions.Builder()\n+            .setApplicationId(\"appid\")\n+            .setApiKey(\"apikey\")\n+            .setDatabaseUrl(url)\n+            .build(),\n+        name);\n+  }\n+\n+  @Test\n+  public void emptyQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    try {\n+      Tasks.await(db.getReference(\"dummy/\").setValue(42L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10a11eee9e058f7f4e8a1fcc26146959cbab8e8"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTMyMzY3OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODoxNjoxOFrOHs7AEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxODoxNjoxOFrOHs7AEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg2NjA2Ng==", "bodyText": "Please also add a test that shows the the value is still cached even when there are no remaining listeners. The SDK should keep up to 10 MB of least recently used data. For this to work, you have to track the query via the persistence manager. See here: \n  \n    \n      firebase-android-sdk/firebase-database/src/main/java/com/google/firebase/database/core/SyncTree.java\n    \n    \n         Line 505\n      in\n      d920962\n    \n    \n    \n    \n\n        \n          \n           persistenceManager.setQueryActive(query);", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r516866066", "createdAt": "2020-11-03T18:16:18Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3401,6 +3407,140 @@ public void onComplete(DatabaseError error, DatabaseReference ref) {\n     IntegrationTestHelpers.waitFor(semaphore);\n   }\n \n+  private static FirebaseApp appForDatabaseUrl(String url, String name) {\n+    return FirebaseApp.initializeApp(\n+        InstrumentationRegistry.getInstrumentation().getTargetContext(),\n+        new FirebaseOptions.Builder()\n+            .setApplicationId(\"appid\")\n+            .setApiKey(\"apikey\")\n+            .setDatabaseUrl(url)\n+            .build(),\n+        name);\n+  }\n+\n+  @Test\n+  public void emptyQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    try {\n+      Tasks.await(db.getReference(\"dummy/\").setValue(42L));\n+      assertNull(Tasks.await(db.getReference(\"null/\").get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void offlineQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference node = db.getReference();\n+    try {\n+      Tasks.await(node.setValue(42L));\n+    } catch (ExecutionException e) {\n+      fail();\n+    }\n+    db.goOffline();\n+    try {\n+      Tasks.await(node.get());\n+    } catch (ExecutionException e) {\n+      assertEquals(e.getCause().getMessage(), \"Client is offline\");\n+      return;\n+    }\n+    fail(\"Client get succeeded even though offline.\");\n+  }\n+\n+  @Test\n+  public void getQueryBasic() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference node = db.getReference();\n+    try {\n+      Tasks.await(node.setValue(42));\n+      assertEquals(42L, Tasks.await(node.get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void getQueryCached()\n+      throws DatabaseException, InterruptedException, TimeoutException, TestFailure {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getAltNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference ref = db.getReference();\n+    final Semaphore semaphore = new Semaphore(0);\n+    ValueEventListener listener =\n+        new ValueEventListener() {\n+          @Override\n+          public void onDataChange(@NonNull DataSnapshot snapshot) {\n+            if (snapshot.getValue() != null && snapshot.getValue().equals(42L)) {\n+              semaphore.release();\n+            }\n+          }\n+\n+          @Override\n+          public void onCancelled(@NonNull DatabaseError error) {}\n+        };\n+    ref.addValueEventListener(listener);\n+    ref.setValue(42L);\n+    IntegrationTestHelpers.waitFor(semaphore);\n+    db.goOffline();\n+    try {\n+      // Since we still have a listener on `ref`, the 42L should be cached here.\n+      assertEquals(42L, Tasks.await(ref.get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    } finally {\n+      ref.removeEventListener(listener);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10a11eee9e058f7f4e8a1fcc26146959cbab8e8"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODE5NjgxOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzo0ODozNlrOHuPIBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzo0ODozNlrOHuPIBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI0NDM1OQ==", "bodyText": "I think this catch can be removed.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r518244359", "createdAt": "2020-11-05T17:48:36Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3401,6 +3407,165 @@ public void onComplete(DatabaseError error, DatabaseReference ref) {\n     IntegrationTestHelpers.waitFor(semaphore);\n   }\n \n+  private static FirebaseApp appForDatabaseUrl(String url, String name) {\n+    return FirebaseApp.initializeApp(\n+        InstrumentationRegistry.getInstrumentation().getTargetContext(),\n+        new FirebaseOptions.Builder()\n+            .setApplicationId(\"appid\")\n+            .setApiKey(\"apikey\")\n+            .setDatabaseUrl(url)\n+            .build(),\n+        name);\n+  }\n+\n+  @Test\n+  public void emptyQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    try {\n+      assertNull(Tasks.await(db.getReference(UUID.randomUUID().toString()).get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f55197738e97383d4516ceb88cd71c9d5992c98d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODIxNjA5OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzo1MzoxNlrOHuPTvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzo1MzoxNlrOHuPTvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI0NzM1OQ==", "bodyText": "This catch can be removed.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r518247359", "createdAt": "2020-11-05T17:53:16Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3401,6 +3407,165 @@ public void onComplete(DatabaseError error, DatabaseReference ref) {\n     IntegrationTestHelpers.waitFor(semaphore);\n   }\n \n+  private static FirebaseApp appForDatabaseUrl(String url, String name) {\n+    return FirebaseApp.initializeApp(\n+        InstrumentationRegistry.getInstrumentation().getTargetContext(),\n+        new FirebaseOptions.Builder()\n+            .setApplicationId(\"appid\")\n+            .setApiKey(\"apikey\")\n+            .setDatabaseUrl(url)\n+            .build(),\n+        name);\n+  }\n+\n+  @Test\n+  public void emptyQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    try {\n+      assertNull(Tasks.await(db.getReference(UUID.randomUUID().toString()).get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void offlineQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    db.setLogLevel(Logger.Level.DEBUG);\n+    DatabaseReference node = db.getReference();\n+    db.goOffline();\n+    try {\n+      Tasks.await(node.get());\n+    } catch (ExecutionException e) {\n+      assertEquals(e.getCause().getMessage(), \"Client is offline\");\n+      return;\n+    }\n+    fail(\"Client get succeeded even though offline.\");\n+  }\n+\n+  @Test\n+  public void getQueryBasic() throws DatabaseException, InterruptedException, ExecutionException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference node = db.getReference();\n+    Tasks.await(node.setValue(42));\n+    assertEquals(42L, Tasks.await(node.get()).getValue());\n+  }\n+\n+  @Test\n+  public void getQueryCached()\n+      throws DatabaseException, InterruptedException, TimeoutException, TestFailure,\n+          ExecutionException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getAltNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference ref = db.getReference();\n+    final Semaphore semaphore = new Semaphore(0);\n+    ValueEventListener listener =\n+        new ValueEventListener() {\n+          @Override\n+          public void onDataChange(@NonNull DataSnapshot snapshot) {\n+            if (snapshot.getValue() != null && snapshot.getValue().equals(42L)) {\n+              semaphore.release();\n+            }\n+          }\n+\n+          @Override\n+          public void onCancelled(@NonNull DatabaseError error) {}\n+        };\n+    ref.addValueEventListener(listener);\n+    ref.setValue(42L);\n+    IntegrationTestHelpers.waitFor(semaphore);\n+    db.goOffline();\n+    try {\n+      // Since we still have a listener on `ref`, the 42L should be cached here.\n+      assertEquals(42L, Tasks.await(ref.get()).getValue());\n+    } finally {\n+      ref.removeEventListener(listener);\n+    }\n+  }\n+\n+  @Test\n+  public void getRetrievesLatestServerValue()\n+      throws DatabaseException, InterruptedException, ExecutionException, TestFailure,\n+          TimeoutException {\n+    FirebaseApp readerApp =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseApp writerApp =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase readerDb = FirebaseDatabase.getInstance(readerApp);\n+    FirebaseDatabase writerDb = FirebaseDatabase.getInstance(writerApp);\n+    DatabaseReference reader = readerDb.getReference();\n+    DatabaseReference writer = writerDb.getReference();\n+\n+    final Semaphore readerSemaphore = new Semaphore(0);\n+    reader.addValueEventListener(\n+        new ValueEventListener() {\n+          @Override\n+          public void onDataChange(@NonNull DataSnapshot snapshot) {\n+            if (snapshot.getValue() != null && snapshot.getValue().equals(42L)) {\n+              readerSemaphore.release();\n+            }\n+          }\n+\n+          @Override\n+          public void onCancelled(@NonNull DatabaseError error) {}\n+        });\n+\n+    WriteFuture write = new WriteFuture(writer, 42L);\n+    assertNull(write.timedGet());\n+    IntegrationTestHelpers.waitFor(readerSemaphore);\n+\n+    write = new WriteFuture(writer, 43L);\n+    assertNull(write.timedGet());\n+\n+    try {\n+      assertEquals(43L, Tasks.await(reader.get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f55197738e97383d4516ceb88cd71c9d5992c98d"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODI5OTg1OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoxMDowNVrOHuQHwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoxMDowNVrOHuQHwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2MDY3NA==", "bodyText": "I think my comment earlier wasn't applicable... but it does seem that this is now a ReadFuture.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r518260674", "createdAt": "2020-11-05T18:10:05Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3401,6 +3407,165 @@ public void onComplete(DatabaseError error, DatabaseReference ref) {\n     IntegrationTestHelpers.waitFor(semaphore);\n   }\n \n+  private static FirebaseApp appForDatabaseUrl(String url, String name) {\n+    return FirebaseApp.initializeApp(\n+        InstrumentationRegistry.getInstrumentation().getTargetContext(),\n+        new FirebaseOptions.Builder()\n+            .setApplicationId(\"appid\")\n+            .setApiKey(\"apikey\")\n+            .setDatabaseUrl(url)\n+            .build(),\n+        name);\n+  }\n+\n+  @Test\n+  public void emptyQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    try {\n+      assertNull(Tasks.await(db.getReference(UUID.randomUUID().toString()).get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void offlineQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    db.setLogLevel(Logger.Level.DEBUG);\n+    DatabaseReference node = db.getReference();\n+    db.goOffline();\n+    try {\n+      Tasks.await(node.get());\n+    } catch (ExecutionException e) {\n+      assertEquals(e.getCause().getMessage(), \"Client is offline\");\n+      return;\n+    }\n+    fail(\"Client get succeeded even though offline.\");\n+  }\n+\n+  @Test\n+  public void getQueryBasic() throws DatabaseException, InterruptedException, ExecutionException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference node = db.getReference();\n+    Tasks.await(node.setValue(42));\n+    assertEquals(42L, Tasks.await(node.get()).getValue());\n+  }\n+\n+  @Test\n+  public void getQueryCached()\n+      throws DatabaseException, InterruptedException, TimeoutException, TestFailure,\n+          ExecutionException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getAltNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    DatabaseReference ref = db.getReference();\n+    final Semaphore semaphore = new Semaphore(0);\n+    ValueEventListener listener =\n+        new ValueEventListener() {\n+          @Override\n+          public void onDataChange(@NonNull DataSnapshot snapshot) {\n+            if (snapshot.getValue() != null && snapshot.getValue().equals(42L)) {\n+              semaphore.release();\n+            }\n+          }\n+\n+          @Override\n+          public void onCancelled(@NonNull DatabaseError error) {}\n+        };\n+    ref.addValueEventListener(listener);\n+    ref.setValue(42L);\n+    IntegrationTestHelpers.waitFor(semaphore);\n+    db.goOffline();\n+    try {\n+      // Since we still have a listener on `ref`, the 42L should be cached here.\n+      assertEquals(42L, Tasks.await(ref.get()).getValue());\n+    } finally {\n+      ref.removeEventListener(listener);\n+    }\n+  }\n+\n+  @Test\n+  public void getRetrievesLatestServerValue()\n+      throws DatabaseException, InterruptedException, ExecutionException, TestFailure,\n+          TimeoutException {\n+    FirebaseApp readerApp =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseApp writerApp =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase readerDb = FirebaseDatabase.getInstance(readerApp);\n+    FirebaseDatabase writerDb = FirebaseDatabase.getInstance(writerApp);\n+    DatabaseReference reader = readerDb.getReference();\n+    DatabaseReference writer = writerDb.getReference();\n+\n+    final Semaphore readerSemaphore = new Semaphore(0);\n+    reader.addValueEventListener(\n+        new ValueEventListener() {\n+          @Override\n+          public void onDataChange(@NonNull DataSnapshot snapshot) {\n+            if (snapshot.getValue() != null && snapshot.getValue().equals(42L)) {\n+              readerSemaphore.release();\n+            }\n+          }\n+\n+          @Override\n+          public void onCancelled(@NonNull DatabaseError error) {}\n+        });\n+\n+    WriteFuture write = new WriteFuture(writer, 42L);\n+    assertNull(write.timedGet());\n+    IntegrationTestHelpers.waitFor(readerSemaphore);\n+\n+    write = new WriteFuture(writer, 43L);\n+    assertNull(write.timedGet());\n+\n+    try {\n+      assertEquals(43L, Tasks.await(reader.get()).getValue());\n+    } catch (ExecutionException e) {\n+      fail(e.getMessage());\n+    }\n+  }\n+\n+  @Test\n+  public void getUpdatesPersistenceCacheWhenEnabled()\n+      throws DatabaseException, InterruptedException, ExecutionException, TestFailure,\n+          TimeoutException {\n+    FirebaseApp readerApp =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseApp writerApp =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase readerDb = FirebaseDatabase.getInstance(readerApp);\n+    readerDb.setPersistenceEnabled(true);\n+    FirebaseDatabase writerDb = FirebaseDatabase.getInstance(writerApp);\n+    DatabaseReference reader = readerDb.getReference();\n+    DatabaseReference writer = writerDb.getReference();\n+\n+    assertNull(new WriteFuture(writer, 42L).timedGet());\n+    assertEquals(42L, Tasks.await(reader.get()).getValue());\n+\n+    readerDb.goOffline();\n+\n+    Semaphore semaphore = new Semaphore(0);\n+    reader.addListenerForSingleValueEvent(\n+        new ValueEventListener() {\n+          @Override\n+          public void onDataChange(@NonNull DataSnapshot snapshot) {\n+            if (snapshot.getValue() != null && snapshot.getValue().equals(42L)) {\n+              semaphore.release();\n+            }\n+          }\n+\n+          @Override\n+          public void onCancelled(@NonNull DatabaseError error) {}\n+        });\n+    IntegrationTestHelpers.waitFor(semaphore);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f55197738e97383d4516ceb88cd71c9d5992c98d"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODM0OTA0OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoyMzo0MlrOHuQmug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoyMzo0MlrOHuQmug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI2ODYwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<String, Object> request;\n          \n          \n            \n                private ConnectionRequestCallback onComplete;\n          \n          \n            \n                private String action;\n          \n          \n            \n                private AtomicBoolean sent;\n          \n          \n            \n                private final Map<String, Object> request;\n          \n          \n            \n                private final ConnectionRequestCallback onComplete;\n          \n          \n            \n                private final String action;\n          \n          \n            \n                private final AtomicBoolean sent;", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r518268602", "createdAt": "2020-11-05T18:23:42Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "diffHunk": "@@ -109,6 +113,41 @@ public String toString() {\n     }\n   }\n \n+  private static class OutstandingGet {\n+    private Map<String, Object> request;\n+    private ConnectionRequestCallback onComplete;\n+    private String action;\n+    private AtomicBoolean sent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f55197738e97383d4516ceb88cd71c9d5992c98d"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODM3Mjk3OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoyOTo1OVrOHuQ1fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODoyOTo1OVrOHuQ1fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3MjM4Mg==", "bodyText": "This method seems unused.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r518272382", "createdAt": "2020-11-05T18:29:59Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "diffHunk": "@@ -109,6 +113,41 @@ public String toString() {\n     }\n   }\n \n+  private static class OutstandingGet {\n+    private Map<String, Object> request;\n+    private ConnectionRequestCallback onComplete;\n+    private String action;\n+    private AtomicBoolean sent;\n+\n+    private OutstandingGet(\n+        String action, Map<String, Object> request, ConnectionRequestCallback onComplete) {\n+      this.action = action;\n+      this.request = request;\n+      this.onComplete = onComplete;\n+      this.sent = new AtomicBoolean(false);\n+    }\n+\n+    private String getAction() {\n+      return action;\n+    }\n+\n+    private ConnectionRequestCallback getOnComplete() {\n+      return onComplete;\n+    }\n+\n+    private Map<String, Object> getRequest() {\n+      return request;\n+    }\n+\n+    private boolean markSent() {\n+      return sent.compareAndSet(false, true);\n+    }\n+\n+    private boolean wasSent() {\n+      return sent.get();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f55197738e97383d4516ceb88cd71c9d5992c98d"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODQxNDI0OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo0MToxNlrOHuRO_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo0MToxNlrOHuRO_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3ODkxMA==", "bodyText": "It took me a while to wade through all the callsites, but it seems like executorService is single-threaded and the is responsible for all access to outstandingGets. This means that markSent doesn't need to use an AtomicBoolean.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r518278910", "createdAt": "2020-11-05T18:41:16Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "diffHunk": "@@ -344,6 +388,64 @@ public void listen(\n     doIdleCheck();\n   }\n \n+  @Override\n+  public Task<Object> get(List<String> path, Map<String, Object> queryParams) {\n+    QuerySpec query = new QuerySpec(path, queryParams);\n+    TaskCompletionSource<Object> source = new TaskCompletionSource<>();\n+\n+    long readId = this.readCounter++;\n+\n+    Map<String, Object> request = new HashMap<String, Object>();\n+    request.put(REQUEST_PATH, ConnectionUtils.pathToString(query.path));\n+    request.put(REQUEST_QUERIES, query.queryParams);\n+\n+    outstandingGets.put(\n+        readId,\n+        new OutstandingGet(\n+            REQUEST_ACTION_GET,\n+            request,\n+            new ConnectionRequestCallback() {\n+              @Override\n+              public void onResponse(Map<String, Object> response) {\n+                String status = (String) response.get(REQUEST_STATUS);\n+                if (status.equals(\"ok\")) {\n+                  Object body = response.get(SERVER_DATA_UPDATE_BODY);\n+                  delegate.onDataUpdate(query.path, body, /*isMerge=*/ false, /*tagNumber=*/ null);\n+                  source.setResult(body);\n+                } else {\n+                  source.setException(\n+                      new Exception((String) response.get(SERVER_DATA_UPDATE_BODY)));\n+                }\n+              }\n+            }));\n+\n+    if (!connected()) {\n+      executorService.schedule(\n+          new Runnable() {\n+            @Override\n+            public void run() {\n+              OutstandingGet get = outstandingGets.get(readId);\n+              if (get == null || !get.markSent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f55197738e97383d4516ceb88cd71c9d5992c98d"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODQyMzYwOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo0Mzo1NVrOHuRU3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo0Mzo1NVrOHuRU3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4MDQxNA==", "bodyText": "This should only ever be hit when cancelled, or not?", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r518280414", "createdAt": "2020-11-05T18:43:55Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "diffHunk": "@@ -1049,6 +1162,34 @@ public void onResponse(Map<String, Object> response) {\n         });\n   }\n \n+  private void sendGet(final Long readId) {\n+    hardAssert(canSendReads(), \"sendGet called when we can't send gets\");\n+    OutstandingGet get = outstandingGets.get(readId);\n+    if (!get.markSent()) {\n+      if (logger.logsDebug()) {\n+        logger.debug(\"get\" + readId + \" already sent or cancelled, ignoring.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f55197738e97383d4516ceb88cd71c9d5992c98d"}, "originalPosition": 298}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODQyNTgyOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo0NDoyOVrOHuRWJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo0NDoyOVrOHuRWJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4MDc0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else {\n          \n          \n            \n                          if (logger.logsDebug())\n          \n          \n            \n                            logger.debug(\n          \n          \n            \n                                \"Ignoring on complete for get \" + readId + \" because it was removed already.\");\n          \n          \n            \n                        }\n          \n          \n            \n                        } else if (logger.logsDebug()) {\n          \n          \n            \n                            logger.debug(\n          \n          \n            \n                                \"Ignoring on complete for get \" + readId + \" because it was removed already.\");\n          \n          \n            \n                        }", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r518280741", "createdAt": "2020-11-05T18:44:29Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "diffHunk": "@@ -1049,6 +1162,34 @@ public void onResponse(Map<String, Object> response) {\n         });\n   }\n \n+  private void sendGet(final Long readId) {\n+    hardAssert(canSendReads(), \"sendGet called when we can't send gets\");\n+    OutstandingGet get = outstandingGets.get(readId);\n+    if (!get.markSent()) {\n+      if (logger.logsDebug()) {\n+        logger.debug(\"get\" + readId + \" already sent or cancelled, ignoring.\");\n+        return;\n+      }\n+    }\n+    sendAction(\n+        get.getAction(),\n+        get.getRequest(),\n+        new ConnectionRequestCallback() {\n+          @Override\n+          public void onResponse(Map<String, Object> response) {\n+            OutstandingGet currentGet = outstandingGets.get(readId);\n+            if (currentGet == get) {\n+              outstandingGets.remove(readId);\n+              get.getOnComplete().onResponse(response);\n+            } else {\n+              if (logger.logsDebug())\n+                logger.debug(\n+                    \"Ignoring on complete for get \" + readId + \" because it was removed already.\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f55197738e97383d4516ceb88cd71c9d5992c98d"}, "originalPosition": 316}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODQzMTAzOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/core/Repo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo0NTo1MFrOHuRZSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo0NTo1MFrOHuRZSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4MTU0Nw==", "bodyText": "Can this be done in the OnCompletedListener?", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r518281547", "createdAt": "2020-11-05T18:45:50Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/Repo.java", "diffHunk": "@@ -462,6 +468,61 @@ public void onRequestResult(String optErrorCode, String optErrorMessage) {\n     this.rerunTransactions(affectedPath);\n   }\n \n+  public Task<DataSnapshot> getValue(Query query) {\n+    TaskCompletionSource<DataSnapshot> source = new TaskCompletionSource<>();\n+    this.scheduleNow(\n+        new Runnable() {\n+          @Override\n+          public void run() {\n+            serverSyncTree.setQueryActive(query.getSpec());\n+            connection\n+                .get(query.getPath().asList(), query.getSpec().getParams().getWireProtocolParams())\n+                .addOnCompleteListener(\n+                    new OnCompleteListener<Object>() {\n+                      @Override\n+                      public void onComplete(@NonNull Task<Object> task) {\n+                        if (!task.isSuccessful()) {\n+                          operationLogger.info(\n+                              \"get for query \"\n+                                  + query.getPath()\n+                                  + \" falling back to cache after error: \"\n+                                  + task.getException().getMessage());\n+                          Node cached =\n+                              serverSyncTree.calcCompleteEventCache(\n+                                  query.getPath(), new ArrayList<>());\n+                          if (cached.isEmpty()) {\n+                            source.setException(task.getException());\n+                          } else {\n+                            source.setResult(\n+                                InternalHelpers.createDataSnapshot(\n+                                    query.getRef(),\n+                                    IndexedNode.from(cached, query.getSpec().getIndex())));\n+                          }\n+                        } else {\n+                          Node serverNode = NodeUtilities.NodeFromJSON(task.getResult());\n+                          postEvents(\n+                              serverSyncTree.applyServerOverwrite(query.getPath(), serverNode));\n+                          source.setResult(\n+                              InternalHelpers.createDataSnapshot(\n+                                  query.getRef(),\n+                                  IndexedNode.from(serverNode, query.getSpec().getIndex())));\n+                        }\n+                      }\n+                    });\n+          }\n+        });\n+    return source\n+        .getTask()\n+        .continueWithTask(\n+            new Continuation<DataSnapshot, Task<DataSnapshot>>() {\n+              @Override\n+              public Task<DataSnapshot> then(@NonNull Task<DataSnapshot> task) throws Exception {\n+                serverSyncTree.setQueryInactive(query.getSpec());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f55197738e97383d4516ceb88cd71c9d5992c98d"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODQzMjMxOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/core/SyncTree.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo0NjoxM1rOHuRaDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODo0NjoxM1rOHuRaDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI4MTc0MQ==", "bodyText": "This is much easier than I thought it would be. Thanks for figuring this out.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r518281741", "createdAt": "2020-11-05T18:46:13Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/SyncTree.java", "diffHunk": "@@ -454,6 +454,28 @@ public boolean isEmpty() {\n         });\n   }\n \n+  public void setQueryActive(QuerySpec query) {\n+    persistenceManager.runInTransaction(\n+        new Callable<Void>() {\n+          @Override\n+          public Void call() {\n+            persistenceManager.setQueryActive(query);\n+            return null;\n+          }\n+        });\n+  }\n+\n+  public void setQueryInactive(QuerySpec query) {\n+    persistenceManager.runInTransaction(\n+        new Callable<Void>() {\n+          @Override\n+          public Void call() {\n+            persistenceManager.setQueryInactive(query);\n+            return null;\n+          }\n+        });\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f55197738e97383d4516ceb88cd71c9d5992c98d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTk0NDMxOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDo0NToyM1rOHyUzgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDo0NToyM1rOHyUzgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUzMTcxMw==", "bodyText": "Looks like we can inline prev and drop the this..\nThis function should probably also have a short comment on what the return type is - or a more descriptive name.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r522531713", "createdAt": "2020-11-13T00:45:23Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "diffHunk": "@@ -140,11 +139,12 @@ private ConnectionRequestCallback getOnComplete() {\n     }\n \n     private boolean markSent() {\n-      return sent.compareAndSet(false, true);\n-    }\n-\n-    private boolean wasSent() {\n-      return sent.get();\n+      boolean prev = sent;\n+      if (prev) {\n+        return false;\n+      }\n+      this.sent = true;\n+      return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33308ddee83da3d250be3ead0435c82f63b9324e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NTk2MDg5OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDo0OTowNlrOHyU-0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDo0OTowNlrOHyU-0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUzNDYwOA==", "bodyText": "Could we just use outstandingGet here rather than retrieve it from the list?", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r522534608", "createdAt": "2020-11-13T00:49:06Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "diffHunk": "@@ -417,15 +416,16 @@ public void onResponse(Map<String, Object> response) {\n                       new Exception((String) response.get(SERVER_DATA_UPDATE_BODY)));\n                 }\n               }\n-            }));\n+            });\n+    outstandingGets.put(readId, outstandingGet);\n \n     if (!connected()) {\n       executorService.schedule(\n           new Runnable() {\n             @Override\n             public void run() {\n               OutstandingGet get = outstandingGets.get(readId);\n-              if (get == null || !get.markSent()) {\n+              if (get == null || get != outstandingGet || !get.markSent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33308ddee83da3d250be3ead0435c82f63b9324e"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3OTYxMzA3OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzo0NDo0MFrOHy4wTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzo0NDo0MFrOHy4wTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEyMDcxOA==", "bodyText": "Please remove", "url": "https://github.com/firebase/firebase-android-sdk/pull/2087#discussion_r523120718", "createdAt": "2020-11-13T17:44:40Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3401,6 +3407,145 @@ public void onComplete(DatabaseError error, DatabaseReference ref) {\n     IntegrationTestHelpers.waitFor(semaphore);\n   }\n \n+  private static FirebaseApp appForDatabaseUrl(String url, String name) {\n+    return FirebaseApp.initializeApp(\n+        InstrumentationRegistry.getInstrumentation().getTargetContext(),\n+        new FirebaseOptions.Builder()\n+            .setApplicationId(\"appid\")\n+            .setApiKey(\"apikey\")\n+            .setDatabaseUrl(url)\n+            .build(),\n+        name);\n+  }\n+\n+  @Test\n+  public void emptyQueryGet() throws DatabaseException, InterruptedException, ExecutionException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    assertNull(Tasks.await(db.getReference(UUID.randomUUID().toString()).get()).getValue());\n+  }\n+\n+  @Test\n+  public void offlineQueryGet() throws DatabaseException, InterruptedException {\n+    FirebaseApp app =\n+        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n+    FirebaseDatabase db = FirebaseDatabase.getInstance(app);\n+    db.setLogLevel(Logger.Level.DEBUG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fdaa0d91c56e164c6a6fa43332224f08f575f6"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1088, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}