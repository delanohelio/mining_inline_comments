{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNjkzMzI4", "number": 1722, "title": "support default value decoding", "bodyText": "", "createdAt": "2020-06-26T17:06:22Z", "url": "https://github.com/firebase/firebase-android-sdk/pull/1722", "merged": true, "mergeCommit": {"oid": "bf28fb1a1cff674b46dbabfa23519de6699c292b"}, "closed": true, "closedAt": "2020-07-03T17:50:32Z", "author": {"login": "James201311"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvEjPTAH2gAyNDQwNjkzMzI4Ojk3MTlhNGE3Yjg4ZDYwODQwMjc0ODUwYjJiOTRhZjFhNDQwOWVmODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxUtTEgFqTQ0MjQ2MzI0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9719a4a7b88d60840274850b2b94af1a4409ef83", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/9719a4a7b88d60840274850b2b94af1a4409ef83", "committedDate": "2020-06-26T14:58:38Z", "message": "refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97c54219dbb22db8e6f8702e55e21ee9f00d5211", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/97c54219dbb22db8e6f8702e55e21ee9f00d5211", "committedDate": "2020-06-26T17:05:01Z", "message": "default value support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjI1NzYw", "url": "https://github.com/firebase/firebase-android-sdk/pull/1722#pullrequestreview-438625760", "createdAt": "2020-06-26T22:19:14Z", "commit": {"oid": "97c54219dbb22db8e6f8702e55e21ee9f00d5211"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MjE4OTM0", "url": "https://github.com/firebase/firebase-android-sdk/pull/1722#pullrequestreview-439218934", "createdAt": "2020-06-29T14:46:23Z", "commit": {"oid": "97c54219dbb22db8e6f8702e55e21ee9f00d5211"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDo0NjoyM1rOGqUafg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDo0NjoyM1rOGqUafg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAyNzgzOA==", "bodyText": "Does it have to be null here, could we use Collections.emptyList() instead?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1722#discussion_r447027838", "createdAt": "2020-06-29T14:46:23Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java", "diffHunk": "@@ -274,6 +244,35 @@\n     }\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n+  private <T> T defaultValue(TypeToken<T> typeToken) {\n+    if (typeToken instanceof TypeToken.ArrayToken) {\n+      return convertGenericListToArray(null, (TypeToken.ArrayToken<T>) typeToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97c54219dbb22db8e6f8702e55e21ee9f00d5211"}, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f13a3b8c059f7427800e75cf32db3059374a7324", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/f13a3b8c059f7427800e75cf32db3059374a7324", "committedDate": "2020-06-29T15:25:45Z", "message": "address comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7264d25bc4f1fc0cf9992d3124eabb237ee904f7", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/7264d25bc4f1fc0cf9992d3124eabb237ee904f7", "committedDate": "2020-06-29T15:27:16Z", "message": "fix format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5Mzk0MjI0", "url": "https://github.com/firebase/firebase-android-sdk/pull/1722#pullrequestreview-439394224", "createdAt": "2020-06-29T18:24:41Z", "commit": {"oid": "7264d25bc4f1fc0cf9992d3124eabb237ee904f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxODoyNDo0MVrOGqc4qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxODoyNDo0MVrOGqc4qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2NjYzNQ==", "bodyText": "Will defaults work for missing json values, i.e. if the above json did not contain \"i\" at all, would foo.i equal 0?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1722#discussion_r447166635", "createdAt": "2020-06-29T18:24:41Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContextDefaultValueTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders.json;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import androidx.annotation.NonNull;\n+import com.google.firebase.decoders.FieldRef;\n+import com.google.firebase.decoders.ObjectDecoder;\n+import com.google.firebase.decoders.ObjectDecoderContext;\n+import com.google.firebase.decoders.Safe;\n+import com.google.firebase.decoders.TypeCreator;\n+import com.google.firebase.decoders.TypeToken;\n+import com.google.firebase.encoders.FieldDescriptor;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class JsonDataDecoderBuilderContextDefaultValueTest {\n+  @Test\n+  public void nullValueInNumericArray_shouldBeDecodedAsZero() throws IOException {\n+    Map<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n+    JsonDataDecoderBuilderContext jsonDataDecoderBuilderContext =\n+        new JsonDataDecoderBuilderContext(objectDecoders);\n+\n+    String json = \"[null]\";\n+    InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n+    int[] intArr = jsonDataDecoderBuilderContext.decode(input, TypeToken.of(new Safe<int[]>() {}));\n+    assertThat(intArr).isEqualTo(new int[] {0});\n+  }\n+\n+  static class Foo {\n+    int i;\n+    short s;\n+    long l;\n+    double d;\n+    float f;\n+    boolean b;\n+    char c;\n+    Integer ii;\n+    Short ss;\n+    Long ll;\n+    Double dd;\n+    Float ff;\n+    Boolean bb;\n+    Character cc;\n+    String str;\n+    Object obj;\n+\n+    Foo(\n+        int i,\n+        short s,\n+        long l,\n+        double d,\n+        float f,\n+        boolean b,\n+        char c,\n+        Integer ii,\n+        Short ss,\n+        Long ll,\n+        Double dd,\n+        Float ff,\n+        Boolean bb,\n+        Character cc,\n+        String str,\n+        Object obj) {\n+      this.i = i;\n+      this.s = s;\n+      this.l = l;\n+      this.d = d;\n+      this.f = f;\n+      this.b = b;\n+      this.c = c;\n+      this.ii = ii;\n+      this.ss = ss;\n+      this.ll = ll;\n+      this.dd = dd;\n+      this.ff = ff;\n+      this.bb = bb;\n+      this.cc = cc;\n+      this.str = str;\n+      this.obj = obj;\n+    }\n+  }\n+\n+  static class FooObjectDecoder implements ObjectDecoder<Foo> {\n+\n+    @NonNull\n+    @Override\n+    public TypeCreator<Foo> decode(@NonNull ObjectDecoderContext<Foo> ctx) {\n+      FieldRef.Primitive<Integer> iField = ctx.decodeInteger(FieldDescriptor.of(\"i\"));\n+      FieldRef.Primitive<Short> sField = ctx.decodeShort(FieldDescriptor.of(\"s\"));\n+      FieldRef.Primitive<Long> lField = ctx.decodeLong(FieldDescriptor.of(\"l\"));\n+      FieldRef.Primitive<Double> dField = ctx.decodeDouble(FieldDescriptor.of(\"d\"));\n+      FieldRef.Primitive<Float> fField = ctx.decodeFloat(FieldDescriptor.of(\"f\"));\n+      FieldRef.Primitive<Boolean> bField = ctx.decodeBoolean(FieldDescriptor.of(\"b\"));\n+      FieldRef.Primitive<Character> cField = ctx.decodeChar(FieldDescriptor.of(\"c\"));\n+      FieldRef.Boxed<Integer> iiField =\n+          ctx.decode(FieldDescriptor.of(\"ii\"), TypeToken.of(Integer.class));\n+      FieldRef.Boxed<Short> ssField =\n+          ctx.decode(FieldDescriptor.of(\"ss\"), TypeToken.of(Short.class));\n+      FieldRef.Boxed<Long> llField = ctx.decode(FieldDescriptor.of(\"ll\"), TypeToken.of(Long.class));\n+      FieldRef.Boxed<Double> ddField =\n+          ctx.decode(FieldDescriptor.of(\"dd\"), TypeToken.of(Double.class));\n+      FieldRef.Boxed<Float> ffField =\n+          ctx.decode(FieldDescriptor.of(\"ff\"), TypeToken.of(Float.class));\n+      FieldRef.Boxed<Boolean> bbField =\n+          ctx.decode(FieldDescriptor.of(\"bb\"), TypeToken.of(Boolean.class));\n+      FieldRef.Boxed<Character> ccField =\n+          ctx.decode(FieldDescriptor.of(\"cc\"), TypeToken.of(Character.class));\n+      FieldRef.Boxed<String> strField =\n+          ctx.decode(FieldDescriptor.of(\"str\"), TypeToken.of(String.class));\n+      FieldRef.Boxed<Object> objField =\n+          ctx.decode(FieldDescriptor.of(\"obj\"), TypeToken.of(Object.class));\n+\n+      return (creationCtx ->\n+          new Foo(\n+              creationCtx.getInteger(iField),\n+              creationCtx.getShort(sField),\n+              creationCtx.getLong(lField),\n+              creationCtx.getDouble(dField),\n+              creationCtx.getFloat(fField),\n+              creationCtx.getBoolean(bField),\n+              creationCtx.getChar(cField),\n+              creationCtx.get(iiField),\n+              creationCtx.get(ssField),\n+              creationCtx.get(llField),\n+              creationCtx.get(ddField),\n+              creationCtx.get(ffField),\n+              creationCtx.get(bbField),\n+              creationCtx.get(ccField),\n+              creationCtx.get(strField),\n+              creationCtx.get(objField)));\n+    }\n+  }\n+\n+  @Test\n+  public void defaultNumericValues_areDecodeCorrectly() throws IOException {\n+    Map<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n+    objectDecoders.put(Foo.class, new FooObjectDecoder());\n+    JsonDataDecoderBuilderContext jsonDataDecoderBuilderContext =\n+        new JsonDataDecoderBuilderContext(objectDecoders);\n+\n+    String json =\n+        \"{\\\"i\\\":null, \\\"s\\\":null, \\\"l\\\":null, \\\"d\\\":null, \\\"f\\\":null, \\\"b\\\":null, \\\"c\\\":null, \\\"ii\\\":null, \\\"ss\\\":null, \\\"ll\\\":null, \\\"dd\\\":null, \\\"ff\\\":null, \\\"bb\\\":null, \\\"cc\\\":null, \\\"str\\\":null, \\\"obj\\\":null}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7264d25bc4f1fc0cf9992d3124eabb237ee904f7"}, "originalPosition": 164}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "031f3a352eaade1bf80ea4ad99c99dd1d0bf156a", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/031f3a352eaade1bf80ea4ad99c99dd1d0bf156a", "committedDate": "2020-06-29T20:40:25Z", "message": "move default value logic into creationCtx"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NDg2Mjk1", "url": "https://github.com/firebase/firebase-android-sdk/pull/1722#pullrequestreview-439486295", "createdAt": "2020-06-29T20:44:24Z", "commit": {"oid": "031f3a352eaade1bf80ea4ad99c99dd1d0bf156a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDo0NDoyNFrOGqhhOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDo0NDoyNFrOGqhhOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI0MjU1Mg==", "bodyText": "this method works like a utility method, does it worth the efforts to move it into a helper file?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1722#discussion_r447242552", "createdAt": "2020-06-29T20:44:24Z", "author": {"login": "James201311"}, "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java", "diffHunk": "@@ -87,8 +86,7 @@\n     return convertGenericListToArray(list, arrayToken);\n   }\n \n-  private static <T, E> T convertGenericListToArray(\n-      List<Object> list, TypeToken.ArrayToken<T> arrayToken) {\n+  static <T, E> T convertGenericListToArray(List<Object> list, TypeToken.ArrayToken<T> arrayToken) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "031f3a352eaade1bf80ea4ad99c99dd1d0bf156a"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNDYzMjQ5", "url": "https://github.com/firebase/firebase-android-sdk/pull/1722#pullrequestreview-442463249", "createdAt": "2020-07-03T14:55:57Z", "commit": {"oid": "031f3a352eaade1bf80ea4ad99c99dd1d0bf156a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2574, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}