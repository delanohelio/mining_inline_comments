{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NzU0NjEy", "number": 1872, "title": "Add != and NOT_IN queries (not public)", "bodyText": "Porting from web.", "createdAt": "2020-08-10T22:04:43Z", "url": "https://github.com/firebase/firebase-android-sdk/pull/1872", "merged": true, "mergeCommit": {"oid": "1ee3caa52b952edcb08ba2cb5ab8833bc9e5b0db"}, "closed": true, "closedAt": "2020-08-14T17:31:06Z", "author": {"login": "thebrianchen"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc95LpDAH2gAyNDY1NzU0NjEyOmM1ZmZkYTNmMjQ0YmQxOGI0NTU4ZWI3ZjM0NjNmOTIzNDA0YmEwNGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-3Q_-AFqTQ2NzcxMzQ2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c5ffda3f244bd18b4558eb7f3463f923404ba04c", "author": {"user": {"login": "thebrianchen", "name": "Brian Chen"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/c5ffda3f244bd18b4558eb7f3463f923404ba04c", "committedDate": "2020-08-11T16:12:46Z", "message": "add != and NOT_IN support\n\noops"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e6b86d507e82f989a01b5518369b081c7f84a58", "author": {"user": {"login": "thebrianchen", "name": "Brian Chen"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/1e6b86d507e82f989a01b5518369b081c7f84a58", "committedDate": "2020-08-11T15:57:12Z", "message": "ignore integration tests until emulator support"}, "afterCommit": {"oid": "c5ffda3f244bd18b4558eb7f3463f923404ba04c", "author": {"user": {"login": "thebrianchen", "name": "Brian Chen"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/c5ffda3f244bd18b4558eb7f3463f923404ba04c", "committedDate": "2020-08-11T16:12:46Z", "message": "add != and NOT_IN support\n\noops"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MjcyMDg5", "url": "https://github.com/firebase/firebase-android-sdk/pull/1872#pullrequestreview-466272089", "createdAt": "2020-08-12T20:57:57Z", "commit": {"oid": "c5ffda3f244bd18b4558eb7f3463f923404ba04c"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDo1Nzo1N1rOG_ym4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjozMDoyMFrOG_1Dtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0MjYyNQ==", "bodyText": "This name doesn't seem right. Neither argument is an array and the ordered-container property of arrays is explicitly ignored in the implementation.\nassertSetEquals above are essentially asserting the two containers are equal without regard for ordering. I think you probably could use the same name here, since that's what you're doing.\nHowever, I think you can combine this with the one above. Make it:\npublic static <T> void assertSetEquals(Iterable<T> expected, Iterable<T> actual) {\n  Set<T> expectedSet = Sets.newHashSet(expected);\n  Set<T> actualSet = Sets.newHashSet(actual);\n  assertEquals(expectedSet, actualSet);\n}\nThis has the added benefit of allowing Collection<T> to be passed as an argument directly, which will eliminate all the Lists.newArrayList in your callers.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1872#discussion_r469542625", "createdAt": "2020-08-12T20:57:57Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/testUtil/java/com/google/firebase/firestore/testutil/TestUtil.java", "diffHunk": "@@ -607,6 +611,18 @@ public static ByteString streamToken(String contents) {\n     assertEquals(expectedSet, actual);\n   }\n \n+  /**\n+   * Asserts that the contents of actual list is equal to that of the expected one.\n+   *\n+   * @param expected A list of the expected contents of the set, in any order.\n+   * @param actual The list to compare against.\n+   * @param <T> The type of the values of in common between the expected list and actual set.\n+   */\n+  // PORTING NOTE: JUnit and XCTest use reversed conventions on expected and actual values :-(.\n+  public static <T> void assertArrayEquals(List<T> expected, List<T> actual) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ffda3f244bd18b4558eb7f3463f923404ba04c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0MzAyMw==", "bodyText": "As noted on assertArrayEquals, remove this Lists.newArrayList, here and throughout.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1872#discussion_r469543023", "createdAt": "2020-08-12T20:58:40Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/androidTest/java/com/google/firebase/firestore/QueryTest.java", "diffHunk": "@@ -483,6 +487,83 @@ public void testQueriesFireFromCacheWhenOffline() {\n     listener.remove();\n   }\n \n+  // TODO(ne-queries): Re-enable once emulator support is added to CI.\n+  @Ignore\n+  @Test\n+  public void testQueriesCanUseNotEqualFilters() {\n+    Map<String, Object> docA = map(\"zip\", 98101L);\n+    Map<String, Object> docB = map(\"zip\", 91102L);\n+    Map<String, Object> docC = map(\"zip\", \"98101\");\n+    Map<String, Object> docD = map(\"zip\", asList(98101L));\n+    Map<String, Object> docE = map(\"zip\", asList(\"98101\", map(\"zip\", 98101L)));\n+    Map<String, Object> docF = map(\"zip\", map(\"code\", 500L));\n+    Map<String, Object> docG = map(\"zip\", asList(98101L, 98102L));\n+    Map<String, Object> docH = map(\"code\", 500L);\n+    Map<String, Object> docI = map(\"zip\", null);\n+    Map<String, Object> docJ = map(\"zip\", Double.NaN);\n+\n+    Map<String, Map<String, Object>> allDocs =\n+        map(\n+            \"a\", docA, \"b\", docB, \"c\", docC, \"d\", docD, \"e\", docE, \"f\", docF, \"g\", docG, \"h\", docH,\n+            \"i\", docI, \"j\", docJ);\n+    CollectionReference collection = testCollectionWithDocs(allDocs);\n+\n+    // Search for zips not matching 98101.\n+    Map<String, Map<String, Object>> expectedDocsMap = Maps.newHashMap(allDocs);\n+    expectedDocsMap.remove(\"a\");\n+    expectedDocsMap.remove(\"h\");\n+    expectedDocsMap.remove(\"i\");\n+\n+    QuerySnapshot snapshot = waitFor(collection.whereNotEqualTo(\"zip\", 98101L).get());\n+    assertArrayEquals(\n+        Lists.newArrayList(expectedDocsMap.values()), querySnapshotToValues(snapshot));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ffda3f244bd18b4558eb7f3463f923404ba04c"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NTc2OA==", "bodyText": "To make a list use\n<ol>\n<li>Only one array operator ...\n<li>One one disjunctive ...\n</ol>", "url": "https://github.com/firebase/firebase-android-sdk/pull/1872#discussion_r469575768", "createdAt": "2020-08-12T22:12:27Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/Query.java", "diffHunk": "@@ -445,15 +520,44 @@ private void validateOrderByFieldMatchesInequality(\n     }\n   }\n \n+  /**\n+   * Given an operator, returns the set of operators that cannot be used with it.\n+   *\n+   * <p>Operators in a query must adhere to the following set of rules: 1. Only one array operator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ffda3f244bd18b4558eb7f3463f923404ba04c"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MDU5NQ==", "bodyText": "Operator must already be imported here (see references to Operator.ARRAY_CONTAINS) so you can drop the Filter in Filter.Operator.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1872#discussion_r469580595", "createdAt": "2020-08-12T22:24:42Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/core/FieldFilter.java", "diffHunk": "@@ -64,20 +64,24 @@ public static FieldFilter create(FieldPath path, Operator operator, Value value)\n     if (path.isKeyField()) {\n       if (operator == Operator.IN) {\n         return new KeyFieldInFilter(path, value);\n+      } else if (operator == Operator.NOT_IN) {\n+        return new KeyFieldNotInFilter(path, value);\n       } else {\n         hardAssert(\n             operator != Operator.ARRAY_CONTAINS && operator != Operator.ARRAY_CONTAINS_ANY,\n             operator.toString() + \"queries don't make sense on document keys\");\n         return new KeyFieldFilter(path, operator, value);\n       }\n     } else if (Values.isNullValue(value)) {\n-      if (operator != Filter.Operator.EQUAL) {\n+      // TODO(ne-queries): Update error message to include != operator.\n+      if (operator != Filter.Operator.EQUAL && operator != Filter.Operator.NOT_EQUAL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ffda3f244bd18b4558eb7f3463f923404ba04c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4MTU0MA==", "bodyText": "2020", "url": "https://github.com/firebase/firebase-android-sdk/pull/1872#discussion_r469581540", "createdAt": "2020-08-12T22:27:03Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/core/KeyFieldNotInFilter.java", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright 2019 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ffda3f244bd18b4558eb7f3463f923404ba04c"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU4Mjc3NA==", "bodyText": "This isn't likely to be a widely used or general utility. Better to make this a package private static member of e.g. KeyFieldInFilter and just call it from the other one.\n(Another clue that this doesn't belong here is that you're referring to KeyFieldInFilter in the error message. This is therefore pretty specific to those classes.)", "url": "https://github.com/firebase/firebase-android-sdk/pull/1872#discussion_r469582774", "createdAt": "2020-08-12T22:30:20Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/util/Util.java", "diffHunk": "@@ -234,4 +240,22 @@ public static int compareByteStrings(ByteString left, ByteString right) {\n     }\n     return Util.compareIntegers(left.size(), right.size());\n   }\n+\n+  public static List<DocumentKey> extractDocumentKeysFromArrayValue(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ffda3f244bd18b4558eb7f3463f923404ba04c"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "025ef85305cb25e8646737d0a910b3106eee88bb", "author": {"user": {"login": "thebrianchen", "name": "Brian Chen"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/025ef85305cb25e8646737d0a910b3106eee88bb", "committedDate": "2020-08-13T23:08:40Z", "message": "resolve gil comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MjY0NDcw", "url": "https://github.com/firebase/firebase-android-sdk/pull/1872#pullrequestreview-467264470", "createdAt": "2020-08-14T02:10:16Z", "commit": {"oid": "025ef85305cb25e8646737d0a910b3106eee88bb"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjoxMDoxNlrOHAlNTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjoyOToyNVrOHAleVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM3MTY2MQ==", "bodyText": "Apologies for what's going to be an irritating question (since I didn't pick up on this earlier), but why do you assertSetEquals(x, expected) in the test above but assertEquals(asList(x), expected) here when we're testing the same underlying operator?\nTo me it seems like either the ordering matters or it doesn't. If ordering of query results is predictable, assertSetEquals seems wrong because it allows the result to be unordered when our customers really care that it's ordered. The reverse is also true: if ordering doesn't matter, then this test is too strict, and could create a false positive.\nTo my understanding, query results always have a well defined ordering (breaking ties on key ordering). This seems to point to assertSetEquals being wrong above.\nWhat's your take on this? Why the discrepancy?\n(The same concern applies to the whereNotIn, below).", "url": "https://github.com/firebase/firebase-android-sdk/pull/1872#discussion_r470371661", "createdAt": "2020-08-14T02:10:16Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/androidTest/java/com/google/firebase/firestore/QueryTest.java", "diffHunk": "@@ -483,6 +486,79 @@ public void testQueriesFireFromCacheWhenOffline() {\n     listener.remove();\n   }\n \n+  // TODO(ne-queries): Re-enable once emulator support is added to CI.\n+  @Ignore\n+  @Test\n+  public void testQueriesCanUseNotEqualFilters() {\n+    Map<String, Object> docA = map(\"zip\", 98101L);\n+    Map<String, Object> docB = map(\"zip\", 91102L);\n+    Map<String, Object> docC = map(\"zip\", \"98101\");\n+    Map<String, Object> docD = map(\"zip\", asList(98101L));\n+    Map<String, Object> docE = map(\"zip\", asList(\"98101\", map(\"zip\", 98101L)));\n+    Map<String, Object> docF = map(\"zip\", map(\"code\", 500L));\n+    Map<String, Object> docG = map(\"zip\", asList(98101L, 98102L));\n+    Map<String, Object> docH = map(\"code\", 500L);\n+    Map<String, Object> docI = map(\"zip\", null);\n+    Map<String, Object> docJ = map(\"zip\", Double.NaN);\n+\n+    Map<String, Map<String, Object>> allDocs =\n+        map(\n+            \"a\", docA, \"b\", docB, \"c\", docC, \"d\", docD, \"e\", docE, \"f\", docF, \"g\", docG, \"h\", docH,\n+            \"i\", docI, \"j\", docJ);\n+    CollectionReference collection = testCollectionWithDocs(allDocs);\n+\n+    // Search for zips not matching 98101.\n+    Map<String, Map<String, Object>> expectedDocsMap = Maps.newHashMap(allDocs);\n+    expectedDocsMap.remove(\"a\");\n+    expectedDocsMap.remove(\"h\");\n+    expectedDocsMap.remove(\"i\");\n+\n+    QuerySnapshot snapshot = waitFor(collection.whereNotEqualTo(\"zip\", 98101L).get());\n+    assertSetEquals(expectedDocsMap.values(), querySnapshotToValues(snapshot));\n+\n+    // With objects.\n+    expectedDocsMap = Maps.newHashMap(allDocs);\n+    expectedDocsMap.remove(\"f\");\n+    expectedDocsMap.remove(\"h\");\n+    expectedDocsMap.remove(\"i\");\n+    snapshot = waitFor(collection.whereNotEqualTo(\"zip\", map(\"code\", 500)).get());\n+    assertSetEquals(expectedDocsMap.values(), querySnapshotToValues(snapshot));\n+\n+    // With Null.\n+    expectedDocsMap = Maps.newHashMap(allDocs);\n+    expectedDocsMap.remove(\"h\");\n+    expectedDocsMap.remove(\"i\");\n+    snapshot = waitFor(collection.whereNotEqualTo(\"zip\", null).get());\n+    assertSetEquals(expectedDocsMap.values(), querySnapshotToValues(snapshot));\n+\n+    // With NaN.\n+    expectedDocsMap = Maps.newHashMap(allDocs);\n+    expectedDocsMap.remove(\"h\");\n+    expectedDocsMap.remove(\"i\");\n+    expectedDocsMap.remove(\"j\");\n+    snapshot = waitFor(collection.whereNotEqualTo(\"zip\", Double.NaN).get());\n+    assertSetEquals(expectedDocsMap.values(), querySnapshotToValues(snapshot));\n+  }\n+\n+  // TODO(ne-queries): Re-enable once emulator support is added to CI.\n+  @Ignore\n+  @Test\n+  public void testQueriesCanUseNotEqualFiltersWithDocIds() {\n+    Map<String, String> docA = map(\"key\", \"aa\");\n+    Map<String, String> docB = map(\"key\", \"ab\");\n+    Map<String, String> docC = map(\"key\", \"ba\");\n+    Map<String, String> docD = map(\"key\", \"bb\");\n+    Map<String, Map<String, Object>> testDocs =\n+        map(\n+            \"aa\", docA,\n+            \"ab\", docB,\n+            \"ba\", docC,\n+            \"bb\", docD);\n+    CollectionReference collection = testCollectionWithDocs(testDocs);\n+    QuerySnapshot docs = waitFor(collection.whereNotEqualTo(FieldPath.documentId(), \"aa\").get());\n+    assertEquals(asList(docB, docC, docD), querySnapshotToValues(docs));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025ef85305cb25e8646737d0a910b3106eee88bb"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM3MjgyMQ==", "bodyText": "The list wrapper element is required (<ol> indicates an ordered list (aka numbered); use <ul> for unordered (aka bulleted)).", "url": "https://github.com/firebase/firebase-android-sdk/pull/1872#discussion_r470372821", "createdAt": "2020-08-14T02:15:23Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/Query.java", "diffHunk": "@@ -445,15 +520,44 @@ private void validateOrderByFieldMatchesInequality(\n     }\n   }\n \n+  /**\n+   * Given an operator, returns the set of operators that cannot be used with it.\n+   *\n+   * <p>Operators in a query must adhere to the following set of rules: 1. Only one array operator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NTc2OA=="}, "originalCommit": {"oid": "c5ffda3f244bd18b4558eb7f3463f923404ba04c"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM3NjAyMg==", "bodyText": "2020 here too", "url": "https://github.com/firebase/firebase-android-sdk/pull/1872#discussion_r470376022", "createdAt": "2020-08-14T02:29:25Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/core/NotInFilter.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright 2019 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5ffda3f244bd18b4558eb7f3463f923404ba04c"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc4397bcef343a007c8e1f9daefcc3adeddc9752", "author": {"user": {"login": "thebrianchen", "name": "Brian Chen"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/cc4397bcef343a007c8e1f9daefcc3adeddc9752", "committedDate": "2020-08-14T16:12:25Z", "message": "switch back to Lists.newArrayList() and remove assertSetEquals override"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NzEzNDY5", "url": "https://github.com/firebase/firebase-android-sdk/pull/1872#pullrequestreview-467713469", "createdAt": "2020-08-14T16:32:44Z", "commit": {"oid": "cc4397bcef343a007c8e1f9daefcc3adeddc9752"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2482, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}