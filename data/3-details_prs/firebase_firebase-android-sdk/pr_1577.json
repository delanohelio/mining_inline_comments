{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMDM2MDc0", "number": 1577, "title": "Refactor Crashlytics/Analytics integration", "bodyText": "Register with Firebase Analytics at initialization time\nCreate separate pipelines for breadcrumbs and Crashlytics origin\nevents\nCreate a facade for a synchronous blocking call to log the\napp_exception event\nCreate stub implementations for breadcrumbs and app_exception\nevent logger for when Firebase Analytics is not available", "createdAt": "2020-05-20T21:45:56Z", "url": "https://github.com/firebase/firebase-android-sdk/pull/1577", "merged": true, "mergeCommit": {"oid": "97e1eb9e81ec42f0caf6b09653a4178ef89f1117"}, "closed": true, "closedAt": "2020-05-29T17:18:56Z", "author": {"login": "mrwillis21"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjQLFOgH2gAyNDIxMDM2MDc0OjhmZTUwNzcwODM5OGFlYjY5ZTkzMzA5MmZiNDI4YjA0NjI3NzA5NDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmE5RjgH2gAyNDIxMDM2MDc0OjM5YjBiOWYxMDUwN2M1OTZlMjU2ZTJhZWZkNDBkNDA5MGE4NTBmYTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8fe507708398aeb69e933092fb428b0462770944", "author": {"user": {"login": "mrwillis21", "name": "Matt Willis"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/8fe507708398aeb69e933092fb428b0462770944", "committedDate": "2020-05-20T21:44:01Z", "message": "Refactor Crashlytics/Analytics integration\n\n- Register with Firebase Analytics at initialization time\n- Create separate pipelines for breadcrumbs and Crashlytics origin\nevents\n- Create a facade for a synchronous blocking call to log the\napp_exception event\n- Create stub implementations for breadcrumbs and app_exception\nevent logger for when Firebase Analytics is not available"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNDE0NTA3", "url": "https://github.com/firebase/firebase-android-sdk/pull/1577#pullrequestreview-420414507", "createdAt": "2020-05-28T19:17:08Z", "commit": {"oid": "8fe507708398aeb69e933092fb428b0462770944"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOToxNzowOFrOGcDEPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOToyMjoyNVrOGcDOhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2MzU1MQ==", "bodyText": "I wasn't really sure about this reference...it is a sneaky clever way to guard against a weird race condition that theoretically shouldn't happen. \ud83d\ude43", "url": "https://github.com/firebase/firebase-android-sdk/pull/1577#discussion_r432063551", "createdAt": "2020-05-28T19:17:08Z", "author": {"login": "mrichards"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/analytics/BlockingAnalyticsEventLogger.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.analytics;\n+\n+import android.os.Bundle;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.crashlytics.internal.Logger;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Analytics event logger which logs an event to Firebase Analytics using the Crashlytics origin,\n+ * and blocks until it receives that event back from the Analytics Event Receiver, or until the\n+ * timeout has elapsed.\n+ */\n+public class BlockingAnalyticsEventLogger implements AnalyticsEventReceiver, AnalyticsEventLogger {\n+\n+  private static final String APP_EXCEPTION_EVENT_NAME = \"_ae\";\n+\n+  private final CrashlyticsOriginAnalyticsEventLogger baseAnalyticsEventLogger;\n+  private final int timeout;\n+  private final TimeUnit timeUnit;\n+\n+  private final Object latchLock = new Object();\n+\n+  private CountDownLatch eventLatch;\n+\n+  public BlockingAnalyticsEventLogger(\n+      @NonNull CrashlyticsOriginAnalyticsEventLogger baseAnalyticsEventLogger,\n+      int timeout,\n+      TimeUnit timeUnit) {\n+    this.baseAnalyticsEventLogger = baseAnalyticsEventLogger;\n+    this.timeout = timeout;\n+    this.timeUnit = timeUnit;\n+  }\n+\n+  @Override\n+  public void logEvent(@NonNull String name, @Nullable Bundle params) {\n+    synchronized (latchLock) {\n+      Logger.getLogger().d(\"Logging Crashlytics event to Firebase\");\n+      this.eventLatch = new CountDownLatch(1);\n+\n+      baseAnalyticsEventLogger.logEvent(name, params);\n+\n+      Logger.getLogger().d(\"Awaiting app exception callback from FA...\");\n+      try {\n+        if (eventLatch.await(timeout, timeUnit)) {\n+          Logger.getLogger().d(\"App exception callback received from FA listener.\");\n+        } else {\n+          Logger.getLogger()\n+              .d(\"Timeout exceeded while awaiting app exception callback from FA listener.\");\n+        }\n+      } catch (InterruptedException ie) {\n+        Logger.getLogger().d(\"Interrupted while awaiting app exception callback from FA listener.\");\n+      }\n+\n+      this.eventLatch = null;\n+    }\n+  }\n+\n+  @Override\n+  public void onEvent(@NonNull String name, @NonNull Bundle params) {\n+    final CountDownLatch eventLatch = this.eventLatch;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe507708398aeb69e933092fb428b0462770944"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2NTM2Ng==", "bodyText": "Is it worth making a comment somewhere that we only ever expect at most ONE of these events per app execution? That fact influences the design, though I think the way you have it implemented is resilient to multiple events (though you could end up with a bunch calls waiting on the syncrhonized(latchLock) block, which is fine).\nMaybe not necessary since the design works either way?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1577#discussion_r432065366", "createdAt": "2020-05-28T19:20:40Z", "author": {"login": "mrichards"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/analytics/BlockingAnalyticsEventLogger.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.analytics;\n+\n+import android.os.Bundle;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.crashlytics.internal.Logger;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Analytics event logger which logs an event to Firebase Analytics using the Crashlytics origin,\n+ * and blocks until it receives that event back from the Analytics Event Receiver, or until the\n+ * timeout has elapsed.\n+ */\n+public class BlockingAnalyticsEventLogger implements AnalyticsEventReceiver, AnalyticsEventLogger {\n+\n+  private static final String APP_EXCEPTION_EVENT_NAME = \"_ae\";\n+\n+  private final CrashlyticsOriginAnalyticsEventLogger baseAnalyticsEventLogger;\n+  private final int timeout;\n+  private final TimeUnit timeUnit;\n+\n+  private final Object latchLock = new Object();\n+\n+  private CountDownLatch eventLatch;\n+\n+  public BlockingAnalyticsEventLogger(\n+      @NonNull CrashlyticsOriginAnalyticsEventLogger baseAnalyticsEventLogger,\n+      int timeout,\n+      TimeUnit timeUnit) {\n+    this.baseAnalyticsEventLogger = baseAnalyticsEventLogger;\n+    this.timeout = timeout;\n+    this.timeUnit = timeUnit;\n+  }\n+\n+  @Override\n+  public void logEvent(@NonNull String name, @Nullable Bundle params) {\n+    synchronized (latchLock) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe507708398aeb69e933092fb428b0462770944"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2NjE4Mg==", "bodyText": "This might be a good place for a comment describing the overall approach to the analytics integration, or at least point to one of the class javadocs that describes it.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1577#discussion_r432066182", "createdAt": "2020-05-28T19:22:25Z", "author": {"login": "mrichards"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/FirebaseCrashlytics.java", "diffHunk": "@@ -61,13 +74,52 @@\n       nativeComponent = new MissingNativeComponent();\n     }\n \n+    final Onboarding onboarding = new Onboarding(app, context, idManager, arbiter);\n+\n+    final BreadcrumbSource breadcrumbSource;\n+    final AnalyticsEventLogger analyticsEventLogger;\n+\n+    if (analyticsConnector != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe507708398aeb69e933092fb428b0462770944"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ba118269f70433abdd548a761555155bafaffb8", "author": {"user": {"login": "mrwillis21", "name": "Matt Willis"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/8ba118269f70433abdd548a761555155bafaffb8", "committedDate": "2020-05-29T15:58:00Z", "message": "Add comments to complex FA integration setup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMDg3MzA4", "url": "https://github.com/firebase/firebase-android-sdk/pull/1577#pullrequestreview-421087308", "createdAt": "2020-05-29T16:02:10Z", "commit": {"oid": "8ba118269f70433abdd548a761555155bafaffb8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39b0b9f10507c596e256e2aefd40d4090a850fa8", "author": {"user": {"login": "mrwillis21", "name": "Matt Willis"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/39b0b9f10507c596e256e2aefd40d4090a850fa8", "committedDate": "2020-05-29T16:17:23Z", "message": "Formatting"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2677, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}