{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NDk4MjQw", "number": 2100, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyNTo1NlrOEx1lzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDo0ODoxMVrOEySXPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjkzNzExOnYy", "diffSide": "RIGHT", "path": "firebase-functions/firebase-functions.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyNTo1NlrOHoJPYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjoyOTo1MVrOHoX7gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NjQ4MA==", "bodyText": "I think we can get rid of this new dependency (see comments below)", "url": "https://github.com/firebase/firebase-android-sdk/pull/2100#discussion_r511856480", "createdAt": "2020-10-26T10:25:56Z", "author": {"login": "samtstern"}, "path": "firebase-functions/firebase-functions.gradle", "diffHunk": "@@ -63,6 +69,7 @@ dependencies {\n     implementation 'com.google.firebase:firebase-iid-interop:17.0.0'\n \n     implementation 'com.squareup.okhttp3:okhttp:3.12.1'\n+    implementation 'commons-validator:commons-validator:1.7'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02f76a2e22a3339a622c80b190ed1ecca4f5cda9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5NzE1Mw==", "bodyText": "Done", "url": "https://github.com/firebase/firebase-android-sdk/pull/2100#discussion_r512097153", "createdAt": "2020-10-26T16:29:51Z", "author": {"login": "kroikie"}, "path": "firebase-functions/firebase-functions.gradle", "diffHunk": "@@ -63,6 +69,7 @@ dependencies {\n     implementation 'com.google.firebase:firebase-iid-interop:17.0.0'\n \n     implementation 'com.squareup.okhttp3:okhttp:3.12.1'\n+    implementation 'commons-validator:commons-validator:1.7'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NjQ4MA=="}, "originalCommit": {"oid": "02f76a2e22a3339a622c80b190ed1ecca4f5cda9"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjk0MDIwOnYy", "diffSide": "RIGHT", "path": "firebase-functions/src/main/java/com/google/firebase/functions/FirebaseFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyNjo0NFrOHoJRRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzozNTo1OVrOHomOOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1Njk2NA==", "bodyText": "I think we can just use the standard library URL class and do new URL(regionOrCustomDomain) and then catch MalformedUrlException:\nhttps://docs.oracle.com/javase/7/docs/api/java/net/URL.html#URL(java.lang.String)\nNot quite as good as what you have but worth saving a whole dependency.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2100#discussion_r511856964", "createdAt": "2020-10-26T10:26:44Z", "author": {"login": "samtstern"}, "path": "firebase-functions/src/main/java/com/google/firebase/functions/FirebaseFunctions.java", "diffHunk": "@@ -73,26 +74,40 @@\n   private final String projectId;\n \n   // The region to use for all function references.\n-  private final String region;\n+  @Nullable private final String region;\n+\n+  // A custom domain for the http trigger, such as \"https://mydomain.com\"\n+  @Nullable private final String customDomain;\n \n   // The format to use for constructing urls from region, projectId, and name.\n   private String urlFormat = \"https://%1$s-%2$s.cloudfunctions.net/%3$s\";\n \n+  // Allowed custom domain protocols.\n+  private String[] customDomainSchemes = {\"http\", \"https\"};\n+\n   // Emulator settings\n   @Nullable private EmulatedServiceSettings emulatorSettings;\n \n   FirebaseFunctions(\n       FirebaseApp app,\n       Context context,\n       String projectId,\n-      String region,\n+      String regionOrCustomDomain,\n       ContextProvider contextProvider) {\n     this.app = app;\n     this.client = new OkHttpClient();\n     this.serializer = new Serializer();\n     this.contextProvider = Preconditions.checkNotNull(contextProvider);\n     this.projectId = Preconditions.checkNotNull(projectId);\n-    this.region = Preconditions.checkNotNull(region);\n+\n+    UrlValidator validator = new UrlValidator(customDomainSchemes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02f76a2e22a3339a622c80b190ed1ecca4f5cda9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMzMTMyMA==", "bodyText": "Done", "url": "https://github.com/firebase/firebase-android-sdk/pull/2100#discussion_r512331320", "createdAt": "2020-10-26T23:35:59Z", "author": {"login": "kroikie"}, "path": "firebase-functions/src/main/java/com/google/firebase/functions/FirebaseFunctions.java", "diffHunk": "@@ -73,26 +74,40 @@\n   private final String projectId;\n \n   // The region to use for all function references.\n-  private final String region;\n+  @Nullable private final String region;\n+\n+  // A custom domain for the http trigger, such as \"https://mydomain.com\"\n+  @Nullable private final String customDomain;\n \n   // The format to use for constructing urls from region, projectId, and name.\n   private String urlFormat = \"https://%1$s-%2$s.cloudfunctions.net/%3$s\";\n \n+  // Allowed custom domain protocols.\n+  private String[] customDomainSchemes = {\"http\", \"https\"};\n+\n   // Emulator settings\n   @Nullable private EmulatedServiceSettings emulatorSettings;\n \n   FirebaseFunctions(\n       FirebaseApp app,\n       Context context,\n       String projectId,\n-      String region,\n+      String regionOrCustomDomain,\n       ContextProvider contextProvider) {\n     this.app = app;\n     this.client = new OkHttpClient();\n     this.serializer = new Serializer();\n     this.contextProvider = Preconditions.checkNotNull(contextProvider);\n     this.projectId = Preconditions.checkNotNull(projectId);\n-    this.region = Preconditions.checkNotNull(region);\n+\n+    UrlValidator validator = new UrlValidator(customDomainSchemes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1Njk2NA=="}, "originalCommit": {"oid": "02f76a2e22a3339a622c80b190ed1ecca4f5cda9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjk0MjU5OnYy", "diffSide": "RIGHT", "path": "firebase-functions/src/main/java/com/google/firebase/functions/FirebaseFunctions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyNzoyMlrOHoJSqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMzozNjo0M1rOHomPHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NzMyMQ==", "bodyText": "If you look at the iOS and JS PRs we set region to the default value here.  This is needed in case the person calls useEmulator", "url": "https://github.com/firebase/firebase-android-sdk/pull/2100#discussion_r511857321", "createdAt": "2020-10-26T10:27:22Z", "author": {"login": "samtstern"}, "path": "firebase-functions/src/main/java/com/google/firebase/functions/FirebaseFunctions.java", "diffHunk": "@@ -73,26 +74,40 @@\n   private final String projectId;\n \n   // The region to use for all function references.\n-  private final String region;\n+  @Nullable private final String region;\n+\n+  // A custom domain for the http trigger, such as \"https://mydomain.com\"\n+  @Nullable private final String customDomain;\n \n   // The format to use for constructing urls from region, projectId, and name.\n   private String urlFormat = \"https://%1$s-%2$s.cloudfunctions.net/%3$s\";\n \n+  // Allowed custom domain protocols.\n+  private String[] customDomainSchemes = {\"http\", \"https\"};\n+\n   // Emulator settings\n   @Nullable private EmulatedServiceSettings emulatorSettings;\n \n   FirebaseFunctions(\n       FirebaseApp app,\n       Context context,\n       String projectId,\n-      String region,\n+      String regionOrCustomDomain,\n       ContextProvider contextProvider) {\n     this.app = app;\n     this.client = new OkHttpClient();\n     this.serializer = new Serializer();\n     this.contextProvider = Preconditions.checkNotNull(contextProvider);\n     this.projectId = Preconditions.checkNotNull(projectId);\n-    this.region = Preconditions.checkNotNull(region);\n+\n+    UrlValidator validator = new UrlValidator(customDomainSchemes);\n+    if (validator.isValid(regionOrCustomDomain)) {\n+      this.region = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02f76a2e22a3339a622c80b190ed1ecca4f5cda9"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMzMTU0OA==", "bodyText": "Done", "url": "https://github.com/firebase/firebase-android-sdk/pull/2100#discussion_r512331548", "createdAt": "2020-10-26T23:36:43Z", "author": {"login": "kroikie"}, "path": "firebase-functions/src/main/java/com/google/firebase/functions/FirebaseFunctions.java", "diffHunk": "@@ -73,26 +74,40 @@\n   private final String projectId;\n \n   // The region to use for all function references.\n-  private final String region;\n+  @Nullable private final String region;\n+\n+  // A custom domain for the http trigger, such as \"https://mydomain.com\"\n+  @Nullable private final String customDomain;\n \n   // The format to use for constructing urls from region, projectId, and name.\n   private String urlFormat = \"https://%1$s-%2$s.cloudfunctions.net/%3$s\";\n \n+  // Allowed custom domain protocols.\n+  private String[] customDomainSchemes = {\"http\", \"https\"};\n+\n   // Emulator settings\n   @Nullable private EmulatedServiceSettings emulatorSettings;\n \n   FirebaseFunctions(\n       FirebaseApp app,\n       Context context,\n       String projectId,\n-      String region,\n+      String regionOrCustomDomain,\n       ContextProvider contextProvider) {\n     this.app = app;\n     this.client = new OkHttpClient();\n     this.serializer = new Serializer();\n     this.contextProvider = Preconditions.checkNotNull(contextProvider);\n     this.projectId = Preconditions.checkNotNull(projectId);\n-    this.region = Preconditions.checkNotNull(region);\n+\n+    UrlValidator validator = new UrlValidator(customDomainSchemes);\n+    if (validator.isValid(regionOrCustomDomain)) {\n+      this.region = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NzMyMQ=="}, "originalCommit": {"oid": "02f76a2e22a3339a622c80b190ed1ecca4f5cda9"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjk0NTYwOnYy", "diffSide": "RIGHT", "path": "firebase-functions/src/androidTest/java/com/google/firebase/functions/FirebaseFunctionsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyODoxNVrOHoJUoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMDozMzowMVrOHonOmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NzgyNQ==", "bodyText": "See my comment below, but add a test about using useEmulator with a custom domain.  I think it would fail right now.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2100#discussion_r511857825", "createdAt": "2020-10-26T10:28:15Z", "author": {"login": "samtstern"}, "path": "firebase-functions/src/androidTest/java/com/google/firebase/functions/FirebaseFunctionsTest.java", "diffHunk": "@@ -38,6 +38,14 @@ public void testGetUrl() {\n     functions = FirebaseFunctions.getInstance(app);\n     url = functions.getURL(\"my-endpoint\");\n     assertEquals(\"https://us-central1-my-project.cloudfunctions.net/my-endpoint\", url.toString());\n+\n+    functions = FirebaseFunctions.getInstance(app, \"https://mydomain.com\");\n+    url = functions.getURL(\"my-endpoint\");\n+    assertEquals(\"https://mydomain.com/my-endpoint\", url.toString());\n+\n+    functions = FirebaseFunctions.getInstance(app, \"https://mydomain.com/foo\");\n+    url = functions.getURL(\"my-endpoint\");\n+    assertEquals(\"https://mydomain.com/foo/my-endpoint\", url.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02f76a2e22a3339a622c80b190ed1ecca4f5cda9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM0NzgwMA==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2100#discussion_r512347800", "createdAt": "2020-10-27T00:33:01Z", "author": {"login": "kroikie"}, "path": "firebase-functions/src/androidTest/java/com/google/firebase/functions/FirebaseFunctionsTest.java", "diffHunk": "@@ -38,6 +38,14 @@ public void testGetUrl() {\n     functions = FirebaseFunctions.getInstance(app);\n     url = functions.getURL(\"my-endpoint\");\n     assertEquals(\"https://us-central1-my-project.cloudfunctions.net/my-endpoint\", url.toString());\n+\n+    functions = FirebaseFunctions.getInstance(app, \"https://mydomain.com\");\n+    url = functions.getURL(\"my-endpoint\");\n+    assertEquals(\"https://mydomain.com/my-endpoint\", url.toString());\n+\n+    functions = FirebaseFunctions.getInstance(app, \"https://mydomain.com/foo\");\n+    url = functions.getURL(\"my-endpoint\");\n+    assertEquals(\"https://mydomain.com/foo/my-endpoint\", url.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NzgyNQ=="}, "originalCommit": {"oid": "02f76a2e22a3339a622c80b190ed1ecca4f5cda9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTY1MTE4OnYy", "diffSide": "RIGHT", "path": "firebase-functions/src/main/java/com/google/firebase/functions/FirebaseFunctions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDo0ODoxMVrOHo1yaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjoyODoxOVrOHpFcQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU4NjM0Nw==", "bodyText": "Nit: you could just move this logic inside of the try/catch and not need isRegion at all.  But totally fine either way.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2100#discussion_r512586347", "createdAt": "2020-10-27T10:48:11Z", "author": {"login": "samtstern"}, "path": "firebase-functions/src/main/java/com/google/firebase/functions/FirebaseFunctions.java", "diffHunk": "@@ -85,14 +88,29 @@\n       FirebaseApp app,\n       Context context,\n       String projectId,\n-      String region,\n+      String regionOrCustomDomain,\n       ContextProvider contextProvider) {\n     this.app = app;\n     this.client = new OkHttpClient();\n     this.serializer = new Serializer();\n     this.contextProvider = Preconditions.checkNotNull(contextProvider);\n     this.projectId = Preconditions.checkNotNull(projectId);\n-    this.region = Preconditions.checkNotNull(region);\n+\n+    boolean isRegion;\n+    try {\n+      new URL(regionOrCustomDomain);\n+      isRegion = false;\n+    } catch (MalformedURLException malformedURLException) {\n+      isRegion = true;\n+    }\n+\n+    if (isRegion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0e4389dbfb140600ee03e03b679453a0ea5ac3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzNDgxMg==", "bodyText": "Since region and customDomain are final they can't be set both in the try and the catch.\nI'm gussing that Java considers the whole try and not just the lines that could cause the exception.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2100#discussion_r512834812", "createdAt": "2020-10-27T16:18:59Z", "author": {"login": "kroikie"}, "path": "firebase-functions/src/main/java/com/google/firebase/functions/FirebaseFunctions.java", "diffHunk": "@@ -85,14 +88,29 @@\n       FirebaseApp app,\n       Context context,\n       String projectId,\n-      String region,\n+      String regionOrCustomDomain,\n       ContextProvider contextProvider) {\n     this.app = app;\n     this.client = new OkHttpClient();\n     this.serializer = new Serializer();\n     this.contextProvider = Preconditions.checkNotNull(contextProvider);\n     this.projectId = Preconditions.checkNotNull(projectId);\n-    this.region = Preconditions.checkNotNull(region);\n+\n+    boolean isRegion;\n+    try {\n+      new URL(regionOrCustomDomain);\n+      isRegion = false;\n+    } catch (MalformedURLException malformedURLException) {\n+      isRegion = true;\n+    }\n+\n+    if (isRegion) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU4NjM0Nw=="}, "originalCommit": {"oid": "bc0e4389dbfb140600ee03e03b679453a0ea5ac3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg0MjgxOQ==", "bodyText": "Ah interesting, that's fair then!", "url": "https://github.com/firebase/firebase-android-sdk/pull/2100#discussion_r512842819", "createdAt": "2020-10-27T16:28:19Z", "author": {"login": "samtstern"}, "path": "firebase-functions/src/main/java/com/google/firebase/functions/FirebaseFunctions.java", "diffHunk": "@@ -85,14 +88,29 @@\n       FirebaseApp app,\n       Context context,\n       String projectId,\n-      String region,\n+      String regionOrCustomDomain,\n       ContextProvider contextProvider) {\n     this.app = app;\n     this.client = new OkHttpClient();\n     this.serializer = new Serializer();\n     this.contextProvider = Preconditions.checkNotNull(contextProvider);\n     this.projectId = Preconditions.checkNotNull(projectId);\n-    this.region = Preconditions.checkNotNull(region);\n+\n+    boolean isRegion;\n+    try {\n+      new URL(regionOrCustomDomain);\n+      isRegion = false;\n+    } catch (MalformedURLException malformedURLException) {\n+      isRegion = true;\n+    }\n+\n+    if (isRegion) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU4NjM0Nw=="}, "originalCommit": {"oid": "bc0e4389dbfb140600ee03e03b679453a0ea5ac3"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1095, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}