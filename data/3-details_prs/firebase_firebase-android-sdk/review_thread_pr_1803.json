{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MjEzMjEx", "number": 1803, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1MToxN1rOERJ6iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1MzoxNlrOERJ9lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDIzNjg5OnYy", "diffSide": "RIGHT", "path": "encoders/firebase-encoders-reflective/src/main/java/com/google/firebase/encoders/reflective/ReflectiveObjectEncoderProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1MToxN1rOG1tpDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODowOTo0N1rOG1uVbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NTUwMA==", "bodyText": "wondering what would be the use case of LinkedHashMap?  are we going to assume the decoded json order to be associated with its getter methods?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1803#discussion_r458975500", "createdAt": "2020-07-22T17:51:17Z", "author": {"login": "James201311"}, "path": "encoders/firebase-encoders-reflective/src/main/java/com/google/firebase/encoders/reflective/ReflectiveObjectEncoderProvider.java", "diffHunk": "@@ -63,26 +68,48 @@ public void encode(@Nullable Object obj, @NonNull ObjectEncoderContext ctx) thro\n   @NonNull\n   @Override\n   public <T> ObjectEncoder<T> get(@NonNull Class<T> type) {\n-    Map<String, EncodingDescriptor> fields = new HashMap<>();\n+    Map<FieldDescriptor, EncodingDescriptor> fields = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3f2757a702b06676e040562cf2bff6e9e5ba991"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4Njg2Mg==", "bodyText": "oops, that was not intended. removed", "url": "https://github.com/firebase/firebase-android-sdk/pull/1803#discussion_r458986862", "createdAt": "2020-07-22T18:09:47Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-encoders-reflective/src/main/java/com/google/firebase/encoders/reflective/ReflectiveObjectEncoderProvider.java", "diffHunk": "@@ -63,26 +68,48 @@ public void encode(@Nullable Object obj, @NonNull ObjectEncoderContext ctx) thro\n   @NonNull\n   @Override\n   public <T> ObjectEncoder<T> get(@NonNull Class<T> type) {\n-    Map<String, EncodingDescriptor> fields = new HashMap<>();\n+    Map<FieldDescriptor, EncodingDescriptor> fields = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NTUwMA=="}, "originalCommit": {"oid": "d3f2757a702b06676e040562cf2bff6e9e5ba991"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDI0NDY5OnYy", "diffSide": "RIGHT", "path": "encoders/firebase-encoders-reflective/src/main/java/com/google/firebase/encoders/reflective/ReflectiveObjectEncoderProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1MzoxNlrOG1tuDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODowOToyNVrOG1uUnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3Njc4Mw==", "bodyText": "if we have Annotation Processor implemented, should we just check the annotation type is registered? in that case, we may not need ExtraProperty?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1803#discussion_r458976783", "createdAt": "2020-07-22T17:53:16Z", "author": {"login": "James201311"}, "path": "encoders/firebase-encoders-reflective/src/main/java/com/google/firebase/encoders/reflective/ReflectiveObjectEncoderProvider.java", "diffHunk": "@@ -63,26 +68,48 @@ public void encode(@Nullable Object obj, @NonNull ObjectEncoderContext ctx) thro\n   @NonNull\n   @Override\n   public <T> ObjectEncoder<T> get(@NonNull Class<T> type) {\n-    Map<String, EncodingDescriptor> fields = new HashMap<>();\n+    Map<FieldDescriptor, EncodingDescriptor> fields = new LinkedHashMap<>();\n     for (Method method : type.getMethods()) {\n       if (method.isAnnotationPresent(Encodable.Ignore.class)) {\n         continue;\n       }\n \n       Encodable.Field fieldAnnotation = method.getAnnotation(Encodable.Field.class);\n-      String getter = toGetterName(method, fieldAnnotation);\n-      if (getter != null) {\n-        method.setAccessible(true);\n-        fields.put(\n-            getter,\n-            new EncodingDescriptor(fieldAnnotation != null && fieldAnnotation.inline(), method));\n+      FieldDescriptor descriptor = toFieldDescriptor(method, fieldAnnotation);\n+      if (descriptor == null) {\n+        continue;\n       }\n+      method.setAccessible(true);\n+\n+      fields.put(\n+          descriptor,\n+          new EncodingDescriptor(fieldAnnotation != null && fieldAnnotation.inline(), method));\n     }\n     @SuppressWarnings(\"unchecked\")\n     ObjectEncoder<T> encoder = (ObjectEncoder<T>) new ReflectiveObjectEncoderImpl(fields);\n     return encoder;\n   }\n \n+  @Nullable\n+  private static FieldDescriptor toFieldDescriptor(Method method, Encodable.Field fieldAnnotation) {\n+    if (method.getAnnotation(Encodable.Ignore.class) != null) {\n+      return null;\n+    }\n+\n+    String name = toGetterName(method, fieldAnnotation);\n+    if (name == null) {\n+      return null;\n+    }\n+    FieldDescriptor.Builder builder = FieldDescriptor.builder(name);\n+    for (Annotation annotation : method.getAnnotations()) {\n+      if (!annotation.annotationType().isAnnotationPresent(ExtraProperty.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3f2757a702b06676e040562cf2bff6e9e5ba991"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk4NjY1Mg==", "bodyText": "we still need ExtraProperty for the code-gen decoders as at compile time we don't yet know what annotations will be registered at runtime.\nAdditionally, having this encoder implementation make assumptions about the environment it is running it would increase coupling to that environment, not something we want.\nAlso note that this encoder is a singleton and it caches information about types, so it can be run by differently configured encoder contexts.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1803#discussion_r458986652", "createdAt": "2020-07-22T18:09:25Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-encoders-reflective/src/main/java/com/google/firebase/encoders/reflective/ReflectiveObjectEncoderProvider.java", "diffHunk": "@@ -63,26 +68,48 @@ public void encode(@Nullable Object obj, @NonNull ObjectEncoderContext ctx) thro\n   @NonNull\n   @Override\n   public <T> ObjectEncoder<T> get(@NonNull Class<T> type) {\n-    Map<String, EncodingDescriptor> fields = new HashMap<>();\n+    Map<FieldDescriptor, EncodingDescriptor> fields = new LinkedHashMap<>();\n     for (Method method : type.getMethods()) {\n       if (method.isAnnotationPresent(Encodable.Ignore.class)) {\n         continue;\n       }\n \n       Encodable.Field fieldAnnotation = method.getAnnotation(Encodable.Field.class);\n-      String getter = toGetterName(method, fieldAnnotation);\n-      if (getter != null) {\n-        method.setAccessible(true);\n-        fields.put(\n-            getter,\n-            new EncodingDescriptor(fieldAnnotation != null && fieldAnnotation.inline(), method));\n+      FieldDescriptor descriptor = toFieldDescriptor(method, fieldAnnotation);\n+      if (descriptor == null) {\n+        continue;\n       }\n+      method.setAccessible(true);\n+\n+      fields.put(\n+          descriptor,\n+          new EncodingDescriptor(fieldAnnotation != null && fieldAnnotation.inline(), method));\n     }\n     @SuppressWarnings(\"unchecked\")\n     ObjectEncoder<T> encoder = (ObjectEncoder<T>) new ReflectiveObjectEncoderImpl(fields);\n     return encoder;\n   }\n \n+  @Nullable\n+  private static FieldDescriptor toFieldDescriptor(Method method, Encodable.Field fieldAnnotation) {\n+    if (method.getAnnotation(Encodable.Ignore.class) != null) {\n+      return null;\n+    }\n+\n+    String name = toGetterName(method, fieldAnnotation);\n+    if (name == null) {\n+      return null;\n+    }\n+    FieldDescriptor.Builder builder = FieldDescriptor.builder(name);\n+    for (Annotation annotation : method.getAnnotations()) {\n+      if (!annotation.annotationType().isAnnotationPresent(ExtraProperty.class)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3Njc4Mw=="}, "originalCommit": {"oid": "d3f2757a702b06676e040562cf2bff6e9e5ba991"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1278, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}