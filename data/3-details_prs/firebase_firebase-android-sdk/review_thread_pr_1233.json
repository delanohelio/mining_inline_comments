{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MDA3NDEy", "number": 1233, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODozODoxOFrODfSghQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo0Mjo1MFrODfSl7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTM1Njg1OnYy", "diffSide": "RIGHT", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsReportDataCapture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODozODoxOFrOFo6CtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoyNDozOFrOFpCJAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQzODMyNA==", "bodyText": "It seems like there should be some lifecycle that we should document. I mean, I assume that handlers can assume that a start comes before and end for the same event. But is there more to. Are there other assumptions about the order of events that we should make explicit?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1233#discussion_r378438324", "createdAt": "2020-02-12T18:38:18Z", "author": {"login": "bklimt"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsReportDataCapture.java", "diffHunk": "@@ -0,0 +1,432 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import android.app.ActivityManager;\n+import android.app.ActivityManager.RunningAppProcessInfo;\n+import android.content.Context;\n+import android.os.Build;\n+import android.os.Build.VERSION;\n+import android.os.Environment;\n+import android.os.StatFs;\n+import com.google.firebase.crashlytics.BuildConfig;\n+import com.google.firebase.crashlytics.internal.model.Architecture;\n+import com.google.firebase.crashlytics.internal.stacktrace.StackTraceTrimmingStrategy;\n+import com.google.firebase.crashlytics.internal.stacktrace.TrimmedThrowableData;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * This class is responsible for capturing information from the system and exception objects,\n+ * parsing them, and passing them to handlers implemented by callers to use the captured information\n+ * as they see fit.\n+ */\n+public class CrashlyticsReportDataCapture {\n+\n+  /**\n+   * Defines methods for handling static report data gathered from the device, as well as system and\n+   * build properties.\n+   */\n+  public interface ReportDataHandler {\n+    void startReportDataCapture(\n+        String sdkVersion,\n+        String gmpAppId,\n+        String installationId,\n+        String buildVersion,\n+        String displayVersion);\n+\n+    void startSessionDataCapture(String generator);\n+\n+    void startSessionApplicationDataCapture(\n+        String packageName,\n+        String versionCode,\n+        String versionName,\n+        String installUuid); // TODO: Unity version\n+\n+    void endSessionApplicationDataCapture();\n+\n+    void startSessionOSDataCapture(String osRelease, String osCodeName, boolean isRooted);\n+\n+    void endSessionOSDataCapture();\n+\n+    void startSessionDeviceDataCapture(\n+        int arch,\n+        String model,\n+        int availableProcessors,\n+        long totalRam,\n+        long diskSpace,\n+        boolean isEmulator,\n+        int state,\n+        String manufacturer,\n+        String modelClass);\n+\n+    void endSessionDeviceDataCapture();\n+\n+    void endSessionDataCapture();\n+\n+    void endReportDataCapture();\n+  }\n+\n+  /** Defines methods for handling data for a given exception event. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f2b7da591f94c8b631f1e15909dbee5c0b8d10"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3MTAwOA==", "bodyText": "New approach will eliminate this concern.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1233#discussion_r378571008", "createdAt": "2020-02-12T23:24:38Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsReportDataCapture.java", "diffHunk": "@@ -0,0 +1,432 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import android.app.ActivityManager;\n+import android.app.ActivityManager.RunningAppProcessInfo;\n+import android.content.Context;\n+import android.os.Build;\n+import android.os.Build.VERSION;\n+import android.os.Environment;\n+import android.os.StatFs;\n+import com.google.firebase.crashlytics.BuildConfig;\n+import com.google.firebase.crashlytics.internal.model.Architecture;\n+import com.google.firebase.crashlytics.internal.stacktrace.StackTraceTrimmingStrategy;\n+import com.google.firebase.crashlytics.internal.stacktrace.TrimmedThrowableData;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * This class is responsible for capturing information from the system and exception objects,\n+ * parsing them, and passing them to handlers implemented by callers to use the captured information\n+ * as they see fit.\n+ */\n+public class CrashlyticsReportDataCapture {\n+\n+  /**\n+   * Defines methods for handling static report data gathered from the device, as well as system and\n+   * build properties.\n+   */\n+  public interface ReportDataHandler {\n+    void startReportDataCapture(\n+        String sdkVersion,\n+        String gmpAppId,\n+        String installationId,\n+        String buildVersion,\n+        String displayVersion);\n+\n+    void startSessionDataCapture(String generator);\n+\n+    void startSessionApplicationDataCapture(\n+        String packageName,\n+        String versionCode,\n+        String versionName,\n+        String installUuid); // TODO: Unity version\n+\n+    void endSessionApplicationDataCapture();\n+\n+    void startSessionOSDataCapture(String osRelease, String osCodeName, boolean isRooted);\n+\n+    void endSessionOSDataCapture();\n+\n+    void startSessionDeviceDataCapture(\n+        int arch,\n+        String model,\n+        int availableProcessors,\n+        long totalRam,\n+        long diskSpace,\n+        boolean isEmulator,\n+        int state,\n+        String manufacturer,\n+        String modelClass);\n+\n+    void endSessionDeviceDataCapture();\n+\n+    void endSessionDataCapture();\n+\n+    void endReportDataCapture();\n+  }\n+\n+  /** Defines methods for handling data for a given exception event. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQzODMyNA=="}, "originalCommit": {"oid": "c2f2b7da591f94c8b631f1e15909dbee5c0b8d10"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTM2NDUxOnYy", "diffSide": "RIGHT", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsReportDataCapture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo0MDo1MFrOFo6H3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoyNDoyNVrOFpCIuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQzOTY0NA==", "bodyText": "I find this model extremely odd. Normally when you have a data structure, you have something like a struct with nested fields, and you have one method that creates or populates the object, and then you pass that object to methods that do something with it. But here, instead of creating the object, we call a handler for every field in the object that would be set. Why does this need to be so complicated? Can't we just populate a Report object and hand it back, and let the other code manipulate it like any other object?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1233#discussion_r378439644", "createdAt": "2020-02-12T18:40:50Z", "author": {"login": "bklimt"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsReportDataCapture.java", "diffHunk": "@@ -0,0 +1,432 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import android.app.ActivityManager;\n+import android.app.ActivityManager.RunningAppProcessInfo;\n+import android.content.Context;\n+import android.os.Build;\n+import android.os.Build.VERSION;\n+import android.os.Environment;\n+import android.os.StatFs;\n+import com.google.firebase.crashlytics.BuildConfig;\n+import com.google.firebase.crashlytics.internal.model.Architecture;\n+import com.google.firebase.crashlytics.internal.stacktrace.StackTraceTrimmingStrategy;\n+import com.google.firebase.crashlytics.internal.stacktrace.TrimmedThrowableData;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * This class is responsible for capturing information from the system and exception objects,\n+ * parsing them, and passing them to handlers implemented by callers to use the captured information\n+ * as they see fit.\n+ */\n+public class CrashlyticsReportDataCapture {\n+\n+  /**\n+   * Defines methods for handling static report data gathered from the device, as well as system and\n+   * build properties.\n+   */\n+  public interface ReportDataHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f2b7da591f94c8b631f1e15909dbee5c0b8d10"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3MDkzNw==", "bodyText": "Discussed this offline and decided to take a different approach.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1233#discussion_r378570937", "createdAt": "2020-02-12T23:24:25Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsReportDataCapture.java", "diffHunk": "@@ -0,0 +1,432 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import android.app.ActivityManager;\n+import android.app.ActivityManager.RunningAppProcessInfo;\n+import android.content.Context;\n+import android.os.Build;\n+import android.os.Build.VERSION;\n+import android.os.Environment;\n+import android.os.StatFs;\n+import com.google.firebase.crashlytics.BuildConfig;\n+import com.google.firebase.crashlytics.internal.model.Architecture;\n+import com.google.firebase.crashlytics.internal.stacktrace.StackTraceTrimmingStrategy;\n+import com.google.firebase.crashlytics.internal.stacktrace.TrimmedThrowableData;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * This class is responsible for capturing information from the system and exception objects,\n+ * parsing them, and passing them to handlers implemented by callers to use the captured information\n+ * as they see fit.\n+ */\n+public class CrashlyticsReportDataCapture {\n+\n+  /**\n+   * Defines methods for handling static report data gathered from the device, as well as system and\n+   * build properties.\n+   */\n+  public interface ReportDataHandler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQzOTY0NA=="}, "originalCommit": {"oid": "c2f2b7da591f94c8b631f1e15909dbee5c0b8d10"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTM3MDY5OnYy", "diffSide": "RIGHT", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/model/Architecture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo0Mjo1MFrOFo6Lyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMzoyNDowMVrOFpCIQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0MDY1MA==", "bodyText": "Android style is generally to use IntDefs instead of enums, right? Personally, I prefer enums, but thought I'd point it out. If it were part of the public API, it would be a bigger deal.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1233#discussion_r378440650", "createdAt": "2020-02-12T18:42:50Z", "author": {"login": "bklimt"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/model/Architecture.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.model;\n+\n+import android.os.Build;\n+import android.text.TextUtils;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public enum Architecture {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f2b7da591f94c8b631f1e15909dbee5c0b8d10"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU3MDgxNw==", "bodyText": "Hmm, I guess it depends on which camp you're in (perfmatters/enummatters). \ud83d\ude1d But in this case I think an IntDef actually makes more sense.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1233#discussion_r378570817", "createdAt": "2020-02-12T23:24:01Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/model/Architecture.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.model;\n+\n+import android.os.Build;\n+import android.text.TextUtils;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+public enum Architecture {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0MDY1MA=="}, "originalCommit": {"oid": "c2f2b7da591f94c8b631f1e15909dbee5c0b8d10"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 770, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}