{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NTY2ODYz", "number": 1683, "title": "support decode array token", "bodyText": "[] will be decoded as empty array.", "createdAt": "2020-06-18T15:40:58Z", "url": "https://github.com/firebase/firebase-android-sdk/pull/1683", "merged": true, "mergeCommit": {"oid": "f755a1840b6e504643a91c85c9e048edc32f7e00"}, "closed": true, "closedAt": "2020-06-19T20:20:01Z", "author": {"login": "James201311"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsiXQ8AFqTQzMzUyMjg2Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcs4gp1AFqTQzNDMwODE2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTIyODYz", "url": "https://github.com/firebase/firebase-android-sdk/pull/1683#pullrequestreview-433522863", "createdAt": "2020-06-18T18:00:55Z", "commit": {"oid": "0e23ad603ec5b5cf53fec38979f80951541b3f78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODowMDo1NlrOGl6W9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODowMDo1NlrOGl6W9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwNjY0Ng==", "bodyText": "if the first element is null, it will fail.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1683#discussion_r442406646", "createdAt": "2020-06-18T18:00:56Z", "author": {"login": "James201311"}, "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java", "diffHunk": "@@ -50,26 +53,115 @@\n   private <T> T decode(TypeToken<T> typeToken) throws IOException {\n     if (typeToken instanceof TypeToken.ClassToken) {\n       TypeToken.ClassToken<T> classToken = (TypeToken.ClassToken<T>) typeToken;\n-      CreationContextImpl creationContext = decodeObject(classToken);\n-      @SuppressWarnings(\"unchecked\")\n-      // Safe, because typeToken and TypeCreator always have same type parameter\n-      TypeCreator<T> creator = (TypeCreator<T>) typeCreators.get(classToken);\n-      if (creator == null)\n-        throw new IllegalArgumentException(\n-            \"TypeCreator of \" + classToken.getRawType() + \" is not register.\");\n-      return (T) creator.create(creationContext);\n-\n+      return decodeClassToken(classToken);\n     } else if (typeToken instanceof TypeToken.ArrayToken) {\n-      // TODO: Change typeParameter T in ArrayToken<T> to represent component type.\n-      /**\n-       * reader.beginArray(); List<T> l = new LinkedList<>(); while reader.hasNext: T val =\n-       * decode(arrayToken.getComponentType()); l.add(val); reader.endArray(); return l.toArray();\n-       */\n+      TypeToken.ArrayToken<T> arrayToken = (TypeToken.ArrayToken<T>) typeToken;\n+      return (T) decodeArrayToken(arrayToken);\n+    }\n+    return null;\n+  }\n+\n+  private <T> T decodeClassToken(TypeToken.ClassToken<T> classToken) throws IOException {\n+    if (classToken.getRawType().isPrimitive()) {\n+      return decodePrimitive(classToken);\n+    } else if (isSingleValue(classToken)) {\n+      return decodeSingleValue(classToken);\n+    } else {\n+      return decodeObject(classToken);\n+    }\n+  }\n+\n+  private <T, E> T decodeArrayToken(TypeToken.ArrayToken<T> arrayToken) throws IOException {\n+    @SuppressWarnings(\"unchecked\")\n+    TypeToken<E> componentTypeToken = (TypeToken<E>) arrayToken.getComponentType();\n+    List<E> list = new ArrayList<>();\n+    reader.beginArray();\n+    while (reader.hasNext()) {\n+      list.add(decode(componentTypeToken));\n+    }\n+    reader.endArray();\n+    return convertGenericListToArray(list, arrayToken);\n+  }\n+\n+  private static <T, E> T convertGenericListToArray(\n+      List<E> list, TypeToken.ArrayToken<T> arrayToken) {\n+    if (list.size() == 0) return null;\n+    @SuppressWarnings(\"unchecked\")\n+    TypeToken<E> componentTypeToken = (TypeToken<E>) arrayToken.getComponentType();\n+    if (componentTypeToken instanceof TypeToken.ClassToken) {\n+      TypeToken.ClassToken<E> componentClassToken = (TypeToken.ClassToken<E>) componentTypeToken;\n+      Class<E> componentClass = componentClassToken.getRawType();\n+      if (componentClassToken.getRawType().isPrimitive()) {\n+        return convertGenericListToPrimitiveArray(list, componentClass, arrayToken);\n+      }\n+    }\n+    @SuppressWarnings(\"unchecked\") // Safe, list is not empty\n+    E[] arr = (E[]) Array.newInstance(list.get(0).getClass(), list.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e23ad603ec5b5cf53fec38979f80951541b3f78"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bee6a7b525741574df0293d1237aa1c786b71cc", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/6bee6a7b525741574df0293d1237aa1c786b71cc", "committedDate": "2020-06-19T14:45:06Z", "message": "support decode array token"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f2d76516471e7829cbb574f0720d899896eae3a", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/7f2d76516471e7829cbb574f0720d899896eae3a", "committedDate": "2020-06-19T15:07:44Z", "message": "getting rawType from typeToken"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e23ad603ec5b5cf53fec38979f80951541b3f78", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/0e23ad603ec5b5cf53fec38979f80951541b3f78", "committedDate": "2020-06-18T15:34:37Z", "message": "support decode array token"}, "afterCommit": {"oid": "7f2d76516471e7829cbb574f0720d899896eae3a", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/7f2d76516471e7829cbb574f0720d899896eae3a", "committedDate": "2020-06-19T15:07:44Z", "message": "getting rawType from typeToken"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjE3Mjcx", "url": "https://github.com/firebase/firebase-android-sdk/pull/1683#pullrequestreview-434217271", "createdAt": "2020-06-19T16:49:29Z", "commit": {"oid": "7f2d76516471e7829cbb574f0720d899896eae3a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjo0OToyOVrOGmbT6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzowMTowOFrOGmbnxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0NjUzNw==", "bodyText": "nit: let's throw EncodingException here as this seems like an impossible branch.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1683#discussion_r442946537", "createdAt": "2020-06-19T16:49:29Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java", "diffHunk": "@@ -50,26 +53,110 @@\n   private <T> T decode(TypeToken<T> typeToken) throws IOException {\n     if (typeToken instanceof TypeToken.ClassToken) {\n       TypeToken.ClassToken<T> classToken = (TypeToken.ClassToken<T>) typeToken;\n-      CreationContextImpl creationContext = decodeObject(classToken);\n-      @SuppressWarnings(\"unchecked\")\n-      // Safe, because typeToken and TypeCreator always have same type parameter\n-      TypeCreator<T> creator = (TypeCreator<T>) typeCreators.get(classToken);\n-      if (creator == null)\n-        throw new IllegalArgumentException(\n-            \"TypeCreator of \" + classToken.getRawType() + \" is not register.\");\n-      return (T) creator.create(creationContext);\n-\n+      return decodeClassToken(classToken);\n     } else if (typeToken instanceof TypeToken.ArrayToken) {\n-      // TODO: Change typeParameter T in ArrayToken<T> to represent component type.\n-      /**\n-       * reader.beginArray(); List<T> l = new LinkedList<>(); while reader.hasNext: T val =\n-       * decode(arrayToken.getComponentType()); l.add(val); reader.endArray(); return l.toArray();\n-       */\n+      TypeToken.ArrayToken<T> arrayToken = (TypeToken.ArrayToken<T>) typeToken;\n+      return (T) decodeArrayToken(arrayToken);\n     }\n     return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f2d76516471e7829cbb574f0720d899896eae3a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk1MDQ5Ng==", "bodyText": "how about?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(arr[0]).isEqualTo(\"a\");\n          \n          \n            \n                assertThat(arr[1]).isEqualTo(\"b\");\n          \n          \n            \n                assertThat(arr).isEqualTo(new String[] { \"a\", \"b\"});", "url": "https://github.com/firebase/firebase-android-sdk/pull/1683#discussion_r442950496", "createdAt": "2020-06-19T16:58:40Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContextTest.java", "diffHunk": "@@ -330,4 +330,117 @@ public void singleValues_areDecodeCorrectly() throws IOException {\n     assertThat(singleValues.c).isEqualTo('c');\n     assertThat(singleValues.str).isEqualTo(\"str\");\n   }\n+\n+  static class ArrFoo {\n+    int i;\n+\n+    ArrFoo(int i) {\n+      this.i = i;\n+    }\n+  }\n+\n+  static class ArrFooObjectDecoder implements ObjectDecoder<ArrFoo> {\n+    @NonNull\n+    @Override\n+    public TypeCreator<ArrFoo> decode(@NonNull ObjectDecoderContext<ArrFoo> ctx) {\n+      FieldRef.Primitive<Integer> iField = ctx.decodeInteger(FieldDescriptor.of(\"i\"));\n+      return (creationCtx -> new ArrFoo(creationCtx.getInteger(iField)));\n+    }\n+  }\n+\n+  @Test\n+  public void arrayOfObjects_shouldBeDecodedCorrectly() throws IOException {\n+    Map<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n+    objectDecoders.put(ArrFoo.class, new ArrFooObjectDecoder());\n+    JsonDataDecoderBuilderContext jsonDataDecoderBuilderContext =\n+        new JsonDataDecoderBuilderContext(objectDecoders);\n+\n+    String json = \"[{\\\"i\\\":0}, {\\\"i\\\":1}]\";\n+    InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n+    ArrFoo[] arrFoo =\n+        jsonDataDecoderBuilderContext.decode(input, TypeToken.of(new Safe<ArrFoo[]>() {}));\n+    assertThat(arrFoo[0].i).isEqualTo(0);\n+    assertThat(arrFoo[1].i).isEqualTo(1);\n+  }\n+\n+  @Test\n+  public void arrayOfSingleValue_shouldBeDecodedCorrectly() throws IOException {\n+    Map<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n+    JsonDataDecoderBuilderContext jsonDataDecoderBuilderContext =\n+        new JsonDataDecoderBuilderContext(objectDecoders);\n+\n+    String json = \"[\\\"a\\\",\\\"b\\\"]\";\n+    InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n+    String[] arr =\n+        jsonDataDecoderBuilderContext.decode(input, TypeToken.of(new Safe<String[]>() {}));\n+    assertThat(arr[0]).isEqualTo(\"a\");\n+    assertThat(arr[1]).isEqualTo(\"b\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f2d76516471e7829cbb574f0720d899896eae3a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk1MDYxOQ==", "bodyText": "same here and below.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1683#discussion_r442950619", "createdAt": "2020-06-19T16:58:57Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContextTest.java", "diffHunk": "@@ -330,4 +330,117 @@ public void singleValues_areDecodeCorrectly() throws IOException {\n     assertThat(singleValues.c).isEqualTo('c');\n     assertThat(singleValues.str).isEqualTo(\"str\");\n   }\n+\n+  static class ArrFoo {\n+    int i;\n+\n+    ArrFoo(int i) {\n+      this.i = i;\n+    }\n+  }\n+\n+  static class ArrFooObjectDecoder implements ObjectDecoder<ArrFoo> {\n+    @NonNull\n+    @Override\n+    public TypeCreator<ArrFoo> decode(@NonNull ObjectDecoderContext<ArrFoo> ctx) {\n+      FieldRef.Primitive<Integer> iField = ctx.decodeInteger(FieldDescriptor.of(\"i\"));\n+      return (creationCtx -> new ArrFoo(creationCtx.getInteger(iField)));\n+    }\n+  }\n+\n+  @Test\n+  public void arrayOfObjects_shouldBeDecodedCorrectly() throws IOException {\n+    Map<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n+    objectDecoders.put(ArrFoo.class, new ArrFooObjectDecoder());\n+    JsonDataDecoderBuilderContext jsonDataDecoderBuilderContext =\n+        new JsonDataDecoderBuilderContext(objectDecoders);\n+\n+    String json = \"[{\\\"i\\\":0}, {\\\"i\\\":1}]\";\n+    InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n+    ArrFoo[] arrFoo =\n+        jsonDataDecoderBuilderContext.decode(input, TypeToken.of(new Safe<ArrFoo[]>() {}));\n+    assertThat(arrFoo[0].i).isEqualTo(0);\n+    assertThat(arrFoo[1].i).isEqualTo(1);\n+  }\n+\n+  @Test\n+  public void arrayOfSingleValue_shouldBeDecodedCorrectly() throws IOException {\n+    Map<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n+    JsonDataDecoderBuilderContext jsonDataDecoderBuilderContext =\n+        new JsonDataDecoderBuilderContext(objectDecoders);\n+\n+    String json = \"[\\\"a\\\",\\\"b\\\"]\";\n+    InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n+    String[] arr =\n+        jsonDataDecoderBuilderContext.decode(input, TypeToken.of(new Safe<String[]>() {}));\n+    assertThat(arr[0]).isEqualTo(\"a\");\n+    assertThat(arr[1]).isEqualTo(\"b\");\n+  }\n+\n+  @Test\n+  public void arrayOfPrimitive_shouldBeDecodedCorrectly() throws IOException {\n+    Map<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n+    JsonDataDecoderBuilderContext jsonDataDecoderBuilderContext =\n+        new JsonDataDecoderBuilderContext(objectDecoders);\n+\n+    String json = \"[0, 1]\";\n+    InputStream input = new ByteArrayInputStream(json.getBytes(UTF_8));\n+    int[] arr = jsonDataDecoderBuilderContext.decode(input, TypeToken.of(new Safe<int[]>() {}));\n+    assertThat(arr[0]).isEqualTo(0);\n+    assertThat(arr[1]).isEqualTo(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f2d76516471e7829cbb574f0720d899896eae3a"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk1MTYyMw==", "bodyText": "What's the purpose of the E type parameter? can you use Object in TypeToken below instead?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1683#discussion_r442951623", "createdAt": "2020-06-19T17:01:08Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java", "diffHunk": "@@ -50,26 +53,110 @@\n   private <T> T decode(TypeToken<T> typeToken) throws IOException {\n     if (typeToken instanceof TypeToken.ClassToken) {\n       TypeToken.ClassToken<T> classToken = (TypeToken.ClassToken<T>) typeToken;\n-      CreationContextImpl creationContext = decodeObject(classToken);\n-      @SuppressWarnings(\"unchecked\")\n-      // Safe, because typeToken and TypeCreator always have same type parameter\n-      TypeCreator<T> creator = (TypeCreator<T>) typeCreators.get(classToken);\n-      if (creator == null)\n-        throw new IllegalArgumentException(\n-            \"TypeCreator of \" + classToken.getRawType() + \" is not register.\");\n-      return (T) creator.create(creationContext);\n-\n+      return decodeClassToken(classToken);\n     } else if (typeToken instanceof TypeToken.ArrayToken) {\n-      // TODO: Change typeParameter T in ArrayToken<T> to represent component type.\n-      /**\n-       * reader.beginArray(); List<T> l = new LinkedList<>(); while reader.hasNext: T val =\n-       * decode(arrayToken.getComponentType()); l.add(val); reader.endArray(); return l.toArray();\n-       */\n+      TypeToken.ArrayToken<T> arrayToken = (TypeToken.ArrayToken<T>) typeToken;\n+      return (T) decodeArrayToken(arrayToken);\n     }\n     return null;\n   }\n \n-  private <T> CreationContextImpl decodeObject(TypeToken.ClassToken<T> classToken)\n+  private <T> T decodeClassToken(TypeToken.ClassToken<T> classToken) throws IOException {\n+    if (classToken.getRawType().isPrimitive()) {\n+      return decodePrimitive(classToken);\n+    } else if (isSingleValue(classToken)) {\n+      return decodeSingleValue(classToken);\n+    } else {\n+      return decodeObject(classToken);\n+    }\n+  }\n+\n+  private <T, E> T decodeArrayToken(TypeToken.ArrayToken<T> arrayToken) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f2d76516471e7829cbb574f0720d899896eae3a"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc16a340752e39eb5737d648eabde47ab611dd48", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/cc16a340752e39eb5737d648eabde47ab611dd48", "committedDate": "2020-06-19T18:16:57Z", "message": "addressed comments in test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a14cb4cc3177b6dcc01ad4a6b117f74a0558fc32", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/a14cb4cc3177b6dcc01ad4a6b117f74a0558fc32", "committedDate": "2020-06-19T18:17:30Z", "message": "remove <E> from decodeArray"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4e6e9d0b89de7bba5cacd9a006683aedc9b1406", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/c4e6e9d0b89de7bba5cacd9a006683aedc9b1406", "committedDate": "2020-06-19T18:27:49Z", "message": "throw encoding exception for unknown typeToken"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "005298e5df14187c1a3caafd8ed57d8f5ba1fac4", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/005298e5df14187c1a3caafd8ed57d8f5ba1fac4", "committedDate": "2020-06-19T19:34:04Z", "message": "address comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MzA4MTY5", "url": "https://github.com/firebase/firebase-android-sdk/pull/1683#pullrequestreview-434308169", "createdAt": "2020-06-19T19:48:45Z", "commit": {"oid": "c4e6e9d0b89de7bba5cacd9a006683aedc9b1406"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxOTo0ODo0NVrOGmfpYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxOTo0ODo0NVrOGmfpYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAxNzU2OA==", "bodyText": "you should not use this dependency, it's only needed to be able to test encoders-processor, depending on :encoders:firebase-encoders-json should be enough(which you already do).", "url": "https://github.com/firebase/firebase-android-sdk/pull/1683#discussion_r443017568", "createdAt": "2020-06-19T19:48:45Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/firebase-decoders-json.gradle", "diffHunk": "@@ -54,6 +54,7 @@ dependencies {\n     testImplementation \"com.google.truth:truth:$googleTruthVersion\"\n     testImplementation 'org.mockito:mockito-core:2.25.0'\n     implementation project(path: ':encoders:firebase-encoders-json')\n+    implementation project(path: ':encoders:firebase-encoders-processor:test-support')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4e6e9d0b89de7bba5cacd9a006683aedc9b1406"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2549, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}