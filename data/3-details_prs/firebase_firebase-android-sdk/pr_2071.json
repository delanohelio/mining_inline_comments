{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MDE3MzAz", "number": 2071, "title": "Add dynamic loading support to component discovery.", "bodyText": "ComponentRuntime will now store any registrar names that failed to\nload due to ClassNotFoundException for future use.\nComponentRuntime will provide a new ComponentLoader component that\ncan be used by interested parties to trigger component discovery. This\nwill be used by the new \"dynamic-module-support\" sdk to trigger\ndiscovery upon new module installation.", "createdAt": "2020-10-16T18:11:08Z", "url": "https://github.com/firebase/firebase-android-sdk/pull/2071", "merged": true, "mergeCommit": {"oid": "9cf620c2732275ed06021c4078471911ddada71e"}, "closed": true, "closedAt": "2020-10-16T20:49:24Z", "author": {"login": "vkryachko"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTJgkdgH2gAyNTA1MDE3MzAzOjYyYTg5NzIzZGE5NTY0NjQ4NjVkMzBlYTA4MzRkNDRmYWE3OGEzMGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTMWj7AH2gAyNTA1MDE3MzAzOmY1NzVhYjQwMTlkMWYxNjIxYTBmZDcxMzUyMzk1MzliZDJlOThmNzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "62a89723da956464865d30ea0834d44faa78a30a", "author": {"user": {"login": "vkryachko", "name": "Vladimir Kryachko"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/62a89723da956464865d30ea0834d44faa78a30a", "committedDate": "2020-10-16T17:06:31Z", "message": "Add dynamic loading support to component discovery.\n\n* `ComponentRuntime` will now store any registrar names that failed to\n  load due to `ClassNotFoundException` for future use.\n* `ComponentRuntime` will provide a new `ComponentLoader` component that\n  can be used by interested parties to trigger component discovery. This\n  will be used by the new \"dynamic-module-support\" sdk to trigger\n  discovery upon new module installation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7434d27df68b0b2dd6f05c95925a663cd51c870a", "author": {"user": {"login": "vkryachko", "name": "Vladimir Kryachko"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/7434d27df68b0b2dd6f05c95925a663cd51c870a", "committedDate": "2020-10-16T18:19:21Z", "message": "Add hide."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c664a760281ee18dc258080f439a34f611ef7ba3", "author": {"user": {"login": "vkryachko", "name": "Vladimir Kryachko"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/c664a760281ee18dc258080f439a34f611ef7ba3", "committedDate": "2020-10-16T19:11:45Z", "message": "Copy input provider list."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNzYwMzg5", "url": "https://github.com/firebase/firebase-android-sdk/pull/2071#pullrequestreview-510760389", "createdAt": "2020-10-16T19:54:43Z", "commit": {"oid": "c664a760281ee18dc258080f439a34f611ef7ba3"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTo1NDo0M1rOHjOAXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTo1NzoyMFrOHjOE2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY5MTY3Nw==", "bodyText": "Since this is the new preferred method, please add a comment.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2071#discussion_r506691677", "createdAt": "2020-10-16T19:54:43Z", "author": {"login": "rlazo"}, "path": "firebase-components/src/main/java/com/google/firebase/components/ComponentDiscovery.java", "diffHunk": "@@ -68,37 +70,62 @@\n     this.retriever = retriever;\n   }\n \n-  /** Returns the discovered {@link ComponentRegistrar}s. */\n+  /**\n+   * Returns the discovered {@link ComponentRegistrar}s.\n+   *\n+   * @deprecated Use {@link #discoverLazy()} instead.\n+   */\n+  @Deprecated\n   public List<ComponentRegistrar> discover() {\n-    return instantiate(retriever.retrieve(context));\n-  }\n-\n-  private static List<ComponentRegistrar> instantiate(List<String> registrarNames) {\n-    List<ComponentRegistrar> registrars = new ArrayList<>();\n-    for (String name : registrarNames) {\n+    List<ComponentRegistrar> result = new ArrayList<>();\n+    for (String registrarName : retriever.retrieve(context)) {\n       try {\n-        Class<?> loadedClass = Class.forName(name);\n-        if (!ComponentRegistrar.class.isAssignableFrom(loadedClass)) {\n-          Log.w(\n-              TAG,\n-              String.format(\"Class %s is not an instance of %s\", name, COMPONENT_SENTINEL_VALUE));\n-          continue;\n+        ComponentRegistrar registrar = instantiate(registrarName);\n+        if (registrar != null) {\n+          result.add(registrar);\n         }\n-        registrars.add((ComponentRegistrar) loadedClass.getDeclaredConstructor().newInstance());\n-      } catch (ClassNotFoundException e) {\n-        Log.w(TAG, String.format(\"Class %s is not an found.\", name), e);\n-      } catch (IllegalAccessException e) {\n-        Log.w(TAG, String.format(\"Could not instantiate %s.\", name), e);\n-      } catch (InstantiationException e) {\n-        Log.w(TAG, String.format(\"Could not instantiate %s.\", name), e);\n-      } catch (NoSuchMethodException e) {\n-        Log.w(TAG, String.format(\"Could not instantiate %s\", name), e);\n-      } catch (InvocationTargetException e) {\n-        Log.w(TAG, String.format(\"Could not instantiate %s\", name), e);\n+      } catch (InvalidRegistrarException ex) {\n+        Log.w(TAG, \"Invalid component registrar.\", ex);\n       }\n     }\n+    return result;\n+  }\n+\n+  public List<Provider<ComponentRegistrar>> discoverLazy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c664a760281ee18dc258080f439a34f611ef7ba3"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY5MjgyNg==", "bodyText": "How could an object that causes this exception get in the list of unprocessedRegistrarProviders", "url": "https://github.com/firebase/firebase-android-sdk/pull/2071#discussion_r506692826", "createdAt": "2020-10-16T19:57:20Z", "author": {"login": "rlazo"}, "path": "firebase-components/src/main/java/com/google/firebase/components/ComponentRuntime.java", "diffHunk": "@@ -35,35 +38,86 @@\n  * <p>Does {@link Component} dependency resolution and provides access to resolved {@link\n  * Component}s via {@link #get(Class)} method.\n  */\n-public class ComponentRuntime extends AbstractComponentContainer {\n+public class ComponentRuntime extends AbstractComponentContainer implements ComponentLoader {\n   private static final Provider<Set<Object>> EMPTY_PROVIDER = Collections::emptySet;\n   private final Map<Component<?>, Provider<?>> components = new HashMap<>();\n   private final Map<Class<?>, Provider<?>> lazyInstanceMap = new HashMap<>();\n-  private final Map<Class<?>, Provider<Set<?>>> lazySetMap = new HashMap<>();\n+  private final Map<Class<?>, LazySet<?>> lazySetMap = new HashMap<>();\n+  private final List<Provider<ComponentRegistrar>> unprocessedRegistrarProviders;\n   private final EventBus eventBus;\n+  private Boolean eagerComponentsInitializedWith = null;\n \n   /**\n    * Creates an instance of {@link ComponentRuntime} for the provided {@link ComponentRegistrar}s\n    * and any additional components.\n+   *\n+   * @deprecated Use {@link #create(Executor, Iterable, Component[])} instead.\n    */\n+  @Deprecated\n   public ComponentRuntime(\n       Executor defaultEventExecutor,\n       Iterable<ComponentRegistrar> registrars,\n       Component<?>... additionalComponents) {\n+    this(defaultEventExecutor, toProviders(registrars), true, additionalComponents);\n+  }\n+\n+  /**\n+   * Creates an instance of {@link ComponentRuntime} for the provided {@link ComponentRegistrar}s\n+   * and any additional components.\n+   */\n+  public static ComponentRuntime create(\n+      Executor defaultEventExecutor,\n+      Iterable<Provider<ComponentRegistrar>> registrars,\n+      Component<?>... additionalComponents) {\n+    return new ComponentRuntime(defaultEventExecutor, registrars, true, additionalComponents);\n+  }\n+\n+  private ComponentRuntime(\n+      Executor defaultEventExecutor,\n+      Iterable<Provider<ComponentRegistrar>> registrars,\n+      boolean disambiguateConstructorOverload,\n+      Component<?>... additionalComponents) {\n     eventBus = new EventBus(defaultEventExecutor);\n+\n     List<Component<?>> componentsToAdd = new ArrayList<>();\n-    componentsToAdd.add(Component.of(eventBus, EventBus.class, Subscriber.class, Publisher.class));\n \n-    for (ComponentRegistrar registrar : registrars) {\n-      componentsToAdd.addAll(registrar.getComponents());\n-    }\n+    componentsToAdd.add(Component.of(eventBus, EventBus.class, Subscriber.class, Publisher.class));\n+    componentsToAdd.add(Component.of(this, ComponentLoader.class));\n     for (Component<?> additionalComponent : additionalComponents) {\n       if (additionalComponent != null) {\n         componentsToAdd.add(additionalComponent);\n       }\n     }\n \n-    CycleDetector.detect(componentsToAdd);\n+    unprocessedRegistrarProviders = iterableToList(registrars);\n+\n+    discoverComponents(componentsToAdd);\n+  }\n+\n+  private synchronized void discoverComponents(List<Component<?>> componentsToAdd) {\n+\n+    Iterator<Provider<ComponentRegistrar>> iterator = unprocessedRegistrarProviders.iterator();\n+    while (iterator.hasNext()) {\n+      Provider<ComponentRegistrar> provider = iterator.next();\n+      try {\n+        ComponentRegistrar registrar = provider.get();\n+        if (registrar != null) {\n+          componentsToAdd.addAll(registrar.getComponents());\n+          iterator.remove();\n+        }\n+      } catch (InvalidRegistrarException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c664a760281ee18dc258080f439a34f611ef7ba3"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f575ab4019d1f1621a0fd7135239539bd2e98f75", "author": {"user": {"login": "vkryachko", "name": "Vladimir Kryachko"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/f575ab4019d1f1621a0fd7135239539bd2e98f75", "committedDate": "2020-10-16T20:25:18Z", "message": "Add javadoc to `discoverLazy()`."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2390, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}