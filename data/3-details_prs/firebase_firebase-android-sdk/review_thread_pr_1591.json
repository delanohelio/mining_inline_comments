{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyODk5MTk3", "number": 1591, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMToyNTo1OFrOD_eQlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMToyNTo1OFrOD_eQlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODgyNjQ2OnYy", "diffSide": "RIGHT", "path": "encoders/firebase-encoders-json/src/main/java/com/google/firebase/encoders/FieldDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMToyNTo1OFrOGaJ5Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMToyNTo1OFrOGaJ5Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA3ODI3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!name.equals(that.name)) {\n          \n          \n            \n                  return false;\n          \n          \n            \n                }\n          \n          \n            \n                return properties.equals(that.properties);\n          \n          \n            \n                return name.equals(that.name) &&\n          \n          \n            \n                    properties.equals(that.properties);", "url": "https://github.com/firebase/firebase-android-sdk/pull/1591#discussion_r430078278", "createdAt": "2020-05-25T21:25:58Z", "author": {"login": "rlazo"}, "path": "encoders/firebase-encoders-json/src/main/java/com/google/firebase/encoders/FieldDescriptor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.encoders;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import java.lang.annotation.Annotation;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Describes a field of a given type.\n+ *\n+ * <p>Contains the following information:\n+ *\n+ * <ul>\n+ *   <li>Name of the field.\n+ *   <li>A set of annotations attached to the field.\n+ * </ul>\n+ *\n+ * <p>For example the following field could have the {@link FieldDescriptor} equivalent to:\n+ *\n+ * <pre>{@code\n+ * @MyAnnotation(key=\"value\")\n+ * String getFoo();\n+ *\n+ * FieldDescriptor(name=\"foo\", properties=[@MyAnnotation(key=\"value\")])\n+ * }</pre>\n+ */\n+public final class FieldDescriptor {\n+\n+  private final String name;\n+  private final Map<Class<?>, Object> properties;\n+\n+  private FieldDescriptor(String name, Map<Class<?>, Object> properties) {\n+    this.name = name;\n+    this.properties = properties;\n+  }\n+\n+  /** Name of the field. */\n+  @NonNull\n+  public String getName() {\n+    return name;\n+  }\n+\n+  /**\n+   * Provides access to extra properties of the field.\n+   *\n+   * @return {@code T} annotation if present, null otherwise.\n+   */\n+  @Nullable\n+  @SuppressWarnings(\"unchecked\")\n+  public <T extends Annotation> T getProperty(@NonNull Class<T> type) {\n+    return (T) properties.get(type);\n+  }\n+\n+  @NonNull\n+  public static Builder builder(@NonNull String name) {\n+    return new Builder(name);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof FieldDescriptor)) {\n+      return false;\n+    }\n+\n+    FieldDescriptor that = (FieldDescriptor) o;\n+\n+    if (!name.equals(that.name)) {\n+      return false;\n+    }\n+    return properties.equals(that.properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c4538bc6c6ebaa382d40216c680dc65936169c"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1378, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}