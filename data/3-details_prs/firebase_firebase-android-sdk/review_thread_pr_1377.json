{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNjI5NDIw", "number": 1377, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjozNDoxMFrODq_vWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo0NDozN1rODq_51A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDExMDk2OnYy", "diffSide": "RIGHT", "path": "ci/fireci/fireciplugins/coverage.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjozNDoxMFrOF7FnqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjo0MzoxOFrOF7kSeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMjM3Ng==", "bodyText": "Pls add:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              result = subprocess.run(['gcloud', 'auth', 'print-identity-token'], stdout=subprocess.PIPE)\n          \n          \n            \n              result = subprocess.run(['gcloud', 'auth', 'print-identity-token'], stdout=subprocess.PIPE, check=True)\n          \n      \n    \n    \n  \n\nOtherwise you won't know if gcloud fails", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r397502376", "createdAt": "2020-03-24T22:34:10Z", "author": {"login": "vkryachko"}, "path": "ci/fireci/fireciplugins/coverage.py", "diffHunk": "@@ -0,0 +1,122 @@\n+# Copyright 2020 Google LLC\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import click\n+import glob\n+import json\n+import os\n+import re\n+import requests\n+import subprocess\n+import xml.etree.ElementTree as ElementTree\n+\n+from fireci import ci_command\n+from fireci import gradle\n+\n+\n+@click.option(\n+  '--gradle-task',\n+  type=click.Choice(['checkCoverage', 'checkCoverageChanged']),\n+  default='checkCoverage',\n+  help='Run coverage tasks for affected products only in pre-submit and all products in post-submit'\n+)\n+@ci_command()\n+def coverage_check(gradle_task):\n+  gradle.run(gradle_task)\n+\n+  test_report = parse_xml_reports()\n+  post_request(test_report)\n+\n+\n+def parse_xml_reports():\n+  test_results = []\n+\n+  xml_reports = glob.glob('./**/reports/jacoco/*.xml', recursive=True)\n+  for xml_report in xml_reports:\n+    sdk = re.search(r'([^/]*)\\.xml', xml_report).group(1)\n+    report = ElementTree.parse(xml_report).getroot()\n+    sdk_coverage = calculate_coverage(report)\n+    test_results.append({'sdk': sdk, 'type': '', 'value': sdk_coverage})\n+\n+    for source_file in report.findall('.//sourcefile'):\n+      file_name = source_file.attrib['name']\n+      file_coverage = calculate_coverage(source_file)\n+      test_results.append({'sdk': sdk, 'type': file_name, 'value': file_coverage})\n+\n+  test_report = {'metric': 'Coverage', 'results': test_results, 'log': find_prow_job_link()}\n+\n+  return json.dumps(test_report)\n+\n+\n+def calculate_coverage(element):\n+  counter = element.find('counter[@type=\"LINE\"]')\n+  if counter is not None:\n+    covered = int(counter.attrib['covered'])\n+    missed = int(counter.attrib['missed'])\n+    return covered / (covered + missed)\n+  return 0\n+\n+\n+def find_prow_job_link():\n+  job_name = os.getenv('JOB_NAME')\n+  job_type = os.getenv('JOB_TYPE')\n+  build_id = os.getenv('BUILD_ID')\n+  repo_owner = os.getenv('REPO_OWNER')\n+  repo_name = os.getenv('REPO_NAME')\n+  pull_number = os.getenv('PULL_NUMBER')\n+\n+  domain = \"android-ci.firebaseopensource.com\"\n+  bucket = \"android-ci\"\n+\n+  dir_pre_submit = f'pr-logs/pull/{repo_owner}_{repo_name}/{pull_number}'\n+  dir_post_submit = \"logs\"\n+  directory = dir_pre_submit if job_type == 'presubmit' else dir_post_submit\n+  path = f'{job_name}/{build_id}'\n+\n+  return f'https://{domain}/view/gcs/{bucket}/{directory}/{path}'\n+\n+\n+def post_request(data):\n+  metrics_service_url = os.getenv('METRICS_SERVICE_URL')\n+  endpoint = construct_request_endpoint()\n+  headers = construct_request_header()\n+\n+  print('Posting to the metrics service ...')\n+  print(f'Request endpoint: {endpoint}')\n+  print(f'Request data: {data}')\n+  result = requests.post(f'{metrics_service_url}{endpoint}', data=data, headers=headers)\n+  print(f'Response: {result.text}')\n+\n+\n+def construct_request_header():\n+  result = subprocess.run(['gcloud', 'auth', 'print-identity-token'], stdout=subprocess.PIPE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964a6a1febaf1c7ad3d231f14d356caf49269510"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNzIyMQ==", "bodyText": "additionally, this seems a good candidate for a cli flag as well with a default that makes the subprocess call, that way if one has a token it can be passed in without an additonal call to gcloud", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r397507221", "createdAt": "2020-03-24T22:46:36Z", "author": {"login": "vkryachko"}, "path": "ci/fireci/fireciplugins/coverage.py", "diffHunk": "@@ -0,0 +1,122 @@\n+# Copyright 2020 Google LLC\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import click\n+import glob\n+import json\n+import os\n+import re\n+import requests\n+import subprocess\n+import xml.etree.ElementTree as ElementTree\n+\n+from fireci import ci_command\n+from fireci import gradle\n+\n+\n+@click.option(\n+  '--gradle-task',\n+  type=click.Choice(['checkCoverage', 'checkCoverageChanged']),\n+  default='checkCoverage',\n+  help='Run coverage tasks for affected products only in pre-submit and all products in post-submit'\n+)\n+@ci_command()\n+def coverage_check(gradle_task):\n+  gradle.run(gradle_task)\n+\n+  test_report = parse_xml_reports()\n+  post_request(test_report)\n+\n+\n+def parse_xml_reports():\n+  test_results = []\n+\n+  xml_reports = glob.glob('./**/reports/jacoco/*.xml', recursive=True)\n+  for xml_report in xml_reports:\n+    sdk = re.search(r'([^/]*)\\.xml', xml_report).group(1)\n+    report = ElementTree.parse(xml_report).getroot()\n+    sdk_coverage = calculate_coverage(report)\n+    test_results.append({'sdk': sdk, 'type': '', 'value': sdk_coverage})\n+\n+    for source_file in report.findall('.//sourcefile'):\n+      file_name = source_file.attrib['name']\n+      file_coverage = calculate_coverage(source_file)\n+      test_results.append({'sdk': sdk, 'type': file_name, 'value': file_coverage})\n+\n+  test_report = {'metric': 'Coverage', 'results': test_results, 'log': find_prow_job_link()}\n+\n+  return json.dumps(test_report)\n+\n+\n+def calculate_coverage(element):\n+  counter = element.find('counter[@type=\"LINE\"]')\n+  if counter is not None:\n+    covered = int(counter.attrib['covered'])\n+    missed = int(counter.attrib['missed'])\n+    return covered / (covered + missed)\n+  return 0\n+\n+\n+def find_prow_job_link():\n+  job_name = os.getenv('JOB_NAME')\n+  job_type = os.getenv('JOB_TYPE')\n+  build_id = os.getenv('BUILD_ID')\n+  repo_owner = os.getenv('REPO_OWNER')\n+  repo_name = os.getenv('REPO_NAME')\n+  pull_number = os.getenv('PULL_NUMBER')\n+\n+  domain = \"android-ci.firebaseopensource.com\"\n+  bucket = \"android-ci\"\n+\n+  dir_pre_submit = f'pr-logs/pull/{repo_owner}_{repo_name}/{pull_number}'\n+  dir_post_submit = \"logs\"\n+  directory = dir_pre_submit if job_type == 'presubmit' else dir_post_submit\n+  path = f'{job_name}/{build_id}'\n+\n+  return f'https://{domain}/view/gcs/{bucket}/{directory}/{path}'\n+\n+\n+def post_request(data):\n+  metrics_service_url = os.getenv('METRICS_SERVICE_URL')\n+  endpoint = construct_request_endpoint()\n+  headers = construct_request_header()\n+\n+  print('Posting to the metrics service ...')\n+  print(f'Request endpoint: {endpoint}')\n+  print(f'Request data: {data}')\n+  result = requests.post(f'{metrics_service_url}{endpoint}', data=data, headers=headers)\n+  print(f'Response: {result.text}')\n+\n+\n+def construct_request_header():\n+  result = subprocess.run(['gcloud', 'auth', 'print-identity-token'], stdout=subprocess.PIPE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMjM3Ng=="}, "originalCommit": {"oid": "964a6a1febaf1c7ad3d231f14d356caf49269510"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwNDg1OA==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r398004858", "createdAt": "2020-03-25T16:43:18Z", "author": {"login": "yifanyang"}, "path": "ci/fireci/fireciplugins/coverage.py", "diffHunk": "@@ -0,0 +1,122 @@\n+# Copyright 2020 Google LLC\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import click\n+import glob\n+import json\n+import os\n+import re\n+import requests\n+import subprocess\n+import xml.etree.ElementTree as ElementTree\n+\n+from fireci import ci_command\n+from fireci import gradle\n+\n+\n+@click.option(\n+  '--gradle-task',\n+  type=click.Choice(['checkCoverage', 'checkCoverageChanged']),\n+  default='checkCoverage',\n+  help='Run coverage tasks for affected products only in pre-submit and all products in post-submit'\n+)\n+@ci_command()\n+def coverage_check(gradle_task):\n+  gradle.run(gradle_task)\n+\n+  test_report = parse_xml_reports()\n+  post_request(test_report)\n+\n+\n+def parse_xml_reports():\n+  test_results = []\n+\n+  xml_reports = glob.glob('./**/reports/jacoco/*.xml', recursive=True)\n+  for xml_report in xml_reports:\n+    sdk = re.search(r'([^/]*)\\.xml', xml_report).group(1)\n+    report = ElementTree.parse(xml_report).getroot()\n+    sdk_coverage = calculate_coverage(report)\n+    test_results.append({'sdk': sdk, 'type': '', 'value': sdk_coverage})\n+\n+    for source_file in report.findall('.//sourcefile'):\n+      file_name = source_file.attrib['name']\n+      file_coverage = calculate_coverage(source_file)\n+      test_results.append({'sdk': sdk, 'type': file_name, 'value': file_coverage})\n+\n+  test_report = {'metric': 'Coverage', 'results': test_results, 'log': find_prow_job_link()}\n+\n+  return json.dumps(test_report)\n+\n+\n+def calculate_coverage(element):\n+  counter = element.find('counter[@type=\"LINE\"]')\n+  if counter is not None:\n+    covered = int(counter.attrib['covered'])\n+    missed = int(counter.attrib['missed'])\n+    return covered / (covered + missed)\n+  return 0\n+\n+\n+def find_prow_job_link():\n+  job_name = os.getenv('JOB_NAME')\n+  job_type = os.getenv('JOB_TYPE')\n+  build_id = os.getenv('BUILD_ID')\n+  repo_owner = os.getenv('REPO_OWNER')\n+  repo_name = os.getenv('REPO_NAME')\n+  pull_number = os.getenv('PULL_NUMBER')\n+\n+  domain = \"android-ci.firebaseopensource.com\"\n+  bucket = \"android-ci\"\n+\n+  dir_pre_submit = f'pr-logs/pull/{repo_owner}_{repo_name}/{pull_number}'\n+  dir_post_submit = \"logs\"\n+  directory = dir_pre_submit if job_type == 'presubmit' else dir_post_submit\n+  path = f'{job_name}/{build_id}'\n+\n+  return f'https://{domain}/view/gcs/{bucket}/{directory}/{path}'\n+\n+\n+def post_request(data):\n+  metrics_service_url = os.getenv('METRICS_SERVICE_URL')\n+  endpoint = construct_request_endpoint()\n+  headers = construct_request_header()\n+\n+  print('Posting to the metrics service ...')\n+  print(f'Request endpoint: {endpoint}')\n+  print(f'Request data: {data}')\n+  result = requests.post(f'{metrics_service_url}{endpoint}', data=data, headers=headers)\n+  print(f'Response: {result.text}')\n+\n+\n+def construct_request_header():\n+  result = subprocess.run(['gcloud', 'auth', 'print-identity-token'], stdout=subprocess.PIPE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMjM3Ng=="}, "originalCommit": {"oid": "964a6a1febaf1c7ad3d231f14d356caf49269510"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDExNDQyOnYy", "diffSide": "RIGHT", "path": "ci/fireci/fireciplugins/coverage.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjozNTozMFrOF7Fpzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjo0MzozNlrOF7kTbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMjkyNg==", "bodyText": "pls use logging.getLogger('fireci.coverage') throughout.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r397502926", "createdAt": "2020-03-24T22:35:30Z", "author": {"login": "vkryachko"}, "path": "ci/fireci/fireciplugins/coverage.py", "diffHunk": "@@ -0,0 +1,122 @@\n+# Copyright 2020 Google LLC\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import click\n+import glob\n+import json\n+import os\n+import re\n+import requests\n+import subprocess\n+import xml.etree.ElementTree as ElementTree\n+\n+from fireci import ci_command\n+from fireci import gradle\n+\n+\n+@click.option(\n+  '--gradle-task',\n+  type=click.Choice(['checkCoverage', 'checkCoverageChanged']),\n+  default='checkCoverage',\n+  help='Run coverage tasks for affected products only in pre-submit and all products in post-submit'\n+)\n+@ci_command()\n+def coverage_check(gradle_task):\n+  gradle.run(gradle_task)\n+\n+  test_report = parse_xml_reports()\n+  post_request(test_report)\n+\n+\n+def parse_xml_reports():\n+  test_results = []\n+\n+  xml_reports = glob.glob('./**/reports/jacoco/*.xml', recursive=True)\n+  for xml_report in xml_reports:\n+    sdk = re.search(r'([^/]*)\\.xml', xml_report).group(1)\n+    report = ElementTree.parse(xml_report).getroot()\n+    sdk_coverage = calculate_coverage(report)\n+    test_results.append({'sdk': sdk, 'type': '', 'value': sdk_coverage})\n+\n+    for source_file in report.findall('.//sourcefile'):\n+      file_name = source_file.attrib['name']\n+      file_coverage = calculate_coverage(source_file)\n+      test_results.append({'sdk': sdk, 'type': file_name, 'value': file_coverage})\n+\n+  test_report = {'metric': 'Coverage', 'results': test_results, 'log': find_prow_job_link()}\n+\n+  return json.dumps(test_report)\n+\n+\n+def calculate_coverage(element):\n+  counter = element.find('counter[@type=\"LINE\"]')\n+  if counter is not None:\n+    covered = int(counter.attrib['covered'])\n+    missed = int(counter.attrib['missed'])\n+    return covered / (covered + missed)\n+  return 0\n+\n+\n+def find_prow_job_link():\n+  job_name = os.getenv('JOB_NAME')\n+  job_type = os.getenv('JOB_TYPE')\n+  build_id = os.getenv('BUILD_ID')\n+  repo_owner = os.getenv('REPO_OWNER')\n+  repo_name = os.getenv('REPO_NAME')\n+  pull_number = os.getenv('PULL_NUMBER')\n+\n+  domain = \"android-ci.firebaseopensource.com\"\n+  bucket = \"android-ci\"\n+\n+  dir_pre_submit = f'pr-logs/pull/{repo_owner}_{repo_name}/{pull_number}'\n+  dir_post_submit = \"logs\"\n+  directory = dir_pre_submit if job_type == 'presubmit' else dir_post_submit\n+  path = f'{job_name}/{build_id}'\n+\n+  return f'https://{domain}/view/gcs/{bucket}/{directory}/{path}'\n+\n+\n+def post_request(data):\n+  metrics_service_url = os.getenv('METRICS_SERVICE_URL')\n+  endpoint = construct_request_endpoint()\n+  headers = construct_request_header()\n+\n+  print('Posting to the metrics service ...')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964a6a1febaf1c7ad3d231f14d356caf49269510"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwNTEwMg==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r398005102", "createdAt": "2020-03-25T16:43:36Z", "author": {"login": "yifanyang"}, "path": "ci/fireci/fireciplugins/coverage.py", "diffHunk": "@@ -0,0 +1,122 @@\n+# Copyright 2020 Google LLC\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import click\n+import glob\n+import json\n+import os\n+import re\n+import requests\n+import subprocess\n+import xml.etree.ElementTree as ElementTree\n+\n+from fireci import ci_command\n+from fireci import gradle\n+\n+\n+@click.option(\n+  '--gradle-task',\n+  type=click.Choice(['checkCoverage', 'checkCoverageChanged']),\n+  default='checkCoverage',\n+  help='Run coverage tasks for affected products only in pre-submit and all products in post-submit'\n+)\n+@ci_command()\n+def coverage_check(gradle_task):\n+  gradle.run(gradle_task)\n+\n+  test_report = parse_xml_reports()\n+  post_request(test_report)\n+\n+\n+def parse_xml_reports():\n+  test_results = []\n+\n+  xml_reports = glob.glob('./**/reports/jacoco/*.xml', recursive=True)\n+  for xml_report in xml_reports:\n+    sdk = re.search(r'([^/]*)\\.xml', xml_report).group(1)\n+    report = ElementTree.parse(xml_report).getroot()\n+    sdk_coverage = calculate_coverage(report)\n+    test_results.append({'sdk': sdk, 'type': '', 'value': sdk_coverage})\n+\n+    for source_file in report.findall('.//sourcefile'):\n+      file_name = source_file.attrib['name']\n+      file_coverage = calculate_coverage(source_file)\n+      test_results.append({'sdk': sdk, 'type': file_name, 'value': file_coverage})\n+\n+  test_report = {'metric': 'Coverage', 'results': test_results, 'log': find_prow_job_link()}\n+\n+  return json.dumps(test_report)\n+\n+\n+def calculate_coverage(element):\n+  counter = element.find('counter[@type=\"LINE\"]')\n+  if counter is not None:\n+    covered = int(counter.attrib['covered'])\n+    missed = int(counter.attrib['missed'])\n+    return covered / (covered + missed)\n+  return 0\n+\n+\n+def find_prow_job_link():\n+  job_name = os.getenv('JOB_NAME')\n+  job_type = os.getenv('JOB_TYPE')\n+  build_id = os.getenv('BUILD_ID')\n+  repo_owner = os.getenv('REPO_OWNER')\n+  repo_name = os.getenv('REPO_NAME')\n+  pull_number = os.getenv('PULL_NUMBER')\n+\n+  domain = \"android-ci.firebaseopensource.com\"\n+  bucket = \"android-ci\"\n+\n+  dir_pre_submit = f'pr-logs/pull/{repo_owner}_{repo_name}/{pull_number}'\n+  dir_post_submit = \"logs\"\n+  directory = dir_pre_submit if job_type == 'presubmit' else dir_post_submit\n+  path = f'{job_name}/{build_id}'\n+\n+  return f'https://{domain}/view/gcs/{bucket}/{directory}/{path}'\n+\n+\n+def post_request(data):\n+  metrics_service_url = os.getenv('METRICS_SERVICE_URL')\n+  endpoint = construct_request_endpoint()\n+  headers = construct_request_header()\n+\n+  print('Posting to the metrics service ...')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMjkyNg=="}, "originalCommit": {"oid": "964a6a1febaf1c7ad3d231f14d356caf49269510"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDEzMTIxOnYy", "diffSide": "RIGHT", "path": "ci/fireci/fireciplugins/coverage.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo0MjoyMFrOF7Fz_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjo0NDowOFrOF7kVHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNTUzMw==", "bodyText": "Consider making this a flag and have its default point to this function.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r397505533", "createdAt": "2020-03-24T22:42:20Z", "author": {"login": "vkryachko"}, "path": "ci/fireci/fireciplugins/coverage.py", "diffHunk": "@@ -0,0 +1,122 @@\n+# Copyright 2020 Google LLC\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import click\n+import glob\n+import json\n+import os\n+import re\n+import requests\n+import subprocess\n+import xml.etree.ElementTree as ElementTree\n+\n+from fireci import ci_command\n+from fireci import gradle\n+\n+\n+@click.option(\n+  '--gradle-task',\n+  type=click.Choice(['checkCoverage', 'checkCoverageChanged']),\n+  default='checkCoverage',\n+  help='Run coverage tasks for affected products only in pre-submit and all products in post-submit'\n+)\n+@ci_command()\n+def coverage_check(gradle_task):\n+  gradle.run(gradle_task)\n+\n+  test_report = parse_xml_reports()\n+  post_request(test_report)\n+\n+\n+def parse_xml_reports():\n+  test_results = []\n+\n+  xml_reports = glob.glob('./**/reports/jacoco/*.xml', recursive=True)\n+  for xml_report in xml_reports:\n+    sdk = re.search(r'([^/]*)\\.xml', xml_report).group(1)\n+    report = ElementTree.parse(xml_report).getroot()\n+    sdk_coverage = calculate_coverage(report)\n+    test_results.append({'sdk': sdk, 'type': '', 'value': sdk_coverage})\n+\n+    for source_file in report.findall('.//sourcefile'):\n+      file_name = source_file.attrib['name']\n+      file_coverage = calculate_coverage(source_file)\n+      test_results.append({'sdk': sdk, 'type': file_name, 'value': file_coverage})\n+\n+  test_report = {'metric': 'Coverage', 'results': test_results, 'log': find_prow_job_link()}\n+\n+  return json.dumps(test_report)\n+\n+\n+def calculate_coverage(element):\n+  counter = element.find('counter[@type=\"LINE\"]')\n+  if counter is not None:\n+    covered = int(counter.attrib['covered'])\n+    missed = int(counter.attrib['missed'])\n+    return covered / (covered + missed)\n+  return 0\n+\n+\n+def find_prow_job_link():", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964a6a1febaf1c7ad3d231f14d356caf49269510"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwNTUzMg==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r398005532", "createdAt": "2020-03-25T16:44:08Z", "author": {"login": "yifanyang"}, "path": "ci/fireci/fireciplugins/coverage.py", "diffHunk": "@@ -0,0 +1,122 @@\n+# Copyright 2020 Google LLC\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import click\n+import glob\n+import json\n+import os\n+import re\n+import requests\n+import subprocess\n+import xml.etree.ElementTree as ElementTree\n+\n+from fireci import ci_command\n+from fireci import gradle\n+\n+\n+@click.option(\n+  '--gradle-task',\n+  type=click.Choice(['checkCoverage', 'checkCoverageChanged']),\n+  default='checkCoverage',\n+  help='Run coverage tasks for affected products only in pre-submit and all products in post-submit'\n+)\n+@ci_command()\n+def coverage_check(gradle_task):\n+  gradle.run(gradle_task)\n+\n+  test_report = parse_xml_reports()\n+  post_request(test_report)\n+\n+\n+def parse_xml_reports():\n+  test_results = []\n+\n+  xml_reports = glob.glob('./**/reports/jacoco/*.xml', recursive=True)\n+  for xml_report in xml_reports:\n+    sdk = re.search(r'([^/]*)\\.xml', xml_report).group(1)\n+    report = ElementTree.parse(xml_report).getroot()\n+    sdk_coverage = calculate_coverage(report)\n+    test_results.append({'sdk': sdk, 'type': '', 'value': sdk_coverage})\n+\n+    for source_file in report.findall('.//sourcefile'):\n+      file_name = source_file.attrib['name']\n+      file_coverage = calculate_coverage(source_file)\n+      test_results.append({'sdk': sdk, 'type': file_name, 'value': file_coverage})\n+\n+  test_report = {'metric': 'Coverage', 'results': test_results, 'log': find_prow_job_link()}\n+\n+  return json.dumps(test_report)\n+\n+\n+def calculate_coverage(element):\n+  counter = element.find('counter[@type=\"LINE\"]')\n+  if counter is not None:\n+    covered = int(counter.attrib['covered'])\n+    missed = int(counter.attrib['missed'])\n+    return covered / (covered + missed)\n+  return 0\n+\n+\n+def find_prow_job_link():", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNTUzMw=="}, "originalCommit": {"oid": "964a6a1febaf1c7ad3d231f14d356caf49269510"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDEzNzgwOnYy", "diffSide": "RIGHT", "path": "ci/fireci/fireciplugins/coverage.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo0NDozN1rOF7F3sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjo0NDoxNFrOF7kVXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNjQ4Mg==", "bodyText": "consider making this an option with envvar=\"METRICS_SERVICE_URL\"", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r397506482", "createdAt": "2020-03-24T22:44:37Z", "author": {"login": "vkryachko"}, "path": "ci/fireci/fireciplugins/coverage.py", "diffHunk": "@@ -0,0 +1,122 @@\n+# Copyright 2020 Google LLC\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import click\n+import glob\n+import json\n+import os\n+import re\n+import requests\n+import subprocess\n+import xml.etree.ElementTree as ElementTree\n+\n+from fireci import ci_command\n+from fireci import gradle\n+\n+\n+@click.option(\n+  '--gradle-task',\n+  type=click.Choice(['checkCoverage', 'checkCoverageChanged']),\n+  default='checkCoverage',\n+  help='Run coverage tasks for affected products only in pre-submit and all products in post-submit'\n+)\n+@ci_command()\n+def coverage_check(gradle_task):\n+  gradle.run(gradle_task)\n+\n+  test_report = parse_xml_reports()\n+  post_request(test_report)\n+\n+\n+def parse_xml_reports():\n+  test_results = []\n+\n+  xml_reports = glob.glob('./**/reports/jacoco/*.xml', recursive=True)\n+  for xml_report in xml_reports:\n+    sdk = re.search(r'([^/]*)\\.xml', xml_report).group(1)\n+    report = ElementTree.parse(xml_report).getroot()\n+    sdk_coverage = calculate_coverage(report)\n+    test_results.append({'sdk': sdk, 'type': '', 'value': sdk_coverage})\n+\n+    for source_file in report.findall('.//sourcefile'):\n+      file_name = source_file.attrib['name']\n+      file_coverage = calculate_coverage(source_file)\n+      test_results.append({'sdk': sdk, 'type': file_name, 'value': file_coverage})\n+\n+  test_report = {'metric': 'Coverage', 'results': test_results, 'log': find_prow_job_link()}\n+\n+  return json.dumps(test_report)\n+\n+\n+def calculate_coverage(element):\n+  counter = element.find('counter[@type=\"LINE\"]')\n+  if counter is not None:\n+    covered = int(counter.attrib['covered'])\n+    missed = int(counter.attrib['missed'])\n+    return covered / (covered + missed)\n+  return 0\n+\n+\n+def find_prow_job_link():\n+  job_name = os.getenv('JOB_NAME')\n+  job_type = os.getenv('JOB_TYPE')\n+  build_id = os.getenv('BUILD_ID')\n+  repo_owner = os.getenv('REPO_OWNER')\n+  repo_name = os.getenv('REPO_NAME')\n+  pull_number = os.getenv('PULL_NUMBER')\n+\n+  domain = \"android-ci.firebaseopensource.com\"\n+  bucket = \"android-ci\"\n+\n+  dir_pre_submit = f'pr-logs/pull/{repo_owner}_{repo_name}/{pull_number}'\n+  dir_post_submit = \"logs\"\n+  directory = dir_pre_submit if job_type == 'presubmit' else dir_post_submit\n+  path = f'{job_name}/{build_id}'\n+\n+  return f'https://{domain}/view/gcs/{bucket}/{directory}/{path}'\n+\n+\n+def post_request(data):\n+  metrics_service_url = os.getenv('METRICS_SERVICE_URL')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "964a6a1febaf1c7ad3d231f14d356caf49269510"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNTE4NQ==", "bodyText": "By \"option\", do you mean a @click.option?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r397515185", "createdAt": "2020-03-24T23:07:35Z", "author": {"login": "yifanyang"}, "path": "ci/fireci/fireciplugins/coverage.py", "diffHunk": "@@ -0,0 +1,122 @@\n+# Copyright 2020 Google LLC\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import click\n+import glob\n+import json\n+import os\n+import re\n+import requests\n+import subprocess\n+import xml.etree.ElementTree as ElementTree\n+\n+from fireci import ci_command\n+from fireci import gradle\n+\n+\n+@click.option(\n+  '--gradle-task',\n+  type=click.Choice(['checkCoverage', 'checkCoverageChanged']),\n+  default='checkCoverage',\n+  help='Run coverage tasks for affected products only in pre-submit and all products in post-submit'\n+)\n+@ci_command()\n+def coverage_check(gradle_task):\n+  gradle.run(gradle_task)\n+\n+  test_report = parse_xml_reports()\n+  post_request(test_report)\n+\n+\n+def parse_xml_reports():\n+  test_results = []\n+\n+  xml_reports = glob.glob('./**/reports/jacoco/*.xml', recursive=True)\n+  for xml_report in xml_reports:\n+    sdk = re.search(r'([^/]*)\\.xml', xml_report).group(1)\n+    report = ElementTree.parse(xml_report).getroot()\n+    sdk_coverage = calculate_coverage(report)\n+    test_results.append({'sdk': sdk, 'type': '', 'value': sdk_coverage})\n+\n+    for source_file in report.findall('.//sourcefile'):\n+      file_name = source_file.attrib['name']\n+      file_coverage = calculate_coverage(source_file)\n+      test_results.append({'sdk': sdk, 'type': file_name, 'value': file_coverage})\n+\n+  test_report = {'metric': 'Coverage', 'results': test_results, 'log': find_prow_job_link()}\n+\n+  return json.dumps(test_report)\n+\n+\n+def calculate_coverage(element):\n+  counter = element.find('counter[@type=\"LINE\"]')\n+  if counter is not None:\n+    covered = int(counter.attrib['covered'])\n+    missed = int(counter.attrib['missed'])\n+    return covered / (covered + missed)\n+  return 0\n+\n+\n+def find_prow_job_link():\n+  job_name = os.getenv('JOB_NAME')\n+  job_type = os.getenv('JOB_TYPE')\n+  build_id = os.getenv('BUILD_ID')\n+  repo_owner = os.getenv('REPO_OWNER')\n+  repo_name = os.getenv('REPO_NAME')\n+  pull_number = os.getenv('PULL_NUMBER')\n+\n+  domain = \"android-ci.firebaseopensource.com\"\n+  bucket = \"android-ci\"\n+\n+  dir_pre_submit = f'pr-logs/pull/{repo_owner}_{repo_name}/{pull_number}'\n+  dir_post_submit = \"logs\"\n+  directory = dir_pre_submit if job_type == 'presubmit' else dir_post_submit\n+  path = f'{job_name}/{build_id}'\n+\n+  return f'https://{domain}/view/gcs/{bucket}/{directory}/{path}'\n+\n+\n+def post_request(data):\n+  metrics_service_url = os.getenv('METRICS_SERVICE_URL')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNjQ4Mg=="}, "originalCommit": {"oid": "964a6a1febaf1c7ad3d231f14d356caf49269510"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMjM0NQ==", "bodyText": "Oh, I get it.\nhttps://click.palletsprojects.com/en/7.x/arguments/#environment-variables", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r397522345", "createdAt": "2020-03-24T23:27:52Z", "author": {"login": "yifanyang"}, "path": "ci/fireci/fireciplugins/coverage.py", "diffHunk": "@@ -0,0 +1,122 @@\n+# Copyright 2020 Google LLC\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import click\n+import glob\n+import json\n+import os\n+import re\n+import requests\n+import subprocess\n+import xml.etree.ElementTree as ElementTree\n+\n+from fireci import ci_command\n+from fireci import gradle\n+\n+\n+@click.option(\n+  '--gradle-task',\n+  type=click.Choice(['checkCoverage', 'checkCoverageChanged']),\n+  default='checkCoverage',\n+  help='Run coverage tasks for affected products only in pre-submit and all products in post-submit'\n+)\n+@ci_command()\n+def coverage_check(gradle_task):\n+  gradle.run(gradle_task)\n+\n+  test_report = parse_xml_reports()\n+  post_request(test_report)\n+\n+\n+def parse_xml_reports():\n+  test_results = []\n+\n+  xml_reports = glob.glob('./**/reports/jacoco/*.xml', recursive=True)\n+  for xml_report in xml_reports:\n+    sdk = re.search(r'([^/]*)\\.xml', xml_report).group(1)\n+    report = ElementTree.parse(xml_report).getroot()\n+    sdk_coverage = calculate_coverage(report)\n+    test_results.append({'sdk': sdk, 'type': '', 'value': sdk_coverage})\n+\n+    for source_file in report.findall('.//sourcefile'):\n+      file_name = source_file.attrib['name']\n+      file_coverage = calculate_coverage(source_file)\n+      test_results.append({'sdk': sdk, 'type': file_name, 'value': file_coverage})\n+\n+  test_report = {'metric': 'Coverage', 'results': test_results, 'log': find_prow_job_link()}\n+\n+  return json.dumps(test_report)\n+\n+\n+def calculate_coverage(element):\n+  counter = element.find('counter[@type=\"LINE\"]')\n+  if counter is not None:\n+    covered = int(counter.attrib['covered'])\n+    missed = int(counter.attrib['missed'])\n+    return covered / (covered + missed)\n+  return 0\n+\n+\n+def find_prow_job_link():\n+  job_name = os.getenv('JOB_NAME')\n+  job_type = os.getenv('JOB_TYPE')\n+  build_id = os.getenv('BUILD_ID')\n+  repo_owner = os.getenv('REPO_OWNER')\n+  repo_name = os.getenv('REPO_NAME')\n+  pull_number = os.getenv('PULL_NUMBER')\n+\n+  domain = \"android-ci.firebaseopensource.com\"\n+  bucket = \"android-ci\"\n+\n+  dir_pre_submit = f'pr-logs/pull/{repo_owner}_{repo_name}/{pull_number}'\n+  dir_post_submit = \"logs\"\n+  directory = dir_pre_submit if job_type == 'presubmit' else dir_post_submit\n+  path = f'{job_name}/{build_id}'\n+\n+  return f'https://{domain}/view/gcs/{bucket}/{directory}/{path}'\n+\n+\n+def post_request(data):\n+  metrics_service_url = os.getenv('METRICS_SERVICE_URL')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNjQ4Mg=="}, "originalCommit": {"oid": "964a6a1febaf1c7ad3d231f14d356caf49269510"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwNTU5Nw==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1377#discussion_r398005597", "createdAt": "2020-03-25T16:44:14Z", "author": {"login": "yifanyang"}, "path": "ci/fireci/fireciplugins/coverage.py", "diffHunk": "@@ -0,0 +1,122 @@\n+# Copyright 2020 Google LLC\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+import click\n+import glob\n+import json\n+import os\n+import re\n+import requests\n+import subprocess\n+import xml.etree.ElementTree as ElementTree\n+\n+from fireci import ci_command\n+from fireci import gradle\n+\n+\n+@click.option(\n+  '--gradle-task',\n+  type=click.Choice(['checkCoverage', 'checkCoverageChanged']),\n+  default='checkCoverage',\n+  help='Run coverage tasks for affected products only in pre-submit and all products in post-submit'\n+)\n+@ci_command()\n+def coverage_check(gradle_task):\n+  gradle.run(gradle_task)\n+\n+  test_report = parse_xml_reports()\n+  post_request(test_report)\n+\n+\n+def parse_xml_reports():\n+  test_results = []\n+\n+  xml_reports = glob.glob('./**/reports/jacoco/*.xml', recursive=True)\n+  for xml_report in xml_reports:\n+    sdk = re.search(r'([^/]*)\\.xml', xml_report).group(1)\n+    report = ElementTree.parse(xml_report).getroot()\n+    sdk_coverage = calculate_coverage(report)\n+    test_results.append({'sdk': sdk, 'type': '', 'value': sdk_coverage})\n+\n+    for source_file in report.findall('.//sourcefile'):\n+      file_name = source_file.attrib['name']\n+      file_coverage = calculate_coverage(source_file)\n+      test_results.append({'sdk': sdk, 'type': file_name, 'value': file_coverage})\n+\n+  test_report = {'metric': 'Coverage', 'results': test_results, 'log': find_prow_job_link()}\n+\n+  return json.dumps(test_report)\n+\n+\n+def calculate_coverage(element):\n+  counter = element.find('counter[@type=\"LINE\"]')\n+  if counter is not None:\n+    covered = int(counter.attrib['covered'])\n+    missed = int(counter.attrib['missed'])\n+    return covered / (covered + missed)\n+  return 0\n+\n+\n+def find_prow_job_link():\n+  job_name = os.getenv('JOB_NAME')\n+  job_type = os.getenv('JOB_TYPE')\n+  build_id = os.getenv('BUILD_ID')\n+  repo_owner = os.getenv('REPO_OWNER')\n+  repo_name = os.getenv('REPO_NAME')\n+  pull_number = os.getenv('PULL_NUMBER')\n+\n+  domain = \"android-ci.firebaseopensource.com\"\n+  bucket = \"android-ci\"\n+\n+  dir_pre_submit = f'pr-logs/pull/{repo_owner}_{repo_name}/{pull_number}'\n+  dir_post_submit = \"logs\"\n+  directory = dir_pre_submit if job_type == 'presubmit' else dir_post_submit\n+  path = f'{job_name}/{build_id}'\n+\n+  return f'https://{domain}/view/gcs/{bucket}/{directory}/{path}'\n+\n+\n+def post_request(data):\n+  metrics_service_url = os.getenv('METRICS_SERVICE_URL')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNjQ4Mg=="}, "originalCommit": {"oid": "964a6a1febaf1c7ad3d231f14d356caf49269510"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1410, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}