{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDE0MTYx", "number": 1431, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToyNDo0MlrODwK9ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjowNjo1MVrODwLsfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODM3ODE5OnYy", "diffSide": "RIGHT", "path": "transport/transport-runtime/src/androidTest/java/com/google/android/datatransport/runtime/scheduling/persistence/SQLiteEventStoreTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToyNDo0MlrOGDBiYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToyNDo0MlrOGDBiYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyNDA5Nw==", "bodyText": "MAX_BLOB_SIZE_BYTES ?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1431#discussion_r405824097", "createdAt": "2020-04-08T21:24:42Z", "author": {"login": "ashwinraghav"}, "path": "transport/transport-runtime/src/androidTest/java/com/google/android/datatransport/runtime/scheduling/persistence/SQLiteEventStoreTest.java", "diffHunk": "@@ -52,8 +53,14 @@\n           .build();\n \n   private static final long HOUR = 60 * 60 * 1000;\n+  private static final int MAX_BLOB_SIZE = 6;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3870f605a87c6216c4a01a385530ee10f9fb7576"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODM4MDUyOnYy", "diffSide": "RIGHT", "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/persistence/EventStoreConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToyNToyOFrOGDBjzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToyNToyOFrOGDBjzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyNDQ2Mw==", "bodyText": "setMaxBlobSizeBytesPerRow ?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1431#discussion_r405824463", "createdAt": "2020-04-08T21:25:28Z", "author": {"login": "ashwinraghav"}, "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/persistence/EventStoreConfig.java", "diffHunk": "@@ -61,6 +66,8 @@ Builder toBuilder() {\n \n     abstract Builder setEventCleanUpAge(long value);\n \n+    abstract Builder setMaxBlobSizePerRow(int value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3870f605a87c6216c4a01a385530ee10f9fb7576"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODM4NzE3OnYy", "diffSide": "RIGHT", "path": "transport/transport-runtime/src/androidTest/java/com/google/android/datatransport/runtime/scheduling/persistence/SQLiteEventStoreTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToyNzo0NFrOGDBn8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTozMzoxM1rOGDByMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyNTUyMQ==", "bodyText": "Can we move lines 99 to 103 up to the setup portion of the test  to conform to the pattern you have in here\n//setup\n//Act\n//assert", "url": "https://github.com/firebase/firebase-android-sdk/pull/1431#discussion_r405825521", "createdAt": "2020-04-08T21:27:44Z", "author": {"login": "ashwinraghav"}, "path": "transport/transport-runtime/src/androidTest/java/com/google/android/datatransport/runtime/scheduling/persistence/SQLiteEventStoreTest.java", "diffHunk": "@@ -75,6 +85,31 @@ public void persist_correctlyRoundTrips() {\n     assertThat(events).containsExactly(newEvent);\n   }\n \n+  @Test\n+  public void persist_withNonInlineBlob_correctlyRoundTrips() {\n+    byte[] payload = \"LongerThanSixBytes\".getBytes(Charset.defaultCharset());\n+    EventInternal event =\n+        EVENT.toBuilder().setEncodedPayload(new EncodedPayload(JSON_ENCODING, payload)).build();\n+    PersistedEvent newEvent = store.persist(TRANSPORT_CONTEXT, event);\n+    Iterable<PersistedEvent> events = store.loadBatch(TRANSPORT_CONTEXT);\n+\n+    assertThat(newEvent.getEvent()).isEqualTo(event);\n+    assertThat(events).containsExactly(newEvent);\n+    long expectedRows = payload.length / MAX_BLOB_SIZE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3870f605a87c6216c4a01a385530ee10f9fb7576"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyODE0NA==", "bodyText": "Nit: I realize this is starting to look like an integration test. Consider splitting up.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1431#discussion_r405828144", "createdAt": "2020-04-08T21:33:13Z", "author": {"login": "ashwinraghav"}, "path": "transport/transport-runtime/src/androidTest/java/com/google/android/datatransport/runtime/scheduling/persistence/SQLiteEventStoreTest.java", "diffHunk": "@@ -75,6 +85,31 @@ public void persist_correctlyRoundTrips() {\n     assertThat(events).containsExactly(newEvent);\n   }\n \n+  @Test\n+  public void persist_withNonInlineBlob_correctlyRoundTrips() {\n+    byte[] payload = \"LongerThanSixBytes\".getBytes(Charset.defaultCharset());\n+    EventInternal event =\n+        EVENT.toBuilder().setEncodedPayload(new EncodedPayload(JSON_ENCODING, payload)).build();\n+    PersistedEvent newEvent = store.persist(TRANSPORT_CONTEXT, event);\n+    Iterable<PersistedEvent> events = store.loadBatch(TRANSPORT_CONTEXT);\n+\n+    assertThat(newEvent.getEvent()).isEqualTo(event);\n+    assertThat(events).containsExactly(newEvent);\n+    long expectedRows = payload.length / MAX_BLOB_SIZE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyNTUyMQ=="}, "originalCommit": {"oid": "3870f605a87c6216c4a01a385530ee10f9fb7576"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODQwODA2OnYy", "diffSide": "RIGHT", "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/persistence/EventStoreConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTozNDoyM1rOGDB0fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTozNDoyM1rOGDB0fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyODczMw==", "bodyText": "MAX_BLOB_SIZE_PER_ROW_BYTES ?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1431#discussion_r405828733", "createdAt": "2020-04-08T21:34:23Z", "author": {"login": "ashwinraghav"}, "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/persistence/EventStoreConfig.java", "diffHunk": "@@ -22,13 +22,15 @@\n   private static final int LOAD_BATCH_SIZE = 200;\n   private static final int LOCK_TIME_OUT_MS = 10000;\n   private static final long DURATION_ONE_WEEK_MS = 7 * 24 * 60 * 60 * 1000;\n+  private static final int MAX_BLOB_SIZE_PER_ROW = 80 * 1024;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3870f605a87c6216c4a01a385530ee10f9fb7576"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODQyNjI0OnYy", "diffSide": "RIGHT", "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/persistence/SQLiteEventStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0MDo0N1rOGDB_oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0MDo0N1rOGDB_oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMTU4NA==", "bodyText": "Consider Math.ceil((double)payloadBytes.length / maxBlobSizePerRow)", "url": "https://github.com/firebase/firebase-android-sdk/pull/1431#discussion_r405831584", "createdAt": "2020-04-08T21:40:47Z", "author": {"login": "ashwinraghav"}, "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/persistence/SQLiteEventStore.java", "diffHunk": "@@ -104,16 +106,39 @@ public PersistedEvent persist(TransportContext transportContext, EventInternal e\n               }\n \n               long contextId = ensureTransportContext(db, transportContext);\n+              int maxBlobSizePerRow = config.getMaxBlobSizePerRow();\n+\n+              byte[] payloadBytes = event.getEncodedPayload().getBytes();\n+              boolean inline = payloadBytes.length <= maxBlobSizePerRow;\n               ContentValues values = new ContentValues();\n               values.put(\"context_id\", contextId);\n               values.put(\"transport_name\", event.getTransportName());\n               values.put(\"timestamp_ms\", event.getEventMillis());\n               values.put(\"uptime_ms\", event.getUptimeMillis());\n               values.put(\"payload_encoding\", event.getEncodedPayload().getEncoding().getName());\n-              values.put(\"payload\", event.getEncodedPayload().getBytes());\n               values.put(\"code\", event.getCode());\n               values.put(\"num_attempts\", 0);\n+              values.put(\"inline\", inline);\n+              values.put(\"payload\", inline ? payloadBytes : new byte[0]);\n               long newEventId = db.insert(\"events\", null, values);\n+              if (!inline) {\n+                int numChunks = payloadBytes.length / maxBlobSizePerRow;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3870f605a87c6216c4a01a385530ee10f9fb7576"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODQzMzc1OnYy", "diffSide": "RIGHT", "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/persistence/SQLiteEventStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0MzozNFrOGDCEYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0MzozNFrOGDCEYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMjgwMg==", "bodyText": "Dug around a bit and failed to find a way to avoid copying (sanely).", "url": "https://github.com/firebase/firebase-android-sdk/pull/1431#discussion_r405832802", "createdAt": "2020-04-08T21:43:34Z", "author": {"login": "ashwinraghav"}, "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/persistence/SQLiteEventStore.java", "diffHunk": "@@ -104,16 +106,39 @@ public PersistedEvent persist(TransportContext transportContext, EventInternal e\n               }\n \n               long contextId = ensureTransportContext(db, transportContext);\n+              int maxBlobSizePerRow = config.getMaxBlobSizePerRow();\n+\n+              byte[] payloadBytes = event.getEncodedPayload().getBytes();\n+              boolean inline = payloadBytes.length <= maxBlobSizePerRow;\n               ContentValues values = new ContentValues();\n               values.put(\"context_id\", contextId);\n               values.put(\"transport_name\", event.getTransportName());\n               values.put(\"timestamp_ms\", event.getEventMillis());\n               values.put(\"uptime_ms\", event.getUptimeMillis());\n               values.put(\"payload_encoding\", event.getEncodedPayload().getEncoding().getName());\n-              values.put(\"payload\", event.getEncodedPayload().getBytes());\n               values.put(\"code\", event.getCode());\n               values.put(\"num_attempts\", 0);\n+              values.put(\"inline\", inline);\n+              values.put(\"payload\", inline ? payloadBytes : new byte[0]);\n               long newEventId = db.insert(\"events\", null, values);\n+              if (!inline) {\n+                int numChunks = payloadBytes.length / maxBlobSizePerRow;\n+                if (payloadBytes.length % maxBlobSizePerRow != 0) {\n+                  numChunks += 1;\n+                }\n+                for (int chunk = 1; chunk <= numChunks; chunk++) {\n+                  byte[] chunkBytes =\n+                      Arrays.copyOfRange(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3870f605a87c6216c4a01a385530ee10f9fb7576"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODQ0NTA0OnYy", "diffSide": "RIGHT", "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/persistence/SQLiteEventStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0Nzo0NVrOGDCLNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0Nzo0NVrOGDCLNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzNDU0OQ==", "bodyText": "Can be moved into the loop above?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1431#discussion_r405834549", "createdAt": "2020-04-08T21:47:45Z", "author": {"login": "ashwinraghav"}, "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/persistence/SQLiteEventStore.java", "diffHunk": "@@ -386,6 +418,37 @@ public void clearDb() {\n     return events;\n   }\n \n+  private byte[] readPayload(long eventId) {\n+    return tryWithCursor(\n+        getDb()\n+            .query(\n+                \"event_payloads\",\n+                new String[] {\"bytes\"},\n+                \"event_id = ?\",\n+                new String[] {String.valueOf(eventId)},\n+                null,\n+                null,\n+                \"sequence_num\"),\n+        cursor -> {\n+          List<byte[]> chunks = new ArrayList<>();\n+          while (cursor.moveToNext()) {\n+            chunks.add(cursor.getBlob(0));\n+          }\n+          int totalLength = 0;\n+          for (byte[] chunk : chunks) {\n+            totalLength += chunk.length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3870f605a87c6216c4a01a385530ee10f9fb7576"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODQ2MzQxOnYy", "diffSide": "RIGHT", "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/persistence/SchemaManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo1Mzo0OFrOGDCWMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToxMjo1OFrOGDdOAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzNzM2Mg==", "bodyText": "What does this do?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1431#discussion_r405837362", "createdAt": "2020-04-08T21:53:48Z", "author": {"login": "ashwinraghav"}, "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/persistence/SchemaManager.java", "diffHunk": "@@ -95,12 +104,24 @@\n   private static final SchemaManager.Migration MIGRATE_TO_V3 =\n       db -> db.execSQL(\"ALTER TABLE events ADD COLUMN payload_encoding TEXT\");\n \n+  private static final SchemaManager.Migration MIGRATE_TO_V4 =\n+      db -> {\n+        db.execSQL(\"ALTER TABLE events ADD COLUMN inline BOOLEAN DEFAULT 1\");\n+        ContentValues values = new ContentValues();\n+        values.put(\"inline\", 1);\n+        db.update(\"events\", values, null, new String[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3870f605a87c6216c4a01a385530ee10f9fb7576"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3NzYzMw==", "bodyText": "I thought I needed to backfill values, but it turns out I did not, updated the migration test to verify that it's backfilled.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1431#discussion_r406277633", "createdAt": "2020-04-09T15:12:58Z", "author": {"login": "vkryachko"}, "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/persistence/SchemaManager.java", "diffHunk": "@@ -95,12 +104,24 @@\n   private static final SchemaManager.Migration MIGRATE_TO_V3 =\n       db -> db.execSQL(\"ALTER TABLE events ADD COLUMN payload_encoding TEXT\");\n \n+  private static final SchemaManager.Migration MIGRATE_TO_V4 =\n+      db -> {\n+        db.execSQL(\"ALTER TABLE events ADD COLUMN inline BOOLEAN DEFAULT 1\");\n+        ContentValues values = new ContentValues();\n+        values.put(\"inline\", 1);\n+        db.update(\"events\", values, null, new String[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzNzM2Mg=="}, "originalCommit": {"oid": "3870f605a87c6216c4a01a385530ee10f9fb7576"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODQ5ODUyOnYy", "diffSide": "RIGHT", "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/persistence/SchemaManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjowNjo1MVrOGDCroA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToxNzoyM1rOGDdZuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0Mjg0OA==", "bodyText": "What happens to existing inline events that may be too large. Should we cleanup since migration seems impossible ?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1431#discussion_r405842848", "createdAt": "2020-04-08T22:06:51Z", "author": {"login": "ashwinraghav"}, "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/persistence/SchemaManager.java", "diffHunk": "@@ -95,12 +104,24 @@\n   private static final SchemaManager.Migration MIGRATE_TO_V3 =\n       db -> db.execSQL(\"ALTER TABLE events ADD COLUMN payload_encoding TEXT\");\n \n+  private static final SchemaManager.Migration MIGRATE_TO_V4 =\n+      db -> {\n+        db.execSQL(\"ALTER TABLE events ADD COLUMN inline BOOLEAN DEFAULT 1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3870f605a87c6216c4a01a385530ee10f9fb7576"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4MDYzNQ==", "bodyText": "I think it's highly unlikely that we have such events out there and the cleanup would be pretty involved if we don't want to lose data, we would have to:\n\nquery all events with len(payload) > X\nfor each event select X bytes chunk by chunk and put into new table\nclear inline + payload fields\n\nAnd all of this would have to be maintained forever.\nSo given how unlikely it is that we have large payloads out there, I'd prefer not to bother with this. wdyt?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1431#discussion_r406280635", "createdAt": "2020-04-09T15:17:23Z", "author": {"login": "vkryachko"}, "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/scheduling/persistence/SchemaManager.java", "diffHunk": "@@ -95,12 +104,24 @@\n   private static final SchemaManager.Migration MIGRATE_TO_V3 =\n       db -> db.execSQL(\"ALTER TABLE events ADD COLUMN payload_encoding TEXT\");\n \n+  private static final SchemaManager.Migration MIGRATE_TO_V4 =\n+      db -> {\n+        db.execSQL(\"ALTER TABLE events ADD COLUMN inline BOOLEAN DEFAULT 1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0Mjg0OA=="}, "originalCommit": {"oid": "3870f605a87c6216c4a01a385530ee10f9fb7576"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1445, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}