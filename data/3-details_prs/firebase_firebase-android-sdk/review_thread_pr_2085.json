{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MTIwOTY5", "number": 2085, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNToyNToxMlrOEwT0Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjo0Mzo1NVrOEwV9bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDkxNzMxOnYy", "diffSide": "RIGHT", "path": "tools/lint/src/main/kotlin/DeferredApiDetector.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNToyNToxMlrOHlyTbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNToyNToxMlrOHlyTbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM4MzUzMw==", "bodyText": "nit: out of personal style, maybe using hasDeferredAnnotation could be a bit more readable.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2085#discussion_r509383533", "createdAt": "2020-10-21T15:25:12Z", "author": {"login": "rlazo"}, "path": "tools/lint/src/main/kotlin/DeferredApiDetector.kt", "diffHunk": "@@ -0,0 +1,153 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.lint.checks\n+\n+import com.android.tools.lint.detector.api.AnnotationUsageType\n+import com.android.tools.lint.detector.api.Category\n+import com.android.tools.lint.detector.api.Detector\n+import com.android.tools.lint.detector.api.Implementation\n+import com.android.tools.lint.detector.api.Issue\n+import com.android.tools.lint.detector.api.JavaContext\n+import com.android.tools.lint.detector.api.Scope\n+import com.android.tools.lint.detector.api.Severity\n+import com.android.tools.lint.detector.api.SourceCodeScanner\n+import com.intellij.lang.jvm.JvmModifier\n+import com.intellij.psi.PsiClassType\n+import com.intellij.psi.PsiMethod\n+import org.jetbrains.uast.UAnnotation\n+import org.jetbrains.uast.UAnonymousClass\n+import org.jetbrains.uast.UElement\n+import org.jetbrains.uast.ULambdaExpression\n+import org.jetbrains.uast.UMethod\n+import org.jetbrains.uast.getParentOfType\n+\n+internal const val ANNOTATION = \"com.google.firebase.components.annotations.DeferredApi\"\n+\n+class DeferredApiDetector : Detector(), SourceCodeScanner {\n+    override fun applicableAnnotations(): List<String> = listOf(ANNOTATION)\n+\n+    override fun visitAnnotationUsage(\n+        context: JavaContext,\n+        usage: UElement,\n+        type: AnnotationUsageType,\n+        annotation: UAnnotation,\n+        qualifiedName: String,\n+        method: PsiMethod?,\n+        annotations: List<UAnnotation>,\n+        allMemberAnnotations: List<UAnnotation>,\n+        allClassAnnotations: List<UAnnotation>,\n+        allPackageAnnotations: List<UAnnotation>\n+    ) {\n+        if (method != null && type == AnnotationUsageType.METHOD_CALL) {\n+            check(context, usage, method)\n+        }\n+    }\n+\n+    private fun check(context: JavaContext, usage: UElement, method: PsiMethod) {\n+        val usageHasAnnotation = hasAnnotation(context, usage)\n+        val methodHasAnnotation = hasAnnotation(context, method)\n+\n+        if ((!usageHasAnnotation && methodHasAnnotation) || (usageHasAnnotation && !methodHasAnnotation))\n+            context.report(\n+                    INVALID_DEFERRED_API_USE,\n+                    usage,\n+                    context.getLocation(usage),\n+                    \"${method.name} is only safe to call in the context of a Deferred<T> dependency.\")\n+    }\n+    private fun hasAnnotation(context: JavaContext, methodCall: UElement): Boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48290cd3e47d91861a99b372af366a2783d9bba7"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTI2NjMwOnYy", "diffSide": "RIGHT", "path": "tools/lint/src/main/kotlin/DeferredApiDetector.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjo0MzoxNFrOHl1vPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjo0MzoxNFrOHl1vPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzOTgwNg==", "bodyText": "To reduce nesting\nif (lambda == null) {\n return null\n}", "url": "https://github.com/firebase/firebase-android-sdk/pull/2085#discussion_r509439806", "createdAt": "2020-10-21T16:43:14Z", "author": {"login": "rlazo"}, "path": "tools/lint/src/main/kotlin/DeferredApiDetector.kt", "diffHunk": "@@ -0,0 +1,153 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.lint.checks\n+\n+import com.android.tools.lint.detector.api.AnnotationUsageType\n+import com.android.tools.lint.detector.api.Category\n+import com.android.tools.lint.detector.api.Detector\n+import com.android.tools.lint.detector.api.Implementation\n+import com.android.tools.lint.detector.api.Issue\n+import com.android.tools.lint.detector.api.JavaContext\n+import com.android.tools.lint.detector.api.Scope\n+import com.android.tools.lint.detector.api.Severity\n+import com.android.tools.lint.detector.api.SourceCodeScanner\n+import com.intellij.lang.jvm.JvmModifier\n+import com.intellij.psi.PsiClassType\n+import com.intellij.psi.PsiMethod\n+import org.jetbrains.uast.UAnnotation\n+import org.jetbrains.uast.UAnonymousClass\n+import org.jetbrains.uast.UElement\n+import org.jetbrains.uast.ULambdaExpression\n+import org.jetbrains.uast.UMethod\n+import org.jetbrains.uast.getParentOfType\n+\n+internal const val ANNOTATION = \"com.google.firebase.components.annotations.DeferredApi\"\n+\n+class DeferredApiDetector : Detector(), SourceCodeScanner {\n+    override fun applicableAnnotations(): List<String> = listOf(ANNOTATION)\n+\n+    override fun visitAnnotationUsage(\n+        context: JavaContext,\n+        usage: UElement,\n+        type: AnnotationUsageType,\n+        annotation: UAnnotation,\n+        qualifiedName: String,\n+        method: PsiMethod?,\n+        annotations: List<UAnnotation>,\n+        allMemberAnnotations: List<UAnnotation>,\n+        allClassAnnotations: List<UAnnotation>,\n+        allPackageAnnotations: List<UAnnotation>\n+    ) {\n+        if (method != null && type == AnnotationUsageType.METHOD_CALL) {\n+            check(context, usage, method)\n+        }\n+    }\n+\n+    private fun check(context: JavaContext, usage: UElement, method: PsiMethod) {\n+        val usageHasAnnotation = hasAnnotation(context, usage)\n+        val methodHasAnnotation = hasAnnotation(context, method)\n+\n+        if ((!usageHasAnnotation && methodHasAnnotation) || (usageHasAnnotation && !methodHasAnnotation))\n+            context.report(\n+                    INVALID_DEFERRED_API_USE,\n+                    usage,\n+                    context.getLocation(usage),\n+                    \"${method.name} is only safe to call in the context of a Deferred<T> dependency.\")\n+    }\n+    private fun hasAnnotation(context: JavaContext, methodCall: UElement): Boolean {\n+        lambdaMethod(methodCall)?.let {\n+            return hasAnnotation(context, it)\n+        }\n+\n+        val method = methodCall.getParentOfType<UElement>(\n+                UMethod::class.java, true,\n+                UAnonymousClass::class.java, ULambdaExpression::class.java\n+        ) as? PsiMethod\n+        return hasAnnotation(context, method)\n+    }\n+\n+    private fun lambdaMethod(element: UElement): PsiMethod? {\n+        val lambda = element.getParentOfType<ULambdaExpression>(\n+                ULambdaExpression::class.java, true, UMethod::class.java, UAnonymousClass::class.java)\n+        if (lambda != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48290cd3e47d91861a99b372af366a2783d9bba7"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTI2ODk1OnYy", "diffSide": "RIGHT", "path": "tools/lint/src/main/kotlin/DeferredApiDetector.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjo0Mzo1NVrOHl1w6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjo0Mzo1NVrOHl1w6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0MDIzMg==", "bodyText": "same", "url": "https://github.com/firebase/firebase-android-sdk/pull/2085#discussion_r509440232", "createdAt": "2020-10-21T16:43:55Z", "author": {"login": "rlazo"}, "path": "tools/lint/src/main/kotlin/DeferredApiDetector.kt", "diffHunk": "@@ -0,0 +1,153 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.lint.checks\n+\n+import com.android.tools.lint.detector.api.AnnotationUsageType\n+import com.android.tools.lint.detector.api.Category\n+import com.android.tools.lint.detector.api.Detector\n+import com.android.tools.lint.detector.api.Implementation\n+import com.android.tools.lint.detector.api.Issue\n+import com.android.tools.lint.detector.api.JavaContext\n+import com.android.tools.lint.detector.api.Scope\n+import com.android.tools.lint.detector.api.Severity\n+import com.android.tools.lint.detector.api.SourceCodeScanner\n+import com.intellij.lang.jvm.JvmModifier\n+import com.intellij.psi.PsiClassType\n+import com.intellij.psi.PsiMethod\n+import org.jetbrains.uast.UAnnotation\n+import org.jetbrains.uast.UAnonymousClass\n+import org.jetbrains.uast.UElement\n+import org.jetbrains.uast.ULambdaExpression\n+import org.jetbrains.uast.UMethod\n+import org.jetbrains.uast.getParentOfType\n+\n+internal const val ANNOTATION = \"com.google.firebase.components.annotations.DeferredApi\"\n+\n+class DeferredApiDetector : Detector(), SourceCodeScanner {\n+    override fun applicableAnnotations(): List<String> = listOf(ANNOTATION)\n+\n+    override fun visitAnnotationUsage(\n+        context: JavaContext,\n+        usage: UElement,\n+        type: AnnotationUsageType,\n+        annotation: UAnnotation,\n+        qualifiedName: String,\n+        method: PsiMethod?,\n+        annotations: List<UAnnotation>,\n+        allMemberAnnotations: List<UAnnotation>,\n+        allClassAnnotations: List<UAnnotation>,\n+        allPackageAnnotations: List<UAnnotation>\n+    ) {\n+        if (method != null && type == AnnotationUsageType.METHOD_CALL) {\n+            check(context, usage, method)\n+        }\n+    }\n+\n+    private fun check(context: JavaContext, usage: UElement, method: PsiMethod) {\n+        val usageHasAnnotation = hasAnnotation(context, usage)\n+        val methodHasAnnotation = hasAnnotation(context, method)\n+\n+        if ((!usageHasAnnotation && methodHasAnnotation) || (usageHasAnnotation && !methodHasAnnotation))\n+            context.report(\n+                    INVALID_DEFERRED_API_USE,\n+                    usage,\n+                    context.getLocation(usage),\n+                    \"${method.name} is only safe to call in the context of a Deferred<T> dependency.\")\n+    }\n+    private fun hasAnnotation(context: JavaContext, methodCall: UElement): Boolean {\n+        lambdaMethod(methodCall)?.let {\n+            return hasAnnotation(context, it)\n+        }\n+\n+        val method = methodCall.getParentOfType<UElement>(\n+                UMethod::class.java, true,\n+                UAnonymousClass::class.java, ULambdaExpression::class.java\n+        ) as? PsiMethod\n+        return hasAnnotation(context, method)\n+    }\n+\n+    private fun lambdaMethod(element: UElement): PsiMethod? {\n+        val lambda = element.getParentOfType<ULambdaExpression>(\n+                ULambdaExpression::class.java, true, UMethod::class.java, UAnonymousClass::class.java)\n+        if (lambda != null) {\n+            val type = lambda.functionalInterfaceType\n+            if (type is PsiClassType) {\n+                val resolved = type.resolve()\n+                if (resolved != null) {\n+                    return resolved.allMethods.firstOrNull { it.hasModifier(JvmModifier.ABSTRACT) }\n+                }\n+            }\n+        }\n+        return null\n+    }\n+\n+    private fun hasAnnotation(context: JavaContext, calledMethod: PsiMethod?): Boolean {\n+        var method = calledMethod\n+        if (method != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48290cd3e47d91861a99b372af366a2783d9bba7"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1084, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}