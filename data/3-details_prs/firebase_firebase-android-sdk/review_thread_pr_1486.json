{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MTQ1MjQ4", "number": 1486, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyNjowOVrODz3OqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyNzozNVrODz3Q3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzA4ODQxOnYy", "diffSide": "RIGHT", "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/SafeLoggingExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyNjowOVrOGIh1Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyNjowOVrOGIh1Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5NjA3NQ==", "bodyText": "We should consider logging non fatals to crashlytics in the future. In this case, that could off course loop around and come right back to the problem", "url": "https://github.com/firebase/firebase-android-sdk/pull/1486#discussion_r411596075", "createdAt": "2020-04-20T18:26:09Z", "author": {"login": "ashwinraghav"}, "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/SafeLoggingExecutor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.android.datatransport.runtime;\n+\n+import com.google.android.datatransport.runtime.logging.Logging;\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * Protects underlying threads from crashing.\n+ *\n+ * <p>Exceptions thrown by executed {@link Runnable}s are logged and swallowed.\n+ */\n+class SafeLoggingExecutor implements Executor {\n+  private final Executor delegate;\n+\n+  SafeLoggingExecutor(Executor delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public void execute(Runnable command) {\n+    delegate.execute(new SafeLoggingRunnable(command));\n+  }\n+\n+  static class SafeLoggingRunnable implements Runnable {\n+    private final Runnable delegate;\n+\n+    SafeLoggingRunnable(Runnable delegate) {\n+      this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public void run() {\n+      try {\n+        delegate.run();\n+      } catch (Exception e) {\n+        Logging.e(\"Executor\", \"Background execution failure.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08873586b1cffa3adf1af9bab16c72be9cc4a4f1"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzA5NDA0OnYy", "diffSide": "RIGHT", "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/ExecutionModule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyNzozNVrOGIh4mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyNzozNVrOGIh4mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5Njk1NQ==", "bodyText": "Wow!\nDI to the rescue!", "url": "https://github.com/firebase/firebase-android-sdk/pull/1486#discussion_r411596955", "createdAt": "2020-04-20T18:27:35Z", "author": {"login": "ashwinraghav"}, "path": "transport/transport-runtime/src/main/java/com/google/android/datatransport/runtime/ExecutionModule.java", "diffHunk": "@@ -25,6 +25,6 @@\n   @Singleton\n   @Provides\n   static Executor executor() {\n-    return Executors.newSingleThreadExecutor();\n+    return new SafeLoggingExecutor(Executors.newSingleThreadExecutor());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08873586b1cffa3adf1af9bab16c72be9cc4a4f1"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1318, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}