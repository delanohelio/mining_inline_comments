{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MzEwNDcx", "number": 1353, "title": "C++ API for Crashlytics NDK ", "bodyText": "Update the crashlytics.h file to remove the legacy C API and add a new C++ API in the firebase::crashlytics namespace.\nThe 3rd commit is only formatting changes, so that a diff with the first two will show the relevant content changes.", "createdAt": "2020-03-16T15:21:58Z", "url": "https://github.com/firebase/firebase-android-sdk/pull/1353", "merged": true, "mergeCommit": {"oid": "af0a38fb99ee55477f3d864f6f1f1f72f52ba7de"}, "closed": true, "closedAt": "2020-03-17T15:44:45Z", "author": {"login": "mrichards"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMqg6SAH2gAyMzg5MzEwNDcxOmZlM2U0ZGU3ZGM3NzhlNDNjYjU1NmQ0MDBhODNhNWUyMTQ1YmIwMzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOkinkgFqTM3NjE1MTA2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fe3e4de7dc778e43cb556d400a83a5e2145bb036", "author": {"user": {"login": "mrichards", "name": "Marc Richards"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/fe3e4de7dc778e43cb556d400a83a5e2145bb036", "committedDate": "2020-03-11T17:25:08Z", "message": "Add the Crashlytics C++ API for NDK (in progress)\n\nAdd the new C++-only API provided by the header-only library\n(crashlytics.h) and break compatibility with C.\n\nThis commit is in progress; subsequent work on this branch will\nremove the C-only parts of crashlytics.h and add documentation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "822fc78798cc87e3a41725285d72327a7947a504", "author": {"user": {"login": "mrichards", "name": "Marc Richards"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/822fc78798cc87e3a41725285d72327a7947a504", "committedDate": "2020-03-16T15:03:39Z", "message": "Removed C APIs and put everything in firebase::crashlytics namespace. \\n\\nAlso prefixed all non-public functions / identifiers with '__'. Formatting will be cleaned up in the next commit."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4f1e4d46ac08970dfb75ee581ca06cbb3643863", "author": {"user": {"login": "mrichards", "name": "Marc Richards"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/e4f1e4d46ac08970dfb75ee581ca06cbb3643863", "committedDate": "2020-03-16T15:19:09Z", "message": "Formatting changes. \\n\\nThis is only partially auto-formatted, so their may be some formatting inconsistencies in favor of overall readability."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e1df4fd1f44133755509a346d4c29897095c038", "author": {"user": {"login": "mrichards", "name": "Marc Richards"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/5e1df4fd1f44133755509a346d4c29897095c038", "committedDate": "2020-03-16T15:59:10Z", "message": "Remove crashlytics.h dependencies on jni.h and android\n\nWe aren't currently using the JNI_Env type so there's no\nneed for the jni.h dependency. The android logcat output\nis not essential either, so we'll remove it in favor of\nfewer dependencies."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NDA1MTkz", "url": "https://github.com/firebase/firebase-android-sdk/pull/1353#pullrequestreview-375405193", "createdAt": "2020-03-16T16:52:34Z", "commit": {"oid": "5e1df4fd1f44133755509a346d4c29897095c038"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjo1MjozNFrOF29DQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjo1MjozNFrOF29DQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE2NzY4Mw==", "bodyText": "Is the intent to log an error here, as you mentioned in the refdoc?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1353#discussion_r393167683", "createdAt": "2020-03-16T16:52:34Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics-ndk/src/main/jni/libcrashlytics/include/crashlytics/external/crashlytics.h", "diffHunk": "@@ -14,85 +14,151 @@\n #ifndef __CRASHLYTICS_H__\n #define __CRASHLYTICS_H__\n \n-#if defined (__cplusplus)\n-        #include <cstddef>\n-#else\n-        #include <stdlib.h>\n-        #include <string.h>\n-#endif\n-\n+#include <cstddef>\n+#include <string>\n #include <dlfcn.h>\n \n-// THIS IS THE LEGACY PUBLIC C++ API FOR THE FABRIC CRASHLYTICS NDK, INTENDED FOR BACKWARDS\n-// COMPATIBILITY ONLY. THIS API IS DEPRECATED AND SCHEDULED FOR REPLACEMENT IN 2020.\n+/// @brief Firebase Crashlytics NDK API, for Android apps which use native code.\n+///\n+/// This API is optional: It enables adding custom metadata to your native Crashlytics crash\n+/// reports. See <a href=\"https://firebase.google.com/docs/crashlytics\">the developer guides</a>\n+/// for information on using Firebase Crashlytics in your NDK-enabled Android apps.\n+namespace firebase::crashlytics {\n+\n+    /** PUBLIC API **/\n+\n+    /// @brief Initialize the Crashlytics API.\n+    ///\n+    /// This must be called prior to calling any other methods in the firebase:crashlytics\n+    /// namespace.\n+    void Initialize();\n \n-/*! Custom logs and keys ---------------------------------------------------------------------------------------*/\n-/*! Native API:\n+    /// @brief Terminate the Crashlytics API.\n+    ///\n+    /// Cleans up resources associated with the API. Subsequent calls to the Crashlytics native API\n+    /// will log an error and have no other effect.\n+    void Terminate();\n \n-        crashlytics_context_t* crashlytics_init();\n-        void crashlytics_context_t::set(crashlytics_context_t* context, const char* key, const char* value);\n-        void crashlytics_context_t::log(crashlytics_context_t* context, const char* message);\n-        void crashlytics_context_t::set_user_id(crashlytics_context_t* context, const char* identifier);\n+    /// @brief Logs a message to be included in the next fatal or non-fatal report.\n+    void Log(const char *msg);\n \n-        void crashlytics_free(crashlytics_context_t** context);\n+    /// @brief Records a custom key and value to be associated with subsequent fatal and non-fatal\n+    /// reports.\n+    void SetCustomKey(const char *key, bool value);\n \n-    Example:\n+    /// @brief Records a custom key and value to be associated with subsequent fatal and non-fatal\n+    /// reports.\n+    void SetCustomKey(const char *key, const char *value);\n \n-        ...\n-        crashlytics_context_t* context = crashlytics_init();\n-        ...\n+    /// @brief Records a custom key and value to be associated with subsequent fatal and non-fatal\n+    /// reports.\n+    void SetCustomKey(const char *key, double value);\n \n-        context->set(context, \"key\", \"value\");\n-        context->log(context, \"this is a message\");\n-        context->set_user_id(context, \"identifier\");\n+    /// @brief Records a custom key and value to be associated with subsequent fatal and non-fatal\n+    /// reports.\n+    void SetCustomKey(const char *key, float value);\n \n-        ...\n-        crashlytics_free(&context);\n-        ...\n+    /// @brief Records a custom key and value to be associated with subsequent fatal and non-fatal\n+    /// reports.\n+    void SetCustomKey(const char *key, int value);\n \n- */\n+    /// @brief Records a custom key and value to be associated with subsequent fatal and non-fatal\n+    /// reports.\n+    void SetCustomKey(const char *key, long value);\n \n-struct         __crashlytics_context;\n-struct         __crashlytics_unspecified;\n-typedef struct __crashlytics_context                    crashlytics_context_t;\n-typedef struct __crashlytics_unspecified                __crashlytics_unspecified_t;\n+    /// @brief Records a user ID (identifier) that's associated with subsequent fatal and non-fatal\n+    /// reports.\n+    void SetUserId(const char *id);\n \n-typedef void   (*__crashlytics_set_t)                   (crashlytics_context_t *, const char *, const char *);\n-typedef void   (*__crashlytics_log_t)                   (crashlytics_context_t *, const char *);\n-typedef void   (*__crashlytics_set_user_id_t)           (crashlytics_context_t *, const char *);\n+    /** END PUBLIC API **/\n \n-typedef __crashlytics_unspecified_t*    (*__crashlytics_initialize_t)      ();\n-typedef void                            (*__crashlytics_set_internal_t)    (__crashlytics_unspecified_t *, const char *, const char *);\n-typedef void                            (*__crashlytics_log_internal_t)    (__crashlytics_unspecified_t *, const char *);\n-typedef void                            (*__crashlytics_dispose_t)         (__crashlytics_unspecified_t *);\n+    struct         __crashlytics_context;\n+    struct         __crashlytics_unspecified;\n+    typedef struct __crashlytics_context                    __crashlytics_context_t;\n+    typedef struct __crashlytics_unspecified                __crashlytics_unspecified_t;\n \n-typedef void                            (*__crashlytics_set_user_id_internal_t)(__crashlytics_unspecified_t *, const char *);\n+    typedef __crashlytics_unspecified_t*    (*__crashlytics_initialize_t)      ();\n+    typedef void                            (*__crashlytics_set_internal_t)    (__crashlytics_unspecified_t *, const char *, const char *);\n+    typedef void                            (*__crashlytics_log_internal_t)    (__crashlytics_unspecified_t *, const char *);\n+    typedef void                            (*__crashlytics_set_user_id_internal_t)(__crashlytics_unspecified_t *, const char *);\n+    typedef void                            (*__crashlytics_dispose_t)         (__crashlytics_unspecified_t *);\n \n-struct  __crashlytics_context {\n-/* API ---------------------------------------------------------------------------------------------------------*/\n-        __crashlytics_set_t                            set;\n-        __crashlytics_log_t                            log;\n-        __crashlytics_set_user_id_t                    set_user_id;\n-/*--------------------------------------------------------------------------------------------------------------*/\n+    struct __crashlytics_context {\n \n-        __crashlytics_set_internal_t                   __set;\n-        __crashlytics_log_internal_t                   __log;\n-        __crashlytics_set_user_id_internal_t           __set_user_id;\n+        __crashlytics_set_internal_t __set;\n+        __crashlytics_log_internal_t __log;\n+        __crashlytics_set_user_id_internal_t __set_user_id;\n \n-        __crashlytics_unspecified_t*                   __ctx;\n-        __crashlytics_dispose_t                        __dispose;\n-};\n+        __crashlytics_unspecified_t *__ctx;\n+        __crashlytics_dispose_t __dispose;\n+    };\n \n #define __CRASHLYTICS_NULL_CONTEXT                             (struct __crashlytics_context *) 0\n #define __CRASHLYTICS_INITIALIZE_FAILURE                       (struct __crashlytics_unspecified *) 0\n #define __CRASHLYTICS_DECORATED                                __attribute__ ((always_inline))\n \n-/* API ---------------------------------------------------------------------------------------------------------*/\n \n-static inline crashlytics_context_t* crashlytics_init()                                   __CRASHLYTICS_DECORATED;\n-static inline void                   crashlytics_free(crashlytics_context_t** context)    __CRASHLYTICS_DECORATED;\n+    static inline __crashlytics_context_t* __crashlytics_init() __CRASHLYTICS_DECORATED;\n+    static inline void                     __crashlytics_free(__crashlytics_context_t **context) __CRASHLYTICS_DECORATED;\n+\n+    __crashlytics_context_t *__context;\n+\n+    bool VerifyCrashlytics() {\n+        if (__context) {\n+            return true;\n+        }\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e1df4fd1f44133755509a346d4c29897095c038"}, "originalPosition": 157}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NDA2Mzk5", "url": "https://github.com/firebase/firebase-android-sdk/pull/1353#pullrequestreview-375406399", "createdAt": "2020-03-16T16:53:16Z", "commit": {"oid": "5e1df4fd1f44133755509a346d4c29897095c038"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f795f22724d257483f42964e0b893e0e43c510f0", "author": {"user": {"login": "mrichards", "name": "Marc Richards"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/f795f22724d257483f42964e0b893e0e43c510f0", "committedDate": "2020-03-16T17:58:53Z", "message": "Comment clean up."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NDcwODc0", "url": "https://github.com/firebase/firebase-android-sdk/pull/1353#pullrequestreview-375470874", "createdAt": "2020-03-16T18:13:38Z", "commit": {"oid": "f795f22724d257483f42964e0b893e0e43c510f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxMzozOFrOF3AYQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxMzozOFrOF3AYQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMjIwOA==", "bodyText": "All definitions within this file should be declared as inline, otherwise, you are going to run into a \"multiple definition\" compiler error. You can test this by including this file into two separate translation units and compiling.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1353#discussion_r393222208", "createdAt": "2020-03-16T18:13:38Z", "author": {"login": "kmandrika"}, "path": "firebase-crashlytics-ndk/src/main/jni/libcrashlytics/include/crashlytics/external/crashlytics.h", "diffHunk": "@@ -14,85 +14,152 @@\n #ifndef __CRASHLYTICS_H__\n #define __CRASHLYTICS_H__\n \n-#if defined (__cplusplus)\n-        #include <cstddef>\n-#else\n-        #include <stdlib.h>\n-        #include <string.h>\n-#endif\n-\n+#include <cstddef>\n+#include <string>\n #include <dlfcn.h>\n \n-// THIS IS THE LEGACY PUBLIC C++ API FOR THE FABRIC CRASHLYTICS NDK, INTENDED FOR BACKWARDS\n-// COMPATIBILITY ONLY. THIS API IS DEPRECATED AND SCHEDULED FOR REPLACEMENT IN 2020.\n+/// @brief Firebase Crashlytics NDK API, for Android apps which use native code.\n+///\n+/// This API is optional: It enables adding custom metadata to your native Crashlytics crash\n+/// reports. See <a href=\"https://firebase.google.com/docs/crashlytics\">the developer guides</a>\n+/// for information on using Firebase Crashlytics in your NDK-enabled Android apps.\n+namespace firebase::crashlytics {\n+\n+    /** PUBLIC API **/\n+\n+    /// @brief Initialize the Crashlytics NDK API, for Android apps using native code.\n+    ///\n+    /// This must be called prior to calling any other methods in the firebase:crashlytics\n+    /// namespace. This call is only required for adding custom metadata to crash reports. Use of\n+    /// this header file is NOT required for Android NDK crash reporting.\n+    void Initialize();\n \n-/*! Custom logs and keys ---------------------------------------------------------------------------------------*/\n-/*! Native API:\n+    /// @brief Terminate the Crashlytics NDK API.\n+    ///\n+    /// Cleans up resources associated with the API. Subsequent calls to the Crashlytics native API\n+    /// will have no effect.\n+    void Terminate();\n \n-        crashlytics_context_t* crashlytics_init();\n-        void crashlytics_context_t::set(crashlytics_context_t* context, const char* key, const char* value);\n-        void crashlytics_context_t::log(crashlytics_context_t* context, const char* message);\n-        void crashlytics_context_t::set_user_id(crashlytics_context_t* context, const char* identifier);\n+    /// @brief Logs a message to be included in the next fatal or non-fatal report.\n+    void Log(const char *msg);\n \n-        void crashlytics_free(crashlytics_context_t** context);\n+    /// @brief Records a custom key and value to be associated with subsequent fatal and non-fatal\n+    /// reports.\n+    void SetCustomKey(const char *key, bool value);\n \n-    Example:\n+    /// @brief Records a custom key and value to be associated with subsequent fatal and non-fatal\n+    /// reports.\n+    void SetCustomKey(const char *key, const char *value);\n \n-        ...\n-        crashlytics_context_t* context = crashlytics_init();\n-        ...\n+    /// @brief Records a custom key and value to be associated with subsequent fatal and non-fatal\n+    /// reports.\n+    void SetCustomKey(const char *key, double value);\n \n-        context->set(context, \"key\", \"value\");\n-        context->log(context, \"this is a message\");\n-        context->set_user_id(context, \"identifier\");\n+    /// @brief Records a custom key and value to be associated with subsequent fatal and non-fatal\n+    /// reports.\n+    void SetCustomKey(const char *key, float value);\n \n-        ...\n-        crashlytics_free(&context);\n-        ...\n+    /// @brief Records a custom key and value to be associated with subsequent fatal and non-fatal\n+    /// reports.\n+    void SetCustomKey(const char *key, int value);\n \n- */\n+    /// @brief Records a custom key and value to be associated with subsequent fatal and non-fatal\n+    /// reports.\n+    void SetCustomKey(const char *key, long value);\n \n-struct         __crashlytics_context;\n-struct         __crashlytics_unspecified;\n-typedef struct __crashlytics_context                    crashlytics_context_t;\n-typedef struct __crashlytics_unspecified                __crashlytics_unspecified_t;\n+    /// @brief Records a user ID (identifier) that's associated with subsequent fatal and non-fatal\n+    /// reports.\n+    void SetUserId(const char *id);\n \n-typedef void   (*__crashlytics_set_t)                   (crashlytics_context_t *, const char *, const char *);\n-typedef void   (*__crashlytics_log_t)                   (crashlytics_context_t *, const char *);\n-typedef void   (*__crashlytics_set_user_id_t)           (crashlytics_context_t *, const char *);\n+    /** END PUBLIC API **/\n \n-typedef __crashlytics_unspecified_t*    (*__crashlytics_initialize_t)      ();\n-typedef void                            (*__crashlytics_set_internal_t)    (__crashlytics_unspecified_t *, const char *, const char *);\n-typedef void                            (*__crashlytics_log_internal_t)    (__crashlytics_unspecified_t *, const char *);\n-typedef void                            (*__crashlytics_dispose_t)         (__crashlytics_unspecified_t *);\n+    struct         __crashlytics_context;\n+    struct         __crashlytics_unspecified;\n+    typedef struct __crashlytics_context                    __crashlytics_context_t;\n+    typedef struct __crashlytics_unspecified                __crashlytics_unspecified_t;\n \n-typedef void                            (*__crashlytics_set_user_id_internal_t)(__crashlytics_unspecified_t *, const char *);\n+    typedef __crashlytics_unspecified_t*    (*__crashlytics_initialize_t)      ();\n+    typedef void                            (*__crashlytics_set_internal_t)    (__crashlytics_unspecified_t *, const char *, const char *);\n+    typedef void                            (*__crashlytics_log_internal_t)    (__crashlytics_unspecified_t *, const char *);\n+    typedef void                            (*__crashlytics_set_user_id_internal_t)(__crashlytics_unspecified_t *, const char *);\n+    typedef void                            (*__crashlytics_dispose_t)         (__crashlytics_unspecified_t *);\n \n-struct  __crashlytics_context {\n-/* API ---------------------------------------------------------------------------------------------------------*/\n-        __crashlytics_set_t                            set;\n-        __crashlytics_log_t                            log;\n-        __crashlytics_set_user_id_t                    set_user_id;\n-/*--------------------------------------------------------------------------------------------------------------*/\n+    struct __crashlytics_context {\n \n-        __crashlytics_set_internal_t                   __set;\n-        __crashlytics_log_internal_t                   __log;\n-        __crashlytics_set_user_id_internal_t           __set_user_id;\n+        __crashlytics_set_internal_t __set;\n+        __crashlytics_log_internal_t __log;\n+        __crashlytics_set_user_id_internal_t __set_user_id;\n \n-        __crashlytics_unspecified_t*                   __ctx;\n-        __crashlytics_dispose_t                        __dispose;\n-};\n+        __crashlytics_unspecified_t *__ctx;\n+        __crashlytics_dispose_t __dispose;\n+    };\n \n #define __CRASHLYTICS_NULL_CONTEXT                             (struct __crashlytics_context *) 0\n #define __CRASHLYTICS_INITIALIZE_FAILURE                       (struct __crashlytics_unspecified *) 0\n #define __CRASHLYTICS_DECORATED                                __attribute__ ((always_inline))\n \n-/* API ---------------------------------------------------------------------------------------------------------*/\n \n-static inline crashlytics_context_t* crashlytics_init()                                   __CRASHLYTICS_DECORATED;\n-static inline void                   crashlytics_free(crashlytics_context_t** context)    __CRASHLYTICS_DECORATED;\n+    static inline __crashlytics_context_t* __crashlytics_init() __CRASHLYTICS_DECORATED;\n+    static inline void                     __crashlytics_free(__crashlytics_context_t **context) __CRASHLYTICS_DECORATED;\n+\n+    __crashlytics_context_t *__context;\n+\n+    bool VerifyCrashlytics() {\n+        if (__context) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    void Initialize() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f795f22724d257483f42964e0b893e0e43c510f0"}, "originalPosition": 161}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e9a56d891c975f26ae57b7ecf048a0fafb37bcb", "author": {"user": {"login": "mrichards", "name": "Marc Richards"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/3e9a56d891c975f26ae57b7ecf048a0fafb37bcb", "committedDate": "2020-03-17T12:59:50Z", "message": "Inlined all new API functions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec9b2df086d17c16696c0b3024e0deb777b795e4", "author": {"user": {"login": "mrichards", "name": "Marc Richards"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/ec9b2df086d17c16696c0b3024e0deb777b795e4", "committedDate": "2020-03-17T14:46:01Z", "message": "Restyle to C++ conventions\n\nMove `inline` declarations to front of the signature; use `type* id`\ninstead of `type *id`."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MTE1NTYz", "url": "https://github.com/firebase/firebase-android-sdk/pull/1353#pullrequestreview-376115563", "createdAt": "2020-03-17T14:58:09Z", "commit": {"oid": "ec9b2df086d17c16696c0b3024e0deb777b795e4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MTUxMDY2", "url": "https://github.com/firebase/firebase-android-sdk/pull/1353#pullrequestreview-376151066", "createdAt": "2020-03-17T15:35:25Z", "commit": {"oid": "ec9b2df086d17c16696c0b3024e0deb777b795e4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2179, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}