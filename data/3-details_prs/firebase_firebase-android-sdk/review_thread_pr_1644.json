{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMzE4OTk1", "number": 1644, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDoyOTozNlrOEN2BKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDo1NTo0NVrOEW1Cgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTUxOTc2OnYy", "diffSide": "RIGHT", "path": "firebase-storage/ktx/src/main/kotlin/com/google/firebase/storage/ktx/Storage.kt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDoyOTozNlrOGwrH8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjo0MjoxNVrOGwwyug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5MTM3OQ==", "bodyText": "Should the developers be able to mutate the list or can we return just List<StorageReference> here?\ncc @schmidt-sebastian", "url": "https://github.com/firebase/firebase-android-sdk/pull/1644#discussion_r453691379", "createdAt": "2020-07-13T14:29:36Z", "author": {"login": "vkryachko"}, "path": "firebase-storage/ktx/src/main/kotlin/com/google/firebase/storage/ktx/Storage.kt", "diffHunk": "@@ -45,6 +50,90 @@ fun storageMetadata(init: StorageMetadata.Builder.() -> Unit): StorageMetadata {\n     return builder.build()\n }\n \n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide bytesTransferred\n+ *\n+ * @return the bytesTransferred of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component1() = bytesTransferred\n+\n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide totalByteCount\n+ *\n+ * @return the totalByteCount of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component2() = totalByteCount\n+\n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide its metadata\n+ *\n+ * @return the metadata of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component3() = metadata\n+\n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide its uploadSessionUri\n+ *\n+ * @return the uploadSessionUri of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component4() = uploadSessionUri\n+\n+/**\n+ * Destructuring declaration for [StreamDownloadTask.TaskSnapshot] to provide bytesTransferred\n+ *\n+ * @return the bytesTransferred of the [StreamDownloadTask.TaskSnapshot]\n+ */\n+operator fun StreamDownloadTask.TaskSnapshot.component1() = bytesTransferred\n+\n+/**\n+ * Destructuring declaration for [StreamDownloadTask.TaskSnapshot] to provide totalByteCount\n+ *\n+ * @return the totalByteCount of the [StreamDownloadTask.TaskSnapshot]\n+ */\n+operator fun StreamDownloadTask.TaskSnapshot.component2() = totalByteCount\n+\n+/**\n+ * Destructuring declaration for [StreamDownloadTask.TaskSnapshot] to provide its stream\n+ *\n+ * @return the stream of the [StreamDownloadTask.TaskSnapshot]\n+ */\n+operator fun StreamDownloadTask.TaskSnapshot.component3() = stream\n+\n+/**\n+ * Destructuring declaration for [FileDownloadTask.TaskSnapshot] to provide bytesTransferred\n+ *\n+ * @return the bytesTransferred of the [FileDownloadTask.TaskSnapshot]\n+ */\n+operator fun FileDownloadTask.TaskSnapshot.component1() = bytesTransferred\n+\n+/**\n+ * Destructuring declaration for [FileDownloadTask.TaskSnapshot] to provide totalByteCount\n+ *\n+ * @return the totalByteCount of the [FileDownloadTask.TaskSnapshot]\n+ */\n+operator fun FileDownloadTask.TaskSnapshot.component2() = totalByteCount\n+\n+/**\n+ * Destructuring declaration for [ListResult] to provide its items\n+ *\n+ * @return the items of the [ListResult]\n+ */\n+operator fun ListResult.component1(): MutableList<StorageReference> = items", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2259a356f233ebfe85221dac5be5d46fd5b08cdc"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzczMzY0OA==", "bodyText": "@vkryachko Seems like you're right. The java code does return an immutable list:\n\n  \n    \n      firebase-android-sdk/firebase-storage/src/main/java/com/google/firebase/storage/ListResult.java\n    \n    \n        Lines 86 to 89\n      in\n      334aa44\n    \n    \n    \n    \n\n        \n          \n           @NonNull \n        \n\n        \n          \n           public List<StorageReference> getItems() { \n        \n\n        \n          \n             return items; \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nThe MutableList return type was  mistakenly added by the IDE when auto-fixing this lint warning:", "url": "https://github.com/firebase/firebase-android-sdk/pull/1644#discussion_r453733648", "createdAt": "2020-07-13T15:27:25Z", "author": {"login": "thatfiredev"}, "path": "firebase-storage/ktx/src/main/kotlin/com/google/firebase/storage/ktx/Storage.kt", "diffHunk": "@@ -45,6 +50,90 @@ fun storageMetadata(init: StorageMetadata.Builder.() -> Unit): StorageMetadata {\n     return builder.build()\n }\n \n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide bytesTransferred\n+ *\n+ * @return the bytesTransferred of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component1() = bytesTransferred\n+\n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide totalByteCount\n+ *\n+ * @return the totalByteCount of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component2() = totalByteCount\n+\n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide its metadata\n+ *\n+ * @return the metadata of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component3() = metadata\n+\n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide its uploadSessionUri\n+ *\n+ * @return the uploadSessionUri of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component4() = uploadSessionUri\n+\n+/**\n+ * Destructuring declaration for [StreamDownloadTask.TaskSnapshot] to provide bytesTransferred\n+ *\n+ * @return the bytesTransferred of the [StreamDownloadTask.TaskSnapshot]\n+ */\n+operator fun StreamDownloadTask.TaskSnapshot.component1() = bytesTransferred\n+\n+/**\n+ * Destructuring declaration for [StreamDownloadTask.TaskSnapshot] to provide totalByteCount\n+ *\n+ * @return the totalByteCount of the [StreamDownloadTask.TaskSnapshot]\n+ */\n+operator fun StreamDownloadTask.TaskSnapshot.component2() = totalByteCount\n+\n+/**\n+ * Destructuring declaration for [StreamDownloadTask.TaskSnapshot] to provide its stream\n+ *\n+ * @return the stream of the [StreamDownloadTask.TaskSnapshot]\n+ */\n+operator fun StreamDownloadTask.TaskSnapshot.component3() = stream\n+\n+/**\n+ * Destructuring declaration for [FileDownloadTask.TaskSnapshot] to provide bytesTransferred\n+ *\n+ * @return the bytesTransferred of the [FileDownloadTask.TaskSnapshot]\n+ */\n+operator fun FileDownloadTask.TaskSnapshot.component1() = bytesTransferred\n+\n+/**\n+ * Destructuring declaration for [FileDownloadTask.TaskSnapshot] to provide totalByteCount\n+ *\n+ * @return the totalByteCount of the [FileDownloadTask.TaskSnapshot]\n+ */\n+operator fun FileDownloadTask.TaskSnapshot.component2() = totalByteCount\n+\n+/**\n+ * Destructuring declaration for [ListResult] to provide its items\n+ *\n+ * @return the items of the [ListResult]\n+ */\n+operator fun ListResult.component1(): MutableList<StorageReference> = items", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5MTM3OQ=="}, "originalCommit": {"oid": "2259a356f233ebfe85221dac5be5d46fd5b08cdc"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3OTA2Mw==", "bodyText": "List<StorageReference> is the correct return type.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1644#discussion_r453779063", "createdAt": "2020-07-13T16:33:52Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-storage/ktx/src/main/kotlin/com/google/firebase/storage/ktx/Storage.kt", "diffHunk": "@@ -45,6 +50,90 @@ fun storageMetadata(init: StorageMetadata.Builder.() -> Unit): StorageMetadata {\n     return builder.build()\n }\n \n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide bytesTransferred\n+ *\n+ * @return the bytesTransferred of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component1() = bytesTransferred\n+\n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide totalByteCount\n+ *\n+ * @return the totalByteCount of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component2() = totalByteCount\n+\n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide its metadata\n+ *\n+ * @return the metadata of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component3() = metadata\n+\n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide its uploadSessionUri\n+ *\n+ * @return the uploadSessionUri of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component4() = uploadSessionUri\n+\n+/**\n+ * Destructuring declaration for [StreamDownloadTask.TaskSnapshot] to provide bytesTransferred\n+ *\n+ * @return the bytesTransferred of the [StreamDownloadTask.TaskSnapshot]\n+ */\n+operator fun StreamDownloadTask.TaskSnapshot.component1() = bytesTransferred\n+\n+/**\n+ * Destructuring declaration for [StreamDownloadTask.TaskSnapshot] to provide totalByteCount\n+ *\n+ * @return the totalByteCount of the [StreamDownloadTask.TaskSnapshot]\n+ */\n+operator fun StreamDownloadTask.TaskSnapshot.component2() = totalByteCount\n+\n+/**\n+ * Destructuring declaration for [StreamDownloadTask.TaskSnapshot] to provide its stream\n+ *\n+ * @return the stream of the [StreamDownloadTask.TaskSnapshot]\n+ */\n+operator fun StreamDownloadTask.TaskSnapshot.component3() = stream\n+\n+/**\n+ * Destructuring declaration for [FileDownloadTask.TaskSnapshot] to provide bytesTransferred\n+ *\n+ * @return the bytesTransferred of the [FileDownloadTask.TaskSnapshot]\n+ */\n+operator fun FileDownloadTask.TaskSnapshot.component1() = bytesTransferred\n+\n+/**\n+ * Destructuring declaration for [FileDownloadTask.TaskSnapshot] to provide totalByteCount\n+ *\n+ * @return the totalByteCount of the [FileDownloadTask.TaskSnapshot]\n+ */\n+operator fun FileDownloadTask.TaskSnapshot.component2() = totalByteCount\n+\n+/**\n+ * Destructuring declaration for [ListResult] to provide its items\n+ *\n+ * @return the items of the [ListResult]\n+ */\n+operator fun ListResult.component1(): MutableList<StorageReference> = items", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5MTM3OQ=="}, "originalCommit": {"oid": "2259a356f233ebfe85221dac5be5d46fd5b08cdc"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4NDI1MA==", "bodyText": "Thanks for the confirmation @schmidt-sebastian\nPushed a new commit with the update.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1644#discussion_r453784250", "createdAt": "2020-07-13T16:42:15Z", "author": {"login": "thatfiredev"}, "path": "firebase-storage/ktx/src/main/kotlin/com/google/firebase/storage/ktx/Storage.kt", "diffHunk": "@@ -45,6 +50,90 @@ fun storageMetadata(init: StorageMetadata.Builder.() -> Unit): StorageMetadata {\n     return builder.build()\n }\n \n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide bytesTransferred\n+ *\n+ * @return the bytesTransferred of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component1() = bytesTransferred\n+\n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide totalByteCount\n+ *\n+ * @return the totalByteCount of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component2() = totalByteCount\n+\n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide its metadata\n+ *\n+ * @return the metadata of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component3() = metadata\n+\n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide its uploadSessionUri\n+ *\n+ * @return the uploadSessionUri of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component4() = uploadSessionUri\n+\n+/**\n+ * Destructuring declaration for [StreamDownloadTask.TaskSnapshot] to provide bytesTransferred\n+ *\n+ * @return the bytesTransferred of the [StreamDownloadTask.TaskSnapshot]\n+ */\n+operator fun StreamDownloadTask.TaskSnapshot.component1() = bytesTransferred\n+\n+/**\n+ * Destructuring declaration for [StreamDownloadTask.TaskSnapshot] to provide totalByteCount\n+ *\n+ * @return the totalByteCount of the [StreamDownloadTask.TaskSnapshot]\n+ */\n+operator fun StreamDownloadTask.TaskSnapshot.component2() = totalByteCount\n+\n+/**\n+ * Destructuring declaration for [StreamDownloadTask.TaskSnapshot] to provide its stream\n+ *\n+ * @return the stream of the [StreamDownloadTask.TaskSnapshot]\n+ */\n+operator fun StreamDownloadTask.TaskSnapshot.component3() = stream\n+\n+/**\n+ * Destructuring declaration for [FileDownloadTask.TaskSnapshot] to provide bytesTransferred\n+ *\n+ * @return the bytesTransferred of the [FileDownloadTask.TaskSnapshot]\n+ */\n+operator fun FileDownloadTask.TaskSnapshot.component1() = bytesTransferred\n+\n+/**\n+ * Destructuring declaration for [FileDownloadTask.TaskSnapshot] to provide totalByteCount\n+ *\n+ * @return the totalByteCount of the [FileDownloadTask.TaskSnapshot]\n+ */\n+operator fun FileDownloadTask.TaskSnapshot.component2() = totalByteCount\n+\n+/**\n+ * Destructuring declaration for [ListResult] to provide its items\n+ *\n+ * @return the items of the [ListResult]\n+ */\n+operator fun ListResult.component1(): MutableList<StorageReference> = items", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5MTM3OQ=="}, "originalCommit": {"oid": "2259a356f233ebfe85221dac5be5d46fd5b08cdc"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTUyMDE2OnYy", "diffSide": "RIGHT", "path": "firebase-storage/ktx/src/main/kotlin/com/google/firebase/storage/ktx/Storage.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDoyOTo0M1rOGwrINA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDoyOTo0M1rOGwrINA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5MTQ0NA==", "bodyText": "same question here?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1644#discussion_r453691444", "createdAt": "2020-07-13T14:29:43Z", "author": {"login": "vkryachko"}, "path": "firebase-storage/ktx/src/main/kotlin/com/google/firebase/storage/ktx/Storage.kt", "diffHunk": "@@ -45,6 +50,90 @@ fun storageMetadata(init: StorageMetadata.Builder.() -> Unit): StorageMetadata {\n     return builder.build()\n }\n \n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide bytesTransferred\n+ *\n+ * @return the bytesTransferred of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component1() = bytesTransferred\n+\n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide totalByteCount\n+ *\n+ * @return the totalByteCount of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component2() = totalByteCount\n+\n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide its metadata\n+ *\n+ * @return the metadata of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component3() = metadata\n+\n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide its uploadSessionUri\n+ *\n+ * @return the uploadSessionUri of the [UploadTask.TaskSnapshot]\n+ */\n+operator fun UploadTask.TaskSnapshot.component4() = uploadSessionUri\n+\n+/**\n+ * Destructuring declaration for [StreamDownloadTask.TaskSnapshot] to provide bytesTransferred\n+ *\n+ * @return the bytesTransferred of the [StreamDownloadTask.TaskSnapshot]\n+ */\n+operator fun StreamDownloadTask.TaskSnapshot.component1() = bytesTransferred\n+\n+/**\n+ * Destructuring declaration for [StreamDownloadTask.TaskSnapshot] to provide totalByteCount\n+ *\n+ * @return the totalByteCount of the [StreamDownloadTask.TaskSnapshot]\n+ */\n+operator fun StreamDownloadTask.TaskSnapshot.component2() = totalByteCount\n+\n+/**\n+ * Destructuring declaration for [StreamDownloadTask.TaskSnapshot] to provide its stream\n+ *\n+ * @return the stream of the [StreamDownloadTask.TaskSnapshot]\n+ */\n+operator fun StreamDownloadTask.TaskSnapshot.component3() = stream\n+\n+/**\n+ * Destructuring declaration for [FileDownloadTask.TaskSnapshot] to provide bytesTransferred\n+ *\n+ * @return the bytesTransferred of the [FileDownloadTask.TaskSnapshot]\n+ */\n+operator fun FileDownloadTask.TaskSnapshot.component1() = bytesTransferred\n+\n+/**\n+ * Destructuring declaration for [FileDownloadTask.TaskSnapshot] to provide totalByteCount\n+ *\n+ * @return the totalByteCount of the [FileDownloadTask.TaskSnapshot]\n+ */\n+operator fun FileDownloadTask.TaskSnapshot.component2() = totalByteCount\n+\n+/**\n+ * Destructuring declaration for [ListResult] to provide its items\n+ *\n+ * @return the items of the [ListResult]\n+ */\n+operator fun ListResult.component1(): MutableList<StorageReference> = items\n+\n+/**\n+ * Destructuring declaration for [ListResult] to provide its prefixes\n+ *\n+ * @return the prefixes of the [ListResult]\n+ */\n+operator fun ListResult.component2(): MutableList<StorageReference> = prefixes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2259a356f233ebfe85221dac5be5d46fd5b08cdc"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzY4Mjc3OnYy", "diffSide": "RIGHT", "path": "firebase-storage/ktx/src/main/kotlin/com/google/firebase/storage/ktx/Storage.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDo0NToyM1rOG-Rseg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDo0NToyM1rOG-Rseg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk1NDgxMA==", "bodyText": "Add a period at the end of the sentence, here and below.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1644#discussion_r467954810", "createdAt": "2020-08-10T14:45:23Z", "author": {"login": "rlazo"}, "path": "firebase-storage/ktx/src/main/kotlin/com/google/firebase/storage/ktx/Storage.kt", "diffHunk": "@@ -44,6 +49,90 @@ fun storageMetadata(init: StorageMetadata.Builder.() -> Unit): StorageMetadata {\n     return builder.build()\n }\n \n+/**\n+ * Destructuring declaration for [UploadTask.TaskSnapshot] to provide bytesTransferred", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aae2a90585146c1547136ace7d6113401438d64b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzczMTIzOnYy", "diffSide": "RIGHT", "path": "firebase-storage/ktx/src/test/kotlin/com/google/firebase/storage/ktx/StorageTest.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNDo1NTo0NVrOG-SKKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNjowNTowNlrOG-VY8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2MjQwOA==", "bodyText": "You're mocking the final class ListResult, which ends up requiring the use of mock-maker-inline which according to the docs is still incubating.\nFor this particular case, you can create a helper class in the package com.google.firebase.storage that can access  the package private constructor directly. We've already done something similar in\nhttps://github.com/firebase/firebase-android-sdk/blob/master/firebase-firestore/ktx/src/test/java/com/google/firebase/firestore/TestUtil.java", "url": "https://github.com/firebase/firebase-android-sdk/pull/1644#discussion_r467962408", "createdAt": "2020-08-10T14:55:45Z", "author": {"login": "rlazo"}, "path": "firebase-storage/ktx/src/test/kotlin/com/google/firebase/storage/ktx/StorageTest.kt", "diffHunk": "@@ -105,6 +113,64 @@ class StorageTests : BaseTestCase() {\n         assertThat(metadata.getContentType()).isEqualTo(\"text/html\")\n         assertThat(metadata.getCacheControl()).isEqualTo(\"no-cache\")\n     }\n+\n+    @Test\n+    fun `ListResult destructuring declarations work`() {\n+        val mockListResult = Mockito.mock(ListResult::class.java)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aae2a90585146c1547136ace7d6113401438d64b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAxMzgwMg==", "bodyText": "@rlazo the package com.google.firebase.storage already had a TestUtil class, so I added a listResult() method in that same class. PTAL and let me know if that's ok", "url": "https://github.com/firebase/firebase-android-sdk/pull/1644#discussion_r468013802", "createdAt": "2020-08-10T16:02:34Z", "author": {"login": "thatfiredev"}, "path": "firebase-storage/ktx/src/test/kotlin/com/google/firebase/storage/ktx/StorageTest.kt", "diffHunk": "@@ -105,6 +113,64 @@ class StorageTests : BaseTestCase() {\n         assertThat(metadata.getContentType()).isEqualTo(\"text/html\")\n         assertThat(metadata.getCacheControl()).isEqualTo(\"no-cache\")\n     }\n+\n+    @Test\n+    fun `ListResult destructuring declarations work`() {\n+        val mockListResult = Mockito.mock(ListResult::class.java)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2MjQwOA=="}, "originalCommit": {"oid": "aae2a90585146c1547136ace7d6113401438d64b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAxNTM0NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/firebase/firebase-android-sdk/pull/1644#discussion_r468015345", "createdAt": "2020-08-10T16:05:06Z", "author": {"login": "rlazo"}, "path": "firebase-storage/ktx/src/test/kotlin/com/google/firebase/storage/ktx/StorageTest.kt", "diffHunk": "@@ -105,6 +113,64 @@ class StorageTests : BaseTestCase() {\n         assertThat(metadata.getContentType()).isEqualTo(\"text/html\")\n         assertThat(metadata.getCacheControl()).isEqualTo(\"no-cache\")\n     }\n+\n+    @Test\n+    fun `ListResult destructuring declarations work`() {\n+        val mockListResult = Mockito.mock(ListResult::class.java)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk2MjQwOA=="}, "originalCommit": {"oid": "aae2a90585146c1547136ace7d6113401438d64b"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1214, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}