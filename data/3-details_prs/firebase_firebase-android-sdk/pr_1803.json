{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MjEzMjEx", "number": 1803, "title": "Migrate reflective encoder to `FieldDescriptor`.", "bodyText": "The change also adds support for @ExtraPropertys and @Ignore.", "createdAt": "2020-07-22T16:04:55Z", "url": "https://github.com/firebase/firebase-android-sdk/pull/1803", "merged": true, "mergeCommit": {"oid": "d96fc24605469a33b931d56beeafc73128b7a510"}, "closed": true, "closedAt": "2020-07-22T19:00:28Z", "author": {"login": "vkryachko"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3dE1vgH2gAyNDU1MjEzMjExOmE4ZTc3YzYwMWZkMzhlYTY3MmE4NDFhM2RjNTYwNTUyZmZlN2MzNDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3e3T6gH2gAyNDU1MjEzMjExOmNiN2NhODQxYzkwYzdmMjNmMzljZTE5ZGZlOTc2ZTg0ZWEyMzM5Y2Q=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a8e77c601fd38ea672a841a3dc560552ffe7c344", "author": {"user": {"login": "vkryachko", "name": "Vladimir Kryachko"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/a8e77c601fd38ea672a841a3dc560552ffe7c344", "committedDate": "2020-07-22T16:04:27Z", "message": "Migrate reflective encoder to `FieldDescriptor`.\n\nThe change also adds support for `@ExtraProperty`s and `@Ignore`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3f2757a702b06676e040562cf2bff6e9e5ba991", "author": {"user": {"login": "vkryachko", "name": "Vladimir Kryachko"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/d3f2757a702b06676e040562cf2bff6e9e5ba991", "committedDate": "2020-07-22T16:16:55Z", "message": "Fix errorprone warnings."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTUwNjE0", "url": "https://github.com/firebase/firebase-android-sdk/pull/1803#pullrequestreview-453550614", "createdAt": "2020-07-22T17:51:17Z", "commit": {"oid": "d3f2757a702b06676e040562cf2bff6e9e5ba991"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1MToxN1rOG1tpDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1MToxN1rOG1tpDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NTUwMA==", "bodyText": "wondering what would be the use case of LinkedHashMap?  are we going to assume the decoded json order to be associated with its getter methods?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1803#discussion_r458975500", "createdAt": "2020-07-22T17:51:17Z", "author": {"login": "James201311"}, "path": "encoders/firebase-encoders-reflective/src/main/java/com/google/firebase/encoders/reflective/ReflectiveObjectEncoderProvider.java", "diffHunk": "@@ -63,26 +68,48 @@ public void encode(@Nullable Object obj, @NonNull ObjectEncoderContext ctx) thro\n   @NonNull\n   @Override\n   public <T> ObjectEncoder<T> get(@NonNull Class<T> type) {\n-    Map<String, EncodingDescriptor> fields = new HashMap<>();\n+    Map<FieldDescriptor, EncodingDescriptor> fields = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3f2757a702b06676e040562cf2bff6e9e5ba991"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTUyMTIy", "url": "https://github.com/firebase/firebase-android-sdk/pull/1803#pullrequestreview-453552122", "createdAt": "2020-07-22T17:53:16Z", "commit": {"oid": "d3f2757a702b06676e040562cf2bff6e9e5ba991"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1MzoxNlrOG1tuDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzo1MzoxNlrOG1tuDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3Njc4Mw==", "bodyText": "if we have Annotation Processor implemented, should we just check the annotation type is registered? in that case, we may not need ExtraProperty?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1803#discussion_r458976783", "createdAt": "2020-07-22T17:53:16Z", "author": {"login": "James201311"}, "path": "encoders/firebase-encoders-reflective/src/main/java/com/google/firebase/encoders/reflective/ReflectiveObjectEncoderProvider.java", "diffHunk": "@@ -63,26 +68,48 @@ public void encode(@Nullable Object obj, @NonNull ObjectEncoderContext ctx) thro\n   @NonNull\n   @Override\n   public <T> ObjectEncoder<T> get(@NonNull Class<T> type) {\n-    Map<String, EncodingDescriptor> fields = new HashMap<>();\n+    Map<FieldDescriptor, EncodingDescriptor> fields = new LinkedHashMap<>();\n     for (Method method : type.getMethods()) {\n       if (method.isAnnotationPresent(Encodable.Ignore.class)) {\n         continue;\n       }\n \n       Encodable.Field fieldAnnotation = method.getAnnotation(Encodable.Field.class);\n-      String getter = toGetterName(method, fieldAnnotation);\n-      if (getter != null) {\n-        method.setAccessible(true);\n-        fields.put(\n-            getter,\n-            new EncodingDescriptor(fieldAnnotation != null && fieldAnnotation.inline(), method));\n+      FieldDescriptor descriptor = toFieldDescriptor(method, fieldAnnotation);\n+      if (descriptor == null) {\n+        continue;\n       }\n+      method.setAccessible(true);\n+\n+      fields.put(\n+          descriptor,\n+          new EncodingDescriptor(fieldAnnotation != null && fieldAnnotation.inline(), method));\n     }\n     @SuppressWarnings(\"unchecked\")\n     ObjectEncoder<T> encoder = (ObjectEncoder<T>) new ReflectiveObjectEncoderImpl(fields);\n     return encoder;\n   }\n \n+  @Nullable\n+  private static FieldDescriptor toFieldDescriptor(Method method, Encodable.Field fieldAnnotation) {\n+    if (method.getAnnotation(Encodable.Ignore.class) != null) {\n+      return null;\n+    }\n+\n+    String name = toGetterName(method, fieldAnnotation);\n+    if (name == null) {\n+      return null;\n+    }\n+    FieldDescriptor.Builder builder = FieldDescriptor.builder(name);\n+    for (Annotation annotation : method.getAnnotations()) {\n+      if (!annotation.annotationType().isAnnotationPresent(ExtraProperty.class)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3f2757a702b06676e040562cf2bff6e9e5ba991"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTUyNjM3", "url": "https://github.com/firebase/firebase-android-sdk/pull/1803#pullrequestreview-453552637", "createdAt": "2020-07-22T17:53:56Z", "commit": {"oid": "d3f2757a702b06676e040562cf2bff6e9e5ba991"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb7ca841c90c7f23f39ce19dfe976e84ea2339cd", "author": {"user": {"login": "vkryachko", "name": "Vladimir Kryachko"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/cb7ca841c90c7f23f39ce19dfe976e84ea2339cd", "committedDate": "2020-07-22T18:09:29Z", "message": "Address comments."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2592, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}