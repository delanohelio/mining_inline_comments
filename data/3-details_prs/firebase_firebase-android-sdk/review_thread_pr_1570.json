{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NzIwNzk2", "number": 1570, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDo1MToyMlrOD9jHmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo0NjoxN1rOD9nhSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODY1MTEzOnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/FirebaseInstallations.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDo1MToyMlrOGXHFVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTozNjo0N1rOGXITpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4NjQ4NQ==", "bodyText": "This will create a new fid and delete it. I think it is better the way it was.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1570#discussion_r426886485", "createdAt": "2020-05-18T20:51:22Z", "author": {"login": "fredquintana"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/FirebaseInstallations.java", "diffHunk": "@@ -520,7 +509,7 @@ private PersistedInstallationEntry fetchAuthTokenFromServer(\n    * storage.\n    */\n   private Void deleteFirebaseInstallationId() throws FirebaseInstallationsException, IOException {\n-    PersistedInstallationEntry entry = persistedInstallation.readPersistedInstallationEntryValue();\n+    PersistedInstallationEntry entry = getPrefsWithGeneratedIdMultiProcessSafe();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0ff2995443d4fbcb59155a989622b0ae4df19c3"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg5MTkwMg==", "bodyText": "Reason for this: If there is one thread that is triggering getId or getToken and another triggering delete. If the delete read is not multi-process safe, and tries to read the same data locked by other thread acquiring CrossProcessLock - could lead to OverLappingFileLockException", "url": "https://github.com/firebase/firebase-android-sdk/pull/1570#discussion_r426891902", "createdAt": "2020-05-18T21:03:27Z", "author": {"login": "ankitaj224"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/FirebaseInstallations.java", "diffHunk": "@@ -520,7 +509,7 @@ private PersistedInstallationEntry fetchAuthTokenFromServer(\n    * storage.\n    */\n   private Void deleteFirebaseInstallationId() throws FirebaseInstallationsException, IOException {\n-    PersistedInstallationEntry entry = persistedInstallation.readPersistedInstallationEntryValue();\n+    PersistedInstallationEntry entry = getPrefsWithGeneratedIdMultiProcessSafe();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4NjQ4NQ=="}, "originalCommit": {"oid": "f0ff2995443d4fbcb59155a989622b0ae4df19c3"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNjUzNQ==", "bodyText": "As discussed offline: created and used cross-process safe read prefs method.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1570#discussion_r426906535", "createdAt": "2020-05-18T21:36:47Z", "author": {"login": "ankitaj224"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/FirebaseInstallations.java", "diffHunk": "@@ -520,7 +509,7 @@ private PersistedInstallationEntry fetchAuthTokenFromServer(\n    * storage.\n    */\n   private Void deleteFirebaseInstallationId() throws FirebaseInstallationsException, IOException {\n-    PersistedInstallationEntry entry = persistedInstallation.readPersistedInstallationEntryValue();\n+    PersistedInstallationEntry entry = getPrefsWithGeneratedIdMultiProcessSafe();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4NjQ4NQ=="}, "originalCommit": {"oid": "f0ff2995443d4fbcb59155a989622b0ae4df19c3"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODY1ODg2OnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/FirebaseInstallations.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDo1NDoxOVrOGXHKYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTo0MDo0M1rOGXIaaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4Nzc3Nw==", "bodyText": "I see that you want to emulate the old behavior of this being serialized on a sinle thread, but I don't know of adding an additional synchronization block is the right way to go.\nFor one thing, it isn't multi-process safe.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1570#discussion_r426887777", "createdAt": "2020-05-18T20:54:19Z", "author": {"login": "fredquintana"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/FirebaseInstallations.java", "diffHunk": "@@ -213,9 +217,11 @@ String getName() {\n   @Override\n   public Task<String> getId() {\n     preConditionChecks();\n-    Task<String> task = addGetIdListener();\n-    backgroundExecutor.execute(this::doGetId);\n-    return task;\n+    synchronized (lockGetFid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0ff2995443d4fbcb59155a989622b0ae4df19c3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4OTE5NQ==", "bodyText": "Actually, everything doGetId() does it already thread and process safe, so this doesn't need its own protection, does it?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1570#discussion_r426889195", "createdAt": "2020-05-18T20:57:28Z", "author": {"login": "fredquintana"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/FirebaseInstallations.java", "diffHunk": "@@ -213,9 +217,11 @@ String getName() {\n   @Override\n   public Task<String> getId() {\n     preConditionChecks();\n-    Task<String> task = addGetIdListener();\n-    backgroundExecutor.execute(this::doGetId);\n-    return task;\n+    synchronized (lockGetFid) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4Nzc3Nw=="}, "originalCommit": {"oid": "f0ff2995443d4fbcb59155a989622b0ae4df19c3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwODI2Nw==", "bodyText": "I missed that local variables are thread safe. PTAL", "url": "https://github.com/firebase/firebase-android-sdk/pull/1570#discussion_r426908267", "createdAt": "2020-05-18T21:40:43Z", "author": {"login": "ankitaj224"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/FirebaseInstallations.java", "diffHunk": "@@ -213,9 +217,11 @@ String getName() {\n   @Override\n   public Task<String> getId() {\n     preConditionChecks();\n-    Task<String> task = addGetIdListener();\n-    backgroundExecutor.execute(this::doGetId);\n-    return task;\n+    synchronized (lockGetFid) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4Nzc3Nw=="}, "originalCommit": {"oid": "f0ff2995443d4fbcb59155a989622b0ae4df19c3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTM0MDY2OnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/FirebaseInstallations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjoyODoxNFrOGXNpJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjoyODoxNFrOGXNpJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5Mzk1Ng==", "bodyText": "How about this comment:\n/** Thread level synchronization for reading FID from disk. */", "url": "https://github.com/firebase/firebase-android-sdk/pull/1570#discussion_r426993956", "createdAt": "2020-05-19T02:28:14Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/FirebaseInstallations.java", "diffHunk": "@@ -73,6 +73,10 @@\n \n   /* used for thread-level synchronization of generating and persisting fids */\n   private static final Object lockGenerateFid = new Object();\n+\n+  /* used for thread-level synchronization of getting a fid. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0ff2995443d4fbcb59155a989622b0ae4df19c3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTM2MzQ0OnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/FirebaseInstallations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo0MDozNlrOGXN2cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo0MDozNlrOGXN2cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5NzM2Mg==", "bodyText": "If we do the cachedFid solution, then it has to happen outside of the synchronized block of course.\nThe setting of cachedFid could happen anywhere where you think it makes sense.\nif (null != cachedFid) {\n  return cachedFid\n}\nsynchronized (...)", "url": "https://github.com/firebase/firebase-android-sdk/pull/1570#discussion_r426997362", "createdAt": "2020-05-19T02:40:36Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/FirebaseInstallations.java", "diffHunk": "@@ -213,9 +217,11 @@ String getName() {\n   @Override\n   public Task<String> getId() {\n     preConditionChecks();\n-    Task<String> task = addGetIdListener();\n-    backgroundExecutor.execute(this::doGetId);\n-    return task;\n+    synchronized (lockGetFid) {\n+      TaskCompletionSource<String> taskCompletionSource = new TaskCompletionSource<>();\n+      taskCompletionSource.trySetResult(doGetId());\n+      return taskCompletionSource.getTask();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0ff2995443d4fbcb59155a989622b0ae4df19c3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTM3MjI2OnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/FirebaseInstallations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo0NjoxN1rOGXN78Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMjo0NjoxN1rOGXN78Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk5ODc2OQ==", "bodyText": "This method name is misleading.\nHow about #doNetworkCallIfNecessary?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1570#discussion_r426998769", "createdAt": "2020-05-19T02:46:17Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/FirebaseInstallations.java", "diffHunk": "@@ -295,16 +288,12 @@ private void triggerOnException(PersistedInstallationEntry prefs, Exception exce\n     }\n   }\n \n-  private final void doGetId() {\n-    doRegistrationInternal(false);\n-  }\n-\n-  private final void doGetAuthTokenWithoutForceRefresh() {\n-    doRegistrationInternal(false);\n-  }\n-\n-  private final void doGetAuthTokenForceRefresh() {\n-    doRegistrationInternal(true);\n+  private String doGetId() {\n+    PersistedInstallationEntry prefs = getPrefsWithGeneratedIdMultiProcessSafe();\n+    // Execute network calls (CreateInstallations) to the FIS Servers on a separate executor\n+    // i.e networkExecutor\n+    networkExecutor.execute(() -> doNetworkCall(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0ff2995443d4fbcb59155a989622b0ae4df19c3"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1366, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}