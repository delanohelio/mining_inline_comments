{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1OTUxMTA1", "number": 1672, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjowNjowNlrOEGar7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo1MTozM1rOEHH6PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTY0MTQxOnYy", "diffSide": "RIGHT", "path": "firebase-common/src/androidTest/java/com/google/firebase/FirebaseAppTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjowNjowNlrOGlMyZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoxMTo1MFrOGl2dMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2MDAwNw==", "bodyText": "I'm gonna guess I have a bad IDE setting?  I used google-java-format", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r441660007", "createdAt": "2020-06-17T16:06:06Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/androidTest/java/com/google/firebase/FirebaseAppTest.java", "diffHunk": "@@ -56,11 +55,19 @@\n import java.util.List;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.stubbing.Answer;\n+\n+import static com.google.android.gms.common.util.Base64Utils.decodeUrlSafeNoPadding;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef8a4b981789119e6973d7be3a0f7eb2263d6c4"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI4ODM5NA==", "bodyText": "Did you run google-java-format from the IDE, if so try ./gradlew gJF as the ide plugin does not affect imports.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442288394", "createdAt": "2020-06-18T14:52:41Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/androidTest/java/com/google/firebase/FirebaseAppTest.java", "diffHunk": "@@ -56,11 +55,19 @@\n import java.util.List;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.stubbing.Answer;\n+\n+import static com.google.android.gms.common.util.Base64Utils.decodeUrlSafeNoPadding;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2MDAwNw=="}, "originalCommit": {"oid": "9ef8a4b981789119e6973d7be3a0f7eb2263d6c4"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0MjcwNA==", "bodyText": "Thanks for the pointer to that task.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442342704", "createdAt": "2020-06-18T16:11:50Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/androidTest/java/com/google/firebase/FirebaseAppTest.java", "diffHunk": "@@ -56,11 +55,19 @@\n import java.util.List;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.stubbing.Answer;\n+\n+import static com.google.android.gms.common.util.Base64Utils.decodeUrlSafeNoPadding;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY2MDAwNw=="}, "originalCommit": {"oid": "9ef8a4b981789119e6973d7be3a0f7eb2263d6c4"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTUyODI3OnYy", "diffSide": "RIGHT", "path": "firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulators.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDo1MjoxOVrOGlzH9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoxMTozMlrOGl2cdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI4ODExOQ==", "bodyText": "@vkryachko if these were string constants rather than an enum would that help?  Then I don't think all BaaS would have to be released after each emulator is released, only common and the SDK which corresponds to the new emulator.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442288119", "createdAt": "2020-06-18T14:52:19Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulators.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import com.google.android.gms.common.annotation.KeepForSdk;\n+\n+/**\n+ * Enum for Firebase services that can be emulated using the Firebase Emulator Suite.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @see EmulatorSettings\n+ * @see EmulatedServiceSettings\n+ * @hide\n+ */\n+@KeepForSdk\n+public enum FirebaseEmulators {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ca25d48bb598c471b3a253fdee570cc2fdcc847"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzMzg5OQ==", "bodyText": "@samtstern imo it would, although additionally - as I mentioned below - ideally those constants should not live inside common either but rather in their respective sdks.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442333899", "createdAt": "2020-06-18T15:58:22Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulators.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import com.google.android.gms.common.annotation.KeepForSdk;\n+\n+/**\n+ * Enum for Firebase services that can be emulated using the Firebase Emulator Suite.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @see EmulatorSettings\n+ * @see EmulatedServiceSettings\n+ * @hide\n+ */\n+@KeepForSdk\n+public enum FirebaseEmulators {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI4ODExOQ=="}, "originalCommit": {"oid": "1ca25d48bb598c471b3a253fdee570cc2fdcc847"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0MjUxNw==", "bodyText": "Ah ok your suggestion below is a good one!", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442342517", "createdAt": "2020-06-18T16:11:32Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulators.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import com.google.android.gms.common.annotation.KeepForSdk;\n+\n+/**\n+ * Enum for Firebase services that can be emulated using the Firebase Emulator Suite.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @see EmulatorSettings\n+ * @see EmulatedServiceSettings\n+ * @hide\n+ */\n+@KeepForSdk\n+public enum FirebaseEmulators {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI4ODExOQ=="}, "originalCommit": {"oid": "1ca25d48bb598c471b3a253fdee570cc2fdcc847"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTUzMzEyOnYy", "diffSide": "RIGHT", "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDo1MzoxOVrOGlzLBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDo1MzoxOVrOGlzLBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI4ODkwMA==", "bodyText": "nit: @KeepForSdk is not needed since we don't proguard github SDKs, here and throughout.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442288900", "createdAt": "2020-06-18T14:53:19Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "diffHunk": "@@ -142,6 +148,20 @@ public FirebaseOptions getOptions() {\n     return options;\n   }\n \n+  /**\n+   * Returns the specified {@link EmulatorSettings}.\n+   *\n+   * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+   *\n+   * @hide\n+   */\n+  @KeepForSdk", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ca25d48bb598c471b3a253fdee570cc2fdcc847"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTU3Njk2OnYy", "diffSide": "RIGHT", "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTowMzowN1rOGlzmqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoxNjo0OFrOGl2pmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NTk3Nw==", "bodyText": "Would it make sense to make it @NotNull and return a default \"empty\" settings object. It should help with the following:\n\nMake it more null-safe and simplify integrating SDKs as they won't have to deal with null twice as I can see in the implementation below.\n*iiuc it will help make the \"set-after-use\" logic below more safe, i.e. with the null case it seems possible to first initialize firestore and then call enableEmulators()\n\nwdyt?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442295977", "createdAt": "2020-06-18T15:03:07Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "diffHunk": "@@ -142,6 +148,20 @@ public FirebaseOptions getOptions() {\n     return options;\n   }\n \n+  /**\n+   * Returns the specified {@link EmulatorSettings}.\n+   *\n+   * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+   *\n+   * @hide\n+   */\n+  @KeepForSdk\n+  @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ca25d48bb598c471b3a253fdee570cc2fdcc847"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0NTg4Mw==", "bodyText": "Yes great idea.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442345883", "createdAt": "2020-06-18T16:16:48Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "diffHunk": "@@ -142,6 +148,20 @@ public FirebaseOptions getOptions() {\n     return options;\n   }\n \n+  /**\n+   * Returns the specified {@link EmulatorSettings}.\n+   *\n+   * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+   *\n+   * @hide\n+   */\n+  @KeepForSdk\n+  @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NTk3Nw=="}, "originalCommit": {"oid": "1ca25d48bb598c471b3a253fdee570cc2fdcc847"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTU4ODgxOnYy", "diffSide": "RIGHT", "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTowNjowNlrOGlzuTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0Mzo0MlrOGl3sEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NzkzNA==", "bodyText": "nit: consider making a copy of the map, otherwise if a reference to the builder is kept around, one can modify the underlying map unintentionally.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442297934", "createdAt": "2020-06-18T15:06:06Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.google.android.gms.common.annotation.KeepForSdk;\n+import com.google.firebase.components.Preconditions;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+@KeepForSdk\n+public class EmulatorSettings {\n+\n+  public static final class Builder {\n+\n+    private final Map<FirebaseEmulators, EmulatedServiceSettings> settingsMap = new HashMap<>();\n+\n+    /** Constructs an empty builder. */\n+    public Builder() {}\n+\n+    /**\n+     * Specify the emulator settings for a single service.\n+     *\n+     * @param emulator the emulated service.\n+     * @param settings the emulator settings.\n+     * @return the builder, for chaining.\n+     */\n+    @NonNull\n+    public Builder addEmulatedService(\n+        @NonNull FirebaseEmulators emulator, @NonNull EmulatedServiceSettings settings) {\n+      Preconditions.checkState(\n+          !settingsMap.containsKey(emulator),\n+          \"Cannot call addEmulatedService twice for \" + emulator.toString());\n+      this.settingsMap.put(emulator, settings);\n+      return this;\n+    }\n+\n+    @NonNull\n+    public EmulatorSettings build() {\n+      return new EmulatorSettings(settingsMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ca25d48bb598c471b3a253fdee570cc2fdcc847"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0NjQxMQ==", "bodyText": "That is done in the EmulatorSettings() constructor with unmodifiableMap", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442346411", "createdAt": "2020-06-18T16:17:37Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.google.android.gms.common.annotation.KeepForSdk;\n+import com.google.firebase.components.Preconditions;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+@KeepForSdk\n+public class EmulatorSettings {\n+\n+  public static final class Builder {\n+\n+    private final Map<FirebaseEmulators, EmulatedServiceSettings> settingsMap = new HashMap<>();\n+\n+    /** Constructs an empty builder. */\n+    public Builder() {}\n+\n+    /**\n+     * Specify the emulator settings for a single service.\n+     *\n+     * @param emulator the emulated service.\n+     * @param settings the emulator settings.\n+     * @return the builder, for chaining.\n+     */\n+    @NonNull\n+    public Builder addEmulatedService(\n+        @NonNull FirebaseEmulators emulator, @NonNull EmulatedServiceSettings settings) {\n+      Preconditions.checkState(\n+          !settingsMap.containsKey(emulator),\n+          \"Cannot call addEmulatedService twice for \" + emulator.toString());\n+      this.settingsMap.put(emulator, settings);\n+      return this;\n+    }\n+\n+    @NonNull\n+    public EmulatorSettings build() {\n+      return new EmulatorSettings(settingsMap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NzkzNA=="}, "originalCommit": {"oid": "1ca25d48bb598c471b3a253fdee570cc2fdcc847"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0ODc1Nw==", "bodyText": "The problem with unmodifiableMap is that it only a read-only view into the underlying map, so modifications to the underlying map will be seen by the view.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442348757", "createdAt": "2020-06-18T16:21:23Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.google.android.gms.common.annotation.KeepForSdk;\n+import com.google.firebase.components.Preconditions;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+@KeepForSdk\n+public class EmulatorSettings {\n+\n+  public static final class Builder {\n+\n+    private final Map<FirebaseEmulators, EmulatedServiceSettings> settingsMap = new HashMap<>();\n+\n+    /** Constructs an empty builder. */\n+    public Builder() {}\n+\n+    /**\n+     * Specify the emulator settings for a single service.\n+     *\n+     * @param emulator the emulated service.\n+     * @param settings the emulator settings.\n+     * @return the builder, for chaining.\n+     */\n+    @NonNull\n+    public Builder addEmulatedService(\n+        @NonNull FirebaseEmulators emulator, @NonNull EmulatedServiceSettings settings) {\n+      Preconditions.checkState(\n+          !settingsMap.containsKey(emulator),\n+          \"Cannot call addEmulatedService twice for \" + emulator.toString());\n+      this.settingsMap.put(emulator, settings);\n+      return this;\n+    }\n+\n+    @NonNull\n+    public EmulatorSettings build() {\n+      return new EmulatorSettings(settingsMap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NzkzNA=="}, "originalCommit": {"oid": "1ca25d48bb598c471b3a253fdee570cc2fdcc847"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2Mjg5OQ==", "bodyText": "Ah thanks for the clarification, resolved.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442362899", "createdAt": "2020-06-18T16:43:42Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,103 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.google.android.gms.common.annotation.KeepForSdk;\n+import com.google.firebase.components.Preconditions;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+@KeepForSdk\n+public class EmulatorSettings {\n+\n+  public static final class Builder {\n+\n+    private final Map<FirebaseEmulators, EmulatedServiceSettings> settingsMap = new HashMap<>();\n+\n+    /** Constructs an empty builder. */\n+    public Builder() {}\n+\n+    /**\n+     * Specify the emulator settings for a single service.\n+     *\n+     * @param emulator the emulated service.\n+     * @param settings the emulator settings.\n+     * @return the builder, for chaining.\n+     */\n+    @NonNull\n+    public Builder addEmulatedService(\n+        @NonNull FirebaseEmulators emulator, @NonNull EmulatedServiceSettings settings) {\n+      Preconditions.checkState(\n+          !settingsMap.containsKey(emulator),\n+          \"Cannot call addEmulatedService twice for \" + emulator.toString());\n+      this.settingsMap.put(emulator, settings);\n+      return this;\n+    }\n+\n+    @NonNull\n+    public EmulatorSettings build() {\n+      return new EmulatorSettings(settingsMap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NzkzNA=="}, "originalCommit": {"oid": "1ca25d48bb598c471b3a253fdee570cc2fdcc847"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTYyMjY2OnYy", "diffSide": "RIGHT", "path": "firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulators.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxNDoxNVrOGl0Dcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxNDoxNVrOGl0Dcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMzM0Ng==", "bodyText": "While making this an enum makes the API simple and type safe, it couples firebase-common to all baas sdks.\nTo avoid the coupling I suggest to either resort to using Strings with each string defined as a constant on the target SDK, i.e. FirebaseFirestore.EMULATOR = \"firestore\" or something.\nOr wrapping that string in a class here in common like data class Emulator(serviceName: String) and initializing the SDK constant with it instead of the string.\nA potential additional advantage of this is that one can only configure an emulator for say firestore if it's actually present in their app.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442303346", "createdAt": "2020-06-18T15:14:15Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulators.java", "diffHunk": "@@ -0,0 +1,34 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import com.google.android.gms.common.annotation.KeepForSdk;\n+\n+/**\n+ * Enum for Firebase services that can be emulated using the Firebase Emulator Suite.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @see EmulatorSettings\n+ * @see EmulatedServiceSettings\n+ * @hide\n+ */\n+@KeepForSdk\n+public enum FirebaseEmulators {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ca25d48bb598c471b3a253fdee570cc2fdcc847"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTYzNzA4OnYy", "diffSide": "RIGHT", "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxNzo0MlrOGl0M0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0NDoxM1rOGl3tNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwNTc0Ng==", "bodyText": "How will this interact with firestore's terminate()? afaicr one can terminate one instance of firestore at which point the call to FirebaseFirestore#getInstance() will create a new firestore instance, should we allow the following sequence of calls?\nfirestore.terminate();\napp.updateFirestoresEmulator();\nFirebase.firestore.use();", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442305746", "createdAt": "2020-06-18T15:17:42Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "diffHunk": "@@ -305,6 +325,28 @@ public static FirebaseApp initializeApp(\n     return firebaseApp;\n   }\n \n+  /**\n+   * Specify which services should access local emulators for this FirebaseApp instance.\n+   *\n+   * <p>For example, if the {@link EmulatorSettings} contain {@link\n+   * com.google.firebase.emulators.EmulatedServiceSettings} for {@link\n+   * com.google.firebase.emulators.FirebaseEmulators#FIRESTORE}, then calls to Cloud Firestore will\n+   * communicate with the emulator rather than production.\n+   *\n+   * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+   *\n+   * @param emulatorSettings the emulator settings for all services.\n+   * @hide\n+   */\n+  @KeepForSdk\n+  public void enableEmulators(@NonNull EmulatorSettings emulatorSettings) {\n+    checkNotDeleted();\n+    Preconditions.checkState(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ca25d48bb598c471b3a253fdee570cc2fdcc847"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0NzQ2MQ==", "bodyText": "Thanks for calling this out, I resolved all the other comments since they were straightforward but I will have to look into this one more deeply.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442347461", "createdAt": "2020-06-18T16:19:16Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "diffHunk": "@@ -305,6 +325,28 @@ public static FirebaseApp initializeApp(\n     return firebaseApp;\n   }\n \n+  /**\n+   * Specify which services should access local emulators for this FirebaseApp instance.\n+   *\n+   * <p>For example, if the {@link EmulatorSettings} contain {@link\n+   * com.google.firebase.emulators.EmulatedServiceSettings} for {@link\n+   * com.google.firebase.emulators.FirebaseEmulators#FIRESTORE}, then calls to Cloud Firestore will\n+   * communicate with the emulator rather than production.\n+   *\n+   * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+   *\n+   * @param emulatorSettings the emulator settings for all services.\n+   * @hide\n+   */\n+  @KeepForSdk\n+  public void enableEmulators(@NonNull EmulatorSettings emulatorSettings) {\n+    checkNotDeleted();\n+    Preconditions.checkState(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwNTc0Ng=="}, "originalCommit": {"oid": "1ca25d48bb598c471b3a253fdee570cc2fdcc847"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM0OTgwNQ==", "bodyText": "Ok actually I do not want to allow that sequence of calls.  One of the main reasons for this is to make sure that app developers can reason about their emulation settings at a single point before any Firebase service has done any communication.\nIf you call terminate() the settings should still apply.  If you want to nuke them you'll need to call FirebaseApp#delete() and then make a new app.\nWDYT?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442349805", "createdAt": "2020-06-18T16:23:11Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "diffHunk": "@@ -305,6 +325,28 @@ public static FirebaseApp initializeApp(\n     return firebaseApp;\n   }\n \n+  /**\n+   * Specify which services should access local emulators for this FirebaseApp instance.\n+   *\n+   * <p>For example, if the {@link EmulatorSettings} contain {@link\n+   * com.google.firebase.emulators.EmulatedServiceSettings} for {@link\n+   * com.google.firebase.emulators.FirebaseEmulators#FIRESTORE}, then calls to Cloud Firestore will\n+   * communicate with the emulator rather than production.\n+   *\n+   * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+   *\n+   * @param emulatorSettings the emulator settings for all services.\n+   * @hide\n+   */\n+  @KeepForSdk\n+  public void enableEmulators(@NonNull EmulatorSettings emulatorSettings) {\n+    checkNotDeleted();\n+    Preconditions.checkState(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwNTc0Ng=="}, "originalCommit": {"oid": "1ca25d48bb598c471b3a253fdee570cc2fdcc847"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1MzMxNw==", "bodyText": "That's a good point and sgtm. You may want to confirm this behavior with firestore folks though", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442353317", "createdAt": "2020-06-18T16:28:43Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "diffHunk": "@@ -305,6 +325,28 @@ public static FirebaseApp initializeApp(\n     return firebaseApp;\n   }\n \n+  /**\n+   * Specify which services should access local emulators for this FirebaseApp instance.\n+   *\n+   * <p>For example, if the {@link EmulatorSettings} contain {@link\n+   * com.google.firebase.emulators.EmulatedServiceSettings} for {@link\n+   * com.google.firebase.emulators.FirebaseEmulators#FIRESTORE}, then calls to Cloud Firestore will\n+   * communicate with the emulator rather than production.\n+   *\n+   * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+   *\n+   * @param emulatorSettings the emulator settings for all services.\n+   * @hide\n+   */\n+  @KeepForSdk\n+  public void enableEmulators(@NonNull EmulatorSettings emulatorSettings) {\n+    checkNotDeleted();\n+    Preconditions.checkState(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwNTc0Ng=="}, "originalCommit": {"oid": "1ca25d48bb598c471b3a253fdee570cc2fdcc847"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MzE5MQ==", "bodyText": "Will do during the Firestore PR.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442363191", "createdAt": "2020-06-18T16:44:13Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "diffHunk": "@@ -305,6 +325,28 @@ public static FirebaseApp initializeApp(\n     return firebaseApp;\n   }\n \n+  /**\n+   * Specify which services should access local emulators for this FirebaseApp instance.\n+   *\n+   * <p>For example, if the {@link EmulatorSettings} contain {@link\n+   * com.google.firebase.emulators.EmulatedServiceSettings} for {@link\n+   * com.google.firebase.emulators.FirebaseEmulators#FIRESTORE}, then calls to Cloud Firestore will\n+   * communicate with the emulator rather than production.\n+   *\n+   * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+   *\n+   * @param emulatorSettings the emulator settings for all services.\n+   * @hide\n+   */\n+  @KeepForSdk\n+  public void enableEmulators(@NonNull EmulatorSettings emulatorSettings) {\n+    checkNotDeleted();\n+    Preconditions.checkState(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwNTc0Ng=="}, "originalCommit": {"oid": "1ca25d48bb598c471b3a253fdee570cc2fdcc847"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjQ0MDY2OnYy", "diffSide": "RIGHT", "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1Nzo1OVrOGl8Pug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMToxMDozMFrOGmAVGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzU2Mg==", "bodyText": "I really dislike Builders... but is there a precedent for this style of \"compact\" builders? I would expect no constructor arguments, a newBuilder()method  on  EmulatedServiceSettings and setHost() and setPort() methods.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442437562", "createdAt": "2020-06-18T18:57:59Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Settings to connect a single Firebase service to a local emulator.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see EmulatorSettings\n+ * @hide\n+ */\n+public class EmulatedServiceSettings {\n+\n+  public static final class Builder {\n+\n+    private final String host;\n+    private final int port;\n+\n+    /**\n+     * Create a new EmulatedServiceSettings builder.\n+     *\n+     * @param host the host where the local emulator is running. If you want to access 'localhost'\n+     *     from an Android Emulator use '10.0.2.2' instead.\n+     * @param port the port where the local emulator is running.\n+     */\n+    public Builder(@NonNull String host, int port) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0ODI3NA==", "bodyText": "I've always been told that required arguments should be in the Builder constructor.  The awkward thing here is that the Builder has no other methods at all but in the API discussion it was clear that we may want to extend this object one day (setInstance() maybe or setCredentials as you suggest below) so having a Builder now rather than a plain constructor is more future proof.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442448274", "createdAt": "2020-06-18T19:19:19Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Settings to connect a single Firebase service to a local emulator.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see EmulatorSettings\n+ * @hide\n+ */\n+public class EmulatedServiceSettings {\n+\n+  public static final class Builder {\n+\n+    private final String host;\n+    private final int port;\n+\n+    /**\n+     * Create a new EmulatedServiceSettings builder.\n+     *\n+     * @param host the host where the local emulator is running. If you want to access 'localhost'\n+     *     from an Android Emulator use '10.0.2.2' instead.\n+     * @param port the port where the local emulator is running.\n+     */\n+    public Builder(@NonNull String host, int port) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzU2Mg=="}, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1ODU3NA==", "bodyText": "+1 on required parameters as builder constructor parameters\nAlthough to the point of being future-proof: it seems that it's possible to be future-proof by not having a builder at all at this point and expose the constructor directly, then add the builder when(and most importantly if) needed and tell people to use the builder for additional functionality. wdyt?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442458574", "createdAt": "2020-06-18T19:38:12Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Settings to connect a single Firebase service to a local emulator.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see EmulatorSettings\n+ * @hide\n+ */\n+public class EmulatedServiceSettings {\n+\n+  public static final class Builder {\n+\n+    private final String host;\n+    private final int port;\n+\n+    /**\n+     * Create a new EmulatedServiceSettings builder.\n+     *\n+     * @param host the host where the local emulator is running. If you want to access 'localhost'\n+     *     from an Android Emulator use '10.0.2.2' instead.\n+     * @param port the port where the local emulator is running.\n+     */\n+    public Builder(@NonNull String host, int port) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzU2Mg=="}, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5NDI1MA==", "bodyText": "I am open to whatever you think.  I guess let's do the shorter thing now and do the builder later.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442494250", "createdAt": "2020-06-18T20:49:17Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Settings to connect a single Firebase service to a local emulator.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see EmulatorSettings\n+ * @hide\n+ */\n+public class EmulatedServiceSettings {\n+\n+  public static final class Builder {\n+\n+    private final String host;\n+    private final int port;\n+\n+    /**\n+     * Create a new EmulatedServiceSettings builder.\n+     *\n+     * @param host the host where the local emulator is running. If you want to access 'localhost'\n+     *     from an Android Emulator use '10.0.2.2' instead.\n+     * @param port the port where the local emulator is running.\n+     */\n+    public Builder(@NonNull String host, int port) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzU2Mg=="}, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5NTMzMg==", "bodyText": "Builder removed.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442495332", "createdAt": "2020-06-18T20:51:26Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Settings to connect a single Firebase service to a local emulator.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see EmulatorSettings\n+ * @hide\n+ */\n+public class EmulatedServiceSettings {\n+\n+  public static final class Builder {\n+\n+    private final String host;\n+    private final int port;\n+\n+    /**\n+     * Create a new EmulatedServiceSettings builder.\n+     *\n+     * @param host the host where the local emulator is running. If you want to access 'localhost'\n+     *     from an Android Emulator use '10.0.2.2' instead.\n+     * @param port the port where the local emulator is running.\n+     */\n+    public Builder(@NonNull String host, int port) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzU2Mg=="}, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5NTg2Ng==", "bodyText": "Whatever we decide has to go through api review, has it happened yet btw?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442495866", "createdAt": "2020-06-18T20:52:39Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Settings to connect a single Firebase service to a local emulator.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see EmulatorSettings\n+ * @hide\n+ */\n+public class EmulatedServiceSettings {\n+\n+  public static final class Builder {\n+\n+    private final String host;\n+    private final int port;\n+\n+    /**\n+     * Create a new EmulatedServiceSettings builder.\n+     *\n+     * @param host the host where the local emulator is running. If you want to access 'localhost'\n+     *     from an Android Emulator use '10.0.2.2' instead.\n+     * @param port the port where the local emulator is running.\n+     */\n+    public Builder(@NonNull String host, int port) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzU2Mg=="}, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5NzkyMA==", "bodyText": "Yes the API (go/firebase-emulator-connection-api) was approved before I started this PR.\nIMO we don't have to go back through API review to change a Builder to a non-Builder, especially since you are the Android platform approver.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442497920", "createdAt": "2020-06-18T20:56:46Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Settings to connect a single Firebase service to a local emulator.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see EmulatorSettings\n+ * @hide\n+ */\n+public class EmulatedServiceSettings {\n+\n+  public static final class Builder {\n+\n+    private final String host;\n+    private final int port;\n+\n+    /**\n+     * Create a new EmulatedServiceSettings builder.\n+     *\n+     * @param host the host where the local emulator is running. If you want to access 'localhost'\n+     *     from an Android Emulator use '10.0.2.2' instead.\n+     * @param port the port where the local emulator is running.\n+     */\n+    public Builder(@NonNull String host, int port) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzU2Mg=="}, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwNDQ3NA==", "bodyText": "Just to clarify, I don't have a vote in the API council, I just offer my recommendations :)\nThat said, it would not hurt to drop an email to your api review thread, but it's definitely up to you.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442504474", "createdAt": "2020-06-18T21:10:30Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Settings to connect a single Firebase service to a local emulator.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see EmulatorSettings\n+ * @hide\n+ */\n+public class EmulatedServiceSettings {\n+\n+  public static final class Builder {\n+\n+    private final String host;\n+    private final int port;\n+\n+    /**\n+     * Create a new EmulatedServiceSettings builder.\n+     *\n+     * @param host the host where the local emulator is running. If you want to access 'localhost'\n+     *     from an Android Emulator use '10.0.2.2' instead.\n+     * @param port the port where the local emulator is running.\n+     */\n+    public Builder(@NonNull String host, int port) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzU2Mg=="}, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjQ0MzU5OnYy", "diffSide": "RIGHT", "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1ODo1MVrOGl8Rig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOToyMDowNFrOGl87DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzODAyNg==", "bodyText": "FWIW we call this \"frozen\" in Firestore.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442438026", "createdAt": "2020-06-18T18:58:51Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.components.Preconditions;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+public class EmulatorSettings {\n+\n+  /** Empty emulator settings to be used as an internal default */\n+  public static EmulatorSettings getDefault() {\n+    return new EmulatorSettings.Builder().build();\n+  }\n+\n+  public static final class Builder {\n+\n+    private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap = new HashMap<>();\n+\n+    /** Constructs an empty builder. */\n+    public Builder() {}\n+\n+    /**\n+     * Specify the emulator settings for a single service.\n+     *\n+     * @param emulator the emulated service.\n+     * @param settings the emulator settings.\n+     * @return the builder, for chaining.\n+     */\n+    @NonNull\n+    public Builder addEmulatedService(\n+        @NonNull FirebaseEmulator emulator, @NonNull EmulatedServiceSettings settings) {\n+      Preconditions.checkState(\n+          !settingsMap.containsKey(emulator),\n+          \"Cannot call addEmulatedService twice for \" + emulator.toString());\n+      this.settingsMap.put(emulator, settings);\n+      return this;\n+    }\n+\n+    @NonNull\n+    public EmulatorSettings build() {\n+      return new EmulatorSettings(new HashMap<>(settingsMap));\n+    }\n+  }\n+\n+  private final AtomicBoolean accessed = new AtomicBoolean(false);\n+  private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap;\n+\n+  private EmulatorSettings(@NonNull Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap) {\n+    this.settingsMap = Collections.unmodifiableMap(settingsMap);\n+  }\n+\n+  /**\n+   * Determine if any Firebase SDK has already accessed the emulator settings. When true, attempting\n+   * to change the settings should throw an error.\n+   *\n+   * @hide\n+   */\n+  public boolean isAccessed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0ODY1Mw==", "bodyText": "It's actually not the same, see below.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442448653", "createdAt": "2020-06-18T19:20:04Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.components.Preconditions;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+public class EmulatorSettings {\n+\n+  /** Empty emulator settings to be used as an internal default */\n+  public static EmulatorSettings getDefault() {\n+    return new EmulatorSettings.Builder().build();\n+  }\n+\n+  public static final class Builder {\n+\n+    private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap = new HashMap<>();\n+\n+    /** Constructs an empty builder. */\n+    public Builder() {}\n+\n+    /**\n+     * Specify the emulator settings for a single service.\n+     *\n+     * @param emulator the emulated service.\n+     * @param settings the emulator settings.\n+     * @return the builder, for chaining.\n+     */\n+    @NonNull\n+    public Builder addEmulatedService(\n+        @NonNull FirebaseEmulator emulator, @NonNull EmulatedServiceSettings settings) {\n+      Preconditions.checkState(\n+          !settingsMap.containsKey(emulator),\n+          \"Cannot call addEmulatedService twice for \" + emulator.toString());\n+      this.settingsMap.put(emulator, settings);\n+      return this;\n+    }\n+\n+    @NonNull\n+    public EmulatorSettings build() {\n+      return new EmulatorSettings(new HashMap<>(settingsMap));\n+    }\n+  }\n+\n+  private final AtomicBoolean accessed = new AtomicBoolean(false);\n+  private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap;\n+\n+  private EmulatorSettings(@NonNull Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap) {\n+    this.settingsMap = Collections.unmodifiableMap(settingsMap);\n+  }\n+\n+  /**\n+   * Determine if any Firebase SDK has already accessed the emulator settings. When true, attempting\n+   * to change the settings should throw an error.\n+   *\n+   * @hide\n+   */\n+  public boolean isAccessed() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzODAyNg=="}, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjQ2OTcxOnYy", "diffSide": "RIGHT", "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowNjozMFrOGl8hZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMToxODozNVrOGmAj4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjA4Ng==", "bodyText": "The class as implemented appears immutable. It doesn't seem possible to call   addEmulatedService and modify an existing instance, so it is not immediately obvious why we need the \"accessed\" check.\nWould it make more sense to perform this check in FirebaseApp and enforce that enableEmulators can only be called once? Along the same line, could enableEmulators take FirebaseEmulator emulator,  EmulatedServiceSettings settings directly, which would remove the need for EmulatorSettings API.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442442086", "createdAt": "2020-06-18T19:06:30Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.components.Preconditions;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+public class EmulatorSettings {\n+\n+  /** Empty emulator settings to be used as an internal default */\n+  public static EmulatorSettings getDefault() {\n+    return new EmulatorSettings.Builder().build();\n+  }\n+\n+  public static final class Builder {\n+\n+    private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap = new HashMap<>();\n+\n+    /** Constructs an empty builder. */\n+    public Builder() {}\n+\n+    /**\n+     * Specify the emulator settings for a single service.\n+     *\n+     * @param emulator the emulated service.\n+     * @param settings the emulator settings.\n+     * @return the builder, for chaining.\n+     */\n+    @NonNull\n+    public Builder addEmulatedService(\n+        @NonNull FirebaseEmulator emulator, @NonNull EmulatedServiceSettings settings) {\n+      Preconditions.checkState(\n+          !settingsMap.containsKey(emulator),\n+          \"Cannot call addEmulatedService twice for \" + emulator.toString());\n+      this.settingsMap.put(emulator, settings);\n+      return this;\n+    }\n+\n+    @NonNull\n+    public EmulatorSettings build() {\n+      return new EmulatorSettings(new HashMap<>(settingsMap));\n+    }\n+  }\n+\n+  private final AtomicBoolean accessed = new AtomicBoolean(false);\n+  private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap;\n+\n+  private EmulatorSettings(@NonNull Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap) {\n+    this.settingsMap = Collections.unmodifiableMap(settingsMap);\n+  }\n+\n+  /**\n+   * Determine if any Firebase SDK has already accessed the emulator settings. When true, attempting\n+   * to change the settings should throw an error.\n+   *\n+   * @hide\n+   */\n+  public boolean isAccessed() {\n+    return accessed.get();\n+  }\n+\n+  /**\n+   * Fetch the emulation settings for a single Firebase service. Once this method has been called\n+   * {@link #isAccessed()} will return true.\n+   *\n+   * @hide\n+   */\n+  @Nullable\n+  public EmulatedServiceSettings getServiceSettings(@NonNull FirebaseEmulator emulator) {\n+    accessed.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0OTgwMw==", "bodyText": "It's not about preventing someone calling enableEmulators twice, it's about someone calling it after the Database/Firestore/etc SDK has already consulted FirebaseApp.getEmulatorSettings().\nIt's sort of like firestore.settings({ }) where you can call it all you want but once the SDK \"boots up\" we throw if you call it.\nAs for changing the API to be repeated calls to enableEmulators:\n\nThat would be a pretty significant departure from the API approved by the council.\nThe idea here is that developers should have a single place where they control all the emulator settings in their app.  So I am personally in favor of a single call to enableEmulators() with all of the service settings in one object.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442449803", "createdAt": "2020-06-18T19:22:24Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.components.Preconditions;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+public class EmulatorSettings {\n+\n+  /** Empty emulator settings to be used as an internal default */\n+  public static EmulatorSettings getDefault() {\n+    return new EmulatorSettings.Builder().build();\n+  }\n+\n+  public static final class Builder {\n+\n+    private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap = new HashMap<>();\n+\n+    /** Constructs an empty builder. */\n+    public Builder() {}\n+\n+    /**\n+     * Specify the emulator settings for a single service.\n+     *\n+     * @param emulator the emulated service.\n+     * @param settings the emulator settings.\n+     * @return the builder, for chaining.\n+     */\n+    @NonNull\n+    public Builder addEmulatedService(\n+        @NonNull FirebaseEmulator emulator, @NonNull EmulatedServiceSettings settings) {\n+      Preconditions.checkState(\n+          !settingsMap.containsKey(emulator),\n+          \"Cannot call addEmulatedService twice for \" + emulator.toString());\n+      this.settingsMap.put(emulator, settings);\n+      return this;\n+    }\n+\n+    @NonNull\n+    public EmulatorSettings build() {\n+      return new EmulatorSettings(new HashMap<>(settingsMap));\n+    }\n+  }\n+\n+  private final AtomicBoolean accessed = new AtomicBoolean(false);\n+  private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap;\n+\n+  private EmulatorSettings(@NonNull Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap) {\n+    this.settingsMap = Collections.unmodifiableMap(settingsMap);\n+  }\n+\n+  /**\n+   * Determine if any Firebase SDK has already accessed the emulator settings. When true, attempting\n+   * to change the settings should throw an error.\n+   *\n+   * @hide\n+   */\n+  public boolean isAccessed() {\n+    return accessed.get();\n+  }\n+\n+  /**\n+   * Fetch the emulation settings for a single Firebase service. Once this method has been called\n+   * {@link #isAccessed()} will return true.\n+   *\n+   * @hide\n+   */\n+  @Nullable\n+  public EmulatedServiceSettings getServiceSettings(@NonNull FirebaseEmulator emulator) {\n+    accessed.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjA4Ng=="}, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1Njk0MQ==", "bodyText": "Okay, understood. I think we should still try to simplify the code flow, which would make it more obvious to code reviewers like me. Can we make this explicit in Firebase App (by adding an internal freezeSettings() or something)? ideally, trying to understand this should not overheat my brain, but it is also very hot today.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442456941", "createdAt": "2020-06-18T19:35:42Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.components.Preconditions;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+public class EmulatorSettings {\n+\n+  /** Empty emulator settings to be used as an internal default */\n+  public static EmulatorSettings getDefault() {\n+    return new EmulatorSettings.Builder().build();\n+  }\n+\n+  public static final class Builder {\n+\n+    private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap = new HashMap<>();\n+\n+    /** Constructs an empty builder. */\n+    public Builder() {}\n+\n+    /**\n+     * Specify the emulator settings for a single service.\n+     *\n+     * @param emulator the emulated service.\n+     * @param settings the emulator settings.\n+     * @return the builder, for chaining.\n+     */\n+    @NonNull\n+    public Builder addEmulatedService(\n+        @NonNull FirebaseEmulator emulator, @NonNull EmulatedServiceSettings settings) {\n+      Preconditions.checkState(\n+          !settingsMap.containsKey(emulator),\n+          \"Cannot call addEmulatedService twice for \" + emulator.toString());\n+      this.settingsMap.put(emulator, settings);\n+      return this;\n+    }\n+\n+    @NonNull\n+    public EmulatorSettings build() {\n+      return new EmulatorSettings(new HashMap<>(settingsMap));\n+    }\n+  }\n+\n+  private final AtomicBoolean accessed = new AtomicBoolean(false);\n+  private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap;\n+\n+  private EmulatorSettings(@NonNull Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap) {\n+    this.settingsMap = Collections.unmodifiableMap(settingsMap);\n+  }\n+\n+  /**\n+   * Determine if any Firebase SDK has already accessed the emulator settings. When true, attempting\n+   * to change the settings should throw an error.\n+   *\n+   * @hide\n+   */\n+  public boolean isAccessed() {\n+    return accessed.get();\n+  }\n+\n+  /**\n+   * Fetch the emulation settings for a single Firebase service. Once this method has been called\n+   * {@link #isAccessed()} will return true.\n+   *\n+   * @hide\n+   */\n+  @Nullable\n+  public EmulatedServiceSettings getServiceSettings(@NonNull FirebaseEmulator emulator) {\n+    accessed.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjA4Ng=="}, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5MTA2NA==", "bodyText": "Yes that's a good idea.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442491064", "createdAt": "2020-06-18T20:42:48Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.components.Preconditions;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+public class EmulatorSettings {\n+\n+  /** Empty emulator settings to be used as an internal default */\n+  public static EmulatorSettings getDefault() {\n+    return new EmulatorSettings.Builder().build();\n+  }\n+\n+  public static final class Builder {\n+\n+    private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap = new HashMap<>();\n+\n+    /** Constructs an empty builder. */\n+    public Builder() {}\n+\n+    /**\n+     * Specify the emulator settings for a single service.\n+     *\n+     * @param emulator the emulated service.\n+     * @param settings the emulator settings.\n+     * @return the builder, for chaining.\n+     */\n+    @NonNull\n+    public Builder addEmulatedService(\n+        @NonNull FirebaseEmulator emulator, @NonNull EmulatedServiceSettings settings) {\n+      Preconditions.checkState(\n+          !settingsMap.containsKey(emulator),\n+          \"Cannot call addEmulatedService twice for \" + emulator.toString());\n+      this.settingsMap.put(emulator, settings);\n+      return this;\n+    }\n+\n+    @NonNull\n+    public EmulatorSettings build() {\n+      return new EmulatorSettings(new HashMap<>(settingsMap));\n+    }\n+  }\n+\n+  private final AtomicBoolean accessed = new AtomicBoolean(false);\n+  private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap;\n+\n+  private EmulatorSettings(@NonNull Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap) {\n+    this.settingsMap = Collections.unmodifiableMap(settingsMap);\n+  }\n+\n+  /**\n+   * Determine if any Firebase SDK has already accessed the emulator settings. When true, attempting\n+   * to change the settings should throw an error.\n+   *\n+   * @hide\n+   */\n+  public boolean isAccessed() {\n+    return accessed.get();\n+  }\n+\n+  /**\n+   * Fetch the emulation settings for a single Firebase service. Once this method has been called\n+   * {@link #isAccessed()} will return true.\n+   *\n+   * @hide\n+   */\n+  @Nullable\n+  public EmulatedServiceSettings getServiceSettings(@NonNull FirebaseEmulator emulator) {\n+    accessed.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjA4Ng=="}, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5MzgwMw==", "bodyText": "Added a hidden freeze() method on EmulatorSettings and made it the responsibility of FirebaseApp to call it.\nAdded a warning if somehow someone is getting service settings from a non-frozen EmulatorSettings, which shouldn't be possible.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442493803", "createdAt": "2020-06-18T20:48:17Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.components.Preconditions;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+public class EmulatorSettings {\n+\n+  /** Empty emulator settings to be used as an internal default */\n+  public static EmulatorSettings getDefault() {\n+    return new EmulatorSettings.Builder().build();\n+  }\n+\n+  public static final class Builder {\n+\n+    private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap = new HashMap<>();\n+\n+    /** Constructs an empty builder. */\n+    public Builder() {}\n+\n+    /**\n+     * Specify the emulator settings for a single service.\n+     *\n+     * @param emulator the emulated service.\n+     * @param settings the emulator settings.\n+     * @return the builder, for chaining.\n+     */\n+    @NonNull\n+    public Builder addEmulatedService(\n+        @NonNull FirebaseEmulator emulator, @NonNull EmulatedServiceSettings settings) {\n+      Preconditions.checkState(\n+          !settingsMap.containsKey(emulator),\n+          \"Cannot call addEmulatedService twice for \" + emulator.toString());\n+      this.settingsMap.put(emulator, settings);\n+      return this;\n+    }\n+\n+    @NonNull\n+    public EmulatorSettings build() {\n+      return new EmulatorSettings(new HashMap<>(settingsMap));\n+    }\n+  }\n+\n+  private final AtomicBoolean accessed = new AtomicBoolean(false);\n+  private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap;\n+\n+  private EmulatorSettings(@NonNull Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap) {\n+    this.settingsMap = Collections.unmodifiableMap(settingsMap);\n+  }\n+\n+  /**\n+   * Determine if any Firebase SDK has already accessed the emulator settings. When true, attempting\n+   * to change the settings should throw an error.\n+   *\n+   * @hide\n+   */\n+  public boolean isAccessed() {\n+    return accessed.get();\n+  }\n+\n+  /**\n+   * Fetch the emulation settings for a single Firebase service. Once this method has been called\n+   * {@link #isAccessed()} will return true.\n+   *\n+   * @hide\n+   */\n+  @Nullable\n+  public EmulatedServiceSettings getServiceSettings(@NonNull FirebaseEmulator emulator) {\n+    accessed.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjA4Ng=="}, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwMzA1Ng==", "bodyText": "Hm, that's interesting. What's become more apparent to me with your latest changes is the observation that EmulatorSettings are not really concerned about being frozen, it's FirebaseApp that both freezes and checks for frozen on it.\nThis kind of results in the situation where the frozen logic is spread out among both FirebaseApp and EmulatorSettings. Would it make sense to make EmulatorSettings just a pure immutable pojo and have FirebaseApp store the frozen bit since it's the only one who uses it and has full control of the value?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442503056", "createdAt": "2020-06-18T21:07:24Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.components.Preconditions;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+public class EmulatorSettings {\n+\n+  /** Empty emulator settings to be used as an internal default */\n+  public static EmulatorSettings getDefault() {\n+    return new EmulatorSettings.Builder().build();\n+  }\n+\n+  public static final class Builder {\n+\n+    private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap = new HashMap<>();\n+\n+    /** Constructs an empty builder. */\n+    public Builder() {}\n+\n+    /**\n+     * Specify the emulator settings for a single service.\n+     *\n+     * @param emulator the emulated service.\n+     * @param settings the emulator settings.\n+     * @return the builder, for chaining.\n+     */\n+    @NonNull\n+    public Builder addEmulatedService(\n+        @NonNull FirebaseEmulator emulator, @NonNull EmulatedServiceSettings settings) {\n+      Preconditions.checkState(\n+          !settingsMap.containsKey(emulator),\n+          \"Cannot call addEmulatedService twice for \" + emulator.toString());\n+      this.settingsMap.put(emulator, settings);\n+      return this;\n+    }\n+\n+    @NonNull\n+    public EmulatorSettings build() {\n+      return new EmulatorSettings(new HashMap<>(settingsMap));\n+    }\n+  }\n+\n+  private final AtomicBoolean accessed = new AtomicBoolean(false);\n+  private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap;\n+\n+  private EmulatorSettings(@NonNull Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap) {\n+    this.settingsMap = Collections.unmodifiableMap(settingsMap);\n+  }\n+\n+  /**\n+   * Determine if any Firebase SDK has already accessed the emulator settings. When true, attempting\n+   * to change the settings should throw an error.\n+   *\n+   * @hide\n+   */\n+  public boolean isAccessed() {\n+    return accessed.get();\n+  }\n+\n+  /**\n+   * Fetch the emulation settings for a single Firebase service. Once this method has been called\n+   * {@link #isAccessed()} will return true.\n+   *\n+   * @hide\n+   */\n+  @Nullable\n+  public EmulatedServiceSettings getServiceSettings(@NonNull FirebaseEmulator emulator) {\n+    accessed.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjA4Ng=="}, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwNTg5Ng==", "bodyText": "That's cool with me!  I agree that's where it should live, I just thought maybe people didn't want that kind of state on FirebaseApp.  I'll move it.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442505896", "createdAt": "2020-06-18T21:13:28Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.components.Preconditions;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+public class EmulatorSettings {\n+\n+  /** Empty emulator settings to be used as an internal default */\n+  public static EmulatorSettings getDefault() {\n+    return new EmulatorSettings.Builder().build();\n+  }\n+\n+  public static final class Builder {\n+\n+    private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap = new HashMap<>();\n+\n+    /** Constructs an empty builder. */\n+    public Builder() {}\n+\n+    /**\n+     * Specify the emulator settings for a single service.\n+     *\n+     * @param emulator the emulated service.\n+     * @param settings the emulator settings.\n+     * @return the builder, for chaining.\n+     */\n+    @NonNull\n+    public Builder addEmulatedService(\n+        @NonNull FirebaseEmulator emulator, @NonNull EmulatedServiceSettings settings) {\n+      Preconditions.checkState(\n+          !settingsMap.containsKey(emulator),\n+          \"Cannot call addEmulatedService twice for \" + emulator.toString());\n+      this.settingsMap.put(emulator, settings);\n+      return this;\n+    }\n+\n+    @NonNull\n+    public EmulatorSettings build() {\n+      return new EmulatorSettings(new HashMap<>(settingsMap));\n+    }\n+  }\n+\n+  private final AtomicBoolean accessed = new AtomicBoolean(false);\n+  private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap;\n+\n+  private EmulatorSettings(@NonNull Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap) {\n+    this.settingsMap = Collections.unmodifiableMap(settingsMap);\n+  }\n+\n+  /**\n+   * Determine if any Firebase SDK has already accessed the emulator settings. When true, attempting\n+   * to change the settings should throw an error.\n+   *\n+   * @hide\n+   */\n+  public boolean isAccessed() {\n+    return accessed.get();\n+  }\n+\n+  /**\n+   * Fetch the emulation settings for a single Firebase service. Once this method has been called\n+   * {@link #isAccessed()} will return true.\n+   *\n+   * @hide\n+   */\n+  @Nullable\n+  public EmulatedServiceSettings getServiceSettings(@NonNull FirebaseEmulator emulator) {\n+    accessed.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjA4Ng=="}, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwODI1Ng==", "bodyText": "Moved boolean state to FirebaseApp", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442508256", "createdAt": "2020-06-18T21:18:35Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,104 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.components.Preconditions;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+public class EmulatorSettings {\n+\n+  /** Empty emulator settings to be used as an internal default */\n+  public static EmulatorSettings getDefault() {\n+    return new EmulatorSettings.Builder().build();\n+  }\n+\n+  public static final class Builder {\n+\n+    private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap = new HashMap<>();\n+\n+    /** Constructs an empty builder. */\n+    public Builder() {}\n+\n+    /**\n+     * Specify the emulator settings for a single service.\n+     *\n+     * @param emulator the emulated service.\n+     * @param settings the emulator settings.\n+     * @return the builder, for chaining.\n+     */\n+    @NonNull\n+    public Builder addEmulatedService(\n+        @NonNull FirebaseEmulator emulator, @NonNull EmulatedServiceSettings settings) {\n+      Preconditions.checkState(\n+          !settingsMap.containsKey(emulator),\n+          \"Cannot call addEmulatedService twice for \" + emulator.toString());\n+      this.settingsMap.put(emulator, settings);\n+      return this;\n+    }\n+\n+    @NonNull\n+    public EmulatorSettings build() {\n+      return new EmulatorSettings(new HashMap<>(settingsMap));\n+    }\n+  }\n+\n+  private final AtomicBoolean accessed = new AtomicBoolean(false);\n+  private final Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap;\n+\n+  private EmulatorSettings(@NonNull Map<FirebaseEmulator, EmulatedServiceSettings> settingsMap) {\n+    this.settingsMap = Collections.unmodifiableMap(settingsMap);\n+  }\n+\n+  /**\n+   * Determine if any Firebase SDK has already accessed the emulator settings. When true, attempting\n+   * to change the settings should throw an error.\n+   *\n+   * @hide\n+   */\n+  public boolean isAccessed() {\n+    return accessed.get();\n+  }\n+\n+  /**\n+   * Fetch the emulation settings for a single Firebase service. Once this method has been called\n+   * {@link #isAccessed()} will return true.\n+   *\n+   * @hide\n+   */\n+  @Nullable\n+  public EmulatedServiceSettings getServiceSettings(@NonNull FirebaseEmulator emulator) {\n+    accessed.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjA4Ng=="}, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjQ3NzE1OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowOTowOVrOGl8mMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOToyNjo0NlrOGl9IVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MzMxMw==", "bodyText": "Should we add an explicit way to decide which credentials to use? I am asking because of Yuchen's feedback here: firebase/firebase-js-sdk#3228", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442443313", "createdAt": "2020-06-18T19:09:09Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java", "diffHunk": "@@ -73,6 +81,13 @@ public static ParsedUrl parseUrl(String url) throws DatabaseException {\n       originalPathString = originalPathString.replace(\"+\", \" \");\n       Validation.validateRootPathString(originalPathString);\n \n+      // TODO: Should log this out\n+      if (serviceSettings != null) {\n+        repoInfo.secure = false;\n+        repoInfo.host = serviceSettings.host + \":\" + serviceSettings.port;\n+        repoInfo.internalHost = repoInfo.host;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1MDY4OQ==", "bodyText": "I do think that would be a nice addition one day but this API was approved cross-platform for Android, iOS, and JS without any mention of a credentials setting so I think I'd need to do a new API review for that.\nDo you anticipate bugs like that JS one in this implementation?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442450689", "createdAt": "2020-06-18T19:24:08Z", "author": {"login": "samtstern"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java", "diffHunk": "@@ -73,6 +81,13 @@ public static ParsedUrl parseUrl(String url) throws DatabaseException {\n       originalPathString = originalPathString.replace(\"+\", \" \");\n       Validation.validateRootPathString(originalPathString);\n \n+      // TODO: Should log this out\n+      if (serviceSettings != null) {\n+        repoInfo.secure = false;\n+        repoInfo.host = serviceSettings.host + \":\" + serviceSettings.port;\n+        repoInfo.internalHost = repoInfo.host;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MzMxMw=="}, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1MjA1NA==", "bodyText": "This should be low risk since Android SDK is not reused in Admin SDKs. The expected behavior is the same as production -- get credentials from Firebase Auth if used and logged in, or no credentials if not.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442452054", "createdAt": "2020-06-18T19:26:46Z", "author": {"login": "yuchenshi"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java", "diffHunk": "@@ -73,6 +81,13 @@ public static ParsedUrl parseUrl(String url) throws DatabaseException {\n       originalPathString = originalPathString.replace(\"+\", \" \");\n       Validation.validateRootPathString(originalPathString);\n \n+      // TODO: Should log this out\n+      if (serviceSettings != null) {\n+        repoInfo.secure = false;\n+        repoInfo.host = serviceSettings.host + \":\" + serviceSettings.port;\n+        repoInfo.internalHost = repoInfo.host;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MzMxMw=="}, "originalCommit": {"oid": "4dd3c232fc7bdf4e36f1526c051d04cf2df04c54"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Njg3MzI4OnYy", "diffSide": "RIGHT", "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMToxNzoyOFrOGmAh_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMToxNzoyOFrOGmAh_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwNzc3NQ==", "bodyText": "If this remains hidden, then the frozen state could just be a simple atomic boolean here. If this is ever public, then this won't work since we wouldn't want to freeze the settings just because this method was called. I would vote we go the simple route now and use a single (atomic) boolean that manages the state in Firebase app.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442507775", "createdAt": "2020-06-18T21:17:28Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "diffHunk": "@@ -142,6 +145,20 @@ public FirebaseOptions getOptions() {\n     return options;\n   }\n \n+  /**\n+   * Returns the specified {@link EmulatorSettings} or a default.\n+   *\n+   * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+   *\n+   * @hide\n+   */\n+  @NonNull\n+  public EmulatorSettings getEmulatorSettings() {\n+    checkNotDeleted();\n+    emulatorSettings.freeze();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ef9919eeca049b79bdf8d170217bb252285d51b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Njg4MDMzOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMToyMDowMlrOGmAmWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMToyMDowMlrOGmAmWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwODg4OA==", "bodyText": "s/serviceSettings/emulatorSettings ?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442508888", "createdAt": "2020-06-18T21:20:02Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java", "diffHunk": "@@ -32,7 +34,13 @@\n public class Utilities {\n   private static final char[] HEX_CHARACTERS = \"0123456789abcdef\".toCharArray();\n \n-  public static ParsedUrl parseUrl(String url) throws DatabaseException {\n+  public static ParsedUrl parseUrl(@NonNull String url) {\n+    return Utilities.parseUrl(url, null);\n+  }\n+\n+  public static ParsedUrl parseUrl(\n+      @NonNull String url, @Nullable EmulatedServiceSettings serviceSettings)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ef9919eeca049b79bdf8d170217bb252285d51b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjkxMjAxOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTozMTowOFrOGmA6Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjo1NDozNlrOGmTzPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxNDAyMw==", "bodyText": "As for comments for here, I think this code is fine. A cleaner way might be https://gist.github.com/schmidt-sebastian/e1ddba17d468ae72c4104fa84aae2d9a, but it's optional.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442514023", "createdAt": "2020-06-18T21:31:08Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java", "diffHunk": "@@ -73,6 +81,13 @@ public static ParsedUrl parseUrl(String url) throws DatabaseException {\n       originalPathString = originalPathString.replace(\"+\", \" \");\n       Validation.validateRootPathString(originalPathString);\n \n+      // TODO: Should log this out\n+      if (serviceSettings != null) {\n+        repoInfo.secure = false;\n+        repoInfo.host = serviceSettings.host + \":\" + serviceSettings.port;\n+        repoInfo.internalHost = repoInfo.host;\n+      }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ef9919eeca049b79bdf8d170217bb252285d51b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgyMzQ4NA==", "bodyText": "You're right that is better, I implemented that diff.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442823484", "createdAt": "2020-06-19T12:54:36Z", "author": {"login": "samtstern"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java", "diffHunk": "@@ -73,6 +81,13 @@ public static ParsedUrl parseUrl(String url) throws DatabaseException {\n       originalPathString = originalPathString.replace(\"+\", \" \");\n       Validation.validateRootPathString(originalPathString);\n \n+      // TODO: Should log this out\n+      if (serviceSettings != null) {\n+        repoInfo.secure = false;\n+        repoInfo.host = serviceSettings.host + \":\" + serviceSettings.port;\n+        repoInfo.internalHost = repoInfo.host;\n+      }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxNDAyMw=="}, "originalCommit": {"oid": "4ef9919eeca049b79bdf8d170217bb252285d51b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODkyMzU3OnYy", "diffSide": "RIGHT", "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzoxMjo0N1rOGmUWKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzozOTo0OVrOGmVNZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMjQyNg==", "bodyText": "nit: now that settings are immutable, consider sharing the default instance across app instances.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442832426", "createdAt": "2020-06-19T13:12:47Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "diffHunk": "@@ -110,6 +111,9 @@\n   private final FirebaseOptions options;\n   private final ComponentRuntime componentRuntime;\n \n+  private final AtomicBoolean emulatorSettingsFrozen = new AtomicBoolean(false);\n+  private EmulatorSettings emulatorSettings = EmulatorSettings.getDefault();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e1373fc39830e5e884ae939e5515a7b15f6b8bc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg0NjU2Ng==", "bodyText": "Ah yeah good call!", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442846566", "createdAt": "2020-06-19T13:39:49Z", "author": {"login": "samtstern"}, "path": "firebase-common/src/main/java/com/google/firebase/FirebaseApp.java", "diffHunk": "@@ -110,6 +111,9 @@\n   private final FirebaseOptions options;\n   private final ComponentRuntime componentRuntime;\n \n+  private final AtomicBoolean emulatorSettingsFrozen = new AtomicBoolean(false);\n+  private EmulatorSettings emulatorSettings = EmulatorSettings.getDefault();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMjQyNg=="}, "originalCommit": {"oid": "4e1373fc39830e5e884ae939e5515a7b15f6b8bc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODkyNjA0OnYy", "diffSide": "RIGHT", "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzoxMzozOFrOGmUXyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzoxMzozOFrOGmUXyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMjg0MQ==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class EmulatedServiceSettings {\n          \n          \n            \n            public final class EmulatedServiceSettings {", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442832841", "createdAt": "2020-06-19T13:13:38Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Settings to connect a single Firebase service to a local emulator.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see EmulatorSettings\n+ * @hide\n+ */\n+public class EmulatedServiceSettings {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e1373fc39830e5e884ae939e5515a7b15f6b8bc"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODkyNzIzOnYy", "diffSide": "RIGHT", "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzoxNDowNlrOGmUYmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzoxNDowNlrOGmUYmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMzA0OA==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class EmulatorSettings {\n          \n          \n            \n            public final class EmulatorSettings {", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442833048", "createdAt": "2020-06-19T13:14:06Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatorSettings.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.components.Preconditions;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Settings that control which Firebase services should access a local emulator, rather than\n+ * production.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @hide\n+ */\n+public class EmulatorSettings {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e1373fc39830e5e884ae939e5515a7b15f6b8bc"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODkyODE4OnYy", "diffSide": "RIGHT", "path": "firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzoxNDoyMlrOGmUZIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzoxNDoyMlrOGmUZIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzMzE4NQ==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class FirebaseEmulator {\n          \n          \n            \n            public final class FirebaseEmulator {", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442833185", "createdAt": "2020-06-19T13:14:22Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Identifier Firebase services that can be emulated using the Firebase Emulator Suite.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @see EmulatorSettings\n+ * @see EmulatedServiceSettings\n+ * @hide\n+ */\n+public class FirebaseEmulator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e1373fc39830e5e884ae939e5515a7b15f6b8bc"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODk0MDYxOnYy", "diffSide": "RIGHT", "path": "firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzoxODoxOVrOGmUhCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzoxODoxOVrOGmUhCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgzNTIxMA==", "bodyText": "Might be worth making a getter for it: go/ej3e-16", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442835210", "createdAt": "2020-06-19T13:18:19Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/FirebaseEmulator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Identifier Firebase services that can be emulated using the Firebase Emulator Suite.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see com.google.firebase.FirebaseApp#enableEmulators(EmulatorSettings)\n+ * @see EmulatorSettings\n+ * @see EmulatedServiceSettings\n+ * @hide\n+ */\n+public class FirebaseEmulator {\n+\n+  public final String name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e1373fc39830e5e884ae939e5515a7b15f6b8bc"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTA1MDg0OnYy", "diffSide": "RIGHT", "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo1MTozM1rOGmVmAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo1MTozM1rOGmVmAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1Mjg2NQ==", "bodyText": "same here pls :)", "url": "https://github.com/firebase/firebase-android-sdk/pull/1672#discussion_r442852865", "createdAt": "2020-06-19T13:51:33Z", "author": {"login": "vkryachko"}, "path": "firebase-common/src/main/java/com/google/firebase/emulators/EmulatedServiceSettings.java", "diffHunk": "@@ -0,0 +1,36 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.emulators;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Settings to connect a single Firebase service to a local emulator.\n+ *\n+ * <p>TODO(samstern): Un-hide this once Firestore, Database, and Functions are implemented\n+ *\n+ * @see EmulatorSettings\n+ * @hide\n+ */\n+public final class EmulatedServiceSettings {\n+\n+  public final String host;\n+  public final int port;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a51a73ccdeec27e5fac2d50207899d586cc18e1"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1222, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}