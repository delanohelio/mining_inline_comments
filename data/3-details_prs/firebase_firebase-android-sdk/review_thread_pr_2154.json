{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NzgzOTQy", "number": 2154, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNToyMjoxNlrOE2IO7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzo0MDoyOFrOE3tXkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTkzNDU0OnYy", "diffSide": "RIGHT", "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/FirebaseModelDownloader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNToyMjoxNlrOHuyWEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMTozNjo1M1rOHwClEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyMTM5NA==", "bodyText": "Since sharedPreferences are sync, you could try to create an actual task here to get concurrency.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2154#discussion_r518821394", "createdAt": "2020-11-06T15:22:16Z", "author": {"login": "rlazo"}, "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/FirebaseModelDownloader.java", "diffHunk": "@@ -84,7 +94,7 @@ public static FirebaseModelDownloader getInstance(@NonNull FirebaseApp app) {\n   /** @return The set of all models that are downloaded to this device. */\n   @NonNull\n   public Task<Set<CustomModel>> listDownloadedModels() {\n-    throw new UnsupportedOperationException(\"Not yet implemented.\");\n+    return Tasks.forResult(sharedPreferencesUtil.listDownloadedModels());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb18fcfe6385c4cba75fbac80e5dd19977a59c4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEzNTk1NA==", "bodyText": "Done - thanks.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2154#discussion_r520135954", "createdAt": "2020-11-09T21:36:53Z", "author": {"login": "annzimmer"}, "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/FirebaseModelDownloader.java", "diffHunk": "@@ -84,7 +94,7 @@ public static FirebaseModelDownloader getInstance(@NonNull FirebaseApp app) {\n   /** @return The set of all models that are downloaded to this device. */\n   @NonNull\n   public Task<Set<CustomModel>> listDownloadedModels() {\n-    throw new UnsupportedOperationException(\"Not yet implemented.\");\n+    return Tasks.forResult(sharedPreferencesUtil.listDownloadedModels());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyMTM5NA=="}, "originalCommit": {"oid": "deb18fcfe6385c4cba75fbac80e5dd19977a59c4"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTk0Nzk3OnYy", "diffSide": "RIGHT", "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/internal/SharedPreferencesUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNToyNTozMFrOHuyedA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMTozNjoyNVrOHwCkKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyMzU0MA==", "bodyText": "Since you're reading all the keys at once and not dealing with the sharedpreferences anymore, it may not be necessary to sync the whole method.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2154#discussion_r518823540", "createdAt": "2020-11-06T15:25:30Z", "author": {"login": "rlazo"}, "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/internal/SharedPreferencesUtil.java", "diffHunk": "@@ -190,6 +196,24 @@ public synchronized void clearModelDetails(@NonNull String modelName, boolean cl\n         .commit();\n   }\n \n+  public synchronized Set<CustomModel> listDownloadedModels() {\n+    Set<CustomModel> customModels = new HashSet<>();\n+    Set<String> keySet = getSharedPreferences().getAll().keySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "deb18fcfe6385c4cba75fbac80e5dd19977a59c4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEzNTcyMg==", "bodyText": "The second part (added todo) will need to coordinate with android download manager, so I'll need the sync when I add that.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2154#discussion_r520135722", "createdAt": "2020-11-09T21:36:25Z", "author": {"login": "annzimmer"}, "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/internal/SharedPreferencesUtil.java", "diffHunk": "@@ -190,6 +196,24 @@ public synchronized void clearModelDetails(@NonNull String modelName, boolean cl\n         .commit();\n   }\n \n+  public synchronized Set<CustomModel> listDownloadedModels() {\n+    Set<CustomModel> customModels = new HashSet<>();\n+    Set<String> keySet = getSharedPreferences().getAll().keySet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyMzU0MA=="}, "originalCommit": {"oid": "deb18fcfe6385c4cba75fbac80e5dd19977a59c4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDM2OTkyOnYy", "diffSide": "RIGHT", "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/internal/SharedPreferencesUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjo0NDo0MlrOHwlmtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOToyMzowMFrOHwsKIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwOTgxMg==", "bodyText": "the is prefix in the name suggests a boolean response. What about using maybe, like maybeGetUpdatedModel? It's a bit more verbose.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2154#discussion_r520709812", "createdAt": "2020-11-10T16:44:42Z", "author": {"login": "rlazo"}, "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/internal/SharedPreferencesUtil.java", "diffHunk": "@@ -209,11 +209,28 @@ public synchronized void clearModelDetails(@NonNull String modelName, boolean cl\n         if (extractModel != null) {\n           customModels.add(extractModel);\n         }\n+      } else {\n+        matcher = Pattern.compile(DOWNLOADING_MODEL_ID_PATTERN).matcher(key);\n+        if (matcher.find()) {\n+          String modelName = matcher.group(matcher.groupCount());\n+          CustomModel extractModel = isDownloadCompleted(modelName);\n+          if (extractModel != null) {\n+            customModels.add(extractModel);\n+          }\n+        }\n       }\n     }\n     return customModels;\n   }\n \n+  synchronized CustomModel isDownloadCompleted(String modelName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc436f067ce328e8a5bba24c691b8a9acadf47f7"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxNzE4NA==", "bodyText": "Done", "url": "https://github.com/firebase/firebase-android-sdk/pull/2154#discussion_r520817184", "createdAt": "2020-11-10T19:23:00Z", "author": {"login": "annzimmer"}, "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/internal/SharedPreferencesUtil.java", "diffHunk": "@@ -209,11 +209,28 @@ public synchronized void clearModelDetails(@NonNull String modelName, boolean cl\n         if (extractModel != null) {\n           customModels.add(extractModel);\n         }\n+      } else {\n+        matcher = Pattern.compile(DOWNLOADING_MODEL_ID_PATTERN).matcher(key);\n+        if (matcher.find()) {\n+          String modelName = matcher.group(matcher.groupCount());\n+          CustomModel extractModel = isDownloadCompleted(modelName);\n+          if (extractModel != null) {\n+            customModels.add(extractModel);\n+          }\n+        }\n       }\n     }\n     return customModels;\n   }\n \n+  synchronized CustomModel isDownloadCompleted(String modelName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwOTgxMg=="}, "originalCommit": {"oid": "bc436f067ce328e8a5bba24c691b8a9acadf47f7"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDM3MDk2OnYy", "diffSide": "RIGHT", "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/FirebaseModelDownloader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjo0NDo1NlrOHwlnUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjo0NDo1NlrOHwlnUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwOTk2OA==", "bodyText": "+1!", "url": "https://github.com/firebase/firebase-android-sdk/pull/2154#discussion_r520709968", "createdAt": "2020-11-10T16:44:56Z", "author": {"login": "rlazo"}, "path": "firebase-ml-modeldownloader/src/main/java/com/google/firebase/ml/modeldownloader/FirebaseModelDownloader.java", "diffHunk": "@@ -94,7 +102,10 @@ public static FirebaseModelDownloader getInstance(@NonNull FirebaseApp app) {\n   /** @return The set of all models that are downloaded to this device. */\n   @NonNull\n   public Task<Set<CustomModel>> listDownloadedModels() {\n-    return Tasks.forResult(sharedPreferencesUtil.listDownloadedModels());\n+    TaskCompletionSource<Set<CustomModel>> taskCompletionSource = new TaskCompletionSource<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc436f067ce328e8a5bba24c691b8a9acadf47f7"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDQwMDA3OnYy", "diffSide": "RIGHT", "path": "firebase-ml-modeldownloader/src/test/java/com/google/firebase/ml/modeldownloader/FirebaseModelDownloaderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjo1MToxMlrOHwl56g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOToyMjo1OVrOHwsKFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxNDczMA==", "bodyText": "You could use a singleThread executor like in\n\n  \n    \n      firebase-android-sdk/firebase-messaging/src/test/java/com/google/firebase/messaging/ImageDownloadRoboTest.java\n    \n    \n         Line 53\n      in\n      fe51be9\n    \n    \n    \n    \n\n        \n          \n           executor = Executors.newSingleThreadExecutor(); \n        \n    \n  \n\n\nThat way the test shouldn't finish before running the tasks.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2154#discussion_r520714730", "createdAt": "2020-11-10T16:51:12Z", "author": {"login": "rlazo"}, "path": "firebase-ml-modeldownloader/src/test/java/com/google/firebase/ml/modeldownloader/FirebaseModelDownloaderTest.java", "diffHunk": "@@ -51,14 +58,28 @@\n   CustomModel CUSTOM_MODEL = new CustomModel(MODEL_NAME, 0, 100, MODEL_HASH);\n \n   FirebaseModelDownloader firebaseModelDownloader;\n-  SharedPreferencesUtil mockPrefs = mock(SharedPreferencesUtil.class);\n+  @Mock SharedPreferencesUtil mockPrefs;\n+\n+  ExecutorService executor;\n \n   @Before\n   public void setUp() {\n+    MockitoAnnotations.initMocks(this);\n     FirebaseApp.clearInstancesForTest();\n     // default app\n     FirebaseApp.initializeApp(ApplicationProvider.getApplicationContext(), FIREBASE_OPTIONS);\n-    firebaseModelDownloader = new FirebaseModelDownloader(FIREBASE_OPTIONS, mockPrefs);\n+\n+    executor = new ThreadPoolExecutor(0, 1, 30L, TimeUnit.SECONDS, new LinkedBlockingQueue<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc436f067ce328e8a5bba24c691b8a9acadf47f7"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxNzE3NQ==", "bodyText": "Done", "url": "https://github.com/firebase/firebase-android-sdk/pull/2154#discussion_r520817175", "createdAt": "2020-11-10T19:22:59Z", "author": {"login": "annzimmer"}, "path": "firebase-ml-modeldownloader/src/test/java/com/google/firebase/ml/modeldownloader/FirebaseModelDownloaderTest.java", "diffHunk": "@@ -51,14 +58,28 @@\n   CustomModel CUSTOM_MODEL = new CustomModel(MODEL_NAME, 0, 100, MODEL_HASH);\n \n   FirebaseModelDownloader firebaseModelDownloader;\n-  SharedPreferencesUtil mockPrefs = mock(SharedPreferencesUtil.class);\n+  @Mock SharedPreferencesUtil mockPrefs;\n+\n+  ExecutorService executor;\n \n   @Before\n   public void setUp() {\n+    MockitoAnnotations.initMocks(this);\n     FirebaseApp.clearInstancesForTest();\n     // default app\n     FirebaseApp.initializeApp(ApplicationProvider.getApplicationContext(), FIREBASE_OPTIONS);\n-    firebaseModelDownloader = new FirebaseModelDownloader(FIREBASE_OPTIONS, mockPrefs);\n+\n+    executor = new ThreadPoolExecutor(0, 1, 30L, TimeUnit.SECONDS, new LinkedBlockingQueue<>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxNDczMA=="}, "originalCommit": {"oid": "bc436f067ce328e8a5bba24c691b8a9acadf47f7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjY2NDI0OnYy", "diffSide": "RIGHT", "path": "firebase-ml-modeldownloader/src/test/java/com/google/firebase/ml/modeldownloader/FirebaseModelDownloaderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzoyMjoyN1rOHw8IEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDo1NjoyOFrOHxQqRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA3ODgwMQ==", "bodyText": "AFAIK this is no longer needed when using the single thread executor.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2154#discussion_r521078801", "createdAt": "2020-11-11T03:22:27Z", "author": {"login": "rlazo"}, "path": "firebase-ml-modeldownloader/src/test/java/com/google/firebase/ml/modeldownloader/FirebaseModelDownloaderTest.java", "diffHunk": "@@ -14,34 +14,71 @@\n \n package com.google.firebase.ml.modeldownloader;\n \n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThrows;\n+import static org.mockito.Mockito.when;\n \n import androidx.test.core.app.ApplicationProvider;\n+import com.google.android.gms.tasks.Task;\n import com.google.firebase.FirebaseApp;\n import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.FirebaseOptions.Builder;\n+import com.google.firebase.ml.modeldownloader.internal.SharedPreferencesUtil;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n import org.robolectric.RobolectricTestRunner;\n \n @RunWith(RobolectricTestRunner.class)\n public class FirebaseModelDownloaderTest {\n \n   public static final String TEST_PROJECT_ID = \"777777777777\";\n+  public static final FirebaseOptions FIREBASE_OPTIONS =\n+      new Builder()\n+          .setApplicationId(\"1:123456789:android:abcdef\")\n+          .setProjectId(TEST_PROJECT_ID)\n+          .build();\n   public static final String MODEL_NAME = \"MODEL_NAME_1\";\n   public static final CustomModelDownloadConditions DEFAULT_DOWNLOAD_CONDITIONS =\n       new CustomModelDownloadConditions.Builder().build();\n \n+  public static final String MODEL_HASH = \"dsf324\";\n+  // TODO replace with uploaded model.\n+  CustomModel CUSTOM_MODEL = new CustomModel(MODEL_NAME, 0, 100, MODEL_HASH);\n+\n+  FirebaseModelDownloader firebaseModelDownloader;\n+  @Mock SharedPreferencesUtil mockPrefs;\n+\n+  ExecutorService executor;\n+\n   @Before\n   public void setUp() {\n+    MockitoAnnotations.initMocks(this);\n     FirebaseApp.clearInstancesForTest();\n     // default app\n-    FirebaseApp.initializeApp(\n-        ApplicationProvider.getApplicationContext(),\n-        new FirebaseOptions.Builder()\n-            .setApplicationId(\"1:123456789:android:abcdef\")\n-            .setProjectId(TEST_PROJECT_ID)\n-            .build());\n+    FirebaseApp.initializeApp(ApplicationProvider.getApplicationContext(), FIREBASE_OPTIONS);\n+\n+    executor = Executors.newSingleThreadExecutor();\n+    firebaseModelDownloader = new FirebaseModelDownloader(FIREBASE_OPTIONS, mockPrefs, executor);\n+  }\n+\n+  @After\n+  public void cleanUp() {\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c83d39299575f2776d0ae1c482adf42ad4e1cdad"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxNTIzOA==", "bodyText": "thanks - going too fast.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2154#discussion_r521415238", "createdAt": "2020-11-11T14:56:28Z", "author": {"login": "annzimmer"}, "path": "firebase-ml-modeldownloader/src/test/java/com/google/firebase/ml/modeldownloader/FirebaseModelDownloaderTest.java", "diffHunk": "@@ -14,34 +14,71 @@\n \n package com.google.firebase.ml.modeldownloader;\n \n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertThrows;\n+import static org.mockito.Mockito.when;\n \n import androidx.test.core.app.ApplicationProvider;\n+import com.google.android.gms.tasks.Task;\n import com.google.firebase.FirebaseApp;\n import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.FirebaseOptions.Builder;\n+import com.google.firebase.ml.modeldownloader.internal.SharedPreferencesUtil;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n import org.robolectric.RobolectricTestRunner;\n \n @RunWith(RobolectricTestRunner.class)\n public class FirebaseModelDownloaderTest {\n \n   public static final String TEST_PROJECT_ID = \"777777777777\";\n+  public static final FirebaseOptions FIREBASE_OPTIONS =\n+      new Builder()\n+          .setApplicationId(\"1:123456789:android:abcdef\")\n+          .setProjectId(TEST_PROJECT_ID)\n+          .build();\n   public static final String MODEL_NAME = \"MODEL_NAME_1\";\n   public static final CustomModelDownloadConditions DEFAULT_DOWNLOAD_CONDITIONS =\n       new CustomModelDownloadConditions.Builder().build();\n \n+  public static final String MODEL_HASH = \"dsf324\";\n+  // TODO replace with uploaded model.\n+  CustomModel CUSTOM_MODEL = new CustomModel(MODEL_NAME, 0, 100, MODEL_HASH);\n+\n+  FirebaseModelDownloader firebaseModelDownloader;\n+  @Mock SharedPreferencesUtil mockPrefs;\n+\n+  ExecutorService executor;\n+\n   @Before\n   public void setUp() {\n+    MockitoAnnotations.initMocks(this);\n     FirebaseApp.clearInstancesForTest();\n     // default app\n-    FirebaseApp.initializeApp(\n-        ApplicationProvider.getApplicationContext(),\n-        new FirebaseOptions.Builder()\n-            .setApplicationId(\"1:123456789:android:abcdef\")\n-            .setProjectId(TEST_PROJECT_ID)\n-            .build());\n+    FirebaseApp.initializeApp(ApplicationProvider.getApplicationContext(), FIREBASE_OPTIONS);\n+\n+    executor = Executors.newSingleThreadExecutor();\n+    firebaseModelDownloader = new FirebaseModelDownloader(FIREBASE_OPTIONS, mockPrefs, executor);\n+  }\n+\n+  @After\n+  public void cleanUp() {\n+    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA3ODgwMQ=="}, "originalCommit": {"oid": "c83d39299575f2776d0ae1c482adf42ad4e1cdad"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjY2Njc4OnYy", "diffSide": "RIGHT", "path": "firebase-ml-modeldownloader/src/test/java/com/google/firebase/ml/modeldownloader/FirebaseModelDownloaderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzoyMjo1N1rOHw8JlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDo1NjoyN1rOHxQqOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA3OTE4OQ==", "bodyText": "You can probably get rid of this too.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2154#discussion_r521079189", "createdAt": "2020-11-11T03:22:57Z", "author": {"login": "rlazo"}, "path": "firebase-ml-modeldownloader/src/test/java/com/google/firebase/ml/modeldownloader/FirebaseModelDownloaderTest.java", "diffHunk": "@@ -54,10 +91,32 @@ public void getModel_unimplemented() {\n   }\n \n   @Test\n-  public void listDownloadedModels_unimplemented() {\n-    assertThrows(\n-        UnsupportedOperationException.class,\n-        () -> FirebaseModelDownloader.getInstance().listDownloadedModels());\n+  public void listDownloadedModels_returnsEmptyModelList()\n+      throws ExecutionException, InterruptedException {\n+    when(mockPrefs.listDownloadedModels()).thenReturn(Collections.emptySet());\n+    TestOnCompleteListener<Set<CustomModel>> onCompleteListener = new TestOnCompleteListener<>();\n+    Task<Set<CustomModel>> task = firebaseModelDownloader.listDownloadedModels();\n+    task.addOnCompleteListener(executor, onCompleteListener);\n+    Set<CustomModel> customModelSet = onCompleteListener.await();\n+\n+    assertThat(task.isComplete()).isTrue();\n+    assertEquals(customModelSet, Collections.EMPTY_SET);\n+  }\n+\n+  @Test\n+  public void listDownloadedModels_returnsModelList()\n+      throws ExecutionException, InterruptedException {\n+    when(mockPrefs.listDownloadedModels()).thenReturn(Collections.singleton(CUSTOM_MODEL));\n+\n+    TestOnCompleteListener<Set<CustomModel>> onCompleteListener = new TestOnCompleteListener<>();\n+    Task<Set<CustomModel>> task = firebaseModelDownloader.listDownloadedModels();\n+    task.addOnCompleteListener(executor, onCompleteListener);\n+    Set<CustomModel> customModelSet = onCompleteListener.await();\n+\n+    assertThat(task.isComplete()).isTrue();\n+    assertEquals(customModelSet, Collections.singleton(CUSTOM_MODEL));\n+\n+    executor.awaitTermination(500, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c83d39299575f2776d0ae1c482adf42ad4e1cdad"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxNTIyNw==", "bodyText": "done", "url": "https://github.com/firebase/firebase-android-sdk/pull/2154#discussion_r521415227", "createdAt": "2020-11-11T14:56:27Z", "author": {"login": "annzimmer"}, "path": "firebase-ml-modeldownloader/src/test/java/com/google/firebase/ml/modeldownloader/FirebaseModelDownloaderTest.java", "diffHunk": "@@ -54,10 +91,32 @@ public void getModel_unimplemented() {\n   }\n \n   @Test\n-  public void listDownloadedModels_unimplemented() {\n-    assertThrows(\n-        UnsupportedOperationException.class,\n-        () -> FirebaseModelDownloader.getInstance().listDownloadedModels());\n+  public void listDownloadedModels_returnsEmptyModelList()\n+      throws ExecutionException, InterruptedException {\n+    when(mockPrefs.listDownloadedModels()).thenReturn(Collections.emptySet());\n+    TestOnCompleteListener<Set<CustomModel>> onCompleteListener = new TestOnCompleteListener<>();\n+    Task<Set<CustomModel>> task = firebaseModelDownloader.listDownloadedModels();\n+    task.addOnCompleteListener(executor, onCompleteListener);\n+    Set<CustomModel> customModelSet = onCompleteListener.await();\n+\n+    assertThat(task.isComplete()).isTrue();\n+    assertEquals(customModelSet, Collections.EMPTY_SET);\n+  }\n+\n+  @Test\n+  public void listDownloadedModels_returnsModelList()\n+      throws ExecutionException, InterruptedException {\n+    when(mockPrefs.listDownloadedModels()).thenReturn(Collections.singleton(CUSTOM_MODEL));\n+\n+    TestOnCompleteListener<Set<CustomModel>> onCompleteListener = new TestOnCompleteListener<>();\n+    Task<Set<CustomModel>> task = firebaseModelDownloader.listDownloadedModels();\n+    task.addOnCompleteListener(executor, onCompleteListener);\n+    Set<CustomModel> customModelSet = onCompleteListener.await();\n+\n+    assertThat(task.isComplete()).isTrue();\n+    assertEquals(customModelSet, Collections.singleton(CUSTOM_MODEL));\n+\n+    executor.awaitTermination(500, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA3OTE4OQ=="}, "originalCommit": {"oid": "c83d39299575f2776d0ae1c482adf42ad4e1cdad"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODUwNDQ4OnYy", "diffSide": "RIGHT", "path": "firebase-ml-modeldownloader/src/test/java/com/google/firebase/ml/modeldownloader/FirebaseModelDownloaderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzo0MDoyOFrOHxNkew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDo1NjoyNFrOHxQqHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2NDYwMw==", "bodyText": "I wonder if Tasks.await(task) could be used instead here?", "url": "https://github.com/firebase/firebase-android-sdk/pull/2154#discussion_r521364603", "createdAt": "2020-11-11T13:40:28Z", "author": {"login": "vkryachko"}, "path": "firebase-ml-modeldownloader/src/test/java/com/google/firebase/ml/modeldownloader/FirebaseModelDownloaderTest.java", "diffHunk": "@@ -54,10 +91,32 @@ public void getModel_unimplemented() {\n   }\n \n   @Test\n-  public void listDownloadedModels_unimplemented() {\n-    assertThrows(\n-        UnsupportedOperationException.class,\n-        () -> FirebaseModelDownloader.getInstance().listDownloadedModels());\n+  public void listDownloadedModels_returnsEmptyModelList()\n+      throws ExecutionException, InterruptedException {\n+    when(mockPrefs.listDownloadedModels()).thenReturn(Collections.emptySet());\n+    TestOnCompleteListener<Set<CustomModel>> onCompleteListener = new TestOnCompleteListener<>();\n+    Task<Set<CustomModel>> task = firebaseModelDownloader.listDownloadedModels();\n+    task.addOnCompleteListener(executor, onCompleteListener);\n+    Set<CustomModel> customModelSet = onCompleteListener.await();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c83d39299575f2776d0ae1c482adf42ad4e1cdad"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxNTE5OA==", "bodyText": "I had tried that got - \"java.lang.IllegalStateException: Must not be called on the main application thread\", found this solution was used elsewhere.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2154#discussion_r521415198", "createdAt": "2020-11-11T14:56:24Z", "author": {"login": "annzimmer"}, "path": "firebase-ml-modeldownloader/src/test/java/com/google/firebase/ml/modeldownloader/FirebaseModelDownloaderTest.java", "diffHunk": "@@ -54,10 +91,32 @@ public void getModel_unimplemented() {\n   }\n \n   @Test\n-  public void listDownloadedModels_unimplemented() {\n-    assertThrows(\n-        UnsupportedOperationException.class,\n-        () -> FirebaseModelDownloader.getInstance().listDownloadedModels());\n+  public void listDownloadedModels_returnsEmptyModelList()\n+      throws ExecutionException, InterruptedException {\n+    when(mockPrefs.listDownloadedModels()).thenReturn(Collections.emptySet());\n+    TestOnCompleteListener<Set<CustomModel>> onCompleteListener = new TestOnCompleteListener<>();\n+    Task<Set<CustomModel>> task = firebaseModelDownloader.listDownloadedModels();\n+    task.addOnCompleteListener(executor, onCompleteListener);\n+    Set<CustomModel> customModelSet = onCompleteListener.await();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2NDYwMw=="}, "originalCommit": {"oid": "c83d39299575f2776d0ae1c482adf42ad4e1cdad"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1109, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}