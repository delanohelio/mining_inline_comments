{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NjUwNzI3", "number": 1606, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzoxNzoyN1rOEBW_SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzo0MDoxMFrOEBXdCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODYwNjgxOnYy", "diffSide": "RIGHT", "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzoxNzoyN1rOGdKHNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzoxNzoyN1rOGdKHNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyNzU3Mw==", "bodyText": "suggestion: Since TypeTokenContainer is immutable, let's have a singleton TypeTokenContainer .EMPTY instance that can be shared by all non-generic classes as opposed to allocating one each time.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1606#discussion_r433227573", "createdAt": "2020-06-01T13:17:27Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "diffHunk": "@@ -118,7 +110,7 @@ private TypeToken() {}\n \n     private ClassToken(Class<T> token) {\n       this.rawType = token;\n-      this.typeArguments = null;\n+      this.typeArguments = new TypeTokenContainer(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d07433a992506b7dfbfddc1f5401b428683ab3d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODY2NDgzOnYy", "diffSide": "RIGHT", "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzozNTowNFrOGdKrKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzozNzoxMVrOGdKv8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzNjc3OA==", "bodyText": "Consider moving the conversion logic Type->TypeToken into the TypeToken class itself, this would increase cohesion of this class and will not require making TypeToken#of(Type) non-private, effectively exposing its implementation details.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1606#discussion_r433236778", "createdAt": "2020-06-01T13:35:04Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "diffHunk": "@@ -15,13 +15,33 @@\n package com.google.firebase.decoders;\n \n import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import java.lang.reflect.Type;\n \n /**\n  * {@link TypeTokenContainer} is used to get actual type parameter in a generic class at given\n  * index.\n  */\n-// TODO: change from interface to class\n-public interface TypeTokenContainer {\n+public class TypeTokenContainer {\n+  private final TypeToken<?>[] typeTokens;\n+\n+  TypeTokenContainer(@Nullable Type[] types) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d07433a992506b7dfbfddc1f5401b428683ab3d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzODAwMg==", "bodyText": "Also might make sense to make the constructor public and class final.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1606#discussion_r433238002", "createdAt": "2020-06-01T13:37:11Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "diffHunk": "@@ -15,13 +15,33 @@\n package com.google.firebase.decoders;\n \n import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import java.lang.reflect.Type;\n \n /**\n  * {@link TypeTokenContainer} is used to get actual type parameter in a generic class at given\n  * index.\n  */\n-// TODO: change from interface to class\n-public interface TypeTokenContainer {\n+public class TypeTokenContainer {\n+  private final TypeToken<?>[] typeTokens;\n+\n+  TypeTokenContainer(@Nullable Type[] types) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzNjc3OA=="}, "originalCommit": {"oid": "7d07433a992506b7dfbfddc1f5401b428683ab3d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODY3NDc0OnYy", "diffSide": "RIGHT", "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzozNzo0NFrOGdKxIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzozNzo0NFrOGdKxIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzODMwNg==", "bodyText": "I think IllegalArgumentException is more appropriate here.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1606#discussion_r433238306", "createdAt": "2020-06-01T13:37:44Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "diffHunk": "@@ -15,13 +15,33 @@\n package com.google.firebase.decoders;\n \n import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import java.lang.reflect.Type;\n \n /**\n  * {@link TypeTokenContainer} is used to get actual type parameter in a generic class at given\n  * index.\n  */\n-// TODO: change from interface to class\n-public interface TypeTokenContainer {\n+public class TypeTokenContainer {\n+  private final TypeToken<?>[] typeTokens;\n+\n+  TypeTokenContainer(@Nullable Type[] types) {\n+    TypeToken[] typeTokens;\n+    if (types == null) {\n+      typeTokens = new TypeToken[0];\n+    } else {\n+      typeTokens = new TypeToken[types.length];\n+      for (int i = 0; i < types.length; i++) {\n+        typeTokens[i] = TypeToken.of(types[i]);\n+      }\n+    }\n+    this.typeTokens = typeTokens;\n+  }\n+\n   @NonNull\n-  <T> TypeToken<T> at(int index);\n+  public <T> TypeToken<T> at(int index) {\n+    if (index >= typeTokens.length)\n+      throw new NullPointerException(\"No type token at index: \" + index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d07433a992506b7dfbfddc1f5401b428683ab3d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODY3NzAwOnYy", "diffSide": "RIGHT", "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzozODoyNVrOGdKyfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzozODoyNVrOGdKyfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzODY1NA==", "bodyText": "nit: what if the index is less than zero?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1606#discussion_r433238654", "createdAt": "2020-06-01T13:38:25Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "diffHunk": "@@ -15,13 +15,33 @@\n package com.google.firebase.decoders;\n \n import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import java.lang.reflect.Type;\n \n /**\n  * {@link TypeTokenContainer} is used to get actual type parameter in a generic class at given\n  * index.\n  */\n-// TODO: change from interface to class\n-public interface TypeTokenContainer {\n+public class TypeTokenContainer {\n+  private final TypeToken<?>[] typeTokens;\n+\n+  TypeTokenContainer(@Nullable Type[] types) {\n+    TypeToken[] typeTokens;\n+    if (types == null) {\n+      typeTokens = new TypeToken[0];\n+    } else {\n+      typeTokens = new TypeToken[types.length];\n+      for (int i = 0; i < types.length; i++) {\n+        typeTokens[i] = TypeToken.of(types[i]);\n+      }\n+    }\n+    this.typeTokens = typeTokens;\n+  }\n+\n   @NonNull\n-  <T> TypeToken<T> at(int index);\n+  public <T> TypeToken<T> at(int index) {\n+    if (index >= typeTokens.length)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d07433a992506b7dfbfddc1f5401b428683ab3d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODY4Mjk3OnYy", "diffSide": "RIGHT", "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzo0MDoxMFrOGdK2YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzo0MDoxMFrOGdK2YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzOTY0OQ==", "bodyText": "Doesn't this produce an unchecked cast warning? if so worth adding a @SuppressWarnings?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1606#discussion_r433239649", "createdAt": "2020-06-01T13:40:10Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "diffHunk": "@@ -15,13 +15,33 @@\n package com.google.firebase.decoders;\n \n import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import java.lang.reflect.Type;\n \n /**\n  * {@link TypeTokenContainer} is used to get actual type parameter in a generic class at given\n  * index.\n  */\n-// TODO: change from interface to class\n-public interface TypeTokenContainer {\n+public class TypeTokenContainer {\n+  private final TypeToken<?>[] typeTokens;\n+\n+  TypeTokenContainer(@Nullable Type[] types) {\n+    TypeToken[] typeTokens;\n+    if (types == null) {\n+      typeTokens = new TypeToken[0];\n+    } else {\n+      typeTokens = new TypeToken[types.length];\n+      for (int i = 0; i < types.length; i++) {\n+        typeTokens[i] = TypeToken.of(types[i]);\n+      }\n+    }\n+    this.typeTokens = typeTokens;\n+  }\n+\n   @NonNull\n-  <T> TypeToken<T> at(int index);\n+  public <T> TypeToken<T> at(int index) {\n+    if (index >= typeTokens.length)\n+      throw new NullPointerException(\"No type token at index: \" + index);\n+    return (TypeToken<T>) typeTokens[index];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d07433a992506b7dfbfddc1f5401b428683ab3d"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1390, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}