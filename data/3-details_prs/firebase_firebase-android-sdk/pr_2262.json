{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwODA1ODc0", "number": 2262, "title": "Replace usage of transform with updateTransforms", "bodyText": "Porting from web.", "createdAt": "2020-12-16T00:22:31Z", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262", "merged": true, "mergeCommit": {"oid": "d40e7f15d28c362d0f11601143577d208d710e5c"}, "closed": true, "closedAt": "2020-12-17T22:40:49Z", "author": {"login": "thebrianchen"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmju1-AH2gAyNTQwODA1ODc0OjI4Mzc3M2ZmN2ZkMzQwMzE2MTliM2FjYWZkODhiYWU5MGYzM2M1ZWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnLHLugH2gAyNTQwODA1ODc0OjhjMWI1NjUyNDZmMDVjZDg5MjBhZDVjZWFiMDBkNjVmZDU4MmM3ZDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed", "author": {"user": {"login": "thebrianchen", "name": "Brian Chen"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/283773ff7fd34031619b3acafd88bae90f33c5ed", "committedDate": "2020-12-16T00:24:12Z", "message": "add update_transforms"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ad6ddeec4959fd5c386059bb66fb17c1300e285d", "author": {"user": {"login": "thebrianchen", "name": "Brian Chen"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/ad6ddeec4959fd5c386059bb66fb17c1300e285d", "committedDate": "2020-12-16T00:21:29Z", "message": "add update_transforms"}, "afterCommit": {"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed", "author": {"user": {"login": "thebrianchen", "name": "Brian Chen"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/283773ff7fd34031619b3acafd88bae90f33c5ed", "committedDate": "2020-12-16T00:24:12Z", "message": "add update_transforms"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODcxNzI4", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#pullrequestreview-553871728", "createdAt": "2020-12-16T16:36:49Z", "commit": {"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjozNjo0OVrOIHOarg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNzowMzo0OFrOIHPr7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ0NzE1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            && batch.getWrites(i - 1).getTransform().getFieldTransformsCount() == 0\n          \n          \n            \n                            && batch.getWrites(i - 1).getUpdate().getFieldsCount() != 0,\n          \n          \n            \n                            && !batch.getWrites(i - 1).hasTransform()\n          \n          \n            \n                            && batch.getWrites(i - 1).hasUpdate(),\n          \n      \n    \n    \n  \n\nProto3 does have \"has\" functions for nested messages.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544447150", "createdAt": "2020-12-16T16:36:49Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java", "diffHunk": "@@ -171,6 +174,35 @@ MutationBatch decodeMutationBatch(com.google.firebase.firestore.proto.WriteBatch\n     for (int i = 0; i < baseMutationsCount; i++) {\n       baseMutations.add(rpcSerializer.decodeMutation(batch.getBaseWrites(i)));\n     }\n+\n+    // Squash old transform mutations into existing patch or set mutations. The replacement of\n+    // representing `transforms` with `update_transforms` on the SDK means that old `transform`\n+    // mutations stored in IndexedDB need to be updated to `update_transforms`.\n+    // TODO(b/174608374): Remove this code once we perform a schema migration.\n+    for (int i = batch.getWritesCount() - 1; i >= 0; --i) {\n+      Write mutation = batch.getWrites(i);\n+      if (mutation.getTransform().getFieldTransformsCount() != 0) {\n+        hardAssert(\n+            i >= 1\n+                && batch.getWrites(i - 1).getTransform().getFieldTransformsCount() == 0\n+                && batch.getWrites(i - 1).getUpdate().getFieldsCount() != 0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ0ODYxMA==", "bodyText": "Can you change this so it only runs once per batch?", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544448610", "createdAt": "2020-12-16T16:38:42Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java", "diffHunk": "@@ -171,6 +174,35 @@ MutationBatch decodeMutationBatch(com.google.firebase.firestore.proto.WriteBatch\n     for (int i = 0; i < baseMutationsCount; i++) {\n       baseMutations.add(rpcSerializer.decodeMutation(batch.getBaseWrites(i)));\n     }\n+\n+    // Squash old transform mutations into existing patch or set mutations. The replacement of\n+    // representing `transforms` with `update_transforms` on the SDK means that old `transform`\n+    // mutations stored in IndexedDB need to be updated to `update_transforms`.\n+    // TODO(b/174608374): Remove this code once we perform a schema migration.\n+    for (int i = batch.getWritesCount() - 1; i >= 0; --i) {\n+      Write mutation = batch.getWrites(i);\n+      if (mutation.getTransform().getFieldTransformsCount() != 0) {\n+        hardAssert(\n+            i >= 1\n+                && batch.getWrites(i - 1).getTransform().getFieldTransformsCount() == 0\n+                && batch.getWrites(i - 1).getUpdate().getFieldsCount() != 0,\n+            \"TransformMutation should be preceded by a patch or set mutation\");\n+        Write mutationToJoin = batch.getWrites(i - 1);\n+        Builder newMutationBuilder = Write.newBuilder(mutationToJoin);\n+        for (FieldTransform fieldTransform : mutation.getTransform().getFieldTransformsList()) {\n+          newMutationBuilder.addUpdateTransforms(fieldTransform);\n+        }\n+\n+        batch =\n+            com.google.firebase.firestore.proto.WriteBatch.newBuilder(batch)\n+                .removeWrites(i)\n+                .removeWrites(i - 1)\n+                .addWrites(i - 1, newMutationBuilder.build())\n+                .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1MDM0OQ==", "bodyText": "Nit: \"transforms field\" might be a bit misleading. Maybe rephrase as \"rather than sending an additional transforms message\"", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544450349", "createdAt": "2020-12-16T16:40:59Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java", "diffHunk": "@@ -43,36 +47,37 @@\n  * <tr><td>PatchMutation</td><td>Document(v3)</td><td>Document(v3)</td></tr>\n  * <tr><td>PatchMutation</td><td>NoDocument(v3)</td><td>NoDocument(v3)</td></tr>\n  * <tr><td>PatchMutation</td><td>null</td><td>null</td></tr>\n- * <tr><td>TransformMutation</td><td>Document(v3)</td><td>Document(v3)</td></tr>\n- * <tr><td>TransformMutation</td><td>NoDocument(v3)</td><td>NoDocument(v3)</td></tr>\n- * <tr><td>TransformMutation</td><td>null</td><td>null</td></tr>\n  * <tr><td>DeleteMutation</td><td>Document(v3)</td><td>NoDocument(v0)</td></tr>\n  * <tr><td>DeleteMutation</td><td>NoDocument(v3)</td><td>NoDocument(v0)</td></tr>\n  * <tr><td>DeleteMutation</td><td>null</td><td>NoDocument(v0)</td></tr>\n  * </table>\n  *\n  * For acknowledged mutations, we use the updateTime of the WriteResponse as the resulting version\n- * for Set, Patch, and Transform mutations. As deletes have no explicit update time, we use the\n- * commitTime of the WriteResponse for acknowledged deletes.\n+ * for Set and Patch mutations. As deletes have no explicit update time, we use the commitTime of\n+ * the WriteResponse for acknowledged deletes.\n  *\n  * <p>If a mutation is acknowledged by the backend but fails the precondition check locally, we\n  * return an `UnknownDocument` and rely on Watch to send us the updated version.\n  *\n- * <p>Note that TransformMutations don't create Documents (in the case of being applied to a\n- * NoDocument), even though they would on the backend. This is because the client always combines\n- * the TransformMutation with a SetMutation or PatchMutation and we only want to apply the transform\n- * if the prior mutation resulted in a Document (always true for a SetMutation, but not necessarily\n- * for an PatchMutation).\n+ * <p>Field transforms are used only with Patch and Set Mutations. We use the `updateTransforms`\n+ * field to store transforms, rather than the `transforms` field.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1MTA1Mg==", "bodyText": "It looks like we can just inline this call. The Web SDK is slightly different to support tree-shaking.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544451052", "createdAt": "2020-12-16T16:41:56Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java", "diffHunk": "@@ -129,7 +138,9 @@ public abstract MaybeDocument applyToLocalView(\n    * @return a base value to store along with the mutation, or null for idempotent mutations.\n    */\n   @Nullable\n-  public abstract ObjectValue extractBaseValue(@Nullable MaybeDocument maybeDoc);\n+  public ObjectValue extractBaseValue(@Nullable MaybeDocument maybeDoc) {\n+    return extractTransformBaseValue(maybeDoc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1MjYxNg==", "bodyText": "This can be protected.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544452616", "createdAt": "2020-12-16T16:43:53Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java", "diffHunk": "@@ -166,4 +177,96 @@ static SnapshotVersion getPostMutationVersion(@Nullable MaybeDocument maybeDoc)\n       return SnapshotVersion.NONE;\n     }\n   }\n+\n+  /**\n+   * Creates a list of \"transform results\" (a transform result is a field value representing the\n+   * result of applying a transform) for use after a mutation containing transforms has been\n+   * acknowledged by the server.\n+   *\n+   * @param baseDoc The document prior to applying this mutation batch.\n+   * @param serverTransformResults The transform results received by the server.\n+   * @return The transform results list.\n+   */\n+  List<Value> serverTransformResults(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1MzM5NQ==", "bodyText": "This can also be protected.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544453395", "createdAt": "2020-12-16T16:44:49Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java", "diffHunk": "@@ -166,4 +177,96 @@ static SnapshotVersion getPostMutationVersion(@Nullable MaybeDocument maybeDoc)\n       return SnapshotVersion.NONE;\n     }\n   }\n+\n+  /**\n+   * Creates a list of \"transform results\" (a transform result is a field value representing the\n+   * result of applying a transform) for use after a mutation containing transforms has been\n+   * acknowledged by the server.\n+   *\n+   * @param baseDoc The document prior to applying this mutation batch.\n+   * @param serverTransformResults The transform results received by the server.\n+   * @return The transform results list.\n+   */\n+  List<Value> serverTransformResults(\n+      @Nullable MaybeDocument baseDoc, List<Value> serverTransformResults) {\n+    ArrayList<Value> transformResults = new ArrayList<>(fieldTransforms.size());\n+    hardAssert(\n+        fieldTransforms.size() == serverTransformResults.size(),\n+        \"server transform count (%d) should match field transform count (%d)\",\n+        serverTransformResults.size(),\n+        fieldTransforms.size());\n+\n+    for (int i = 0; i < serverTransformResults.size(); i++) {\n+      FieldTransform fieldTransform = fieldTransforms.get(i);\n+      TransformOperation transform = fieldTransform.getOperation();\n+\n+      Value previousValue = null;\n+      if (baseDoc instanceof Document) {\n+        previousValue = ((Document) baseDoc).getField(fieldTransform.getFieldPath());\n+      }\n+\n+      transformResults.add(\n+          transform.applyToRemoteDocument(previousValue, serverTransformResults.get(i)));\n+    }\n+    return transformResults;\n+  }\n+\n+  /**\n+   * Creates a list of \"transform results\" (a transform result is a field value representing the\n+   * result of applying a transform) for use when applying a transform locally.\n+   *\n+   * @param localWriteTime The local time of the mutation (used to generate ServerTimestampValues).\n+   * @param maybeDoc The current state of the document after applying all previous mutations.\n+   * @param baseDoc The document prior to applying this mutation batch.\n+   * @return The transform results list.\n+   */\n+  List<Value> localTransformResults(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NDM1OQ==", "bodyText": "This can be private (or inlined).", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544454359", "createdAt": "2020-12-16T16:46:02Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/Mutation.java", "diffHunk": "@@ -166,4 +177,96 @@ static SnapshotVersion getPostMutationVersion(@Nullable MaybeDocument maybeDoc)\n       return SnapshotVersion.NONE;\n     }\n   }\n+\n+  /**\n+   * Creates a list of \"transform results\" (a transform result is a field value representing the\n+   * result of applying a transform) for use after a mutation containing transforms has been\n+   * acknowledged by the server.\n+   *\n+   * @param baseDoc The document prior to applying this mutation batch.\n+   * @param serverTransformResults The transform results received by the server.\n+   * @return The transform results list.\n+   */\n+  List<Value> serverTransformResults(\n+      @Nullable MaybeDocument baseDoc, List<Value> serverTransformResults) {\n+    ArrayList<Value> transformResults = new ArrayList<>(fieldTransforms.size());\n+    hardAssert(\n+        fieldTransforms.size() == serverTransformResults.size(),\n+        \"server transform count (%d) should match field transform count (%d)\",\n+        serverTransformResults.size(),\n+        fieldTransforms.size());\n+\n+    for (int i = 0; i < serverTransformResults.size(); i++) {\n+      FieldTransform fieldTransform = fieldTransforms.get(i);\n+      TransformOperation transform = fieldTransform.getOperation();\n+\n+      Value previousValue = null;\n+      if (baseDoc instanceof Document) {\n+        previousValue = ((Document) baseDoc).getField(fieldTransform.getFieldPath());\n+      }\n+\n+      transformResults.add(\n+          transform.applyToRemoteDocument(previousValue, serverTransformResults.get(i)));\n+    }\n+    return transformResults;\n+  }\n+\n+  /**\n+   * Creates a list of \"transform results\" (a transform result is a field value representing the\n+   * result of applying a transform) for use when applying a transform locally.\n+   *\n+   * @param localWriteTime The local time of the mutation (used to generate ServerTimestampValues).\n+   * @param maybeDoc The current state of the document after applying all previous mutations.\n+   * @param baseDoc The document prior to applying this mutation batch.\n+   * @return The transform results list.\n+   */\n+  List<Value> localTransformResults(\n+      Timestamp localWriteTime, @Nullable MaybeDocument maybeDoc, @Nullable MaybeDocument baseDoc) {\n+    ArrayList<Value> transformResults = new ArrayList<>(fieldTransforms.size());\n+    for (FieldTransform fieldTransform : fieldTransforms) {\n+      TransformOperation transform = fieldTransform.getOperation();\n+\n+      Value previousValue = null;\n+      if (maybeDoc instanceof Document) {\n+        previousValue = ((Document) maybeDoc).getField(fieldTransform.getFieldPath());\n+      }\n+\n+      transformResults.add(transform.applyToLocalView(previousValue, localWriteTime));\n+    }\n+    return transformResults;\n+  }\n+\n+  ObjectValue transformObject(ObjectValue objectValue, List<Value> transformResults) {\n+    hardAssert(\n+        transformResults.size() == fieldTransforms.size(), \"Transform results length mismatch.\");\n+\n+    ObjectValue.Builder builder = objectValue.toBuilder();\n+    for (int i = 0; i < fieldTransforms.size(); i++) {\n+      FieldTransform fieldTransform = fieldTransforms.get(i);\n+      FieldPath fieldPath = fieldTransform.getFieldPath();\n+      builder.set(fieldPath, transformResults.get(i));\n+    }\n+    return builder.build();\n+  }\n+\n+  public ObjectValue extractTransformBaseValue(@Nullable MaybeDocument maybeDoc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NjQxOA==", "bodyText": "Do we need this? If you want to keep the new name, you could declare it in line 106.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544456418", "createdAt": "2020-12-16T16:48:35Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/SetMutation.java", "diffHunk": "@@ -85,18 +101,16 @@ public MaybeDocument applyToLocalView(\n       return maybeDoc;\n     }\n \n+    ObjectValue newData = value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1NzI2MA==", "bodyText": "This if check can probably be removed.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544457260", "createdAt": "2020-12-16T16:49:36Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteSerializer.java", "diffHunk": "@@ -283,6 +274,12 @@ private NoDocument decodeMissingDocument(BatchGetDocumentsResponse response) {\n       throw fail(\"unknown mutation type %s\", mutation.getClass());\n     }\n \n+    if (mutation.getFieldTransforms().size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ1OTc4Nw==", "bodyText": "Another idea would be to simply build up a new list of Mutations, which we can then iterate in the three lines below. That would avoid all toBuilder() conversions.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544459787", "createdAt": "2020-12-16T16:52:51Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/local/LocalSerializer.java", "diffHunk": "@@ -171,6 +174,35 @@ MutationBatch decodeMutationBatch(com.google.firebase.firestore.proto.WriteBatch\n     for (int i = 0; i < baseMutationsCount; i++) {\n       baseMutations.add(rpcSerializer.decodeMutation(batch.getBaseWrites(i)));\n     }\n+\n+    // Squash old transform mutations into existing patch or set mutations. The replacement of\n+    // representing `transforms` with `update_transforms` on the SDK means that old `transform`\n+    // mutations stored in IndexedDB need to be updated to `update_transforms`.\n+    // TODO(b/174608374): Remove this code once we perform a schema migration.\n+    for (int i = batch.getWritesCount() - 1; i >= 0; --i) {\n+      Write mutation = batch.getWrites(i);\n+      if (mutation.getTransform().getFieldTransformsCount() != 0) {\n+        hardAssert(\n+            i >= 1\n+                && batch.getWrites(i - 1).getTransform().getFieldTransformsCount() == 0\n+                && batch.getWrites(i - 1).getUpdate().getFieldsCount() != 0,\n+            \"TransformMutation should be preceded by a patch or set mutation\");\n+        Write mutationToJoin = batch.getWrites(i - 1);\n+        Builder newMutationBuilder = Write.newBuilder(mutationToJoin);\n+        for (FieldTransform fieldTransform : mutation.getTransform().getFieldTransformsList()) {\n+          newMutationBuilder.addUpdateTransforms(fieldTransform);\n+        }\n+\n+        batch =\n+            com.google.firebase.firestore.proto.WriteBatch.newBuilder(batch)\n+                .removeWrites(i)\n+                .removeWrites(i - 1)\n+                .addWrites(i - 1, newMutationBuilder.build())\n+                .build();\n+        --i;\n+      }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ2MzEyMQ==", "bodyText": "Should this be private as well>", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544463121", "createdAt": "2020-12-16T16:57:11Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java", "diffHunk": "@@ -59,13 +67,204 @@\n   private RemoteSerializer remoteSerializer;\n   private LocalSerializer serializer;\n \n+  private Timestamp writeTime = Timestamp.now();\n+  com.google.protobuf.Timestamp writeTimeProto =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ2MzMyNg==", "bodyText": "Nice :)", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544463326", "createdAt": "2020-12-16T16:57:25Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java", "diffHunk": "@@ -59,13 +67,204 @@\n   private RemoteSerializer remoteSerializer;\n   private LocalSerializer serializer;\n \n+  private Timestamp writeTime = Timestamp.now();\n+  com.google.protobuf.Timestamp writeTimeProto =\n+      com.google.protobuf.Timestamp.newBuilder()\n+          .setSeconds(writeTime.getSeconds())\n+          .setNanos(writeTime.getNanoseconds())\n+          .build();\n+\n+  static class TestWriteBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ2NDE0Nw==", "bodyText": "Maybe s/serialized/encoded ?", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544464147", "createdAt": "2020-12-16T16:58:30Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/local/LocalSerializerTest.java", "diffHunk": "@@ -59,13 +67,204 @@\n   private RemoteSerializer remoteSerializer;\n   private LocalSerializer serializer;\n \n+  private Timestamp writeTime = Timestamp.now();\n+  com.google.protobuf.Timestamp writeTimeProto =\n+      com.google.protobuf.Timestamp.newBuilder()\n+          .setSeconds(writeTime.getSeconds())\n+          .setNanos(writeTime.getNanoseconds())\n+          .build();\n+\n+  static class TestWriteBuilder {\n+    private Builder builder;\n+\n+    TestWriteBuilder() {\n+      this.builder = Write.newBuilder();\n+    }\n+\n+    TestWriteBuilder addSet() {\n+      builder.setUpdate(\n+          com.google.firestore.v1.Document.newBuilder()\n+              .setName(\"projects/p/databases/d/documents/foo/bar\")\n+              .putFields(\"a\", Value.newBuilder().setStringValue(\"b\").build())\n+              .putFields(\"num\", Value.newBuilder().setIntegerValue(1).build()));\n+      return this;\n+    }\n+\n+    TestWriteBuilder addPatch() {\n+      builder\n+          .setUpdate(\n+              com.google.firestore.v1.Document.newBuilder()\n+                  .setName(\"projects/p/databases/d/documents/bar/baz\")\n+                  .putFields(\"a\", Value.newBuilder().setStringValue(\"b\").build())\n+                  .putFields(\"num\", Value.newBuilder().setIntegerValue(1).build()))\n+          .setUpdateMask(DocumentMask.newBuilder().addFieldPaths(\"a\"))\n+          .setCurrentDocument(Precondition.newBuilder().setExists(true));\n+      return this;\n+    }\n+\n+    TestWriteBuilder addDelete() {\n+      builder.setDelete(\"projects/p/databases/d/documents/baz/quux\");\n+      return this;\n+    }\n+\n+    TestWriteBuilder addUpdateTransforms() {\n+      builder\n+          .addUpdateTransforms(\n+              FieldTransform.newBuilder()\n+                  .setFieldPath(\"integer\")\n+                  .setIncrement(Value.newBuilder().setIntegerValue(42)))\n+          .addUpdateTransforms(\n+              FieldTransform.newBuilder()\n+                  .setFieldPath(\"double\")\n+                  .setIncrement(Value.newBuilder().setDoubleValue(13.37)));\n+      return this;\n+    }\n+\n+    TestWriteBuilder addLegacyTransform() {\n+      builder\n+          .setTransform(\n+              DocumentTransform.newBuilder()\n+                  .setDocument(\"projects/p/databases/d/documents/docs/1\")\n+                  .addFieldTransforms(\n+                      FieldTransform.newBuilder()\n+                          .setFieldPath(\"integer\")\n+                          .setIncrement(Value.newBuilder().setIntegerValue(42).build()))\n+                  .addFieldTransforms(\n+                      FieldTransform.newBuilder()\n+                          .setFieldPath(\"double\")\n+                          .setIncrement(Value.newBuilder().setDoubleValue(13.37).build())))\n+          .setCurrentDocument(Precondition.newBuilder().setExists(true));\n+      return this;\n+    }\n+\n+    Write build() {\n+      return builder.build();\n+    }\n+  }\n+\n+  Write setProto = new TestWriteBuilder().addSet().build();\n+  Write patchProto = new TestWriteBuilder().addPatch().build();\n+  Write deleteProto = new TestWriteBuilder().addDelete().build();\n+  Write transformProto = new TestWriteBuilder().addLegacyTransform().build();\n+\n   @Before\n   public void setUp() {\n     DatabaseId databaseId = DatabaseId.forDatabase(\"p\", \"d\");\n     remoteSerializer = new RemoteSerializer(databaseId);\n     serializer = new LocalSerializer(remoteSerializer);\n   }\n \n+  // TODO(b/174608374): Remove these tests once we perform a schema migration.\n+  @Test\n+  public void testSetMutationAndTransFormMutationAreSquashed() {\n+    WriteBatch batchProto =\n+        com.google.firebase.firestore.proto.WriteBatch.newBuilder()\n+            .setBatchId(42)\n+            .addAllWrites(asList(setProto, transformProto))\n+            .setLocalWriteTime(writeTimeProto)\n+            .build();\n+\n+    MutationBatch decoded = serializer.decodeMutationBatch(batchProto);\n+    assertEquals(1, decoded.getMutations().size());\n+    assertTrue(decoded.getMutations().get(0) instanceof SetMutation);\n+    Write serialized = remoteSerializer.encodeMutation(decoded.getMutations().get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ2Nzk1MA==", "bodyText": "Super optional nit (here and below): To me, set is the base case and patch is more advanced. I would flip the order of these assertions.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#discussion_r544467950", "createdAt": "2020-12-16T17:03:48Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/remote/RemoteSerializerTest.java", "diffHunk": "@@ -378,64 +378,98 @@ public void testEncodesPatchMutationWithFieldMask() {\n   }\n \n   @Test\n-  public void testEncodesServerTimestampTransformMutation() {\n+  public void testEncodesServerTimestampMutation() {\n     Mutation mutation =\n-        transformMutation(\n+        patchMutation(\n             \"docs/1\",\n             map(\n                 \"a\",\n                 com.google.firebase.firestore.FieldValue.serverTimestamp(),\n                 \"bar.baz\",\n                 com.google.firebase.firestore.FieldValue.serverTimestamp()));\n-\n     Write expected =\n         Write.newBuilder()\n-            .setTransform(\n-                DocumentTransform.newBuilder()\n-                    .setDocument(\"projects/p/databases/d/documents/docs/1\")\n-                    .addFieldTransforms(\n-                        DocumentTransform.FieldTransform.newBuilder()\n-                            .setFieldPath(\"a\")\n-                            .setSetToServerValue(\n-                                DocumentTransform.FieldTransform.ServerValue.REQUEST_TIME))\n-                    .addFieldTransforms(\n-                        DocumentTransform.FieldTransform.newBuilder()\n-                            .setFieldPath(\"bar.baz\")\n-                            .setSetToServerValue(\n-                                DocumentTransform.FieldTransform.ServerValue.REQUEST_TIME)))\n+            .setUpdate(Document.newBuilder().setName(\"projects/p/databases/d/documents/docs/1\"))\n+            .setUpdateMask(DocumentMask.newBuilder().build())\n+            .addUpdateTransforms(\n+                FieldTransform.newBuilder()\n+                    .setFieldPath(\"a\")\n+                    .setSetToServerValue(ServerValue.REQUEST_TIME))\n+            .addUpdateTransforms(\n+                FieldTransform.newBuilder()\n+                    .setFieldPath(\"bar.baz\")\n+                    .setSetToServerValue(ServerValue.REQUEST_TIME))\n             .setCurrentDocument(Precondition.newBuilder().setExists(true))\n             .build();\n+    assertRoundTripForMutation(mutation, expected);\n \n+    mutation =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "283773ff7fd34031619b3acafd88bae90f33c5ed"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b82f47114f237ee5523a282c21011c7a2e519732", "author": {"user": {"login": "thebrianchen", "name": "Brian Chen"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/b82f47114f237ee5523a282c21011c7a2e519732", "committedDate": "2020-12-17T18:08:23Z", "message": "resolve comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "107e91111fb449bcf881eb8902a2954724591dd2", "author": {"user": {"login": "thebrianchen", "name": "Brian Chen"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/107e91111fb449bcf881eb8902a2954724591dd2", "committedDate": "2020-12-17T20:35:14Z", "message": "remove builder usage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0OTk1NTEx", "url": "https://github.com/firebase/firebase-android-sdk/pull/2262#pullrequestreview-554995511", "createdAt": "2020-12-17T21:18:46Z", "commit": {"oid": "107e91111fb449bcf881eb8902a2954724591dd2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c1b565246f05cd8920ad5ceab00d65fd582c7d6", "author": {"user": {"login": "thebrianchen", "name": "Brian Chen"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/8c1b565246f05cd8920ad5ceab00d65fd582c7d6", "committedDate": "2020-12-17T22:17:05Z", "message": "fix nits"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2352, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}