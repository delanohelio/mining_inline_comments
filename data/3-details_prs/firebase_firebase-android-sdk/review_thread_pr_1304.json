{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjQ4NDEx", "number": 1304, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMjo1NDoxOVrODkdD0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMToxOToyMlrOE0jcdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTUxNDQwOnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigComponent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMjo1NDoxOVrOFwyVmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozMDowOFrOGxgH7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwMDY5OA==", "bodyText": "Can we rename this function or alias it for personalization", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r386700698", "createdAt": "2020-03-02T22:54:19Z", "author": {"login": "ashwinraghav"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigComponent.java", "diffHunk": "@@ -187,6 +195,7 @@ synchronized FirebaseRemoteConfig get(\n               firebaseApp,\n               firebaseInstanceId,\n               isAbtSupported(firebaseApp, namespace) ? firebaseAbt : null,\n+              isAbtSupported(firebaseApp, namespace) ? firebasePersonalization : null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf6e1e109abcf8c732636f53bfce25c7696a59b1"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1OTcyNw==", "bodyText": "Moved it out to getPersonalization().", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r454559727", "createdAt": "2020-07-14T18:30:08Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigComponent.java", "diffHunk": "@@ -187,6 +195,7 @@ synchronized FirebaseRemoteConfig get(\n               firebaseApp,\n               firebaseInstanceId,\n               isAbtSupported(firebaseApp, namespace) ? firebaseAbt : null,\n+              isAbtSupported(firebaseApp, namespace) ? firebasePersonalization : null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwMDY5OA=="}, "originalCommit": {"oid": "bf6e1e109abcf8c732636f53bfce25c7696a59b1"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTUxNzY3OnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigRegistrar.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMjo1NToyM1rOFwyXeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozMDoxM1rOGxgIOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwMTE3Ng==", "bodyText": "Is the plan here for RC to fail hard if this component is unavailable. If this is an optional dep, then this should be optional", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r386701176", "createdAt": "2020-03-02T22:55:23Z", "author": {"login": "ashwinraghav"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigRegistrar.java", "diffHunk": "@@ -45,6 +46,7 @@\n             .add(Dependency.required(FirebaseApp.class))\n             .add(Dependency.required(FirebaseInstanceId.class))\n             .add(Dependency.required(AbtComponent.class))\n+            .add(Dependency.required(PersonalizationComponent.class))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf6e1e109abcf8c732636f53bfce25c7696a59b1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1OTgwMw==", "bodyText": "Removed the separate PersonalizationComponent and just put everything into RC itself.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r454559803", "createdAt": "2020-07-14T18:30:13Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigRegistrar.java", "diffHunk": "@@ -45,6 +46,7 @@\n             .add(Dependency.required(FirebaseApp.class))\n             .add(Dependency.required(FirebaseInstanceId.class))\n             .add(Dependency.required(AbtComponent.class))\n+            .add(Dependency.required(PersonalizationComponent.class))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwMTE3Ng=="}, "originalCommit": {"oid": "bf6e1e109abcf8c732636f53bfce25c7696a59b1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTY5NDcwOnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoxNDozNFrOFw0Cqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozMDoxNlrOGxgIdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyODYxOQ==", "bodyText": "It is not clear why the personalization SDK needs to know anything at this stage. That seems like an optimization", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r386728619", "createdAt": "2020-03-03T00:14:34Z", "author": {"login": "ashwinraghav"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -773,6 +791,41 @@ void updateAbtWithActivatedExperiments(@NonNull JSONArray abtExperiments) {\n     return experimentInfoMaps;\n   }\n \n+  /**\n+   * Notifies the Firebase Personalization SDK about a get() call.\n+   *\n+   * @hide\n+   */\n+  void pullArm(String key) {\n+    if (firebasePersonalization != null) {\n+      // If there is no firebasePersonalization instance, then this FRC is either in a non-3P\n+      // namespace or in a non-main FirebaseApp, so there is no reason to call Personalization.\n+      // For more info: RemoteConfigComponent#isAbtSupported.\n+      executor.execute(() -> firebasePersonalization.pullArm(key));\n+    }\n+  }\n+\n+  /**\n+   * Notifies the Firebase Personalization SDK about activated metadata.\n+   *\n+   * @hide\n+   */\n+  void updatePersonalizationWithActivatedMetadata(@NonNull ConfigContainer configs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf6e1e109abcf8c732636f53bfce25c7696a59b1"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1OTg2MA==", "bodyText": "Yeah, I guess it is. Removed.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r454559860", "createdAt": "2020-07-14T18:30:16Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -773,6 +791,41 @@ void updateAbtWithActivatedExperiments(@NonNull JSONArray abtExperiments) {\n     return experimentInfoMaps;\n   }\n \n+  /**\n+   * Notifies the Firebase Personalization SDK about a get() call.\n+   *\n+   * @hide\n+   */\n+  void pullArm(String key) {\n+    if (firebasePersonalization != null) {\n+      // If there is no firebasePersonalization instance, then this FRC is either in a non-3P\n+      // namespace or in a non-main FirebaseApp, so there is no reason to call Personalization.\n+      // For more info: RemoteConfigComponent#isAbtSupported.\n+      executor.execute(() -> firebasePersonalization.pullArm(key));\n+    }\n+  }\n+\n+  /**\n+   * Notifies the Firebase Personalization SDK about activated metadata.\n+   *\n+   * @hide\n+   */\n+  void updatePersonalizationWithActivatedMetadata(@NonNull ConfigContainer configs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyODYxOQ=="}, "originalCommit": {"oid": "bf6e1e109abcf8c732636f53bfce25c7696a59b1"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTc0MzQyOnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDozODo1OFrOFw0fsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozMDoyMFrOGxgItQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNjA0OQ==", "bodyText": "We are essentially doing a write-on-read. Developers are used to treating the get*() APIs as idempotent functions. This will no longer be true. Are you ok if GA counts these as independent events.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r386736049", "createdAt": "2020-03-03T00:38:58Z", "author": {"login": "ashwinraghav"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -358,6 +368,7 @@ public boolean activateFetched() {\n    */\n   @NonNull\n   public String getString(@NonNull String key) {\n+    pullArm(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf6e1e109abcf8c732636f53bfce25c7696a59b1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0MjIzNA==", "bodyText": "It seems like we are going to build a variety of products built on top of config that would require this feedback loop to be established. I feel like a filter pattern or a listener pattern is a good candidate to consider here, at the risk of optimizing too early.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r386742234", "createdAt": "2020-03-03T01:00:24Z", "author": {"login": "ashwinraghav"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -358,6 +368,7 @@ public boolean activateFetched() {\n    */\n   @NonNull\n   public String getString(@NonNull String key) {\n+    pullArm(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNjA0OQ=="}, "originalCommit": {"oid": "bf6e1e109abcf8c732636f53bfce25c7696a59b1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1OTkyNQ==", "bodyText": "Yeah, we're OK with GA counting these as separate events. Implemented the listener pattern.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r454559925", "createdAt": "2020-07-14T18:30:20Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/FirebaseRemoteConfig.java", "diffHunk": "@@ -358,6 +368,7 @@ public boolean activateFetched() {\n    */\n   @NonNull\n   public String getString(@NonNull String key) {\n+    pullArm(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNjA0OQ=="}, "originalCommit": {"oid": "bf6e1e109abcf8c732636f53bfce25c7696a59b1"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjM5MTE5OnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/BiConsumer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTozMDo1NVrOG7yNow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzowNTo0NFrOHCpoRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0MTg1OQ==", "bodyText": "Can we move this interface to the internal package?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r465341859", "createdAt": "2020-08-04T21:30:55Z", "author": {"login": "danasilver"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/BiConsumer.java", "diffHunk": "@@ -0,0 +1,23 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+//\n+// You may obtain a copy of the License at\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.remoteconfig;\n+\n+import androidx.annotation.Nullable;\n+\n+/** A port of {@link java.util.function.BiConsumer}, a generic consumer of values. */\n+@FunctionalInterface\n+public interface BiConsumer<T, U> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d359072c59c1bcbf64672954dac1db5add8da9fd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0MTI1NA==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r472541254", "createdAt": "2020-08-18T23:05:44Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/BiConsumer.java", "diffHunk": "@@ -0,0 +1,23 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+//\n+// You may obtain a copy of the License at\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.remoteconfig;\n+\n+import androidx.annotation.Nullable;\n+\n+/** A port of {@link java.util.function.BiConsumer}, a generic consumer of values. */\n+@FunctionalInterface\n+public interface BiConsumer<T, U> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0MTg1OQ=="}, "originalCommit": {"oid": "d359072c59c1bcbf64672954dac1db5add8da9fd"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzQ2MzIwOnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigComponent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMDoyODo1M1rOHMQiMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMDoyODo1M1rOHMQiMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYxNTg1OA==", "bodyText": "Thinking: the pattern of encapsulating P13n logging behind a listener interface seems nice and clean, but it does require passage of the whole config to the listener, which kinda breaks the law of demeter.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r482615858", "createdAt": "2020-09-03T00:28:53Z", "author": {"login": "erikeldridge"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigComponent.java", "diffHunk": "@@ -153,6 +154,14 @@ public synchronized FirebaseRemoteConfig get(String namespace) {\n     ConfigCacheClient activatedCacheClient = getCacheClient(namespace, ACTIVATE_FILE_NAME);\n     ConfigCacheClient defaultsCacheClient = getCacheClient(namespace, DEFAULTS_FILE_NAME);\n     ConfigMetadataClient metadataClient = getMetadataClient(context, appId, namespace);\n+\n+    ConfigGetParameterHandler getHandler = getGetHandler(activatedCacheClient, defaultsCacheClient);\n+    Personalization personalization =\n+        getPersonalization(firebaseApp, namespace, analyticsConnector);\n+    if (personalization != null) {\n+      getHandler.addListener(personalization::logArmActive);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzUxMjM5OnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMDo0Njo0OFrOHMRCxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoyNjoyMVrOHXi72w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYyNDE5Ng==", "bodyText": "I don't think we want to log static default value usage to P13n, ie it's not personalized. I think we want something like:\npublic String getString(String key) {\n  String activatedString = getStringFromCache(activatedConfigsCache, key);\n  if (activatedString != null) {\n    callListeners(key, ....);\n    return activatedString;\n  }\n  ...\n\nSame for all the other typed getters below", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r482624196", "createdAt": "2020-09-03T00:46:48Z", "author": {"login": "erikeldridge"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "diffHunk": "@@ -92,14 +102,14 @@ public ConfigGetParameterHandler(\n    * @param key A Firebase Remote Config parameter key.\n    */\n   public String getString(String key) {\n-    String activatedString = getStringFromCache(activatedConfigsCache, key);\n-    if (activatedString != null) {\n-      return activatedString;\n+    ConfigAndValue configAndValue = getStringFromCache(activatedConfigsCache, key);\n+    if (configAndValue == null) {\n+      configAndValue = getStringFromCache(defaultConfigsCache, key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ1MTY3NQ==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r494451675", "createdAt": "2020-09-24T16:26:21Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "diffHunk": "@@ -92,14 +102,14 @@ public ConfigGetParameterHandler(\n    * @param key A Firebase Remote Config parameter key.\n    */\n   public String getString(String key) {\n-    String activatedString = getStringFromCache(activatedConfigsCache, key);\n-    if (activatedString != null) {\n-      return activatedString;\n+    ConfigAndValue configAndValue = getStringFromCache(activatedConfigsCache, key);\n+    if (configAndValue == null) {\n+      configAndValue = getStringFromCache(defaultConfigsCache, key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYyNDE5Ng=="}, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzU1MTU2OnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/BiConsumer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMDo1OToyNFrOHMReKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoyMDowMVrOHXisDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzMTIxMQ==", "bodyText": "Thinking out loud: re licensing, GWT is open source and does something similar https://github.com/gwtproject/gwt/blob/f031aba1e5aff65143005de841a491b42fe1031a/user/super/com/google/gwt/emul/java/util/function/BiConsumer.java", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r482631211", "createdAt": "2020-09-03T00:59:24Z", "author": {"login": "erikeldridge"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/BiConsumer.java", "diffHunk": "@@ -0,0 +1,23 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+//\n+// You may obtain a copy of the License at\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import androidx.annotation.Nullable;\n+\n+/** A port of {@link java.util.function.BiConsumer}, a generic consumer of values. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0NzYyOQ==", "bodyText": "Turns out they also have this in com.google.android.gms, so used that one instead.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r494447629", "createdAt": "2020-09-24T16:20:01Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/BiConsumer.java", "diffHunk": "@@ -0,0 +1,23 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+//\n+// You may obtain a copy of the License at\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import androidx.annotation.Nullable;\n+\n+/** A port of {@link java.util.function.BiConsumer}, a generic consumer of values. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzMTIxMQ=="}, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzU1OTM0OnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/Personalization.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMTowNDowNVrOHMRivA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoyNjozOFrOHXi8jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzMjM4MA==", "bodyText": "As above, if this is an error case, I'd recommend logging something to help customers debug unexpected behavior.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r482632380", "createdAt": "2020-09-03T01:04:05Z", "author": {"login": "erikeldridge"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/Personalization.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+//\n+// You may obtain a copy of the License at\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import static com.google.firebase.remoteconfig.internal.ConfigContainer.CONFIGS_KEY;\n+import static com.google.firebase.remoteconfig.internal.ConfigContainer.PERSONALIZATION_METADATA_KEY;\n+\n+import android.os.Bundle;\n+import androidx.annotation.NonNull;\n+import com.google.firebase.analytics.connector.AnalyticsConnector;\n+import org.json.JSONObject;\n+\n+public class Personalization {\n+  static final String ANALYTICS_ORIGIN_PERSONALIZATION = \"fp\";\n+  static final String ANALYTICS_PULL_EVENT = \"_fpc\";\n+  static final String ARM_KEY = \"_fpid\";\n+  static final String ARM_VALUE = \"_fpct\";\n+  static final String PERSONALIZATION_ID = \"personalizationId\";\n+\n+  /** The app's Firebase Analytics client. */\n+  private final AnalyticsConnector analyticsConnector;\n+\n+  /** Creates an instance of {@code Personalization}. */\n+  public Personalization(@NonNull AnalyticsConnector analyticsConnector) {\n+    this.analyticsConnector = analyticsConnector;\n+  }\n+  /**\n+   * Called when an arm is pulled, and uses Google Analytics for Firebase to log it if it's a\n+   * Personalization parameter.\n+   *\n+   * @param key Remote Config parameter\n+   * @param configContainer JSON of {@link ConfigContainer}\n+   */\n+  public void logArmActive(@NonNull String key, @NonNull JSONObject configContainer) {\n+    JSONObject ids = configContainer.optJSONObject(PERSONALIZATION_METADATA_KEY);\n+    JSONObject values = configContainer.optJSONObject(CONFIGS_KEY);\n+    if (ids == null || values == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ1MTg1NA==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r494451854", "createdAt": "2020-09-24T16:26:38Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/Personalization.java", "diffHunk": "@@ -0,0 +1,63 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+//\n+// You may obtain a copy of the License at\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import static com.google.firebase.remoteconfig.internal.ConfigContainer.CONFIGS_KEY;\n+import static com.google.firebase.remoteconfig.internal.ConfigContainer.PERSONALIZATION_METADATA_KEY;\n+\n+import android.os.Bundle;\n+import androidx.annotation.NonNull;\n+import com.google.firebase.analytics.connector.AnalyticsConnector;\n+import org.json.JSONObject;\n+\n+public class Personalization {\n+  static final String ANALYTICS_ORIGIN_PERSONALIZATION = \"fp\";\n+  static final String ANALYTICS_PULL_EVENT = \"_fpc\";\n+  static final String ARM_KEY = \"_fpid\";\n+  static final String ARM_VALUE = \"_fpct\";\n+  static final String PERSONALIZATION_ID = \"personalizationId\";\n+\n+  /** The app's Firebase Analytics client. */\n+  private final AnalyticsConnector analyticsConnector;\n+\n+  /** Creates an instance of {@code Personalization}. */\n+  public Personalization(@NonNull AnalyticsConnector analyticsConnector) {\n+    this.analyticsConnector = analyticsConnector;\n+  }\n+  /**\n+   * Called when an arm is pulled, and uses Google Analytics for Firebase to log it if it's a\n+   * Personalization parameter.\n+   *\n+   * @param key Remote Config parameter\n+   * @param configContainer JSON of {@link ConfigContainer}\n+   */\n+  public void logArmActive(@NonNull String key, @NonNull JSONObject configContainer) {\n+    JSONObject ids = configContainer.optJSONObject(PERSONALIZATION_METADATA_KEY);\n+    JSONObject values = configContainer.optJSONObject(CONFIGS_KEY);\n+    if (ids == null || values == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzMjM4MA=="}, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzU2ODA5OnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigComponent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMTowODo1OVrOHMRnyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoxNjowNVrOHXiiBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzMzY3Mg==", "bodyText": "Any risk of a listener being added multiple times? Should the underlying collection of listeners be a Set?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r482633672", "createdAt": "2020-09-03T01:08:59Z", "author": {"login": "erikeldridge"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigComponent.java", "diffHunk": "@@ -153,6 +154,14 @@ public synchronized FirebaseRemoteConfig get(String namespace) {\n     ConfigCacheClient activatedCacheClient = getCacheClient(namespace, ACTIVATE_FILE_NAME);\n     ConfigCacheClient defaultsCacheClient = getCacheClient(namespace, DEFAULTS_FILE_NAME);\n     ConfigMetadataClient metadataClient = getMetadataClient(context, appId, namespace);\n+\n+    ConfigGetParameterHandler getHandler = getGetHandler(activatedCacheClient, defaultsCacheClient);\n+    Personalization personalization =\n+        getPersonalization(firebaseApp, namespace, analyticsConnector);\n+    if (personalization != null) {\n+      getHandler.addListener(personalization::logArmActive);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0NTA2MQ==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r494445061", "createdAt": "2020-09-24T16:16:05Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/RemoteConfigComponent.java", "diffHunk": "@@ -153,6 +154,14 @@ public synchronized FirebaseRemoteConfig get(String namespace) {\n     ConfigCacheClient activatedCacheClient = getCacheClient(namespace, ACTIVATE_FILE_NAME);\n     ConfigCacheClient defaultsCacheClient = getCacheClient(namespace, DEFAULTS_FILE_NAME);\n     ConfigMetadataClient metadataClient = getMetadataClient(context, appId, namespace);\n+\n+    ConfigGetParameterHandler getHandler = getGetHandler(activatedCacheClient, defaultsCacheClient);\n+    Personalization personalization =\n+        getPersonalization(firebaseApp, namespace, analyticsConnector);\n+    if (personalization != null) {\n+      getHandler.addListener(personalization::logArmActive);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzMzY3Mg=="}, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzU4NzEwOnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigFetchHttpClient.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMToxODo0OVrOHMRyQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjoyMTowOFrOHtryDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzNjM1NA==", "bodyText": "I'd recommend logging something anywhere we suppress an error. Silent failures limit the details customers can provide in support requests.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r482636354", "createdAt": "2020-09-03T01:18:49Z", "author": {"login": "erikeldridge"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigFetchHttpClient.java", "diffHunk": "@@ -400,6 +401,16 @@ private static ConfigContainer extractConfigs(JSONObject fetchResponse, Date fet\n         containerBuilder.withAbtExperiments(experimentDescriptions);\n       }\n \n+      JSONObject personalizationMetadata = null;\n+      try {\n+        personalizationMetadata = fetchResponse.getJSONObject(PERSONALIZATION_METADATA);\n+      } catch (JSONException e) {\n+        // Do nothing if personalizationMetadata does not exist.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0Nzc4NA==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r494447784", "createdAt": "2020-09-24T16:20:15Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigFetchHttpClient.java", "diffHunk": "@@ -400,6 +401,16 @@ private static ConfigContainer extractConfigs(JSONObject fetchResponse, Date fet\n         containerBuilder.withAbtExperiments(experimentDescriptions);\n       }\n \n+      JSONObject personalizationMetadata = null;\n+      try {\n+        personalizationMetadata = fetchResponse.getJSONObject(PERSONALIZATION_METADATA);\n+      } catch (JSONException e) {\n+        // Do nothing if personalizationMetadata does not exist.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzNjM1NA=="}, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgyNzQzNQ==", "bodyText": "Thx\nThinking: getJSONObject throws if the key doesn't exist, which will be true for anyone not using P13n. We could check for the key first w has, but since this code only runs during fetch, I don't think it'll be spammy enough to justify that.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r497827435", "createdAt": "2020-09-30T22:05:04Z", "author": {"login": "erikeldridge"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigFetchHttpClient.java", "diffHunk": "@@ -400,6 +401,16 @@ private static ConfigContainer extractConfigs(JSONObject fetchResponse, Date fet\n         containerBuilder.withAbtExperiments(experimentDescriptions);\n       }\n \n+      JSONObject personalizationMetadata = null;\n+      try {\n+        personalizationMetadata = fetchResponse.getJSONObject(PERSONALIZATION_METADATA);\n+      } catch (JSONException e) {\n+        // Do nothing if personalizationMetadata does not exist.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzNjM1NA=="}, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2MzAwMQ==", "bodyText": "Some other thoughts: we follow this getJSONObject pattern for other field above but don't log if there's nothing to get. RC had bug reports of spammy logging when we were logging warnings in the expected case for performance monitoring, so using at least the INFO level seems appropriate. I might even use DEBUG here to make it easier to hide this log message for users not using p13n.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r498463001", "createdAt": "2020-10-01T19:18:01Z", "author": {"login": "danasilver"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigFetchHttpClient.java", "diffHunk": "@@ -400,6 +401,16 @@ private static ConfigContainer extractConfigs(JSONObject fetchResponse, Date fet\n         containerBuilder.withAbtExperiments(experimentDescriptions);\n       }\n \n+      JSONObject personalizationMetadata = null;\n+      try {\n+        personalizationMetadata = fetchResponse.getJSONObject(PERSONALIZATION_METADATA);\n+      } catch (JSONException e) {\n+        // Do nothing if personalizationMetadata does not exist.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzNjM1NA=="}, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2NTI5NQ==", "bodyText": "In general, if there's an error and it's actionable, I think we'd be wise to log a warning. In this case, it sounds like the common case will be to throw, so it's borderline not an error, and only actionable for folks using the feature, so it should not be WARN level. I guess in this case, we can't differentiate between an error case of missing metadata and the common case of not using the feature. DEBUG probably makes sense since it's a suppressed error, which folks would be looking for when debugging.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r517665295", "createdAt": "2020-11-04T22:21:08Z", "author": {"login": "erikeldridge"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigFetchHttpClient.java", "diffHunk": "@@ -400,6 +401,16 @@ private static ConfigContainer extractConfigs(JSONObject fetchResponse, Date fet\n         containerBuilder.withAbtExperiments(experimentDescriptions);\n       }\n \n+      JSONObject personalizationMetadata = null;\n+      try {\n+        personalizationMetadata = fetchResponse.getJSONObject(PERSONALIZATION_METADATA);\n+      } catch (JSONException e) {\n+        // Do nothing if personalizationMetadata does not exist.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzNjM1NA=="}, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzYwNDg2OnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMToyODo0OVrOHMR8gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMToyODo0OVrOHMR8gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYzODk3OQ==", "bodyText": "Thinking: I like this enforcement of the listener being called on a separate thread, since this is running in the low-latency get layer. I am wary of customers spawning threads unwittingly while calling get, but I think we can optimize if/when it becomes an issue.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r482638979", "createdAt": "2020-09-03T01:28:49Z", "author": {"login": "erikeldridge"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "diffHunk": "@@ -325,6 +337,33 @@ public FirebaseRemoteConfigValue getValue(String key) {\n     return allConfigs;\n   }\n \n+  /**\n+   * Adds a listener that will be called whenever one of the get methods is called.\n+   *\n+   * @param listener function that takes in the parameter key and the {@link ConfigContainer} JSON\n+   */\n+  public void addListener(BiConsumer<String, JSONObject> listener) {\n+    synchronized (listeners) {\n+      listeners.add(listener);\n+    }\n+  }\n+\n+  /**\n+   * Calls all listeners in {@link #listeners}.\n+   *\n+   * @param key parameter key that was retrieved\n+   * @param container the container the key was retrieved from\n+   */\n+  private void callListeners(String key, ConfigContainer container) {\n+    JSONObject configs = container.getContainer();\n+\n+    synchronized (listeners) {\n+      for (BiConsumer<String, JSONObject> listener : listeners) {\n+        executor.execute(() -> listener.accept(key, configs));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzYxNjA3OnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMTozNDo0OFrOHMSC0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoyNDo1OFrOHXi4PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0MDU5Mg==", "bodyText": "Given the config is available as activatedConfigsCache it's unclear to me why we need the ConfigAndValue tuple, eg as opposed to:\npublic String getString(String key) {\n  String activatedString = getStringFromCache(activatedConfigsCache, key);\n  if (activatedString != null) {\n    ConfigContainer activatedContainer = getConfigsFromCache(activatedConfigsCache);\n    callListeners( ... activatedContainer);\n    return activatedString;\n  }\n  ...", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r482640592", "createdAt": "2020-09-03T01:34:48Z", "author": {"login": "erikeldridge"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "diffHunk": "@@ -92,14 +102,14 @@ public ConfigGetParameterHandler(\n    * @param key A Firebase Remote Config parameter key.\n    */\n   public String getString(String key) {\n-    String activatedString = getStringFromCache(activatedConfigsCache, key);\n-    if (activatedString != null) {\n-      return activatedString;\n+    ConfigAndValue configAndValue = getStringFromCache(activatedConfigsCache, key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ1MDc0OA==", "bodyText": "That works too. I figured we're already calling getConfigsFromCache() in getStringFromCache(), so it was easier to just return it, but I guess it is ugly.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r494450748", "createdAt": "2020-09-24T16:24:58Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "diffHunk": "@@ -92,14 +102,14 @@ public ConfigGetParameterHandler(\n    * @param key A Firebase Remote Config parameter key.\n    */\n   public String getString(String key) {\n-    String activatedString = getStringFromCache(activatedConfigsCache, key);\n-    if (activatedString != null) {\n-      return activatedString;\n+    ConfigAndValue configAndValue = getStringFromCache(activatedConfigsCache, key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0MDU5Mg=="}, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDc4NjM3OnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMTo1NToxNVrOHRn7Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoyNjoxMVrOHXi7YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI0MjAxNA==", "bodyText": "Thinking: customers can also get params via getAll ( https://firebase.google.com/docs/reference/android/com/google/firebase/remoteconfig/FirebaseRemoteConfig#getAll() ), which won't log. It feels relatively straightforward to say that's an unsupported advanced use-case, but it is an inconsistency.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r488242014", "createdAt": "2020-09-14T21:55:15Z", "author": {"login": "erikeldridge"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "diffHunk": "@@ -92,14 +102,14 @@ public ConfigGetParameterHandler(\n    * @param key A Firebase Remote Config parameter key.\n    */\n   public String getString(String key) {\n-    String activatedString = getStringFromCache(activatedConfigsCache, key);\n-    if (activatedString != null) {\n-      return activatedString;\n+    ConfigAndValue configAndValue = getStringFromCache(activatedConfigsCache, key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ1MTU1Mg==", "bodyText": "getAll() relies on getValue(), which does log, so this case is supported.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r494451552", "createdAt": "2020-09-24T16:26:11Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "diffHunk": "@@ -92,14 +102,14 @@ public ConfigGetParameterHandler(\n    * @param key A Firebase Remote Config parameter key.\n    */\n   public String getString(String key) {\n-    String activatedString = getStringFromCache(activatedConfigsCache, key);\n-    if (activatedString != null) {\n-      return activatedString;\n+    ConfigAndValue configAndValue = getStringFromCache(activatedConfigsCache, key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI0MjAxNA=="}, "originalCommit": {"oid": "103f57a051198cb47e18e7e9b926a659b027808c"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDc2OTI0OnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzoyMzowM1rOHddQIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDozMjowMFrOHdegmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MDAxOQ==", "bodyText": "Is this used anymore?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r500650019", "createdAt": "2020-10-06T23:23:03Z", "author": {"login": "danasilver"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigContainer.java", "diffHunk": "@@ -80,7 +89,12 @@ static ConfigContainer copyOf(JSONObject containerJson) throws JSONException {\n     return new ConfigContainer(\n         containerJson.getJSONObject(CONFIGS_KEY),\n         new Date(containerJson.getLong(FETCH_TIME_KEY)),\n-        containerJson.getJSONArray(ABT_EXPERIMENTS_KEY));\n+        containerJson.getJSONArray(ABT_EXPERIMENTS_KEY),\n+        containerJson.getJSONObject(PERSONALIZATION_METADATA_KEY));\n+  }\n+\n+  JSONObject getContainer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f719dc830b0a383dd46aa24739d882f9007efe2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MDYxOA==", "bodyText": "Nope.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r500670618", "createdAt": "2020-10-07T00:32:00Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigContainer.java", "diffHunk": "@@ -80,7 +89,12 @@ static ConfigContainer copyOf(JSONObject containerJson) throws JSONException {\n     return new ConfigContainer(\n         containerJson.getJSONObject(CONFIGS_KEY),\n         new Date(containerJson.getLong(FETCH_TIME_KEY)),\n-        containerJson.getJSONArray(ABT_EXPERIMENTS_KEY));\n+        containerJson.getJSONArray(ABT_EXPERIMENTS_KEY),\n+        containerJson.getJSONObject(PERSONALIZATION_METADATA_KEY));\n+  }\n+\n+  JSONObject getContainer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MDAxOQ=="}, "originalCommit": {"oid": "7f719dc830b0a383dd46aa24739d882f9007efe2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDc3OTU0OnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/Personalization.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzoyODo1NFrOHddWjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDozMzowNVrOHdehxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MTY2Mw==", "bodyText": "What do you think of calling this getPersonalizationMetadata since it's used statically without the Personalization class as context?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r500651663", "createdAt": "2020-10-06T23:28:54Z", "author": {"login": "danasilver"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/Personalization.java", "diffHunk": "@@ -0,0 +1,67 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+//\n+// You may obtain a copy of the License at\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import android.os.Bundle;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.analytics.connector.AnalyticsConnector;\n+import org.json.JSONObject;\n+\n+public class Personalization {\n+  static final String ANALYTICS_ORIGIN_PERSONALIZATION = \"fp\";\n+  static final String ANALYTICS_PULL_EVENT = \"_fpc\";\n+  static final String ARM_KEY = \"_fpid\";\n+  static final String ARM_VALUE = \"_fpct\";\n+  static final String PERSONALIZATION_ID = \"personalizationId\";\n+\n+  /** The app's Firebase Analytics client. */\n+  private final AnalyticsConnector analyticsConnector;\n+\n+  /** Creates an instance of {@code Personalization}. */\n+  public Personalization(@NonNull AnalyticsConnector analyticsConnector) {\n+    this.analyticsConnector = analyticsConnector;\n+  }\n+\n+  /**\n+   * Called when an arm is pulled, and uses Google Analytics for Firebase to log it if it's a\n+   * Personalization parameter.\n+   *\n+   * @param value Remote Config parameter value\n+   * @param metadata JSON of Personalization metadata\n+   */\n+  public void logArmActive(@NonNull String value, JSONObject metadata) {\n+    if (metadata == null) {\n+      return;\n+    }\n+\n+    Bundle params = new Bundle();\n+    params.putString(ARM_KEY, metadata.optString(PERSONALIZATION_ID));\n+    params.putString(ARM_VALUE, value);\n+    analyticsConnector.logEvent(ANALYTICS_ORIGIN_PERSONALIZATION, ANALYTICS_PULL_EVENT, params);\n+  }\n+\n+  /**\n+   * Gets the Personalization metadata associated with {@code key}.\n+   *\n+   * @param key Remote Config parameter\n+   * @param configContainer cache of {@link ConfigContainer}\n+   */\n+  @Nullable\n+  public static JSONObject getMetadata(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f719dc830b0a383dd46aa24739d882f9007efe2"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MDkxNg==", "bodyText": "Prefixed them with Personalization. so there's context.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r500670916", "createdAt": "2020-10-07T00:33:05Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/Personalization.java", "diffHunk": "@@ -0,0 +1,67 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+//\n+// You may obtain a copy of the License at\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import android.os.Bundle;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.analytics.connector.AnalyticsConnector;\n+import org.json.JSONObject;\n+\n+public class Personalization {\n+  static final String ANALYTICS_ORIGIN_PERSONALIZATION = \"fp\";\n+  static final String ANALYTICS_PULL_EVENT = \"_fpc\";\n+  static final String ARM_KEY = \"_fpid\";\n+  static final String ARM_VALUE = \"_fpct\";\n+  static final String PERSONALIZATION_ID = \"personalizationId\";\n+\n+  /** The app's Firebase Analytics client. */\n+  private final AnalyticsConnector analyticsConnector;\n+\n+  /** Creates an instance of {@code Personalization}. */\n+  public Personalization(@NonNull AnalyticsConnector analyticsConnector) {\n+    this.analyticsConnector = analyticsConnector;\n+  }\n+\n+  /**\n+   * Called when an arm is pulled, and uses Google Analytics for Firebase to log it if it's a\n+   * Personalization parameter.\n+   *\n+   * @param value Remote Config parameter value\n+   * @param metadata JSON of Personalization metadata\n+   */\n+  public void logArmActive(@NonNull String value, JSONObject metadata) {\n+    if (metadata == null) {\n+      return;\n+    }\n+\n+    Bundle params = new Bundle();\n+    params.putString(ARM_KEY, metadata.optString(PERSONALIZATION_ID));\n+    params.putString(ARM_VALUE, value);\n+    analyticsConnector.logEvent(ANALYTICS_ORIGIN_PERSONALIZATION, ANALYTICS_PULL_EVENT, params);\n+  }\n+\n+  /**\n+   * Gets the Personalization metadata associated with {@code key}.\n+   *\n+   * @param key Remote Config parameter\n+   * @param configContainer cache of {@link ConfigContainer}\n+   */\n+  @Nullable\n+  public static JSONObject getMetadata(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MTY2Mw=="}, "originalCommit": {"oid": "7f719dc830b0a383dd46aa24739d882f9007efe2"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDc4NTg2OnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzozMTo1NFrOHddaTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDozMzoyMVrOHdeh_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MjYyMw==", "bodyText": "Wonder if there's a more precise word than retrieved here? I think it refers to the value being retrieved by the developer via a get() call, right?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r500652623", "createdAt": "2020-10-06T23:31:54Z", "author": {"login": "danasilver"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "diffHunk": "@@ -325,6 +347,31 @@ public FirebaseRemoteConfigValue getValue(String key) {\n     return allConfigs;\n   }\n \n+  /**\n+   * Adds a listener that will be called whenever one of the get methods is called.\n+   *\n+   * @param listener function that takes in the parameter value and Personalization metadata\n+   */\n+  public void addListener(BiConsumer<String, JSONObject> listener) {\n+    synchronized (listeners) {\n+      listeners.add(listener);\n+    }\n+  }\n+\n+  /**\n+   * Calls all listeners in {@link #listeners}.\n+   *\n+   * @param value parameter value that was retrieved", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f719dc830b0a383dd46aa24739d882f9007efe2"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3MDk3Mg==", "bodyText": "Reworded.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r500670972", "createdAt": "2020-10-07T00:33:21Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "diffHunk": "@@ -325,6 +347,31 @@ public FirebaseRemoteConfigValue getValue(String key) {\n     return allConfigs;\n   }\n \n+  /**\n+   * Adds a listener that will be called whenever one of the get methods is called.\n+   *\n+   * @param listener function that takes in the parameter value and Personalization metadata\n+   */\n+  public void addListener(BiConsumer<String, JSONObject> listener) {\n+    synchronized (listeners) {\n+      listeners.add(listener);\n+    }\n+  }\n+\n+  /**\n+   * Calls all listeners in {@link #listeners}.\n+   *\n+   * @param value parameter value that was retrieved", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MjYyMw=="}, "originalCommit": {"oid": "7f719dc830b0a383dd46aa24739d882f9007efe2"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjcxMDQ0OnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/Personalization.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0NToyMlrOHgni0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzo1NDoxMlrOHhBP9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2NDM3MA==", "bodyText": "It's not blocking but might be worth thinking about long-term: why is json passed here? it does not look type-safe, given that there are multiple checks for certain keys that are expected to be in this json object. Would it make sense to create a more type-safe interface to the config?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r503964370", "createdAt": "2020-10-13T13:45:22Z", "author": {"login": "vkryachko"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/Personalization.java", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+//\n+// You may obtain a copy of the License at\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import static com.google.firebase.remoteconfig.FirebaseRemoteConfig.TAG;\n+import static com.google.firebase.remoteconfig.internal.ConfigContainer.CONFIGS_KEY;\n+import static com.google.firebase.remoteconfig.internal.ConfigContainer.PERSONALIZATION_METADATA_KEY;\n+\n+import android.os.Bundle;\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import com.google.firebase.analytics.connector.AnalyticsConnector;\n+import org.json.JSONObject;\n+\n+public class Personalization {\n+  static final String ANALYTICS_ORIGIN_PERSONALIZATION = \"fp\";\n+  static final String ANALYTICS_PULL_EVENT = \"_fpc\";\n+  static final String ARM_KEY = \"_fpid\";\n+  static final String ARM_VALUE = \"_fpct\";\n+  static final String PERSONALIZATION_ID = \"personalizationId\";\n+\n+  /** The app's Firebase Analytics client. */\n+  private final AnalyticsConnector analyticsConnector;\n+\n+  /** Creates an instance of {@code Personalization}. */\n+  public Personalization(@NonNull AnalyticsConnector analyticsConnector) {\n+    this.analyticsConnector = analyticsConnector;\n+  }\n+\n+  /**\n+   * Called when an arm is pulled, and uses Google Analytics for Firebase to log it if it's a\n+   * Personalization parameter.\n+   *\n+   * @param key Remote Config parameter\n+   * @param configContainer JSON of {@link ConfigContainer}\n+   */\n+  public void logArmActive(@NonNull String key, @NonNull JSONObject configContainer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85c80742646f69b77bd7e810da57793f11378c78"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4NTUyNg==", "bodyText": "Good point. Switched it to use ConfigContainer instead.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r504385526", "createdAt": "2020-10-14T03:54:12Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/Personalization.java", "diffHunk": "@@ -0,0 +1,72 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+//\n+// You may obtain a copy of the License at\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import static com.google.firebase.remoteconfig.FirebaseRemoteConfig.TAG;\n+import static com.google.firebase.remoteconfig.internal.ConfigContainer.CONFIGS_KEY;\n+import static com.google.firebase.remoteconfig.internal.ConfigContainer.PERSONALIZATION_METADATA_KEY;\n+\n+import android.os.Bundle;\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import com.google.firebase.analytics.connector.AnalyticsConnector;\n+import org.json.JSONObject;\n+\n+public class Personalization {\n+  static final String ANALYTICS_ORIGIN_PERSONALIZATION = \"fp\";\n+  static final String ANALYTICS_PULL_EVENT = \"_fpc\";\n+  static final String ARM_KEY = \"_fpid\";\n+  static final String ARM_VALUE = \"_fpct\";\n+  static final String PERSONALIZATION_ID = \"personalizationId\";\n+\n+  /** The app's Firebase Analytics client. */\n+  private final AnalyticsConnector analyticsConnector;\n+\n+  /** Creates an instance of {@code Personalization}. */\n+  public Personalization(@NonNull AnalyticsConnector analyticsConnector) {\n+    this.analyticsConnector = analyticsConnector;\n+  }\n+\n+  /**\n+   * Called when an arm is pulled, and uses Google Analytics for Firebase to log it if it's a\n+   * Personalization parameter.\n+   *\n+   * @param key Remote Config parameter\n+   * @param configContainer JSON of {@link ConfigContainer}\n+   */\n+  public void logArmActive(@NonNull String key, @NonNull JSONObject configContainer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2NDM3MA=="}, "originalCommit": {"oid": "85c80742646f69b77bd7e810da57793f11378c78"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTczMDA4OnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/Personalization.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNDo1NjoxNlrOHhXSSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoyNDozMlrOHlGt5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc0NjU2OA==", "bodyText": "Maybe \"{@link ConfigContainer} containing personalization metadata for {@code key}\"", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r504746568", "createdAt": "2020-10-14T14:56:16Z", "author": {"login": "danasilver"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/Personalization.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+//\n+// You may obtain a copy of the License at\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import static com.google.firebase.remoteconfig.FirebaseRemoteConfig.TAG;\n+\n+import android.os.Bundle;\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import com.google.firebase.analytics.connector.AnalyticsConnector;\n+import org.json.JSONObject;\n+\n+public class Personalization {\n+  static final String ANALYTICS_ORIGIN_PERSONALIZATION = \"fp\";\n+  static final String ANALYTICS_PULL_EVENT = \"_fpc\";\n+  static final String ARM_KEY = \"_fpid\";\n+  static final String ARM_VALUE = \"_fpct\";\n+  static final String PERSONALIZATION_ID = \"personalizationId\";\n+\n+  /** The app's Firebase Analytics client. */\n+  private final AnalyticsConnector analyticsConnector;\n+\n+  /** Creates an instance of {@code Personalization}. */\n+  public Personalization(@NonNull AnalyticsConnector analyticsConnector) {\n+    this.analyticsConnector = analyticsConnector;\n+  }\n+\n+  /**\n+   * Called when an arm is pulled, and uses Google Analytics for Firebase to log it if it's a\n+   * Personalization parameter.\n+   *\n+   * @param key Remote Config parameter\n+   * @param configContainer cache of {@link ConfigContainer}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8b301b30cfc0ce312f1746d8055898e3945d1c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2OTQxNQ==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r508669415", "createdAt": "2020-10-20T16:24:32Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/Personalization.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+//\n+// You may obtain a copy of the License at\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import static com.google.firebase.remoteconfig.FirebaseRemoteConfig.TAG;\n+\n+import android.os.Bundle;\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import com.google.firebase.analytics.connector.AnalyticsConnector;\n+import org.json.JSONObject;\n+\n+public class Personalization {\n+  static final String ANALYTICS_ORIGIN_PERSONALIZATION = \"fp\";\n+  static final String ANALYTICS_PULL_EVENT = \"_fpc\";\n+  static final String ARM_KEY = \"_fpid\";\n+  static final String ARM_VALUE = \"_fpct\";\n+  static final String PERSONALIZATION_ID = \"personalizationId\";\n+\n+  /** The app's Firebase Analytics client. */\n+  private final AnalyticsConnector analyticsConnector;\n+\n+  /** Creates an instance of {@code Personalization}. */\n+  public Personalization(@NonNull AnalyticsConnector analyticsConnector) {\n+    this.analyticsConnector = analyticsConnector;\n+  }\n+\n+  /**\n+   * Called when an arm is pulled, and uses Google Analytics for Firebase to log it if it's a\n+   * Personalization parameter.\n+   *\n+   * @param key Remote Config parameter\n+   * @param configContainer cache of {@link ConfigContainer}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc0NjU2OA=="}, "originalCommit": {"oid": "8a8b301b30cfc0ce312f1746d8055898e3945d1c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTc3MzQwOnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTowNDo0MVrOHhXsrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoyNDo0MFrOHlGuOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1MzMyNQ==", "bodyText": "The ConfigContainer is a local cache of the config, but I'm not sure it makes sense to call it a cache in this context. Maybe {@link ConfigContainer} containing {@code key}", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r504753325", "createdAt": "2020-10-14T15:04:41Z", "author": {"login": "danasilver"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "diffHunk": "@@ -325,6 +344,35 @@ public FirebaseRemoteConfigValue getValue(String key) {\n     return allConfigs;\n   }\n \n+  /**\n+   * Adds a listener that will be called whenever one of the get methods is called.\n+   *\n+   * @param listener function that takes in the parameter key and the {@link ConfigContainer} JSON\n+   */\n+  public void addListener(BiConsumer<String, ConfigContainer> listener) {\n+    synchronized (listeners) {\n+      listeners.add(listener);\n+    }\n+  }\n+\n+  /**\n+   * Calls all listeners in {@link #listeners}.\n+   *\n+   * @param key Remote Config parameter key\n+   * @param container cache of {@link ConfigContainer}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8b301b30cfc0ce312f1746d8055898e3945d1c"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2OTQ5OA==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r508669498", "createdAt": "2020-10-20T16:24:40Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "diffHunk": "@@ -325,6 +344,35 @@ public FirebaseRemoteConfigValue getValue(String key) {\n     return allConfigs;\n   }\n \n+  /**\n+   * Adds a listener that will be called whenever one of the get methods is called.\n+   *\n+   * @param listener function that takes in the parameter key and the {@link ConfigContainer} JSON\n+   */\n+  public void addListener(BiConsumer<String, ConfigContainer> listener) {\n+    synchronized (listeners) {\n+      listeners.add(listener);\n+    }\n+  }\n+\n+  /**\n+   * Calls all listeners in {@link #listeners}.\n+   *\n+   * @param key Remote Config parameter key\n+   * @param container cache of {@link ConfigContainer}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1MzMyNQ=="}, "originalCommit": {"oid": "8a8b301b30cfc0ce312f1746d8055898e3945d1c"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTgzNTEwOnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNToxNzoyMVrOHhYSxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoyNDo0OFrOHlGuig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2MzA3OA==", "bodyText": "Adding some more description would be helpful for future users. Maybe like\nCalls all listeners added to {@link #listeners} with the retrieved key from a {@code get*} call and the config containing the key.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r504763078", "createdAt": "2020-10-14T15:17:21Z", "author": {"login": "danasilver"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "diffHunk": "@@ -325,6 +344,35 @@ public FirebaseRemoteConfigValue getValue(String key) {\n     return allConfigs;\n   }\n \n+  /**\n+   * Adds a listener that will be called whenever one of the get methods is called.\n+   *\n+   * @param listener function that takes in the parameter key and the {@link ConfigContainer} JSON\n+   */\n+  public void addListener(BiConsumer<String, ConfigContainer> listener) {\n+    synchronized (listeners) {\n+      listeners.add(listener);\n+    }\n+  }\n+\n+  /**\n+   * Calls all listeners in {@link #listeners}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8b301b30cfc0ce312f1746d8055898e3945d1c"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2OTU3OA==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r508669578", "createdAt": "2020-10-20T16:24:48Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "diffHunk": "@@ -325,6 +344,35 @@ public FirebaseRemoteConfigValue getValue(String key) {\n     return allConfigs;\n   }\n \n+  /**\n+   * Adds a listener that will be called whenever one of the get methods is called.\n+   *\n+   * @param listener function that takes in the parameter key and the {@link ConfigContainer} JSON\n+   */\n+  public void addListener(BiConsumer<String, ConfigContainer> listener) {\n+    synchronized (listeners) {\n+      listeners.add(listener);\n+    }\n+  }\n+\n+  /**\n+   * Calls all listeners in {@link #listeners}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2MzA3OA=="}, "originalCommit": {"oid": "8a8b301b30cfc0ce312f1746d8055898e3945d1c"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTgzODczOnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNToxODoxM1rOHhYVGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoyNTowNVrOHlGvNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2MzY3NA==", "bodyText": "Similar to the other comments maybe add a detail about what it's called on (key and container with the key)", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r504763674", "createdAt": "2020-10-14T15:18:13Z", "author": {"login": "danasilver"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "diffHunk": "@@ -325,6 +344,35 @@ public FirebaseRemoteConfigValue getValue(String key) {\n     return allConfigs;\n   }\n \n+  /**\n+   * Adds a listener that will be called whenever one of the get methods is called.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8b301b30cfc0ce312f1746d8055898e3945d1c"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2OTc0OQ==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r508669749", "createdAt": "2020-10-20T16:25:05Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "diffHunk": "@@ -325,6 +344,35 @@ public FirebaseRemoteConfigValue getValue(String key) {\n     return allConfigs;\n   }\n \n+  /**\n+   * Adds a listener that will be called whenever one of the get methods is called.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2MzY3NA=="}, "originalCommit": {"oid": "8a8b301b30cfc0ce312f1746d8055898e3945d1c"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTg0MTAxOnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNToxODo0NVrOHhYWlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoyNToxM1rOHlGvkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2NDA1NQ==", "bodyText": "no longer JSON", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r504764055", "createdAt": "2020-10-14T15:18:45Z", "author": {"login": "danasilver"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "diffHunk": "@@ -325,6 +344,35 @@ public FirebaseRemoteConfigValue getValue(String key) {\n     return allConfigs;\n   }\n \n+  /**\n+   * Adds a listener that will be called whenever one of the get methods is called.\n+   *\n+   * @param listener function that takes in the parameter key and the {@link ConfigContainer} JSON", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8b301b30cfc0ce312f1746d8055898e3945d1c"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2OTg0MA==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r508669840", "createdAt": "2020-10-20T16:25:13Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandler.java", "diffHunk": "@@ -325,6 +344,35 @@ public FirebaseRemoteConfigValue getValue(String key) {\n     return allConfigs;\n   }\n \n+  /**\n+   * Adds a listener that will be called whenever one of the get methods is called.\n+   *\n+   * @param listener function that takes in the parameter key and the {@link ConfigContainer} JSON", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2NDA1NQ=="}, "originalCommit": {"oid": "8a8b301b30cfc0ce312f1746d8055898e3945d1c"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTg1NDQ0OnYy", "diffSide": "RIGHT", "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/Personalization.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNToyMToyMVrOHhYeoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoyNToyNVrOHlGwIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2NjExMg==", "bodyText": "Is it accurate to say \"called when a Personalization parameter value (an arm) is retrieved\"? That might help put it in the context of Remote Config a bit more. Would also help to add what the \"it\" is that's being logged", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r504766112", "createdAt": "2020-10-14T15:21:21Z", "author": {"login": "danasilver"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/Personalization.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+//\n+// You may obtain a copy of the License at\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import static com.google.firebase.remoteconfig.FirebaseRemoteConfig.TAG;\n+\n+import android.os.Bundle;\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import com.google.firebase.analytics.connector.AnalyticsConnector;\n+import org.json.JSONObject;\n+\n+public class Personalization {\n+  static final String ANALYTICS_ORIGIN_PERSONALIZATION = \"fp\";\n+  static final String ANALYTICS_PULL_EVENT = \"_fpc\";\n+  static final String ARM_KEY = \"_fpid\";\n+  static final String ARM_VALUE = \"_fpct\";\n+  static final String PERSONALIZATION_ID = \"personalizationId\";\n+\n+  /** The app's Firebase Analytics client. */\n+  private final AnalyticsConnector analyticsConnector;\n+\n+  /** Creates an instance of {@code Personalization}. */\n+  public Personalization(@NonNull AnalyticsConnector analyticsConnector) {\n+    this.analyticsConnector = analyticsConnector;\n+  }\n+\n+  /**\n+   * Called when an arm is pulled, and uses Google Analytics for Firebase to log it if it's a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8b301b30cfc0ce312f1746d8055898e3945d1c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY2OTk4Nw==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r508669987", "createdAt": "2020-10-20T16:25:25Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/main/java/com/google/firebase/remoteconfig/internal/Personalization.java", "diffHunk": "@@ -0,0 +1,70 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+//\n+// You may obtain a copy of the License at\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import static com.google.firebase.remoteconfig.FirebaseRemoteConfig.TAG;\n+\n+import android.os.Bundle;\n+import android.util.Log;\n+import androidx.annotation.NonNull;\n+import com.google.firebase.analytics.connector.AnalyticsConnector;\n+import org.json.JSONObject;\n+\n+public class Personalization {\n+  static final String ANALYTICS_ORIGIN_PERSONALIZATION = \"fp\";\n+  static final String ANALYTICS_PULL_EVENT = \"_fpc\";\n+  static final String ARM_KEY = \"_fpid\";\n+  static final String ARM_VALUE = \"_fpct\";\n+  static final String PERSONALIZATION_ID = \"personalizationId\";\n+\n+  /** The app's Firebase Analytics client. */\n+  private final AnalyticsConnector analyticsConnector;\n+\n+  /** Creates an instance of {@code Personalization}. */\n+  public Personalization(@NonNull AnalyticsConnector analyticsConnector) {\n+    this.analyticsConnector = analyticsConnector;\n+  }\n+\n+  /**\n+   * Called when an arm is pulled, and uses Google Analytics for Firebase to log it if it's a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2NjExMg=="}, "originalCommit": {"oid": "8a8b301b30cfc0ce312f1746d8055898e3945d1c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTg2NjY0OnYy", "diffSide": "RIGHT", "path": "firebase-config/src/test/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandlerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNToyNDowNVrOHhYmhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoyNTozMlrOHlGwbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2ODEzMg==", "bodyText": "What do you think about a test that listeners are called correctly?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r504768132", "createdAt": "2020-10-14T15:24:05Z", "author": {"login": "danasilver"}, "path": "firebase-config/src/test/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandlerTest.java", "diffHunk": "@@ -83,7 +84,9 @@\n   public void setUp() {\n     MockitoAnnotations.initMocks(this);\n \n-    getHandler = new ConfigGetParameterHandler(mockActivatedCache, mockDefaultsCache);\n+    getHandler =\n+        new ConfigGetParameterHandler(\n+            MoreExecutors.directExecutor(), mockActivatedCache, mockDefaultsCache);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8b301b30cfc0ce312f1746d8055898e3945d1c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY3MDA2Mg==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r508670062", "createdAt": "2020-10-20T16:25:32Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/test/java/com/google/firebase/remoteconfig/internal/ConfigGetParameterHandlerTest.java", "diffHunk": "@@ -83,7 +84,9 @@\n   public void setUp() {\n     MockitoAnnotations.initMocks(this);\n \n-    getHandler = new ConfigGetParameterHandler(mockActivatedCache, mockDefaultsCache);\n+    getHandler =\n+        new ConfigGetParameterHandler(\n+            MoreExecutors.directExecutor(), mockActivatedCache, mockDefaultsCache);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2ODEzMg=="}, "originalCommit": {"oid": "8a8b301b30cfc0ce312f1746d8055898e3945d1c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDQxMjM5OnYy", "diffSide": "RIGHT", "path": "firebase-config/src/test/java/com/google/firebase/remoteconfig/internal/PersonalizationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjoyNDoyMVrOHqw05A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDo0MDoxM1rOHsU3Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwMjIxMg==", "bodyText": "Maybe this should go with the FirebaseRemoteConfig tests since it's testing the functionality of the get methods? Then the class wouldn't need @VisibleForTesting.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r514602212", "createdAt": "2020-10-29T22:24:21Z", "author": {"login": "danasilver"}, "path": "firebase-config/src/test/java/com/google/firebase/remoteconfig/internal/PersonalizationTest.java", "diffHunk": "@@ -0,0 +1,213 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+//\n+// You may obtain a copy of the License at\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.firebase.remoteconfig.internal.ConfigFetchHandler.FetchResponse.forBackendUpdatesFetched;\n+import static com.google.firebase.remoteconfig.internal.Personalization.ANALYTICS_ORIGIN_PERSONALIZATION;\n+import static com.google.firebase.remoteconfig.internal.Personalization.ANALYTICS_PULL_EVENT;\n+import static com.google.firebase.remoteconfig.internal.Personalization.ARM_KEY;\n+import static com.google.firebase.remoteconfig.internal.Personalization.ARM_VALUE;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+import com.google.android.gms.tasks.Tasks;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.analytics.connector.AnalyticsConnector;\n+import com.google.firebase.installations.FirebaseInstallationsApi;\n+import com.google.firebase.remoteconfig.FirebaseRemoteConfig;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.RuntimeEnvironment;\n+import org.robolectric.annotation.Config;\n+\n+/** Unit tests for {@link Personalization}. */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(manifest = Config.NONE)\n+public class PersonalizationTest {\n+  private static final String APP_ID = \"1:123:android:test\";\n+  private static final String API_KEY = \"123\";\n+  private static final String PROJECT_ID = \"testApp\";\n+\n+  private static final ConfigContainer CONFIG_CONTAINER;\n+\n+  static {\n+    try {\n+      CONFIG_CONTAINER =\n+          ConfigContainer.newBuilder()\n+              .replaceConfigsWith(\n+                  new JSONObject(\"{key1: 'value1', key2: 'value2', key3: 'value3'}\"))\n+              .withFetchTime(new Date(1))\n+              .withPersonalizationMetadata(\n+                  new JSONObject(\n+                      \"{key1: {personalizationId: 'id1'}, key2: {personalizationId: 'id2'}}\"))\n+              .build();\n+    } catch (JSONException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  private static final List<Bundle> FAKE_LOGS = new ArrayList<>();\n+\n+  private Personalization personalization;\n+\n+  @Mock private AnalyticsConnector mockAnalyticsConnector;\n+  @Mock private FirebaseInstallationsApi mockFirebaseInstallations;\n+  @Mock private ConfigCacheClient mockFetchedCache;\n+  @Mock private ConfigCacheClient mockActivatedCache;\n+  @Mock private ConfigCacheClient mockDefaultsCache;\n+  @Mock private ConfigFetchHandler mockFetchHandler;\n+  @Mock private ConfigMetadataClient metadataClient;\n+\n+  @Before\n+  public void setUp() {\n+    initMocks(this);\n+\n+    doAnswer(invocation -> FAKE_LOGS.add(invocation.getArgument(2)))\n+        .when(mockAnalyticsConnector)\n+        .logEvent(\n+            eq(ANALYTICS_ORIGIN_PERSONALIZATION), eq(ANALYTICS_PULL_EVENT), any(Bundle.class));\n+\n+    personalization = new Personalization(mockAnalyticsConnector);\n+\n+    FAKE_LOGS.clear();\n+  }\n+\n+  @Test\n+  public void logArmActive_nonPersonalizationKey_notLogged() {\n+    personalization.logArmActive(\"key3\", CONFIG_CONTAINER);\n+\n+    verify(mockAnalyticsConnector, times(0))\n+        .logEvent(\n+            eq(ANALYTICS_ORIGIN_PERSONALIZATION), eq(ANALYTICS_PULL_EVENT), any(Bundle.class));\n+    assertThat(FAKE_LOGS).isEmpty();\n+  }\n+\n+  @Test\n+  public void logArmActive_singlePersonalizationKey_loggedOnce() {\n+    personalization.logArmActive(\"key1\", CONFIG_CONTAINER);\n+\n+    verify(mockAnalyticsConnector, times(1))\n+        .logEvent(\n+            eq(ANALYTICS_ORIGIN_PERSONALIZATION), eq(ANALYTICS_PULL_EVENT), any(Bundle.class));\n+    assertThat(FAKE_LOGS).hasSize(1);\n+\n+    Bundle params = new Bundle();\n+    params.putString(ARM_KEY, \"id1\");\n+    params.putString(ARM_VALUE, \"value1\");\n+    assertThat(FAKE_LOGS.get(0).toString()).isEqualTo(params.toString());\n+  }\n+\n+  @Test\n+  public void logArmActive_multiplePersonalizationKeys_loggedMultiple() {\n+    personalization.logArmActive(\"key1\", CONFIG_CONTAINER);\n+    personalization.logArmActive(\"key2\", CONFIG_CONTAINER);\n+\n+    verify(mockAnalyticsConnector, times(2))\n+        .logEvent(\n+            eq(ANALYTICS_ORIGIN_PERSONALIZATION), eq(ANALYTICS_PULL_EVENT), any(Bundle.class));\n+    assertThat(FAKE_LOGS).hasSize(2);\n+\n+    Bundle params1 = new Bundle();\n+    params1.putString(ARM_KEY, \"id1\");\n+    params1.putString(ARM_VALUE, \"value1\");\n+    assertThat(FAKE_LOGS.get(0).toString()).isEqualTo(params1.toString());\n+\n+    Bundle params2 = new Bundle();\n+    params2.putString(ARM_KEY, \"id2\");\n+    params2.putString(ARM_VALUE, \"value2\");\n+    assertThat(FAKE_LOGS.get(1).toString()).isEqualTo(params2.toString());\n+  }\n+\n+  @Test\n+  public void logArmActive_RemoteConfigIntegration_successful() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1073bb788e29908bedc19b2655fc8ce073f93137"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0MTE4Mw==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r516241183", "createdAt": "2020-11-02T20:40:13Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/test/java/com/google/firebase/remoteconfig/internal/PersonalizationTest.java", "diffHunk": "@@ -0,0 +1,213 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+//\n+// You may obtain a copy of the License at\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.remoteconfig.internal;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.firebase.remoteconfig.internal.ConfigFetchHandler.FetchResponse.forBackendUpdatesFetched;\n+import static com.google.firebase.remoteconfig.internal.Personalization.ANALYTICS_ORIGIN_PERSONALIZATION;\n+import static com.google.firebase.remoteconfig.internal.Personalization.ANALYTICS_PULL_EVENT;\n+import static com.google.firebase.remoteconfig.internal.Personalization.ARM_KEY;\n+import static com.google.firebase.remoteconfig.internal.Personalization.ARM_VALUE;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+import com.google.android.gms.tasks.Tasks;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.firebase.FirebaseApp;\n+import com.google.firebase.FirebaseOptions;\n+import com.google.firebase.analytics.connector.AnalyticsConnector;\n+import com.google.firebase.installations.FirebaseInstallationsApi;\n+import com.google.firebase.remoteconfig.FirebaseRemoteConfig;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.RuntimeEnvironment;\n+import org.robolectric.annotation.Config;\n+\n+/** Unit tests for {@link Personalization}. */\n+@RunWith(RobolectricTestRunner.class)\n+@Config(manifest = Config.NONE)\n+public class PersonalizationTest {\n+  private static final String APP_ID = \"1:123:android:test\";\n+  private static final String API_KEY = \"123\";\n+  private static final String PROJECT_ID = \"testApp\";\n+\n+  private static final ConfigContainer CONFIG_CONTAINER;\n+\n+  static {\n+    try {\n+      CONFIG_CONTAINER =\n+          ConfigContainer.newBuilder()\n+              .replaceConfigsWith(\n+                  new JSONObject(\"{key1: 'value1', key2: 'value2', key3: 'value3'}\"))\n+              .withFetchTime(new Date(1))\n+              .withPersonalizationMetadata(\n+                  new JSONObject(\n+                      \"{key1: {personalizationId: 'id1'}, key2: {personalizationId: 'id2'}}\"))\n+              .build();\n+    } catch (JSONException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  private static final List<Bundle> FAKE_LOGS = new ArrayList<>();\n+\n+  private Personalization personalization;\n+\n+  @Mock private AnalyticsConnector mockAnalyticsConnector;\n+  @Mock private FirebaseInstallationsApi mockFirebaseInstallations;\n+  @Mock private ConfigCacheClient mockFetchedCache;\n+  @Mock private ConfigCacheClient mockActivatedCache;\n+  @Mock private ConfigCacheClient mockDefaultsCache;\n+  @Mock private ConfigFetchHandler mockFetchHandler;\n+  @Mock private ConfigMetadataClient metadataClient;\n+\n+  @Before\n+  public void setUp() {\n+    initMocks(this);\n+\n+    doAnswer(invocation -> FAKE_LOGS.add(invocation.getArgument(2)))\n+        .when(mockAnalyticsConnector)\n+        .logEvent(\n+            eq(ANALYTICS_ORIGIN_PERSONALIZATION), eq(ANALYTICS_PULL_EVENT), any(Bundle.class));\n+\n+    personalization = new Personalization(mockAnalyticsConnector);\n+\n+    FAKE_LOGS.clear();\n+  }\n+\n+  @Test\n+  public void logArmActive_nonPersonalizationKey_notLogged() {\n+    personalization.logArmActive(\"key3\", CONFIG_CONTAINER);\n+\n+    verify(mockAnalyticsConnector, times(0))\n+        .logEvent(\n+            eq(ANALYTICS_ORIGIN_PERSONALIZATION), eq(ANALYTICS_PULL_EVENT), any(Bundle.class));\n+    assertThat(FAKE_LOGS).isEmpty();\n+  }\n+\n+  @Test\n+  public void logArmActive_singlePersonalizationKey_loggedOnce() {\n+    personalization.logArmActive(\"key1\", CONFIG_CONTAINER);\n+\n+    verify(mockAnalyticsConnector, times(1))\n+        .logEvent(\n+            eq(ANALYTICS_ORIGIN_PERSONALIZATION), eq(ANALYTICS_PULL_EVENT), any(Bundle.class));\n+    assertThat(FAKE_LOGS).hasSize(1);\n+\n+    Bundle params = new Bundle();\n+    params.putString(ARM_KEY, \"id1\");\n+    params.putString(ARM_VALUE, \"value1\");\n+    assertThat(FAKE_LOGS.get(0).toString()).isEqualTo(params.toString());\n+  }\n+\n+  @Test\n+  public void logArmActive_multiplePersonalizationKeys_loggedMultiple() {\n+    personalization.logArmActive(\"key1\", CONFIG_CONTAINER);\n+    personalization.logArmActive(\"key2\", CONFIG_CONTAINER);\n+\n+    verify(mockAnalyticsConnector, times(2))\n+        .logEvent(\n+            eq(ANALYTICS_ORIGIN_PERSONALIZATION), eq(ANALYTICS_PULL_EVENT), any(Bundle.class));\n+    assertThat(FAKE_LOGS).hasSize(2);\n+\n+    Bundle params1 = new Bundle();\n+    params1.putString(ARM_KEY, \"id1\");\n+    params1.putString(ARM_VALUE, \"value1\");\n+    assertThat(FAKE_LOGS.get(0).toString()).isEqualTo(params1.toString());\n+\n+    Bundle params2 = new Bundle();\n+    params2.putString(ARM_KEY, \"id2\");\n+    params2.putString(ARM_VALUE, \"value2\");\n+    assertThat(FAKE_LOGS.get(1).toString()).isEqualTo(params2.toString());\n+  }\n+\n+  @Test\n+  public void logArmActive_RemoteConfigIntegration_successful() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwMjIxMg=="}, "originalCommit": {"oid": "1073bb788e29908bedc19b2655fc8ce073f93137"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTQyMTMyOnYy", "diffSide": "RIGHT", "path": "firebase-config/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMToxOToyMlrOHsWALg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNDoyNTo0MlrOHtIszA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI1OTg4Ng==", "bodyText": "Do we need a different instance of RC for personalization? Using the default namespace will get the same RC instance as frc above.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r516259886", "createdAt": "2020-11-02T21:19:22Z", "author": {"login": "danasilver"}, "path": "firebase-config/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigTest.java", "diffHunk": "@@ -189,6 +205,22 @@ public void setUp() throws Exception {\n                 mockFireperfGetHandler,\n                 RemoteConfigComponent.getMetadataClient(context, APP_ID, FIREPERF_NAMESPACE));\n \n+    personalizationFrc =\n+        FirebaseApp.getInstance()\n+            .get(RemoteConfigComponent.class)\n+            .get(\n+                firebaseApp,\n+                RemoteConfigComponent.DEFAULT_NAMESPACE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c97d9ec704093242913ff44839edaa8f16fec289"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA5MDUwOA==", "bodyText": "We need it to use a real ConfigGetParameterHandler so we can test that it's doing things correctly.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1304#discussion_r517090508", "createdAt": "2020-11-04T04:25:42Z", "author": {"login": "vic-flair"}, "path": "firebase-config/src/test/java/com/google/firebase/remoteconfig/FirebaseRemoteConfigTest.java", "diffHunk": "@@ -189,6 +205,22 @@ public void setUp() throws Exception {\n                 mockFireperfGetHandler,\n                 RemoteConfigComponent.getMetadataClient(context, APP_ID, FIREPERF_NAMESPACE));\n \n+    personalizationFrc =\n+        FirebaseApp.getInstance()\n+            .get(RemoteConfigComponent.class)\n+            .get(\n+                firebaseApp,\n+                RemoteConfigComponent.DEFAULT_NAMESPACE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI1OTg4Ng=="}, "originalCommit": {"oid": "c97d9ec704093242913ff44839edaa8f16fec289"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 831, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}