{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNzI0MTEx", "number": 2277, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjowNToyMVrOFL6k9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNTo1MDo1NFrOFONeMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDM4Mzg4OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjowNToyMVrOIPXeWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjowNToyMVrOIPXeWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4NDE1NA==", "bodyText": "Do you know what the 2 is meant to indicate? If not, I suggest we remove it from here and above.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552984154", "createdAt": "2021-01-06T22:05:21Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -1427,6 +1784,25 @@ public void nullPrioritiesIncludedInStartAt2() throws DatabaseException, Interru\n     DeepEquals.assertEquals(expected, result);\n   }\n \n+  @Test\n+  public void nullPrioritiesIncludedInStartAfter2() throws DatabaseException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a97797da16e2874a3ca149d4d17187fef98529"}, "originalPosition": 491}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDM4NjUzOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjowNjoxM1rOIPXf3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjowNjoxM1rOIPXf3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4NDU0MQ==", "bodyText": "The case number looks like it refers to an old bug about startAt, which is not applicable here. I would drop it (at least from here)", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552984541", "createdAt": "2021-01-06T22:06:13Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -2079,6 +2455,43 @@ public void startAtWithTwoArgumentsWorksCase1169()\n     assertEquals(2, i);\n   }\n \n+  @Test\n+  public void startAfterWithTwoArgumentsWorksCase1169()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a97797da16e2874a3ca149d4d17187fef98529"}, "originalPosition": 517}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDM4ODQyOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjowNjoyOFrOIPXg4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjowNjoyOFrOIPXg4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4NDgwMA==", "bodyText": "Same comment about case number.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552984800", "createdAt": "2021-01-06T22:06:28Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -2920,6 +3333,94 @@ public void onCancelled(DatabaseError error) {}\n     assertEquals(\"a\", removedSecond.get(0));\n   }\n \n+  // TODO(wyszynski): endBefore\n+  @Test\n+  public void case2003CorrectlyGetEventsForStartAfterEndAtQueriesWhenPriorityChanges()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a97797da16e2874a3ca149d4d17187fef98529"}, "originalPosition": 562}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDM5NjExOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjowNzo0MVrOIPXlgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjowNzo0MVrOIPXlgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4NTk4Nw==", "bodyText": "s/inclusive/exclusive (and maybe s/at/after, but then I am no longer sure whether this is inclusive or exclusive)", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552985987", "createdAt": "2021-01-06T22:07:41Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,92 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a97797da16e2874a3ca149d4d17187fef98529"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDM5ODI0OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjowODowMlrOIPXmtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjowODowMlrOIPXmtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4NjI5Mw==", "bodyText": "Same as above", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552986293", "createdAt": "2021-01-06T22:08:02Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,92 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a97797da16e2874a3ca149d4d17187fef98529"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDQwMTAyOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjowODoyNVrOIPXoXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjowODoyNVrOIPXoXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4NjcxNg==", "bodyText": "Same as above", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552986716", "createdAt": "2021-01-06T22:08:25Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,92 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(double value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a97797da16e2874a3ca149d4d17187fef98529"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDQwMzYxOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjowODo0N1rOIPXpug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjowODo0N1rOIPXpug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4NzA2Ng==", "bodyText": "We are well past version 2 now :)", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552987066", "createdAt": "2021-01-06T22:08:47Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,92 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(double value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   * @since 2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a97797da16e2874a3ca149d4d17187fef98529"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDQwNTMzOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjowOTowNFrOIPXq4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjowOTowNFrOIPXq4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4NzM2Mw==", "bodyText": "Same as above", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552987363", "createdAt": "2021-01-06T22:09:04Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,92 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(double value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   * @since 2.0\n+   */\n+  @NonNull\n+  public Query startAfter(boolean value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at, inclusive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a97797da16e2874a3ca149d4d17187fef98529"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDQ0ODI2OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjoyMjoyOVrOIPYFWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjoyMjoyOVrOIPYFWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk5NDEzNw==", "bodyText": "Same as above", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552994137", "createdAt": "2021-01-06T22:22:29Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,92 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(double value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   * @since 2.0\n+   */\n+  @NonNull\n+  public Query startAfter(boolean value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at, inclusive\n+   * @param key The key to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value, @Nullable String key) {\n+    Node node =\n+        value != null ? new StringNode(value, PriorityUtilities.NullPriority()) : EmptyNode.Empty();\n+    return startAfter(node, key);\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at, inclusive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a97797da16e2874a3ca149d4d17187fef98529"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDQ0ODk4OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjoyMjo0OFrOIPYFzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjoyMjo0OFrOIPYFzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk5NDI1NQ==", "bodyText": "Same as above", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552994255", "createdAt": "2021-01-06T22:22:48Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,92 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(double value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   * @since 2.0\n+   */\n+  @NonNull\n+  public Query startAfter(boolean value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at, inclusive\n+   * @param key The key to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value, @Nullable String key) {\n+    Node node =\n+        value != null ? new StringNode(value, PriorityUtilities.NullPriority()) : EmptyNode.Empty();\n+    return startAfter(node, key);\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at, inclusive\n+   * @param key The key name to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(double value, @Nullable String key) {\n+    return startAfter(new DoubleNode(value, PriorityUtilities.NullPriority()), key);\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at, inclusive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a97797da16e2874a3ca149d4d17187fef98529"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDQ0OTQ1OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjoyMjo1N1rOIPYGEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjoyMjo1N1rOIPYGEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk5NDMyMA==", "bodyText": "Same as above", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552994320", "createdAt": "2021-01-06T22:22:57Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,92 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(double value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, inclusive\n+   * @return A Query with the new constraint\n+   * @since 2.0\n+   */\n+  @NonNull\n+  public Query startAfter(boolean value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at, inclusive\n+   * @param key The key to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value, @Nullable String key) {\n+    Node node =\n+        value != null ? new StringNode(value, PriorityUtilities.NullPriority()) : EmptyNode.Empty();\n+    return startAfter(node, key);\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at, inclusive\n+   * @param key The key name to start at, inclusive\n+   * @return A Query with the new constraint\n+   */\n+  @NonNull\n+  public Query startAfter(double value, @Nullable String key) {\n+    return startAfter(new DoubleNode(value, PriorityUtilities.NullPriority()), key);\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at, inclusive\n+   * @param key The key to start at, inclusive\n+   * @return A Query with the new constraint\n+   * @since 2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a97797da16e2874a3ca149d4d17187fef98529"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDQ1MjM4OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjoyMzo1NlrOIPYHrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjoyMzo1NlrOIPYHrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk5NDczMg==", "bodyText": "This seems like leftover debug information.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r552994732", "createdAt": "2021-01-06T22:23:56Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java", "diffHunk": "@@ -1112,6 +1112,8 @@ private void putInternal(\n     long writeId = this.writeCounter++;\n \n     outstandingPuts.put(writeId, new OutstandingPut(action, request, onComplete));\n+    logger.info(\"Can send writes = \" + canSendWrites());\n+    logger.info(\"Trying to send puts = \" + outstandingPuts.get(writeId).getRequest());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a97797da16e2874a3ca149d4d17187fef98529"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTIxMjQwOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDo1NToyNFrOIPfEww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDo1NToyNFrOIPfEww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwODY3NQ==", "bodyText": "Can you explain why \"d\" is part of the result set when it has a priority of \"w\"?", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553108675", "createdAt": "2021-01-07T04:55:24Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -1055,6 +1379,29 @@ public void startAtEndAtWithPriorityWorks() throws DatabaseException, Interrupte\n     helper.waitForEvents();\n   }\n \n+  // TODO(wyszynski): endBefore\n+  @Test\n+  public void startAfterWithPriorityWorks() throws DatabaseException, InterruptedException {\n+    DatabaseReference ref = IntegrationTestHelpers.getRandomNode();\n+\n+    ValueExpectationHelper helper = new ValueExpectationHelper();\n+    helper.add(\n+        ref.startAfter(\"w\").endAt(\"y\"),\n+        new MapBuilder().put(\"d\", 4L).put(\"b\", 2L).put(\"c\", 3L).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 437}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTIxOTI4OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDo1OToyMFrOIPfItw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMDo0NTozOVrOIQgmeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwOTY4Nw==", "bodyText": "There is also a 2 here as a suffix.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553109687", "createdAt": "2021-01-07T04:59:20Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -1150,6 +1567,29 @@ public void startAtEndAtWithPriorityAndNameWorks2()\n     helper.waitForEvents();\n   }\n \n+  @Test\n+  public void startAfterEndAtWithPriorityAndNameWorks2()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 551}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE4MjI2Ng==", "bodyText": "Some of these didn't really add any value and were just blindly copy/pastes. I'm removed them.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r554182266", "createdAt": "2021-01-08T20:45:39Z", "author": {"login": "IanWyszynski"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -1150,6 +1567,29 @@ public void startAtEndAtWithPriorityAndNameWorks2()\n     helper.waitForEvents();\n   }\n \n+  @Test\n+  public void startAfterEndAtWithPriorityAndNameWorks2()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwOTY4Nw=="}, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 551}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTIxOTQ3OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDo1OTozNVrOIPfI2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNDo1OTozNVrOIPfI2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwOTcyMg==", "bodyText": "Also a 2 as a suffix.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553109722", "createdAt": "2021-01-07T04:59:35Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -1174,6 +1614,29 @@ public void startAtEndAtWithPriorityAndNameWorksWithServerData2()\n     helper.waitForEvents();\n   }\n \n+  @Test\n+  public void startAfterEndAtWithPriorityAndNameWorksWithServerData2()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 581}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTIyNjQyOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNTowNDoxMFrOIPfM-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNTowNDoxMFrOIPfM-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMDc3Ng==", "bodyText": "Another strange suffix. If these are used to distinguish test cases, then we should come up with more specific names.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553110776", "createdAt": "2021-01-07T05:04:10Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3054,6 +3661,45 @@ public void onCancelled(DatabaseError error) {}\n     IntegrationTestHelpers.waitFor(done);\n   }\n \n+  @Test\n+  public void integerKeysBehaveNumericallyStartAfter1()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 785}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTIyODM4OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNTowNToyNVrOIPfODA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNTowNToyNVrOIPfODA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMTA1Mg==", "bodyText": "Please come up with a more specific test name.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553111052", "createdAt": "2021-01-07T05:05:25Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3142,6 +3788,46 @@ public void onCancelled(DatabaseError error) {}\n     IntegrationTestHelpers.waitFor(done);\n   }\n \n+  @Test\n+  public void integerKeysBehaveNumerically3StartAfter()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 831}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTIyOTU0OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNTowNTo1NlrOIPfOpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNTowNTo1NlrOIPfOpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMTIwNw==", "bodyText": "Please fix.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553111207", "createdAt": "2021-01-07T05:05:56Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -3522,28 +4208,28 @@ public void onCancelled(@NonNull DatabaseError error) {}\n     assertEquals(43L, Tasks.await(reader.get()).getValue());\n   }\n \n-  @Test\n-  public void getUpdatesPersistenceCacheWhenEnabled()\n-      throws DatabaseException, InterruptedException, ExecutionException, TestFailure,\n-          TimeoutException {\n-    FirebaseApp readerApp =\n-        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n-    FirebaseApp writerApp =\n-        appForDatabaseUrl(IntegrationTestValues.getNamespace(), UUID.randomUUID().toString());\n-    FirebaseDatabase readerDb = FirebaseDatabase.getInstance(readerApp);\n-    readerDb.setPersistenceEnabled(true);\n-    FirebaseDatabase writerDb = FirebaseDatabase.getInstance(writerApp);\n-    DatabaseReference reader = readerDb.getReference();\n-    DatabaseReference writer = writerDb.getReference();\n-\n-    assertNull(new WriteFuture(writer, 42L).timedGet());\n-    assertEquals(42L, Tasks.await(reader.get()).getValue());\n-\n-    readerDb.goOffline();\n-\n-    Semaphore semaphore = new Semaphore(0);\n-    assertNotNull(ReadFuture.untilEquals(reader, 42L).timedGet());\n-  }\n+  //  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 899}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTIzNTM3OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNTowOTozN1rOIPfR5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNTowOTozN1rOIPfR5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMjAzOQ==", "bodyText": "s/priority/value", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553112039", "createdAt": "2021-01-07T05:09:37Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,96 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(double value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(boolean value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTIzNjc4OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNToxMDoyNVrOIPfSqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNToxMDoyNVrOIPfSqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMjIzMw==", "bodyText": "The first greater should be \"equal\", no?", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553112233", "createdAt": "2021-01-07T05:10:25Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,96 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(double value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(boolean value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at\n+   * @param key The key to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value, @Nullable String key) {\n+    Node node =\n+        value != null ? new StringNode(value, PriorityUtilities.NullPriority()) : EmptyNode.Empty();\n+    return startAfter(node, key);\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTIzNzE3OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNToxMDo0NFrOIPfS4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNToxMDo0NFrOIPfS4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMjI5MA==", "bodyText": "s/priority/value", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553112290", "createdAt": "2021-01-07T05:10:44Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/Query.java", "diffHunk": "@@ -278,6 +279,96 @@ public void run() {\n       });\n   }*/\n \n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(double value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default.\n+   *\n+   * @param value The value to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(boolean value) {\n+    return startAt(value, ChildKey.getMaxName().asString());\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at\n+   * @param key The key to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(@Nullable String value, @Nullable String key) {\n+    Node node =\n+        value != null ? new StringNode(value, PriorityUtilities.NullPriority()) : EmptyNode.Empty();\n+    return startAfter(node, key);\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at\n+   * @param key The key name to start at, exclusive\n+   * @return A Query with the new constraint\n+   * @since 19.6\n+   */\n+  @NonNull\n+  public Query startAfter(double value, @Nullable String key) {\n+    return startAfter(new DoubleNode(value, PriorityUtilities.NullPriority()), key);\n+  }\n+\n+  /**\n+   * Create a query constrained to only return child nodes with a value greater than the given\n+   * value, using the given orderBy directive or priority as default, and additionally only child\n+   * nodes with a key greater than or equal to the given key.\n+   *\n+   * @param value The priority to start at", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTIzODc4OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNToxMTo0MlrOIPfTwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNToxMTo0MlrOIPfTwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMjUxNA==", "bodyText": "Nit: This is usually called a successor.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553112514", "createdAt": "2021-01-07T05:11:42Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "diffHunk": "@@ -57,6 +65,38 @@ public static synchronized String generatePushChildName(long now) {\n     return result.toString();\n   }\n \n+  public static final String nextAfter(String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTI0MTYyOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNToxMzoyOFrOIPfVZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxOTo1MjowOVrOIQfG0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMjkzMw==", "bodyText": "This looks like it could trigger an integer overflow. You could probably just use a long here, unless there are some specifications for valid keys that I am not aware of.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553112933", "createdAt": "2021-01-07T05:13:28Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "diffHunk": "@@ -57,6 +65,38 @@ public static synchronized String generatePushChildName(long now) {\n     return result.toString();\n   }\n \n+  public static final String nextAfter(String key) {\n+    Validation.validateNullableKey(key);\n+    Integer num = tryParseInt(key);\n+    if (num != null) {\n+      return String.valueOf(num + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE0ODQxMg==", "bodyText": "Using a long should be fine, the limit on keys is 768 bytes:\nhttps://firebase.google.com/docs/database/usage/limits#data_tree", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r554148412", "createdAt": "2021-01-08T19:31:52Z", "author": {"login": "IanWyszynski"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "diffHunk": "@@ -57,6 +65,38 @@ public static synchronized String generatePushChildName(long now) {\n     return result.toString();\n   }\n \n+  public static final String nextAfter(String key) {\n+    Validation.validateNullableKey(key);\n+    Integer num = tryParseInt(key);\n+    if (num != null) {\n+      return String.valueOf(num + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMjkzMw=="}, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE1MjQ1MQ==", "bodyText": "The only other place we're using tryParseInt is in:\n\n  \n    \n      firebase-android-sdk/firebase-database/src/main/java/com/google/firebase/database/snapshot/ChildrenNode.java\n    \n    \n         Line 134\n      in\n      e65f487\n    \n    \n    \n    \n\n        \n          \n           Integer keyAsInt = Utilities.tryParseInt(key); \n        \n    \n  \n\n\nWhere it seems to be used to decide the number of results in an array. I think we should be able to change the method to tryParseLong without risk.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r554152451", "createdAt": "2021-01-08T19:40:39Z", "author": {"login": "IanWyszynski"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "diffHunk": "@@ -57,6 +65,38 @@ public static synchronized String generatePushChildName(long now) {\n     return result.toString();\n   }\n \n+  public static final String nextAfter(String key) {\n+    Validation.validateNullableKey(key);\n+    Integer num = tryParseInt(key);\n+    if (num != null) {\n+      return String.valueOf(num + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMjkzMw=="}, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE1Nzc3Ng==", "bodyText": "Upon further consideration, I think we should handle the overflow here. In our public docs, we assume at most 32-bit integer keys for ordering semantics:\nhttps://firebase.google.com/docs/database/web/lists-of-data\nI wonder if it's reasonable to return MIN_PUSH_CHAR here since that's the next string in our documented key ordering.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r554157776", "createdAt": "2021-01-08T19:52:09Z", "author": {"login": "IanWyszynski"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "diffHunk": "@@ -57,6 +65,38 @@ public static synchronized String generatePushChildName(long now) {\n     return result.toString();\n   }\n \n+  public static final String nextAfter(String key) {\n+    Validation.validateNullableKey(key);\n+    Integer num = tryParseInt(key);\n+    if (num != null) {\n+      return String.valueOf(num + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExMjkzMw=="}, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTI1NjEwOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNToyMjoxNFrOIPfdhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxOToyMDo1OVrOIQeOUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExNTAxNQ==", "bodyText": "Nit: Flip assignments for clarity.\nYou could also refer to PUSH_CHARS and get the values from there (which will be slower and more code, so I am not sure it is actually worth it).", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553115015", "createdAt": "2021-01-07T05:22:14Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "diffHunk": "@@ -15,14 +15,22 @@\n package com.google.firebase.database.core.utilities;\n \n import static com.google.firebase.database.core.utilities.Utilities.hardAssert;\n+import static com.google.firebase.database.core.utilities.Utilities.tryParseInt;\n \n+import com.google.firebase.database.snapshot.ChildKey;\n import java.util.Random;\n \n public class PushIdGenerator {\n \n   private static final String PUSH_CHARS =\n       \"-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz\";\n \n+  private static final char MAX_PUSH_CHAR = 'z';\n+\n+  private static final char MIN_PUSH_CHAR = '-';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE0MzMxNA==", "bodyText": "I sort of prefer having separate sentinel values for this since they trigger edge-cases in the successor/predecessor code.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r554143314", "createdAt": "2021-01-08T19:20:59Z", "author": {"login": "IanWyszynski"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "diffHunk": "@@ -15,14 +15,22 @@\n package com.google.firebase.database.core.utilities;\n \n import static com.google.firebase.database.core.utilities.Utilities.hardAssert;\n+import static com.google.firebase.database.core.utilities.Utilities.tryParseInt;\n \n+import com.google.firebase.database.snapshot.ChildKey;\n import java.util.Random;\n \n public class PushIdGenerator {\n \n   private static final String PUSH_CHARS =\n       \"-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz\";\n \n+  private static final char MAX_PUSH_CHAR = 'z';\n+\n+  private static final char MIN_PUSH_CHAR = '-';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExNTAxNQ=="}, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTI1OTk3OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNToyNDoyNFrOIPffsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNToyNDoyNFrOIPffsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExNTU2OQ==", "bodyText": "This is unused.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553115569", "createdAt": "2021-01-07T05:24:24Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/Utilities.java", "diffHunk": "@@ -273,4 +273,8 @@ public static boolean equals(@Nullable Object left, @Nullable Object right) {\n     }\n     return left.equals(right);\n   }\n+\n+  public static String next(@Nullable String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MTI2MzYwOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/snapshot/ChildKey.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNToyNjoxOVrOIPfhpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QwNToyNjoxOVrOIPfhpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzExNjA3MQ==", "bodyText": "These changes don't seem to be needed.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r553116071", "createdAt": "2021-01-07T05:26:19Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/snapshot/ChildKey.java", "diffHunk": "@@ -56,11 +56,11 @@ public boolean isPriorityChildName() {\n     return this.equals(PRIORITY_CHILD_KEY);\n   }\n \n-  protected boolean isInt() {\n+  public boolean isInt() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd31fe4499364e821021a960639311bc9d4b02c8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDI1MjE1OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxODoyMTo0N1rOISOa3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxODoyMTo0N1rOISOa3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk4MTUzMg==", "bodyText": "Totally optional:\ns/WhenLimitIsHitFromFront/WhenDataEntersLimit\nHere and below if you do update.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r555981532", "createdAt": "2021-01-12T18:21:47Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -658,6 +770,57 @@ public void onCancelled(DatabaseError error) {}\n     assertEquals(\"b\", removed.get(0));\n   }\n \n+  @Test\n+  public void setLimitEnsureChildRemovedAndChildAddedHitWhenLimitIsHitFromFrontWithStartAfter()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0e628347196331c34cf25c3b27812b402590077"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDI2NjMxOnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxODoyNTowOFrOISOjjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxODoyNTowOFrOISOjjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk4Mzc1Ng==", "bodyText": "You don't need to convert num to long. In Java, long+int=long (and the int is treated as a long)", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r555983756", "createdAt": "2021-01-12T18:25:08Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "diffHunk": "@@ -57,6 +65,49 @@ public static synchronized String generatePushChildName(long now) {\n     return result.toString();\n   }\n \n+  public static final String successor(String key) {\n+    Validation.validateNullableKey(key);\n+    Integer num = tryParseInt(key);\n+    if (num != null) {\n+      if (Long.valueOf(num) + 1L > Integer.MAX_VALUE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0e628347196331c34cf25c3b27812b402590077"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDI2OTk2OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxODoyNjowMFrOISOlpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxODoyNjowMFrOISOlpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk4NDI5NA==", "bodyText": "Optional nit: Remove empty line above.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r555984294", "createdAt": "2021-01-12T18:26:00Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/main/java/com/google/firebase/database/core/utilities/PushIdGenerator.java", "diffHunk": "@@ -57,6 +65,49 @@ public static synchronized String generatePushChildName(long now) {\n     return result.toString();\n   }\n \n+  public static final String successor(String key) {\n+    Validation.validateNullableKey(key);\n+    Integer num = tryParseInt(key);\n+    if (num != null) {\n+      if (Long.valueOf(num) + 1L > Integer.MAX_VALUE) {\n+        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n+        return String.valueOf(MIN_PUSH_CHAR);\n+      }\n+      return String.valueOf(num + 1);\n+    }\n+    StringBuilder next = new StringBuilder(key);\n+\n+    if (next.length() < MAX_KEY_LEN) {\n+      // If this key doesn't have all possible character slots filled,\n+      // the lexicographical successor is the same string with the smallest\n+      // possible character appended to the end.\n+      next.append(MIN_PUSH_CHAR);\n+      return next.toString();\n+    }\n+\n+    int i = next.length() - 1;\n+\n+    while (i >= 0 && next.charAt(i) == MAX_PUSH_CHAR) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0e628347196331c34cf25c3b27812b402590077"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwMDI5Mjc4OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxODozMjowNlrOISOz3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQyMToyNDowOFrOISV7Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk4NzkzMw==", "bodyText": "Let's talk about this offline. My gut feeling is that this should match all results, since they order past null.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r555987933", "createdAt": "2021-01-12T18:32:06Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -504,6 +585,37 @@ public void setVariousLimitsWithStartAtNameWithServerData()\n     expectations.waitForEvents();\n   }\n \n+  @Test\n+  public void setVariousLimitsWithStartAfterNameWithServerData()\n+      throws DatabaseException, InterruptedException, TestFailure, ExecutionException,\n+          TimeoutException {\n+    DatabaseReference ref = IntegrationTestHelpers.getRandomNode();\n+\n+    // TODO: this test kinda has race conditions. The listens are added sequentially, so we get a\n+    // lot of partial data back from the server. This all correct, and we end up in the correct\n+    // state, but it's still kinda weird. Consider having ValueExpectationHelper deal with initial\n+    // state.\n+\n+    new WriteFuture(ref, new MapBuilder().put(\"a\", 1).put(\"b\", 2).put(\"c\", 3).put(\"d\", 4).build())\n+        .timedGet();\n+\n+    ValueExpectationHelper expectations = new ValueExpectationHelper();\n+\n+    expectations.add(ref.startAfter(null).limitToFirst(1), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0e628347196331c34cf25c3b27812b402590077"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjEwNDQ5MA==", "bodyText": "I added an explanation here: https://github.com/firebase/firebase-ios-sdk/pull/7209/files#r556060181.\nI know this reads funny, but I think it is the intended behavior because we are indexing on priority.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r556104490", "createdAt": "2021-01-12T21:24:08Z", "author": {"login": "IanWyszynski"}, "path": "firebase-database/src/androidTest/java/com/google/firebase/database/QueryTest.java", "diffHunk": "@@ -504,6 +585,37 @@ public void setVariousLimitsWithStartAtNameWithServerData()\n     expectations.waitForEvents();\n   }\n \n+  @Test\n+  public void setVariousLimitsWithStartAfterNameWithServerData()\n+      throws DatabaseException, InterruptedException, TestFailure, ExecutionException,\n+          TimeoutException {\n+    DatabaseReference ref = IntegrationTestHelpers.getRandomNode();\n+\n+    // TODO: this test kinda has race conditions. The listens are added sequentially, so we get a\n+    // lot of partial data back from the server. This all correct, and we end up in the correct\n+    // state, but it's still kinda weird. Consider having ValueExpectationHelper deal with initial\n+    // state.\n+\n+    new WriteFuture(ref, new MapBuilder().put(\"a\", 1).put(\"b\", 2).put(\"c\", 3).put(\"d\", 4).build())\n+        .timedGet();\n+\n+    ValueExpectationHelper expectations = new ValueExpectationHelper();\n+\n+    expectations.add(ref.startAfter(null).limitToFirst(1), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk4NzkzMw=="}, "originalCommit": {"oid": "a0e628347196331c34cf25c3b27812b402590077"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNDQ1MTA2OnYy", "diffSide": "RIGHT", "path": "firebase-database/src/test/java/com/google/firebase/database/PushIdGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNTo1MDo1NFrOIS1ySA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNTo1MDo1NFrOIS1ySA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYyNjUwNA==", "bodyText": "The expected state should come before the actual state. I think you need to flip the arguments everywhere.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2277#discussion_r556626504", "createdAt": "2021-01-13T15:50:54Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-database/src/test/java/com/google/firebase/database/PushIdGeneratorTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+// Copyright 2021 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.database;\n+\n+import static com.google.firebase.database.snapshot.ChildKey.MAX_KEY_NAME;\n+import static org.junit.Assert.assertEquals;\n+\n+import com.google.firebase.database.core.utilities.PushIdGenerator;\n+import org.codehaus.plexus.util.StringUtils;\n+import org.junit.Test;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+@org.junit.runner.RunWith(RobolectricTestRunner.class)\n+@Config(manifest = Config.NONE)\n+public class PushIdGeneratorTest {\n+\n+  private static final char MIN_PUSH_CHAR = '-';\n+\n+  private static final char MAX_PUSH_CHAR = 'z';\n+\n+  private static final int MAX_KEY_LEN = 786;\n+\n+  @Test\n+  public void testSuccessorSpecialValue() {\n+    assertEquals(\n+        PushIdGenerator.successor(String.valueOf(Integer.MAX_VALUE)),\n+        Character.toString(MIN_PUSH_CHAR));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "889aa883dce4b48fb00b31434dcd1918970d8e18"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1050, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}