{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5ODIzNzQy", "number": 1356, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozOTo0MVrODouYoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTozNzoxOVrODpQJSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDI5NjAxOnYy", "diffSide": "RIGHT", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/FileBackedNativeSessionFile.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozOTo0MVrOF3cqnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo1MjozM1rOF3imfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NTY2MA==", "bodyText": "Shouldn't we reuse getStream here?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393685660", "createdAt": "2020-03-17T13:39:41Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/FileBackedNativeSessionFile.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+\n+/** A {@link NativeSessionFile} backed by a {@link File} currently on disk. */\n+class FileBackedNativeSessionFile implements NativeSessionFile {\n+  private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  private final File f;\n+  private final String name;\n+\n+  FileBackedNativeSessionFile(String name, File f) {\n+    this.name = name;\n+    this.f = f;\n+  }\n+\n+  public String getName() {\n+    return this.name;\n+  }\n+\n+  @Override\n+  public InputStream getStream() {\n+    try {\n+      return new FileInputStream(f);\n+    } catch (FileNotFoundException f) {\n+      return null;\n+    }\n+  }\n+\n+  @Override\n+  public CrashlyticsReport.FilesPayload.File asFilePayload() {\n+    byte[] bytes = asBytes();\n+    return bytes != null\n+        ? CrashlyticsReport.FilesPayload.File.builder()\n+            .setContents(asBytes())\n+            .setFilename(name)\n+            .build()\n+        : null;\n+  }\n+\n+  private byte[] asBytes() {\n+    final byte[] readBuffer = new byte[8192];\n+    final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+    try (InputStream stream = new FileInputStream(f)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNzk3Nw==", "bodyText": "It was originally this, but then we have to null check the stream because getStream() returns a nullable.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393727977", "createdAt": "2020-03-17T14:38:47Z", "author": {"login": "jakeouellette"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/FileBackedNativeSessionFile.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+\n+/** A {@link NativeSessionFile} backed by a {@link File} currently on disk. */\n+class FileBackedNativeSessionFile implements NativeSessionFile {\n+  private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  private final File f;\n+  private final String name;\n+\n+  FileBackedNativeSessionFile(String name, File f) {\n+    this.name = name;\n+    this.f = f;\n+  }\n+\n+  public String getName() {\n+    return this.name;\n+  }\n+\n+  @Override\n+  public InputStream getStream() {\n+    try {\n+      return new FileInputStream(f);\n+    } catch (FileNotFoundException f) {\n+      return null;\n+    }\n+  }\n+\n+  @Override\n+  public CrashlyticsReport.FilesPayload.File asFilePayload() {\n+    byte[] bytes = asBytes();\n+    return bytes != null\n+        ? CrashlyticsReport.FilesPayload.File.builder()\n+            .setContents(asBytes())\n+            .setFilename(name)\n+            .build()\n+        : null;\n+  }\n+\n+  private byte[] asBytes() {\n+    final byte[] readBuffer = new byte[8192];\n+    final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+    try (InputStream stream = new FileInputStream(f)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NTY2MA=="}, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4MjkwOA==", "bodyText": "I think it would be more consistent, since getStream is the underlying API. Besides, you're already re-catching the FNFException in this method.\nIf your concern is the try-with-resources, it works with nullable AutoCloseables, you'd just need to check that stream is non-null inside the try block.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393782908", "createdAt": "2020-03-17T15:52:33Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/FileBackedNativeSessionFile.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+\n+/** A {@link NativeSessionFile} backed by a {@link File} currently on disk. */\n+class FileBackedNativeSessionFile implements NativeSessionFile {\n+  private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  private final File f;\n+  private final String name;\n+\n+  FileBackedNativeSessionFile(String name, File f) {\n+    this.name = name;\n+    this.f = f;\n+  }\n+\n+  public String getName() {\n+    return this.name;\n+  }\n+\n+  @Override\n+  public InputStream getStream() {\n+    try {\n+      return new FileInputStream(f);\n+    } catch (FileNotFoundException f) {\n+      return null;\n+    }\n+  }\n+\n+  @Override\n+  public CrashlyticsReport.FilesPayload.File asFilePayload() {\n+    byte[] bytes = asBytes();\n+    return bytes != null\n+        ? CrashlyticsReport.FilesPayload.File.builder()\n+            .setContents(asBytes())\n+            .setFilename(name)\n+            .build()\n+        : null;\n+  }\n+\n+  private byte[] asBytes() {\n+    final byte[] readBuffer = new byte[8192];\n+    final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+    try (InputStream stream = new FileInputStream(f)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NTY2MA=="}, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDI5Nzc4OnYy", "diffSide": "RIGHT", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/FileBackedNativeSessionFile.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0MDoxM1rOF3cr5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo1NzoxOFrOF3i0wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NTk4OQ==", "bodyText": "Why not just return bos.toByteArray()?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393685989", "createdAt": "2020-03-17T13:40:13Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/FileBackedNativeSessionFile.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+\n+/** A {@link NativeSessionFile} backed by a {@link File} currently on disk. */\n+class FileBackedNativeSessionFile implements NativeSessionFile {\n+  private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  private final File f;\n+  private final String name;\n+\n+  FileBackedNativeSessionFile(String name, File f) {\n+    this.name = name;\n+    this.f = f;\n+  }\n+\n+  public String getName() {\n+    return this.name;\n+  }\n+\n+  @Override\n+  public InputStream getStream() {\n+    try {\n+      return new FileInputStream(f);\n+    } catch (FileNotFoundException f) {\n+      return null;\n+    }\n+  }\n+\n+  @Override\n+  public CrashlyticsReport.FilesPayload.File asFilePayload() {\n+    byte[] bytes = asBytes();\n+    return bytes != null\n+        ? CrashlyticsReport.FilesPayload.File.builder()\n+            .setContents(asBytes())\n+            .setFilename(name)\n+            .build()\n+        : null;\n+  }\n+\n+  private byte[] asBytes() {\n+    final byte[] readBuffer = new byte[8192];\n+    final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+    try (InputStream stream = new FileInputStream(f)) {\n+      int read;\n+      while ((read = stream.read(readBuffer)) > 0) {\n+        bos.write(readBuffer, 0, read);\n+      }\n+      return new String(bos.toByteArray(), UTF_8).getBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMDU1Ng==", "bodyText": "This code was copied from https://github.com/firebase/firebase-android-sdk/blob/master/firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java#L370 , any idea why that one doesn't?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393730556", "createdAt": "2020-03-17T14:42:21Z", "author": {"login": "jakeouellette"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/FileBackedNativeSessionFile.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+\n+/** A {@link NativeSessionFile} backed by a {@link File} currently on disk. */\n+class FileBackedNativeSessionFile implements NativeSessionFile {\n+  private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  private final File f;\n+  private final String name;\n+\n+  FileBackedNativeSessionFile(String name, File f) {\n+    this.name = name;\n+    this.f = f;\n+  }\n+\n+  public String getName() {\n+    return this.name;\n+  }\n+\n+  @Override\n+  public InputStream getStream() {\n+    try {\n+      return new FileInputStream(f);\n+    } catch (FileNotFoundException f) {\n+      return null;\n+    }\n+  }\n+\n+  @Override\n+  public CrashlyticsReport.FilesPayload.File asFilePayload() {\n+    byte[] bytes = asBytes();\n+    return bytes != null\n+        ? CrashlyticsReport.FilesPayload.File.builder()\n+            .setContents(asBytes())\n+            .setFilename(name)\n+            .build()\n+        : null;\n+  }\n+\n+  private byte[] asBytes() {\n+    final byte[] readBuffer = new byte[8192];\n+    final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+    try (InputStream stream = new FileInputStream(f)) {\n+      int read;\n+      while ((read = stream.read(readBuffer)) > 0) {\n+        bos.write(readBuffer, 0, read);\n+      }\n+      return new String(bos.toByteArray(), UTF_8).getBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NTk4OQ=="}, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3NzgxMQ==", "bodyText": "Because that's returning the read-in bytes as a UTF-8 String, you just need to return the read-in bytes here, no?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393777811", "createdAt": "2020-03-17T15:45:52Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/FileBackedNativeSessionFile.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+\n+/** A {@link NativeSessionFile} backed by a {@link File} currently on disk. */\n+class FileBackedNativeSessionFile implements NativeSessionFile {\n+  private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  private final File f;\n+  private final String name;\n+\n+  FileBackedNativeSessionFile(String name, File f) {\n+    this.name = name;\n+    this.f = f;\n+  }\n+\n+  public String getName() {\n+    return this.name;\n+  }\n+\n+  @Override\n+  public InputStream getStream() {\n+    try {\n+      return new FileInputStream(f);\n+    } catch (FileNotFoundException f) {\n+      return null;\n+    }\n+  }\n+\n+  @Override\n+  public CrashlyticsReport.FilesPayload.File asFilePayload() {\n+    byte[] bytes = asBytes();\n+    return bytes != null\n+        ? CrashlyticsReport.FilesPayload.File.builder()\n+            .setContents(asBytes())\n+            .setFilename(name)\n+            .build()\n+        : null;\n+  }\n+\n+  private byte[] asBytes() {\n+    final byte[] readBuffer = new byte[8192];\n+    final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+    try (InputStream stream = new FileInputStream(f)) {\n+      int read;\n+      while ((read = stream.read(readBuffer)) > 0) {\n+        bos.write(readBuffer, 0, read);\n+      }\n+      return new String(bos.toByteArray(), UTF_8).getBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NTk4OQ=="}, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4NjU2Mg==", "bodyText": "Updated this one to be just toByteArray!", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393786562", "createdAt": "2020-03-17T15:57:18Z", "author": {"login": "jakeouellette"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/FileBackedNativeSessionFile.java", "diffHunk": "@@ -0,0 +1,77 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+\n+/** A {@link NativeSessionFile} backed by a {@link File} currently on disk. */\n+class FileBackedNativeSessionFile implements NativeSessionFile {\n+  private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n+\n+  private final File f;\n+  private final String name;\n+\n+  FileBackedNativeSessionFile(String name, File f) {\n+    this.name = name;\n+    this.f = f;\n+  }\n+\n+  public String getName() {\n+    return this.name;\n+  }\n+\n+  @Override\n+  public InputStream getStream() {\n+    try {\n+      return new FileInputStream(f);\n+    } catch (FileNotFoundException f) {\n+      return null;\n+    }\n+  }\n+\n+  @Override\n+  public CrashlyticsReport.FilesPayload.File asFilePayload() {\n+    byte[] bytes = asBytes();\n+    return bytes != null\n+        ? CrashlyticsReport.FilesPayload.File.builder()\n+            .setContents(asBytes())\n+            .setFilename(name)\n+            .build()\n+        : null;\n+  }\n+\n+  private byte[] asBytes() {\n+    final byte[] readBuffer = new byte[8192];\n+    final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+    try (InputStream stream = new FileInputStream(f)) {\n+      int read;\n+      while ((read = stream.read(readBuffer)) > 0) {\n+        bos.write(readBuffer, 0, read);\n+      }\n+      return new String(bos.toByteArray(), UTF_8).getBytes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4NTk4OQ=="}, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDMxOTM2OnYy", "diffSide": "RIGHT", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/NativeSessionFile.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzo0NToyN1rOF3c5xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo0NzowMVrOF3iV9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4OTU0Mw==", "bodyText": "Shouldn't we keep the serialization method separate from this API? I.e. rather than have this class know how to serialize itself to a FilesPayload, shouldn't we have a FilesPayloadSerializer? What if we wanted to add other serialization methods later?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393689543", "createdAt": "2020-03-17T13:45:27Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/NativeSessionFile.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport;\n+import java.io.InputStream;\n+\n+/**\n+ * An abstraction of a \"File\" resource sent to the Crashlytics backend when an NDK Crash has\n+ * occurred.\n+ */\n+interface NativeSessionFile {\n+  /** Shortname of the file, e.g., \"logs\" */\n+  @NonNull\n+  String getName();\n+\n+  /** Representation of the NativeSessionFile as a stream */\n+  @Nullable\n+  InputStream getStream();\n+\n+  /**\n+   * Representation of the NativeSessionFile as {@link CrashlyticsReport.FilesPayload.File} object.\n+   */\n+  @Nullable\n+  CrashlyticsReport.FilesPayload.File asFilePayload();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2NzYwOA==", "bodyText": "Short answer: Eventually getStream() will go away because this class will not have the old codepath, and this will just be the FilesPayloadSerializer.\nLong answer:\nYeah, I went back and forth on this a little bit myself. I didn't want to build the datatransport code on getStream() because it results in a double copy of a byte stream into a new byte stream.\n(wearing OOP nerd hat) There's actually a way to solve this where you separate out the data (bytes, files) and behavior (gzip from stream of bytes, gzip from filestream, datatransport from bytes of files or bytes of bytes).\nThe way is multiple dispatch. On java though, multiple dispatch has to be implemented via visitor pattern (implement a stream converter that visits the bytes / files, then converts to a stream, implement a filepayloadconverter that visits the bytes / files, and converts them to bytes). Doing so is pretty verbose. Since the API for getStream() is going away, I decided it was okay to just flatten them into this api, but if you wanted, I can switch to visitor.\nThis whole multiple dispatch challenge, for what it is worth, is called the \"expression problem\" https://eli.thegreenplace.net/2016/the-expression-problem-and-its-solutions/", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393767608", "createdAt": "2020-03-17T15:32:43Z", "author": {"login": "jakeouellette"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/NativeSessionFile.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport;\n+import java.io.InputStream;\n+\n+/**\n+ * An abstraction of a \"File\" resource sent to the Crashlytics backend when an NDK Crash has\n+ * occurred.\n+ */\n+interface NativeSessionFile {\n+  /** Shortname of the file, e.g., \"logs\" */\n+  @NonNull\n+  String getName();\n+\n+  /** Representation of the NativeSessionFile as a stream */\n+  @Nullable\n+  InputStream getStream();\n+\n+  /**\n+   * Representation of the NativeSessionFile as {@link CrashlyticsReport.FilesPayload.File} object.\n+   */\n+  @Nullable\n+  CrashlyticsReport.FilesPayload.File asFilePayload();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4OTU0Mw=="}, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3ODY3Ng==", "bodyText": "\ud83e\udd13 alright, leave it the way it is. \ud83d\ude1d", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393778676", "createdAt": "2020-03-17T15:47:01Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/NativeSessionFile.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.crashlytics.internal.model.CrashlyticsReport;\n+import java.io.InputStream;\n+\n+/**\n+ * An abstraction of a \"File\" resource sent to the Crashlytics backend when an NDK Crash has\n+ * occurred.\n+ */\n+interface NativeSessionFile {\n+  /** Shortname of the file, e.g., \"logs\" */\n+  @NonNull\n+  String getName();\n+\n+  /** Representation of the NativeSessionFile as a stream */\n+  @Nullable\n+  InputStream getStream();\n+\n+  /**\n+   * Representation of the NativeSessionFile as {@link CrashlyticsReport.FilesPayload.File} object.\n+   */\n+  @Nullable\n+  CrashlyticsReport.FilesPayload.File asFilePayload();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4OTU0Mw=="}, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDUyNTg4OnYy", "diffSide": "RIGHT", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/NativeSessionFileGzipper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDozMjo1OFrOF3e_Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo0Nzo0NVrOF3iYHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMzY2Nw==", "bodyText": "We should probably use 8192 here, as above.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393723667", "createdAt": "2020-03-17T14:32:58Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/NativeSessionFileGzipper.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.zip.GZIPOutputStream;\n+\n+/** Copies {@link NativeSessionFile} into gzipped files within a provided path. */\n+class NativeSessionFileGzipper {\n+\n+  static void processNativeSessions(File nativeSessionDirectory, List<NativeSessionFile> streams)\n+      throws IOException {\n+\n+    for (NativeSessionFile stream : streams) {\n+      InputStream inputStream = null;\n+      try {\n+        inputStream = stream.getStream();\n+        if (inputStream == null) {\n+          continue;\n+        }\n+        gzipInputStream(inputStream, new File(nativeSessionDirectory, stream.getName()));\n+      } catch (Exception e) {\n+        // Skip invalid files.\n+      } finally {\n+        CommonUtils.closeQuietly(inputStream);\n+      }\n+    }\n+  }\n+\n+  private static void gzipInputStream(@Nullable InputStream input, @NonNull File output)\n+      throws IOException {\n+    if (input == null) {\n+      return;\n+    }\n+    byte[] buffer = new byte[1024];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2OTMyMw==", "bodyText": "This was copypasta of the other place where we were zipping, happy to switch it (I assumed each was set for domain-specific reasons of the objects they were serializing)", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393769323", "createdAt": "2020-03-17T15:35:03Z", "author": {"login": "jakeouellette"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/NativeSessionFileGzipper.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.zip.GZIPOutputStream;\n+\n+/** Copies {@link NativeSessionFile} into gzipped files within a provided path. */\n+class NativeSessionFileGzipper {\n+\n+  static void processNativeSessions(File nativeSessionDirectory, List<NativeSessionFile> streams)\n+      throws IOException {\n+\n+    for (NativeSessionFile stream : streams) {\n+      InputStream inputStream = null;\n+      try {\n+        inputStream = stream.getStream();\n+        if (inputStream == null) {\n+          continue;\n+        }\n+        gzipInputStream(inputStream, new File(nativeSessionDirectory, stream.getName()));\n+      } catch (Exception e) {\n+        // Skip invalid files.\n+      } finally {\n+        CommonUtils.closeQuietly(inputStream);\n+      }\n+    }\n+  }\n+\n+  private static void gzipInputStream(@Nullable InputStream input, @NonNull File output)\n+      throws IOException {\n+    if (input == null) {\n+      return;\n+    }\n+    byte[] buffer = new byte[1024];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMzY2Nw=="}, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3OTIyOA==", "bodyText": "Understood, yeah, no good reason for it.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393779228", "createdAt": "2020-03-17T15:47:45Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/NativeSessionFileGzipper.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.zip.GZIPOutputStream;\n+\n+/** Copies {@link NativeSessionFile} into gzipped files within a provided path. */\n+class NativeSessionFileGzipper {\n+\n+  static void processNativeSessions(File nativeSessionDirectory, List<NativeSessionFile> streams)\n+      throws IOException {\n+\n+    for (NativeSessionFile stream : streams) {\n+      InputStream inputStream = null;\n+      try {\n+        inputStream = stream.getStream();\n+        if (inputStream == null) {\n+          continue;\n+        }\n+        gzipInputStream(inputStream, new File(nativeSessionDirectory, stream.getName()));\n+      } catch (Exception e) {\n+        // Skip invalid files.\n+      } finally {\n+        CommonUtils.closeQuietly(inputStream);\n+      }\n+    }\n+  }\n+\n+  private static void gzipInputStream(@Nullable InputStream input, @NonNull File output)\n+      throws IOException {\n+    if (input == null) {\n+      return;\n+    }\n+    byte[] buffer = new byte[1024];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMzY2Nw=="}, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDUyOTQyOnYy", "diffSide": "RIGHT", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/SessionReportingCoordinator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDozMzozOFrOF3fBNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTozNTo0MVrOF3hzRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNDIxNQ==", "bodyText": "Minor stylistic request: Can we call this finalizeSessionWithNativeEvent, passing the session ID and the native files?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393724215", "createdAt": "2020-03-17T14:33:38Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/SessionReportingCoordinator.java", "diffHunk": "@@ -130,6 +132,27 @@ public void persistNonFatalEvent(Throwable event, Thread thread, long timestamp)\n     persistEvent(event, thread, EVENT_TYPE_LOGGED, timestamp, false);\n   }\n \n+  public void finalizeNativeEvent(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2OTc5OQ==", "bodyText": "sure", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393769799", "createdAt": "2020-03-17T15:35:41Z", "author": {"login": "jakeouellette"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/SessionReportingCoordinator.java", "diffHunk": "@@ -130,6 +132,27 @@ public void persistNonFatalEvent(Throwable event, Thread thread, long timestamp)\n     persistEvent(event, thread, EVENT_TYPE_LOGGED, timestamp, false);\n   }\n \n+  public void finalizeNativeEvent(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNDIxNQ=="}, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDUzNDA3OnYy", "diffSide": "RIGHT", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/SessionReportingCoordinator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDozNDozOFrOF3fEOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTozNTo1MVrOF3hz3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNDk4NQ==", "bodyText": "Same as above, can we call this finalizeSessionWithNativeEvent(sessionID, reportData, filesPayload)", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393724985", "createdAt": "2020-03-17T14:34:38Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/SessionReportingCoordinator.java", "diffHunk": "@@ -130,6 +132,27 @@ public void persistNonFatalEvent(Throwable event, Thread thread, long timestamp)\n     persistEvent(event, thread, EVENT_TYPE_LOGGED, timestamp, false);\n   }\n \n+  public void finalizeNativeEvent(\n+      @NonNull List<NativeSessionFile> nativeSessionFiles, String sessionId) {\n+    try {\n+      FilesPayload.Builder filesPayloadBuilder = FilesPayload.builder();\n+      ArrayList<FilesPayload.File> nativeFiles = new ArrayList<>();\n+      for (NativeSessionFile nativeSessionFile : nativeSessionFiles) {\n+        FilesPayload.File filePayload = nativeSessionFile.asFilePayload();\n+        if (filePayload != null) {\n+          nativeFiles.add(filePayload);\n+        }\n+      }\n+\n+      filesPayloadBuilder.setFiles(ImmutableList.from(nativeFiles));\n+\n+      reportPersistence.finalizeNativeEvent(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc2OTk1MA==", "bodyText": "sure", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393769950", "createdAt": "2020-03-17T15:35:51Z", "author": {"login": "jakeouellette"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/SessionReportingCoordinator.java", "diffHunk": "@@ -130,6 +132,27 @@ public void persistNonFatalEvent(Throwable event, Thread thread, long timestamp)\n     persistEvent(event, thread, EVENT_TYPE_LOGGED, timestamp, false);\n   }\n \n+  public void finalizeNativeEvent(\n+      @NonNull List<NativeSessionFile> nativeSessionFiles, String sessionId) {\n+    try {\n+      FilesPayload.Builder filesPayloadBuilder = FilesPayload.builder();\n+      ArrayList<FilesPayload.File> nativeFiles = new ArrayList<>();\n+      for (NativeSessionFile nativeSessionFile : nativeSessionFiles) {\n+        FilesPayload.File filePayload = nativeSessionFile.asFilePayload();\n+        if (filePayload != null) {\n+          nativeFiles.add(filePayload);\n+        }\n+      }\n+\n+      filesPayloadBuilder.setFiles(ImmutableList.from(nativeFiles));\n+\n+      reportPersistence.finalizeNativeEvent(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNDk4NQ=="}, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDUzNjg0OnYy", "diffSide": "RIGHT", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/model/CrashlyticsReport.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDozNToxNVrOF3fF6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo0ODoxM1rOF3iZgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNTQxNg==", "bodyText": "Is there any concern that we might have a situation where this is null, but session is as well?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393725416", "createdAt": "2020-03-17T14:35:15Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/model/CrashlyticsReport.java", "diffHunk": "@@ -98,6 +97,10 @@ public static Builder builder() {\n    */\n   @NonNull\n   public CrashlyticsReport withEvents(@NonNull ImmutableList<Event> events) {\n+    if (this.getNdkPayload() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3MDU1MA==", "bodyText": "I see what you mean, so check for getSession() == null and do illegal state then? sounds good", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393770550", "createdAt": "2020-03-17T15:36:36Z", "author": {"login": "jakeouellette"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/model/CrashlyticsReport.java", "diffHunk": "@@ -98,6 +97,10 @@ public static Builder builder() {\n    */\n   @NonNull\n   public CrashlyticsReport withEvents(@NonNull ImmutableList<Event> events) {\n+    if (this.getNdkPayload() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNTQxNg=="}, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc3OTU4NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r393779584", "createdAt": "2020-03-17T15:48:13Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/model/CrashlyticsReport.java", "diffHunk": "@@ -98,6 +97,10 @@ public static Builder builder() {\n    */\n   @NonNull\n   public CrashlyticsReport withEvents(@NonNull ImmutableList<Event> events) {\n+    if (this.getNdkPayload() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNTQxNg=="}, "originalCommit": {"oid": "15f091c2982ae62be7028eb2b81413bb7f90e285"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTgyNzMwOnYy", "diffSide": "RIGHT", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/DataTransportState.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTozNzoxOVrOF4UFpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTozNzoxOVrOF4UFpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU5MzcwMw==", "bodyText": "Add a test here?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1356#discussion_r394593703", "createdAt": "2020-03-18T19:37:19Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/DataTransportState.java", "diffHunk": "@@ -0,0 +1,46 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.common;\n+\n+import com.google.firebase.crashlytics.internal.settings.model.AppSettingsData;\n+\n+public enum DataTransportState {\n+  NONE,\n+  JAVA_ONLY,\n+  ALL;\n+\n+  // Used to determine whether to upload reports through the legacy reports endpoint\n+  static final int REPORT_UPLOAD_VARIANT_LEGACY = 1;\n+  // Used to determine whether to upload reports through the new DataTransport API.\n+  static final int REPORT_UPLOAD_VARIANT_DATATRANSPORT = 2;\n+\n+  static DataTransportState getState(boolean dataTransportState, boolean dataTransportNativeState) {\n+    if (!dataTransportState) {\n+      return NONE;\n+    }\n+    if (!dataTransportNativeState) {\n+      return JAVA_ONLY;\n+    }\n+    return ALL;\n+  }\n+\n+  static DataTransportState getState(AppSettingsData appSettingsData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56a4eeb2a96517c01f25c15ab61f892407124b6d"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1401, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}