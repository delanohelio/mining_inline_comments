{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTMzNDgx", "number": 1282, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjoxNzo0MlrODjQ1rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjoxNzo0MlrODjQ1rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzAyNjM3OnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/CrossProcessLock.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjoxNzo0MlrOFu-a5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjozNjozM1rOFu-8Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwMTUxMA==", "bodyText": "Do we need this?\nCan't we just do this: (without the finally block):\n      return crossProcessLock;\n    } catch (IOException e) {\n      Log.e(TAG, \"encountered error while creating and acquiring the lock, ignoring\", e);\n      if (channel == null) {\n        return null;\n      }\n      try {\n        channel.close();\n      } catch (IOException e) {\n        // nothing to do here\n      }\n      if (lock != null) {\n        try {\n          lock.release();\n        } catch (IOException e) {\n          // nothing to do here\n        }\n      }\n      return null;\n    }", "url": "https://github.com/firebase/firebase-android-sdk/pull/1282#discussion_r384801510", "createdAt": "2020-02-26T22:17:42Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/CrossProcessLock.java", "diffHunk": "@@ -31,16 +33,46 @@ private CrossProcessLock(FileChannel channel, FileLock lock) {\n     this.lock = lock;\n   }\n \n+  /**\n+   * Create and return a lock that is exclusive across processes. If another process\n+   * has the lock then this call will block until it is released.\n+   * @param lockName the lockname is global across all processes of an app\n+   * @return a CrossProcessLock if success. If the lock failed to acquire (maybe due to disk full\n+   * or other unexpected and unsupported permissions) then null will be returned.\n+   */\n   static CrossProcessLock acquire(Context appContext, String lockName) {\n+    FileChannel channel = null;\n+    FileLock lock = null;\n     try {\n       File file = new File(appContext.getFilesDir(), lockName);\n-      FileChannel channel = new RandomAccessFile(file, \"rw\").getChannel();\n+      channel = new RandomAccessFile(file, \"rw\").getChannel();\n       // Use the file channel to create a lock on the file.\n       // This method blocks until it can retrieve the lock.\n-      FileLock lock = channel.lock();\n-      return new CrossProcessLock(channel, lock);\n+      lock = channel.lock();\n+      CrossProcessLock crossProcessLock = new CrossProcessLock(channel, lock);\n+      channel = null;\n+      lock = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54641087983d76663fed4c6541a15088b6584854"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxMDAzOA==", "bodyText": "That would also work, do you prefer it?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1282#discussion_r384810038", "createdAt": "2020-02-26T22:36:33Z", "author": {"login": "fredquintana"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/CrossProcessLock.java", "diffHunk": "@@ -31,16 +33,46 @@ private CrossProcessLock(FileChannel channel, FileLock lock) {\n     this.lock = lock;\n   }\n \n+  /**\n+   * Create and return a lock that is exclusive across processes. If another process\n+   * has the lock then this call will block until it is released.\n+   * @param lockName the lockname is global across all processes of an app\n+   * @return a CrossProcessLock if success. If the lock failed to acquire (maybe due to disk full\n+   * or other unexpected and unsupported permissions) then null will be returned.\n+   */\n   static CrossProcessLock acquire(Context appContext, String lockName) {\n+    FileChannel channel = null;\n+    FileLock lock = null;\n     try {\n       File file = new File(appContext.getFilesDir(), lockName);\n-      FileChannel channel = new RandomAccessFile(file, \"rw\").getChannel();\n+      channel = new RandomAccessFile(file, \"rw\").getChannel();\n       // Use the file channel to create a lock on the file.\n       // This method blocks until it can retrieve the lock.\n-      FileLock lock = channel.lock();\n-      return new CrossProcessLock(channel, lock);\n+      lock = channel.lock();\n+      CrossProcessLock crossProcessLock = new CrossProcessLock(channel, lock);\n+      channel = null;\n+      lock = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwMTUxMA=="}, "originalCommit": {"oid": "54641087983d76663fed4c6541a15088b6584854"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 810, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}