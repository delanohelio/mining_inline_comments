{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1ODU2MTE2", "number": 1815, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo1NToyNVrOERmBpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo1ODoxM1rOERmFTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODg0MjYwOnYy", "diffSide": "RIGHT", "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/DecoderConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo1NToyNVrOG2ZYOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo1NToyNVrOG2ZYOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5MjA4OA==", "bodyText": "Would it make sense to allow the following?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <U> T register(@NonNull Class<U> clazz, @NonNull ObjectDecoder<U> objectDecoder);\n          \n          \n            \n              <U> T register(@NonNull Class<U> clazz, @NonNull ObjectDecoder<? extends U> objectDecoder);\n          \n      \n    \n    \n  \n\nI can't see how it would cause problems in principle. i.e. when a class T is needed, it is ok to return a subclass of that at the type level. Not sure if it would be useful in practice, but seems pretty cheap to change.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1815#discussion_r459692088", "createdAt": "2020-07-23T19:55:25Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/DecoderConfig.java", "diffHunk": "@@ -0,0 +1,27 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * Implemented by concrete {@link DataDecoder} builders.\n+ *\n+ * <p>Used by clients to configure decoders without coupling to a particular decoder format.\n+ */\n+public interface DecoderConfig<T extends DecoderConfig<T>> {\n+  @NonNull\n+  <U> T register(@NonNull Class<U> clazz, @NonNull ObjectDecoder<U> objectDecoder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8115cb908ff4406b5493bb76c00605435bec03f4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODg0OTEwOnYy", "diffSide": "RIGHT", "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo1NzoyNFrOG2ZcNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo1NzoyNFrOG2ZcNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5MzExMA==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return new JsonDataDecoderBuilderContext(objectDecoders);\n          \n          \n            \n                return new JsonDataDecoderContext(objectDecoders);\n          \n      \n    \n    \n  \n\nLet's rename this class as it's not a builder.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1815#discussion_r459693110", "createdAt": "2020-07-23T19:57:24Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilder.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders.json;\n+\n+import androidx.annotation.NonNull;\n+import com.google.firebase.decoders.DataDecoder;\n+import com.google.firebase.decoders.DecoderConfig;\n+import com.google.firebase.decoders.ObjectDecoder;\n+import java.util.HashMap;\n+\n+public final class JsonDataDecoderBuilder implements DecoderConfig<JsonDataDecoderBuilder> {\n+  private final HashMap<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n+\n+  public JsonDataDecoderBuilder() {}\n+\n+  @NonNull\n+  @Override\n+  public <T> JsonDataDecoderBuilder register(\n+      @NonNull Class<T> clazz, @NonNull ObjectDecoder<T> objectDecoder) {\n+    objectDecoders.put(clazz, objectDecoder);\n+    return this;\n+  }\n+\n+  @NonNull\n+  public DataDecoder build() {\n+    return new JsonDataDecoderBuilderContext(objectDecoders);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8115cb908ff4406b5493bb76c00605435bec03f4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODg1MTk5OnYy", "diffSide": "RIGHT", "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTo1ODoxM1rOG2Zd8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo1NjoxOVrOG2c8lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5MzU1NA==", "bodyText": "is my understanding correct that you will add ability to register annotation processors later?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1815#discussion_r459693554", "createdAt": "2020-07-23T19:58:13Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilder.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders.json;\n+\n+import androidx.annotation.NonNull;\n+import com.google.firebase.decoders.DataDecoder;\n+import com.google.firebase.decoders.DecoderConfig;\n+import com.google.firebase.decoders.ObjectDecoder;\n+import java.util.HashMap;\n+\n+public final class JsonDataDecoderBuilder implements DecoderConfig<JsonDataDecoderBuilder> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8115cb908ff4406b5493bb76c00605435bec03f4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MDU1MA==", "bodyText": "yes, it will be able to register AnnotationFieldHandler, and fallbackObjectDecoder later.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1815#discussion_r459750550", "createdAt": "2020-07-23T21:56:19Z", "author": {"login": "James201311"}, "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilder.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders.json;\n+\n+import androidx.annotation.NonNull;\n+import com.google.firebase.decoders.DataDecoder;\n+import com.google.firebase.decoders.DecoderConfig;\n+import com.google.firebase.decoders.ObjectDecoder;\n+import java.util.HashMap;\n+\n+public final class JsonDataDecoderBuilder implements DecoderConfig<JsonDataDecoderBuilder> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5MzU1NA=="}, "originalCommit": {"oid": "8115cb908ff4406b5493bb76c00605435bec03f4"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1124, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}