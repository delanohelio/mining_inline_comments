{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1Njg5MTAw", "number": 2023, "title": "Add StrictModeRule for use by SDKs.", "bodyText": "", "createdAt": "2020-09-30T18:11:08Z", "url": "https://github.com/firebase/firebase-android-sdk/pull/2023", "merged": true, "mergeCommit": {"oid": "eb7cae183904abf24ecd67db05168a8ea320da35"}, "closed": true, "closedAt": "2020-09-30T20:32:56Z", "author": {"login": "vkryachko"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOA0jxgH2gAyNDk1Njg5MTAwOjcwZWI3ZjM5ZmMwNTk2NTYxNWY3MDA5MWY0Y2YyOTZhZGU1OWVkMzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOBGXbAFqTQ5OTcwMzYwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "70eb7f39fc05965615f70091f4cf296ade59ed38", "author": {"user": {"login": "vkryachko", "name": "Vladimir Kryachko"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/70eb7f39fc05965615f70091f4cf296ade59ed38", "committedDate": "2020-09-30T18:09:35Z", "message": "Add StrictModeRule for use by SDKs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "708b68f5ee38824144c3e5fb863e02ad0dd780e7", "author": {"user": {"login": "vkryachko", "name": "Vladimir Kryachko"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/708b68f5ee38824144c3e5fb863e02ad0dd780e7", "committedDate": "2020-09-30T18:21:30Z", "message": "Add copyright."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5Njk5Njg0", "url": "https://github.com/firebase/firebase-android-sdk/pull/2023#pullrequestreview-499699684", "createdAt": "2020-09-30T18:23:34Z", "commit": {"oid": "708b68f5ee38824144c3e5fb863e02ad0dd780e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODoyMzozNFrOHaqAzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODoyMzozNFrOHaqAzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcxMzM1Ng==", "bodyText": "out of curiosity, why is this part needed?", "url": "https://github.com/firebase/firebase-android-sdk/pull/2023#discussion_r497713356", "createdAt": "2020-09-30T18:23:34Z", "author": {"login": "rlazo"}, "path": "integ-testing/src/main/java/com/google/firebase/testing/integ/StrictModeRule.java", "diffHunk": "@@ -0,0 +1,166 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.testing.integ;\n+\n+import android.os.Build;\n+import android.os.StrictMode;\n+import android.os.StrictMode.ThreadPolicy;\n+import android.os.StrictMode.VmPolicy;\n+import androidx.test.internal.runner.junit4.statement.UiThreadStatement;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.MultipleFailureException;\n+import org.junit.runners.model.Statement;\n+\n+/**\n+ * This rule enables {@link StrictMode} on the <a\n+ * href=\"https://developer.android.com/guide/components/processes-and-threads#Threads\">Main\n+ * thread</a>.\n+ *\n+ * <p>Just adding it as a {@link @Rule} to your test is enough to enable it.\n+ *\n+ * <p>Note however that the tests don't run on the Main thread by default, so if you expect the code\n+ * under test to run in the Main thread in production, please use the provided {@link\n+ * #runOnMainThread(MaybeThrowingRunnable)} to execute it on the Main thread.\n+ *\n+ * <p>Example use:\n+ *\n+ * <pre>{@code\n+ * @Test\n+ * public class MyTests {\n+ *   @Rule public StrictModeRule strictMode = new StrictModeRule();\n+ *\n+ *  @Test public void myTest() {\n+ *    // runs on the instrumentation thread\n+ *    runMyCode();\n+ *\n+ *    // runs on Main thread.\n+ *    strictMode.runOnMainThread(() -> {\n+ *      runCodeOnMainThread();\n+ *    });\n+ *  }\n+ * }\n+ * }</pre>\n+ */\n+public class StrictModeRule implements TestRule {\n+\n+  private static final Executor penaltyListenerExecutor = Runnable::run;\n+\n+  /** Runs {@code runnable} on Main thread. */\n+  public <E extends Throwable> void runOnMainThread(MaybeThrowingRunnable<E> runnable) throws E {\n+    try {\n+      new UiThreadStatement(\n+              new Statement() {\n+                @Override\n+                public void evaluate() throws E {\n+                  runnable.run();\n+                }\n+              },\n+              true)\n+          .evaluate();\n+    } catch (Throwable throwable) {\n+      @SuppressWarnings(\"unchecked\")\n+      E e = (E) throwable;\n+      throw e;\n+    }\n+  }\n+\n+  /** Runs {@code callable} on Main thread and returns it result. */\n+  public <T, E extends Throwable> T runOnMainThread(MaybeThrowingCallable<T, E> callable) throws E {\n+    try {\n+      AtomicReference<T> result = new AtomicReference<>();\n+      new UiThreadStatement(\n+              new Statement() {\n+                @Override\n+                public void evaluate() throws E {\n+                  result.set(callable.call());\n+                }\n+              },\n+              true)\n+          .evaluate();\n+      return result.get();\n+    } catch (Throwable throwable) {\n+      @SuppressWarnings(\"unchecked\")\n+      E e = (E) throwable;\n+      throw e;\n+    }\n+  }\n+\n+  @Override\n+  public Statement apply(Statement base, Description description) {\n+    return new Statement() {\n+      @Override\n+      public void evaluate() throws Throwable {\n+        AtomicReference<ThreadPolicy> originalThreadPolicy = new AtomicReference<>();\n+        VmPolicy originalVmPolicy = StrictMode.getVmPolicy();\n+\n+        ConcurrentLinkedQueue<Throwable> violations = new ConcurrentLinkedQueue<>();\n+\n+        InstrumentationRegistry.getInstrumentation()\n+            .runOnMainSync(\n+                () -> {\n+                  originalThreadPolicy.set(StrictMode.getThreadPolicy());\n+\n+                  StrictMode.setThreadPolicy(createThreadPolicy(violations));\n+                  StrictMode.setVmPolicy(createVmPolicy(violations));\n+                });\n+        try {\n+          base.evaluate();\n+        } catch (Throwable e) {\n+          violations.add(e);\n+        } finally {\n+          InstrumentationRegistry.getInstrumentation()\n+              .runOnMainSync(() -> StrictMode.setThreadPolicy(originalThreadPolicy.get()));\n+          runGc();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "708b68f5ee38824144c3e5fb863e02ad0dd780e7"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97d7de3a8401e6aa5aeddba490ab33c3cf9df868", "author": {"user": {"login": "vkryachko", "name": "Vladimir Kryachko"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/97d7de3a8401e6aa5aeddba490ab33c3cf9df868", "committedDate": "2020-09-30T18:27:14Z", "message": "Add comment on why gc needs to run."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NzAzNjA1", "url": "https://github.com/firebase/firebase-android-sdk/pull/2023#pullrequestreview-499703605", "createdAt": "2020-09-30T18:29:02Z", "commit": {"oid": "97d7de3a8401e6aa5aeddba490ab33c3cf9df868"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2365, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}