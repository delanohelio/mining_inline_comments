{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1ODA1NTI1", "number": 1332, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowMDozMlrODmuALQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo1MzoyN1rODm3o8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTI2MTg5OnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/androidTest/java/com/google/firebase/inappmessaging/FirebaseInAppMessagingFlowableTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowMDozMlrOF0S5Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNDozNVrOF0bknQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3OTgxMQ==", "bodyText": "Why anonymous subclass? How about InstallationTokenResult.builder()...build()?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390379811", "createdAt": "2020-03-10T15:00:32Z", "author": {"login": "vkryachko"}, "path": "firebase-inappmessaging/src/androidTest/java/com/google/firebase/inappmessaging/FirebaseInAppMessagingFlowableTest.java", "diffHunk": "@@ -223,22 +225,31 @@ public void setUp() {\n     clearProtoDiskCache(InstrumentationRegistry.getTargetContext());\n     application =\n         spy((Application) InstrumentationRegistry.getTargetContext().getApplicationContext());\n-    String id = FirebaseInstanceId.getInstance().getId();\n-    when(instanceId.getId()).thenReturn(id);\n-    when(instanceId.getInstanceId())\n+    when(firebaseInstallations.getId()).thenReturn(Tasks.forResult(INSTANCE_ID));\n+    when(firebaseInstallations.getToken(false))\n         .thenReturn(\n             Tasks.forResult(\n-                new InstanceIdResult() {\n+                new InstallationTokenResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMjAxMw==", "bodyText": "Brilliant, I didn't notice this was a builder!", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390522013", "createdAt": "2020-03-10T18:24:35Z", "author": {"login": "JasonAHeron"}, "path": "firebase-inappmessaging/src/androidTest/java/com/google/firebase/inappmessaging/FirebaseInAppMessagingFlowableTest.java", "diffHunk": "@@ -223,22 +225,31 @@ public void setUp() {\n     clearProtoDiskCache(InstrumentationRegistry.getTargetContext());\n     application =\n         spy((Application) InstrumentationRegistry.getTargetContext().getApplicationContext());\n-    String id = FirebaseInstanceId.getInstance().getId();\n-    when(instanceId.getId()).thenReturn(id);\n-    when(instanceId.getInstanceId())\n+    when(firebaseInstallations.getId()).thenReturn(Tasks.forResult(INSTANCE_ID));\n+    when(firebaseInstallations.getToken(false))\n         .thenReturn(\n             Tasks.forResult(\n-                new InstanceIdResult() {\n+                new InstallationTokenResult() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3OTgxMQ=="}, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTI2OTg4OnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/AbtIntegrationHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowMjowOFrOF0S98Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowMjowOFrOF0S98Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MTA0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private FirebaseABTesting abTesting;\n          \n          \n            \n              private final FirebaseABTesting abTesting;\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390381041", "createdAt": "2020-03-10T15:02:08Z", "author": {"login": "vkryachko"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/AbtIntegrationHelper.java", "diffHunk": "@@ -17,16 +17,21 @@\n import com.google.firebase.abt.AbtException;\n import com.google.firebase.abt.AbtExperimentInfo;\n import com.google.firebase.abt.FirebaseABTesting;\n+import com.google.firebase.inappmessaging.internal.injection.scopes.FirebaseAppScope;\n import com.google.internal.firebase.inappmessaging.v1.CampaignProto;\n import com.google.internal.firebase.inappmessaging.v1.sdkserving.FetchEligibleCampaignsResponse;\n import developers.mobile.abt.FirebaseAbt;\n import java.util.ArrayList;\n import java.util.Date;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n import javax.inject.Inject;\n \n /** @hide */\n+@FirebaseAppScope\n public class AbtIntegrationHelper {\n-  private static FirebaseABTesting abTesting;\n+  private FirebaseABTesting abTesting;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTI5MTE2OnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ApiClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowNjo0MVrOF0TLVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDowODo1OFrOF0fJoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NDQ3MA==", "bodyText": "Why are you using continueWithTask? do you want to proceed even if this task is cancelled?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390384470", "createdAt": "2020-03-10T15:06:41Z", "author": {"login": "vkryachko"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ApiClient.java", "diffHunk": "@@ -89,28 +89,35 @@ static FetchEligibleCampaignsResponse createCacheExpiringResponse() {\n     }\n     Logging.logi(FETCHING_CAMPAIGN_MESSAGE);\n     providerInstaller.install();\n-    return firebaseInstanceId\n-        .getInstanceId()\n-        .continueWith(\n-            instanceIdResultTask -> {\n-              InstanceIdResult instanceIdResult = instanceIdResultTask.getResult();\n-              if (instanceIdResult == null) {\n-                Logging.logw(\"InstanceID is null, not calling backend\");\n-                return createCacheExpiringResponse();\n-              }\n-              return withCacheExpirationSafeguards(\n-                  grpcClient\n-                      .get()\n-                      .fetchEligibleCampaigns(\n-                          FetchEligibleCampaignsRequest.newBuilder()\n-                              // The project Id we expect is the gcm sender id\n-                              .setProjectNumber(firebaseApp.getOptions().getGcmSenderId())\n-                              .addAllAlreadySeenCampaigns(\n-                                  impressionList.getAlreadySeenCampaignsList())\n-                              .setClientSignals(getClientSignals())\n-                              .setRequestingClientApp(getClientAppInfo(instanceIdResult))\n-                              .build()));\n-            });\n+    return firebaseInstallations\n+        .getId()\n+        .continueWithTask(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzNTg4MQ==", "bodyText": "so now I changed it to continueWith and I check both results against null. Am I not handling error cases correctly?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390535881", "createdAt": "2020-03-10T18:47:37Z", "author": {"login": "JasonAHeron"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ApiClient.java", "diffHunk": "@@ -89,28 +89,35 @@ static FetchEligibleCampaignsResponse createCacheExpiringResponse() {\n     }\n     Logging.logi(FETCHING_CAMPAIGN_MESSAGE);\n     providerInstaller.install();\n-    return firebaseInstanceId\n-        .getInstanceId()\n-        .continueWith(\n-            instanceIdResultTask -> {\n-              InstanceIdResult instanceIdResult = instanceIdResultTask.getResult();\n-              if (instanceIdResult == null) {\n-                Logging.logw(\"InstanceID is null, not calling backend\");\n-                return createCacheExpiringResponse();\n-              }\n-              return withCacheExpirationSafeguards(\n-                  grpcClient\n-                      .get()\n-                      .fetchEligibleCampaigns(\n-                          FetchEligibleCampaignsRequest.newBuilder()\n-                              // The project Id we expect is the gcm sender id\n-                              .setProjectNumber(firebaseApp.getOptions().getGcmSenderId())\n-                              .addAllAlreadySeenCampaigns(\n-                                  impressionList.getAlreadySeenCampaignsList())\n-                              .setClientSignals(getClientSignals())\n-                              .setRequestingClientApp(getClientAppInfo(instanceIdResult))\n-                              .build()));\n-            });\n+    return firebaseInstallations\n+        .getId()\n+        .continueWithTask(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NDQ3MA=="}, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4MDY0MA==", "bodyText": "I am actually not sure that null can be returned at all from those tasks, if an error happened getResult() will throw that error so I think it should be fine in terms of error handling.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390580640", "createdAt": "2020-03-10T20:08:58Z", "author": {"login": "vkryachko"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ApiClient.java", "diffHunk": "@@ -89,28 +89,35 @@ static FetchEligibleCampaignsResponse createCacheExpiringResponse() {\n     }\n     Logging.logi(FETCHING_CAMPAIGN_MESSAGE);\n     providerInstaller.install();\n-    return firebaseInstanceId\n-        .getInstanceId()\n-        .continueWith(\n-            instanceIdResultTask -> {\n-              InstanceIdResult instanceIdResult = instanceIdResultTask.getResult();\n-              if (instanceIdResult == null) {\n-                Logging.logw(\"InstanceID is null, not calling backend\");\n-                return createCacheExpiringResponse();\n-              }\n-              return withCacheExpirationSafeguards(\n-                  grpcClient\n-                      .get()\n-                      .fetchEligibleCampaigns(\n-                          FetchEligibleCampaignsRequest.newBuilder()\n-                              // The project Id we expect is the gcm sender id\n-                              .setProjectNumber(firebaseApp.getOptions().getGcmSenderId())\n-                              .addAllAlreadySeenCampaigns(\n-                                  impressionList.getAlreadySeenCampaignsList())\n-                              .setClientSignals(getClientSignals())\n-                              .setRequestingClientApp(getClientAppInfo(instanceIdResult))\n-                              .build()));\n-            });\n+    return firebaseInstallations\n+        .getId()\n+        .continueWithTask(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NDQ3MA=="}, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTMwMzYwOnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ApiClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowOTowMlrOF0TS0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODo0NzowOFrOF0cZyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NjM4Nw==", "bodyText": "It looks like this method can happen in parallel with the above getId() any reason you are doing them sequentially?, i.e.  could you try doing Tasks.whenAll(idTask, tokenTask).continueWith()?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390386387", "createdAt": "2020-03-10T15:09:02Z", "author": {"login": "vkryachko"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ApiClient.java", "diffHunk": "@@ -89,28 +89,35 @@ static FetchEligibleCampaignsResponse createCacheExpiringResponse() {\n     }\n     Logging.logi(FETCHING_CAMPAIGN_MESSAGE);\n     providerInstaller.install();\n-    return firebaseInstanceId\n-        .getInstanceId()\n-        .continueWith(\n-            instanceIdResultTask -> {\n-              InstanceIdResult instanceIdResult = instanceIdResultTask.getResult();\n-              if (instanceIdResult == null) {\n-                Logging.logw(\"InstanceID is null, not calling backend\");\n-                return createCacheExpiringResponse();\n-              }\n-              return withCacheExpirationSafeguards(\n-                  grpcClient\n-                      .get()\n-                      .fetchEligibleCampaigns(\n-                          FetchEligibleCampaignsRequest.newBuilder()\n-                              // The project Id we expect is the gcm sender id\n-                              .setProjectNumber(firebaseApp.getOptions().getGcmSenderId())\n-                              .addAllAlreadySeenCampaigns(\n-                                  impressionList.getAlreadySeenCampaignsList())\n-                              .setClientSignals(getClientSignals())\n-                              .setRequestingClientApp(getClientAppInfo(instanceIdResult))\n-                              .build()));\n-            });\n+    return firebaseInstallations\n+        .getId()\n+        .continueWithTask(\n+            idTask ->\n+                firebaseInstallations\n+                    .getToken(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzNTYyNQ==", "bodyText": "Nice! done", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390535625", "createdAt": "2020-03-10T18:47:08Z", "author": {"login": "JasonAHeron"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ApiClient.java", "diffHunk": "@@ -89,28 +89,35 @@ static FetchEligibleCampaignsResponse createCacheExpiringResponse() {\n     }\n     Logging.logi(FETCHING_CAMPAIGN_MESSAGE);\n     providerInstaller.install();\n-    return firebaseInstanceId\n-        .getInstanceId()\n-        .continueWith(\n-            instanceIdResultTask -> {\n-              InstanceIdResult instanceIdResult = instanceIdResultTask.getResult();\n-              if (instanceIdResult == null) {\n-                Logging.logw(\"InstanceID is null, not calling backend\");\n-                return createCacheExpiringResponse();\n-              }\n-              return withCacheExpirationSafeguards(\n-                  grpcClient\n-                      .get()\n-                      .fetchEligibleCampaigns(\n-                          FetchEligibleCampaignsRequest.newBuilder()\n-                              // The project Id we expect is the gcm sender id\n-                              .setProjectNumber(firebaseApp.getOptions().getGcmSenderId())\n-                              .addAllAlreadySeenCampaigns(\n-                                  impressionList.getAlreadySeenCampaignsList())\n-                              .setClientSignals(getClientSignals())\n-                              .setRequestingClientApp(getClientAppInfo(instanceIdResult))\n-                              .build()));\n-            });\n+    return firebaseInstallations\n+        .getId()\n+        .continueWithTask(\n+            idTask ->\n+                firebaseInstallations\n+                    .getToken(false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NjM4Nw=="}, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTMwODE0OnYy", "diffSide": "LEFT", "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/DataCollectionHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowOTo1NVrOF0TVdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODo0ODoxMFrOF0ccFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NzA2MA==", "bodyText": "Is this no longer desirable? Or did FIS change in a way that makes it a non-issue?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390387060", "createdAt": "2020-03-10T15:09:55Z", "author": {"login": "vkryachko"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/DataCollectionHelper.java", "diffHunk": "@@ -43,16 +42,10 @@\n   public DataCollectionHelper(\n       FirebaseApp firebaseApp,\n       SharedPreferencesUtils sharedPreferencesUtils,\n-      FirebaseInstanceId firebaseInstanceId,\n       Subscriber firebaseEventsSubscriber) {\n     this.sharedPreferencesUtils = sharedPreferencesUtils;\n     isGlobalAutomaticDataCollectionEnabled =\n         new AtomicBoolean(firebaseApp.isDataCollectionDefaultEnabled());\n-    if (isAutomaticDataCollectionEnabled()) {\n-      // Trigger this as early as possible, to minimize any latencies on returning the token", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzNjIxNA==", "bodyText": "This just felt like a premature optimization and it seemed like this would be a good time to understand if it was actually necessary", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390536214", "createdAt": "2020-03-10T18:48:10Z", "author": {"login": "JasonAHeron"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/DataCollectionHelper.java", "diffHunk": "@@ -43,16 +42,10 @@\n   public DataCollectionHelper(\n       FirebaseApp firebaseApp,\n       SharedPreferencesUtils sharedPreferencesUtils,\n-      FirebaseInstanceId firebaseInstanceId,\n       Subscriber firebaseEventsSubscriber) {\n     this.sharedPreferencesUtils = sharedPreferencesUtils;\n     isGlobalAutomaticDataCollectionEnabled =\n         new AtomicBoolean(firebaseApp.isDataCollectionDefaultEnabled());\n-    if (isAutomaticDataCollectionEnabled()) {\n-      // Trigger this as early as possible, to minimize any latencies on returning the token", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NzA2MA=="}, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTMzMTI3OnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/test/java/com/google/firebase/inappmessaging/FirebaseInAppMessagingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToxNDo1MlrOF0Tj7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODo0ODoyNFrOF0ccwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MDc2Ng==", "bodyText": "Builder here as well?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390390766", "createdAt": "2020-03-10T15:14:52Z", "author": {"login": "vkryachko"}, "path": "firebase-inappmessaging/src/test/java/com/google/firebase/inappmessaging/FirebaseInAppMessagingTest.java", "diffHunk": "@@ -167,11 +165,34 @@ public void setup() {\n \n     when(campaignCacheClient.get()).thenReturn(Maybe.just(campaignsResponse));\n \n-    when(firebaseInstanceId.getId()).thenReturn(INSTANCE_ID);\n-    when(firebaseInstanceId.getToken()).thenReturn(INSTANCE_TOKEN);\n+    when(firebaseInstallations.getId()).thenReturn(Tasks.forResult(INSTANCE_ID));\n+    when(firebaseInstallations.getToken(false))\n+        .thenReturn(\n+            Tasks.forResult(\n+                new InstallationTokenResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzNjM4Ng==", "bodyText": "done", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390536386", "createdAt": "2020-03-10T18:48:24Z", "author": {"login": "JasonAHeron"}, "path": "firebase-inappmessaging/src/test/java/com/google/firebase/inappmessaging/FirebaseInAppMessagingTest.java", "diffHunk": "@@ -167,11 +165,34 @@ public void setup() {\n \n     when(campaignCacheClient.get()).thenReturn(Maybe.just(campaignsResponse));\n \n-    when(firebaseInstanceId.getId()).thenReturn(INSTANCE_ID);\n-    when(firebaseInstanceId.getToken()).thenReturn(INSTANCE_TOKEN);\n+    when(firebaseInstallations.getId()).thenReturn(Tasks.forResult(INSTANCE_ID));\n+    when(firebaseInstallations.getToken(false))\n+        .thenReturn(\n+            Tasks.forResult(\n+                new InstallationTokenResult() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MDc2Ng=="}, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTMzMzEyOnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/test/java/com/google/firebase/inappmessaging/FirebaseInAppMessagingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToxNToxNFrOF0TlFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODo1MDo1MFrOF0cipQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MTA2MA==", "bodyText": "Could this be deleted?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390391060", "createdAt": "2020-03-10T15:15:14Z", "author": {"login": "vkryachko"}, "path": "firebase-inappmessaging/src/test/java/com/google/firebase/inappmessaging/FirebaseInAppMessagingTest.java", "diffHunk": "@@ -307,11 +336,11 @@ public void messageClicked(InAppMessage inAppMessage, Action action) {\n     verify(listenerScheduler, times(1)).addClickListener(any());\n   }\n \n-  @Implements(FirebaseInstanceId.class)\n-  public static class ShadowFirebaseInstanceId {\n-    @Implementation\n-    public static FirebaseInstanceId getInstance() {\n-      return firebaseInstanceId;\n-    }\n-  }\n+  //  @Implements(FirebaseInstanceId.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzNzg5Mw==", "bodyText": "yep!", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390537893", "createdAt": "2020-03-10T18:50:50Z", "author": {"login": "JasonAHeron"}, "path": "firebase-inappmessaging/src/test/java/com/google/firebase/inappmessaging/FirebaseInAppMessagingTest.java", "diffHunk": "@@ -307,11 +336,11 @@ public void messageClicked(InAppMessage inAppMessage, Action action) {\n     verify(listenerScheduler, times(1)).addClickListener(any());\n   }\n \n-  @Implements(FirebaseInstanceId.class)\n-  public static class ShadowFirebaseInstanceId {\n-    @Implementation\n-    public static FirebaseInstanceId getInstance() {\n-      return firebaseInstanceId;\n-    }\n-  }\n+  //  @Implements(FirebaseInstanceId.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MTA2MA=="}, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTMzNDM0OnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/test/java/com/google/firebase/inappmessaging/internal/ApiClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToxNToyNVrOF0Tlxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODo1MDo1N1rOF0ci7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MTIzOA==", "bodyText": "Builder here and throughout", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390391238", "createdAt": "2020-03-10T15:15:25Z", "author": {"login": "vkryachko"}, "path": "firebase-inappmessaging/src/test/java/com/google/firebase/inappmessaging/internal/ApiClientTest.java", "diffHunk": "@@ -118,26 +118,37 @@ public void setup() throws NameNotFoundException {\n             () -> mockGrpcClient,\n             firebaseApp,\n             application,\n-            firebaseInstanceId,\n+            firebaseInstallations,\n             dataCollectionHelper,\n             clock,\n             providerInstaller);\n     when(application.getPackageName()).thenReturn(PACKAGE_NAME);\n     when(packageManager.getPackageInfo(PACKAGE_NAME, 0)).thenReturn(packageInfo);\n-    when(firebaseInstanceId.getInstanceId())\n+    when(firebaseInstallations.getId()).thenReturn(Tasks.forResult(INSTANCE_ID));\n+    when(firebaseInstallations.getToken(false))\n         .thenReturn(\n             Tasks.forResult(\n-                new InstanceIdResult() {\n+                new InstallationTokenResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzNzk2NQ==", "bodyText": "yep", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390537965", "createdAt": "2020-03-10T18:50:57Z", "author": {"login": "JasonAHeron"}, "path": "firebase-inappmessaging/src/test/java/com/google/firebase/inappmessaging/internal/ApiClientTest.java", "diffHunk": "@@ -118,26 +118,37 @@ public void setup() throws NameNotFoundException {\n             () -> mockGrpcClient,\n             firebaseApp,\n             application,\n-            firebaseInstanceId,\n+            firebaseInstallations,\n             dataCollectionHelper,\n             clock,\n             providerInstaller);\n     when(application.getPackageName()).thenReturn(PACKAGE_NAME);\n     when(packageManager.getPackageInfo(PACKAGE_NAME, 0)).thenReturn(packageInfo);\n-    when(firebaseInstanceId.getInstanceId())\n+    when(firebaseInstallations.getId()).thenReturn(Tasks.forResult(INSTANCE_ID));\n+    when(firebaseInstallations.getToken(false))\n         .thenReturn(\n             Tasks.forResult(\n-                new InstanceIdResult() {\n+                new InstallationTokenResult() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MTIzOA=="}, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDgyMDc3OnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ApiClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo0NjozNFrOF0iMAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo0NjozNFrOF0iMAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzMDQwMQ==", "bodyText": "None of the tasks will return null. Its on me for not adding the annotations on the APIs. I will update that on my end.\nThe Tasks would throw exceptions which you might want to handle based on completion state.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390630401", "createdAt": "2020-03-10T21:46:34Z", "author": {"login": "ankitaj224"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ApiClient.java", "diffHunk": "@@ -89,13 +89,15 @@ static FetchEligibleCampaignsResponse createCacheExpiringResponse() {\n     }\n     Logging.logi(FETCHING_CAMPAIGN_MESSAGE);\n     providerInstaller.install();\n-    return firebaseInstanceId\n-        .getInstanceId()\n+    Task<String> idTask = firebaseInstallations.getId();\n+    Task<InstallationTokenResult> tokenTask = firebaseInstallations.getToken(false);\n+    return Tasks.whenAll(idTask, tokenTask)\n         .continueWith(\n-            instanceIdResultTask -> {\n-              InstanceIdResult instanceIdResult = instanceIdResultTask.getResult();\n-              if (instanceIdResult == null) {\n-                Logging.logw(\"InstanceID is null, not calling backend\");\n+            (unused) -> {\n+              String idResult = idTask.getResult();\n+              InstallationTokenResult tokenResult = tokenTask.getResult();\n+              if (tokenResult == null || idResult == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8feabafde7c04018f2b75e646d05d41d79eeed2"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDgyOTY3OnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/MetricsLoggerClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo0OTo0MVrOF0iRUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo0OTo0MVrOF0iRUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzMTc2MQ==", "bodyText": "nit: call it fid or instanceId to differentiate from any other type of id used in FIAM. Idk if there is one, just think it would avoid any confusion.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390631761", "createdAt": "2020-03-10T21:49:41Z", "author": {"login": "ankitaj224"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/MetricsLoggerClient.java", "diffHunk": "@@ -83,78 +83,103 @@ public MetricsLoggerClient(\n       EngagementMetricsLoggerInterface engagementMetricsLogger,\n       AnalyticsConnector analyticsConnector,\n       FirebaseApp firebaseApp,\n-      FirebaseInstanceId firebaseInstanceId,\n+      FirebaseInstallationsApi firebaseInstallations,\n       Clock clock,\n       DeveloperListenerManager developerListenerManager) {\n     this.engagementMetricsLogger = engagementMetricsLogger;\n     this.analyticsConnector = analyticsConnector;\n     this.firebaseApp = firebaseApp;\n-    this.firebaseInstanceId = firebaseInstanceId;\n+    this.firebaseInstallations = firebaseInstallations;\n     this.clock = clock;\n     this.developerListenerManager = developerListenerManager;\n   }\n \n   /** Log impression */\n-  public void logImpression(InAppMessage message) {\n+  void logImpression(InAppMessage message) {\n     if (!isTestCampaign(message)) {\n       // If message is not a test message then log analytics\n-      engagementMetricsLogger.logEvent(\n-          createEventEntry(message, IMPRESSION_EVENT_TYPE).toByteArray());\n-      logEventAsync(\n-          message,\n-          AnalyticsConstants.ANALYTICS_IMPRESSION_EVENT,\n-          impressionCountsAsConversion(message));\n+      firebaseInstallations\n+          .getId()\n+          .addOnSuccessListener(\n+              id -> {\n+                engagementMetricsLogger.logEvent(\n+                    createEventEntry(message, id, IMPRESSION_EVENT_TYPE).toByteArray());\n+                logEventAsync(\n+                    message,\n+                    AnalyticsConstants.ANALYTICS_IMPRESSION_EVENT,\n+                    impressionCountsAsConversion(message));\n+              });\n     }\n     // No matter what, always trigger developer callbacks\n     developerListenerManager.impressionDetected(message);\n   }\n \n   /** Log click */\n-  public void logMessageClick(InAppMessage message, Action action) {\n+  void logMessageClick(InAppMessage message, Action action) {\n     if (!isTestCampaign(message)) {\n       // If message is not a test message then log analytics\n-      engagementMetricsLogger.logEvent(createEventEntry(message, CLICK_EVENT_TYPE).toByteArray());\n-      logEventAsync(message, AnalyticsConstants.ANALYTICS_ACTION_EVENT, true);\n+      firebaseInstallations\n+          .getId()\n+          .addOnSuccessListener(\n+              id -> {\n+                engagementMetricsLogger.logEvent(\n+                    createEventEntry(message, id, CLICK_EVENT_TYPE).toByteArray());\n+                logEventAsync(message, AnalyticsConstants.ANALYTICS_ACTION_EVENT, true);\n+              });\n     }\n     // No matter what, always trigger developer callbacks\n     developerListenerManager.messageClicked(message, action);\n   }\n \n   /** Log Rendering error */\n-  public void logRenderError(InAppMessage message, InAppMessagingErrorReason errorReason) {\n+  void logRenderError(InAppMessage message, InAppMessagingErrorReason errorReason) {\n     if (!isTestCampaign(message)) {\n       // If message is not a test message then log analytics\n-      engagementMetricsLogger.logEvent(\n-          createRenderErrorEntry(message, errorTransform.get(errorReason)).toByteArray());\n+      firebaseInstallations\n+          .getId()\n+          .addOnSuccessListener(\n+              id ->\n+                  engagementMetricsLogger.logEvent(\n+                      createRenderErrorEntry(message, id, errorTransform.get(errorReason))\n+                          .toByteArray()));\n     }\n     // No matter what, always trigger developer callbacks\n     developerListenerManager.displayErrorEncountered(message, errorReason);\n   }\n \n   /** Log dismiss */\n-  public void logDismiss(InAppMessage message, InAppMessagingDismissType dismissType) {\n+  void logDismiss(InAppMessage message, InAppMessagingDismissType dismissType) {\n     if (!isTestCampaign(message)) {\n       // If message is not a test message then log analytics\n-      engagementMetricsLogger.logEvent(\n-          createDismissEntry(message, dismissTransform.get(dismissType)).toByteArray());\n-      logEventAsync(message, AnalyticsConstants.ANALYTICS_DISMISS_EVENT, false);\n+      firebaseInstallations\n+          .getId()\n+          .addOnSuccessListener(\n+              id -> {\n+                engagementMetricsLogger.logEvent(\n+                    createDismissEntry(message, id, dismissTransform.get(dismissType))\n+                        .toByteArray());\n+                logEventAsync(message, AnalyticsConstants.ANALYTICS_DISMISS_EVENT, false);\n+              });\n     }\n   }\n \n-  private CampaignAnalytics createEventEntry(InAppMessage message, EventType eventType) {\n-    return createCampaignAnalyticsBuilder(message).setEventType(eventType).build();\n+  private CampaignAnalytics createEventEntry(InAppMessage message, String id, EventType eventType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8feabafde7c04018f2b75e646d05d41d79eeed2"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDg0MDgzOnYy", "diffSide": "RIGHT", "path": "firebase-inappmessaging/firebase-inappmessaging.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo1MzoyN1rOF0iX_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo1MzoyN1rOF0iX_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzMzQ3MQ==", "bodyText": "Wondering if you should depend on the released version vs the HEAD? Idk whats the standard way in firebase.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390633471", "createdAt": "2020-03-10T21:53:27Z", "author": {"login": "ankitaj224"}, "path": "firebase-inappmessaging/firebase-inappmessaging.gradle", "diffHunk": "@@ -116,17 +116,17 @@ dependencies {\n     implementation project(':protolite-well-known-types')\n     implementation project(':transport:transport-api')\n     implementation project(':firebase-datatransport')\n+    implementation project(':firebase-installations-interop')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8feabafde7c04018f2b75e646d05d41d79eeed2"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 848, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}