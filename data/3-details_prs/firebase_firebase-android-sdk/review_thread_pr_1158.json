{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NDY2Mzkz", "number": 1158, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODozMTowN1rODaRSNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMTo1Mjo0MlrODaXeGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODcyNzU3OnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODozMTowN1rOFhIXIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMTo1MDowOVrOFhSE6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NDMyMA==", "bodyText": "I'm not a huge fan of classes named with \"Util\" or \"Helper\". How about just Values? This is a convention found in Guava, where e.g. helpers for creating/manipulating lists are in Lists.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370284320", "createdAt": "2020-01-23T18:31:07Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore;\n+\n+import com.google.firebase.Timestamp;\n+import com.google.firebase.firestore.model.DatabaseId;\n+import com.google.firebase.firestore.model.DocumentKey;\n+import com.google.firestore.v1.ArrayValue;\n+import com.google.firestore.v1.Value;\n+import com.google.protobuf.NullValue;\n+import com.google.type.LatLng;\n+import java.util.List;\n+\n+/** Test helper to create Firestore Value protos from Java types. */\n+public class ValueHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxODg5NA==", "bodyText": "ValueHelperUtil it is :)\nI renamed it to Values. FWIW, in most APIs that use this convention, the helper library and the main library sit in the same package, which we can't do here.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370318894", "createdAt": "2020-01-23T19:44:39Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore;\n+\n+import com.google.firebase.Timestamp;\n+import com.google.firebase.firestore.model.DatabaseId;\n+import com.google.firebase.firestore.model.DocumentKey;\n+import com.google.firestore.v1.ArrayValue;\n+import com.google.firestore.v1.Value;\n+import com.google.protobuf.NullValue;\n+import com.google.type.LatLng;\n+import java.util.List;\n+\n+/** Test helper to create Firestore Value protos from Java types. */\n+public class ValueHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NDMyMA=="}, "originalCommit": {"oid": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0MzQ5Nw==", "bodyText": "Lists is a great example because it's a collection of Guava utilities about java.util.List. In other cases where the library has a class and static utilities for dealing with it, it makes sense that they'd colocate them. I don't think that invalidates the static utilities as plurals convention.\nSee go/java-practices/utility-classes.md.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370443497", "createdAt": "2020-01-24T01:50:09Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore;\n+\n+import com.google.firebase.Timestamp;\n+import com.google.firebase.firestore.model.DatabaseId;\n+import com.google.firebase.firestore.model.DocumentKey;\n+import com.google.firestore.v1.ArrayValue;\n+import com.google.firestore.v1.Value;\n+import com.google.protobuf.NullValue;\n+import com.google.type.LatLng;\n+import java.util.List;\n+\n+/** Test helper to create Firestore Value protos from Java types. */\n+public class ValueHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NDMyMA=="}, "originalCommit": {"oid": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODc1MDI3OnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODozODo0NlrOFhIlIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTo0ODoyMFrOFhKk1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NzkwNA==", "bodyText": "The rest of this class doesn't really have much to do with wrapping, but does create values. How about refValue or something like that?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370287904", "createdAt": "2020-01-23T18:38:46Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore;\n+\n+import com.google.firebase.Timestamp;\n+import com.google.firebase.firestore.model.DatabaseId;\n+import com.google.firebase.firestore.model.DocumentKey;\n+import com.google.firestore.v1.ArrayValue;\n+import com.google.firestore.v1.Value;\n+import com.google.protobuf.NullValue;\n+import com.google.type.LatLng;\n+import java.util.List;\n+\n+/** Test helper to create Firestore Value protos from Java types. */\n+public class ValueHelper {\n+\n+  public static Value valueOf(Object o) {\n+    if (o instanceof Value) {\n+      return (Value) o;\n+    } else if (o instanceof String) {\n+      return (Value.newBuilder().setStringValue((String) o).build());\n+    } else if (o instanceof Integer) {\n+      return (Value.newBuilder().setIntegerValue((long) (Integer) o).build());\n+    } else if (o instanceof Long) {\n+      return (Value.newBuilder().setIntegerValue((Long) o).build());\n+    } else if (o instanceof Double) {\n+      return (Value.newBuilder().setDoubleValue((Double) o).build());\n+    } else if (o instanceof Boolean) {\n+      return (Value.newBuilder().setBooleanValue((Boolean) o).build());\n+    } else if (o instanceof Timestamp) {\n+      Timestamp timestamp = (Timestamp) o;\n+      return (Value.newBuilder()\n+          .setTimestampValue(\n+              com.google.protobuf.Timestamp.newBuilder()\n+                  .setSeconds(timestamp.getSeconds())\n+                  .setNanos(timestamp.getNanoseconds())\n+                  .build())\n+          .build());\n+    } else if (o instanceof GeoPoint) {\n+      GeoPoint geoPoint = (GeoPoint) o;\n+      return (Value.newBuilder()\n+          .setGeoPointValue(\n+              LatLng.newBuilder()\n+                  .setLatitude(geoPoint.getLatitude())\n+                  .setLongitude(geoPoint.getLongitude())\n+                  .build())\n+          .build());\n+    } else if (o instanceof Blob) {\n+      return (Value.newBuilder().setBytesValue(((Blob) o).toByteString()).build());\n+    } else if (o instanceof DocumentReference) {\n+      return (Value.newBuilder()\n+          .setReferenceValue(\n+              \"projects/projectId/databases/(default)/documents/\"\n+                  + ((DocumentReference) o).getPath())\n+          .build());\n+    } else if (o instanceof List) {\n+      ArrayValue.Builder list = ArrayValue.newBuilder();\n+      for (Object element : (List) o) {\n+        list.addValues(valueOf(element));\n+      }\n+      return (Value.newBuilder().setArrayValue(list).build());\n+    } else if (o == null) {\n+      return (Value.newBuilder().setNullValue(NullValue.NULL_VALUE).build());\n+    }\n+\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public static Value map(Object... entries) {\n+    com.google.firestore.v1.MapValue.Builder builder =\n+        com.google.firestore.v1.MapValue.newBuilder();\n+    for (int i = 0; i < entries.length; i += 2) {\n+      builder.putFields((String) entries[i], valueOf(entries[i + 1]));\n+    }\n+    return Value.newBuilder().setMapValue(builder).build();\n+  }\n+\n+  public static Value wrapRef(DatabaseId dbId, DocumentKey key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMDU5Nw==", "bodyText": "Done", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370320597", "createdAt": "2020-01-23T19:48:20Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore;\n+\n+import com.google.firebase.Timestamp;\n+import com.google.firebase.firestore.model.DatabaseId;\n+import com.google.firebase.firestore.model.DocumentKey;\n+import com.google.firestore.v1.ArrayValue;\n+import com.google.firestore.v1.Value;\n+import com.google.protobuf.NullValue;\n+import com.google.type.LatLng;\n+import java.util.List;\n+\n+/** Test helper to create Firestore Value protos from Java types. */\n+public class ValueHelper {\n+\n+  public static Value valueOf(Object o) {\n+    if (o instanceof Value) {\n+      return (Value) o;\n+    } else if (o instanceof String) {\n+      return (Value.newBuilder().setStringValue((String) o).build());\n+    } else if (o instanceof Integer) {\n+      return (Value.newBuilder().setIntegerValue((long) (Integer) o).build());\n+    } else if (o instanceof Long) {\n+      return (Value.newBuilder().setIntegerValue((Long) o).build());\n+    } else if (o instanceof Double) {\n+      return (Value.newBuilder().setDoubleValue((Double) o).build());\n+    } else if (o instanceof Boolean) {\n+      return (Value.newBuilder().setBooleanValue((Boolean) o).build());\n+    } else if (o instanceof Timestamp) {\n+      Timestamp timestamp = (Timestamp) o;\n+      return (Value.newBuilder()\n+          .setTimestampValue(\n+              com.google.protobuf.Timestamp.newBuilder()\n+                  .setSeconds(timestamp.getSeconds())\n+                  .setNanos(timestamp.getNanoseconds())\n+                  .build())\n+          .build());\n+    } else if (o instanceof GeoPoint) {\n+      GeoPoint geoPoint = (GeoPoint) o;\n+      return (Value.newBuilder()\n+          .setGeoPointValue(\n+              LatLng.newBuilder()\n+                  .setLatitude(geoPoint.getLatitude())\n+                  .setLongitude(geoPoint.getLongitude())\n+                  .build())\n+          .build());\n+    } else if (o instanceof Blob) {\n+      return (Value.newBuilder().setBytesValue(((Blob) o).toByteString()).build());\n+    } else if (o instanceof DocumentReference) {\n+      return (Value.newBuilder()\n+          .setReferenceValue(\n+              \"projects/projectId/databases/(default)/documents/\"\n+                  + ((DocumentReference) o).getPath())\n+          .build());\n+    } else if (o instanceof List) {\n+      ArrayValue.Builder list = ArrayValue.newBuilder();\n+      for (Object element : (List) o) {\n+        list.addValues(valueOf(element));\n+      }\n+      return (Value.newBuilder().setArrayValue(list).build());\n+    } else if (o == null) {\n+      return (Value.newBuilder().setNullValue(NullValue.NULL_VALUE).build());\n+    }\n+\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public static Value map(Object... entries) {\n+    com.google.firestore.v1.MapValue.Builder builder =\n+        com.google.firestore.v1.MapValue.newBuilder();\n+    for (int i = 0; i < entries.length; i += 2) {\n+      builder.putFields((String) entries[i], valueOf(entries[i + 1]));\n+    }\n+    return Value.newBuilder().setMapValue(builder).build();\n+  }\n+\n+  public static Value wrapRef(DatabaseId dbId, DocumentKey key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NzkwNA=="}, "originalCommit": {"oid": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODc1MTc0OnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODozOToxOFrOFhImDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTo0NjoxNlrOFhKhNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4ODE0Mw==", "bodyText": "Extra parens, here and throughout.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370288143", "createdAt": "2020-01-23T18:39:18Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore;\n+\n+import com.google.firebase.Timestamp;\n+import com.google.firebase.firestore.model.DatabaseId;\n+import com.google.firebase.firestore.model.DocumentKey;\n+import com.google.firestore.v1.ArrayValue;\n+import com.google.firestore.v1.Value;\n+import com.google.protobuf.NullValue;\n+import com.google.type.LatLng;\n+import java.util.List;\n+\n+/** Test helper to create Firestore Value protos from Java types. */\n+public class ValueHelper {\n+\n+  public static Value valueOf(Object o) {\n+    if (o instanceof Value) {\n+      return (Value) o;\n+    } else if (o instanceof String) {\n+      return (Value.newBuilder().setStringValue((String) o).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxOTY2OA==", "bodyText": "Removed. Sorry, I was quite certain googleJavaFormat would do this for me.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370319668", "createdAt": "2020-01-23T19:46:16Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore;\n+\n+import com.google.firebase.Timestamp;\n+import com.google.firebase.firestore.model.DatabaseId;\n+import com.google.firebase.firestore.model.DocumentKey;\n+import com.google.firestore.v1.ArrayValue;\n+import com.google.firestore.v1.Value;\n+import com.google.protobuf.NullValue;\n+import com.google.type.LatLng;\n+import java.util.List;\n+\n+/** Test helper to create Firestore Value protos from Java types. */\n+public class ValueHelper {\n+\n+  public static Value valueOf(Object o) {\n+    if (o instanceof Value) {\n+      return (Value) o;\n+    } else if (o instanceof String) {\n+      return (Value.newBuilder().setStringValue((String) o).build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4ODE0Mw=="}, "originalCommit": {"oid": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODc1NDY5OnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo0MDoyMVrOFhIn2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTo0Njo0NFrOFhKiEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4ODYwMw==", "bodyText": "This inner build() is unnecessary. Proto setters take messages or builders and automatically call build() for you.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370288603", "createdAt": "2020-01-23T18:40:21Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore;\n+\n+import com.google.firebase.Timestamp;\n+import com.google.firebase.firestore.model.DatabaseId;\n+import com.google.firebase.firestore.model.DocumentKey;\n+import com.google.firestore.v1.ArrayValue;\n+import com.google.firestore.v1.Value;\n+import com.google.protobuf.NullValue;\n+import com.google.type.LatLng;\n+import java.util.List;\n+\n+/** Test helper to create Firestore Value protos from Java types. */\n+public class ValueHelper {\n+\n+  public static Value valueOf(Object o) {\n+    if (o instanceof Value) {\n+      return (Value) o;\n+    } else if (o instanceof String) {\n+      return (Value.newBuilder().setStringValue((String) o).build());\n+    } else if (o instanceof Integer) {\n+      return (Value.newBuilder().setIntegerValue((long) (Integer) o).build());\n+    } else if (o instanceof Long) {\n+      return (Value.newBuilder().setIntegerValue((Long) o).build());\n+    } else if (o instanceof Double) {\n+      return (Value.newBuilder().setDoubleValue((Double) o).build());\n+    } else if (o instanceof Boolean) {\n+      return (Value.newBuilder().setBooleanValue((Boolean) o).build());\n+    } else if (o instanceof Timestamp) {\n+      Timestamp timestamp = (Timestamp) o;\n+      return (Value.newBuilder()\n+          .setTimestampValue(\n+              com.google.protobuf.Timestamp.newBuilder()\n+                  .setSeconds(timestamp.getSeconds())\n+                  .setNanos(timestamp.getNanoseconds())\n+                  .build())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxOTg5MA==", "bodyText": "Removed here and for GeoPoint.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370319890", "createdAt": "2020-01-23T19:46:44Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore;\n+\n+import com.google.firebase.Timestamp;\n+import com.google.firebase.firestore.model.DatabaseId;\n+import com.google.firebase.firestore.model.DocumentKey;\n+import com.google.firestore.v1.ArrayValue;\n+import com.google.firestore.v1.Value;\n+import com.google.protobuf.NullValue;\n+import com.google.type.LatLng;\n+import java.util.List;\n+\n+/** Test helper to create Firestore Value protos from Java types. */\n+public class ValueHelper {\n+\n+  public static Value valueOf(Object o) {\n+    if (o instanceof Value) {\n+      return (Value) o;\n+    } else if (o instanceof String) {\n+      return (Value.newBuilder().setStringValue((String) o).build());\n+    } else if (o instanceof Integer) {\n+      return (Value.newBuilder().setIntegerValue((long) (Integer) o).build());\n+    } else if (o instanceof Long) {\n+      return (Value.newBuilder().setIntegerValue((Long) o).build());\n+    } else if (o instanceof Double) {\n+      return (Value.newBuilder().setDoubleValue((Double) o).build());\n+    } else if (o instanceof Boolean) {\n+      return (Value.newBuilder().setBooleanValue((Boolean) o).build());\n+    } else if (o instanceof Timestamp) {\n+      Timestamp timestamp = (Timestamp) o;\n+      return (Value.newBuilder()\n+          .setTimestampValue(\n+              com.google.protobuf.Timestamp.newBuilder()\n+                  .setSeconds(timestamp.getSeconds())\n+                  .setNanos(timestamp.getNanoseconds())\n+                  .build())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4ODYwMw=="}, "originalCommit": {"oid": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODc1NzkxOnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo0MToyM1rOFhIpxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTo0NzozNlrOFhKjmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4OTA5Mw==", "bodyText": "projectId isn't a valid project identifier. Elsewhere we've just used \"project\", FWIW.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370289093", "createdAt": "2020-01-23T18:41:23Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore;\n+\n+import com.google.firebase.Timestamp;\n+import com.google.firebase.firestore.model.DatabaseId;\n+import com.google.firebase.firestore.model.DocumentKey;\n+import com.google.firestore.v1.ArrayValue;\n+import com.google.firestore.v1.Value;\n+import com.google.protobuf.NullValue;\n+import com.google.type.LatLng;\n+import java.util.List;\n+\n+/** Test helper to create Firestore Value protos from Java types. */\n+public class ValueHelper {\n+\n+  public static Value valueOf(Object o) {\n+    if (o instanceof Value) {\n+      return (Value) o;\n+    } else if (o instanceof String) {\n+      return (Value.newBuilder().setStringValue((String) o).build());\n+    } else if (o instanceof Integer) {\n+      return (Value.newBuilder().setIntegerValue((long) (Integer) o).build());\n+    } else if (o instanceof Long) {\n+      return (Value.newBuilder().setIntegerValue((Long) o).build());\n+    } else if (o instanceof Double) {\n+      return (Value.newBuilder().setDoubleValue((Double) o).build());\n+    } else if (o instanceof Boolean) {\n+      return (Value.newBuilder().setBooleanValue((Boolean) o).build());\n+    } else if (o instanceof Timestamp) {\n+      Timestamp timestamp = (Timestamp) o;\n+      return (Value.newBuilder()\n+          .setTimestampValue(\n+              com.google.protobuf.Timestamp.newBuilder()\n+                  .setSeconds(timestamp.getSeconds())\n+                  .setNanos(timestamp.getNanoseconds())\n+                  .build())\n+          .build());\n+    } else if (o instanceof GeoPoint) {\n+      GeoPoint geoPoint = (GeoPoint) o;\n+      return (Value.newBuilder()\n+          .setGeoPointValue(\n+              LatLng.newBuilder()\n+                  .setLatitude(geoPoint.getLatitude())\n+                  .setLongitude(geoPoint.getLongitude())\n+                  .build())\n+          .build());\n+    } else if (o instanceof Blob) {\n+      return (Value.newBuilder().setBytesValue(((Blob) o).toByteString()).build());\n+    } else if (o instanceof DocumentReference) {\n+      return (Value.newBuilder()\n+          .setReferenceValue(\n+              \"projects/projectId/databases/(default)/documents/\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMDI4MQ==", "bodyText": "I stole this from somewhere (SQLiteSchemaTest) and fixed it there as well.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370320281", "createdAt": "2020-01-23T19:47:36Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore;\n+\n+import com.google.firebase.Timestamp;\n+import com.google.firebase.firestore.model.DatabaseId;\n+import com.google.firebase.firestore.model.DocumentKey;\n+import com.google.firestore.v1.ArrayValue;\n+import com.google.firestore.v1.Value;\n+import com.google.protobuf.NullValue;\n+import com.google.type.LatLng;\n+import java.util.List;\n+\n+/** Test helper to create Firestore Value protos from Java types. */\n+public class ValueHelper {\n+\n+  public static Value valueOf(Object o) {\n+    if (o instanceof Value) {\n+      return (Value) o;\n+    } else if (o instanceof String) {\n+      return (Value.newBuilder().setStringValue((String) o).build());\n+    } else if (o instanceof Integer) {\n+      return (Value.newBuilder().setIntegerValue((long) (Integer) o).build());\n+    } else if (o instanceof Long) {\n+      return (Value.newBuilder().setIntegerValue((Long) o).build());\n+    } else if (o instanceof Double) {\n+      return (Value.newBuilder().setDoubleValue((Double) o).build());\n+    } else if (o instanceof Boolean) {\n+      return (Value.newBuilder().setBooleanValue((Boolean) o).build());\n+    } else if (o instanceof Timestamp) {\n+      Timestamp timestamp = (Timestamp) o;\n+      return (Value.newBuilder()\n+          .setTimestampValue(\n+              com.google.protobuf.Timestamp.newBuilder()\n+                  .setSeconds(timestamp.getSeconds())\n+                  .setNanos(timestamp.getNanoseconds())\n+                  .build())\n+          .build());\n+    } else if (o instanceof GeoPoint) {\n+      GeoPoint geoPoint = (GeoPoint) o;\n+      return (Value.newBuilder()\n+          .setGeoPointValue(\n+              LatLng.newBuilder()\n+                  .setLatitude(geoPoint.getLatitude())\n+                  .setLongitude(geoPoint.getLongitude())\n+                  .build())\n+          .build());\n+    } else if (o instanceof Blob) {\n+      return (Value.newBuilder().setBytesValue(((Blob) o).toByteString()).build());\n+    } else if (o instanceof DocumentReference) {\n+      return (Value.newBuilder()\n+          .setReferenceValue(\n+              \"projects/projectId/databases/(default)/documents/\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4OTA5Mw=="}, "originalCommit": {"oid": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODc2Mzc2OnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo0MzoyM1rOFhIthA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMTo0NDo0OFrOFhSAXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDA1Mg==", "bodyText": "Note that you currently only need this for tests, but eventually, won't the UserDataConverter need this as well? Maybe put this in with regular sources?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370290052", "createdAt": "2020-01-23T18:43:23Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxODM2MQ==", "bodyText": "I'd like to punt on this for now to figure out how much of this code I will need in UserDataConverter and where to put it. I added a TODO.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370318361", "createdAt": "2020-01-23T19:43:30Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDA1Mg=="}, "originalCommit": {"oid": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0MjMzNA==", "bodyText": "FWIW, I think it's nice that this is a separate class that just has these static, simple functions. Moving it into the UserDataConverter would muddy that considerably. I was proposing just moving the class wholesale into the same package, or maybe even merging with/renaming ProtoValues and putting it in model.\nIn any case, no action required for this PR for sure.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370442334", "createdAt": "2020-01-24T01:44:48Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/ValueHelper.java", "diffHunk": "@@ -0,0 +1,98 @@\n+// Copyright 2020 Google LLC", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MDA1Mg=="}, "originalCommit": {"oid": "8440ced4f5f4e42b0269ad464e5362ffc8fbafd1"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTczOTk5OnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/Values.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMTo1MTo1OFrOFhSGXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzowMjo0NVrOFhkOOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0Mzg3MQ==", "bodyText": "nit: excess newline.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370443871", "createdAt": "2020-01-24T01:51:58Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/Values.java", "diffHunk": "@@ -22,62 +22,71 @@\n import com.google.protobuf.NullValue;\n import com.google.type.LatLng;\n import java.util.List;\n+import java.util.Map;\n \n /** Test helper to create Firestore Value protos from Java types. */\n-public class ValueHelper {\n+public class Values {\n \n+  // TODO(mrschmidt): Move into UserDataConverter\n   public static Value valueOf(Object o) {\n     if (o instanceof Value) {\n       return (Value) o;\n-    } else if (o instanceof String) {\n-      return (Value.newBuilder().setStringValue((String) o).build());\n+    } else if (o == null) {\n+      return Value.newBuilder().setNullValue(NullValue.NULL_VALUE).build();\n+    } else if (o instanceof Boolean) {\n+      return Value.newBuilder().setBooleanValue((Boolean) o).build();\n     } else if (o instanceof Integer) {\n-      return (Value.newBuilder().setIntegerValue((long) (Integer) o).build());\n+      return Value.newBuilder().setIntegerValue((Integer) o).build();\n     } else if (o instanceof Long) {\n-      return (Value.newBuilder().setIntegerValue((Long) o).build());\n+      return Value.newBuilder().setIntegerValue((Long) o).build();\n     } else if (o instanceof Double) {\n-      return (Value.newBuilder().setDoubleValue((Double) o).build());\n-    } else if (o instanceof Boolean) {\n-      return (Value.newBuilder().setBooleanValue((Boolean) o).build());\n+      return Value.newBuilder().setDoubleValue((Double) o).build();\n     } else if (o instanceof Timestamp) {\n       Timestamp timestamp = (Timestamp) o;\n-      return (Value.newBuilder()\n+      return Value.newBuilder()\n           .setTimestampValue(\n               com.google.protobuf.Timestamp.newBuilder()\n                   .setSeconds(timestamp.getSeconds())\n-                  .setNanos(timestamp.getNanoseconds())\n-                  .build())\n-          .build());\n+                  .setNanos(timestamp.getNanoseconds()))\n+          .build();\n+    } else if (o instanceof String) {\n+      return Value.newBuilder().setStringValue((String) o).build();\n+    } else if (o instanceof Blob) {\n+      return Value.newBuilder().setBytesValue(((Blob) o).toByteString()).build();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d1ce8f68fe2cca448d4965bf6ec5272b057c91"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0MDc5NA==", "bodyText": "Sorry - I forgot to address this before merging. I fixed it in the follow up PR.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370740794", "createdAt": "2020-01-24T17:02:45Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/Values.java", "diffHunk": "@@ -22,62 +22,71 @@\n import com.google.protobuf.NullValue;\n import com.google.type.LatLng;\n import java.util.List;\n+import java.util.Map;\n \n /** Test helper to create Firestore Value protos from Java types. */\n-public class ValueHelper {\n+public class Values {\n \n+  // TODO(mrschmidt): Move into UserDataConverter\n   public static Value valueOf(Object o) {\n     if (o instanceof Value) {\n       return (Value) o;\n-    } else if (o instanceof String) {\n-      return (Value.newBuilder().setStringValue((String) o).build());\n+    } else if (o == null) {\n+      return Value.newBuilder().setNullValue(NullValue.NULL_VALUE).build();\n+    } else if (o instanceof Boolean) {\n+      return Value.newBuilder().setBooleanValue((Boolean) o).build();\n     } else if (o instanceof Integer) {\n-      return (Value.newBuilder().setIntegerValue((long) (Integer) o).build());\n+      return Value.newBuilder().setIntegerValue((Integer) o).build();\n     } else if (o instanceof Long) {\n-      return (Value.newBuilder().setIntegerValue((Long) o).build());\n+      return Value.newBuilder().setIntegerValue((Long) o).build();\n     } else if (o instanceof Double) {\n-      return (Value.newBuilder().setDoubleValue((Double) o).build());\n-    } else if (o instanceof Boolean) {\n-      return (Value.newBuilder().setBooleanValue((Boolean) o).build());\n+      return Value.newBuilder().setDoubleValue((Double) o).build();\n     } else if (o instanceof Timestamp) {\n       Timestamp timestamp = (Timestamp) o;\n-      return (Value.newBuilder()\n+      return Value.newBuilder()\n           .setTimestampValue(\n               com.google.protobuf.Timestamp.newBuilder()\n                   .setSeconds(timestamp.getSeconds())\n-                  .setNanos(timestamp.getNanoseconds())\n-                  .build())\n-          .build());\n+                  .setNanos(timestamp.getNanoseconds()))\n+          .build();\n+    } else if (o instanceof String) {\n+      return Value.newBuilder().setStringValue((String) o).build();\n+    } else if (o instanceof Blob) {\n+      return Value.newBuilder().setBytesValue(((Blob) o).toByteString()).build();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0Mzg3MQ=="}, "originalCommit": {"oid": "c8d1ce8f68fe2cca448d4965bf6ec5272b057c91"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTc0MTA3OnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/Values.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMTo1Mjo0MlrOFhSG-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNTozNDo0MFrOFhUSTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0NDAyNg==", "bodyText": "nit: import MapValue?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370444026", "createdAt": "2020-01-24T01:52:42Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/Values.java", "diffHunk": "@@ -22,62 +22,71 @@\n import com.google.protobuf.NullValue;\n import com.google.type.LatLng;\n import java.util.List;\n+import java.util.Map;\n \n /** Test helper to create Firestore Value protos from Java types. */\n-public class ValueHelper {\n+public class Values {\n \n+  // TODO(mrschmidt): Move into UserDataConverter\n   public static Value valueOf(Object o) {\n     if (o instanceof Value) {\n       return (Value) o;\n-    } else if (o instanceof String) {\n-      return (Value.newBuilder().setStringValue((String) o).build());\n+    } else if (o == null) {\n+      return Value.newBuilder().setNullValue(NullValue.NULL_VALUE).build();\n+    } else if (o instanceof Boolean) {\n+      return Value.newBuilder().setBooleanValue((Boolean) o).build();\n     } else if (o instanceof Integer) {\n-      return (Value.newBuilder().setIntegerValue((long) (Integer) o).build());\n+      return Value.newBuilder().setIntegerValue((Integer) o).build();\n     } else if (o instanceof Long) {\n-      return (Value.newBuilder().setIntegerValue((Long) o).build());\n+      return Value.newBuilder().setIntegerValue((Long) o).build();\n     } else if (o instanceof Double) {\n-      return (Value.newBuilder().setDoubleValue((Double) o).build());\n-    } else if (o instanceof Boolean) {\n-      return (Value.newBuilder().setBooleanValue((Boolean) o).build());\n+      return Value.newBuilder().setDoubleValue((Double) o).build();\n     } else if (o instanceof Timestamp) {\n       Timestamp timestamp = (Timestamp) o;\n-      return (Value.newBuilder()\n+      return Value.newBuilder()\n           .setTimestampValue(\n               com.google.protobuf.Timestamp.newBuilder()\n                   .setSeconds(timestamp.getSeconds())\n-                  .setNanos(timestamp.getNanoseconds())\n-                  .build())\n-          .build());\n+                  .setNanos(timestamp.getNanoseconds()))\n+          .build();\n+    } else if (o instanceof String) {\n+      return Value.newBuilder().setStringValue((String) o).build();\n+    } else if (o instanceof Blob) {\n+      return Value.newBuilder().setBytesValue(((Blob) o).toByteString()).build();\n+\n+    } else if (o instanceof DocumentReference) {\n+      return Value.newBuilder()\n+          .setReferenceValue(\n+              \"projects/project/databases/(default)/documents/\" + ((DocumentReference) o).getPath())\n+          .build();\n     } else if (o instanceof GeoPoint) {\n       GeoPoint geoPoint = (GeoPoint) o;\n-      return (Value.newBuilder()\n+      return Value.newBuilder()\n           .setGeoPointValue(\n               LatLng.newBuilder()\n                   .setLatitude(geoPoint.getLatitude())\n-                  .setLongitude(geoPoint.getLongitude())\n-                  .build())\n-          .build());\n-    } else if (o instanceof Blob) {\n-      return (Value.newBuilder().setBytesValue(((Blob) o).toByteString()).build());\n-    } else if (o instanceof DocumentReference) {\n-      return (Value.newBuilder()\n-          .setReferenceValue(\n-              \"projects/projectId/databases/(default)/documents/\"\n-                  + ((DocumentReference) o).getPath())\n-          .build());\n+                  .setLongitude(geoPoint.getLongitude()))\n+          .build();\n+\n     } else if (o instanceof List) {\n       ArrayValue.Builder list = ArrayValue.newBuilder();\n       for (Object element : (List) o) {\n         list.addValues(valueOf(element));\n       }\n-      return (Value.newBuilder().setArrayValue(list).build());\n-    } else if (o == null) {\n-      return (Value.newBuilder().setNullValue(NullValue.NULL_VALUE).build());\n+      return Value.newBuilder().setArrayValue(list).build();\n+    } else if (o instanceof Map) {\n+      com.google.firestore.v1.MapValue.Builder builder =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d1ce8f68fe2cca448d4965bf6ec5272b057c91"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3OTY5Mg==", "bodyText": "Done", "url": "https://github.com/firebase/firebase-android-sdk/pull/1158#discussion_r370479692", "createdAt": "2020-01-24T05:34:40Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/roboUtil/java/com/google/firebase/firestore/Values.java", "diffHunk": "@@ -22,62 +22,71 @@\n import com.google.protobuf.NullValue;\n import com.google.type.LatLng;\n import java.util.List;\n+import java.util.Map;\n \n /** Test helper to create Firestore Value protos from Java types. */\n-public class ValueHelper {\n+public class Values {\n \n+  // TODO(mrschmidt): Move into UserDataConverter\n   public static Value valueOf(Object o) {\n     if (o instanceof Value) {\n       return (Value) o;\n-    } else if (o instanceof String) {\n-      return (Value.newBuilder().setStringValue((String) o).build());\n+    } else if (o == null) {\n+      return Value.newBuilder().setNullValue(NullValue.NULL_VALUE).build();\n+    } else if (o instanceof Boolean) {\n+      return Value.newBuilder().setBooleanValue((Boolean) o).build();\n     } else if (o instanceof Integer) {\n-      return (Value.newBuilder().setIntegerValue((long) (Integer) o).build());\n+      return Value.newBuilder().setIntegerValue((Integer) o).build();\n     } else if (o instanceof Long) {\n-      return (Value.newBuilder().setIntegerValue((Long) o).build());\n+      return Value.newBuilder().setIntegerValue((Long) o).build();\n     } else if (o instanceof Double) {\n-      return (Value.newBuilder().setDoubleValue((Double) o).build());\n-    } else if (o instanceof Boolean) {\n-      return (Value.newBuilder().setBooleanValue((Boolean) o).build());\n+      return Value.newBuilder().setDoubleValue((Double) o).build();\n     } else if (o instanceof Timestamp) {\n       Timestamp timestamp = (Timestamp) o;\n-      return (Value.newBuilder()\n+      return Value.newBuilder()\n           .setTimestampValue(\n               com.google.protobuf.Timestamp.newBuilder()\n                   .setSeconds(timestamp.getSeconds())\n-                  .setNanos(timestamp.getNanoseconds())\n-                  .build())\n-          .build());\n+                  .setNanos(timestamp.getNanoseconds()))\n+          .build();\n+    } else if (o instanceof String) {\n+      return Value.newBuilder().setStringValue((String) o).build();\n+    } else if (o instanceof Blob) {\n+      return Value.newBuilder().setBytesValue(((Blob) o).toByteString()).build();\n+\n+    } else if (o instanceof DocumentReference) {\n+      return Value.newBuilder()\n+          .setReferenceValue(\n+              \"projects/project/databases/(default)/documents/\" + ((DocumentReference) o).getPath())\n+          .build();\n     } else if (o instanceof GeoPoint) {\n       GeoPoint geoPoint = (GeoPoint) o;\n-      return (Value.newBuilder()\n+      return Value.newBuilder()\n           .setGeoPointValue(\n               LatLng.newBuilder()\n                   .setLatitude(geoPoint.getLatitude())\n-                  .setLongitude(geoPoint.getLongitude())\n-                  .build())\n-          .build());\n-    } else if (o instanceof Blob) {\n-      return (Value.newBuilder().setBytesValue(((Blob) o).toByteString()).build());\n-    } else if (o instanceof DocumentReference) {\n-      return (Value.newBuilder()\n-          .setReferenceValue(\n-              \"projects/projectId/databases/(default)/documents/\"\n-                  + ((DocumentReference) o).getPath())\n-          .build());\n+                  .setLongitude(geoPoint.getLongitude()))\n+          .build();\n+\n     } else if (o instanceof List) {\n       ArrayValue.Builder list = ArrayValue.newBuilder();\n       for (Object element : (List) o) {\n         list.addValues(valueOf(element));\n       }\n-      return (Value.newBuilder().setArrayValue(list).build());\n-    } else if (o == null) {\n-      return (Value.newBuilder().setNullValue(NullValue.NULL_VALUE).build());\n+      return Value.newBuilder().setArrayValue(list).build();\n+    } else if (o instanceof Map) {\n+      com.google.firestore.v1.MapValue.Builder builder =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ0NDAyNg=="}, "originalCommit": {"oid": "c8d1ce8f68fe2cca448d4965bf6ec5272b057c91"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 946, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}