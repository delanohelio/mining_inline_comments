{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4Mjc2MDY3", "number": 2206, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxODowMDo0MVrOE-Egtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxODowMjozNFrOE-EiAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNTIxMDc4OnYy", "diffSide": "RIGHT", "path": "encoders/firebase-encoders-proto/src/main/java/com/google/firebase/encoders/proto/LengthCountingOutputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxODowMDo0MVrOH7FkXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMTowNTo1N1rOH7Jn7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxOTI2Mg==", "bodyText": "+4 maybe?", "url": "https://github.com/firebase/firebase-android-sdk/pull/2206#discussion_r531719262", "createdAt": "2020-11-27T18:00:41Z", "author": {"login": "rlazo"}, "path": "encoders/firebase-encoders-proto/src/main/java/com/google/firebase/encoders/proto/LengthCountingOutputStream.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.encoders.proto;\n+\n+import androidx.annotation.NonNull;\n+import java.io.OutputStream;\n+\n+/** OutputStream that only keeps track of the number of bytes written into it. */\n+final class LengthCountingOutputStream extends OutputStream {\n+  private long length = 0;\n+\n+  @Override\n+  public void write(int b) {\n+    length++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5f56fd427b0bce483575a956b90044d01647208"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc4NTcwOA==", "bodyText": "That's what I thought too, but this method actually represents one byte with a 4 byte int, here's its javadoc:\n  /**\n     * Writes the specified byte to this output stream. The general\n     * contract for <code>write</code> is that one byte is written\n     * to the output stream. The byte to be written is the eight\n     * low-order bits of the argument <code>b</code>. The 24\n     * high-order bits of <code>b</code> are ignored.\nso +1 is actually correct", "url": "https://github.com/firebase/firebase-android-sdk/pull/2206#discussion_r531785708", "createdAt": "2020-11-27T21:05:57Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-encoders-proto/src/main/java/com/google/firebase/encoders/proto/LengthCountingOutputStream.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.encoders.proto;\n+\n+import androidx.annotation.NonNull;\n+import java.io.OutputStream;\n+\n+/** OutputStream that only keeps track of the number of bytes written into it. */\n+final class LengthCountingOutputStream extends OutputStream {\n+  private long length = 0;\n+\n+  @Override\n+  public void write(int b) {\n+    length++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxOTI2Mg=="}, "originalCommit": {"oid": "a5f56fd427b0bce483575a956b90044d01647208"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNTIxNDA5OnYy", "diffSide": "RIGHT", "path": "encoders/firebase-encoders-proto/src/main/java/com/google/firebase/encoders/proto/LengthCountingOutputStream.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxODowMjozNFrOH7FmMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMToxNDo1NFrOH7Jtyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxOTczMQ==", "bodyText": "I think this cases cannot happen since you are guaranteed at this point that off and len are positive, or at least 0", "url": "https://github.com/firebase/firebase-android-sdk/pull/2206#discussion_r531719731", "createdAt": "2020-11-27T18:02:34Z", "author": {"login": "rlazo"}, "path": "encoders/firebase-encoders-proto/src/main/java/com/google/firebase/encoders/proto/LengthCountingOutputStream.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.encoders.proto;\n+\n+import androidx.annotation.NonNull;\n+import java.io.OutputStream;\n+\n+/** OutputStream that only keeps track of the number of bytes written into it. */\n+final class LengthCountingOutputStream extends OutputStream {\n+  private long length = 0;\n+\n+  @Override\n+  public void write(int b) {\n+    length++;\n+  }\n+\n+  @Override\n+  public void write(byte[] b) {\n+    length += b.length;\n+  }\n+\n+  @Override\n+  public void write(@NonNull byte[] b, int off, int len) {\n+    if ((off < 0)\n+        || (off > b.length)\n+        || (len < 0)\n+        || ((off + len) > b.length)\n+        || ((off + len) < 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5f56fd427b0bce483575a956b90044d01647208"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc4NTk4OQ==", "bodyText": "That's a great observation, I took this check directly from the jdk implementation, I wonder why it is this way. I can change it if you like and I don't feel strongly either way.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2206#discussion_r531785989", "createdAt": "2020-11-27T21:07:22Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-encoders-proto/src/main/java/com/google/firebase/encoders/proto/LengthCountingOutputStream.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.encoders.proto;\n+\n+import androidx.annotation.NonNull;\n+import java.io.OutputStream;\n+\n+/** OutputStream that only keeps track of the number of bytes written into it. */\n+final class LengthCountingOutputStream extends OutputStream {\n+  private long length = 0;\n+\n+  @Override\n+  public void write(int b) {\n+    length++;\n+  }\n+\n+  @Override\n+  public void write(byte[] b) {\n+    length += b.length;\n+  }\n+\n+  @Override\n+  public void write(@NonNull byte[] b, int off, int len) {\n+    if ((off < 0)\n+        || (off > b.length)\n+        || (len < 0)\n+        || ((off + len) > b.length)\n+        || ((off + len) < 0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxOTczMQ=="}, "originalCommit": {"oid": "a5f56fd427b0bce483575a956b90044d01647208"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc4NzIxMA==", "bodyText": "That's OK, let's go the way it is.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2206#discussion_r531787210", "createdAt": "2020-11-27T21:14:54Z", "author": {"login": "rlazo"}, "path": "encoders/firebase-encoders-proto/src/main/java/com/google/firebase/encoders/proto/LengthCountingOutputStream.java", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.encoders.proto;\n+\n+import androidx.annotation.NonNull;\n+import java.io.OutputStream;\n+\n+/** OutputStream that only keeps track of the number of bytes written into it. */\n+final class LengthCountingOutputStream extends OutputStream {\n+  private long length = 0;\n+\n+  @Override\n+  public void write(int b) {\n+    length++;\n+  }\n+\n+  @Override\n+  public void write(byte[] b) {\n+    length += b.length;\n+  }\n+\n+  @Override\n+  public void write(@NonNull byte[] b, int off, int len) {\n+    if ((off < 0)\n+        || (off > b.length)\n+        || (len < 0)\n+        || ((off + len) > b.length)\n+        || ((off + len) < 0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxOTczMQ=="}, "originalCommit": {"oid": "a5f56fd427b0bce483575a956b90044d01647208"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1008, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}