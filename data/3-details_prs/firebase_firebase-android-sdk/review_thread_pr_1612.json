{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NjE3ODU5", "number": 1612, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzowODozN1rOEB1s7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowOToyMFrOEB51Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzYzODg3OnYy", "diffSide": "RIGHT", "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzowODozN1rOGd7isQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoyMzoxOFrOGd8D5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzNzQyNQ==", "bodyText": "I think this whole method could be just one line:\nreturn Arrays.hashCode(typeTokens);\nwdyt?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1612#discussion_r434037425", "createdAt": "2020-06-02T17:08:37Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "diffHunk": "@@ -41,4 +42,48 @@ public TypeTokenContainer(@NonNull TypeToken[] typeTokens) {\n     TypeToken<T> typeToken = (TypeToken<T>) typeTokens[index];\n     return typeToken;\n   }\n+\n+  @Override\n+  public int hashCode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06a4d40b9494c30eb76da7f8408305928eb8f2de"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0NTkyNw==", "bodyText": "Good call!!", "url": "https://github.com/firebase/firebase-android-sdk/pull/1612#discussion_r434045927", "createdAt": "2020-06-02T17:23:18Z", "author": {"login": "James201311"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "diffHunk": "@@ -41,4 +42,48 @@ public TypeTokenContainer(@NonNull TypeToken[] typeTokens) {\n     TypeToken<T> typeToken = (TypeToken<T>) typeTokens[index];\n     return typeToken;\n   }\n+\n+  @Override\n+  public int hashCode() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzNzQyNQ=="}, "originalCommit": {"oid": "06a4d40b9494c30eb76da7f8408305928eb8f2de"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzY0MjQxOnYy", "diffSide": "RIGHT", "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzowOTo0MVrOGd7lEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowOTo1NlrOGeCPjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzODAzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                TypeTokenContainer that = (TypeTokenContainer) o;\n          \n          \n            \n                if (this.typeTokens.length != that.typeTokens.length) {\n          \n          \n            \n                  return false;\n          \n          \n            \n                } else {\n          \n          \n            \n                  for (int i = 0; i < typeTokens.length; i++) {\n          \n          \n            \n                    if (!this.typeTokens[i].equals(that.typeTokens[i])) return false;\n          \n          \n            \n                  }\n          \n          \n            \n                  return true;\n          \n          \n            \n                return Arrays.equals(typeTokens, that.typeTokens);", "url": "https://github.com/firebase/firebase-android-sdk/pull/1612#discussion_r434038034", "createdAt": "2020-06-02T17:09:41Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "diffHunk": "@@ -41,4 +42,48 @@ public TypeTokenContainer(@NonNull TypeToken[] typeTokens) {\n     TypeToken<T> typeToken = (TypeToken<T>) typeTokens[index];\n     return typeToken;\n   }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = 11;\n+    for (int i = 0; i < typeTokens.length; i++) {\n+      result += (i * i + i + 41) * typeTokens[i].hashCode();\n+    }\n+    return result;\n+  }\n+\n+  @Override\n+  public boolean equals(@Nullable Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof TypeTokenContainer)) {\n+      return false;\n+    }\n+    TypeTokenContainer that = (TypeTokenContainer) o;\n+    if (this.typeTokens.length != that.typeTokens.length) {\n+      return false;\n+    } else {\n+      for (int i = 0; i < typeTokens.length; i++) {\n+        if (!this.typeTokens[i].equals(that.typeTokens[i])) return false;\n+      }\n+      return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06a4d40b9494c30eb76da7f8408305928eb8f2de"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NzIxMw==", "bodyText": "I think this one still applies", "url": "https://github.com/firebase/firebase-android-sdk/pull/1612#discussion_r434147213", "createdAt": "2020-06-02T20:09:56Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "diffHunk": "@@ -41,4 +42,48 @@ public TypeTokenContainer(@NonNull TypeToken[] typeTokens) {\n     TypeToken<T> typeToken = (TypeToken<T>) typeTokens[index];\n     return typeToken;\n   }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = 11;\n+    for (int i = 0; i < typeTokens.length; i++) {\n+      result += (i * i + i + 41) * typeTokens[i].hashCode();\n+    }\n+    return result;\n+  }\n+\n+  @Override\n+  public boolean equals(@Nullable Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof TypeTokenContainer)) {\n+      return false;\n+    }\n+    TypeTokenContainer that = (TypeTokenContainer) o;\n+    if (this.typeTokens.length != that.typeTokens.length) {\n+      return false;\n+    } else {\n+      for (int i = 0; i < typeTokens.length; i++) {\n+        if (!this.typeTokens[i].equals(that.typeTokens[i])) return false;\n+      }\n+      return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzODAzNA=="}, "originalCommit": {"oid": "06a4d40b9494c30eb76da7f8408305928eb8f2de"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzY0Njg1OnYy", "diffSide": "RIGHT", "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxMDo1NlrOGd7n0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxMDo1NlrOGd7n0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzODczNw==", "bodyText": "I don't think this one needs a toString()", "url": "https://github.com/firebase/firebase-android-sdk/pull/1612#discussion_r434038737", "createdAt": "2020-06-02T17:10:56Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeTokenContainer.java", "diffHunk": "@@ -41,4 +42,48 @@ public TypeTokenContainer(@NonNull TypeToken[] typeTokens) {\n     TypeToken<T> typeToken = (TypeToken<T>) typeTokens[index];\n     return typeToken;\n   }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = 11;\n+    for (int i = 0; i < typeTokens.length; i++) {\n+      result += (i * i + i + 41) * typeTokens[i].hashCode();\n+    }\n+    return result;\n+  }\n+\n+  @Override\n+  public boolean equals(@Nullable Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof TypeTokenContainer)) {\n+      return false;\n+    }\n+    TypeTokenContainer that = (TypeTokenContainer) o;\n+    if (this.typeTokens.length != that.typeTokens.length) {\n+      return false;\n+    } else {\n+      for (int i = 0; i < typeTokens.length; i++) {\n+        if (!this.typeTokens[i].equals(that.typeTokens[i])) return false;\n+      }\n+      return true;\n+    }\n+  }\n+\n+  @NonNull\n+  @Override\n+  public String toString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06a4d40b9494c30eb76da7f8408305928eb8f2de"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzY1NDEwOnYy", "diffSide": "RIGHT", "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxMzowMlrOGd7sXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODoxOToxOVrOGd-dzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzOTkwMQ==", "bodyText": "I wonder if we could just have a toString() that outputs something like ${rawType}<$typeArgs> e.g. Map<String, Foo>?\nthat way it would be consistent with Class and easy on the eye.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1612#discussion_r434039901", "createdAt": "2020-06-02T17:13:02Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "diffHunk": "@@ -140,6 +141,34 @@ private ClassToken(Class<T> rawType, TypeTokenContainer typeArguments) {\n     public TypeTokenContainer getTypeArguments() {\n       return typeArguments;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+      return 11 * rawType.hashCode() + typeArguments.hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(@Nullable Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (!(o instanceof ClassToken)) {\n+        return false;\n+      }\n+      ClassToken<?> that = (ClassToken<?>) o;\n+      return this.rawType.equals(that.rawType) && this.typeArguments.equals(that.typeArguments);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String toString() {\n+      StringBuilder sb = new StringBuilder();\n+      sb.append(\"ClassToken{ \");\n+      sb.append(\"RawType: \").append(rawType).append(\", \");\n+      sb.append(\"TypeArguments: \").append(typeArguments).append(\"\");\n+      sb.append(\" }\");\n+      return sb.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06a4d40b9494c30eb76da7f8408305928eb8f2de"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0MTM2Mg==", "bodyText": "Or to disambiguate, could it be something like TypeToken{Optional<String>[]}?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1612#discussion_r434041362", "createdAt": "2020-06-02T17:15:42Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "diffHunk": "@@ -140,6 +141,34 @@ private ClassToken(Class<T> rawType, TypeTokenContainer typeArguments) {\n     public TypeTokenContainer getTypeArguments() {\n       return typeArguments;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+      return 11 * rawType.hashCode() + typeArguments.hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(@Nullable Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (!(o instanceof ClassToken)) {\n+        return false;\n+      }\n+      ClassToken<?> that = (ClassToken<?>) o;\n+      return this.rawType.equals(that.rawType) && this.typeArguments.equals(that.typeArguments);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String toString() {\n+      StringBuilder sb = new StringBuilder();\n+      sb.append(\"ClassToken{ \");\n+      sb.append(\"RawType: \").append(rawType).append(\", \");\n+      sb.append(\"TypeArguments: \").append(typeArguments).append(\"\");\n+      sb.append(\" }\");\n+      return sb.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzOTkwMQ=="}, "originalCommit": {"oid": "06a4d40b9494c30eb76da7f8408305928eb8f2de"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0Njk2Ng==", "bodyText": "Great! I'll do that.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1612#discussion_r434046966", "createdAt": "2020-06-02T17:24:57Z", "author": {"login": "James201311"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "diffHunk": "@@ -140,6 +141,34 @@ private ClassToken(Class<T> rawType, TypeTokenContainer typeArguments) {\n     public TypeTokenContainer getTypeArguments() {\n       return typeArguments;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+      return 11 * rawType.hashCode() + typeArguments.hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(@Nullable Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (!(o instanceof ClassToken)) {\n+        return false;\n+      }\n+      ClassToken<?> that = (ClassToken<?>) o;\n+      return this.rawType.equals(that.rawType) && this.typeArguments.equals(that.typeArguments);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String toString() {\n+      StringBuilder sb = new StringBuilder();\n+      sb.append(\"ClassToken{ \");\n+      sb.append(\"RawType: \").append(rawType).append(\", \");\n+      sb.append(\"TypeArguments: \").append(typeArguments).append(\"\");\n+      sb.append(\" }\");\n+      return sb.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzOTkwMQ=="}, "originalCommit": {"oid": "06a4d40b9494c30eb76da7f8408305928eb8f2de"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2NDc2Nw==", "bodyText": "It turns out that i can do TypeToken{TypeToken{Optional<TypeToken{String}>}[]} or Optional<String>[] without any efforts. However, If we want TypeToken{Optional<String>[]}, it would involve more code since TypeTokens are nested. wdyt? @vkryachko", "url": "https://github.com/firebase/firebase-android-sdk/pull/1612#discussion_r434064767", "createdAt": "2020-06-02T17:54:44Z", "author": {"login": "James201311"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "diffHunk": "@@ -140,6 +141,34 @@ private ClassToken(Class<T> rawType, TypeTokenContainer typeArguments) {\n     public TypeTokenContainer getTypeArguments() {\n       return typeArguments;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+      return 11 * rawType.hashCode() + typeArguments.hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(@Nullable Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (!(o instanceof ClassToken)) {\n+        return false;\n+      }\n+      ClassToken<?> that = (ClassToken<?>) o;\n+      return this.rawType.equals(that.rawType) && this.typeArguments.equals(that.typeArguments);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String toString() {\n+      StringBuilder sb = new StringBuilder();\n+      sb.append(\"ClassToken{ \");\n+      sb.append(\"RawType: \").append(rawType).append(\", \");\n+      sb.append(\"TypeArguments: \").append(typeArguments).append(\"\");\n+      sb.append(\" }\");\n+      return sb.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzOTkwMQ=="}, "originalCommit": {"oid": "06a4d40b9494c30eb76da7f8408305928eb8f2de"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA3MTgwMw==", "bodyText": "yeah, that's expected. But it seems that it's pretty straightforward to achieve, i.e. by adding an abstract method like toStringRaw() to the type token and have all subclasses implement it, while toString() itself is only needed in TypeToken, wdyt?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1612#discussion_r434071803", "createdAt": "2020-06-02T18:03:57Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "diffHunk": "@@ -140,6 +141,34 @@ private ClassToken(Class<T> rawType, TypeTokenContainer typeArguments) {\n     public TypeTokenContainer getTypeArguments() {\n       return typeArguments;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+      return 11 * rawType.hashCode() + typeArguments.hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(@Nullable Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (!(o instanceof ClassToken)) {\n+        return false;\n+      }\n+      ClassToken<?> that = (ClassToken<?>) o;\n+      return this.rawType.equals(that.rawType) && this.typeArguments.equals(that.typeArguments);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String toString() {\n+      StringBuilder sb = new StringBuilder();\n+      sb.append(\"ClassToken{ \");\n+      sb.append(\"RawType: \").append(rawType).append(\", \");\n+      sb.append(\"TypeArguments: \").append(typeArguments).append(\"\");\n+      sb.append(\" }\");\n+      return sb.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzOTkwMQ=="}, "originalCommit": {"oid": "06a4d40b9494c30eb76da7f8408305928eb8f2de"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA4NTMyNQ==", "bodyText": "Niceeeeee! I am impressed.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1612#discussion_r434085325", "createdAt": "2020-06-02T18:19:19Z", "author": {"login": "James201311"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "diffHunk": "@@ -140,6 +141,34 @@ private ClassToken(Class<T> rawType, TypeTokenContainer typeArguments) {\n     public TypeTokenContainer getTypeArguments() {\n       return typeArguments;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+      return 11 * rawType.hashCode() + typeArguments.hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(@Nullable Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (!(o instanceof ClassToken)) {\n+        return false;\n+      }\n+      ClassToken<?> that = (ClassToken<?>) o;\n+      return this.rawType.equals(that.rawType) && this.typeArguments.equals(that.typeArguments);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String toString() {\n+      StringBuilder sb = new StringBuilder();\n+      sb.append(\"ClassToken{ \");\n+      sb.append(\"RawType: \").append(rawType).append(\", \");\n+      sb.append(\"TypeArguments: \").append(typeArguments).append(\"\");\n+      sb.append(\" }\");\n+      return sb.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzOTkwMQ=="}, "originalCommit": {"oid": "06a4d40b9494c30eb76da7f8408305928eb8f2de"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzY1NzE4OnYy", "diffSide": "RIGHT", "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxMzo1OFrOGd7uSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxMzo1OFrOGd7uSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0MDM5NQ==", "bodyText": "Then this one could be ${componentType}[], wdyt?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1612#discussion_r434040395", "createdAt": "2020-06-02T17:13:58Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "diffHunk": "@@ -157,5 +186,34 @@ private ArrayToken(TypeToken<?> componentType) {\n     public TypeToken<?> getComponentType() {\n       return componentType;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+      int result = 41;\n+      result += componentType.hashCode();\n+      return result;\n+    }\n+\n+    @Override\n+    public boolean equals(@Nullable Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (!(o instanceof ArrayToken)) {\n+        return false;\n+      }\n+      ArrayToken<?> that = (ArrayToken<?>) o;\n+      return this.componentType.equals(that.componentType);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String toString() {\n+      StringBuilder sb = new StringBuilder();\n+      sb.append(\"ArrayToken{ \");\n+      sb.append(\"ComponentType: \").append(componentType);\n+      sb.append(\" }\");\n+      return sb.toString();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06a4d40b9494c30eb76da7f8408305928eb8f2de"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDMxNTU4OnYy", "diffSide": "RIGHT", "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowOToyMFrOGeCOJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowOToyMFrOGeCOJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0Njg1Mg==", "bodyText": "nit\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return \"TypeToken:{\" + getTypeTokenLiteral() + \"}\";\n          \n          \n            \n                return \"TypeToken{\" + getTypeTokenLiteral() + \"}\";", "url": "https://github.com/firebase/firebase-android-sdk/pull/1612#discussion_r434146852", "createdAt": "2020-06-02T20:09:20Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "diffHunk": "@@ -113,6 +112,15 @@\n \n   private TypeToken() {}\n \n+  @NonNull\n+  abstract String getTypeTokenLiteral();\n+\n+  @NonNull\n+  @Override\n+  public String toString() {\n+    return \"TypeToken:{\" + getTypeTokenLiteral() + \"}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d3f053c7431c897433617b3c3d0773b5df82917"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1398, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}