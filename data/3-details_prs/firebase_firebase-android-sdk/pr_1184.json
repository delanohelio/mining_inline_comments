{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5ODM0MzM1", "number": 1184, "title": "Protobuf-backed FieldValues", "bodyText": "This finishes up the Protobuf FieldValue rewrite:\n\nMerges PrimitiveValue with FieldValue\nMoves protovalue classes to value package\nImplements ServerTimestamp support\n\nThe individual FieldValue types (IntegerValue, DoubleValue, etc) still exists, which makes the diff considerably smaller and keeps their current factory methods.\nPerformance with master for returning X docs out a collection of size Y:\n20 out of 1000: 3692 505 382 310 524 228 409 356\n1000 out of 1000: 8813 1512 1066 1748 997 1114 1145\nWith this branch:\n20 out of 1000: 714 238 279 311 277 339 245 308\n1000 out of 1000: 1344 1186 677 767 726 657 673 636\nI will get more numbers (once I have fixed the Performance spec tests, but I will do that tomorrow).", "createdAt": "2020-02-01T01:26:46Z", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184", "merged": true, "mergeCommit": {"oid": "f988c7095e5a4b8ea3e533b93a3cfefcbf83ea25"}, "closed": true, "closedAt": "2020-02-06T01:44:24Z", "author": {"login": "schmidt-sebastian"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcA055VgBqjMwMDQwNzU1OTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBgqR8gFqTM1NDE1NjUwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6828a3e8e0ceb14cbc43d91609e52e81f92c45e", "author": {"user": {"login": "schmidt-sebastian", "name": "Sebastian Schmidt"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/d6828a3e8e0ceb14cbc43d91609e52e81f92c45e", "committedDate": "2020-02-01T01:36:03Z", "message": "Fix WriterTest"}, "afterCommit": {"oid": "c5d5910c7067cb06cc4c99e98a1f8be9209c9153", "author": {"user": {"login": "schmidt-sebastian", "name": "Sebastian Schmidt"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/c5d5910c7067cb06cc4c99e98a1f8be9209c9153", "committedDate": "2020-02-03T22:43:43Z", "message": "Reduce diff"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b85fba2efee1777b33afbbc86376af949cfc92bf", "author": {"user": {"login": "schmidt-sebastian", "name": "Sebastian Schmidt"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/b85fba2efee1777b33afbbc86376af949cfc92bf", "committedDate": "2020-02-03T23:29:13Z", "message": "Cleanup"}, "afterCommit": {"oid": "433da87735d8ace96e8498ca5f3a7f66eb6318fe", "author": {"user": {"login": "schmidt-sebastian", "name": "Sebastian Schmidt"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/433da87735d8ace96e8498ca5f3a7f66eb6318fe", "committedDate": "2020-02-03T23:56:41Z", "message": "Drop Protobuf-backed FieldValues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "433da87735d8ace96e8498ca5f3a7f66eb6318fe", "author": {"user": {"login": "schmidt-sebastian", "name": "Sebastian Schmidt"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/433da87735d8ace96e8498ca5f3a7f66eb6318fe", "committedDate": "2020-02-03T23:56:41Z", "message": "Drop Protobuf-backed FieldValues"}, "afterCommit": {"oid": "ee04961eb4804894b7649dcfd3d5139f7c40000f", "author": {"user": {"login": "schmidt-sebastian", "name": "Sebastian Schmidt"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/ee04961eb4804894b7649dcfd3d5139f7c40000f", "committedDate": "2020-02-04T00:11:44Z", "message": "Drop Protobuf-backed FieldValues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf6369ab82db64ae4067290516ddeaa5770c70b5", "author": {"user": {"login": "schmidt-sebastian", "name": "Sebastian Schmidt"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/cf6369ab82db64ae4067290516ddeaa5770c70b5", "committedDate": "2020-02-04T00:45:50Z", "message": "Fix flaky testWriteTheSameServerTimestampAcrossWrites"}, "afterCommit": {"oid": "282380fe270bd209117916e8b772e31eccac1771", "author": {"user": {"login": "schmidt-sebastian", "name": "Sebastian Schmidt"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/282380fe270bd209117916e8b772e31eccac1771", "committedDate": "2020-02-04T01:15:37Z", "message": "Drop Protobuf-backed FieldValues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1602062c2763abaf2a77a4fd2067ae26e6c96965", "author": {"user": {"login": "schmidt-sebastian", "name": "Sebastian Schmidt"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/1602062c2763abaf2a77a4fd2067ae26e6c96965", "committedDate": "2020-02-04T04:03:55Z", "message": "Protobuf-backed FieldValues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "282380fe270bd209117916e8b772e31eccac1771", "author": {"user": {"login": "schmidt-sebastian", "name": "Sebastian Schmidt"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/282380fe270bd209117916e8b772e31eccac1771", "committedDate": "2020-02-04T01:15:37Z", "message": "Drop Protobuf-backed FieldValues"}, "afterCommit": {"oid": "1602062c2763abaf2a77a4fd2067ae26e6c96965", "author": {"user": {"login": "schmidt-sebastian", "name": "Sebastian Schmidt"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/1602062c2763abaf2a77a4fd2067ae26e6c96965", "committedDate": "2020-02-04T04:03:55Z", "message": "Protobuf-backed FieldValues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzE3MTE0", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#pullrequestreview-352717114", "createdAt": "2020-02-04T04:23:10Z", "commit": {"oid": "1602062c2763abaf2a77a4fd2067ae26e6c96965"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDoyMzoxMFrOFlHukw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDoyMzoxMFrOFlHukw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2ODI0Mw==", "bodyText": "This PR somehow changed the timing of events so much that the fromCache:false event is now delivered before hasPendingWrites:false. I am not 100% convinced that this is not due to a bug, but if I look at the test logs everything looks sane.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r374468243", "createdAt": "2020-02-04T04:23:10Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/androidTest/java/com/google/firebase/firestore/WriteBatchTest.java", "diffHunk": "@@ -222,7 +222,7 @@ public void testWriteTheSameServerTimestampAcrossWrites() {\n     assertTrue(localSnap.getMetadata().hasPendingWrites());\n     assertEquals(asList(map(\"when\", null), map(\"when\", null)), querySnapshotToValues(localSnap));\n \n-    QuerySnapshot serverSnap = accumulator.await();\n+    QuerySnapshot serverSnap = accumulator.awaitRemoteEvent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1602062c2763abaf2a77a4fd2067ae26e6c96965"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzE3MTg2", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#pullrequestreview-352717186", "createdAt": "2020-02-04T04:23:32Z", "commit": {"oid": "1602062c2763abaf2a77a4fd2067ae26e6c96965"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDoyMzozMlrOFlHuxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDoyMzozMlrOFlHuxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2ODI5Mw==", "bodyText": "This is the change from #1188", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r374468293", "createdAt": "2020-02-04T04:23:32Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/androidTest/java/com/google/firebase/firestore/ValidationTest.java", "diffHunk": "@@ -461,44 +461,49 @@ public void queriesCannotBeSortedByAnUncommittedServerTimestamp() {\n     TaskCompletionSource<Void> offlineCallbackDone = new TaskCompletionSource<>();\n     TaskCompletionSource<Void> onlineCallbackDone = new TaskCompletionSource<>();\n \n-    collection.addSnapshotListener(\n-        (snapshot, error) -> {\n-          assertNotNull(snapshot);\n-\n-          // Skip the initial empty snapshot.\n-          if (snapshot.isEmpty()) return;\n-\n-          assertThat(snapshot.getDocuments()).hasSize(1);\n-          DocumentSnapshot docSnap = snapshot.getDocuments().get(0);\n-\n-          if (snapshot.getMetadata().hasPendingWrites()) {\n-            // Offline snapshot. Since the server timestamp is uncommitted, we shouldn't be able to\n-            // query by it.\n-            assertThrows(\n-                IllegalArgumentException.class,\n-                () ->\n-                    collection\n-                        .orderBy(\"timestamp\")\n-                        .endAt(docSnap)\n-                        .addSnapshotListener((snapshot2, error2) -> {}));\n-            offlineCallbackDone.setResult(null);\n-          } else {\n-            // Online snapshot. Since the server timestamp is committed, we should be able to query\n-            // by it.\n-            collection\n-                .orderBy(\"timestamp\")\n-                .endAt(docSnap)\n-                .addSnapshotListener((snapshot2, error2) -> {});\n-            onlineCallbackDone.setResult(null);\n-          }\n-        });\n+    ListenerRegistration listenerRegistration =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1602062c2763abaf2a77a4fd2067ae26e6c96965"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzE3NTA2", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#pullrequestreview-352717506", "createdAt": "2020-02-04T04:25:10Z", "commit": {"oid": "1602062c2763abaf2a77a4fd2067ae26e6c96965"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDoyNToxMFrOFlHv0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNDoyNToxMFrOFlHv0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ2ODU2Mg==", "bodyText": "FYI: A lot of the diff in this file brings the test more in line with master.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r374468562", "createdAt": "2020-02-04T04:25:10Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/model/FieldValueTest.java", "diffHunk": "@@ -32,16 +32,24 @@\n import com.google.firebase.Timestamp;\n import com.google.firebase.firestore.GeoPoint;\n import com.google.firebase.firestore.model.mutation.FieldMask;\n-import com.google.firebase.firestore.model.protovalue.ObjectValue;\n-import com.google.firebase.firestore.model.protovalue.PrimitiveValue;\n+import com.google.firebase.firestore.model.value.BlobValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1602062c2763abaf2a77a4fd2067ae26e6c96965"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37", "author": {"user": {"login": "schmidt-sebastian", "name": "Sebastian Schmidt"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/804a1b7a9d0304f13a394b2f46054f2409c52b37", "committedDate": "2020-02-04T21:39:54Z", "message": "Merge branch 'mrschmidt/rewritefieldvalue' into mrschmidt/final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b", "author": {"user": {"login": "schmidt-sebastian", "name": "Sebastian Schmidt"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/3d5d7c2570b34f0797602f6dd46e407232b3bf8b", "committedDate": "2020-02-04T23:44:07Z", "message": "Merge branch 'mrschmidt/rewritefieldvalue' into mrschmidt/final"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMzcwMzMz", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#pullrequestreview-353370333", "createdAt": "2020-02-04T23:14:25Z", "commit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMzoxNDoyNVrOFlm1Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMDowMTowMVrOFlnvhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk3NzgxMA==", "bodyText": "Are these changes intended?\nIf so, since these are changes to FirebaseCommon's configuration, maybe pull them out into a PR sent to someone that owns that?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r374977810", "createdAt": "2020-02-04T23:14:25Z", "author": {"login": "wilhuff"}, "path": "codecov.yml", "diffHunk": "@@ -9,12 +9,14 @@ coverage:\n       default: off\n       FirebaseCommon:\n         flags: FirebaseCommon\n-        informational: true\n+        informational: false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk3OTMzNQ==", "bodyText": "It seems like having overloads (or just a public interface) that accepts FieldValue/ObjectValue would make this code less cumbersome to deal with.\nThen again, if this is the only caller, maybe this is better.\nJust a thought; no action required.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r374979335", "createdAt": "2020-02-04T23:18:36Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentSnapshot.java", "diffHunk": "@@ -533,7 +533,7 @@ private Object getInternal(\n       if (val != null) {\n         UserDataWriter userDataWriter =\n             new UserDataWriter(firestore, timestampsInSnapshots, serverTimestampBehavior);\n-        return userDataWriter.convertValue(val);\n+        return userDataWriter.convertValue(val.getProto());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MTQ0OQ==", "bodyText": "This code essentially duplicates Values.valueOf. Is there no way to unite these?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r374981449", "createdAt": "2020-02-04T23:25:12Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/UserDataReader.java", "diffHunk": "@@ -398,35 +389,37 @@ private void parseSentinelFieldValue(\n    * @return The parsed value, or {@code null} if the value was a FieldValue sentinel that should\n    *     not be included in the resulting parsed data.\n    */\n-  private FieldValue parseScalarValue(Object input, ParseContext context) {\n+  private Value parseScalarValue(Object input, ParseContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MjYwMg==", "bodyText": "It seems like this would be cheaper if we iterated over the proto Value elements and compared for equality using ProtoValues directly.\nFeel free to defer into another PR that address concerns like these.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r374982602", "createdAt": "2020-02-04T23:28:43Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/core/ArrayContainsAnyFilter.java", "diffHunk": "@@ -32,8 +32,8 @@ public boolean matches(Document doc) {\n     if (!(other instanceof ArrayValue)) {\n       return false;\n     }\n-    for (FieldValue val : ((ArrayValue) other).getInternalValue()) {\n-      if (arrayValue.getInternalValue().contains(val)) {\n+    for (FieldValue val : ((ArrayValue) other).getValues()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4NDI1NQ==", "bodyText": "If you pull the proto out of the value outside the loop you can use ProtoValues.equals here instead which avoids the reflective type checking and allocation inherent in FieldValue.valueOf.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r374984255", "createdAt": "2020-02-04T23:33:56Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/value/ArrayValue.java", "diffHunk": "@@ -14,67 +14,46 @@\n \n package com.google.firebase.firestore.model.value;\n \n-import com.google.firebase.firestore.util.Util;\n+import com.google.firestore.v1.Value;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n \n /** A wrapper for Array values in Firestore */\n public class ArrayValue extends FieldValue {\n-\n-  private final List<FieldValue> internalValue;\n-\n-  private ArrayValue(List<FieldValue> value) {\n-    internalValue = Collections.unmodifiableList(value);\n+  ArrayValue(Value value) {\n+    super(value);\n   }\n \n-  @Override\n-  public boolean equals(Object o) {\n-    return (o instanceof ArrayValue) && internalValue.equals(((ArrayValue) o).internalValue);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return internalValue.hashCode();\n-  }\n-\n-  @Override\n-  public int compareTo(FieldValue o) {\n-    if (o instanceof ArrayValue) {\n-      ArrayValue other = (ArrayValue) o;\n-      int minLength = Math.min(internalValue.size(), other.internalValue.size());\n-      for (int i = 0; i < minLength; i++) {\n-        int cmp = internalValue.get(i).compareTo(((ArrayValue) o).internalValue.get(i));\n-        if (cmp != 0) {\n-          return cmp;\n-        }\n-      }\n-      return Util.compareIntegers(internalValue.size(), other.internalValue.size());\n-    } else {\n-      return defaultCompareTo(o);\n+  public static ArrayValue fromList(List<FieldValue> list) {\n+    com.google.firestore.v1.ArrayValue.Builder builder =\n+        com.google.firestore.v1.ArrayValue.newBuilder();\n+    for (FieldValue value : list) {\n+      builder.addValues(value.getProto());\n     }\n+    return new ArrayValue(Value.newBuilder().setArrayValue(builder).build());\n   }\n \n-  @Override\n-  public int typeOrder() {\n-    return TYPE_ORDER_ARRAY;\n-  }\n-\n-  @Override\n-  public List<Object> value() {\n-    // Recursively convert the array into the value that users will see in document snapshots.\n-    List<Object> res = new ArrayList<>(internalValue.size());\n-    for (FieldValue v : internalValue) {\n-      res.add(v.value());\n+  /** Converts all elements to a list of FieldValues. */\n+  public List<FieldValue> getValues() {\n+    List<FieldValue> result = new ArrayList<>();\n+    for (Value element : internalValue.getArrayValue().getValuesList()) {\n+      result.add(FieldValue.valueOf(element));\n     }\n-    return res;\n-  }\n-\n-  public List<FieldValue> getInternalValue() {\n-    return internalValue;\n-  }\n-\n-  public static ArrayValue fromList(List<FieldValue> list) {\n-    return new ArrayValue(list);\n+    return result;\n+  }\n+\n+  /**\n+   * Returns true if this ArrayValue contains the specified element.\n+   *\n+   * <p>This method creates fewer temporary objects than invoking `getValues().contains()` (if the\n+   * value is contained in the backing ArrayValue).\n+   */\n+  public boolean contains(FieldValue value) {\n+    for (Value element : internalValue.getArrayValue().getValuesList()) {\n+      if (value.equals(FieldValue.valueOf(element))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4NDYzOQ==", "bodyText": "Ideally I think we should avoid methods like these and just have callers operate on the protos or build methods on ArrayValue that hide that detail.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r374984639", "createdAt": "2020-02-04T23:35:09Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/value/ArrayValue.java", "diffHunk": "@@ -14,67 +14,46 @@\n \n package com.google.firebase.firestore.model.value;\n \n-import com.google.firebase.firestore.util.Util;\n+import com.google.firestore.v1.Value;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n \n /** A wrapper for Array values in Firestore */\n public class ArrayValue extends FieldValue {\n-\n-  private final List<FieldValue> internalValue;\n-\n-  private ArrayValue(List<FieldValue> value) {\n-    internalValue = Collections.unmodifiableList(value);\n+  ArrayValue(Value value) {\n+    super(value);\n   }\n \n-  @Override\n-  public boolean equals(Object o) {\n-    return (o instanceof ArrayValue) && internalValue.equals(((ArrayValue) o).internalValue);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return internalValue.hashCode();\n-  }\n-\n-  @Override\n-  public int compareTo(FieldValue o) {\n-    if (o instanceof ArrayValue) {\n-      ArrayValue other = (ArrayValue) o;\n-      int minLength = Math.min(internalValue.size(), other.internalValue.size());\n-      for (int i = 0; i < minLength; i++) {\n-        int cmp = internalValue.get(i).compareTo(((ArrayValue) o).internalValue.get(i));\n-        if (cmp != 0) {\n-          return cmp;\n-        }\n-      }\n-      return Util.compareIntegers(internalValue.size(), other.internalValue.size());\n-    } else {\n-      return defaultCompareTo(o);\n+  public static ArrayValue fromList(List<FieldValue> list) {\n+    com.google.firestore.v1.ArrayValue.Builder builder =\n+        com.google.firestore.v1.ArrayValue.newBuilder();\n+    for (FieldValue value : list) {\n+      builder.addValues(value.getProto());\n     }\n+    return new ArrayValue(Value.newBuilder().setArrayValue(builder).build());\n   }\n \n-  @Override\n-  public int typeOrder() {\n-    return TYPE_ORDER_ARRAY;\n-  }\n-\n-  @Override\n-  public List<Object> value() {\n-    // Recursively convert the array into the value that users will see in document snapshots.\n-    List<Object> res = new ArrayList<>(internalValue.size());\n-    for (FieldValue v : internalValue) {\n-      res.add(v.value());\n+  /** Converts all elements to a list of FieldValues. */\n+  public List<FieldValue> getValues() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4NTQ0NA==", "bodyText": "It seems like the 2018 date should be preserved, since the the copyright should always reflect the first date of publication. If you want to also update this for the current date (since there's a major modification here), make this:\n// Copyright 2018-2020 Google LLC\nLeaving this in the prior state is also fine.\nSee go/copyright for more details.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r374985444", "createdAt": "2020-02-04T23:37:47Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/value/FieldValue.java", "diffHunk": "@@ -1,4 +1,4 @@\n-// Copyright 2018 Google LLC\n+// Copyright 2019 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4NjEzNQ==", "bodyText": "You can drop the this. here (and below).", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r374986135", "createdAt": "2020-02-04T23:40:01Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/value/FieldValue.java", "diffHunk": "@@ -43,59 +41,99 @@\n  *   <li>Object\n  * </ul>\n  */\n-public abstract class FieldValue implements Comparable<FieldValue> {\n-\n-  // TODO(mrschmidt): Reduce visibility of these types once `protovalue`\n-  // is merged into `value` package\n+public class FieldValue implements Comparable<FieldValue> {\n   /** The order of types in Firestore; this order is defined by the backend. */\n-  public static final int TYPE_ORDER_NULL = 0;\n+  static final int TYPE_ORDER_NULL = 0;\n+\n+  static final int TYPE_ORDER_BOOLEAN = 1;\n+  static final int TYPE_ORDER_NUMBER = 2;\n+  static final int TYPE_ORDER_TIMESTAMP = 3;\n+  static final int TYPE_ORDER_STRING = 4;\n+  static final int TYPE_ORDER_BLOB = 5;\n+  static final int TYPE_ORDER_REFERENCE = 6;\n+  static final int TYPE_ORDER_GEOPOINT = 7;\n+  static final int TYPE_ORDER_ARRAY = 8;\n+  static final int TYPE_ORDER_OBJECT = 9;\n \n-  public static final int TYPE_ORDER_BOOLEAN = 1;\n-  public static final int TYPE_ORDER_NUMBER = 2;\n-  public static final int TYPE_ORDER_TIMESTAMP = 3;\n-  public static final int TYPE_ORDER_STRING = 4;\n-  public static final int TYPE_ORDER_BLOB = 5;\n-  public static final int TYPE_ORDER_REFERENCE = 6;\n-  public static final int TYPE_ORDER_GEOPOINT = 7;\n-  public static final int TYPE_ORDER_ARRAY = 8;\n-  public static final int TYPE_ORDER_OBJECT = 9;\n+  final Value internalValue;\n+\n+  FieldValue(Value value) {\n+    this.internalValue = value;\n+  }\n \n   /** Creates a new FieldValue based on the Protobuf Value. */\n-  public static FieldValue of(Value value) {\n-    if (value.getValueTypeCase() == Value.ValueTypeCase.MAP_VALUE) {\n-      return new ObjectValue(value);\n-    } else {\n-      return new PrimitiveValue(value);\n+  public static @Nullable FieldValue valueOf(@Nullable Value value) {\n+    if (value != null) {\n+      switch (value.getValueTypeCase()) {\n+        case NULL_VALUE:\n+          return NullValue.nullValue();\n+        case BOOLEAN_VALUE:\n+          return new BooleanValue(value);\n+        case INTEGER_VALUE:\n+          return new IntegerValue(value);\n+        case DOUBLE_VALUE:\n+          return new DoubleValue(value);\n+        case TIMESTAMP_VALUE:\n+          return new TimestampValue(value);\n+        case STRING_VALUE:\n+          return new StringValue(value);\n+        case BYTES_VALUE:\n+          return new BlobValue(value);\n+        case REFERENCE_VALUE:\n+          return new ReferenceValue(value);\n+        case GEO_POINT_VALUE:\n+          return new GeoPointValue(value);\n+        case ARRAY_VALUE:\n+          return new ArrayValue(value);\n+        case MAP_VALUE:\n+          if (ServerTimestampValue.isServerTimestamp(value)) {\n+            return new ServerTimestampValue(value);\n+          }\n+          return new ObjectValue(value);\n+        default:\n+          throw fail(\"Invlaid value type: %s\", value.getValueTypeCase());\n+      }\n     }\n+    return null;\n   }\n \n-  public abstract int typeOrder();\n+  /** Returns the type order as defined by the backend. */\n+  public int typeOrder() {\n+    return ProtoValues.typeOrder(internalValue);\n+  }\n \n-  /**\n-   * Converts a FieldValue into the value that users will see in document snapshots using the\n-   * default deserialization options.\n-   */\n-  @Nullable\n-  public abstract Object value();\n+  /** Returns Firestore Value Protobuf that backs this FieldValuee */\n+  public Value getProto() {\n+    return internalValue;\n+  }\n \n-  @Override\n-  public abstract boolean equals(Object o);\n+  /** Returns the canonical ID representation for the contents of this FieldValue. */\n+  public String getCanonicalId() {\n+    return ProtoValues.canonicalId(internalValue);\n+  }\n \n   @Override\n-  public abstract int hashCode();\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    } else if (o instanceof FieldValue) {\n+      return ProtoValues.equals(this.internalValue, ((FieldValue) o).internalValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4NjgyOA==", "bodyText": "Shorten this to use the imported Value and MapValue? Here and below.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r374986828", "createdAt": "2020-02-04T23:41:34Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/value/ObjectValue.java", "diffHunk": "@@ -17,32 +17,35 @@\n import static com.google.firebase.firestore.util.Assert.hardAssert;\n \n import androidx.annotation.Nullable;\n-import com.google.firebase.database.collection.ImmutableSortedMap;\n import com.google.firebase.firestore.model.FieldPath;\n import com.google.firebase.firestore.model.mutation.FieldMask;\n-import com.google.firebase.firestore.util.Util;\n+import com.google.firestore.v1.MapValue;\n+import com.google.firestore.v1.Value;\n import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.Iterator;\n import java.util.Map;\n-import java.util.Map.Entry;\n import java.util.Set;\n \n /** A structured object value stored in Firestore. */\n public class ObjectValue extends FieldValue {\n   private static final ObjectValue EMPTY_INSTANCE =\n-      new ObjectValue(ImmutableSortedMap.Builder.emptyMap(Util.<String>comparator()));\n+      new ObjectValue(\n+          com.google.firestore.v1.Value.newBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4ODU5NQ==", "bodyText": "It strikes me here that we're inconsistent about how we handle these singletons. We could have NullValue.NULL instead, right?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r374988595", "createdAt": "2020-02-04T23:47:21Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/local/IndexedQueryEngine.java", "diffHunk": "@@ -165,7 +166,8 @@ public void setLocalDocumentsView(LocalDocumentsView localDocuments) {\n   private static double estimateFilterSelectivity(Filter filter) {\n     hardAssert(filter instanceof FieldFilter, \"Filter type expected to be FieldFilter\");\n     FieldFilter fieldFilter = (FieldFilter) filter;\n-    if (fieldFilter.getValue().equals(null) || fieldFilter.getValue().equals(DoubleValue.NaN)) {\n+    FieldValue filterValue = fieldFilter.getValue();\n+    if (NullValue.nullValue().equals(filterValue) || DoubleValue.NaN.equals(filterValue)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4OTQ0Mg==", "bodyText": "Now that baseObject is a Builder, this assignment here seems duplicative. The builder only does return this for chaining, right?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r374989442", "createdAt": "2020-02-04T23:50:01Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/TransformMutation.java", "diffHunk": "@@ -135,10 +135,9 @@ public ObjectValue extractBaseValue(@Nullable MaybeDocument maybeDoc) {\n       FieldValue coercedValue = transform.getOperation().computeBaseValue(existingValue);\n       if (coercedValue != null) {\n         if (baseObject == null) {\n-          baseObject = ObjectValue.newBuilder().set(transform.getFieldPath(), coercedValue);\n-        } else {\n-          baseObject = baseObject.set(transform.getFieldPath(), coercedValue);\n+          baseObject = ObjectValue.newBuilder();\n         }\n+        baseObject = baseObject.set(transform.getFieldPath(), coercedValue.getProto());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5MjA1Ng==", "bodyText": "Use an early return to reduce nesting?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r374992056", "createdAt": "2020-02-04T23:58:44Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/value/FieldValue.java", "diffHunk": "@@ -43,59 +41,99 @@\n  *   <li>Object\n  * </ul>\n  */\n-public abstract class FieldValue implements Comparable<FieldValue> {\n-\n-  // TODO(mrschmidt): Reduce visibility of these types once `protovalue`\n-  // is merged into `value` package\n+public class FieldValue implements Comparable<FieldValue> {\n   /** The order of types in Firestore; this order is defined by the backend. */\n-  public static final int TYPE_ORDER_NULL = 0;\n+  static final int TYPE_ORDER_NULL = 0;\n+\n+  static final int TYPE_ORDER_BOOLEAN = 1;\n+  static final int TYPE_ORDER_NUMBER = 2;\n+  static final int TYPE_ORDER_TIMESTAMP = 3;\n+  static final int TYPE_ORDER_STRING = 4;\n+  static final int TYPE_ORDER_BLOB = 5;\n+  static final int TYPE_ORDER_REFERENCE = 6;\n+  static final int TYPE_ORDER_GEOPOINT = 7;\n+  static final int TYPE_ORDER_ARRAY = 8;\n+  static final int TYPE_ORDER_OBJECT = 9;\n \n-  public static final int TYPE_ORDER_BOOLEAN = 1;\n-  public static final int TYPE_ORDER_NUMBER = 2;\n-  public static final int TYPE_ORDER_TIMESTAMP = 3;\n-  public static final int TYPE_ORDER_STRING = 4;\n-  public static final int TYPE_ORDER_BLOB = 5;\n-  public static final int TYPE_ORDER_REFERENCE = 6;\n-  public static final int TYPE_ORDER_GEOPOINT = 7;\n-  public static final int TYPE_ORDER_ARRAY = 8;\n-  public static final int TYPE_ORDER_OBJECT = 9;\n+  final Value internalValue;\n+\n+  FieldValue(Value value) {\n+    this.internalValue = value;\n+  }\n \n   /** Creates a new FieldValue based on the Protobuf Value. */\n-  public static FieldValue of(Value value) {\n-    if (value.getValueTypeCase() == Value.ValueTypeCase.MAP_VALUE) {\n-      return new ObjectValue(value);\n-    } else {\n-      return new PrimitiveValue(value);\n+  public static @Nullable FieldValue valueOf(@Nullable Value value) {\n+    if (value != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5Mjc3Mw==", "bodyText": "hardAssert that isServerTimestamp(value)?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r374992773", "createdAt": "2020-02-05T00:01:01Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/value/ServerTimestampValue.java", "diffHunk": "@@ -17,37 +17,63 @@\n import androidx.annotation.Nullable;\n import com.google.firebase.Timestamp;\n import com.google.firebase.firestore.DocumentSnapshot;\n+import com.google.firestore.v1.MapValue;\n+import com.google.firestore.v1.Value;\n \n /**\n  * Represents a locally-applied Server Timestamp.\n  *\n- * <p>Notes: - ServerTimestampValue instances are created as the result of applying a\n- * TransformMutation (see TransformMutation.applyTo()). They can only exist in the local view of a\n- * document. Therefore they do not need to be parsed or serialized. - When evaluated locally (e.g.\n- * via DocumentSnapshot data), they evaluate to null. - They sort after all TimestampValues. With\n- * respect to other ServerTimestampValues, they sort by their localWriteTime.\n+ * <p>Server Timestamps are backed by MapValues that contain an internal field `__type__` with a\n+ * value of `server_timestamp`. The previous value and local write time are stored in its\n+ * `__previous_value__` and `__local_write_time__` fields respectively.\n+ *\n+ * <p>Notes:\n+ * <li>ServerTimestampValue instances are created as the result of applying a TransformMutation (see\n+ *     TransformMutation.applyTo()). They can only exist in the local view of a document. Therefore\n+ *     they do not need to be parsed or serialized.\n+ * <li>When evaluated locally (e.g. via DocumentSnapshot data), they evaluate to null.\n+ * <li>They sort after all TimestampValues. With respect to other ServerTimestampValues, they sort\n+ *     by their localWriteTime.\n  */\n public final class ServerTimestampValue extends FieldValue {\n-  private final Timestamp localWriteTime;\n-  @Nullable private final FieldValue previousValue;\n+  private static final String SERVER_TIMESTAMP_SENTINEL = \"server_timestamp\";\n+  private static final String TYPE_KEY = \"__type__\";\n+  private static final String PREVIOUS_VALUE_KEY = \"__previous_value__\";\n+  private static final String LOCAL_WRITE_TIME_KEY = \"__local_write_time__\";\n \n-  // TODO(mrschmidt): Represent ServerTimestamps as a PrimitiveType with a Map containing a private\n-  //  `__type__` field (or similar).\n+  public static boolean isServerTimestamp(Value value) {\n+    Value type = value.getMapValue().getFieldsOrDefault(TYPE_KEY, null);\n+    return type != null && SERVER_TIMESTAMP_SENTINEL.equals(type.getStringValue());\n+  }\n \n-  public ServerTimestampValue(Timestamp localWriteTime, @Nullable FieldValue previousValue) {\n-    this.localWriteTime = localWriteTime;\n-    this.previousValue = previousValue;\n+  public ServerTimestampValue(Value value) {\n+    super(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzODc1NDIz", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#pullrequestreview-353875423", "createdAt": "2020-02-05T16:50:23Z", "commit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjo1MDoyNFrOFl_RDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzoyMToxMVrOFmAXBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3ODE4OA==", "bodyText": "It seems like the other tests are using a single letter variable that's short for the type. Make this Timestamp t?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375378188", "createdAt": "2020-02-05T16:50:24Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/UserDataWriterTest.java", "diffHunk": "@@ -167,8 +179,8 @@ public void testConvertsTimestampValue() {\n     for (Timestamp d : testCases) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3ODk1NA==", "bodyText": "Import FieldValue and shorten?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375378954", "createdAt": "2020-02-05T16:51:43Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/model/MutationTest.java", "diffHunk": "@@ -157,13 +156,9 @@ public void testAppliesLocalServerTimestampTransformsToDocuments() {\n     // Server timestamps aren't parsed, so we manually insert it.\n     ObjectValue expectedData =\n         wrapObject(map(\"foo\", map(\"bar\", \"<server-timestamp>\"), \"baz\", \"baz-value\"));\n-    expectedData =\n-        expectedData\n-            .toBuilder()\n-            .set(\n-                field(\"foo.bar\"),\n-                new ServerTimestampValue(timestamp, StringValue.valueOf(\"bar-value\")))\n-            .build();\n+    com.google.firebase.firestore.model.value.FieldValue fieldValue =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NDQxNA==", "bodyText": "fooString isn't adding a whole lot of value here, and it's inconsistent with the other string literals here. Consider reverting that.\nAlso, why not pass the values as arguments to map? That seemed like a great way to explicitly compose expected values.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375384414", "createdAt": "2020-02-05T17:00:51Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/model/ObjectValueBuilderTest.java", "diffHunk": "@@ -74,7 +74,7 @@ public void setsNestedField() {\n     builder.set(field(\"a.b\"), fooValue);\n     builder.set(field(\"c.d.e\"), fooValue);\n     ObjectValue object = builder.build();\n-    assertEquals(wrapObject(\"a\", map(\"b\", fooValue), \"c\", map(\"d\", map(\"e\", fooValue))), object);\n+    assertEquals(wrapObject(\"a\", map(\"b\", fooString), \"c\", map(\"d\", map(\"e\", fooString))), object);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NTc1Mg==", "bodyText": "FWIW, valueOf(\"a\") seems cleaner than wrap(\"a\").getProto().", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375385752", "createdAt": "2020-02-05T17:03:09Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/model/FieldValueTest.java", "diffHunk": "@@ -118,8 +127,13 @@ public void testAddsNewFields() {\n   @Test\n   public void testAddsMultipleNewFields() {\n     ObjectValue object = ObjectValue.emptyObject();\n-    object = object.toBuilder().set(field(\"a\"), valueOf(\"a\")).build();\n-    object = object.toBuilder().set(field(\"b\"), valueOf(\"b\")).set(field(\"c\"), valueOf(\"c\")).build();\n+    object = object.toBuilder().set(field(\"a\"), wrap(\"a\").getProto()).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NjQzMQ==", "bodyText": "We should add an overload for setField that allows map to work inline so that we don't have think about this distinction.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375386431", "createdAt": "2020-02-05T17:04:23Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/model/FieldValueTest.java", "diffHunk": "@@ -137,7 +151,7 @@ public void testImplicitlyCreatesObjects() {\n   @Test\n   public void testCanOverwritePrimitivesWithObjects() {\n     ObjectValue old = wrapObject(\"a\", map(\"b\", \"old\"));\n-    ObjectValue mod = setField(old, \"a\", map(\"b\", \"mod\"));\n+    ObjectValue mod = setField(old, \"a\", wrapObject(\"b\", \"mod\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5NDY0NQ==", "bodyText": "List<FieldValue> still seems like \"elements\" more than \"elementsProto\": we're asking each element to get its underlying proto.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375394645", "createdAt": "2020-02-05T17:18:37Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteSerializer.java", "diffHunk": "@@ -567,21 +403,19 @@ private FieldMask decodeDocumentMask(DocumentMask mask) {\n           (NumericIncrementTransformOperation) transform;\n       return DocumentTransform.FieldTransform.newBuilder()\n           .setFieldPath(fieldTransform.getFieldPath().canonicalString())\n-          .setIncrement(encodeValue(incrementOperation.getOperand()))\n+          .setIncrement(incrementOperation.getOperand().getProto())\n           .build();\n     } else {\n       throw fail(\"Unknown transform: %s\", transform);\n     }\n   }\n \n-  private com.google.firestore.v1.ArrayValue encodeArrayTransformElements(\n-      List<FieldValue> elements) {\n-    com.google.firestore.v1.ArrayValue.Builder arrayBuilder =\n-        com.google.firestore.v1.ArrayValue.newBuilder();\n-    for (FieldValue subValue : elements) {\n-      arrayBuilder.addValues(encodeValue(subValue));\n+  private ArrayValue encodeArrayTransformElements(List<FieldValue> elementsProto) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5NTU2Mg==", "bodyText": "Is it possible to make the array transform elements just a model.ArrayValue?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375395562", "createdAt": "2020-02-05T17:20:15Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteSerializer.java", "diffHunk": "@@ -599,35 +433,35 @@ private FieldTransform decodeFieldTransform(DocumentTransform.FieldTransform fie\n         return new FieldTransform(\n             FieldPath.fromServerFormat(fieldTransform.getFieldPath()),\n             new ArrayTransformOperation.Union(\n-                decodeArrayTransformElements(fieldTransform.getAppendMissingElements())));\n+                decodeArrayTransformElements(\n+                    fieldTransform.getAppendMissingElements().getValuesList())));\n       case REMOVE_ALL_FROM_ARRAY:\n         return new FieldTransform(\n             FieldPath.fromServerFormat(fieldTransform.getFieldPath()),\n             new ArrayTransformOperation.Remove(\n-                decodeArrayTransformElements(fieldTransform.getRemoveAllFromArray())));\n+                decodeArrayTransformElements(\n+                    fieldTransform.getRemoveAllFromArray().getValuesList())));\n       case INCREMENT:\n         {\n-          FieldValue operand = decodeValue(fieldTransform.getIncrement());\n+          FieldValue operand = FieldValue.valueOf(fieldTransform.getIncrement());\n           hardAssert(\n               operand instanceof NumberValue,\n               \"Expected NUMERIC_ADD transform to be of number type, but was %s\",\n               operand.getClass().getCanonicalName());\n           return new FieldTransform(\n               FieldPath.fromServerFormat(fieldTransform.getFieldPath()),\n               new NumericIncrementTransformOperation(\n-                  (NumberValue) decodeValue(fieldTransform.getIncrement())));\n+                  (NumberValue) FieldValue.valueOf(fieldTransform.getIncrement())));\n         }\n       default:\n         throw fail(\"Unknown FieldTransform proto: %s\", fieldTransform);\n     }\n   }\n \n-  private List<FieldValue> decodeArrayTransformElements(\n-      com.google.firestore.v1.ArrayValue elementsProto) {\n-    int count = elementsProto.getValuesCount();\n-    List<FieldValue> result = new ArrayList<>(count);\n-    for (int i = 0; i < count; i++) {\n-      result.add(decodeValue(elementsProto.getValues(i)));\n+  private List<FieldValue> decodeArrayTransformElements(List<Value> elementsProto) {\n+    List<FieldValue> result = new ArrayList<>(elementsProto.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 319}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5NjEwMQ==", "bodyText": "Similarly: can we make transform results a model.ArrayValue so we don't have to convert?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375396101", "createdAt": "2020-02-05T17:21:11Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteSerializer.java", "diffHunk": "@@ -648,7 +482,7 @@ public MutationResult decodeMutationResult(\n     if (transformResultsCount > 0) {\n       transformResults = new ArrayList<>(transformResultsCount);\n       for (int i = 0; i < transformResultsCount; i++) {\n-        transformResults.add(decodeValue(proto.getTransformResults(i)));\n+        transformResults.add(FieldValue.valueOf(proto.getTransformResults(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 330}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "120ca33e5a7299151357ae0e70c8b23acfe6b9b9", "author": {"user": {"login": "schmidt-sebastian", "name": "Sebastian Schmidt"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/120ca33e5a7299151357ae0e70c8b23acfe6b9b9", "committedDate": "2020-02-05T19:01:41Z", "message": "Feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzOTMxOTU3", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#pullrequestreview-353931957", "createdAt": "2020-02-05T18:12:29Z", "commit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "state": "COMMENTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoxMjoyOVrOFmB8mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo0ODozNVrOFmDD-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMjEwNA==", "bodyText": "This pattern is used in two places in the code and in a bunch of test cases in UserWriterTest. I added a helper to UserDataWriterTest, but kept the usages in the code the same.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375422104", "createdAt": "2020-02-05T18:12:29Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentSnapshot.java", "diffHunk": "@@ -533,7 +533,7 @@ private Object getInternal(\n       if (val != null) {\n         UserDataWriter userDataWriter =\n             new UserDataWriter(firestore, timestampsInSnapshots, serverTimestampBehavior);\n-        return userDataWriter.convertValue(val);\n+        return userDataWriter.convertValue(val.getProto());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk3OTMzNQ=="}, "originalCommit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMzcwOQ==", "bodyText": "I added a TODO for now. I would like to remove the individual field value wrappers first.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375423709", "createdAt": "2020-02-05T18:15:33Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/UserDataReader.java", "diffHunk": "@@ -398,35 +389,37 @@ private void parseSentinelFieldValue(\n    * @return The parsed value, or {@code null} if the value was a FieldValue sentinel that should\n    *     not be included in the resulting parsed data.\n    */\n-  private FieldValue parseScalarValue(Object input, ParseContext context) {\n+  private Value parseScalarValue(Object input, ParseContext context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MTQ0OQ=="}, "originalCommit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNTIyMQ==", "bodyText": "Done. More cleanup and the removal of ArrayValue will come in a follow-up.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375425221", "createdAt": "2020-02-05T18:18:22Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/core/ArrayContainsAnyFilter.java", "diffHunk": "@@ -32,8 +32,8 @@ public boolean matches(Document doc) {\n     if (!(other instanceof ArrayValue)) {\n       return false;\n     }\n-    for (FieldValue val : ((ArrayValue) other).getInternalValue()) {\n-      if (arrayValue.getInternalValue().contains(val)) {\n+    for (FieldValue val : ((ArrayValue) other).getValues()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MjYwMg=="}, "originalCommit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyODE2NQ==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375428165", "createdAt": "2020-02-05T18:24:07Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/local/IndexedQueryEngine.java", "diffHunk": "@@ -165,7 +166,8 @@ public void setLocalDocumentsView(LocalDocumentsView localDocuments) {\n   private static double estimateFilterSelectivity(Filter filter) {\n     hardAssert(filter instanceof FieldFilter, \"Filter type expected to be FieldFilter\");\n     FieldFilter fieldFilter = (FieldFilter) filter;\n-    if (fieldFilter.getValue().equals(null) || fieldFilter.getValue().equals(DoubleValue.NaN)) {\n+    FieldValue filterValue = fieldFilter.getValue();\n+    if (NullValue.nullValue().equals(filterValue) || DoubleValue.NaN.equals(filterValue)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4ODU5NQ=="}, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyODY5Mw==", "bodyText": "Yes, this is not needed anymore. We also don't use chaining anywhere - I wonder if we should remove it from the Builder API.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375428693", "createdAt": "2020-02-05T18:25:14Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/TransformMutation.java", "diffHunk": "@@ -135,10 +135,9 @@ public ObjectValue extractBaseValue(@Nullable MaybeDocument maybeDoc) {\n       FieldValue coercedValue = transform.getOperation().computeBaseValue(existingValue);\n       if (coercedValue != null) {\n         if (baseObject == null) {\n-          baseObject = ObjectValue.newBuilder().set(transform.getFieldPath(), coercedValue);\n-        } else {\n-          baseObject = baseObject.set(transform.getFieldPath(), coercedValue);\n+          baseObject = ObjectValue.newBuilder();\n         }\n+        baseObject = baseObject.set(transform.getFieldPath(), coercedValue.getProto());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4OTQ0Mg=="}, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyOTcxNg==", "bodyText": "I removed contains() in this PR, but kept this method for now since the ReferenceValue equality is a bit trickier. I added a TODO to remove this in a follow up PR.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375429716", "createdAt": "2020-02-05T18:27:14Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/value/ArrayValue.java", "diffHunk": "@@ -14,67 +14,46 @@\n \n package com.google.firebase.firestore.model.value;\n \n-import com.google.firebase.firestore.util.Util;\n+import com.google.firestore.v1.Value;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n \n /** A wrapper for Array values in Firestore */\n public class ArrayValue extends FieldValue {\n-\n-  private final List<FieldValue> internalValue;\n-\n-  private ArrayValue(List<FieldValue> value) {\n-    internalValue = Collections.unmodifiableList(value);\n+  ArrayValue(Value value) {\n+    super(value);\n   }\n \n-  @Override\n-  public boolean equals(Object o) {\n-    return (o instanceof ArrayValue) && internalValue.equals(((ArrayValue) o).internalValue);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return internalValue.hashCode();\n-  }\n-\n-  @Override\n-  public int compareTo(FieldValue o) {\n-    if (o instanceof ArrayValue) {\n-      ArrayValue other = (ArrayValue) o;\n-      int minLength = Math.min(internalValue.size(), other.internalValue.size());\n-      for (int i = 0; i < minLength; i++) {\n-        int cmp = internalValue.get(i).compareTo(((ArrayValue) o).internalValue.get(i));\n-        if (cmp != 0) {\n-          return cmp;\n-        }\n-      }\n-      return Util.compareIntegers(internalValue.size(), other.internalValue.size());\n-    } else {\n-      return defaultCompareTo(o);\n+  public static ArrayValue fromList(List<FieldValue> list) {\n+    com.google.firestore.v1.ArrayValue.Builder builder =\n+        com.google.firestore.v1.ArrayValue.newBuilder();\n+    for (FieldValue value : list) {\n+      builder.addValues(value.getProto());\n     }\n+    return new ArrayValue(Value.newBuilder().setArrayValue(builder).build());\n   }\n \n-  @Override\n-  public int typeOrder() {\n-    return TYPE_ORDER_ARRAY;\n-  }\n-\n-  @Override\n-  public List<Object> value() {\n-    // Recursively convert the array into the value that users will see in document snapshots.\n-    List<Object> res = new ArrayList<>(internalValue.size());\n-    for (FieldValue v : internalValue) {\n-      res.add(v.value());\n+  /** Converts all elements to a list of FieldValues. */\n+  public List<FieldValue> getValues() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4NDYzOQ=="}, "originalCommit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyOTkwNg==", "bodyText": "I updated the callers of this method to do exactly that.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375429906", "createdAt": "2020-02-05T18:27:37Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/value/ArrayValue.java", "diffHunk": "@@ -14,67 +14,46 @@\n \n package com.google.firebase.firestore.model.value;\n \n-import com.google.firebase.firestore.util.Util;\n+import com.google.firestore.v1.Value;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n \n /** A wrapper for Array values in Firestore */\n public class ArrayValue extends FieldValue {\n-\n-  private final List<FieldValue> internalValue;\n-\n-  private ArrayValue(List<FieldValue> value) {\n-    internalValue = Collections.unmodifiableList(value);\n+  ArrayValue(Value value) {\n+    super(value);\n   }\n \n-  @Override\n-  public boolean equals(Object o) {\n-    return (o instanceof ArrayValue) && internalValue.equals(((ArrayValue) o).internalValue);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return internalValue.hashCode();\n-  }\n-\n-  @Override\n-  public int compareTo(FieldValue o) {\n-    if (o instanceof ArrayValue) {\n-      ArrayValue other = (ArrayValue) o;\n-      int minLength = Math.min(internalValue.size(), other.internalValue.size());\n-      for (int i = 0; i < minLength; i++) {\n-        int cmp = internalValue.get(i).compareTo(((ArrayValue) o).internalValue.get(i));\n-        if (cmp != 0) {\n-          return cmp;\n-        }\n-      }\n-      return Util.compareIntegers(internalValue.size(), other.internalValue.size());\n-    } else {\n-      return defaultCompareTo(o);\n+  public static ArrayValue fromList(List<FieldValue> list) {\n+    com.google.firestore.v1.ArrayValue.Builder builder =\n+        com.google.firestore.v1.ArrayValue.newBuilder();\n+    for (FieldValue value : list) {\n+      builder.addValues(value.getProto());\n     }\n+    return new ArrayValue(Value.newBuilder().setArrayValue(builder).build());\n   }\n \n-  @Override\n-  public int typeOrder() {\n-    return TYPE_ORDER_ARRAY;\n-  }\n-\n-  @Override\n-  public List<Object> value() {\n-    // Recursively convert the array into the value that users will see in document snapshots.\n-    List<Object> res = new ArrayList<>(internalValue.size());\n-    for (FieldValue v : internalValue) {\n-      res.add(v.value());\n+  /** Converts all elements to a list of FieldValues. */\n+  public List<FieldValue> getValues() {\n+    List<FieldValue> result = new ArrayList<>();\n+    for (Value element : internalValue.getArrayValue().getValuesList()) {\n+      result.add(FieldValue.valueOf(element));\n     }\n-    return res;\n-  }\n-\n-  public List<FieldValue> getInternalValue() {\n-    return internalValue;\n-  }\n-\n-  public static ArrayValue fromList(List<FieldValue> list) {\n-    return new ArrayValue(list);\n+    return result;\n+  }\n+\n+  /**\n+   * Returns true if this ArrayValue contains the specified element.\n+   *\n+   * <p>This method creates fewer temporary objects than invoking `getValues().contains()` (if the\n+   * value is contained in the backing ArrayValue).\n+   */\n+  public boolean contains(FieldValue value) {\n+    for (Value element : internalValue.getArrayValue().getValuesList()) {\n+      if (value.equals(FieldValue.valueOf(element))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4NDI1NQ=="}, "originalCommit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMDE2NQ==", "bodyText": "This got updated as I merge/moved files. Reverted this change.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375430165", "createdAt": "2020-02-05T18:28:08Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/value/FieldValue.java", "diffHunk": "@@ -1,4 +1,4 @@\n-// Copyright 2018 Google LLC\n+// Copyright 2019 Google LLC", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4NTQ0NA=="}, "originalCommit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMDQ0NQ==", "bodyText": "Done", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375430445", "createdAt": "2020-02-05T18:28:42Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/value/FieldValue.java", "diffHunk": "@@ -43,59 +41,99 @@\n  *   <li>Object\n  * </ul>\n  */\n-public abstract class FieldValue implements Comparable<FieldValue> {\n-\n-  // TODO(mrschmidt): Reduce visibility of these types once `protovalue`\n-  // is merged into `value` package\n+public class FieldValue implements Comparable<FieldValue> {\n   /** The order of types in Firestore; this order is defined by the backend. */\n-  public static final int TYPE_ORDER_NULL = 0;\n+  static final int TYPE_ORDER_NULL = 0;\n+\n+  static final int TYPE_ORDER_BOOLEAN = 1;\n+  static final int TYPE_ORDER_NUMBER = 2;\n+  static final int TYPE_ORDER_TIMESTAMP = 3;\n+  static final int TYPE_ORDER_STRING = 4;\n+  static final int TYPE_ORDER_BLOB = 5;\n+  static final int TYPE_ORDER_REFERENCE = 6;\n+  static final int TYPE_ORDER_GEOPOINT = 7;\n+  static final int TYPE_ORDER_ARRAY = 8;\n+  static final int TYPE_ORDER_OBJECT = 9;\n \n-  public static final int TYPE_ORDER_BOOLEAN = 1;\n-  public static final int TYPE_ORDER_NUMBER = 2;\n-  public static final int TYPE_ORDER_TIMESTAMP = 3;\n-  public static final int TYPE_ORDER_STRING = 4;\n-  public static final int TYPE_ORDER_BLOB = 5;\n-  public static final int TYPE_ORDER_REFERENCE = 6;\n-  public static final int TYPE_ORDER_GEOPOINT = 7;\n-  public static final int TYPE_ORDER_ARRAY = 8;\n-  public static final int TYPE_ORDER_OBJECT = 9;\n+  final Value internalValue;\n+\n+  FieldValue(Value value) {\n+    this.internalValue = value;\n+  }\n \n   /** Creates a new FieldValue based on the Protobuf Value. */\n-  public static FieldValue of(Value value) {\n-    if (value.getValueTypeCase() == Value.ValueTypeCase.MAP_VALUE) {\n-      return new ObjectValue(value);\n-    } else {\n-      return new PrimitiveValue(value);\n+  public static @Nullable FieldValue valueOf(@Nullable Value value) {\n+    if (value != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5MjA1Ng=="}, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMDU4Ng==", "bodyText": "Done", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375430586", "createdAt": "2020-02-05T18:28:56Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/value/FieldValue.java", "diffHunk": "@@ -43,59 +41,99 @@\n  *   <li>Object\n  * </ul>\n  */\n-public abstract class FieldValue implements Comparable<FieldValue> {\n-\n-  // TODO(mrschmidt): Reduce visibility of these types once `protovalue`\n-  // is merged into `value` package\n+public class FieldValue implements Comparable<FieldValue> {\n   /** The order of types in Firestore; this order is defined by the backend. */\n-  public static final int TYPE_ORDER_NULL = 0;\n+  static final int TYPE_ORDER_NULL = 0;\n+\n+  static final int TYPE_ORDER_BOOLEAN = 1;\n+  static final int TYPE_ORDER_NUMBER = 2;\n+  static final int TYPE_ORDER_TIMESTAMP = 3;\n+  static final int TYPE_ORDER_STRING = 4;\n+  static final int TYPE_ORDER_BLOB = 5;\n+  static final int TYPE_ORDER_REFERENCE = 6;\n+  static final int TYPE_ORDER_GEOPOINT = 7;\n+  static final int TYPE_ORDER_ARRAY = 8;\n+  static final int TYPE_ORDER_OBJECT = 9;\n \n-  public static final int TYPE_ORDER_BOOLEAN = 1;\n-  public static final int TYPE_ORDER_NUMBER = 2;\n-  public static final int TYPE_ORDER_TIMESTAMP = 3;\n-  public static final int TYPE_ORDER_STRING = 4;\n-  public static final int TYPE_ORDER_BLOB = 5;\n-  public static final int TYPE_ORDER_REFERENCE = 6;\n-  public static final int TYPE_ORDER_GEOPOINT = 7;\n-  public static final int TYPE_ORDER_ARRAY = 8;\n-  public static final int TYPE_ORDER_OBJECT = 9;\n+  final Value internalValue;\n+\n+  FieldValue(Value value) {\n+    this.internalValue = value;\n+  }\n \n   /** Creates a new FieldValue based on the Protobuf Value. */\n-  public static FieldValue of(Value value) {\n-    if (value.getValueTypeCase() == Value.ValueTypeCase.MAP_VALUE) {\n-      return new ObjectValue(value);\n-    } else {\n-      return new PrimitiveValue(value);\n+  public static @Nullable FieldValue valueOf(@Nullable Value value) {\n+    if (value != null) {\n+      switch (value.getValueTypeCase()) {\n+        case NULL_VALUE:\n+          return NullValue.nullValue();\n+        case BOOLEAN_VALUE:\n+          return new BooleanValue(value);\n+        case INTEGER_VALUE:\n+          return new IntegerValue(value);\n+        case DOUBLE_VALUE:\n+          return new DoubleValue(value);\n+        case TIMESTAMP_VALUE:\n+          return new TimestampValue(value);\n+        case STRING_VALUE:\n+          return new StringValue(value);\n+        case BYTES_VALUE:\n+          return new BlobValue(value);\n+        case REFERENCE_VALUE:\n+          return new ReferenceValue(value);\n+        case GEO_POINT_VALUE:\n+          return new GeoPointValue(value);\n+        case ARRAY_VALUE:\n+          return new ArrayValue(value);\n+        case MAP_VALUE:\n+          if (ServerTimestampValue.isServerTimestamp(value)) {\n+            return new ServerTimestampValue(value);\n+          }\n+          return new ObjectValue(value);\n+        default:\n+          throw fail(\"Invlaid value type: %s\", value.getValueTypeCase());\n+      }\n     }\n+    return null;\n   }\n \n-  public abstract int typeOrder();\n+  /** Returns the type order as defined by the backend. */\n+  public int typeOrder() {\n+    return ProtoValues.typeOrder(internalValue);\n+  }\n \n-  /**\n-   * Converts a FieldValue into the value that users will see in document snapshots using the\n-   * default deserialization options.\n-   */\n-  @Nullable\n-  public abstract Object value();\n+  /** Returns Firestore Value Protobuf that backs this FieldValuee */\n+  public Value getProto() {\n+    return internalValue;\n+  }\n \n-  @Override\n-  public abstract boolean equals(Object o);\n+  /** Returns the canonical ID representation for the contents of this FieldValue. */\n+  public String getCanonicalId() {\n+    return ProtoValues.canonicalId(internalValue);\n+  }\n \n   @Override\n-  public abstract int hashCode();\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    } else if (o instanceof FieldValue) {\n+      return ProtoValues.equals(this.internalValue, ((FieldValue) o).internalValue);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4NjEzNQ=="}, "originalCommit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMDg2MA==", "bodyText": "Done", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375430860", "createdAt": "2020-02-05T18:29:26Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/value/ObjectValue.java", "diffHunk": "@@ -17,32 +17,35 @@\n import static com.google.firebase.firestore.util.Assert.hardAssert;\n \n import androidx.annotation.Nullable;\n-import com.google.firebase.database.collection.ImmutableSortedMap;\n import com.google.firebase.firestore.model.FieldPath;\n import com.google.firebase.firestore.model.mutation.FieldMask;\n-import com.google.firebase.firestore.util.Util;\n+import com.google.firestore.v1.MapValue;\n+import com.google.firestore.v1.Value;\n import java.util.HashMap;\n import java.util.HashSet;\n-import java.util.Iterator;\n import java.util.Map;\n-import java.util.Map.Entry;\n import java.util.Set;\n \n /** A structured object value stored in Firestore. */\n public class ObjectValue extends FieldValue {\n   private static final ObjectValue EMPTY_INSTANCE =\n-      new ObjectValue(ImmutableSortedMap.Builder.emptyMap(Util.<String>comparator()));\n+      new ObjectValue(\n+          com.google.firestore.v1.Value.newBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4NjgyOA=="}, "originalCommit": {"oid": "804a1b7a9d0304f13a394b2f46054f2409c52b37"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMTQzNw==", "bodyText": "Done. Also made the constructor package-private.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375431437", "createdAt": "2020-02-05T18:30:32Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/value/ServerTimestampValue.java", "diffHunk": "@@ -17,37 +17,63 @@\n import androidx.annotation.Nullable;\n import com.google.firebase.Timestamp;\n import com.google.firebase.firestore.DocumentSnapshot;\n+import com.google.firestore.v1.MapValue;\n+import com.google.firestore.v1.Value;\n \n /**\n  * Represents a locally-applied Server Timestamp.\n  *\n- * <p>Notes: - ServerTimestampValue instances are created as the result of applying a\n- * TransformMutation (see TransformMutation.applyTo()). They can only exist in the local view of a\n- * document. Therefore they do not need to be parsed or serialized. - When evaluated locally (e.g.\n- * via DocumentSnapshot data), they evaluate to null. - They sort after all TimestampValues. With\n- * respect to other ServerTimestampValues, they sort by their localWriteTime.\n+ * <p>Server Timestamps are backed by MapValues that contain an internal field `__type__` with a\n+ * value of `server_timestamp`. The previous value and local write time are stored in its\n+ * `__previous_value__` and `__local_write_time__` fields respectively.\n+ *\n+ * <p>Notes:\n+ * <li>ServerTimestampValue instances are created as the result of applying a TransformMutation (see\n+ *     TransformMutation.applyTo()). They can only exist in the local view of a document. Therefore\n+ *     they do not need to be parsed or serialized.\n+ * <li>When evaluated locally (e.g. via DocumentSnapshot data), they evaluate to null.\n+ * <li>They sort after all TimestampValues. With respect to other ServerTimestampValues, they sort\n+ *     by their localWriteTime.\n  */\n public final class ServerTimestampValue extends FieldValue {\n-  private final Timestamp localWriteTime;\n-  @Nullable private final FieldValue previousValue;\n+  private static final String SERVER_TIMESTAMP_SENTINEL = \"server_timestamp\";\n+  private static final String TYPE_KEY = \"__type__\";\n+  private static final String PREVIOUS_VALUE_KEY = \"__previous_value__\";\n+  private static final String LOCAL_WRITE_TIME_KEY = \"__local_write_time__\";\n \n-  // TODO(mrschmidt): Represent ServerTimestamps as a PrimitiveType with a Map containing a private\n-  //  `__type__` field (or similar).\n+  public static boolean isServerTimestamp(Value value) {\n+    Value type = value.getMapValue().getFieldsOrDefault(TYPE_KEY, null);\n+    return type != null && SERVER_TIMESTAMP_SENTINEL.equals(type.getStringValue());\n+  }\n \n-  public ServerTimestampValue(Timestamp localWriteTime, @Nullable FieldValue previousValue) {\n-    this.localWriteTime = localWriteTime;\n-    this.previousValue = previousValue;\n+  public ServerTimestampValue(Value value) {\n+    super(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk5Mjc3Mw=="}, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMTg0MQ==", "bodyText": "Done", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375431841", "createdAt": "2020-02-05T18:31:16Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteSerializer.java", "diffHunk": "@@ -567,21 +403,19 @@ private FieldMask decodeDocumentMask(DocumentMask mask) {\n           (NumericIncrementTransformOperation) transform;\n       return DocumentTransform.FieldTransform.newBuilder()\n           .setFieldPath(fieldTransform.getFieldPath().canonicalString())\n-          .setIncrement(encodeValue(incrementOperation.getOperand()))\n+          .setIncrement(incrementOperation.getOperand().getProto())\n           .build();\n     } else {\n       throw fail(\"Unknown transform: %s\", transform);\n     }\n   }\n \n-  private com.google.firestore.v1.ArrayValue encodeArrayTransformElements(\n-      List<FieldValue> elements) {\n-    com.google.firestore.v1.ArrayValue.Builder arrayBuilder =\n-        com.google.firestore.v1.ArrayValue.newBuilder();\n-    for (FieldValue subValue : elements) {\n-      arrayBuilder.addValues(encodeValue(subValue));\n+  private ArrayValue encodeArrayTransformElements(List<FieldValue> elementsProto) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5NDY0NQ=="}, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMjE3Mg==", "bodyText": "Added TODO", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375432172", "createdAt": "2020-02-05T18:31:59Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteSerializer.java", "diffHunk": "@@ -599,35 +433,35 @@ private FieldTransform decodeFieldTransform(DocumentTransform.FieldTransform fie\n         return new FieldTransform(\n             FieldPath.fromServerFormat(fieldTransform.getFieldPath()),\n             new ArrayTransformOperation.Union(\n-                decodeArrayTransformElements(fieldTransform.getAppendMissingElements())));\n+                decodeArrayTransformElements(\n+                    fieldTransform.getAppendMissingElements().getValuesList())));\n       case REMOVE_ALL_FROM_ARRAY:\n         return new FieldTransform(\n             FieldPath.fromServerFormat(fieldTransform.getFieldPath()),\n             new ArrayTransformOperation.Remove(\n-                decodeArrayTransformElements(fieldTransform.getRemoveAllFromArray())));\n+                decodeArrayTransformElements(\n+                    fieldTransform.getRemoveAllFromArray().getValuesList())));\n       case INCREMENT:\n         {\n-          FieldValue operand = decodeValue(fieldTransform.getIncrement());\n+          FieldValue operand = FieldValue.valueOf(fieldTransform.getIncrement());\n           hardAssert(\n               operand instanceof NumberValue,\n               \"Expected NUMERIC_ADD transform to be of number type, but was %s\",\n               operand.getClass().getCanonicalName());\n           return new FieldTransform(\n               FieldPath.fromServerFormat(fieldTransform.getFieldPath()),\n               new NumericIncrementTransformOperation(\n-                  (NumberValue) decodeValue(fieldTransform.getIncrement())));\n+                  (NumberValue) FieldValue.valueOf(fieldTransform.getIncrement())));\n         }\n       default:\n         throw fail(\"Unknown FieldTransform proto: %s\", fieldTransform);\n     }\n   }\n \n-  private List<FieldValue> decodeArrayTransformElements(\n-      com.google.firestore.v1.ArrayValue elementsProto) {\n-    int count = elementsProto.getValuesCount();\n-    List<FieldValue> result = new ArrayList<>(count);\n-    for (int i = 0; i < count; i++) {\n-      result.add(decodeValue(elementsProto.getValues(i)));\n+  private List<FieldValue> decodeArrayTransformElements(List<Value> elementsProto) {\n+    List<FieldValue> result = new ArrayList<>(elementsProto.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5NTU2Mg=="}, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 319}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMjYxOQ==", "bodyText": "Added TODO", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375432619", "createdAt": "2020-02-05T18:32:55Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/remote/RemoteSerializer.java", "diffHunk": "@@ -648,7 +482,7 @@ public MutationResult decodeMutationResult(\n     if (transformResultsCount > 0) {\n       transformResults = new ArrayList<>(transformResultsCount);\n       for (int i = 0; i < transformResultsCount; i++) {\n-        transformResults.add(decodeValue(proto.getTransformResults(i)));\n+        transformResults.add(FieldValue.valueOf(proto.getTransformResults(i)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5NjEwMQ=="}, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 330}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzODg5NQ==", "bodyText": "Replaced this single occurrence with a call to the helper setField.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375438895", "createdAt": "2020-02-05T18:45:45Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/model/FieldValueTest.java", "diffHunk": "@@ -118,8 +127,13 @@ public void testAddsNewFields() {\n   @Test\n   public void testAddsMultipleNewFields() {\n     ObjectValue object = ObjectValue.emptyObject();\n-    object = object.toBuilder().set(field(\"a\"), valueOf(\"a\")).build();\n-    object = object.toBuilder().set(field(\"b\"), valueOf(\"b\")).set(field(\"c\"), valueOf(\"c\")).build();\n+    object = object.toBuilder().set(field(\"a\"), wrap(\"a\").getProto()).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NTc1Mg=="}, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzOTg4Ng==", "bodyText": "Done", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375439886", "createdAt": "2020-02-05T18:47:37Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/model/FieldValueTest.java", "diffHunk": "@@ -137,7 +151,7 @@ public void testImplicitlyCreatesObjects() {\n   @Test\n   public void testCanOverwritePrimitivesWithObjects() {\n     ObjectValue old = wrapObject(\"a\", map(\"b\", \"old\"));\n-    ObjectValue mod = setField(old, \"a\", map(\"b\", \"mod\"));\n+    ObjectValue mod = setField(old, \"a\", wrapObject(\"b\", \"mod\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NjQzMQ=="}, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ0MDM3OQ==", "bodyText": "This test already imports com.google.firebase.firestore.FieldValue.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#discussion_r375440379", "createdAt": "2020-02-05T18:48:35Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/test/java/com/google/firebase/firestore/model/MutationTest.java", "diffHunk": "@@ -157,13 +156,9 @@ public void testAppliesLocalServerTimestampTransformsToDocuments() {\n     // Server timestamps aren't parsed, so we manually insert it.\n     ObjectValue expectedData =\n         wrapObject(map(\"foo\", map(\"bar\", \"<server-timestamp>\"), \"baz\", \"baz-value\"));\n-    expectedData =\n-        expectedData\n-            .toBuilder()\n-            .set(\n-                field(\"foo.bar\"),\n-                new ServerTimestampValue(timestamp, StringValue.valueOf(\"bar-value\")))\n-            .build();\n+    com.google.firebase.firestore.model.value.FieldValue fieldValue =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3ODk1NA=="}, "originalCommit": {"oid": "3d5d7c2570b34f0797602f6dd46e407232b3bf8b"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82c0095659aa83194049693f1336af2864ce5287", "author": {"user": {"login": "schmidt-sebastian", "name": "Sebastian Schmidt"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/82c0095659aa83194049693f1336af2864ce5287", "committedDate": "2020-02-05T19:03:43Z", "message": "Update test-only variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98953a323513bbc0ef685ab9ca1ee9b9d98ee091", "author": {"user": {"login": "schmidt-sebastian", "name": "Sebastian Schmidt"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/98953a323513bbc0ef685ab9ca1ee9b9d98ee091", "committedDate": "2020-02-05T19:34:33Z", "message": "Add ProtoValues.contains()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTU2NTA5", "url": "https://github.com/firebase/firebase-android-sdk/pull/1184#pullrequestreview-354156509", "createdAt": "2020-02-06T01:43:09Z", "commit": {"oid": "98953a323513bbc0ef685ab9ca1ee9b9d98ee091"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2289, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}