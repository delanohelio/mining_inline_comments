{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDQxNjYw", "number": 1600, "title": "inital implementation of typeToken for decoder", "bodyText": "Initial Implementation of TypeToken for Decoder:\nTypeToken will be used to represent types supported by the library in a type-safe manner.", "createdAt": "2020-05-27T18:34:39Z", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600", "merged": true, "mergeCommit": {"oid": "b7e91daf89deedc7b45694b91e0836e3717e3d93"}, "closed": true, "closedAt": "2020-05-31T13:40:59Z", "author": {"login": "James201311"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcld7g-AFqTQxOTUwNzI3NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmr1AQgBqjMzOTA2MTgyMDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTA3Mjc0", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#pullrequestreview-419507274", "createdAt": "2020-05-27T18:40:10Z", "commit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo0MDoxMVrOGbYPmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo1MDozNVrOGbYl6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2MTk0NA==", "bodyText": "nit: this file needs to be called fireabse-decoders-json.gradle not build.gradle(this is a special setup we have in this repo).", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r431361944", "createdAt": "2020-05-27T18:40:11Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/build.gradle", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright 2020 Google LLC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2MjI2OA==", "bodyText": "consider deleting this file since it's not used and not needed", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r431362268", "createdAt": "2020-05-27T18:40:44Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/proguard-rules.pro", "diffHunk": "@@ -0,0 +1,21 @@\n+# Add project specific ProGuard rules here.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2MjQ3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                package=\"com.google.firebase_decoders_json\" />\n          \n          \n            \n                package=\"com.google.firebase.decoders.json\" />", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r431362478", "createdAt": "2020-05-27T18:41:07Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/AndroidManifest.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<!-- Copyright 2020 Google LLC -->\n+<!-- -->\n+<!-- Licensed under the Apache License, Version 2.0 (the \"License\"); -->\n+<!-- you may not use this file except in compliance with the License. -->\n+<!-- You may obtain a copy of the License at -->\n+<!-- -->\n+<!--      http://www.apache.org/licenses/LICENSE-2.0 -->\n+<!-- -->\n+<!-- Unless required by applicable law or agreed to in writing, software -->\n+<!-- distributed under the License is distributed on an \"AS IS\" BASIS, -->\n+<!-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. -->\n+<!-- See the License for the specific language governing permissions and -->\n+<!-- limitations under the License. -->\n+\n+<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    package=\"com.google.firebase_decoders_json\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2MjcwMg==", "bodyText": "make final?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r431362702", "createdAt": "2020-05-27T18:41:30Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/ArrayToken.java", "diffHunk": "@@ -0,0 +1,27 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+class ArrayToken<T> extends TypeToken<T> {\n+  private TypeToken<?> componentType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2Mjg2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Class<T> rawType;\n          \n          \n            \n              private TypeTokenContainer typeArguments;\n          \n          \n            \n              private final Class<T> rawType;\n          \n          \n            \n              private final TypeTokenContainer typeArguments;", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r431362867", "createdAt": "2020-05-27T18:41:50Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/ClassToken.java", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+class ClassToken<T> extends TypeToken<T> {\n+  private Class<T> rawType;\n+  private TypeTokenContainer typeArguments;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2MzY1OA==", "bodyText": "consider making this class empty and moving this logic to TypeToken#of(Safe)", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r431363658", "createdAt": "2020-05-27T18:43:12Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/Safe.java", "diffHunk": "@@ -0,0 +1,35 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+\n+public abstract class Safe<T> {\n+\n+  private final Type type;\n+\n+  Safe() {\n+    Type superclass = getClass().getGenericSuperclass();\n+    if (superclass instanceof Class) {\n+      throw new RuntimeException(\"Missing type parameters\");\n+    }\n+    this.type = ((ParameterizedType) superclass).getActualTypeArguments()[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2NjU0Mw==", "bodyText": "We would want to forbid any subclasses of this class other than ClassToken and ArrayToken effectively making this class \"sealed\". The only way to achieve it in java is to statically nest ClassToken and ArrayToken inside TypeToken and make its constructor private.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r431366543", "createdAt": "2020-05-27T18:48:34Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.lang.reflect.GenericArrayType;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.lang.reflect.WildcardType;\n+\n+public abstract class TypeToken<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM2NzY1Ng==", "bodyText": "we have to handle the case when getUpperBounds() is empty and throw an exception. This could happen if I specify TypeToken.of(new Safe<List<? super Foo>>() {})", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r431367656", "createdAt": "2020-05-27T18:50:35Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.lang.reflect.GenericArrayType;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.lang.reflect.WildcardType;\n+\n+public abstract class TypeToken<T> {\n+\n+\n+  @NonNull\n+  public static <T> TypeToken<T> of(@NonNull Safe<T> token) {\n+    Type type = token.getType();\n+    return of(type);\n+  }\n+\n+  @NonNull\n+  private static <T> TypeToken<T> of(@NonNull Type type) {\n+    if(type instanceof WildcardType) {\n+      return of(((WildcardType) type).getUpperBounds()[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTM4NTcx", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#pullrequestreview-419538571", "createdAt": "2020-05-27T19:20:49Z", "commit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOToyMDo0OVrOGbZ2gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOTo0MTowN1rOGbaf9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4ODI5MQ==", "bodyText": "to make types align a bit better, consider changing to:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            class ArrayToken<T> extends TypeToken<T> {\n          \n          \n            \n              private TypeToken<?> componentType;\n          \n          \n            \n            class ArrayToken<T> extends TypeToken<T[]> {\n          \n          \n            \n              private TypeToken<T> componentType;\n          \n      \n    \n    \n  \n\nThis might make it harder to implement TypeToken#of() but having the types align externally is a useful property to have.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r431388291", "createdAt": "2020-05-27T19:20:49Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/ArrayToken.java", "diffHunk": "@@ -0,0 +1,27 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+class ArrayToken<T> extends TypeToken<T> {\n+  private TypeToken<?> componentType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4OTM0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              ArrayToken(TypeToken<?> componentType) {\n          \n          \n            \n              ArrayToken(TypeToken<T> componentType) {", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r431389340", "createdAt": "2020-05-27T19:22:56Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/ArrayToken.java", "diffHunk": "@@ -0,0 +1,27 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+class ArrayToken<T> extends TypeToken<T> {\n+  private TypeToken<?> componentType;\n+\n+  ArrayToken(TypeToken<?> componentType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM4OTQxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public TypeToken<?> getComponentType() {\n          \n          \n            \n              public TypeToken<T> getComponentType() {", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r431389410", "createdAt": "2020-05-27T19:23:03Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/ArrayToken.java", "diffHunk": "@@ -0,0 +1,27 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+class ArrayToken<T> extends TypeToken<T> {\n+  private TypeToken<?> componentType;\n+\n+  ArrayToken(TypeToken<?> componentType) {\n+    this.componentType = componentType;\n+  }\n+\n+  public TypeToken<?> getComponentType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MDQwMw==", "bodyText": "Additionally all of these classes need hashCode() and equals() implementations(as well as toString() to be developer friendly), these can be done in a follow up PR but please add a TODO comment about it.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r431390403", "createdAt": "2020-05-27T19:25:02Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.lang.reflect.GenericArrayType;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.lang.reflect.WildcardType;\n+\n+public abstract class TypeToken<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5MzcwNg==", "bodyText": "It's not common to use raw asserts in java, see: go/java-practices/assertions\nAdditionally components type can never be null since you check for isArray() above, pls consider remove this line.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r431393706", "createdAt": "2020-05-27T19:31:07Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "diffHunk": "@@ -0,0 +1,73 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.lang.reflect.GenericArrayType;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.lang.reflect.WildcardType;\n+\n+public abstract class TypeToken<T> {\n+\n+\n+  @NonNull\n+  public static <T> TypeToken<T> of(@NonNull Safe<T> token) {\n+    Type type = token.getType();\n+    return of(type);\n+  }\n+\n+  @NonNull\n+  private static <T> TypeToken<T> of(@NonNull Type type) {\n+    if(type instanceof WildcardType) {\n+      return of(((WildcardType) type).getUpperBounds()[0]);\n+    }\n+\n+    if (type instanceof GenericArrayType) {\n+      Type componentType = ((GenericArrayType) type).getGenericComponentType();\n+      return new ArrayToken<T>(TypeToken.of(componentType));\n+    }\n+\n+    //Regular Class Type || Primitive Type || Non-Generic Array Type\n+    if (type instanceof Class<?>) {\n+      Class<T> typeToken = (Class<T>) type;\n+      return of(typeToken);\n+    }\n+\n+    ParameterizedType parameterizedType = (ParameterizedType) type;\n+    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+    Class<T> rawType = (Class<T>) (parameterizedType.getRawType());\n+\n+    TypeTokenContainer container = new TypeTokenContainer() {\n+      @NonNull\n+      @Override\n+      public <T> TypeToken<T> at(int index) {\n+        return TypeToken.of(actualTypeArguments[index]);\n+      }\n+    };\n+    return new ClassToken<T>(rawType, container);\n+  }\n+\n+  @NonNull\n+  public static <T> TypeToken<T> of(@NonNull Class<T> typeToken) {\n+    if (typeToken.isArray()) {\n+      Class<?> componentTypeToken = typeToken.getComponentType();\n+      assert componentTypeToken != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5Njk1Mg==", "bodyText": "Instead of unconditionally casting to ClassToken I suggest you make explicit checks for instanceof, this will make test failures more clear and explicit.\nI'd recommend a pattern like:\nTypeToken<Integer> token = TypeToken.of(int.class);\nassertThat(token).isInstanceOf(ClassToken.class);\n\nClassToken<Integer> intToken = (ClassToken<Integer>) token;\n// test the rest\n\nAdditionally it might not be required to test all primitives, a couple should be enough.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r431396952", "createdAt": "2020-05-27T19:37:14Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/TypeTokenTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(JUnit4.class)\n+public class TypeTokenTest {\n+  static class Foo {}\n+\n+  //Primitive type\n+  @Test\n+  public void primitiveType_typeIsCorrectlyCaptured(){\n+    ClassToken<?> intToken = (ClassToken<?>) TypeToken.of(int.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5NzU1MQ==", "bodyText": "we use https://truth.dev/ in this repo, please consider using it as well instead of plain junit asserts.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r431397551", "createdAt": "2020-05-27T19:38:28Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/TypeTokenTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(JUnit4.class)\n+public class TypeTokenTest {\n+  static class Foo {}\n+\n+  //Primitive type\n+  @Test\n+  public void primitiveType_typeIsCorrectlyCaptured(){\n+    ClassToken<?> intToken = (ClassToken<?>) TypeToken.of(int.class);\n+    ClassToken<?> doubleToken = (ClassToken<?>) TypeToken.of(double.class);\n+    ClassToken<?> floatToken = (ClassToken<?>) TypeToken.of(float.class);\n+    ClassToken<?> longToken = (ClassToken<?>) TypeToken.of(long.class);\n+    ClassToken<?> byteToken = (ClassToken<?>) TypeToken.of(byte.class);\n+    ClassToken<?> charToken = (ClassToken<?>) TypeToken.of(char.class);\n+    ClassToken<?> shortToken = (ClassToken<?>) TypeToken.of(short.class);\n+    ClassToken<?> booleanToken = (ClassToken<?>) TypeToken.of(boolean.class);\n+\n+    assertEquals(intToken.getRawType(), int.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5ODAwMA==", "bodyText": "Same here regarding raw casts.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r431398000", "createdAt": "2020-05-27T19:39:22Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/TypeTokenTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(JUnit4.class)\n+public class TypeTokenTest {\n+  static class Foo {}\n+\n+  //Primitive type\n+  @Test\n+  public void primitiveType_typeIsCorrectlyCaptured(){\n+    ClassToken<?> intToken = (ClassToken<?>) TypeToken.of(int.class);\n+    ClassToken<?> doubleToken = (ClassToken<?>) TypeToken.of(double.class);\n+    ClassToken<?> floatToken = (ClassToken<?>) TypeToken.of(float.class);\n+    ClassToken<?> longToken = (ClassToken<?>) TypeToken.of(long.class);\n+    ClassToken<?> byteToken = (ClassToken<?>) TypeToken.of(byte.class);\n+    ClassToken<?> charToken = (ClassToken<?>) TypeToken.of(char.class);\n+    ClassToken<?> shortToken = (ClassToken<?>) TypeToken.of(short.class);\n+    ClassToken<?> booleanToken = (ClassToken<?>) TypeToken.of(boolean.class);\n+\n+    assertEquals(intToken.getRawType(), int.class);\n+    assertEquals(doubleToken.getRawType(), double.class);\n+    assertEquals(floatToken.getRawType(), float.class);\n+    assertEquals(longToken.getRawType(), long.class);\n+    assertEquals(byteToken.getRawType(), byte.class);\n+    assertEquals(charToken.getRawType(), char.class);\n+    assertEquals(shortToken.getRawType(), short.class);\n+    assertEquals(booleanToken.getRawType(), boolean.class);\n+  }\n+\n+  //Array type\n+  @Test\n+  public void generalArrayTypeWithSafe_componentTypeIsCorrectlyCaptured() {\n+    ClassToken<?> fooComponentType = (ClassToken<?>) ((ArrayToken<?>)TypeToken.of(new Safe<Foo[]>() {})).getComponentType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM5ODkwMA==", "bodyText": "it also looks like you're testing 2 things here, even though they are similar consider separating into 2 separate unit tests(context: go/unit-test-practices) , here and throughout", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r431398900", "createdAt": "2020-05-27T19:41:07Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/TypeTokenTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(JUnit4.class)\n+public class TypeTokenTest {\n+  static class Foo {}\n+\n+  //Primitive type\n+  @Test\n+  public void primitiveType_typeIsCorrectlyCaptured(){\n+    ClassToken<?> intToken = (ClassToken<?>) TypeToken.of(int.class);\n+    ClassToken<?> doubleToken = (ClassToken<?>) TypeToken.of(double.class);\n+    ClassToken<?> floatToken = (ClassToken<?>) TypeToken.of(float.class);\n+    ClassToken<?> longToken = (ClassToken<?>) TypeToken.of(long.class);\n+    ClassToken<?> byteToken = (ClassToken<?>) TypeToken.of(byte.class);\n+    ClassToken<?> charToken = (ClassToken<?>) TypeToken.of(char.class);\n+    ClassToken<?> shortToken = (ClassToken<?>) TypeToken.of(short.class);\n+    ClassToken<?> booleanToken = (ClassToken<?>) TypeToken.of(boolean.class);\n+\n+    assertEquals(intToken.getRawType(), int.class);\n+    assertEquals(doubleToken.getRawType(), double.class);\n+    assertEquals(floatToken.getRawType(), float.class);\n+    assertEquals(longToken.getRawType(), long.class);\n+    assertEquals(byteToken.getRawType(), byte.class);\n+    assertEquals(charToken.getRawType(), char.class);\n+    assertEquals(shortToken.getRawType(), short.class);\n+    assertEquals(booleanToken.getRawType(), boolean.class);\n+  }\n+\n+  //Array type\n+  @Test\n+  public void generalArrayTypeWithSafe_componentTypeIsCorrectlyCaptured() {\n+    ClassToken<?> fooComponentType = (ClassToken<?>) ((ArrayToken<?>)TypeToken.of(new Safe<Foo[]>() {})).getComponentType();\n+    ClassToken<?> intComponentType = (ClassToken<?>) ((ArrayToken<?>)TypeToken.of(new Safe<int[]>() {})).getComponentType();\n+\n+    assertEquals(Foo.class, fooComponentType.getRawType());\n+    assertEquals(int.class, intComponentType.getRawType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24fe0161073938bcab3fe01aca2cf704db0cd7a3"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNDAzODEz", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#pullrequestreview-420403813", "createdAt": "2020-05-28T19:01:39Z", "commit": {"oid": "b53777538931a51ada76504292538ee2e4d854c3"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOTowMTozOVrOGcCkUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOTowODowNlrOGcCx6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA1NTM3Ng==", "bodyText": "How does this test work? afaict typeArguments is null in your implementation.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r432055376", "createdAt": "2020-05-28T19:01:39Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/TypeTokenTest.java", "diffHunk": "@@ -0,0 +1,151 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+import static org.junit.Assert.assertThrows;\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+@RunWith(JUnit4.class)\n+public class TypeTokenTest {\n+  static class Foo {}\n+\n+  //Primitive type\n+  @Test\n+  public void primitiveType_typeIsCorrectlyCaptured(){\n+    TypeToken<Integer> integerTypeToken = TypeToken.of(int.class);\n+    assertThat(integerTypeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<Integer> intToken = (TypeToken.ClassToken<Integer>) integerTypeToken;\n+    assertThat(intToken.getRawType()).isEqualTo(int.class);\n+\n+    TypeToken<Boolean> booleanTypeToken = TypeToken.of(boolean.class);\n+    assertThat(booleanTypeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<Boolean> booleanToken = (TypeToken.ClassToken<Boolean>) booleanTypeToken;\n+    assertThat(booleanToken.getRawType()).isEqualTo(boolean.class);\n+  }\n+\n+  //Array type\n+  @Test\n+  public void generalArrayTypeWithSafe_componentTypeIsCorrectlyCaptured() {\n+    TypeToken<Foo[]> typeToken = TypeToken.of(new Safe<Foo[]>() {});\n+    assertThat(typeToken).isInstanceOf(TypeToken.ArrayToken.class);\n+    TypeToken.ArrayToken<Foo[]> arrayToken = (TypeToken.ArrayToken<Foo[]>) typeToken;\n+    TypeToken<?> componentTypeToken = arrayToken.getComponentType();\n+    assertThat(componentTypeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<Foo> componentToken = (TypeToken.ClassToken<Foo>) componentTypeToken;\n+    assertThat(componentToken.getRawType()).isEqualTo(Foo.class);\n+  }\n+\n+  @Test\n+  public void generalArrayTypeWithoutSafe_componentTypeIsCorrectlyCaptured() {\n+    TypeToken<Foo[]> typeToken = TypeToken.of(Foo[].class);\n+    assertThat(typeToken).isInstanceOf(TypeToken.ArrayToken.class);\n+    TypeToken.ArrayToken<Foo[]> arrayToken = (TypeToken.ArrayToken<Foo[]>) typeToken;\n+    TypeToken<?> componentTypeToken = arrayToken.getComponentType();\n+    assertThat(componentTypeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<Foo> componentToken = (TypeToken.ClassToken<Foo>) componentTypeToken;\n+    assertThat(componentToken.getRawType()).isEqualTo(Foo.class);\n+  }\n+\n+  @Test\n+  public void genericArrayType_rawTypeIsCorrectlyCaptured() {\n+    TypeToken<List<String>[]> typeToken = TypeToken.of(new Safe<List<String>[]>(){});\n+    assertThat(typeToken).isInstanceOf(TypeToken.ArrayToken.class);\n+    TypeToken.ArrayToken<List<String>[]> arrayToken = (TypeToken.ArrayToken<List<String>[]>) typeToken;\n+    TypeToken<List<String>> componentType = (TypeToken<List<String>>) arrayToken.getComponentType();\n+    assertThat(componentType).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<List<String>> componentClassType = (TypeToken.ClassToken<List<String>>) componentType;\n+    assertThat(componentClassType.getRawType()).isEqualTo(List.class);\n+    TypeToken<String> argumentType = ((TypeToken.ClassToken<List<String>>) componentType).getTypeArguments().at(0);\n+    assertThat(argumentType).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<String> argumentClassType = (TypeToken.ClassToken<String>) argumentType;\n+    assertThat(argumentClassType.getRawType()).isEqualTo(String.class);\n+  }\n+\n+  //Plain Class Type\n+  @Test\n+  public void plainClassTypeWithSafe_rawTypeIsCorrectlyCaptured() {\n+    TypeToken<Foo> typeToken = TypeToken.of(new Safe<Foo>() {});\n+    assertThat(typeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<Foo> typeClassToken = (TypeToken.ClassToken<Foo>) typeToken;\n+    assertThat(typeClassToken.getRawType()).isEqualTo(Foo.class);\n+  }\n+\n+  @Test\n+  public void plainClassTypeWithoutSafe_rawTypeIsCorrectlyCaptured() {\n+    TypeToken<Foo> typeToken = TypeToken.of(Foo.class);\n+    assertThat(typeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<Foo> typeClassToken = (TypeToken.ClassToken<Foo>) typeToken;\n+    assertThat(typeClassToken.getRawType()).isEqualTo(Foo.class);\n+  }\n+\n+  //Generic Type\n+  @Test\n+  public void genericType_actualTypeParametersAreCorrectlyCaptured(){\n+    TypeToken<Map<String, Foo>> mapTypeToken = TypeToken.of(new Safe<Map<String, Foo>>() {});\n+    assertThat(mapTypeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<Map<String, Foo>> mapClassToken = (TypeToken.ClassToken<Map<String, Foo>>) mapTypeToken;\n+    TypeTokenContainer typeTokenContainer = mapClassToken.getTypeArguments();\n+    TypeToken<String> firstArgumentToken = typeTokenContainer.at(0);\n+    TypeToken<Foo> secondArgumentTypeToken = typeTokenContainer.at(1);\n+    assertThat(firstArgumentToken).isInstanceOf(TypeToken.ClassToken.class);\n+    assertThat(secondArgumentTypeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<String> firstArgumentClassToken = (TypeToken.ClassToken<String>) firstArgumentToken;\n+    TypeToken.ClassToken<Foo> secondArgumentClassToken = (TypeToken.ClassToken<Foo>) secondArgumentTypeToken;\n+    assertThat(firstArgumentClassToken.getRawType()).isEqualTo(String.class);\n+    assertThat(secondArgumentClassToken.getRawType()).isEqualTo(Foo.class);\n+  }\n+\n+  @Test\n+  public void nestedGenericType_actualTypeParametersAreCorrectlyCaptured(){\n+    TypeToken<List<List<String>>> typeToken = TypeToken.of(new Safe<List<List<String>>>(){});\n+    assertThat(typeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<List<List<String>>> typeClassToken = (TypeToken.ClassToken<List<List<String>>>) typeToken;\n+    TypeToken<List<String>> componentToken = typeClassToken.getTypeArguments().at(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b53777538931a51ada76504292538ee2e4d854c3"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA1NzA5Mw==", "bodyText": "pls throw a more specific exception, e.g. IllegalArgumentException is a good candidate in this case.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r432057093", "createdAt": "2020-05-28T19:04:51Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.lang.reflect.GenericArrayType;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.lang.reflect.WildcardType;\n+\n+//TODO: implement hashCode(), equals(), and toString().\n+public abstract class TypeToken<T> {\n+\n+  @NonNull\n+  public static <T> TypeToken<T> of(@NonNull Safe<T> token) {\n+    Type superclass = token.getClass().getGenericSuperclass();\n+    if (superclass instanceof Class) {\n+      throw new RuntimeException(\"Missing type parameters\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b53777538931a51ada76504292538ee2e4d854c3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA1NzIzNw==", "bodyText": "IllegalArgumentException as well pls", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r432057237", "createdAt": "2020-05-28T19:05:05Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.lang.reflect.GenericArrayType;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.lang.reflect.WildcardType;\n+\n+//TODO: implement hashCode(), equals(), and toString().\n+public abstract class TypeToken<T> {\n+\n+  @NonNull\n+  public static <T> TypeToken<T> of(@NonNull Safe<T> token) {\n+    Type superclass = token.getClass().getGenericSuperclass();\n+    if (superclass instanceof Class) {\n+      throw new RuntimeException(\"Missing type parameters\");\n+    }\n+    Type type = ((ParameterizedType) superclass).getActualTypeArguments()[0];\n+    return of(type);\n+  }\n+\n+  @NonNull\n+  private static <T> TypeToken<T> of(@NonNull Type type) {\n+    if(type instanceof WildcardType) {\n+      if(((WildcardType) type).getLowerBounds().length == 0) {\n+        return of(((WildcardType) type).getUpperBounds()[0]);\n+      }\n+      throw new RuntimeException(\"<? super T> is not supported\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b53777538931a51ada76504292538ee2e4d854c3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA1ODg1Nw==", "bodyText": "since Class<T> is an instanceof Type, would it make sense to move this logic to the private method above and have this method just call that?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r432058857", "createdAt": "2020-05-28T19:08:06Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/TypeToken.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.lang.reflect.GenericArrayType;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.lang.reflect.WildcardType;\n+\n+//TODO: implement hashCode(), equals(), and toString().\n+public abstract class TypeToken<T> {\n+\n+  @NonNull\n+  public static <T> TypeToken<T> of(@NonNull Safe<T> token) {\n+    Type superclass = token.getClass().getGenericSuperclass();\n+    if (superclass instanceof Class) {\n+      throw new RuntimeException(\"Missing type parameters\");\n+    }\n+    Type type = ((ParameterizedType) superclass).getActualTypeArguments()[0];\n+    return of(type);\n+  }\n+\n+  @NonNull\n+  private static <T> TypeToken<T> of(@NonNull Type type) {\n+    if(type instanceof WildcardType) {\n+      if(((WildcardType) type).getLowerBounds().length == 0) {\n+        return of(((WildcardType) type).getUpperBounds()[0]);\n+      }\n+      throw new RuntimeException(\"<? super T> is not supported\");\n+    }\n+\n+    if (type instanceof GenericArrayType) {\n+      Type componentType = ((GenericArrayType) type).getGenericComponentType();\n+      return new ArrayToken<T>(TypeToken.of(componentType));\n+    }\n+\n+    //Regular Class Type || Primitive Type || Non-Generic Array Type\n+    if (type instanceof Class<?>) {\n+      Class<T> typeToken = (Class<T>) type;\n+      return of(typeToken);\n+    }\n+\n+    ParameterizedType parameterizedType = (ParameterizedType) type;\n+    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+    Class<T> rawType = (Class<T>) (parameterizedType.getRawType());\n+\n+    TypeTokenContainer container = new TypeTokenContainer() {\n+      @NonNull\n+      @Override\n+      public <T> TypeToken<T> at(int index) {\n+        return TypeToken.of(actualTypeArguments[index]);\n+      }\n+    };\n+    return new ClassToken<T>(rawType, container);\n+  }\n+\n+  @NonNull\n+  public static <T> TypeToken<T> of(@NonNull Class<T> typeToken) {\n+    if (typeToken.isArray()) {\n+      Class<?> componentTypeToken = typeToken.getComponentType();\n+      return new ArrayToken<T>(TypeToken.of(componentTypeToken));\n+    }\n+    return new ClassToken<T>((Class<T>) typeToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b53777538931a51ada76504292538ee2e4d854c3"}, "originalPosition": 77}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "515d052f87b1fa065f4dafac83646bc171e3a54b", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/515d052f87b1fa065f4dafac83646bc171e3a54b", "committedDate": "2020-05-29T02:42:18Z", "message": "generated API file, and reformated"}, "afterCommit": {"oid": "9c089739b79b355c07c50710339e7ff4e3df3e01", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/9c089739b79b355c07c50710339e7ff4e3df3e01", "committedDate": "2020-05-29T15:47:14Z", "message": "generated API file, and reformated"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMjkwNzAw", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#pullrequestreview-421290700", "createdAt": "2020-05-29T21:12:58Z", "commit": {"oid": "9c089739b79b355c07c50710339e7ff4e3df3e01"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMToxMjo1OFrOGcsO0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMToxNToyNVrOGcsSpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczODAwMA==", "bodyText": "In the spirit of https://en.wikipedia.org/wiki/Fail-fast, Ideally the exception should be thrown at this point, not when one tries to get the type arguments of a type token. Feel free to address this in a separate PR.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r432738000", "createdAt": "2020-05-29T21:12:58Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/TypeTokenTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertThrows;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class TypeTokenTest {\n+  static class Foo {}\n+\n+  // Primitive type\n+  @Test\n+  public void primitiveType_typeIsCorrectlyCaptured() {\n+    TypeToken<Integer> integerTypeToken = TypeToken.of(int.class);\n+    assertThat(integerTypeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<Integer> intToken = (TypeToken.ClassToken<Integer>) integerTypeToken;\n+    assertThat(intToken.getRawType()).isEqualTo(int.class);\n+\n+    TypeToken<Boolean> booleanTypeToken = TypeToken.of(boolean.class);\n+    assertThat(booleanTypeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<Boolean> booleanToken = (TypeToken.ClassToken<Boolean>) booleanTypeToken;\n+    assertThat(booleanToken.getRawType()).isEqualTo(boolean.class);\n+  }\n+\n+  // Array type\n+  @Test\n+  public void generalArrayTypeWithSafe_componentTypeIsCorrectlyCaptured() {\n+    TypeToken<Foo[]> typeToken = TypeToken.of(new Safe<Foo[]>() {});\n+    assertThat(typeToken).isInstanceOf(TypeToken.ArrayToken.class);\n+    TypeToken.ArrayToken<Foo[]> arrayToken = (TypeToken.ArrayToken<Foo[]>) typeToken;\n+    TypeToken<?> componentTypeToken = arrayToken.getComponentType();\n+    assertThat(componentTypeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<Foo> componentToken = (TypeToken.ClassToken<Foo>) componentTypeToken;\n+    assertThat(componentToken.getRawType()).isEqualTo(Foo.class);\n+  }\n+\n+  @Test\n+  public void generalArrayTypeWithoutSafe_componentTypeIsCorrectlyCaptured() {\n+    TypeToken<Foo[]> typeToken = TypeToken.of(Foo[].class);\n+    assertThat(typeToken).isInstanceOf(TypeToken.ArrayToken.class);\n+    TypeToken.ArrayToken<Foo[]> arrayToken = (TypeToken.ArrayToken<Foo[]>) typeToken;\n+    TypeToken<?> componentTypeToken = arrayToken.getComponentType();\n+    assertThat(componentTypeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<Foo> componentToken = (TypeToken.ClassToken<Foo>) componentTypeToken;\n+    assertThat(componentToken.getRawType()).isEqualTo(Foo.class);\n+  }\n+\n+  @Test\n+  public void genericArrayType_rawTypeIsCorrectlyCaptured() {\n+    TypeToken<List<String>[]> typeToken = TypeToken.of(new Safe<List<String>[]>() {});\n+    assertThat(typeToken).isInstanceOf(TypeToken.ArrayToken.class);\n+    TypeToken.ArrayToken<List<String>[]> arrayToken =\n+        (TypeToken.ArrayToken<List<String>[]>) typeToken;\n+    TypeToken<List<String>> componentType = (TypeToken<List<String>>) arrayToken.getComponentType();\n+    assertThat(componentType).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<List<String>> componentClassType =\n+        (TypeToken.ClassToken<List<String>>) componentType;\n+    assertThat(componentClassType.getRawType()).isEqualTo(List.class);\n+    TypeToken<String> argumentType =\n+        ((TypeToken.ClassToken<List<String>>) componentType).getTypeArguments().at(0);\n+    assertThat(argumentType).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<String> argumentClassType = (TypeToken.ClassToken<String>) argumentType;\n+    assertThat(argumentClassType.getRawType()).isEqualTo(String.class);\n+  }\n+\n+  // Plain Class Type\n+  @Test\n+  public void plainClassTypeWithSafe_rawTypeIsCorrectlyCaptured() {\n+    TypeToken<Foo> typeToken = TypeToken.of(new Safe<Foo>() {});\n+    assertThat(typeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<Foo> typeClassToken = (TypeToken.ClassToken<Foo>) typeToken;\n+    assertThat(typeClassToken.getRawType()).isEqualTo(Foo.class);\n+  }\n+\n+  @Test\n+  public void plainClassTypeWithoutSafe_rawTypeIsCorrectlyCaptured() {\n+    TypeToken<Foo> typeToken = TypeToken.of(Foo.class);\n+    assertThat(typeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<Foo> typeClassToken = (TypeToken.ClassToken<Foo>) typeToken;\n+    assertThat(typeClassToken.getRawType()).isEqualTo(Foo.class);\n+  }\n+\n+  // Generic Type\n+  @Test\n+  public void genericType_actualTypeParametersAreCorrectlyCaptured() {\n+    TypeToken<Map<String, Foo>> mapTypeToken = TypeToken.of(new Safe<Map<String, Foo>>() {});\n+    assertThat(mapTypeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<Map<String, Foo>> mapClassToken =\n+        (TypeToken.ClassToken<Map<String, Foo>>) mapTypeToken;\n+    TypeTokenContainer typeTokenContainer = mapClassToken.getTypeArguments();\n+    TypeToken<String> firstArgumentToken = typeTokenContainer.at(0);\n+    TypeToken<Foo> secondArgumentTypeToken = typeTokenContainer.at(1);\n+    assertThat(firstArgumentToken).isInstanceOf(TypeToken.ClassToken.class);\n+    assertThat(secondArgumentTypeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<String> firstArgumentClassToken =\n+        (TypeToken.ClassToken<String>) firstArgumentToken;\n+    TypeToken.ClassToken<Foo> secondArgumentClassToken =\n+        (TypeToken.ClassToken<Foo>) secondArgumentTypeToken;\n+    assertThat(firstArgumentClassToken.getRawType()).isEqualTo(String.class);\n+    assertThat(secondArgumentClassToken.getRawType()).isEqualTo(Foo.class);\n+  }\n+\n+  @Test\n+  public void nestedGenericType_actualTypeParametersAreCorrectlyCaptured() {\n+    TypeToken<List<List<String>>> typeToken = TypeToken.of(new Safe<List<List<String>>>() {});\n+    assertThat(typeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<List<List<String>>> typeClassToken =\n+        (TypeToken.ClassToken<List<List<String>>>) typeToken;\n+    TypeToken<List<String>> componentToken = typeClassToken.getTypeArguments().at(0);\n+    assertThat(componentToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<List<String>> componentClassToken =\n+        (TypeToken.ClassToken<List<String>>) componentToken;\n+    assertThat(componentClassToken.getRawType()).isEqualTo(List.class);\n+    TypeToken<String> innerComponentToken = componentClassToken.getTypeArguments().at(0);\n+    assertThat(innerComponentToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<String> innerComponentClassToken =\n+        (TypeToken.ClassToken<String>) innerComponentToken;\n+    assertThat(innerComponentClassToken.getRawType()).isEqualTo(String.class);\n+  }\n+\n+  // Bounded Wildcard Type\n+  @Test\n+  public void boundedWildcardTypeWithExtend_actualTypeParameterIsCastedToUpperBound() {\n+    TypeToken<List<? extends Number>> typeToken =\n+        TypeToken.of(new Safe<List<? extends Number>>() {});\n+    assertThat(typeToken).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<List<? extends Number>> typeClassToken =\n+        (TypeToken.ClassToken<List<? extends Number>>) typeToken;\n+    TypeToken<Number> componentType = typeClassToken.getTypeArguments().at(0);\n+    assertThat(componentType).isInstanceOf(TypeToken.ClassToken.class);\n+    TypeToken.ClassToken<Number> componentClassType = (TypeToken.ClassToken<Number>) componentType;\n+    assertThat(componentClassType.getRawType()).isEqualTo(Number.class);\n+  }\n+\n+  @Test\n+  public void boundedWildcardTypeWithSuper_notSupported() {\n+    TypeToken<List<? super Foo>> typeToken = TypeToken.of(new Safe<List<? super Foo>>() {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c089739b79b355c07c50710339e7ff4e3df3e01"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczODEzNg==", "bodyText": "is this change intended, can it be reverted back?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r432738136", "createdAt": "2020-05-29T21:13:18Z", "author": {"login": "vkryachko"}, "path": "settings.gradle", "diffHunk": "@@ -24,4 +24,4 @@ discoverSubprojects(file('subprojects.cfg')).each {\n \n renameBuildScripts(rootProject)\n \n-apply from: new File(settingsDir, 'gradle/buildCache.gradle')\n+apply from: new File(settingsDir, 'gradle/buildCache.gradle')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c089739b79b355c07c50710339e7ff4e3df3e01"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczODk4MQ==", "bodyText": "This can be removed.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1600#discussion_r432738981", "createdAt": "2020-05-29T21:15:25Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/firebase-decoders-json.gradle", "diffHunk": "@@ -0,0 +1,62 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+plugins {\n+    id 'firebase-library'\n+}\n+\n+firebaseLibrary {\n+    publishSources = true\n+    publishJavadoc = false\n+}\n+\n+android {\n+    compileSdkVersion project.targetSdkVersion\n+    defaultConfig {\n+        minSdkVersion project.minSdkVersion\n+        targetSdkVersion project.targetSdkVersion\n+        versionName version\n+        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n+    }\n+\n+    compileOptions {\n+        sourceCompatibility JavaVersion.VERSION_1_8\n+        targetCompatibility JavaVersion.VERSION_1_8\n+    }\n+    testOptions {\n+        unitTests {\n+            includeAndroidResources = true\n+        }\n+    }\n+\n+    sourceSets.main.java {\n+        srcDir 'src/json/java'\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c089739b79b355c07c50710339e7ff4e3df3e01"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d97309164442228f27a5a35e577de94d539132a", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/3d97309164442228f27a5a35e577de94d539132a", "committedDate": "2020-05-31T13:37:44Z", "message": "inital implementation of typeToken for decoder"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c089739b79b355c07c50710339e7ff4e3df3e01", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/9c089739b79b355c07c50710339e7ff4e3df3e01", "committedDate": "2020-05-29T15:47:14Z", "message": "generated API file, and reformated"}, "afterCommit": {"oid": "3d97309164442228f27a5a35e577de94d539132a", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/3d97309164442228f27a5a35e577de94d539132a", "committedDate": "2020-05-31T13:37:44Z", "message": "inital implementation of typeToken for decoder"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2687, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}