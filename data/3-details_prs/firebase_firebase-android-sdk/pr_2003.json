{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxOTA4MDg1", "number": 2003, "title": "Enable request limiter for CreateInstallation, GenerateAuthToken request calls.", "bodyText": "Preventing erroneous requests.", "createdAt": "2020-09-23T16:43:13Z", "url": "https://github.com/firebase/firebase-android-sdk/pull/2003", "merged": true, "mergeCommit": {"oid": "6d8b5722bb2388b70ec6ed8ee84508fd79a3f291"}, "closed": true, "closedAt": "2020-10-05T18:30:08Z", "author": {"login": "ankitaj224"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLgPQtAH2gAyNDkxOTA4MDg1OmYxOGNiNjZlMjM1ODRmZjdmNWQxNjM4NzZiNWM1YzhjNWQ3YmJmNTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPnpN4gH2gAyNDkxOTA4MDg1OjkxY2E5ODJmYWJlNDk2YTA4MDJmYzkwMjlhZDlhNzQ2ZDU3NGE3YTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f18cb66e23584ff7f5d163876b5c5c8c5d7bbf59", "author": {"user": {"login": "ankitaj224", "name": "Ankita"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/f18cb66e23584ff7f5d163876b5c5c8c5d7bbf59", "committedDate": "2020-09-22T23:04:02Z", "message": "Enable request limiter for CreateInstallation & GenerateAuthToken\nrequest calls."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MTY3MTg0", "url": "https://github.com/firebase/firebase-android-sdk/pull/2003#pullrequestreview-495167184", "createdAt": "2020-09-24T01:53:18Z", "commit": {"oid": "f18cb66e23584ff7f5d163876b5c5c8c5d7bbf59"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMTo1MzoxOFrOHXG9Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjo0Mzo1MFrOHXHuow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5MzMwNw==", "bodyText": "Why does RandomFidGenerator needs to be instantiated?\nUsually I would assume, because a RandomNumberGenerator has to be injected, but that does not seem to be the case.\nThus, can we use the methods of this class statically?\nAs a more general note:\nFor general code design it would be better if there was a FIS model class that would represent FIDs and also carry methods like generating a random FID.\nNo action item! I just wanted to leave this comment here.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2003#discussion_r493993307", "createdAt": "2020-09-24T01:53:18Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/FirebaseInstallations.java", "diffHunk": "@@ -132,7 +132,7 @@ public Thread newThread(Runnable r) {\n         new FirebaseInstallationServiceClient(\n             firebaseApp.getApplicationContext(), publisher, heartbeatInfo),\n         new PersistedInstallation(firebaseApp),\n-        new Utils(),\n+        Utils.getInstance(),\n         new IidStore(firebaseApp),\n         new RandomFidGenerator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18cb66e23584ff7f5d163876b5c5c8c5d7bbf59"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5MzQzMA==", "bodyText": "I recommend calling this variable singleton.\nIt is just so self-explanatory that you don't need any comments.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2003#discussion_r493993430", "createdAt": "2020-09-24T01:53:54Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -30,6 +30,16 @@\n   public static final long AUTH_TOKEN_EXPIRATION_BUFFER_IN_SECS = TimeUnit.HOURS.toSeconds(1);\n   private static final String APP_ID_IDENTIFICATION_SUBSTRING = \":\";\n   private static final Pattern API_KEY_FORMAT = Pattern.compile(\"\\\\AA[\\\\w-]{38}\\\\z\");\n+  private static Utils utils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18cb66e23584ff7f5d163876b5c5c8c5d7bbf59"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5MzU0MQ==", "bodyText": "Please add JavaDoc, e.g.:\n\"Factory method that always returns the same Utils instance.\"", "url": "https://github.com/firebase/firebase-android-sdk/pull/2003#discussion_r493993541", "createdAt": "2020-09-24T01:54:17Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -30,6 +30,16 @@\n   public static final long AUTH_TOKEN_EXPIRATION_BUFFER_IN_SECS = TimeUnit.HOURS.toSeconds(1);\n   private static final String APP_ID_IDENTIFICATION_SUBSTRING = \":\";\n   private static final Pattern API_KEY_FORMAT = Pattern.compile(\"\\\\AA[\\\\w-]{38}\\\\z\");\n+  private static Utils utils;\n+\n+  private Utils() {}\n+\n+  public static Utils getInstance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18cb66e23584ff7f5d163876b5c5c8c5d7bbf59"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5Mzk0NA==", "bodyText": "Is it necessary to pass the Utils parameter?\nSince there is only one Utils instance, RequestLimiter should be able to access that instance itself and does not need to be passed a Utils instance.\nMaybe the Utils parameter can be optional?\nNot saying that it's better! Just thinking out loud! :)", "url": "https://github.com/firebase/firebase-android-sdk/pull/2003#discussion_r493993944", "createdAt": "2020-09-24T01:55:36Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/FirebaseInstallationServiceClient.java", "diffHunk": "@@ -112,6 +115,7 @@ public FirebaseInstallationServiceClient(\n     this.context = context;\n     this.userAgentPublisher = publisher;\n     this.heartbeatInfo = heartbeatInfo;\n+    this.requestLimiter = new RequestLimiter(Utils.getInstance());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18cb66e23584ff7f5d163876b5c5c8c5d7bbf59"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwMzI1Mg==", "bodyText": "Question:\nWhen we should not send requests to the server, we throw a FirebaseInstallationsException with message \"Firebase Installations Service is unavailable.\"? Is that correct and desired behavior?\nIf yes, why not throw this exception before the while loop?", "url": "https://github.com/firebase/firebase-android-sdk/pull/2003#discussion_r494003252", "createdAt": "2020-09-24T02:32:58Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/FirebaseInstallationServiceClient.java", "diffHunk": "@@ -143,7 +147,7 @@ public InstallationResponse createFirebaseInstallation(\n     String resourceName = String.format(CREATE_REQUEST_RESOURCE_NAME_FORMAT, projectID);\n     int retryCount = 0;\n     URL url = getFullyQualifiedRequestUri(resourceName);\n-    while (retryCount <= MAX_RETRIES) {\n+    while (requestLimiter.isRequestAllowed() || shouldServerErrorRetry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18cb66e23584ff7f5d163876b5c5c8c5d7bbf59"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwMzYxMw==", "bodyText": "What happens in case of exceptions?\nDo we need to set a nextRequestTime?\nI assume not, just checking if you considered that case.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2003#discussion_r494003613", "createdAt": "2020-09-24T02:34:26Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/FirebaseInstallationServiceClient.java", "diffHunk": "@@ -158,15 +162,17 @@ public InstallationResponse createFirebaseInstallation(\n         writeFIDCreateRequestBodyToOutputStream(httpURLConnection, fid, appId);\n \n         int httpResponseCode = httpURLConnection.getResponseCode();\n+        requestLimiter.setNextRequestTime(httpResponseCode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18cb66e23584ff7f5d163876b5c5c8c5d7bbf59"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwNTMyMg==", "bodyText": "I'm not sure if I like this code!\nThere is several things wrong with this I think:\na) When I read the While loop condition above, it is unclear to me what shouldServerErrorRetry is and I have to search the code to find where the variable is set.\nb) If avoidable (which is almost always the case) local variables should not change in value, because it makes code hard to read - this is actually a great example why. If you have to do it at all costs, you should mark the local variable as @Var.\nc) I just realize it's not a local variable, but an instance variable. Why is that? That is even more confusing to me. Are you saying that other parallel processes can change the value of the variable and affect this while loop? (c.1) I doubt that this is the case. (c.2) And if it's the case, I doubt that it's a good idea!\nd) I also liked using a variable named retryCount in the while loop condition better than a variable called shouldServerErrorRetry... With the retryCount it is immediately obvious, that we will retry sending the same request for some times... shouldServerErrorRetry does not really give that much information.\nI recommend:\nLeave the retryCount <= MAX_RETRIES in the while loop.\nEven better, get rid of the while loop and replace it with a for (int retryCount = 0; retryCount <= MAX_RETRIES; retryCount++).\nThat explains so much better what is happening here than a local variable that is changed somewhere else.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2003#discussion_r494005322", "createdAt": "2020-09-24T02:41:20Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/FirebaseInstallationServiceClient.java", "diffHunk": "@@ -158,15 +162,17 @@ public InstallationResponse createFirebaseInstallation(\n         writeFIDCreateRequestBodyToOutputStream(httpURLConnection, fid, appId);\n \n         int httpResponseCode = httpURLConnection.getResponseCode();\n+        requestLimiter.setNextRequestTime(httpResponseCode);\n \n         if (httpResponseCode == 200) {\n           return readCreateResponse(httpURLConnection);\n         }\n \n         logFisCommunicationError(httpURLConnection, appId, apiKey, projectID);\n \n-        if (httpResponseCode == 429 || (httpResponseCode >= 500 && httpResponseCode < 600)) {\n+        if (httpResponseCode >= 500 && httpResponseCode < 600) {\n           retryCount++;\n+          shouldServerErrorRetry = retryCount <= MAX_RETRIES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18cb66e23584ff7f5d163876b5c5c8c5d7bbf59"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwNTQ0MQ==", "bodyText": "What happened to 429?\nWe logBadConfigError for that status now?\nIf that is the case, I think it's not correct.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2003#discussion_r494005441", "createdAt": "2020-09-24T02:41:47Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/FirebaseInstallationServiceClient.java", "diffHunk": "@@ -158,15 +162,17 @@ public InstallationResponse createFirebaseInstallation(\n         writeFIDCreateRequestBodyToOutputStream(httpURLConnection, fid, appId);\n \n         int httpResponseCode = httpURLConnection.getResponseCode();\n+        requestLimiter.setNextRequestTime(httpResponseCode);\n \n         if (httpResponseCode == 200) {\n           return readCreateResponse(httpURLConnection);\n         }\n \n         logFisCommunicationError(httpURLConnection, appId, apiKey, projectID);\n \n-        if (httpResponseCode == 429 || (httpResponseCode >= 500 && httpResponseCode < 600)) {\n+        if (httpResponseCode >= 500 && httpResponseCode < 600) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18cb66e23584ff7f5d163876b5c5c8c5d7bbf59"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwNTc5Mg==", "bodyText": "This obviously seemed to have worked in the past, but maybe it's better we check for a successful code here?\nI'm not sure, but I think the FIS server responds with 201 in case of a successful registatration.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2003#discussion_r494005792", "createdAt": "2020-09-24T02:43:17Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/FirebaseInstallationServiceClient.java", "diffHunk": "@@ -158,15 +162,17 @@ public InstallationResponse createFirebaseInstallation(\n         writeFIDCreateRequestBodyToOutputStream(httpURLConnection, fid, appId);\n \n         int httpResponseCode = httpURLConnection.getResponseCode();\n+        requestLimiter.setNextRequestTime(httpResponseCode);\n \n         if (httpResponseCode == 200) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18cb66e23584ff7f5d163876b5c5c8c5d7bbf59"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwNTkyMw==", "bodyText": "camel case:\nisSuccessfulOrRequiresNewFidCreation", "url": "https://github.com/firebase/firebase-android-sdk/pull/2003#discussion_r494005923", "createdAt": "2020-09-24T02:43:50Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/RequestLimiter.java", "diffHunk": "@@ -45,7 +45,7 @@\n   // Based on the response code, calculates the next request time to communicate with the FIS\n   // servers.\n   public synchronized void setNextRequestTime(int responseCode) {\n-    if (isSuccessful(responseCode)) {\n+    if (isSuccessfulOrRequiresNewFIDCreation(responseCode)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f18cb66e23584ff7f5d163876b5c5c8c5d7bbf59"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2033ccd9bdc218ccfac6dbae63f34957b03769c2", "author": {"user": {"login": "ankitaj224", "name": "Ankita"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/2033ccd9bdc218ccfac6dbae63f34957b03769c2", "committedDate": "2020-09-28T17:59:17Z", "message": "Merge branch 'master' of github.com:firebase/firebase-android-sdk into enableRequestLimiter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d6b7c319fbe1dd443e00d5bdb89057da9c66ec2", "author": {"user": {"login": "ankitaj224", "name": "Ankita"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/6d6b7c319fbe1dd443e00d5bdb89057da9c66ec2", "committedDate": "2020-09-28T21:06:36Z", "message": "Addressing Rayo's comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb37ff1d01901ae7c1e6b86fb120f9664c8fd87b", "author": {"user": {"login": "ankitaj224", "name": "Ankita"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/bb37ff1d01901ae7c1e6b86fb120f9664c8fd87b", "committedDate": "2020-09-29T20:08:56Z", "message": "Merge branch 'master' of github.com:firebase/firebase-android-sdk into enableRequestLimiter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5ODMyNDgx", "url": "https://github.com/firebase/firebase-android-sdk/pull/2003#pullrequestreview-499832481", "createdAt": "2020-09-30T21:40:47Z", "commit": {"oid": "bb37ff1d01901ae7c1e6b86fb120f9664c8fd87b"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTo0MDo0N1rOHawU9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMTo0NDozM1rOHawb0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgxNjgyMw==", "bodyText": "(fyi: this was not addressed or acknowledged)", "url": "https://github.com/firebase/firebase-android-sdk/pull/2003#discussion_r497816823", "createdAt": "2020-09-30T21:40:47Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/FirebaseInstallations.java", "diffHunk": "@@ -132,7 +132,7 @@ public Thread newThread(Runnable r) {\n         new FirebaseInstallationServiceClient(\n             firebaseApp.getApplicationContext(), publisher, heartbeatInfo),\n         new PersistedInstallation(firebaseApp),\n-        new Utils(),\n+        Utils.getInstance(),\n         new IidStore(firebaseApp),\n         new RandomFidGenerator());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5MzMwNw=="}, "originalCommit": {"oid": "f18cb66e23584ff7f5d163876b5c5c8c5d7bbf59"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgxNzU2OA==", "bodyText": "Please avoid code duplication:\npublic static Utils getInstance() {\n  return getInstance(SystemClock.getInstance());\n}", "url": "https://github.com/firebase/firebase-android-sdk/pull/2003#discussion_r497817568", "createdAt": "2020-09-30T21:42:24Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -31,11 +32,28 @@\n   public static final long AUTH_TOKEN_EXPIRATION_BUFFER_IN_SECS = TimeUnit.HOURS.toSeconds(1);\n   private static final String APP_ID_IDENTIFICATION_SUBSTRING = \":\";\n   private static final Pattern API_KEY_FORMAT = Pattern.compile(\"\\\\AA[\\\\w-]{38}\\\\z\");\n+  private static Utils singleton;\n   private final Clock clock;\n \n-  Utils(Clock clock) {\n+  private Utils(Clock clock) {\n     this.clock = clock;\n   }\n+\n+  // Factory method that always returns the same Utils instance.\n+  public static Utils getInstance() {\n+    if (singleton == null) {\n+      singleton = new Utils(SystemClock.getInstance());\n+    }\n+    return singleton;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb37ff1d01901ae7c1e6b86fb120f9664c8fd87b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgxNzk1MA==", "bodyText": "Please add JavaDoc, that the first call will define the Clock used.\nIf a Utils instance has already been initialized, the parameter will be ignored and the old instance will be returned.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2003#discussion_r497817950", "createdAt": "2020-09-30T21:43:11Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -31,11 +32,28 @@\n   public static final long AUTH_TOKEN_EXPIRATION_BUFFER_IN_SECS = TimeUnit.HOURS.toSeconds(1);\n   private static final String APP_ID_IDENTIFICATION_SUBSTRING = \":\";\n   private static final Pattern API_KEY_FORMAT = Pattern.compile(\"\\\\AA[\\\\w-]{38}\\\\z\");\n+  private static Utils singleton;\n   private final Clock clock;\n \n-  Utils(Clock clock) {\n+  private Utils(Clock clock) {\n     this.clock = clock;\n   }\n+\n+  // Factory method that always returns the same Utils instance.\n+  public static Utils getInstance() {\n+    if (singleton == null) {\n+      singleton = new Utils(SystemClock.getInstance());\n+    }\n+    return singleton;\n+  }\n+\n+  public static Utils getTestInstance(Clock clock) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb37ff1d01901ae7c1e6b86fb120f9664c8fd87b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgxODU3OA==", "bodyText": "By \"optional\" I mean that you have 2 constructors, one with Utils parameter, one without.\nThe constructor without Utils parameter just calls Utils.getInstance(), so we don't need this implementation detail here.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2003#discussion_r497818578", "createdAt": "2020-09-30T21:44:33Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/remote/FirebaseInstallationServiceClient.java", "diffHunk": "@@ -112,6 +115,7 @@ public FirebaseInstallationServiceClient(\n     this.context = context;\n     this.userAgentPublisher = publisher;\n     this.heartbeatInfo = heartbeatInfo;\n+    this.requestLimiter = new RequestLimiter(Utils.getInstance());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5Mzk0NA=="}, "originalCommit": {"oid": "f18cb66e23584ff7f5d163876b5c5c8c5d7bbf59"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22668895a8d119139b1fb2b439128c1c2f8b013e", "author": {"user": {"login": "ankitaj224", "name": "Ankita"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/22668895a8d119139b1fb2b439128c1c2f8b013e", "committedDate": "2020-10-02T18:23:53Z", "message": "Addressing rayo's comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46726cbd0dedd5b5e739ef6789f005e12ee70117", "author": {"user": {"login": "ankitaj224", "name": "Ankita"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/46726cbd0dedd5b5e739ef6789f005e12ee70117", "committedDate": "2020-10-02T18:25:50Z", "message": "Merge branch 'master' of github.com:firebase/firebase-android-sdk into enableRequestLimiter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91ca982fabe496a0802fc9029ad9a746d574a7a8", "author": {"user": {"login": "ankitaj224", "name": "Ankita"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/91ca982fabe496a0802fc9029ad9a746d574a7a8", "committedDate": "2020-10-05T17:57:25Z", "message": "Merge branch 'master' of github.com:firebase/firebase-android-sdk into enableRequestLimiter"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2516, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}