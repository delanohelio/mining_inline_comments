{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxOTA3MTI4", "number": 2002, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMTo0NTowNFrOEm19NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMTo0OToxM1rOEm1__w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTY1MzY1OnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/AndroidManifest.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMTo0NTowNFrOHXG1NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxODo0NzoxOFrOHYO1SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5MTIyMA==", "bodyText": "If possible and known, can you please add a reason why Android SDK v14 is required, e.g. because we use some HTTP client that is not available in v13...", "url": "https://github.com/firebase/firebase-android-sdk/pull/2002#discussion_r493991220", "createdAt": "2020-09-24T01:45:04Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/AndroidManifest.xml", "diffHunk": "@@ -3,6 +3,8 @@\n     package=\"com.google.firebase.installations\">\n     <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n     <uses-permission android:name=\"android.permission.INTERNET\" />\n+    <!--Although the *SdkVersion is captured in gradle build files, this is required for non gradle builds-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e895463cd2b0b3ac090c0d98980d2b2e4618dec6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE3MDg4OA==", "bodyText": "I have no clue. I will try & findout and update the file. But all Firebase sdks minSDK support is API 14.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2002#discussion_r495170888", "createdAt": "2020-09-25T18:47:18Z", "author": {"login": "ankitaj224"}, "path": "firebase-installations/src/main/AndroidManifest.xml", "diffHunk": "@@ -3,6 +3,8 @@\n     package=\"com.google.firebase.installations\">\n     <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n     <uses-permission android:name=\"android.permission.INTERNET\" />\n+    <!--Although the *SdkVersion is captured in gradle build files, this is required for non gradle builds-->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5MTIyMA=="}, "originalCommit": {"oid": "e895463cd2b0b3ac090c0d98980d2b2e4618dec6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTY1ODM1OnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMTo0Nzo0MVrOHXG37A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxODo0Nzo1MlrOHYO2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5MTkxNg==", "bodyText": "Just for completeness:\nA random number generator should, similar to a timesource, be injected into code to allow deterministic testing of code.\nNo action item! I just wanted to shared this with you.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2002#discussion_r493991916", "createdAt": "2020-09-24T01:47:41Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -66,10 +66,12 @@ static boolean isValidApiKeyFormat(@Nullable String apiKey) {\n     return API_KEY_FORMAT.matcher(apiKey).matches();\n   }\n \n-  /* Returns a random number of milliseconds less than or equal to 1000. This helps to avoid cases\n-   where many clients get synchronized by some situation and all retry at once, sending requests\n-   in synchronized waves. The value of random_number_milliseconds is recalculated after each retry\n-  request.*/\n+  /**\n+   * Returns a random number of milliseconds less than or equal to 1000. This helps to avoid cases\n+   * where many clients get synchronized by some situation and all retry at once, sending requests\n+   * in synchronized waves. The value of random_number_milliseconds is recalculated after each retry\n+   * request.\n+   */\n   public long getRandomMillis() {\n     // Mockito doesn't allow to mock static methods. As a result this util method is not static.\n     return (long) (Math.random() * 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e895463cd2b0b3ac090c0d98980d2b2e4618dec6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE3MTEyNw==", "bodyText": "I like it. Thanks for the suggestion. I added a TODO and will follow up the change in a separate PR.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2002#discussion_r495171127", "createdAt": "2020-09-25T18:47:52Z", "author": {"login": "ankitaj224"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -66,10 +66,12 @@ static boolean isValidApiKeyFormat(@Nullable String apiKey) {\n     return API_KEY_FORMAT.matcher(apiKey).matches();\n   }\n \n-  /* Returns a random number of milliseconds less than or equal to 1000. This helps to avoid cases\n-   where many clients get synchronized by some situation and all retry at once, sending requests\n-   in synchronized waves. The value of random_number_milliseconds is recalculated after each retry\n-  request.*/\n+  /**\n+   * Returns a random number of milliseconds less than or equal to 1000. This helps to avoid cases\n+   * where many clients get synchronized by some situation and all retry at once, sending requests\n+   * in synchronized waves. The value of random_number_milliseconds is recalculated after each retry\n+   * request.\n+   */\n   public long getRandomMillis() {\n     // Mockito doesn't allow to mock static methods. As a result this util method is not static.\n     return (long) (Math.random() * 1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5MTkxNg=="}, "originalCommit": {"oid": "e895463cd2b0b3ac090c0d98980d2b2e4618dec6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTY2MDc5OnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMTo0OToxNFrOHXG5aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMTo0OToxNFrOHXG5aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5MjI5Nw==", "bodyText": "How about renaming this to one of\n\n#getRandomTimeInterval\n#getRandomDelay\n#getRandomDelayForSyncPrevention\n\nThe goal is to have a name that semantically describes what a method is used for, rather than a name that describes its implementation.", "url": "https://github.com/firebase/firebase-android-sdk/pull/2002#discussion_r493992297", "createdAt": "2020-09-24T01:49:14Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -66,10 +66,12 @@ static boolean isValidApiKeyFormat(@Nullable String apiKey) {\n     return API_KEY_FORMAT.matcher(apiKey).matches();\n   }\n \n-  /* Returns a random number of milliseconds less than or equal to 1000. This helps to avoid cases\n-   where many clients get synchronized by some situation and all retry at once, sending requests\n-   in synchronized waves. The value of random_number_milliseconds is recalculated after each retry\n-  request.*/\n+  /**\n+   * Returns a random number of milliseconds less than or equal to 1000. This helps to avoid cases\n+   * where many clients get synchronized by some situation and all retry at once, sending requests\n+   * in synchronized waves. The value of random_number_milliseconds is recalculated after each retry\n+   * request.\n+   */\n   public long getRandomMillis() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e895463cd2b0b3ac090c0d98980d2b2e4618dec6"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1184, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}