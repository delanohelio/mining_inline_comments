{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1ODA1NTI1", "number": 1332, "title": "Integrate FIS into FIAM Headless", "bodyText": "", "createdAt": "2020-03-09T20:35:35Z", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332", "merged": true, "mergeCommit": {"oid": "261ad669eb86f328ebc37fc8fdffb5e299178eee"}, "closed": true, "closedAt": "2020-03-10T21:02:58Z", "author": {"login": "JasonAHeron"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMEB3hAH2gAyMzg1ODA1NTI1OmIxZjhiMjBhMTA3NDEwM2IxMzE1NDg4NzQyODg5Yjc4ZWFmYTI5ZTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMZwM9gFqTM3MjM0ODM2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b1f8b20a1074103b1315488742889b78eafa29e3", "author": {"user": {"login": "JasonAHeron", "name": "Jason Heron"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/b1f8b20a1074103b1315488742889b78eafa29e3", "committedDate": "2020-03-09T20:34:50Z", "message": "integrate FIS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f", "author": {"user": {"login": "JasonAHeron", "name": "Jason Heron"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/21a83375ab49aa3bf4e16bc8ec2934b074b4c16f", "committedDate": "2020-03-09T22:47:48Z", "message": "do those tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMDM1NjE0", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#pullrequestreview-372035614", "createdAt": "2020-03-10T15:00:32Z", "commit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowMDozMlrOF0S5Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToxNToyNVrOF0Tlxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3OTgxMQ==", "bodyText": "Why anonymous subclass? How about InstallationTokenResult.builder()...build()?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390379811", "createdAt": "2020-03-10T15:00:32Z", "author": {"login": "vkryachko"}, "path": "firebase-inappmessaging/src/androidTest/java/com/google/firebase/inappmessaging/FirebaseInAppMessagingFlowableTest.java", "diffHunk": "@@ -223,22 +225,31 @@ public void setUp() {\n     clearProtoDiskCache(InstrumentationRegistry.getTargetContext());\n     application =\n         spy((Application) InstrumentationRegistry.getTargetContext().getApplicationContext());\n-    String id = FirebaseInstanceId.getInstance().getId();\n-    when(instanceId.getId()).thenReturn(id);\n-    when(instanceId.getInstanceId())\n+    when(firebaseInstallations.getId()).thenReturn(Tasks.forResult(INSTANCE_ID));\n+    when(firebaseInstallations.getToken(false))\n         .thenReturn(\n             Tasks.forResult(\n-                new InstanceIdResult() {\n+                new InstallationTokenResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MTA0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private FirebaseABTesting abTesting;\n          \n          \n            \n              private final FirebaseABTesting abTesting;\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390381041", "createdAt": "2020-03-10T15:02:08Z", "author": {"login": "vkryachko"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/AbtIntegrationHelper.java", "diffHunk": "@@ -17,16 +17,21 @@\n import com.google.firebase.abt.AbtException;\n import com.google.firebase.abt.AbtExperimentInfo;\n import com.google.firebase.abt.FirebaseABTesting;\n+import com.google.firebase.inappmessaging.internal.injection.scopes.FirebaseAppScope;\n import com.google.internal.firebase.inappmessaging.v1.CampaignProto;\n import com.google.internal.firebase.inappmessaging.v1.sdkserving.FetchEligibleCampaignsResponse;\n import developers.mobile.abt.FirebaseAbt;\n import java.util.ArrayList;\n import java.util.Date;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n import javax.inject.Inject;\n \n /** @hide */\n+@FirebaseAppScope\n public class AbtIntegrationHelper {\n-  private static FirebaseABTesting abTesting;\n+  private FirebaseABTesting abTesting;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NDQ3MA==", "bodyText": "Why are you using continueWithTask? do you want to proceed even if this task is cancelled?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390384470", "createdAt": "2020-03-10T15:06:41Z", "author": {"login": "vkryachko"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ApiClient.java", "diffHunk": "@@ -89,28 +89,35 @@ static FetchEligibleCampaignsResponse createCacheExpiringResponse() {\n     }\n     Logging.logi(FETCHING_CAMPAIGN_MESSAGE);\n     providerInstaller.install();\n-    return firebaseInstanceId\n-        .getInstanceId()\n-        .continueWith(\n-            instanceIdResultTask -> {\n-              InstanceIdResult instanceIdResult = instanceIdResultTask.getResult();\n-              if (instanceIdResult == null) {\n-                Logging.logw(\"InstanceID is null, not calling backend\");\n-                return createCacheExpiringResponse();\n-              }\n-              return withCacheExpirationSafeguards(\n-                  grpcClient\n-                      .get()\n-                      .fetchEligibleCampaigns(\n-                          FetchEligibleCampaignsRequest.newBuilder()\n-                              // The project Id we expect is the gcm sender id\n-                              .setProjectNumber(firebaseApp.getOptions().getGcmSenderId())\n-                              .addAllAlreadySeenCampaigns(\n-                                  impressionList.getAlreadySeenCampaignsList())\n-                              .setClientSignals(getClientSignals())\n-                              .setRequestingClientApp(getClientAppInfo(instanceIdResult))\n-                              .build()));\n-            });\n+    return firebaseInstallations\n+        .getId()\n+        .continueWithTask(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NjM4Nw==", "bodyText": "It looks like this method can happen in parallel with the above getId() any reason you are doing them sequentially?, i.e.  could you try doing Tasks.whenAll(idTask, tokenTask).continueWith()?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390386387", "createdAt": "2020-03-10T15:09:02Z", "author": {"login": "vkryachko"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ApiClient.java", "diffHunk": "@@ -89,28 +89,35 @@ static FetchEligibleCampaignsResponse createCacheExpiringResponse() {\n     }\n     Logging.logi(FETCHING_CAMPAIGN_MESSAGE);\n     providerInstaller.install();\n-    return firebaseInstanceId\n-        .getInstanceId()\n-        .continueWith(\n-            instanceIdResultTask -> {\n-              InstanceIdResult instanceIdResult = instanceIdResultTask.getResult();\n-              if (instanceIdResult == null) {\n-                Logging.logw(\"InstanceID is null, not calling backend\");\n-                return createCacheExpiringResponse();\n-              }\n-              return withCacheExpirationSafeguards(\n-                  grpcClient\n-                      .get()\n-                      .fetchEligibleCampaigns(\n-                          FetchEligibleCampaignsRequest.newBuilder()\n-                              // The project Id we expect is the gcm sender id\n-                              .setProjectNumber(firebaseApp.getOptions().getGcmSenderId())\n-                              .addAllAlreadySeenCampaigns(\n-                                  impressionList.getAlreadySeenCampaignsList())\n-                              .setClientSignals(getClientSignals())\n-                              .setRequestingClientApp(getClientAppInfo(instanceIdResult))\n-                              .build()));\n-            });\n+    return firebaseInstallations\n+        .getId()\n+        .continueWithTask(\n+            idTask ->\n+                firebaseInstallations\n+                    .getToken(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NzA2MA==", "bodyText": "Is this no longer desirable? Or did FIS change in a way that makes it a non-issue?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390387060", "createdAt": "2020-03-10T15:09:55Z", "author": {"login": "vkryachko"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/DataCollectionHelper.java", "diffHunk": "@@ -43,16 +42,10 @@\n   public DataCollectionHelper(\n       FirebaseApp firebaseApp,\n       SharedPreferencesUtils sharedPreferencesUtils,\n-      FirebaseInstanceId firebaseInstanceId,\n       Subscriber firebaseEventsSubscriber) {\n     this.sharedPreferencesUtils = sharedPreferencesUtils;\n     isGlobalAutomaticDataCollectionEnabled =\n         new AtomicBoolean(firebaseApp.isDataCollectionDefaultEnabled());\n-    if (isAutomaticDataCollectionEnabled()) {\n-      // Trigger this as early as possible, to minimize any latencies on returning the token", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MDc2Ng==", "bodyText": "Builder here as well?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390390766", "createdAt": "2020-03-10T15:14:52Z", "author": {"login": "vkryachko"}, "path": "firebase-inappmessaging/src/test/java/com/google/firebase/inappmessaging/FirebaseInAppMessagingTest.java", "diffHunk": "@@ -167,11 +165,34 @@ public void setup() {\n \n     when(campaignCacheClient.get()).thenReturn(Maybe.just(campaignsResponse));\n \n-    when(firebaseInstanceId.getId()).thenReturn(INSTANCE_ID);\n-    when(firebaseInstanceId.getToken()).thenReturn(INSTANCE_TOKEN);\n+    when(firebaseInstallations.getId()).thenReturn(Tasks.forResult(INSTANCE_ID));\n+    when(firebaseInstallations.getToken(false))\n+        .thenReturn(\n+            Tasks.forResult(\n+                new InstallationTokenResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MTA2MA==", "bodyText": "Could this be deleted?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390391060", "createdAt": "2020-03-10T15:15:14Z", "author": {"login": "vkryachko"}, "path": "firebase-inappmessaging/src/test/java/com/google/firebase/inappmessaging/FirebaseInAppMessagingTest.java", "diffHunk": "@@ -307,11 +336,11 @@ public void messageClicked(InAppMessage inAppMessage, Action action) {\n     verify(listenerScheduler, times(1)).addClickListener(any());\n   }\n \n-  @Implements(FirebaseInstanceId.class)\n-  public static class ShadowFirebaseInstanceId {\n-    @Implementation\n-    public static FirebaseInstanceId getInstance() {\n-      return firebaseInstanceId;\n-    }\n-  }\n+  //  @Implements(FirebaseInstanceId.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MTIzOA==", "bodyText": "Builder here and throughout", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390391238", "createdAt": "2020-03-10T15:15:25Z", "author": {"login": "vkryachko"}, "path": "firebase-inappmessaging/src/test/java/com/google/firebase/inappmessaging/internal/ApiClientTest.java", "diffHunk": "@@ -118,26 +118,37 @@ public void setup() throws NameNotFoundException {\n             () -> mockGrpcClient,\n             firebaseApp,\n             application,\n-            firebaseInstanceId,\n+            firebaseInstallations,\n             dataCollectionHelper,\n             clock,\n             providerInstaller);\n     when(application.getPackageName()).thenReturn(PACKAGE_NAME);\n     when(packageManager.getPackageInfo(PACKAGE_NAME, 0)).thenReturn(packageInfo);\n-    when(firebaseInstanceId.getInstanceId())\n+    when(firebaseInstallations.getId()).thenReturn(Tasks.forResult(INSTANCE_ID));\n+    when(firebaseInstallations.getToken(false))\n         .thenReturn(\n             Tasks.forResult(\n-                new InstanceIdResult() {\n+                new InstallationTokenResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f82b3bb76462acb02c651d5c6a414d2455e01820", "author": {"user": {"login": "JasonAHeron", "name": "Jason Heron"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/f82b3bb76462acb02c651d5c6a414d2455e01820", "committedDate": "2020-03-10T18:51:59Z", "message": "review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96b082b83bd96b29782bf412ddae4de623d48286", "author": {"user": {"login": "JasonAHeron", "name": "Jason Heron"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/96b082b83bd96b29782bf412ddae4de623d48286", "committedDate": "2020-03-10T19:02:59Z", "message": "make test pass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45af5dd58843ea91f7258a7ee666cac1869ff1ba", "author": {"user": {"login": "JasonAHeron", "name": "Jason Heron"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/45af5dd58843ea91f7258a7ee666cac1869ff1ba", "committedDate": "2020-03-10T19:03:11Z", "message": "bite"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMjg0MTE2", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#pullrequestreview-372284116", "createdAt": "2020-03-10T20:08:57Z", "commit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDowODo1OFrOF0fJoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDowODo1OFrOF0fJoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4MDY0MA==", "bodyText": "I am actually not sure that null can be returned at all from those tasks, if an error happened getResult() will throw that error so I think it should be fine in terms of error handling.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390580640", "createdAt": "2020-03-10T20:08:58Z", "author": {"login": "vkryachko"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ApiClient.java", "diffHunk": "@@ -89,28 +89,35 @@ static FetchEligibleCampaignsResponse createCacheExpiringResponse() {\n     }\n     Logging.logi(FETCHING_CAMPAIGN_MESSAGE);\n     providerInstaller.install();\n-    return firebaseInstanceId\n-        .getInstanceId()\n-        .continueWith(\n-            instanceIdResultTask -> {\n-              InstanceIdResult instanceIdResult = instanceIdResultTask.getResult();\n-              if (instanceIdResult == null) {\n-                Logging.logw(\"InstanceID is null, not calling backend\");\n-                return createCacheExpiringResponse();\n-              }\n-              return withCacheExpirationSafeguards(\n-                  grpcClient\n-                      .get()\n-                      .fetchEligibleCampaigns(\n-                          FetchEligibleCampaignsRequest.newBuilder()\n-                              // The project Id we expect is the gcm sender id\n-                              .setProjectNumber(firebaseApp.getOptions().getGcmSenderId())\n-                              .addAllAlreadySeenCampaigns(\n-                                  impressionList.getAlreadySeenCampaignsList())\n-                              .setClientSignals(getClientSignals())\n-                              .setRequestingClientApp(getClientAppInfo(instanceIdResult))\n-                              .build()));\n-            });\n+    return firebaseInstallations\n+        .getId()\n+        .continueWithTask(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NDQ3MA=="}, "originalCommit": {"oid": "21a83375ab49aa3bf4e16bc8ec2934b074b4c16f"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8feabafde7c04018f2b75e646d05d41d79eeed2", "author": {"user": {"login": "JasonAHeron", "name": "Jason Heron"}}, "url": "https://github.com/firebase/firebase-android-sdk/commit/d8feabafde7c04018f2b75e646d05d41d79eeed2", "committedDate": "2020-03-10T20:13:07Z", "message": "fixtest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzQ0ODI1", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#pullrequestreview-372344825", "createdAt": "2020-03-10T21:46:34Z", "commit": {"oid": "d8feabafde7c04018f2b75e646d05d41d79eeed2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo0NjozNFrOF0iMAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo0NjozNFrOF0iMAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzMDQwMQ==", "bodyText": "None of the tasks will return null. Its on me for not adding the annotations on the APIs. I will update that on my end.\nThe Tasks would throw exceptions which you might want to handle based on completion state.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390630401", "createdAt": "2020-03-10T21:46:34Z", "author": {"login": "ankitaj224"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/ApiClient.java", "diffHunk": "@@ -89,13 +89,15 @@ static FetchEligibleCampaignsResponse createCacheExpiringResponse() {\n     }\n     Logging.logi(FETCHING_CAMPAIGN_MESSAGE);\n     providerInstaller.install();\n-    return firebaseInstanceId\n-        .getInstanceId()\n+    Task<String> idTask = firebaseInstallations.getId();\n+    Task<InstallationTokenResult> tokenTask = firebaseInstallations.getToken(false);\n+    return Tasks.whenAll(idTask, tokenTask)\n         .continueWith(\n-            instanceIdResultTask -> {\n-              InstanceIdResult instanceIdResult = instanceIdResultTask.getResult();\n-              if (instanceIdResult == null) {\n-                Logging.logw(\"InstanceID is null, not calling backend\");\n+            (unused) -> {\n+              String idResult = idTask.getResult();\n+              InstallationTokenResult tokenResult = tokenTask.getResult();\n+              if (tokenResult == null || idResult == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8feabafde7c04018f2b75e646d05d41d79eeed2"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzQ2NDI3", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#pullrequestreview-372346427", "createdAt": "2020-03-10T21:49:41Z", "commit": {"oid": "d8feabafde7c04018f2b75e646d05d41d79eeed2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo0OTo0MVrOF0iRUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo0OTo0MVrOF0iRUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzMTc2MQ==", "bodyText": "nit: call it fid or instanceId to differentiate from any other type of id used in FIAM. Idk if there is one, just think it would avoid any confusion.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390631761", "createdAt": "2020-03-10T21:49:41Z", "author": {"login": "ankitaj224"}, "path": "firebase-inappmessaging/src/main/java/com/google/firebase/inappmessaging/internal/MetricsLoggerClient.java", "diffHunk": "@@ -83,78 +83,103 @@ public MetricsLoggerClient(\n       EngagementMetricsLoggerInterface engagementMetricsLogger,\n       AnalyticsConnector analyticsConnector,\n       FirebaseApp firebaseApp,\n-      FirebaseInstanceId firebaseInstanceId,\n+      FirebaseInstallationsApi firebaseInstallations,\n       Clock clock,\n       DeveloperListenerManager developerListenerManager) {\n     this.engagementMetricsLogger = engagementMetricsLogger;\n     this.analyticsConnector = analyticsConnector;\n     this.firebaseApp = firebaseApp;\n-    this.firebaseInstanceId = firebaseInstanceId;\n+    this.firebaseInstallations = firebaseInstallations;\n     this.clock = clock;\n     this.developerListenerManager = developerListenerManager;\n   }\n \n   /** Log impression */\n-  public void logImpression(InAppMessage message) {\n+  void logImpression(InAppMessage message) {\n     if (!isTestCampaign(message)) {\n       // If message is not a test message then log analytics\n-      engagementMetricsLogger.logEvent(\n-          createEventEntry(message, IMPRESSION_EVENT_TYPE).toByteArray());\n-      logEventAsync(\n-          message,\n-          AnalyticsConstants.ANALYTICS_IMPRESSION_EVENT,\n-          impressionCountsAsConversion(message));\n+      firebaseInstallations\n+          .getId()\n+          .addOnSuccessListener(\n+              id -> {\n+                engagementMetricsLogger.logEvent(\n+                    createEventEntry(message, id, IMPRESSION_EVENT_TYPE).toByteArray());\n+                logEventAsync(\n+                    message,\n+                    AnalyticsConstants.ANALYTICS_IMPRESSION_EVENT,\n+                    impressionCountsAsConversion(message));\n+              });\n     }\n     // No matter what, always trigger developer callbacks\n     developerListenerManager.impressionDetected(message);\n   }\n \n   /** Log click */\n-  public void logMessageClick(InAppMessage message, Action action) {\n+  void logMessageClick(InAppMessage message, Action action) {\n     if (!isTestCampaign(message)) {\n       // If message is not a test message then log analytics\n-      engagementMetricsLogger.logEvent(createEventEntry(message, CLICK_EVENT_TYPE).toByteArray());\n-      logEventAsync(message, AnalyticsConstants.ANALYTICS_ACTION_EVENT, true);\n+      firebaseInstallations\n+          .getId()\n+          .addOnSuccessListener(\n+              id -> {\n+                engagementMetricsLogger.logEvent(\n+                    createEventEntry(message, id, CLICK_EVENT_TYPE).toByteArray());\n+                logEventAsync(message, AnalyticsConstants.ANALYTICS_ACTION_EVENT, true);\n+              });\n     }\n     // No matter what, always trigger developer callbacks\n     developerListenerManager.messageClicked(message, action);\n   }\n \n   /** Log Rendering error */\n-  public void logRenderError(InAppMessage message, InAppMessagingErrorReason errorReason) {\n+  void logRenderError(InAppMessage message, InAppMessagingErrorReason errorReason) {\n     if (!isTestCampaign(message)) {\n       // If message is not a test message then log analytics\n-      engagementMetricsLogger.logEvent(\n-          createRenderErrorEntry(message, errorTransform.get(errorReason)).toByteArray());\n+      firebaseInstallations\n+          .getId()\n+          .addOnSuccessListener(\n+              id ->\n+                  engagementMetricsLogger.logEvent(\n+                      createRenderErrorEntry(message, id, errorTransform.get(errorReason))\n+                          .toByteArray()));\n     }\n     // No matter what, always trigger developer callbacks\n     developerListenerManager.displayErrorEncountered(message, errorReason);\n   }\n \n   /** Log dismiss */\n-  public void logDismiss(InAppMessage message, InAppMessagingDismissType dismissType) {\n+  void logDismiss(InAppMessage message, InAppMessagingDismissType dismissType) {\n     if (!isTestCampaign(message)) {\n       // If message is not a test message then log analytics\n-      engagementMetricsLogger.logEvent(\n-          createDismissEntry(message, dismissTransform.get(dismissType)).toByteArray());\n-      logEventAsync(message, AnalyticsConstants.ANALYTICS_DISMISS_EVENT, false);\n+      firebaseInstallations\n+          .getId()\n+          .addOnSuccessListener(\n+              id -> {\n+                engagementMetricsLogger.logEvent(\n+                    createDismissEntry(message, id, dismissTransform.get(dismissType))\n+                        .toByteArray());\n+                logEventAsync(message, AnalyticsConstants.ANALYTICS_DISMISS_EVENT, false);\n+              });\n     }\n   }\n \n-  private CampaignAnalytics createEventEntry(InAppMessage message, EventType eventType) {\n-    return createCampaignAnalyticsBuilder(message).setEventType(eventType).build();\n+  private CampaignAnalytics createEventEntry(InAppMessage message, String id, EventType eventType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8feabafde7c04018f2b75e646d05d41d79eeed2"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzQ4MzY0", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#pullrequestreview-372348364", "createdAt": "2020-03-10T21:53:27Z", "commit": {"oid": "d8feabafde7c04018f2b75e646d05d41d79eeed2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo1MzoyN1rOF0iX_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTo1MzoyN1rOF0iX_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYzMzQ3MQ==", "bodyText": "Wondering if you should depend on the released version vs the HEAD? Idk whats the standard way in firebase.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1332#discussion_r390633471", "createdAt": "2020-03-10T21:53:27Z", "author": {"login": "ankitaj224"}, "path": "firebase-inappmessaging/firebase-inappmessaging.gradle", "diffHunk": "@@ -116,17 +116,17 @@ dependencies {\n     implementation project(':protolite-well-known-types')\n     implementation project(':transport:transport-api')\n     implementation project(':firebase-datatransport')\n+    implementation project(':firebase-installations-interop')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8feabafde7c04018f2b75e646d05d41d79eeed2"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2155, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}