{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NzI1NzUx", "number": 1813, "title": "inital implementation of AnnotationFieldHandler", "bodyText": "", "createdAt": "2020-07-23T13:54:41Z", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813", "merged": true, "mergeCommit": {"oid": "5a3a6e894cd3e9efc3d6c713ced83565c449b2ff"}, "closed": true, "closedAt": "2020-07-24T20:08:25Z", "author": {"login": "James201311"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3wO5hAFqTQ1NDE2NTE3Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc4JMCUAH2gAyNDU1NzI1NzUxOjA5NjZlMGJkNDUwMWNhZDE0OGQ5MTA0N2NlMTQyMWUzNzdhZTg3ODQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTY1MTcy", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#pullrequestreview-454165172", "createdAt": "2020-07-23T14:04:04Z", "commit": {"oid": "2f323b77c79fdcebd7ea8d632c606818180f6bf4"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDowNDowNFrOG2MFNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoyMzoyNFrOG2M8rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NDIzMQ==", "bodyText": "The map is an implementation detail, let's only expose the Set<Annotation>.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#discussion_r459474231", "createdAt": "2020-07-23T14:04:04Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-encoders-json/src/main/java/com/google/firebase/encoders/FieldDescriptor.java", "diffHunk": "@@ -64,7 +64,12 @@ public String getName() {\n   @Nullable\n   @SuppressWarnings(\"unchecked\")\n   public <T extends Annotation> T getProperty(@NonNull Class<T> type) {\n-    return (T) properties.get(type);\n+    return type.cast(properties.get(type));\n+  }\n+\n+  @NonNull\n+  public Map<Class<? extends Annotation>, Annotation> getProperties() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f323b77c79fdcebd7ea8d632c606818180f6bf4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NDU2NA==", "bodyText": "curious why this change was needed?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#discussion_r459474564", "createdAt": "2020-07-23T14:04:33Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-encoders-json/src/main/java/com/google/firebase/encoders/FieldDescriptor.java", "diffHunk": "@@ -64,7 +64,12 @@ public String getName() {\n   @Nullable\n   @SuppressWarnings(\"unchecked\")\n   public <T extends Annotation> T getProperty(@NonNull Class<T> type) {\n-    return (T) properties.get(type);\n+    return type.cast(properties.get(type));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f323b77c79fdcebd7ea8d632c606818180f6bf4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NDkyNw==", "bodyText": "pls revert this change", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#discussion_r459474927", "createdAt": "2020-07-23T14:05:01Z", "author": {"login": "vkryachko"}, "path": "gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -1,6 +1,6 @@\n-#Mon May 21 15:18:27 PDT 2018\n+#Wed Jul 22 15:50:08 ADT 2020\n distributionBase=GRADLE_USER_HOME\n distributionPath=wrapper/dists\n zipStoreBase=GRADLE_USER_HOME\n zipStorePath=wrapper/dists\n-distributionUrl=https\\://services.gradle.org/distributions/gradle-5.4.1-all.zip\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-5.6.4-all.zip", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f323b77c79fdcebd7ea8d632c606818180f6bf4"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NTAxNg==", "bodyText": "pls revert this change", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#discussion_r459475016", "createdAt": "2020-07-23T14:05:08Z", "author": {"login": "vkryachko"}, "path": "build.gradle", "diffHunk": "@@ -29,7 +29,7 @@ buildscript {\n     }\n \n     dependencies {\n-        classpath 'com.android.tools.build:gradle:3.4.2'\n+        classpath 'com.android.tools.build:gradle:3.6.1'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f323b77c79fdcebd7ea8d632c606818180f6bf4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NTY3MA==", "bodyText": "let's make this final, as well as objectDecoders above.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#discussion_r459475670", "createdAt": "2020-07-23T14:05:57Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java", "diffHunk": "@@ -38,11 +42,19 @@\n       new HashMap<>();\n   private Map<TypeToken.ClassToken<?>, TypeCreator<?>> typeCreators = new HashMap<>();\n   private JsonReader reader;\n+  private Map<Class<?>, FieldModifier<?>> fieldModifier = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f323b77c79fdcebd7ea8d632c606818180f6bf4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NTk0Mw==", "bodyText": "I assume this argument should be @NonNull as well?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#discussion_r459475943", "createdAt": "2020-07-23T14:06:24Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java", "diffHunk": "@@ -38,11 +42,19 @@\n       new HashMap<>();\n   private Map<TypeToken.ClassToken<?>, TypeCreator<?>> typeCreators = new HashMap<>();\n   private JsonReader reader;\n+  private Map<Class<?>, FieldModifier<?>> fieldModifier = new HashMap<>();\n \n   JsonDataDecoderBuilderContext(@NonNull Map<Class<?>, ObjectDecoder<?>> objectDecoders) {\n     this.objectDecoders = objectDecoders;\n   }\n \n+  JsonDataDecoderBuilderContext(\n+      @NonNull Map<Class<?>, ObjectDecoder<?>> objectDecoders,\n+      Map<Class<?>, FieldModifier<?>> fieldModifier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f323b77c79fdcebd7ea8d632c606818180f6bf4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MjMwNQ==", "bodyText": "I don't think we should throw in this case. I might not care about a particular annotation but still want to be able to decode.\nA hypothetical example: decode pojo from a firebase function call and save into firestore. the pojo could contain @DocumentId, but functions don't care about it, so they will just ignore it as opposed to failing to decode.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#discussion_r459482305", "createdAt": "2020-07-23T14:15:04Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java", "diffHunk": "@@ -166,15 +178,42 @@\n     ObjectDecoderContextImpl<T> decoderCtx = getObjectDecodersCtx(classToken);\n     reader.beginObject();\n     while (reader.hasNext()) {\n-      String fieldName = reader.nextName();\n-      FieldRef<?> fieldRef = decoderCtx.getFieldRef(fieldName);\n-      creationCtx.put(fieldRef, decode(fieldRef.getTypeToken()));\n+      decodeField(decoderCtx, creationCtx);\n     }\n     reader.endObject();\n     decoderCtx.decodeInlineObjIfAny(creationCtx);\n     return creationCtx;\n   }\n \n+  private <T> void decodeField(ObjectDecoderContextImpl<T> decoderCtx, CreationContextImpl creationCtx) throws IOException {\n+    String fieldName = reader.nextName();\n+    FieldRef<?> fieldRef = decoderCtx.getFieldRef(fieldName);\n+    FieldDescriptor fieldDescriptor = decoderCtx.getFieldDescriptors(fieldName);\n+    Object val = decodeField(fieldRef.getTypeToken(), fieldDescriptor);\n+    creationCtx.put(fieldRef, val);\n+  }\n+\n+  private <TField, U extends Annotation> TField decodeField(TypeToken<TField> fieldTypeToken, FieldDescriptor fieldDescriptor) throws IOException {\n+    TField val = decode(fieldTypeToken);\n+\n+    //apply annotation modifier\n+    for (Class<? extends Annotation> annotationType: fieldDescriptor.getProperties().keySet()) {\n+      val = applyFieldModifier(annotationType, fieldDescriptor, val, fieldTypeToken.getRawType());\n+    }\n+    return val;\n+  }\n+\n+  private <TField, U extends Annotation> TField applyFieldModifier(Class<U> annotationType, FieldDescriptor fieldDescriptor, TField value, Class<TField> fieldType) {\n+    @SuppressWarnings(\"unchecked\") //Safe, because each entry in fieldModifier always have the same type parameter\n+    FieldModifier<U> modifier = (FieldModifier<U>) fieldModifier.get(annotationType);\n+    U annotation = fieldDescriptor.getProperty(annotationType);\n+    if (modifier == null)\n+      throw new IllegalArgumentException(\"FieldModifier: \" + annotationType + \" is not registered.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f323b77c79fdcebd7ea8d632c606818180f6bf4"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4NDQ3NQ==", "bodyText": "pls use curly braces everywhere: https://google.github.io/styleguide/javaguide.html#s4.1.1-braces-always-used", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#discussion_r459484475", "createdAt": "2020-07-23T14:17:58Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java", "diffHunk": "@@ -166,15 +178,42 @@\n     ObjectDecoderContextImpl<T> decoderCtx = getObjectDecodersCtx(classToken);\n     reader.beginObject();\n     while (reader.hasNext()) {\n-      String fieldName = reader.nextName();\n-      FieldRef<?> fieldRef = decoderCtx.getFieldRef(fieldName);\n-      creationCtx.put(fieldRef, decode(fieldRef.getTypeToken()));\n+      decodeField(decoderCtx, creationCtx);\n     }\n     reader.endObject();\n     decoderCtx.decodeInlineObjIfAny(creationCtx);\n     return creationCtx;\n   }\n \n+  private <T> void decodeField(ObjectDecoderContextImpl<T> decoderCtx, CreationContextImpl creationCtx) throws IOException {\n+    String fieldName = reader.nextName();\n+    FieldRef<?> fieldRef = decoderCtx.getFieldRef(fieldName);\n+    FieldDescriptor fieldDescriptor = decoderCtx.getFieldDescriptors(fieldName);\n+    Object val = decodeField(fieldRef.getTypeToken(), fieldDescriptor);\n+    creationCtx.put(fieldRef, val);\n+  }\n+\n+  private <TField, U extends Annotation> TField decodeField(TypeToken<TField> fieldTypeToken, FieldDescriptor fieldDescriptor) throws IOException {\n+    TField val = decode(fieldTypeToken);\n+\n+    //apply annotation modifier\n+    for (Class<? extends Annotation> annotationType: fieldDescriptor.getProperties().keySet()) {\n+      val = applyFieldModifier(annotationType, fieldDescriptor, val, fieldTypeToken.getRawType());\n+    }\n+    return val;\n+  }\n+\n+  private <TField, U extends Annotation> TField applyFieldModifier(Class<U> annotationType, FieldDescriptor fieldDescriptor, TField value, Class<TField> fieldType) {\n+    @SuppressWarnings(\"unchecked\") //Safe, because each entry in fieldModifier always have the same type parameter\n+    FieldModifier<U> modifier = (FieldModifier<U>) fieldModifier.get(annotationType);\n+    U annotation = fieldDescriptor.getProperty(annotationType);\n+    if (modifier == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f323b77c79fdcebd7ea8d632c606818180f6bf4"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4NTU3Mw==", "bodyText": "instead of iterating the types, I suggest you iterate the values, then you don't need to pass the fieldDescriptor to applyFieldModifier().\nTo get the type of the annotation you can just do annotation.annotationType().", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#discussion_r459485573", "createdAt": "2020-07-23T14:19:32Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java", "diffHunk": "@@ -166,15 +178,42 @@\n     ObjectDecoderContextImpl<T> decoderCtx = getObjectDecodersCtx(classToken);\n     reader.beginObject();\n     while (reader.hasNext()) {\n-      String fieldName = reader.nextName();\n-      FieldRef<?> fieldRef = decoderCtx.getFieldRef(fieldName);\n-      creationCtx.put(fieldRef, decode(fieldRef.getTypeToken()));\n+      decodeField(decoderCtx, creationCtx);\n     }\n     reader.endObject();\n     decoderCtx.decodeInlineObjIfAny(creationCtx);\n     return creationCtx;\n   }\n \n+  private <T> void decodeField(ObjectDecoderContextImpl<T> decoderCtx, CreationContextImpl creationCtx) throws IOException {\n+    String fieldName = reader.nextName();\n+    FieldRef<?> fieldRef = decoderCtx.getFieldRef(fieldName);\n+    FieldDescriptor fieldDescriptor = decoderCtx.getFieldDescriptors(fieldName);\n+    Object val = decodeField(fieldRef.getTypeToken(), fieldDescriptor);\n+    creationCtx.put(fieldRef, val);\n+  }\n+\n+  private <TField, U extends Annotation> TField decodeField(TypeToken<TField> fieldTypeToken, FieldDescriptor fieldDescriptor) throws IOException {\n+    TField val = decode(fieldTypeToken);\n+\n+    //apply annotation modifier\n+    for (Class<? extends Annotation> annotationType: fieldDescriptor.getProperties().keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f323b77c79fdcebd7ea8d632c606818180f6bf4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4ODQzMQ==", "bodyText": "I don't think IllegalArgumentException is appropriate here, it usually indicates that the caller of the library provided some incorrect input. In this case it seems that the only time this could happen is if there is a bug in the library implementation, pls double check if that is the case and if so, change to AssertionError.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#discussion_r459488431", "createdAt": "2020-07-23T14:23:24Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/ObjectDecoderContextImpl.java", "diffHunk": "@@ -47,6 +48,15 @@ private ObjectDecoderContextImpl(TypeToken.ClassToken<T> classToken) {\n     }\n   }\n \n+  @NonNull\n+  FieldDescriptor getFieldDescriptors(@NonNull String fieldName) {\n+    if (fieldDescriptors.containsKey(fieldName)) {\n+      return fieldDescriptors.get(fieldName);\n+    } else {\n+      throw new IllegalArgumentException(fieldName + \" was not register in ObjectDecoder.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f323b77c79fdcebd7ea8d632c606818180f6bf4"}, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "373dc6438d2b9424196f4b50ca18c808823c404d", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/373dc6438d2b9424196f4b50ca18c808823c404d", "committedDate": "2020-07-23T16:37:58Z", "message": "address comments"}, "afterCommit": {"oid": "dbfa324a9934820a14eea31fd005b1b7ef9f44ce", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/dbfa324a9934820a14eea31fd005b1b7ef9f44ce", "committedDate": "2020-07-23T16:47:03Z", "message": "revert gradle changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MzgzNTUw", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#pullrequestreview-454383550", "createdAt": "2020-07-23T18:16:55Z", "commit": {"oid": "e1aa73654589761316b90bed4e350804119a5590"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoxNjo1NVrOG2WLlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo0OTo0M1rOG2XS3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzOTcwMg==", "bodyText": "nit: since it only handles annotated fields, would it make sense to name it like AnnotatedFieldHandler?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#discussion_r459639702", "createdAt": "2020-07-23T18:16:55Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/FieldModifier.java", "diffHunk": "@@ -0,0 +1,24 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import java.lang.annotation.Annotation;\n+\n+public interface FieldModifier<U extends Annotation> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1aa73654589761316b90bed4e350804119a5590"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MDcxOA==", "bodyText": "I think you can just replace the processor with an inline lambda expression here, wdyt?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#discussion_r459640718", "createdAt": "2020-07-23T18:18:45Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/test/java/com/google/firebase/decoders/json/JsonDataDecoderExtraPropertyTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.decoders.json;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.decoders.FieldModifier;\n+import com.google.firebase.decoders.FieldRef;\n+import com.google.firebase.decoders.ObjectDecoder;\n+import com.google.firebase.decoders.ObjectDecoderContext;\n+import com.google.firebase.decoders.Safe;\n+import com.google.firebase.decoders.TypeCreator;\n+import com.google.firebase.decoders.TypeToken;\n+import com.google.firebase.encoders.FieldDescriptor;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.annotation.Annotation;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class JsonDataDecoderExtraPropertyTest {\n+\n+  @Retention(RetentionPolicy.RUNTIME)\n+  @Target({ElementType.METHOD, ElementType.FIELD})\n+  private @interface Default {\n+    String value();\n+\n+    Default INSTANCE = new DefaultImpl();\n+\n+    class DefaultImpl implements Default {\n+      @Override\n+      public Class<? extends Annotation> annotationType() {\n+        return Default.class;\n+      }\n+\n+      @Override\n+      public String value() {\n+        return \"default\";\n+      }\n+\n+      @Override\n+      public boolean equals(Object obj) {\n+        return super.equals(obj);\n+      }\n+\n+      @Override\n+      public int hashCode() {\n+        return super.hashCode();\n+      }\n+    }\n+  }\n+\n+  private FieldModifier<Default> processor =\n+      new FieldModifier<Default>() {\n+        @Nullable\n+        @Override\n+        public <T> T apply(\n+            @NonNull Default annotation, @Nullable T fieldDecodedResult, @NonNull Class<T> type) {\n+          if (fieldDecodedResult == null) {\n+            if (type.equals(String.class)) return (T) annotation.value();\n+          }\n+          return fieldDecodedResult;\n+        }\n+      };\n+\n+  static class Foo {\n+    @Default(\"default\")\n+    String str;\n+\n+    Foo(String str) {\n+      this.str = str;\n+    }\n+  }\n+\n+  static class FooObjectDecoder implements ObjectDecoder<Foo> {\n+    @NonNull\n+    @Override\n+    public TypeCreator<Foo> decode(@NonNull ObjectDecoderContext<Foo> ctx) {\n+      FieldDescriptor strFieldDescriptor =\n+          FieldDescriptor.builder(\"str\").withProperty(Default.INSTANCE).build();\n+      FieldRef.Boxed<String> strField = ctx.decode(strFieldDescriptor, TypeToken.of(String.class));\n+      return (creationCtx -> new Foo(creationCtx.get(strField)));\n+    }\n+  }\n+\n+  @Test\n+  public void customizedAnnotation_shouldProcessCorrectly() throws IOException {\n+    Map<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n+    Map<Class<?>, FieldModifier<?>> processors = new HashMap<>();\n+\n+    objectDecoders.put(Foo.class, new FooObjectDecoder());\n+    processors.put(Default.class, processor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1aa73654589761316b90bed4e350804119a5590"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MTAyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                this.objectDecoders = objectDecoders;\n          \n          \n            \n                this.fieldModifier = Collections.emptyMap();\n          \n          \n            \n                this(objectDecoders, Collections.emptyMap());", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#discussion_r459641027", "createdAt": "2020-07-23T18:19:23Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/json/java/com/google/firebase/decoders/json/JsonDataDecoderBuilderContext.java", "diffHunk": "@@ -46,14 +50,23 @@\n import java.util.TreeSet;\n \n public class JsonDataDecoderBuilderContext implements DataDecoder {\n-  private Map<Class<?>, ObjectDecoder<?>> objectDecoders = new HashMap<>();\n+  private final Map<Class<?>, ObjectDecoder<?>> objectDecoders;\n   private Map<TypeToken.ClassToken<?>, ObjectDecoderContextImpl<?>> objectDecoderContexts =\n       new HashMap<>();\n   private Map<TypeToken.ClassToken<?>, TypeCreator<?>> typeCreators = new HashMap<>();\n   private JsonReader reader;\n+  private final Map<Class<?>, FieldModifier<?>> fieldModifier;\n \n   JsonDataDecoderBuilderContext(@NonNull Map<Class<?>, ObjectDecoder<?>> objectDecoders) {\n     this.objectDecoders = objectDecoders;\n+    this.fieldModifier = Collections.emptyMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1aa73654589761316b90bed4e350804119a5590"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NTU2NA==", "bodyText": "looks like you forgot to remove it", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#discussion_r459655564", "createdAt": "2020-07-23T18:45:23Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-encoders-json/src/main/java/com/google/firebase/encoders/FieldDescriptor.java", "diffHunk": "@@ -64,7 +64,12 @@ public String getName() {\n   @Nullable\n   @SuppressWarnings(\"unchecked\")\n   public <T extends Annotation> T getProperty(@NonNull Class<T> type) {\n-    return (T) properties.get(type);\n+    return type.cast(properties.get(type));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ3NDU2NA=="}, "originalCommit": {"oid": "2f323b77c79fdcebd7ea8d632c606818180f6bf4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NjY1NQ==", "bodyText": "Instead of copying, consider using Collections.unmodifiableSet(properties.values()), this would prevent modification and avoid a full copy.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#discussion_r459656655", "createdAt": "2020-07-23T18:47:25Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-encoders-json/src/main/java/com/google/firebase/encoders/FieldDescriptor.java", "diffHunk": "@@ -62,9 +64,13 @@ public String getName() {\n    * @return {@code T} annotation if present, null otherwise.\n    */\n   @Nullable\n-  @SuppressWarnings(\"unchecked\")\n   public <T extends Annotation> T getProperty(@NonNull Class<T> type) {\n-    return (T) properties.get(type);\n+    return type.cast(properties.get(type));\n+  }\n+\n+  @NonNull\n+  public Set<Annotation> getAllAnnotations() {\n+    return new HashSet<>(properties.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1aa73654589761316b90bed4e350804119a5590"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1Nzk1MQ==", "bodyText": "furthermore, I think it would be even cleaner if you stored the properties above as this.properties = Collections.unmodifiableMap(properties). then you don't need to allocate a new unmodifiableSet here at all, just return properties.values()", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#discussion_r459657951", "createdAt": "2020-07-23T18:49:43Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-encoders-json/src/main/java/com/google/firebase/encoders/FieldDescriptor.java", "diffHunk": "@@ -62,9 +64,13 @@ public String getName() {\n    * @return {@code T} annotation if present, null otherwise.\n    */\n   @Nullable\n-  @SuppressWarnings(\"unchecked\")\n   public <T extends Annotation> T getProperty(@NonNull Class<T> type) {\n-    return (T) properties.get(type);\n+    return type.cast(properties.get(type));\n+  }\n+\n+  @NonNull\n+  public Set<Annotation> getAllAnnotations() {\n+    return new HashSet<>(properties.values());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NjY1NQ=="}, "originalCommit": {"oid": "e1aa73654589761316b90bed4e350804119a5590"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0OTM2NjA3", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#pullrequestreview-454936607", "createdAt": "2020-07-24T14:32:31Z", "commit": {"oid": "38c1f1e1c26f13874a78c5686233dbbe9a61fe09"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDozMjozMVrOG2xteQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDozMjozMVrOG2xteQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5MDc0NQ==", "bodyText": "Worth also noting that annotations themselves need to be annotated with @ExtraProperty", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#discussion_r460090745", "createdAt": "2020-07-24T14:32:31Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-decoders-json/src/main/java/com/google/firebase/decoders/AnnotatedFieldHandler.java", "diffHunk": "@@ -18,7 +18,21 @@\n import androidx.annotation.Nullable;\n import java.lang.annotation.Annotation;\n \n-public interface FieldModifier<U extends Annotation> {\n+/**\n+ * {@link AnnotatedFieldHandler} provide a way to handle field values based on its annotation.\n+ *\n+ * <p>Each annotation type should be registered along with associated {@link AnnotatedFieldHandler},\n+ * non-registered annotation will be skipped in the process of decoding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c1f1e1c26f13874a78c5686233dbbe9a61fe09"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0OTQyNDU3", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#pullrequestreview-454942457", "createdAt": "2020-07-24T14:39:54Z", "commit": {"oid": "38c1f1e1c26f13874a78c5686233dbbe9a61fe09"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDozOTo1NFrOG2x--w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDozOTo1NFrOG2x--w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NTIyNw==", "bodyText": "please also change the constructor to this.properties = Collections.unmodifiableMap(properties)", "url": "https://github.com/firebase/firebase-android-sdk/pull/1813#discussion_r460095227", "createdAt": "2020-07-24T14:39:54Z", "author": {"login": "vkryachko"}, "path": "encoders/firebase-encoders-json/src/main/java/com/google/firebase/encoders/FieldDescriptor.java", "diffHunk": "@@ -64,13 +63,14 @@ public String getName() {\n    * @return {@code T} annotation if present, null otherwise.\n    */\n   @Nullable\n+  @SuppressWarnings(\"unchecked\")\n   public <T extends Annotation> T getProperty(@NonNull Class<T> type) {\n-    return type.cast(properties.get(type));\n+    return (T) properties.get(type);\n   }\n \n   @NonNull\n-  public Set<Annotation> getAllAnnotations() {\n-    return new HashSet<>(properties.values());\n+  public Collection<Annotation> getAllAnnotations() {\n+    return properties.values();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c1f1e1c26f13874a78c5686233dbbe9a61fe09"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8c5c9d4309e43f48912e64e8060b1f8c1af686b", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/a8c5c9d4309e43f48912e64e8060b1f8c1af686b", "committedDate": "2020-07-24T18:37:59Z", "message": "inital implementation of Reflective Decoder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b243d3a4de09a6dfd8ea259db1be9b157678e535", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/b243d3a4de09a6dfd8ea259db1be9b157678e535", "committedDate": "2020-07-24T18:37:59Z", "message": "update formate & api file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89356db09d65203feb94ce43c67c8ce40d828ba8", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/89356db09d65203feb94ce43c67c8ce40d828ba8", "committedDate": "2020-07-24T18:39:28Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0fb8f9aae43caa33fb4ed3040b615baf483b8c9", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/a0fb8f9aae43caa33fb4ed3040b615baf483b8c9", "committedDate": "2020-07-24T18:39:28Z", "message": "revert gradle changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f65f50d8cc9dc0eb390f206199a48860d1111182", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/f65f50d8cc9dc0eb390f206199a48860d1111182", "committedDate": "2020-07-24T18:39:28Z", "message": "update format & api file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9c560b4553581ffef4daef7fec3f67bc099e2aa", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/f9c560b4553581ffef4daef7fec3f67bc099e2aa", "committedDate": "2020-07-24T18:40:00Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfcc9910263f0f76d415cbe650995c34f3db2d77", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/bfcc9910263f0f76d415cbe650995c34f3db2d77", "committedDate": "2020-07-24T18:40:01Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d42dcac0cfb9293e227b5852c5ef602685edcabc", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/d42dcac0cfb9293e227b5852c5ef602685edcabc", "committedDate": "2020-07-24T18:40:01Z", "message": "update api file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c88ce4d89a08a5eb9322ee758b854476e699fd64", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/c88ce4d89a08a5eb9322ee758b854476e699fd64", "committedDate": "2020-07-24T18:40:01Z", "message": "update comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94c3dcdb8c4cc1ce2444f0b5a72b2fa831ab8b17", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/94c3dcdb8c4cc1ce2444f0b5a72b2fa831ab8b17", "committedDate": "2020-07-24T18:42:08Z", "message": "update api file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20b79101df6ec4f3ea3d1baa19be04368fe1fed4", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/20b79101df6ec4f3ea3d1baa19be04368fe1fed4", "committedDate": "2020-07-24T18:47:41Z", "message": "fix rebase issue"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "38c1f1e1c26f13874a78c5686233dbbe9a61fe09", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/38c1f1e1c26f13874a78c5686233dbbe9a61fe09", "committedDate": "2020-07-23T22:23:23Z", "message": "update api file"}, "afterCommit": {"oid": "20b79101df6ec4f3ea3d1baa19be04368fe1fed4", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/20b79101df6ec4f3ea3d1baa19be04368fe1fed4", "committedDate": "2020-07-24T18:47:41Z", "message": "fix rebase issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0966e0bd4501cad148d91047ce1421e377ae8784", "author": {"user": null}, "url": "https://github.com/firebase/firebase-android-sdk/commit/0966e0bd4501cad148d91047ce1421e377ae8784", "committedDate": "2020-07-24T19:28:08Z", "message": "update api fiel"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2598, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}