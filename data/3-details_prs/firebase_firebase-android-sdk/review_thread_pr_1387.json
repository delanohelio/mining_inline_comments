{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMjQwMTM3", "number": 1387, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDozNzowOFrODq9fJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMTowMToxOVrODq-AjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mzc0MTgyOnYy", "diffSide": "RIGHT", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsUncaughtExceptionHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDozNzowOFrOF7CGtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDozODo1NVrOF7CKmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0NDc4OQ==", "bodyText": "What do you think about making some of this output logged as errors, since they are basically logging failed asserts?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1387#discussion_r397444789", "createdAt": "2020-03-24T20:37:08Z", "author": {"login": "mrichards"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsUncaughtExceptionHandler.java", "diffHunk": "@@ -46,7 +46,13 @@ public CrashlyticsUncaughtExceptionHandler(\n   public void uncaughtException(Thread thread, Throwable ex) {\n     isHandlingException.set(true);\n     try {\n-      crashListener.onUncaughtException(settingsDataProvider, thread, ex);\n+      if (thread == null) {\n+        Logger.getLogger().d(\"Could not handle uncaught exception; null thread\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0f19696a0f568ed8c84d6bd106fcf7ea792f484"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0NTc4Nw==", "bodyText": "I think in this particular case that makes sense.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1387#discussion_r397445787", "createdAt": "2020-03-24T20:38:55Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/common/CrashlyticsUncaughtExceptionHandler.java", "diffHunk": "@@ -46,7 +46,13 @@ public CrashlyticsUncaughtExceptionHandler(\n   public void uncaughtException(Thread thread, Throwable ex) {\n     isHandlingException.set(true);\n     try {\n-      crashListener.onUncaughtException(settingsDataProvider, thread, ex);\n+      if (thread == null) {\n+        Logger.getLogger().d(\"Could not handle uncaught exception; null thread\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0NDc4OQ=="}, "originalCommit": {"oid": "b0f19696a0f568ed8c84d6bd106fcf7ea792f484"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzgyNzMyOnYy", "diffSide": "RIGHT", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMTowMToxOVrOF7C62A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMTowMToxOVrOF7C62A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1ODEzNg==", "bodyText": "This is a lot cleaner! \ud83d\ude0d", "url": "https://github.com/firebase/firebase-android-sdk/pull/1387#discussion_r397458136", "createdAt": "2020-03-24T21:01:19Z", "author": {"login": "mrichards"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/persistence/CrashlyticsReportPersistence.java", "diffHunk": "@@ -169,66 +184,52 @@ public void deleteFinalizedReport(String sessionId) {\n     }\n   }\n \n-  public void finalizeSessionWithNativeEvent(\n-      String sessionId, CrashlyticsReport.FilesPayload build) {\n-    final File outputDirectory = prepareDirectory(nativeReportsDirectory);\n-\n-    File sessionFile = new File(getSessionDirectoryById(sessionId), REPORT_FILE_NAME);\n-\n-    if (!sessionFile.exists()) {\n-      return;\n-    }\n-\n-    String textFile = readTextFile(sessionFile);\n-\n-    if (textFile == null) {\n-      return;\n-    }\n-\n-    CrashlyticsReport report = TRANSFORM.reportFromJson(textFile);\n-\n-    // In the unlikely event the open non-native report has been cleaned up,\n-    // we no longer can retrieve the relevant context about the session.\n-    if (report == null) {\n-      return;\n-    }\n-\n-    report = report.withNdkPayload(build);\n-\n-    writeTextFile(new File(outputDirectory, sessionId), TRANSFORM.reportToJson(report));\n-  }\n-\n-  // TODO: Deal with potential runtime exceptions\n-  public void finalizeReports(String currentSessionId, long sessionEndTime) {\n-    // TODO: Need to implement procedure to skip finalizing the current session when this is\n-    //  called on app start, but keep the current session when called at crash time. Currently\n-    //  this only works when called at app start.\n-    List<File> sessionDirectories = capAndGetOpenSessions(currentSessionId);\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0f19696a0f568ed8c84d6bd106fcf7ea792f484"}, "originalPosition": 163}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1413, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}