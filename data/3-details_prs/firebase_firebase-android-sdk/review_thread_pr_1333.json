{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1ODM0NTQy", "number": 1333, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDowNzo0MVrODmijdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMzo0NTo0MVrOEm3KGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzM4NjE0OnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDowNzo0MVrOF0A6lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoyNjo1MVrOF0bqDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NTI2OA==", "bodyText": "this is in milliseconds?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390085268", "createdAt": "2020-03-10T04:07:41Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -39,6 +44,6 @@ public boolean isAuthTokenExpired(PersistedInstallationEntry entry) {\n \n   /** Returns current time in seconds. */\n   public long currentTimeInSecs() {\n-    return TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis());\n+    return TimeUnit.MILLISECONDS.toSeconds(clock.now());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwMjQ2Ng==", "bodyText": "Yes.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390502466", "createdAt": "2020-03-10T17:53:11Z", "author": {"login": "ankitaj224"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -39,6 +44,6 @@ public boolean isAuthTokenExpired(PersistedInstallationEntry entry) {\n \n   /** Returns current time in seconds. */\n   public long currentTimeInSecs() {\n-    return TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis());\n+    return TimeUnit.MILLISECONDS.toSeconds(clock.now());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NTI2OA=="}, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyMzQwNQ==", "bodyText": "Please add a comment confirming that.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390523405", "createdAt": "2020-03-10T18:26:51Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -39,6 +44,6 @@ public boolean isAuthTokenExpired(PersistedInstallationEntry entry) {\n \n   /** Returns current time in seconds. */\n   public long currentTimeInSecs() {\n-    return TimeUnit.MILLISECONDS.toSeconds(System.currentTimeMillis());\n+    return TimeUnit.MILLISECONDS.toSeconds(clock.now());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NTI2OA=="}, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzM5NDA4OnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/Clock.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDoxMjo1MlrOF0A_Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzo1Njo1N1rOF0ailQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjQyMg==", "bodyText": "Returns timestamp in milliseconds since EPOCH in UTC.\nReturns timestamp in milliseconds since EPOCH in local timezone.\n(whatever is the truth)", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390086422", "createdAt": "2020-03-10T04:12:52Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/Clock.java", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.time;\n+\n+/**\n+ * Provides the current value of \"now\" to allow injecting time as a dependency for testing.\n+ *\n+ * @hide\n+ */\n+public interface Clock {\n+  /** Returns the current, absolute time according to this clock. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwNTEwOQ==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390505109", "createdAt": "2020-03-10T17:56:57Z", "author": {"login": "ankitaj224"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/Clock.java", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.time;\n+\n+/**\n+ * Provides the current value of \"now\" to allow injecting time as a dependency for testing.\n+ *\n+ * @hide\n+ */\n+public interface Clock {\n+  /** Returns the current, absolute time according to this clock. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjQyMg=="}, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzM5NjAxOnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/Clock.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDoxNDowNVrOF0BALQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzo1MToyNlrOF0aUAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjcwMQ==", "bodyText": "What do we need this interface for?\nWhy can't we just use a TimeSource available in Android?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390086701", "createdAt": "2020-03-10T04:14:05Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/Clock.java", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.time;\n+\n+/**\n+ * Provides the current value of \"now\" to allow injecting time as a dependency for testing.\n+ *\n+ * @hide\n+ */\n+public interface Clock {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwMTM3Nw==", "bodyText": "#1333 (comment)", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390501377", "createdAt": "2020-03-10T17:51:26Z", "author": {"login": "ankitaj224"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/Clock.java", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.time;\n+\n+/**\n+ * Provides the current value of \"now\" to allow injecting time as a dependency for testing.\n+ *\n+ * @hide\n+ */\n+public interface Clock {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjcwMQ=="}, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzM5NjkxOnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/SystemClock.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDoxNDo0NFrOF0BArA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMzo0MjozMVrOHXIlHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjgyOA==", "bodyText": "I like your thought process, but I would prefer us to use a TimeSource that is offered by / available on Android.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390086828", "createdAt": "2020-03-10T04:14:44Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/SystemClock.java", "diffHunk": "@@ -0,0 +1,23 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.time;\n+\n+/** @hide */\n+public class SystemClock implements Clock {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwMTI4MA==", "bodyText": "The TimeSource that is offered by Android https://developer.android.com/reference/java/time/Clock - requires API level 26\nWe can't use it to due to the minSDK support.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390501280", "createdAt": "2020-03-10T17:51:16Z", "author": {"login": "ankitaj224"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/SystemClock.java", "diffHunk": "@@ -0,0 +1,23 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.time;\n+\n+/** @hide */\n+public class SystemClock implements Clock {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjgyOA=="}, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1MTUzMA==", "bodyText": "What about JodaTime? Just asking.\nI am fine with this implementation.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390651530", "createdAt": "2020-03-10T22:37:49Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/SystemClock.java", "diffHunk": "@@ -0,0 +1,23 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.time;\n+\n+/** @hide */\n+public class SystemClock implements Clock {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjgyOA=="}, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1ODM4Mw==", "bodyText": "We will have to add a dependency on joda-time:joda-time:2.9.4 library which will lead to increase in aar size just to fetch system time.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r493858383", "createdAt": "2020-09-23T19:56:51Z", "author": {"login": "ankitaj224"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/SystemClock.java", "diffHunk": "@@ -0,0 +1,23 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.time;\n+\n+/** @hide */\n+public class SystemClock implements Clock {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjgyOA=="}, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAxOTg3MQ==", "bodyText": "sg, ty\nplease add a comment in code above System.currentTimeMillies, documenting your decisions.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r494019871", "createdAt": "2020-09-24T03:42:31Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/SystemClock.java", "diffHunk": "@@ -0,0 +1,23 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.time;\n+\n+/** @hide */\n+public class SystemClock implements Clock {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjgyOA=="}, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzQyMjU2OnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/test/java/com/google/firebase/installations/FirebaseInstallationsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDozMzo0MlrOF0BQBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoxNjoxOVrOF0bRVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MDc1OA==", "bodyText": "line too long", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390090758", "createdAt": "2020-03-10T04:33:42Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/test/java/com/google/firebase/installations/FirebaseInstallationsTest.java", "diffHunk": "@@ -510,6 +513,90 @@ public void testGetId_multipleCalls_sameFIDReturned() throws Exception {\n     assertTrue(\"the entry isn't doesn't have a registered fid: \" + entry, entry.isRegistered());\n   }\n \n+  @Test\n+  public void testGetId_expiredAuthTokenUncheckedException_statusUpdated() throws Exception {\n+    // Start with a registered FID\n+    persistedInstallation.insertOrUpdatePersistedInstallationEntry(\n+        PersistedInstallationEntry.INSTANCE.withRegisteredFid(\n+            TEST_FID_1,\n+            TEST_REFRESH_TOKEN,\n+            utils.currentTimeInSecs(),\n+            TEST_AUTH_TOKEN,\n+            TEST_TOKEN_EXPIRATION_TIMESTAMP));\n+\n+    // Move the time forward by the token expiration time.\n+    fakeClock.advanceTimeBySeconds(TEST_TOKEN_EXPIRATION_TIMESTAMP);\n+\n+    // Mocking unchecked exception on FIS generateAuthToken\n+    when(mockBackend.generateAuthToken(anyString(), anyString(), anyString(), anyString()))\n+        .thenThrow(new IOException());\n+\n+    TestOnCompleteListener<String> onCompleteListener = new TestOnCompleteListener<>();\n+    Task<String> getIdTask = firebaseInstallations.getId();\n+    getIdTask.addOnCompleteListener(executor, onCompleteListener);\n+    String fid = onCompleteListener.await();\n+\n+    assertWithMessage(\"getId Task failed\").that(fid).isEqualTo(TEST_FID_1);\n+\n+    // Waiting for Task that generates auth token with the FIS Servers\n+    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n+\n+    // Validate that registration status is still REGISTER\n+    PersistedInstallationEntry entry = persistedInstallation.readPersistedInstallationEntryValue();\n+    assertThat(entry.getFirebaseInstallationId(), equalTo(TEST_FID_1));\n+    assertTrue(\"the entry doesn't have a registered fid: \" + entry, entry.isRegistered());\n+  }\n+\n+  /**\n+   * The FID is successfully registered but the token is expired. A getId will cause the token to be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxNzA3OA==", "bodyText": "https://github.com/firebase/firebase-android-sdk/pull/1333/files#r390516954", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390517078", "createdAt": "2020-03-10T18:16:19Z", "author": {"login": "ankitaj224"}, "path": "firebase-installations/src/test/java/com/google/firebase/installations/FirebaseInstallationsTest.java", "diffHunk": "@@ -510,6 +513,90 @@ public void testGetId_multipleCalls_sameFIDReturned() throws Exception {\n     assertTrue(\"the entry isn't doesn't have a registered fid: \" + entry, entry.isRegistered());\n   }\n \n+  @Test\n+  public void testGetId_expiredAuthTokenUncheckedException_statusUpdated() throws Exception {\n+    // Start with a registered FID\n+    persistedInstallation.insertOrUpdatePersistedInstallationEntry(\n+        PersistedInstallationEntry.INSTANCE.withRegisteredFid(\n+            TEST_FID_1,\n+            TEST_REFRESH_TOKEN,\n+            utils.currentTimeInSecs(),\n+            TEST_AUTH_TOKEN,\n+            TEST_TOKEN_EXPIRATION_TIMESTAMP));\n+\n+    // Move the time forward by the token expiration time.\n+    fakeClock.advanceTimeBySeconds(TEST_TOKEN_EXPIRATION_TIMESTAMP);\n+\n+    // Mocking unchecked exception on FIS generateAuthToken\n+    when(mockBackend.generateAuthToken(anyString(), anyString(), anyString(), anyString()))\n+        .thenThrow(new IOException());\n+\n+    TestOnCompleteListener<String> onCompleteListener = new TestOnCompleteListener<>();\n+    Task<String> getIdTask = firebaseInstallations.getId();\n+    getIdTask.addOnCompleteListener(executor, onCompleteListener);\n+    String fid = onCompleteListener.await();\n+\n+    assertWithMessage(\"getId Task failed\").that(fid).isEqualTo(TEST_FID_1);\n+\n+    // Waiting for Task that generates auth token with the FIS Servers\n+    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n+\n+    // Validate that registration status is still REGISTER\n+    PersistedInstallationEntry entry = persistedInstallation.readPersistedInstallationEntryValue();\n+    assertThat(entry.getFirebaseInstallationId(), equalTo(TEST_FID_1));\n+    assertTrue(\"the entry doesn't have a registered fid: \" + entry, entry.isRegistered());\n+  }\n+\n+  /**\n+   * The FID is successfully registered but the token is expired. A getId will cause the token to be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MDc1OA=="}, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzQyMjY2OnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/test/java/com/google/firebase/installations/FirebaseInstallationsTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDozMzo0N1rOF0BQGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjozOTo0OVrOF0jhmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MDc3OQ==", "bodyText": "line too long", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390090779", "createdAt": "2020-03-10T04:33:47Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/test/java/com/google/firebase/installations/FirebaseInstallationsTest.java", "diffHunk": "@@ -510,6 +513,90 @@ public void testGetId_multipleCalls_sameFIDReturned() throws Exception {\n     assertTrue(\"the entry isn't doesn't have a registered fid: \" + entry, entry.isRegistered());\n   }\n \n+  @Test\n+  public void testGetId_expiredAuthTokenUncheckedException_statusUpdated() throws Exception {\n+    // Start with a registered FID\n+    persistedInstallation.insertOrUpdatePersistedInstallationEntry(\n+        PersistedInstallationEntry.INSTANCE.withRegisteredFid(\n+            TEST_FID_1,\n+            TEST_REFRESH_TOKEN,\n+            utils.currentTimeInSecs(),\n+            TEST_AUTH_TOKEN,\n+            TEST_TOKEN_EXPIRATION_TIMESTAMP));\n+\n+    // Move the time forward by the token expiration time.\n+    fakeClock.advanceTimeBySeconds(TEST_TOKEN_EXPIRATION_TIMESTAMP);\n+\n+    // Mocking unchecked exception on FIS generateAuthToken\n+    when(mockBackend.generateAuthToken(anyString(), anyString(), anyString(), anyString()))\n+        .thenThrow(new IOException());\n+\n+    TestOnCompleteListener<String> onCompleteListener = new TestOnCompleteListener<>();\n+    Task<String> getIdTask = firebaseInstallations.getId();\n+    getIdTask.addOnCompleteListener(executor, onCompleteListener);\n+    String fid = onCompleteListener.await();\n+\n+    assertWithMessage(\"getId Task failed\").that(fid).isEqualTo(TEST_FID_1);\n+\n+    // Waiting for Task that generates auth token with the FIS Servers\n+    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n+\n+    // Validate that registration status is still REGISTER\n+    PersistedInstallationEntry entry = persistedInstallation.readPersistedInstallationEntryValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxNjk1NA==", "bodyText": "ran googleJavaFormat on this file and it seems correctly formatted as per the rules. Tried splitting the line but that throws lint errors.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390516954", "createdAt": "2020-03-10T18:16:07Z", "author": {"login": "ankitaj224"}, "path": "firebase-installations/src/test/java/com/google/firebase/installations/FirebaseInstallationsTest.java", "diffHunk": "@@ -510,6 +513,90 @@ public void testGetId_multipleCalls_sameFIDReturned() throws Exception {\n     assertTrue(\"the entry isn't doesn't have a registered fid: \" + entry, entry.isRegistered());\n   }\n \n+  @Test\n+  public void testGetId_expiredAuthTokenUncheckedException_statusUpdated() throws Exception {\n+    // Start with a registered FID\n+    persistedInstallation.insertOrUpdatePersistedInstallationEntry(\n+        PersistedInstallationEntry.INSTANCE.withRegisteredFid(\n+            TEST_FID_1,\n+            TEST_REFRESH_TOKEN,\n+            utils.currentTimeInSecs(),\n+            TEST_AUTH_TOKEN,\n+            TEST_TOKEN_EXPIRATION_TIMESTAMP));\n+\n+    // Move the time forward by the token expiration time.\n+    fakeClock.advanceTimeBySeconds(TEST_TOKEN_EXPIRATION_TIMESTAMP);\n+\n+    // Mocking unchecked exception on FIS generateAuthToken\n+    when(mockBackend.generateAuthToken(anyString(), anyString(), anyString(), anyString()))\n+        .thenThrow(new IOException());\n+\n+    TestOnCompleteListener<String> onCompleteListener = new TestOnCompleteListener<>();\n+    Task<String> getIdTask = firebaseInstallations.getId();\n+    getIdTask.addOnCompleteListener(executor, onCompleteListener);\n+    String fid = onCompleteListener.await();\n+\n+    assertWithMessage(\"getId Task failed\").that(fid).isEqualTo(TEST_FID_1);\n+\n+    // Waiting for Task that generates auth token with the FIS Servers\n+    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n+\n+    // Validate that registration status is still REGISTER\n+    PersistedInstallationEntry entry = persistedInstallation.readPersistedInstallationEntryValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MDc3OQ=="}, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1MjMxNA==", "bodyText": "Now, it looks fine too. Sorry about it.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390652314", "createdAt": "2020-03-10T22:39:49Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/test/java/com/google/firebase/installations/FirebaseInstallationsTest.java", "diffHunk": "@@ -510,6 +513,90 @@ public void testGetId_multipleCalls_sameFIDReturned() throws Exception {\n     assertTrue(\"the entry isn't doesn't have a registered fid: \" + entry, entry.isRegistered());\n   }\n \n+  @Test\n+  public void testGetId_expiredAuthTokenUncheckedException_statusUpdated() throws Exception {\n+    // Start with a registered FID\n+    persistedInstallation.insertOrUpdatePersistedInstallationEntry(\n+        PersistedInstallationEntry.INSTANCE.withRegisteredFid(\n+            TEST_FID_1,\n+            TEST_REFRESH_TOKEN,\n+            utils.currentTimeInSecs(),\n+            TEST_AUTH_TOKEN,\n+            TEST_TOKEN_EXPIRATION_TIMESTAMP));\n+\n+    // Move the time forward by the token expiration time.\n+    fakeClock.advanceTimeBySeconds(TEST_TOKEN_EXPIRATION_TIMESTAMP);\n+\n+    // Mocking unchecked exception on FIS generateAuthToken\n+    when(mockBackend.generateAuthToken(anyString(), anyString(), anyString(), anyString()))\n+        .thenThrow(new IOException());\n+\n+    TestOnCompleteListener<String> onCompleteListener = new TestOnCompleteListener<>();\n+    Task<String> getIdTask = firebaseInstallations.getId();\n+    getIdTask.addOnCompleteListener(executor, onCompleteListener);\n+    String fid = onCompleteListener.await();\n+\n+    assertWithMessage(\"getId Task failed\").that(fid).isEqualTo(TEST_FID_1);\n+\n+    // Waiting for Task that generates auth token with the FIS Servers\n+    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n+\n+    // Validate that registration status is still REGISTER\n+    PersistedInstallationEntry entry = persistedInstallation.readPersistedInstallationEntryValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MDc3OQ=="}, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzQyMjk2OnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/test/java/com/google/firebase/installations/FirebaseInstallationsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDozMzo1NVrOF0BQQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODoxNjoyNVrOF0bRog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MDgxNw==", "bodyText": "line too long", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390090817", "createdAt": "2020-03-10T04:33:55Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/test/java/com/google/firebase/installations/FirebaseInstallationsTest.java", "diffHunk": "@@ -510,6 +513,90 @@ public void testGetId_multipleCalls_sameFIDReturned() throws Exception {\n     assertTrue(\"the entry isn't doesn't have a registered fid: \" + entry, entry.isRegistered());\n   }\n \n+  @Test\n+  public void testGetId_expiredAuthTokenUncheckedException_statusUpdated() throws Exception {\n+    // Start with a registered FID\n+    persistedInstallation.insertOrUpdatePersistedInstallationEntry(\n+        PersistedInstallationEntry.INSTANCE.withRegisteredFid(\n+            TEST_FID_1,\n+            TEST_REFRESH_TOKEN,\n+            utils.currentTimeInSecs(),\n+            TEST_AUTH_TOKEN,\n+            TEST_TOKEN_EXPIRATION_TIMESTAMP));\n+\n+    // Move the time forward by the token expiration time.\n+    fakeClock.advanceTimeBySeconds(TEST_TOKEN_EXPIRATION_TIMESTAMP);\n+\n+    // Mocking unchecked exception on FIS generateAuthToken\n+    when(mockBackend.generateAuthToken(anyString(), anyString(), anyString(), anyString()))\n+        .thenThrow(new IOException());\n+\n+    TestOnCompleteListener<String> onCompleteListener = new TestOnCompleteListener<>();\n+    Task<String> getIdTask = firebaseInstallations.getId();\n+    getIdTask.addOnCompleteListener(executor, onCompleteListener);\n+    String fid = onCompleteListener.await();\n+\n+    assertWithMessage(\"getId Task failed\").that(fid).isEqualTo(TEST_FID_1);\n+\n+    // Waiting for Task that generates auth token with the FIS Servers\n+    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n+\n+    // Validate that registration status is still REGISTER\n+    PersistedInstallationEntry entry = persistedInstallation.readPersistedInstallationEntryValue();\n+    assertThat(entry.getFirebaseInstallationId(), equalTo(TEST_FID_1));\n+    assertTrue(\"the entry doesn't have a registered fid: \" + entry, entry.isRegistered());\n+  }\n+\n+  /**\n+   * The FID is successfully registered but the token is expired. A getId will cause the token to be\n+   * refreshed in the background.\n+   */\n+  @Test\n+  public void testGetId_expiredAuthToken_refreshesAuthToken() throws Exception {\n+    // Start with a registered FID\n+    persistedInstallation.insertOrUpdatePersistedInstallationEntry(\n+        PersistedInstallationEntry.INSTANCE.withRegisteredFid(\n+            TEST_FID_1,\n+            TEST_REFRESH_TOKEN,\n+            utils.currentTimeInSecs(),\n+            TEST_AUTH_TOKEN,\n+            TEST_TOKEN_EXPIRATION_TIMESTAMP));\n+\n+    // Make the server generateAuthToken() call return a refreshed token\n+    when(mockBackend.generateAuthToken(anyString(), anyString(), anyString(), anyString()))\n+        .thenReturn(TEST_TOKEN_RESULT);\n+\n+    // Move the time forward by the token expiration time.\n+    fakeClock.advanceTimeBySeconds(TEST_TOKEN_EXPIRATION_TIMESTAMP);\n+\n+    // Get the ID, which should cause the SDK to realize that the auth token is expired and\n+    // kick off a refresh of the token.\n+    TestOnCompleteListener<String> onCompleteListener = new TestOnCompleteListener<>();\n+    Task<String> getIdTask = firebaseInstallations.getId();\n+    getIdTask.addOnCompleteListener(executor, onCompleteListener);\n+    String fid = onCompleteListener.await();\n+    assertWithMessage(\"getId Task failed\").that(fid).isEqualTo(TEST_FID_1);\n+\n+    // Waiting for Task that registers FID on the FIS Servers\n+    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n+\n+    TestOnCompleteListener<InstallationTokenResult> onCompleteListener2 =\n+        new TestOnCompleteListener<>();\n+    Task<InstallationTokenResult> task = firebaseInstallations.getToken(false);\n+    task.addOnCompleteListener(executor, onCompleteListener2);\n+    InstallationTokenResult installationTokenResult = onCompleteListener2.await();\n+\n+    // Check that the token has been refreshed\n+    assertWithMessage(\"auth token is not what is expected after the refresh\")\n+        .that(installationTokenResult.getToken())\n+        .isEqualTo(TEST_AUTH_TOKEN_2);\n+\n+    verify(mockBackend, never())\n+        .createFirebaseInstallation(TEST_API_KEY, TEST_FID_1, TEST_PROJECT_ID, TEST_APP_ID_1, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUxNzE1NA==", "bodyText": "https://github.com/firebase/firebase-android-sdk/pull/1333/files#r390516954", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390517154", "createdAt": "2020-03-10T18:16:25Z", "author": {"login": "ankitaj224"}, "path": "firebase-installations/src/test/java/com/google/firebase/installations/FirebaseInstallationsTest.java", "diffHunk": "@@ -510,6 +513,90 @@ public void testGetId_multipleCalls_sameFIDReturned() throws Exception {\n     assertTrue(\"the entry isn't doesn't have a registered fid: \" + entry, entry.isRegistered());\n   }\n \n+  @Test\n+  public void testGetId_expiredAuthTokenUncheckedException_statusUpdated() throws Exception {\n+    // Start with a registered FID\n+    persistedInstallation.insertOrUpdatePersistedInstallationEntry(\n+        PersistedInstallationEntry.INSTANCE.withRegisteredFid(\n+            TEST_FID_1,\n+            TEST_REFRESH_TOKEN,\n+            utils.currentTimeInSecs(),\n+            TEST_AUTH_TOKEN,\n+            TEST_TOKEN_EXPIRATION_TIMESTAMP));\n+\n+    // Move the time forward by the token expiration time.\n+    fakeClock.advanceTimeBySeconds(TEST_TOKEN_EXPIRATION_TIMESTAMP);\n+\n+    // Mocking unchecked exception on FIS generateAuthToken\n+    when(mockBackend.generateAuthToken(anyString(), anyString(), anyString(), anyString()))\n+        .thenThrow(new IOException());\n+\n+    TestOnCompleteListener<String> onCompleteListener = new TestOnCompleteListener<>();\n+    Task<String> getIdTask = firebaseInstallations.getId();\n+    getIdTask.addOnCompleteListener(executor, onCompleteListener);\n+    String fid = onCompleteListener.await();\n+\n+    assertWithMessage(\"getId Task failed\").that(fid).isEqualTo(TEST_FID_1);\n+\n+    // Waiting for Task that generates auth token with the FIS Servers\n+    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n+\n+    // Validate that registration status is still REGISTER\n+    PersistedInstallationEntry entry = persistedInstallation.readPersistedInstallationEntryValue();\n+    assertThat(entry.getFirebaseInstallationId(), equalTo(TEST_FID_1));\n+    assertTrue(\"the entry doesn't have a registered fid: \" + entry, entry.isRegistered());\n+  }\n+\n+  /**\n+   * The FID is successfully registered but the token is expired. A getId will cause the token to be\n+   * refreshed in the background.\n+   */\n+  @Test\n+  public void testGetId_expiredAuthToken_refreshesAuthToken() throws Exception {\n+    // Start with a registered FID\n+    persistedInstallation.insertOrUpdatePersistedInstallationEntry(\n+        PersistedInstallationEntry.INSTANCE.withRegisteredFid(\n+            TEST_FID_1,\n+            TEST_REFRESH_TOKEN,\n+            utils.currentTimeInSecs(),\n+            TEST_AUTH_TOKEN,\n+            TEST_TOKEN_EXPIRATION_TIMESTAMP));\n+\n+    // Make the server generateAuthToken() call return a refreshed token\n+    when(mockBackend.generateAuthToken(anyString(), anyString(), anyString(), anyString()))\n+        .thenReturn(TEST_TOKEN_RESULT);\n+\n+    // Move the time forward by the token expiration time.\n+    fakeClock.advanceTimeBySeconds(TEST_TOKEN_EXPIRATION_TIMESTAMP);\n+\n+    // Get the ID, which should cause the SDK to realize that the auth token is expired and\n+    // kick off a refresh of the token.\n+    TestOnCompleteListener<String> onCompleteListener = new TestOnCompleteListener<>();\n+    Task<String> getIdTask = firebaseInstallations.getId();\n+    getIdTask.addOnCompleteListener(executor, onCompleteListener);\n+    String fid = onCompleteListener.await();\n+    assertWithMessage(\"getId Task failed\").that(fid).isEqualTo(TEST_FID_1);\n+\n+    // Waiting for Task that registers FID on the FIS Servers\n+    executor.awaitTermination(500, TimeUnit.MILLISECONDS);\n+\n+    TestOnCompleteListener<InstallationTokenResult> onCompleteListener2 =\n+        new TestOnCompleteListener<>();\n+    Task<InstallationTokenResult> task = firebaseInstallations.getToken(false);\n+    task.addOnCompleteListener(executor, onCompleteListener2);\n+    InstallationTokenResult installationTokenResult = onCompleteListener2.await();\n+\n+    // Check that the token has been refreshed\n+    assertWithMessage(\"auth token is not what is expected after the refresh\")\n+        .that(installationTokenResult.getToken())\n+        .isEqualTo(TEST_AUTH_TOKEN_2);\n+\n+    verify(mockBackend, never())\n+        .createFirebaseInstallation(TEST_API_KEY, TEST_FID_1, TEST_PROJECT_ID, TEST_APP_ID_1, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MDgxNw=="}, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzQyNDM1OnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/test/java/com/google/firebase/installations/FirebaseInstallationsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNDozNTowOFrOF0BRJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODowMToyM1rOF0atuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MTA0NA==", "bodyText": "TEST_TOKEN_EXPIRATION_TIMESTAMP - TimeUnit.MINUTES.toSeconds(30)", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390091044", "createdAt": "2020-03-10T04:35:08Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/test/java/com/google/firebase/installations/FirebaseInstallationsTest.java", "diffHunk": "@@ -658,13 +745,13 @@ public void testGetAuthToken_expiredAuthToken_fetchedNewTokenFromFIS() throws Ex\n         PersistedInstallationEntry.INSTANCE.withRegisteredFid(\n             TEST_FID_1,\n             TEST_REFRESH_TOKEN,\n-            // Set expiration time to 30 minutes from now (within refresh period)\n-            utils.currentTimeInSecs()\n-                - TEST_TOKEN_EXPIRATION_TIMESTAMP\n-                + TimeUnit.MINUTES.toSeconds(30),\n+            utils.currentTimeInSecs(),\n             TEST_AUTH_TOKEN,\n             TEST_TOKEN_EXPIRATION_TIMESTAMP));\n \n+    // Move the time forward by the token expiration time.\n+    fakeClock.advanceTimeBySeconds(TEST_TOKEN_EXPIRATION_TIMESTAMP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwNzk2MA==", "bodyText": "Done. Thanks.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390507960", "createdAt": "2020-03-10T18:01:23Z", "author": {"login": "ankitaj224"}, "path": "firebase-installations/src/test/java/com/google/firebase/installations/FirebaseInstallationsTest.java", "diffHunk": "@@ -658,13 +745,13 @@ public void testGetAuthToken_expiredAuthToken_fetchedNewTokenFromFIS() throws Ex\n         PersistedInstallationEntry.INSTANCE.withRegisteredFid(\n             TEST_FID_1,\n             TEST_REFRESH_TOKEN,\n-            // Set expiration time to 30 minutes from now (within refresh period)\n-            utils.currentTimeInSecs()\n-                - TEST_TOKEN_EXPIRATION_TIMESTAMP\n-                + TimeUnit.MINUTES.toSeconds(30),\n+            utils.currentTimeInSecs(),\n             TEST_AUTH_TOKEN,\n             TEST_TOKEN_EXPIRATION_TIMESTAMP));\n \n+    // Move the time forward by the token expiration time.\n+    fakeClock.advanceTimeBySeconds(TEST_TOKEN_EXPIRATION_TIMESTAMP);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MTA0NA=="}, "originalCommit": {"oid": "58b9fce5d90b094e2881fd0ba67b3c2d844a8e78"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDk1ODI5OnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/Clock.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjozNjo1N1rOF0jdbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjozNjo1N1rOF0jdbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1MTI0Ng==", "bodyText": "Please call this #millis() in accordance with the interface you are trying to simulate:\nhttps://developer.android.com/reference/java/time/Clock#millis()", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390651246", "createdAt": "2020-03-10T22:36:57Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/Clock.java", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.time;\n+\n+/**\n+ * Provides the current value of \"now\" to allow injecting time as a dependency for testing.\n+ *\n+ * @hide\n+ */\n+public interface Clock {\n+  /** Returns the current time in milliseconds since EPOCH in UTC. */\n+  long now();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d8c2775f2612063ce1a716b7f530109a2c38a77"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDk1OTU5OnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/SystemClock.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjozNzozMVrOF0jeMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjozNzozMVrOF0jeMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1MTQ0Mg==", "bodyText": "How about a comment like this:\nImplementation that uses System.currentTimeMillis() to implement #millis.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390651442", "createdAt": "2020-03-10T22:37:31Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/SystemClock.java", "diffHunk": "@@ -0,0 +1,23 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.time;\n+\n+/** @hide */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d8c2775f2612063ce1a716b7f530109a2c38a77"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDk2MzYyOnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/SystemClock.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjozOTowN1rOF0jgnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjozOTowN1rOF0jgnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1MjA2MQ==", "bodyText": "Please link to some Java documentation like this one:\nhttps://docs.oracle.com/javase/7/docs/api/java/lang/System.html#currentTimeMillis()", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390652061", "createdAt": "2020-03-10T22:39:07Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/SystemClock.java", "diffHunk": "@@ -0,0 +1,23 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.time;\n+\n+/** @hide */\n+public class SystemClock implements Clock {\n+  @Override\n+  public long now() {\n+    return System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d8c2775f2612063ce1a716b7f530109a2c38a77"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDk2ODgxOnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/test/java/com/google/firebase/installations/FirebaseInstallationsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjo0MToxM1rOF0jjrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjo0MToxM1rOF0jjrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1Mjg0NA==", "bodyText": "I thought I mentioned this before:\n\nTimeUnit.MINUTES.toSeconds(30)", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390652844", "createdAt": "2020-03-10T22:41:13Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/test/java/com/google/firebase/installations/FirebaseInstallationsTest.java", "diffHunk": "@@ -680,6 +770,47 @@ public void testGetAuthToken_expiredAuthToken_fetchedNewTokenFromFIS() throws Ex\n         .isEqualTo(TEST_AUTH_TOKEN_2);\n   }\n \n+  @Test\n+  public void testGetAuthToken_multipleCallsDoNotForceRefresh_fetchedNewTokenOnce()\n+      throws Exception {\n+    // start with a valid fid and authtoken\n+    persistedInstallation.insertOrUpdatePersistedInstallationEntry(\n+        PersistedInstallationEntry.INSTANCE.withRegisteredFid(\n+            TEST_FID_1,\n+            TEST_REFRESH_TOKEN,\n+            utils.currentTimeInSecs(),\n+            TEST_AUTH_TOKEN,\n+            TEST_TOKEN_EXPIRATION_TIMESTAMP));\n+\n+    // Make the server generateAuthToken() call return a refreshed token\n+    when(mockBackend.generateAuthToken(anyString(), anyString(), anyString(), anyString()))\n+        .thenReturn(TEST_TOKEN_RESULT);\n+\n+    // expire the authtoken by advancing the clock\n+    fakeClock.advanceTimeBySeconds(TEST_TOKEN_EXPIRATION_TIMESTAMP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d8c2775f2612063ce1a716b7f530109a2c38a77"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDk3MzAxOnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/Clock.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjo0MzoxMlrOF0jmXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjo0MzoxMlrOF0jmXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1MzUzMw==", "bodyText": "Please explain why we need this class. Example:\n\"Interface simulating https://developer.android.com/reference/java/time/Clock.\nProvides [...]\"", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r390653533", "createdAt": "2020-03-10T22:43:12Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/Clock.java", "diffHunk": "@@ -0,0 +1,25 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.time;\n+\n+/**\n+ * Provides the current value of \"now\" to allow injecting time as a dependency for testing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d8c2775f2612063ce1a716b7f530109a2c38a77"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTg0ODk3OnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMzo0NDo0NVrOHXInEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMzo0NDo0NVrOHXInEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAyMDM3MA==", "bodyText": "It's usually a bad sign if you have to add a comment to a simple method like this one.\nHow about you use the method name #currentTimeMillis since everybody will understand what it means?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r494020370", "createdAt": "2020-09-24T03:44:45Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -55,7 +60,7 @@ public long currentTimeInSecs() {\n   /** Returns current time in milliseconds. */\n   public long currentTimeInMillis() {\n     // Mockito doesn't allow to mock static methods. As a result this util method is not static.\n-    return System.currentTimeMillis();\n+    return clock.millis(); // Returns current time in milliseconds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce3271b6eada84d8c866946d1dda219edcca99f0"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTg0OTQyOnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMzo0NDo1OVrOHXInUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMzo0NDo1OVrOHXInUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAyMDQzMg==", "bodyText": "I don't think we need this method any longer.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r494020432", "createdAt": "2020-09-24T03:44:59Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/Utils.java", "diffHunk": "@@ -55,7 +60,7 @@ public long currentTimeInSecs() {\n   /** Returns current time in milliseconds. */\n   public long currentTimeInMillis() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce3271b6eada84d8c866946d1dda219edcca99f0"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTg1MDQ4OnYy", "diffSide": "RIGHT", "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/SystemClock.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMzo0NTo0MVrOHXIn9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzo1NTo0NVrOHYNSMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAyMDU5Ng==", "bodyText": "This class should probably also be a singleton class, but it's not important.\nI leave it up to you. I just wanted to point that out.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r494020596", "createdAt": "2020-09-24T03:45:41Z", "author": {"login": "andirayo"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/SystemClock.java", "diffHunk": "@@ -0,0 +1,29 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.time;\n+\n+/**\n+ * Implementation that uses System.currentTimeMillis() to implement {@link Clock#millis()}.\n+ *\n+ * @hide\n+ */\n+public class SystemClock implements Clock {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce3271b6eada84d8c866946d1dda219edcca99f0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE0NTUyMw==", "bodyText": "Oh true. I`ll need a little practice to quickly identify singleton classes.Thanks for pointing it out :) Changed it.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1333#discussion_r495145523", "createdAt": "2020-09-25T17:55:45Z", "author": {"login": "ankitaj224"}, "path": "firebase-installations/src/main/java/com/google/firebase/installations/time/SystemClock.java", "diffHunk": "@@ -0,0 +1,29 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.installations.time;\n+\n+/**\n+ * Implementation that uses System.currentTimeMillis() to implement {@link Clock#millis()}.\n+ *\n+ * @hide\n+ */\n+public class SystemClock implements Clock {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAyMDU5Ng=="}, "originalCommit": {"oid": "ce3271b6eada84d8c866946d1dda219edcca99f0"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 858, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}