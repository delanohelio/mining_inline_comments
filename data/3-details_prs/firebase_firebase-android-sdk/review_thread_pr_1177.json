{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4ODAyMDY3", "number": 1177, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzo1NDo1MlrODcAZfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyODoyMFrODcA_hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjkzMjQ1OnYy", "diffSide": "RIGHT", "path": "firebase-firestore/ktx/src/test/java/com/google/firebase/firestore/testutil/TestUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNzo1NDo1MlrOFj0Trg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTowMToxN1rOFj2Tdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEwMTQ4Ng==", "bodyText": "Rename the local to dataReader?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1177#discussion_r373101486", "createdAt": "2020-01-30T17:54:52Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/ktx/src/test/java/com/google/firebase/firestore/testutil/TestUtil.java", "diffHunk": "@@ -33,7 +33,7 @@\n \n   public static FieldValue wrap(Object value) {\n     DatabaseId databaseId = DatabaseId.forProject(\"project\");\n-    UserDataConverter dataConverter = new UserDataConverter(databaseId);\n+    UserDataReader dataConverter = new UserDataReader(databaseId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5730c1a42680806d223b1c891ce7b5764801b936"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzNDE5OA==", "bodyText": "I thought I had caught all of these, but this PR went through a lot of iterations. Fixed now.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1177#discussion_r373134198", "createdAt": "2020-01-30T19:01:17Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/ktx/src/test/java/com/google/firebase/firestore/testutil/TestUtil.java", "diffHunk": "@@ -33,7 +33,7 @@\n \n   public static FieldValue wrap(Object value) {\n     DatabaseId databaseId = DatabaseId.forProject(\"project\");\n-    UserDataConverter dataConverter = new UserDataConverter(databaseId);\n+    UserDataReader dataConverter = new UserDataReader(databaseId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEwMTQ4Ng=="}, "originalCommit": {"oid": "5730c1a42680806d223b1c891ce7b5764801b936"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjk4OTY0OnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/testUtil/java/com/google/firebase/firestore/TestAccessHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoxNTowMVrOFj040w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTozMDo1MVrOFj3PMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMDk5NQ==", "bodyText": "This kind of centralization of mocking creation makes me uneasy. It seems like we're using the wrong tool for the job. If TestUtil.firestore() returned a real instance of Firestore these tests wouldn't have to mock anything to get what's otherwise default behavior of the instance.\nAlso, the function of this particular class is to expose as public methods things that are otherwise access protected in the public API. A way to allow mocking of package private methods would be just to contralize the Mockito.when call like this:\n  public static OngoingStubbing<UserDataReader> getUserDataWriter(FirebaseFirestore firestore) {\n    return Mockito.when(firestore.getUserDataWriter());\n  }", "url": "https://github.com/firebase/firebase-android-sdk/pull/1177#discussion_r373110995", "createdAt": "2020-01-30T18:15:01Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/testUtil/java/com/google/firebase/firestore/TestAccessHelper.java", "diffHunk": "@@ -28,4 +29,14 @@ public static DocumentReference createDocumentReference(DocumentKey documentKey)\n   public static DocumentKey referenceKey(DocumentReference documentReference) {\n     return documentReference.getKey();\n   }\n+\n+  /**\n+   * Install mocks for `FirebaseFirestore.getFirestoreSettings()` and\n+   * `FirebaseFirestore.getUserDataWriter()`, which are used in DocumentSnapshot tests.\n+   */\n+  public static void installDocumentSnapshotMocks(FirebaseFirestore firestore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5730c1a42680806d223b1c891ce7b5764801b936"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE0OTQ5MQ==", "bodyText": "installDocumentSnapshotMocks() is not needed in our codebase to bypass access restrictions, but it was in the Kotlin tests since they live in a subpackage.\nEither way, I reverted this change as I removed the getUserDataWriter() instance method on FirebaseFirestore.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1177#discussion_r373149491", "createdAt": "2020-01-30T19:30:51Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/testUtil/java/com/google/firebase/firestore/TestAccessHelper.java", "diffHunk": "@@ -28,4 +29,14 @@ public static DocumentReference createDocumentReference(DocumentKey documentKey)\n   public static DocumentKey referenceKey(DocumentReference documentReference) {\n     return documentReference.getKey();\n   }\n+\n+  /**\n+   * Install mocks for `FirebaseFirestore.getFirestoreSettings()` and\n+   * `FirebaseFirestore.getUserDataWriter()`, which are used in DocumentSnapshot tests.\n+   */\n+  public static void installDocumentSnapshotMocks(FirebaseFirestore firestore) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMDk5NQ=="}, "originalCommit": {"oid": "5730c1a42680806d223b1c891ce7b5764801b936"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzAwMDM1OnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentSnapshot.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoxODo0NFrOFj0_vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoxODo0NFrOFj0_vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMjc2NQ==", "bodyText": "s/Documens/Documents/", "url": "https://github.com/firebase/firebase-android-sdk/pull/1177#discussion_r373112765", "createdAt": "2020-01-30T18:18:44Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentSnapshot.java", "diffHunk": "@@ -546,87 +531,21 @@ public DocumentReference getReference() {\n     return clazz.cast(value);\n   }\n \n-  @Nullable\n-  private Object convertValue(FieldValue value, FieldValueOptions options) {\n-    if (value instanceof ObjectValue) {\n-      return convertObject((ObjectValue) value, options);\n-    } else if (value instanceof ArrayValue) {\n-      return convertArray((ArrayValue) value, options);\n-    } else if (value instanceof ReferenceValue) {\n-      return convertReference((ReferenceValue) value);\n-    } else if (value instanceof TimestampValue) {\n-      return convertTimestamp((TimestampValue) value, options);\n-    } else if (value instanceof ServerTimestampValue) {\n-      return convertServerTimestamp((ServerTimestampValue) value, options);\n-    } else {\n-      return value.value();\n-    }\n-  }\n-\n-  private Object convertServerTimestamp(ServerTimestampValue value, FieldValueOptions options) {\n-    switch (options.serverTimestampBehavior) {\n-      case PREVIOUS:\n-        return value.getPreviousValue();\n-      case ESTIMATE:\n-        return value.getLocalWriteTime();\n-      default:\n-        return value.value();\n-    }\n-  }\n-\n-  private Object convertTimestamp(TimestampValue value, FieldValueOptions options) {\n-    Timestamp timestamp = value.value();\n-    if (options.timestampsInSnapshotsEnabled) {\n-      return timestamp;\n-    } else {\n-      return timestamp.toDate();\n-    }\n-  }\n-\n-  private Object convertReference(ReferenceValue value) {\n-    DocumentKey key = value.value();\n-    DatabaseId refDatabase = value.getDatabaseId();\n-    DatabaseId database = this.firestore.getDatabaseId();\n-    if (!refDatabase.equals(database)) {\n-      // TODO: Somehow support foreign references.\n-      Logger.warn(\n-          \"DocumentSnapshot\",\n-          \"Document %s contains a document reference within a different database \"\n-              + \"(%s/%s) which is not supported. It will be treated as a reference in \"\n-              + \"the current database (%s/%s) instead.\",\n-          key.getPath(),\n-          refDatabase.getProjectId(),\n-          refDatabase.getDatabaseId(),\n-          database.getProjectId(),\n-          database.getDatabaseId());\n-    }\n-    return new DocumentReference(key, firestore);\n-  }\n-\n-  private Map<String, Object> convertObject(ObjectValue objectValue, FieldValueOptions options) {\n-    Map<String, Object> result = new HashMap<>();\n-    for (Map.Entry<String, FieldValue> entry : objectValue.getInternalValue()) {\n-      result.put(entry.getKey(), convertValue(entry.getValue(), options));\n-    }\n-    return result;\n-  }\n-\n-  private List<Object> convertArray(ArrayValue arrayValue, FieldValueOptions options) {\n-    ArrayList<Object> result = new ArrayList<>(arrayValue.getInternalValue().size());\n-    for (FieldValue v : arrayValue.getInternalValue()) {\n-      result.add(convertValue(v, options));\n-    }\n-    return result;\n+  private Map<String, Object> convertObject(\n+      ObjectValue objectValue, UserDataWriterOptions options) {\n+    Object result = userDataWriter.convertValue(objectValue, options);\n+    hardAssert(result instanceof Map, \"Documens should be decoded into Maps\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5730c1a42680806d223b1c891ce7b5764801b936"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzAwNzU3OnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentSnapshot.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyMTowOFrOFj1EVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTowNDoxN1rOFj2aLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMzk0MA==", "bodyText": "This seems like it could reasonably just be a part of the UserDataWriter API, making it more self-contained as to how to use it safely.\nIndeed there's already a convertObject method there; why not just use that and avoid asserting/casting?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1177#discussion_r373113940", "createdAt": "2020-01-30T18:21:08Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentSnapshot.java", "diffHunk": "@@ -546,87 +531,21 @@ public DocumentReference getReference() {\n     return clazz.cast(value);\n   }\n \n-  @Nullable\n-  private Object convertValue(FieldValue value, FieldValueOptions options) {\n-    if (value instanceof ObjectValue) {\n-      return convertObject((ObjectValue) value, options);\n-    } else if (value instanceof ArrayValue) {\n-      return convertArray((ArrayValue) value, options);\n-    } else if (value instanceof ReferenceValue) {\n-      return convertReference((ReferenceValue) value);\n-    } else if (value instanceof TimestampValue) {\n-      return convertTimestamp((TimestampValue) value, options);\n-    } else if (value instanceof ServerTimestampValue) {\n-      return convertServerTimestamp((ServerTimestampValue) value, options);\n-    } else {\n-      return value.value();\n-    }\n-  }\n-\n-  private Object convertServerTimestamp(ServerTimestampValue value, FieldValueOptions options) {\n-    switch (options.serverTimestampBehavior) {\n-      case PREVIOUS:\n-        return value.getPreviousValue();\n-      case ESTIMATE:\n-        return value.getLocalWriteTime();\n-      default:\n-        return value.value();\n-    }\n-  }\n-\n-  private Object convertTimestamp(TimestampValue value, FieldValueOptions options) {\n-    Timestamp timestamp = value.value();\n-    if (options.timestampsInSnapshotsEnabled) {\n-      return timestamp;\n-    } else {\n-      return timestamp.toDate();\n-    }\n-  }\n-\n-  private Object convertReference(ReferenceValue value) {\n-    DocumentKey key = value.value();\n-    DatabaseId refDatabase = value.getDatabaseId();\n-    DatabaseId database = this.firestore.getDatabaseId();\n-    if (!refDatabase.equals(database)) {\n-      // TODO: Somehow support foreign references.\n-      Logger.warn(\n-          \"DocumentSnapshot\",\n-          \"Document %s contains a document reference within a different database \"\n-              + \"(%s/%s) which is not supported. It will be treated as a reference in \"\n-              + \"the current database (%s/%s) instead.\",\n-          key.getPath(),\n-          refDatabase.getProjectId(),\n-          refDatabase.getDatabaseId(),\n-          database.getProjectId(),\n-          database.getDatabaseId());\n-    }\n-    return new DocumentReference(key, firestore);\n-  }\n-\n-  private Map<String, Object> convertObject(ObjectValue objectValue, FieldValueOptions options) {\n-    Map<String, Object> result = new HashMap<>();\n-    for (Map.Entry<String, FieldValue> entry : objectValue.getInternalValue()) {\n-      result.put(entry.getKey(), convertValue(entry.getValue(), options));\n-    }\n-    return result;\n-  }\n-\n-  private List<Object> convertArray(ArrayValue arrayValue, FieldValueOptions options) {\n-    ArrayList<Object> result = new ArrayList<>(arrayValue.getInternalValue().size());\n-    for (FieldValue v : arrayValue.getInternalValue()) {\n-      result.add(convertValue(v, options));\n-    }\n-    return result;\n+  private Map<String, Object> convertObject(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5730c1a42680806d223b1c891ce7b5764801b936"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzNTkxNw==", "bodyText": "The idea behind this was to only expose a single method in UserDataWriter. I don't feel strongly and made convertObject package private.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1177#discussion_r373135917", "createdAt": "2020-01-30T19:04:17Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/DocumentSnapshot.java", "diffHunk": "@@ -546,87 +531,21 @@ public DocumentReference getReference() {\n     return clazz.cast(value);\n   }\n \n-  @Nullable\n-  private Object convertValue(FieldValue value, FieldValueOptions options) {\n-    if (value instanceof ObjectValue) {\n-      return convertObject((ObjectValue) value, options);\n-    } else if (value instanceof ArrayValue) {\n-      return convertArray((ArrayValue) value, options);\n-    } else if (value instanceof ReferenceValue) {\n-      return convertReference((ReferenceValue) value);\n-    } else if (value instanceof TimestampValue) {\n-      return convertTimestamp((TimestampValue) value, options);\n-    } else if (value instanceof ServerTimestampValue) {\n-      return convertServerTimestamp((ServerTimestampValue) value, options);\n-    } else {\n-      return value.value();\n-    }\n-  }\n-\n-  private Object convertServerTimestamp(ServerTimestampValue value, FieldValueOptions options) {\n-    switch (options.serverTimestampBehavior) {\n-      case PREVIOUS:\n-        return value.getPreviousValue();\n-      case ESTIMATE:\n-        return value.getLocalWriteTime();\n-      default:\n-        return value.value();\n-    }\n-  }\n-\n-  private Object convertTimestamp(TimestampValue value, FieldValueOptions options) {\n-    Timestamp timestamp = value.value();\n-    if (options.timestampsInSnapshotsEnabled) {\n-      return timestamp;\n-    } else {\n-      return timestamp.toDate();\n-    }\n-  }\n-\n-  private Object convertReference(ReferenceValue value) {\n-    DocumentKey key = value.value();\n-    DatabaseId refDatabase = value.getDatabaseId();\n-    DatabaseId database = this.firestore.getDatabaseId();\n-    if (!refDatabase.equals(database)) {\n-      // TODO: Somehow support foreign references.\n-      Logger.warn(\n-          \"DocumentSnapshot\",\n-          \"Document %s contains a document reference within a different database \"\n-              + \"(%s/%s) which is not supported. It will be treated as a reference in \"\n-              + \"the current database (%s/%s) instead.\",\n-          key.getPath(),\n-          refDatabase.getProjectId(),\n-          refDatabase.getDatabaseId(),\n-          database.getProjectId(),\n-          database.getDatabaseId());\n-    }\n-    return new DocumentReference(key, firestore);\n-  }\n-\n-  private Map<String, Object> convertObject(ObjectValue objectValue, FieldValueOptions options) {\n-    Map<String, Object> result = new HashMap<>();\n-    for (Map.Entry<String, FieldValue> entry : objectValue.getInternalValue()) {\n-      result.put(entry.getKey(), convertValue(entry.getValue(), options));\n-    }\n-    return result;\n-  }\n-\n-  private List<Object> convertArray(ArrayValue arrayValue, FieldValueOptions options) {\n-    ArrayList<Object> result = new ArrayList<>(arrayValue.getInternalValue().size());\n-    for (FieldValue v : arrayValue.getInternalValue()) {\n-      result.add(convertValue(v, options));\n-    }\n-    return result;\n+  private Map<String, Object> convertObject(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMzk0MA=="}, "originalCommit": {"oid": "5730c1a42680806d223b1c891ce7b5764801b936"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzAyOTgwOnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/UserDataWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyODoyMFrOFj1ShA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTowOToyNFrOFj2kjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExNzU3Mg==", "bodyText": "I have no idea if this is a good idea, but what do you think of making these things properties of the UserDataWriter itself?\nWe already have to allocate a UserDataWriterOptions object so it's not like we're avoiding heap allocations with the current scheme. Meanwhile it would save us having to pass the options up and down every call.\nThis would allow you to remove the getUserDataWriter method on FirebaseFirestore and the associated mocking weirdness.\nWhat do you think?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1177#discussion_r373117572", "createdAt": "2020-01-30T18:28:20Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/UserDataWriter.java", "diffHunk": "@@ -0,0 +1,133 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore;\n+\n+import androidx.annotation.Nullable;\n+import androidx.annotation.RestrictTo;\n+import com.google.firebase.Timestamp;\n+import com.google.firebase.firestore.model.DatabaseId;\n+import com.google.firebase.firestore.model.DocumentKey;\n+import com.google.firebase.firestore.model.value.ArrayValue;\n+import com.google.firebase.firestore.model.value.FieldValue;\n+import com.google.firebase.firestore.model.value.ObjectValue;\n+import com.google.firebase.firestore.model.value.ReferenceValue;\n+import com.google.firebase.firestore.model.value.ServerTimestampValue;\n+import com.google.firebase.firestore.model.value.TimestampValue;\n+import com.google.firebase.firestore.util.Logger;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Converts Firestore's internal types to the Java API types that we expose to the user.\n+ *\n+ * @hide\n+ */\n+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)\n+public class UserDataWriter {\n+  private final FirebaseFirestore firestore;\n+\n+  /** Holds settings that define field value deserialization options. */\n+  static class UserDataWriterOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5730c1a42680806d223b1c891ce7b5764801b936"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEzODU3Mg==", "bodyText": "The version of the PR that I showed you yesterday (that addressed both UserDataConversion and CanonicalIds) actually did just that. It was needed because I did not want to expose options in the canonical ID API. I scrapped this since I didn't want to create the extra object. You are correct though that I am still creating an extra object - and we will likely not be able to get rid of it since timestampsInSnapshots will have to stay around even when we drop in from Settings, as DocumentSnapshot.getDate() relies on it.\nI reverted the parts of the last edit that removed the constructor params for serverTimestampBehavior and timestampsInSnapshotsEnabled.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1177#discussion_r373138572", "createdAt": "2020-01-30T19:09:24Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/UserDataWriter.java", "diffHunk": "@@ -0,0 +1,133 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.firestore;\n+\n+import androidx.annotation.Nullable;\n+import androidx.annotation.RestrictTo;\n+import com.google.firebase.Timestamp;\n+import com.google.firebase.firestore.model.DatabaseId;\n+import com.google.firebase.firestore.model.DocumentKey;\n+import com.google.firebase.firestore.model.value.ArrayValue;\n+import com.google.firebase.firestore.model.value.FieldValue;\n+import com.google.firebase.firestore.model.value.ObjectValue;\n+import com.google.firebase.firestore.model.value.ReferenceValue;\n+import com.google.firebase.firestore.model.value.ServerTimestampValue;\n+import com.google.firebase.firestore.model.value.TimestampValue;\n+import com.google.firebase.firestore.util.Logger;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Converts Firestore's internal types to the Java API types that we expose to the user.\n+ *\n+ * @hide\n+ */\n+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)\n+public class UserDataWriter {\n+  private final FirebaseFirestore firestore;\n+\n+  /** Holds settings that define field value deserialization options. */\n+  static class UserDataWriterOptions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExNzU3Mg=="}, "originalCommit": {"oid": "5730c1a42680806d223b1c891ce7b5764801b936"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 962, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}