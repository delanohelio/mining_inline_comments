{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNTQyNTk3", "number": 1205, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDowMDowNlrODdhfsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDowODo1MVrODdhlzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjg0MDgwOnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/Document.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDowMDowNlrOFmLUwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDo1MzowNVrOFmMMzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NTc0NQ==", "bodyText": "It seems like this should go the other way: call ObjectValue.getFieldProto(path) here and then have getField above wrap the result of getFieldProto.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1205#discussion_r375575745", "createdAt": "2020-02-06T00:00:06Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/Document.java", "diffHunk": "@@ -66,6 +67,11 @@ public ObjectValue getData() {\n     return objectValue.get(path);\n   }\n \n+  public @Nullable Value getFieldProto(FieldPath path) {\n+    FieldValue fieldValue = getField(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea5b3737b23638bb99bcb032893674414c18895"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5MDA5Mg==", "bodyText": "ObjectValue.getFieldProto() does not yet exist (but it probably should).\nThat being said, this will go away with #1207, which will drop the FieldValue version altogether.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1205#discussion_r375590092", "createdAt": "2020-02-06T00:53:05Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/Document.java", "diffHunk": "@@ -66,6 +67,11 @@ public ObjectValue getData() {\n     return objectValue.get(path);\n   }\n \n+  public @Nullable Value getFieldProto(FieldPath path) {\n+    FieldValue fieldValue = getField(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NTc0NQ=="}, "originalCommit": {"oid": "7ea5b3737b23638bb99bcb032893674414c18895"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjg0NzAyOnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/NumericIncrementTransformOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDowMzoyMlrOFmLYZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDo1NjowNlrOFmMP0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NjY3Nw==", "bodyText": "These could be in ProtoValues along with isNumber and isArray.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1205#discussion_r375576677", "createdAt": "2020-02-06T00:03:22Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/NumericIncrementTransformOperation.java", "diffHunk": "@@ -120,4 +121,12 @@ private long operandAsLong() {\n               + operand.getClass().getCanonicalName());\n     }\n   }\n+\n+  private boolean isInteger(@Nullable Value value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea5b3737b23638bb99bcb032893674414c18895"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5MDg2NQ==", "bodyText": "Done.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1205#discussion_r375590865", "createdAt": "2020-02-06T00:56:06Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/NumericIncrementTransformOperation.java", "diffHunk": "@@ -120,4 +121,12 @@ private long operandAsLong() {\n               + operand.getClass().getCanonicalName());\n     }\n   }\n+\n+  private boolean isInteger(@Nullable Value value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3NjY3Nw=="}, "originalCommit": {"oid": "7ea5b3737b23638bb99bcb032893674414c18895"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjg1NjQ3OnYy", "diffSide": "RIGHT", "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/NumericIncrementTransformOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDowODo1MVrOFmLeUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMDo1NDowOVrOFmMN-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3ODE5NA==", "bodyText": "Having Values in the production code would again benefit this code, making it less verbose to do this everywhere we do it.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1205#discussion_r375578194", "createdAt": "2020-02-06T00:08:51Z", "author": {"login": "wilhuff"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/NumericIncrementTransformOperation.java", "diffHunk": "@@ -37,29 +39,28 @@ public NumericIncrementTransformOperation(NumberValue operand) {\n   }\n \n   @Override\n-  public FieldValue applyToLocalView(@Nullable FieldValue previousValue, Timestamp localWriteTime) {\n-    NumberValue baseValue = computeBaseValue(previousValue);\n+  public Value applyToLocalView(@Nullable Value previousValue, Timestamp localWriteTime) {\n+    Value baseValue = computeBaseValue(previousValue);\n \n     // Return an integer value only if the previous value and the operand is an integer.\n-    if (baseValue instanceof IntegerValue && operand instanceof IntegerValue) {\n-      long sum = safeIncrement(((IntegerValue) baseValue).getIntegerValue(), operandAsLong());\n-      return IntegerValue.valueOf(sum);\n-    } else if (baseValue instanceof IntegerValue) {\n-      double sum = ((IntegerValue) baseValue).getIntegerValue() + operandAsDouble();\n-      return DoubleValue.valueOf(sum);\n+    if (isInteger(baseValue) && operand instanceof IntegerValue) {\n+      long sum = safeIncrement(baseValue.getIntegerValue(), operandAsLong());\n+      return Value.newBuilder().setIntegerValue(sum).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ea5b3737b23638bb99bcb032893674414c18895"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU5MDM5NQ==", "bodyText": "The Value conversion is now only available in UserDataReader, which is directly called from tests. The base branch for this PR removes the Values class.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1205#discussion_r375590395", "createdAt": "2020-02-06T00:54:09Z", "author": {"login": "schmidt-sebastian"}, "path": "firebase-firestore/src/main/java/com/google/firebase/firestore/model/mutation/NumericIncrementTransformOperation.java", "diffHunk": "@@ -37,29 +39,28 @@ public NumericIncrementTransformOperation(NumberValue operand) {\n   }\n \n   @Override\n-  public FieldValue applyToLocalView(@Nullable FieldValue previousValue, Timestamp localWriteTime) {\n-    NumberValue baseValue = computeBaseValue(previousValue);\n+  public Value applyToLocalView(@Nullable Value previousValue, Timestamp localWriteTime) {\n+    Value baseValue = computeBaseValue(previousValue);\n \n     // Return an integer value only if the previous value and the operand is an integer.\n-    if (baseValue instanceof IntegerValue && operand instanceof IntegerValue) {\n-      long sum = safeIncrement(((IntegerValue) baseValue).getIntegerValue(), operandAsLong());\n-      return IntegerValue.valueOf(sum);\n-    } else if (baseValue instanceof IntegerValue) {\n-      double sum = ((IntegerValue) baseValue).getIntegerValue() + operandAsDouble();\n-      return DoubleValue.valueOf(sum);\n+    if (isInteger(baseValue) && operand instanceof IntegerValue) {\n+      long sum = safeIncrement(baseValue.getIntegerValue(), operandAsLong());\n+      return Value.newBuilder().setIntegerValue(sum).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3ODE5NA=="}, "originalCommit": {"oid": "7ea5b3737b23638bb99bcb032893674414c18895"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 982, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}