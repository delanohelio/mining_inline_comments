{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMDM2MDc0", "number": 1577, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOToxNzowOFrOEAo-Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOToyMjoyNVrOEApERA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTA2NzM1OnYy", "diffSide": "RIGHT", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/analytics/BlockingAnalyticsEventLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOToxNzowOFrOGcDEPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDozNzoyM1rOGcF1vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2MzU1MQ==", "bodyText": "I wasn't really sure about this reference...it is a sneaky clever way to guard against a weird race condition that theoretically shouldn't happen. \ud83d\ude43", "url": "https://github.com/firebase/firebase-android-sdk/pull/1577#discussion_r432063551", "createdAt": "2020-05-28T19:17:08Z", "author": {"login": "mrichards"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/analytics/BlockingAnalyticsEventLogger.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.analytics;\n+\n+import android.os.Bundle;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.crashlytics.internal.Logger;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Analytics event logger which logs an event to Firebase Analytics using the Crashlytics origin,\n+ * and blocks until it receives that event back from the Analytics Event Receiver, or until the\n+ * timeout has elapsed.\n+ */\n+public class BlockingAnalyticsEventLogger implements AnalyticsEventReceiver, AnalyticsEventLogger {\n+\n+  private static final String APP_EXCEPTION_EVENT_NAME = \"_ae\";\n+\n+  private final CrashlyticsOriginAnalyticsEventLogger baseAnalyticsEventLogger;\n+  private final int timeout;\n+  private final TimeUnit timeUnit;\n+\n+  private final Object latchLock = new Object();\n+\n+  private CountDownLatch eventLatch;\n+\n+  public BlockingAnalyticsEventLogger(\n+      @NonNull CrashlyticsOriginAnalyticsEventLogger baseAnalyticsEventLogger,\n+      int timeout,\n+      TimeUnit timeUnit) {\n+    this.baseAnalyticsEventLogger = baseAnalyticsEventLogger;\n+    this.timeout = timeout;\n+    this.timeUnit = timeUnit;\n+  }\n+\n+  @Override\n+  public void logEvent(@NonNull String name, @Nullable Bundle params) {\n+    synchronized (latchLock) {\n+      Logger.getLogger().d(\"Logging Crashlytics event to Firebase\");\n+      this.eventLatch = new CountDownLatch(1);\n+\n+      baseAnalyticsEventLogger.logEvent(name, params);\n+\n+      Logger.getLogger().d(\"Awaiting app exception callback from FA...\");\n+      try {\n+        if (eventLatch.await(timeout, timeUnit)) {\n+          Logger.getLogger().d(\"App exception callback received from FA listener.\");\n+        } else {\n+          Logger.getLogger()\n+              .d(\"Timeout exceeded while awaiting app exception callback from FA listener.\");\n+        }\n+      } catch (InterruptedException ie) {\n+        Logger.getLogger().d(\"Interrupted while awaiting app exception callback from FA listener.\");\n+      }\n+\n+      this.eventLatch = null;\n+    }\n+  }\n+\n+  @Override\n+  public void onEvent(@NonNull String name, @NonNull Bundle params) {\n+    final CountDownLatch eventLatch = this.eventLatch;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe507708398aeb69e933092fb428b0462770944"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwODk4OQ==", "bodyText": "Yep! Get a local reference for the function scope, then if the global reference is changed by a separate thread, it won't interfere! :)", "url": "https://github.com/firebase/firebase-android-sdk/pull/1577#discussion_r432108989", "createdAt": "2020-05-28T20:37:23Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/analytics/BlockingAnalyticsEventLogger.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.analytics;\n+\n+import android.os.Bundle;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.crashlytics.internal.Logger;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Analytics event logger which logs an event to Firebase Analytics using the Crashlytics origin,\n+ * and blocks until it receives that event back from the Analytics Event Receiver, or until the\n+ * timeout has elapsed.\n+ */\n+public class BlockingAnalyticsEventLogger implements AnalyticsEventReceiver, AnalyticsEventLogger {\n+\n+  private static final String APP_EXCEPTION_EVENT_NAME = \"_ae\";\n+\n+  private final CrashlyticsOriginAnalyticsEventLogger baseAnalyticsEventLogger;\n+  private final int timeout;\n+  private final TimeUnit timeUnit;\n+\n+  private final Object latchLock = new Object();\n+\n+  private CountDownLatch eventLatch;\n+\n+  public BlockingAnalyticsEventLogger(\n+      @NonNull CrashlyticsOriginAnalyticsEventLogger baseAnalyticsEventLogger,\n+      int timeout,\n+      TimeUnit timeUnit) {\n+    this.baseAnalyticsEventLogger = baseAnalyticsEventLogger;\n+    this.timeout = timeout;\n+    this.timeUnit = timeUnit;\n+  }\n+\n+  @Override\n+  public void logEvent(@NonNull String name, @Nullable Bundle params) {\n+    synchronized (latchLock) {\n+      Logger.getLogger().d(\"Logging Crashlytics event to Firebase\");\n+      this.eventLatch = new CountDownLatch(1);\n+\n+      baseAnalyticsEventLogger.logEvent(name, params);\n+\n+      Logger.getLogger().d(\"Awaiting app exception callback from FA...\");\n+      try {\n+        if (eventLatch.await(timeout, timeUnit)) {\n+          Logger.getLogger().d(\"App exception callback received from FA listener.\");\n+        } else {\n+          Logger.getLogger()\n+              .d(\"Timeout exceeded while awaiting app exception callback from FA listener.\");\n+        }\n+      } catch (InterruptedException ie) {\n+        Logger.getLogger().d(\"Interrupted while awaiting app exception callback from FA listener.\");\n+      }\n+\n+      this.eventLatch = null;\n+    }\n+  }\n+\n+  @Override\n+  public void onEvent(@NonNull String name, @NonNull Bundle params) {\n+    final CountDownLatch eventLatch = this.eventLatch;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2MzU1MQ=="}, "originalCommit": {"oid": "8fe507708398aeb69e933092fb428b0462770944"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTA3ODIyOnYy", "diffSide": "RIGHT", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/analytics/BlockingAnalyticsEventLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOToyMDo0MFrOGcDLVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDozOToyMVrOGcF5rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2NTM2Ng==", "bodyText": "Is it worth making a comment somewhere that we only ever expect at most ONE of these events per app execution? That fact influences the design, though I think the way you have it implemented is resilient to multiple events (though you could end up with a bunch calls waiting on the syncrhonized(latchLock) block, which is fine).\nMaybe not necessary since the design works either way?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1577#discussion_r432065366", "createdAt": "2020-05-28T19:20:40Z", "author": {"login": "mrichards"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/analytics/BlockingAnalyticsEventLogger.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.analytics;\n+\n+import android.os.Bundle;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.crashlytics.internal.Logger;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Analytics event logger which logs an event to Firebase Analytics using the Crashlytics origin,\n+ * and blocks until it receives that event back from the Analytics Event Receiver, or until the\n+ * timeout has elapsed.\n+ */\n+public class BlockingAnalyticsEventLogger implements AnalyticsEventReceiver, AnalyticsEventLogger {\n+\n+  private static final String APP_EXCEPTION_EVENT_NAME = \"_ae\";\n+\n+  private final CrashlyticsOriginAnalyticsEventLogger baseAnalyticsEventLogger;\n+  private final int timeout;\n+  private final TimeUnit timeUnit;\n+\n+  private final Object latchLock = new Object();\n+\n+  private CountDownLatch eventLatch;\n+\n+  public BlockingAnalyticsEventLogger(\n+      @NonNull CrashlyticsOriginAnalyticsEventLogger baseAnalyticsEventLogger,\n+      int timeout,\n+      TimeUnit timeUnit) {\n+    this.baseAnalyticsEventLogger = baseAnalyticsEventLogger;\n+    this.timeout = timeout;\n+    this.timeUnit = timeUnit;\n+  }\n+\n+  @Override\n+  public void logEvent(@NonNull String name, @Nullable Bundle params) {\n+    synchronized (latchLock) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe507708398aeb69e933092fb428b0462770944"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEwOTk5Ng==", "bodyText": "I think there's definitely the possibility we could end up with multiple queued-up calls to this function, so it may be worth changing this later to allow for sending multiple events at once.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1577#discussion_r432109996", "createdAt": "2020-05-28T20:39:21Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/internal/analytics/BlockingAnalyticsEventLogger.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.crashlytics.internal.analytics;\n+\n+import android.os.Bundle;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import com.google.firebase.crashlytics.internal.Logger;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Analytics event logger which logs an event to Firebase Analytics using the Crashlytics origin,\n+ * and blocks until it receives that event back from the Analytics Event Receiver, or until the\n+ * timeout has elapsed.\n+ */\n+public class BlockingAnalyticsEventLogger implements AnalyticsEventReceiver, AnalyticsEventLogger {\n+\n+  private static final String APP_EXCEPTION_EVENT_NAME = \"_ae\";\n+\n+  private final CrashlyticsOriginAnalyticsEventLogger baseAnalyticsEventLogger;\n+  private final int timeout;\n+  private final TimeUnit timeUnit;\n+\n+  private final Object latchLock = new Object();\n+\n+  private CountDownLatch eventLatch;\n+\n+  public BlockingAnalyticsEventLogger(\n+      @NonNull CrashlyticsOriginAnalyticsEventLogger baseAnalyticsEventLogger,\n+      int timeout,\n+      TimeUnit timeUnit) {\n+    this.baseAnalyticsEventLogger = baseAnalyticsEventLogger;\n+    this.timeout = timeout;\n+    this.timeUnit = timeUnit;\n+  }\n+\n+  @Override\n+  public void logEvent(@NonNull String name, @Nullable Bundle params) {\n+    synchronized (latchLock) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2NTM2Ng=="}, "originalCommit": {"oid": "8fe507708398aeb69e933092fb428b0462770944"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTA4MjkyOnYy", "diffSide": "RIGHT", "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/FirebaseCrashlytics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOToyMjoyNVrOGcDOhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMDozOTozMlrOGcF5_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2NjE4Mg==", "bodyText": "This might be a good place for a comment describing the overall approach to the analytics integration, or at least point to one of the class javadocs that describes it.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1577#discussion_r432066182", "createdAt": "2020-05-28T19:22:25Z", "author": {"login": "mrichards"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/FirebaseCrashlytics.java", "diffHunk": "@@ -61,13 +74,52 @@\n       nativeComponent = new MissingNativeComponent();\n     }\n \n+    final Onboarding onboarding = new Onboarding(app, context, idManager, arbiter);\n+\n+    final BreadcrumbSource breadcrumbSource;\n+    final AnalyticsEventLogger analyticsEventLogger;\n+\n+    if (analyticsConnector != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe507708398aeb69e933092fb428b0462770944"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjExMDA3Ng==", "bodyText": "Happy to.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1577#discussion_r432110076", "createdAt": "2020-05-28T20:39:32Z", "author": {"login": "mrwillis21"}, "path": "firebase-crashlytics/src/main/java/com/google/firebase/crashlytics/FirebaseCrashlytics.java", "diffHunk": "@@ -61,13 +74,52 @@\n       nativeComponent = new MissingNativeComponent();\n     }\n \n+    final Onboarding onboarding = new Onboarding(app, context, idManager, arbiter);\n+\n+    final BreadcrumbSource breadcrumbSource;\n+    final AnalyticsEventLogger analyticsEventLogger;\n+\n+    if (analyticsConnector != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA2NjE4Mg=="}, "originalCommit": {"oid": "8fe507708398aeb69e933092fb428b0462770944"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1371, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}