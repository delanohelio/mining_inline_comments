{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MzU4Njg5", "number": 1821, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODo1OTowMFrOEZnODQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTowMTowN1rOEZnQ8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjkyNDI5OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/com/google/firebase/gradle/plugins/VendorPlugin.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODo1OTowMFrOHCh3qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTo0NjoxNFrOHCjY1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxNDEyMA==", "bodyText": "what's this comment code for?", "url": "https://github.com/firebase/firebase-android-sdk/pull/1821#discussion_r472414120", "createdAt": "2020-08-18T18:59:00Z", "author": {"login": "rlazo"}, "path": "buildSrc/src/main/java/com/google/firebase/gradle/plugins/VendorPlugin.kt", "diffHunk": "@@ -0,0 +1,260 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.gradle.plugins\n+\n+import com.android.build.api.transform.Format\n+import com.android.build.api.transform.QualifiedContent\n+import com.android.build.api.transform.Transform\n+import com.android.build.api.transform.TransformInvocation\n+import com.android.build.gradle.LibraryExtension\n+import com.android.build.gradle.LibraryPlugin\n+import java.io.BufferedInputStream\n+import java.io.BufferedOutputStream\n+import java.io.File\n+import java.io.FileInputStream\n+import java.io.FileOutputStream\n+import java.util.zip.ZipEntry\n+import java.util.zip.ZipFile\n+import java.util.zip.ZipOutputStream\n+import org.gradle.api.GradleException\n+import org.gradle.api.Plugin\n+import org.gradle.api.Project\n+import org.gradle.api.artifacts.Configuration\n+import org.gradle.api.logging.Logger\n+\n+class VendorPlugin : Plugin<Project> {\n+    override fun apply(project: Project) {\n+        project.plugins.all {\n+            when (this) {\n+                is LibraryPlugin -> configureAndroid(project)\n+            }\n+        }\n+    }\n+\n+    fun configureAndroid(project: Project) {\n+\n+        val vendor = project.configurations.create(\"vendor\")\n+        project.configurations.all {\n+            when (name) {\n+                \"compileOnly\", \"testImplementation\", \"androidTestImplementation\" -> extendsFrom(vendor)\n+            }\n+        }\n+\n+        val jarJar = project.configurations.create(\"firebaseJarJarArtifact\")\n+        project.dependencies.add(\"firebaseJarJarArtifact\", \"org.pantsbuild:jarjar:1.7.2\")\n+\n+        val android = project.extensions.getByType(LibraryExtension::class.java)\n+\n+        android.registerTransform(VendorTransform(\n+                android,\n+                vendor,\n+                JarJarTransformer(\n+                        parentPackageProvider = {\n+                            android.libraryVariants.find { it.name == \"release\" }!!.applicationId\n+                        },\n+                        jarJarProvider = { jarJar.resolve() },\n+                        project = project,\n+                        logger = project.logger),\n+                logger = project.logger))\n+    }\n+}\n+\n+interface JarTransformer {\n+    fun transform(inputJar: File, outputJar: File, packagesToVendor: Set<String>)\n+}\n+\n+class JarJarTransformer(\n+    private val parentPackageProvider: () -> String,\n+    private val jarJarProvider: () -> Collection<File>,\n+    private val project: Project,\n+    private val logger: Logger\n+) : JarTransformer {\n+    override fun transform(inputJar: File, outputJar: File, packagesToVendor: Set<String>) {\n+        val parentPackage = parentPackageProvider()\n+        val rulesFile = File.createTempFile(parentPackage, \".jarjar\")\n+        rulesFile.printWriter().use {\n+            for (externalPackageName in packagesToVendor) {\n+                it.println(\"rule $externalPackageName.** $parentPackage.@0\")\n+            }\n+        }\n+        logger.info(\"The following JarJar configuration will be used:\\n ${rulesFile.readText()}\")\n+\n+        project.javaexec {\n+            main = \"org.pantsbuild.jarjar.Main\"\n+            classpath = project.files(jarJarProvider())\n+            // jvmArgs = listOf(\"-Xdebug\", \"-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acff7b6d231e664393566e830f7cf84814e9614a"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzODk5Ng==", "bodyText": "debugging leftovers :)\nremoved", "url": "https://github.com/firebase/firebase-android-sdk/pull/1821#discussion_r472438996", "createdAt": "2020-08-18T19:46:14Z", "author": {"login": "vkryachko"}, "path": "buildSrc/src/main/java/com/google/firebase/gradle/plugins/VendorPlugin.kt", "diffHunk": "@@ -0,0 +1,260 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.gradle.plugins\n+\n+import com.android.build.api.transform.Format\n+import com.android.build.api.transform.QualifiedContent\n+import com.android.build.api.transform.Transform\n+import com.android.build.api.transform.TransformInvocation\n+import com.android.build.gradle.LibraryExtension\n+import com.android.build.gradle.LibraryPlugin\n+import java.io.BufferedInputStream\n+import java.io.BufferedOutputStream\n+import java.io.File\n+import java.io.FileInputStream\n+import java.io.FileOutputStream\n+import java.util.zip.ZipEntry\n+import java.util.zip.ZipFile\n+import java.util.zip.ZipOutputStream\n+import org.gradle.api.GradleException\n+import org.gradle.api.Plugin\n+import org.gradle.api.Project\n+import org.gradle.api.artifacts.Configuration\n+import org.gradle.api.logging.Logger\n+\n+class VendorPlugin : Plugin<Project> {\n+    override fun apply(project: Project) {\n+        project.plugins.all {\n+            when (this) {\n+                is LibraryPlugin -> configureAndroid(project)\n+            }\n+        }\n+    }\n+\n+    fun configureAndroid(project: Project) {\n+\n+        val vendor = project.configurations.create(\"vendor\")\n+        project.configurations.all {\n+            when (name) {\n+                \"compileOnly\", \"testImplementation\", \"androidTestImplementation\" -> extendsFrom(vendor)\n+            }\n+        }\n+\n+        val jarJar = project.configurations.create(\"firebaseJarJarArtifact\")\n+        project.dependencies.add(\"firebaseJarJarArtifact\", \"org.pantsbuild:jarjar:1.7.2\")\n+\n+        val android = project.extensions.getByType(LibraryExtension::class.java)\n+\n+        android.registerTransform(VendorTransform(\n+                android,\n+                vendor,\n+                JarJarTransformer(\n+                        parentPackageProvider = {\n+                            android.libraryVariants.find { it.name == \"release\" }!!.applicationId\n+                        },\n+                        jarJarProvider = { jarJar.resolve() },\n+                        project = project,\n+                        logger = project.logger),\n+                logger = project.logger))\n+    }\n+}\n+\n+interface JarTransformer {\n+    fun transform(inputJar: File, outputJar: File, packagesToVendor: Set<String>)\n+}\n+\n+class JarJarTransformer(\n+    private val parentPackageProvider: () -> String,\n+    private val jarJarProvider: () -> Collection<File>,\n+    private val project: Project,\n+    private val logger: Logger\n+) : JarTransformer {\n+    override fun transform(inputJar: File, outputJar: File, packagesToVendor: Set<String>) {\n+        val parentPackage = parentPackageProvider()\n+        val rulesFile = File.createTempFile(parentPackage, \".jarjar\")\n+        rulesFile.printWriter().use {\n+            for (externalPackageName in packagesToVendor) {\n+                it.println(\"rule $externalPackageName.** $parentPackage.@0\")\n+            }\n+        }\n+        logger.info(\"The following JarJar configuration will be used:\\n ${rulesFile.readText()}\")\n+\n+        project.javaexec {\n+            main = \"org.pantsbuild.jarjar.Main\"\n+            classpath = project.files(jarJarProvider())\n+            // jvmArgs = listOf(\"-Xdebug\", \"-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxNDEyMA=="}, "originalCommit": {"oid": "acff7b6d231e664393566e830f7cf84814e9614a"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjkzMTY4OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/com/google/firebase/gradle/plugins/VendorPlugin.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTowMTowN1rOHCh8LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTowMTowN1rOHCh8LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxNTI3Nw==", "bodyText": "maybe upgrade it to warning? I think it's more likely that devs forgot to include the lib to vendor than that they forgot to remove the unnecessary plugin.", "url": "https://github.com/firebase/firebase-android-sdk/pull/1821#discussion_r472415277", "createdAt": "2020-08-18T19:01:07Z", "author": {"login": "rlazo"}, "path": "buildSrc/src/main/java/com/google/firebase/gradle/plugins/VendorPlugin.kt", "diffHunk": "@@ -0,0 +1,260 @@\n+// Copyright 2020 Google LLC\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//      http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.google.firebase.gradle.plugins\n+\n+import com.android.build.api.transform.Format\n+import com.android.build.api.transform.QualifiedContent\n+import com.android.build.api.transform.Transform\n+import com.android.build.api.transform.TransformInvocation\n+import com.android.build.gradle.LibraryExtension\n+import com.android.build.gradle.LibraryPlugin\n+import java.io.BufferedInputStream\n+import java.io.BufferedOutputStream\n+import java.io.File\n+import java.io.FileInputStream\n+import java.io.FileOutputStream\n+import java.util.zip.ZipEntry\n+import java.util.zip.ZipFile\n+import java.util.zip.ZipOutputStream\n+import org.gradle.api.GradleException\n+import org.gradle.api.Plugin\n+import org.gradle.api.Project\n+import org.gradle.api.artifacts.Configuration\n+import org.gradle.api.logging.Logger\n+\n+class VendorPlugin : Plugin<Project> {\n+    override fun apply(project: Project) {\n+        project.plugins.all {\n+            when (this) {\n+                is LibraryPlugin -> configureAndroid(project)\n+            }\n+        }\n+    }\n+\n+    fun configureAndroid(project: Project) {\n+\n+        val vendor = project.configurations.create(\"vendor\")\n+        project.configurations.all {\n+            when (name) {\n+                \"compileOnly\", \"testImplementation\", \"androidTestImplementation\" -> extendsFrom(vendor)\n+            }\n+        }\n+\n+        val jarJar = project.configurations.create(\"firebaseJarJarArtifact\")\n+        project.dependencies.add(\"firebaseJarJarArtifact\", \"org.pantsbuild:jarjar:1.7.2\")\n+\n+        val android = project.extensions.getByType(LibraryExtension::class.java)\n+\n+        android.registerTransform(VendorTransform(\n+                android,\n+                vendor,\n+                JarJarTransformer(\n+                        parentPackageProvider = {\n+                            android.libraryVariants.find { it.name == \"release\" }!!.applicationId\n+                        },\n+                        jarJarProvider = { jarJar.resolve() },\n+                        project = project,\n+                        logger = project.logger),\n+                logger = project.logger))\n+    }\n+}\n+\n+interface JarTransformer {\n+    fun transform(inputJar: File, outputJar: File, packagesToVendor: Set<String>)\n+}\n+\n+class JarJarTransformer(\n+    private val parentPackageProvider: () -> String,\n+    private val jarJarProvider: () -> Collection<File>,\n+    private val project: Project,\n+    private val logger: Logger\n+) : JarTransformer {\n+    override fun transform(inputJar: File, outputJar: File, packagesToVendor: Set<String>) {\n+        val parentPackage = parentPackageProvider()\n+        val rulesFile = File.createTempFile(parentPackage, \".jarjar\")\n+        rulesFile.printWriter().use {\n+            for (externalPackageName in packagesToVendor) {\n+                it.println(\"rule $externalPackageName.** $parentPackage.@0\")\n+            }\n+        }\n+        logger.info(\"The following JarJar configuration will be used:\\n ${rulesFile.readText()}\")\n+\n+        project.javaexec {\n+            main = \"org.pantsbuild.jarjar.Main\"\n+            classpath = project.files(jarJarProvider())\n+            // jvmArgs = listOf(\"-Xdebug\", \"-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005\")\n+            args = listOf(\"process\", rulesFile.absolutePath, inputJar.absolutePath, outputJar.absolutePath)\n+            systemProperties = mapOf(\"verbose\" to \"true\", \"misplacedClassStrategy\" to \"FATAL\")\n+        }.assertNormalExitValue()\n+    }\n+}\n+\n+class VendorTransform(\n+    private val android: LibraryExtension,\n+    private val configuration: Configuration,\n+    private val jarTransformer: JarTransformer,\n+    private val logger: Logger\n+) :\n+        Transform() {\n+    override fun getName() = \"firebaseVendorTransform\"\n+\n+    override fun getInputTypes(): MutableSet<QualifiedContent.ContentType> {\n+        return mutableSetOf(QualifiedContent.DefaultContentType.CLASSES)\n+    }\n+\n+    override fun isIncremental() = false\n+\n+    override fun getScopes(): MutableSet<in QualifiedContent.Scope> {\n+        return mutableSetOf(QualifiedContent.Scope.PROJECT)\n+    }\n+\n+    override fun getReferencedScopes(): MutableSet<in QualifiedContent.Scope> {\n+        return mutableSetOf(QualifiedContent.Scope.PROJECT)\n+    }\n+\n+    override fun transform(transformInvocation: TransformInvocation) {\n+        if (configuration.resolve().isEmpty()) {\n+            logger.info(\"Nothing to vendor. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acff7b6d231e664393566e830f7cf84814e9614a"}, "originalPosition": 129}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1127, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}