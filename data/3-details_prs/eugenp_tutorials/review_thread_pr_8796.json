{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxOTY3Nzgz", "number": 8796, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxNjo0NDo0M1rODmBlOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxNjo0NDo0M1rODmBlOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTk4MzkyOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-regex/src/test/java/com/baeldung/replacetokens/ReplacingTokensUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxNjo0NDo0M1rOFzO-Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxNjo0NDo0M1rOFzO-Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NzAyMw==", "bodyText": "adjust indentation on continuation lines of all the assertThat calls -- two spaces over from where assertThat begins", "url": "https://github.com/eugenp/tutorials/pull/8796#discussion_r389267023", "createdAt": "2020-03-07T16:44:43Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-regex/src/test/java/com/baeldung/replacetokens/ReplacingTokensUnitTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package com.baeldung.replacetokens;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static com.baeldung.replacetokens.ReplacingTokens.TITLE_CASE_PATTERN;\n+import static com.baeldung.replacetokens.ReplacingTokens.replaceTokens;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class ReplacingTokensUnitTest {\n+    private static final String EXAMPLE_INPUT = \"First 3 Capital Words! then 10 TLAs, I Found\";\n+    private static final String EXAMPLE_INPUT_PROCESSED = \"first 3 capital words! then 10 TLAs, i found\";\n+\n+    @Test\n+    public void whenFindMatches_thenTitleWordsFound() {\n+        Matcher matcher = TITLE_CASE_PATTERN.matcher(EXAMPLE_INPUT);\n+        List<String> matches = new ArrayList<>();\n+        while (matcher.find()) {\n+            matches.add(matcher.group(1));\n+        }\n+\n+        assertThat(matches)\n+                .containsExactly(\"First\", \"Capital\", \"Words\", \"I\", \"Found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6621ead33807df0d4a6fdc0bc0002187cedd63d"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4366, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}