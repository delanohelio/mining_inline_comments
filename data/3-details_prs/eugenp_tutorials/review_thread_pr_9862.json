{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MTc4MzQ1", "number": 9862, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyMjowNFrOEYGoOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTozMjo1MFrOEYG6UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzA5ODgwOnYy", "diffSide": "RIGHT", "path": "spring-webflux-threads/src/main/java/com/baeldung/webflux/Controller.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyMjowNFrOHAQjyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzoxMzoxOFrOHAqBbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzM1Mw==", "bodyText": "thareds -> theads", "url": "https://github.com/eugenp/tutorials/pull/9862#discussion_r470033353", "createdAt": "2020-08-13T15:22:04Z", "author": {"login": "bfontana"}, "path": "spring-webflux-threads/src/main/java/com/baeldung/webflux/Controller.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.baeldung.webflux;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.IntegerDeserializer;\n+import org.apache.kafka.common.serialization.IntegerSerializer;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+import io.reactivex.Observable;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Scheduler;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+import reactor.kafka.sender.KafkaSender;\n+import reactor.kafka.sender.SenderOptions;\n+import reactor.kafka.sender.SenderRecord;\n+\n+@RestController\n+@RequestMapping(\"/\")\n+public class Controller {\n+\n+    @Autowired\n+    private PersonRepository personRepository;\n+\n+    private Scheduler scheduler = Schedulers.newBoundedElastic(5, 10, \"MyThreadGroup\");\n+\n+    private Logger logger = LoggerFactory.getLogger(Controller.class);\n+\n+    @GetMapping(\"/threads/webflux\")\n+    public Flux<String> getThreadsWebflux() {\n+        return Flux.fromIterable(getThreads());\n+    }\n+\n+    @GetMapping(\"/threads/webclient\")\n+    public Flux<String> getThreadsWebClient() {\n+        WebClient.create(\"http://localhost:8080/index\")\n+            .get()\n+            .retrieve()\n+            .bodyToMono(String.class)\n+            .subscribeOn(scheduler)\n+            .publishOn(scheduler)\n+            .doOnNext(s -> logger.info(\"Response: {}\", s))\n+            .subscribe();\n+        return Flux.fromIterable(getThreads());\n+    }\n+\n+    @GetMapping(\"/threads/rxjava\")\n+    public Observable<String> getIndexRxJava() {\n+        Observable.fromIterable(Arrays.asList(\"Hello\", \"World\"))\n+            .map(s -> s.toUpperCase())\n+            .observeOn(io.reactivex.schedulers.Schedulers.trampoline())\n+            .doOnNext(s -> logger.info(\"String: {}\", s))\n+            .subscribe();\n+        return Observable.fromIterable(getThreads());\n+    }\n+\n+    @GetMapping(\"/threads/mongodb\")\n+    public Flux<String> getIndexMongo() {\n+        personRepository.findAll()\n+            .doOnNext(p -> logger.info(\"Person: {}\", p))\n+            .subscribe();\n+        return Flux.fromIterable(getThreads());\n+    }\n+\n+    @GetMapping(\"/thareds/reactor-kafka\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddab1f5e387802a777347428296b57b3814860"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MDU0Mg==", "bodyText": "Corrected", "url": "https://github.com/eugenp/tutorials/pull/9862#discussion_r470450542", "createdAt": "2020-08-14T07:13:18Z", "author": {"login": "kcacademic"}, "path": "spring-webflux-threads/src/main/java/com/baeldung/webflux/Controller.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.baeldung.webflux;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.IntegerDeserializer;\n+import org.apache.kafka.common.serialization.IntegerSerializer;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.reactive.function.client.WebClient;\n+\n+import io.reactivex.Observable;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Scheduler;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.kafka.receiver.KafkaReceiver;\n+import reactor.kafka.receiver.ReceiverOptions;\n+import reactor.kafka.receiver.ReceiverRecord;\n+import reactor.kafka.sender.KafkaSender;\n+import reactor.kafka.sender.SenderOptions;\n+import reactor.kafka.sender.SenderRecord;\n+\n+@RestController\n+@RequestMapping(\"/\")\n+public class Controller {\n+\n+    @Autowired\n+    private PersonRepository personRepository;\n+\n+    private Scheduler scheduler = Schedulers.newBoundedElastic(5, 10, \"MyThreadGroup\");\n+\n+    private Logger logger = LoggerFactory.getLogger(Controller.class);\n+\n+    @GetMapping(\"/threads/webflux\")\n+    public Flux<String> getThreadsWebflux() {\n+        return Flux.fromIterable(getThreads());\n+    }\n+\n+    @GetMapping(\"/threads/webclient\")\n+    public Flux<String> getThreadsWebClient() {\n+        WebClient.create(\"http://localhost:8080/index\")\n+            .get()\n+            .retrieve()\n+            .bodyToMono(String.class)\n+            .subscribeOn(scheduler)\n+            .publishOn(scheduler)\n+            .doOnNext(s -> logger.info(\"Response: {}\", s))\n+            .subscribe();\n+        return Flux.fromIterable(getThreads());\n+    }\n+\n+    @GetMapping(\"/threads/rxjava\")\n+    public Observable<String> getIndexRxJava() {\n+        Observable.fromIterable(Arrays.asList(\"Hello\", \"World\"))\n+            .map(s -> s.toUpperCase())\n+            .observeOn(io.reactivex.schedulers.Schedulers.trampoline())\n+            .doOnNext(s -> logger.info(\"String: {}\", s))\n+            .subscribe();\n+        return Observable.fromIterable(getThreads());\n+    }\n+\n+    @GetMapping(\"/threads/mongodb\")\n+    public Flux<String> getIndexMongo() {\n+        personRepository.findAll()\n+            .doOnNext(p -> logger.info(\"Person: {}\", p))\n+            .subscribe();\n+        return Flux.fromIterable(getThreads());\n+    }\n+\n+    @GetMapping(\"/thareds/reactor-kafka\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzM1Mw=="}, "originalCommit": {"oid": "99ddab1f5e387802a777347428296b57b3814860"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzEwMzAwOnYy", "diffSide": "RIGHT", "path": "spring-webflux-threads/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyMjo1N1rOHAQmRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzoxNjowNlrOHAqF0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzk5MQ==", "bodyText": "Delete commented out lines. The same happens below", "url": "https://github.com/eugenp/tutorials/pull/9862#discussion_r470033991", "createdAt": "2020-08-13T15:22:57Z", "author": {"login": "bfontana"}, "path": "spring-webflux-threads/pom.xml", "diffHunk": "@@ -0,0 +1,87 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>com.baeldung.spring</groupId>\n+    <artifactId>spring-webflux-threads</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+    <name>spring-webflux-threads</name>\n+    <packaging>jar</packaging>\n+    <description>Spring WebFlux AMQP Sample</description>\n+\n+    <parent>\n+        <groupId>com.baeldung</groupId>\n+        <artifactId>parent-boot-2</artifactId>\n+        <version>0.0.1-SNAPSHOT</version>\n+        <relativePath>../parent-boot-2</relativePath>\n+    </parent>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-webflux</artifactId>\n+            <!--", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddab1f5e387802a777347428296b57b3814860"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MDQ4MQ==", "bodyText": "The commented lines are actually a way to suggest how to change the default runtime.", "url": "https://github.com/eugenp/tutorials/pull/9862#discussion_r470450481", "createdAt": "2020-08-14T07:13:08Z", "author": {"login": "kcacademic"}, "path": "spring-webflux-threads/pom.xml", "diffHunk": "@@ -0,0 +1,87 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>com.baeldung.spring</groupId>\n+    <artifactId>spring-webflux-threads</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+    <name>spring-webflux-threads</name>\n+    <packaging>jar</packaging>\n+    <description>Spring WebFlux AMQP Sample</description>\n+\n+    <parent>\n+        <groupId>com.baeldung</groupId>\n+        <artifactId>parent-boot-2</artifactId>\n+        <version>0.0.1-SNAPSHOT</version>\n+        <relativePath>../parent-boot-2</relativePath>\n+    </parent>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-webflux</artifactId>\n+            <!--", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzk5MQ=="}, "originalCommit": {"oid": "99ddab1f5e387802a777347428296b57b3814860"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MTY2NA==", "bodyText": "I have added comments in the pom to indicate why the lines are commented.", "url": "https://github.com/eugenp/tutorials/pull/9862#discussion_r470451664", "createdAt": "2020-08-14T07:16:06Z", "author": {"login": "kcacademic"}, "path": "spring-webflux-threads/pom.xml", "diffHunk": "@@ -0,0 +1,87 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>com.baeldung.spring</groupId>\n+    <artifactId>spring-webflux-threads</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+    <name>spring-webflux-threads</name>\n+    <packaging>jar</packaging>\n+    <description>Spring WebFlux AMQP Sample</description>\n+\n+    <parent>\n+        <groupId>com.baeldung</groupId>\n+        <artifactId>parent-boot-2</artifactId>\n+        <version>0.0.1-SNAPSHOT</version>\n+        <relativePath>../parent-boot-2</relativePath>\n+    </parent>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-webflux</artifactId>\n+            <!--", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzk5MQ=="}, "originalCommit": {"oid": "99ddab1f5e387802a777347428296b57b3814860"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzEyOTMxOnYy", "diffSide": "RIGHT", "path": "spring-webflux-threads/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyOTowMFrOHAQ2VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzoxMjo0M1rOHAqAiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzODEwMA==", "bodyText": "Spring WebFlux Threads Sample", "url": "https://github.com/eugenp/tutorials/pull/9862#discussion_r470038100", "createdAt": "2020-08-13T15:29:00Z", "author": {"login": "bfontana"}, "path": "spring-webflux-threads/pom.xml", "diffHunk": "@@ -0,0 +1,87 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>com.baeldung.spring</groupId>\n+    <artifactId>spring-webflux-threads</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+    <name>spring-webflux-threads</name>\n+    <packaging>jar</packaging>\n+    <description>Spring WebFlux AMQP Sample</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddab1f5e387802a777347428296b57b3814860"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MDMxMg==", "bodyText": "Corrected", "url": "https://github.com/eugenp/tutorials/pull/9862#discussion_r470450312", "createdAt": "2020-08-14T07:12:43Z", "author": {"login": "kcacademic"}, "path": "spring-webflux-threads/pom.xml", "diffHunk": "@@ -0,0 +1,87 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>com.baeldung.spring</groupId>\n+    <artifactId>spring-webflux-threads</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+    <name>spring-webflux-threads</name>\n+    <packaging>jar</packaging>\n+    <description>Spring WebFlux AMQP Sample</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzODEwMA=="}, "originalCommit": {"oid": "99ddab1f5e387802a777347428296b57b3814860"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzE0NTEyOnYy", "diffSide": "RIGHT", "path": "spring-webflux-threads/src/main/resources/application.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTozMjo1MFrOHARASg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzoxMjoxNlrOHAp_0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0MDY1MA==", "bodyText": "Can we delete this empty file or it's necessary?", "url": "https://github.com/eugenp/tutorials/pull/9862#discussion_r470040650", "createdAt": "2020-08-13T15:32:50Z", "author": {"login": "bfontana"}, "path": "spring-webflux-threads/src/main/resources/application.yml", "diffHunk": "@@ -0,0 +1,7 @@\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ddab1f5e387802a777347428296b57b3814860"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MDEzMQ==", "bodyText": "Yes, we can, this is a default boot properties class.", "url": "https://github.com/eugenp/tutorials/pull/9862#discussion_r470450131", "createdAt": "2020-08-14T07:12:16Z", "author": {"login": "kcacademic"}, "path": "spring-webflux-threads/src/main/resources/application.yml", "diffHunk": "@@ -0,0 +1,7 @@\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0MDY1MA=="}, "originalCommit": {"oid": "99ddab1f5e387802a777347428296b57b3814860"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4259, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}