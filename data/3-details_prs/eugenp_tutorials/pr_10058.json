{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5OTMxOTYx", "number": 10058, "title": "Bael 4457 list of json objects with rest template", "bodyText": "", "createdAt": "2020-09-20T17:23:54Z", "url": "https://github.com/eugenp/tutorials/pull/10058", "merged": true, "mergeCommit": {"oid": "282a057c3f50a45ffa1450db8e0996eda3ea31e4"}, "closed": true, "closedAt": "2020-12-18T09:11:28Z", "author": {"login": "Trixi-Turny"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdIK9QHgH2gAyNDg5OTMxOTYxOmQ3ZTUwMDFmM2JlYTUzZTlkNTFiNmRhMzRkZTdjYjcyYmNjNDA2Mzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnF20YgH2gAyNDg5OTMxOTYxOjgwZWYxYWIwZjAyMTNjZmM3ZTZiMDIxZWMwMGE3ODIwMDI2NTI4ZGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d7e5001f3bea53e9d51b6da34de7cb72bcc40639", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/d7e5001f3bea53e9d51b6da34de7cb72bcc40639", "committedDate": "2020-09-12T14:34:35Z", "message": "Add users.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db7334b4e773c17b68629d320234e7cdb04e5ffe", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/db7334b4e773c17b68629d320234e7cdb04e5ffe", "committedDate": "2020-09-20T16:06:04Z", "message": "BAEL-4457 demo app with Object array and ParameterizedTypeReference example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c09253ebef8721468792c146731bd5ced4bfa180", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/c09253ebef8721468792c146731bd5ced4bfa180", "committedDate": "2020-09-20T17:17:07Z", "message": "BAEL-4457 write unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7489feae2396fde75cd14b3aff4450c65d80897", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/f7489feae2396fde75cd14b3aff4450c65d80897", "committedDate": "2020-09-20T17:23:20Z", "message": "BAEL-4456 remove new directory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "495cddf37122050f69e5a7381ab4ba2180b6234c", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/495cddf37122050f69e5a7381ab4ba2180b6234c", "committedDate": "2020-09-20T17:36:25Z", "message": "BAEL-4457 fix pom and testname"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b0da33f8364af3930c0c661e30300ab34a3110b", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/7b0da33f8364af3930c0c661e30300ab34a3110b", "committedDate": "2020-09-20T17:48:59Z", "message": "BAEL-4457 use default target release"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMjEyOTc1", "url": "https://github.com/eugenp/tutorials/pull/10058#pullrequestreview-492212975", "createdAt": "2020-09-20T18:22:51Z", "commit": {"oid": "7b0da33f8364af3930c0c661e30300ab34a3110b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxODoyMjo1MVrOHU8JDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxODozMjo0NVrOHU8M1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxODkyNQ==", "bodyText": "There's no actual change to this file, so let's revert this one.", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r491718925", "createdAt": "2020-09-20T18:22:51Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/pom.xml", "diffHunk": "@@ -48,15 +48,15 @@\n             <groupId>ch.qos.logback</groupId>\n             <artifactId>logback-classic</artifactId>\n         </dependency>\n-        \n+\n     </dependencies>\n-    \n+\n     <build>\n         <plugins>\n-        <plugin>\n-            <groupId>org.springframework.boot</groupId>\n-            <artifactId>spring-boot-maven-plugin</artifactId>\n-        </plugin>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+            </plugin>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0da33f8364af3930c0c661e30300ab34a3110b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxODk5OQ==", "bodyText": "You don't need to both provide constructor injection and field injection. You may find that you can take @Autowired off the field and things work. Depending on the version of Spring you may need to add @Autowired to the constructor, though these days it's not needed.", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r491718999", "createdAt": "2020-09-20T18:23:52Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/main/java/com/baeldung/resttemplate/json/consumer/controller/UserConsumerController.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.baeldung.resttemplate.json.consumer.controller;\n+\n+import com.baeldung.resttemplate.json.model.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.List;\n+\n+@RestController\n+public class UserConsumerController {\n+\n+    @Autowired\n+    private final RestTemplate restTemplate;\n+\n+    public UserConsumerController(RestTemplate restTemplate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0da33f8364af3930c0c661e30300ab34a3110b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxOTE5NA==", "bodyText": "static members should be the first thing in a class - this should be moved up top.", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r491719194", "createdAt": "2020-09-20T18:25:14Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/main/java/com/baeldung/resttemplate/json/consumer/controller/UserConsumerController.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.baeldung.resttemplate.json.consumer.controller;\n+\n+import com.baeldung.resttemplate.json.model.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.List;\n+\n+@RestController\n+public class UserConsumerController {\n+\n+    @Autowired\n+    private final RestTemplate restTemplate;\n+\n+    public UserConsumerController(RestTemplate restTemplate) {\n+        this.restTemplate = restTemplate;\n+    }\n+    private static final String BASE_URL=\"http://localhost:8080/users\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0da33f8364af3930c0c661e30300ab34a3110b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxOTI0Mg==", "bodyText": "Is it also possible to serialize the response as User[] too?", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r491719242", "createdAt": "2020-09-20T18:25:47Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/main/java/com/baeldung/resttemplate/json/consumer/controller/UserConsumerController.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.baeldung.resttemplate.json.consumer.controller;\n+\n+import com.baeldung.resttemplate.json.model.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.List;\n+\n+@RestController\n+public class UserConsumerController {\n+\n+    @Autowired\n+    private final RestTemplate restTemplate;\n+\n+    public UserConsumerController(RestTemplate restTemplate) {\n+        this.restTemplate = restTemplate;\n+    }\n+    private static final String BASE_URL=\"http://localhost:8080/users\";\n+\n+    @GetMapping(value=\"/usersAsListOfObjects\")\n+    public @ResponseBody\n+    Object[] getUsersAsObjects(){\n+\n+        ResponseEntity<Object[]> responseEntity = restTemplate.getForEntity(BASE_URL, Object[].class);\n+        Object[] objects = responseEntity.getBody();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0da33f8364af3930c0c661e30300ab34a3110b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxOTM5Ng==", "bodyText": "This POJO is more complex than it needs to be for the example. We're just looking for a situation where there's a list of objects coming back from an endpoint. This object has a list of other things in it. That seems off topic.", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r491719396", "createdAt": "2020-09-20T18:27:38Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/main/java/com/baeldung/resttemplate/json/model/User.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.baeldung.resttemplate.json.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.List;\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class User {\n+    private int id;\n+    private String name;\n+    private List<Address> addressList;\n+\n+    public User(int id, String name, List<Address> addressList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0da33f8364af3930c0c661e30300ab34a3110b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxOTQ2Nw==", "bodyText": "While it may be good practice to extract interfaces from services, this interface seems to complicate this simple example. We could just as easily do without it.", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r491719467", "createdAt": "2020-09-20T18:28:31Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/main/java/com/baeldung/resttemplate/json/service/UserService.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package com.baeldung.resttemplate.json.service;\n+\n+import com.baeldung.resttemplate.json.model.User;\n+\n+import java.util.List;\n+\n+public interface UserService {\n+    List<User> getUsers() ;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0da33f8364af3930c0c661e30300ab34a3110b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxOTUyOA==", "bodyText": "It might be cleaner to use Arrays.asList here, statically importing it. You don't need to assign that to a new ArrayList.", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r491719528", "createdAt": "2020-09-20T18:29:19Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/main/java/com/baeldung/resttemplate/json/service/UserServiceImpl.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.baeldung.resttemplate.json.service;\n+\n+import com.baeldung.resttemplate.json.model.Address;\n+import com.baeldung.resttemplate.json.model.User;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@Service\n+public class UserServiceImpl implements UserService {\n+    @Override\n+    public List<User> getUsers() {\n+        return List.of(\n+                new User(1, \"user1\", new ArrayList<Address>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0da33f8364af3930c0c661e30300ab34a3110b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxOTU3NQ==", "bodyText": "I don't see any use of Mockito in this test.", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r491719575", "createdAt": "2020-09-20T18:29:36Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/test/java/com/baeldung/resttemplate/json/consumer/controller/UserConsumerControllerUnitTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.baeldung.resttemplate.json.consumer.controller;\n+\n+import com.baeldung.resttemplate.json.model.Address;\n+import com.baeldung.resttemplate.json.model.User;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+\n+import org.springframework.test.web.client.ExpectedCount;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withStatus;\n+\n+@SpringBootTest\n+@ExtendWith(MockitoExtension.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0da33f8364af3930c0c661e30300ab34a3110b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxOTY2OQ==", "bodyText": "Maybe use an assertion where you compare the full list, rather than just checking bits of it. AssertJ's assertThat(...).containsExactly(...) would do it, but you can use JUnit's assertThat(object, hamcrestMatcher) too if you prefer.", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r491719669", "createdAt": "2020-09-20T18:30:37Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/test/java/com/baeldung/resttemplate/json/consumer/controller/UserConsumerControllerUnitTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.baeldung.resttemplate.json.consumer.controller;\n+\n+import com.baeldung.resttemplate.json.model.Address;\n+import com.baeldung.resttemplate.json.model.User;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+\n+import org.springframework.test.web.client.ExpectedCount;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withStatus;\n+\n+@SpringBootTest\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsumerControllerUnitTest {\n+    private MockRestServiceServer mockServer;\n+    private final RestTemplate restTemplate = new RestTemplate();\n+\n+\n+    private UserConsumerController tested = new UserConsumerController(restTemplate);\n+\n+    @Before\n+    public void init() {\n+        mockServer = MockRestServiceServer.createServer(restTemplate);\n+    }\n+\n+    @Test\n+    public void whenGetUsersAsObjects_thenOK() {\n+        String url = \"http://localhost :8080/users\";\n+\n+        List<User> expected = Arrays.asList(\n+                new User(1, \"user1\", new ArrayList<Address>(\n+                        Arrays.asList(\n+                                new Address(\"address1_addressLine1\", \"address1_addressLine2\", \"address1_town\", \"address1_postCode\"),\n+                                new Address(\"address2_addressLine1\", \"address2_addressLine2\", \"address2_town\", \"address2_postCode\")))),\n+                new User(2,\n+                        \"user2\", new ArrayList<Address>(\n+                        Arrays.asList(\n+                                new Address(\"address1_addressLine1\", \"address1_addressLine2\", \"address1_town\", \"address1_postCode\")))));\n+\n+        String userJson = \"[{\\\"id\\\":1,\\\"name\\\":\\\"user1\\\",\\\"addressList\\\":[{\\\"addressLine1\\\":\\\"address1_addressLine1\\\",\\\"addressLine2\\\":\\\"address1_addressLine2\\\",\\\"town\\\":\\\"address1_town\\\",\\\"postCode\\\":\\\"address1_postCode\\\"},\" +\n+                                  \"{\\\"addressLine1\\\":\\\"address2_addressLine1\\\",\\\"addressLine2\\\":\\\"address2_addressLine2\\\",\\\"town\\\":\\\"address2_town\\\",\\\"postCode\\\":\\\"address2_postCode\\\"}]},\" +\n+                                  \"{\\\"id\\\":2,\\\"name\\\":\\\"user2\\\",\\\"addressList\\\":[{\\\"addressLine1\\\":\\\"address1_addressLine1\\\",\\\"addressLine2\\\":\\\"address1_addressLine2\\\",\\\"town\\\":\\\"address1_town\\\",\\\"postCode\\\":\\\"address1_postCode\\\"}]}]\";\n+\n+        mockServer.expect(ExpectedCount.once(),\n+                requestTo(\"http://localhost:8080/users\"))\n+                .andExpect(method(HttpMethod.GET))\n+                .andRespond(withStatus(HttpStatus.OK)\n+                                    .contentType(MediaType.APPLICATION_JSON)\n+                                    .body(userJson)\n+                );\n+\n+        //when\n+        List<User> actual = tested.getUsersAsPOJO();\n+        mockServer.verify();\n+        assertEquals(actual.size(), expected.size());\n+        assertEquals(actual.get(0).getName(), expected.get(0).getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0da33f8364af3930c0c661e30300ab34a3110b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxOTY4OQ==", "bodyText": "redundant whitespace", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r491719689", "createdAt": "2020-09-20T18:30:46Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/test/java/com/baeldung/resttemplate/json/provider/controller/UserControllerUnitTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.baeldung.resttemplate.json.provider.controller;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import com.baeldung.resttemplate.json.model.Address;\n+import com.baeldung.resttemplate.json.model.User;\n+import com.baeldung.resttemplate.json.service.UserService;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.mockito.Mockito.when;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0da33f8364af3930c0c661e30300ab34a3110b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxOTcyMg==", "bodyText": "It may be necessary to unit test controllers in production code, but it's overkill for this example.", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r491719722", "createdAt": "2020-09-20T18:31:14Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/test/java/com/baeldung/resttemplate/json/provider/controller/UserControllerUnitTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.baeldung.resttemplate.json.provider.controller;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import com.baeldung.resttemplate.json.model.Address;\n+import com.baeldung.resttemplate.json.model.User;\n+import com.baeldung.resttemplate.json.service.UserService;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.mockito.Mockito.when;\n+\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+\n+@ExtendWith(MockitoExtension.class)\n+class UserControllerUnitTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0da33f8364af3930c0c661e30300ab34a3110b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxOTg5NQ==", "bodyText": "You're only testing one of the two endpoints here.", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r491719895", "createdAt": "2020-09-20T18:32:45Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/test/java/com/baeldung/resttemplate/json/consumer/controller/UserConsumerControllerUnitTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package com.baeldung.resttemplate.json.consumer.controller;\n+\n+import com.baeldung.resttemplate.json.model.Address;\n+import com.baeldung.resttemplate.json.model.User;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+\n+import org.springframework.test.web.client.ExpectedCount;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.internal.bytebuddy.matcher.ElementMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withStatus;\n+\n+@SpringBootTest\n+@ExtendWith(MockitoExtension.class)\n+public class UserConsumerControllerUnitTest {\n+    private MockRestServiceServer mockServer;\n+    private final RestTemplate restTemplate = new RestTemplate();\n+\n+\n+    private UserConsumerController tested = new UserConsumerController(restTemplate);\n+\n+    @Before\n+    public void init() {\n+        mockServer = MockRestServiceServer.createServer(restTemplate);\n+    }\n+\n+    @Test\n+    public void whenGetUsersAsObjects_thenOK() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b0da33f8364af3930c0c661e30300ab34a3110b"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7aabd1a876e9f6469f03df6d99c8bc8d8d30193a", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/7aabd1a876e9f6469f03df6d99c8bc8d8d30193a", "committedDate": "2020-09-23T06:32:39Z", "message": "BAEL-4457 add more examples of processing the objects and address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NDE0MzQ2", "url": "https://github.com/eugenp/tutorials/pull/10058#pullrequestreview-494414346", "createdAt": "2020-09-23T08:20:15Z", "commit": {"oid": "7aabd1a876e9f6469f03df6d99c8bc8d8d30193a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODoyMDoxNVrOHWcnNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODoyOTowNFrOHWdIbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI5OTUwOA==", "bodyText": "I don't think it's a good idea to remove this plugin from the existing example.", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r493299508", "createdAt": "2020-09-23T08:20:15Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/pom.xml", "diffHunk": "@@ -48,16 +48,7 @@\n             <groupId>ch.qos.logback</groupId>\n             <artifactId>logback-classic</artifactId>\n         </dependency>\n-        \n+\n     </dependencies>\n-    \n-    <build>\n-        <plugins>\n-        <plugin>\n-            <groupId>org.springframework.boot</groupId>\n-            <artifactId>spring-boot-maven-plugin</artifactId>\n-        </plugin>\n-        </plugins>\n-    </build>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aabd1a876e9f6469f03df6d99c8bc8d8d30193a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMwMjAzOQ==", "bodyText": "public seems to be in the wrong place here. I'd expect annotations before public. There's a missing space between () and {", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r493302039", "createdAt": "2020-09-23T08:22:52Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/main/java/com/baeldung/resttemplate/json/consumer/controller/UserConsumerController.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.baeldung.resttemplate.json.consumer.controller;\n+\n+import com.baeldung.resttemplate.json.model.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@RestController\n+public class UserConsumerController {\n+\n+    private static final String BASE_URL=\"http://localhost:8080/users\";\n+    private final RestTemplate restTemplate;\n+\n+    public UserConsumerController(RestTemplate restTemplate) {\n+        this.restTemplate = restTemplate;\n+    }\n+\n+    @GetMapping(value=\"/usersAsArrayOfObjects\")\n+    public @ResponseBody\n+    Object[] getUsersAsObjects(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aabd1a876e9f6469f03df6d99c8bc8d8d30193a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMwMjg4MA==", "bodyText": "the url doesn't match the behaviour", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r493302880", "createdAt": "2020-09-23T08:23:42Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/main/java/com/baeldung/resttemplate/json/consumer/controller/UserConsumerController.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.baeldung.resttemplate.json.consumer.controller;\n+\n+import com.baeldung.resttemplate.json.model.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@RestController\n+public class UserConsumerController {\n+\n+    private static final String BASE_URL=\"http://localhost:8080/users\";\n+    private final RestTemplate restTemplate;\n+\n+    public UserConsumerController(RestTemplate restTemplate) {\n+        this.restTemplate = restTemplate;\n+    }\n+\n+    @GetMapping(value=\"/usersAsArrayOfObjects\")\n+    public @ResponseBody\n+    Object[] getUsersAsObjects(){\n+\n+        ResponseEntity<Object[]> responseEntity = restTemplate.getForEntity(BASE_URL, Object[].class);\n+        Object[] objects = responseEntity.getBody();\n+        MediaType contentType = responseEntity.getHeaders().getContentType();\n+        HttpStatus statusCode = responseEntity.getStatusCode();\n+        return objects;\n+    }\n+\n+\n+    @GetMapping(value=\"/usersAsArrayOfPOJO\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aabd1a876e9f6469f03df6d99c8bc8d8d30193a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMwMzg4Mw==", "bodyText": "same spacing and ordering from the previous. I'd expect:\n@GetMapping(...)\n@ResponseBody\npublic List<Foo> getXYZ() {\n   ...\n}", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r493303883", "createdAt": "2020-09-23T08:24:40Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/main/java/com/baeldung/resttemplate/json/consumer/controller/UserConsumerController.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.baeldung.resttemplate.json.consumer.controller;\n+\n+import com.baeldung.resttemplate.json.model.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@RestController\n+public class UserConsumerController {\n+\n+    private static final String BASE_URL=\"http://localhost:8080/users\";\n+    private final RestTemplate restTemplate;\n+\n+    public UserConsumerController(RestTemplate restTemplate) {\n+        this.restTemplate = restTemplate;\n+    }\n+\n+    @GetMapping(value=\"/usersAsArrayOfObjects\")\n+    public @ResponseBody\n+    Object[] getUsersAsObjects(){\n+\n+        ResponseEntity<Object[]> responseEntity = restTemplate.getForEntity(BASE_URL, Object[].class);\n+        Object[] objects = responseEntity.getBody();\n+        MediaType contentType = responseEntity.getHeaders().getContentType();\n+        HttpStatus statusCode = responseEntity.getStatusCode();\n+        return objects;\n+    }\n+\n+\n+    @GetMapping(value=\"/usersAsArrayOfPOJO\")\n+    public @ResponseBody\n+    List<String> getPostCodesFromUserArray(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aabd1a876e9f6469f03df6d99c8bc8d8d30193a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMwNTU5Nw==", "bodyText": "let's break down the streaming operations into a new line by each major function:\nreturn Arrays.stream(userArray)\n  .flatMap(user->user.getAddressList().stream())\n  .map(Address::getPostCode)  // should use function reference where possible too\n  .collect(Collectors.toList());", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r493305597", "createdAt": "2020-09-23T08:26:29Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/main/java/com/baeldung/resttemplate/json/consumer/controller/UserConsumerController.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.baeldung.resttemplate.json.consumer.controller;\n+\n+import com.baeldung.resttemplate.json.model.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@RestController\n+public class UserConsumerController {\n+\n+    private static final String BASE_URL=\"http://localhost:8080/users\";\n+    private final RestTemplate restTemplate;\n+\n+    public UserConsumerController(RestTemplate restTemplate) {\n+        this.restTemplate = restTemplate;\n+    }\n+\n+    @GetMapping(value=\"/usersAsArrayOfObjects\")\n+    public @ResponseBody\n+    Object[] getUsersAsObjects(){\n+\n+        ResponseEntity<Object[]> responseEntity = restTemplate.getForEntity(BASE_URL, Object[].class);\n+        Object[] objects = responseEntity.getBody();\n+        MediaType contentType = responseEntity.getHeaders().getContentType();\n+        HttpStatus statusCode = responseEntity.getStatusCode();\n+        return objects;\n+    }\n+\n+\n+    @GetMapping(value=\"/usersAsArrayOfPOJO\")\n+    public @ResponseBody\n+    List<String> getPostCodesFromUserArray(){\n+\n+        ResponseEntity<User[]> responseEntity = restTemplate.getForEntity(BASE_URL, User[].class);\n+        User[] userArray = responseEntity.getBody();\n+        MediaType contentType = responseEntity.getHeaders().getContentType();\n+        HttpStatus statusCode = responseEntity.getStatusCode();\n+        return Arrays.stream(userArray).flatMap(user->user.getAddressList().stream()).map(address->address.getPostCode()).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aabd1a876e9f6469f03df6d99c8bc8d8d30193a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMwNTg5OA==", "bodyText": "misleading name", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r493305898", "createdAt": "2020-09-23T08:26:45Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/main/java/com/baeldung/resttemplate/json/consumer/controller/UserConsumerController.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.baeldung.resttemplate.json.consumer.controller;\n+\n+import com.baeldung.resttemplate.json.model.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+@RestController\n+public class UserConsumerController {\n+\n+    private static final String BASE_URL=\"http://localhost:8080/users\";\n+    private final RestTemplate restTemplate;\n+\n+    public UserConsumerController(RestTemplate restTemplate) {\n+        this.restTemplate = restTemplate;\n+    }\n+\n+    @GetMapping(value=\"/usersAsArrayOfObjects\")\n+    public @ResponseBody\n+    Object[] getUsersAsObjects(){\n+\n+        ResponseEntity<Object[]> responseEntity = restTemplate.getForEntity(BASE_URL, Object[].class);\n+        Object[] objects = responseEntity.getBody();\n+        MediaType contentType = responseEntity.getHeaders().getContentType();\n+        HttpStatus statusCode = responseEntity.getStatusCode();\n+        return objects;\n+    }\n+\n+\n+    @GetMapping(value=\"/usersAsArrayOfPOJO\")\n+    public @ResponseBody\n+    List<String> getPostCodesFromUserArray(){\n+\n+        ResponseEntity<User[]> responseEntity = restTemplate.getForEntity(BASE_URL, User[].class);\n+        User[] userArray = responseEntity.getBody();\n+        MediaType contentType = responseEntity.getHeaders().getContentType();\n+        HttpStatus statusCode = responseEntity.getStatusCode();\n+        return Arrays.stream(userArray).flatMap(user->user.getAddressList().stream()).map(address->address.getPostCode()).collect(Collectors.toList());\n+    }\n+\n+    @GetMapping(value=\"/usersAsListOfPojo\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aabd1a876e9f6469f03df6d99c8bc8d8d30193a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMwNjEwNA==", "bodyText": "Ok.", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r493306104", "createdAt": "2020-09-23T08:27:03Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/main/java/com/baeldung/resttemplate/json/model/User.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.baeldung.resttemplate.json.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.List;\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class User {\n+    private int id;\n+    private String name;\n+    private List<Address> addressList;\n+\n+    public User(int id, String name, List<Address> addressList) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxOTM5Ng=="}, "originalCommit": {"oid": "7b0da33f8364af3930c0c661e30300ab34a3110b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMwNzE1OQ==", "bodyText": "Is this an essential part of the example? Are you not mocking it out in the tests/example code.\nWe're only interested in the consumer of this API, not the producer.", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r493307159", "createdAt": "2020-09-23T08:28:05Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/main/java/com/baeldung/resttemplate/json/provider/controller/UserController.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.baeldung.resttemplate.json.provider.controller;\n+\n+import com.baeldung.resttemplate.json.model.User;\n+import com.baeldung.resttemplate.json.service.UserService;\n+import org.springframework.http.MediaType;\n+import org.springframework.web.bind.annotation.*;\n+import java.util.List;\n+\n+@RestController\n+public class UserController {\n+\n+    private final UserService userService;\n+\n+    public UserController(UserService userService) {\n+        this.userService = userService;\n+    }\n+    @RequestMapping(value = \"/users\", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n+    public @ResponseBody\n+    List<User> getUsers() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aabd1a876e9f6469f03df6d99c8bc8d8d30193a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMwODAxNQ==", "bodyText": "If it's the same user JSON each time, maybe extract to a constant?", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r493308015", "createdAt": "2020-09-23T08:29:04Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/test/java/com/baeldung/resttemplate/json/consumer/controller/UserConsumerControllerUnitTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.baeldung.resttemplate.json.consumer.controller;\n+\n+import com.baeldung.resttemplate.json.model.Address;\n+import com.baeldung.resttemplate.json.model.User;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+\n+import org.springframework.test.web.client.ExpectedCount;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withStatus;\n+\n+@SpringBootTest\n+public class UserConsumerControllerUnitTest {\n+    private MockRestServiceServer mockServer;\n+    private final RestTemplate restTemplate = new RestTemplate();\n+    private UserConsumerController tested = new UserConsumerController(restTemplate);\n+\n+    @Before\n+    public void init() {\n+        mockServer = MockRestServiceServer.createServer(restTemplate);\n+    }\n+\n+    @Test\n+    public void whenGetUsersAsObjects_thenOK() {\n+        // Given\n+        String url = \"http://localhost :8080/users\";\n+        Object[] expected = new Object[]{new User(1, \"user1\", new ArrayList<Address>(\n+                Arrays.asList(\n+                        new Address(\"address1_addressLine1\", \"address1_addressLine2\", \"address1_town\", \"user1_address1_postCode\"),\n+                        new Address(\"address2_addressLine1\", \"address2_addressLine2\", \"address2_town\", \"user1_address2_postCode\")))),\n+                new User(2,\n+                        \"user2\", new ArrayList<Address>(\n+                        Arrays.asList(\n+                                new Address(\"address1_addressLine1\", \"address1_addressLine2\", \"address1_town\", \"user2_address1_postCode\"))))};\n+\n+        String userJson = \"[{\\\"id\\\":1,\\\"name\\\":\\\"user1\\\",\\\"addressList\\\":[{\\\"addressLine1\\\":\\\"address1_addressLine1\\\",\\\"addressLine2\\\":\\\"address1_addressLine2\\\",\\\"town\\\":\\\"address1_town\\\",\\\"postCode\\\":\\\"user1_address1_postCode\\\"},\" +\n+                                  \"{\\\"addressLine1\\\":\\\"address2_addressLine1\\\",\\\"addressLine2\\\":\\\"address2_addressLine2\\\",\\\"town\\\":\\\"address2_town\\\",\\\"postCode\\\":\\\"user1_address2_postCode\\\"}]},\" +\n+                                  \"{\\\"id\\\":2,\\\"name\\\":\\\"user2\\\",\\\"addressList\\\":[{\\\"addressLine1\\\":\\\"address1_addressLine1\\\",\\\"addressLine2\\\":\\\"address1_addressLine2\\\",\\\"town\\\":\\\"address1_town\\\",\\\"postCode\\\":\\\"user2_address1_postCode\\\"}]}]\";\n+\n+        // When\n+        mockServer.expect(ExpectedCount.once(),\n+                requestTo(\"http://localhost:8080/users\"))\n+                .andExpect(method(HttpMethod.GET))\n+                .andRespond(withStatus(HttpStatus.OK)\n+                                    .contentType(MediaType.APPLICATION_JSON)\n+                                    .body(userJson)\n+                );\n+        Object[] actual = tested.getUsersAsObjects();\n+\n+        // Then\n+        mockServer.verify();\n+        assertEquals(actual.length, expected.length);\n+\n+        //TODO: do one more assertion\n+    }\n+\n+    @Test\n+    public void whenGetUsersAsArray_thenOK() {\n+        // Given\n+        String url = \"http://localhost :8080/users\";\n+        List<String> expected = Arrays.asList(\"user1_address1_postCode\", \"user1_address2_postCode\", \"user2_address1_postCode\");\n+\n+        String userJson = \"[{\\\"id\\\":1,\\\"name\\\":\\\"user1\\\",\\\"addressList\\\":[{\\\"addressLine1\\\":\\\"address1_addressLine1\\\",\\\"addressLine2\\\":\\\"address1_addressLine2\\\",\\\"town\\\":\\\"address1_town\\\",\\\"postCode\\\":\\\"user1_address1_postCode\\\"},\" +\n+                                  \"{\\\"addressLine1\\\":\\\"address2_addressLine1\\\",\\\"addressLine2\\\":\\\"address2_addressLine2\\\",\\\"town\\\":\\\"address2_town\\\",\\\"postCode\\\":\\\"user1_address2_postCode\\\"}]},\" +\n+                                  \"{\\\"id\\\":2,\\\"name\\\":\\\"user2\\\",\\\"addressList\\\":[{\\\"addressLine1\\\":\\\"address1_addressLine1\\\",\\\"addressLine2\\\":\\\"address1_addressLine2\\\",\\\"town\\\":\\\"address1_town\\\",\\\"postCode\\\":\\\"user2_address1_postCode\\\"}]}]\";\n+\n+        // When\n+        mockServer.expect(ExpectedCount.once(),\n+                requestTo(\"http://localhost:8080/users\"))\n+                .andExpect(method(HttpMethod.GET))\n+                .andRespond(withStatus(HttpStatus.OK)\n+                                    .contentType(MediaType.APPLICATION_JSON)\n+                                    .body(userJson)\n+                );\n+        List<String> actual = tested.getPostCodesFromUserArray();\n+\n+        // Then\n+        mockServer.verify();\n+        assertEquals(actual.size(), expected.size());\n+        assertThat(actual).containsExactly(expected.get(0), expected.get(1), expected.get(2));\n+    }\n+\n+    @Test\n+    public void whenGetUsersAsPOJO_thenOK() {\n+        // Given\n+        String url = \"http://localhost :8080/users\";\n+        List<String> expected = Arrays.asList(\"user1\", \"user2\");\n+\n+        String userJson = \"[{\\\"id\\\":1,\\\"name\\\":\\\"user1\\\",\\\"addressList\\\":[{\\\"addressLine1\\\":\\\"address1_addressLine1\\\",\\\"addressLine2\\\":\\\"address1_addressLine2\\\",\\\"town\\\":\\\"address1_town\\\",\\\"postCode\\\":\\\"user1_address1_postCode\\\"},\" +\n+                                  \"{\\\"addressLine1\\\":\\\"address2_addressLine1\\\",\\\"addressLine2\\\":\\\"address2_addressLine2\\\",\\\"town\\\":\\\"address2_town\\\",\\\"postCode\\\":\\\"user1_address2_postCode\\\"}]},\" +\n+                                  \"{\\\"id\\\":2,\\\"name\\\":\\\"user2\\\",\\\"addressList\\\":[{\\\"addressLine1\\\":\\\"address1_addressLine1\\\",\\\"addressLine2\\\":\\\"address1_addressLine2\\\",\\\"town\\\":\\\"address1_town\\\",\\\"postCode\\\":\\\"user2_address1_postCode\\\"}]}]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aabd1a876e9f6469f03df6d99c8bc8d8d30193a"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f040fd38f31695d008562dfd2d23299eeef40ad5", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/f040fd38f31695d008562dfd2d23299eeef40ad5", "committedDate": "2020-09-23T11:41:58Z", "message": "BAEL-4457 remove new ArrayList and put @ResponseBody before public"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3a81dc27a4ee222deb85a6a32f6f8c9035510cb", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/f3a81dc27a4ee222deb85a6a32f6f8c9035510cb", "committedDate": "2020-09-23T11:49:09Z", "message": "BAEL-4457 use static userJson object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a43ae323d2a311d76c57597471d3a4550b99600e", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/a43ae323d2a311d76c57597471d3a4550b99600e", "committedDate": "2020-09-23T11:51:08Z", "message": "BAEL-4456 tidy up extra spaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0f1c6a35cd7ce95c2226d99eec5c44ed3890be2", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/c0f1c6a35cd7ce95c2226d99eec5c44ed3890be2", "committedDate": "2020-09-23T11:54:33Z", "message": "BAEL-4457 removed too many brackets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "687a6d0917bf0e6bd9442f7e3f8728bcc6e476f7", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/687a6d0917bf0e6bd9442f7e3f8728bcc6e476f7", "committedDate": "2020-09-23T12:02:29Z", "message": "BAEL-4457 remove incorrect assertion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91b1b14f7ec0224c9823f61adf06859c33a0eba8", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/91b1b14f7ec0224c9823f61adf06859c33a0eba8", "committedDate": "2020-09-24T06:06:22Z", "message": "BAEL-4457 use a service instead of another controller"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e64fbb3c492828570903c2edb121d11a3487988", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/6e64fbb3c492828570903c2edb121d11a3487988", "committedDate": "2020-09-24T06:22:42Z", "message": "BAEL-4457 use ObjectMapper to extract usernames from objects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ec546e25e13765df01d859c52d6564a7be8073b", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/3ec546e25e13765df01d859c52d6564a7be8073b", "committedDate": "2020-09-24T06:25:40Z", "message": "BAEL-4457 fix UserController"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7638d61ecaaf56950514ed218493864496d8b8eb", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/7638d61ecaaf56950514ed218493864496d8b8eb", "committedDate": "2020-09-24T06:30:02Z", "message": "BAEL-4457 delete provider service and controller"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7cc979c818e2421c43d4c09d9266b74c0f2fa08", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/b7cc979c818e2421c43d4c09d9266b74c0f2fa08", "committedDate": "2020-09-24T06:34:01Z", "message": "BAEL-4457 use functional interface where possible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42b0ccc36c3c519fa90ef37d98aec6005551fae3", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/42b0ccc36c3c519fa90ef37d98aec6005551fae3", "committedDate": "2020-10-11T17:53:45Z", "message": "BAEL-4457 remove unnecessary annotations and tidy indents for exchange()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjM0NTA2", "url": "https://github.com/eugenp/tutorials/pull/10058#pullrequestreview-521234506", "createdAt": "2020-11-01T15:27:00Z", "commit": {"oid": "42b0ccc36c3c519fa90ef37d98aec6005551fae3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNToyNzowMFrOHrv4wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNToyNzowMFrOHrv4wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzNTM5Mg==", "bodyText": "These are very heavily indented. Please check the indentation style. I suspect they should be indented by 2 additional spaces, rather than 12.", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r515635392", "createdAt": "2020-11-01T15:27:00Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/main/java/com/baeldung/resttemplate/json/consumer/service/UserConsumerServiceImpl.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.baeldung.resttemplate.json.consumer.service;\n+\n+import com.baeldung.resttemplate.json.model.Address;\n+import com.baeldung.resttemplate.json.model.User;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class UserConsumerServiceImpl implements UserConsumerService {\n+\n+    private static final String BASE_URL = \"http://localhost:8080/users\";\n+    private final RestTemplate restTemplate;\n+\n+    public UserConsumerServiceImpl(RestTemplate restTemplate) {\n+        this.restTemplate = restTemplate;\n+    }\n+\n+    @Override\n+    public List<String> processUserDataFromObjectArray() {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ResponseEntity<Object[]> responseEntity = restTemplate.getForEntity(BASE_URL, Object[].class);\n+        Object[] objects = responseEntity.getBody();\n+        return Arrays.stream(objects)\n+                       .map(object -> mapper.convertValue(object, User.class))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b0ccc36c3c519fa90ef37d98aec6005551fae3"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2Mjg2MTkx", "url": "https://github.com/eugenp/tutorials/pull/10058#pullrequestreview-536286191", "createdAt": "2020-11-23T09:18:03Z", "commit": {"oid": "42b0ccc36c3c519fa90ef37d98aec6005551fae3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToxODowNFrOH4EuLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToxODowNFrOH4EuLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1OTY2Mw==", "bodyText": "Please look at all of the continuation indentation", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r528559663", "createdAt": "2020-11-23T09:18:04Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/main/java/com/baeldung/resttemplate/json/consumer/service/UserConsumerServiceImpl.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.baeldung.resttemplate.json.consumer.service;\n+\n+import com.baeldung.resttemplate.json.model.Address;\n+import com.baeldung.resttemplate.json.model.User;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class UserConsumerServiceImpl implements UserConsumerService {\n+\n+    private static final String BASE_URL = \"http://localhost:8080/users\";\n+    private final RestTemplate restTemplate;\n+\n+    public UserConsumerServiceImpl(RestTemplate restTemplate) {\n+        this.restTemplate = restTemplate;\n+    }\n+\n+    @Override\n+    public List<String> processUserDataFromObjectArray() {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ResponseEntity<Object[]> responseEntity = restTemplate.getForEntity(BASE_URL, Object[].class);\n+        Object[] objects = responseEntity.getBody();\n+        return Arrays.stream(objects)\n+                       .map(object -> mapper.convertValue(object, User.class))\n+                       .map(User::getName)\n+                       .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public List<String> processUserDataFromUserArray() {\n+        ResponseEntity<User[]> responseEntity = restTemplate.getForEntity(BASE_URL, User[].class);\n+        User[] userArray = responseEntity.getBody();\n+        return Arrays.stream(userArray)\n+                       .map(User::getName)\n+                       .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public List<String> processUserDataFromUserList() {\n+        ResponseEntity<List<User>> responseEntity = restTemplate.exchange(\n+                BASE_URL,\n+                HttpMethod.GET,\n+                null,\n+                new ParameterizedTypeReference<List<User>>() {\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b0ccc36c3c519fa90ef37d98aec6005551fae3"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2Mjg2Njc3", "url": "https://github.com/eugenp/tutorials/pull/10058#pullrequestreview-536286677", "createdAt": "2020-11-23T09:18:38Z", "commit": {"oid": "42b0ccc36c3c519fa90ef37d98aec6005551fae3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToxODozOFrOH4EvYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToxODozOFrOH4EvYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1OTk2OA==", "bodyText": "This super() is unnecessary - let's remove it.", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r528559968", "createdAt": "2020-11-23T09:18:38Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/main/java/com/baeldung/resttemplate/json/model/Address.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.baeldung.resttemplate.json.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class Address {\n+    private String addressLine1;\n+    private String addressLine2;\n+    private String town;\n+    private String postCode;\n+\n+    public Address(String addressLine1, String addressLine2, String town, String postCode) {\n+        this.addressLine1 = addressLine1;\n+        this.addressLine2 = addressLine2;\n+        this.town = town;\n+        this.postCode = postCode;\n+    }\n+\n+    public Address() {\n+        super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b0ccc36c3c519fa90ef37d98aec6005551fae3"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2Mjg3MDcy", "url": "https://github.com/eugenp/tutorials/pull/10058#pullrequestreview-536287072", "createdAt": "2020-11-23T09:19:11Z", "commit": {"oid": "42b0ccc36c3c519fa90ef37d98aec6005551fae3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToxOToxMVrOH4EwfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToxOToxMVrOH4EwfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU2MDI1Mg==", "bodyText": "The space in the URL is unexepcted", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r528560252", "createdAt": "2020-11-23T09:19:11Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/test/java/com/baeldung/resttemplate/json/consumer/service/UserConsumerServiceImplUnitTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.baeldung.resttemplate.json.consumer.service;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.client.ExpectedCount;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withStatus;\n+\n+@SpringBootTest\n+public class UserConsumerServiceImplUnitTest {\n+\n+    private static String USER_JSON = \"[{\\\"id\\\":1,\\\"name\\\":\\\"user1\\\",\\\"addressList\\\":[{\\\"addressLine1\\\":\\\"address1_addressLine1\\\",\\\"addressLine2\\\":\\\"address1_addressLine2\\\",\\\"town\\\":\\\"address1_town\\\",\\\"postCode\\\":\\\"user1_address1_postCode\\\"},\" +\n+                                              \"{\\\"addressLine1\\\":\\\"address2_addressLine1\\\",\\\"addressLine2\\\":\\\"address2_addressLine2\\\",\\\"town\\\":\\\"address2_town\\\",\\\"postCode\\\":\\\"user1_address2_postCode\\\"}]},\" +\n+                                              \"{\\\"id\\\":2,\\\"name\\\":\\\"user2\\\",\\\"addressList\\\":[{\\\"addressLine1\\\":\\\"address1_addressLine1\\\",\\\"addressLine2\\\":\\\"address1_addressLine2\\\",\\\"town\\\":\\\"address1_town\\\",\\\"postCode\\\":\\\"user2_address1_postCode\\\"}]}]\";\n+    private MockRestServiceServer mockServer;\n+    private final RestTemplate restTemplate = new RestTemplate();\n+    private final UserConsumerService tested = new UserConsumerServiceImpl(restTemplate);\n+\n+    @Before\n+    public void init() {\n+        mockServer = MockRestServiceServer.createServer(restTemplate);\n+    }\n+\n+    @Test\n+    public void whenProcessUserDataAsObjects_thenOK() {\n+        // Given\n+        String url = \"http://localhost :8080/users\";\n+        List<String> expected = Arrays.asList(\"user1\", \"user2\");\n+\n+        // When\n+        mockServer.expect(ExpectedCount.once(),\n+                requestTo(\"http://localhost:8080/users\"))\n+                .andExpect(method(HttpMethod.GET))\n+                .andRespond(withStatus(HttpStatus.OK)\n+                                    .contentType(MediaType.APPLICATION_JSON)\n+                                    .body(USER_JSON)\n+                );\n+        List<String> actual = tested.processUserDataFromObjectArray();\n+\n+        // Then\n+        mockServer.verify();\n+        assertEquals(actual.size(), expected.size());\n+        assertThat(actual).containsExactly(expected.get(0), expected.get(1));\n+    }\n+\n+    @Test\n+    public void whenProcessUserDataAsArray_thenOK() {\n+        // Given\n+        String url = \"http://localhost :8080/users\";\n+        List<String> expected = Arrays.asList(\"user1\", \"user2\");\n+\n+        // When\n+        mockServer.expect(ExpectedCount.once(),\n+                requestTo(\"http://localhost:8080/users\"))\n+                .andExpect(method(HttpMethod.GET))\n+                .andRespond(withStatus(HttpStatus.OK)\n+                                    .contentType(MediaType.APPLICATION_JSON)\n+                                    .body(USER_JSON)\n+                );\n+        List<String> actual = tested.processUserDataFromUserArray();\n+\n+        // Then\n+        mockServer.verify();\n+        assertEquals(actual.size(), expected.size());\n+        assertThat(actual).containsExactly(expected.get(0), expected.get(1));\n+    }\n+\n+    @Test\n+    public void whenProcessUserDataAsList_thenOK() {\n+        // Given\n+        String url = \"http://localhost :8080/users\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b0ccc36c3c519fa90ef37d98aec6005551fae3"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89bae5393dcd5c5fef139f8fd22096d705febef5", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/89bae5393dcd5c5fef139f8fd22096d705febef5", "committedDate": "2020-11-23T20:52:37Z", "message": "BAEL-4457 use @JsonCreator and @JsonProperty and resolve comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22fbf40f5854e01e6f2f8e68d00acca07434cf2c", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/22fbf40f5854e01e6f2f8e68d00acca07434cf2c", "committedDate": "2020-12-05T12:09:38Z", "message": "BAEL-4457 improve comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NjQyODUx", "url": "https://github.com/eugenp/tutorials/pull/10058#pullrequestreview-547642851", "createdAt": "2020-12-08T21:22:39Z", "commit": {"oid": "22fbf40f5854e01e6f2f8e68d00acca07434cf2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMToyMjozOVrOIB2x6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMToyMjozOVrOIB2x6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgxNzAwMg==", "bodyText": "A couple of mild stylistic points here:\n\n// Given and // When and // Then appeared somewhere on the internet as a commenting standard in tests, and on the whole it adds very little. It may be good to finish the sentence // Given a user service that returns three users but otherwise, it's just boilerplate\n\nSmall aside here, your mockServer.expect is actually part of your Given clause in the above, but appears as a When!\n\nThere's no need to assert both the size and the exact content of a list - the second automatically implies the first.\n2.5. If you're using assertJ, and I recommend it a lot, then let's not mix it with JUnit's own assertEquals", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r538817002", "createdAt": "2020-12-08T21:22:39Z", "author": {"login": "ashleyfrieze"}, "path": "spring-resttemplate-2/src/test/java/com/baeldung/resttemplate/json/consumer/service/UserConsumerServiceImplUnitTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+package com.baeldung.resttemplate.json.consumer.service;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.client.ExpectedCount;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withStatus;\n+\n+@SpringBootTest\n+public class UserConsumerServiceImplUnitTest {\n+\n+    private static String USER_JSON = \"[{\\\"id\\\":1,\\\"name\\\":\\\"user1\\\",\\\"addressList\\\":[{\\\"addressLine1\\\":\\\"address1_addressLine1\\\",\\\"addressLine2\\\":\\\"address1_addressLine2\\\",\\\"town\\\":\\\"address1_town\\\",\\\"postCode\\\":\\\"user1_address1_postCode\\\"},\" +\n+                                              \"{\\\"addressLine1\\\":\\\"address2_addressLine1\\\",\\\"addressLine2\\\":\\\"address2_addressLine2\\\",\\\"town\\\":\\\"address2_town\\\",\\\"postCode\\\":\\\"user1_address2_postCode\\\"}]},\" +\n+                                              \"{\\\"id\\\":2,\\\"name\\\":\\\"user2\\\",\\\"addressList\\\":[{\\\"addressLine1\\\":\\\"address1_addressLine1\\\",\\\"addressLine2\\\":\\\"address1_addressLine2\\\",\\\"town\\\":\\\"address1_town\\\",\\\"postCode\\\":\\\"user2_address1_postCode\\\"}]}]\";\n+\n+    private MockRestServiceServer mockServer;\n+    private final RestTemplate restTemplate = new RestTemplate();\n+    private final UserConsumerService tested = new UserConsumerServiceImpl(restTemplate);\n+\n+    @Before\n+    public void init() {\n+        mockServer = MockRestServiceServer.createServer(restTemplate);\n+    }\n+\n+    @Test\n+    public void whenProcessUserDataAsObjects_thenOK() {\n+        // Given\n+        String url = \"http://localhost:8080/users\";\n+        List<String> expected = Arrays.asList(\"user1\", \"user2\");\n+\n+        // When\n+        mockServer.expect(ExpectedCount.once(),\n+                requestTo(url))\n+                .andExpect(method(HttpMethod.GET))\n+                .andRespond(withStatus(HttpStatus.OK)\n+                                    .contentType(MediaType.APPLICATION_JSON)\n+                                    .body(USER_JSON)\n+                );\n+        List<String> actual = tested.processUserDataFromObjectArray();\n+\n+        // Then\n+        mockServer.verify();\n+        assertEquals(actual.size(), expected.size());\n+        assertThat(actual).containsExactly(expected.get(0), expected.get(1));\n+    }\n+\n+    @Test\n+    public void whenProcessUserDataAsArray_thenOK() {\n+        // Given\n+        String url = \"http://localhost:8080/users\";\n+        List<String> expected = Arrays.asList(\"user1\", \"user2\");\n+\n+        // When\n+        mockServer.expect(ExpectedCount.once(),\n+                requestTo(url))\n+                .andExpect(method(HttpMethod.GET))\n+                .andRespond(withStatus(HttpStatus.OK)\n+                                    .contentType(MediaType.APPLICATION_JSON)\n+                                    .body(USER_JSON)\n+                );\n+        List<String> actual = tested.processUserDataFromUserArray();\n+\n+        // Then\n+        mockServer.verify();\n+        assertEquals(actual.size(), expected.size());\n+        assertThat(actual).containsExactly(expected.get(0), expected.get(1));\n+    }\n+\n+    @Test\n+    public void whenProcessUserDataAsList_thenOK() {\n+        // Given\n+        String url = \"http://localhost:8080/users\";\n+        List<String> expected = Arrays.asList(\"user1\", \"user2\");\n+\n+        // When\n+        mockServer.expect(ExpectedCount.once(),\n+                requestTo(url))\n+                .andExpect(method(HttpMethod.GET))\n+                .andRespond(withStatus(HttpStatus.OK)\n+                                    .contentType(MediaType.APPLICATION_JSON)\n+                                    .body(USER_JSON)\n+                );\n+        List<String> actual = tested.processUserDataFromUserList();\n+\n+        // Then\n+        mockServer.verify();\n+        assertEquals(actual.size(), expected.size());\n+        assertThat(actual).containsExactly(expected.get(0), expected.get(1));\n+    }\n+\n+\n+    @Test\n+    public void whenProcessNestedUserDataFromArray_thenOK() {\n+        // Given\n+        String url = \"http://localhost:8080/users\";\n+        List<String> expected = Arrays.asList(\"user1_address1_postCode\", \"user1_address2_postCode\", \"user2_address1_postCode\");\n+\n+        // When\n+        mockServer.expect(ExpectedCount.once(),\n+                requestTo(url))\n+                .andExpect(method(HttpMethod.GET))\n+                .andRespond(withStatus(HttpStatus.OK)\n+                                    .contentType(MediaType.APPLICATION_JSON)\n+                                    .body(USER_JSON)\n+                );\n+        List<String> actual = tested.processNestedUserDataFromUserArray();\n+\n+        // Then\n+        mockServer.verify();\n+        assertEquals(actual.size(), expected.size());\n+        assertThat(actual).containsExactly(expected.get(0), expected.get(1), expected.get(2));\n+    }\n+\n+    @Test\n+    public void whenProcessNestedUserDataFromList_thenOK() {\n+        // Given\n+        String url = \"http://localhost:8080/users\";\n+        List<String> expected = Arrays.asList(\"user1_address1_postCode\", \"user1_address2_postCode\", \"user2_address1_postCode\");\n+\n+        // When\n+        mockServer.expect(ExpectedCount.once(),\n+                requestTo(url))\n+                .andExpect(method(HttpMethod.GET))\n+                .andRespond(withStatus(HttpStatus.OK)\n+                                    .contentType(MediaType.APPLICATION_JSON)\n+                                    .body(USER_JSON)\n+                );\n+        List<String> actual = tested.processNestedUserDataFromUserList();\n+\n+        // Then\n+        mockServer.verify();\n+        assertEquals(actual.size(), expected.size());\n+        assertThat(actual).containsExactly(expected.get(0), expected.get(1), expected.get(2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22fbf40f5854e01e6f2f8e68d00acca07434cf2c"}, "originalPosition": 146}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a5707184074e72ccf2e0d9fe5914d66f9fff6e2", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/5a5707184074e72ccf2e0d9fe5914d66f9fff6e2", "committedDate": "2020-12-13T20:11:47Z", "message": "BAEL-4457 remove comments and use assertj core lib for assertions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0Mjc1OTA1", "url": "https://github.com/eugenp/tutorials/pull/10058#pullrequestreview-554275905", "createdAt": "2020-12-17T04:42:37Z", "commit": {"oid": "5a5707184074e72ccf2e0d9fe5914d66f9fff6e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDo0MjozN1rOIHkb_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDo0MjozN1rOIHkb_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwNzkzNQ==", "bodyText": "use a two-space indent for continuations", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r544807935", "createdAt": "2020-12-17T04:42:37Z", "author": {"login": "eric-martin"}, "path": "spring-resttemplate-2/src/main/java/com/baeldung/resttemplate/json/model/Address.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package com.baeldung.resttemplate.json.model;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class Address {\n+    private final String addressLine1;\n+    private final String addressLine2;\n+    private final String town;\n+    private final String postCode;\n+\n+    @JsonCreator\n+    public Address(\n+        @JsonProperty(\"addressLine1\") String addressLine1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5707184074e72ccf2e0d9fe5914d66f9fff6e2"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0Mjc1OTUw", "url": "https://github.com/eugenp/tutorials/pull/10058#pullrequestreview-554275950", "createdAt": "2020-12-17T04:42:50Z", "commit": {"oid": "5a5707184074e72ccf2e0d9fe5914d66f9fff6e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDo0Mjo1MFrOIHkcOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDo0Mjo1MFrOIHkcOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwNzk5Mg==", "bodyText": "same here", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r544807992", "createdAt": "2020-12-17T04:42:50Z", "author": {"login": "eric-martin"}, "path": "spring-resttemplate-2/src/main/java/com/baeldung/resttemplate/json/model/User.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.baeldung.resttemplate.json.model;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.util.List;\n+\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+public class User {\n+    private final int id;\n+    private final String name;\n+    private final List<Address> addressList;\n+\n+    @JsonCreator\n+    public User(\n+            @JsonProperty(\"id\") int id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5707184074e72ccf2e0d9fe5914d66f9fff6e2"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0Mjc2MDUx", "url": "https://github.com/eugenp/tutorials/pull/10058#pullrequestreview-554276051", "createdAt": "2020-12-17T04:43:13Z", "commit": {"oid": "5a5707184074e72ccf2e0d9fe5914d66f9fff6e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDo0MzoxM1rOIHkcnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDo0MzoxM1rOIHkcnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgwODA5Mw==", "bodyText": "same here", "url": "https://github.com/eugenp/tutorials/pull/10058#discussion_r544808093", "createdAt": "2020-12-17T04:43:13Z", "author": {"login": "eric-martin"}, "path": "spring-resttemplate-2/src/test/java/com/baeldung/resttemplate/json/consumer/service/UserConsumerServiceImplUnitTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package com.baeldung.resttemplate.json.consumer.service;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.client.ExpectedCount;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withStatus;\n+\n+@SpringBootTest\n+public class UserConsumerServiceImplUnitTest {\n+\n+    private static String USER_JSON = \"[{\\\"id\\\":1,\\\"name\\\":\\\"user1\\\",\\\"addressList\\\":[{\\\"addressLine1\\\":\\\"address1_addressLine1\\\",\\\"addressLine2\\\":\\\"address1_addressLine2\\\",\\\"town\\\":\\\"address1_town\\\",\\\"postCode\\\":\\\"user1_address1_postCode\\\"},\" +\n+                                              \"{\\\"addressLine1\\\":\\\"address2_addressLine1\\\",\\\"addressLine2\\\":\\\"address2_addressLine2\\\",\\\"town\\\":\\\"address2_town\\\",\\\"postCode\\\":\\\"user1_address2_postCode\\\"}]},\" +\n+                                              \"{\\\"id\\\":2,\\\"name\\\":\\\"user2\\\",\\\"addressList\\\":[{\\\"addressLine1\\\":\\\"address1_addressLine1\\\",\\\"addressLine2\\\":\\\"address1_addressLine2\\\",\\\"town\\\":\\\"address1_town\\\",\\\"postCode\\\":\\\"user2_address1_postCode\\\"}]}]\";\n+\n+    private MockRestServiceServer mockServer;\n+    private final RestTemplate restTemplate = new RestTemplate();\n+    private final UserConsumerService tested = new UserConsumerServiceImpl(restTemplate);\n+\n+    @Before\n+    public void init() {\n+        mockServer = MockRestServiceServer.createServer(restTemplate);\n+    }\n+\n+    @Test\n+    public void whenProcessUserDataAsObjects_thenOK() {\n+        String url = \"http://localhost:8080/users\";\n+        List<String> expected = Arrays.asList(\"user1\", \"user2\");\n+\n+        mockServer.expect(ExpectedCount.once(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5707184074e72ccf2e0d9fe5914d66f9fff6e2"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80ef1ab0f0213cfc7e6b021ec00a7820026528db", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/80ef1ab0f0213cfc7e6b021ec00a7820026528db", "committedDate": "2020-12-17T16:09:41Z", "message": "BAEL-4457 fix indents"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3955, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}