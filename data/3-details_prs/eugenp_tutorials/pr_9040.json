{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MTg3MTgy", "number": 9040, "title": "BAEL-3852 - A Guide to Foreign Memory Access API in Java 14", "bodyText": "", "createdAt": "2020-04-05T17:53:45Z", "url": "https://github.com/eugenp/tutorials/pull/9040", "merged": true, "mergeCommit": {"oid": "e049907062df42b1584a6bd17195d300e90b100b"}, "closed": true, "closedAt": "2020-05-10T14:14:54Z", "author": {"login": "musibs"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABbU1pC-gH2gAyMzk5MTg3MTgyOmYyYzAwODUxZTcyNjQwZTI0Yjc1MTJiMTQ4MzYxNmMwYWQzNmFiNzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcdi3ZbAH2gAyMzk5MTg3MTgyOjljNGQ3MTczMmMxZGMyNTRkZmUwN2FiYjMxMDEzYWM1ZGMxMTk2ODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f2c00851e72640e24b7512b1483616c0ad36ab77", "author": {"user": {"login": "musibs", "name": "Somnath Musib"}}, "url": "https://github.com/eugenp/tutorials/commit/f2c00851e72640e24b7512b1483616c0ad36ab77", "committedDate": "2019-09-20T06:43:13Z", "message": "Code sample for Java Hexagonal architecture"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1123cc9ffd692e65415222c5b81bc3bb6090a8a", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/e1123cc9ffd692e65415222c5b81bc3bb6090a8a", "committedDate": "2020-02-26T21:56:59Z", "message": "BAEL-3838 Capturing a Java Thread Dump"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01af6fa3791b63189f5792f3300814568e024b3a", "author": {"user": {"login": "musibs", "name": "Somnath Musib"}}, "url": "https://github.com/eugenp/tutorials/commit/01af6fa3791b63189f5792f3300814568e024b3a", "committedDate": "2020-04-05T17:10:12Z", "message": "Merge branch 'master' of github.com:musibs/tutorials"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57dda319006e3cd1adcfb85ac4d58895737d5d0f", "author": {"user": {"login": "musibs", "name": "Somnath Musib"}}, "url": "https://github.com/eugenp/tutorials/commit/57dda319006e3cd1adcfb85ac4d58895737d5d0f", "committedDate": "2020-04-05T17:49:04Z", "message": "BAEL-3852 Foreign memory api in Java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NzI1NjA0", "url": "https://github.com/eugenp/tutorials/pull/9040#pullrequestreview-389725604", "createdAt": "2020-04-08T07:42:44Z", "commit": {"oid": "57dda319006e3cd1adcfb85ac4d58895737d5d0f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0Mjo0NFrOGCi0YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0NDo1MVrOGCi5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMDgwMQ==", "bodyText": "Missing   between {} and {", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r405320801", "createdAt": "2020-04-08T07:42:44Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.baeldung.java14.foreign.api;\n+\n+import jdk.incubator.foreign.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+\n+import static org.hamcrest.core.Is.*;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertThat;\n+\n+public class ForeignMemoryUnitTest {\n+\n+    @Test\n+    public void whenValueIsSetThenAccessTheValue(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dda319006e3cd1adcfb85ac4d58895737d5d0f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMTkyMA==", "bodyText": "Unit tests with names that start test often don't explain themselves well. Let's stick with the given_when_then style. Maybe whenSetValuesWithMemoryLayout_thenTheyCanBeRetrieved", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r405321920", "createdAt": "2020-04-08T07:44:38Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.baeldung.java14.foreign.api;\n+\n+import jdk.incubator.foreign.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+\n+import static org.hamcrest.core.Is.*;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertThat;\n+\n+public class ForeignMemoryUnitTest {\n+\n+    @Test\n+    public void whenValueIsSetThenAccessTheValue(){\n+        long value = 10;\n+        MemoryAddress memoryAddress = MemorySegment.allocateNative(8).baseAddress();\n+        VarHandle varHandle = MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder());\n+        varHandle.set(memoryAddress, value);\n+        assertThat(varHandle.get(memoryAddress), is(value));\n+    }\n+\n+    @Test\n+    public void whenMultipleValuesAreSetThenAccessAll(){\n+        VarHandle varHandle = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder());\n+        try(MemorySegment memorySegment = MemorySegment.allocateNative(100)){\n+            MemoryAddress base = memorySegment.baseAddress();\n+            for(int i=0; i<25; i++){\n+                varHandle.set(base.addOffset((i*4)), i);\n+            }\n+\n+            for(int i=0; i<25; i++){\n+                assertThat(varHandle.get(base.addOffset((i*4))), is(i));\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testMemoryLayout(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dda319006e3cd1adcfb85ac4d58895737d5d0f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMjA0MQ==", "bodyText": "Similar test naming issue here.", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r405322041", "createdAt": "2020-04-08T07:44:51Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.baeldung.java14.foreign.api;\n+\n+import jdk.incubator.foreign.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+\n+import static org.hamcrest.core.Is.*;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertThat;\n+\n+public class ForeignMemoryUnitTest {\n+\n+    @Test\n+    public void whenValueIsSetThenAccessTheValue(){\n+        long value = 10;\n+        MemoryAddress memoryAddress = MemorySegment.allocateNative(8).baseAddress();\n+        VarHandle varHandle = MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder());\n+        varHandle.set(memoryAddress, value);\n+        assertThat(varHandle.get(memoryAddress), is(value));\n+    }\n+\n+    @Test\n+    public void whenMultipleValuesAreSetThenAccessAll(){\n+        VarHandle varHandle = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder());\n+        try(MemorySegment memorySegment = MemorySegment.allocateNative(100)){\n+            MemoryAddress base = memorySegment.baseAddress();\n+            for(int i=0; i<25; i++){\n+                varHandle.set(base.addOffset((i*4)), i);\n+            }\n+\n+            for(int i=0; i<25; i++){\n+                assertThat(varHandle.get(base.addOffset((i*4))), is(i));\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testMemoryLayout(){\n+        SequenceLayout sequenceLayout = MemoryLayout.ofSequence(25, MemoryLayout.ofValueBits(64, ByteOrder.nativeOrder()));\n+        VarHandle varHandle = sequenceLayout.varHandle(long.class, MemoryLayout.PathElement.sequenceElement());\n+        try(MemorySegment memorySegment = MemorySegment.allocateNative(sequenceLayout)){\n+            MemoryAddress base = memorySegment.baseAddress();\n+            for(long i=0; i<sequenceLayout.elementCount().getAsLong(); i++){\n+                varHandle.set(base, i, i);\n+            }\n+\n+            for(long i=0; i<sequenceLayout.elementCount().getAsLong(); i++){\n+                assertThat(varHandle.get(base, i), is(i));\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testSlicingOfMemorySegment(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dda319006e3cd1adcfb85ac4d58895737d5d0f"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7fa33ab4340e734b16e37f4e5ea596c0251bfd0", "author": {"user": {"login": "musibs", "name": "Somnath Musib"}}, "url": "https://github.com/eugenp/tutorials/commit/e7fa33ab4340e734b16e37f4e5ea596c0251bfd0", "committedDate": "2020-04-10T03:56:59Z", "message": "BAEL-3852 - Review changes of A Guide to Foreign Memory Access API in Java 14"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b68267071e350b63084c0c6ae02a5b3a3b3e0235", "author": {"user": {"login": "musibs", "name": "Somnath Musib"}}, "url": "https://github.com/eugenp/tutorials/commit/b68267071e350b63084c0c6ae02a5b3a3b3e0235", "committedDate": "2020-04-10T09:55:47Z", "message": "BAEL-3852 - Additional review changes for A Guide to Foreign Memory Access API in Java 14"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODA0NzY1", "url": "https://github.com/eugenp/tutorials/pull/9040#pullrequestreview-391804765", "createdAt": "2020-04-11T22:22:55Z", "commit": {"oid": "b68267071e350b63084c0c6ae02a5b3a3b3e0235"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMjoyMjo1NVrOGEQeXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMjoyNDo1MlrOGEQfAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNzQwNQ==", "bodyText": "FWIW, I find this harder to read than if it were:\n        MemoryAddress memoryAddress = \n            MemorySegment.allocateNative(8)\n                .baseAddress();\nThe reason is that the hanging MemorySegment on the original, is lost from my memory when I read the following line", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r407117405", "createdAt": "2020-04-11T22:22:55Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.baeldung.java14.foreign.api;\n+\n+import jdk.incubator.foreign.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+\n+import static org.hamcrest.core.Is.*;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertThat;\n+\n+public class ForeignMemoryUnitTest {\n+\n+    @Test\n+    public void whenAValueIsSet_thenAccessTheValue() {\n+        long value = 10;\n+        MemoryAddress memoryAddress = MemorySegment\n+                .allocateNative(8).baseAddress();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68267071e350b63084c0c6ae02a5b3a3b3e0235"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNzU3MA==", "bodyText": "Why is this here?", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r407117570", "createdAt": "2020-04-11T22:24:52Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-perf/src/main/java/com/baeldung/threaddump/ThreadDump.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.baeldung.threaddump;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class ThreadDump {\n+    \n+    public static void main(String[] args) throws IOException {\n+        threadDump(true, true);\n+    }\n+    \n+    private static void threadDump(boolean lockedMonitors, boolean lockedSynchronizers) throws IOException {\n+        Path threadDumpFile = Paths.get(\"ThreadDump.txt\");\n+        \n+        StringBuffer threadDump = new StringBuffer(System.lineSeparator());\n+        ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();\n+        for(ThreadInfo threadInfo : threadMXBean.dumpAllThreads(lockedMonitors, lockedSynchronizers)) {\n+            threadDump.append(threadInfo.toString());\n+        }\n+        Files.write(threadDumpFile, threadDump.toString().getBytes());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68267071e350b63084c0c6ae02a5b3a3b3e0235"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "373be297884202ab6bf1f2032db6aca492f0b8a6", "author": {"user": {"login": "musibs", "name": "Somnath Musib"}}, "url": "https://github.com/eugenp/tutorials/commit/373be297884202ab6bf1f2032db6aca492f0b8a6", "committedDate": "2020-04-12T07:53:47Z", "message": "Review changes for alignment and class removal"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0OTI3Nzk4", "url": "https://github.com/eugenp/tutorials/pull/9040#pullrequestreview-394927798", "createdAt": "2020-04-16T19:16:12Z", "commit": {"oid": "373be297884202ab6bf1f2032db6aca492f0b8a6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToxNjoxMlrOGGzo1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToxNzo1NVrOGGzsig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MDY3OQ==", "bodyText": "indentation.", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r409790679", "createdAt": "2020-04-16T19:16:12Z", "author": {"login": "sinsuren"}, "path": "core-java-modules/core-java/src/main/java/com/baeldung/java/hexagonal/DefaultUserService.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.baeldung.java.hexagonal;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+/**\n+ *  Default implementation of user service \n+ */\n+public class DefaultUserService implements UserService{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373be297884202ab6bf1f2032db6aca492f0b8a6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MTM0OQ==", "bodyText": "UserRepository {", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r409791349", "createdAt": "2020-04-16T19:17:26Z", "author": {"login": "sinsuren"}, "path": "core-java-modules/core-java/src/main/java/com/baeldung/java/hexagonal/InMemoryUserRepositoryImpl.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.baeldung.java.hexagonal;\n+\n+/**\n+ * An in-memory implementation of the UserRepository\n+ */\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+public class InMemoryUserRepositoryImpl implements UserRepository{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373be297884202ab6bf1f2032db6aca492f0b8a6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MTYyNg==", "bodyText": "space indentation is also not uniform across files.", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r409791626", "createdAt": "2020-04-16T19:17:55Z", "author": {"login": "sinsuren"}, "path": "core-java-modules/core-java/src/main/java/com/baeldung/java/hexagonal/InMemoryUserRepositoryImpl.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.baeldung.java.hexagonal;\n+\n+/**\n+ * An in-memory implementation of the UserRepository\n+ */\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+public class InMemoryUserRepositoryImpl implements UserRepository{\n+\n+\t@Override\n+\tpublic User save(User user) {\n+\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373be297884202ab6bf1f2032db6aca492f0b8a6"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccc9fd2a237c0371262939a55e639df9a51001e2", "author": {"user": {"login": "musibs", "name": "Somnath Musib"}}, "url": "https://github.com/eugenp/tutorials/commit/ccc9fd2a237c0371262939a55e639df9a51001e2", "committedDate": "2020-04-22T07:29:54Z", "message": "Removed incorrectly added old files from the PR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTc3NTkw", "url": "https://github.com/eugenp/tutorials/pull/9040#pullrequestreview-404577590", "createdAt": "2020-05-03T03:11:02Z", "commit": {"oid": "ccc9fd2a237c0371262939a55e639df9a51001e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzoxMTowMlrOGPoIYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzoxMTowMlrOGPoIYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzOTMzMQ==", "bodyText": "Indentation guidelines prescribe a 4-space indent for nested blocks and 2-space indent for continuation lines. Please adjust the indentation in this file accordingly.", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r419039331", "createdAt": "2020-05-03T03:11:02Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.baeldung.java14.foreign.api;\n+\n+import jdk.incubator.foreign.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+\n+import static org.hamcrest.core.Is.*;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertThat;\n+\n+public class ForeignMemoryUnitTest {\n+\n+    @Test\n+    public void whenAValueIsSet_thenAccessTheValue() {\n+        long value = 10;\n+        MemoryAddress memoryAddress =\n+                MemorySegment.allocateNative(8)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccc9fd2a237c0371262939a55e639df9a51001e2"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c4d71732c1dc254dfe07abb31013ac5dc119680", "author": {"user": {"login": "musibs", "name": "Somnath Musib"}}, "url": "https://github.com/eugenp/tutorials/commit/9c4d71732c1dc254dfe07abb31013ac5dc119680", "committedDate": "2020-05-03T04:07:10Z", "message": "Indentation changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4072, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}