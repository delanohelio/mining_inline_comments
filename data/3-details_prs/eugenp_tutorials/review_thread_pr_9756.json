{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1ODQyMjk4", "number": 9756, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDoyODowM1rOER2DQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDoyODowM1rOER2DQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTQ2ODE2OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-os/src/test/java/com/baeldung/screenshot/ScreenshotTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDoyODowNFrOG2xiYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODoyMTo1MlrOG4t2jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4NzkwNw==", "bodyText": "my suggestion here would be to save the file in a temp file and do not take care of the cleaning. If for some reason the deletion fails, the test is still valid, but it will fail to pass. alternatively you can do the deletion using an @after method, this keeping the test and assertion clean. In my opinion, I would go with the tmp version and do not take care of the cleaning :)", "url": "https://github.com/eugenp/tutorials/pull/9756#discussion_r460087907", "createdAt": "2020-07-24T14:28:04Z", "author": {"login": "rpvilao"}, "path": "core-java-modules/core-java-os/src/test/java/com/baeldung/screenshot/ScreenshotTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+import javax.imageio.ImageIO;\n+import java.awt.Component;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ScreenshotTest {\n+\n+    @Test\n+    public void takeScreenshotOfMainScreen() throws Exception {\n+        Rectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());\n+        BufferedImage capture = new Robot().createScreenCapture(screenRect);\n+        File imageFile = new File(\"single-screen.bmp\");\n+        ImageIO.write(capture, \"bmp\", imageFile);\n+        assertTrue(imageFile.exists());\n+        imageFile.delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e75726df1485723c2b484b39313de7953218c7e3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4ODA5Mw==", "bodyText": "ah, this applies to all the tests of course :)", "url": "https://github.com/eugenp/tutorials/pull/9756#discussion_r460088093", "createdAt": "2020-07-24T14:28:19Z", "author": {"login": "rpvilao"}, "path": "core-java-modules/core-java-os/src/test/java/com/baeldung/screenshot/ScreenshotTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+import javax.imageio.ImageIO;\n+import java.awt.Component;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ScreenshotTest {\n+\n+    @Test\n+    public void takeScreenshotOfMainScreen() throws Exception {\n+        Rectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());\n+        BufferedImage capture = new Robot().createScreenCapture(screenRect);\n+        File imageFile = new File(\"single-screen.bmp\");\n+        ImageIO.write(capture, \"bmp\", imageFile);\n+        assertTrue(imageFile.exists());\n+        imageFile.delete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4NzkwNw=="}, "originalCommit": {"oid": "e75726df1485723c2b484b39313de7953218c7e3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjEyNDY4NQ==", "bodyText": "done :)", "url": "https://github.com/eugenp/tutorials/pull/9756#discussion_r462124685", "createdAt": "2020-07-29T08:21:52Z", "author": {"login": "MajewskiKrzysztof"}, "path": "core-java-modules/core-java-os/src/test/java/com/baeldung/screenshot/ScreenshotTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+import javax.imageio.ImageIO;\n+import java.awt.Component;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+public class ScreenshotTest {\n+\n+    @Test\n+    public void takeScreenshotOfMainScreen() throws Exception {\n+        Rectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());\n+        BufferedImage capture = new Robot().createScreenCapture(screenRect);\n+        File imageFile = new File(\"single-screen.bmp\");\n+        ImageIO.write(capture, \"bmp\", imageFile);\n+        assertTrue(imageFile.exists());\n+        imageFile.delete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4NzkwNw=="}, "originalCommit": {"oid": "e75726df1485723c2b484b39313de7953218c7e3"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4282, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}