{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MzA3NTYx", "number": 10234, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjozMDozOFrOE2faXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjo0Mjo1MlrOE2fkMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTczMjE1OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-security-2/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjozMDozOFrOHvUmGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjozMDozOFrOHvUmGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM4MjU1Mw==", "bodyText": "Let's revert the changes to the README.md - The editorial team will take care of this change.", "url": "https://github.com/eugenp/tutorials/pull/10234#discussion_r519382553", "createdAt": "2020-11-08T12:30:38Z", "author": {"login": "JonCook"}, "path": "core-java-modules/core-java-security-2/README.md", "diffHunk": "@@ -12,4 +12,5 @@ This module contains articles about core Java Security\n - [How to Read PEM File to Get Public and Private Keys](https://www.baeldung.com/java-read-pem-file-keys)\n - [Listing the Available Cipher Algorithms](https://www.baeldung.com/java-list-cipher-algorithms)\n - [Get a List of Trusted Certificates in Java](https://www.baeldung.com/java-list-trusted-certificates)\n+- [Java AES encryption and decryption](https://www.baeldung.com/)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f32d4758d472b9b1cc2ad8dfc31ea7a7c323c7e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTc0NzM0OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-security-2/src/main/java/com/baeldung/aes/AESUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjozNzo0M1rOHvUwFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjozNzo0M1rOHvUwFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM4NTEwOQ==", "bodyText": "If you want to break the method line over two lines, I think the comma on the second line should go after iv e.g\npublic static void encryptFile(String algorithm, SecretKey key, IvParameterSpec iv,\n    File inputFile, File outputFile) throws IOException {\n\nI also think the indentation isn't quite right, it seems to be 8 spaces?\nFeel free to take a look at our eclipse formatter if that helps:\n\nhttps://github.com/eugenp/tutorials/blob/master/eclipse/formatter.xml\n\nHowever, the exception formatting looks quite nice and the eclipse formatter won't respect that.", "url": "https://github.com/eugenp/tutorials/pull/10234#discussion_r519385109", "createdAt": "2020-11-08T12:37:43Z", "author": {"login": "JonCook"}, "path": "core-java-modules/core-java-security-2/src/main/java/com/baeldung/aes/AESUtil.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.baeldung.crypto;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.crypto.*;\n+import javax.crypto.spec.IvParameterSpec;\n+import javax.crypto.spec.PBEKeySpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.*;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.KeySpec;\n+import java.util.Base64;\n+\n+public class AESUtil {\n+    static Logger logger = LoggerFactory.getLogger(AESUtil.class);\n+\n+    public static String encrypt(String algorithm, String input, SecretKey key, IvParameterSpec iv) {\n+        try {\n+            Cipher cipher = Cipher.getInstance(algorithm);\n+            cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n+            byte[] cipherText = cipher.doFinal(input.getBytes());\n+            return Base64.getEncoder().encodeToString(cipherText);\n+        } catch (NoSuchAlgorithmException | NoSuchPaddingException\n+                | InvalidKeyException | InvalidAlgorithmParameterException\n+                | IllegalBlockSizeException | BadPaddingException exp) {\n+            logger.error(exp.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    public static String decrypt(String algorithm, String cipherText, SecretKey key, IvParameterSpec iv) {\n+        try {\n+            Cipher cipher = Cipher.getInstance(algorithm);\n+            cipher.init(Cipher.DECRYPT_MODE, key, iv);\n+            byte[] plainText = cipher.doFinal(Base64.getDecoder().decode(cipherText));\n+            return new String(plainText);\n+        } catch (NoSuchAlgorithmException | NoSuchPaddingException\n+                | InvalidKeyException | InvalidAlgorithmParameterException\n+                | IllegalBlockSizeException | BadPaddingException exp) {\n+            logger.error(exp.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    public static SecretKey generateKey(int n) throws NoSuchAlgorithmException {\n+        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n+        keyGenerator.init(n);\n+        SecretKey key = keyGenerator.generateKey();\n+        return key;\n+    }\n+\n+    public static SecretKey getKeyFromPassword(String password, String salt)\n+            throws NoSuchAlgorithmException, InvalidKeySpecException {\n+        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n+        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt.getBytes(), 65536, 256);\n+        SecretKey secret = new SecretKeySpec(factory.generateSecret(spec).getEncoded(), \"AES\");\n+        return secret;\n+    }\n+\n+    public static IvParameterSpec generateIv() {\n+        byte[] iv = new byte[16];\n+        new SecureRandom().nextBytes(iv);\n+        return new IvParameterSpec(iv);\n+    }\n+\n+    public static void encryptFile(String algorithm, SecretKey key, IvParameterSpec iv\n+            , File inputFile, File outputFile) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f32d4758d472b9b1cc2ad8dfc31ea7a7c323c7e"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTc0ODA5OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-security-2/src/main/java/com/baeldung/aes/AESUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjozODowOVrOHvUwhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjozODowOVrOHvUwhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM4NTIyMQ==", "bodyText": "I guess we can make the logger private and final as well and have it in capitals?", "url": "https://github.com/eugenp/tutorials/pull/10234#discussion_r519385221", "createdAt": "2020-11-08T12:38:09Z", "author": {"login": "JonCook"}, "path": "core-java-modules/core-java-security-2/src/main/java/com/baeldung/aes/AESUtil.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.baeldung.crypto;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.crypto.*;\n+import javax.crypto.spec.IvParameterSpec;\n+import javax.crypto.spec.PBEKeySpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.*;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.KeySpec;\n+import java.util.Base64;\n+\n+public class AESUtil {\n+    static Logger logger = LoggerFactory.getLogger(AESUtil.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f32d4758d472b9b1cc2ad8dfc31ea7a7c323c7e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTc0ODU1OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-security-2/src/main/java/com/baeldung/aes/AESUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjozODoyNFrOHvUw2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjozODoyNFrOHvUw2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM4NTMwNg==", "bodyText": "Let's also avoid global imports.", "url": "https://github.com/eugenp/tutorials/pull/10234#discussion_r519385306", "createdAt": "2020-11-08T12:38:24Z", "author": {"login": "JonCook"}, "path": "core-java-modules/core-java-security-2/src/main/java/com/baeldung/aes/AESUtil.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.baeldung.crypto;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.crypto.*;\n+import javax.crypto.spec.IvParameterSpec;\n+import javax.crypto.spec.PBEKeySpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f32d4758d472b9b1cc2ad8dfc31ea7a7c323c7e"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTc0OTE0OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-security-2/src/test/java/com/baeldung/aes/AESUtilUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjozODo1MlrOHvUxUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjozODo1MlrOHvUxUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM4NTQyNw==", "bodyText": "Again, let's remove global imports", "url": "https://github.com/eugenp/tutorials/pull/10234#discussion_r519385427", "createdAt": "2020-11-08T12:38:52Z", "author": {"login": "JonCook"}, "path": "core-java-modules/core-java-security-2/src/test/java/com/baeldung/aes/AESUtilUnitTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.baeldung.crypto;\n+\n+import org.assertj.core.api.WithAssertions;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.crypto.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f32d4758d472b9b1cc2ad8dfc31ea7a7c323c7e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTc1MDQzOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-security-2/src/test/java/com/baeldung/aes/AESUtilUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjozOToyMlrOHvUyHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjozOToyMlrOHvUyHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM4NTYzMA==", "bodyText": "Let's also remove this unused annotation for Spring Boot.", "url": "https://github.com/eugenp/tutorials/pull/10234#discussion_r519385630", "createdAt": "2020-11-08T12:39:22Z", "author": {"login": "JonCook"}, "path": "core-java-modules/core-java-security-2/src/test/java/com/baeldung/aes/AESUtilUnitTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.baeldung.crypto;\n+\n+import org.assertj.core.api.WithAssertions;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.crypto.*;\n+import javax.crypto.spec.IvParameterSpec;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.InvalidKeySpecException;\n+\n+//@SpringBootTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f32d4758d472b9b1cc2ad8dfc31ea7a7c323c7e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTc1MTQyOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-security-2/src/test/java/com/baeldung/aes/AESUtilUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjozOTo0NFrOHvUytQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjozOTo0NFrOHvUytQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM4NTc4MQ==", "bodyText": "Do we need this empty test?", "url": "https://github.com/eugenp/tutorials/pull/10234#discussion_r519385781", "createdAt": "2020-11-08T12:39:44Z", "author": {"login": "JonCook"}, "path": "core-java-modules/core-java-security-2/src/test/java/com/baeldung/aes/AESUtilUnitTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.baeldung.crypto;\n+\n+import org.assertj.core.api.WithAssertions;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.crypto.*;\n+import javax.crypto.spec.IvParameterSpec;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.InvalidKeySpecException;\n+\n+//@SpringBootTest\n+class AESUtilUnitTest implements WithAssertions {\n+\n+    @Test\n+    void contextLoads() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f32d4758d472b9b1cc2ad8dfc31ea7a7c323c7e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTc1Njc2OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-security-2/src/main/java/com/baeldung/aes/AESUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjo0MjoyOVrOHvU2XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjo0MjoyOVrOHvU2XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM4NjcxNw==", "bodyText": "How about using a try/with resources for these streams or include a finally block. In your example, if there is an exception the streams aren't closed.", "url": "https://github.com/eugenp/tutorials/pull/10234#discussion_r519386717", "createdAt": "2020-11-08T12:42:29Z", "author": {"login": "JonCook"}, "path": "core-java-modules/core-java-security-2/src/main/java/com/baeldung/aes/AESUtil.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.baeldung.crypto;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.crypto.*;\n+import javax.crypto.spec.IvParameterSpec;\n+import javax.crypto.spec.PBEKeySpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.io.*;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.KeySpec;\n+import java.util.Base64;\n+\n+public class AESUtil {\n+    static Logger logger = LoggerFactory.getLogger(AESUtil.class);\n+\n+    public static String encrypt(String algorithm, String input, SecretKey key, IvParameterSpec iv) {\n+        try {\n+            Cipher cipher = Cipher.getInstance(algorithm);\n+            cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n+            byte[] cipherText = cipher.doFinal(input.getBytes());\n+            return Base64.getEncoder().encodeToString(cipherText);\n+        } catch (NoSuchAlgorithmException | NoSuchPaddingException\n+                | InvalidKeyException | InvalidAlgorithmParameterException\n+                | IllegalBlockSizeException | BadPaddingException exp) {\n+            logger.error(exp.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    public static String decrypt(String algorithm, String cipherText, SecretKey key, IvParameterSpec iv) {\n+        try {\n+            Cipher cipher = Cipher.getInstance(algorithm);\n+            cipher.init(Cipher.DECRYPT_MODE, key, iv);\n+            byte[] plainText = cipher.doFinal(Base64.getDecoder().decode(cipherText));\n+            return new String(plainText);\n+        } catch (NoSuchAlgorithmException | NoSuchPaddingException\n+                | InvalidKeyException | InvalidAlgorithmParameterException\n+                | IllegalBlockSizeException | BadPaddingException exp) {\n+            logger.error(exp.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    public static SecretKey generateKey(int n) throws NoSuchAlgorithmException {\n+        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n+        keyGenerator.init(n);\n+        SecretKey key = keyGenerator.generateKey();\n+        return key;\n+    }\n+\n+    public static SecretKey getKeyFromPassword(String password, String salt)\n+            throws NoSuchAlgorithmException, InvalidKeySpecException {\n+        SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\n+        KeySpec spec = new PBEKeySpec(password.toCharArray(), salt.getBytes(), 65536, 256);\n+        SecretKey secret = new SecretKeySpec(factory.generateSecret(spec).getEncoded(), \"AES\");\n+        return secret;\n+    }\n+\n+    public static IvParameterSpec generateIv() {\n+        byte[] iv = new byte[16];\n+        new SecureRandom().nextBytes(iv);\n+        return new IvParameterSpec(iv);\n+    }\n+\n+    public static void encryptFile(String algorithm, SecretKey key, IvParameterSpec iv\n+            , File inputFile, File outputFile) throws IOException {\n+        try {\n+            Cipher cipher = Cipher.getInstance(algorithm);\n+            cipher.init(Cipher.ENCRYPT_MODE, key, iv);\n+            FileInputStream inputStream = new FileInputStream(inputFile);\n+            FileOutputStream outputStream = new FileOutputStream(outputFile);\n+            byte[] buffer = new byte[64];\n+            int bytesRead;\n+            while ((bytesRead = inputStream.read(buffer)) != -1) {\n+                byte[] output = cipher.update(buffer, 0, bytesRead);\n+                if (output != null) {\n+                    outputStream.write(output);\n+                }\n+            }\n+            byte[] outputBytes = cipher.doFinal();\n+            if (outputBytes != null) {\n+                outputStream.write(outputBytes);\n+            }\n+            inputStream.close();\n+            outputStream.close();\n+        } catch (InvalidAlgorithmParameterException | NoSuchAlgorithmException\n+                | NoSuchPaddingException | BadPaddingException\n+                | IllegalBlockSizeException | InvalidKeyException exp) {\n+            logger.error(exp.getMessage());\n+        }\n+    }\n+\n+    public static void decryptFile(String algorithm, SecretKey key, IvParameterSpec iv\n+            , File encryptedFile, File decryptedFile) throws IOException {\n+        try {\n+            Cipher cipher = Cipher.getInstance(algorithm);\n+            cipher.init(Cipher.DECRYPT_MODE, key, iv);\n+            FileInputStream inputStream = new FileInputStream(encryptedFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f32d4758d472b9b1cc2ad8dfc31ea7a7c323c7e"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NTc1NzI5OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-security-2/src/test/java/com/baeldung/aes/AESUtilUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjo0Mjo1MlrOHvU2yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQxMjo0Mjo1MlrOHvU2yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTM4NjgyNg==", "bodyText": "This method seems to be deprecated, is there an alternative we can use?", "url": "https://github.com/eugenp/tutorials/pull/10234#discussion_r519386826", "createdAt": "2020-11-08T12:42:52Z", "author": {"login": "JonCook"}, "path": "core-java-modules/core-java-security-2/src/test/java/com/baeldung/aes/AESUtilUnitTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package com.baeldung.crypto;\n+\n+import org.assertj.core.api.WithAssertions;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.crypto.*;\n+import javax.crypto.spec.IvParameterSpec;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.InvalidKeySpecException;\n+\n+//@SpringBootTest\n+class AESUtilUnitTest implements WithAssertions {\n+\n+    @Test\n+    void contextLoads() {\n+    }\n+\n+    @Test\n+    void givenString_whenEncrypt_thenSuccess() throws NoSuchAlgorithmException {\n+        // given\n+        String input = \"baeldung\";\n+        SecretKey key = AESUtil.generateKey(128);\n+        IvParameterSpec ivParameterSpec = AESUtil.generateIv();\n+        String algorithm = \"AES/CBC/PKCS5Padding\";\n+\n+        // when\n+        String cipherText = AESUtil.encrypt(algorithm, input, key, ivParameterSpec);\n+        String plainText = AESUtil.decrypt(algorithm, cipherText, key, ivParameterSpec);\n+\n+        // then\n+        Assertions.assertEquals(input, plainText);\n+    }\n+\n+    @Test\n+    void givenFile_whenEncrypt_thenSuccess() throws NoSuchAlgorithmException, IOException {\n+        // given\n+        SecretKey key = AESUtil.generateKey(128);\n+        String algorithm = \"AES/CBC/PKCS5Padding\";\n+        IvParameterSpec ivParameterSpec = AESUtil.generateIv();\n+        File inputFile = Paths.get(\"src/test/resources/baeldung.txt\").toFile();\n+        File encryptedFile = new File(\"classpath:baeldung.encrypted\");\n+        File decryptedFile = new File(\"document.decrypted\");\n+\n+        // when\n+        AESUtil.encryptFile(algorithm, key, ivParameterSpec, inputFile, encryptedFile);\n+        AESUtil.decryptFile(algorithm, key, ivParameterSpec, encryptedFile, decryptedFile);\n+\n+        // then\n+        assertThat(inputFile).hasSameTextualContentAs(decryptedFile);\n+    }\n+\n+    @Test\n+    void givenObject_whenEncrypt_thenSuccess() throws NoSuchAlgorithmException {\n+        // given\n+        Student student = new Student(\"Baeldung\", 20);\n+        SecretKey key = AESUtil.generateKey(128);\n+        IvParameterSpec ivParameterSpec = AESUtil.generateIv();\n+        String algorithm = \"AES/CBC/PKCS5Padding\";\n+\n+        // when\n+        SealedObject sealedObject = AESUtil.encryptObject(algorithm, student, key, ivParameterSpec);\n+        Student object = (Student) AESUtil.decryptObject(algorithm, sealedObject, key, ivParameterSpec);\n+\n+        // then\n+        assertThat(student).isEqualToComparingFieldByField(object);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f32d4758d472b9b1cc2ad8dfc31ea7a7c323c7e"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4112, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}