{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMjIxNjA1", "number": 10308, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo0MTo0N1rOFClffg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQyMzoyMDoxOFrOFHn5tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjU1NzQyOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/HttpClientUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo0MTo0N1rOIB1MgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo0MTo0N1rOIB1MgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5MTA0MQ==", "bodyText": "We should probably use a random port here - to avoid any clashes with other tests. Also, is this strictly a unit test, or an integration test?", "url": "https://github.com/eugenp/tutorials/pull/10308#discussion_r538791041", "createdAt": "2020-12-08T20:41:47Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/HttpClientUnitTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.baeldung.features;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.mockserver.integration.ClientAndServer;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.time.Duration;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockserver.integration.ClientAndServer.startClientAndServer;\n+\n+class HttpClientUnitTest {\n+\n+    private static ClientAndServer mockServer;\n+\n+    @BeforeAll\n+    static void startServer() {\n+        mockServer = startClientAndServer(1080);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec69154802c5031e40200f3858ba517d0f290521"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjU2MDkwOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/JavaElevenFeaturesUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo0Mjo0MFrOIB1OrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo0Mjo0MFrOIB1OrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5MTU5Nw==", "bodyText": "Let's not use the author's name as test data. Let's stick with Baeldung", "url": "https://github.com/eugenp/tutorials/pull/10308#discussion_r538791597", "createdAt": "2020-12-08T20:42:40Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/JavaElevenFeaturesUnitTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.baeldung.features;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class JavaElevenFeaturesUnitTest {\n+\n+    @Test\n+    void givenMultilineString_whenExtractingNonBlankStrippedLines_thenLinesAreReturned() {\n+        String multilineString = \"My name \\n \\n is \\n Daniel.\";\n+        List<String> lines = multilineString.lines()\n+                .filter(line -> !line.isBlank())\n+                .map(String::strip)\n+                .collect(Collectors.toList());\n+        assertThat(lines).containsExactly(\"My name\", \"is\", \"Daniel.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec69154802c5031e40200f3858ba517d0f290521"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjU2NTM5OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/JavaElevenFeaturesUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo0Mzo0NlrOIB1ROQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo0Mzo0NlrOIB1ROQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5MjI0OQ==", "bodyText": "Consider using https://www.baeldung.com/junit-5-temporary-directory here for a temp dir, rather then Files.createTempFile unless it's Files.createTempFile we're demoing!", "url": "https://github.com/eugenp/tutorials/pull/10308#discussion_r538792249", "createdAt": "2020-12-08T20:43:46Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/JavaElevenFeaturesUnitTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.baeldung.features;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class JavaElevenFeaturesUnitTest {\n+\n+    @Test\n+    void givenMultilineString_whenExtractingNonBlankStrippedLines_thenLinesAreReturned() {\n+        String multilineString = \"My name \\n \\n is \\n Daniel.\";\n+        List<String> lines = multilineString.lines()\n+                .filter(line -> !line.isBlank())\n+                .map(String::strip)\n+                .collect(Collectors.toList());\n+        assertThat(lines).containsExactly(\"My name\", \"is\", \"Daniel.\");\n+    }\n+\n+    @Test\n+    void givenTemporaryFile_whenReadingStringContent_thenContentIsReturned() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec69154802c5031e40200f3858ba517d0f290521"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjU2Nzk3OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/JavaElevenFeaturesUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo0NDoyNVrOIB1Ssw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo0NDoyNVrOIB1Ssw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5MjYyNw==", "bodyText": "Same here with the my name as test data", "url": "https://github.com/eugenp/tutorials/pull/10308#discussion_r538792627", "createdAt": "2020-12-08T20:44:25Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/JavaElevenFeaturesUnitTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.baeldung.features;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class JavaElevenFeaturesUnitTest {\n+\n+    @Test\n+    void givenMultilineString_whenExtractingNonBlankStrippedLines_thenLinesAreReturned() {\n+        String multilineString = \"My name \\n \\n is \\n Daniel.\";\n+        List<String> lines = multilineString.lines()\n+                .filter(line -> !line.isBlank())\n+                .map(String::strip)\n+                .collect(Collectors.toList());\n+        assertThat(lines).containsExactly(\"My name\", \"is\", \"Daniel.\");\n+    }\n+\n+    @Test\n+    void givenTemporaryFile_whenReadingStringContent_thenContentIsReturned() throws IOException {\n+        Path filePath = Files.writeString(Files.createTempFile(\"demo\", \".txt\"), \"Sample text\");\n+        String fileContent = Files.readString(filePath);\n+        assertThat(fileContent).isEqualTo(\"Sample text\");\n+    }\n+\n+    @Test\n+    void givenSampleList_whenConvertingToArray_thenItemsRemainUnchanged() {\n+        List<String> sampleList = Arrays.asList(\"Daniel\", \"Sanja\");\n+        String[] sampleArray = sampleList.toArray(String[]::new);\n+        assertThat(sampleArray).containsExactly(\"Daniel\", \"Sanja\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec69154802c5031e40200f3858ba517d0f290521"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjU3MTA0OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/JavaElevenFeaturesUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo0NToxMlrOIB1Ukg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwOTozMDo0NlrOIJRyQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5MzEwNg==", "bodyText": "Do we need @Nonnull var - can we not just go String::toUpperCase ?", "url": "https://github.com/eugenp/tutorials/pull/10308#discussion_r538793106", "createdAt": "2020-12-08T20:45:12Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/JavaElevenFeaturesUnitTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.baeldung.features;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class JavaElevenFeaturesUnitTest {\n+\n+    @Test\n+    void givenMultilineString_whenExtractingNonBlankStrippedLines_thenLinesAreReturned() {\n+        String multilineString = \"My name \\n \\n is \\n Daniel.\";\n+        List<String> lines = multilineString.lines()\n+                .filter(line -> !line.isBlank())\n+                .map(String::strip)\n+                .collect(Collectors.toList());\n+        assertThat(lines).containsExactly(\"My name\", \"is\", \"Daniel.\");\n+    }\n+\n+    @Test\n+    void givenTemporaryFile_whenReadingStringContent_thenContentIsReturned() throws IOException {\n+        Path filePath = Files.writeString(Files.createTempFile(\"demo\", \".txt\"), \"Sample text\");\n+        String fileContent = Files.readString(filePath);\n+        assertThat(fileContent).isEqualTo(\"Sample text\");\n+    }\n+\n+    @Test\n+    void givenSampleList_whenConvertingToArray_thenItemsRemainUnchanged() {\n+        List<String> sampleList = Arrays.asList(\"Daniel\", \"Sanja\");\n+        String[] sampleArray = sampleList.toArray(String[]::new);\n+        assertThat(sampleArray).containsExactly(\"Daniel\", \"Sanja\");\n+    }\n+\n+    @Test\n+    void givenSampleList_whenConvertingToUppercaseString_thenUppercaseIsReturned() {\n+        List<String> sampleList = Arrays.asList(\"Daniel\", \"Sanja\");\n+        String resultString = sampleList.stream()\n+                .map((@Nonnull var x) -> x.toUpperCase())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec69154802c5031e40200f3858ba517d0f290521"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU5OTQ4OQ==", "bodyText": "Note: this was answered", "url": "https://github.com/eugenp/tutorials/pull/10308#discussion_r546599489", "createdAt": "2020-12-21T09:30:46Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/JavaElevenFeaturesUnitTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.baeldung.features;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class JavaElevenFeaturesUnitTest {\n+\n+    @Test\n+    void givenMultilineString_whenExtractingNonBlankStrippedLines_thenLinesAreReturned() {\n+        String multilineString = \"My name \\n \\n is \\n Daniel.\";\n+        List<String> lines = multilineString.lines()\n+                .filter(line -> !line.isBlank())\n+                .map(String::strip)\n+                .collect(Collectors.toList());\n+        assertThat(lines).containsExactly(\"My name\", \"is\", \"Daniel.\");\n+    }\n+\n+    @Test\n+    void givenTemporaryFile_whenReadingStringContent_thenContentIsReturned() throws IOException {\n+        Path filePath = Files.writeString(Files.createTempFile(\"demo\", \".txt\"), \"Sample text\");\n+        String fileContent = Files.readString(filePath);\n+        assertThat(fileContent).isEqualTo(\"Sample text\");\n+    }\n+\n+    @Test\n+    void givenSampleList_whenConvertingToArray_thenItemsRemainUnchanged() {\n+        List<String> sampleList = Arrays.asList(\"Daniel\", \"Sanja\");\n+        String[] sampleArray = sampleList.toArray(String[]::new);\n+        assertThat(sampleArray).containsExactly(\"Daniel\", \"Sanja\");\n+    }\n+\n+    @Test\n+    void givenSampleList_whenConvertingToUppercaseString_thenUppercaseIsReturned() {\n+        List<String> sampleList = Arrays.asList(\"Daniel\", \"Sanja\");\n+        String resultString = sampleList.stream()\n+                .map((@Nonnull var x) -> x.toUpperCase())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5MzEwNg=="}, "originalCommit": {"oid": "ec69154802c5031e40200f3858ba517d0f290521"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjU3MTY0OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/JavaElevenFeaturesUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo0NToyMVrOIB1U8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo0NToyMVrOIB1U8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5MzIwMA==", "bodyText": "Test data", "url": "https://github.com/eugenp/tutorials/pull/10308#discussion_r538793200", "createdAt": "2020-12-08T20:45:21Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/JavaElevenFeaturesUnitTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.baeldung.features;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class JavaElevenFeaturesUnitTest {\n+\n+    @Test\n+    void givenMultilineString_whenExtractingNonBlankStrippedLines_thenLinesAreReturned() {\n+        String multilineString = \"My name \\n \\n is \\n Daniel.\";\n+        List<String> lines = multilineString.lines()\n+                .filter(line -> !line.isBlank())\n+                .map(String::strip)\n+                .collect(Collectors.toList());\n+        assertThat(lines).containsExactly(\"My name\", \"is\", \"Daniel.\");\n+    }\n+\n+    @Test\n+    void givenTemporaryFile_whenReadingStringContent_thenContentIsReturned() throws IOException {\n+        Path filePath = Files.writeString(Files.createTempFile(\"demo\", \".txt\"), \"Sample text\");\n+        String fileContent = Files.readString(filePath);\n+        assertThat(fileContent).isEqualTo(\"Sample text\");\n+    }\n+\n+    @Test\n+    void givenSampleList_whenConvertingToArray_thenItemsRemainUnchanged() {\n+        List<String> sampleList = Arrays.asList(\"Daniel\", \"Sanja\");\n+        String[] sampleArray = sampleList.toArray(String[]::new);\n+        assertThat(sampleArray).containsExactly(\"Daniel\", \"Sanja\");\n+    }\n+\n+    @Test\n+    void givenSampleList_whenConvertingToUppercaseString_thenUppercaseIsReturned() {\n+        List<String> sampleList = Arrays.asList(\"Daniel\", \"Sanja\");\n+        String resultString = sampleList.stream()\n+                .map((@Nonnull var x) -> x.toUpperCase())\n+                .collect(Collectors.joining(\", \"));\n+        assertThat(resultString).isEqualTo(\"DANIEL, SANJA\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec69154802c5031e40200f3858ba517d0f290521"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjU3MjIzOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/JavaElevenFeaturesUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo0NTozNlrOIB1VXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo0NTozNlrOIB1VXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5MzMwOA==", "bodyText": "typo - Extracting with a t", "url": "https://github.com/eugenp/tutorials/pull/10308#discussion_r538793308", "createdAt": "2020-12-08T20:45:36Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/JavaElevenFeaturesUnitTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.baeldung.features;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class JavaElevenFeaturesUnitTest {\n+\n+    @Test\n+    void givenMultilineString_whenExtractingNonBlankStrippedLines_thenLinesAreReturned() {\n+        String multilineString = \"My name \\n \\n is \\n Daniel.\";\n+        List<String> lines = multilineString.lines()\n+                .filter(line -> !line.isBlank())\n+                .map(String::strip)\n+                .collect(Collectors.toList());\n+        assertThat(lines).containsExactly(\"My name\", \"is\", \"Daniel.\");\n+    }\n+\n+    @Test\n+    void givenTemporaryFile_whenReadingStringContent_thenContentIsReturned() throws IOException {\n+        Path filePath = Files.writeString(Files.createTempFile(\"demo\", \".txt\"), \"Sample text\");\n+        String fileContent = Files.readString(filePath);\n+        assertThat(fileContent).isEqualTo(\"Sample text\");\n+    }\n+\n+    @Test\n+    void givenSampleList_whenConvertingToArray_thenItemsRemainUnchanged() {\n+        List<String> sampleList = Arrays.asList(\"Daniel\", \"Sanja\");\n+        String[] sampleArray = sampleList.toArray(String[]::new);\n+        assertThat(sampleArray).containsExactly(\"Daniel\", \"Sanja\");\n+    }\n+\n+    @Test\n+    void givenSampleList_whenConvertingToUppercaseString_thenUppercaseIsReturned() {\n+        List<String> sampleList = Arrays.asList(\"Daniel\", \"Sanja\");\n+        String resultString = sampleList.stream()\n+                .map((@Nonnull var x) -> x.toUpperCase())\n+                .collect(Collectors.joining(\", \"));\n+        assertThat(resultString).isEqualTo(\"DANIEL, SANJA\");\n+    }\n+\n+    @Test\n+    void givenSampleList_whenExractingEvenNumbers_thenOnlyEvenNumbersAreReturned() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec69154802c5031e40200f3858ba517d0f290521"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTUwOTY5OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/JavaElevenFeaturesUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo1ODo1OFrOIGYhWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo1ODo1OFrOIGYhWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2NDEyMQ==", "bodyText": "This still doesn't quite demonstrate the benefit of not(isOdd) vs isOdd.negate()\nIf you created a static function:\nprivate static boolean isOdd(int i) {\n    return i % 2 == 0;\n}\nthen you could use .filter(Predicate.not(JavaElevenFeaturesUnitTest::isOdd)) - which better illustrates how this not only reads nicer, but works on function references.", "url": "https://github.com/eugenp/tutorials/pull/10308#discussion_r543564121", "createdAt": "2020-12-15T17:58:58Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/JavaElevenFeaturesUnitTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.baeldung.features;\n+\n+import org.assertj.core.api.ListAssert;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+class JavaElevenFeaturesUnitTest {\n+\n+    @Test\n+    void givenMultilineString_whenExtractingNonBlankStrippedLines_thenLinesAreReturned() {\n+        String multilineString = \"Baeldung helps \\n \\n developers \\n explore Java.\";\n+        List<String> lines = multilineString.lines()\n+                .filter(line -> !line.isBlank())\n+                .map(String::strip)\n+                .collect(Collectors.toList());\n+        assertThat(lines).containsExactly(\"Baeldung helps\", \"developers\", \"explore Java.\");\n+    }\n+\n+    @Test\n+    void givenTemporaryFile_whenReadingStringContent_thenContentIsReturned(@TempDir Path tempDir) throws IOException {\n+        Path filePath = Files.writeString(Files.createTempFile(tempDir, \"demo\", \".txt\"), \"Sample text\");\n+        String fileContent = Files.readString(filePath);\n+        assertThat(fileContent).isEqualTo(\"Sample text\");\n+    }\n+\n+    @Test\n+    void givenSampleList_whenConvertingToArray_thenItemsRemainUnchanged() {\n+        List<String> sampleList = Arrays.asList(\"Java\", \"Kotlin\");\n+        String[] sampleArray = sampleList.toArray(String[]::new);\n+        assertThat(sampleArray).containsExactly(\"Java\", \"Kotlin\");\n+    }\n+\n+    @Test\n+    void givenSampleList_whenConvertingToUppercaseString_thenUppercaseIsReturned() {\n+        List<String> sampleList = Arrays.asList(\"Java\", \"Kotlin\");\n+        String resultString = sampleList.stream()\n+                .map((@Nonnull var x) -> x.toUpperCase())\n+                .collect(Collectors.joining(\", \"));\n+        assertThat(resultString).isEqualTo(\"JAVA, KOTLIN\");\n+    }\n+\n+    @Test\n+    void givenSampleList_whenExtractingEvenNumbers_thenOnlyEvenNumbersAreReturned() {\n+        List<Integer> allNumbers = Arrays.asList(1, 2, 3, 4, 5);\n+        Predicate<Integer> isOdd = i -> i % 2 == 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6256e10587d654e2d2f854b28ac1a9c3a6c8f03d"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTM4MTAxOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/HttpClientIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQyMzoyMDoxOFrOIJIvAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMjo0OTozNFrOINTJeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ1MTIwMg==", "bodyText": "two space indents when continuing a line", "url": "https://github.com/eugenp/tutorials/pull/10308#discussion_r546451202", "createdAt": "2020-12-20T23:20:18Z", "author": {"login": "eric-martin"}, "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/HttpClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.baeldung.features;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.mockserver.integration.ClientAndServer;\n+import org.mockserver.model.HttpStatusCode;\n+import org.mockserver.socket.PortFactory;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.time.Duration;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockserver.integration.ClientAndServer.startClientAndServer;\n+\n+class HttpClientIntegrationTest {\n+\n+    private static ClientAndServer mockServer;\n+    private static int port;\n+\n+    @BeforeAll\n+    static void startServer() {\n+        port = PortFactory.findFreePort();\n+        mockServer = startClientAndServer(port);\n+        mockServer.when(new org.mockserver.model.HttpRequest().withMethod(\"GET\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f4d896d4daf96bc87fb6f4295b6b43a2d5042a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU2NjMxMQ==", "bodyText": "is there a code formatter for intelij?", "url": "https://github.com/eugenp/tutorials/pull/10308#discussion_r546566311", "createdAt": "2020-12-21T08:17:29Z", "author": {"login": "dstr89"}, "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/HttpClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.baeldung.features;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.mockserver.integration.ClientAndServer;\n+import org.mockserver.model.HttpStatusCode;\n+import org.mockserver.socket.PortFactory;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.time.Duration;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockserver.integration.ClientAndServer.startClientAndServer;\n+\n+class HttpClientIntegrationTest {\n+\n+    private static ClientAndServer mockServer;\n+    private static int port;\n+\n+    @BeforeAll\n+    static void startServer() {\n+        port = PortFactory.findFreePort();\n+        mockServer = startClientAndServer(port);\n+        mockServer.when(new org.mockserver.model.HttpRequest().withMethod(\"GET\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ1MTIwMg=="}, "originalCommit": {"oid": "01f4d896d4daf96bc87fb6f4295b6b43a2d5042a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgxNjEyMQ==", "bodyText": "https://github.com/eugenp/tutorials/blob/master/intelliJ/intelliJ-formatter.xml", "url": "https://github.com/eugenp/tutorials/pull/10308#discussion_r550816121", "createdAt": "2021-01-01T22:49:34Z", "author": {"login": "eric-martin"}, "path": "core-java-modules/core-java-11-2/src/test/java/com/baeldung/features/HttpClientIntegrationTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.baeldung.features;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.mockserver.integration.ClientAndServer;\n+import org.mockserver.model.HttpStatusCode;\n+import org.mockserver.socket.PortFactory;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.time.Duration;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockserver.integration.ClientAndServer.startClientAndServer;\n+\n+class HttpClientIntegrationTest {\n+\n+    private static ClientAndServer mockServer;\n+    private static int port;\n+\n+    @BeforeAll\n+    static void startServer() {\n+        port = PortFactory.findFreePort();\n+        mockServer = startClientAndServer(port);\n+        mockServer.when(new org.mockserver.model.HttpRequest().withMethod(\"GET\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ1MTIwMg=="}, "originalCommit": {"oid": "01f4d896d4daf96bc87fb6f4295b6b43a2d5042a"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4138, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}