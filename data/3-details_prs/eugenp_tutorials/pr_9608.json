{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMjUxODY5", "number": 9608, "title": "BAEL-4175 - comparing version strings in java", "bodyText": "", "createdAt": "2020-06-29T07:24:23Z", "url": "https://github.com/eugenp/tutorials/pull/9608", "merged": true, "mergeCommit": {"oid": "0b19ccc1800a91aedd7d891fdf955389aff2dab1"}, "closed": true, "closedAt": "2020-07-13T15:54:12Z", "author": {"login": "SmartyAnsh"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcv71ekAH2gAyNDQxMjUxODY5OjIzMGMzMjAyZmIxOTBiOGFmNDI3ZDcyZjljMjMwYjljMzJjMTRiNzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc0YoYDAH2gAyNDQxMjUxODY5OjMwZmYxYTFhMTQ2MTM3NTIxYTJjYzMzMjk3NTlkZjAyNTIwZmM5MWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "230c3202fb190b8af427d72f9c230b9c32c14b76", "author": {"user": {"login": "SmartyAnsh", "name": "Anshul Bansal"}}, "url": "https://github.com/eugenp/tutorials/commit/230c3202fb190b8af427d72f9c230b9c32c14b76", "committedDate": "2020-06-29T07:23:20Z", "message": "BAEL-4175 - comparing version strings in java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MzY2OTQx", "url": "https://github.com/eugenp/tutorials/pull/9608#pullrequestreview-444366941", "createdAt": "2020-07-08T02:16:26Z", "commit": {"oid": "230c3202fb190b8af427d72f9c230b9c32c14b76"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjoxNjoyNlrOGuVswg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjoxNjoyNlrOGuVswg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0MzIwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(version1_1_snapshot.isSnapshot(), true);\n          \n          \n            \n                    assertTrue(version1_1_snapshot.isSnapshot());", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r451243202", "createdAt": "2020-07-08T02:16:26Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        \n+        VersionNumber version1_1_1_1_alpha = VersionNumber.parse(\"1.1.1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_1_1_alpha) < 0);\n+        \n+        VersionNumber version1_1_beta = VersionNumber.parse(\"1.1.0.0-beta\"); \n+        assertTrue(version1_1_beta.compareTo(version1_1_1_1_alpha) < 0);\n+\n+        VersionNumber version1_1_1_snapshot = VersionNumber.parse(\"1.1.1-snapshot\");\n+        assertTrue(version1_1_1_1_alpha.compareTo(version1_1_1_snapshot) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingJackson_thenCompareVersions() {\n+        Version version1_1 = new Version(1, 1, 0, null, null, null);\n+        Version version1_2 = new Version(1, 2, 0, null, null, null);\n+        Version version1_3 = new Version(1, 3, 0, null, null, null);\n+        \n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Version version1_1_1 = new Version(1, 1, 1, null, null, null);\n+        assertTrue(version1_1.compareTo(version1_1_1) < 0);\n+        \n+        Version version1_1_maven = new Version(1, 1, 0, null, \"org.apache.maven\", null);\n+        Version version1_1_gradle = new Version(1, 1, 0, null, \"org.gradle\", null);\n+        assertTrue(version1_1_maven.compareTo(version1_1_gradle) < 0);\n+        \n+        Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n+        assertEquals(version1_1.compareTo(version1_1_snapshot), 0);\n+        \n+        assertEquals(version1_1_snapshot.isSnapshot(), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230c3202fb190b8af427d72f9c230b9c32c14b76"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MzY3MTcw", "url": "https://github.com/eugenp/tutorials/pull/9608#pullrequestreview-444367170", "createdAt": "2020-07-08T02:17:06Z", "commit": {"oid": "230c3202fb190b8af427d72f9c230b9c32c14b76"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjoxNzowN1rOGuVtqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjoxNzowN1rOGuVtqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0MzQzNA==", "bodyText": "use assertFalse", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r451243434", "createdAt": "2020-07-08T02:17:07Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        \n+        VersionNumber version1_1_1_1_alpha = VersionNumber.parse(\"1.1.1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_1_1_alpha) < 0);\n+        \n+        VersionNumber version1_1_beta = VersionNumber.parse(\"1.1.0.0-beta\"); \n+        assertTrue(version1_1_beta.compareTo(version1_1_1_1_alpha) < 0);\n+\n+        VersionNumber version1_1_1_snapshot = VersionNumber.parse(\"1.1.1-snapshot\");\n+        assertTrue(version1_1_1_1_alpha.compareTo(version1_1_1_snapshot) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingJackson_thenCompareVersions() {\n+        Version version1_1 = new Version(1, 1, 0, null, null, null);\n+        Version version1_2 = new Version(1, 2, 0, null, null, null);\n+        Version version1_3 = new Version(1, 3, 0, null, null, null);\n+        \n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Version version1_1_1 = new Version(1, 1, 1, null, null, null);\n+        assertTrue(version1_1.compareTo(version1_1_1) < 0);\n+        \n+        Version version1_1_maven = new Version(1, 1, 0, null, \"org.apache.maven\", null);\n+        Version version1_1_gradle = new Version(1, 1, 0, null, \"org.gradle\", null);\n+        assertTrue(version1_1_maven.compareTo(version1_1_gradle) < 0);\n+        \n+        Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n+        assertEquals(version1_1.compareTo(version1_1_snapshot), 0);\n+        \n+        assertEquals(version1_1_snapshot.isSnapshot(), true);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingSemver_thenCompareVersions() {\n+        Semver version1_1 = new Semver(\"1.1.0\");\n+        Semver version1_2 = new Semver(\"1.2.0\");\n+        Semver version1_3 = new Semver(\"1.3.0\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Semver version1_1_alpha = new Semver(\"1.1.0-alpha\");\n+        assertTrue(version1_1.isGreaterThan(version1_1_alpha));\n+        \n+        Semver version1_1_beta = new Semver(\"1.1.0-beta\");\n+        Semver version1_1_milestone = new Semver(\"1.1.0-milestone\");\n+        Semver version1_1_rc = new Semver(\"1.1.0-rc\");\n+        Semver version1_1_snapshot = new Semver(\"1.1.0-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.isLowerThan(version1_1_beta));\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        assertTrue(version1_1.isEqualTo(\"1.1.0\"));\n+        \n+        assertEquals(version1_1.diff(\"2.1.0\"), VersionDiff.MAJOR);\n+        assertEquals(version1_1.diff(\"1.2.3\"), VersionDiff.MINOR);\n+        assertEquals(version1_1.diff(\"1.1.1\"), VersionDiff.PATCH);\n+        \n+        assertTrue(version1_1.isStable());\n+        assertEquals(version1_1_alpha.isStable(), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230c3202fb190b8af427d72f9c230b9c32c14b76"}, "originalPosition": 123}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "803c9167aeb5e934189e260e49b363e52f0fa60b", "author": {"user": {"login": "SmartyAnsh", "name": "Anshul Bansal"}}, "url": "https://github.com/eugenp/tutorials/commit/803c9167aeb5e934189e260e49b363e52f0fa60b", "committedDate": "2020-07-09T06:59:50Z", "message": "Update core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java\n\nCo-authored-by: KevinGilmore <kpg102@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae4fac587aa1b09abb49a41a9cddd85a5b102cd2", "author": {"user": {"login": "SmartyAnsh", "name": "Anshul Bansal"}}, "url": "https://github.com/eugenp/tutorials/commit/ae4fac587aa1b09abb49a41a9cddd85a5b102cd2", "committedDate": "2020-07-09T07:01:20Z", "message": "used assertFalse in place of assertEquals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d09094c994ffa723dd9af339b53ed4aa468f9c0c", "author": {"user": {"login": "SmartyAnsh", "name": "Anshul Bansal"}}, "url": "https://github.com/eugenp/tutorials/commit/d09094c994ffa723dd9af339b53ed4aa468f9c0c", "committedDate": "2020-07-09T07:02:05Z", "message": "correct import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4163e5010c7636b41500843fe4b68cb9808b3bab", "author": {"user": {"login": "SmartyAnsh", "name": "Anshul Bansal"}}, "url": "https://github.com/eugenp/tutorials/commit/4163e5010c7636b41500843fe4b68cb9808b3bab", "committedDate": "2020-07-09T07:13:30Z", "message": "BAEL-4175 - moved code to a new module - core-java-string-operations-3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "932183fabd183c0983f66576811c8df2ae2eaac3", "author": {"user": {"login": "SmartyAnsh", "name": "Anshul Bansal"}}, "url": "https://github.com/eugenp/tutorials/commit/932183fabd183c0983f66576811c8df2ae2eaac3", "committedDate": "2020-07-09T07:19:08Z", "message": "POM fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODgxMTY1", "url": "https://github.com/eugenp/tutorials/pull/9608#pullrequestreview-446881165", "createdAt": "2020-07-12T14:00:06Z", "commit": {"oid": "932183fabd183c0983f66576811c8df2ae2eaac3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNDowMDowNlrOGwUeFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNDowMTo0NlrOGwUe3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDIxNQ==", "bodyText": "swap order of arguments so that you get assertTrue(expected, actual)", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453320215", "createdAt": "2020-07-12T14:00:06Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932183fabd183c0983f66576811c8df2ae2eaac3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDMzOA==", "bodyText": "swap argument order", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453320338", "createdAt": "2020-07-12T14:01:10Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932183fabd183c0983f66576811c8df2ae2eaac3"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDM2MA==", "bodyText": "swap argument order", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453320360", "createdAt": "2020-07-12T14:01:22Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        \n+        VersionNumber version1_1_1_1_alpha = VersionNumber.parse(\"1.1.1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_1_1_alpha) < 0);\n+        \n+        VersionNumber version1_1_beta = VersionNumber.parse(\"1.1.0.0-beta\"); \n+        assertTrue(version1_1_beta.compareTo(version1_1_1_1_alpha) < 0);\n+\n+        VersionNumber version1_1_1_snapshot = VersionNumber.parse(\"1.1.1-snapshot\");\n+        assertTrue(version1_1_1_1_alpha.compareTo(version1_1_1_snapshot) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingJackson_thenCompareVersions() {\n+        Version version1_1 = new Version(1, 1, 0, null, null, null);\n+        Version version1_2 = new Version(1, 2, 0, null, null, null);\n+        Version version1_3 = new Version(1, 3, 0, null, null, null);\n+        \n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Version version1_1_1 = new Version(1, 1, 1, null, null, null);\n+        assertTrue(version1_1.compareTo(version1_1_1) < 0);\n+        \n+        Version version1_1_maven = new Version(1, 1, 0, null, \"org.apache.maven\", null);\n+        Version version1_1_gradle = new Version(1, 1, 0, null, \"org.gradle\", null);\n+        assertTrue(version1_1_maven.compareTo(version1_1_gradle) < 0);\n+        \n+        Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n+        assertEquals(version1_1.compareTo(version1_1_snapshot), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932183fabd183c0983f66576811c8df2ae2eaac3"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDM5NA==", "bodyText": "swap argument order", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453320394", "createdAt": "2020-07-12T14:01:38Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        \n+        VersionNumber version1_1_1_1_alpha = VersionNumber.parse(\"1.1.1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_1_1_alpha) < 0);\n+        \n+        VersionNumber version1_1_beta = VersionNumber.parse(\"1.1.0.0-beta\"); \n+        assertTrue(version1_1_beta.compareTo(version1_1_1_1_alpha) < 0);\n+\n+        VersionNumber version1_1_1_snapshot = VersionNumber.parse(\"1.1.1-snapshot\");\n+        assertTrue(version1_1_1_1_alpha.compareTo(version1_1_1_snapshot) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingJackson_thenCompareVersions() {\n+        Version version1_1 = new Version(1, 1, 0, null, null, null);\n+        Version version1_2 = new Version(1, 2, 0, null, null, null);\n+        Version version1_3 = new Version(1, 3, 0, null, null, null);\n+        \n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Version version1_1_1 = new Version(1, 1, 1, null, null, null);\n+        assertTrue(version1_1.compareTo(version1_1_1) < 0);\n+        \n+        Version version1_1_maven = new Version(1, 1, 0, null, \"org.apache.maven\", null);\n+        Version version1_1_gradle = new Version(1, 1, 0, null, \"org.gradle\", null);\n+        assertTrue(version1_1_maven.compareTo(version1_1_gradle) < 0);\n+        \n+        Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n+        assertEquals(version1_1.compareTo(version1_1_snapshot), 0);\n+        \n+        assertTrue(version1_1_snapshot.isSnapshot());\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingSemver_thenCompareVersions() {\n+        Semver version1_1 = new Semver(\"1.1.0\");\n+        Semver version1_2 = new Semver(\"1.2.0\");\n+        Semver version1_3 = new Semver(\"1.3.0\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Semver version1_1_alpha = new Semver(\"1.1.0-alpha\");\n+        assertTrue(version1_1.isGreaterThan(version1_1_alpha));\n+        \n+        Semver version1_1_beta = new Semver(\"1.1.0-beta\");\n+        Semver version1_1_milestone = new Semver(\"1.1.0-milestone\");\n+        Semver version1_1_rc = new Semver(\"1.1.0-rc\");\n+        Semver version1_1_snapshot = new Semver(\"1.1.0-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.isLowerThan(version1_1_beta));\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        assertTrue(version1_1.isEqualTo(\"1.1.0\"));\n+        \n+        assertEquals(version1_1.diff(\"2.1.0\"), VersionDiff.MAJOR);\n+        assertEquals(version1_1.diff(\"1.2.3\"), VersionDiff.MINOR);\n+        assertEquals(version1_1.diff(\"1.1.1\"), VersionDiff.PATCH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932183fabd183c0983f66576811c8df2ae2eaac3"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDQxNA==", "bodyText": "swap argument order", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453320414", "createdAt": "2020-07-12T14:01:46Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        \n+        VersionNumber version1_1_1_1_alpha = VersionNumber.parse(\"1.1.1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_1_1_alpha) < 0);\n+        \n+        VersionNumber version1_1_beta = VersionNumber.parse(\"1.1.0.0-beta\"); \n+        assertTrue(version1_1_beta.compareTo(version1_1_1_1_alpha) < 0);\n+\n+        VersionNumber version1_1_1_snapshot = VersionNumber.parse(\"1.1.1-snapshot\");\n+        assertTrue(version1_1_1_1_alpha.compareTo(version1_1_1_snapshot) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingJackson_thenCompareVersions() {\n+        Version version1_1 = new Version(1, 1, 0, null, null, null);\n+        Version version1_2 = new Version(1, 2, 0, null, null, null);\n+        Version version1_3 = new Version(1, 3, 0, null, null, null);\n+        \n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Version version1_1_1 = new Version(1, 1, 1, null, null, null);\n+        assertTrue(version1_1.compareTo(version1_1_1) < 0);\n+        \n+        Version version1_1_maven = new Version(1, 1, 0, null, \"org.apache.maven\", null);\n+        Version version1_1_gradle = new Version(1, 1, 0, null, \"org.gradle\", null);\n+        assertTrue(version1_1_maven.compareTo(version1_1_gradle) < 0);\n+        \n+        Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n+        assertEquals(version1_1.compareTo(version1_1_snapshot), 0);\n+        \n+        assertTrue(version1_1_snapshot.isSnapshot());\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingSemver_thenCompareVersions() {\n+        Semver version1_1 = new Semver(\"1.1.0\");\n+        Semver version1_2 = new Semver(\"1.2.0\");\n+        Semver version1_3 = new Semver(\"1.3.0\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Semver version1_1_alpha = new Semver(\"1.1.0-alpha\");\n+        assertTrue(version1_1.isGreaterThan(version1_1_alpha));\n+        \n+        Semver version1_1_beta = new Semver(\"1.1.0-beta\");\n+        Semver version1_1_milestone = new Semver(\"1.1.0-milestone\");\n+        Semver version1_1_rc = new Semver(\"1.1.0-rc\");\n+        Semver version1_1_snapshot = new Semver(\"1.1.0-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.isLowerThan(version1_1_beta));\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        assertTrue(version1_1.isEqualTo(\"1.1.0\"));\n+        \n+        assertEquals(version1_1.diff(\"2.1.0\"), VersionDiff.MAJOR);\n+        assertEquals(version1_1.diff(\"1.2.3\"), VersionDiff.MINOR);\n+        assertEquals(version1_1.diff(\"1.1.1\"), VersionDiff.PATCH);\n+        \n+        assertTrue(version1_1.isStable());\n+        assertFalse(version1_1_alpha.isStable());\n+    }\n+\n+    @Test\n+    public void givenVersionStrings_whenUsingCustomVersionCompare_thenCompareVersions() {\n+        assertTrue(VersionCompare.compareVersions(\"1.0.1\", \"1.1.2\") < 0);\n+        assertTrue(VersionCompare.compareVersions(\"1.0.1\", \"1.10\") < 0);\n+        assertTrue(VersionCompare.compareVersions(\"1.1.2\", \"1.0.1\") > 0);\n+        assertTrue(VersionCompare.compareVersions(\"1.1.2\", \"1.2\") < 0); \n+        assertEquals(VersionCompare.compareVersions(\"1.3.0\", \"1.3\"), 0); ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932183fabd183c0983f66576811c8df2ae2eaac3"}, "originalPosition": 133}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30ff1a1a146137521a2cc3329759df02520fc91c", "author": {"user": {"login": "SmartyAnsh", "name": "Anshul Bansal"}}, "url": "https://github.com/eugenp/tutorials/commit/30ff1a1a146137521a2cc3329759df02520fc91c", "committedDate": "2020-07-13T03:11:58Z", "message": "BAEL-4175 - swapped argument order for assertEquals"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4360, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}