{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NDcyNTI0", "number": 9645, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxMTo0OVrOENjOKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNjozN1rOENjPTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjQ0MDA5OnYy", "diffSide": "RIGHT", "path": "persistence-modules/core-java-persistence/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxMTo0OVrOGwQlUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxMTo0OVrOGwQlUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NjUzMQ==", "bodyText": "Do not edit this file. We don't know what the final URL will be yet, and your editor will add this after the article is published.", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256531", "createdAt": "2020-07-12T02:11:49Z", "author": {"login": "KevinGilmore"}, "path": "persistence-modules/core-java-persistence/README.md", "diffHunk": "@@ -10,3 +10,4 @@\n - [Guide to the JDBC ResultSet Interface](https://www.baeldung.com/jdbc-resultset)\n - [Types of SQL Joins](https://www.baeldung.com/sql-joins)\n - [Returning the Generated Keys in JDBC](https://www.baeldung.com/jdbc-returning-generated-keys)\n+- [Difference between Statement and PreparedStatement](https://www.baeldung.com/difference-between-statement-and-preparedstatement)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e523cb84a688fa3ec32ce71540af09983afbf7d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjQ0MDkyOnYy", "diffSide": "RIGHT", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/DatasourceFactoryUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxMzoyNFrOGwQlsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxMzoyNFrOGwQlsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NjYyNg==", "bodyText": "add blank line before assertions", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256626", "createdAt": "2020-07-12T02:13:24Z", "author": {"login": "KevinGilmore"}, "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/DatasourceFactoryUnitTest.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class DatasourceFactoryUnitTest {\n+\n+    @Test\n+    void whenCreateConnectionAndTables_thenConnectionIsOpenAndTableIsCreated()\n+        throws SQLException, ClassNotFoundException {\n+        DatasourceFactory factory = new DatasourceFactory();\n+        Connection connection = factory.getConnection();\n+        assertFalse(connection.isClosed());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e523cb84a688fa3ec32ce71540af09983afbf7d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjQ0MTQ2OnYy", "diffSide": "RIGHT", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/PreparedStatementPersonDaoUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNDoyMlrOGwQl8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNDoyMlrOGwQl8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NjY5MQ==", "bodyText": "Add a blank line before each set of assertions", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256691", "createdAt": "2020-07-12T02:14:22Z", "author": {"login": "KevinGilmore"}, "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/PreparedStatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class PreparedStatementPersonDaoUnitTest {\n+    private PreparedStatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new PreparedStatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e523cb84a688fa3ec32ce71540af09983afbf7d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjQ0MTY0OnYy", "diffSide": "RIGHT", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/PreparedStatementPersonDaoUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNDozM1rOGwQmBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNDozM1rOGwQmBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NjcwOA==", "bodyText": "remove blank line", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256708", "createdAt": "2020-07-12T02:14:33Z", "author": {"login": "KevinGilmore"}, "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/PreparedStatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class PreparedStatementPersonDaoUnitTest {\n+    private PreparedStatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new PreparedStatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenInsertAndGetMultiplePersons_thenItNeverThrowsAnException() throws SQLException {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e523cb84a688fa3ec32ce71540af09983afbf7d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjQ0MTY5OnYy", "diffSide": "RIGHT", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/PreparedStatementPersonDaoUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNDo0M1rOGwQmCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNDo0M1rOGwQmCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NjcxMw==", "bodyText": "remove blank line", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256713", "createdAt": "2020-07-12T02:14:43Z", "author": {"login": "KevinGilmore"}, "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/PreparedStatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class PreparedStatementPersonDaoUnitTest {\n+    private PreparedStatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new PreparedStatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenInsertAndGetMultiplePersons_thenItNeverThrowsAnException() throws SQLException {\n+\n+        assertDoesNotThrow(() -> dao.insert(\n+            Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skit\"))));\n+\n+        List<PersonEntity> result = dao.getAll();\n+\n+        assertEquals(Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skit\")),\n+            result);\n+    }\n+\n+    @Test\n+    void whenUpdateAnExistentPerson_thenItReturnsTheUpdatedPerson() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.update(new PersonEntity(1, \"johnny\"));\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertTrue(maybePerson.isPresent());\n+\n+        PersonEntity personEntity = maybePerson.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"johnny\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenDeleteAPersonById_thenItWillBeAbsentInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.deleteById(1);\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertFalse(maybePerson.isPresent());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e523cb84a688fa3ec32ce71540af09983afbf7d"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjQ0MjE1OnYy", "diffSide": "RIGHT", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/PreparedStatementPersonDaoUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNToxMlrOGwQmOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNToxMlrOGwQmOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1Njc2Mw==", "bodyText": "Add a blank line before each set of assertions", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256763", "createdAt": "2020-07-12T02:15:12Z", "author": {"login": "KevinGilmore"}, "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/PreparedStatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class PreparedStatementPersonDaoUnitTest {\n+    private PreparedStatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new PreparedStatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenInsertAndGetMultiplePersons_thenItNeverThrowsAnException() throws SQLException {\n+\n+        assertDoesNotThrow(() -> dao.insert(\n+            Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skit\"))));\n+\n+        List<PersonEntity> result = dao.getAll();\n+\n+        assertEquals(Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skit\")),\n+            result);\n+    }\n+\n+    @Test\n+    void whenUpdateAnExistentPerson_thenItReturnsTheUpdatedPerson() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.update(new PersonEntity(1, \"johnny\"));\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertTrue(maybePerson.isPresent());\n+\n+        PersonEntity personEntity = maybePerson.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"johnny\", personEntity.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e523cb84a688fa3ec32ce71540af09983afbf7d"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjQ0MjI4OnYy", "diffSide": "RIGHT", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/PreparedStatementPersonDaoUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNToyNVrOGwQmSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNToyNVrOGwQmSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1Njc3Ng==", "bodyText": "Add a blank line before assertion", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256776", "createdAt": "2020-07-12T02:15:25Z", "author": {"login": "KevinGilmore"}, "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/PreparedStatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class PreparedStatementPersonDaoUnitTest {\n+    private PreparedStatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new PreparedStatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenInsertAndGetMultiplePersons_thenItNeverThrowsAnException() throws SQLException {\n+\n+        assertDoesNotThrow(() -> dao.insert(\n+            Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skit\"))));\n+\n+        List<PersonEntity> result = dao.getAll();\n+\n+        assertEquals(Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skit\")),\n+            result);\n+    }\n+\n+    @Test\n+    void whenUpdateAnExistentPerson_thenItReturnsTheUpdatedPerson() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.update(new PersonEntity(1, \"johnny\"));\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertTrue(maybePerson.isPresent());\n+\n+        PersonEntity personEntity = maybePerson.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"johnny\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenDeleteAPersonById_thenItWillBeAbsentInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.deleteById(1);\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertFalse(maybePerson.isPresent());\n+\n+    }\n+\n+    @Test\n+    void whenAHackerUpdateAPerson_thenItUpdatesTheTargetPerson() throws SQLException {\n+\n+        dao.insert(Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skeet\")));\n+        dao.update(new PersonEntity(1, \"hacker' --\"));\n+\n+        List<PersonEntity> result = dao.getAll();\n+        assertEquals(Arrays.asList(new PersonEntity(1, \"hacker' --\"), new PersonEntity(2, \"skeet\")),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e523cb84a688fa3ec32ce71540af09983afbf7d"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjQ0MjQxOnYy", "diffSide": "RIGHT", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/PreparedStatementPersonDaoUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNTozNFrOGwQmVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNTozNFrOGwQmVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1Njc5MA==", "bodyText": "remove blank line", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256790", "createdAt": "2020-07-12T02:15:34Z", "author": {"login": "KevinGilmore"}, "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/PreparedStatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class PreparedStatementPersonDaoUnitTest {\n+    private PreparedStatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new PreparedStatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenInsertAndGetMultiplePersons_thenItNeverThrowsAnException() throws SQLException {\n+\n+        assertDoesNotThrow(() -> dao.insert(\n+            Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skit\"))));\n+\n+        List<PersonEntity> result = dao.getAll();\n+\n+        assertEquals(Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skit\")),\n+            result);\n+    }\n+\n+    @Test\n+    void whenUpdateAnExistentPerson_thenItReturnsTheUpdatedPerson() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.update(new PersonEntity(1, \"johnny\"));\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertTrue(maybePerson.isPresent());\n+\n+        PersonEntity personEntity = maybePerson.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"johnny\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenDeleteAPersonById_thenItWillBeAbsentInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.deleteById(1);\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertFalse(maybePerson.isPresent());\n+\n+    }\n+\n+    @Test\n+    void whenAHackerUpdateAPerson_thenItUpdatesTheTargetPerson() throws SQLException {\n+\n+        dao.insert(Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skeet\")));\n+        dao.update(new PersonEntity(1, \"hacker' --\"));\n+\n+        List<PersonEntity> result = dao.getAll();\n+        assertEquals(Arrays.asList(new PersonEntity(1, \"hacker' --\"), new PersonEntity(2, \"skeet\")),\n+            result);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e523cb84a688fa3ec32ce71540af09983afbf7d"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjQ0MjU4OnYy", "diffSide": "RIGHT", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/StatementPersonDaoUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNTo1MVrOGwQmaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNTo1MVrOGwQmaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NjgwOQ==", "bodyText": "Add a blank line before each set of assertions", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256809", "createdAt": "2020-07-12T02:15:51Z", "author": {"login": "KevinGilmore"}, "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/StatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class StatementPersonDaoUnitTest {\n+\n+    private StatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new StatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItWillThrowAnException() {\n+        assertThrows(SQLException.class, () -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e523cb84a688fa3ec32ce71540af09983afbf7d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjQ0MjU5OnYy", "diffSide": "RIGHT", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/StatementPersonDaoUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNjowMVrOGwQmaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNjowMVrOGwQmaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NjgxMQ==", "bodyText": "remove blank line", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256811", "createdAt": "2020-07-12T02:16:01Z", "author": {"login": "KevinGilmore"}, "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/StatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class StatementPersonDaoUnitTest {\n+\n+    private StatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new StatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItWillThrowAnException() {\n+        assertThrows(SQLException.class, () -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenInsertAndGetMultiplePersons_thenItNeverThrowsAnException() throws SQLException {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e523cb84a688fa3ec32ce71540af09983afbf7d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjQ0MjcwOnYy", "diffSide": "RIGHT", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/StatementPersonDaoUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNjoxMVrOGwQmdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNjoxMVrOGwQmdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1NjgyMg==", "bodyText": "remove blank line", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256822", "createdAt": "2020-07-12T02:16:11Z", "author": {"login": "KevinGilmore"}, "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/StatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class StatementPersonDaoUnitTest {\n+\n+    private StatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new StatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItWillThrowAnException() {\n+        assertThrows(SQLException.class, () -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenInsertAndGetMultiplePersons_thenItNeverThrowsAnException() throws SQLException {\n+\n+        assertDoesNotThrow(() -> dao.insert(\n+            Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skeet\"))));\n+\n+        List<PersonEntity> result = dao.getAll();\n+\n+        assertEquals(Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skeet\")),\n+            result);\n+    }\n+\n+    @Test\n+    void whenUpdateAnExistentPerson_thenItReturnsTheUpdatedPerson() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.update(new PersonEntity(1, \"johnny\"));\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertTrue(maybePerson.isPresent());\n+\n+        PersonEntity personEntity = maybePerson.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"johnny\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenDeleteAPersonById_thenItWillBeAbsentInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.deleteById(1);\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertFalse(maybePerson.isPresent());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e523cb84a688fa3ec32ce71540af09983afbf7d"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjQ0MzAyOnYy", "diffSide": "RIGHT", "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/StatementPersonDaoUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNjozN1rOGwQmlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQwMjoxNjozN1rOGwQmlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI1Njg1NQ==", "bodyText": "remove blank line at beginning and end, and add blank line before assertion", "url": "https://github.com/eugenp/tutorials/pull/9645#discussion_r453256855", "createdAt": "2020-07-12T02:16:37Z", "author": {"login": "KevinGilmore"}, "path": "persistence-modules/core-java-persistence/src/test/java/com/baeldung/statmentVsPreparedstatment/StatementPersonDaoUnitTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.baeldung.statmentVsPreparedstatment;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class StatementPersonDaoUnitTest {\n+\n+    private StatementPersonDao dao;\n+\n+    @BeforeEach\n+    void setup() throws SQLException, ClassNotFoundException {\n+        DatasourceFactory datasourceFactory = new DatasourceFactory();\n+        Connection connection = datasourceFactory.getConnection();\n+        datasourceFactory.createTables();\n+        dao = new StatementPersonDao(connection);\n+    }\n+\n+    @Test\n+    void whenInsertAPerson_thenItNeverThrowsAnException() {\n+        assertDoesNotThrow(() -> dao.insert(new PersonEntity(1, \"john\")));\n+    }\n+\n+    @Test\n+    void whenInsertAPersonWithQuoteInText_thenItWillThrowAnException() {\n+        assertThrows(SQLException.class, () -> dao.insert(new PersonEntity(1, \"O'Brien\")));\n+    }\n+\n+    @Test\n+    void whenGetAPersonById_thenItReturnThePersonInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+\n+        Optional<PersonEntity> maybeEmployee = dao.getById(1);\n+        assertTrue(maybeEmployee.isPresent());\n+\n+        PersonEntity personEntity = maybeEmployee.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"john\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenInsertAndGetMultiplePersons_thenItNeverThrowsAnException() throws SQLException {\n+\n+        assertDoesNotThrow(() -> dao.insert(\n+            Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skeet\"))));\n+\n+        List<PersonEntity> result = dao.getAll();\n+\n+        assertEquals(Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skeet\")),\n+            result);\n+    }\n+\n+    @Test\n+    void whenUpdateAnExistentPerson_thenItReturnsTheUpdatedPerson() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.update(new PersonEntity(1, \"johnny\"));\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertTrue(maybePerson.isPresent());\n+\n+        PersonEntity personEntity = maybePerson.get();\n+        assertEquals(1, personEntity.getId());\n+        assertEquals(\"johnny\", personEntity.getName());\n+    }\n+\n+    @Test\n+    void whenDeleteAPersonById_thenItWillBeAbsentInDatabase() throws SQLException {\n+        dao.insert(new PersonEntity(1, \"john\"));\n+        dao.deleteById(1);\n+\n+        Optional<PersonEntity> maybePerson = dao.getById(1);\n+        assertFalse(maybePerson.isPresent());\n+\n+    }\n+\n+    @Test\n+    void whenAHackerUpdateAPerson_thenItAllPersonsAreUpdated() throws SQLException {\n+\n+        dao.insert(Arrays.asList(new PersonEntity(1, \"john\"), new PersonEntity(2, \"skeet\")));\n+        dao.update(new PersonEntity(1, \"hacker' --\"));\n+\n+        List<PersonEntity> result = dao.getAll();\n+        assertEquals(Arrays.asList(new PersonEntity(1, \"hacker\"), new PersonEntity(2, \"hacker\")),\n+            result);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e523cb84a688fa3ec32ce71540af09983afbf7d"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4316, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}