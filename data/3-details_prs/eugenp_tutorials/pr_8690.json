{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyODExMjE4", "number": 8690, "title": "BAEL-3298 Spring batch retry job", "bodyText": "", "createdAt": "2020-02-09T10:00:27Z", "url": "https://github.com/eugenp/tutorials/pull/8690", "merged": true, "mergeCommit": {"oid": "9c56746eda7a9a40b8b08e08406a70060f7b8ae2"}, "closed": true, "closedAt": "2020-02-22T10:20:17Z", "author": {"login": "shubhi22"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcClisngH2gAyMzcyODExMjE4Ojk5N2QwNDBjY2M3OGVlNzhlNjViZWU1MDA3YTYzZDkxNWI2YmJjZWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFvu8ZgH2gAyMzcyODExMjE4OmRmNGRhZmM1NzhmOTUwZTU3MWJkYWMzOWZkOTkyODI1NmY1ZDBkNWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "997d040ccc78ee78e65bee5007a63d915b6bbcea", "author": {"user": {"login": "shubhi22", "name": "Shubhra Srivastava"}}, "url": "https://github.com/eugenp/tutorials/commit/997d040ccc78ee78e65bee5007a63d915b6bbcea", "committedDate": "2020-02-09T09:58:19Z", "message": "BAEL-3298 Spring batch retry job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef9cf05bc99db7622cca74da64a25a10ccc87c4f", "author": {"user": {"login": "shubhi22", "name": "Shubhra Srivastava"}}, "url": "https://github.com/eugenp/tutorials/commit/ef9cf05bc99db7622cca74da64a25a10ccc87c4f", "committedDate": "2020-02-09T12:46:20Z", "message": "BAEL-3298 Adding tests and refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cb246b0be3331c31c03d548df164bb4a74a1704", "author": {"user": {"login": "shubhi22", "name": "Shubhra Srivastava"}}, "url": "https://github.com/eugenp/tutorials/commit/0cb246b0be3331c31c03d548df164bb4a74a1704", "committedDate": "2020-02-09T13:43:33Z", "message": "BAEL-3298 Some more refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzI0MzQ3", "url": "https://github.com/eugenp/tutorials/pull/8690#pullrequestreview-356324347", "createdAt": "2020-02-10T22:52:31Z", "commit": {"oid": "0cb246b0be3331c31c03d548df164bb4a74a1704"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1MjozMVrOFn4j3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzowMjo1MlrOFn40CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NTQ2OQ==", "bodyText": "Can this be trimmed down to a single exception throws? Even just Exception?", "url": "https://github.com/eugenp/tutorials/pull/8690#discussion_r377365469", "createdAt": "2020-02-10T22:52:31Z", "author": {"login": "ashleyfrieze"}, "path": "spring-batch/src/main/java/org/baeldung/batch/SpringBatchRetryConfig.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.baeldung.batch;\n+\n+import org.apache.http.conn.ConnectTimeoutException;\n+import org.baeldung.batch.model.Transaction;\n+import org.baeldung.batch.service.RecordFieldSetMapper;\n+import org.baeldung.batch.service.RetryItemProcessor;\n+import org.springframework.batch.core.Job;\n+import org.springframework.batch.core.Step;\n+import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;\n+import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;\n+import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;\n+import org.springframework.batch.item.ItemProcessor;\n+import org.springframework.batch.item.ItemReader;\n+import org.springframework.batch.item.ItemWriter;\n+import org.springframework.batch.item.UnexpectedInputException;\n+import org.springframework.batch.item.file.FlatFileItemReader;\n+import org.springframework.batch.item.file.mapping.DefaultLineMapper;\n+import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;\n+import org.springframework.batch.item.xml.StaxEventItemWriter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+import org.springframework.dao.DeadlockLoserDataAccessException;\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+\n+import java.text.ParseException;\n+\n+@Configuration\n+@EnableBatchProcessing\n+public class SpringBatchRetryConfig {\n+    @Autowired\n+    private JobBuilderFactory jobBuilderFactory;\n+\n+    @Autowired\n+    private StepBuilderFactory stepBuilderFactory;\n+\n+    @Value(\"input/recordRetry.csv\")\n+    private Resource inputCsv;\n+\n+    @Value(\"file:xml/retryOutput.xml\")\n+    private Resource outputXml;\n+\n+    public ItemReader<Transaction> itemReader(Resource inputData) throws UnexpectedInputException, ParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb246b0be3331c31c03d548df164bb4a74a1704"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NTY4NQ==", "bodyText": "Could these be private static final defined at the top of the file - reduce noise in this method?", "url": "https://github.com/eugenp/tutorials/pull/8690#discussion_r377365685", "createdAt": "2020-02-10T22:53:02Z", "author": {"login": "ashleyfrieze"}, "path": "spring-batch/src/main/java/org/baeldung/batch/SpringBatchRetryConfig.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.baeldung.batch;\n+\n+import org.apache.http.conn.ConnectTimeoutException;\n+import org.baeldung.batch.model.Transaction;\n+import org.baeldung.batch.service.RecordFieldSetMapper;\n+import org.baeldung.batch.service.RetryItemProcessor;\n+import org.springframework.batch.core.Job;\n+import org.springframework.batch.core.Step;\n+import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;\n+import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;\n+import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;\n+import org.springframework.batch.item.ItemProcessor;\n+import org.springframework.batch.item.ItemReader;\n+import org.springframework.batch.item.ItemWriter;\n+import org.springframework.batch.item.UnexpectedInputException;\n+import org.springframework.batch.item.file.FlatFileItemReader;\n+import org.springframework.batch.item.file.mapping.DefaultLineMapper;\n+import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;\n+import org.springframework.batch.item.xml.StaxEventItemWriter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+import org.springframework.dao.DeadlockLoserDataAccessException;\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+\n+import java.text.ParseException;\n+\n+@Configuration\n+@EnableBatchProcessing\n+public class SpringBatchRetryConfig {\n+    @Autowired\n+    private JobBuilderFactory jobBuilderFactory;\n+\n+    @Autowired\n+    private StepBuilderFactory stepBuilderFactory;\n+\n+    @Value(\"input/recordRetry.csv\")\n+    private Resource inputCsv;\n+\n+    @Value(\"file:xml/retryOutput.xml\")\n+    private Resource outputXml;\n+\n+    public ItemReader<Transaction> itemReader(Resource inputData) throws UnexpectedInputException, ParseException {\n+        FlatFileItemReader<Transaction> reader = new FlatFileItemReader<>();\n+        DelimitedLineTokenizer tokenizer = new DelimitedLineTokenizer();\n+        String[] tokens = { \"username\", \"userid\", \"transactiondate\", \"amount\" };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb246b0be3331c31c03d548df164bb4a74a1704"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NjA2MA==", "bodyText": "Can this line be next to the reader so we don't switch between object's we're initializing?", "url": "https://github.com/eugenp/tutorials/pull/8690#discussion_r377366060", "createdAt": "2020-02-10T22:53:55Z", "author": {"login": "ashleyfrieze"}, "path": "spring-batch/src/main/java/org/baeldung/batch/SpringBatchRetryConfig.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.baeldung.batch;\n+\n+import org.apache.http.conn.ConnectTimeoutException;\n+import org.baeldung.batch.model.Transaction;\n+import org.baeldung.batch.service.RecordFieldSetMapper;\n+import org.baeldung.batch.service.RetryItemProcessor;\n+import org.springframework.batch.core.Job;\n+import org.springframework.batch.core.Step;\n+import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;\n+import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;\n+import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;\n+import org.springframework.batch.item.ItemProcessor;\n+import org.springframework.batch.item.ItemReader;\n+import org.springframework.batch.item.ItemWriter;\n+import org.springframework.batch.item.UnexpectedInputException;\n+import org.springframework.batch.item.file.FlatFileItemReader;\n+import org.springframework.batch.item.file.mapping.DefaultLineMapper;\n+import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;\n+import org.springframework.batch.item.xml.StaxEventItemWriter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+import org.springframework.dao.DeadlockLoserDataAccessException;\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+\n+import java.text.ParseException;\n+\n+@Configuration\n+@EnableBatchProcessing\n+public class SpringBatchRetryConfig {\n+    @Autowired\n+    private JobBuilderFactory jobBuilderFactory;\n+\n+    @Autowired\n+    private StepBuilderFactory stepBuilderFactory;\n+\n+    @Value(\"input/recordRetry.csv\")\n+    private Resource inputCsv;\n+\n+    @Value(\"file:xml/retryOutput.xml\")\n+    private Resource outputXml;\n+\n+    public ItemReader<Transaction> itemReader(Resource inputData) throws UnexpectedInputException, ParseException {\n+        FlatFileItemReader<Transaction> reader = new FlatFileItemReader<>();\n+        DelimitedLineTokenizer tokenizer = new DelimitedLineTokenizer();\n+        String[] tokens = { \"username\", \"userid\", \"transactiondate\", \"amount\" };\n+        tokenizer.setNames(tokens);\n+        reader.setResource(inputData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb246b0be3331c31c03d548df164bb4a74a1704"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NjQ4NQ==", "bodyText": "Perhaps the line mapper should be defined 2nd. The tokenizer 1st, and the reader 3rd?", "url": "https://github.com/eugenp/tutorials/pull/8690#discussion_r377366485", "createdAt": "2020-02-10T22:54:56Z", "author": {"login": "ashleyfrieze"}, "path": "spring-batch/src/main/java/org/baeldung/batch/SpringBatchRetryConfig.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.baeldung.batch;\n+\n+import org.apache.http.conn.ConnectTimeoutException;\n+import org.baeldung.batch.model.Transaction;\n+import org.baeldung.batch.service.RecordFieldSetMapper;\n+import org.baeldung.batch.service.RetryItemProcessor;\n+import org.springframework.batch.core.Job;\n+import org.springframework.batch.core.Step;\n+import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;\n+import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;\n+import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;\n+import org.springframework.batch.item.ItemProcessor;\n+import org.springframework.batch.item.ItemReader;\n+import org.springframework.batch.item.ItemWriter;\n+import org.springframework.batch.item.UnexpectedInputException;\n+import org.springframework.batch.item.file.FlatFileItemReader;\n+import org.springframework.batch.item.file.mapping.DefaultLineMapper;\n+import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;\n+import org.springframework.batch.item.xml.StaxEventItemWriter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+import org.springframework.dao.DeadlockLoserDataAccessException;\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+\n+import java.text.ParseException;\n+\n+@Configuration\n+@EnableBatchProcessing\n+public class SpringBatchRetryConfig {\n+    @Autowired\n+    private JobBuilderFactory jobBuilderFactory;\n+\n+    @Autowired\n+    private StepBuilderFactory stepBuilderFactory;\n+\n+    @Value(\"input/recordRetry.csv\")\n+    private Resource inputCsv;\n+\n+    @Value(\"file:xml/retryOutput.xml\")\n+    private Resource outputXml;\n+\n+    public ItemReader<Transaction> itemReader(Resource inputData) throws UnexpectedInputException, ParseException {\n+        FlatFileItemReader<Transaction> reader = new FlatFileItemReader<>();\n+        DelimitedLineTokenizer tokenizer = new DelimitedLineTokenizer();\n+        String[] tokens = { \"username\", \"userid\", \"transactiondate\", \"amount\" };\n+        tokenizer.setNames(tokens);\n+        reader.setResource(inputData);\n+        DefaultLineMapper<Transaction> lineMapper = new DefaultLineMapper<>();\n+        lineMapper.setLineTokenizer(tokenizer);\n+        lineMapper.setFieldSetMapper(new RecordFieldSetMapper());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb246b0be3331c31c03d548df164bb4a74a1704"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2Njk4NQ==", "bodyText": "Shall we have a line break before each . after the .get?", "url": "https://github.com/eugenp/tutorials/pull/8690#discussion_r377366985", "createdAt": "2020-02-10T22:55:59Z", "author": {"login": "ashleyfrieze"}, "path": "spring-batch/src/main/java/org/baeldung/batch/SpringBatchRetryConfig.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.baeldung.batch;\n+\n+import org.apache.http.conn.ConnectTimeoutException;\n+import org.baeldung.batch.model.Transaction;\n+import org.baeldung.batch.service.RecordFieldSetMapper;\n+import org.baeldung.batch.service.RetryItemProcessor;\n+import org.springframework.batch.core.Job;\n+import org.springframework.batch.core.Step;\n+import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;\n+import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;\n+import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;\n+import org.springframework.batch.item.ItemProcessor;\n+import org.springframework.batch.item.ItemReader;\n+import org.springframework.batch.item.ItemWriter;\n+import org.springframework.batch.item.UnexpectedInputException;\n+import org.springframework.batch.item.file.FlatFileItemReader;\n+import org.springframework.batch.item.file.mapping.DefaultLineMapper;\n+import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;\n+import org.springframework.batch.item.xml.StaxEventItemWriter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+import org.springframework.dao.DeadlockLoserDataAccessException;\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+\n+import java.text.ParseException;\n+\n+@Configuration\n+@EnableBatchProcessing\n+public class SpringBatchRetryConfig {\n+    @Autowired\n+    private JobBuilderFactory jobBuilderFactory;\n+\n+    @Autowired\n+    private StepBuilderFactory stepBuilderFactory;\n+\n+    @Value(\"input/recordRetry.csv\")\n+    private Resource inputCsv;\n+\n+    @Value(\"file:xml/retryOutput.xml\")\n+    private Resource outputXml;\n+\n+    public ItemReader<Transaction> itemReader(Resource inputData) throws UnexpectedInputException, ParseException {\n+        FlatFileItemReader<Transaction> reader = new FlatFileItemReader<>();\n+        DelimitedLineTokenizer tokenizer = new DelimitedLineTokenizer();\n+        String[] tokens = { \"username\", \"userid\", \"transactiondate\", \"amount\" };\n+        tokenizer.setNames(tokens);\n+        reader.setResource(inputData);\n+        DefaultLineMapper<Transaction> lineMapper = new DefaultLineMapper<>();\n+        lineMapper.setLineTokenizer(tokenizer);\n+        lineMapper.setFieldSetMapper(new RecordFieldSetMapper());\n+        reader.setLinesToSkip(1);\n+        reader.setLineMapper(lineMapper);\n+        return reader;\n+    }\n+\n+    @Bean\n+    public ItemProcessor<Transaction, Transaction> retryItemProcessor() {\n+        return new RetryItemProcessor();\n+    }\n+\n+    @Bean\n+    public ItemWriter<Transaction> itemWriter(Marshaller marshaller) {\n+        StaxEventItemWriter<Transaction> itemWriter = new StaxEventItemWriter<>();\n+        itemWriter.setMarshaller(marshaller);\n+        itemWriter.setRootTagName(\"transactionRecord\");\n+        itemWriter.setResource(outputXml);\n+        return itemWriter;\n+    }\n+\n+    @Bean\n+    public Marshaller marshaller() {\n+        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\n+        marshaller.setClassesToBeBound(Transaction.class);\n+        return marshaller;\n+    }\n+\n+    @Bean\n+    public Step retryStep(\n+        @Qualifier(\"retryItemProcessor\")\n+            ItemProcessor<Transaction, Transaction> processor, ItemWriter<Transaction> writer) throws ParseException {\n+        return stepBuilderFactory.get(\"retryStep\").<Transaction, Transaction>chunk(10).reader(itemReader(inputCsv))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb246b0be3331c31c03d548df164bb4a74a1704"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NzE2NA==", "bodyText": "Let's also line break at . to make this read more fluently.", "url": "https://github.com/eugenp/tutorials/pull/8690#discussion_r377367164", "createdAt": "2020-02-10T22:56:27Z", "author": {"login": "ashleyfrieze"}, "path": "spring-batch/src/main/java/org/baeldung/batch/SpringBatchRetryConfig.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.baeldung.batch;\n+\n+import org.apache.http.conn.ConnectTimeoutException;\n+import org.baeldung.batch.model.Transaction;\n+import org.baeldung.batch.service.RecordFieldSetMapper;\n+import org.baeldung.batch.service.RetryItemProcessor;\n+import org.springframework.batch.core.Job;\n+import org.springframework.batch.core.Step;\n+import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;\n+import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;\n+import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;\n+import org.springframework.batch.item.ItemProcessor;\n+import org.springframework.batch.item.ItemReader;\n+import org.springframework.batch.item.ItemWriter;\n+import org.springframework.batch.item.UnexpectedInputException;\n+import org.springframework.batch.item.file.FlatFileItemReader;\n+import org.springframework.batch.item.file.mapping.DefaultLineMapper;\n+import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;\n+import org.springframework.batch.item.xml.StaxEventItemWriter;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+import org.springframework.dao.DeadlockLoserDataAccessException;\n+import org.springframework.oxm.Marshaller;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+\n+import java.text.ParseException;\n+\n+@Configuration\n+@EnableBatchProcessing\n+public class SpringBatchRetryConfig {\n+    @Autowired\n+    private JobBuilderFactory jobBuilderFactory;\n+\n+    @Autowired\n+    private StepBuilderFactory stepBuilderFactory;\n+\n+    @Value(\"input/recordRetry.csv\")\n+    private Resource inputCsv;\n+\n+    @Value(\"file:xml/retryOutput.xml\")\n+    private Resource outputXml;\n+\n+    public ItemReader<Transaction> itemReader(Resource inputData) throws UnexpectedInputException, ParseException {\n+        FlatFileItemReader<Transaction> reader = new FlatFileItemReader<>();\n+        DelimitedLineTokenizer tokenizer = new DelimitedLineTokenizer();\n+        String[] tokens = { \"username\", \"userid\", \"transactiondate\", \"amount\" };\n+        tokenizer.setNames(tokens);\n+        reader.setResource(inputData);\n+        DefaultLineMapper<Transaction> lineMapper = new DefaultLineMapper<>();\n+        lineMapper.setLineTokenizer(tokenizer);\n+        lineMapper.setFieldSetMapper(new RecordFieldSetMapper());\n+        reader.setLinesToSkip(1);\n+        reader.setLineMapper(lineMapper);\n+        return reader;\n+    }\n+\n+    @Bean\n+    public ItemProcessor<Transaction, Transaction> retryItemProcessor() {\n+        return new RetryItemProcessor();\n+    }\n+\n+    @Bean\n+    public ItemWriter<Transaction> itemWriter(Marshaller marshaller) {\n+        StaxEventItemWriter<Transaction> itemWriter = new StaxEventItemWriter<>();\n+        itemWriter.setMarshaller(marshaller);\n+        itemWriter.setRootTagName(\"transactionRecord\");\n+        itemWriter.setResource(outputXml);\n+        return itemWriter;\n+    }\n+\n+    @Bean\n+    public Marshaller marshaller() {\n+        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\n+        marshaller.setClassesToBeBound(Transaction.class);\n+        return marshaller;\n+    }\n+\n+    @Bean\n+    public Step retryStep(\n+        @Qualifier(\"retryItemProcessor\")\n+            ItemProcessor<Transaction, Transaction> processor, ItemWriter<Transaction> writer) throws ParseException {\n+        return stepBuilderFactory.get(\"retryStep\").<Transaction, Transaction>chunk(10).reader(itemReader(inputCsv))\n+            .processor(processor)\n+            .writer(writer)\n+            .faultTolerant()\n+            .retryLimit(3)\n+            .retry(ConnectTimeoutException.class)\n+            .retry(DeadlockLoserDataAccessException.class)\n+            .build();\n+    }\n+\n+    @Bean(name = \"retryBatchJob\")\n+    public Job retryJob(\n+        @Qualifier(\"retryStep\")\n+            Step retryStep) {\n+        return jobBuilderFactory.get(\"retryBatchJob\").start(retryStep).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb246b0be3331c31c03d548df164bb4a74a1704"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2Nzg5Mg==", "bodyText": "2 * 1000?, you mean 2000?\nPerhaps this config could be a private static final and perhaps the 2 * 1000 could be a constant named TWO_SECONDS (I assume it's that)", "url": "https://github.com/eugenp/tutorials/pull/8690#discussion_r377367892", "createdAt": "2020-02-10T22:58:24Z", "author": {"login": "ashleyfrieze"}, "path": "spring-batch/src/main/java/org/baeldung/batch/service/RetryItemProcessor.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.baeldung.batch.service;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.util.EntityUtils;\n+import org.baeldung.batch.model.Transaction;\n+import org.codehaus.jettison.json.JSONException;\n+import org.codehaus.jettison.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.batch.item.ItemProcessor;\n+\n+import java.io.IOException;\n+\n+public class RetryItemProcessor implements ItemProcessor<Transaction, Transaction> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RetryItemProcessor.class);\n+\n+    private CloseableHttpClient client;\n+\n+    public RetryItemProcessor() {\n+        final RequestConfig config = RequestConfig.custom().setConnectTimeout(2 * 1000).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb246b0be3331c31c03d548df164bb4a74a1704"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2ODA1Mg==", "bodyText": "No need for System.out here.", "url": "https://github.com/eugenp/tutorials/pull/8690#discussion_r377368052", "createdAt": "2020-02-10T22:58:50Z", "author": {"login": "ashleyfrieze"}, "path": "spring-batch/src/main/java/org/baeldung/batch/service/RetryItemProcessor.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.baeldung.batch.service;\n+\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.util.EntityUtils;\n+import org.baeldung.batch.model.Transaction;\n+import org.codehaus.jettison.json.JSONException;\n+import org.codehaus.jettison.json.JSONObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.batch.item.ItemProcessor;\n+\n+import java.io.IOException;\n+\n+public class RetryItemProcessor implements ItemProcessor<Transaction, Transaction> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RetryItemProcessor.class);\n+\n+    private CloseableHttpClient client;\n+\n+    public RetryItemProcessor() {\n+        final RequestConfig config = RequestConfig.custom().setConnectTimeout(2 * 1000).build();\n+        client = HttpClientBuilder.create().setDefaultRequestConfig(config).build();\n+    }\n+\n+    @Override\n+    public Transaction process(Transaction transaction) throws IOException, JSONException {\n+        LOGGER.info(\"Attempting to process user with id={}\", transaction.getUserId());\n+        System.out.println(\"Attempting to process user with id=\" + transaction.getUserId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb246b0be3331c31c03d548df164bb4a74a1704"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2ODUxOQ==", "bodyText": "Let's move this to after the @Test methods. The tests come first usually in a test class.", "url": "https://github.com/eugenp/tutorials/pull/8690#discussion_r377368519", "createdAt": "2020-02-10T23:00:03Z", "author": {"login": "ashleyfrieze"}, "path": "spring-batch/src/test/java/org/baeldung/batch/SpringBatchRetryIntegrationTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.baeldung.batch;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.conn.ConnectTimeoutException;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.baeldung.batch.service.RetryItemProcessor;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.batch.core.ExitStatus;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobInstance;\n+import org.springframework.batch.core.JobParameters;\n+import org.springframework.batch.core.JobParametersBuilder;\n+import org.springframework.batch.test.AssertFile;\n+import org.springframework.batch.test.JobLauncherTestUtils;\n+import org.springframework.batch.test.context.SpringBatchTest;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.core.io.FileSystemResource;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.TestExecutionListeners;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;\n+import org.springframework.test.context.support.DirtiesContextTestExecutionListener;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBatchTest\n+@EnableAutoConfiguration\n+@ContextConfiguration(classes = { SpringBatchRetryConfig.class })\n+@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class, DirtiesContextTestExecutionListener.class })\n+@DirtiesContext(classMode = ClassMode.AFTER_CLASS)\n+public class SpringBatchRetryIntegrationTest {\n+\n+    private static final String TEST_OUTPUT = \"xml/retryOutput.xml\";\n+\n+    private static final String EXPECTED_OUTPUT = \"src/test/resources/output/batchRetry/retryOutput.xml\";\n+\n+    @Autowired\n+    private JobLauncherTestUtils jobLauncherTestUtils;\n+\n+    @Mock\n+    private CloseableHttpClient httpClient;\n+\n+    @Mock\n+    private CloseableHttpResponse httpResponse;\n+\n+    @InjectMocks\n+    @Autowired\n+    private RetryItemProcessor retryItemProcessor;\n+\n+    @Before\n+    public void setup() {\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    private JobParameters defaultJobParameters() {\n+        JobParametersBuilder paramsBuilder = new JobParametersBuilder();\n+        paramsBuilder.addString(\"jobID\", String.valueOf(System.currentTimeMillis()));\n+        return paramsBuilder.toJobParameters();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb246b0be3331c31c03d548df164bb4a74a1704"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2OTYwOA==", "bodyText": "This is a bit messy... we're injecting mocks AND also autowiring. Hard to follow. Does this version of spring support @MockBean for the CloseableHttpClient?\nThe problem you've got, though, is that the RetryItemProcessor creates its own http client. Really, the client should be injected via the constructor and should be defined in the @Configuration beans class. That would make this easier to follow.\nThe above does work. The @Autowired bean gets created by spring, injected into this class, and then line 66 does some hacking into the object to force the mocks in. It's essentially an anti-pattern for using these things together, especially as SpringTest supports mockito.\nCan we tidy this up?", "url": "https://github.com/eugenp/tutorials/pull/8690#discussion_r377369608", "createdAt": "2020-02-10T23:02:52Z", "author": {"login": "ashleyfrieze"}, "path": "spring-batch/src/test/java/org/baeldung/batch/SpringBatchRetryIntegrationTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.baeldung.batch;\n+\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.conn.ConnectTimeoutException;\n+import org.apache.http.entity.StringEntity;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.baeldung.batch.service.RetryItemProcessor;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.batch.core.ExitStatus;\n+import org.springframework.batch.core.JobExecution;\n+import org.springframework.batch.core.JobInstance;\n+import org.springframework.batch.core.JobParameters;\n+import org.springframework.batch.core.JobParametersBuilder;\n+import org.springframework.batch.test.AssertFile;\n+import org.springframework.batch.test.JobLauncherTestUtils;\n+import org.springframework.batch.test.context.SpringBatchTest;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.core.io.FileSystemResource;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.TestExecutionListeners;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;\n+import org.springframework.test.context.support.DirtiesContextTestExecutionListener;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBatchTest\n+@EnableAutoConfiguration\n+@ContextConfiguration(classes = { SpringBatchRetryConfig.class })\n+@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class, DirtiesContextTestExecutionListener.class })\n+@DirtiesContext(classMode = ClassMode.AFTER_CLASS)\n+public class SpringBatchRetryIntegrationTest {\n+\n+    private static final String TEST_OUTPUT = \"xml/retryOutput.xml\";\n+\n+    private static final String EXPECTED_OUTPUT = \"src/test/resources/output/batchRetry/retryOutput.xml\";\n+\n+    @Autowired\n+    private JobLauncherTestUtils jobLauncherTestUtils;\n+\n+    @Mock\n+    private CloseableHttpClient httpClient;\n+\n+    @Mock\n+    private CloseableHttpResponse httpResponse;\n+\n+    @InjectMocks\n+    @Autowired\n+    private RetryItemProcessor retryItemProcessor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cb246b0be3331c31c03d548df164bb4a74a1704"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a31ae0c79cf0824313f22d64103707ad6fd2297", "author": {"user": {"login": "shubhi22", "name": "Shubhra Srivastava"}}, "url": "https://github.com/eugenp/tutorials/commit/4a31ae0c79cf0824313f22d64103707ad6fd2297", "committedDate": "2020-02-11T01:54:45Z", "message": "Review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2d812748a5c863513412d11d321911cbaccd296", "author": {"user": {"login": "shubhi22", "name": "Shubhra Srivastava"}}, "url": "https://github.com/eugenp/tutorials/commit/d2d812748a5c863513412d11d321911cbaccd296", "committedDate": "2020-02-11T01:56:44Z", "message": "Some refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05a7cbfaf7f91c0e51106b86bc06b6a42905c1c4", "author": {"user": {"login": "shubhi22", "name": "Shubhra Srivastava"}}, "url": "https://github.com/eugenp/tutorials/commit/05a7cbfaf7f91c0e51106b86bc06b6a42905c1c4", "committedDate": "2020-02-11T01:58:56Z", "message": "Refactoring RetryItemProcessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07962cd553439c4b494a8fe7932cc3e0686353bd", "author": {"user": {"login": "shubhi22", "name": "Shubhra Srivastava"}}, "url": "https://github.com/eugenp/tutorials/commit/07962cd553439c4b494a8fe7932cc3e0686353bd", "committedDate": "2020-02-11T02:01:32Z", "message": "Minor refactoring in test class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d41c6d967641472d873cbc39ec5786dcb728c6f4", "author": {"user": {"login": "shubhi22", "name": "Shubhra Srivastava"}}, "url": "https://github.com/eugenp/tutorials/commit/d41c6d967641472d873cbc39ec5786dcb728c6f4", "committedDate": "2020-02-11T04:16:58Z", "message": "BAEL-3298 Some more refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c75b57d9fa94507118610d33fb34e5b8bbefd13a", "author": {"user": {"login": "shubhi22", "name": "Shubhra Srivastava"}}, "url": "https://github.com/eugenp/tutorials/commit/c75b57d9fa94507118610d33fb34e5b8bbefd13a", "committedDate": "2020-02-11T04:46:20Z", "message": "BAEL-3298 Using @MockBean"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcd70e39738358894762f7e8175e930e891268a8", "author": {"user": {"login": "shubhi22", "name": "Shubhra Srivastava"}}, "url": "https://github.com/eugenp/tutorials/commit/dcd70e39738358894762f7e8175e930e891268a8", "committedDate": "2020-02-11T04:48:39Z", "message": "BAEL-3298 minor update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0992a4c1f97e731847beef995a2952b60ae3239d", "author": {"user": {"login": "shubhi22", "name": "Shubhra Srivastava"}}, "url": "https://github.com/eugenp/tutorials/commit/0992a4c1f97e731847beef995a2952b60ae3239d", "committedDate": "2020-02-11T05:16:23Z", "message": "BAEL-3298 Updating names of testcases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce17f36a5e93298f67a93f398ce2769875559fac", "author": {"user": {"login": "shubhi22", "name": "Shubhra Srivastava"}}, "url": "https://github.com/eugenp/tutorials/commit/ce17f36a5e93298f67a93f398ce2769875559fac", "committedDate": "2020-02-19T05:30:39Z", "message": "updating id to 9999"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2d8fb0a3cda2feeea221b9c30f81b1074acf7f1", "author": {"user": {"login": "shubhi22", "name": "Shubhra Srivastava"}}, "url": "https://github.com/eugenp/tutorials/commit/c2d8fb0a3cda2feeea221b9c30f81b1074acf7f1", "committedDate": "2020-02-19T05:31:34Z", "message": "Updating id to 9999"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df4dafc578f950e571bdac39fd9928256f5d0d5d", "author": {"user": {"login": "shubhi22", "name": "Shubhra Srivastava"}}, "url": "https://github.com/eugenp/tutorials/commit/df4dafc578f950e571bdac39fd9928256f5d0d5d", "committedDate": "2020-02-19T05:32:31Z", "message": "Updating id to 9999"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4198, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}