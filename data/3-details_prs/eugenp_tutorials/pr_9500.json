{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MTkzMTE4", "number": 9500, "title": "BAEL-4145 Circular Buffer", "bodyText": "http://jira.baeldung.com/browse/BAEL-4145", "createdAt": "2020-06-14T19:49:18Z", "url": "https://github.com/eugenp/tutorials/pull/9500", "merged": true, "mergeCommit": {"oid": "0d6cf8abf6b9e6f23809c483b79c5cf31ccf8bd7"}, "closed": true, "closedAt": "2020-06-26T15:09:23Z", "author": {"login": "priyank-sriv"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrRfZFAH2gAyNDM0MTkzMTE4OmYzMDE5MjI4MDYxMDZiZTY4NjgyYzUxMDE2ZDVjM2E5MjAzNTNmYmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABctOpXwAH2gAyNDM0MTkzMTE4OmQ2M2MyMDA0Zjg0MjIyMGIxNmVlZmYxN2EyZmQwMGZiMDg4OTVkZTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f301922806106be68682c51016d5c3a920353fbb", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/f301922806106be68682c51016d5c3a920353fbb", "committedDate": "2020-06-14T19:47:30Z", "message": "circular buffer implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cefc5dddb65832bf74c40acd7ffb609e593af85f", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/cefc5dddb65832bf74c40acd7ffb609e593af85f", "committedDate": "2020-06-14T19:48:22Z", "message": "circular buffer test init"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "780bdd1c7114522187324c581ad1ae1a9b9343cd", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/780bdd1c7114522187324c581ad1ae1a9b9343cd", "committedDate": "2020-06-15T13:14:01Z", "message": "write and read sequence volatile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cd88d02fbf871041b4239c413628a22c9c1d697", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/2cd88d02fbf871041b4239c413628a22c9c1d697", "committedDate": "2020-06-15T13:14:24Z", "message": "simple producer consumer test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f3b4ae6df54253208fc4f72cbd139ab77392130", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/8f3b4ae6df54253208fc4f72cbd139ab77392130", "committedDate": "2020-06-15T13:57:30Z", "message": "unit test for empty and full buffer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1331962bcf75fc9d70f18a826dabf91e70c5c83f", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/1331962bcf75fc9d70f18a826dabf91e70c5c83f", "committedDate": "2020-06-17T20:55:41Z", "message": "polishing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNDA5OTg2", "url": "https://github.com/eugenp/tutorials/pull/9500#pullrequestreview-433409986", "createdAt": "2020-06-18T15:39:13Z", "commit": {"oid": "1331962bcf75fc9d70f18a826dabf91e70c5c83f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTozOToxM1rOGl1HaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTo0MzozOFrOGl1S8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMDc0NA==", "bodyText": "writeSequence++? :)", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r442320744", "createdAt": "2020-06-18T15:39:13Z", "author": {"login": "rpvilao"}, "path": "data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.baeldung.circularbuffer;\n+\n+public class CircularBuffer<E> {\n+\n+    private static final int DEFAULT_CAPACITY = 8;\n+\n+    private final int capacity;\n+    private final E[] data;\n+    private volatile int writeSequence, readSequence;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public CircularBuffer(int capacity) {\n+\n+        this.capacity = (capacity < 1) ? DEFAULT_CAPACITY : capacity;\n+        this.data = (E[]) new Object[capacity];\n+\n+        this.readSequence = 0;\n+        this.writeSequence = -1;\n+    }\n+\n+    public boolean offer(E element) {\n+\n+        if (isNotFull()) {\n+\n+            int nextWriteSeq = writeSequence + 1;\n+            data[nextWriteSeq % capacity] = element;\n+\n+            writeSequence += 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1331962bcf75fc9d70f18a826dabf91e70c5c83f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMTAxNQ==", "bodyText": "same", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r442321015", "createdAt": "2020-06-18T15:39:41Z", "author": {"login": "rpvilao"}, "path": "data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.baeldung.circularbuffer;\n+\n+public class CircularBuffer<E> {\n+\n+    private static final int DEFAULT_CAPACITY = 8;\n+\n+    private final int capacity;\n+    private final E[] data;\n+    private volatile int writeSequence, readSequence;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public CircularBuffer(int capacity) {\n+\n+        this.capacity = (capacity < 1) ? DEFAULT_CAPACITY : capacity;\n+        this.data = (E[]) new Object[capacity];\n+\n+        this.readSequence = 0;\n+        this.writeSequence = -1;\n+    }\n+\n+    public boolean offer(E element) {\n+\n+        if (isNotFull()) {\n+\n+            int nextWriteSeq = writeSequence + 1;\n+            data[nextWriteSeq % capacity] = element;\n+\n+            writeSequence += 1;\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    public E poll() {\n+\n+        if (isNotEmpty()) {\n+\n+            E nextValue = data[readSequence % capacity];\n+            readSequence += 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1331962bcf75fc9d70f18a826dabf91e70c5c83f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMTgyOA==", "bodyText": "let's use the concurrent api (Executors...)", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r442321828", "createdAt": "2020-06-18T15:40:58Z", "author": {"login": "rpvilao"}, "path": "data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.circularbuffer;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+\n+import java.util.concurrent.locks.LockSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class ProducerConsumerLiveTest {\n+\n+    private final String[] shapes = { \"Circle\", \"Triangle\", \"Rectangle\", \"Square\", \"Rhombus\", \"Trapezoid\", \"Pentagon\", \"Pentagram\", \"Hexagon\", \"Hexagram\" };\n+\n+    @Test\n+    public void givenACircularBuffer_whenInterleavingProducerConsumer_thenElementsMatch() throws InterruptedException {\n+        CircularBuffer<String> buffer = new CircularBuffer<String>(shapes.length);\n+        String[] consumedShapes = new String[shapes.length];\n+\n+        Thread producer = new Thread(new Producer(shapes, buffer));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1331962bcf75fc9d70f18a826dabf91e70c5c83f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMzQ3NA==", "bodyText": "this consumer seems to be generic, maybe we get a better var name and not bound to the example", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r442323474", "createdAt": "2020-06-18T15:43:17Z", "author": {"login": "rpvilao"}, "path": "data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.circularbuffer;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+\n+import java.util.concurrent.locks.LockSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class ProducerConsumerLiveTest {\n+\n+    private final String[] shapes = { \"Circle\", \"Triangle\", \"Rectangle\", \"Square\", \"Rhombus\", \"Trapezoid\", \"Pentagon\", \"Pentagram\", \"Hexagon\", \"Hexagram\" };\n+\n+    @Test\n+    public void givenACircularBuffer_whenInterleavingProducerConsumer_thenElementsMatch() throws InterruptedException {\n+        CircularBuffer<String> buffer = new CircularBuffer<String>(shapes.length);\n+        String[] consumedShapes = new String[shapes.length];\n+\n+        Thread producer = new Thread(new Producer(shapes, buffer));\n+        Thread consumer = new Thread(new Consumer(consumedShapes, buffer));\n+\n+        producer.start();\n+        consumer.start();\n+\n+        producer.join();\n+        consumer.join();\n+\n+        assertArrayEquals(shapes, consumedShapes);\n+    }\n+\n+    static class Producer implements Runnable {\n+\n+        private String[] producerShapes;\n+        private CircularBuffer<String> buffer;\n+\n+        public Producer(String[] producerShapes, CircularBuffer<String> buffer) {\n+            this.producerShapes = producerShapes;\n+            this.buffer = buffer;\n+        }\n+\n+        @Override\n+        public void run() {\n+\n+            for (int i = 0; i < producerShapes.length;) {\n+                if (buffer.offer(producerShapes[i])) {\n+                    System.out.println(\"Produced: \" + producerShapes[i]);\n+                    i++;\n+                    LockSupport.parkNanos(5);\n+                }\n+            }\n+        }\n+    }\n+\n+    static class Consumer implements Runnable {\n+\n+        private CircularBuffer<String> buffer;\n+        private String[] consumedShapes;\n+\n+        public Consumer(String[] consumedShapes, CircularBuffer<String> buffer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1331962bcf75fc9d70f18a826dabf91e70c5c83f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMzY5OQ==", "bodyText": "same issue as \"consumer\"", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r442323699", "createdAt": "2020-06-18T15:43:38Z", "author": {"login": "rpvilao"}, "path": "data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.circularbuffer;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+\n+import java.util.concurrent.locks.LockSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class ProducerConsumerLiveTest {\n+\n+    private final String[] shapes = { \"Circle\", \"Triangle\", \"Rectangle\", \"Square\", \"Rhombus\", \"Trapezoid\", \"Pentagon\", \"Pentagram\", \"Hexagon\", \"Hexagram\" };\n+\n+    @Test\n+    public void givenACircularBuffer_whenInterleavingProducerConsumer_thenElementsMatch() throws InterruptedException {\n+        CircularBuffer<String> buffer = new CircularBuffer<String>(shapes.length);\n+        String[] consumedShapes = new String[shapes.length];\n+\n+        Thread producer = new Thread(new Producer(shapes, buffer));\n+        Thread consumer = new Thread(new Consumer(consumedShapes, buffer));\n+\n+        producer.start();\n+        consumer.start();\n+\n+        producer.join();\n+        consumer.join();\n+\n+        assertArrayEquals(shapes, consumedShapes);\n+    }\n+\n+    static class Producer implements Runnable {\n+\n+        private String[] producerShapes;\n+        private CircularBuffer<String> buffer;\n+\n+        public Producer(String[] producerShapes, CircularBuffer<String> buffer) {\n+            this.producerShapes = producerShapes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1331962bcf75fc9d70f18a826dabf91e70c5c83f"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d63c2004f842220b16eeff17a2fd00fb08895de7", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/d63c2004f842220b16eeff17a2fd00fb08895de7", "committedDate": "2020-06-20T21:36:32Z", "message": "review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4382, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}