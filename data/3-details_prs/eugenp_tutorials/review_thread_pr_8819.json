{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDE0MjY4", "number": 8819, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjoyMjoxMlrODr2xVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjoyMjo1NlrODr2yJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzEyNzI3OnYy", "diffSide": "RIGHT", "path": "spring-cloud/spring-cloud-circuit-breaker/src/main/java/com/baeldung/circuitbreaker/AlbumService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjoyMjoxMlrOF8cofQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjoyMjoxMlrOF8cofQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyNzk5Nw==", "bodyText": "Are we keeping the commented out line?", "url": "https://github.com/eugenp/tutorials/pull/8819#discussion_r398927997", "createdAt": "2020-03-26T22:22:12Z", "author": {"login": "ashleyfrieze"}, "path": "spring-cloud/spring-cloud-circuit-breaker/src/main/java/com/baeldung/circuitbreaker/AlbumService.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.baeldung.circuitbreaker;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.client.circuitbreaker.CircuitBreaker;\n+import org.springframework.cloud.client.circuitbreaker.CircuitBreakerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n+@Service\n+public class AlbumService {\n+\n+    @Autowired\n+    private CircuitBreakerFactory circuitBreakerFactory;\n+\n+    private RestTemplate restTemplate = new RestTemplate();\n+\n+    public String getAlbumList() {\n+        CircuitBreaker circuitBreaker = circuitBreakerFactory.create(\"circuitbreaker\");\n+        String url = \"https://jsonplaceholder.typicode.com/albums\";\n+//        String url = \"http://localhost:1234/not-real\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0237ce6c6220de896c358b1c47724e774b0ccb5"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzEyOTMyOnYy", "diffSide": "RIGHT", "path": "spring-cloud/spring-cloud-circuit-breaker/src/main/java/com/baeldung/circuitbreaker/AlbumService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjoyMjo1NlrOF8cprg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjoyMjo1NlrOF8cprg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkyODMwMg==", "bodyText": "Should we log this instead of printStackTrace?", "url": "https://github.com/eugenp/tutorials/pull/8819#discussion_r398928302", "createdAt": "2020-03-26T22:22:56Z", "author": {"login": "ashleyfrieze"}, "path": "spring-cloud/spring-cloud-circuit-breaker/src/main/java/com/baeldung/circuitbreaker/AlbumService.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.baeldung.circuitbreaker;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.client.circuitbreaker.CircuitBreaker;\n+import org.springframework.cloud.client.circuitbreaker.CircuitBreakerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.client.RestTemplate;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n+@Service\n+public class AlbumService {\n+\n+    @Autowired\n+    private CircuitBreakerFactory circuitBreakerFactory;\n+\n+    private RestTemplate restTemplate = new RestTemplate();\n+\n+    public String getAlbumList() {\n+        CircuitBreaker circuitBreaker = circuitBreakerFactory.create(\"circuitbreaker\");\n+        String url = \"https://jsonplaceholder.typicode.com/albums\";\n+//        String url = \"http://localhost:1234/not-real\";\n+\n+        return circuitBreaker.run(() -> restTemplate.getForObject(url, String.class), throwable -> getDefaultAlbumList());\n+    }\n+\n+    private String getDefaultAlbumList() {\n+        try {\n+            return new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(\"fallback-album-list.json\").toURI())));\n+        } catch (Exception e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0237ce6c6220de896c358b1c47724e774b0ccb5"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4076, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}