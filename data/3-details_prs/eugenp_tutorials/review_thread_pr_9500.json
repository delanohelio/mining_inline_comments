{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MTkzMTE4", "number": 9500, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTozOToxM1rOEGzoyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTo0MzozOFrOEGzv1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTcyOTM5OnYy", "diffSide": "RIGHT", "path": "data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTozOToxM1rOGl1HaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTozMDozMVrOGmoa5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMDc0NA==", "bodyText": "writeSequence++? :)", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r442320744", "createdAt": "2020-06-18T15:39:13Z", "author": {"login": "rpvilao"}, "path": "data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.baeldung.circularbuffer;\n+\n+public class CircularBuffer<E> {\n+\n+    private static final int DEFAULT_CAPACITY = 8;\n+\n+    private final int capacity;\n+    private final E[] data;\n+    private volatile int writeSequence, readSequence;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public CircularBuffer(int capacity) {\n+\n+        this.capacity = (capacity < 1) ? DEFAULT_CAPACITY : capacity;\n+        this.data = (E[]) new Object[capacity];\n+\n+        this.readSequence = 0;\n+        this.writeSequence = -1;\n+    }\n+\n+    public boolean offer(E element) {\n+\n+        if (isNotFull()) {\n+\n+            int nextWriteSeq = writeSequence + 1;\n+            data[nextWriteSeq % capacity] = element;\n+\n+            writeSequence += 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1331962bcf75fc9d70f18a826dabf91e70c5c83f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTMxNg==", "bodyText": "done", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r443161316", "createdAt": "2020-06-20T21:30:31Z", "author": {"login": "priyank-sriv"}, "path": "data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.baeldung.circularbuffer;\n+\n+public class CircularBuffer<E> {\n+\n+    private static final int DEFAULT_CAPACITY = 8;\n+\n+    private final int capacity;\n+    private final E[] data;\n+    private volatile int writeSequence, readSequence;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public CircularBuffer(int capacity) {\n+\n+        this.capacity = (capacity < 1) ? DEFAULT_CAPACITY : capacity;\n+        this.data = (E[]) new Object[capacity];\n+\n+        this.readSequence = 0;\n+        this.writeSequence = -1;\n+    }\n+\n+    public boolean offer(E element) {\n+\n+        if (isNotFull()) {\n+\n+            int nextWriteSeq = writeSequence + 1;\n+            data[nextWriteSeq % capacity] = element;\n+\n+            writeSequence += 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMDc0NA=="}, "originalCommit": {"oid": "1331962bcf75fc9d70f18a826dabf91e70c5c83f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTczMTAzOnYy", "diffSide": "RIGHT", "path": "data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTozOTo0MVrOGl1Idw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTozMDoyM1rOGmoa3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMTAxNQ==", "bodyText": "same", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r442321015", "createdAt": "2020-06-18T15:39:41Z", "author": {"login": "rpvilao"}, "path": "data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.baeldung.circularbuffer;\n+\n+public class CircularBuffer<E> {\n+\n+    private static final int DEFAULT_CAPACITY = 8;\n+\n+    private final int capacity;\n+    private final E[] data;\n+    private volatile int writeSequence, readSequence;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public CircularBuffer(int capacity) {\n+\n+        this.capacity = (capacity < 1) ? DEFAULT_CAPACITY : capacity;\n+        this.data = (E[]) new Object[capacity];\n+\n+        this.readSequence = 0;\n+        this.writeSequence = -1;\n+    }\n+\n+    public boolean offer(E element) {\n+\n+        if (isNotFull()) {\n+\n+            int nextWriteSeq = writeSequence + 1;\n+            data[nextWriteSeq % capacity] = element;\n+\n+            writeSequence += 1;\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    public E poll() {\n+\n+        if (isNotEmpty()) {\n+\n+            E nextValue = data[readSequence % capacity];\n+            readSequence += 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1331962bcf75fc9d70f18a826dabf91e70c5c83f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTMxMA==", "bodyText": "done", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r443161310", "createdAt": "2020-06-20T21:30:23Z", "author": {"login": "priyank-sriv"}, "path": "data-structures/src/main/java/com/baeldung/circularbuffer/CircularBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.baeldung.circularbuffer;\n+\n+public class CircularBuffer<E> {\n+\n+    private static final int DEFAULT_CAPACITY = 8;\n+\n+    private final int capacity;\n+    private final E[] data;\n+    private volatile int writeSequence, readSequence;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public CircularBuffer(int capacity) {\n+\n+        this.capacity = (capacity < 1) ? DEFAULT_CAPACITY : capacity;\n+        this.data = (E[]) new Object[capacity];\n+\n+        this.readSequence = 0;\n+        this.writeSequence = -1;\n+    }\n+\n+    public boolean offer(E element) {\n+\n+        if (isNotFull()) {\n+\n+            int nextWriteSeq = writeSequence + 1;\n+            data[nextWriteSeq % capacity] = element;\n+\n+            writeSequence += 1;\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    public E poll() {\n+\n+        if (isNotEmpty()) {\n+\n+            E nextValue = data[readSequence % capacity];\n+            readSequence += 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMTAxNQ=="}, "originalCommit": {"oid": "1331962bcf75fc9d70f18a826dabf91e70c5c83f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTczNjA5OnYy", "diffSide": "RIGHT", "path": "data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTo0MDo1OFrOGl1LpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTozMDozOVrOGmoa7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMTgyOA==", "bodyText": "let's use the concurrent api (Executors...)", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r442321828", "createdAt": "2020-06-18T15:40:58Z", "author": {"login": "rpvilao"}, "path": "data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.circularbuffer;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+\n+import java.util.concurrent.locks.LockSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class ProducerConsumerLiveTest {\n+\n+    private final String[] shapes = { \"Circle\", \"Triangle\", \"Rectangle\", \"Square\", \"Rhombus\", \"Trapezoid\", \"Pentagon\", \"Pentagram\", \"Hexagon\", \"Hexagram\" };\n+\n+    @Test\n+    public void givenACircularBuffer_whenInterleavingProducerConsumer_thenElementsMatch() throws InterruptedException {\n+        CircularBuffer<String> buffer = new CircularBuffer<String>(shapes.length);\n+        String[] consumedShapes = new String[shapes.length];\n+\n+        Thread producer = new Thread(new Producer(shapes, buffer));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1331962bcf75fc9d70f18a826dabf91e70c5c83f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTMyNg==", "bodyText": "changed", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r443161326", "createdAt": "2020-06-20T21:30:39Z", "author": {"login": "priyank-sriv"}, "path": "data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.circularbuffer;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+\n+import java.util.concurrent.locks.LockSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class ProducerConsumerLiveTest {\n+\n+    private final String[] shapes = { \"Circle\", \"Triangle\", \"Rectangle\", \"Square\", \"Rhombus\", \"Trapezoid\", \"Pentagon\", \"Pentagram\", \"Hexagon\", \"Hexagram\" };\n+\n+    @Test\n+    public void givenACircularBuffer_whenInterleavingProducerConsumer_thenElementsMatch() throws InterruptedException {\n+        CircularBuffer<String> buffer = new CircularBuffer<String>(shapes.length);\n+        String[] consumedShapes = new String[shapes.length];\n+\n+        Thread producer = new Thread(new Producer(shapes, buffer));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMTgyOA=="}, "originalCommit": {"oid": "1331962bcf75fc9d70f18a826dabf91e70c5c83f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTc0NjIxOnYy", "diffSide": "RIGHT", "path": "data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTo0MzoxN1rOGl1SEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTozMzo0MFrOGmoboA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMzQ3NA==", "bodyText": "this consumer seems to be generic, maybe we get a better var name and not bound to the example", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r442323474", "createdAt": "2020-06-18T15:43:17Z", "author": {"login": "rpvilao"}, "path": "data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.circularbuffer;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+\n+import java.util.concurrent.locks.LockSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class ProducerConsumerLiveTest {\n+\n+    private final String[] shapes = { \"Circle\", \"Triangle\", \"Rectangle\", \"Square\", \"Rhombus\", \"Trapezoid\", \"Pentagon\", \"Pentagram\", \"Hexagon\", \"Hexagram\" };\n+\n+    @Test\n+    public void givenACircularBuffer_whenInterleavingProducerConsumer_thenElementsMatch() throws InterruptedException {\n+        CircularBuffer<String> buffer = new CircularBuffer<String>(shapes.length);\n+        String[] consumedShapes = new String[shapes.length];\n+\n+        Thread producer = new Thread(new Producer(shapes, buffer));\n+        Thread consumer = new Thread(new Consumer(consumedShapes, buffer));\n+\n+        producer.start();\n+        consumer.start();\n+\n+        producer.join();\n+        consumer.join();\n+\n+        assertArrayEquals(shapes, consumedShapes);\n+    }\n+\n+    static class Producer implements Runnable {\n+\n+        private String[] producerShapes;\n+        private CircularBuffer<String> buffer;\n+\n+        public Producer(String[] producerShapes, CircularBuffer<String> buffer) {\n+            this.producerShapes = producerShapes;\n+            this.buffer = buffer;\n+        }\n+\n+        @Override\n+        public void run() {\n+\n+            for (int i = 0; i < producerShapes.length;) {\n+                if (buffer.offer(producerShapes[i])) {\n+                    System.out.println(\"Produced: \" + producerShapes[i]);\n+                    i++;\n+                    LockSupport.parkNanos(5);\n+                }\n+            }\n+        }\n+    }\n+\n+    static class Consumer implements Runnable {\n+\n+        private CircularBuffer<String> buffer;\n+        private String[] consumedShapes;\n+\n+        public Consumer(String[] consumedShapes, CircularBuffer<String> buffer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1331962bcf75fc9d70f18a826dabf91e70c5c83f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTUwNA==", "bodyText": "done", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r443161504", "createdAt": "2020-06-20T21:33:40Z", "author": {"login": "priyank-sriv"}, "path": "data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.circularbuffer;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+\n+import java.util.concurrent.locks.LockSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class ProducerConsumerLiveTest {\n+\n+    private final String[] shapes = { \"Circle\", \"Triangle\", \"Rectangle\", \"Square\", \"Rhombus\", \"Trapezoid\", \"Pentagon\", \"Pentagram\", \"Hexagon\", \"Hexagram\" };\n+\n+    @Test\n+    public void givenACircularBuffer_whenInterleavingProducerConsumer_thenElementsMatch() throws InterruptedException {\n+        CircularBuffer<String> buffer = new CircularBuffer<String>(shapes.length);\n+        String[] consumedShapes = new String[shapes.length];\n+\n+        Thread producer = new Thread(new Producer(shapes, buffer));\n+        Thread consumer = new Thread(new Consumer(consumedShapes, buffer));\n+\n+        producer.start();\n+        consumer.start();\n+\n+        producer.join();\n+        consumer.join();\n+\n+        assertArrayEquals(shapes, consumedShapes);\n+    }\n+\n+    static class Producer implements Runnable {\n+\n+        private String[] producerShapes;\n+        private CircularBuffer<String> buffer;\n+\n+        public Producer(String[] producerShapes, CircularBuffer<String> buffer) {\n+            this.producerShapes = producerShapes;\n+            this.buffer = buffer;\n+        }\n+\n+        @Override\n+        public void run() {\n+\n+            for (int i = 0; i < producerShapes.length;) {\n+                if (buffer.offer(producerShapes[i])) {\n+                    System.out.println(\"Produced: \" + producerShapes[i]);\n+                    i++;\n+                    LockSupport.parkNanos(5);\n+                }\n+            }\n+        }\n+    }\n+\n+    static class Consumer implements Runnable {\n+\n+        private CircularBuffer<String> buffer;\n+        private String[] consumedShapes;\n+\n+        public Consumer(String[] consumedShapes, CircularBuffer<String> buffer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMzQ3NA=="}, "originalCommit": {"oid": "1331962bcf75fc9d70f18a826dabf91e70c5c83f"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTc0NzQzOnYy", "diffSide": "RIGHT", "path": "data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTo0MzozOFrOGl1S8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTozMzo0NFrOGmobog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMzY5OQ==", "bodyText": "same issue as \"consumer\"", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r442323699", "createdAt": "2020-06-18T15:43:38Z", "author": {"login": "rpvilao"}, "path": "data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.circularbuffer;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+\n+import java.util.concurrent.locks.LockSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class ProducerConsumerLiveTest {\n+\n+    private final String[] shapes = { \"Circle\", \"Triangle\", \"Rectangle\", \"Square\", \"Rhombus\", \"Trapezoid\", \"Pentagon\", \"Pentagram\", \"Hexagon\", \"Hexagram\" };\n+\n+    @Test\n+    public void givenACircularBuffer_whenInterleavingProducerConsumer_thenElementsMatch() throws InterruptedException {\n+        CircularBuffer<String> buffer = new CircularBuffer<String>(shapes.length);\n+        String[] consumedShapes = new String[shapes.length];\n+\n+        Thread producer = new Thread(new Producer(shapes, buffer));\n+        Thread consumer = new Thread(new Consumer(consumedShapes, buffer));\n+\n+        producer.start();\n+        consumer.start();\n+\n+        producer.join();\n+        consumer.join();\n+\n+        assertArrayEquals(shapes, consumedShapes);\n+    }\n+\n+    static class Producer implements Runnable {\n+\n+        private String[] producerShapes;\n+        private CircularBuffer<String> buffer;\n+\n+        public Producer(String[] producerShapes, CircularBuffer<String> buffer) {\n+            this.producerShapes = producerShapes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1331962bcf75fc9d70f18a826dabf91e70c5c83f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTUwNg==", "bodyText": "done", "url": "https://github.com/eugenp/tutorials/pull/9500#discussion_r443161506", "createdAt": "2020-06-20T21:33:44Z", "author": {"login": "priyank-sriv"}, "path": "data-structures/src/test/java/com/baeldung/circularbuffer/ProducerConsumerLiveTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.circularbuffer;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+\n+import java.util.concurrent.locks.LockSupport;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class ProducerConsumerLiveTest {\n+\n+    private final String[] shapes = { \"Circle\", \"Triangle\", \"Rectangle\", \"Square\", \"Rhombus\", \"Trapezoid\", \"Pentagon\", \"Pentagram\", \"Hexagon\", \"Hexagram\" };\n+\n+    @Test\n+    public void givenACircularBuffer_whenInterleavingProducerConsumer_thenElementsMatch() throws InterruptedException {\n+        CircularBuffer<String> buffer = new CircularBuffer<String>(shapes.length);\n+        String[] consumedShapes = new String[shapes.length];\n+\n+        Thread producer = new Thread(new Producer(shapes, buffer));\n+        Thread consumer = new Thread(new Consumer(consumedShapes, buffer));\n+\n+        producer.start();\n+        consumer.start();\n+\n+        producer.join();\n+        consumer.join();\n+\n+        assertArrayEquals(shapes, consumedShapes);\n+    }\n+\n+    static class Producer implements Runnable {\n+\n+        private String[] producerShapes;\n+        private CircularBuffer<String> buffer;\n+\n+        public Producer(String[] producerShapes, CircularBuffer<String> buffer) {\n+            this.producerShapes = producerShapes;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMzY5OQ=="}, "originalCommit": {"oid": "1331962bcf75fc9d70f18a826dabf91e70c5c83f"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4336, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}