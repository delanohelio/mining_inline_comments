{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1ODYyOTM0", "number": 8843, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjowNDo1OVrODoIAYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjowNjowN1rODoIAuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAwODAyOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-io-2/src/test/java/com/baeldung/blockingnonblocking/NonBlockingClientUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjowNDo1OVrOF2fwug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMDoyNjozMlrOF2hE6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4NzgwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void givenJavaNIOSocketChannel_whenReadingAndWriting_thenUseBuffers() throws IOException {\n          \n          \n            \n                public void givenJavaNIOSocketChannel_whenReadingAndWritingWithBuffers_thenSuccess() throws IOException {", "url": "https://github.com/eugenp/tutorials/pull/8843#discussion_r392687802", "createdAt": "2020-03-15T16:04:59Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-io-2/src/test/java/com/baeldung/blockingnonblocking/NonBlockingClientUnitTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.baeldung.blockingnonblocking;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.channels.SocketChannel;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.*;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n+import static org.junit.Assert.assertTrue;\n+\n+public class NonBlockingClientUnitTest {\n+    private String REQUESTED_RESOURCE = \"/test.json\";\n+\n+    @Rule public WireMockRule wireMockRule = new WireMockRule(wireMockConfig().dynamicPort());\n+\n+    @Before\n+    public void setup() {\n+        stubFor(get(urlEqualTo(REQUESTED_RESOURCE)).willReturn(aResponse()\n+          .withStatus(200)\n+          .withBody(\"{ \\\"response\\\" : \\\"It worked!\\\" }\")));\n+    }\n+\n+    @Test\n+    public void givenJavaNIOSocketChannel_whenReadingAndWriting_thenUseBuffers() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a795787640796c98f5f2c87f290b431cce8070e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwOTM1NQ==", "bodyText": "Resolved this in the latest commit", "url": "https://github.com/eugenp/tutorials/pull/8843#discussion_r392709355", "createdAt": "2020-03-15T20:26:32Z", "author": {"login": "rojyates"}, "path": "core-java-modules/core-java-io-2/src/test/java/com/baeldung/blockingnonblocking/NonBlockingClientUnitTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.baeldung.blockingnonblocking;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.channels.SocketChannel;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.*;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n+import static org.junit.Assert.assertTrue;\n+\n+public class NonBlockingClientUnitTest {\n+    private String REQUESTED_RESOURCE = \"/test.json\";\n+\n+    @Rule public WireMockRule wireMockRule = new WireMockRule(wireMockConfig().dynamicPort());\n+\n+    @Before\n+    public void setup() {\n+        stubFor(get(urlEqualTo(REQUESTED_RESOURCE)).willReturn(aResponse()\n+          .withStatus(200)\n+          .withBody(\"{ \\\"response\\\" : \\\"It worked!\\\" }\")));\n+    }\n+\n+    @Test\n+    public void givenJavaNIOSocketChannel_whenReadingAndWriting_thenUseBuffers() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4NzgwMg=="}, "originalCommit": {"oid": "0a795787640796c98f5f2c87f290b431cce8070e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAwODIzOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-io-2/src/test/java/com/baeldung/blockingnonblocking/NonBlockingClientUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjowNToyNlrOF2fw1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMDoyNjo1MlrOF2hFCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4NzgzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void givenJavaNIO_whenReadingAndWriting_thenSmallBuffers() throws IOException {\n          \n          \n            \n                public void givenJavaNIO_whenReadingAndWritingWithSmallBuffers_thenSuccess() throws IOException {", "url": "https://github.com/eugenp/tutorials/pull/8843#discussion_r392687831", "createdAt": "2020-03-15T16:05:26Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-io-2/src/test/java/com/baeldung/blockingnonblocking/NonBlockingClientUnitTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.baeldung.blockingnonblocking;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.channels.SocketChannel;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.*;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n+import static org.junit.Assert.assertTrue;\n+\n+public class NonBlockingClientUnitTest {\n+    private String REQUESTED_RESOURCE = \"/test.json\";\n+\n+    @Rule public WireMockRule wireMockRule = new WireMockRule(wireMockConfig().dynamicPort());\n+\n+    @Before\n+    public void setup() {\n+        stubFor(get(urlEqualTo(REQUESTED_RESOURCE)).willReturn(aResponse()\n+          .withStatus(200)\n+          .withBody(\"{ \\\"response\\\" : \\\"It worked!\\\" }\")));\n+    }\n+\n+    @Test\n+    public void givenJavaNIOSocketChannel_whenReadingAndWriting_thenUseBuffers() throws IOException {\n+        // given a NIO SocketChannel and a charset\n+        InetSocketAddress address = new InetSocketAddress(\"localhost\", wireMockRule.port());\n+        SocketChannel socketChannel = SocketChannel.open(address);\n+        Charset charset = StandardCharsets.UTF_8;\n+\n+        // when we write and read using buffers\n+        socketChannel.write(charset.encode(CharBuffer.wrap(\"GET \" + REQUESTED_RESOURCE + \" HTTP/1.0\\r\\n\\r\\n\")));\n+\n+        ByteBuffer buffer = ByteBuffer.allocate(8); // or allocateDirect if we need direct memory access\n+        CharBuffer charBuffer = CharBuffer.allocate(8192);\n+        CharsetDecoder decoder = charset.newDecoder();\n+        StringBuilder ourStore = new StringBuilder();\n+        while (socketChannel.read(buffer) != -1 || buffer.position() > 0) {\n+            buffer.flip();\n+            storeBufferContents(buffer, charBuffer, decoder, ourStore);\n+            buffer.compact();\n+        }\n+        socketChannel.close();\n+\n+        // then we read and saved our data\n+        assertTrue(ourStore\n+          .toString()\n+          .contains(\"It worked!\"));\n+    }\n+\n+    @Test\n+    public void givenJavaNIO_whenReadingAndWriting_thenSmallBuffers() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a795787640796c98f5f2c87f290b431cce8070e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwOTM4NQ==", "bodyText": "Resolved this in the latest commit", "url": "https://github.com/eugenp/tutorials/pull/8843#discussion_r392709385", "createdAt": "2020-03-15T20:26:52Z", "author": {"login": "rojyates"}, "path": "core-java-modules/core-java-io-2/src/test/java/com/baeldung/blockingnonblocking/NonBlockingClientUnitTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.baeldung.blockingnonblocking;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.channels.SocketChannel;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.*;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n+import static org.junit.Assert.assertTrue;\n+\n+public class NonBlockingClientUnitTest {\n+    private String REQUESTED_RESOURCE = \"/test.json\";\n+\n+    @Rule public WireMockRule wireMockRule = new WireMockRule(wireMockConfig().dynamicPort());\n+\n+    @Before\n+    public void setup() {\n+        stubFor(get(urlEqualTo(REQUESTED_RESOURCE)).willReturn(aResponse()\n+          .withStatus(200)\n+          .withBody(\"{ \\\"response\\\" : \\\"It worked!\\\" }\")));\n+    }\n+\n+    @Test\n+    public void givenJavaNIOSocketChannel_whenReadingAndWriting_thenUseBuffers() throws IOException {\n+        // given a NIO SocketChannel and a charset\n+        InetSocketAddress address = new InetSocketAddress(\"localhost\", wireMockRule.port());\n+        SocketChannel socketChannel = SocketChannel.open(address);\n+        Charset charset = StandardCharsets.UTF_8;\n+\n+        // when we write and read using buffers\n+        socketChannel.write(charset.encode(CharBuffer.wrap(\"GET \" + REQUESTED_RESOURCE + \" HTTP/1.0\\r\\n\\r\\n\")));\n+\n+        ByteBuffer buffer = ByteBuffer.allocate(8); // or allocateDirect if we need direct memory access\n+        CharBuffer charBuffer = CharBuffer.allocate(8192);\n+        CharsetDecoder decoder = charset.newDecoder();\n+        StringBuilder ourStore = new StringBuilder();\n+        while (socketChannel.read(buffer) != -1 || buffer.position() > 0) {\n+            buffer.flip();\n+            storeBufferContents(buffer, charBuffer, decoder, ourStore);\n+            buffer.compact();\n+        }\n+        socketChannel.close();\n+\n+        // then we read and saved our data\n+        assertTrue(ourStore\n+          .toString()\n+          .contains(\"It worked!\"));\n+    }\n+\n+    @Test\n+    public void givenJavaNIO_whenReadingAndWriting_thenSmallBuffers() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4NzgzMQ=="}, "originalCommit": {"oid": "0a795787640796c98f5f2c87f290b431cce8070e"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAwODg5OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-io-2/src/test/java/com/baeldung/blockingnonblocking/NonBlockingClientUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjowNjowN1rOF2fxJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMDoyNzowMVrOF2hFFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4NzkwOA==", "bodyText": "Recommend naming this variable socketChannel to be consistent with the previous test", "url": "https://github.com/eugenp/tutorials/pull/8843#discussion_r392687908", "createdAt": "2020-03-15T16:06:07Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-io-2/src/test/java/com/baeldung/blockingnonblocking/NonBlockingClientUnitTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.baeldung.blockingnonblocking;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.channels.SocketChannel;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.*;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n+import static org.junit.Assert.assertTrue;\n+\n+public class NonBlockingClientUnitTest {\n+    private String REQUESTED_RESOURCE = \"/test.json\";\n+\n+    @Rule public WireMockRule wireMockRule = new WireMockRule(wireMockConfig().dynamicPort());\n+\n+    @Before\n+    public void setup() {\n+        stubFor(get(urlEqualTo(REQUESTED_RESOURCE)).willReturn(aResponse()\n+          .withStatus(200)\n+          .withBody(\"{ \\\"response\\\" : \\\"It worked!\\\" }\")));\n+    }\n+\n+    @Test\n+    public void givenJavaNIOSocketChannel_whenReadingAndWriting_thenUseBuffers() throws IOException {\n+        // given a NIO SocketChannel and a charset\n+        InetSocketAddress address = new InetSocketAddress(\"localhost\", wireMockRule.port());\n+        SocketChannel socketChannel = SocketChannel.open(address);\n+        Charset charset = StandardCharsets.UTF_8;\n+\n+        // when we write and read using buffers\n+        socketChannel.write(charset.encode(CharBuffer.wrap(\"GET \" + REQUESTED_RESOURCE + \" HTTP/1.0\\r\\n\\r\\n\")));\n+\n+        ByteBuffer buffer = ByteBuffer.allocate(8); // or allocateDirect if we need direct memory access\n+        CharBuffer charBuffer = CharBuffer.allocate(8192);\n+        CharsetDecoder decoder = charset.newDecoder();\n+        StringBuilder ourStore = new StringBuilder();\n+        while (socketChannel.read(buffer) != -1 || buffer.position() > 0) {\n+            buffer.flip();\n+            storeBufferContents(buffer, charBuffer, decoder, ourStore);\n+            buffer.compact();\n+        }\n+        socketChannel.close();\n+\n+        // then we read and saved our data\n+        assertTrue(ourStore\n+          .toString()\n+          .contains(\"It worked!\"));\n+    }\n+\n+    @Test\n+    public void givenJavaNIO_whenReadingAndWriting_thenSmallBuffers() throws IOException {\n+        // given a NIO SocketChannel and a charset\n+        InetSocketAddress address = new InetSocketAddress(\"localhost\", wireMockRule.port());\n+        SocketChannel socket = SocketChannel.open(address);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a795787640796c98f5f2c87f290b431cce8070e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwOTM5Ng==", "bodyText": "Resolved this in the latest commit", "url": "https://github.com/eugenp/tutorials/pull/8843#discussion_r392709396", "createdAt": "2020-03-15T20:27:01Z", "author": {"login": "rojyates"}, "path": "core-java-modules/core-java-io-2/src/test/java/com/baeldung/blockingnonblocking/NonBlockingClientUnitTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.baeldung.blockingnonblocking;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.channels.SocketChannel;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.*;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n+import static org.junit.Assert.assertTrue;\n+\n+public class NonBlockingClientUnitTest {\n+    private String REQUESTED_RESOURCE = \"/test.json\";\n+\n+    @Rule public WireMockRule wireMockRule = new WireMockRule(wireMockConfig().dynamicPort());\n+\n+    @Before\n+    public void setup() {\n+        stubFor(get(urlEqualTo(REQUESTED_RESOURCE)).willReturn(aResponse()\n+          .withStatus(200)\n+          .withBody(\"{ \\\"response\\\" : \\\"It worked!\\\" }\")));\n+    }\n+\n+    @Test\n+    public void givenJavaNIOSocketChannel_whenReadingAndWriting_thenUseBuffers() throws IOException {\n+        // given a NIO SocketChannel and a charset\n+        InetSocketAddress address = new InetSocketAddress(\"localhost\", wireMockRule.port());\n+        SocketChannel socketChannel = SocketChannel.open(address);\n+        Charset charset = StandardCharsets.UTF_8;\n+\n+        // when we write and read using buffers\n+        socketChannel.write(charset.encode(CharBuffer.wrap(\"GET \" + REQUESTED_RESOURCE + \" HTTP/1.0\\r\\n\\r\\n\")));\n+\n+        ByteBuffer buffer = ByteBuffer.allocate(8); // or allocateDirect if we need direct memory access\n+        CharBuffer charBuffer = CharBuffer.allocate(8192);\n+        CharsetDecoder decoder = charset.newDecoder();\n+        StringBuilder ourStore = new StringBuilder();\n+        while (socketChannel.read(buffer) != -1 || buffer.position() > 0) {\n+            buffer.flip();\n+            storeBufferContents(buffer, charBuffer, decoder, ourStore);\n+            buffer.compact();\n+        }\n+        socketChannel.close();\n+\n+        // then we read and saved our data\n+        assertTrue(ourStore\n+          .toString()\n+          .contains(\"It worked!\"));\n+    }\n+\n+    @Test\n+    public void givenJavaNIO_whenReadingAndWriting_thenSmallBuffers() throws IOException {\n+        // given a NIO SocketChannel and a charset\n+        InetSocketAddress address = new InetSocketAddress(\"localhost\", wireMockRule.port());\n+        SocketChannel socket = SocketChannel.open(address);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4NzkwOA=="}, "originalCommit": {"oid": "0a795787640796c98f5f2c87f290b431cce8070e"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4078, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}