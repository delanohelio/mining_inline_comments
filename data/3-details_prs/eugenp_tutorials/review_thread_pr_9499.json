{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MTc4NzE4", "number": 9499, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxODoxNjozMlrOEHT2-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxODoxNjo0NVrOEHT3Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTAwODU5OnYy", "diffSide": "RIGHT", "path": "jsoup/src/test/java/com/baeldung/jsoup/PreservingLineBreaksUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxODoxNjozMlrOGmnthQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxOTo0NjozNFrOGs9oqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0OTcwMQ==", "bodyText": "swap order of arguments", "url": "https://github.com/eugenp/tutorials/pull/9499#discussion_r443149701", "createdAt": "2020-06-20T18:16:32Z", "author": {"login": "KevinGilmore"}, "path": "jsoup/src/test/java/com/baeldung/jsoup/PreservingLineBreaksUnitTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.baeldung.jsoup;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.safety.Whitelist;\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+public class PreservingLineBreaksUnitTest {\n+\n+    @Test\n+    public void whenBackSlashNNewLineCharacter_thenPreserveLineBreak() {\n+        String strHTML = \"<html><body>Hello\\nworld</body></html>\";\n+        Document.OutputSettings outputSettings = new Document.OutputSettings();\n+        outputSettings.prettyPrint(false);\n+        String strWithNewLines = Jsoup.clean(strHTML, \"\", Whitelist.none(), outputSettings);\n+        assertEquals(strWithNewLines, \"Hello\\nworld\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c4234766417259d1101c1c1020e78d4f171d26d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwMDM2Mw==", "bodyText": "Done.", "url": "https://github.com/eugenp/tutorials/pull/9499#discussion_r449800363", "createdAt": "2020-07-04T19:46:34Z", "author": {"login": "vatsalgosar"}, "path": "jsoup/src/test/java/com/baeldung/jsoup/PreservingLineBreaksUnitTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.baeldung.jsoup;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.safety.Whitelist;\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+public class PreservingLineBreaksUnitTest {\n+\n+    @Test\n+    public void whenBackSlashNNewLineCharacter_thenPreserveLineBreak() {\n+        String strHTML = \"<html><body>Hello\\nworld</body></html>\";\n+        Document.OutputSettings outputSettings = new Document.OutputSettings();\n+        outputSettings.prettyPrint(false);\n+        String strWithNewLines = Jsoup.clean(strHTML, \"\", Whitelist.none(), outputSettings);\n+        assertEquals(strWithNewLines, \"Hello\\nworld\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0OTcwMQ=="}, "originalCommit": {"oid": "4c4234766417259d1101c1c1020e78d4f171d26d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTAwODc0OnYy", "diffSide": "RIGHT", "path": "jsoup/src/test/java/com/baeldung/jsoup/PreservingLineBreaksUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxODoxNjo0NVrOGmntlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxOTo0Njo0MFrOGs9ovA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0OTcxOQ==", "bodyText": "swap order of arguments", "url": "https://github.com/eugenp/tutorials/pull/9499#discussion_r443149719", "createdAt": "2020-06-20T18:16:45Z", "author": {"login": "KevinGilmore"}, "path": "jsoup/src/test/java/com/baeldung/jsoup/PreservingLineBreaksUnitTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.baeldung.jsoup;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.safety.Whitelist;\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+public class PreservingLineBreaksUnitTest {\n+\n+    @Test\n+    public void whenBackSlashNNewLineCharacter_thenPreserveLineBreak() {\n+        String strHTML = \"<html><body>Hello\\nworld</body></html>\";\n+        Document.OutputSettings outputSettings = new Document.OutputSettings();\n+        outputSettings.prettyPrint(false);\n+        String strWithNewLines = Jsoup.clean(strHTML, \"\", Whitelist.none(), outputSettings);\n+        assertEquals(strWithNewLines, \"Hello\\nworld\");\n+    }\n+\n+    @Test\n+    public void whenHTMLNewLineCharacters_thenPreserveLineBreak() {\n+        String strHTML = \"<html><body>\" +\n+                \"Hello\" +\n+                \"<br>\" +\n+                \"World\" +\n+                \"<p>Paragraph</p>\" +\n+                \"</body></html>\";\n+        Document jsoupDoc = Jsoup.parse(strHTML);\n+        Document.OutputSettings outputSettings = new Document.OutputSettings();\n+        outputSettings.prettyPrint(false);\n+        jsoupDoc.outputSettings(outputSettings);\n+        jsoupDoc.select(\"br\").before(\"\\\\n\");\n+        jsoupDoc.select(\"p\").before(\"\\\\n\");\n+        String str = jsoupDoc.html().replaceAll(\"\\\\\\\\n\", \"\\n\");\n+        String strWithNewLines =\n+                Jsoup.clean(str, \"\", Whitelist.none(), outputSettings);\n+        assertEquals(strWithNewLines, \"Hello\\nWorld\\nParagraph\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c4234766417259d1101c1c1020e78d4f171d26d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgwMDM4MA==", "bodyText": "Done.", "url": "https://github.com/eugenp/tutorials/pull/9499#discussion_r449800380", "createdAt": "2020-07-04T19:46:40Z", "author": {"login": "vatsalgosar"}, "path": "jsoup/src/test/java/com/baeldung/jsoup/PreservingLineBreaksUnitTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.baeldung.jsoup;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.safety.Whitelist;\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+public class PreservingLineBreaksUnitTest {\n+\n+    @Test\n+    public void whenBackSlashNNewLineCharacter_thenPreserveLineBreak() {\n+        String strHTML = \"<html><body>Hello\\nworld</body></html>\";\n+        Document.OutputSettings outputSettings = new Document.OutputSettings();\n+        outputSettings.prettyPrint(false);\n+        String strWithNewLines = Jsoup.clean(strHTML, \"\", Whitelist.none(), outputSettings);\n+        assertEquals(strWithNewLines, \"Hello\\nworld\");\n+    }\n+\n+    @Test\n+    public void whenHTMLNewLineCharacters_thenPreserveLineBreak() {\n+        String strHTML = \"<html><body>\" +\n+                \"Hello\" +\n+                \"<br>\" +\n+                \"World\" +\n+                \"<p>Paragraph</p>\" +\n+                \"</body></html>\";\n+        Document jsoupDoc = Jsoup.parse(strHTML);\n+        Document.OutputSettings outputSettings = new Document.OutputSettings();\n+        outputSettings.prettyPrint(false);\n+        jsoupDoc.outputSettings(outputSettings);\n+        jsoupDoc.select(\"br\").before(\"\\\\n\");\n+        jsoupDoc.select(\"p\").before(\"\\\\n\");\n+        String str = jsoupDoc.html().replaceAll(\"\\\\\\\\n\", \"\\n\");\n+        String strWithNewLines =\n+                Jsoup.clean(str, \"\", Whitelist.none(), outputSettings);\n+        assertEquals(strWithNewLines, \"Hello\\nWorld\\nParagraph\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE0OTcxOQ=="}, "originalCommit": {"oid": "4c4234766417259d1101c1c1020e78d4f171d26d"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4334, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}