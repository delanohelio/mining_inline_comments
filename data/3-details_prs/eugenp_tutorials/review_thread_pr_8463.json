{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NTUwNzU4", "number": 8463, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzoxMjoyNFrODWsmMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzoxNDoyM1rODWsnoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTI1OTM4OnYy", "diffSide": "RIGHT", "path": "apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzoxMjoyNFrOFbms0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzoxMjoyNFrOFbms0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ4OTkzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void gvieStringCell_whenGetCellStringValue_thenReturnStringValue() throws IOException {\n          \n          \n            \n                public void givenStringCell_whenGetCellStringValue_thenReturnStringValue() throws IOException {", "url": "https://github.com/eugenp/tutorials/pull/8463#discussion_r364489936", "createdAt": "2020-01-08T23:12:24Z", "author": {"login": "KevinGilmore"}, "path": "apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.baeldung.poi.excel;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Paths;\n+\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.apache.poi.ss.usermodel.Workbook;\n+import org.apache.poi.xssf.usermodel.XSSFWorkbook;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ExcelCellFormatterUnitTest {\n+    private static final String FILE_NAME = \"ExcelCellFormatterTest.xlsx\";\n+    private static final int STRING_CELL_INDEX = 0;\n+    private static final int BOOLEAN_CELL_INDEX = 1;\n+    private static final int RAW_NUMERIC_CELL_INDEX = 2;\n+    private static final int FORMATTED_NUMERIC_CELL_INDEX = 3;\n+    private static final int FORMULA_CELL_INDEX = 4;\n+\n+    private String fileLocation;\n+\n+    @Before\n+    public void setup() throws IOException, URISyntaxException {\n+            fileLocation = Paths.get(ClassLoader.getSystemResource(FILE_NAME).toURI()).toString();\n+    }\n+\n+    @Test\n+    public void gvieStringCell_whenGetCellStringValue_thenReturnStringValue() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af6804ae25fc35ec53e1c20b245e21094836b94f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTI1OTkyOnYy", "diffSide": "RIGHT", "path": "apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzoxMjo0NFrOFbmtMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzoxMjo0NFrOFbmtMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ5MDAzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void gvieBooleanCell_whenGetCellStringValue_thenReturnBooleanStringValue() throws IOException {\n          \n          \n            \n                public void givenBooleanCell_whenGetCellStringValue_thenReturnBooleanStringValue() throws IOException {", "url": "https://github.com/eugenp/tutorials/pull/8463#discussion_r364490032", "createdAt": "2020-01-08T23:12:44Z", "author": {"login": "KevinGilmore"}, "path": "apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.baeldung.poi.excel;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Paths;\n+\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.apache.poi.ss.usermodel.Workbook;\n+import org.apache.poi.xssf.usermodel.XSSFWorkbook;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ExcelCellFormatterUnitTest {\n+    private static final String FILE_NAME = \"ExcelCellFormatterTest.xlsx\";\n+    private static final int STRING_CELL_INDEX = 0;\n+    private static final int BOOLEAN_CELL_INDEX = 1;\n+    private static final int RAW_NUMERIC_CELL_INDEX = 2;\n+    private static final int FORMATTED_NUMERIC_CELL_INDEX = 3;\n+    private static final int FORMULA_CELL_INDEX = 4;\n+\n+    private String fileLocation;\n+\n+    @Before\n+    public void setup() throws IOException, URISyntaxException {\n+            fileLocation = Paths.get(ClassLoader.getSystemResource(FILE_NAME).toURI()).toString();\n+    }\n+\n+    @Test\n+    public void gvieStringCell_whenGetCellStringValue_thenReturnStringValue() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"String Test\", formatter.getCellStringValue(row.getCell(STRING_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void gvieBooleanCell_whenGetCellStringValue_thenReturnBooleanStringValue() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af6804ae25fc35ec53e1c20b245e21094836b94f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTI2MDMwOnYy", "diffSide": "RIGHT", "path": "apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzoxMjo1NVrOFbmtcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzoxMjo1NVrOFbmtcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ5MDA5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void gvieNumericCell_whenGetCellStringValue_thenReturnNumericStringValue() throws IOException {\n          \n          \n            \n                public void givenNumericCell_whenGetCellStringValue_thenReturnNumericStringValue() throws IOException {", "url": "https://github.com/eugenp/tutorials/pull/8463#discussion_r364490096", "createdAt": "2020-01-08T23:12:55Z", "author": {"login": "KevinGilmore"}, "path": "apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.baeldung.poi.excel;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Paths;\n+\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.apache.poi.ss.usermodel.Workbook;\n+import org.apache.poi.xssf.usermodel.XSSFWorkbook;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ExcelCellFormatterUnitTest {\n+    private static final String FILE_NAME = \"ExcelCellFormatterTest.xlsx\";\n+    private static final int STRING_CELL_INDEX = 0;\n+    private static final int BOOLEAN_CELL_INDEX = 1;\n+    private static final int RAW_NUMERIC_CELL_INDEX = 2;\n+    private static final int FORMATTED_NUMERIC_CELL_INDEX = 3;\n+    private static final int FORMULA_CELL_INDEX = 4;\n+\n+    private String fileLocation;\n+\n+    @Before\n+    public void setup() throws IOException, URISyntaxException {\n+            fileLocation = Paths.get(ClassLoader.getSystemResource(FILE_NAME).toURI()).toString();\n+    }\n+\n+    @Test\n+    public void gvieStringCell_whenGetCellStringValue_thenReturnStringValue() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"String Test\", formatter.getCellStringValue(row.getCell(STRING_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void gvieBooleanCell_whenGetCellStringValue_thenReturnBooleanStringValue() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"TRUE\", formatter.getCellStringValue(row.getCell(BOOLEAN_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void gvieNumericCell_whenGetCellStringValue_thenReturnNumericStringValue() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af6804ae25fc35ec53e1c20b245e21094836b94f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTI2MDU1OnYy", "diffSide": "RIGHT", "path": "apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzoxMzowNlrOFbmtmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzoxMzowNlrOFbmtmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ5MDEzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void gvieFormualCell_whenGetCellStringValue_thenReturnOriginalFormulaString() throws IOException {\n          \n          \n            \n                public void givenFormulaCell_whenGetCellStringValue_thenReturnOriginalFormulaString() throws IOException {", "url": "https://github.com/eugenp/tutorials/pull/8463#discussion_r364490138", "createdAt": "2020-01-08T23:13:06Z", "author": {"login": "KevinGilmore"}, "path": "apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.baeldung.poi.excel;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Paths;\n+\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.apache.poi.ss.usermodel.Workbook;\n+import org.apache.poi.xssf.usermodel.XSSFWorkbook;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ExcelCellFormatterUnitTest {\n+    private static final String FILE_NAME = \"ExcelCellFormatterTest.xlsx\";\n+    private static final int STRING_CELL_INDEX = 0;\n+    private static final int BOOLEAN_CELL_INDEX = 1;\n+    private static final int RAW_NUMERIC_CELL_INDEX = 2;\n+    private static final int FORMATTED_NUMERIC_CELL_INDEX = 3;\n+    private static final int FORMULA_CELL_INDEX = 4;\n+\n+    private String fileLocation;\n+\n+    @Before\n+    public void setup() throws IOException, URISyntaxException {\n+            fileLocation = Paths.get(ClassLoader.getSystemResource(FILE_NAME).toURI()).toString();\n+    }\n+\n+    @Test\n+    public void gvieStringCell_whenGetCellStringValue_thenReturnStringValue() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"String Test\", formatter.getCellStringValue(row.getCell(STRING_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void gvieBooleanCell_whenGetCellStringValue_thenReturnBooleanStringValue() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"TRUE\", formatter.getCellStringValue(row.getCell(BOOLEAN_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void gvieNumericCell_whenGetCellStringValue_thenReturnNumericStringValue() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"1.234\", formatter.getCellStringValue(row.getCell(RAW_NUMERIC_CELL_INDEX)));\n+        assertEquals(\"1.23\", formatter.getCellStringValue(row.getCell(FORMATTED_NUMERIC_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void gvieFormualCell_whenGetCellStringValue_thenReturnOriginalFormulaString() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af6804ae25fc35ec53e1c20b245e21094836b94f"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTI2MzA1OnYy", "diffSide": "RIGHT", "path": "apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzoxNDoyM1rOFbmvKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQyMzoxNDoyM1rOFbmvKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ5MDUzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void gvieFormualCell_whenGetCellStringValueForFormula_thenReturnOriginalFormulatring() throws IOException {\n          \n          \n            \n                public void givenFormulaCell_whenGetCellStringValueForFormula_thenReturnOriginalFormulaString() throws IOException {", "url": "https://github.com/eugenp/tutorials/pull/8463#discussion_r364490537", "createdAt": "2020-01-08T23:14:23Z", "author": {"login": "KevinGilmore"}, "path": "apache-poi/src/test/java/com/baeldung/poi/excel/ExcelCellFormatterUnitTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.baeldung.poi.excel;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Paths;\n+\n+import org.apache.poi.ss.usermodel.Row;\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.apache.poi.ss.usermodel.Workbook;\n+import org.apache.poi.xssf.usermodel.XSSFWorkbook;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ExcelCellFormatterUnitTest {\n+    private static final String FILE_NAME = \"ExcelCellFormatterTest.xlsx\";\n+    private static final int STRING_CELL_INDEX = 0;\n+    private static final int BOOLEAN_CELL_INDEX = 1;\n+    private static final int RAW_NUMERIC_CELL_INDEX = 2;\n+    private static final int FORMATTED_NUMERIC_CELL_INDEX = 3;\n+    private static final int FORMULA_CELL_INDEX = 4;\n+\n+    private String fileLocation;\n+\n+    @Before\n+    public void setup() throws IOException, URISyntaxException {\n+            fileLocation = Paths.get(ClassLoader.getSystemResource(FILE_NAME).toURI()).toString();\n+    }\n+\n+    @Test\n+    public void gvieStringCell_whenGetCellStringValue_thenReturnStringValue() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"String Test\", formatter.getCellStringValue(row.getCell(STRING_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void gvieBooleanCell_whenGetCellStringValue_thenReturnBooleanStringValue() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"TRUE\", formatter.getCellStringValue(row.getCell(BOOLEAN_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void gvieNumericCell_whenGetCellStringValue_thenReturnNumericStringValue() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"1.234\", formatter.getCellStringValue(row.getCell(RAW_NUMERIC_CELL_INDEX)));\n+        assertEquals(\"1.23\", formatter.getCellStringValue(row.getCell(FORMATTED_NUMERIC_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void gvieFormualCell_whenGetCellStringValue_thenReturnOriginalFormulaString() throws IOException {\n+        Workbook workbook = new XSSFWorkbook(fileLocation);\n+        Sheet sheet = workbook.getSheetAt(0);\n+        Row row = sheet.getRow(0);\n+\n+        ExcelCellFormatter formatter = new ExcelCellFormatter();\n+        assertEquals(\"SUM(1+2)\", formatter.getCellStringValue(row.getCell(FORMULA_CELL_INDEX)));\n+        workbook.close();\n+    }\n+\n+    @Test\n+    public void gvieFormualCell_whenGetCellStringValueForFormula_thenReturnOriginalFormulatring() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af6804ae25fc35ec53e1c20b245e21094836b94f"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4433, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}