{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMjUxODY5", "number": 9608, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjoxNjoyNlrOEMTgOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNDowMTo0NlrOENmaEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzM3OTE0OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjoxNjoyNlrOGuVswg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjoxNjoyNlrOGuVswg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0MzIwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertEquals(version1_1_snapshot.isSnapshot(), true);\n          \n          \n            \n                    assertTrue(version1_1_snapshot.isSnapshot());", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r451243202", "createdAt": "2020-07-08T02:16:26Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        \n+        VersionNumber version1_1_1_1_alpha = VersionNumber.parse(\"1.1.1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_1_1_alpha) < 0);\n+        \n+        VersionNumber version1_1_beta = VersionNumber.parse(\"1.1.0.0-beta\"); \n+        assertTrue(version1_1_beta.compareTo(version1_1_1_1_alpha) < 0);\n+\n+        VersionNumber version1_1_1_snapshot = VersionNumber.parse(\"1.1.1-snapshot\");\n+        assertTrue(version1_1_1_1_alpha.compareTo(version1_1_1_snapshot) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingJackson_thenCompareVersions() {\n+        Version version1_1 = new Version(1, 1, 0, null, null, null);\n+        Version version1_2 = new Version(1, 2, 0, null, null, null);\n+        Version version1_3 = new Version(1, 3, 0, null, null, null);\n+        \n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Version version1_1_1 = new Version(1, 1, 1, null, null, null);\n+        assertTrue(version1_1.compareTo(version1_1_1) < 0);\n+        \n+        Version version1_1_maven = new Version(1, 1, 0, null, \"org.apache.maven\", null);\n+        Version version1_1_gradle = new Version(1, 1, 0, null, \"org.gradle\", null);\n+        assertTrue(version1_1_maven.compareTo(version1_1_gradle) < 0);\n+        \n+        Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n+        assertEquals(version1_1.compareTo(version1_1_snapshot), 0);\n+        \n+        assertEquals(version1_1_snapshot.isSnapshot(), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230c3202fb190b8af427d72f9c230b9c32c14b76"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzM4MDc5OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjoxNzowN1rOGuVtqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMjoxNzowN1rOGuVtqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI0MzQzNA==", "bodyText": "use assertFalse", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r451243434", "createdAt": "2020-07-08T02:17:07Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-string-operations-2/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        \n+        VersionNumber version1_1_1_1_alpha = VersionNumber.parse(\"1.1.1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_1_1_alpha) < 0);\n+        \n+        VersionNumber version1_1_beta = VersionNumber.parse(\"1.1.0.0-beta\"); \n+        assertTrue(version1_1_beta.compareTo(version1_1_1_1_alpha) < 0);\n+\n+        VersionNumber version1_1_1_snapshot = VersionNumber.parse(\"1.1.1-snapshot\");\n+        assertTrue(version1_1_1_1_alpha.compareTo(version1_1_1_snapshot) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingJackson_thenCompareVersions() {\n+        Version version1_1 = new Version(1, 1, 0, null, null, null);\n+        Version version1_2 = new Version(1, 2, 0, null, null, null);\n+        Version version1_3 = new Version(1, 3, 0, null, null, null);\n+        \n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Version version1_1_1 = new Version(1, 1, 1, null, null, null);\n+        assertTrue(version1_1.compareTo(version1_1_1) < 0);\n+        \n+        Version version1_1_maven = new Version(1, 1, 0, null, \"org.apache.maven\", null);\n+        Version version1_1_gradle = new Version(1, 1, 0, null, \"org.gradle\", null);\n+        assertTrue(version1_1_maven.compareTo(version1_1_gradle) < 0);\n+        \n+        Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n+        assertEquals(version1_1.compareTo(version1_1_snapshot), 0);\n+        \n+        assertEquals(version1_1_snapshot.isSnapshot(), true);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingSemver_thenCompareVersions() {\n+        Semver version1_1 = new Semver(\"1.1.0\");\n+        Semver version1_2 = new Semver(\"1.2.0\");\n+        Semver version1_3 = new Semver(\"1.3.0\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Semver version1_1_alpha = new Semver(\"1.1.0-alpha\");\n+        assertTrue(version1_1.isGreaterThan(version1_1_alpha));\n+        \n+        Semver version1_1_beta = new Semver(\"1.1.0-beta\");\n+        Semver version1_1_milestone = new Semver(\"1.1.0-milestone\");\n+        Semver version1_1_rc = new Semver(\"1.1.0-rc\");\n+        Semver version1_1_snapshot = new Semver(\"1.1.0-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.isLowerThan(version1_1_beta));\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        assertTrue(version1_1.isEqualTo(\"1.1.0\"));\n+        \n+        assertEquals(version1_1.diff(\"2.1.0\"), VersionDiff.MAJOR);\n+        assertEquals(version1_1.diff(\"1.2.3\"), VersionDiff.MINOR);\n+        assertEquals(version1_1.diff(\"1.1.1\"), VersionDiff.PATCH);\n+        \n+        assertTrue(version1_1.isStable());\n+        assertEquals(version1_1_alpha.isStable(), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "230c3202fb190b8af427d72f9c230b9c32c14b76"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjk2MDQ3OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNDowMDowNlrOGwUeFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMzoxNjo1N1rOGwaKxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDIxNQ==", "bodyText": "swap order of arguments so that you get assertTrue(expected, actual)", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453320215", "createdAt": "2020-07-12T14:00:06Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932183fabd183c0983f66576811c8df2ae2eaac3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxMzU3NQ==", "bodyText": "I think it is relevant for assertEquals", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453413575", "createdAt": "2020-07-13T03:16:57Z", "author": {"login": "SmartyAnsh"}, "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDIxNQ=="}, "originalCommit": {"oid": "932183fabd183c0983f66576811c8df2ae2eaac3"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjk2MTUwOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNDowMToxMFrOGwUekg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMzoxNzoxNlrOGwaLDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDMzOA==", "bodyText": "swap argument order", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453320338", "createdAt": "2020-07-12T14:01:10Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932183fabd183c0983f66576811c8df2ae2eaac3"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxMzY0Ng==", "bodyText": "swapped", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453413646", "createdAt": "2020-07-13T03:17:16Z", "author": {"login": "SmartyAnsh"}, "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDMzOA=="}, "originalCommit": {"oid": "932183fabd183c0983f66576811c8df2ae2eaac3"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjk2MTY1OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNDowMToyMlrOGwUeqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMzoxNzoxOVrOGwaLFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDM2MA==", "bodyText": "swap argument order", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453320360", "createdAt": "2020-07-12T14:01:22Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        \n+        VersionNumber version1_1_1_1_alpha = VersionNumber.parse(\"1.1.1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_1_1_alpha) < 0);\n+        \n+        VersionNumber version1_1_beta = VersionNumber.parse(\"1.1.0.0-beta\"); \n+        assertTrue(version1_1_beta.compareTo(version1_1_1_1_alpha) < 0);\n+\n+        VersionNumber version1_1_1_snapshot = VersionNumber.parse(\"1.1.1-snapshot\");\n+        assertTrue(version1_1_1_1_alpha.compareTo(version1_1_1_snapshot) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingJackson_thenCompareVersions() {\n+        Version version1_1 = new Version(1, 1, 0, null, null, null);\n+        Version version1_2 = new Version(1, 2, 0, null, null, null);\n+        Version version1_3 = new Version(1, 3, 0, null, null, null);\n+        \n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Version version1_1_1 = new Version(1, 1, 1, null, null, null);\n+        assertTrue(version1_1.compareTo(version1_1_1) < 0);\n+        \n+        Version version1_1_maven = new Version(1, 1, 0, null, \"org.apache.maven\", null);\n+        Version version1_1_gradle = new Version(1, 1, 0, null, \"org.gradle\", null);\n+        assertTrue(version1_1_maven.compareTo(version1_1_gradle) < 0);\n+        \n+        Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n+        assertEquals(version1_1.compareTo(version1_1_snapshot), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932183fabd183c0983f66576811c8df2ae2eaac3"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxMzY1Mg==", "bodyText": "swapped", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453413652", "createdAt": "2020-07-13T03:17:19Z", "author": {"login": "SmartyAnsh"}, "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        \n+        VersionNumber version1_1_1_1_alpha = VersionNumber.parse(\"1.1.1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_1_1_alpha) < 0);\n+        \n+        VersionNumber version1_1_beta = VersionNumber.parse(\"1.1.0.0-beta\"); \n+        assertTrue(version1_1_beta.compareTo(version1_1_1_1_alpha) < 0);\n+\n+        VersionNumber version1_1_1_snapshot = VersionNumber.parse(\"1.1.1-snapshot\");\n+        assertTrue(version1_1_1_1_alpha.compareTo(version1_1_1_snapshot) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingJackson_thenCompareVersions() {\n+        Version version1_1 = new Version(1, 1, 0, null, null, null);\n+        Version version1_2 = new Version(1, 2, 0, null, null, null);\n+        Version version1_3 = new Version(1, 3, 0, null, null, null);\n+        \n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Version version1_1_1 = new Version(1, 1, 1, null, null, null);\n+        assertTrue(version1_1.compareTo(version1_1_1) < 0);\n+        \n+        Version version1_1_maven = new Version(1, 1, 0, null, \"org.apache.maven\", null);\n+        Version version1_1_gradle = new Version(1, 1, 0, null, \"org.gradle\", null);\n+        assertTrue(version1_1_maven.compareTo(version1_1_gradle) < 0);\n+        \n+        Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n+        assertEquals(version1_1.compareTo(version1_1_snapshot), 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDM2MA=="}, "originalCommit": {"oid": "932183fabd183c0983f66576811c8df2ae2eaac3"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjk2MTkxOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNDowMTozOFrOGwUeyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMzoxNzoyNVrOGwaLKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDM5NA==", "bodyText": "swap argument order", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453320394", "createdAt": "2020-07-12T14:01:38Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        \n+        VersionNumber version1_1_1_1_alpha = VersionNumber.parse(\"1.1.1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_1_1_alpha) < 0);\n+        \n+        VersionNumber version1_1_beta = VersionNumber.parse(\"1.1.0.0-beta\"); \n+        assertTrue(version1_1_beta.compareTo(version1_1_1_1_alpha) < 0);\n+\n+        VersionNumber version1_1_1_snapshot = VersionNumber.parse(\"1.1.1-snapshot\");\n+        assertTrue(version1_1_1_1_alpha.compareTo(version1_1_1_snapshot) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingJackson_thenCompareVersions() {\n+        Version version1_1 = new Version(1, 1, 0, null, null, null);\n+        Version version1_2 = new Version(1, 2, 0, null, null, null);\n+        Version version1_3 = new Version(1, 3, 0, null, null, null);\n+        \n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Version version1_1_1 = new Version(1, 1, 1, null, null, null);\n+        assertTrue(version1_1.compareTo(version1_1_1) < 0);\n+        \n+        Version version1_1_maven = new Version(1, 1, 0, null, \"org.apache.maven\", null);\n+        Version version1_1_gradle = new Version(1, 1, 0, null, \"org.gradle\", null);\n+        assertTrue(version1_1_maven.compareTo(version1_1_gradle) < 0);\n+        \n+        Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n+        assertEquals(version1_1.compareTo(version1_1_snapshot), 0);\n+        \n+        assertTrue(version1_1_snapshot.isSnapshot());\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingSemver_thenCompareVersions() {\n+        Semver version1_1 = new Semver(\"1.1.0\");\n+        Semver version1_2 = new Semver(\"1.2.0\");\n+        Semver version1_3 = new Semver(\"1.3.0\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Semver version1_1_alpha = new Semver(\"1.1.0-alpha\");\n+        assertTrue(version1_1.isGreaterThan(version1_1_alpha));\n+        \n+        Semver version1_1_beta = new Semver(\"1.1.0-beta\");\n+        Semver version1_1_milestone = new Semver(\"1.1.0-milestone\");\n+        Semver version1_1_rc = new Semver(\"1.1.0-rc\");\n+        Semver version1_1_snapshot = new Semver(\"1.1.0-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.isLowerThan(version1_1_beta));\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        assertTrue(version1_1.isEqualTo(\"1.1.0\"));\n+        \n+        assertEquals(version1_1.diff(\"2.1.0\"), VersionDiff.MAJOR);\n+        assertEquals(version1_1.diff(\"1.2.3\"), VersionDiff.MINOR);\n+        assertEquals(version1_1.diff(\"1.1.1\"), VersionDiff.PATCH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932183fabd183c0983f66576811c8df2ae2eaac3"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxMzY3NQ==", "bodyText": "swapped", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453413675", "createdAt": "2020-07-13T03:17:25Z", "author": {"login": "SmartyAnsh"}, "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        \n+        VersionNumber version1_1_1_1_alpha = VersionNumber.parse(\"1.1.1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_1_1_alpha) < 0);\n+        \n+        VersionNumber version1_1_beta = VersionNumber.parse(\"1.1.0.0-beta\"); \n+        assertTrue(version1_1_beta.compareTo(version1_1_1_1_alpha) < 0);\n+\n+        VersionNumber version1_1_1_snapshot = VersionNumber.parse(\"1.1.1-snapshot\");\n+        assertTrue(version1_1_1_1_alpha.compareTo(version1_1_1_snapshot) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingJackson_thenCompareVersions() {\n+        Version version1_1 = new Version(1, 1, 0, null, null, null);\n+        Version version1_2 = new Version(1, 2, 0, null, null, null);\n+        Version version1_3 = new Version(1, 3, 0, null, null, null);\n+        \n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Version version1_1_1 = new Version(1, 1, 1, null, null, null);\n+        assertTrue(version1_1.compareTo(version1_1_1) < 0);\n+        \n+        Version version1_1_maven = new Version(1, 1, 0, null, \"org.apache.maven\", null);\n+        Version version1_1_gradle = new Version(1, 1, 0, null, \"org.gradle\", null);\n+        assertTrue(version1_1_maven.compareTo(version1_1_gradle) < 0);\n+        \n+        Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n+        assertEquals(version1_1.compareTo(version1_1_snapshot), 0);\n+        \n+        assertTrue(version1_1_snapshot.isSnapshot());\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingSemver_thenCompareVersions() {\n+        Semver version1_1 = new Semver(\"1.1.0\");\n+        Semver version1_2 = new Semver(\"1.2.0\");\n+        Semver version1_3 = new Semver(\"1.3.0\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Semver version1_1_alpha = new Semver(\"1.1.0-alpha\");\n+        assertTrue(version1_1.isGreaterThan(version1_1_alpha));\n+        \n+        Semver version1_1_beta = new Semver(\"1.1.0-beta\");\n+        Semver version1_1_milestone = new Semver(\"1.1.0-milestone\");\n+        Semver version1_1_rc = new Semver(\"1.1.0-rc\");\n+        Semver version1_1_snapshot = new Semver(\"1.1.0-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.isLowerThan(version1_1_beta));\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        assertTrue(version1_1.isEqualTo(\"1.1.0\"));\n+        \n+        assertEquals(version1_1.diff(\"2.1.0\"), VersionDiff.MAJOR);\n+        assertEquals(version1_1.diff(\"1.2.3\"), VersionDiff.MINOR);\n+        assertEquals(version1_1.diff(\"1.1.1\"), VersionDiff.PATCH);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDM5NA=="}, "originalCommit": {"oid": "932183fabd183c0983f66576811c8df2ae2eaac3"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjk2MjA4OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNDowMTo0NlrOGwUe3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMzoxNzoyOVrOGwaLNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDQxNA==", "bodyText": "swap argument order", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453320414", "createdAt": "2020-07-12T14:01:46Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        \n+        VersionNumber version1_1_1_1_alpha = VersionNumber.parse(\"1.1.1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_1_1_alpha) < 0);\n+        \n+        VersionNumber version1_1_beta = VersionNumber.parse(\"1.1.0.0-beta\"); \n+        assertTrue(version1_1_beta.compareTo(version1_1_1_1_alpha) < 0);\n+\n+        VersionNumber version1_1_1_snapshot = VersionNumber.parse(\"1.1.1-snapshot\");\n+        assertTrue(version1_1_1_1_alpha.compareTo(version1_1_1_snapshot) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingJackson_thenCompareVersions() {\n+        Version version1_1 = new Version(1, 1, 0, null, null, null);\n+        Version version1_2 = new Version(1, 2, 0, null, null, null);\n+        Version version1_3 = new Version(1, 3, 0, null, null, null);\n+        \n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Version version1_1_1 = new Version(1, 1, 1, null, null, null);\n+        assertTrue(version1_1.compareTo(version1_1_1) < 0);\n+        \n+        Version version1_1_maven = new Version(1, 1, 0, null, \"org.apache.maven\", null);\n+        Version version1_1_gradle = new Version(1, 1, 0, null, \"org.gradle\", null);\n+        assertTrue(version1_1_maven.compareTo(version1_1_gradle) < 0);\n+        \n+        Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n+        assertEquals(version1_1.compareTo(version1_1_snapshot), 0);\n+        \n+        assertTrue(version1_1_snapshot.isSnapshot());\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingSemver_thenCompareVersions() {\n+        Semver version1_1 = new Semver(\"1.1.0\");\n+        Semver version1_2 = new Semver(\"1.2.0\");\n+        Semver version1_3 = new Semver(\"1.3.0\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Semver version1_1_alpha = new Semver(\"1.1.0-alpha\");\n+        assertTrue(version1_1.isGreaterThan(version1_1_alpha));\n+        \n+        Semver version1_1_beta = new Semver(\"1.1.0-beta\");\n+        Semver version1_1_milestone = new Semver(\"1.1.0-milestone\");\n+        Semver version1_1_rc = new Semver(\"1.1.0-rc\");\n+        Semver version1_1_snapshot = new Semver(\"1.1.0-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.isLowerThan(version1_1_beta));\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        assertTrue(version1_1.isEqualTo(\"1.1.0\"));\n+        \n+        assertEquals(version1_1.diff(\"2.1.0\"), VersionDiff.MAJOR);\n+        assertEquals(version1_1.diff(\"1.2.3\"), VersionDiff.MINOR);\n+        assertEquals(version1_1.diff(\"1.1.1\"), VersionDiff.PATCH);\n+        \n+        assertTrue(version1_1.isStable());\n+        assertFalse(version1_1_alpha.isStable());\n+    }\n+\n+    @Test\n+    public void givenVersionStrings_whenUsingCustomVersionCompare_thenCompareVersions() {\n+        assertTrue(VersionCompare.compareVersions(\"1.0.1\", \"1.1.2\") < 0);\n+        assertTrue(VersionCompare.compareVersions(\"1.0.1\", \"1.10\") < 0);\n+        assertTrue(VersionCompare.compareVersions(\"1.1.2\", \"1.0.1\") > 0);\n+        assertTrue(VersionCompare.compareVersions(\"1.1.2\", \"1.2\") < 0); \n+        assertEquals(VersionCompare.compareVersions(\"1.3.0\", \"1.3\"), 0); ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932183fabd183c0983f66576811c8df2ae2eaac3"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxMzY4Ng==", "bodyText": "swapped", "url": "https://github.com/eugenp/tutorials/pull/9608#discussion_r453413686", "createdAt": "2020-07-13T03:17:29Z", "author": {"login": "SmartyAnsh"}, "path": "core-java-modules/core-java-string-operations-3/src/test/java/com/baeldung/versioncomparison/VersionComparisonUnitTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.baeldung.versioncomparison;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.vdurmont.semver4j.Semver;\n+import com.vdurmont.semver4j.Semver.VersionDiff;\n+\n+import org.apache.maven.artifact.versioning.ComparableVersion;\n+import org.gradle.util.VersionNumber;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class VersionComparisonUnitTest {\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingMavenArtifact_thenCompareVersions() {\n+        ComparableVersion version1_1 = new ComparableVersion(\"1.1\");\n+        ComparableVersion version1_2 = new ComparableVersion(\"1.2\");\n+        ComparableVersion version1_3 = new ComparableVersion(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        ComparableVersion version1_1_0 = new ComparableVersion(\"1.1.0\"); \n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+\n+        ComparableVersion version1_1_alpha = new ComparableVersion(\"1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_alpha) > 0);\n+        \n+        ComparableVersion version1_1_beta = new ComparableVersion(\"1.1-beta\");\n+        ComparableVersion version1_1_milestone = new ComparableVersion(\"1.1-milestone\");\n+        ComparableVersion version1_1_rc = new ComparableVersion(\"1.1-rc\");\n+        ComparableVersion version1_1_snapshot = new ComparableVersion(\"1.1-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.compareTo(version1_1_beta) < 0);\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        ComparableVersion version1_1_c = new ComparableVersion(\"1.1-c\");\n+        ComparableVersion version1_1_z = new ComparableVersion(\"1.1-z\");\n+        ComparableVersion version1_1_1 = new ComparableVersion(\"1.1.1\");\n+        \n+        assertTrue(version1_1_c.compareTo(version1_1_z) < 0);\n+        assertTrue(version1_1_z.compareTo(version1_1_1) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingGradle_thenCompareVersions() {\n+        VersionNumber version1_1 = VersionNumber.parse(\"1.1\");\n+        VersionNumber version1_2 = VersionNumber.parse(\"1.2\");\n+        VersionNumber version1_3 = VersionNumber.parse(\"1.3\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        VersionNumber version1_1_0 = VersionNumber.parse(\"1.1.0\");\n+        assertEquals(version1_1.compareTo(version1_1_0), 0);\n+        \n+        VersionNumber version1_1_1_1_alpha = VersionNumber.parse(\"1.1.1.1-alpha\");\n+        assertTrue(version1_1.compareTo(version1_1_1_1_alpha) < 0);\n+        \n+        VersionNumber version1_1_beta = VersionNumber.parse(\"1.1.0.0-beta\"); \n+        assertTrue(version1_1_beta.compareTo(version1_1_1_1_alpha) < 0);\n+\n+        VersionNumber version1_1_1_snapshot = VersionNumber.parse(\"1.1.1-snapshot\");\n+        assertTrue(version1_1_1_1_alpha.compareTo(version1_1_1_snapshot) < 0);\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingJackson_thenCompareVersions() {\n+        Version version1_1 = new Version(1, 1, 0, null, null, null);\n+        Version version1_2 = new Version(1, 2, 0, null, null, null);\n+        Version version1_3 = new Version(1, 3, 0, null, null, null);\n+        \n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Version version1_1_1 = new Version(1, 1, 1, null, null, null);\n+        assertTrue(version1_1.compareTo(version1_1_1) < 0);\n+        \n+        Version version1_1_maven = new Version(1, 1, 0, null, \"org.apache.maven\", null);\n+        Version version1_1_gradle = new Version(1, 1, 0, null, \"org.gradle\", null);\n+        assertTrue(version1_1_maven.compareTo(version1_1_gradle) < 0);\n+        \n+        Version version1_1_snapshot = new Version(1, 1, 0, \"snapshot\", null, null);\n+        assertEquals(version1_1.compareTo(version1_1_snapshot), 0);\n+        \n+        assertTrue(version1_1_snapshot.isSnapshot());\n+    }\n+    \n+    @Test\n+    public void givenVersionStrings_whenUsingSemver_thenCompareVersions() {\n+        Semver version1_1 = new Semver(\"1.1.0\");\n+        Semver version1_2 = new Semver(\"1.2.0\");\n+        Semver version1_3 = new Semver(\"1.3.0\");\n+\n+        assertTrue(version1_1.compareTo(version1_2) < 0);\n+        assertTrue(version1_3.compareTo(version1_2) > 0);\n+        \n+        Semver version1_1_alpha = new Semver(\"1.1.0-alpha\");\n+        assertTrue(version1_1.isGreaterThan(version1_1_alpha));\n+        \n+        Semver version1_1_beta = new Semver(\"1.1.0-beta\");\n+        Semver version1_1_milestone = new Semver(\"1.1.0-milestone\");\n+        Semver version1_1_rc = new Semver(\"1.1.0-rc\");\n+        Semver version1_1_snapshot = new Semver(\"1.1.0-snapshot\");\n+        \n+        assertTrue(version1_1_alpha.isLowerThan(version1_1_beta));\n+        assertTrue(version1_1_beta.compareTo(version1_1_milestone) < 0);\n+        assertTrue(version1_1_rc.compareTo(version1_1_snapshot) < 0);\n+        assertTrue(version1_1_snapshot.compareTo(version1_1) < 0);        \n+        \n+        assertTrue(version1_1.isEqualTo(\"1.1.0\"));\n+        \n+        assertEquals(version1_1.diff(\"2.1.0\"), VersionDiff.MAJOR);\n+        assertEquals(version1_1.diff(\"1.2.3\"), VersionDiff.MINOR);\n+        assertEquals(version1_1.diff(\"1.1.1\"), VersionDiff.PATCH);\n+        \n+        assertTrue(version1_1.isStable());\n+        assertFalse(version1_1_alpha.isStable());\n+    }\n+\n+    @Test\n+    public void givenVersionStrings_whenUsingCustomVersionCompare_thenCompareVersions() {\n+        assertTrue(VersionCompare.compareVersions(\"1.0.1\", \"1.1.2\") < 0);\n+        assertTrue(VersionCompare.compareVersions(\"1.0.1\", \"1.10\") < 0);\n+        assertTrue(VersionCompare.compareVersions(\"1.1.2\", \"1.0.1\") > 0);\n+        assertTrue(VersionCompare.compareVersions(\"1.1.2\", \"1.2\") < 0); \n+        assertEquals(VersionCompare.compareVersions(\"1.3.0\", \"1.3\"), 0); ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMyMDQxNA=="}, "originalCommit": {"oid": "932183fabd183c0983f66576811c8df2ae2eaac3"}, "originalPosition": 133}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4306, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}