{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MTg3MTgy", "number": 9040, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0Mjo0NFrODv3wXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzoxMTowMlrOD4uNWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTIzMTY3OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0Mjo0NFrOGCi0YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMzo1ODozOVrOGDwZNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMDgwMQ==", "bodyText": "Missing   between {} and {", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r405320801", "createdAt": "2020-04-08T07:42:44Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.baeldung.java14.foreign.api;\n+\n+import jdk.incubator.foreign.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+\n+import static org.hamcrest.core.Is.*;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertThat;\n+\n+public class ForeignMemoryUnitTest {\n+\n+    @Test\n+    public void whenValueIsSetThenAccessTheValue(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dda319006e3cd1adcfb85ac4d58895737d5d0f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU5MTc5OA==", "bodyText": "Added space between () and { in all unit test methods.", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r406591798", "createdAt": "2020-04-10T03:58:39Z", "author": {"login": "musibs"}, "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.baeldung.java14.foreign.api;\n+\n+import jdk.incubator.foreign.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+\n+import static org.hamcrest.core.Is.*;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertThat;\n+\n+public class ForeignMemoryUnitTest {\n+\n+    @Test\n+    public void whenValueIsSetThenAccessTheValue(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMDgwMQ=="}, "originalCommit": {"oid": "57dda319006e3cd1adcfb85ac4d58895737d5d0f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTIzOTE2OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0NDozOFrOGCi4wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMzo1OTo1NFrOGDwaOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMTkyMA==", "bodyText": "Unit tests with names that start test often don't explain themselves well. Let's stick with the given_when_then style. Maybe whenSetValuesWithMemoryLayout_thenTheyCanBeRetrieved", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r405321920", "createdAt": "2020-04-08T07:44:38Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.baeldung.java14.foreign.api;\n+\n+import jdk.incubator.foreign.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+\n+import static org.hamcrest.core.Is.*;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertThat;\n+\n+public class ForeignMemoryUnitTest {\n+\n+    @Test\n+    public void whenValueIsSetThenAccessTheValue(){\n+        long value = 10;\n+        MemoryAddress memoryAddress = MemorySegment.allocateNative(8).baseAddress();\n+        VarHandle varHandle = MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder());\n+        varHandle.set(memoryAddress, value);\n+        assertThat(varHandle.get(memoryAddress), is(value));\n+    }\n+\n+    @Test\n+    public void whenMultipleValuesAreSetThenAccessAll(){\n+        VarHandle varHandle = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder());\n+        try(MemorySegment memorySegment = MemorySegment.allocateNative(100)){\n+            MemoryAddress base = memorySegment.baseAddress();\n+            for(int i=0; i<25; i++){\n+                varHandle.set(base.addOffset((i*4)), i);\n+            }\n+\n+            for(int i=0; i<25; i++){\n+                assertThat(varHandle.get(base.addOffset((i*4))), is(i));\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testMemoryLayout(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dda319006e3cd1adcfb85ac4d58895737d5d0f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU5MjA1OA==", "bodyText": "Updated all the unit test method names with the given_when_then  style.", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r406592058", "createdAt": "2020-04-10T03:59:54Z", "author": {"login": "musibs"}, "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.baeldung.java14.foreign.api;\n+\n+import jdk.incubator.foreign.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+\n+import static org.hamcrest.core.Is.*;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertThat;\n+\n+public class ForeignMemoryUnitTest {\n+\n+    @Test\n+    public void whenValueIsSetThenAccessTheValue(){\n+        long value = 10;\n+        MemoryAddress memoryAddress = MemorySegment.allocateNative(8).baseAddress();\n+        VarHandle varHandle = MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder());\n+        varHandle.set(memoryAddress, value);\n+        assertThat(varHandle.get(memoryAddress), is(value));\n+    }\n+\n+    @Test\n+    public void whenMultipleValuesAreSetThenAccessAll(){\n+        VarHandle varHandle = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder());\n+        try(MemorySegment memorySegment = MemorySegment.allocateNative(100)){\n+            MemoryAddress base = memorySegment.baseAddress();\n+            for(int i=0; i<25; i++){\n+                varHandle.set(base.addOffset((i*4)), i);\n+            }\n+\n+            for(int i=0; i<25; i++){\n+                assertThat(varHandle.get(base.addOffset((i*4))), is(i));\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testMemoryLayout(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMTkyMA=="}, "originalCommit": {"oid": "57dda319006e3cd1adcfb85ac4d58895737d5d0f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTIzOTg2OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzo0NDo1MVrOGCi5OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNDowMDoyOFrOGDwapA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMjA0MQ==", "bodyText": "Similar test naming issue here.", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r405322041", "createdAt": "2020-04-08T07:44:51Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.baeldung.java14.foreign.api;\n+\n+import jdk.incubator.foreign.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+\n+import static org.hamcrest.core.Is.*;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertThat;\n+\n+public class ForeignMemoryUnitTest {\n+\n+    @Test\n+    public void whenValueIsSetThenAccessTheValue(){\n+        long value = 10;\n+        MemoryAddress memoryAddress = MemorySegment.allocateNative(8).baseAddress();\n+        VarHandle varHandle = MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder());\n+        varHandle.set(memoryAddress, value);\n+        assertThat(varHandle.get(memoryAddress), is(value));\n+    }\n+\n+    @Test\n+    public void whenMultipleValuesAreSetThenAccessAll(){\n+        VarHandle varHandle = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder());\n+        try(MemorySegment memorySegment = MemorySegment.allocateNative(100)){\n+            MemoryAddress base = memorySegment.baseAddress();\n+            for(int i=0; i<25; i++){\n+                varHandle.set(base.addOffset((i*4)), i);\n+            }\n+\n+            for(int i=0; i<25; i++){\n+                assertThat(varHandle.get(base.addOffset((i*4))), is(i));\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testMemoryLayout(){\n+        SequenceLayout sequenceLayout = MemoryLayout.ofSequence(25, MemoryLayout.ofValueBits(64, ByteOrder.nativeOrder()));\n+        VarHandle varHandle = sequenceLayout.varHandle(long.class, MemoryLayout.PathElement.sequenceElement());\n+        try(MemorySegment memorySegment = MemorySegment.allocateNative(sequenceLayout)){\n+            MemoryAddress base = memorySegment.baseAddress();\n+            for(long i=0; i<sequenceLayout.elementCount().getAsLong(); i++){\n+                varHandle.set(base, i, i);\n+            }\n+\n+            for(long i=0; i<sequenceLayout.elementCount().getAsLong(); i++){\n+                assertThat(varHandle.get(base, i), is(i));\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testSlicingOfMemorySegment(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dda319006e3cd1adcfb85ac4d58895737d5d0f"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU5MjE2NA==", "bodyText": "Updated all the unit test method names with the given_when_then style.", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r406592164", "createdAt": "2020-04-10T04:00:28Z", "author": {"login": "musibs"}, "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.baeldung.java14.foreign.api;\n+\n+import jdk.incubator.foreign.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+\n+import static org.hamcrest.core.Is.*;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertThat;\n+\n+public class ForeignMemoryUnitTest {\n+\n+    @Test\n+    public void whenValueIsSetThenAccessTheValue(){\n+        long value = 10;\n+        MemoryAddress memoryAddress = MemorySegment.allocateNative(8).baseAddress();\n+        VarHandle varHandle = MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder());\n+        varHandle.set(memoryAddress, value);\n+        assertThat(varHandle.get(memoryAddress), is(value));\n+    }\n+\n+    @Test\n+    public void whenMultipleValuesAreSetThenAccessAll(){\n+        VarHandle varHandle = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder());\n+        try(MemorySegment memorySegment = MemorySegment.allocateNative(100)){\n+            MemoryAddress base = memorySegment.baseAddress();\n+            for(int i=0; i<25; i++){\n+                varHandle.set(base.addOffset((i*4)), i);\n+            }\n+\n+            for(int i=0; i<25; i++){\n+                assertThat(varHandle.get(base.addOffset((i*4))), is(i));\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testMemoryLayout(){\n+        SequenceLayout sequenceLayout = MemoryLayout.ofSequence(25, MemoryLayout.ofValueBits(64, ByteOrder.nativeOrder()));\n+        VarHandle varHandle = sequenceLayout.varHandle(long.class, MemoryLayout.PathElement.sequenceElement());\n+        try(MemorySegment memorySegment = MemorySegment.allocateNative(sequenceLayout)){\n+            MemoryAddress base = memorySegment.baseAddress();\n+            for(long i=0; i<sequenceLayout.elementCount().getAsLong(); i++){\n+                varHandle.set(base, i, i);\n+            }\n+\n+            for(long i=0; i<sequenceLayout.elementCount().getAsLong(); i++){\n+                assertThat(varHandle.get(base, i), is(i));\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testSlicingOfMemorySegment(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMyMjA0MQ=="}, "originalCommit": {"oid": "57dda319006e3cd1adcfb85ac4d58895737d5d0f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjk1NzczOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMjoyMjo1NVrOGEQeXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzo1NjozMlrOGETNUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNzQwNQ==", "bodyText": "FWIW, I find this harder to read than if it were:\n        MemoryAddress memoryAddress = \n            MemorySegment.allocateNative(8)\n                .baseAddress();\nThe reason is that the hanging MemorySegment on the original, is lost from my memory when I read the following line", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r407117405", "createdAt": "2020-04-11T22:22:55Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.baeldung.java14.foreign.api;\n+\n+import jdk.incubator.foreign.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+\n+import static org.hamcrest.core.Is.*;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertThat;\n+\n+public class ForeignMemoryUnitTest {\n+\n+    @Test\n+    public void whenAValueIsSet_thenAccessTheValue() {\n+        long value = 10;\n+        MemoryAddress memoryAddress = MemorySegment\n+                .allocateNative(8).baseAddress();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68267071e350b63084c0c6ae02a5b3a3b3e0235"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MjE5Mg==", "bodyText": "I have aligned the code snippets as per your suggestion.", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r407162192", "createdAt": "2020-04-12T07:56:32Z", "author": {"login": "musibs"}, "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package com.baeldung.java14.foreign.api;\n+\n+import jdk.incubator.foreign.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+\n+import static org.hamcrest.core.Is.*;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertThat;\n+\n+public class ForeignMemoryUnitTest {\n+\n+    @Test\n+    public void whenAValueIsSet_thenAccessTheValue() {\n+        long value = 10;\n+        MemoryAddress memoryAddress = MemorySegment\n+                .allocateNative(8).baseAddress();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNzQwNQ=="}, "originalCommit": {"oid": "b68267071e350b63084c0c6ae02a5b3a3b3e0235"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjk1OTE0OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-perf/src/main/java/com/baeldung/threaddump/ThreadDump.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMjoyNDo1MlrOGEQfAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzo1NTo0MVrOGETNDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNzU3MA==", "bodyText": "Why is this here?", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r407117570", "createdAt": "2020-04-11T22:24:52Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-perf/src/main/java/com/baeldung/threaddump/ThreadDump.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.baeldung.threaddump;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class ThreadDump {\n+    \n+    public static void main(String[] args) throws IOException {\n+        threadDump(true, true);\n+    }\n+    \n+    private static void threadDump(boolean lockedMonitors, boolean lockedSynchronizers) throws IOException {\n+        Path threadDumpFile = Paths.get(\"ThreadDump.txt\");\n+        \n+        StringBuffer threadDump = new StringBuffer(System.lineSeparator());\n+        ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();\n+        for(ThreadInfo threadInfo : threadMXBean.dumpAllThreads(lockedMonitors, lockedSynchronizers)) {\n+            threadDump.append(threadInfo.toString());\n+        }\n+        Files.write(threadDumpFile, threadDump.toString().getBytes());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68267071e350b63084c0c6ae02a5b3a3b3e0235"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MjEyNg==", "bodyText": "This commit has accidentally become part of this pull request. It was for my previous article. I have deleted the file and committed the changes.", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r407162126", "createdAt": "2020-04-12T07:55:41Z", "author": {"login": "musibs"}, "path": "core-java-modules/core-java-perf/src/main/java/com/baeldung/threaddump/ThreadDump.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.baeldung.threaddump;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.ThreadInfo;\n+import java.lang.management.ThreadMXBean;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class ThreadDump {\n+    \n+    public static void main(String[] args) throws IOException {\n+        threadDump(true, true);\n+    }\n+    \n+    private static void threadDump(boolean lockedMonitors, boolean lockedSynchronizers) throws IOException {\n+        Path threadDumpFile = Paths.get(\"ThreadDump.txt\");\n+        \n+        StringBuffer threadDump = new StringBuffer(System.lineSeparator());\n+        ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();\n+        for(ThreadInfo threadInfo : threadMXBean.dumpAllThreads(lockedMonitors, lockedSynchronizers)) {\n+            threadDump.append(threadInfo.toString());\n+        }\n+        Files.write(threadDumpFile, threadDump.toString().getBytes());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExNzU3MA=="}, "originalCommit": {"oid": "b68267071e350b63084c0c6ae02a5b3a3b3e0235"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDI2ODE0OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java/src/main/java/com/baeldung/java/hexagonal/DefaultUserService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToxNjoxMlrOGGzo1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzozMzo1NFrOGJnyXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MDY3OQ==", "bodyText": "indentation.", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r409790679", "createdAt": "2020-04-16T19:16:12Z", "author": {"login": "sinsuren"}, "path": "core-java-modules/core-java/src/main/java/com/baeldung/java/hexagonal/DefaultUserService.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.baeldung.java.hexagonal;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+/**\n+ *  Default implementation of user service \n+ */\n+public class DefaultUserService implements UserService{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373be297884202ab6bf1f2032db6aca492f0b8a6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk5NTI2OQ==", "bodyText": "These changes are tab indented and should not be in this PR. Please revert them.", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r410995269", "createdAt": "2020-04-19T21:28:32Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java/src/main/java/com/baeldung/java/hexagonal/DefaultUserService.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.baeldung.java.hexagonal;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+/**\n+ *  Default implementation of user service \n+ */\n+public class DefaultUserService implements UserService{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MDY3OQ=="}, "originalCommit": {"oid": "373be297884202ab6bf1f2032db6aca492f0b8a6"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0MjIzOQ==", "bodyText": "@sinsuren and @ashleyfrieze\nThanks for the review. These files are part of my first demo article and accidentally part of this PR. I have now removed the complete package. I'll be careful and verify the commits part of the PR.", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r412742239", "createdAt": "2020-04-22T07:33:54Z", "author": {"login": "musibs"}, "path": "core-java-modules/core-java/src/main/java/com/baeldung/java/hexagonal/DefaultUserService.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.baeldung.java.hexagonal;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+/**\n+ *  Default implementation of user service \n+ */\n+public class DefaultUserService implements UserService{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MDY3OQ=="}, "originalCommit": {"oid": "373be297884202ab6bf1f2032db6aca492f0b8a6"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDI3MjExOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java/src/main/java/com/baeldung/java/hexagonal/InMemoryUserRepositoryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToxNzoyNlrOGGzrdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToxNzoyNlrOGGzrdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MTM0OQ==", "bodyText": "UserRepository {", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r409791349", "createdAt": "2020-04-16T19:17:26Z", "author": {"login": "sinsuren"}, "path": "core-java-modules/core-java/src/main/java/com/baeldung/java/hexagonal/InMemoryUserRepositoryImpl.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.baeldung.java.hexagonal;\n+\n+/**\n+ * An in-memory implementation of the UserRepository\n+ */\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+public class InMemoryUserRepositoryImpl implements UserRepository{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373be297884202ab6bf1f2032db6aca492f0b8a6"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDI3Mzk3OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java/src/main/java/com/baeldung/java/hexagonal/InMemoryUserRepositoryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToxNzo1NVrOGGzsig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToxNzo1NVrOGGzsig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MTYyNg==", "bodyText": "space indentation is also not uniform across files.", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r409791626", "createdAt": "2020-04-16T19:17:55Z", "author": {"login": "sinsuren"}, "path": "core-java-modules/core-java/src/main/java/com/baeldung/java/hexagonal/InMemoryUserRepositoryImpl.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.baeldung.java.hexagonal;\n+\n+/**\n+ * An in-memory implementation of the UserRepository\n+ */\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+public class InMemoryUserRepositoryImpl implements UserRepository{\n+\n+\t@Override\n+\tpublic User save(User user) {\n+\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "373be297884202ab6bf1f2032db6aca492f0b8a6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODAzOTMwOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzoxMTowMlrOGPoIYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNDowODo0OVrOGPoaIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzOTMzMQ==", "bodyText": "Indentation guidelines prescribe a 4-space indent for nested blocks and 2-space indent for continuation lines. Please adjust the indentation in this file accordingly.", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r419039331", "createdAt": "2020-05-03T03:11:02Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.baeldung.java14.foreign.api;\n+\n+import jdk.incubator.foreign.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+\n+import static org.hamcrest.core.Is.*;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertThat;\n+\n+public class ForeignMemoryUnitTest {\n+\n+    @Test\n+    public void whenAValueIsSet_thenAccessTheValue() {\n+        long value = 10;\n+        MemoryAddress memoryAddress =\n+                MemorySegment.allocateNative(8)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccc9fd2a237c0371262939a55e639df9a51001e2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0Mzg3NQ==", "bodyText": "Thanks for the review and the feedback. I've incorporated the changes as asked. Kindly review,", "url": "https://github.com/eugenp/tutorials/pull/9040#discussion_r419043875", "createdAt": "2020-05-03T04:08:49Z", "author": {"login": "musibs"}, "path": "core-java-modules/core-java-14/src/test/java/com/baeldung/java14/foreign/api/ForeignMemoryUnitTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package com.baeldung.java14.foreign.api;\n+\n+import jdk.incubator.foreign.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.BlockJUnit4ClassRunner;\n+\n+import java.lang.invoke.VarHandle;\n+import java.nio.ByteOrder;\n+\n+import static org.hamcrest.core.Is.*;\n+import static org.hamcrest.core.Is.is;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertThat;\n+\n+public class ForeignMemoryUnitTest {\n+\n+    @Test\n+    public void whenAValueIsSet_thenAccessTheValue() {\n+        long value = 10;\n+        MemoryAddress memoryAddress =\n+                MemorySegment.allocateNative(8)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAzOTMzMQ=="}, "originalCommit": {"oid": "ccc9fd2a237c0371262939a55e639df9a51001e2"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4023, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}