{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MzMwNDgz", "number": 9760, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxNTozNzowOVrOEUZKdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMTo1NTowMFrOEUbAiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODE5MjUyOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-reflection-2/src/test/java/com/baeldung/reflection/set/fields/SetFieldsUsingReflectionUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxNTozNzowOVrOG6l6ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxNTozNzowOVrOG6l6ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA5MTgxMQ==", "bodyText": "Don't need a wrapper class to demonstrate narrowing. Use the short primitive.", "url": "https://github.com/eugenp/tutorials/pull/9760#discussion_r464091811", "createdAt": "2020-08-02T15:37:09Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-reflection-2/src/test/java/com/baeldung/reflection/set/fields/SetFieldsUsingReflectionUnitTest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+package com.baeldung.reflection.set.fields;\n+\n+import java.lang.reflect.Field;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+public class SetFieldsUsingReflectionUnitTest {\n+\n+    @Test\n+    public void whenSetIntegerFields_thenSuccess() throws Exception {\n+        Person person = new Person();\n+\n+        Field ageField = person.getClass()\n+            .getDeclaredField(\"age\");\n+        ageField.setAccessible(true);\n+\n+        byte age = 26;\n+        ageField.setByte(person, age);\n+        Assertions.assertEquals(26, person.getAge());\n+\n+        Field uidNumberField = person.getClass()\n+            .getDeclaredField(\"uidNumber\");\n+        uidNumberField.setAccessible(true);\n+\n+        short uidNumber = 5555;\n+        uidNumberField.setShort(person, uidNumber);\n+        Assertions.assertEquals(5555, person.getUidNumber());\n+\n+        Field pinCodeField = person.getClass()\n+            .getDeclaredField(\"pinCode\");\n+        pinCodeField.setAccessible(true);\n+\n+        int pinCode = 411057;\n+        pinCodeField.setInt(person, pinCode);\n+        Assertions.assertEquals(411057, person.getPinCode());\n+\n+        Field contactNumberField = person.getClass()\n+            .getDeclaredField(\"contactNumber\");\n+        contactNumberField.setAccessible(true);\n+\n+        long contactNumber = 123456789L;\n+        contactNumberField.setLong(person, contactNumber);\n+        Assertions.assertEquals(123456789L, person.getContactNumber());\n+\n+    }\n+\n+    @Test\n+    public void whenDoUnboxing_thenSuccess() throws Exception {\n+        Person person = new Person();\n+\n+        Field pinCodeField = person.getClass()\n+            .getDeclaredField(\"pinCode\");\n+        pinCodeField.setAccessible(true);\n+\n+        Integer pinCode = 411057;\n+        pinCodeField.setInt(person, pinCode);\n+        Assertions.assertEquals(411057, person.getPinCode());\n+    }\n+\n+    @Test\n+    public void whenDoNarrowing_thenSuccess() throws Exception {\n+        Person person = new Person();\n+\n+        Field pinCodeField = person.getClass()\n+            .getDeclaredField(\"pinCode\");\n+        pinCodeField.setAccessible(true);\n+\n+        Short pinCode = 4110;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa6d3e5b0f60afac303a0449f88b05aa7c002f56"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODQ5MzQ4OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-reflection-2/src/test/java/com/baeldung/reflection/set/fields/SetFieldsUsingReflectionUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMTo1MzoxOVrOG6oHcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMTo1MzoxOVrOG6oHcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyNzg1Ng==", "bodyText": "Change to Assertions.assertEquals(uidNumber, person.getUidNumber());. Similarly, change in other places as well", "url": "https://github.com/eugenp/tutorials/pull/9760#discussion_r464127856", "createdAt": "2020-08-02T21:53:19Z", "author": {"login": "rahilsh"}, "path": "core-java-modules/core-java-reflection-2/src/test/java/com/baeldung/reflection/set/fields/SetFieldsUsingReflectionUnitTest.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package com.baeldung.reflection.set.fields;\n+\n+import java.lang.reflect.Field;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import com.baeldung.reflection.access.privatefields.Person;\n+\n+public class SetFieldsUsingReflectionUnitTest {\n+\n+    @Test\n+    public void whenSetIntegerFields_thenSuccess() throws Exception {\n+        Person person = new Person();\n+\n+        Field ageField = person.getClass()\n+            .getDeclaredField(\"age\");\n+        ageField.setAccessible(true);\n+\n+        byte age = 26;\n+        ageField.setByte(person, age);\n+        Assertions.assertEquals(26, person.getAge());\n+\n+        Field uidNumberField = person.getClass()\n+            .getDeclaredField(\"uidNumber\");\n+        uidNumberField.setAccessible(true);\n+\n+        short uidNumber = 5555;\n+        uidNumberField.setShort(person, uidNumber);\n+        Assertions.assertEquals(5555, person.getUidNumber());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "369caa555f64d6d48f0c54dc6dc589b259f5e781"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODQ5NDgzOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-reflection-2/src/test/java/com/baeldung/reflection/set/fields/SetFieldsUsingReflectionUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMTo1NTowMFrOG6oIDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMTo1NTowMFrOG6oIDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyODAxNQ==", "bodyText": "Avoid unnecessary variable declaration, change to just activeField.setBoolean(person, true);", "url": "https://github.com/eugenp/tutorials/pull/9760#discussion_r464128015", "createdAt": "2020-08-02T21:55:00Z", "author": {"login": "rahilsh"}, "path": "core-java-modules/core-java-reflection-2/src/test/java/com/baeldung/reflection/set/fields/SetFieldsUsingReflectionUnitTest.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package com.baeldung.reflection.set.fields;\n+\n+import java.lang.reflect.Field;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import com.baeldung.reflection.access.privatefields.Person;\n+\n+public class SetFieldsUsingReflectionUnitTest {\n+\n+    @Test\n+    public void whenSetIntegerFields_thenSuccess() throws Exception {\n+        Person person = new Person();\n+\n+        Field ageField = person.getClass()\n+            .getDeclaredField(\"age\");\n+        ageField.setAccessible(true);\n+\n+        byte age = 26;\n+        ageField.setByte(person, age);\n+        Assertions.assertEquals(26, person.getAge());\n+\n+        Field uidNumberField = person.getClass()\n+            .getDeclaredField(\"uidNumber\");\n+        uidNumberField.setAccessible(true);\n+\n+        short uidNumber = 5555;\n+        uidNumberField.setShort(person, uidNumber);\n+        Assertions.assertEquals(5555, person.getUidNumber());\n+\n+        Field pinCodeField = person.getClass()\n+            .getDeclaredField(\"pinCode\");\n+        pinCodeField.setAccessible(true);\n+\n+        int pinCode = 411057;\n+        pinCodeField.setInt(person, pinCode);\n+        Assertions.assertEquals(411057, person.getPinCode());\n+\n+        Field contactNumberField = person.getClass()\n+            .getDeclaredField(\"contactNumber\");\n+        contactNumberField.setAccessible(true);\n+\n+        long contactNumber = 123456789L;\n+        contactNumberField.setLong(person, contactNumber);\n+        Assertions.assertEquals(123456789L, person.getContactNumber());\n+\n+    }\n+\n+    @Test\n+    public void whenDoUnboxing_thenSuccess() throws Exception {\n+        Person person = new Person();\n+\n+        Field pinCodeField = person.getClass()\n+            .getDeclaredField(\"pinCode\");\n+        pinCodeField.setAccessible(true);\n+\n+        Integer pinCode = 411057;\n+        pinCodeField.setInt(person, pinCode);\n+        Assertions.assertEquals(411057, person.getPinCode());\n+    }\n+\n+    @Test\n+    public void whenDoNarrowing_thenSuccess() throws Exception {\n+        Person person = new Person();\n+\n+        Field pinCodeField = person.getClass()\n+            .getDeclaredField(\"pinCode\");\n+        pinCodeField.setAccessible(true);\n+\n+        short pinCode = 4110;\n+        pinCodeField.setInt(person, pinCode);\n+        Assertions.assertEquals(4110, person.getPinCode());\n+    }\n+\n+    @Test\n+    public void whenSetFloatingTypeFields_thenSuccess() throws Exception {\n+        Person person = new Person();\n+\n+        Field heightField = person.getClass()\n+            .getDeclaredField(\"height\");\n+        heightField.setAccessible(true);\n+\n+        float height = 6.1242f;\n+        heightField.setFloat(person, height);\n+        Assertions.assertEquals(6.1242f, person.getHeight());\n+\n+        Field weightField = person.getClass()\n+            .getDeclaredField(\"weight\");\n+        weightField.setAccessible(true);\n+\n+        double weight = 75.2564;\n+        weightField.setDouble(person, weight);\n+        Assertions.assertEquals(75.2564, person.getWeight());\n+    }\n+\n+    @Test\n+    public void whenSetCharacterFields_thenSuccess() throws Exception {\n+        Person person = new Person();\n+\n+        Field genderField = person.getClass()\n+            .getDeclaredField(\"gender\");\n+        genderField.setAccessible(true);\n+\n+        char gender = 'M';\n+        genderField.setChar(person, gender);\n+        Assertions.assertEquals('M', person.getGender());\n+    }\n+\n+    @Test\n+    public void whenSetBooleanFields_thenSuccess() throws Exception {\n+        Person person = new Person();\n+\n+        Field activeField = person.getClass()\n+            .getDeclaredField(\"active\");\n+        activeField.setAccessible(true);\n+\n+        boolean active = true;\n+        activeField.setBoolean(person, active);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "369caa555f64d6d48f0c54dc6dc589b259f5e781"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4284, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}