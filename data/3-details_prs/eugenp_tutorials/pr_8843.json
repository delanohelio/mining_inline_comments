{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1ODYyOTM0", "number": 8843, "title": "BAEL-3603 Add test examples for Java IO versus NIO article", "bodyText": "", "createdAt": "2020-03-09T23:20:06Z", "url": "https://github.com/eugenp/tutorials/pull/8843", "merged": true, "mergeCommit": {"oid": "a77d5c5760b068a6fb78e30e25e4d6e8555c0ccf"}, "closed": true, "closedAt": "2020-03-18T19:50:23Z", "author": {"login": "rojyates"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMGYXWgH2gAyMzg1ODYyOTM0OjRlMWQ3ZTc4NTA4YTEyNGU2NjBlYjliYjVlMmJjYjZiMzNlYjYzOTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOUO-mgH2gAyMzg1ODYyOTM0OmQ2OTUxM2EyYzllMGVlNzM4ZGM0ODAzMmQ5NzY3M2QyYWVmZTgyZjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4e1d7e78508a124e660eb9bb5e2bcb6b33eb6393", "author": {"user": {"login": "rojyates", "name": "Roger"}}, "url": "https://github.com/eugenp/tutorials/commit/4e1d7e78508a124e660eb9bb5e2bcb6b33eb6393", "committedDate": "2020-03-09T23:19:13Z", "message": "BAEL-3603 Add test examples for Java IO versus NIO article"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a795787640796c98f5f2c87f290b431cce8070e", "author": {"user": {"login": "rojyates", "name": "Roger"}}, "url": "https://github.com/eugenp/tutorials/commit/0a795787640796c98f5f2c87f290b431cce8070e", "committedDate": "2020-03-11T20:12:42Z", "message": "BAEL-3603 Add line separator to preserve lines read"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0ODExOTE0", "url": "https://github.com/eugenp/tutorials/pull/8843#pullrequestreview-374811914", "createdAt": "2020-03-15T16:04:59Z", "commit": {"oid": "0a795787640796c98f5f2c87f290b431cce8070e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjowNDo1OVrOF2fwug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjowNDo1OVrOF2fwug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4NzgwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void givenJavaNIOSocketChannel_whenReadingAndWriting_thenUseBuffers() throws IOException {\n          \n          \n            \n                public void givenJavaNIOSocketChannel_whenReadingAndWritingWithBuffers_thenSuccess() throws IOException {", "url": "https://github.com/eugenp/tutorials/pull/8843#discussion_r392687802", "createdAt": "2020-03-15T16:04:59Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-io-2/src/test/java/com/baeldung/blockingnonblocking/NonBlockingClientUnitTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.baeldung.blockingnonblocking;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.channels.SocketChannel;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.*;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n+import static org.junit.Assert.assertTrue;\n+\n+public class NonBlockingClientUnitTest {\n+    private String REQUESTED_RESOURCE = \"/test.json\";\n+\n+    @Rule public WireMockRule wireMockRule = new WireMockRule(wireMockConfig().dynamicPort());\n+\n+    @Before\n+    public void setup() {\n+        stubFor(get(urlEqualTo(REQUESTED_RESOURCE)).willReturn(aResponse()\n+          .withStatus(200)\n+          .withBody(\"{ \\\"response\\\" : \\\"It worked!\\\" }\")));\n+    }\n+\n+    @Test\n+    public void givenJavaNIOSocketChannel_whenReadingAndWriting_thenUseBuffers() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a795787640796c98f5f2c87f290b431cce8070e"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0ODExOTQ4", "url": "https://github.com/eugenp/tutorials/pull/8843#pullrequestreview-374811948", "createdAt": "2020-03-15T16:05:26Z", "commit": {"oid": "0a795787640796c98f5f2c87f290b431cce8070e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjowNToyNlrOF2fw1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjowNToyNlrOF2fw1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4NzgzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void givenJavaNIO_whenReadingAndWriting_thenSmallBuffers() throws IOException {\n          \n          \n            \n                public void givenJavaNIO_whenReadingAndWritingWithSmallBuffers_thenSuccess() throws IOException {", "url": "https://github.com/eugenp/tutorials/pull/8843#discussion_r392687831", "createdAt": "2020-03-15T16:05:26Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-io-2/src/test/java/com/baeldung/blockingnonblocking/NonBlockingClientUnitTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.baeldung.blockingnonblocking;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.channels.SocketChannel;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.*;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n+import static org.junit.Assert.assertTrue;\n+\n+public class NonBlockingClientUnitTest {\n+    private String REQUESTED_RESOURCE = \"/test.json\";\n+\n+    @Rule public WireMockRule wireMockRule = new WireMockRule(wireMockConfig().dynamicPort());\n+\n+    @Before\n+    public void setup() {\n+        stubFor(get(urlEqualTo(REQUESTED_RESOURCE)).willReturn(aResponse()\n+          .withStatus(200)\n+          .withBody(\"{ \\\"response\\\" : \\\"It worked!\\\" }\")));\n+    }\n+\n+    @Test\n+    public void givenJavaNIOSocketChannel_whenReadingAndWriting_thenUseBuffers() throws IOException {\n+        // given a NIO SocketChannel and a charset\n+        InetSocketAddress address = new InetSocketAddress(\"localhost\", wireMockRule.port());\n+        SocketChannel socketChannel = SocketChannel.open(address);\n+        Charset charset = StandardCharsets.UTF_8;\n+\n+        // when we write and read using buffers\n+        socketChannel.write(charset.encode(CharBuffer.wrap(\"GET \" + REQUESTED_RESOURCE + \" HTTP/1.0\\r\\n\\r\\n\")));\n+\n+        ByteBuffer buffer = ByteBuffer.allocate(8); // or allocateDirect if we need direct memory access\n+        CharBuffer charBuffer = CharBuffer.allocate(8192);\n+        CharsetDecoder decoder = charset.newDecoder();\n+        StringBuilder ourStore = new StringBuilder();\n+        while (socketChannel.read(buffer) != -1 || buffer.position() > 0) {\n+            buffer.flip();\n+            storeBufferContents(buffer, charBuffer, decoder, ourStore);\n+            buffer.compact();\n+        }\n+        socketChannel.close();\n+\n+        // then we read and saved our data\n+        assertTrue(ourStore\n+          .toString()\n+          .contains(\"It worked!\"));\n+    }\n+\n+    @Test\n+    public void givenJavaNIO_whenReadingAndWriting_thenSmallBuffers() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a795787640796c98f5f2c87f290b431cce8070e"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0ODEyMDA0", "url": "https://github.com/eugenp/tutorials/pull/8843#pullrequestreview-374812004", "createdAt": "2020-03-15T16:06:07Z", "commit": {"oid": "0a795787640796c98f5f2c87f290b431cce8070e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjowNjowN1rOF2fxJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjowNjowN1rOF2fxJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY4NzkwOA==", "bodyText": "Recommend naming this variable socketChannel to be consistent with the previous test", "url": "https://github.com/eugenp/tutorials/pull/8843#discussion_r392687908", "createdAt": "2020-03-15T16:06:07Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-io-2/src/test/java/com/baeldung/blockingnonblocking/NonBlockingClientUnitTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.baeldung.blockingnonblocking;\n+\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.channels.SocketChannel;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetDecoder;\n+import java.nio.charset.StandardCharsets;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.*;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.wireMockConfig;\n+import static org.junit.Assert.assertTrue;\n+\n+public class NonBlockingClientUnitTest {\n+    private String REQUESTED_RESOURCE = \"/test.json\";\n+\n+    @Rule public WireMockRule wireMockRule = new WireMockRule(wireMockConfig().dynamicPort());\n+\n+    @Before\n+    public void setup() {\n+        stubFor(get(urlEqualTo(REQUESTED_RESOURCE)).willReturn(aResponse()\n+          .withStatus(200)\n+          .withBody(\"{ \\\"response\\\" : \\\"It worked!\\\" }\")));\n+    }\n+\n+    @Test\n+    public void givenJavaNIOSocketChannel_whenReadingAndWriting_thenUseBuffers() throws IOException {\n+        // given a NIO SocketChannel and a charset\n+        InetSocketAddress address = new InetSocketAddress(\"localhost\", wireMockRule.port());\n+        SocketChannel socketChannel = SocketChannel.open(address);\n+        Charset charset = StandardCharsets.UTF_8;\n+\n+        // when we write and read using buffers\n+        socketChannel.write(charset.encode(CharBuffer.wrap(\"GET \" + REQUESTED_RESOURCE + \" HTTP/1.0\\r\\n\\r\\n\")));\n+\n+        ByteBuffer buffer = ByteBuffer.allocate(8); // or allocateDirect if we need direct memory access\n+        CharBuffer charBuffer = CharBuffer.allocate(8192);\n+        CharsetDecoder decoder = charset.newDecoder();\n+        StringBuilder ourStore = new StringBuilder();\n+        while (socketChannel.read(buffer) != -1 || buffer.position() > 0) {\n+            buffer.flip();\n+            storeBufferContents(buffer, charBuffer, decoder, ourStore);\n+            buffer.compact();\n+        }\n+        socketChannel.close();\n+\n+        // then we read and saved our data\n+        assertTrue(ourStore\n+          .toString()\n+          .contains(\"It worked!\"));\n+    }\n+\n+    @Test\n+    public void givenJavaNIO_whenReadingAndWriting_thenSmallBuffers() throws IOException {\n+        // given a NIO SocketChannel and a charset\n+        InetSocketAddress address = new InetSocketAddress(\"localhost\", wireMockRule.port());\n+        SocketChannel socket = SocketChannel.open(address);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a795787640796c98f5f2c87f290b431cce8070e"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "944ac49aa25ba372102c82135c477c0d8abbeccc", "author": {"user": {"login": "rojyates", "name": "Roger"}}, "url": "https://github.com/eugenp/tutorials/commit/944ac49aa25ba372102c82135c477c0d8abbeccc", "committedDate": "2020-03-15T20:24:59Z", "message": "BAEL-3603 Update method names and variable name for PR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0ODMwODkx", "url": "https://github.com/eugenp/tutorials/pull/8843#pullrequestreview-374830891", "createdAt": "2020-03-15T20:27:42Z", "commit": {"oid": "944ac49aa25ba372102c82135c477c0d8abbeccc"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ceff49afe39099eff2090efc94638f2a79625836", "author": {"user": {"login": "rojyates", "name": "Roger"}}, "url": "https://github.com/eugenp/tutorials/commit/ceff49afe39099eff2090efc94638f2a79625836", "committedDate": "2020-03-16T20:32:39Z", "message": "BAEL-3603 Update variable names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d69513a2c9e0ee738dc48032d97673d2aefe82f7", "author": {"user": {"login": "rojyates", "name": "Roger"}}, "url": "https://github.com/eugenp/tutorials/commit/d69513a2c9e0ee738dc48032d97673d2aefe82f7", "committedDate": "2020-03-16T20:35:29Z", "message": "BAEL-3603 Update variable names"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4126, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}