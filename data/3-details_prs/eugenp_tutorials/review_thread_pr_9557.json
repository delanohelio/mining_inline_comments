{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MDg3ODMw", "number": 9557, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzowNzoyNlrOEKgM5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxNjoxMlrOEKgaBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDQ4ODA2OnYy", "diffSide": "RIGHT", "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzowNzoyNlrOGrlGhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzowNzoyNlrOGrlGhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0OTgyOQ==", "bodyText": "Let's remove this unused import", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448349829", "createdAt": "2020-07-01T13:07:26Z", "author": {"login": "JonCook"}, "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDQ5MDI0OnYy", "diffSide": "RIGHT", "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzowNzo1OFrOGrlHyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxMzozMjowM1rOGzoSMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MDE1Mg==", "bodyText": "Let's fix the warning about raw types if possible.", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448350152", "createdAt": "2020-07-01T13:07:58Z", "author": {"login": "JonCook"}, "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.jsonldjava.core.JsonLdOptions;\n+import com.github.jsonldjava.core.JsonLdProcessor;\n+import com.github.jsonldjava.utils.JsonUtils;\n+\n+public class JacksonDeserializationExample {\n+    public static void main(String[] args) throws IOException {\n+        String exampleJsonld =\"{\" + \n+           \"  \\\"@context\\\": {\" + \n+           \"    \\\"@vocab\\\": \\\"http://schema.org/\\\",\" + \n+           \"    \\\"knows\\\": {\" + \n+           \"      \\\"@type\\\": \\\"@id\\\"\" + \n+           \"    }\" + \n+           \"  },\" + \n+           \"  \\\"@type\\\": \\\"Person\\\",\" + \n+           \"  \\\"@id\\\": \\\"http://example.com/person/1234\\\",\" + \n+           \"  \\\"name\\\": \\\"Example Name\\\",\" + \n+           \"  \\\"knows\\\": \\\"http://example.com/person/2345\\\"\" + \n+           \"}\";\n+\n+        Object jsonObject = JsonUtils.fromString(exampleJsonld);\n+        Object compact = JsonLdProcessor.compact(jsonObject, new HashMap(), new JsonLdOptions());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3NjYxOQ==", "bodyText": "I must have some settings not properly set because I see no warnings. Could you point me in the right direction?", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r453376619", "createdAt": "2020-07-12T23:30:53Z", "author": {"login": "mdhtr"}, "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.jsonldjava.core.JsonLdOptions;\n+import com.github.jsonldjava.core.JsonLdProcessor;\n+import com.github.jsonldjava.utils.JsonUtils;\n+\n+public class JacksonDeserializationExample {\n+    public static void main(String[] args) throws IOException {\n+        String exampleJsonld =\"{\" + \n+           \"  \\\"@context\\\": {\" + \n+           \"    \\\"@vocab\\\": \\\"http://schema.org/\\\",\" + \n+           \"    \\\"knows\\\": {\" + \n+           \"      \\\"@type\\\": \\\"@id\\\"\" + \n+           \"    }\" + \n+           \"  },\" + \n+           \"  \\\"@type\\\": \\\"Person\\\",\" + \n+           \"  \\\"@id\\\": \\\"http://example.com/person/1234\\\",\" + \n+           \"  \\\"name\\\": \\\"Example Name\\\",\" + \n+           \"  \\\"knows\\\": \\\"http://example.com/person/2345\\\"\" + \n+           \"}\";\n+\n+        Object jsonObject = JsonUtils.fromString(exampleJsonld);\n+        Object compact = JsonLdProcessor.compact(jsonObject, new HashMap(), new JsonLdOptions());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MDE1Mg=="}, "originalCommit": {"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5MDU3OA==", "bodyText": "The warning here is - HashMap is a raw type. References to generic type HashMap<K,V> should be parameterized. It can be fixed like - new HashMap<>()", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r456790578", "createdAt": "2020-07-18T13:32:03Z", "author": {"login": "JonCook"}, "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.jsonldjava.core.JsonLdOptions;\n+import com.github.jsonldjava.core.JsonLdProcessor;\n+import com.github.jsonldjava.utils.JsonUtils;\n+\n+public class JacksonDeserializationExample {\n+    public static void main(String[] args) throws IOException {\n+        String exampleJsonld =\"{\" + \n+           \"  \\\"@context\\\": {\" + \n+           \"    \\\"@vocab\\\": \\\"http://schema.org/\\\",\" + \n+           \"    \\\"knows\\\": {\" + \n+           \"      \\\"@type\\\": \\\"@id\\\"\" + \n+           \"    }\" + \n+           \"  },\" + \n+           \"  \\\"@type\\\": \\\"Person\\\",\" + \n+           \"  \\\"@id\\\": \\\"http://example.com/person/1234\\\",\" + \n+           \"  \\\"name\\\": \\\"Example Name\\\",\" + \n+           \"  \\\"knows\\\": \\\"http://example.com/person/2345\\\"\" + \n+           \"}\";\n+\n+        Object jsonObject = JsonUtils.fromString(exampleJsonld);\n+        Object compact = JsonLdProcessor.compact(jsonObject, new HashMap(), new JsonLdOptions());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MDE1Mg=="}, "originalCommit": {"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDQ5ODMzOnYy", "diffSide": "RIGHT", "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxMDoxOFrOGrlM9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoyOTowMVrOG0aPIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MTQ3Nw==", "bodyText": "I'm not a big fan of these *Example type classes with the main method. Let's move this into a unit test using the test method names (givenX_whenY_thenZ) as mentioned in the author guidelines.\nIn general, we want as much coverage as possible on our new code. Putting it in a unit test is also easier for readers to run the code and also we validate that it is working as expected.", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448351477", "createdAt": "2020-07-01T13:10:18Z", "author": {"login": "JonCook"}, "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.jsonldjava.core.JsonLdOptions;\n+import com.github.jsonldjava.core.JsonLdProcessor;\n+import com.github.jsonldjava.utils.JsonUtils;\n+\n+public class JacksonDeserializationExample {\n+    public static void main(String[] args) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3NjM1Ng==", "bodyText": "@JonCook I've converted everything into unit tests, but I'm not confident that I've found good names for these tests. Using assertions is definitely better than console prints, so I am happy in that regard, however, the Eclipse formatter doesn't allow multiline strings, so the inline JSON objects look terrible.", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r453376356", "createdAt": "2020-07-12T23:28:19Z", "author": {"login": "mdhtr"}, "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.jsonldjava.core.JsonLdOptions;\n+import com.github.jsonldjava.core.JsonLdProcessor;\n+import com.github.jsonldjava.utils.JsonUtils;\n+\n+public class JacksonDeserializationExample {\n+    public static void main(String[] args) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MTQ3Nw=="}, "originalCommit": {"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5MTE4MA==", "bodyText": "I think the test approach is good! Could we shorten the test names a little? I think you are on the right track. e.g\ngivenAJsonLdObject_whenCompactIsUsedWithEmptyContext_thenItCanBeDeserializedIntoAJacksonAnnotatedJavaObject()\nCould become for example (just an idea):\ngivenAJsonLdString_whenCompactIsUsedWithEmptyContext_thenDeserializedCorrectly()\nLet's also please move the Person class into the main src tree.\nFinally, I agree the inline JSON does not look good. I'm afraid we will have to fix that manually without using the formatter.", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r456791180", "createdAt": "2020-07-18T13:39:37Z", "author": {"login": "JonCook"}, "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.jsonldjava.core.JsonLdOptions;\n+import com.github.jsonldjava.core.JsonLdProcessor;\n+import com.github.jsonldjava.utils.JsonUtils;\n+\n+public class JacksonDeserializationExample {\n+    public static void main(String[] args) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MTQ3Nw=="}, "originalCommit": {"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwODk5Mw==", "bodyText": "@JonCook is givenAJsonLdObject_whenCompactIsUsedWithEmptyContext_thenItCanBeDeserializedWithJackson() okay? Are the two other test names okay like they are?", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r457608993", "createdAt": "2020-07-20T18:29:01Z", "author": {"login": "mdhtr"}, "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.jsonldjava.core.JsonLdOptions;\n+import com.github.jsonldjava.core.JsonLdProcessor;\n+import com.github.jsonldjava.utils.JsonUtils;\n+\n+public class JacksonDeserializationExample {\n+    public static void main(String[] args) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MTQ3Nw=="}, "originalCommit": {"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDUwMDMxOnYy", "diffSide": "RIGHT", "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxMDo0OVrOGrlOKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxMDo0OVrOGrlOKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MTc4Nw==", "bodyText": "These system.out will likely become assert statements. But if you want to print, let's use a proper logger.", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448351787", "createdAt": "2020-07-01T13:10:49Z", "author": {"login": "JonCook"}, "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonDeserializationExample.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.jsonldjava.core.JsonLdOptions;\n+import com.github.jsonldjava.core.JsonLdProcessor;\n+import com.github.jsonldjava.utils.JsonUtils;\n+\n+public class JacksonDeserializationExample {\n+    public static void main(String[] args) throws IOException {\n+        String exampleJsonld =\"{\" + \n+           \"  \\\"@context\\\": {\" + \n+           \"    \\\"@vocab\\\": \\\"http://schema.org/\\\",\" + \n+           \"    \\\"knows\\\": {\" + \n+           \"      \\\"@type\\\": \\\"@id\\\"\" + \n+           \"    }\" + \n+           \"  },\" + \n+           \"  \\\"@type\\\": \\\"Person\\\",\" + \n+           \"  \\\"@id\\\": \\\"http://example.com/person/1234\\\",\" + \n+           \"  \\\"name\\\": \\\"Example Name\\\",\" + \n+           \"  \\\"knows\\\": \\\"http://example.com/person/2345\\\"\" + \n+           \"}\";\n+\n+        Object jsonObject = JsonUtils.fromString(exampleJsonld);\n+        Object compact = JsonLdProcessor.compact(jsonObject, new HashMap(), new JsonLdOptions());\n+        String compactContent = JsonUtils.toString(compact);\n+\n+        System.out.println(JsonUtils.toPrettyString(compact));\n+\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        JacksonExamplePerson person = objectMapper.readValue(compactContent, JacksonExamplePerson.class);\n+\n+        System.out.println(person.id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDUwMjk0OnYy", "diffSide": "RIGHT", "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonExamplePerson.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxMTozMFrOGrlPxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxMTozMFrOGrlPxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MjE5Nw==", "bodyText": "As these POJO classes are already in a separate package, can we not simply call the class Person?", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448352197", "createdAt": "2020-07-01T13:11:30Z", "author": {"login": "JonCook"}, "path": "json-2/src/main/java/com/baeldung/jsonld/deserialization/jsonldjava/jackson/JacksonExamplePerson.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package com.baeldung.jsonld.deserialization.jsonldjava.jackson;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class JacksonExamplePerson {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDUwMzkxOnYy", "diffSide": "RIGHT", "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldExamplePerson.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxMTo0NVrOGrlQVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxMTo0NVrOGrlQVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MjM0MA==", "bodyText": "As these POJO classes are already in a separate package, can we not simply call the class Person?", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448352340", "createdAt": "2020-07-01T13:11:45Z", "author": {"login": "JonCook"}, "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldExamplePerson.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package com.baeldung.jsonld.serialization.hydrajsonld;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import de.escalon.hypermedia.hydra.mapping.Expose;\n+import de.escalon.hypermedia.hydra.mapping.Vocab;\n+\n+@Vocab(\"http://example.com/vocab/\")\n+@Expose(\"person\")\n+public class HydraJsonldExamplePerson {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDUwNjAxOnYy", "diffSide": "RIGHT", "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxMjoxNFrOGrlRnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxMjoxNFrOGrlRnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MjY3MQ==", "bodyText": "The same comment applies about moving to a unit test.", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448352671", "createdAt": "2020-07-01T13:12:14Z", "author": {"login": "JonCook"}, "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationExample.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.baeldung.jsonld.serialization.hydrajsonld;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n+import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n+\n+import de.escalon.hypermedia.hydra.serialize.JacksonHydraSerializer;\n+\n+public class HydraJsonldSerializationExample {\n+    public static void main(String[] args) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDUxNTQwOnYy", "diffSide": "RIGHT", "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationExample.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxNDo0MlrOGrlXfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxMzozMzo1OVrOGzoSzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1NDE3NQ==", "bodyText": "There is a warning here about serial version Ids", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448354175", "createdAt": "2020-07-01T13:14:42Z", "author": {"login": "JonCook"}, "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationExample.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.baeldung.jsonld.serialization.hydrajsonld;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n+import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n+\n+import de.escalon.hypermedia.hydra.serialize.JacksonHydraSerializer;\n+\n+public class HydraJsonldSerializationExample {\n+    public static void main(String[] args) throws IOException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n+        mapper.registerModule(getJacksonHydraSerializerModule());\n+\n+        HydraJsonldExamplePerson person = new HydraJsonldExamplePerson();\n+        person.id = \"http://example.com/person/1234\";\n+        person.name = \"Example Name\";\n+\n+        System.out.println(mapper.writerWithDefaultPrettyPrinter()\n+            .writeValueAsString(person));\n+    }\n+\n+    public static SimpleModule getJacksonHydraSerializerModule() {\n+        return new SimpleModule() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM3NjY1MA==", "bodyText": "I must have some settings not properly set because I see no warnings. Could you point me in the right direction?", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r453376650", "createdAt": "2020-07-12T23:31:01Z", "author": {"login": "mdhtr"}, "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationExample.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.baeldung.jsonld.serialization.hydrajsonld;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n+import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n+\n+import de.escalon.hypermedia.hydra.serialize.JacksonHydraSerializer;\n+\n+public class HydraJsonldSerializationExample {\n+    public static void main(String[] args) throws IOException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n+        mapper.registerModule(getJacksonHydraSerializerModule());\n+\n+        HydraJsonldExamplePerson person = new HydraJsonldExamplePerson();\n+        person.id = \"http://example.com/person/1234\";\n+        person.name = \"Example Name\";\n+\n+        System.out.println(mapper.writerWithDefaultPrettyPrinter()\n+            .writeValueAsString(person));\n+    }\n+\n+    public static SimpleModule getJacksonHydraSerializerModule() {\n+        return new SimpleModule() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1NDE3NQ=="}, "originalCommit": {"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5MDczNQ==", "bodyText": "The warning here is - The serializable class does not declare a static final serialVersionUID field of type long. But I think we can leave this one. Don't worry.", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r456790735", "createdAt": "2020-07-18T13:33:59Z", "author": {"login": "JonCook"}, "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/hydrajsonld/HydraJsonldSerializationExample.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.baeldung.jsonld.serialization.hydrajsonld;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n+import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n+\n+import de.escalon.hypermedia.hydra.serialize.JacksonHydraSerializer;\n+\n+public class HydraJsonldSerializationExample {\n+    public static void main(String[] args) throws IOException {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n+        mapper.registerModule(getJacksonHydraSerializerModule());\n+\n+        HydraJsonldExamplePerson person = new HydraJsonldExamplePerson();\n+        person.id = \"http://example.com/person/1234\";\n+        person.name = \"Example Name\";\n+\n+        System.out.println(mapper.writerWithDefaultPrettyPrinter()\n+            .writeValueAsString(person));\n+    }\n+\n+    public static SimpleModule getJacksonHydraSerializerModule() {\n+        return new SimpleModule() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1NDE3NQ=="}, "originalCommit": {"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDUxODgzOnYy", "diffSide": "RIGHT", "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/jacksonjsonld/JacksonJsonldExamplePerson.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxNToyOVrOGrlZmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxNToyOVrOGrlZmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1NDcxNQ==", "bodyText": "As these POJO classes are already in a separate package, can we not simply call the class Person?", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448354715", "createdAt": "2020-07-01T13:15:29Z", "author": {"login": "JonCook"}, "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/jacksonjsonld/JacksonJsonldExamplePerson.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.baeldung.jsonld.serialization.jacksonjsonld;\n+\n+import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldId;\n+import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldLink;\n+import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldNamespace;\n+import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldProperty;\n+import ioinformarics.oss.jackson.module.jsonld.annotation.JsonldType;\n+\n+@JsonldNamespace(name = \"s\", uri = \"http://schema.org/\")\n+@JsonldLink(rel = \"s:knows\", name = \"knows\", href = \"http://example.com/person/2345\")\n+@JsonldType(\"s:Person\")\n+class JacksonJsonldExamplePerson {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDUyMDU3OnYy", "diffSide": "RIGHT", "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/jacksonjsonld/JacksonJsonLdSerializationExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxNTo1NlrOGrlavA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxNTo1NlrOGrlavA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1NTAwNA==", "bodyText": "Let's clean up these unused imports.", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448355004", "createdAt": "2020-07-01T13:15:56Z", "author": {"login": "JonCook"}, "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/jacksonjsonld/JacksonJsonLdSerializationExample.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.baeldung.jsonld.serialization.jacksonjsonld;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import ioinformarics.oss.jackson.module.jsonld.HydraCollection;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDUyMTY2OnYy", "diffSide": "RIGHT", "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/jacksonjsonld/JacksonJsonLdSerializationExample.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxNjoxMlrOGrlbaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxNjoxMlrOGrlbaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1NTE3Nw==", "bodyText": "Same comment regarding the unit tests.", "url": "https://github.com/eugenp/tutorials/pull/9557#discussion_r448355177", "createdAt": "2020-07-01T13:16:12Z", "author": {"login": "JonCook"}, "path": "json-2/src/main/java/com/baeldung/jsonld/serialization/jacksonjsonld/JacksonJsonLdSerializationExample.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.baeldung.jsonld.serialization.jacksonjsonld;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import ioinformarics.oss.jackson.module.jsonld.HydraCollection;\n+import ioinformarics.oss.jackson.module.jsonld.JsonldGraph;\n+import ioinformarics.oss.jackson.module.jsonld.JsonldModule;\n+import ioinformarics.oss.jackson.module.jsonld.JsonldResource;\n+\n+public class JacksonJsonLdSerializationExample {\n+    public static void main(String[] args) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ef4198a7c08a1debe21bdcf31b7ae1295a800b"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4292, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}