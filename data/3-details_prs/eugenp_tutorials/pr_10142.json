{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MzA4MTA4", "number": 10142, "title": "BAEL4640 Find First with Optional", "bodyText": "", "createdAt": "2020-10-07T14:48:43Z", "url": "https://github.com/eugenp/tutorials/pull/10142", "merged": true, "mergeCommit": {"oid": "b7f4b122275c0b99bc1ac82b1b279d04f45ba2a1"}, "closed": true, "closedAt": "2020-10-25T10:43:23Z", "author": {"login": "dev-chirag"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQOHc5AH2gAyNDk5MzA4MTA4OmJiMGUyMTBlZTI0MTUyYjQ5YjIxN2UwMWMwOTI2YTJjNzYzY2NiZTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUxEvlgFqTUxNDAyMjU2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bb0e210ee24152b49b217e01c0926a2c763ccbe0", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/bb0e210ee24152b49b217e01c0926a2c763ccbe0", "committedDate": "2020-10-07T14:46:50Z", "message": "BAEL4640 Find First with Optional"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MDczMTY3", "url": "https://github.com/eugenp/tutorials/pull/10142#pullrequestreview-504073167", "createdAt": "2020-10-07T16:43:26Z", "commit": {"oid": "bb0e210ee24152b49b217e01c0926a2c763ccbe0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjo0MzoyNlrOHd8TXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjo0NToyNVrOHd8YTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1ODc1MQ==", "bodyText": "this may be even easier to read if you put the return statement on line 20 rather than capture a local variable.", "url": "https://github.com/eugenp/tutorials/pull/10142#discussion_r501158751", "createdAt": "2020-10-07T16:43:26Z", "author": {"login": "ashleyfrieze"}, "path": "patterns/design-patterns-behavioral/src/main/java/com/baeldung/nulls/UsingOptional.java", "diffHunk": "@@ -11,6 +15,18 @@\n         return Optional.ofNullable(response);\n     }\n \n+    public String findFirst(){\n+\n+        String firstElement = getList().stream()\n+                .findFirst()\n+                .orElseThrow(IllegalArgumentException::new);\n+        return firstElement;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0e210ee24152b49b217e01c0926a2c763ccbe0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2MDAxMw==", "bodyText": "This may be a big change, but classUnderTest is a terrible name for the thing we're testing.\ndataObject would be better. You should never name an object class unless it is an object of type Class - i.e. the metadata of a class.", "url": "https://github.com/eugenp/tutorials/pull/10142#discussion_r501160013", "createdAt": "2020-10-07T16:45:25Z", "author": {"login": "ashleyfrieze"}, "path": "patterns/design-patterns-behavioral/src/test/java/com/baeldung/nulls/UsingOptionalUnitTest.java", "diffHunk": "@@ -39,4 +39,10 @@ public void whenArgIsFalse_thenChainResponseAndThrowException() {\n \n         assertThrows(Exception.class, () -> classUnderTest.process(false).orElseThrow(() -> new Exception()));\n     }\n+\n+    @Test()\n+    void givenEmptyList_whenProcessMulti_throwIllegalArgument() {\n+        assertThrows(IllegalArgumentException.class, () -> classUnderTest.findFirst());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0e210ee24152b49b217e01c0926a2c763ccbe0"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c19d1c4cdc9a49da5ff9bdd3d8e67a0c5b1c458", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/5c19d1c4cdc9a49da5ff9bdd3d8e67a0c5b1c458", "committedDate": "2020-10-08T14:37:03Z", "message": "BAEL4640 Fixes for review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTMyNzU3", "url": "https://github.com/eugenp/tutorials/pull/10142#pullrequestreview-506132757", "createdAt": "2020-10-10T23:36:54Z", "commit": {"oid": "5c19d1c4cdc9a49da5ff9bdd3d8e67a0c5b1c458"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMzozNjo1NFrOHfjLQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMzozNjo1NFrOHfjLQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0NDIyNg==", "bodyText": "redundant blank line", "url": "https://github.com/eugenp/tutorials/pull/10142#discussion_r502844226", "createdAt": "2020-10-10T23:36:54Z", "author": {"login": "ashleyfrieze"}, "path": "patterns/design-patterns-behavioral/src/main/java/com/baeldung/nulls/UsingOptional.java", "diffHunk": "@@ -1,16 +1,38 @@\n package com.baeldung.nulls;\n \n+import java.util.List;\n import java.util.Optional;\n \n+import static java.util.Collections.emptyList;\n+\n public class UsingOptional {\n \n+    public static final String DEFAULT_VALUE = \"Default Value\";\n+\n     public Optional<Object> process(boolean processed) {\n \n         String response = doSomething(processed);\n \n         return Optional.ofNullable(response);\n     }\n \n+    public String findFirst() {\n+\n+        return getList().stream()\n+            .findFirst()\n+            .orElse(DEFAULT_VALUE);\n+    }\n+\n+    public Optional<String> findOptionalFirst() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c19d1c4cdc9a49da5ff9bdd3d8e67a0c5b1c458"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTMyNzYy", "url": "https://github.com/eugenp/tutorials/pull/10142#pullrequestreview-506132762", "createdAt": "2020-10-10T23:37:02Z", "commit": {"oid": "5c19d1c4cdc9a49da5ff9bdd3d8e67a0c5b1c458"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMzozNzowMlrOHfjLTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMzozNzowMlrOHfjLTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0NDIzNw==", "bodyText": "redundant blank line", "url": "https://github.com/eugenp/tutorials/pull/10142#discussion_r502844237", "createdAt": "2020-10-10T23:37:02Z", "author": {"login": "ashleyfrieze"}, "path": "patterns/design-patterns-behavioral/src/main/java/com/baeldung/nulls/UsingOptional.java", "diffHunk": "@@ -1,16 +1,38 @@\n package com.baeldung.nulls;\n \n+import java.util.List;\n import java.util.Optional;\n \n+import static java.util.Collections.emptyList;\n+\n public class UsingOptional {\n \n+    public static final String DEFAULT_VALUE = \"Default Value\";\n+\n     public Optional<Object> process(boolean processed) {\n \n         String response = doSomething(processed);\n \n         return Optional.ofNullable(response);\n     }\n \n+    public String findFirst() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c19d1c4cdc9a49da5ff9bdd3d8e67a0c5b1c458"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MTMyNzg1", "url": "https://github.com/eugenp/tutorials/pull/10142#pullrequestreview-506132785", "createdAt": "2020-10-10T23:37:57Z", "commit": {"oid": "5c19d1c4cdc9a49da5ff9bdd3d8e67a0c5b1c458"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMzozNzo1N1rOHfjLig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMzozNzo1N1rOHfjLig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0NDI5OA==", "bodyText": "redundant blank line - please also note the other instances of that in this class - there's no need for a blank space just after or just before the { or } of a function.", "url": "https://github.com/eugenp/tutorials/pull/10142#discussion_r502844298", "createdAt": "2020-10-10T23:37:57Z", "author": {"login": "ashleyfrieze"}, "path": "patterns/design-patterns-behavioral/src/test/java/com/baeldung/nulls/UsingOptionalUnitTest.java", "diffHunk": "@@ -11,32 +11,45 @@\n \n class UsingOptionalUnitTest {\n \n-    private UsingOptional classUnderTest;\n+    private UsingOptional dataObject;\n \n     @BeforeEach\n     public void setup() {\n-        classUnderTest = new UsingOptional();\n+        dataObject = new UsingOptional();\n     }\n \n     @Test\n     public void whenArgIsFalse_thenReturnEmptyResponse() {\n \n-        Optional<Object> result = classUnderTest.process(false);\n+        Optional<Object> result = dataObject.process(false);\n \n         assertFalse(result.isPresent());\n     }\n \n     @Test\n     public void whenArgIsTrue_thenReturnValidResponse() {\n \n-        Optional<Object> result = classUnderTest.process(true);\n+        Optional<Object> result = dataObject.process(true);\n \n         assertTrue(result.isPresent());\n     }\n \n     @Test\n     public void whenArgIsFalse_thenChainResponseAndThrowException() {\n \n-        assertThrows(Exception.class, () -> classUnderTest.process(false).orElseThrow(() -> new Exception()));\n+        assertThrows(Exception.class, () -> dataObject.process(false).orElseThrow(() -> new Exception()));\n     }\n+\n+    @Test()\n+    void givenEmptyList_whenFindFirst_getDefaultValue() {\n+        assertTrue(dataObject.findFirst().equalsIgnoreCase(UsingOptional.DEFAULT_VALUE));\n+\n+    }\n+\n+    @Test()\n+    void givenEmptyList_whenFindOptionalFirst_returnsEmptyOptional() {\n+        assertFalse(dataObject.findOptionalFirst().isPresent());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c19d1c4cdc9a49da5ff9bdd3d8e67a0c5b1c458"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82f2748d451afcf5dd8509c4be0b9de0be63140b", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/82f2748d451afcf5dd8509c4be0b9de0be63140b", "committedDate": "2020-10-13T13:08:31Z", "message": "BAEL4640 Removing blank lines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83d5fd9747304f1095a21f1548d9e03040310d84", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/83d5fd9747304f1095a21f1548d9e03040310d84", "committedDate": "2020-10-16T15:29:10Z", "message": "BAEL4640 Removing blank lines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e796212db02641dac483e0a0a4192807c73b32d", "author": {"user": null}, "url": "https://github.com/eugenp/tutorials/commit/6e796212db02641dac483e0a0a4192807c73b32d", "committedDate": "2020-10-19T12:43:42Z", "message": "BAEL4640 Changes for 8.3 Optional.flatMap"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MDIyNTY5", "url": "https://github.com/eugenp/tutorials/pull/10142#pullrequestreview-514022569", "createdAt": "2020-10-21T17:46:14Z", "commit": {"oid": "6e796212db02641dac483e0a0a4192807c73b32d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzo0NjoxNFrOHl5LZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzo0NjoxNFrOHl5LZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ5NjE2NQ==", "bodyText": "break the line at the . of .flatMap you can optionally also break the line at the . of findFirst as well.", "url": "https://github.com/eugenp/tutorials/pull/10142#discussion_r509496165", "createdAt": "2020-10-21T17:46:14Z", "author": {"login": "ashleyfrieze"}, "path": "patterns/design-patterns-behavioral/src/main/java/com/baeldung/nulls/UsingOptional.java", "diffHunk": "@@ -1,23 +1,50 @@\n package com.baeldung.nulls;\n \n+import java.util.List;\n import java.util.Optional;\n \n+import static java.util.Collections.emptyList;\n+\n public class UsingOptional {\n \n-    public Optional<Object> process(boolean processed) {\n+    public static final String DEFAULT_VALUE = \"Default Value\";\n \n+    public Optional<Object> process(boolean processed) {\n         String response = doSomething(processed);\n \n         return Optional.ofNullable(response);\n     }\n \n-    private String doSomething(boolean processed) {\n+    public String findFirst() {\n+        return getList().stream()\n+            .findFirst()\n+            .orElse(DEFAULT_VALUE);\n+    }\n+\n+\n+    public Optional<String> findOptionalFirst() {\n+        return getList().stream()\n+            .findFirst();\n+    }\n \n+    private List<String> getList() {\n+        return emptyList();\n+    }\n+\n+    public Optional<String> optionalListFirst() {\n+        return getOptionalList().flatMap(\n+                list -> list.stream().findFirst());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e796212db02641dac483e0a0a4192807c73b32d"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3900, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}