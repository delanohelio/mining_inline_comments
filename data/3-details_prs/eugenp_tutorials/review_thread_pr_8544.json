{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NDUyNTYy", "number": 8544, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDoyNzowOVrODaYhLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDoyNzowOVrODaYhLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTkxMjc5OnYy", "diffSide": "RIGHT", "path": "open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNDoyNzowOVrOFhTqjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNzozMToxNFrOFhVqAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ2OTUxNw==", "bodyText": "Switch the order of the arguments. assertEquals(expected, actual)\nassertEquals(1, person.getId());\nassertEquals(\"normanlewis\", person.getUsername());\nassertEquals(\"normanlewis@email.com\", person.getEmail());", "url": "https://github.com/eugenp/tutorials/pull/8544#discussion_r370469517", "createdAt": "2020-01-24T04:27:09Z", "author": {"login": "eric-martin"}, "path": "open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.baeldung.openliberty;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import javax.json.bind.JsonbBuilder;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import com.baeldung.openliberty.person.model.Person;\n+import com.baeldung.openliberty.rest.consumes.RestConsumer;\n+\n+public class RestClientTest {\n+\n+    private static String BASE_URL;\n+\n+    private final String API_PERSON = \"api/persons\";\n+\n+    @BeforeClass\n+    public static void oneTimeSetup() {\n+        BASE_URL = \"http://localhost:9080/\"; \n+    }\n+    \n+    @Test\n+    public void testSuite() {\n+        //run the test only when liberty server is started\n+        //this.whenConsumeWithJsonb_thenGetPerson();\n+    }\n+\n+    public void whenConsumeWithJsonb_thenGetPerson() {\n+        String url = BASE_URL + API_PERSON + \"/1\";\n+        String result = RestConsumer.consumeWithJsonb(url);        \n+\n+        Person person = JsonbBuilder.create().fromJson(result, Person.class);\n+        assertEquals(person.getId(), 1);\n+        assertEquals(person.getUsername(), \"normanlewis\");\n+        assertEquals(person.getEmail(), \"normanlewis@email.com\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "822cf366c55c42631b4a83030c1754faeee94c77"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUwMjE0Ng==", "bodyText": "fixed", "url": "https://github.com/eugenp/tutorials/pull/8544#discussion_r370502146", "createdAt": "2020-01-24T07:31:14Z", "author": {"login": "SmartyAnsh"}, "path": "open-liberty/src/test/java/com/baeldung/openliberty/RestClientTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.baeldung.openliberty;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import javax.json.bind.JsonbBuilder;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import com.baeldung.openliberty.person.model.Person;\n+import com.baeldung.openliberty.rest.consumes.RestConsumer;\n+\n+public class RestClientTest {\n+\n+    private static String BASE_URL;\n+\n+    private final String API_PERSON = \"api/persons\";\n+\n+    @BeforeClass\n+    public static void oneTimeSetup() {\n+        BASE_URL = \"http://localhost:9080/\"; \n+    }\n+    \n+    @Test\n+    public void testSuite() {\n+        //run the test only when liberty server is started\n+        //this.whenConsumeWithJsonb_thenGetPerson();\n+    }\n+\n+    public void whenConsumeWithJsonb_thenGetPerson() {\n+        String url = BASE_URL + API_PERSON + \"/1\";\n+        String result = RestConsumer.consumeWithJsonb(url);        \n+\n+        Person person = JsonbBuilder.create().fromJson(result, Person.class);\n+        assertEquals(person.getId(), 1);\n+        assertEquals(person.getUsername(), \"normanlewis\");\n+        assertEquals(person.getEmail(), \"normanlewis@email.com\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ2OTUxNw=="}, "originalCommit": {"oid": "822cf366c55c42631b4a83030c1754faeee94c77"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4410, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}