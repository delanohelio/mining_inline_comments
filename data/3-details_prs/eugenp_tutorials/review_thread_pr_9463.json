{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMjAxOTM3", "number": 9463, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNDoyMzowNVrOEHXYTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNDoyODoyMVrOEHXaAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTU4NTQzOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-9/src/test/java/com/baeldung/java9/inputstream/outputstream/InputStreamToOutputStreamUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNDoyMzowNVrOGmsRiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNDoyMzowNVrOGmsRiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNDQ1OQ==", "bodyText": "It seems like overkill to make this a constant and use it only once. Also, the 20480 below isn't a constant.", "url": "https://github.com/eugenp/tutorials/pull/9463#discussion_r443224459", "createdAt": "2020-06-21T14:23:05Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-9/src/test/java/com/baeldung/java9/inputstream/outputstream/InputStreamToOutputStreamUnitTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.baeldung.java9.inputstream.outputstream;\n+\n+import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.*;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+\n+import com.google.common.io.ByteStreams;\n+\n+public class InputStreamToOutputStreamUnitTest {\n+\n+    // buffer size used for reading and writing\n+    private static final int BUFFER_SIZE = 8192;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a76d8a4469ce2e01311137aa4266e65708311780"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTU4NjI4OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-9/src/test/java/com/baeldung/java9/inputstream/outputstream/InputStreamToOutputStreamUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNDoyNDoyMlrOGmsSGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNDoyNDoyMlrOGmsSGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNDYwMQ==", "bodyText": "insert a blank line before the assertion (do this in all the test methods, not just this one)", "url": "https://github.com/eugenp/tutorials/pull/9463#discussion_r443224601", "createdAt": "2020-06-21T14:24:22Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-9/src/test/java/com/baeldung/java9/inputstream/outputstream/InputStreamToOutputStreamUnitTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.baeldung.java9.inputstream.outputstream;\n+\n+import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.*;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+\n+import com.google.common.io.ByteStreams;\n+\n+public class InputStreamToOutputStreamUnitTest {\n+\n+    // buffer size used for reading and writing\n+    private static final int BUFFER_SIZE = 8192;\n+\n+    /**\n+     * Reads all bytes from an input stream and writes them to an output stream.\n+     * @param source - input stream to copy data from\n+     * @param target - output stream to copy data too\n+     */\n+    private static void copy(InputStream source, OutputStream target) throws IOException {\n+        byte[] buf = new byte[BUFFER_SIZE];\n+        int length;\n+        while ((length = source.read(buf)) > 0) {\n+            target.write(buf, 0, length);\n+        }\n+    }\n+\n+    @Test\n+    public final void givenUsingJavaEight_whenCopyingInputStreamToOutputStream_thenCorrect() throws IOException {\n+        final String initialString = \"Hello World!\";\n+\n+        try (InputStream inputStream = new ByteArrayInputStream(initialString.getBytes());\n+             ByteArrayOutputStream targetStream = new ByteArrayOutputStream()) {\n+            copy(inputStream, targetStream);\n+            assertEquals(initialString, new String(targetStream.toByteArray()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a76d8a4469ce2e01311137aa4266e65708311780"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTU4ODAyOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-9/src/test/java/com/baeldung/java9/inputstream/outputstream/InputStreamToOutputStreamUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNDoyNjoyMFrOGmsS8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNDoyNjoyMFrOGmsS8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNDgxNw==", "bodyText": "As per guidelines, avoid the final keyword (applies to all occurrences)", "url": "https://github.com/eugenp/tutorials/pull/9463#discussion_r443224817", "createdAt": "2020-06-21T14:26:20Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-9/src/test/java/com/baeldung/java9/inputstream/outputstream/InputStreamToOutputStreamUnitTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.baeldung.java9.inputstream.outputstream;\n+\n+import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.*;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+\n+import com.google.common.io.ByteStreams;\n+\n+public class InputStreamToOutputStreamUnitTest {\n+\n+    // buffer size used for reading and writing\n+    private static final int BUFFER_SIZE = 8192;\n+\n+    /**\n+     * Reads all bytes from an input stream and writes them to an output stream.\n+     * @param source - input stream to copy data from\n+     * @param target - output stream to copy data too\n+     */\n+    private static void copy(InputStream source, OutputStream target) throws IOException {\n+        byte[] buf = new byte[BUFFER_SIZE];\n+        int length;\n+        while ((length = source.read(buf)) > 0) {\n+            target.write(buf, 0, length);\n+        }\n+    }\n+\n+    @Test\n+    public final void givenUsingJavaEight_whenCopyingInputStreamToOutputStream_thenCorrect() throws IOException {\n+        final String initialString = \"Hello World!\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a76d8a4469ce2e01311137aa4266e65708311780"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTU4OTc2OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-9/src/test/java/com/baeldung/java9/inputstream/outputstream/InputStreamToOutputStreamUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNDoyODoyMVrOGmsTyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxNDoyODoyMVrOGmsTyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNTAzNA==", "bodyText": "Since there isn't a compelling reason to make this method private or static, let's remove those keywords.", "url": "https://github.com/eugenp/tutorials/pull/9463#discussion_r443225034", "createdAt": "2020-06-21T14:28:21Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-9/src/test/java/com/baeldung/java9/inputstream/outputstream/InputStreamToOutputStreamUnitTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package com.baeldung.java9.inputstream.outputstream;\n+\n+import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.*;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Test;\n+\n+import com.google.common.io.ByteStreams;\n+\n+public class InputStreamToOutputStreamUnitTest {\n+\n+    // buffer size used for reading and writing\n+    private static final int BUFFER_SIZE = 8192;\n+\n+    /**\n+     * Reads all bytes from an input stream and writes them to an output stream.\n+     * @param source - input stream to copy data from\n+     * @param target - output stream to copy data too\n+     */\n+    private static void copy(InputStream source, OutputStream target) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a76d8a4469ce2e01311137aa4266e65708311780"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3949, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}