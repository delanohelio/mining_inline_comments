{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1Mjk5NzU0", "number": 10272, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODoyNzozNFrOE8V9gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMjo1MTowMFrOFBVQ1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzA5ODI2OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODoyNzozNFrOH4aKwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODoyNzozNFrOH4aKwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxMTA0MA==", "bodyText": "As the test throws IOException we don't need this catch block.. Similarly, if it just does throw ioe then it's a redundant catch anyway", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r528911040", "createdAt": "2020-11-23T18:27:34Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+        try (FileOutputStream outputStream = new FileOutputStream(\"src/test/resources/example-fos.jpg\")) {\n+            outputStream.write(dataForWriting);\n+            assertThat(new File(\"src/test/resources/example-fos.jpg\")).hasBinaryContent(dataForWriting);\n+        } catch (IOException ioe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ae3325a4f72e2e7ef9ada202adf76431f2b2b6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzEzNDEzOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODozNzo1OVrOH4ag9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQxNzo1MDo1NlrOH7cEXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxNjcyNw==", "bodyText": "I think writing to src/test/resources is risky. This can be solved by using\n@Rule\npublic TemporaryFolder tempFolder = new TemporaryFolder();\n\n@Test\npublic void someTest() {\n    File outputFile = tempFolder.newFile(\"filename.jpg\");\n}\nThen we don't need the @AfterClass as the rule clears up the files. We probably don't need to mention the use of the rule in the snippets in the article either.", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r528916727", "createdAt": "2020-11-23T18:37:59Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+        try (FileOutputStream outputStream = new FileOutputStream(\"src/test/resources/example-fos.jpg\")) {\n+            outputStream.write(dataForWriting);\n+            assertThat(new File(\"src/test/resources/example-fos.jpg\")).hasBinaryContent(dataForWriting);\n+        } catch (IOException ioe) {\n+            throw ioe;\n+        }\n+    }\n+\n+    @Test\n+    public void whenUsingNioFiles_thenByteArrayIsWritten() throws IOException {\n+        // Takes Optional OpenOptions, if not present defaults to CREATE, TRUNCATE_EXISTING (will truncate an existing file to size of 0), and WRITE\n+        // https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#write-java.nio.file.Path-byte:A-java.nio.file.OpenOption...-\n+        Files.write(Paths.get(\"src/test/resources/example-nio-files.jpg\"), dataForWriting);\n+        assertThat(new File(\"src/test/resources/example-nio-files.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaFiles_thenByteArrayIsWritten() throws IOException {\n+        com.google.common.io.Files.write(dataForWriting, new File(\"src/test/resources/example-guava-files.jpg\"));\n+        assertThat(new File(\"src/test/resources/example-guava-files.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSink_thenByteArrayIsWritten() throws IOException {\n+        // Also discuss - https://guava.dev/releases/snapshot-jre/api/docs/com/google/common/io/MoreFiles.html\n+        ByteSink byteSink = com.google.common.io.Files.asByteSink(new File(\"src/test/resources/example-guava-bs.jpg\"));\n+        byteSink.write(dataForWriting);\n+        assertThat(new File(\"src/test/resources/example-guava-bs.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSinkMoreFiles_thenByteArrayIsWritten() throws IOException {\n+        ByteSink byteSink = MoreFiles.asByteSink(Paths.get(\"src/test/resources/example-guava-bs-mf.jpg\"), StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n+        byteSink.write(dataForWriting);\n+        assertThat(new File(\"src/test/resources/example-guava-bs-mf.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUserCommonsIo_thenByteArrayIsWritten() throws IOException {\n+        // http://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FileUtils.html#writeByteArrayToFile%28java.io.File,%20byte%5B%5D%29\n+        FileUtils.writeByteArrayToFile(new File(\"src/test/resources/example-file-utils.jpg\"), dataForWriting);\n+        assertThat(new File(\"src/test/resources/example-file-utils.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @AfterClass\n+    public static void teardown() throws IOException {\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-fos.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-nio-files.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-guava-files.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-guava-bs.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-guava-bs-mf.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-file-utils.jpg\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ae3325a4f72e2e7ef9ada202adf76431f2b2b6"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA4NzkwMQ==", "bodyText": "Wow - that's a really nice feature of JUnit! It definitely makes the example cleaner.", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r532087901", "createdAt": "2020-11-28T17:50:56Z", "author": {"login": "amdegregorio"}, "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+        try (FileOutputStream outputStream = new FileOutputStream(\"src/test/resources/example-fos.jpg\")) {\n+            outputStream.write(dataForWriting);\n+            assertThat(new File(\"src/test/resources/example-fos.jpg\")).hasBinaryContent(dataForWriting);\n+        } catch (IOException ioe) {\n+            throw ioe;\n+        }\n+    }\n+\n+    @Test\n+    public void whenUsingNioFiles_thenByteArrayIsWritten() throws IOException {\n+        // Takes Optional OpenOptions, if not present defaults to CREATE, TRUNCATE_EXISTING (will truncate an existing file to size of 0), and WRITE\n+        // https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#write-java.nio.file.Path-byte:A-java.nio.file.OpenOption...-\n+        Files.write(Paths.get(\"src/test/resources/example-nio-files.jpg\"), dataForWriting);\n+        assertThat(new File(\"src/test/resources/example-nio-files.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaFiles_thenByteArrayIsWritten() throws IOException {\n+        com.google.common.io.Files.write(dataForWriting, new File(\"src/test/resources/example-guava-files.jpg\"));\n+        assertThat(new File(\"src/test/resources/example-guava-files.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSink_thenByteArrayIsWritten() throws IOException {\n+        // Also discuss - https://guava.dev/releases/snapshot-jre/api/docs/com/google/common/io/MoreFiles.html\n+        ByteSink byteSink = com.google.common.io.Files.asByteSink(new File(\"src/test/resources/example-guava-bs.jpg\"));\n+        byteSink.write(dataForWriting);\n+        assertThat(new File(\"src/test/resources/example-guava-bs.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSinkMoreFiles_thenByteArrayIsWritten() throws IOException {\n+        ByteSink byteSink = MoreFiles.asByteSink(Paths.get(\"src/test/resources/example-guava-bs-mf.jpg\"), StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n+        byteSink.write(dataForWriting);\n+        assertThat(new File(\"src/test/resources/example-guava-bs-mf.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUserCommonsIo_thenByteArrayIsWritten() throws IOException {\n+        // http://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FileUtils.html#writeByteArrayToFile%28java.io.File,%20byte%5B%5D%29\n+        FileUtils.writeByteArrayToFile(new File(\"src/test/resources/example-file-utils.jpg\"), dataForWriting);\n+        assertThat(new File(\"src/test/resources/example-file-utils.jpg\")).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @AfterClass\n+    public static void teardown() throws IOException {\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-fos.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-nio-files.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-guava-files.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-guava-bs.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-guava-bs-mf.jpg\"));\n+        Files.deleteIfExists(Paths.get(\"src/test/resources/example-file-utils.jpg\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkxNjcyNw=="}, "originalCommit": {"oid": "a8ae3325a4f72e2e7ef9ada202adf76431f2b2b6"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTEzOTkzOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQyMjoxMToyN1rOH7nj3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQyMjoxMToyN1rOH7nj3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI3NjE5MQ==", "bodyText": "Indentation is a bit odd here.", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r532276191", "createdAt": "2020-11-29T22:11:27Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+    \n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-fos.jpg\");\n+        try (FileOutputStream outputStream = new FileOutputStream(outputFile)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83930cad49d1cd343aa1ced8754c76a1fa575a02"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTE0MDE3OnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQyMjoxMTozOVrOH7nj-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQyMjoxMTozOVrOH7nj-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI3NjIxOQ==", "bodyText": "Indentation", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r532276219", "createdAt": "2020-11-29T22:11:39Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+    \n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-fos.jpg\");\n+        try (FileOutputStream outputStream = new FileOutputStream(outputFile)) {\n+            outputStream.write(dataForWriting);\n+            assertThat(outputFile).hasBinaryContent(dataForWriting);\n+        }\n+    }\n+\n+    @Test\n+    public void whenUsingNioFiles_thenByteArrayIsWritten() throws IOException {\n+        File outputFile =  tempFolder.newFile(\"example-nio-files.jpg\");\n+        Files.write(outputFile.toPath(), dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaFiles_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-guava-files.jpg\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83930cad49d1cd343aa1ced8754c76a1fa575a02"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTE0MDYyOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQyMjoxMjowM1rOH7nkMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQyMjoxMjowM1rOH7nkMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI3NjI3NQ==", "bodyText": "Indentation too - I think you may have a mix of tabs and spaces here.", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r532276275", "createdAt": "2020-11-29T22:12:03Z", "author": {"login": "ashleyfrieze"}, "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+    \n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-fos.jpg\");\n+        try (FileOutputStream outputStream = new FileOutputStream(outputFile)) {\n+            outputStream.write(dataForWriting);\n+            assertThat(outputFile).hasBinaryContent(dataForWriting);\n+        }\n+    }\n+\n+    @Test\n+    public void whenUsingNioFiles_thenByteArrayIsWritten() throws IOException {\n+        File outputFile =  tempFolder.newFile(\"example-nio-files.jpg\");\n+        Files.write(outputFile.toPath(), dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaFiles_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-guava-files.jpg\");\n+        com.google.common.io.Files.write(dataForWriting, outputFile);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSink_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-guava-bs.jpg\");\n+        ByteSink byteSink = com.google.common.io.Files.asByteSink(outputFile);\n+        byteSink.write(dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSinkMoreFiles_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-guava-bs.jpg\");\n+        ByteSink byteSink = MoreFiles.asByteSink(outputFile.toPath(), StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n+        byteSink.write(dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUserCommonsIo_thenByteArrayIsWritten() throws IOException {\n+    \tFile outputFile = tempFolder.newFile(\"example-file-utils.jpg\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83930cad49d1cd343aa1ced8754c76a1fa575a02"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTQxMjcwOnYy", "diffSide": "RIGHT", "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMjo1MTowMFrOIACQ4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMjo1MTowMFrOIACQ4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwODAwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void whenUserCommonsIo_thenByteArrayIsWritten() throws IOException {\n          \n          \n            \n                public void whenUsingCommonsIo_thenByteArrayIsWritten() throws IOException {", "url": "https://github.com/eugenp/tutorials/pull/10272#discussion_r536908003", "createdAt": "2020-12-05T22:51:00Z", "author": {"login": "KevinGilmore"}, "path": "core-java-modules/core-java-io-3/src/test/java/com/baeldung/writebytearray/WriteByteArrayUnitTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.baeldung.writebytearray;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.io.ByteSink;\n+import com.google.common.io.MoreFiles;\n+\n+public class WriteByteArrayUnitTest {\n+    private static byte[] dataForWriting;\n+\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    @BeforeClass\n+    public static void setup() throws IOException {\n+        dataForWriting = Files.readAllBytes(Paths.get(\"src/test/resources/example-image.jpg\"));\n+    }\n+\n+    @Test\n+    public void whenUsingFileOutputStream_thenByteArrayIsWritten() throws IOException {\n+        File outputFile = tempFolder.newFile(\"example-fos.jpg\");\n+        try (FileOutputStream outputStream = new FileOutputStream(outputFile)) {\n+            outputStream.write(dataForWriting);\n+            assertThat(outputFile).hasBinaryContent(dataForWriting);\n+        }\n+    }\n+\n+    @Test\n+    public void whenUsingNioFiles_thenByteArrayIsWritten() throws IOException {\n+        File outputFile = tempFolder.newFile(\"example-nio-files.jpg\");\n+        Files.write(outputFile.toPath(), dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaFiles_thenByteArrayIsWritten() throws IOException {\n+        File outputFile = tempFolder.newFile(\"example-guava-files.jpg\");\n+        com.google.common.io.Files.write(dataForWriting, outputFile);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSink_thenByteArrayIsWritten() throws IOException {\n+        File outputFile = tempFolder.newFile(\"example-guava-bs.jpg\");\n+        ByteSink byteSink = com.google.common.io.Files.asByteSink(outputFile);\n+        byteSink.write(dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUsingGuavaByteSinkMoreFiles_thenByteArrayIsWritten() throws IOException {\n+        File outputFile = tempFolder.newFile(\"example-guava-bs.jpg\");\n+        ByteSink byteSink = MoreFiles.asByteSink(outputFile.toPath(), StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n+        byteSink.write(dataForWriting);\n+        assertThat(outputFile).hasBinaryContent(dataForWriting);\n+    }\n+\n+    @Test\n+    public void whenUserCommonsIo_thenByteArrayIsWritten() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30b11918adc6ecced08877bd5fa5aca8b7b7246b"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4130, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}