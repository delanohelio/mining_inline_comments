{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NDIzMDk5", "number": 9795, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzoxODowMFrOEUQFhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzoxODo1M1rOEUQFrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjcwNTM0OnYy", "diffSide": "RIGHT", "path": "jmh/src/main/java/com/baeldung/bitset/Plotter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzoxODowMFrOG6bH7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzoxODowMFrOG6bH7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNDk4OQ==", "bodyText": "if () {\n//\n}", "url": "https://github.com/eugenp/tutorials/pull/9795#discussion_r463914989", "createdAt": "2020-08-01T03:18:00Z", "author": {"login": "eric-martin"}, "path": "jmh/src/main/java/com/baeldung/bitset/Plotter.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.baeldung.bitset;\n+\n+import org.openjdk.jol.info.ClassLayout;\n+import org.openjdk.jol.info.GraphLayout;\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.util.BitSet;\n+\n+public class Plotter {\n+\n+    public static void main(String[] args) throws IOException {\n+        Path path = Paths.get(\"footprint.csv\");\n+        try (BufferedWriter stream = Files.newBufferedWriter(path, StandardOpenOption.CREATE)) {\n+            stream.write(\"bits,bool,bitset\\n\");\n+\n+            for (int i = 0; i <= 10_000_000; i += 500) {\n+                System.out.println(\"Number of bits => \" + i);\n+\n+                boolean[] ba = new boolean[i];\n+                BitSet bitSet = new BitSet(i);\n+\n+                long baSize = ClassLayout.parseInstance(ba).instanceSize();\n+                long bitSetSize = GraphLayout.parseInstance(bitSet).totalSize();\n+\n+                stream.write((i + \",\" + baSize + \",\" + bitSetSize + \"\\n\"));\n+\n+                if (i % 10_000 == 0) stream.flush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d902eeb7428fc66ebf491cce1ca935d585be69ce"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjcwNTU4OnYy", "diffSide": "RIGHT", "path": "jmh/src/main/java/com/baeldung/bitset/VectorOfBitsBenchmark.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzoxODozM1rOG6bIDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzoxODozM1rOG6bIDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNTAyMQ==", "bodyText": "two space indent on the continuation", "url": "https://github.com/eugenp/tutorials/pull/9795#discussion_r463915021", "createdAt": "2020-08-01T03:18:33Z", "author": {"login": "eric-martin"}, "path": "jmh/src/main/java/com/baeldung/bitset/VectorOfBitsBenchmark.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.baeldung.bitset;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.BitSet;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+@State(Scope.Benchmark)\n+@BenchmarkMode(Mode.Throughput)\n+public class VectorOfBitsBenchmark {\n+\n+    private boolean[] array;\n+    private BitSet bitSet;\n+\n+    @Param({\"100\", \"1000\", \"5000\", \"50000\", \"100000\", \"1000000\", \"2000000\", \"3000000\",\n+             \"5000000\", \"7000000\", \"10000000\", \"20000000\", \"30000000\", \"50000000\", \"70000000\", \"1000000000\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d902eeb7428fc66ebf491cce1ca935d585be69ce"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjcwNTc1OnYy", "diffSide": "RIGHT", "path": "jmh/src/main/java/com/baeldung/bitset/VectorOfBitsBenchmark.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzoxODo1M1rOG6bIJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzoxODo1M1rOG6bIJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNTA0Ng==", "bodyText": "if () {\n//\n}", "url": "https://github.com/eugenp/tutorials/pull/9795#discussion_r463915046", "createdAt": "2020-08-01T03:18:53Z", "author": {"login": "eric-martin"}, "path": "jmh/src/main/java/com/baeldung/bitset/VectorOfBitsBenchmark.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.baeldung.bitset;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.util.BitSet;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+@State(Scope.Benchmark)\n+@BenchmarkMode(Mode.Throughput)\n+public class VectorOfBitsBenchmark {\n+\n+    private boolean[] array;\n+    private BitSet bitSet;\n+\n+    @Param({\"100\", \"1000\", \"5000\", \"50000\", \"100000\", \"1000000\", \"2000000\", \"3000000\",\n+             \"5000000\", \"7000000\", \"10000000\", \"20000000\", \"30000000\", \"50000000\", \"70000000\", \"1000000000\"})\n+    public int size;\n+\n+    @Setup(Level.Trial)\n+    public void setUp() {\n+        array = new boolean[size];\n+        for (int i = 0; i < array.length; i++) {\n+            array[i] = ThreadLocalRandom.current().nextBoolean();\n+        }\n+\n+        bitSet = new BitSet(size);\n+        for (int i = 0; i < size; i++) {\n+            bitSet.set(i, ThreadLocalRandom.current().nextBoolean());\n+        }\n+    }\n+\n+    @Benchmark\n+    public boolean getBoolArray() {\n+        return array[ThreadLocalRandom.current().nextInt(size)];\n+    }\n+\n+    @Benchmark\n+    public boolean getBitSet() {\n+        return bitSet.get(ThreadLocalRandom.current().nextInt(size));\n+    }\n+\n+    @Benchmark\n+    public void setBoolArray() {\n+        int index = ThreadLocalRandom.current().nextInt(size);\n+        array[index] = true;\n+    }\n+\n+    @Benchmark\n+    public void setBitSet() {\n+        int index = ThreadLocalRandom.current().nextInt(size);\n+        bitSet.set(index);\n+    }\n+\n+    @Benchmark\n+    public int cardinalityBoolArray() {\n+        int sum = 0;\n+        for (boolean b : array) {\n+            if (b) sum++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d902eeb7428fc66ebf491cce1ca935d585be69ce"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4241, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}