{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NDMwMDQ1", "number": 8758, "title": "BAEL-3855", "bodyText": "Lock Striping", "createdAt": "2020-02-19T22:29:54Z", "url": "https://github.com/eugenp/tutorials/pull/8758", "merged": true, "mergeCommit": {"oid": "9290f7c74b0b6b5efa5a1f2d87871c56f1d2485f"}, "closed": true, "closedAt": "2020-03-20T11:00:28Z", "author": {"login": "mguarnaccia"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABbtWes5AH2gAyMzc3NDMwMDQ1OjljNGY4OWQ0MTQyMDQ0ZWE2MmI5YzdkZTk4YTRkYTZmNmY2NTEzZmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOzwU9AH2gAyMzc3NDMwMDQ1OjkxNDAyODNjYTJmOGM5ZDhkMmUxOTE4MjVkYWRjZTQ2YmI4ZjAwODk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9c4f89d4142044ea62b9c7de98a4da6f6f6513fe", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/9c4f89d4142044ea62b9c7de98a4da6f6f6513fe", "committedDate": "2019-12-05T10:32:58Z", "message": "Hexagonal architecture: a quick and practical example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2fd861f60bccf189f1aca68877e2ccb1edd6b27", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/e2fd861f60bccf189f1aca68877e2ccb1edd6b27", "committedDate": "2019-12-20T14:09:08Z", "message": "Merge pull request #1 from eugenp/master\n\nSend PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a000150c46682fc16dd6ebb136d941f04459ccb9", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/a000150c46682fc16dd6ebb136d941f04459ccb9", "committedDate": "2019-12-23T08:28:02Z", "message": "BAEL 3486"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cf4a15ac8ce47f2fae2a1f18132ad97ce2c6991", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/4cf4a15ac8ce47f2fae2a1f18132ad97ce2c6991", "committedDate": "2020-02-19T22:14:25Z", "message": "BAEL-3855\n\nLock Striping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2227006e076e168ba8c8bf63de6733b79d77553b", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/2227006e076e168ba8c8bf63de6733b79d77553b", "committedDate": "2020-02-19T22:26:24Z", "message": "BAEL-3855"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7094a3b15bc8c69b6773807f100071b0b7fed029", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/7094a3b15bc8c69b6773807f100071b0b7fed029", "committedDate": "2020-02-19T22:27:45Z", "message": "BAEL-3855"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6388b70f30386a8af7b0bdcea03332b91a268fda", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/6388b70f30386a8af7b0bdcea03332b91a268fda", "committedDate": "2020-02-19T22:28:54Z", "message": "BAEL-3855"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMDQyNTkx", "url": "https://github.com/eugenp/tutorials/pull/8758#pullrequestreview-362042591", "createdAt": "2020-02-20T16:21:55Z", "commit": {"oid": "6388b70f30386a8af7b0bdcea03332b91a268fda"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjoyMTo1NVrOFsaCnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjoyNToyMlrOFsaLHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwODMxOQ==", "bodyText": "fix indentation throughout the class", "url": "https://github.com/eugenp/tutorials/pull/8758#discussion_r382108319", "createdAt": "2020-02-20T16:21:55Z", "author": {"login": "rpvilao"}, "path": "lock-striping/src/com/baeldung/concurrent/lock/BenchMark.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.baeldung.concurrent.lock;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@State(Scope.Thread)\n+@Warmup(iterations = 2, time = 1, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.MILLISECONDS)\n+public class BenchMark {\n+    ConcurrentAccessMap accessMyMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6388b70f30386a8af7b0bdcea03332b91a268fda"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMDM5Nw==", "bodyText": "indentation", "url": "https://github.com/eugenp/tutorials/pull/8758#discussion_r382110397", "createdAt": "2020-02-20T16:25:13Z", "author": {"login": "rpvilao"}, "path": "lock-striping/src/com/baeldung/concurrent/lock/ConcurrentAccessMap.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.baeldung.concurrent.lock;\n+\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import com.google.common.base.Supplier;\n+\n+public abstract class ConcurrentAccessMap {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6388b70f30386a8af7b0bdcea03332b91a268fda"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMDQ5NA==", "bodyText": "indentation", "url": "https://github.com/eugenp/tutorials/pull/8758#discussion_r382110494", "createdAt": "2020-02-20T16:25:22Z", "author": {"login": "rpvilao"}, "path": "lock-striping/src/com/baeldung/concurrent/lock/ConcurrentAccessMap.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.baeldung.concurrent.lock;\n+\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import com.google.common.base.Supplier;\n+\n+public abstract class ConcurrentAccessMap {\n+\tstatic final int SLOTS = 4;\n+\tstatic final int THREADS = 10000;\n+\tstatic final int BUCKETS = Runtime.getRuntime().availableProcessors() * SLOTS;\n+\tprivate CompletableFuture<?>[] requests;\n+\tMap<String, String> map;\n+\t\t\n+\tpublic ConcurrentAccessMap(Map<String, String> map) {\n+\t\tthis.map = map;\n+\t}\n+\t\n+\tpublic final void doWork(String type) {\n+\t\trequests = new CompletableFuture<?>[THREADS * SLOTS];\n+\n+\t\tfor (int i = 0; i < THREADS; i++) {\n+        \trequests[SLOTS * i + 0] = CompletableFuture.supplyAsync(putSupplier(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6388b70f30386a8af7b0bdcea03332b91a268fda"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63b4db7f7a4253e486d4b13fffadd4f26f89c8f6", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/63b4db7f7a4253e486d4b13fffadd4f26f89c8f6", "committedDate": "2020-02-21T13:17:46Z", "message": "BAEL-3855\n\nidentation, moved to new module, removed needless classes, better benchmark"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDIwNjI2", "url": "https://github.com/eugenp/tutorials/pull/8758#pullrequestreview-363020626", "createdAt": "2020-02-22T09:47:33Z", "commit": {"oid": "63b4db7f7a4253e486d4b13fffadd4f26f89c8f6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwOTo0NzozM1rOFtKaHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwOTo0NzozM1rOFtKaHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwMDc2Nw==", "bodyText": "fix indentation", "url": "https://github.com/eugenp/tutorials/pull/8758#discussion_r382900767", "createdAt": "2020-02-22T09:47:33Z", "author": {"login": "rpvilao"}, "path": "lock-striping/src/com/baeldung/concurrent/lock/ConcurrentAccessMap.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.baeldung.concurrent.lock;\n+\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import com.google.common.base.Supplier;\n+\n+public abstract class ConcurrentAccessMap {\n+    static final int SLOTS = 4;\n+    static final int THREADS = 10000;\n+    static final int BUCKETS = Runtime.getRuntime().availableProcessors() * SLOTS;\n+    private CompletableFuture<?>[] requests;\n+    protected Map<String, String> map;\n+    \n+    public ConcurrentAccessMap(Map<String, String> map) {\n+        this.map = map;\n+    }\n+\n+    public final void doWork(String type) {\n+        requests = new CompletableFuture<?>[THREADS * SLOTS];\n+\n+        for (int i = 0; i < THREADS; i++) {\n+            requests[SLOTS * i + 0] = CompletableFuture.supplyAsync(putSupplier(i));\n+            requests[SLOTS * i + 1] = CompletableFuture.supplyAsync(getSupplier(i));\n+            requests[SLOTS * i + 2] = CompletableFuture.supplyAsync(getSupplier(i));\n+            requests[SLOTS * i + 3] = CompletableFuture.supplyAsync(getSupplier(i)); \t\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b4db7f7a4253e486d4b13fffadd4f26f89c8f6"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1e309cecf6093746fcf32c84119fc730f0b03ce", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/d1e309cecf6093746fcf32c84119fc730f0b03ce", "committedDate": "2020-02-22T11:34:10Z", "message": "BAEL-3855\n\nTree update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a0d5d85363680bcda2a75f3d71f642225ccca78", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/8a0d5d85363680bcda2a75f3d71f642225ccca78", "committedDate": "2020-02-24T09:10:02Z", "message": "BAEL-3855\n\ntree fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1d6b292bd2d785b95fe2cd86b77ee77dacfa00c", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/f1d6b292bd2d785b95fe2cd86b77ee77dacfa00c", "committedDate": "2020-02-25T09:31:59Z", "message": "BAEL-3855\n\nMoved to java-core-modules folder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38d9ed40ca3b8abea4c365646572e4a7026fa633", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/38d9ed40ca3b8abea4c365646572e4a7026fa633", "committedDate": "2020-03-09T15:43:35Z", "message": "BAEL-3855\n\nUpdated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "388ba64d3dc8a6e7a4fa11465a382ccf40658b05", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/388ba64d3dc8a6e7a4fa11465a382ccf40658b05", "committedDate": "2020-03-11T10:20:37Z", "message": "Delete CoarseGrained.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ade062068900b5994bd09665a5aa766db8b6638e", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/ade062068900b5994bd09665a5aa766db8b6638e", "committedDate": "2020-03-11T10:21:01Z", "message": "Delete LockStriped.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2c4ff751b26bed7e293cae523c948ce1c81ec7d", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/e2c4ff751b26bed7e293cae523c948ce1c81ec7d", "committedDate": "2020-03-11T12:19:25Z", "message": "BAEL-3855"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0566eccb2c0cbdf7a7e033e99aaa2d879118373b", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/0566eccb2c0cbdf7a7e033e99aaa2d879118373b", "committedDate": "2020-03-11T13:31:36Z", "message": "BAEL-3855"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNzkxNTY3", "url": "https://github.com/eugenp/tutorials/pull/8758#pullrequestreview-372791567", "createdAt": "2020-03-11T14:09:26Z", "commit": {"oid": "0566eccb2c0cbdf7a7e033e99aaa2d879118373b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDowOToyNlrOF04iIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDoyMDo0NlrOF05DRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5NjUxMg==", "bodyText": "I think this would be simplified by having both instances of your test instantiated from the beginning:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ConcurrentAccessExperiment accessMyMap;\n          \n          \n            \n                SingleLock single = new SingleLock();\n          \n          \n            \n                StripedLock striped = new StripedLock(BUCKETS);", "url": "https://github.com/eugenp/tutorials/pull/8758#discussion_r390996512", "createdAt": "2020-03-11T14:09:26Z", "author": {"login": "jzheaux"}, "path": "core-java-modules/core-java-concurrency-collections-2/src/main/java/com/baeldung/concurrent/lock/ConcurrentAccessBenchmark.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.baeldung.concurrent.lock;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@State(Scope.Thread)\n+@Fork(value = 1)\n+@Warmup(iterations = 0)\n+public class ConcurrentAccessBenchmark {\n+    ConcurrentAccessExperiment accessMyMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0566eccb2c0cbdf7a7e033e99aaa2d879118373b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5NzM3Nw==", "bodyText": "The JMH documentation states that benchmark methods should return a value in order to protect against dead code elimination. Maybe doWork could return the resulting Map.", "url": "https://github.com/eugenp/tutorials/pull/8758#discussion_r390997377", "createdAt": "2020-03-11T14:10:40Z", "author": {"login": "jzheaux"}, "path": "core-java-modules/core-java-concurrency-collections-2/src/main/java/com/baeldung/concurrent/lock/ConcurrentAccessBenchmark.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.baeldung.concurrent.lock;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@State(Scope.Thread)\n+@Fork(value = 1)\n+@Warmup(iterations = 0)\n+public class ConcurrentAccessBenchmark {\n+    ConcurrentAccessExperiment accessMyMap;\n+    static final int SLOTS = 4;\n+    static final int THREADS = 10000;\n+    static final int BUCKETS = Runtime.getRuntime().availableProcessors() * SLOTS;\n+\n+    @Param({\"Single Lock\", \"Striped Lock\"})\n+    private String lockType;\n+\n+    @Param({\"HashMap\", \"ConcurrentHashMap\"})\n+    private String mapType;\n+\n+    @Setup\n+    public void setup() {\n+        switch (lockType) {\n+            case \"Single Lock\":\n+                accessMyMap = new SingleLock();\n+                break;\n+            case \"Striped Lock\":\n+                accessMyMap = new StripedLock(BUCKETS);\n+                break;\n+        }\n+    }\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.Throughput)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    public void test() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0566eccb2c0cbdf7a7e033e99aaa2d879118373b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwMDQ5Ng==", "bodyText": "I believe that having more than one benchmark method would simplify both ConcurrentAccessBenchmark and ConcurrentAccessExperiment. For example:\n@Benchmark\npublic Map<String, String> singleLockHashMap() {\n    return this.single.doWork(new HashMap<>(), THREADS, SLOTS);\n}\n\n@Benchmark\npublic Map<String, String> stripedLockHashMap() {\n    return this.striped.doWork(new HashMap<>(), THREADS, SLOTS);\n}\n\n@Benchmark\npublic Map<String, String> singleLockConcurrentHashMap() {\n    return this.single.doWork(new ConcurrentHashMap<>(), THREADS, SLOTS);\n}\n\n@Benchmark\npublic Map<String, String> stripedLockConcurrentHashMap() {\n    return this.striped.doWork(new ConcurrentHashMap<>(), THREADS, SLOTS);\n}\nThen, you wouldn't need the setup method in this class nor in the experiment class. You could also then remove the lockType parameter and wouldn't need a direct reference to ConcurrentAccessExperiment.", "url": "https://github.com/eugenp/tutorials/pull/8758#discussion_r391000496", "createdAt": "2020-03-11T14:14:49Z", "author": {"login": "jzheaux"}, "path": "core-java-modules/core-java-concurrency-collections-2/src/main/java/com/baeldung/concurrent/lock/ConcurrentAccessBenchmark.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.baeldung.concurrent.lock;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@State(Scope.Thread)\n+@Fork(value = 1)\n+@Warmup(iterations = 0)\n+public class ConcurrentAccessBenchmark {\n+    ConcurrentAccessExperiment accessMyMap;\n+    static final int SLOTS = 4;\n+    static final int THREADS = 10000;\n+    static final int BUCKETS = Runtime.getRuntime().availableProcessors() * SLOTS;\n+\n+    @Param({\"Single Lock\", \"Striped Lock\"})\n+    private String lockType;\n+\n+    @Param({\"HashMap\", \"ConcurrentHashMap\"})\n+    private String mapType;\n+\n+    @Setup\n+    public void setup() {\n+        switch (lockType) {\n+            case \"Single Lock\":\n+                accessMyMap = new SingleLock();\n+                break;\n+            case \"Striped Lock\":\n+                accessMyMap = new StripedLock(BUCKETS);\n+                break;\n+        }\n+    }\n+\n+    @Benchmark", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0566eccb2c0cbdf7a7e033e99aaa2d879118373b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwMDcxMg==", "bodyText": "Let's remove this since it's redundant", "url": "https://github.com/eugenp/tutorials/pull/8758#discussion_r391000712", "createdAt": "2020-03-11T14:15:07Z", "author": {"login": "jzheaux"}, "path": "core-java-modules/core-java-concurrency-collections-2/src/main/java/com/baeldung/concurrent/lock/ConcurrentAccessExperiment.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.baeldung.concurrent.lock;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import com.google.common.base.Supplier;\n+\n+public abstract class ConcurrentAccessExperiment {\n+\n+    public ConcurrentAccessExperiment() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0566eccb2c0cbdf7a7e033e99aaa2d879118373b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwMTU0MQ==", "bodyText": "Why not simply use lock.lock()? That seems to be the default suggestion from the JavaDoc.", "url": "https://github.com/eugenp/tutorials/pull/8758#discussion_r391001541", "createdAt": "2020-03-11T14:16:12Z", "author": {"login": "jzheaux"}, "path": "core-java-modules/core-java-concurrency-collections-2/src/main/java/com/baeldung/concurrent/lock/SingleLock.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.baeldung.concurrent.lock;\n+\n+import java.util.Map;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import com.google.common.base.Supplier;\n+\n+public class SingleLock extends ConcurrentAccessExperiment {\n+    ReentrantLock lock;\n+\n+    public SingleLock() {\n+        lock = new ReentrantLock();\n+    }\n+\n+    protected synchronized Supplier<?> putSupplier(Map<String,String> map, int key) {\n+        return (()-> {\n+            boolean done = false;\n+            try {\n+                while(!done) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0566eccb2c0cbdf7a7e033e99aaa2d879118373b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwNDk5OQ==", "bodyText": "I'm not sure I understand the point of these methods being synchronized if they are using programmatic locks. I've always understood that these are alternatives - you can use locks instead of synchronized as an optimization.", "url": "https://github.com/eugenp/tutorials/pull/8758#discussion_r391004999", "createdAt": "2020-03-11T14:20:46Z", "author": {"login": "jzheaux"}, "path": "core-java-modules/core-java-concurrency-collections-2/src/main/java/com/baeldung/concurrent/lock/SingleLock.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.baeldung.concurrent.lock;\n+\n+import java.util.Map;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import com.google.common.base.Supplier;\n+\n+public class SingleLock extends ConcurrentAccessExperiment {\n+    ReentrantLock lock;\n+\n+    public SingleLock() {\n+        lock = new ReentrantLock();\n+    }\n+\n+    protected synchronized Supplier<?> putSupplier(Map<String,String> map, int key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0566eccb2c0cbdf7a7e033e99aaa2d879118373b"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1faabdd643e3dcfc32f4ecec2000614a158a8e36", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/1faabdd643e3dcfc32f4ecec2000614a158a8e36", "committedDate": "2020-03-11T17:18:05Z", "message": "BAEL-3855"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0058789fbdaf60da758b1b49ea45067bfa78746", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/e0058789fbdaf60da758b1b49ea45067bfa78746", "committedDate": "2020-03-11T18:56:30Z", "message": "BAEL-3855"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b403992993f8d27532141c372a0e0811d1875ac", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/7b403992993f8d27532141c372a0e0811d1875ac", "committedDate": "2020-03-11T19:09:14Z", "message": "BAEL-3855"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2892b138ee99616983a67d7fbb2ec4c3c0358ef6", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/2892b138ee99616983a67d7fbb2ec4c3c0358ef6", "committedDate": "2020-03-11T19:13:12Z", "message": "BAEL-3855\n\nidentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MzYwMTUx", "url": "https://github.com/eugenp/tutorials/pull/8758#pullrequestreview-374360151", "createdAt": "2020-03-13T14:48:07Z", "commit": {"oid": "2892b138ee99616983a67d7fbb2ec4c3c0358ef6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0ODowN1rOF2GgPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1MjowNlrOF2GqNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3Mzk4Mw==", "bodyText": "Wouldn't this be an infinite loop? Seems risky to just infinitely try again. I'd recommend doing:\nlock.lock();\ntry {\n    return map.put(\"key\" + key, \"value\" + key);\n} finally {\n    lock.unlock();\n}\nThis is what the JavaDoc recommends.\nAlso, if you return the result of map.put, then you don't need the extra return null; at the bottom.", "url": "https://github.com/eugenp/tutorials/pull/8758#discussion_r392273983", "createdAt": "2020-03-13T14:48:07Z", "author": {"login": "jzheaux"}, "path": "core-java-modules/core-java-concurrency-collections-2/src/main/java/com/baeldung/concurrent/lock/SingleLock.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.baeldung.concurrent.lock;\n+\n+import java.util.Map;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import com.google.common.base.Supplier;\n+\n+public class SingleLock extends ConcurrentAccessExperiment {\n+    ReentrantLock lock;\n+\n+    public SingleLock() {\n+        lock = new ReentrantLock();\n+    }\n+\n+    protected Supplier<?> putSupplier(Map<String,String> map, int key) {\n+        return (()-> {\n+            try {\n+                lock.lock();\n+                map.put(\"key\" + key, \"value\" + key);\n+            } catch (Exception e) {\n+                this.putSupplier(map, key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2892b138ee99616983a67d7fbb2ec4c3c0358ef6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NTEzMA==", "bodyText": "Please check the indentation here.", "url": "https://github.com/eugenp/tutorials/pull/8758#discussion_r392275130", "createdAt": "2020-03-13T14:49:55Z", "author": {"login": "jzheaux"}, "path": "core-java-modules/core-java-concurrency-collections-2/src/main/java/com/baeldung/concurrent/lock/StripedLock.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.baeldung.concurrent.lock;\n+\n+import java.util.Map;\n+import java.util.concurrent.locks.Lock;\n+\n+import com.google.common.base.Supplier;\n+import com.google.common.util.concurrent.Striped;\n+\n+public class StripedLock extends ConcurrentAccessExperiment {\n+    Striped<Lock> stripedLock;\n+\n+    public StripedLock(int buckets) {\n+        stripedLock = Striped.lock(buckets);\n+    }\n+\n+    protected Supplier<?> putSupplier(Map<String,String> map, int key) {\n+        return (()-> {\n+        \tint bucket = key % stripedLock.size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2892b138ee99616983a67d7fbb2ec4c3c0358ef6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NjM2NQ==", "bodyText": "I don't understand why you are re-instantiated the object each time. Won't that play into your results?\nIt seems like what you want to do is just reuse one already instantiated at the field level. That way, your benchmark is only about the work being done on the map and not about that plus the cost of instantiating the worker object.", "url": "https://github.com/eugenp/tutorials/pull/8758#discussion_r392276365", "createdAt": "2020-03-13T14:51:49Z", "author": {"login": "jzheaux"}, "path": "core-java-modules/core-java-concurrency-collections-2/src/main/java/com/baeldung/concurrent/lock/ConcurrentAccessBenchmark.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.baeldung.concurrent.lock;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@State(Scope.Thread)\n+@Fork(value = 2)\n+@Warmup(iterations = 0)\n+public class ConcurrentAccessBenchmark {\n+    ConcurrentAccessExperiment accessMyMap;\n+    static final int SLOTS = 4;\n+    static final int THREADS = 10000;\n+    static final int BUCKETS = Runtime.getRuntime().availableProcessors() * SLOTS;\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.Throughput)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    public void singleLockHashMap() throws InterruptedException {\n+        (new SingleLock()).doWork(new HashMap<String,String>(), THREADS, SLOTS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2892b138ee99616983a67d7fbb2ec4c3c0358ef6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NjUzNQ==", "bodyText": "These need to return values, in accordance with JMH's guidelines.", "url": "https://github.com/eugenp/tutorials/pull/8758#discussion_r392276535", "createdAt": "2020-03-13T14:52:06Z", "author": {"login": "jzheaux"}, "path": "core-java-modules/core-java-concurrency-collections-2/src/main/java/com/baeldung/concurrent/lock/ConcurrentAccessBenchmark.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.baeldung.concurrent.lock;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@State(Scope.Thread)\n+@Fork(value = 2)\n+@Warmup(iterations = 0)\n+public class ConcurrentAccessBenchmark {\n+    ConcurrentAccessExperiment accessMyMap;\n+    static final int SLOTS = 4;\n+    static final int THREADS = 10000;\n+    static final int BUCKETS = Runtime.getRuntime().availableProcessors() * SLOTS;\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.Throughput)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    public void singleLockHashMap() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2892b138ee99616983a67d7fbb2ec4c3c0358ef6"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d04b0f30b6094ad647200e4ca32f8294400bd1ea", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/d04b0f30b6094ad647200e4ca32f8294400bd1ea", "committedDate": "2020-03-13T15:33:34Z", "message": "BAEL-3855"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34bfe41cd9eeae716b258d14d9c0236b15878dec", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/34bfe41cd9eeae716b258d14d9c0236b15878dec", "committedDate": "2020-03-15T11:50:43Z", "message": "BAEL-3855"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22b51db880fdd7ca547f566ace3ddd927f2adeaf", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/22b51db880fdd7ca547f566ace3ddd927f2adeaf", "committedDate": "2020-03-15T12:04:55Z", "message": "BAEL-3855"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MTY1Njcx", "url": "https://github.com/eugenp/tutorials/pull/8758#pullrequestreview-376165671", "createdAt": "2020-03-17T15:50:38Z", "commit": {"oid": "22b51db880fdd7ca547f566ace3ddd927f2adeaf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo1MDozOFrOF3igxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo1MDozOFrOF3igxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4MTQ0Nw==", "bodyText": "We don't want to lock inside the try (see the JavaDoc). The reason is that if lock.lock() did in fact throw a RuntimeException, then the unlock could cause some unexpected results (since it's re-entrant, it could unlock one more level than intended, for example).", "url": "https://github.com/eugenp/tutorials/pull/8758#discussion_r393781447", "createdAt": "2020-03-17T15:50:38Z", "author": {"login": "jzheaux"}, "path": "core-java-modules/core-java-concurrency-collections-2/src/main/java/com/baeldung/concurrent/lock/SingleLock.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.baeldung.concurrent.lock;\n+\n+import java.util.Map;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import com.google.common.base.Supplier;\n+\n+public class SingleLock extends ConcurrentAccessExperiment {\n+    ReentrantLock lock;\n+\n+    public SingleLock() {\n+        lock = new ReentrantLock();\n+    }\n+\n+    protected Supplier<?> putSupplier(Map<String,String> map, int key) {\n+        return (()-> {\n+            try {\n+                lock.lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b51db880fdd7ca547f566ace3ddd927f2adeaf"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9140283ca2f8c9d8d2e191825dadce46bb8f0089", "author": {"user": {"login": "mguarnaccia", "name": null}}, "url": "https://github.com/eugenp/tutorials/commit/9140283ca2f8c9d8d2e191825dadce46bb8f0089", "committedDate": "2020-03-18T09:18:58Z", "message": "BAEL-3855"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4164, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}