{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwOTA5MTA5", "number": 2632, "title": "Do not add attestations from different forks to produced block", "bodyText": "PR Description\nCheck the attestation fork before including the attestation in a block, and if the attestation is from a different fork, (detect it by looking at the seed at the attestation epoch and attested block state vs the seed at the attestation epoch and created block pre-state) do not include the attestation.\nAlso, use the already generated indexed attestation during AttestationManager.onAttestation validations.\nTo improve, instead of saving the seed for each Attestation, we can also save it for each block root, but that might be a bit more complex.\nFixed Issue(s)\n\n\nFixes #2576\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-08-20T13:25:02Z", "url": "https://github.com/ConsenSys/teku/pull/2632", "merged": true, "mergeCommit": {"oid": "93d6ef0a5ef4a617ba4e9fe7c5d32af577c64ec1"}, "closed": true, "closedAt": "2020-08-25T10:35:47Z", "author": {"login": "cemozerr"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAvryWAH2gAyNDcwOTA5MTA5OmFlNDQyYWZjM2Y0NDg4Njg0ZWU2NTAzNjI0MjA4YWIyYTlmMDcyY2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCUTnwgH2gAyNDcwOTA5MTA5OjdiMDU5ZTVmMWZkNmM5OWM5Y2JlMDQ4M2ZmNmFlMWQzMWJmYTJlMTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ae442afc3f4488684ee6503624208ab2a9f072cf", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/ae442afc3f4488684ee6503624208ab2a9f072cf", "committedDate": "2020-08-20T12:50:36Z", "message": "Do not add attestations from different forks to produced block"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5eabee0d97e6ed77d5288232100bc2d7680040a", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/f5eabee0d97e6ed77d5288232100bc2d7680040a", "committedDate": "2020-08-20T13:26:28Z", "message": "Run spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMDU4MDI2", "url": "https://github.com/ConsenSys/teku/pull/2632#pullrequestreview-472058026", "createdAt": "2020-08-20T23:51:59Z", "commit": {"oid": "f5eabee0d97e6ed77d5288232100bc2d7680040a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMzo1MTo1OVrOHEW9VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMDowMToyN1rOHEXHwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzMjUwMQ==", "bodyText": "I think we should simplify this further to just store the randao rather than spending time calculating the entire shuffling seed.  If the randao matches, the shuffling seed will as well.  So just:\nget_randao_mix(state, compute_epoch_at_slot(attestation.getData().getSlot()))", "url": "https://github.com/ConsenSys/teku/pull/2632#discussion_r474332501", "createdAt": "2020-08-20T23:51:59Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -50,15 +56,37 @@ private ValidateableAttestation(\n     this.hashTreeRoot = Suppliers.memoize(attestation::hash_tree_root);\n   }\n \n+  public Optional<IndexedAttestation> getMaybeIndexedAttestation() {\n+    return maybeIndexedAttestation;\n+  }\n+\n   public IndexedAttestation getIndexedAttestation() {\n     return maybeIndexedAttestation.orElseThrow(\n         () ->\n             new UnsupportedOperationException(\n                 \"ValidateableAttestation does not have an IndexedAttestation yet.\"));\n   }\n \n-  public void setIndexedAttestation(IndexedAttestation maybeIndexedAttestation) {\n-    this.maybeIndexedAttestation = Optional.of(maybeIndexedAttestation);\n+  public Optional<Bytes32> getMaybeCommitteeShufflingSeed() {\n+    return maybeCommitteeShufflingSeed;\n+  }\n+\n+  public Bytes32 getCommitteeShufflingSeed() {\n+    return maybeCommitteeShufflingSeed.orElseThrow(\n+        () ->\n+            new UnsupportedOperationException(\n+                \"ValidateableAttestation does not have a committee shuffling seed yet.\"));\n+  }\n+\n+  public void setIndexedAttestation(IndexedAttestation indexedAttestation) {\n+    this.maybeIndexedAttestation = Optional.of(indexedAttestation);\n+  }\n+\n+  public void saveCommitteeShufflingSeed(BeaconState state) {\n+    Bytes32 committeeShufflingSeed =\n+        get_seed(\n+            state, compute_epoch_at_slot(attestation.getData().getSlot()), DOMAIN_BEACON_ATTESTER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5eabee0d97e6ed77d5288232100bc2d7680040a"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzMzM1NQ==", "bodyText": "We should apply this filter to the MatchingDataAttestationGroup as a whole rather than to every individual attestation.  If the attestation data matches and the signature is valid (both already checked), then either the entire group can be included, or the entire group can be excluded because they're all pointing to the same block root.\nAnd we should get the randao for the block's state prior to this stream so that we only get it once rather than for every group.", "url": "https://github.com/ConsenSys/teku/pull/2632#discussion_r474333355", "createdAt": "2020-08-20T23:55:08Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregatingAttestationPool.java", "diffHunk": "@@ -126,11 +129,23 @@ public int getSize() {\n         .filter(group -> isValid(stateAtBlockSlot, group.getAttestationData()))\n         .flatMap(MatchingDataAttestationGroup::stream)\n         .limit(attestations.getMaxSize())\n+        .filter(attestation -> fromCorrectFork(stateAtBlockSlot, attestation))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5eabee0d97e6ed77d5288232100bc2d7680040a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzNTE3MA==", "bodyText": "This is going to destroy us performance-wise.   We will suddenly be missing checkpoint state caches a whole lot more.\nGiven that the target checkpoint must be for the epoch matching the slot we should continue using the state for the target state.  ie from ForkChoiceUtil.validateOnAttestation:\n    if (!target.getEpoch().equals(compute_epoch_at_slot(attestation.getData().getSlot()))) {\n      return AttestationProcessingResult.invalid(\"Attestation slot must be within specified epoch\");\n    }\n\nRemember that if the randao in the state we validate against was different to the one used when creating the attestation, the signature would be invalid because the committees wouldn't match up.  So we can safely validate against any state from one epoch prior to the attestation's slot.", "url": "https://github.com/ConsenSys/teku/pull/2632#discussion_r474335170", "createdAt": "2020-08-21T00:01:27Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java", "diffHunk": "@@ -136,15 +136,18 @@ private void processHead(Optional<UInt64> nodeSlot) {\n   public SafeFuture<AttestationProcessingResult> onAttestation(\n       final ValidateableAttestation attestation) {\n     return recentChainData\n-        .retrieveCheckpointState(attestation.getData().getTarget())\n+        .retrieveBlockState(attestation.getData().getBeacon_block_root())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5eabee0d97e6ed77d5288232100bc2d7680040a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8eeaa55fca2301aecf5465ef7946d1ea5eb4650f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/8eeaa55fca2301aecf5465ef7946d1ea5eb4650f", "committedDate": "2020-08-21T07:57:22Z", "message": "Use randao mix instead of the seed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31e4fe2e5c445d65163d4133a2110d6c41c734ec", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/31e4fe2e5c445d65163d4133a2110d6c41c734ec", "committedDate": "2020-08-21T10:18:38Z", "message": "Check randao mix of attestation group"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ee9d197f7e4fb4ced405d6a05d9ea6b0f079073", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/6ee9d197f7e4fb4ced405d6a05d9ea6b0f079073", "committedDate": "2020-08-21T10:19:09Z", "message": "Merge branch 'master' into checkAttestationForkBeforeIncludingInBlock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e714a0e727d5cd0115667a283d9c2b9c0ea9c6c", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/4e714a0e727d5cd0115667a283d9c2b9c0ea9c6c", "committedDate": "2020-08-21T12:50:57Z", "message": "Implement ForkChecker and fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8637bc4b5ef53d394ac63d2431d8ffa3ff622442", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/8637bc4b5ef53d394ac63d2431d8ffa3ff622442", "committedDate": "2020-08-21T13:11:10Z", "message": "Add test specific for AggregatingAttestationsPool"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczOTAzNTY5", "url": "https://github.com/ConsenSys/teku/pull/2632#pullrequestreview-473903569", "createdAt": "2020-08-24T22:19:57Z", "commit": {"oid": "8637bc4b5ef53d394ac63d2431d8ffa3ff622442"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjoxOTo1N1rOHF4PRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjozMTozOFrOHF4f6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyNjM0Mw==", "bodyText": "It may be cleaner to just call attestation.saveRandoMix here and have the method do nothing if it already has a randaoMix saved.  Otherwise it takes a bit of reasoning to understand why the absence of an indexed attestation means we need to save randao mix.", "url": "https://github.com/ConsenSys/teku/pull/2632#discussion_r475926343", "createdAt": "2020-08-24T22:19:57Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java", "diffHunk": "@@ -399,6 +402,11 @@ private static AttestationProcessingResult indexAndValidateAttestation(\n         .ifSuccessful(\n             () -> {\n               attestation.setIndexedAttestation(indexedAttestation);\n+\n+              if (attestation.getMaybeIndexedAttestation().isEmpty()) {\n+                attestation.saveRandaoMix(targetState);\n+              }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8637bc4b5ef53d394ac63d2431d8ffa3ff622442"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyOTQ0Nw==", "bodyText": "I'm not really a fan of the Maybe in these method names.  I'd be tempted to just move to having a single getRandaoMix which returns an optional and do the orElseThrow in the caller if desired (and same for getIndexedAttestation).", "url": "https://github.com/ConsenSys/teku/pull/2632#discussion_r475929447", "createdAt": "2020-08-24T22:28:21Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -50,15 +57,38 @@ private ValidateableAttestation(\n     this.hashTreeRoot = Suppliers.memoize(attestation::hash_tree_root);\n   }\n \n+  public Optional<IndexedAttestation> getMaybeIndexedAttestation() {\n+    return maybeIndexedAttestation;\n+  }\n+\n   public IndexedAttestation getIndexedAttestation() {\n     return maybeIndexedAttestation.orElseThrow(\n         () ->\n             new UnsupportedOperationException(\n                 \"ValidateableAttestation does not have an IndexedAttestation yet.\"));\n   }\n \n-  public void setIndexedAttestation(IndexedAttestation maybeIndexedAttestation) {\n-    this.maybeIndexedAttestation = Optional.of(maybeIndexedAttestation);\n+  public Optional<Bytes32> getMaybeRandaoMix() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8637bc4b5ef53d394ac63d2431d8ffa3ff622442"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyOTc3Nw==", "bodyText": "Didn't we circle back round to storing the seed? Sorry, I know I said randao mix but I was overthinking the performance implications I think.  As long as we don't have to calculate a seed for every attestation when producing blocks it will be fine.", "url": "https://github.com/ConsenSys/teku/pull/2632#discussion_r475929777", "createdAt": "2020-08-24T22:29:19Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -50,15 +57,38 @@ private ValidateableAttestation(\n     this.hashTreeRoot = Suppliers.memoize(attestation::hash_tree_root);\n   }\n \n+  public Optional<IndexedAttestation> getMaybeIndexedAttestation() {\n+    return maybeIndexedAttestation;\n+  }\n+\n   public IndexedAttestation getIndexedAttestation() {\n     return maybeIndexedAttestation.orElseThrow(\n         () ->\n             new UnsupportedOperationException(\n                 \"ValidateableAttestation does not have an IndexedAttestation yet.\"));\n   }\n \n-  public void setIndexedAttestation(IndexedAttestation maybeIndexedAttestation) {\n-    this.maybeIndexedAttestation = Optional.of(maybeIndexedAttestation);\n+  public Optional<Bytes32> getMaybeRandaoMix() {\n+    return maybeRandaoMix;\n+  }\n+\n+  public Bytes32 getRandaoMix() {\n+    return maybeRandaoMix.orElseThrow(\n+        () ->\n+            new UnsupportedOperationException(\n+                \"ValidateableAttestation does not have a randao mix yet.\"));\n+  }\n+\n+  public void setIndexedAttestation(IndexedAttestation indexedAttestation) {\n+    this.maybeIndexedAttestation = Optional.of(indexedAttestation);\n+  }\n+\n+  public void saveRandaoMix(BeaconState state) {\n+    UInt64 randaoIndex =\n+        compute_epoch_at_slot(attestation.getData().getSlot())\n+            .plus(EPOCHS_PER_HISTORICAL_VECTOR - MIN_SEED_LOOKAHEAD - 1);\n+    Bytes32 mix = get_randao_mix(state, randaoIndex);\n+    this.maybeRandaoMix = Optional.of(mix);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8637bc4b5ef53d394ac63d2431d8ffa3ff622442"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzMDYwMw==", "bodyText": "Good idea to make this its own class.", "url": "https://github.com/ConsenSys/teku/pull/2632#discussion_r475930603", "createdAt": "2020-08-24T22:31:38Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationForkChecker.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition.attestation;\n+\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_randao_mix;\n+import static tech.pegasys.teku.util.config.Constants.EPOCHS_PER_HISTORICAL_VECTOR;\n+import static tech.pegasys.teku.util.config.Constants.MIN_SEED_LOOKAHEAD;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+public class AttestationForkChecker {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8637bc4b5ef53d394ac63d2431d8ffa3ff622442"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b4399a976bf116ae0e4ef1e4dd3c02a74e19a5", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/d7b4399a976bf116ae0e4ef1e4dd3c02a74e19a5", "committedDate": "2020-08-25T08:39:46Z", "message": "Directly call save randao mix method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a3c3898a8eb59b7484db1b4e7e73043209678cc", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/1a3c3898a8eb59b7484db1b4e7e73043209678cc", "committedDate": "2020-08-25T08:40:12Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a89cc112771d08225f6309e93a0d20ad6e1d34ec", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/a89cc112771d08225f6309e93a0d20ad6e1d34ec", "committedDate": "2020-08-25T09:00:43Z", "message": "Remove maybe methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30bc6e024891c163075359829e353c2c1dc1e6de", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/30bc6e024891c163075359829e353c2c1dc1e6de", "committedDate": "2020-08-25T09:55:37Z", "message": "Revert back to using seed as distinct fork identifier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95a3543fe2cfde8759a11ddb8a9c7187d4c6e64d", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/95a3543fe2cfde8759a11ddb8a9c7187d4c6e64d", "committedDate": "2020-08-25T09:56:48Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4736955ee953b281e3c0daecbc3d1f3200752e87", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/4736955ee953b281e3c0daecbc3d1f3200752e87", "committedDate": "2020-08-25T10:02:22Z", "message": "Fix equality check bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b059e5f1fd6c99c9cbe0483ff6ae1d31bfa2e13", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/7b059e5f1fd6c99c9cbe0483ff6ae1d31bfa2e13", "committedDate": "2020-08-25T10:04:37Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into checkAttestationForkBeforeIncludingInBlock\n\n# Conflicts:\n#\tethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3520, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}