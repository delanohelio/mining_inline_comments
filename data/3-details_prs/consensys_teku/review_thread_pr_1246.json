{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNjQ2Nzcy", "number": 1246, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDozOTozMFrODkGxlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDozNzowMFrODlQKow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg2MzI3OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/genesis/GenesisHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMDozOTozMVrOFwQCcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzoxMjowN1rOFwe9-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODczNg==", "bodyText": "We should actually use the deposits list passed in.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                genesisGenerator.updateCandidateState(blockHash, timestamp, List.of());\n          \n          \n            \n                genesisGenerator.updateCandidateState(blockHash, timestamp, deposits);", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r386138736", "createdAt": "2020-03-01T20:39:31Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/genesis/GenesisHandler.java", "diffHunk": "@@ -51,42 +44,33 @@ public void onDepositsFromBlock(final DepositsFromBlockEvent event) {\n     if (!chainStorageClient.isPreGenesis()) {\n       return;\n     }\n-\n-    final Bytes32 eth1BlockHash = event.getBlockHash();\n-    final UnsignedLong eth1Timestamp = event.getBlockTimestamp();\n     final List<DepositWithIndex> deposits =\n         event.getDeposits().stream()\n             .map(DepositUtil::convertDepositEventToOperationDeposit)\n             .collect(Collectors.toList());\n-    genesisGenerator.addDepositsFromBlock(eth1BlockHash, eth1Timestamp, deposits);\n \n-    if (config.getDepositMode().equals(Constants.DEPOSIT_SIM)) {\n-      genesisGenerator\n-          .getGenesisStateIfValid(BeaconStateUtil::is_valid_genesis_stateSim)\n-          .ifPresent(\n-              candidate_state -> {\n-                setSimulationGenesisTime(candidate_state);\n-                eth2Genesis(new GenesisEvent(candidate_state));\n-              });\n-    } else {\n-      genesisGenerator\n-          .getGenesisStateIfValid(BeaconStateUtil::is_valid_genesis_state)\n-          .ifPresent(candidate_state -> eth2Genesis(new GenesisEvent(candidate_state)));\n-    }\n+    processNewData(event.getBlockHash(), event.getBlockTimestamp(), deposits);\n+  }\n+\n+  @Override\n+  public void onMinGenesisTimeBlock(MinGenesisTimeBlockEvent event) {\n+    processNewData(event.getBlockHash(), event.getTimestamp(), List.of());\n   }\n \n-  private void eth2Genesis(GenesisEvent genesisEvent) {\n+  private void processNewData(\n+      Bytes32 blockHash, UnsignedLong timestamp, List<DepositWithIndex> deposits) {\n+    genesisGenerator.updateCandidateState(blockHash, timestamp, List.of());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ce48ed9cd9e2fe68ce9005515db86bb30fb7f40"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM4MzM1Mw==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r386383353", "createdAt": "2020-03-02T13:12:07Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/genesis/GenesisHandler.java", "diffHunk": "@@ -51,42 +44,33 @@ public void onDepositsFromBlock(final DepositsFromBlockEvent event) {\n     if (!chainStorageClient.isPreGenesis()) {\n       return;\n     }\n-\n-    final Bytes32 eth1BlockHash = event.getBlockHash();\n-    final UnsignedLong eth1Timestamp = event.getBlockTimestamp();\n     final List<DepositWithIndex> deposits =\n         event.getDeposits().stream()\n             .map(DepositUtil::convertDepositEventToOperationDeposit)\n             .collect(Collectors.toList());\n-    genesisGenerator.addDepositsFromBlock(eth1BlockHash, eth1Timestamp, deposits);\n \n-    if (config.getDepositMode().equals(Constants.DEPOSIT_SIM)) {\n-      genesisGenerator\n-          .getGenesisStateIfValid(BeaconStateUtil::is_valid_genesis_stateSim)\n-          .ifPresent(\n-              candidate_state -> {\n-                setSimulationGenesisTime(candidate_state);\n-                eth2Genesis(new GenesisEvent(candidate_state));\n-              });\n-    } else {\n-      genesisGenerator\n-          .getGenesisStateIfValid(BeaconStateUtil::is_valid_genesis_state)\n-          .ifPresent(candidate_state -> eth2Genesis(new GenesisEvent(candidate_state)));\n-    }\n+    processNewData(event.getBlockHash(), event.getBlockTimestamp(), deposits);\n+  }\n+\n+  @Override\n+  public void onMinGenesisTimeBlock(MinGenesisTimeBlockEvent event) {\n+    processNewData(event.getBlockHash(), event.getTimestamp(), List.of());\n   }\n \n-  private void eth2Genesis(GenesisEvent genesisEvent) {\n+  private void processNewData(\n+      Bytes32 blockHash, UnsignedLong timestamp, List<DepositWithIndex> deposits) {\n+    genesisGenerator.updateCandidateState(blockHash, timestamp, List.of());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzODczNg=="}, "originalCommit": {"oid": "1ce48ed9cd9e2fe68ce9005515db86bb30fb7f40"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg4MTM1OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMToxMDowMFrOFwQLlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzoyMjo1MVrOFwfR8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MTA3Ng==", "bodyText": "The future chaining here is making life much more complex than it needs to be.  First, get the head, then when you have the head, decide if it's before min genesis and call the right method.  Right now you're starting the process to get head, then queuing up the process to decide if it's before or after, then queuing up the decision of which method to call etc.\nIt should just be:\n  public void start() {\n    getHead().thenCompose(headBlock -> {\n      if (isHeadBeforeMinGenesis(headBlock)) {\n        return headBeforeMinGenesisMode(headBlock);\n      } else {\n        return headAfterMinGenesisMode(headBlock);\n      }\n    });\n  }\n\nand isHeadBeforeMinGenesis, headBeforeMinGenesisMode and headAfterMinGenesisMode all take a EthBlock.Block rather than a SafeFuture<EthBlock.Block>.  Now life is easy. :)\nThe other detail is that you need to handle errors - mostly if getHead fails or the requests for deposits in headBeforeMinGenesisMode and headAfterMinGenesisMode fails.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r386141076", "createdAt": "2020-03-01T21:10:00Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "diffHunk": "@@ -13,113 +13,121 @@\n \n package tech.pegasys.artemis.pow;\n \n-import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.primitives.UnsignedLong;\n-import io.reactivex.disposables.Disposable;\n import java.math.BigInteger;\n-import java.util.concurrent.TimeUnit;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n import org.web3j.protocol.core.methods.response.EthBlock;\n-import tech.pegasys.artemis.pow.api.MinGenesisTimeBlockEventChannel;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n import tech.pegasys.artemis.pow.event.MinGenesisTimeBlockEvent;\n import tech.pegasys.artemis.util.async.AsyncRunner;\n import tech.pegasys.artemis.util.async.SafeFuture;\n import tech.pegasys.artemis.util.config.Constants;\n \n-public class Eth1MinGenesisTimeBlockFinder {\n+public class Eth1Manager {\n \n   private static final Logger LOG = LogManager.getLogger();\n \n   private final Eth1Provider eth1Provider;\n-  private final MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel;\n   private final AsyncRunner asyncRunner;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositProcessingController depositProcessingController;\n \n-  private volatile Disposable latestBlockDisposable;\n-\n-  public Eth1MinGenesisTimeBlockFinder(\n+  public Eth1Manager(\n       Eth1Provider eth1Provider,\n-      MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel,\n-      AsyncRunner asyncRunner) {\n+      AsyncRunner asyncRunner,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositProcessingController depositProcessingController) {\n     this.eth1Provider = eth1Provider;\n-    this.minGenesisTimeBlockEventChannel = minGenesisTimeBlockEventChannel;\n     this.asyncRunner = asyncRunner;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositProcessingController = depositProcessingController;\n   }\n \n   public void start() {\n-    findAndPublishFirstValidBlock()\n-        .finish(\n-            () ->\n-                LOG.info(\n-                    \"Eth1MinGenesisBlockFinder successfully found first \"\n-                        + \"(time) valid genesis block\"));\n+\n+    SafeFuture<EthBlock.Block> headBlock = getHead();\n+\n+    SafeFuture<Boolean> isHeadBeforeMinGenesis = isHeadBeforeMinGenesis(headBlock);\n+\n+    isHeadBeforeMinGenesis.thenAccept(\n+        bool -> {\n+          if (bool) headBeforeMinGenesisMode(headBlock);\n+          else headAfterMinGenesisMode(headBlock);\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ce48ed9cd9e2fe68ce9005515db86bb30fb7f40"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM4NDk5Ng==", "bodyText": "Makes perfect sense. Done.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r386384996", "createdAt": "2020-03-02T13:15:51Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "diffHunk": "@@ -13,113 +13,121 @@\n \n package tech.pegasys.artemis.pow;\n \n-import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.primitives.UnsignedLong;\n-import io.reactivex.disposables.Disposable;\n import java.math.BigInteger;\n-import java.util.concurrent.TimeUnit;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n import org.web3j.protocol.core.methods.response.EthBlock;\n-import tech.pegasys.artemis.pow.api.MinGenesisTimeBlockEventChannel;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n import tech.pegasys.artemis.pow.event.MinGenesisTimeBlockEvent;\n import tech.pegasys.artemis.util.async.AsyncRunner;\n import tech.pegasys.artemis.util.async.SafeFuture;\n import tech.pegasys.artemis.util.config.Constants;\n \n-public class Eth1MinGenesisTimeBlockFinder {\n+public class Eth1Manager {\n \n   private static final Logger LOG = LogManager.getLogger();\n \n   private final Eth1Provider eth1Provider;\n-  private final MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel;\n   private final AsyncRunner asyncRunner;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositProcessingController depositProcessingController;\n \n-  private volatile Disposable latestBlockDisposable;\n-\n-  public Eth1MinGenesisTimeBlockFinder(\n+  public Eth1Manager(\n       Eth1Provider eth1Provider,\n-      MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel,\n-      AsyncRunner asyncRunner) {\n+      AsyncRunner asyncRunner,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositProcessingController depositProcessingController) {\n     this.eth1Provider = eth1Provider;\n-    this.minGenesisTimeBlockEventChannel = minGenesisTimeBlockEventChannel;\n     this.asyncRunner = asyncRunner;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositProcessingController = depositProcessingController;\n   }\n \n   public void start() {\n-    findAndPublishFirstValidBlock()\n-        .finish(\n-            () ->\n-                LOG.info(\n-                    \"Eth1MinGenesisBlockFinder successfully found first \"\n-                        + \"(time) valid genesis block\"));\n+\n+    SafeFuture<EthBlock.Block> headBlock = getHead();\n+\n+    SafeFuture<Boolean> isHeadBeforeMinGenesis = isHeadBeforeMinGenesis(headBlock);\n+\n+    isHeadBeforeMinGenesis.thenAccept(\n+        bool -> {\n+          if (bool) headBeforeMinGenesisMode(headBlock);\n+          else headAfterMinGenesisMode(headBlock);\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MTA3Ng=="}, "originalCommit": {"oid": "1ce48ed9cd9e2fe68ce9005515db86bb30fb7f40"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM4ODQ2Ng==", "bodyText": "I'm now dealing with the error case of getHead in the getHead function itself, and I plan to do the same for headBeforeMinGenesis etc as well because it gives me more granular control. Does that make sense?", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r386388466", "createdAt": "2020-03-02T13:22:51Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "diffHunk": "@@ -13,113 +13,121 @@\n \n package tech.pegasys.artemis.pow;\n \n-import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.primitives.UnsignedLong;\n-import io.reactivex.disposables.Disposable;\n import java.math.BigInteger;\n-import java.util.concurrent.TimeUnit;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n import org.web3j.protocol.core.methods.response.EthBlock;\n-import tech.pegasys.artemis.pow.api.MinGenesisTimeBlockEventChannel;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n import tech.pegasys.artemis.pow.event.MinGenesisTimeBlockEvent;\n import tech.pegasys.artemis.util.async.AsyncRunner;\n import tech.pegasys.artemis.util.async.SafeFuture;\n import tech.pegasys.artemis.util.config.Constants;\n \n-public class Eth1MinGenesisTimeBlockFinder {\n+public class Eth1Manager {\n \n   private static final Logger LOG = LogManager.getLogger();\n \n   private final Eth1Provider eth1Provider;\n-  private final MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel;\n   private final AsyncRunner asyncRunner;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositProcessingController depositProcessingController;\n \n-  private volatile Disposable latestBlockDisposable;\n-\n-  public Eth1MinGenesisTimeBlockFinder(\n+  public Eth1Manager(\n       Eth1Provider eth1Provider,\n-      MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel,\n-      AsyncRunner asyncRunner) {\n+      AsyncRunner asyncRunner,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositProcessingController depositProcessingController) {\n     this.eth1Provider = eth1Provider;\n-    this.minGenesisTimeBlockEventChannel = minGenesisTimeBlockEventChannel;\n     this.asyncRunner = asyncRunner;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositProcessingController = depositProcessingController;\n   }\n \n   public void start() {\n-    findAndPublishFirstValidBlock()\n-        .finish(\n-            () ->\n-                LOG.info(\n-                    \"Eth1MinGenesisBlockFinder successfully found first \"\n-                        + \"(time) valid genesis block\"));\n+\n+    SafeFuture<EthBlock.Block> headBlock = getHead();\n+\n+    SafeFuture<Boolean> isHeadBeforeMinGenesis = isHeadBeforeMinGenesis(headBlock);\n+\n+    isHeadBeforeMinGenesis.thenAccept(\n+        bool -> {\n+          if (bool) headBeforeMinGenesisMode(headBlock);\n+          else headAfterMinGenesisMode(headBlock);\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MTA3Ng=="}, "originalCommit": {"oid": "1ce48ed9cd9e2fe68ce9005515db86bb30fb7f40"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg4NTY2OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMToxNzoxMFrOFwQNsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzozNDoyOFrOFwfpbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MTYxNg==", "bodyText": "Suggest renaming to notifyMinGenesisTimeBlockReached to make it clear this is firing an event not dealing with things \"post\" (aka after) the genesis time block reached.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r386141616", "createdAt": "2020-03-01T21:17:10Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "diffHunk": "@@ -13,113 +13,121 @@\n \n package tech.pegasys.artemis.pow;\n \n-import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.primitives.UnsignedLong;\n-import io.reactivex.disposables.Disposable;\n import java.math.BigInteger;\n-import java.util.concurrent.TimeUnit;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n import org.web3j.protocol.core.methods.response.EthBlock;\n-import tech.pegasys.artemis.pow.api.MinGenesisTimeBlockEventChannel;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n import tech.pegasys.artemis.pow.event.MinGenesisTimeBlockEvent;\n import tech.pegasys.artemis.util.async.AsyncRunner;\n import tech.pegasys.artemis.util.async.SafeFuture;\n import tech.pegasys.artemis.util.config.Constants;\n \n-public class Eth1MinGenesisTimeBlockFinder {\n+public class Eth1Manager {\n \n   private static final Logger LOG = LogManager.getLogger();\n \n   private final Eth1Provider eth1Provider;\n-  private final MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel;\n   private final AsyncRunner asyncRunner;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositProcessingController depositProcessingController;\n \n-  private volatile Disposable latestBlockDisposable;\n-\n-  public Eth1MinGenesisTimeBlockFinder(\n+  public Eth1Manager(\n       Eth1Provider eth1Provider,\n-      MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel,\n-      AsyncRunner asyncRunner) {\n+      AsyncRunner asyncRunner,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositProcessingController depositProcessingController) {\n     this.eth1Provider = eth1Provider;\n-    this.minGenesisTimeBlockEventChannel = minGenesisTimeBlockEventChannel;\n     this.asyncRunner = asyncRunner;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositProcessingController = depositProcessingController;\n   }\n \n   public void start() {\n-    findAndPublishFirstValidBlock()\n-        .finish(\n-            () ->\n-                LOG.info(\n-                    \"Eth1MinGenesisBlockFinder successfully found first \"\n-                        + \"(time) valid genesis block\"));\n+\n+    SafeFuture<EthBlock.Block> headBlock = getHead();\n+\n+    SafeFuture<Boolean> isHeadBeforeMinGenesis = isHeadBeforeMinGenesis(headBlock);\n+\n+    isHeadBeforeMinGenesis.thenAccept(\n+        bool -> {\n+          if (bool) headBeforeMinGenesisMode(headBlock);\n+          else headAfterMinGenesisMode(headBlock);\n+        });\n+  }\n+\n+  public SafeFuture<Void> headBeforeMinGenesisMode(SafeFuture<EthBlock.Block> head) {\n+    return head.thenCompose(\n+            headBlock ->\n+                depositProcessingController.fetchDepositsFromGenesisTo(headBlock.getNumber()))\n+        .thenRun(\n+            () -> {\n+              EthBlock.Block block = checkNotNull(head.getNow(null));\n+              depositProcessingController.switchToBlockByBlockMode();\n+              depositProcessingController.startSubscription(block.getNumber());\n+            });\n+  }\n+\n+  public SafeFuture<Void> headAfterMinGenesisMode(SafeFuture<EthBlock.Block> head) {\n+    SafeFuture<EthBlock.Block> minGenesisBlock =\n+        head.thenCompose(this::findMinGenesisTimeBlockInHistory);\n+\n+    return minGenesisBlock\n+        .thenCompose(\n+            block -> depositProcessingController.fetchDepositsFromGenesisTo(block.getNumber()))\n+        .thenRun(\n+            () -> {\n+              EthBlock.Block block = checkNotNull(minGenesisBlock.getNow(null));\n+              postMinGenesisTimeBlock(eth1EventsChannel, block);\n+              depositProcessingController.startSubscription(block.getNumber());\n+            });\n   }\n \n-  public SafeFuture<Void> findAndPublishFirstValidBlock() {\n+  public SafeFuture<EthBlock.Block> getHead() {\n     return eth1Provider\n         .getLatestEth1BlockFuture()\n         .thenApply(EthBlock.Block::getNumber)\n         .thenApply(number -> number.subtract(Constants.ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n         .thenApply(UnsignedLong::valueOf)\n-        .thenCompose(eth1Provider::getEth1BlockFuture)\n-        .thenCompose(\n-            block -> {\n-              int comparison = compareBlockTimestampToMinGenesisTime(block);\n-              if (comparison > 0) {\n-                // If block timestamp is greater than min genesis time\n-                // find first valid block in history\n-                return findFirstValidBlockInHistory(block);\n-              } else if (comparison < 0) {\n-                // If block timestamp is less than min genesis time\n-                // subscribe to new block events and wait for the first\n-                // valid block\n-                return waitForFirstValidBlock();\n-              } else {\n-                return SafeFuture.completedFuture(block);\n-              }\n-            })\n-        .thenAccept(this::publishFirstValidBlock)\n-        .exceptionallyCompose(\n-            err -> {\n-              if (latestBlockDisposable != null) {\n-                latestBlockDisposable.dispose();\n-              }\n+        .thenCompose(eth1Provider::getEth1BlockFuture);\n+  }\n \n-              LOG.debug(\n-                  \"Eth1MinGenesisTimeBlockFinder failed to find first valid block. Retry in \"\n-                      + Constants.ETH1_MIN_GENESIS_TIME_BLOCK_RETRY_TIMEOUT\n-                      + \" seconds\",\n-                  err);\n-\n-              System.out.println(\"adding one delayed run\");\n-              return asyncRunner.runAfterDelay(\n-                  this::findAndPublishFirstValidBlock,\n-                  Constants.ETH1_MIN_GENESIS_TIME_BLOCK_RETRY_TIMEOUT,\n-                  TimeUnit.SECONDS);\n-            });\n+  public SafeFuture<Boolean> isHeadBeforeMinGenesis(SafeFuture<EthBlock.Block> headBlock) {\n+    return headBlock.thenApply(\n+        block -> {\n+          int comparison = compareBlockTimestampToMinGenesisTime(block);\n+          // If block timestamp is greater than min genesis time,\n+          // min genesis block must have been in history\n+          return comparison > 0;\n+        });\n   }\n \n-  private void publishFirstValidBlock(EthBlock.Block block) {\n-    minGenesisTimeBlockEventChannel.onMinGenesisTimeBlock(\n+  public static EthBlock.Block postMinGenesisTimeBlock(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ce48ed9cd9e2fe68ce9005515db86bb30fb7f40"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM5NDQ3OA==", "bodyText": "makes sense. done.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r386394478", "createdAt": "2020-03-02T13:34:28Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "diffHunk": "@@ -13,113 +13,121 @@\n \n package tech.pegasys.artemis.pow;\n \n-import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.primitives.UnsignedLong;\n-import io.reactivex.disposables.Disposable;\n import java.math.BigInteger;\n-import java.util.concurrent.TimeUnit;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n import org.web3j.protocol.core.methods.response.EthBlock;\n-import tech.pegasys.artemis.pow.api.MinGenesisTimeBlockEventChannel;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n import tech.pegasys.artemis.pow.event.MinGenesisTimeBlockEvent;\n import tech.pegasys.artemis.util.async.AsyncRunner;\n import tech.pegasys.artemis.util.async.SafeFuture;\n import tech.pegasys.artemis.util.config.Constants;\n \n-public class Eth1MinGenesisTimeBlockFinder {\n+public class Eth1Manager {\n \n   private static final Logger LOG = LogManager.getLogger();\n \n   private final Eth1Provider eth1Provider;\n-  private final MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel;\n   private final AsyncRunner asyncRunner;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositProcessingController depositProcessingController;\n \n-  private volatile Disposable latestBlockDisposable;\n-\n-  public Eth1MinGenesisTimeBlockFinder(\n+  public Eth1Manager(\n       Eth1Provider eth1Provider,\n-      MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel,\n-      AsyncRunner asyncRunner) {\n+      AsyncRunner asyncRunner,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositProcessingController depositProcessingController) {\n     this.eth1Provider = eth1Provider;\n-    this.minGenesisTimeBlockEventChannel = minGenesisTimeBlockEventChannel;\n     this.asyncRunner = asyncRunner;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositProcessingController = depositProcessingController;\n   }\n \n   public void start() {\n-    findAndPublishFirstValidBlock()\n-        .finish(\n-            () ->\n-                LOG.info(\n-                    \"Eth1MinGenesisBlockFinder successfully found first \"\n-                        + \"(time) valid genesis block\"));\n+\n+    SafeFuture<EthBlock.Block> headBlock = getHead();\n+\n+    SafeFuture<Boolean> isHeadBeforeMinGenesis = isHeadBeforeMinGenesis(headBlock);\n+\n+    isHeadBeforeMinGenesis.thenAccept(\n+        bool -> {\n+          if (bool) headBeforeMinGenesisMode(headBlock);\n+          else headAfterMinGenesisMode(headBlock);\n+        });\n+  }\n+\n+  public SafeFuture<Void> headBeforeMinGenesisMode(SafeFuture<EthBlock.Block> head) {\n+    return head.thenCompose(\n+            headBlock ->\n+                depositProcessingController.fetchDepositsFromGenesisTo(headBlock.getNumber()))\n+        .thenRun(\n+            () -> {\n+              EthBlock.Block block = checkNotNull(head.getNow(null));\n+              depositProcessingController.switchToBlockByBlockMode();\n+              depositProcessingController.startSubscription(block.getNumber());\n+            });\n+  }\n+\n+  public SafeFuture<Void> headAfterMinGenesisMode(SafeFuture<EthBlock.Block> head) {\n+    SafeFuture<EthBlock.Block> minGenesisBlock =\n+        head.thenCompose(this::findMinGenesisTimeBlockInHistory);\n+\n+    return minGenesisBlock\n+        .thenCompose(\n+            block -> depositProcessingController.fetchDepositsFromGenesisTo(block.getNumber()))\n+        .thenRun(\n+            () -> {\n+              EthBlock.Block block = checkNotNull(minGenesisBlock.getNow(null));\n+              postMinGenesisTimeBlock(eth1EventsChannel, block);\n+              depositProcessingController.startSubscription(block.getNumber());\n+            });\n   }\n \n-  public SafeFuture<Void> findAndPublishFirstValidBlock() {\n+  public SafeFuture<EthBlock.Block> getHead() {\n     return eth1Provider\n         .getLatestEth1BlockFuture()\n         .thenApply(EthBlock.Block::getNumber)\n         .thenApply(number -> number.subtract(Constants.ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n         .thenApply(UnsignedLong::valueOf)\n-        .thenCompose(eth1Provider::getEth1BlockFuture)\n-        .thenCompose(\n-            block -> {\n-              int comparison = compareBlockTimestampToMinGenesisTime(block);\n-              if (comparison > 0) {\n-                // If block timestamp is greater than min genesis time\n-                // find first valid block in history\n-                return findFirstValidBlockInHistory(block);\n-              } else if (comparison < 0) {\n-                // If block timestamp is less than min genesis time\n-                // subscribe to new block events and wait for the first\n-                // valid block\n-                return waitForFirstValidBlock();\n-              } else {\n-                return SafeFuture.completedFuture(block);\n-              }\n-            })\n-        .thenAccept(this::publishFirstValidBlock)\n-        .exceptionallyCompose(\n-            err -> {\n-              if (latestBlockDisposable != null) {\n-                latestBlockDisposable.dispose();\n-              }\n+        .thenCompose(eth1Provider::getEth1BlockFuture);\n+  }\n \n-              LOG.debug(\n-                  \"Eth1MinGenesisTimeBlockFinder failed to find first valid block. Retry in \"\n-                      + Constants.ETH1_MIN_GENESIS_TIME_BLOCK_RETRY_TIMEOUT\n-                      + \" seconds\",\n-                  err);\n-\n-              System.out.println(\"adding one delayed run\");\n-              return asyncRunner.runAfterDelay(\n-                  this::findAndPublishFirstValidBlock,\n-                  Constants.ETH1_MIN_GENESIS_TIME_BLOCK_RETRY_TIMEOUT,\n-                  TimeUnit.SECONDS);\n-            });\n+  public SafeFuture<Boolean> isHeadBeforeMinGenesis(SafeFuture<EthBlock.Block> headBlock) {\n+    return headBlock.thenApply(\n+        block -> {\n+          int comparison = compareBlockTimestampToMinGenesisTime(block);\n+          // If block timestamp is greater than min genesis time,\n+          // min genesis block must have been in history\n+          return comparison > 0;\n+        });\n   }\n \n-  private void publishFirstValidBlock(EthBlock.Block block) {\n-    minGenesisTimeBlockEventChannel.onMinGenesisTimeBlock(\n+  public static EthBlock.Block postMinGenesisTimeBlock(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MTYxNg=="}, "originalCommit": {"oid": "1ce48ed9cd9e2fe68ce9005515db86bb30fb7f40"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg4NTgyOnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMToxNzoyNVrOFwQNxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0MDoyN1rOFwf1lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MTYzOA==", "bodyText": "If it's equal then min genesis time is also in the existing block chain list (because it is the head block).", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r386141638", "createdAt": "2020-03-01T21:17:25Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "diffHunk": "@@ -13,113 +13,121 @@\n \n package tech.pegasys.artemis.pow;\n \n-import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.primitives.UnsignedLong;\n-import io.reactivex.disposables.Disposable;\n import java.math.BigInteger;\n-import java.util.concurrent.TimeUnit;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n import org.web3j.protocol.core.methods.response.EthBlock;\n-import tech.pegasys.artemis.pow.api.MinGenesisTimeBlockEventChannel;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n import tech.pegasys.artemis.pow.event.MinGenesisTimeBlockEvent;\n import tech.pegasys.artemis.util.async.AsyncRunner;\n import tech.pegasys.artemis.util.async.SafeFuture;\n import tech.pegasys.artemis.util.config.Constants;\n \n-public class Eth1MinGenesisTimeBlockFinder {\n+public class Eth1Manager {\n \n   private static final Logger LOG = LogManager.getLogger();\n \n   private final Eth1Provider eth1Provider;\n-  private final MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel;\n   private final AsyncRunner asyncRunner;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositProcessingController depositProcessingController;\n \n-  private volatile Disposable latestBlockDisposable;\n-\n-  public Eth1MinGenesisTimeBlockFinder(\n+  public Eth1Manager(\n       Eth1Provider eth1Provider,\n-      MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel,\n-      AsyncRunner asyncRunner) {\n+      AsyncRunner asyncRunner,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositProcessingController depositProcessingController) {\n     this.eth1Provider = eth1Provider;\n-    this.minGenesisTimeBlockEventChannel = minGenesisTimeBlockEventChannel;\n     this.asyncRunner = asyncRunner;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositProcessingController = depositProcessingController;\n   }\n \n   public void start() {\n-    findAndPublishFirstValidBlock()\n-        .finish(\n-            () ->\n-                LOG.info(\n-                    \"Eth1MinGenesisBlockFinder successfully found first \"\n-                        + \"(time) valid genesis block\"));\n+\n+    SafeFuture<EthBlock.Block> headBlock = getHead();\n+\n+    SafeFuture<Boolean> isHeadBeforeMinGenesis = isHeadBeforeMinGenesis(headBlock);\n+\n+    isHeadBeforeMinGenesis.thenAccept(\n+        bool -> {\n+          if (bool) headBeforeMinGenesisMode(headBlock);\n+          else headAfterMinGenesisMode(headBlock);\n+        });\n+  }\n+\n+  public SafeFuture<Void> headBeforeMinGenesisMode(SafeFuture<EthBlock.Block> head) {\n+    return head.thenCompose(\n+            headBlock ->\n+                depositProcessingController.fetchDepositsFromGenesisTo(headBlock.getNumber()))\n+        .thenRun(\n+            () -> {\n+              EthBlock.Block block = checkNotNull(head.getNow(null));\n+              depositProcessingController.switchToBlockByBlockMode();\n+              depositProcessingController.startSubscription(block.getNumber());\n+            });\n+  }\n+\n+  public SafeFuture<Void> headAfterMinGenesisMode(SafeFuture<EthBlock.Block> head) {\n+    SafeFuture<EthBlock.Block> minGenesisBlock =\n+        head.thenCompose(this::findMinGenesisTimeBlockInHistory);\n+\n+    return minGenesisBlock\n+        .thenCompose(\n+            block -> depositProcessingController.fetchDepositsFromGenesisTo(block.getNumber()))\n+        .thenRun(\n+            () -> {\n+              EthBlock.Block block = checkNotNull(minGenesisBlock.getNow(null));\n+              postMinGenesisTimeBlock(eth1EventsChannel, block);\n+              depositProcessingController.startSubscription(block.getNumber());\n+            });\n   }\n \n-  public SafeFuture<Void> findAndPublishFirstValidBlock() {\n+  public SafeFuture<EthBlock.Block> getHead() {\n     return eth1Provider\n         .getLatestEth1BlockFuture()\n         .thenApply(EthBlock.Block::getNumber)\n         .thenApply(number -> number.subtract(Constants.ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n         .thenApply(UnsignedLong::valueOf)\n-        .thenCompose(eth1Provider::getEth1BlockFuture)\n-        .thenCompose(\n-            block -> {\n-              int comparison = compareBlockTimestampToMinGenesisTime(block);\n-              if (comparison > 0) {\n-                // If block timestamp is greater than min genesis time\n-                // find first valid block in history\n-                return findFirstValidBlockInHistory(block);\n-              } else if (comparison < 0) {\n-                // If block timestamp is less than min genesis time\n-                // subscribe to new block events and wait for the first\n-                // valid block\n-                return waitForFirstValidBlock();\n-              } else {\n-                return SafeFuture.completedFuture(block);\n-              }\n-            })\n-        .thenAccept(this::publishFirstValidBlock)\n-        .exceptionallyCompose(\n-            err -> {\n-              if (latestBlockDisposable != null) {\n-                latestBlockDisposable.dispose();\n-              }\n+        .thenCompose(eth1Provider::getEth1BlockFuture);\n+  }\n \n-              LOG.debug(\n-                  \"Eth1MinGenesisTimeBlockFinder failed to find first valid block. Retry in \"\n-                      + Constants.ETH1_MIN_GENESIS_TIME_BLOCK_RETRY_TIMEOUT\n-                      + \" seconds\",\n-                  err);\n-\n-              System.out.println(\"adding one delayed run\");\n-              return asyncRunner.runAfterDelay(\n-                  this::findAndPublishFirstValidBlock,\n-                  Constants.ETH1_MIN_GENESIS_TIME_BLOCK_RETRY_TIMEOUT,\n-                  TimeUnit.SECONDS);\n-            });\n+  public SafeFuture<Boolean> isHeadBeforeMinGenesis(SafeFuture<EthBlock.Block> headBlock) {\n+    return headBlock.thenApply(\n+        block -> {\n+          int comparison = compareBlockTimestampToMinGenesisTime(block);\n+          // If block timestamp is greater than min genesis time,\n+          // min genesis block must have been in history\n+          return comparison > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ce48ed9cd9e2fe68ce9005515db86bb30fb7f40"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM5NzU4OA==", "bodyText": "oh true. good catch!", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r386397588", "createdAt": "2020-03-02T13:40:27Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "diffHunk": "@@ -13,113 +13,121 @@\n \n package tech.pegasys.artemis.pow;\n \n-import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.primitives.UnsignedLong;\n-import io.reactivex.disposables.Disposable;\n import java.math.BigInteger;\n-import java.util.concurrent.TimeUnit;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n import org.web3j.protocol.core.methods.response.EthBlock;\n-import tech.pegasys.artemis.pow.api.MinGenesisTimeBlockEventChannel;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n import tech.pegasys.artemis.pow.event.MinGenesisTimeBlockEvent;\n import tech.pegasys.artemis.util.async.AsyncRunner;\n import tech.pegasys.artemis.util.async.SafeFuture;\n import tech.pegasys.artemis.util.config.Constants;\n \n-public class Eth1MinGenesisTimeBlockFinder {\n+public class Eth1Manager {\n \n   private static final Logger LOG = LogManager.getLogger();\n \n   private final Eth1Provider eth1Provider;\n-  private final MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel;\n   private final AsyncRunner asyncRunner;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositProcessingController depositProcessingController;\n \n-  private volatile Disposable latestBlockDisposable;\n-\n-  public Eth1MinGenesisTimeBlockFinder(\n+  public Eth1Manager(\n       Eth1Provider eth1Provider,\n-      MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel,\n-      AsyncRunner asyncRunner) {\n+      AsyncRunner asyncRunner,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositProcessingController depositProcessingController) {\n     this.eth1Provider = eth1Provider;\n-    this.minGenesisTimeBlockEventChannel = minGenesisTimeBlockEventChannel;\n     this.asyncRunner = asyncRunner;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositProcessingController = depositProcessingController;\n   }\n \n   public void start() {\n-    findAndPublishFirstValidBlock()\n-        .finish(\n-            () ->\n-                LOG.info(\n-                    \"Eth1MinGenesisBlockFinder successfully found first \"\n-                        + \"(time) valid genesis block\"));\n+\n+    SafeFuture<EthBlock.Block> headBlock = getHead();\n+\n+    SafeFuture<Boolean> isHeadBeforeMinGenesis = isHeadBeforeMinGenesis(headBlock);\n+\n+    isHeadBeforeMinGenesis.thenAccept(\n+        bool -> {\n+          if (bool) headBeforeMinGenesisMode(headBlock);\n+          else headAfterMinGenesisMode(headBlock);\n+        });\n+  }\n+\n+  public SafeFuture<Void> headBeforeMinGenesisMode(SafeFuture<EthBlock.Block> head) {\n+    return head.thenCompose(\n+            headBlock ->\n+                depositProcessingController.fetchDepositsFromGenesisTo(headBlock.getNumber()))\n+        .thenRun(\n+            () -> {\n+              EthBlock.Block block = checkNotNull(head.getNow(null));\n+              depositProcessingController.switchToBlockByBlockMode();\n+              depositProcessingController.startSubscription(block.getNumber());\n+            });\n+  }\n+\n+  public SafeFuture<Void> headAfterMinGenesisMode(SafeFuture<EthBlock.Block> head) {\n+    SafeFuture<EthBlock.Block> minGenesisBlock =\n+        head.thenCompose(this::findMinGenesisTimeBlockInHistory);\n+\n+    return minGenesisBlock\n+        .thenCompose(\n+            block -> depositProcessingController.fetchDepositsFromGenesisTo(block.getNumber()))\n+        .thenRun(\n+            () -> {\n+              EthBlock.Block block = checkNotNull(minGenesisBlock.getNow(null));\n+              postMinGenesisTimeBlock(eth1EventsChannel, block);\n+              depositProcessingController.startSubscription(block.getNumber());\n+            });\n   }\n \n-  public SafeFuture<Void> findAndPublishFirstValidBlock() {\n+  public SafeFuture<EthBlock.Block> getHead() {\n     return eth1Provider\n         .getLatestEth1BlockFuture()\n         .thenApply(EthBlock.Block::getNumber)\n         .thenApply(number -> number.subtract(Constants.ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n         .thenApply(UnsignedLong::valueOf)\n-        .thenCompose(eth1Provider::getEth1BlockFuture)\n-        .thenCompose(\n-            block -> {\n-              int comparison = compareBlockTimestampToMinGenesisTime(block);\n-              if (comparison > 0) {\n-                // If block timestamp is greater than min genesis time\n-                // find first valid block in history\n-                return findFirstValidBlockInHistory(block);\n-              } else if (comparison < 0) {\n-                // If block timestamp is less than min genesis time\n-                // subscribe to new block events and wait for the first\n-                // valid block\n-                return waitForFirstValidBlock();\n-              } else {\n-                return SafeFuture.completedFuture(block);\n-              }\n-            })\n-        .thenAccept(this::publishFirstValidBlock)\n-        .exceptionallyCompose(\n-            err -> {\n-              if (latestBlockDisposable != null) {\n-                latestBlockDisposable.dispose();\n-              }\n+        .thenCompose(eth1Provider::getEth1BlockFuture);\n+  }\n \n-              LOG.debug(\n-                  \"Eth1MinGenesisTimeBlockFinder failed to find first valid block. Retry in \"\n-                      + Constants.ETH1_MIN_GENESIS_TIME_BLOCK_RETRY_TIMEOUT\n-                      + \" seconds\",\n-                  err);\n-\n-              System.out.println(\"adding one delayed run\");\n-              return asyncRunner.runAfterDelay(\n-                  this::findAndPublishFirstValidBlock,\n-                  Constants.ETH1_MIN_GENESIS_TIME_BLOCK_RETRY_TIMEOUT,\n-                  TimeUnit.SECONDS);\n-            });\n+  public SafeFuture<Boolean> isHeadBeforeMinGenesis(SafeFuture<EthBlock.Block> headBlock) {\n+    return headBlock.thenApply(\n+        block -> {\n+          int comparison = compareBlockTimestampToMinGenesisTime(block);\n+          // If block timestamp is greater than min genesis time,\n+          // min genesis block must have been in history\n+          return comparison > 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MTYzOA=="}, "originalCommit": {"oid": "1ce48ed9cd9e2fe68ce9005515db86bb30fb7f40"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg4NjM0OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMToxODoxNlrOFwQOBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0NDoyNVrOFwf9og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MTcwMA==", "bodyText": "Using chaining is probably better here than getNow.\npublic SafeFuture<Void> headAfterMinGenesisMode(EthBlock.Block head) {\n    return findMinGenesisTimeBlockInHistory(head)\n        .thenCompose(this::sendDepositsUpToMinGenesis)\n        .thenAccept(\n            minGenesisTimeBlock -> {\n              postMinGenesisTimeBlock(eth1EventsChannel, minGenesisTimeBlock);\n              depositProcessingController.startSubscription(minGenesisTimeBlock.getNumber());\n            });\n  }\n\n  private SafeFuture<Block> sendDepositsUpToMinGenesis(final Block minGenesisTimeBlock) {\n    return depositProcessingController\n        .fetchDepositsFromGenesisTo(minGenesisTimeBlock.getNumber())\n        .thenApply(__ -> minGenesisTimeBlock);\n  }", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r386141700", "createdAt": "2020-03-01T21:18:16Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "diffHunk": "@@ -13,113 +13,121 @@\n \n package tech.pegasys.artemis.pow;\n \n-import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.primitives.UnsignedLong;\n-import io.reactivex.disposables.Disposable;\n import java.math.BigInteger;\n-import java.util.concurrent.TimeUnit;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n import org.web3j.protocol.core.methods.response.EthBlock;\n-import tech.pegasys.artemis.pow.api.MinGenesisTimeBlockEventChannel;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n import tech.pegasys.artemis.pow.event.MinGenesisTimeBlockEvent;\n import tech.pegasys.artemis.util.async.AsyncRunner;\n import tech.pegasys.artemis.util.async.SafeFuture;\n import tech.pegasys.artemis.util.config.Constants;\n \n-public class Eth1MinGenesisTimeBlockFinder {\n+public class Eth1Manager {\n \n   private static final Logger LOG = LogManager.getLogger();\n \n   private final Eth1Provider eth1Provider;\n-  private final MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel;\n   private final AsyncRunner asyncRunner;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositProcessingController depositProcessingController;\n \n-  private volatile Disposable latestBlockDisposable;\n-\n-  public Eth1MinGenesisTimeBlockFinder(\n+  public Eth1Manager(\n       Eth1Provider eth1Provider,\n-      MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel,\n-      AsyncRunner asyncRunner) {\n+      AsyncRunner asyncRunner,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositProcessingController depositProcessingController) {\n     this.eth1Provider = eth1Provider;\n-    this.minGenesisTimeBlockEventChannel = minGenesisTimeBlockEventChannel;\n     this.asyncRunner = asyncRunner;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositProcessingController = depositProcessingController;\n   }\n \n   public void start() {\n-    findAndPublishFirstValidBlock()\n-        .finish(\n-            () ->\n-                LOG.info(\n-                    \"Eth1MinGenesisBlockFinder successfully found first \"\n-                        + \"(time) valid genesis block\"));\n+\n+    SafeFuture<EthBlock.Block> headBlock = getHead();\n+\n+    SafeFuture<Boolean> isHeadBeforeMinGenesis = isHeadBeforeMinGenesis(headBlock);\n+\n+    isHeadBeforeMinGenesis.thenAccept(\n+        bool -> {\n+          if (bool) headBeforeMinGenesisMode(headBlock);\n+          else headAfterMinGenesisMode(headBlock);\n+        });\n+  }\n+\n+  public SafeFuture<Void> headBeforeMinGenesisMode(SafeFuture<EthBlock.Block> head) {\n+    return head.thenCompose(\n+            headBlock ->\n+                depositProcessingController.fetchDepositsFromGenesisTo(headBlock.getNumber()))\n+        .thenRun(\n+            () -> {\n+              EthBlock.Block block = checkNotNull(head.getNow(null));\n+              depositProcessingController.switchToBlockByBlockMode();\n+              depositProcessingController.startSubscription(block.getNumber());\n+            });\n+  }\n+\n+  public SafeFuture<Void> headAfterMinGenesisMode(SafeFuture<EthBlock.Block> head) {\n+    SafeFuture<EthBlock.Block> minGenesisBlock =\n+        head.thenCompose(this::findMinGenesisTimeBlockInHistory);\n+\n+    return minGenesisBlock\n+        .thenCompose(\n+            block -> depositProcessingController.fetchDepositsFromGenesisTo(block.getNumber()))\n+        .thenRun(\n+            () -> {\n+              EthBlock.Block block = checkNotNull(minGenesisBlock.getNow(null));\n+              postMinGenesisTimeBlock(eth1EventsChannel, block);\n+              depositProcessingController.startSubscription(block.getNumber());\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ce48ed9cd9e2fe68ce9005515db86bb30fb7f40"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM5OTY1MA==", "bodyText": "yeah, this is cleaner, although its a bit vague (from sendDepositsUpToMinGenesis's own pov) why it returns the minGenesisBlock. done tho.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r386399650", "createdAt": "2020-03-02T13:44:25Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "diffHunk": "@@ -13,113 +13,121 @@\n \n package tech.pegasys.artemis.pow;\n \n-import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.primitives.UnsignedLong;\n-import io.reactivex.disposables.Disposable;\n import java.math.BigInteger;\n-import java.util.concurrent.TimeUnit;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n import org.web3j.protocol.core.methods.response.EthBlock;\n-import tech.pegasys.artemis.pow.api.MinGenesisTimeBlockEventChannel;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n import tech.pegasys.artemis.pow.event.MinGenesisTimeBlockEvent;\n import tech.pegasys.artemis.util.async.AsyncRunner;\n import tech.pegasys.artemis.util.async.SafeFuture;\n import tech.pegasys.artemis.util.config.Constants;\n \n-public class Eth1MinGenesisTimeBlockFinder {\n+public class Eth1Manager {\n \n   private static final Logger LOG = LogManager.getLogger();\n \n   private final Eth1Provider eth1Provider;\n-  private final MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel;\n   private final AsyncRunner asyncRunner;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositProcessingController depositProcessingController;\n \n-  private volatile Disposable latestBlockDisposable;\n-\n-  public Eth1MinGenesisTimeBlockFinder(\n+  public Eth1Manager(\n       Eth1Provider eth1Provider,\n-      MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel,\n-      AsyncRunner asyncRunner) {\n+      AsyncRunner asyncRunner,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositProcessingController depositProcessingController) {\n     this.eth1Provider = eth1Provider;\n-    this.minGenesisTimeBlockEventChannel = minGenesisTimeBlockEventChannel;\n     this.asyncRunner = asyncRunner;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositProcessingController = depositProcessingController;\n   }\n \n   public void start() {\n-    findAndPublishFirstValidBlock()\n-        .finish(\n-            () ->\n-                LOG.info(\n-                    \"Eth1MinGenesisBlockFinder successfully found first \"\n-                        + \"(time) valid genesis block\"));\n+\n+    SafeFuture<EthBlock.Block> headBlock = getHead();\n+\n+    SafeFuture<Boolean> isHeadBeforeMinGenesis = isHeadBeforeMinGenesis(headBlock);\n+\n+    isHeadBeforeMinGenesis.thenAccept(\n+        bool -> {\n+          if (bool) headBeforeMinGenesisMode(headBlock);\n+          else headAfterMinGenesisMode(headBlock);\n+        });\n+  }\n+\n+  public SafeFuture<Void> headBeforeMinGenesisMode(SafeFuture<EthBlock.Block> head) {\n+    return head.thenCompose(\n+            headBlock ->\n+                depositProcessingController.fetchDepositsFromGenesisTo(headBlock.getNumber()))\n+        .thenRun(\n+            () -> {\n+              EthBlock.Block block = checkNotNull(head.getNow(null));\n+              depositProcessingController.switchToBlockByBlockMode();\n+              depositProcessingController.startSubscription(block.getNumber());\n+            });\n+  }\n+\n+  public SafeFuture<Void> headAfterMinGenesisMode(SafeFuture<EthBlock.Block> head) {\n+    SafeFuture<EthBlock.Block> minGenesisBlock =\n+        head.thenCompose(this::findMinGenesisTimeBlockInHistory);\n+\n+    return minGenesisBlock\n+        .thenCompose(\n+            block -> depositProcessingController.fetchDepositsFromGenesisTo(block.getNumber()))\n+        .thenRun(\n+            () -> {\n+              EthBlock.Block block = checkNotNull(minGenesisBlock.getNow(null));\n+              postMinGenesisTimeBlock(eth1EventsChannel, block);\n+              depositProcessingController.startSubscription(block.getNumber());\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MTcwMA=="}, "originalCommit": {"oid": "1ce48ed9cd9e2fe68ce9005515db86bb30fb7f40"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg4NjU4OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMToxODo0M1rOFwQOJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMToxODo0M1rOFwQOJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MTczMw==", "bodyText": "nit: LOG is now unused.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r386141733", "createdAt": "2020-03-01T21:18:43Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "diffHunk": "@@ -13,113 +13,121 @@\n \n package tech.pegasys.artemis.pow;\n \n-import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.primitives.UnsignedLong;\n-import io.reactivex.disposables.Disposable;\n import java.math.BigInteger;\n-import java.util.concurrent.TimeUnit;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n import org.web3j.protocol.core.methods.response.EthBlock;\n-import tech.pegasys.artemis.pow.api.MinGenesisTimeBlockEventChannel;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n import tech.pegasys.artemis.pow.event.MinGenesisTimeBlockEvent;\n import tech.pegasys.artemis.util.async.AsyncRunner;\n import tech.pegasys.artemis.util.async.SafeFuture;\n import tech.pegasys.artemis.util.config.Constants;\n \n-public class Eth1MinGenesisTimeBlockFinder {\n+public class Eth1Manager {\n \n   private static final Logger LOG = LogManager.getLogger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ce48ed9cd9e2fe68ce9005515db86bb30fb7f40"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg4NjkwOnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMToxOToxMFrOFwQOTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMToxOToxMFrOFwQOTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MTc3Mw==", "bodyText": "Appears to be unused, but may be needed for some of the error handling that's currently missing.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r386141773", "createdAt": "2020-03-01T21:19:10Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "diffHunk": "@@ -13,113 +13,121 @@\n \n package tech.pegasys.artemis.pow;\n \n-import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.primitives.UnsignedLong;\n-import io.reactivex.disposables.Disposable;\n import java.math.BigInteger;\n-import java.util.concurrent.TimeUnit;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n import org.web3j.protocol.core.methods.response.EthBlock;\n-import tech.pegasys.artemis.pow.api.MinGenesisTimeBlockEventChannel;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n import tech.pegasys.artemis.pow.event.MinGenesisTimeBlockEvent;\n import tech.pegasys.artemis.util.async.AsyncRunner;\n import tech.pegasys.artemis.util.async.SafeFuture;\n import tech.pegasys.artemis.util.config.Constants;\n \n-public class Eth1MinGenesisTimeBlockFinder {\n+public class Eth1Manager {\n \n   private static final Logger LOG = LogManager.getLogger();\n \n   private final Eth1Provider eth1Provider;\n-  private final MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel;\n   private final AsyncRunner asyncRunner;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ce48ed9cd9e2fe68ce9005515db86bb30fb7f40"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg5MTM1OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMToyNzowOFrOFwQQpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo1NzowOVrOFwgXjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MjM3NA==", "bodyText": "I'd be tempted to split this into a MinimumGenesisTimeBlockFinder class.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r386142374", "createdAt": "2020-03-01T21:27:08Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "diffHunk": "@@ -13,113 +13,121 @@\n \n package tech.pegasys.artemis.pow;\n \n-import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.primitives.UnsignedLong;\n-import io.reactivex.disposables.Disposable;\n import java.math.BigInteger;\n-import java.util.concurrent.TimeUnit;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n import org.web3j.protocol.core.methods.response.EthBlock;\n-import tech.pegasys.artemis.pow.api.MinGenesisTimeBlockEventChannel;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n import tech.pegasys.artemis.pow.event.MinGenesisTimeBlockEvent;\n import tech.pegasys.artemis.util.async.AsyncRunner;\n import tech.pegasys.artemis.util.async.SafeFuture;\n import tech.pegasys.artemis.util.config.Constants;\n \n-public class Eth1MinGenesisTimeBlockFinder {\n+public class Eth1Manager {\n \n   private static final Logger LOG = LogManager.getLogger();\n \n   private final Eth1Provider eth1Provider;\n-  private final MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel;\n   private final AsyncRunner asyncRunner;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositProcessingController depositProcessingController;\n \n-  private volatile Disposable latestBlockDisposable;\n-\n-  public Eth1MinGenesisTimeBlockFinder(\n+  public Eth1Manager(\n       Eth1Provider eth1Provider,\n-      MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel,\n-      AsyncRunner asyncRunner) {\n+      AsyncRunner asyncRunner,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositProcessingController depositProcessingController) {\n     this.eth1Provider = eth1Provider;\n-    this.minGenesisTimeBlockEventChannel = minGenesisTimeBlockEventChannel;\n     this.asyncRunner = asyncRunner;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositProcessingController = depositProcessingController;\n   }\n \n   public void start() {\n-    findAndPublishFirstValidBlock()\n-        .finish(\n-            () ->\n-                LOG.info(\n-                    \"Eth1MinGenesisBlockFinder successfully found first \"\n-                        + \"(time) valid genesis block\"));\n+\n+    SafeFuture<EthBlock.Block> headBlock = getHead();\n+\n+    SafeFuture<Boolean> isHeadBeforeMinGenesis = isHeadBeforeMinGenesis(headBlock);\n+\n+    isHeadBeforeMinGenesis.thenAccept(\n+        bool -> {\n+          if (bool) headBeforeMinGenesisMode(headBlock);\n+          else headAfterMinGenesisMode(headBlock);\n+        });\n+  }\n+\n+  public SafeFuture<Void> headBeforeMinGenesisMode(SafeFuture<EthBlock.Block> head) {\n+    return head.thenCompose(\n+            headBlock ->\n+                depositProcessingController.fetchDepositsFromGenesisTo(headBlock.getNumber()))\n+        .thenRun(\n+            () -> {\n+              EthBlock.Block block = checkNotNull(head.getNow(null));\n+              depositProcessingController.switchToBlockByBlockMode();\n+              depositProcessingController.startSubscription(block.getNumber());\n+            });\n+  }\n+\n+  public SafeFuture<Void> headAfterMinGenesisMode(SafeFuture<EthBlock.Block> head) {\n+    SafeFuture<EthBlock.Block> minGenesisBlock =\n+        head.thenCompose(this::findMinGenesisTimeBlockInHistory);\n+\n+    return minGenesisBlock\n+        .thenCompose(\n+            block -> depositProcessingController.fetchDepositsFromGenesisTo(block.getNumber()))\n+        .thenRun(\n+            () -> {\n+              EthBlock.Block block = checkNotNull(minGenesisBlock.getNow(null));\n+              postMinGenesisTimeBlock(eth1EventsChannel, block);\n+              depositProcessingController.startSubscription(block.getNumber());\n+            });\n   }\n \n-  public SafeFuture<Void> findAndPublishFirstValidBlock() {\n+  public SafeFuture<EthBlock.Block> getHead() {\n     return eth1Provider\n         .getLatestEth1BlockFuture()\n         .thenApply(EthBlock.Block::getNumber)\n         .thenApply(number -> number.subtract(Constants.ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n         .thenApply(UnsignedLong::valueOf)\n-        .thenCompose(eth1Provider::getEth1BlockFuture)\n-        .thenCompose(\n-            block -> {\n-              int comparison = compareBlockTimestampToMinGenesisTime(block);\n-              if (comparison > 0) {\n-                // If block timestamp is greater than min genesis time\n-                // find first valid block in history\n-                return findFirstValidBlockInHistory(block);\n-              } else if (comparison < 0) {\n-                // If block timestamp is less than min genesis time\n-                // subscribe to new block events and wait for the first\n-                // valid block\n-                return waitForFirstValidBlock();\n-              } else {\n-                return SafeFuture.completedFuture(block);\n-              }\n-            })\n-        .thenAccept(this::publishFirstValidBlock)\n-        .exceptionallyCompose(\n-            err -> {\n-              if (latestBlockDisposable != null) {\n-                latestBlockDisposable.dispose();\n-              }\n+        .thenCompose(eth1Provider::getEth1BlockFuture);\n+  }\n \n-              LOG.debug(\n-                  \"Eth1MinGenesisTimeBlockFinder failed to find first valid block. Retry in \"\n-                      + Constants.ETH1_MIN_GENESIS_TIME_BLOCK_RETRY_TIMEOUT\n-                      + \" seconds\",\n-                  err);\n-\n-              System.out.println(\"adding one delayed run\");\n-              return asyncRunner.runAfterDelay(\n-                  this::findAndPublishFirstValidBlock,\n-                  Constants.ETH1_MIN_GENESIS_TIME_BLOCK_RETRY_TIMEOUT,\n-                  TimeUnit.SECONDS);\n-            });\n+  public SafeFuture<Boolean> isHeadBeforeMinGenesis(SafeFuture<EthBlock.Block> headBlock) {\n+    return headBlock.thenApply(\n+        block -> {\n+          int comparison = compareBlockTimestampToMinGenesisTime(block);\n+          // If block timestamp is greater than min genesis time,\n+          // min genesis block must have been in history\n+          return comparison > 0;\n+        });\n   }\n \n-  private void publishFirstValidBlock(EthBlock.Block block) {\n-    minGenesisTimeBlockEventChannel.onMinGenesisTimeBlock(\n+  public static EthBlock.Block postMinGenesisTimeBlock(\n+      Eth1EventsChannel eth1EventsChannel, EthBlock.Block block) {\n+    eth1EventsChannel.onMinGenesisTimeBlock(\n         new MinGenesisTimeBlockEvent(\n             UnsignedLong.valueOf(block.getTimestamp()),\n             UnsignedLong.valueOf(block.getNumber()),\n             Bytes32.fromHexString(block.getHash())));\n+    return block;\n   }\n \n   /**\n-   * Find first valid block in history that has timestamp greater than MIN_GENESIS_TIME\n+   * Find first block in history that has timestamp greater than MIN_GENESIS_TIME\n    *\n    * @param estimationBlock estimationBlock that will be used for estimation\n-   * @return first valid block in history\n+   * @return min genesis time block\n    */\n-  private SafeFuture<EthBlock.Block> findFirstValidBlockInHistory(EthBlock.Block estimationBlock) {\n-    UnsignedLong estimatedFirstValidBlockNumber =\n-        getEstimatedFirstValidBlockNumber(estimationBlock, Constants.SECONDS_PER_ETH1_BLOCK);\n+  private SafeFuture<EthBlock.Block> findMinGenesisTimeBlockInHistory(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ce48ed9cd9e2fe68ce9005515db86bb30fb7f40"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwNjI4NQ==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r386406285", "createdAt": "2020-03-02T13:57:09Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1Manager.java", "diffHunk": "@@ -13,113 +13,121 @@\n \n package tech.pegasys.artemis.pow;\n \n-import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.common.primitives.UnsignedLong;\n-import io.reactivex.disposables.Disposable;\n import java.math.BigInteger;\n-import java.util.concurrent.TimeUnit;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n import org.web3j.protocol.core.methods.response.EthBlock;\n-import tech.pegasys.artemis.pow.api.MinGenesisTimeBlockEventChannel;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n import tech.pegasys.artemis.pow.event.MinGenesisTimeBlockEvent;\n import tech.pegasys.artemis.util.async.AsyncRunner;\n import tech.pegasys.artemis.util.async.SafeFuture;\n import tech.pegasys.artemis.util.config.Constants;\n \n-public class Eth1MinGenesisTimeBlockFinder {\n+public class Eth1Manager {\n \n   private static final Logger LOG = LogManager.getLogger();\n \n   private final Eth1Provider eth1Provider;\n-  private final MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel;\n   private final AsyncRunner asyncRunner;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositProcessingController depositProcessingController;\n \n-  private volatile Disposable latestBlockDisposable;\n-\n-  public Eth1MinGenesisTimeBlockFinder(\n+  public Eth1Manager(\n       Eth1Provider eth1Provider,\n-      MinGenesisTimeBlockEventChannel minGenesisTimeBlockEventChannel,\n-      AsyncRunner asyncRunner) {\n+      AsyncRunner asyncRunner,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositProcessingController depositProcessingController) {\n     this.eth1Provider = eth1Provider;\n-    this.minGenesisTimeBlockEventChannel = minGenesisTimeBlockEventChannel;\n     this.asyncRunner = asyncRunner;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositProcessingController = depositProcessingController;\n   }\n \n   public void start() {\n-    findAndPublishFirstValidBlock()\n-        .finish(\n-            () ->\n-                LOG.info(\n-                    \"Eth1MinGenesisBlockFinder successfully found first \"\n-                        + \"(time) valid genesis block\"));\n+\n+    SafeFuture<EthBlock.Block> headBlock = getHead();\n+\n+    SafeFuture<Boolean> isHeadBeforeMinGenesis = isHeadBeforeMinGenesis(headBlock);\n+\n+    isHeadBeforeMinGenesis.thenAccept(\n+        bool -> {\n+          if (bool) headBeforeMinGenesisMode(headBlock);\n+          else headAfterMinGenesisMode(headBlock);\n+        });\n+  }\n+\n+  public SafeFuture<Void> headBeforeMinGenesisMode(SafeFuture<EthBlock.Block> head) {\n+    return head.thenCompose(\n+            headBlock ->\n+                depositProcessingController.fetchDepositsFromGenesisTo(headBlock.getNumber()))\n+        .thenRun(\n+            () -> {\n+              EthBlock.Block block = checkNotNull(head.getNow(null));\n+              depositProcessingController.switchToBlockByBlockMode();\n+              depositProcessingController.startSubscription(block.getNumber());\n+            });\n+  }\n+\n+  public SafeFuture<Void> headAfterMinGenesisMode(SafeFuture<EthBlock.Block> head) {\n+    SafeFuture<EthBlock.Block> minGenesisBlock =\n+        head.thenCompose(this::findMinGenesisTimeBlockInHistory);\n+\n+    return minGenesisBlock\n+        .thenCompose(\n+            block -> depositProcessingController.fetchDepositsFromGenesisTo(block.getNumber()))\n+        .thenRun(\n+            () -> {\n+              EthBlock.Block block = checkNotNull(minGenesisBlock.getNow(null));\n+              postMinGenesisTimeBlock(eth1EventsChannel, block);\n+              depositProcessingController.startSubscription(block.getNumber());\n+            });\n   }\n \n-  public SafeFuture<Void> findAndPublishFirstValidBlock() {\n+  public SafeFuture<EthBlock.Block> getHead() {\n     return eth1Provider\n         .getLatestEth1BlockFuture()\n         .thenApply(EthBlock.Block::getNumber)\n         .thenApply(number -> number.subtract(Constants.ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n         .thenApply(UnsignedLong::valueOf)\n-        .thenCompose(eth1Provider::getEth1BlockFuture)\n-        .thenCompose(\n-            block -> {\n-              int comparison = compareBlockTimestampToMinGenesisTime(block);\n-              if (comparison > 0) {\n-                // If block timestamp is greater than min genesis time\n-                // find first valid block in history\n-                return findFirstValidBlockInHistory(block);\n-              } else if (comparison < 0) {\n-                // If block timestamp is less than min genesis time\n-                // subscribe to new block events and wait for the first\n-                // valid block\n-                return waitForFirstValidBlock();\n-              } else {\n-                return SafeFuture.completedFuture(block);\n-              }\n-            })\n-        .thenAccept(this::publishFirstValidBlock)\n-        .exceptionallyCompose(\n-            err -> {\n-              if (latestBlockDisposable != null) {\n-                latestBlockDisposable.dispose();\n-              }\n+        .thenCompose(eth1Provider::getEth1BlockFuture);\n+  }\n \n-              LOG.debug(\n-                  \"Eth1MinGenesisTimeBlockFinder failed to find first valid block. Retry in \"\n-                      + Constants.ETH1_MIN_GENESIS_TIME_BLOCK_RETRY_TIMEOUT\n-                      + \" seconds\",\n-                  err);\n-\n-              System.out.println(\"adding one delayed run\");\n-              return asyncRunner.runAfterDelay(\n-                  this::findAndPublishFirstValidBlock,\n-                  Constants.ETH1_MIN_GENESIS_TIME_BLOCK_RETRY_TIMEOUT,\n-                  TimeUnit.SECONDS);\n-            });\n+  public SafeFuture<Boolean> isHeadBeforeMinGenesis(SafeFuture<EthBlock.Block> headBlock) {\n+    return headBlock.thenApply(\n+        block -> {\n+          int comparison = compareBlockTimestampToMinGenesisTime(block);\n+          // If block timestamp is greater than min genesis time,\n+          // min genesis block must have been in history\n+          return comparison > 0;\n+        });\n   }\n \n-  private void publishFirstValidBlock(EthBlock.Block block) {\n-    minGenesisTimeBlockEventChannel.onMinGenesisTimeBlock(\n+  public static EthBlock.Block postMinGenesisTimeBlock(\n+      Eth1EventsChannel eth1EventsChannel, EthBlock.Block block) {\n+    eth1EventsChannel.onMinGenesisTimeBlock(\n         new MinGenesisTimeBlockEvent(\n             UnsignedLong.valueOf(block.getTimestamp()),\n             UnsignedLong.valueOf(block.getNumber()),\n             Bytes32.fromHexString(block.getHash())));\n+    return block;\n   }\n \n   /**\n-   * Find first valid block in history that has timestamp greater than MIN_GENESIS_TIME\n+   * Find first block in history that has timestamp greater than MIN_GENESIS_TIME\n    *\n    * @param estimationBlock estimationBlock that will be used for estimation\n-   * @return first valid block in history\n+   * @return min genesis time block\n    */\n-  private SafeFuture<EthBlock.Block> findFirstValidBlockInHistory(EthBlock.Block estimationBlock) {\n-    UnsignedLong estimatedFirstValidBlockNumber =\n-        getEstimatedFirstValidBlockNumber(estimationBlock, Constants.SECONDS_PER_ETH1_BLOCK);\n+  private SafeFuture<EthBlock.Block> findMinGenesisTimeBlockInHistory(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MjM3NA=="}, "originalCommit": {"oid": "1ce48ed9cd9e2fe68ce9005515db86bb30fb7f40"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTg5NDY3OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMTozMzozMFrOFwQSXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQyMTozMzozMFrOFwQSXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MjgxNQ==", "bodyText": "We've got a weird mix of volatile and non-volatile fields in this class.  I think we'll wind up with calls from two sources - Eth1Manager and the latest block subscription.  Probably the best thing it to make all fields non-volatile but all entry point methods (including ones passed as handlers to the subscription subscribe method) should be synchronised.\nNot 100% sure of that though.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r386142815", "createdAt": "2020-03-01T21:33:30Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.Eth1Manager.compareBlockTimestampToMinGenesisTime;\n+import static tech.pegasys.artemis.pow.Eth1Manager.postMinGenesisTimeBlock;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositsFetcher depositsFetcher;\n+\n+  private volatile Disposable newBlockSubscription;\n+  private boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private boolean isBlockByBlockModeOn = false;\n+  private volatile BigInteger blockByBlockLastFetchedBlockNumber = BigInteger.ZERO;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ce48ed9cd9e2fe68ce9005515db86bb30fb7f40"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzY2NDY1OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/BeaconStateUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjo1MDoyN1rOFyAiVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjozMjozOFrOFyazQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4MTkwOQ==", "bodyText": "This is potentially quite common and not directly related to user action so it shouldn't be warn level.  I'd be tempted to make it INFO and include something to identify which deposit (maybe deposit number and if we can include the validator public key that would be useful).", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r387981909", "createdAt": "2020-03-04T22:50:27Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/BeaconStateUtil.java", "diffHunk": "@@ -145,7 +149,7 @@ static void process_deposit_without_checking_merkle_proof(\n                     deposit.getData().getSignature(),\n                     compute_domain(DOMAIN_DEPOSIT));\n         if (!proof_is_valid) {\n-          STDOUT.log(Level.DEBUG, \"Skipping invalid deposit\");\n+          LOG.warn(\"Skipping invalid deposit\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMjIyNA==", "bodyText": "Done. Printing with pubkeys now, and with indices when they're available. However, indices might not always be available so I had to put an else statement for printing, which is not great, fyi.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388412224", "createdAt": "2020-03-05T16:32:38Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/BeaconStateUtil.java", "diffHunk": "@@ -145,7 +149,7 @@ static void process_deposit_without_checking_merkle_proof(\n                     deposit.getData().getSignature(),\n                     compute_domain(DOMAIN_DEPOSIT));\n         if (!proof_is_valid) {\n-          STDOUT.log(Level.DEBUG, \"Skipping invalid deposit\");\n+          LOG.warn(\"Skipping invalid deposit\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4MTkwOQ=="}, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzY3OTM5OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositContractFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjo1NjoxNlrOFyArdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzozNTo1M1rOFydMzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NDI0NQ==", "bodyText": "I'd be tempted to just make this a DepositContractAccessor.create method.  It's simple enough that it probably doesn't need a separate factory class.  Then the DepositContractAccessor constructor can be made private (or package protected if it's needed by tests).", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r387984245", "createdAt": "2020-03-04T22:56:16Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositContractFactory.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import org.web3j.protocol.Web3j;\n+import org.web3j.tx.ClientTransactionManager;\n+import org.web3j.tx.gas.DefaultGasProvider;\n+import tech.pegasys.artemis.pow.contract.DepositContract;\n+\n+public class DepositContractFactory {\n+\n+  public static DepositContractAccessor eth1DepositContractAccessor(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1MTUzNQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388451535", "createdAt": "2020-03-05T17:35:53Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositContractFactory.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import org.web3j.protocol.Web3j;\n+import org.web3j.tx.ClientTransactionManager;\n+import org.web3j.tx.gas.DefaultGasProvider;\n+import tech.pegasys.artemis.pow.contract.DepositContract;\n+\n+public class DepositContractFactory {\n+\n+  public static DepositContractAccessor eth1DepositContractAccessor(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NDI0NQ=="}, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzY3OTgwOnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositContractFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjo1NjoyM1rOFyArrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjo1NjoyM1rOFyArrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NDMwMQ==", "bodyText": "This can be private.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r387984301", "createdAt": "2020-03-04T22:56:23Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositContractFactory.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import org.web3j.protocol.Web3j;\n+import org.web3j.tx.ClientTransactionManager;\n+import org.web3j.tx.gas.DefaultGasProvider;\n+import tech.pegasys.artemis.pow.contract.DepositContract;\n+\n+public class DepositContractFactory {\n+\n+  public static DepositContractAccessor eth1DepositContractAccessor(\n+      Eth1Provider eth1Provider, Web3j web3j, String address) {\n+    DepositContract contract = eth1DepositContract(web3j, address);\n+    return new DepositContractAccessor(eth1Provider, contract);\n+  }\n+\n+  public static DepositContract eth1DepositContract(Web3j web3j, String address) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzY4NzE5OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositFetcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjo1OToyNVrOFyAwUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0NzoxNlrOFyfiGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NTQ4OA==", "bodyText": "I think I'd just always use the range form of this.  It's not worth the extra code and we are technically always requesting a range, even if it's a range of 1.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r387985488", "createdAt": "2020-03-04T22:59:25Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositFetcher.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.math.BigInteger;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.web3j.protocol.core.DefaultBlockParameter;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.pow.contract.DepositContract;\n+import tech.pegasys.artemis.pow.event.Deposit;\n+import tech.pegasys.artemis.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositFetcher {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositContract depositContract;\n+  private final AsyncRunner asyncRunner;\n+\n+  public DepositFetcher(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositContract depositContract,\n+      AsyncRunner asyncRunner) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositContract = depositContract;\n+    this.asyncRunner = asyncRunner;\n+  }\n+\n+  // Inclusive on both sides\n+  public synchronized SafeFuture<Void> fetchDepositsInRange(\n+      BigInteger fromBlockNumber, BigInteger toBlockNumber) {\n+\n+    if (fromBlockNumber.equals(toBlockNumber)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4OTc1Mw==", "bodyText": "Done", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388489753", "createdAt": "2020-03-05T18:47:16Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositFetcher.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.math.BigInteger;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.web3j.protocol.core.DefaultBlockParameter;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.pow.contract.DepositContract;\n+import tech.pegasys.artemis.pow.event.Deposit;\n+import tech.pegasys.artemis.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositFetcher {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositContract depositContract;\n+  private final AsyncRunner asyncRunner;\n+\n+  public DepositFetcher(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositContract depositContract,\n+      AsyncRunner asyncRunner) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositContract = depositContract;\n+    this.asyncRunner = asyncRunner;\n+  }\n+\n+  // Inclusive on both sides\n+  public synchronized SafeFuture<Void> fetchDepositsInRange(\n+      BigInteger fromBlockNumber, BigInteger toBlockNumber) {\n+\n+    if (fromBlockNumber.equals(toBlockNumber)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NTQ4OA=="}, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzY4ODI1OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositFetcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjo1OTo1NlrOFyAw_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0ODowNlrOFyfjpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NTY2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \"Retrying request of deposit events for \"\n          \n          \n            \n                                    + \"block numbers in the range ({}, {})\",\n          \n          \n            \n                                \"Retrying request of deposit events for block numbers in the range ({}, {})\",", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r387985661", "createdAt": "2020-03-04T22:59:56Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositFetcher.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.math.BigInteger;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.web3j.protocol.core.DefaultBlockParameter;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.pow.contract.DepositContract;\n+import tech.pegasys.artemis.pow.event.Deposit;\n+import tech.pegasys.artemis.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositFetcher {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositContract depositContract;\n+  private final AsyncRunner asyncRunner;\n+\n+  public DepositFetcher(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositContract depositContract,\n+      AsyncRunner asyncRunner) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositContract = depositContract;\n+    this.asyncRunner = asyncRunner;\n+  }\n+\n+  // Inclusive on both sides\n+  public synchronized SafeFuture<Void> fetchDepositsInRange(\n+      BigInteger fromBlockNumber, BigInteger toBlockNumber) {\n+\n+    if (fromBlockNumber.equals(toBlockNumber)) {\n+      LOG.trace(\"Attempting to fetch deposit events for block number {}\", fromBlockNumber);\n+    } else {\n+      LOG.trace(\n+          \"Attempting to fetch deposit events for block numbers in the range ({}, {})\",\n+          fromBlockNumber,\n+          toBlockNumber);\n+    }\n+\n+    return getDepositEventsInRangeFromContract(fromBlockNumber, toBlockNumber)\n+        .thenApply(this::groupDepositEventResponsesByBlockHash)\n+        .thenCompose(\n+            eventResponsesByBlockHash ->\n+                postDepositEvents(\n+                    getListOfEthBlockFutures(eventResponsesByBlockHash.keySet()),\n+                    eventResponsesByBlockHash));\n+  }\n+\n+  private SafeFuture<List<DepositContract.DepositEventEventResponse>>\n+      getDepositEventsInRangeFromContract(BigInteger fromBlockNumber, BigInteger toBlockNumber) {\n+\n+    DefaultBlockParameter fromBlock = DefaultBlockParameter.valueOf(fromBlockNumber);\n+    DefaultBlockParameter toBlock = DefaultBlockParameter.valueOf(toBlockNumber);\n+\n+    return depositContract\n+        .depositEventInRange(fromBlock, toBlock)\n+        .exceptionallyCompose(\n+            (err) -> {\n+              if (fromBlockNumber.equals(toBlockNumber)) {\n+                LOG.warn(\"Retrying request of deposit events for block number {}\", fromBlockNumber);\n+              } else {\n+                LOG.warn(\n+                    \"Retrying request of deposit events for \"\n+                        + \"block numbers in the range ({}, {})\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MDE1MQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388490151", "createdAt": "2020-03-05T18:48:06Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositFetcher.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.math.BigInteger;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.web3j.protocol.core.DefaultBlockParameter;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.pow.contract.DepositContract;\n+import tech.pegasys.artemis.pow.event.Deposit;\n+import tech.pegasys.artemis.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositFetcher {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositContract depositContract;\n+  private final AsyncRunner asyncRunner;\n+\n+  public DepositFetcher(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositContract depositContract,\n+      AsyncRunner asyncRunner) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositContract = depositContract;\n+    this.asyncRunner = asyncRunner;\n+  }\n+\n+  // Inclusive on both sides\n+  public synchronized SafeFuture<Void> fetchDepositsInRange(\n+      BigInteger fromBlockNumber, BigInteger toBlockNumber) {\n+\n+    if (fromBlockNumber.equals(toBlockNumber)) {\n+      LOG.trace(\"Attempting to fetch deposit events for block number {}\", fromBlockNumber);\n+    } else {\n+      LOG.trace(\n+          \"Attempting to fetch deposit events for block numbers in the range ({}, {})\",\n+          fromBlockNumber,\n+          toBlockNumber);\n+    }\n+\n+    return getDepositEventsInRangeFromContract(fromBlockNumber, toBlockNumber)\n+        .thenApply(this::groupDepositEventResponsesByBlockHash)\n+        .thenCompose(\n+            eventResponsesByBlockHash ->\n+                postDepositEvents(\n+                    getListOfEthBlockFutures(eventResponsesByBlockHash.keySet()),\n+                    eventResponsesByBlockHash));\n+  }\n+\n+  private SafeFuture<List<DepositContract.DepositEventEventResponse>>\n+      getDepositEventsInRangeFromContract(BigInteger fromBlockNumber, BigInteger toBlockNumber) {\n+\n+    DefaultBlockParameter fromBlock = DefaultBlockParameter.valueOf(fromBlockNumber);\n+    DefaultBlockParameter toBlock = DefaultBlockParameter.valueOf(toBlockNumber);\n+\n+    return depositContract\n+        .depositEventInRange(fromBlock, toBlock)\n+        .exceptionallyCompose(\n+            (err) -> {\n+              if (fromBlockNumber.equals(toBlockNumber)) {\n+                LOG.warn(\"Retrying request of deposit events for block number {}\", fromBlockNumber);\n+              } else {\n+                LOG.warn(\n+                    \"Retrying request of deposit events for \"\n+                        + \"block numbers in the range ({}, {})\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NTY2MQ=="}, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzY4OTUyOnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositFetcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzowMDoyNVrOFyAxuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo0OToyNVrOFyfmVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NTg0OA==", "bodyText": "I'd just have the range version of this log too.  And we should include the error that occurred in the message.\nSo probably:\nLOG.warn(\"Failed to request deposit events for blocks \" + fromBlock + \" to \" + toBlock + \". Retrying\", err)", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r387985848", "createdAt": "2020-03-04T23:00:25Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositFetcher.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.math.BigInteger;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.web3j.protocol.core.DefaultBlockParameter;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.pow.contract.DepositContract;\n+import tech.pegasys.artemis.pow.event.Deposit;\n+import tech.pegasys.artemis.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositFetcher {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositContract depositContract;\n+  private final AsyncRunner asyncRunner;\n+\n+  public DepositFetcher(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositContract depositContract,\n+      AsyncRunner asyncRunner) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositContract = depositContract;\n+    this.asyncRunner = asyncRunner;\n+  }\n+\n+  // Inclusive on both sides\n+  public synchronized SafeFuture<Void> fetchDepositsInRange(\n+      BigInteger fromBlockNumber, BigInteger toBlockNumber) {\n+\n+    if (fromBlockNumber.equals(toBlockNumber)) {\n+      LOG.trace(\"Attempting to fetch deposit events for block number {}\", fromBlockNumber);\n+    } else {\n+      LOG.trace(\n+          \"Attempting to fetch deposit events for block numbers in the range ({}, {})\",\n+          fromBlockNumber,\n+          toBlockNumber);\n+    }\n+\n+    return getDepositEventsInRangeFromContract(fromBlockNumber, toBlockNumber)\n+        .thenApply(this::groupDepositEventResponsesByBlockHash)\n+        .thenCompose(\n+            eventResponsesByBlockHash ->\n+                postDepositEvents(\n+                    getListOfEthBlockFutures(eventResponsesByBlockHash.keySet()),\n+                    eventResponsesByBlockHash));\n+  }\n+\n+  private SafeFuture<List<DepositContract.DepositEventEventResponse>>\n+      getDepositEventsInRangeFromContract(BigInteger fromBlockNumber, BigInteger toBlockNumber) {\n+\n+    DefaultBlockParameter fromBlock = DefaultBlockParameter.valueOf(fromBlockNumber);\n+    DefaultBlockParameter toBlock = DefaultBlockParameter.valueOf(toBlockNumber);\n+\n+    return depositContract\n+        .depositEventInRange(fromBlock, toBlock)\n+        .exceptionallyCompose(\n+            (err) -> {\n+              if (fromBlockNumber.equals(toBlockNumber)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MDgzNg==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388490836", "createdAt": "2020-03-05T18:49:25Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositFetcher.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.math.BigInteger;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.web3j.protocol.core.DefaultBlockParameter;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.pow.contract.DepositContract;\n+import tech.pegasys.artemis.pow.event.Deposit;\n+import tech.pegasys.artemis.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositFetcher {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositContract depositContract;\n+  private final AsyncRunner asyncRunner;\n+\n+  public DepositFetcher(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositContract depositContract,\n+      AsyncRunner asyncRunner) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositContract = depositContract;\n+    this.asyncRunner = asyncRunner;\n+  }\n+\n+  // Inclusive on both sides\n+  public synchronized SafeFuture<Void> fetchDepositsInRange(\n+      BigInteger fromBlockNumber, BigInteger toBlockNumber) {\n+\n+    if (fromBlockNumber.equals(toBlockNumber)) {\n+      LOG.trace(\"Attempting to fetch deposit events for block number {}\", fromBlockNumber);\n+    } else {\n+      LOG.trace(\n+          \"Attempting to fetch deposit events for block numbers in the range ({}, {})\",\n+          fromBlockNumber,\n+          toBlockNumber);\n+    }\n+\n+    return getDepositEventsInRangeFromContract(fromBlockNumber, toBlockNumber)\n+        .thenApply(this::groupDepositEventResponsesByBlockHash)\n+        .thenCompose(\n+            eventResponsesByBlockHash ->\n+                postDepositEvents(\n+                    getListOfEthBlockFutures(eventResponsesByBlockHash.keySet()),\n+                    eventResponsesByBlockHash));\n+  }\n+\n+  private SafeFuture<List<DepositContract.DepositEventEventResponse>>\n+      getDepositEventsInRangeFromContract(BigInteger fromBlockNumber, BigInteger toBlockNumber) {\n+\n+    DefaultBlockParameter fromBlock = DefaultBlockParameter.valueOf(fromBlockNumber);\n+    DefaultBlockParameter toBlock = DefaultBlockParameter.valueOf(toBlockNumber);\n+\n+    return depositContract\n+        .depositEventInRange(fromBlock, toBlock)\n+        .exceptionallyCompose(\n+            (err) -> {\n+              if (fromBlockNumber.equals(toBlockNumber)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NTg0OA=="}, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzY5NzQ1OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositFetcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzowMzo1NFrOFyA2oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MDoxNVrOFyfoCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NzEwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          return asyncRunner\n          \n          \n            \n                              .getDelayedFuture(Constants.ETH1_DEPOSIT_REQUEST_RETRY_TIMEOUT, TimeUnit.SECONDS)\n          \n          \n            \n                              .thenCompose(\n          \n          \n            \n                                  __ -> getDepositEventsInRangeFromContract(fromBlockNumber, toBlockNumber));\n          \n          \n            \n                          return asyncRunner.runAfterDelay(\n          \n          \n            \n                              () -> getDepositEventsInRangeFromContract(fromBlockNumber, toBlockNumber),\n          \n          \n            \n                              Constants.ETH1_DEPOSIT_REQUEST_RETRY_TIMEOUT,\n          \n          \n            \n                              TimeUnit.SECONDS);", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r387987104", "createdAt": "2020-03-04T23:03:54Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositFetcher.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.math.BigInteger;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.web3j.protocol.core.DefaultBlockParameter;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.pow.contract.DepositContract;\n+import tech.pegasys.artemis.pow.event.Deposit;\n+import tech.pegasys.artemis.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositFetcher {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositContract depositContract;\n+  private final AsyncRunner asyncRunner;\n+\n+  public DepositFetcher(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositContract depositContract,\n+      AsyncRunner asyncRunner) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositContract = depositContract;\n+    this.asyncRunner = asyncRunner;\n+  }\n+\n+  // Inclusive on both sides\n+  public synchronized SafeFuture<Void> fetchDepositsInRange(\n+      BigInteger fromBlockNumber, BigInteger toBlockNumber) {\n+\n+    if (fromBlockNumber.equals(toBlockNumber)) {\n+      LOG.trace(\"Attempting to fetch deposit events for block number {}\", fromBlockNumber);\n+    } else {\n+      LOG.trace(\n+          \"Attempting to fetch deposit events for block numbers in the range ({}, {})\",\n+          fromBlockNumber,\n+          toBlockNumber);\n+    }\n+\n+    return getDepositEventsInRangeFromContract(fromBlockNumber, toBlockNumber)\n+        .thenApply(this::groupDepositEventResponsesByBlockHash)\n+        .thenCompose(\n+            eventResponsesByBlockHash ->\n+                postDepositEvents(\n+                    getListOfEthBlockFutures(eventResponsesByBlockHash.keySet()),\n+                    eventResponsesByBlockHash));\n+  }\n+\n+  private SafeFuture<List<DepositContract.DepositEventEventResponse>>\n+      getDepositEventsInRangeFromContract(BigInteger fromBlockNumber, BigInteger toBlockNumber) {\n+\n+    DefaultBlockParameter fromBlock = DefaultBlockParameter.valueOf(fromBlockNumber);\n+    DefaultBlockParameter toBlock = DefaultBlockParameter.valueOf(toBlockNumber);\n+\n+    return depositContract\n+        .depositEventInRange(fromBlock, toBlock)\n+        .exceptionallyCompose(\n+            (err) -> {\n+              if (fromBlockNumber.equals(toBlockNumber)) {\n+                LOG.warn(\"Retrying request of deposit events for block number {}\", fromBlockNumber);\n+              } else {\n+                LOG.warn(\n+                    \"Retrying request of deposit events for \"\n+                        + \"block numbers in the range ({}, {})\",\n+                    fromBlockNumber,\n+                    toBlockNumber);\n+              }\n+\n+              return asyncRunner\n+                  .getDelayedFuture(Constants.ETH1_DEPOSIT_REQUEST_RETRY_TIMEOUT, TimeUnit.SECONDS)\n+                  .thenCompose(\n+                      __ -> getDepositEventsInRangeFromContract(fromBlockNumber, toBlockNumber));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTI3NA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388491274", "createdAt": "2020-03-05T18:50:15Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositFetcher.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.util.stream.Collectors.groupingBy;\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.math.BigInteger;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.web3j.protocol.core.DefaultBlockParameter;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.pow.contract.DepositContract;\n+import tech.pegasys.artemis.pow.event.Deposit;\n+import tech.pegasys.artemis.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositFetcher {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositContract depositContract;\n+  private final AsyncRunner asyncRunner;\n+\n+  public DepositFetcher(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositContract depositContract,\n+      AsyncRunner asyncRunner) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositContract = depositContract;\n+    this.asyncRunner = asyncRunner;\n+  }\n+\n+  // Inclusive on both sides\n+  public synchronized SafeFuture<Void> fetchDepositsInRange(\n+      BigInteger fromBlockNumber, BigInteger toBlockNumber) {\n+\n+    if (fromBlockNumber.equals(toBlockNumber)) {\n+      LOG.trace(\"Attempting to fetch deposit events for block number {}\", fromBlockNumber);\n+    } else {\n+      LOG.trace(\n+          \"Attempting to fetch deposit events for block numbers in the range ({}, {})\",\n+          fromBlockNumber,\n+          toBlockNumber);\n+    }\n+\n+    return getDepositEventsInRangeFromContract(fromBlockNumber, toBlockNumber)\n+        .thenApply(this::groupDepositEventResponsesByBlockHash)\n+        .thenCompose(\n+            eventResponsesByBlockHash ->\n+                postDepositEvents(\n+                    getListOfEthBlockFutures(eventResponsesByBlockHash.keySet()),\n+                    eventResponsesByBlockHash));\n+  }\n+\n+  private SafeFuture<List<DepositContract.DepositEventEventResponse>>\n+      getDepositEventsInRangeFromContract(BigInteger fromBlockNumber, BigInteger toBlockNumber) {\n+\n+    DefaultBlockParameter fromBlock = DefaultBlockParameter.valueOf(fromBlockNumber);\n+    DefaultBlockParameter toBlock = DefaultBlockParameter.valueOf(toBlockNumber);\n+\n+    return depositContract\n+        .depositEventInRange(fromBlock, toBlock)\n+        .exceptionallyCompose(\n+            (err) -> {\n+              if (fromBlockNumber.equals(toBlockNumber)) {\n+                LOG.warn(\"Retrying request of deposit events for block number {}\", fromBlockNumber);\n+              } else {\n+                LOG.warn(\n+                    \"Retrying request of deposit events for \"\n+                        + \"block numbers in the range ({}, {})\",\n+                    fromBlockNumber,\n+                    toBlockNumber);\n+              }\n+\n+              return asyncRunner\n+                  .getDelayedFuture(Constants.ETH1_DEPOSIT_REQUEST_RETRY_TIMEOUT, TimeUnit.SECONDS)\n+                  .thenCompose(\n+                      __ -> getDepositEventsInRangeFromContract(fromBlockNumber, toBlockNumber));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NzEwNA=="}, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzcwMjY0OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzowNjowOVrOFyA5vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MToxMFrOFyfqTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NzkwMw==", "bodyText": "These should only be accessed inside synchronised blocks now so shouldn't need to be volatile.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r387987903", "createdAt": "2020-03-04T23:06:09Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.calculateCandidateGenesisTimestamp;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositFetcher depositFetcher;\n+\n+  private Disposable newBlockSubscription;\n+  private volatile boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private volatile boolean isBlockByBlockModeOn = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTg1NA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388491854", "createdAt": "2020-03-05T18:51:10Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.calculateCandidateGenesisTimestamp;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositFetcher depositFetcher;\n+\n+  private Disposable newBlockSubscription;\n+  private volatile boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private volatile boolean isBlockByBlockModeOn = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4NzkwMw=="}, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzcwNzA1OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzowODowOFrOFyA8hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1MTo0OVrOFyfr6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4ODYxMg==", "bodyText": "Google code style allows string constants to be on a single line. Unless it's way over the line length it's usually more readable as a single string.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \"Unable to subscribe to the Eth1Node. Node won't \"\n          \n          \n            \n                                    + \"have access to new deposits after genesis.\",\n          \n          \n            \n                                error));\n          \n          \n            \n                                \"Unable to subscribe to the Eth1Node. Node won't have access to new deposits after genesis.\",\n          \n          \n            \n                                error));", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r387988612", "createdAt": "2020-03-04T23:08:08Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.calculateCandidateGenesisTimestamp;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositFetcher depositFetcher;\n+\n+  private Disposable newBlockSubscription;\n+  private volatile boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private volatile boolean isBlockByBlockModeOn = false;\n+\n+  private BigInteger latestSuccessfullyQueriedBlock = BigInteger.ZERO;\n+  private BigInteger latestCanonicalBlockNumber = BigInteger.ZERO;\n+\n+  public DepositProcessingController(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      AsyncRunner asyncRunner,\n+      DepositFetcher depositFetcher) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.asyncRunner = asyncRunner;\n+    this.depositFetcher = depositFetcher;\n+  }\n+\n+  public synchronized void switchToBlockByBlockMode() {\n+    LOG.debug(\"Switching to blockByBlock mode\");\n+    isBlockByBlockModeOn = true;\n+  }\n+\n+  // inclusive of start block\n+  public synchronized void startSubscription(BigInteger subscriptionStartBlock) {\n+    LOG.debug(\"Starting subscription at block {}\", subscriptionStartBlock);\n+    latestSuccessfullyQueriedBlock = subscriptionStartBlock.subtract(BigInteger.ONE);\n+    newBlockSubscription =\n+        eth1Provider\n+            .getLatestBlockFlowable()\n+            .map(EthBlock.Block::getNumber)\n+            .map(number -> number.subtract(ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n+            .subscribe(this::onNewCanonicalBlockNumber, this::onSubscriptionFailed);\n+  }\n+\n+  public void stopIfSubscribed() {\n+    if (newBlockSubscription != null) {\n+      newBlockSubscription.dispose();\n+    }\n+  }\n+\n+  // Inclusive\n+  public synchronized SafeFuture<Void> fetchDepositsFromGenesisTo(BigInteger toBlockNumber) {\n+    return depositFetcher.fetchDepositsInRange(BigInteger.ZERO, toBlockNumber);\n+  }\n+\n+  private synchronized void onSubscriptionFailed(Throwable err) {\n+    Disposable subscription = newBlockSubscription;\n+    if (subscription != null) {\n+      subscription.dispose();\n+    }\n+    LOG.warn(\"New block subscription failed, retrying.\", err);\n+    asyncRunner\n+        .getDelayedFuture(Constants.ETH1_SUBSCRIPTION_RETRY_TIMEOUT, TimeUnit.SECONDS)\n+        .finish(\n+            () -> startSubscription(latestSuccessfullyQueriedBlock),\n+            (error) ->\n+                LOG.warn(\n+                    \"Unable to subscribe to the Eth1Node. Node won't \"\n+                        + \"have access to new deposits after genesis.\",\n+                    error));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MjI2Nw==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388492267", "createdAt": "2020-03-05T18:51:49Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.calculateCandidateGenesisTimestamp;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositFetcher depositFetcher;\n+\n+  private Disposable newBlockSubscription;\n+  private volatile boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private volatile boolean isBlockByBlockModeOn = false;\n+\n+  private BigInteger latestSuccessfullyQueriedBlock = BigInteger.ZERO;\n+  private BigInteger latestCanonicalBlockNumber = BigInteger.ZERO;\n+\n+  public DepositProcessingController(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      AsyncRunner asyncRunner,\n+      DepositFetcher depositFetcher) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.asyncRunner = asyncRunner;\n+    this.depositFetcher = depositFetcher;\n+  }\n+\n+  public synchronized void switchToBlockByBlockMode() {\n+    LOG.debug(\"Switching to blockByBlock mode\");\n+    isBlockByBlockModeOn = true;\n+  }\n+\n+  // inclusive of start block\n+  public synchronized void startSubscription(BigInteger subscriptionStartBlock) {\n+    LOG.debug(\"Starting subscription at block {}\", subscriptionStartBlock);\n+    latestSuccessfullyQueriedBlock = subscriptionStartBlock.subtract(BigInteger.ONE);\n+    newBlockSubscription =\n+        eth1Provider\n+            .getLatestBlockFlowable()\n+            .map(EthBlock.Block::getNumber)\n+            .map(number -> number.subtract(ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n+            .subscribe(this::onNewCanonicalBlockNumber, this::onSubscriptionFailed);\n+  }\n+\n+  public void stopIfSubscribed() {\n+    if (newBlockSubscription != null) {\n+      newBlockSubscription.dispose();\n+    }\n+  }\n+\n+  // Inclusive\n+  public synchronized SafeFuture<Void> fetchDepositsFromGenesisTo(BigInteger toBlockNumber) {\n+    return depositFetcher.fetchDepositsInRange(BigInteger.ZERO, toBlockNumber);\n+  }\n+\n+  private synchronized void onSubscriptionFailed(Throwable err) {\n+    Disposable subscription = newBlockSubscription;\n+    if (subscription != null) {\n+      subscription.dispose();\n+    }\n+    LOG.warn(\"New block subscription failed, retrying.\", err);\n+    asyncRunner\n+        .getDelayedFuture(Constants.ETH1_SUBSCRIPTION_RETRY_TIMEOUT, TimeUnit.SECONDS)\n+        .finish(\n+            () -> startSubscription(latestSuccessfullyQueriedBlock),\n+            (error) ->\n+                LOG.warn(\n+                    \"Unable to subscribe to the Eth1Node. Node won't \"\n+                        + \"have access to new deposits after genesis.\",\n+                    error));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4ODYxMg=="}, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzcwODU2OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzowODo0NlrOFyA9dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1NDozN1rOFyfx7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4ODg1NA==", "bodyText": "We should consistently use braces.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } else fetchLatestSubscriptionDepositsOverRange();\n          \n          \n            \n                } else {\n          \n          \n            \n                  fetchLatestSubscriptionDepositsOverRange();\n          \n          \n            \n                }", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r387988854", "createdAt": "2020-03-04T23:08:46Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.calculateCandidateGenesisTimestamp;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositFetcher depositFetcher;\n+\n+  private Disposable newBlockSubscription;\n+  private volatile boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private volatile boolean isBlockByBlockModeOn = false;\n+\n+  private BigInteger latestSuccessfullyQueriedBlock = BigInteger.ZERO;\n+  private BigInteger latestCanonicalBlockNumber = BigInteger.ZERO;\n+\n+  public DepositProcessingController(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      AsyncRunner asyncRunner,\n+      DepositFetcher depositFetcher) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.asyncRunner = asyncRunner;\n+    this.depositFetcher = depositFetcher;\n+  }\n+\n+  public synchronized void switchToBlockByBlockMode() {\n+    LOG.debug(\"Switching to blockByBlock mode\");\n+    isBlockByBlockModeOn = true;\n+  }\n+\n+  // inclusive of start block\n+  public synchronized void startSubscription(BigInteger subscriptionStartBlock) {\n+    LOG.debug(\"Starting subscription at block {}\", subscriptionStartBlock);\n+    latestSuccessfullyQueriedBlock = subscriptionStartBlock.subtract(BigInteger.ONE);\n+    newBlockSubscription =\n+        eth1Provider\n+            .getLatestBlockFlowable()\n+            .map(EthBlock.Block::getNumber)\n+            .map(number -> number.subtract(ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n+            .subscribe(this::onNewCanonicalBlockNumber, this::onSubscriptionFailed);\n+  }\n+\n+  public void stopIfSubscribed() {\n+    if (newBlockSubscription != null) {\n+      newBlockSubscription.dispose();\n+    }\n+  }\n+\n+  // Inclusive\n+  public synchronized SafeFuture<Void> fetchDepositsFromGenesisTo(BigInteger toBlockNumber) {\n+    return depositFetcher.fetchDepositsInRange(BigInteger.ZERO, toBlockNumber);\n+  }\n+\n+  private synchronized void onSubscriptionFailed(Throwable err) {\n+    Disposable subscription = newBlockSubscription;\n+    if (subscription != null) {\n+      subscription.dispose();\n+    }\n+    LOG.warn(\"New block subscription failed, retrying.\", err);\n+    asyncRunner\n+        .getDelayedFuture(Constants.ETH1_SUBSCRIPTION_RETRY_TIMEOUT, TimeUnit.SECONDS)\n+        .finish(\n+            () -> startSubscription(latestSuccessfullyQueriedBlock),\n+            (error) ->\n+                LOG.warn(\n+                    \"Unable to subscribe to the Eth1Node. Node won't \"\n+                        + \"have access to new deposits after genesis.\",\n+                    error));\n+  }\n+\n+  private synchronized void onNewCanonicalBlockNumber(BigInteger latestCanonicalBlockNumber) {\n+    if (latestCanonicalBlockNumber.compareTo(this.latestCanonicalBlockNumber) <= 0) {\n+      return;\n+    }\n+    this.latestCanonicalBlockNumber = latestCanonicalBlockNumber;\n+    fetchLatestSubscriptionDeposits();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDeposits() {\n+    if (isBlockByBlockModeOn) {\n+      fetchLatestDepositsOneBlockAtATime();\n+    } else fetchLatestSubscriptionDepositsOverRange();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MzgwNg==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388493806", "createdAt": "2020-03-05T18:54:37Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.calculateCandidateGenesisTimestamp;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositFetcher depositFetcher;\n+\n+  private Disposable newBlockSubscription;\n+  private volatile boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private volatile boolean isBlockByBlockModeOn = false;\n+\n+  private BigInteger latestSuccessfullyQueriedBlock = BigInteger.ZERO;\n+  private BigInteger latestCanonicalBlockNumber = BigInteger.ZERO;\n+\n+  public DepositProcessingController(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      AsyncRunner asyncRunner,\n+      DepositFetcher depositFetcher) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.asyncRunner = asyncRunner;\n+    this.depositFetcher = depositFetcher;\n+  }\n+\n+  public synchronized void switchToBlockByBlockMode() {\n+    LOG.debug(\"Switching to blockByBlock mode\");\n+    isBlockByBlockModeOn = true;\n+  }\n+\n+  // inclusive of start block\n+  public synchronized void startSubscription(BigInteger subscriptionStartBlock) {\n+    LOG.debug(\"Starting subscription at block {}\", subscriptionStartBlock);\n+    latestSuccessfullyQueriedBlock = subscriptionStartBlock.subtract(BigInteger.ONE);\n+    newBlockSubscription =\n+        eth1Provider\n+            .getLatestBlockFlowable()\n+            .map(EthBlock.Block::getNumber)\n+            .map(number -> number.subtract(ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n+            .subscribe(this::onNewCanonicalBlockNumber, this::onSubscriptionFailed);\n+  }\n+\n+  public void stopIfSubscribed() {\n+    if (newBlockSubscription != null) {\n+      newBlockSubscription.dispose();\n+    }\n+  }\n+\n+  // Inclusive\n+  public synchronized SafeFuture<Void> fetchDepositsFromGenesisTo(BigInteger toBlockNumber) {\n+    return depositFetcher.fetchDepositsInRange(BigInteger.ZERO, toBlockNumber);\n+  }\n+\n+  private synchronized void onSubscriptionFailed(Throwable err) {\n+    Disposable subscription = newBlockSubscription;\n+    if (subscription != null) {\n+      subscription.dispose();\n+    }\n+    LOG.warn(\"New block subscription failed, retrying.\", err);\n+    asyncRunner\n+        .getDelayedFuture(Constants.ETH1_SUBSCRIPTION_RETRY_TIMEOUT, TimeUnit.SECONDS)\n+        .finish(\n+            () -> startSubscription(latestSuccessfullyQueriedBlock),\n+            (error) ->\n+                LOG.warn(\n+                    \"Unable to subscribe to the Eth1Node. Node won't \"\n+                        + \"have access to new deposits after genesis.\",\n+                    error));\n+  }\n+\n+  private synchronized void onNewCanonicalBlockNumber(BigInteger latestCanonicalBlockNumber) {\n+    if (latestCanonicalBlockNumber.compareTo(this.latestCanonicalBlockNumber) <= 0) {\n+      return;\n+    }\n+    this.latestCanonicalBlockNumber = latestCanonicalBlockNumber;\n+    fetchLatestSubscriptionDeposits();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDeposits() {\n+    if (isBlockByBlockModeOn) {\n+      fetchLatestDepositsOneBlockAtATime();\n+    } else fetchLatestSubscriptionDepositsOverRange();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4ODg1NA=="}, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzg1MjMzOnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDoxODoyOFrOFyCWEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1NTowMlrOFyfy-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxMTUzOQ==", "bodyText": "The method is already synchronised so we don't need this nested synchronised block anymore.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388011539", "createdAt": "2020-03-05T00:18:28Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.calculateCandidateGenesisTimestamp;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositFetcher depositFetcher;\n+\n+  private Disposable newBlockSubscription;\n+  private volatile boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private volatile boolean isBlockByBlockModeOn = false;\n+\n+  private BigInteger latestSuccessfullyQueriedBlock = BigInteger.ZERO;\n+  private BigInteger latestCanonicalBlockNumber = BigInteger.ZERO;\n+\n+  public DepositProcessingController(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      AsyncRunner asyncRunner,\n+      DepositFetcher depositFetcher) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.asyncRunner = asyncRunner;\n+    this.depositFetcher = depositFetcher;\n+  }\n+\n+  public synchronized void switchToBlockByBlockMode() {\n+    LOG.debug(\"Switching to blockByBlock mode\");\n+    isBlockByBlockModeOn = true;\n+  }\n+\n+  // inclusive of start block\n+  public synchronized void startSubscription(BigInteger subscriptionStartBlock) {\n+    LOG.debug(\"Starting subscription at block {}\", subscriptionStartBlock);\n+    latestSuccessfullyQueriedBlock = subscriptionStartBlock.subtract(BigInteger.ONE);\n+    newBlockSubscription =\n+        eth1Provider\n+            .getLatestBlockFlowable()\n+            .map(EthBlock.Block::getNumber)\n+            .map(number -> number.subtract(ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n+            .subscribe(this::onNewCanonicalBlockNumber, this::onSubscriptionFailed);\n+  }\n+\n+  public void stopIfSubscribed() {\n+    if (newBlockSubscription != null) {\n+      newBlockSubscription.dispose();\n+    }\n+  }\n+\n+  // Inclusive\n+  public synchronized SafeFuture<Void> fetchDepositsFromGenesisTo(BigInteger toBlockNumber) {\n+    return depositFetcher.fetchDepositsInRange(BigInteger.ZERO, toBlockNumber);\n+  }\n+\n+  private synchronized void onSubscriptionFailed(Throwable err) {\n+    Disposable subscription = newBlockSubscription;\n+    if (subscription != null) {\n+      subscription.dispose();\n+    }\n+    LOG.warn(\"New block subscription failed, retrying.\", err);\n+    asyncRunner\n+        .getDelayedFuture(Constants.ETH1_SUBSCRIPTION_RETRY_TIMEOUT, TimeUnit.SECONDS)\n+        .finish(\n+            () -> startSubscription(latestSuccessfullyQueriedBlock),\n+            (error) ->\n+                LOG.warn(\n+                    \"Unable to subscribe to the Eth1Node. Node won't \"\n+                        + \"have access to new deposits after genesis.\",\n+                    error));\n+  }\n+\n+  private synchronized void onNewCanonicalBlockNumber(BigInteger latestCanonicalBlockNumber) {\n+    if (latestCanonicalBlockNumber.compareTo(this.latestCanonicalBlockNumber) <= 0) {\n+      return;\n+    }\n+    this.latestCanonicalBlockNumber = latestCanonicalBlockNumber;\n+    fetchLatestSubscriptionDeposits();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDeposits() {\n+    if (isBlockByBlockModeOn) {\n+      fetchLatestDepositsOneBlockAtATime();\n+    } else fetchLatestSubscriptionDepositsOverRange();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDepositsOverRange() {\n+    final BigInteger toBlock;\n+    final BigInteger fromBlock;\n+\n+    if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+      return;\n+    }\n+    active = true;\n+\n+    fromBlock = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    toBlock = latestCanonicalBlockNumber;\n+\n+    depositFetcher\n+        .fetchDepositsInRange(fromBlock, toBlock)\n+        .finish(\n+            __ -> onSubscriptionDepositRequestSuccessful(toBlock),\n+            (err) -> onSubscriptionDepositRequestFailed(err, fromBlock, toBlock));\n+  }\n+\n+  private synchronized void fetchLatestDepositsOneBlockAtATime() {\n+    final BigInteger nextBlockNumber;\n+\n+    synchronized (DepositProcessingController.this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NDA3NA==", "bodyText": "Makes sense.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388494074", "createdAt": "2020-03-05T18:55:02Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.calculateCandidateGenesisTimestamp;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositFetcher depositFetcher;\n+\n+  private Disposable newBlockSubscription;\n+  private volatile boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private volatile boolean isBlockByBlockModeOn = false;\n+\n+  private BigInteger latestSuccessfullyQueriedBlock = BigInteger.ZERO;\n+  private BigInteger latestCanonicalBlockNumber = BigInteger.ZERO;\n+\n+  public DepositProcessingController(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      AsyncRunner asyncRunner,\n+      DepositFetcher depositFetcher) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.asyncRunner = asyncRunner;\n+    this.depositFetcher = depositFetcher;\n+  }\n+\n+  public synchronized void switchToBlockByBlockMode() {\n+    LOG.debug(\"Switching to blockByBlock mode\");\n+    isBlockByBlockModeOn = true;\n+  }\n+\n+  // inclusive of start block\n+  public synchronized void startSubscription(BigInteger subscriptionStartBlock) {\n+    LOG.debug(\"Starting subscription at block {}\", subscriptionStartBlock);\n+    latestSuccessfullyQueriedBlock = subscriptionStartBlock.subtract(BigInteger.ONE);\n+    newBlockSubscription =\n+        eth1Provider\n+            .getLatestBlockFlowable()\n+            .map(EthBlock.Block::getNumber)\n+            .map(number -> number.subtract(ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n+            .subscribe(this::onNewCanonicalBlockNumber, this::onSubscriptionFailed);\n+  }\n+\n+  public void stopIfSubscribed() {\n+    if (newBlockSubscription != null) {\n+      newBlockSubscription.dispose();\n+    }\n+  }\n+\n+  // Inclusive\n+  public synchronized SafeFuture<Void> fetchDepositsFromGenesisTo(BigInteger toBlockNumber) {\n+    return depositFetcher.fetchDepositsInRange(BigInteger.ZERO, toBlockNumber);\n+  }\n+\n+  private synchronized void onSubscriptionFailed(Throwable err) {\n+    Disposable subscription = newBlockSubscription;\n+    if (subscription != null) {\n+      subscription.dispose();\n+    }\n+    LOG.warn(\"New block subscription failed, retrying.\", err);\n+    asyncRunner\n+        .getDelayedFuture(Constants.ETH1_SUBSCRIPTION_RETRY_TIMEOUT, TimeUnit.SECONDS)\n+        .finish(\n+            () -> startSubscription(latestSuccessfullyQueriedBlock),\n+            (error) ->\n+                LOG.warn(\n+                    \"Unable to subscribe to the Eth1Node. Node won't \"\n+                        + \"have access to new deposits after genesis.\",\n+                    error));\n+  }\n+\n+  private synchronized void onNewCanonicalBlockNumber(BigInteger latestCanonicalBlockNumber) {\n+    if (latestCanonicalBlockNumber.compareTo(this.latestCanonicalBlockNumber) <= 0) {\n+      return;\n+    }\n+    this.latestCanonicalBlockNumber = latestCanonicalBlockNumber;\n+    fetchLatestSubscriptionDeposits();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDeposits() {\n+    if (isBlockByBlockModeOn) {\n+      fetchLatestDepositsOneBlockAtATime();\n+    } else fetchLatestSubscriptionDepositsOverRange();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDepositsOverRange() {\n+    final BigInteger toBlock;\n+    final BigInteger fromBlock;\n+\n+    if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+      return;\n+    }\n+    active = true;\n+\n+    fromBlock = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    toBlock = latestCanonicalBlockNumber;\n+\n+    depositFetcher\n+        .fetchDepositsInRange(fromBlock, toBlock)\n+        .finish(\n+            __ -> onSubscriptionDepositRequestSuccessful(toBlock),\n+            (err) -> onSubscriptionDepositRequestFailed(err, fromBlock, toBlock));\n+  }\n+\n+  private synchronized void fetchLatestDepositsOneBlockAtATime() {\n+    final BigInteger nextBlockNumber;\n+\n+    synchronized (DepositProcessingController.this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxMTUzOQ=="}, "originalCommit": {"oid": "b42a6297ca42aa158c799c825e300a3eedf828c8"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzg2Mjc2OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDoyNDowOVrOFyCcdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1Njo1OFrOFyf3hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxMzE3NQ==", "bodyText": "This should probably be in an else block or the minus will underflow when min genesis time has been reached.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388013175", "createdAt": "2020-03-05T00:24:09Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.calculateCandidateGenesisTimestamp;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositFetcher depositFetcher;\n+\n+  private Disposable newBlockSubscription;\n+  private volatile boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private volatile boolean isBlockByBlockModeOn = false;\n+\n+  private BigInteger latestSuccessfullyQueriedBlock = BigInteger.ZERO;\n+  private BigInteger latestCanonicalBlockNumber = BigInteger.ZERO;\n+\n+  public DepositProcessingController(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      AsyncRunner asyncRunner,\n+      DepositFetcher depositFetcher) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.asyncRunner = asyncRunner;\n+    this.depositFetcher = depositFetcher;\n+  }\n+\n+  public synchronized void switchToBlockByBlockMode() {\n+    LOG.debug(\"Switching to blockByBlock mode\");\n+    isBlockByBlockModeOn = true;\n+  }\n+\n+  // inclusive of start block\n+  public synchronized void startSubscription(BigInteger subscriptionStartBlock) {\n+    LOG.debug(\"Starting subscription at block {}\", subscriptionStartBlock);\n+    latestSuccessfullyQueriedBlock = subscriptionStartBlock.subtract(BigInteger.ONE);\n+    newBlockSubscription =\n+        eth1Provider\n+            .getLatestBlockFlowable()\n+            .map(EthBlock.Block::getNumber)\n+            .map(number -> number.subtract(ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n+            .subscribe(this::onNewCanonicalBlockNumber, this::onSubscriptionFailed);\n+  }\n+\n+  public void stopIfSubscribed() {\n+    if (newBlockSubscription != null) {\n+      newBlockSubscription.dispose();\n+    }\n+  }\n+\n+  // Inclusive\n+  public synchronized SafeFuture<Void> fetchDepositsFromGenesisTo(BigInteger toBlockNumber) {\n+    return depositFetcher.fetchDepositsInRange(BigInteger.ZERO, toBlockNumber);\n+  }\n+\n+  private synchronized void onSubscriptionFailed(Throwable err) {\n+    Disposable subscription = newBlockSubscription;\n+    if (subscription != null) {\n+      subscription.dispose();\n+    }\n+    LOG.warn(\"New block subscription failed, retrying.\", err);\n+    asyncRunner\n+        .getDelayedFuture(Constants.ETH1_SUBSCRIPTION_RETRY_TIMEOUT, TimeUnit.SECONDS)\n+        .finish(\n+            () -> startSubscription(latestSuccessfullyQueriedBlock),\n+            (error) ->\n+                LOG.warn(\n+                    \"Unable to subscribe to the Eth1Node. Node won't \"\n+                        + \"have access to new deposits after genesis.\",\n+                    error));\n+  }\n+\n+  private synchronized void onNewCanonicalBlockNumber(BigInteger latestCanonicalBlockNumber) {\n+    if (latestCanonicalBlockNumber.compareTo(this.latestCanonicalBlockNumber) <= 0) {\n+      return;\n+    }\n+    this.latestCanonicalBlockNumber = latestCanonicalBlockNumber;\n+    fetchLatestSubscriptionDeposits();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDeposits() {\n+    if (isBlockByBlockModeOn) {\n+      fetchLatestDepositsOneBlockAtATime();\n+    } else fetchLatestSubscriptionDepositsOverRange();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDepositsOverRange() {\n+    final BigInteger toBlock;\n+    final BigInteger fromBlock;\n+\n+    if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+      return;\n+    }\n+    active = true;\n+\n+    fromBlock = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    toBlock = latestCanonicalBlockNumber;\n+\n+    depositFetcher\n+        .fetchDepositsInRange(fromBlock, toBlock)\n+        .finish(\n+            __ -> onSubscriptionDepositRequestSuccessful(toBlock),\n+            (err) -> onSubscriptionDepositRequestFailed(err, fromBlock, toBlock));\n+  }\n+\n+  private synchronized void fetchLatestDepositsOneBlockAtATime() {\n+    final BigInteger nextBlockNumber;\n+\n+    synchronized (DepositProcessingController.this) {\n+      if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+        return;\n+      }\n+      active = true;\n+\n+      nextBlockNumber = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    }\n+\n+    depositFetcher\n+        .fetchDepositsInRange(nextBlockNumber, nextBlockNumber)\n+        .thenCompose(\n+            __ ->\n+                eth1Provider.getGuaranteedEth1BlockFuture(\n+                    UnsignedLong.valueOf(nextBlockNumber), asyncRunner))\n+        .thenAccept(\n+            block -> {\n+              final BigInteger blockNumber = block.getNumber();\n+              LOG.trace(\"Successfully fetched block {} for min genesis checking\", blockNumber);\n+              LOG.trace(\n+                  \"Seconds until min genesis block {}\",\n+                  Constants.MIN_GENESIS_TIME.minus(\n+                      calculateCandidateGenesisTimestamp(block.getTimestamp())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NTIzOQ==", "bodyText": "Makes sense.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388495239", "createdAt": "2020-03-05T18:56:58Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.calculateCandidateGenesisTimestamp;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositFetcher depositFetcher;\n+\n+  private Disposable newBlockSubscription;\n+  private volatile boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private volatile boolean isBlockByBlockModeOn = false;\n+\n+  private BigInteger latestSuccessfullyQueriedBlock = BigInteger.ZERO;\n+  private BigInteger latestCanonicalBlockNumber = BigInteger.ZERO;\n+\n+  public DepositProcessingController(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      AsyncRunner asyncRunner,\n+      DepositFetcher depositFetcher) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.asyncRunner = asyncRunner;\n+    this.depositFetcher = depositFetcher;\n+  }\n+\n+  public synchronized void switchToBlockByBlockMode() {\n+    LOG.debug(\"Switching to blockByBlock mode\");\n+    isBlockByBlockModeOn = true;\n+  }\n+\n+  // inclusive of start block\n+  public synchronized void startSubscription(BigInteger subscriptionStartBlock) {\n+    LOG.debug(\"Starting subscription at block {}\", subscriptionStartBlock);\n+    latestSuccessfullyQueriedBlock = subscriptionStartBlock.subtract(BigInteger.ONE);\n+    newBlockSubscription =\n+        eth1Provider\n+            .getLatestBlockFlowable()\n+            .map(EthBlock.Block::getNumber)\n+            .map(number -> number.subtract(ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n+            .subscribe(this::onNewCanonicalBlockNumber, this::onSubscriptionFailed);\n+  }\n+\n+  public void stopIfSubscribed() {\n+    if (newBlockSubscription != null) {\n+      newBlockSubscription.dispose();\n+    }\n+  }\n+\n+  // Inclusive\n+  public synchronized SafeFuture<Void> fetchDepositsFromGenesisTo(BigInteger toBlockNumber) {\n+    return depositFetcher.fetchDepositsInRange(BigInteger.ZERO, toBlockNumber);\n+  }\n+\n+  private synchronized void onSubscriptionFailed(Throwable err) {\n+    Disposable subscription = newBlockSubscription;\n+    if (subscription != null) {\n+      subscription.dispose();\n+    }\n+    LOG.warn(\"New block subscription failed, retrying.\", err);\n+    asyncRunner\n+        .getDelayedFuture(Constants.ETH1_SUBSCRIPTION_RETRY_TIMEOUT, TimeUnit.SECONDS)\n+        .finish(\n+            () -> startSubscription(latestSuccessfullyQueriedBlock),\n+            (error) ->\n+                LOG.warn(\n+                    \"Unable to subscribe to the Eth1Node. Node won't \"\n+                        + \"have access to new deposits after genesis.\",\n+                    error));\n+  }\n+\n+  private synchronized void onNewCanonicalBlockNumber(BigInteger latestCanonicalBlockNumber) {\n+    if (latestCanonicalBlockNumber.compareTo(this.latestCanonicalBlockNumber) <= 0) {\n+      return;\n+    }\n+    this.latestCanonicalBlockNumber = latestCanonicalBlockNumber;\n+    fetchLatestSubscriptionDeposits();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDeposits() {\n+    if (isBlockByBlockModeOn) {\n+      fetchLatestDepositsOneBlockAtATime();\n+    } else fetchLatestSubscriptionDepositsOverRange();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDepositsOverRange() {\n+    final BigInteger toBlock;\n+    final BigInteger fromBlock;\n+\n+    if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+      return;\n+    }\n+    active = true;\n+\n+    fromBlock = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    toBlock = latestCanonicalBlockNumber;\n+\n+    depositFetcher\n+        .fetchDepositsInRange(fromBlock, toBlock)\n+        .finish(\n+            __ -> onSubscriptionDepositRequestSuccessful(toBlock),\n+            (err) -> onSubscriptionDepositRequestFailed(err, fromBlock, toBlock));\n+  }\n+\n+  private synchronized void fetchLatestDepositsOneBlockAtATime() {\n+    final BigInteger nextBlockNumber;\n+\n+    synchronized (DepositProcessingController.this) {\n+      if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+        return;\n+      }\n+      active = true;\n+\n+      nextBlockNumber = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    }\n+\n+    depositFetcher\n+        .fetchDepositsInRange(nextBlockNumber, nextBlockNumber)\n+        .thenCompose(\n+            __ ->\n+                eth1Provider.getGuaranteedEth1BlockFuture(\n+                    UnsignedLong.valueOf(nextBlockNumber), asyncRunner))\n+        .thenAccept(\n+            block -> {\n+              final BigInteger blockNumber = block.getNumber();\n+              LOG.trace(\"Successfully fetched block {} for min genesis checking\", blockNumber);\n+              LOG.trace(\n+                  \"Seconds until min genesis block {}\",\n+                  Constants.MIN_GENESIS_TIME.minus(\n+                      calculateCandidateGenesisTimestamp(block.getTimestamp())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxMzE3NQ=="}, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzg2NTczOnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDoyNTozOFrOFyCeMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1NzozNVrOFyf4tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxMzYxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOG.debug(\"Switching back to fetching deposits by range\");\n          \n          \n            \n                            LOG.debug(\"Minimum genesis time reached, switching back to fetching deposits by range\");", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388013619", "createdAt": "2020-03-05T00:25:38Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.calculateCandidateGenesisTimestamp;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositFetcher depositFetcher;\n+\n+  private Disposable newBlockSubscription;\n+  private volatile boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private volatile boolean isBlockByBlockModeOn = false;\n+\n+  private BigInteger latestSuccessfullyQueriedBlock = BigInteger.ZERO;\n+  private BigInteger latestCanonicalBlockNumber = BigInteger.ZERO;\n+\n+  public DepositProcessingController(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      AsyncRunner asyncRunner,\n+      DepositFetcher depositFetcher) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.asyncRunner = asyncRunner;\n+    this.depositFetcher = depositFetcher;\n+  }\n+\n+  public synchronized void switchToBlockByBlockMode() {\n+    LOG.debug(\"Switching to blockByBlock mode\");\n+    isBlockByBlockModeOn = true;\n+  }\n+\n+  // inclusive of start block\n+  public synchronized void startSubscription(BigInteger subscriptionStartBlock) {\n+    LOG.debug(\"Starting subscription at block {}\", subscriptionStartBlock);\n+    latestSuccessfullyQueriedBlock = subscriptionStartBlock.subtract(BigInteger.ONE);\n+    newBlockSubscription =\n+        eth1Provider\n+            .getLatestBlockFlowable()\n+            .map(EthBlock.Block::getNumber)\n+            .map(number -> number.subtract(ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n+            .subscribe(this::onNewCanonicalBlockNumber, this::onSubscriptionFailed);\n+  }\n+\n+  public void stopIfSubscribed() {\n+    if (newBlockSubscription != null) {\n+      newBlockSubscription.dispose();\n+    }\n+  }\n+\n+  // Inclusive\n+  public synchronized SafeFuture<Void> fetchDepositsFromGenesisTo(BigInteger toBlockNumber) {\n+    return depositFetcher.fetchDepositsInRange(BigInteger.ZERO, toBlockNumber);\n+  }\n+\n+  private synchronized void onSubscriptionFailed(Throwable err) {\n+    Disposable subscription = newBlockSubscription;\n+    if (subscription != null) {\n+      subscription.dispose();\n+    }\n+    LOG.warn(\"New block subscription failed, retrying.\", err);\n+    asyncRunner\n+        .getDelayedFuture(Constants.ETH1_SUBSCRIPTION_RETRY_TIMEOUT, TimeUnit.SECONDS)\n+        .finish(\n+            () -> startSubscription(latestSuccessfullyQueriedBlock),\n+            (error) ->\n+                LOG.warn(\n+                    \"Unable to subscribe to the Eth1Node. Node won't \"\n+                        + \"have access to new deposits after genesis.\",\n+                    error));\n+  }\n+\n+  private synchronized void onNewCanonicalBlockNumber(BigInteger latestCanonicalBlockNumber) {\n+    if (latestCanonicalBlockNumber.compareTo(this.latestCanonicalBlockNumber) <= 0) {\n+      return;\n+    }\n+    this.latestCanonicalBlockNumber = latestCanonicalBlockNumber;\n+    fetchLatestSubscriptionDeposits();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDeposits() {\n+    if (isBlockByBlockModeOn) {\n+      fetchLatestDepositsOneBlockAtATime();\n+    } else fetchLatestSubscriptionDepositsOverRange();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDepositsOverRange() {\n+    final BigInteger toBlock;\n+    final BigInteger fromBlock;\n+\n+    if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+      return;\n+    }\n+    active = true;\n+\n+    fromBlock = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    toBlock = latestCanonicalBlockNumber;\n+\n+    depositFetcher\n+        .fetchDepositsInRange(fromBlock, toBlock)\n+        .finish(\n+            __ -> onSubscriptionDepositRequestSuccessful(toBlock),\n+            (err) -> onSubscriptionDepositRequestFailed(err, fromBlock, toBlock));\n+  }\n+\n+  private synchronized void fetchLatestDepositsOneBlockAtATime() {\n+    final BigInteger nextBlockNumber;\n+\n+    synchronized (DepositProcessingController.this) {\n+      if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+        return;\n+      }\n+      active = true;\n+\n+      nextBlockNumber = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    }\n+\n+    depositFetcher\n+        .fetchDepositsInRange(nextBlockNumber, nextBlockNumber)\n+        .thenCompose(\n+            __ ->\n+                eth1Provider.getGuaranteedEth1BlockFuture(\n+                    UnsignedLong.valueOf(nextBlockNumber), asyncRunner))\n+        .thenAccept(\n+            block -> {\n+              final BigInteger blockNumber = block.getNumber();\n+              LOG.trace(\"Successfully fetched block {} for min genesis checking\", blockNumber);\n+              LOG.trace(\n+                  \"Seconds until min genesis block {}\",\n+                  Constants.MIN_GENESIS_TIME.minus(\n+                      calculateCandidateGenesisTimestamp(block.getTimestamp())));\n+              if (MinimumGenesisTimeBlockFinder.compareBlockTimestampToMinGenesisTime(block) >= 0) {\n+                notifyMinGenesisTimeBlockReached(eth1EventsChannel, block);\n+                isBlockByBlockModeOn = false;\n+                LOG.debug(\"Switching back to fetching deposits by range\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NTU0Mg==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388495542", "createdAt": "2020-03-05T18:57:35Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.calculateCandidateGenesisTimestamp;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositFetcher depositFetcher;\n+\n+  private Disposable newBlockSubscription;\n+  private volatile boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private volatile boolean isBlockByBlockModeOn = false;\n+\n+  private BigInteger latestSuccessfullyQueriedBlock = BigInteger.ZERO;\n+  private BigInteger latestCanonicalBlockNumber = BigInteger.ZERO;\n+\n+  public DepositProcessingController(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      AsyncRunner asyncRunner,\n+      DepositFetcher depositFetcher) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.asyncRunner = asyncRunner;\n+    this.depositFetcher = depositFetcher;\n+  }\n+\n+  public synchronized void switchToBlockByBlockMode() {\n+    LOG.debug(\"Switching to blockByBlock mode\");\n+    isBlockByBlockModeOn = true;\n+  }\n+\n+  // inclusive of start block\n+  public synchronized void startSubscription(BigInteger subscriptionStartBlock) {\n+    LOG.debug(\"Starting subscription at block {}\", subscriptionStartBlock);\n+    latestSuccessfullyQueriedBlock = subscriptionStartBlock.subtract(BigInteger.ONE);\n+    newBlockSubscription =\n+        eth1Provider\n+            .getLatestBlockFlowable()\n+            .map(EthBlock.Block::getNumber)\n+            .map(number -> number.subtract(ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n+            .subscribe(this::onNewCanonicalBlockNumber, this::onSubscriptionFailed);\n+  }\n+\n+  public void stopIfSubscribed() {\n+    if (newBlockSubscription != null) {\n+      newBlockSubscription.dispose();\n+    }\n+  }\n+\n+  // Inclusive\n+  public synchronized SafeFuture<Void> fetchDepositsFromGenesisTo(BigInteger toBlockNumber) {\n+    return depositFetcher.fetchDepositsInRange(BigInteger.ZERO, toBlockNumber);\n+  }\n+\n+  private synchronized void onSubscriptionFailed(Throwable err) {\n+    Disposable subscription = newBlockSubscription;\n+    if (subscription != null) {\n+      subscription.dispose();\n+    }\n+    LOG.warn(\"New block subscription failed, retrying.\", err);\n+    asyncRunner\n+        .getDelayedFuture(Constants.ETH1_SUBSCRIPTION_RETRY_TIMEOUT, TimeUnit.SECONDS)\n+        .finish(\n+            () -> startSubscription(latestSuccessfullyQueriedBlock),\n+            (error) ->\n+                LOG.warn(\n+                    \"Unable to subscribe to the Eth1Node. Node won't \"\n+                        + \"have access to new deposits after genesis.\",\n+                    error));\n+  }\n+\n+  private synchronized void onNewCanonicalBlockNumber(BigInteger latestCanonicalBlockNumber) {\n+    if (latestCanonicalBlockNumber.compareTo(this.latestCanonicalBlockNumber) <= 0) {\n+      return;\n+    }\n+    this.latestCanonicalBlockNumber = latestCanonicalBlockNumber;\n+    fetchLatestSubscriptionDeposits();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDeposits() {\n+    if (isBlockByBlockModeOn) {\n+      fetchLatestDepositsOneBlockAtATime();\n+    } else fetchLatestSubscriptionDepositsOverRange();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDepositsOverRange() {\n+    final BigInteger toBlock;\n+    final BigInteger fromBlock;\n+\n+    if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+      return;\n+    }\n+    active = true;\n+\n+    fromBlock = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    toBlock = latestCanonicalBlockNumber;\n+\n+    depositFetcher\n+        .fetchDepositsInRange(fromBlock, toBlock)\n+        .finish(\n+            __ -> onSubscriptionDepositRequestSuccessful(toBlock),\n+            (err) -> onSubscriptionDepositRequestFailed(err, fromBlock, toBlock));\n+  }\n+\n+  private synchronized void fetchLatestDepositsOneBlockAtATime() {\n+    final BigInteger nextBlockNumber;\n+\n+    synchronized (DepositProcessingController.this) {\n+      if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+        return;\n+      }\n+      active = true;\n+\n+      nextBlockNumber = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    }\n+\n+    depositFetcher\n+        .fetchDepositsInRange(nextBlockNumber, nextBlockNumber)\n+        .thenCompose(\n+            __ ->\n+                eth1Provider.getGuaranteedEth1BlockFuture(\n+                    UnsignedLong.valueOf(nextBlockNumber), asyncRunner))\n+        .thenAccept(\n+            block -> {\n+              final BigInteger blockNumber = block.getNumber();\n+              LOG.trace(\"Successfully fetched block {} for min genesis checking\", blockNumber);\n+              LOG.trace(\n+                  \"Seconds until min genesis block {}\",\n+                  Constants.MIN_GENESIS_TIME.minus(\n+                      calculateCandidateGenesisTimestamp(block.getTimestamp())));\n+              if (MinimumGenesisTimeBlockFinder.compareBlockTimestampToMinGenesisTime(block) >= 0) {\n+                notifyMinGenesisTimeBlockReached(eth1EventsChannel, block);\n+                isBlockByBlockModeOn = false;\n+                LOG.debug(\"Switching back to fetching deposits by range\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxMzYxOQ=="}, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzg2Nzk1OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDoyNjo0NlrOFyCfew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODo1OTo1OFrOFyf-dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxMzk0Nw==", "bodyText": "nit: We're not using a subscription to get deposits anymore so these onSubscription* methods should just be onDepositRequestSuccessful etc.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388013947", "createdAt": "2020-03-05T00:26:46Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.calculateCandidateGenesisTimestamp;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositFetcher depositFetcher;\n+\n+  private Disposable newBlockSubscription;\n+  private volatile boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private volatile boolean isBlockByBlockModeOn = false;\n+\n+  private BigInteger latestSuccessfullyQueriedBlock = BigInteger.ZERO;\n+  private BigInteger latestCanonicalBlockNumber = BigInteger.ZERO;\n+\n+  public DepositProcessingController(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      AsyncRunner asyncRunner,\n+      DepositFetcher depositFetcher) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.asyncRunner = asyncRunner;\n+    this.depositFetcher = depositFetcher;\n+  }\n+\n+  public synchronized void switchToBlockByBlockMode() {\n+    LOG.debug(\"Switching to blockByBlock mode\");\n+    isBlockByBlockModeOn = true;\n+  }\n+\n+  // inclusive of start block\n+  public synchronized void startSubscription(BigInteger subscriptionStartBlock) {\n+    LOG.debug(\"Starting subscription at block {}\", subscriptionStartBlock);\n+    latestSuccessfullyQueriedBlock = subscriptionStartBlock.subtract(BigInteger.ONE);\n+    newBlockSubscription =\n+        eth1Provider\n+            .getLatestBlockFlowable()\n+            .map(EthBlock.Block::getNumber)\n+            .map(number -> number.subtract(ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n+            .subscribe(this::onNewCanonicalBlockNumber, this::onSubscriptionFailed);\n+  }\n+\n+  public void stopIfSubscribed() {\n+    if (newBlockSubscription != null) {\n+      newBlockSubscription.dispose();\n+    }\n+  }\n+\n+  // Inclusive\n+  public synchronized SafeFuture<Void> fetchDepositsFromGenesisTo(BigInteger toBlockNumber) {\n+    return depositFetcher.fetchDepositsInRange(BigInteger.ZERO, toBlockNumber);\n+  }\n+\n+  private synchronized void onSubscriptionFailed(Throwable err) {\n+    Disposable subscription = newBlockSubscription;\n+    if (subscription != null) {\n+      subscription.dispose();\n+    }\n+    LOG.warn(\"New block subscription failed, retrying.\", err);\n+    asyncRunner\n+        .getDelayedFuture(Constants.ETH1_SUBSCRIPTION_RETRY_TIMEOUT, TimeUnit.SECONDS)\n+        .finish(\n+            () -> startSubscription(latestSuccessfullyQueriedBlock),\n+            (error) ->\n+                LOG.warn(\n+                    \"Unable to subscribe to the Eth1Node. Node won't \"\n+                        + \"have access to new deposits after genesis.\",\n+                    error));\n+  }\n+\n+  private synchronized void onNewCanonicalBlockNumber(BigInteger latestCanonicalBlockNumber) {\n+    if (latestCanonicalBlockNumber.compareTo(this.latestCanonicalBlockNumber) <= 0) {\n+      return;\n+    }\n+    this.latestCanonicalBlockNumber = latestCanonicalBlockNumber;\n+    fetchLatestSubscriptionDeposits();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDeposits() {\n+    if (isBlockByBlockModeOn) {\n+      fetchLatestDepositsOneBlockAtATime();\n+    } else fetchLatestSubscriptionDepositsOverRange();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDepositsOverRange() {\n+    final BigInteger toBlock;\n+    final BigInteger fromBlock;\n+\n+    if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+      return;\n+    }\n+    active = true;\n+\n+    fromBlock = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    toBlock = latestCanonicalBlockNumber;\n+\n+    depositFetcher\n+        .fetchDepositsInRange(fromBlock, toBlock)\n+        .finish(\n+            __ -> onSubscriptionDepositRequestSuccessful(toBlock),\n+            (err) -> onSubscriptionDepositRequestFailed(err, fromBlock, toBlock));\n+  }\n+\n+  private synchronized void fetchLatestDepositsOneBlockAtATime() {\n+    final BigInteger nextBlockNumber;\n+\n+    synchronized (DepositProcessingController.this) {\n+      if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+        return;\n+      }\n+      active = true;\n+\n+      nextBlockNumber = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    }\n+\n+    depositFetcher\n+        .fetchDepositsInRange(nextBlockNumber, nextBlockNumber)\n+        .thenCompose(\n+            __ ->\n+                eth1Provider.getGuaranteedEth1BlockFuture(\n+                    UnsignedLong.valueOf(nextBlockNumber), asyncRunner))\n+        .thenAccept(\n+            block -> {\n+              final BigInteger blockNumber = block.getNumber();\n+              LOG.trace(\"Successfully fetched block {} for min genesis checking\", blockNumber);\n+              LOG.trace(\n+                  \"Seconds until min genesis block {}\",\n+                  Constants.MIN_GENESIS_TIME.minus(\n+                      calculateCandidateGenesisTimestamp(block.getTimestamp())));\n+              if (MinimumGenesisTimeBlockFinder.compareBlockTimestampToMinGenesisTime(block) >= 0) {\n+                notifyMinGenesisTimeBlockReached(eth1EventsChannel, block);\n+                isBlockByBlockModeOn = false;\n+                LOG.debug(\"Switching back to fetching deposits by range\");\n+              }\n+            })\n+        .finish(\n+            __ -> onSubscriptionDepositRequestSuccessful(nextBlockNumber),\n+            (err) -> onSubscriptionDepositRequestFailed(err, nextBlockNumber));\n+  }\n+\n+  private synchronized void onSubscriptionDepositRequestSuccessful(BigInteger requestToBlock) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NzAxMw==", "bodyText": "The request methods still get run after a block received from the subscription actually. So I'm on the side of keeping them.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388497013", "createdAt": "2020-03-05T18:59:58Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.calculateCandidateGenesisTimestamp;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositFetcher depositFetcher;\n+\n+  private Disposable newBlockSubscription;\n+  private volatile boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private volatile boolean isBlockByBlockModeOn = false;\n+\n+  private BigInteger latestSuccessfullyQueriedBlock = BigInteger.ZERO;\n+  private BigInteger latestCanonicalBlockNumber = BigInteger.ZERO;\n+\n+  public DepositProcessingController(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      AsyncRunner asyncRunner,\n+      DepositFetcher depositFetcher) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.asyncRunner = asyncRunner;\n+    this.depositFetcher = depositFetcher;\n+  }\n+\n+  public synchronized void switchToBlockByBlockMode() {\n+    LOG.debug(\"Switching to blockByBlock mode\");\n+    isBlockByBlockModeOn = true;\n+  }\n+\n+  // inclusive of start block\n+  public synchronized void startSubscription(BigInteger subscriptionStartBlock) {\n+    LOG.debug(\"Starting subscription at block {}\", subscriptionStartBlock);\n+    latestSuccessfullyQueriedBlock = subscriptionStartBlock.subtract(BigInteger.ONE);\n+    newBlockSubscription =\n+        eth1Provider\n+            .getLatestBlockFlowable()\n+            .map(EthBlock.Block::getNumber)\n+            .map(number -> number.subtract(ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n+            .subscribe(this::onNewCanonicalBlockNumber, this::onSubscriptionFailed);\n+  }\n+\n+  public void stopIfSubscribed() {\n+    if (newBlockSubscription != null) {\n+      newBlockSubscription.dispose();\n+    }\n+  }\n+\n+  // Inclusive\n+  public synchronized SafeFuture<Void> fetchDepositsFromGenesisTo(BigInteger toBlockNumber) {\n+    return depositFetcher.fetchDepositsInRange(BigInteger.ZERO, toBlockNumber);\n+  }\n+\n+  private synchronized void onSubscriptionFailed(Throwable err) {\n+    Disposable subscription = newBlockSubscription;\n+    if (subscription != null) {\n+      subscription.dispose();\n+    }\n+    LOG.warn(\"New block subscription failed, retrying.\", err);\n+    asyncRunner\n+        .getDelayedFuture(Constants.ETH1_SUBSCRIPTION_RETRY_TIMEOUT, TimeUnit.SECONDS)\n+        .finish(\n+            () -> startSubscription(latestSuccessfullyQueriedBlock),\n+            (error) ->\n+                LOG.warn(\n+                    \"Unable to subscribe to the Eth1Node. Node won't \"\n+                        + \"have access to new deposits after genesis.\",\n+                    error));\n+  }\n+\n+  private synchronized void onNewCanonicalBlockNumber(BigInteger latestCanonicalBlockNumber) {\n+    if (latestCanonicalBlockNumber.compareTo(this.latestCanonicalBlockNumber) <= 0) {\n+      return;\n+    }\n+    this.latestCanonicalBlockNumber = latestCanonicalBlockNumber;\n+    fetchLatestSubscriptionDeposits();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDeposits() {\n+    if (isBlockByBlockModeOn) {\n+      fetchLatestDepositsOneBlockAtATime();\n+    } else fetchLatestSubscriptionDepositsOverRange();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDepositsOverRange() {\n+    final BigInteger toBlock;\n+    final BigInteger fromBlock;\n+\n+    if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+      return;\n+    }\n+    active = true;\n+\n+    fromBlock = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    toBlock = latestCanonicalBlockNumber;\n+\n+    depositFetcher\n+        .fetchDepositsInRange(fromBlock, toBlock)\n+        .finish(\n+            __ -> onSubscriptionDepositRequestSuccessful(toBlock),\n+            (err) -> onSubscriptionDepositRequestFailed(err, fromBlock, toBlock));\n+  }\n+\n+  private synchronized void fetchLatestDepositsOneBlockAtATime() {\n+    final BigInteger nextBlockNumber;\n+\n+    synchronized (DepositProcessingController.this) {\n+      if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+        return;\n+      }\n+      active = true;\n+\n+      nextBlockNumber = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    }\n+\n+    depositFetcher\n+        .fetchDepositsInRange(nextBlockNumber, nextBlockNumber)\n+        .thenCompose(\n+            __ ->\n+                eth1Provider.getGuaranteedEth1BlockFuture(\n+                    UnsignedLong.valueOf(nextBlockNumber), asyncRunner))\n+        .thenAccept(\n+            block -> {\n+              final BigInteger blockNumber = block.getNumber();\n+              LOG.trace(\"Successfully fetched block {} for min genesis checking\", blockNumber);\n+              LOG.trace(\n+                  \"Seconds until min genesis block {}\",\n+                  Constants.MIN_GENESIS_TIME.minus(\n+                      calculateCandidateGenesisTimestamp(block.getTimestamp())));\n+              if (MinimumGenesisTimeBlockFinder.compareBlockTimestampToMinGenesisTime(block) >= 0) {\n+                notifyMinGenesisTimeBlockReached(eth1EventsChannel, block);\n+                isBlockByBlockModeOn = false;\n+                LOG.debug(\"Switching back to fetching deposits by range\");\n+              }\n+            })\n+        .finish(\n+            __ -> onSubscriptionDepositRequestSuccessful(nextBlockNumber),\n+            (err) -> onSubscriptionDepositRequestFailed(err, nextBlockNumber));\n+  }\n+\n+  private synchronized void onSubscriptionDepositRequestSuccessful(BigInteger requestToBlock) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxMzk0Nw=="}, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzg2OTU3OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDoyNzo0MVrOFyCgdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMjowMVrOFygCmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNDE5Ng==", "bodyText": "Just the range version here too.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388014196", "createdAt": "2020-03-05T00:27:41Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.calculateCandidateGenesisTimestamp;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositFetcher depositFetcher;\n+\n+  private Disposable newBlockSubscription;\n+  private volatile boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private volatile boolean isBlockByBlockModeOn = false;\n+\n+  private BigInteger latestSuccessfullyQueriedBlock = BigInteger.ZERO;\n+  private BigInteger latestCanonicalBlockNumber = BigInteger.ZERO;\n+\n+  public DepositProcessingController(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      AsyncRunner asyncRunner,\n+      DepositFetcher depositFetcher) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.asyncRunner = asyncRunner;\n+    this.depositFetcher = depositFetcher;\n+  }\n+\n+  public synchronized void switchToBlockByBlockMode() {\n+    LOG.debug(\"Switching to blockByBlock mode\");\n+    isBlockByBlockModeOn = true;\n+  }\n+\n+  // inclusive of start block\n+  public synchronized void startSubscription(BigInteger subscriptionStartBlock) {\n+    LOG.debug(\"Starting subscription at block {}\", subscriptionStartBlock);\n+    latestSuccessfullyQueriedBlock = subscriptionStartBlock.subtract(BigInteger.ONE);\n+    newBlockSubscription =\n+        eth1Provider\n+            .getLatestBlockFlowable()\n+            .map(EthBlock.Block::getNumber)\n+            .map(number -> number.subtract(ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n+            .subscribe(this::onNewCanonicalBlockNumber, this::onSubscriptionFailed);\n+  }\n+\n+  public void stopIfSubscribed() {\n+    if (newBlockSubscription != null) {\n+      newBlockSubscription.dispose();\n+    }\n+  }\n+\n+  // Inclusive\n+  public synchronized SafeFuture<Void> fetchDepositsFromGenesisTo(BigInteger toBlockNumber) {\n+    return depositFetcher.fetchDepositsInRange(BigInteger.ZERO, toBlockNumber);\n+  }\n+\n+  private synchronized void onSubscriptionFailed(Throwable err) {\n+    Disposable subscription = newBlockSubscription;\n+    if (subscription != null) {\n+      subscription.dispose();\n+    }\n+    LOG.warn(\"New block subscription failed, retrying.\", err);\n+    asyncRunner\n+        .getDelayedFuture(Constants.ETH1_SUBSCRIPTION_RETRY_TIMEOUT, TimeUnit.SECONDS)\n+        .finish(\n+            () -> startSubscription(latestSuccessfullyQueriedBlock),\n+            (error) ->\n+                LOG.warn(\n+                    \"Unable to subscribe to the Eth1Node. Node won't \"\n+                        + \"have access to new deposits after genesis.\",\n+                    error));\n+  }\n+\n+  private synchronized void onNewCanonicalBlockNumber(BigInteger latestCanonicalBlockNumber) {\n+    if (latestCanonicalBlockNumber.compareTo(this.latestCanonicalBlockNumber) <= 0) {\n+      return;\n+    }\n+    this.latestCanonicalBlockNumber = latestCanonicalBlockNumber;\n+    fetchLatestSubscriptionDeposits();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDeposits() {\n+    if (isBlockByBlockModeOn) {\n+      fetchLatestDepositsOneBlockAtATime();\n+    } else fetchLatestSubscriptionDepositsOverRange();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDepositsOverRange() {\n+    final BigInteger toBlock;\n+    final BigInteger fromBlock;\n+\n+    if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+      return;\n+    }\n+    active = true;\n+\n+    fromBlock = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    toBlock = latestCanonicalBlockNumber;\n+\n+    depositFetcher\n+        .fetchDepositsInRange(fromBlock, toBlock)\n+        .finish(\n+            __ -> onSubscriptionDepositRequestSuccessful(toBlock),\n+            (err) -> onSubscriptionDepositRequestFailed(err, fromBlock, toBlock));\n+  }\n+\n+  private synchronized void fetchLatestDepositsOneBlockAtATime() {\n+    final BigInteger nextBlockNumber;\n+\n+    synchronized (DepositProcessingController.this) {\n+      if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+        return;\n+      }\n+      active = true;\n+\n+      nextBlockNumber = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    }\n+\n+    depositFetcher\n+        .fetchDepositsInRange(nextBlockNumber, nextBlockNumber)\n+        .thenCompose(\n+            __ ->\n+                eth1Provider.getGuaranteedEth1BlockFuture(\n+                    UnsignedLong.valueOf(nextBlockNumber), asyncRunner))\n+        .thenAccept(\n+            block -> {\n+              final BigInteger blockNumber = block.getNumber();\n+              LOG.trace(\"Successfully fetched block {} for min genesis checking\", blockNumber);\n+              LOG.trace(\n+                  \"Seconds until min genesis block {}\",\n+                  Constants.MIN_GENESIS_TIME.minus(\n+                      calculateCandidateGenesisTimestamp(block.getTimestamp())));\n+              if (MinimumGenesisTimeBlockFinder.compareBlockTimestampToMinGenesisTime(block) >= 0) {\n+                notifyMinGenesisTimeBlockReached(eth1EventsChannel, block);\n+                isBlockByBlockModeOn = false;\n+                LOG.debug(\"Switching back to fetching deposits by range\");\n+              }\n+            })\n+        .finish(\n+            __ -> onSubscriptionDepositRequestSuccessful(nextBlockNumber),\n+            (err) -> onSubscriptionDepositRequestFailed(err, nextBlockNumber));\n+  }\n+\n+  private synchronized void onSubscriptionDepositRequestSuccessful(BigInteger requestToBlock) {\n+    active = false;\n+    latestSuccessfullyQueriedBlock = requestToBlock;\n+\n+    if (latestCanonicalBlockNumber.compareTo(latestSuccessfullyQueriedBlock) > 0) {\n+      fetchLatestSubscriptionDeposits();\n+    }\n+  }\n+\n+  private synchronized void onSubscriptionDepositRequestFailed(\n+      Throwable err, BigInteger fromBlock) {\n+    onSubscriptionDepositRequestFailed(err, fromBlock, fromBlock);\n+  }\n+\n+  private synchronized void onSubscriptionDepositRequestFailed(\n+      Throwable err, BigInteger fromBlock, BigInteger toBlock) {\n+    active = false;\n+\n+    if (!fromBlock.equals(toBlock)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5ODA3NA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388498074", "createdAt": "2020-03-05T19:02:01Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.calculateCandidateGenesisTimestamp;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositFetcher depositFetcher;\n+\n+  private Disposable newBlockSubscription;\n+  private volatile boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private volatile boolean isBlockByBlockModeOn = false;\n+\n+  private BigInteger latestSuccessfullyQueriedBlock = BigInteger.ZERO;\n+  private BigInteger latestCanonicalBlockNumber = BigInteger.ZERO;\n+\n+  public DepositProcessingController(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      AsyncRunner asyncRunner,\n+      DepositFetcher depositFetcher) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.asyncRunner = asyncRunner;\n+    this.depositFetcher = depositFetcher;\n+  }\n+\n+  public synchronized void switchToBlockByBlockMode() {\n+    LOG.debug(\"Switching to blockByBlock mode\");\n+    isBlockByBlockModeOn = true;\n+  }\n+\n+  // inclusive of start block\n+  public synchronized void startSubscription(BigInteger subscriptionStartBlock) {\n+    LOG.debug(\"Starting subscription at block {}\", subscriptionStartBlock);\n+    latestSuccessfullyQueriedBlock = subscriptionStartBlock.subtract(BigInteger.ONE);\n+    newBlockSubscription =\n+        eth1Provider\n+            .getLatestBlockFlowable()\n+            .map(EthBlock.Block::getNumber)\n+            .map(number -> number.subtract(ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n+            .subscribe(this::onNewCanonicalBlockNumber, this::onSubscriptionFailed);\n+  }\n+\n+  public void stopIfSubscribed() {\n+    if (newBlockSubscription != null) {\n+      newBlockSubscription.dispose();\n+    }\n+  }\n+\n+  // Inclusive\n+  public synchronized SafeFuture<Void> fetchDepositsFromGenesisTo(BigInteger toBlockNumber) {\n+    return depositFetcher.fetchDepositsInRange(BigInteger.ZERO, toBlockNumber);\n+  }\n+\n+  private synchronized void onSubscriptionFailed(Throwable err) {\n+    Disposable subscription = newBlockSubscription;\n+    if (subscription != null) {\n+      subscription.dispose();\n+    }\n+    LOG.warn(\"New block subscription failed, retrying.\", err);\n+    asyncRunner\n+        .getDelayedFuture(Constants.ETH1_SUBSCRIPTION_RETRY_TIMEOUT, TimeUnit.SECONDS)\n+        .finish(\n+            () -> startSubscription(latestSuccessfullyQueriedBlock),\n+            (error) ->\n+                LOG.warn(\n+                    \"Unable to subscribe to the Eth1Node. Node won't \"\n+                        + \"have access to new deposits after genesis.\",\n+                    error));\n+  }\n+\n+  private synchronized void onNewCanonicalBlockNumber(BigInteger latestCanonicalBlockNumber) {\n+    if (latestCanonicalBlockNumber.compareTo(this.latestCanonicalBlockNumber) <= 0) {\n+      return;\n+    }\n+    this.latestCanonicalBlockNumber = latestCanonicalBlockNumber;\n+    fetchLatestSubscriptionDeposits();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDeposits() {\n+    if (isBlockByBlockModeOn) {\n+      fetchLatestDepositsOneBlockAtATime();\n+    } else fetchLatestSubscriptionDepositsOverRange();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDepositsOverRange() {\n+    final BigInteger toBlock;\n+    final BigInteger fromBlock;\n+\n+    if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+      return;\n+    }\n+    active = true;\n+\n+    fromBlock = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    toBlock = latestCanonicalBlockNumber;\n+\n+    depositFetcher\n+        .fetchDepositsInRange(fromBlock, toBlock)\n+        .finish(\n+            __ -> onSubscriptionDepositRequestSuccessful(toBlock),\n+            (err) -> onSubscriptionDepositRequestFailed(err, fromBlock, toBlock));\n+  }\n+\n+  private synchronized void fetchLatestDepositsOneBlockAtATime() {\n+    final BigInteger nextBlockNumber;\n+\n+    synchronized (DepositProcessingController.this) {\n+      if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+        return;\n+      }\n+      active = true;\n+\n+      nextBlockNumber = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    }\n+\n+    depositFetcher\n+        .fetchDepositsInRange(nextBlockNumber, nextBlockNumber)\n+        .thenCompose(\n+            __ ->\n+                eth1Provider.getGuaranteedEth1BlockFuture(\n+                    UnsignedLong.valueOf(nextBlockNumber), asyncRunner))\n+        .thenAccept(\n+            block -> {\n+              final BigInteger blockNumber = block.getNumber();\n+              LOG.trace(\"Successfully fetched block {} for min genesis checking\", blockNumber);\n+              LOG.trace(\n+                  \"Seconds until min genesis block {}\",\n+                  Constants.MIN_GENESIS_TIME.minus(\n+                      calculateCandidateGenesisTimestamp(block.getTimestamp())));\n+              if (MinimumGenesisTimeBlockFinder.compareBlockTimestampToMinGenesisTime(block) >= 0) {\n+                notifyMinGenesisTimeBlockReached(eth1EventsChannel, block);\n+                isBlockByBlockModeOn = false;\n+                LOG.debug(\"Switching back to fetching deposits by range\");\n+              }\n+            })\n+        .finish(\n+            __ -> onSubscriptionDepositRequestSuccessful(nextBlockNumber),\n+            (err) -> onSubscriptionDepositRequestFailed(err, nextBlockNumber));\n+  }\n+\n+  private synchronized void onSubscriptionDepositRequestSuccessful(BigInteger requestToBlock) {\n+    active = false;\n+    latestSuccessfullyQueriedBlock = requestToBlock;\n+\n+    if (latestCanonicalBlockNumber.compareTo(latestSuccessfullyQueriedBlock) > 0) {\n+      fetchLatestSubscriptionDeposits();\n+    }\n+  }\n+\n+  private synchronized void onSubscriptionDepositRequestFailed(\n+      Throwable err, BigInteger fromBlock) {\n+    onSubscriptionDepositRequestFailed(err, fromBlock, fromBlock);\n+  }\n+\n+  private synchronized void onSubscriptionDepositRequestFailed(\n+      Throwable err, BigInteger fromBlock, BigInteger toBlock) {\n+    active = false;\n+\n+    if (!fromBlock.equals(toBlock)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNDE5Ng=="}, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzg3MDI4OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDoyODowNVrOFyCg3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMjozNFrOFygDtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNDMwMw==", "bodyText": "Add \"Retrying\" to the end so the user knows it's being reattempted.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388014303", "createdAt": "2020-03-05T00:28:05Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.calculateCandidateGenesisTimestamp;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositFetcher depositFetcher;\n+\n+  private Disposable newBlockSubscription;\n+  private volatile boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private volatile boolean isBlockByBlockModeOn = false;\n+\n+  private BigInteger latestSuccessfullyQueriedBlock = BigInteger.ZERO;\n+  private BigInteger latestCanonicalBlockNumber = BigInteger.ZERO;\n+\n+  public DepositProcessingController(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      AsyncRunner asyncRunner,\n+      DepositFetcher depositFetcher) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.asyncRunner = asyncRunner;\n+    this.depositFetcher = depositFetcher;\n+  }\n+\n+  public synchronized void switchToBlockByBlockMode() {\n+    LOG.debug(\"Switching to blockByBlock mode\");\n+    isBlockByBlockModeOn = true;\n+  }\n+\n+  // inclusive of start block\n+  public synchronized void startSubscription(BigInteger subscriptionStartBlock) {\n+    LOG.debug(\"Starting subscription at block {}\", subscriptionStartBlock);\n+    latestSuccessfullyQueriedBlock = subscriptionStartBlock.subtract(BigInteger.ONE);\n+    newBlockSubscription =\n+        eth1Provider\n+            .getLatestBlockFlowable()\n+            .map(EthBlock.Block::getNumber)\n+            .map(number -> number.subtract(ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n+            .subscribe(this::onNewCanonicalBlockNumber, this::onSubscriptionFailed);\n+  }\n+\n+  public void stopIfSubscribed() {\n+    if (newBlockSubscription != null) {\n+      newBlockSubscription.dispose();\n+    }\n+  }\n+\n+  // Inclusive\n+  public synchronized SafeFuture<Void> fetchDepositsFromGenesisTo(BigInteger toBlockNumber) {\n+    return depositFetcher.fetchDepositsInRange(BigInteger.ZERO, toBlockNumber);\n+  }\n+\n+  private synchronized void onSubscriptionFailed(Throwable err) {\n+    Disposable subscription = newBlockSubscription;\n+    if (subscription != null) {\n+      subscription.dispose();\n+    }\n+    LOG.warn(\"New block subscription failed, retrying.\", err);\n+    asyncRunner\n+        .getDelayedFuture(Constants.ETH1_SUBSCRIPTION_RETRY_TIMEOUT, TimeUnit.SECONDS)\n+        .finish(\n+            () -> startSubscription(latestSuccessfullyQueriedBlock),\n+            (error) ->\n+                LOG.warn(\n+                    \"Unable to subscribe to the Eth1Node. Node won't \"\n+                        + \"have access to new deposits after genesis.\",\n+                    error));\n+  }\n+\n+  private synchronized void onNewCanonicalBlockNumber(BigInteger latestCanonicalBlockNumber) {\n+    if (latestCanonicalBlockNumber.compareTo(this.latestCanonicalBlockNumber) <= 0) {\n+      return;\n+    }\n+    this.latestCanonicalBlockNumber = latestCanonicalBlockNumber;\n+    fetchLatestSubscriptionDeposits();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDeposits() {\n+    if (isBlockByBlockModeOn) {\n+      fetchLatestDepositsOneBlockAtATime();\n+    } else fetchLatestSubscriptionDepositsOverRange();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDepositsOverRange() {\n+    final BigInteger toBlock;\n+    final BigInteger fromBlock;\n+\n+    if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+      return;\n+    }\n+    active = true;\n+\n+    fromBlock = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    toBlock = latestCanonicalBlockNumber;\n+\n+    depositFetcher\n+        .fetchDepositsInRange(fromBlock, toBlock)\n+        .finish(\n+            __ -> onSubscriptionDepositRequestSuccessful(toBlock),\n+            (err) -> onSubscriptionDepositRequestFailed(err, fromBlock, toBlock));\n+  }\n+\n+  private synchronized void fetchLatestDepositsOneBlockAtATime() {\n+    final BigInteger nextBlockNumber;\n+\n+    synchronized (DepositProcessingController.this) {\n+      if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+        return;\n+      }\n+      active = true;\n+\n+      nextBlockNumber = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    }\n+\n+    depositFetcher\n+        .fetchDepositsInRange(nextBlockNumber, nextBlockNumber)\n+        .thenCompose(\n+            __ ->\n+                eth1Provider.getGuaranteedEth1BlockFuture(\n+                    UnsignedLong.valueOf(nextBlockNumber), asyncRunner))\n+        .thenAccept(\n+            block -> {\n+              final BigInteger blockNumber = block.getNumber();\n+              LOG.trace(\"Successfully fetched block {} for min genesis checking\", blockNumber);\n+              LOG.trace(\n+                  \"Seconds until min genesis block {}\",\n+                  Constants.MIN_GENESIS_TIME.minus(\n+                      calculateCandidateGenesisTimestamp(block.getTimestamp())));\n+              if (MinimumGenesisTimeBlockFinder.compareBlockTimestampToMinGenesisTime(block) >= 0) {\n+                notifyMinGenesisTimeBlockReached(eth1EventsChannel, block);\n+                isBlockByBlockModeOn = false;\n+                LOG.debug(\"Switching back to fetching deposits by range\");\n+              }\n+            })\n+        .finish(\n+            __ -> onSubscriptionDepositRequestSuccessful(nextBlockNumber),\n+            (err) -> onSubscriptionDepositRequestFailed(err, nextBlockNumber));\n+  }\n+\n+  private synchronized void onSubscriptionDepositRequestSuccessful(BigInteger requestToBlock) {\n+    active = false;\n+    latestSuccessfullyQueriedBlock = requestToBlock;\n+\n+    if (latestCanonicalBlockNumber.compareTo(latestSuccessfullyQueriedBlock) > 0) {\n+      fetchLatestSubscriptionDeposits();\n+    }\n+  }\n+\n+  private synchronized void onSubscriptionDepositRequestFailed(\n+      Throwable err, BigInteger fromBlock) {\n+    onSubscriptionDepositRequestFailed(err, fromBlock, fromBlock);\n+  }\n+\n+  private synchronized void onSubscriptionDepositRequestFailed(\n+      Throwable err, BigInteger fromBlock, BigInteger toBlock) {\n+    active = false;\n+\n+    if (!fromBlock.equals(toBlock)) {\n+      LOG.warn(\n+          \"Failed to fetch deposit events for block numbers in the range ({}, {})\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5ODM1OQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388498359", "createdAt": "2020-03-05T19:02:34Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositProcessingController.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.calculateCandidateGenesisTimestamp;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+import static tech.pegasys.artemis.util.config.Constants.ETH1_FOLLOW_DISTANCE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.disposables.Disposable;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProcessingController {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final AsyncRunner asyncRunner;\n+  private final DepositFetcher depositFetcher;\n+\n+  private Disposable newBlockSubscription;\n+  private volatile boolean active = false;\n+\n+  // BlockByBlock mode is used to request deposit events and block information for each block\n+  private volatile boolean isBlockByBlockModeOn = false;\n+\n+  private BigInteger latestSuccessfullyQueriedBlock = BigInteger.ZERO;\n+  private BigInteger latestCanonicalBlockNumber = BigInteger.ZERO;\n+\n+  public DepositProcessingController(\n+      Eth1Provider eth1Provider,\n+      Eth1EventsChannel eth1EventsChannel,\n+      AsyncRunner asyncRunner,\n+      DepositFetcher depositFetcher) {\n+    this.eth1Provider = eth1Provider;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.asyncRunner = asyncRunner;\n+    this.depositFetcher = depositFetcher;\n+  }\n+\n+  public synchronized void switchToBlockByBlockMode() {\n+    LOG.debug(\"Switching to blockByBlock mode\");\n+    isBlockByBlockModeOn = true;\n+  }\n+\n+  // inclusive of start block\n+  public synchronized void startSubscription(BigInteger subscriptionStartBlock) {\n+    LOG.debug(\"Starting subscription at block {}\", subscriptionStartBlock);\n+    latestSuccessfullyQueriedBlock = subscriptionStartBlock.subtract(BigInteger.ONE);\n+    newBlockSubscription =\n+        eth1Provider\n+            .getLatestBlockFlowable()\n+            .map(EthBlock.Block::getNumber)\n+            .map(number -> number.subtract(ETH1_FOLLOW_DISTANCE.bigIntegerValue()))\n+            .subscribe(this::onNewCanonicalBlockNumber, this::onSubscriptionFailed);\n+  }\n+\n+  public void stopIfSubscribed() {\n+    if (newBlockSubscription != null) {\n+      newBlockSubscription.dispose();\n+    }\n+  }\n+\n+  // Inclusive\n+  public synchronized SafeFuture<Void> fetchDepositsFromGenesisTo(BigInteger toBlockNumber) {\n+    return depositFetcher.fetchDepositsInRange(BigInteger.ZERO, toBlockNumber);\n+  }\n+\n+  private synchronized void onSubscriptionFailed(Throwable err) {\n+    Disposable subscription = newBlockSubscription;\n+    if (subscription != null) {\n+      subscription.dispose();\n+    }\n+    LOG.warn(\"New block subscription failed, retrying.\", err);\n+    asyncRunner\n+        .getDelayedFuture(Constants.ETH1_SUBSCRIPTION_RETRY_TIMEOUT, TimeUnit.SECONDS)\n+        .finish(\n+            () -> startSubscription(latestSuccessfullyQueriedBlock),\n+            (error) ->\n+                LOG.warn(\n+                    \"Unable to subscribe to the Eth1Node. Node won't \"\n+                        + \"have access to new deposits after genesis.\",\n+                    error));\n+  }\n+\n+  private synchronized void onNewCanonicalBlockNumber(BigInteger latestCanonicalBlockNumber) {\n+    if (latestCanonicalBlockNumber.compareTo(this.latestCanonicalBlockNumber) <= 0) {\n+      return;\n+    }\n+    this.latestCanonicalBlockNumber = latestCanonicalBlockNumber;\n+    fetchLatestSubscriptionDeposits();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDeposits() {\n+    if (isBlockByBlockModeOn) {\n+      fetchLatestDepositsOneBlockAtATime();\n+    } else fetchLatestSubscriptionDepositsOverRange();\n+  }\n+\n+  private synchronized void fetchLatestSubscriptionDepositsOverRange() {\n+    final BigInteger toBlock;\n+    final BigInteger fromBlock;\n+\n+    if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+      return;\n+    }\n+    active = true;\n+\n+    fromBlock = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    toBlock = latestCanonicalBlockNumber;\n+\n+    depositFetcher\n+        .fetchDepositsInRange(fromBlock, toBlock)\n+        .finish(\n+            __ -> onSubscriptionDepositRequestSuccessful(toBlock),\n+            (err) -> onSubscriptionDepositRequestFailed(err, fromBlock, toBlock));\n+  }\n+\n+  private synchronized void fetchLatestDepositsOneBlockAtATime() {\n+    final BigInteger nextBlockNumber;\n+\n+    synchronized (DepositProcessingController.this) {\n+      if (active || latestCanonicalBlockNumber.equals(latestSuccessfullyQueriedBlock)) {\n+        return;\n+      }\n+      active = true;\n+\n+      nextBlockNumber = latestSuccessfullyQueriedBlock.add(BigInteger.ONE);\n+    }\n+\n+    depositFetcher\n+        .fetchDepositsInRange(nextBlockNumber, nextBlockNumber)\n+        .thenCompose(\n+            __ ->\n+                eth1Provider.getGuaranteedEth1BlockFuture(\n+                    UnsignedLong.valueOf(nextBlockNumber), asyncRunner))\n+        .thenAccept(\n+            block -> {\n+              final BigInteger blockNumber = block.getNumber();\n+              LOG.trace(\"Successfully fetched block {} for min genesis checking\", blockNumber);\n+              LOG.trace(\n+                  \"Seconds until min genesis block {}\",\n+                  Constants.MIN_GENESIS_TIME.minus(\n+                      calculateCandidateGenesisTimestamp(block.getTimestamp())));\n+              if (MinimumGenesisTimeBlockFinder.compareBlockTimestampToMinGenesisTime(block) >= 0) {\n+                notifyMinGenesisTimeBlockReached(eth1EventsChannel, block);\n+                isBlockByBlockModeOn = false;\n+                LOG.debug(\"Switching back to fetching deposits by range\");\n+              }\n+            })\n+        .finish(\n+            __ -> onSubscriptionDepositRequestSuccessful(nextBlockNumber),\n+            (err) -> onSubscriptionDepositRequestFailed(err, nextBlockNumber));\n+  }\n+\n+  private synchronized void onSubscriptionDepositRequestSuccessful(BigInteger requestToBlock) {\n+    active = false;\n+    latestSuccessfullyQueriedBlock = requestToBlock;\n+\n+    if (latestCanonicalBlockNumber.compareTo(latestSuccessfullyQueriedBlock) > 0) {\n+      fetchLatestSubscriptionDeposits();\n+    }\n+  }\n+\n+  private synchronized void onSubscriptionDepositRequestFailed(\n+      Throwable err, BigInteger fromBlock) {\n+    onSubscriptionDepositRequestFailed(err, fromBlock, fromBlock);\n+  }\n+\n+  private synchronized void onSubscriptionDepositRequestFailed(\n+      Throwable err, BigInteger fromBlock, BigInteger toBlock) {\n+    active = false;\n+\n+    if (!fromBlock.equals(toBlock)) {\n+      LOG.warn(\n+          \"Failed to fetch deposit events for block numbers in the range ({}, {})\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNDMwMw=="}, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzg3MzU0OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1DepositManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDozMDowNlrOFyCizw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowMzoyMFrOFygFOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNDc5OQ==", "bodyText": "If we're not able to retry this at all, it probably should be a fatal level.  The program is no longer able to function as it should and needs to be restarted.  Definitely at least error level.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388014799", "createdAt": "2020-03-05T00:30:06Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1DepositManager.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.isBlockAfterMinGenesis;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class Eth1DepositManager {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final AsyncRunner asyncRunner;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositProcessingController depositProcessingController;\n+  private final MinimumGenesisTimeBlockFinder minimumGenesisTimeBlockFinder;\n+\n+  public Eth1DepositManager(\n+      Eth1Provider eth1Provider,\n+      AsyncRunner asyncRunner,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositProcessingController depositProcessingController,\n+      MinimumGenesisTimeBlockFinder minimumGenesisTimeBlockFinder) {\n+    this.eth1Provider = eth1Provider;\n+    this.asyncRunner = asyncRunner;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositProcessingController = depositProcessingController;\n+    this.minimumGenesisTimeBlockFinder = minimumGenesisTimeBlockFinder;\n+  }\n+\n+  public void start() {\n+    getHead()\n+        .thenCompose(\n+            headBlock -> {\n+              if (isBlockAfterMinGenesis(headBlock)) {\n+                return headAfterMinGenesisMode(headBlock);\n+              } else {\n+                return headBeforeMinGenesisMode(headBlock);\n+              }\n+            })\n+        .finish(\n+            () -> LOG.info(\"Eth1DepositsManager successfully ran startup sequence.\"),\n+            (err) -> LOG.warn(\"Eth1DepositsManager unable to run startup sequence.\", err));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5ODc0NA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388498744", "createdAt": "2020-03-05T19:03:20Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/Eth1DepositManager.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.isBlockAfterMinGenesis;\n+import static tech.pegasys.artemis.pow.MinimumGenesisTimeBlockFinder.notifyMinGenesisTimeBlockReached;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.pow.api.Eth1EventsChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class Eth1DepositManager {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+  private final AsyncRunner asyncRunner;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private final DepositProcessingController depositProcessingController;\n+  private final MinimumGenesisTimeBlockFinder minimumGenesisTimeBlockFinder;\n+\n+  public Eth1DepositManager(\n+      Eth1Provider eth1Provider,\n+      AsyncRunner asyncRunner,\n+      Eth1EventsChannel eth1EventsChannel,\n+      DepositProcessingController depositProcessingController,\n+      MinimumGenesisTimeBlockFinder minimumGenesisTimeBlockFinder) {\n+    this.eth1Provider = eth1Provider;\n+    this.asyncRunner = asyncRunner;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.depositProcessingController = depositProcessingController;\n+    this.minimumGenesisTimeBlockFinder = minimumGenesisTimeBlockFinder;\n+  }\n+\n+  public void start() {\n+    getHead()\n+        .thenCompose(\n+            headBlock -> {\n+              if (isBlockAfterMinGenesis(headBlock)) {\n+                return headAfterMinGenesisMode(headBlock);\n+              } else {\n+                return headBeforeMinGenesisMode(headBlock);\n+              }\n+            })\n+        .finish(\n+            () -> LOG.info(\"Eth1DepositsManager successfully ran startup sequence.\"),\n+            (err) -> LOG.warn(\"Eth1DepositsManager unable to run startup sequence.\", err));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNDc5OQ=="}, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzg3NzI3OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/Web3jEth1Provider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDozMjowMVrOFyCk2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowOTozMVrOFygTMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNTMyMw==", "bodyText": "Is it possible to pass AsyncRunner into the constructor of this class rather than having to pass it into this method each time?  It should just be an implementation detail of Web3jEth1Provider that it delays retrying.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388015323", "createdAt": "2020-03-05T00:32:01Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/Web3jEth1Provider.java", "diffHunk": "@@ -55,6 +58,34 @@ public Web3jEth1Provider(Web3j web3j) {\n         .thenApply(EthBlock::getBlock);\n   }\n \n+  @Override\n+  public SafeFuture<EthBlock.Block> getGuaranteedEth1BlockFuture(\n+      String blockHash, AsyncRunner asyncRunner) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMjMyMA==", "bodyText": "Makes total sense.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388502320", "createdAt": "2020-03-05T19:09:31Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/Web3jEth1Provider.java", "diffHunk": "@@ -55,6 +58,34 @@ public Web3jEth1Provider(Web3j web3j) {\n         .thenApply(EthBlock::getBlock);\n   }\n \n+  @Override\n+  public SafeFuture<EthBlock.Block> getGuaranteedEth1BlockFuture(\n+      String blockHash, AsyncRunner asyncRunner) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNTMyMw=="}, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzg4MzkwOnYy", "diffSide": "RIGHT", "path": "pow/src/test/java/tech/pegasys/artemis/pow/MinimumGenesisTimeBlockFinderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDozNToxMlrOFyCoqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToxNzo1NVrOFygm9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNjI5Ng==", "bodyText": "Can you add a @TearDown to reset Constants to the minimal config again so other tests don't get caught out please.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388016296", "createdAt": "2020-03-05T00:35:12Z", "author": {"login": "ajsutton"}, "path": "pow/src/test/java/tech/pegasys/artemis/pow/MinimumGenesisTimeBlockFinderTest.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.math.BigInteger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class MinimumGenesisTimeBlockFinderTest {\n+\n+  private Eth1Provider eth1Provider;\n+\n+  private MinimumGenesisTimeBlockFinder minimumGenesisTimeBlockFinder;\n+  //  private PublishSubject<EthBlock.Block> blockPublisher;\n+\n+  @BeforeEach\n+  void setUp() {\n+    eth1Provider = mock(Eth1Provider.class);\n+\n+    minimumGenesisTimeBlockFinder = new MinimumGenesisTimeBlockFinder(eth1Provider);\n+\n+    //    blockPublisher = mockFlowablePublisher();\n+\n+    Constants.MIN_GENESIS_DELAY = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwNzM4MA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388507380", "createdAt": "2020-03-05T19:17:55Z", "author": {"login": "cemozerr"}, "path": "pow/src/test/java/tech/pegasys/artemis/pow/MinimumGenesisTimeBlockFinderTest.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.math.BigInteger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class MinimumGenesisTimeBlockFinderTest {\n+\n+  private Eth1Provider eth1Provider;\n+\n+  private MinimumGenesisTimeBlockFinder minimumGenesisTimeBlockFinder;\n+  //  private PublishSubject<EthBlock.Block> blockPublisher;\n+\n+  @BeforeEach\n+  void setUp() {\n+    eth1Provider = mock(Eth1Provider.class);\n+\n+    minimumGenesisTimeBlockFinder = new MinimumGenesisTimeBlockFinder(eth1Provider);\n+\n+    //    blockPublisher = mockFlowablePublisher();\n+\n+    Constants.MIN_GENESIS_DELAY = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNjI5Ng=="}, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzg4NTA3OnYy", "diffSide": "RIGHT", "path": "pow/src/test/java/tech/pegasys/artemis/pow/MinimumGenesisTimeBlockFinderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDozNTozOVrOFyCpPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyNjowNlrOFyg6Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNjQ0Ng==", "bodyText": "Why are these all commented out?", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388016446", "createdAt": "2020-03-05T00:35:39Z", "author": {"login": "ajsutton"}, "path": "pow/src/test/java/tech/pegasys/artemis/pow/MinimumGenesisTimeBlockFinderTest.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.math.BigInteger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class MinimumGenesisTimeBlockFinderTest {\n+\n+  private Eth1Provider eth1Provider;\n+\n+  private MinimumGenesisTimeBlockFinder minimumGenesisTimeBlockFinder;\n+  //  private PublishSubject<EthBlock.Block> blockPublisher;\n+\n+  @BeforeEach\n+  void setUp() {\n+    eth1Provider = mock(Eth1Provider.class);\n+\n+    minimumGenesisTimeBlockFinder = new MinimumGenesisTimeBlockFinder(eth1Provider);\n+\n+    //    blockPublisher = mockFlowablePublisher();\n+\n+    Constants.MIN_GENESIS_DELAY = 1;\n+    // calculateCandidateGenesisTimestamp will return\n+    // blockTime + 2\n+  }\n+\n+  @Test\n+  void minGenesisBlock_belowEstimatedBlock() {\n+    Constants.SECONDS_PER_ETH1_BLOCK = UnsignedLong.valueOf(5);\n+\n+    //    mockLatestCanonicalBlock(1000);\n+    EthBlock.Block estimationBlock = mockBlockForEth1Provider(\"0xbf\", 1000, 1000);\n+\n+    setMinGenesisTime(500);\n+\n+    // 1002 - 502 = 500, 500 / 5 = 100, the estimated genesis block number should be:\n+    // 1000 - 100 = 900\n+\n+    mockBlockForEth1Provider(\"0x11\", 900, 600);\n+\n+    // since the estimated block still had higher timestamp than min genesis, we should explore\n+    // downwards\n+\n+    mockBlockForEth1Provider(\"0x08\", 899, 510);\n+\n+    // since the second requested block still had higher timestamp than min genesis, we should\n+    // explore downwards\n+\n+    mockBlockForEth1Provider(\"0x00\", 898, 490);\n+\n+    // since the last requested block now had lower timestamp than min genesis, we should publish\n+    // the block\n+    // right before this as the first valid block\n+\n+    EthBlock.Block minGenesisTimeBlock =\n+        minimumGenesisTimeBlockFinder.findMinGenesisTimeBlockInHistory(estimationBlock).join();\n+\n+    assertThatIsBlock(minGenesisTimeBlock, \"0x08\", 899, 510);\n+  }\n+\n+  @Test\n+  void minGenesisBlock_AboveEstimatedBlock() {\n+    Constants.SECONDS_PER_ETH1_BLOCK = UnsignedLong.valueOf(5);\n+\n+    //    mockLatestCanonicalBlock(1000);\n+    EthBlock.Block estimationBlock = mockBlockForEth1Provider(\"0xbf\", 1000, 1000);\n+\n+    setMinGenesisTime(500);\n+\n+    // 1002 - 502 = 500, 500 / 5 = 100, the estimated genesis block number should be:\n+    // 1000 - 100 = 900\n+\n+    mockBlockForEth1Provider(\"0x08\", 900, 400);\n+\n+    // since the estimated block still had lower timestamp than min genesis, we should explore\n+    // upwards\n+\n+    mockBlockForEth1Provider(\"0x08\", 901, 450);\n+\n+    // since the second requested block still had lower timestamp than min genesis, we should\n+    // explore upwards\n+\n+    mockBlockForEth1Provider(\"0x08\", 902, 510);\n+\n+    // since the last requested block now had higher timestamp than min genesis, we should publish\n+    // the block\n+\n+    EthBlock.Block minGenesisTimeBlock =\n+        minimumGenesisTimeBlockFinder.findMinGenesisTimeBlockInHistory(estimationBlock).join();\n+\n+    assertThatIsBlock(minGenesisTimeBlock, \"0x08\", 902, 510);\n+  }\n+\n+  @Test\n+  void minGenesisBlock_EstimatedBlockIsTheValidBlock() {\n+    Constants.SECONDS_PER_ETH1_BLOCK = UnsignedLong.valueOf(5);\n+\n+    //    mockLatestCanonicalBlock(1000);\n+    EthBlock.Block estimationBlock = mockBlockForEth1Provider(\"0xbf\", 1000, 1000);\n+\n+    setMinGenesisTime(502);\n+\n+    // 1002 - 502 = 500, 500 / 5 = 100, the estimated genesis block number should be:\n+    // 1000 - 100 = 900\n+\n+    mockBlockForEth1Provider(\"0x08\", 900, 500);\n+\n+    // since the genesis time calculated from the , we should publish the block\n+\n+    EthBlock.Block minGenesisTimeBlock =\n+        minimumGenesisTimeBlockFinder.findMinGenesisTimeBlockInHistory(estimationBlock).join();\n+\n+    assertThatIsBlock(minGenesisTimeBlock, \"0x08\", 900, 500);\n+  }\n+\n+  //  @Test\n+  //  void waitForFirstValidBlock() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMjI1OA==", "bodyText": "They became redundant with the tests written in DepositProcessingControllerTest. I forgot to delete them, they're deleted now.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388512258", "createdAt": "2020-03-05T19:26:06Z", "author": {"login": "cemozerr"}, "path": "pow/src/test/java/tech/pegasys/artemis/pow/MinimumGenesisTimeBlockFinderTest.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.pow;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.math.BigInteger;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class MinimumGenesisTimeBlockFinderTest {\n+\n+  private Eth1Provider eth1Provider;\n+\n+  private MinimumGenesisTimeBlockFinder minimumGenesisTimeBlockFinder;\n+  //  private PublishSubject<EthBlock.Block> blockPublisher;\n+\n+  @BeforeEach\n+  void setUp() {\n+    eth1Provider = mock(Eth1Provider.class);\n+\n+    minimumGenesisTimeBlockFinder = new MinimumGenesisTimeBlockFinder(eth1Provider);\n+\n+    //    blockPublisher = mockFlowablePublisher();\n+\n+    Constants.MIN_GENESIS_DELAY = 1;\n+    // calculateCandidateGenesisTimestamp will return\n+    // blockTime + 2\n+  }\n+\n+  @Test\n+  void minGenesisBlock_belowEstimatedBlock() {\n+    Constants.SECONDS_PER_ETH1_BLOCK = UnsignedLong.valueOf(5);\n+\n+    //    mockLatestCanonicalBlock(1000);\n+    EthBlock.Block estimationBlock = mockBlockForEth1Provider(\"0xbf\", 1000, 1000);\n+\n+    setMinGenesisTime(500);\n+\n+    // 1002 - 502 = 500, 500 / 5 = 100, the estimated genesis block number should be:\n+    // 1000 - 100 = 900\n+\n+    mockBlockForEth1Provider(\"0x11\", 900, 600);\n+\n+    // since the estimated block still had higher timestamp than min genesis, we should explore\n+    // downwards\n+\n+    mockBlockForEth1Provider(\"0x08\", 899, 510);\n+\n+    // since the second requested block still had higher timestamp than min genesis, we should\n+    // explore downwards\n+\n+    mockBlockForEth1Provider(\"0x00\", 898, 490);\n+\n+    // since the last requested block now had lower timestamp than min genesis, we should publish\n+    // the block\n+    // right before this as the first valid block\n+\n+    EthBlock.Block minGenesisTimeBlock =\n+        minimumGenesisTimeBlockFinder.findMinGenesisTimeBlockInHistory(estimationBlock).join();\n+\n+    assertThatIsBlock(minGenesisTimeBlock, \"0x08\", 899, 510);\n+  }\n+\n+  @Test\n+  void minGenesisBlock_AboveEstimatedBlock() {\n+    Constants.SECONDS_PER_ETH1_BLOCK = UnsignedLong.valueOf(5);\n+\n+    //    mockLatestCanonicalBlock(1000);\n+    EthBlock.Block estimationBlock = mockBlockForEth1Provider(\"0xbf\", 1000, 1000);\n+\n+    setMinGenesisTime(500);\n+\n+    // 1002 - 502 = 500, 500 / 5 = 100, the estimated genesis block number should be:\n+    // 1000 - 100 = 900\n+\n+    mockBlockForEth1Provider(\"0x08\", 900, 400);\n+\n+    // since the estimated block still had lower timestamp than min genesis, we should explore\n+    // upwards\n+\n+    mockBlockForEth1Provider(\"0x08\", 901, 450);\n+\n+    // since the second requested block still had lower timestamp than min genesis, we should\n+    // explore upwards\n+\n+    mockBlockForEth1Provider(\"0x08\", 902, 510);\n+\n+    // since the last requested block now had higher timestamp than min genesis, we should publish\n+    // the block\n+\n+    EthBlock.Block minGenesisTimeBlock =\n+        minimumGenesisTimeBlockFinder.findMinGenesisTimeBlockInHistory(estimationBlock).join();\n+\n+    assertThatIsBlock(minGenesisTimeBlock, \"0x08\", 902, 510);\n+  }\n+\n+  @Test\n+  void minGenesisBlock_EstimatedBlockIsTheValidBlock() {\n+    Constants.SECONDS_PER_ETH1_BLOCK = UnsignedLong.valueOf(5);\n+\n+    //    mockLatestCanonicalBlock(1000);\n+    EthBlock.Block estimationBlock = mockBlockForEth1Provider(\"0xbf\", 1000, 1000);\n+\n+    setMinGenesisTime(502);\n+\n+    // 1002 - 502 = 500, 500 / 5 = 100, the estimated genesis block number should be:\n+    // 1000 - 100 = 900\n+\n+    mockBlockForEth1Provider(\"0x08\", 900, 500);\n+\n+    // since the genesis time calculated from the , we should publish the block\n+\n+    EthBlock.Block minGenesisTimeBlock =\n+        minimumGenesisTimeBlockFinder.findMinGenesisTimeBlockInHistory(estimationBlock).join();\n+\n+    assertThatIsBlock(minGenesisTimeBlock, \"0x08\", 900, 500);\n+  }\n+\n+  //  @Test\n+  //  void waitForFirstValidBlock() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNjQ0Ng=="}, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzg4NzcxOnYy", "diffSide": "RIGHT", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwMDozNzowMFrOFyCq3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToyNjo0OVrOFyg7iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNjg2Mg==", "bodyText": "Probably don't need this comment. :). Come to think of it though, we could maybe use a default method on the interface.  Not really sure what EventChannel would think of that but it would probably work.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388016862", "createdAt": "2020-03-05T00:37:00Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java", "diffHunk": "@@ -70,6 +79,10 @@ public synchronized void onFinalizedCheckpoint(FinalizedCheckpointEvent event) {\n     depositNavigableMap.headMap(finalizedState.getEth1_deposit_index()).clear();\n   }\n \n+  // It's sad that we have to do this. Is there any other way?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUxMjY0OQ==", "bodyText": "Haha had forgotten to delete that after our chat. Deleted now.", "url": "https://github.com/ConsenSys/teku/pull/1246#discussion_r388512649", "createdAt": "2020-03-05T19:26:49Z", "author": {"login": "cemozerr"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java", "diffHunk": "@@ -70,6 +79,10 @@ public synchronized void onFinalizedCheckpoint(FinalizedCheckpointEvent event) {\n     depositNavigableMap.headMap(finalizedState.getEth1_deposit_index()).clear();\n   }\n \n+  // It's sad that we have to do this. Is there any other way?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAxNjg2Mg=="}, "originalCommit": {"oid": "39d98ce246a8b1c9dd516ad30481b099ab8d0bb1"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2697, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}