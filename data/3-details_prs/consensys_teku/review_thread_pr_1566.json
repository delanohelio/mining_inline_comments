{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMTU4MDc3", "number": 1566, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0NjozOVrODwObXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1ODowN1rODwggbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODk0NjIyOnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/attestation/AggregatingAttestationPool.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMTo0NjozOVrOGDGy5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwMjoxNzozOVrOGDHSnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMDI0NA==", "bodyText": "Why do you need to do epoch + 1 here?", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r405910244", "createdAt": "2020-04-09T01:46:39Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/attestation/AggregatingAttestationPool.java", "diffHunk": "@@ -73,6 +76,16 @@ public synchronized void remove(final Attestation attestation) {\n   }\n \n   private boolean canBeIncluded(final MatchingDataAttestationGroup group, final UnsignedLong slot) {\n-    return group.getAttestationData().getEarliestSlotForProcessing().compareTo(slot) <= 0;\n+    final AttestationData attestationData = group.getAttestationData();\n+    return attestationData.getEarliestSlotForProcessing().compareTo(slot) <= 0\n+        && isPreviousEpochOrLater(attestationData, slot);\n+  }\n+\n+  private boolean isPreviousEpochOrLater(\n+      final AttestationData attestationData, final UnsignedLong slot) {\n+    return compute_epoch_at_slot(attestationData.getSlot())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acdfede9f45afa8a7f39bad44e6575c27e0315aa"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMTA3NA==", "bodyText": "The previous epoch is allowed, so if epoch of attestation + 1 >= epoch of slot it's ok.  The more intuitive approach would have been if epoch of attestation >= epoch of slot - 1 but then you have to deal with the genesis epoch specially.", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r405911074", "createdAt": "2020-04-09T01:49:50Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/attestation/AggregatingAttestationPool.java", "diffHunk": "@@ -73,6 +76,16 @@ public synchronized void remove(final Attestation attestation) {\n   }\n \n   private boolean canBeIncluded(final MatchingDataAttestationGroup group, final UnsignedLong slot) {\n-    return group.getAttestationData().getEarliestSlotForProcessing().compareTo(slot) <= 0;\n+    final AttestationData attestationData = group.getAttestationData();\n+    return attestationData.getEarliestSlotForProcessing().compareTo(slot) <= 0\n+        && isPreviousEpochOrLater(attestationData, slot);\n+  }\n+\n+  private boolean isPreviousEpochOrLater(\n+      final AttestationData attestationData, final UnsignedLong slot) {\n+    return compute_epoch_at_slot(attestationData.getSlot())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMDI0NA=="}, "originalCommit": {"oid": "acdfede9f45afa8a7f39bad44e6575c27e0315aa"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxODM2NA==", "bodyText": "Makes sense.", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r405918364", "createdAt": "2020-04-09T02:17:39Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/attestation/AggregatingAttestationPool.java", "diffHunk": "@@ -73,6 +76,16 @@ public synchronized void remove(final Attestation attestation) {\n   }\n \n   private boolean canBeIncluded(final MatchingDataAttestationGroup group, final UnsignedLong slot) {\n-    return group.getAttestationData().getEarliestSlotForProcessing().compareTo(slot) <= 0;\n+    final AttestationData attestationData = group.getAttestationData();\n+    return attestationData.getEarliestSlotForProcessing().compareTo(slot) <= 0\n+        && isPreviousEpochOrLater(attestationData, slot);\n+  }\n+\n+  private boolean isPreviousEpochOrLater(\n+      final AttestationData attestationData, final UnsignedLong slot) {\n+    return compute_epoch_at_slot(attestationData.getSlot())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMDI0NA=="}, "originalCommit": {"oid": "acdfede9f45afa8a7f39bad44e6575c27e0315aa"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTI5MTgyOnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/operations/AttestationDataTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNToyMDo1MFrOGDJ9YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDo0MToyMVrOGE0huQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2MjA4MA==", "bodyText": "this says isFalse - so it's not ok? (that's different to what the comment says)", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r405962080", "createdAt": "2020-04-09T05:20:50Z", "author": {"login": "macfarla"}, "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/operations/AttestationDataTest.java", "diffHunk": "@@ -61,12 +64,83 @@ void shouldNotBeProcessableBeforeFirstSlotOfTargetEpoch() {\n             UnsignedLong.valueOf(1),\n             UnsignedLong.ZERO,\n             Bytes32.ZERO,\n-            new Checkpoint(UnsignedLong.ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO),\n             target);\n \n     assertThat(data.getEarliestSlotForProcessing()).isEqualTo(target.getEpochStartSlot());\n   }\n \n+  @Test\n+  public void shouldNotBeAbleToIncludeInBlockBeforeSlotAfterCreationSlot() {\n+    final AttestationData data =\n+        new AttestationData(\n+            UnsignedLong.valueOf(60),\n+            UnsignedLong.ZERO,\n+            Bytes32.ZERO,\n+            new Checkpoint(ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO));\n+\n+    assertThat(data.canIncludeInBlockAtSlot(UnsignedLong.valueOf(60))).isFalse();\n+    assertThat(data.canIncludeInBlockAtSlot(UnsignedLong.valueOf(61))).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToIncludeInBlockBeforeFirstSlotOfTargetEpoch() {\n+    final Checkpoint target = new Checkpoint(UnsignedLong.valueOf(10), Bytes32.ZERO);\n+    final AttestationData data =\n+        new AttestationData(\n+            target.getEpochStartSlot().minus(ONE),\n+            UnsignedLong.ZERO,\n+            Bytes32.ZERO,\n+            new Checkpoint(ONE, Bytes32.ZERO),\n+            target);\n+\n+    assertThat(data.canIncludeInBlockAtSlot(target.getEpochStartSlot().minus(ONE))).isFalse();\n+    assertThat(data.canIncludeInBlockAtSlot(target.getEpochStartSlot())).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToIncludeInBlockTooFarAfterAttestationSlot() {\n+    final AttestationData data =\n+        new AttestationData(\n+            UnsignedLong.valueOf(60),\n+            UnsignedLong.ZERO,\n+            Bytes32.ZERO,\n+            new Checkpoint(ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO));\n+\n+    final UnsignedLong lastValidSlot = data.getSlot().plus(UnsignedLong.valueOf(SLOTS_PER_EPOCH));\n+    assertThat(data.canIncludeInBlockAtSlot(lastValidSlot)).isTrue();\n+    assertThat(data.canIncludeInBlockAtSlot(lastValidSlot.plus(ONE))).isFalse();\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToIncludeInBlockMoreThanOneEpochLater() {\n+    final UnsignedLong attestationEpoch = UnsignedLong.valueOf(6);\n+    final UnsignedLong nextEpoch = attestationEpoch.plus(ONE);\n+    final UnsignedLong tooLateEpoch = nextEpoch.plus(ONE);\n+    final AttestationData data =\n+        new AttestationData(\n+            compute_start_slot_at_epoch(attestationEpoch).plus(UnsignedLong.valueOf(3)),\n+            UnsignedLong.ZERO,\n+            Bytes32.ZERO,\n+            new Checkpoint(ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO));\n+\n+    // In the attestation epoch, but has to be after the attestation slot\n+    assertThat(data.canIncludeInBlockAtSlot(data.getSlot().plus(ONE))).isTrue();\n+\n+    // Next epoch is ok\n+    assertThat(data.canIncludeInBlockAtSlot(compute_start_slot_at_epoch(nextEpoch))).isTrue();\n+\n+    // Very last slot of next epoch is ok\n+    assertThat(data.canIncludeInBlockAtSlot(compute_start_slot_at_epoch(tooLateEpoch).minus(ONE)))\n+        .isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4454acfffd6875eecf1dea9d79cbe15d21d3ea52"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwODA4OQ==", "bodyText": "Good spot, comment is wrong - while it's allowed in that epoch, it's more than SLOTS_PER_EPOCH since the attestation slot so is not ok.", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r407708089", "createdAt": "2020-04-13T20:41:21Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/operations/AttestationDataTest.java", "diffHunk": "@@ -61,12 +64,83 @@ void shouldNotBeProcessableBeforeFirstSlotOfTargetEpoch() {\n             UnsignedLong.valueOf(1),\n             UnsignedLong.ZERO,\n             Bytes32.ZERO,\n-            new Checkpoint(UnsignedLong.ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO),\n             target);\n \n     assertThat(data.getEarliestSlotForProcessing()).isEqualTo(target.getEpochStartSlot());\n   }\n \n+  @Test\n+  public void shouldNotBeAbleToIncludeInBlockBeforeSlotAfterCreationSlot() {\n+    final AttestationData data =\n+        new AttestationData(\n+            UnsignedLong.valueOf(60),\n+            UnsignedLong.ZERO,\n+            Bytes32.ZERO,\n+            new Checkpoint(ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO));\n+\n+    assertThat(data.canIncludeInBlockAtSlot(UnsignedLong.valueOf(60))).isFalse();\n+    assertThat(data.canIncludeInBlockAtSlot(UnsignedLong.valueOf(61))).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToIncludeInBlockBeforeFirstSlotOfTargetEpoch() {\n+    final Checkpoint target = new Checkpoint(UnsignedLong.valueOf(10), Bytes32.ZERO);\n+    final AttestationData data =\n+        new AttestationData(\n+            target.getEpochStartSlot().minus(ONE),\n+            UnsignedLong.ZERO,\n+            Bytes32.ZERO,\n+            new Checkpoint(ONE, Bytes32.ZERO),\n+            target);\n+\n+    assertThat(data.canIncludeInBlockAtSlot(target.getEpochStartSlot().minus(ONE))).isFalse();\n+    assertThat(data.canIncludeInBlockAtSlot(target.getEpochStartSlot())).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToIncludeInBlockTooFarAfterAttestationSlot() {\n+    final AttestationData data =\n+        new AttestationData(\n+            UnsignedLong.valueOf(60),\n+            UnsignedLong.ZERO,\n+            Bytes32.ZERO,\n+            new Checkpoint(ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO));\n+\n+    final UnsignedLong lastValidSlot = data.getSlot().plus(UnsignedLong.valueOf(SLOTS_PER_EPOCH));\n+    assertThat(data.canIncludeInBlockAtSlot(lastValidSlot)).isTrue();\n+    assertThat(data.canIncludeInBlockAtSlot(lastValidSlot.plus(ONE))).isFalse();\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToIncludeInBlockMoreThanOneEpochLater() {\n+    final UnsignedLong attestationEpoch = UnsignedLong.valueOf(6);\n+    final UnsignedLong nextEpoch = attestationEpoch.plus(ONE);\n+    final UnsignedLong tooLateEpoch = nextEpoch.plus(ONE);\n+    final AttestationData data =\n+        new AttestationData(\n+            compute_start_slot_at_epoch(attestationEpoch).plus(UnsignedLong.valueOf(3)),\n+            UnsignedLong.ZERO,\n+            Bytes32.ZERO,\n+            new Checkpoint(ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO));\n+\n+    // In the attestation epoch, but has to be after the attestation slot\n+    assertThat(data.canIncludeInBlockAtSlot(data.getSlot().plus(ONE))).isTrue();\n+\n+    // Next epoch is ok\n+    assertThat(data.canIncludeInBlockAtSlot(compute_start_slot_at_epoch(nextEpoch))).isTrue();\n+\n+    // Very last slot of next epoch is ok\n+    assertThat(data.canIncludeInBlockAtSlot(compute_start_slot_at_epoch(tooLateEpoch).minus(ONE)))\n+        .isFalse();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2MjA4MA=="}, "originalCommit": {"oid": "4454acfffd6875eecf1dea9d79cbe15d21d3ea52"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTc5OTQzOnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/operations/AttestationData.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoyODoxMVrOGDiW9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTo1ODo1M1rOGE20qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MTg0Ng==", "bodyText": "It seems to me that this check makes the notPriorToPreviousEpoch check redundant. Am I missing an edge case?", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r406361846", "createdAt": "2020-04-09T17:28:11Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/operations/AttestationData.java", "diffHunk": "@@ -141,6 +144,24 @@ public UnsignedLong getEarliestSlotForProcessing() {\n     return max(getSlot().plus(UnsignedLong.ONE), getTarget().getEpochStartSlot());\n   }\n \n+  public boolean canIncludeInBlockAtSlot(final UnsignedLong slot) {\n+    return notPriorToPreviousEpoch(slot)\n+        && notSubmittedTooFarInHistory(slot)\n+        && notSubmittedTooQuickly(slot);\n+  }\n+\n+  public boolean notPriorToPreviousEpoch(final UnsignedLong slot) {\n+    return compute_epoch_at_slot(getSlot()).plus(ONE).compareTo(compute_epoch_at_slot(slot)) >= 0;\n+  }\n+\n+  public boolean notSubmittedTooFarInHistory(final UnsignedLong slot) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4454acfffd6875eecf1dea9d79cbe15d21d3ea52"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwOTE3Nw==", "bodyText": "The spec has:\nassert data.target.epoch in (get_previous_epoch(state), get_current_epoch(state))\nassert data.slot + MIN_ATTESTATION_INCLUSION_DELAY <= state.slot <= data.slot + SLOTS_PER_EPOCH\n\nso this is another issue with missing MIN_ATTESTATION_INCLUSION_DELAY.  You have to include it within SLOTS_PER_EPOCH of when it's first eligible to include, not from the attestation's slot.", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r407709177", "createdAt": "2020-04-13T20:43:26Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/operations/AttestationData.java", "diffHunk": "@@ -141,6 +144,24 @@ public UnsignedLong getEarliestSlotForProcessing() {\n     return max(getSlot().plus(UnsignedLong.ONE), getTarget().getEpochStartSlot());\n   }\n \n+  public boolean canIncludeInBlockAtSlot(final UnsignedLong slot) {\n+    return notPriorToPreviousEpoch(slot)\n+        && notSubmittedTooFarInHistory(slot)\n+        && notSubmittedTooQuickly(slot);\n+  }\n+\n+  public boolean notPriorToPreviousEpoch(final UnsignedLong slot) {\n+    return compute_epoch_at_slot(getSlot()).plus(ONE).compareTo(compute_epoch_at_slot(slot)) >= 0;\n+  }\n+\n+  public boolean notSubmittedTooFarInHistory(final UnsignedLong slot) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MTg0Ng=="}, "originalCommit": {"oid": "4454acfffd6875eecf1dea9d79cbe15d21d3ea52"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwOTk3Mw==", "bodyText": "hmm, stil not entirely sure I'm interpreting that right - this may need coffee...", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r407709973", "createdAt": "2020-04-13T20:44:53Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/operations/AttestationData.java", "diffHunk": "@@ -141,6 +144,24 @@ public UnsignedLong getEarliestSlotForProcessing() {\n     return max(getSlot().plus(UnsignedLong.ONE), getTarget().getEpochStartSlot());\n   }\n \n+  public boolean canIncludeInBlockAtSlot(final UnsignedLong slot) {\n+    return notPriorToPreviousEpoch(slot)\n+        && notSubmittedTooFarInHistory(slot)\n+        && notSubmittedTooQuickly(slot);\n+  }\n+\n+  public boolean notPriorToPreviousEpoch(final UnsignedLong slot) {\n+    return compute_epoch_at_slot(getSlot()).plus(ONE).compareTo(compute_epoch_at_slot(slot)) >= 0;\n+  }\n+\n+  public boolean notSubmittedTooFarInHistory(final UnsignedLong slot) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MTg0Ng=="}, "originalCommit": {"oid": "4454acfffd6875eecf1dea9d79cbe15d21d3ea52"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NTcwNw==", "bodyText": "I'm convinced that the requirement that attestation.slot is within SLOTS_PER_EPOCH of state.slot means that it can't be from before the previous epoch. Combined with the check for the state being at least MIN_ATTESTATION_INCLUSION_DELAY after the attestation slot, it also can't be a future block so winds up having to be either the current or previous epoch.  I've removed the redundant check.", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r407745707", "createdAt": "2020-04-13T21:58:53Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/operations/AttestationData.java", "diffHunk": "@@ -141,6 +144,24 @@ public UnsignedLong getEarliestSlotForProcessing() {\n     return max(getSlot().plus(UnsignedLong.ONE), getTarget().getEpochStartSlot());\n   }\n \n+  public boolean canIncludeInBlockAtSlot(final UnsignedLong slot) {\n+    return notPriorToPreviousEpoch(slot)\n+        && notSubmittedTooFarInHistory(slot)\n+        && notSubmittedTooQuickly(slot);\n+  }\n+\n+  public boolean notPriorToPreviousEpoch(final UnsignedLong slot) {\n+    return compute_epoch_at_slot(getSlot()).plus(ONE).compareTo(compute_epoch_at_slot(slot)) >= 0;\n+  }\n+\n+  public boolean notSubmittedTooFarInHistory(final UnsignedLong slot) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MTg0Ng=="}, "originalCommit": {"oid": "4454acfffd6875eecf1dea9d79cbe15d21d3ea52"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTgyNTcxOnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/operations/AttestationData.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzozNTozM1rOGDim9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTowOToxMFrOGE1a4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NTk0MQ==", "bodyText": "This made me realize that our getEarliestSlotForProcessing() function is wrong. We should be waiting MIN_ATTESTATION_INCLUSION_DELAY slots until we include an attestation in a block not necessarily one slot.", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r406365941", "createdAt": "2020-04-09T17:35:33Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/operations/AttestationData.java", "diffHunk": "@@ -141,6 +144,24 @@ public UnsignedLong getEarliestSlotForProcessing() {\n     return max(getSlot().plus(UnsignedLong.ONE), getTarget().getEpochStartSlot());\n   }\n \n+  public boolean canIncludeInBlockAtSlot(final UnsignedLong slot) {\n+    return notPriorToPreviousEpoch(slot)\n+        && notSubmittedTooFarInHistory(slot)\n+        && notSubmittedTooQuickly(slot);\n+  }\n+\n+  public boolean notPriorToPreviousEpoch(final UnsignedLong slot) {\n+    return compute_epoch_at_slot(getSlot()).plus(ONE).compareTo(compute_epoch_at_slot(slot)) >= 0;\n+  }\n+\n+  public boolean notSubmittedTooFarInHistory(final UnsignedLong slot) {\n+    return slot.compareTo(getSlot().plus(UnsignedLong.valueOf(SLOTS_PER_EPOCH))) <= 0;\n+  }\n+\n+  public boolean notSubmittedTooQuickly(final UnsignedLong slot) {\n+    return getEarliestSlotForProcessing().compareTo(slot) <= 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4454acfffd6875eecf1dea9d79cbe15d21d3ea52"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NjE0NQ==", "bodyText": "That is probably better fixed in another PR though.", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r406366145", "createdAt": "2020-04-09T17:35:59Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/operations/AttestationData.java", "diffHunk": "@@ -141,6 +144,24 @@ public UnsignedLong getEarliestSlotForProcessing() {\n     return max(getSlot().plus(UnsignedLong.ONE), getTarget().getEpochStartSlot());\n   }\n \n+  public boolean canIncludeInBlockAtSlot(final UnsignedLong slot) {\n+    return notPriorToPreviousEpoch(slot)\n+        && notSubmittedTooFarInHistory(slot)\n+        && notSubmittedTooQuickly(slot);\n+  }\n+\n+  public boolean notPriorToPreviousEpoch(final UnsignedLong slot) {\n+    return compute_epoch_at_slot(getSlot()).plus(ONE).compareTo(compute_epoch_at_slot(slot)) >= 0;\n+  }\n+\n+  public boolean notSubmittedTooFarInHistory(final UnsignedLong slot) {\n+    return slot.compareTo(getSlot().plus(UnsignedLong.valueOf(SLOTS_PER_EPOCH))) <= 0;\n+  }\n+\n+  public boolean notSubmittedTooQuickly(final UnsignedLong slot) {\n+    return getEarliestSlotForProcessing().compareTo(slot) <= 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NTk0MQ=="}, "originalCommit": {"oid": "4454acfffd6875eecf1dea9d79cbe15d21d3ea52"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyMjcyMw==", "bodyText": "Interestingly getEarliestSlotForProcessing is correct - fork choice requires only that the attestation be in the past:\n    # Attestations can only affect the fork choice of subsequent slots.\n    # Delay consideration in the fork choice until their slot is in the past.\n    assert get_current_slot(store) >= attestation.data.slot + 1\n\nSo we just need a separate calculation for inclusion in blocks.", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r407722723", "createdAt": "2020-04-13T21:09:10Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/operations/AttestationData.java", "diffHunk": "@@ -141,6 +144,24 @@ public UnsignedLong getEarliestSlotForProcessing() {\n     return max(getSlot().plus(UnsignedLong.ONE), getTarget().getEpochStartSlot());\n   }\n \n+  public boolean canIncludeInBlockAtSlot(final UnsignedLong slot) {\n+    return notPriorToPreviousEpoch(slot)\n+        && notSubmittedTooFarInHistory(slot)\n+        && notSubmittedTooQuickly(slot);\n+  }\n+\n+  public boolean notPriorToPreviousEpoch(final UnsignedLong slot) {\n+    return compute_epoch_at_slot(getSlot()).plus(ONE).compareTo(compute_epoch_at_slot(slot)) >= 0;\n+  }\n+\n+  public boolean notSubmittedTooFarInHistory(final UnsignedLong slot) {\n+    return slot.compareTo(getSlot().plus(UnsignedLong.valueOf(SLOTS_PER_EPOCH))) <= 0;\n+  }\n+\n+  public boolean notSubmittedTooQuickly(final UnsignedLong slot) {\n+    return getEarliestSlotForProcessing().compareTo(slot) <= 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NTk0MQ=="}, "originalCommit": {"oid": "4454acfffd6875eecf1dea9d79cbe15d21d3ea52"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTg4ODYwOnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/operations/AttestationDataTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1Mjo0MFrOGDjNDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1Mjo0MFrOGDjNDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NTY5Mg==", "bodyText": "Due to the MIN_ATTESTATION_INCLUSION_DELAY comment I made above, this line would need to change as well to:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(data.canIncludeInBlockAtSlot(UnsignedLong.valueOf(61))).isTrue();\n          \n          \n            \n                assertThat(data.canIncludeInBlockAtSlot(UnsignedLong.valueOf(60).plus(MIN_ATTESTATION_INCLUSION_DELAY))).isTrue();", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r406375692", "createdAt": "2020-04-09T17:52:40Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/operations/AttestationDataTest.java", "diffHunk": "@@ -61,12 +64,83 @@ void shouldNotBeProcessableBeforeFirstSlotOfTargetEpoch() {\n             UnsignedLong.valueOf(1),\n             UnsignedLong.ZERO,\n             Bytes32.ZERO,\n-            new Checkpoint(UnsignedLong.ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO),\n             target);\n \n     assertThat(data.getEarliestSlotForProcessing()).isEqualTo(target.getEpochStartSlot());\n   }\n \n+  @Test\n+  public void shouldNotBeAbleToIncludeInBlockBeforeSlotAfterCreationSlot() {\n+    final AttestationData data =\n+        new AttestationData(\n+            UnsignedLong.valueOf(60),\n+            UnsignedLong.ZERO,\n+            Bytes32.ZERO,\n+            new Checkpoint(ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO));\n+\n+    assertThat(data.canIncludeInBlockAtSlot(UnsignedLong.valueOf(60))).isFalse();\n+    assertThat(data.canIncludeInBlockAtSlot(UnsignedLong.valueOf(61))).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4454acfffd6875eecf1dea9d79cbe15d21d3ea52"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTkwODMxOnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/operations/AttestationDataTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1ODowN1rOGDjZqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1ODowN1rOGDjZqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODkyMQ==", "bodyText": "I think the changes necessary for the comment I made above will affect this test as well.", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r406378921", "createdAt": "2020-04-09T17:58:07Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/operations/AttestationDataTest.java", "diffHunk": "@@ -61,12 +64,83 @@ void shouldNotBeProcessableBeforeFirstSlotOfTargetEpoch() {\n             UnsignedLong.valueOf(1),\n             UnsignedLong.ZERO,\n             Bytes32.ZERO,\n-            new Checkpoint(UnsignedLong.ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO),\n             target);\n \n     assertThat(data.getEarliestSlotForProcessing()).isEqualTo(target.getEpochStartSlot());\n   }\n \n+  @Test\n+  public void shouldNotBeAbleToIncludeInBlockBeforeSlotAfterCreationSlot() {\n+    final AttestationData data =\n+        new AttestationData(\n+            UnsignedLong.valueOf(60),\n+            UnsignedLong.ZERO,\n+            Bytes32.ZERO,\n+            new Checkpoint(ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO));\n+\n+    assertThat(data.canIncludeInBlockAtSlot(UnsignedLong.valueOf(60))).isFalse();\n+    assertThat(data.canIncludeInBlockAtSlot(UnsignedLong.valueOf(61))).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToIncludeInBlockBeforeFirstSlotOfTargetEpoch() {\n+    final Checkpoint target = new Checkpoint(UnsignedLong.valueOf(10), Bytes32.ZERO);\n+    final AttestationData data =\n+        new AttestationData(\n+            target.getEpochStartSlot().minus(ONE),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4454acfffd6875eecf1dea9d79cbe15d21d3ea52"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1594, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}