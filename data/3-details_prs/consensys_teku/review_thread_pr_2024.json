{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2Mjk3MDEz", "number": 2024, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1MzozMFrOEB7spQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjoyNTo1NFrOEB8KZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYyMTE3OnYy", "diffSide": "LEFT", "path": "events/src/main/java/tech/pegasys/teku/events/DirectEventDeliverer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1MzozMFrOGeFQlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjozMjozOFrOGeGJ0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NjYyOA==", "bodyText": "Looks like deliverToWithResponse no longer sends errors to the exceptionHandler - is that okay?", "url": "https://github.com/ConsenSys/teku/pull/2024#discussion_r434196628", "createdAt": "2020-06-02T21:53:30Z", "author": {"login": "mbaxter"}, "path": "events/src/main/java/tech/pegasys/teku/events/DirectEventDeliverer.java", "diffHunk": "@@ -67,12 +70,10 @@ protected void deliverTo(final T subscriber, final Method method, final Object[]\n       return (SafeFuture<X>) method.invoke(subscriber, args);\n     } catch (IllegalAccessException e) {\n       incrementCounter(failedEventCounter, subscriber, method);\n-      exceptionHandler.handleException(e, subscriber, method, args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecd183ddeb32e70787af25e1efebae0ee5b71ba6"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMTI4MA==", "bodyText": "Yeah that was deliberate - the exception is reported back to the SafeFuture. Previously we were double handling the problem resulting in noisy logs for things that we actually handled cleanly.", "url": "https://github.com/ConsenSys/teku/pull/2024#discussion_r434211280", "createdAt": "2020-06-02T22:32:38Z", "author": {"login": "ajsutton"}, "path": "events/src/main/java/tech/pegasys/teku/events/DirectEventDeliverer.java", "diffHunk": "@@ -67,12 +70,10 @@ protected void deliverTo(final T subscriber, final Method method, final Object[]\n       return (SafeFuture<X>) method.invoke(subscriber, args);\n     } catch (IllegalAccessException e) {\n       incrementCounter(failedEventCounter, subscriber, method);\n-      exceptionHandler.handleException(e, subscriber, method, args);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NjYyOA=="}, "originalCommit": {"oid": "ecd183ddeb32e70787af25e1efebae0ee5b71ba6"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDY5NzM1OnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/duties/AttestationProductionDuty.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjoyNTo1NFrOGeGARg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjozMjowNFrOGeGJCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwODgzOA==", "bodyText": "Do we not want the attestation root here?", "url": "https://github.com/ConsenSys/teku/pull/2024#discussion_r434208838", "createdAt": "2020-06-02T22:25:54Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/duties/AttestationProductionDuty.java", "diffHunk": "@@ -111,21 +112,23 @@ public String describe() {\n                     }));\n   }\n \n-  private SafeFuture<Void> signAttestationsForCommittee(\n+  private SafeFuture<DutyResult> signAttestationsForCommittee(\n       final ForkInfo forkInfo, final Committee validators, final Attestation attestation) {\n-    return validators.forEach(\n-        validator -> signAttestationForValidator(forkInfo, attestation, validator));\n+    return DutyResult.combine(\n+        validators.forEach(\n+            validator -> signAttestationForValidator(forkInfo, attestation, validator)));\n   }\n \n-  private SafeFuture<Void> signAttestationForValidator(\n+  private SafeFuture<DutyResult> signAttestationForValidator(\n       final ForkInfo forkInfo,\n       final Attestation attestation,\n       final ValidatorWithCommitteePosition validator) {\n     return validator\n         .getSigner()\n         .signAttestationData(attestation.getData(), forkInfo)\n         .thenApply(signature -> createSignedAttestation(attestation, validator, signature))\n-        .thenAccept(validatorApiChannel::sendSignedAttestation);\n+        .thenAccept(validatorApiChannel::sendSignedAttestation)\n+        .thenApply(__ -> DutyResult.success(attestation.getData().getBeacon_block_root()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecd183ddeb32e70787af25e1efebae0ee5b71ba6"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMTA4MQ==", "bodyText": "The logs (when they used to work) have always shown the block the attestation is attesting to.  That' actually a lot more useful because what you're most interested in is whether the attestation will wind up being on the correct chain and thus get rewarded.", "url": "https://github.com/ConsenSys/teku/pull/2024#discussion_r434211081", "createdAt": "2020-06-02T22:32:04Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/duties/AttestationProductionDuty.java", "diffHunk": "@@ -111,21 +112,23 @@ public String describe() {\n                     }));\n   }\n \n-  private SafeFuture<Void> signAttestationsForCommittee(\n+  private SafeFuture<DutyResult> signAttestationsForCommittee(\n       final ForkInfo forkInfo, final Committee validators, final Attestation attestation) {\n-    return validators.forEach(\n-        validator -> signAttestationForValidator(forkInfo, attestation, validator));\n+    return DutyResult.combine(\n+        validators.forEach(\n+            validator -> signAttestationForValidator(forkInfo, attestation, validator)));\n   }\n \n-  private SafeFuture<Void> signAttestationForValidator(\n+  private SafeFuture<DutyResult> signAttestationForValidator(\n       final ForkInfo forkInfo,\n       final Attestation attestation,\n       final ValidatorWithCommitteePosition validator) {\n     return validator\n         .getSigner()\n         .signAttestationData(attestation.getData(), forkInfo)\n         .thenApply(signature -> createSignedAttestation(attestation, validator, signature))\n-        .thenAccept(validatorApiChannel::sendSignedAttestation);\n+        .thenAccept(validatorApiChannel::sendSignedAttestation)\n+        .thenApply(__ -> DutyResult.success(attestation.getData().getBeacon_block_root()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwODgzOA=="}, "originalCommit": {"oid": "ecd183ddeb32e70787af25e1efebae0ee5b71ba6"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3691, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}