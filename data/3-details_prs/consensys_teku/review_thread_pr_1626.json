{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MjkwOTEz", "number": 1626, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo1MTozMlrODz9RNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo1MTozMlrODz9RNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODA3Nzk4OnYy", "diffSide": "RIGHT", "path": "protoarray/src/main/java/tech/pegasys/artemis/protoarray/ProtoArrayForkChoiceStrategy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo1MTozMlrOGIq3uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo1NzozM1rOGIrBew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NDE4Nw==", "bodyText": "You can simplify this with streams to:\n  private static void processBlocksInStoreAtStartup(ReadOnlyStore store, ProtoArray protoArray) {\n    store.getBlockRoots().stream()\n        .map(store::getBlock)\n        .sorted(Comparator.comparing(BeaconBlock::getSlot))\n        .forEach(block -> processBlockAtStartup(store, protoArray, block));\n  }\n\n  private static void processBlockAtStartup(\n      final ReadOnlyStore store, final ProtoArray protoArray, final BeaconBlock block) {\n    Bytes32 blockRoot = block.hash_tree_root();\n    protoArray.onBlock(\n        block.getSlot(),\n        blockRoot,\n        store.getBlockRoots().contains(block.getParent_root())\n            ? Optional.of(block.getParent_root())\n            : Optional.empty(),\n        block.getState_root(),\n        store.getBlockState(block.hash_tree_root()).getCurrent_justified_checkpoint().getEpoch(),\n        store.getBlockState(block.hash_tree_root()).getFinalized_checkpoint().getEpoch());\n  }", "url": "https://github.com/ConsenSys/teku/pull/1626#discussion_r411744187", "createdAt": "2020-04-20T22:51:32Z", "author": {"login": "ajsutton"}, "path": "protoarray/src/main/java/tech/pegasys/artemis/protoarray/ProtoArrayForkChoiceStrategy.java", "diffHunk": "@@ -113,30 +119,30 @@ public void maybePrune(Bytes32 finalizedRoot) {\n \n   // Internal\n \n-  static ProtoArrayForkChoiceStrategy create(\n-      UnsignedLong finalizedBlockSlot,\n-      Bytes32 finalizedBlockStateRoot,\n-      UnsignedLong justifiedEpoch,\n-      UnsignedLong finalizedEpoch,\n-      Bytes32 finalizedBlockRoot) {\n-    ProtoArray protoArray =\n-        new ProtoArray(\n-            Constants.PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD,\n-            justifiedEpoch,\n-            finalizedEpoch,\n-            new ArrayList<>(),\n-            new HashMap<>());\n+  private static void processBlocksInStoreAtStartup(ReadOnlyStore store, ProtoArray protoArray) {\n+    List<BeaconBlock> blocks = new ArrayList<>();\n+    for (Bytes32 blockRoots : store.getBlockRoots()) {\n+      BeaconBlock block =\n+          checkNotNull(\n+              store.getBlock(blockRoots),\n+              \"ProtoArrayForkChoiceStrategy: Store does not contain the block of the block root it stores\");\n+      blocks.add(block);\n+    }\n \n-    protoArray.onBlock(\n-        finalizedBlockSlot,\n-        finalizedBlockRoot,\n-        Optional.empty(),\n-        finalizedBlockStateRoot,\n-        justifiedEpoch,\n-        finalizedEpoch);\n+    blocks.sort(Comparator.comparing(BeaconBlock::getSlot));\n \n-    return new ProtoArrayForkChoiceStrategy(\n-        protoArray, new ElasticList<>(VoteTracker::Default), new ArrayList<>());\n+    for (BeaconBlock block : blocks) {\n+      Bytes32 blockRoot = block.hash_tree_root();\n+      protoArray.onBlock(\n+          block.getSlot(),\n+          blockRoot,\n+          store.getBlockRoots().contains(block.getParent_root())\n+              ? Optional.of(block.getParent_root())\n+              : Optional.empty(),\n+          block.getState_root(),\n+          store.getBlockState(block.hash_tree_root()).getCurrent_justified_checkpoint().getEpoch(),\n+          store.getBlockState(block.hash_tree_root()).getFinalized_checkpoint().getEpoch());\n+    }\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c3ee821f459ee942861a5dbe40820dda9ddde7a"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NjI2NA==", "bodyText": "You could put the checkNotNull back in but I'm not sure it's worth it given that Store guarantees that it has a block for every block root (and it literally gets the block roots from the keyset of its map of blocks).", "url": "https://github.com/ConsenSys/teku/pull/1626#discussion_r411746264", "createdAt": "2020-04-20T22:56:24Z", "author": {"login": "ajsutton"}, "path": "protoarray/src/main/java/tech/pegasys/artemis/protoarray/ProtoArrayForkChoiceStrategy.java", "diffHunk": "@@ -113,30 +119,30 @@ public void maybePrune(Bytes32 finalizedRoot) {\n \n   // Internal\n \n-  static ProtoArrayForkChoiceStrategy create(\n-      UnsignedLong finalizedBlockSlot,\n-      Bytes32 finalizedBlockStateRoot,\n-      UnsignedLong justifiedEpoch,\n-      UnsignedLong finalizedEpoch,\n-      Bytes32 finalizedBlockRoot) {\n-    ProtoArray protoArray =\n-        new ProtoArray(\n-            Constants.PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD,\n-            justifiedEpoch,\n-            finalizedEpoch,\n-            new ArrayList<>(),\n-            new HashMap<>());\n+  private static void processBlocksInStoreAtStartup(ReadOnlyStore store, ProtoArray protoArray) {\n+    List<BeaconBlock> blocks = new ArrayList<>();\n+    for (Bytes32 blockRoots : store.getBlockRoots()) {\n+      BeaconBlock block =\n+          checkNotNull(\n+              store.getBlock(blockRoots),\n+              \"ProtoArrayForkChoiceStrategy: Store does not contain the block of the block root it stores\");\n+      blocks.add(block);\n+    }\n \n-    protoArray.onBlock(\n-        finalizedBlockSlot,\n-        finalizedBlockRoot,\n-        Optional.empty(),\n-        finalizedBlockStateRoot,\n-        justifiedEpoch,\n-        finalizedEpoch);\n+    blocks.sort(Comparator.comparing(BeaconBlock::getSlot));\n \n-    return new ProtoArrayForkChoiceStrategy(\n-        protoArray, new ElasticList<>(VoteTracker::Default), new ArrayList<>());\n+    for (BeaconBlock block : blocks) {\n+      Bytes32 blockRoot = block.hash_tree_root();\n+      protoArray.onBlock(\n+          block.getSlot(),\n+          blockRoot,\n+          store.getBlockRoots().contains(block.getParent_root())\n+              ? Optional.of(block.getParent_root())\n+              : Optional.empty(),\n+          block.getState_root(),\n+          store.getBlockState(block.hash_tree_root()).getCurrent_justified_checkpoint().getEpoch(),\n+          store.getBlockState(block.hash_tree_root()).getFinalized_checkpoint().getEpoch());\n+    }\n   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NDE4Nw=="}, "originalCommit": {"oid": "3c3ee821f459ee942861a5dbe40820dda9ddde7a"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NjY4Mw==", "bodyText": "This is neat. Thank you.", "url": "https://github.com/ConsenSys/teku/pull/1626#discussion_r411746683", "createdAt": "2020-04-20T22:57:33Z", "author": {"login": "cemozerr"}, "path": "protoarray/src/main/java/tech/pegasys/artemis/protoarray/ProtoArrayForkChoiceStrategy.java", "diffHunk": "@@ -113,30 +119,30 @@ public void maybePrune(Bytes32 finalizedRoot) {\n \n   // Internal\n \n-  static ProtoArrayForkChoiceStrategy create(\n-      UnsignedLong finalizedBlockSlot,\n-      Bytes32 finalizedBlockStateRoot,\n-      UnsignedLong justifiedEpoch,\n-      UnsignedLong finalizedEpoch,\n-      Bytes32 finalizedBlockRoot) {\n-    ProtoArray protoArray =\n-        new ProtoArray(\n-            Constants.PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD,\n-            justifiedEpoch,\n-            finalizedEpoch,\n-            new ArrayList<>(),\n-            new HashMap<>());\n+  private static void processBlocksInStoreAtStartup(ReadOnlyStore store, ProtoArray protoArray) {\n+    List<BeaconBlock> blocks = new ArrayList<>();\n+    for (Bytes32 blockRoots : store.getBlockRoots()) {\n+      BeaconBlock block =\n+          checkNotNull(\n+              store.getBlock(blockRoots),\n+              \"ProtoArrayForkChoiceStrategy: Store does not contain the block of the block root it stores\");\n+      blocks.add(block);\n+    }\n \n-    protoArray.onBlock(\n-        finalizedBlockSlot,\n-        finalizedBlockRoot,\n-        Optional.empty(),\n-        finalizedBlockStateRoot,\n-        justifiedEpoch,\n-        finalizedEpoch);\n+    blocks.sort(Comparator.comparing(BeaconBlock::getSlot));\n \n-    return new ProtoArrayForkChoiceStrategy(\n-        protoArray, new ElasticList<>(VoteTracker::Default), new ArrayList<>());\n+    for (BeaconBlock block : blocks) {\n+      Bytes32 blockRoot = block.hash_tree_root();\n+      protoArray.onBlock(\n+          block.getSlot(),\n+          blockRoot,\n+          store.getBlockRoots().contains(block.getParent_root())\n+              ? Optional.of(block.getParent_root())\n+              : Optional.empty(),\n+          block.getState_root(),\n+          store.getBlockState(block.hash_tree_root()).getCurrent_justified_checkpoint().getEpoch(),\n+          store.getBlockState(block.hash_tree_root()).getFinalized_checkpoint().getEpoch());\n+    }\n   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NDE4Nw=="}, "originalCommit": {"oid": "3c3ee821f459ee942861a5dbe40820dda9ddde7a"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1678, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}