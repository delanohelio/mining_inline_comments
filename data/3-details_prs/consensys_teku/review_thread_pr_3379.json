{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0Nzg4MjY3", "number": 3379, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoyMDo0NlrOFCpVlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoyMDo0NlrOFCpVlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzE4NzQzOnYy", "diffSide": "RIGHT", "path": "validator/remote/src/main/java/tech/pegasys/teku/validator/remote/RemoteValidatorApiHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoyMDo0NlrOIB62pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzoyMjoxNVrOIB65OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4Mzc1MQ==", "bodyText": "nit: validatorResponseTFunction isn't a great name.  Maybe valueExtractor?", "url": "https://github.com/ConsenSys/teku/pull/3379#discussion_r538883751", "createdAt": "2020-12-08T23:20:46Z", "author": {"login": "ajsutton"}, "path": "validator/remote/src/main/java/tech/pegasys/teku/validator/remote/RemoteValidatorApiHandler.java", "diffHunk": "@@ -99,54 +100,42 @@ public RemoteValidatorApiHandler(\n     if (publicKeys.isEmpty()) {\n       return SafeFuture.completedFuture(emptyMap());\n     }\n-    return sendRequest(\n-        () -> {\n-          final Map<BLSPublicKey, Integer> indices = new HashMap<>();\n-          for (int i = 0; i < publicKeys.size(); i += MAX_PUBLIC_KEY_BATCH_SIZE) {\n-            final List<BLSPublicKey> batch =\n-                publicKeys.subList(i, Math.min(publicKeys.size(), i + MAX_PUBLIC_KEY_BATCH_SIZE));\n-            requestValidatorIndices(batch).ifPresent(indices::putAll);\n-          }\n-          return indices;\n-        });\n+    return sendRequest(() -> makeBatchedValidatorRequest(publicKeys, ValidatorResponse::getIndex));\n   }\n \n   @Override\n   public SafeFuture<Optional<Map<BLSPublicKey, ValidatorStatus>>> getValidatorStatuses(\n-      Set<BLSPublicKey> validatorPublicKeys) {\n+      List<BLSPublicKey> publicKeys) {\n     return sendRequest(\n-        () ->\n-            apiClient\n-                .getValidators(\n-                    validatorPublicKeys.stream()\n-                        .map(BLSPublicKey::toString)\n-                        .collect(Collectors.toList()))\n-                .map(\n-                    list ->\n-                        list.stream()\n-                            .collect(\n-                                toMap(\n-                                    ValidatorResponse::getPublicKey,\n-                                    ValidatorResponse::getStatus))));\n+        () -> Optional.of(makeBatchedValidatorRequest(publicKeys, ValidatorResponse::getStatus)));\n+  }\n+\n+  private <T> Map<BLSPublicKey, T> makeBatchedValidatorRequest(\n+      List<BLSPublicKey> publicKeys, Function<ValidatorResponse, T> validatorResponseTFunction) {\n+    final Map<BLSPublicKey, T> returnedObjects = new HashMap<>();\n+    for (int i = 0; i < publicKeys.size(); i += MAX_PUBLIC_KEY_BATCH_SIZE) {\n+      final List<BLSPublicKey> batch =\n+          publicKeys.subList(i, Math.min(publicKeys.size(), i + MAX_PUBLIC_KEY_BATCH_SIZE));\n+      requestValidatorObject(batch, validatorResponseTFunction).ifPresent(returnedObjects::putAll);\n+    }\n+    return returnedObjects;\n   }\n \n-  private Optional<Map<BLSPublicKey, Integer>> requestValidatorIndices(\n-      final List<BLSPublicKey> batch) {\n+  private <T> Optional<Map<BLSPublicKey, T>> requestValidatorObject(\n+      final List<BLSPublicKey> batch, Function<ValidatorResponse, T> validatorResponseTFunction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2656b1899cc18024863d7f7206da41d0f973ef38"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4NDAyMQ==", "bodyText": "blame intellij!", "url": "https://github.com/ConsenSys/teku/pull/3379#discussion_r538884021", "createdAt": "2020-12-08T23:21:27Z", "author": {"login": "cemozerr"}, "path": "validator/remote/src/main/java/tech/pegasys/teku/validator/remote/RemoteValidatorApiHandler.java", "diffHunk": "@@ -99,54 +100,42 @@ public RemoteValidatorApiHandler(\n     if (publicKeys.isEmpty()) {\n       return SafeFuture.completedFuture(emptyMap());\n     }\n-    return sendRequest(\n-        () -> {\n-          final Map<BLSPublicKey, Integer> indices = new HashMap<>();\n-          for (int i = 0; i < publicKeys.size(); i += MAX_PUBLIC_KEY_BATCH_SIZE) {\n-            final List<BLSPublicKey> batch =\n-                publicKeys.subList(i, Math.min(publicKeys.size(), i + MAX_PUBLIC_KEY_BATCH_SIZE));\n-            requestValidatorIndices(batch).ifPresent(indices::putAll);\n-          }\n-          return indices;\n-        });\n+    return sendRequest(() -> makeBatchedValidatorRequest(publicKeys, ValidatorResponse::getIndex));\n   }\n \n   @Override\n   public SafeFuture<Optional<Map<BLSPublicKey, ValidatorStatus>>> getValidatorStatuses(\n-      Set<BLSPublicKey> validatorPublicKeys) {\n+      List<BLSPublicKey> publicKeys) {\n     return sendRequest(\n-        () ->\n-            apiClient\n-                .getValidators(\n-                    validatorPublicKeys.stream()\n-                        .map(BLSPublicKey::toString)\n-                        .collect(Collectors.toList()))\n-                .map(\n-                    list ->\n-                        list.stream()\n-                            .collect(\n-                                toMap(\n-                                    ValidatorResponse::getPublicKey,\n-                                    ValidatorResponse::getStatus))));\n+        () -> Optional.of(makeBatchedValidatorRequest(publicKeys, ValidatorResponse::getStatus)));\n+  }\n+\n+  private <T> Map<BLSPublicKey, T> makeBatchedValidatorRequest(\n+      List<BLSPublicKey> publicKeys, Function<ValidatorResponse, T> validatorResponseTFunction) {\n+    final Map<BLSPublicKey, T> returnedObjects = new HashMap<>();\n+    for (int i = 0; i < publicKeys.size(); i += MAX_PUBLIC_KEY_BATCH_SIZE) {\n+      final List<BLSPublicKey> batch =\n+          publicKeys.subList(i, Math.min(publicKeys.size(), i + MAX_PUBLIC_KEY_BATCH_SIZE));\n+      requestValidatorObject(batch, validatorResponseTFunction).ifPresent(returnedObjects::putAll);\n+    }\n+    return returnedObjects;\n   }\n \n-  private Optional<Map<BLSPublicKey, Integer>> requestValidatorIndices(\n-      final List<BLSPublicKey> batch) {\n+  private <T> Optional<Map<BLSPublicKey, T>> requestValidatorObject(\n+      final List<BLSPublicKey> batch, Function<ValidatorResponse, T> validatorResponseTFunction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4Mzc1MQ=="}, "originalCommit": {"oid": "2656b1899cc18024863d7f7206da41d0f973ef38"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4NDQwOA==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/3379#discussion_r538884408", "createdAt": "2020-12-08T23:22:15Z", "author": {"login": "cemozerr"}, "path": "validator/remote/src/main/java/tech/pegasys/teku/validator/remote/RemoteValidatorApiHandler.java", "diffHunk": "@@ -99,54 +100,42 @@ public RemoteValidatorApiHandler(\n     if (publicKeys.isEmpty()) {\n       return SafeFuture.completedFuture(emptyMap());\n     }\n-    return sendRequest(\n-        () -> {\n-          final Map<BLSPublicKey, Integer> indices = new HashMap<>();\n-          for (int i = 0; i < publicKeys.size(); i += MAX_PUBLIC_KEY_BATCH_SIZE) {\n-            final List<BLSPublicKey> batch =\n-                publicKeys.subList(i, Math.min(publicKeys.size(), i + MAX_PUBLIC_KEY_BATCH_SIZE));\n-            requestValidatorIndices(batch).ifPresent(indices::putAll);\n-          }\n-          return indices;\n-        });\n+    return sendRequest(() -> makeBatchedValidatorRequest(publicKeys, ValidatorResponse::getIndex));\n   }\n \n   @Override\n   public SafeFuture<Optional<Map<BLSPublicKey, ValidatorStatus>>> getValidatorStatuses(\n-      Set<BLSPublicKey> validatorPublicKeys) {\n+      List<BLSPublicKey> publicKeys) {\n     return sendRequest(\n-        () ->\n-            apiClient\n-                .getValidators(\n-                    validatorPublicKeys.stream()\n-                        .map(BLSPublicKey::toString)\n-                        .collect(Collectors.toList()))\n-                .map(\n-                    list ->\n-                        list.stream()\n-                            .collect(\n-                                toMap(\n-                                    ValidatorResponse::getPublicKey,\n-                                    ValidatorResponse::getStatus))));\n+        () -> Optional.of(makeBatchedValidatorRequest(publicKeys, ValidatorResponse::getStatus)));\n+  }\n+\n+  private <T> Map<BLSPublicKey, T> makeBatchedValidatorRequest(\n+      List<BLSPublicKey> publicKeys, Function<ValidatorResponse, T> validatorResponseTFunction) {\n+    final Map<BLSPublicKey, T> returnedObjects = new HashMap<>();\n+    for (int i = 0; i < publicKeys.size(); i += MAX_PUBLIC_KEY_BATCH_SIZE) {\n+      final List<BLSPublicKey> batch =\n+          publicKeys.subList(i, Math.min(publicKeys.size(), i + MAX_PUBLIC_KEY_BATCH_SIZE));\n+      requestValidatorObject(batch, validatorResponseTFunction).ifPresent(returnedObjects::putAll);\n+    }\n+    return returnedObjects;\n   }\n \n-  private Optional<Map<BLSPublicKey, Integer>> requestValidatorIndices(\n-      final List<BLSPublicKey> batch) {\n+  private <T> Optional<Map<BLSPublicKey, T>> requestValidatorObject(\n+      final List<BLSPublicKey> batch, Function<ValidatorResponse, T> validatorResponseTFunction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4Mzc1MQ=="}, "originalCommit": {"oid": "2656b1899cc18024863d7f7206da41d0f973ef38"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2926, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}