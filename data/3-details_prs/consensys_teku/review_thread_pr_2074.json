{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwNTc3MjQw", "number": 2074, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMjowNTowMVrOEDSDRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoxMzowOVrOEDpRXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODc2OTM1OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMjowNTowMVrOGgNdEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMjoxMzo1M1rOGgNiIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyODA1MA==", "bodyText": "I just noticed these methods start with a capital", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436428050", "createdAt": "2020-06-08T02:05:01Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java", "diffHunk": "@@ -124,6 +125,16 @@ public void RestApiShouldHaveBeaconValidatorsEndpoint() {\n     verify(app).get(eq(GetValidators.ROUTE), any(GetValidators.class));\n   }\n \n+  @Test\n+  public void ShouldHaveV1VersionEndpoint() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35c353c6f50fe69763b4f74b401817aa718599e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyODcwMg==", "bodyText": "ah oops.", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436428702", "createdAt": "2020-06-08T02:09:41Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java", "diffHunk": "@@ -124,6 +125,16 @@ public void RestApiShouldHaveBeaconValidatorsEndpoint() {\n     verify(app).get(eq(GetValidators.ROUTE), any(GetValidators.class));\n   }\n \n+  @Test\n+  public void ShouldHaveV1VersionEndpoint() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyODA1MA=="}, "originalCommit": {"oid": "e35c353c6f50fe69763b4f74b401817aa718599e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyOTM0Nw==", "bodyText": "the whole file was like that, but i fixed it.", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436429347", "createdAt": "2020-06-08T02:13:53Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiTest.java", "diffHunk": "@@ -124,6 +125,16 @@ public void RestApiShouldHaveBeaconValidatorsEndpoint() {\n     verify(app).get(eq(GetValidators.ROUTE), any(GetValidators.class));\n   }\n \n+  @Test\n+  public void ShouldHaveV1VersionEndpoint() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyODA1MA=="}, "originalCommit": {"oid": "e35c353c6f50fe69763b4f74b401817aa718599e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODc3MDAwOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMjowNTo0OVrOGgNddw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMjowNTo0OVrOGgNddw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQyODE1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        description = \"An object network identity of the node.\"),\n          \n          \n            \n                        description = \"Network identity of the node.\"),", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436428151", "createdAt": "2020-06-08T02:05:49Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetIdentity.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.node;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.NO_CONTENT_PRE_GENESIS;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_NO_CONTENT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_NODE;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NetworkDataProvider;\n+import tech.pegasys.teku.api.response.v1.node.Identity;\n+import tech.pegasys.teku.api.response.v1.node.IdentityResponse;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetIdentity implements Handler {\n+  public static final String ROUTE = \"/v1/node/identity\";\n+  private final JsonProvider jsonProvider;\n+  private final NetworkDataProvider network;\n+\n+  public GetIdentity(final DataProvider provider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.network = provider.getNetworkDataProvider();\n+  }\n+\n+  GetIdentity(final NetworkDataProvider provider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.network = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Retrieves data about the node's network presence.\",\n+      tags = {TAG_V1_NODE},\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = IdentityResponse.class),\n+            description = \"An object network identity of the node.\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35c353c6f50fe69763b4f74b401817aa718599e"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODc5OTk2OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMjozNToxNlrOGgNvLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMjozNToxNlrOGgNvLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzMjY4NQ==", "bodyText": "Should add this in Upcoming Breaking Changes section as well.", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436432685", "createdAt": "2020-06-08T02:35:16Z", "author": {"login": "ajsutton"}, "path": "CHANGELOG.md", "diffHunk": "@@ -5,6 +5,16 @@ we recommend most users use the latest `master` branch of Teku.\n \n ## Upcoming Breaking Changes\n \n+## 0.11.4\n+\n+### Breaking Changes\n+\n+\n+\n+### Additions and Improvements\n+\n+- Added `/v1/node/version` and `/v1/node/identity` REST endpoints. Anyone using `/node/version` should switch to use\n+the new endpoint, as `/node/version` will be removed in a future release.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fc79eb0e2cbbdae01f1338ca687416880475ec"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODgwODI5OnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMjo0MzozMFrOGgN0Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDowMDozOVrOGgOliQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzMzk3MQ==", "bodyText": "You can't create a new instance of this as it won't actually pick up the right values.  Need to add a getMetaData() to Eth2Network (and the implementation will actually wind up having to delegate to Eth2PeerManager).  NetworkDataProvider can be given an Eth2Network instead of a P2PNetwork so it has access to these kinds of Eth2 concepts without having to add them to the libp2p layer.", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436433971", "createdAt": "2020-06-08T02:43:30Z", "author": {"login": "ajsutton"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java", "diffHunk": "@@ -16,12 +16,15 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n+import tech.pegasys.teku.api.schema.Metadata;\n+import tech.pegasys.teku.networking.eth2.rpc.beaconchain.methods.MetadataMessagesFactory;\n import tech.pegasys.teku.networking.p2p.network.P2PNetwork;\n import tech.pegasys.teku.networking.p2p.peer.NodeId;\n import tech.pegasys.teku.networking.p2p.peer.Peer;\n \n public class NetworkDataProvider {\n   private final P2PNetwork<?> p2pNetwork;\n+  private final MetadataMessagesFactory metadataMessageFactory = new MetadataMessagesFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fc79eb0e2cbbdae01f1338ca687416880475ec"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0NjYwMQ==", "bodyText": "yep didnt think this bit was right, that's what i was stuck on - perfect.", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436446601", "createdAt": "2020-06-08T04:00:39Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java", "diffHunk": "@@ -16,12 +16,15 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n+import tech.pegasys.teku.api.schema.Metadata;\n+import tech.pegasys.teku.networking.eth2.rpc.beaconchain.methods.MetadataMessagesFactory;\n import tech.pegasys.teku.networking.p2p.network.P2PNetwork;\n import tech.pegasys.teku.networking.p2p.peer.NodeId;\n import tech.pegasys.teku.networking.p2p.peer.Peer;\n \n public class NetworkDataProvider {\n   private final P2PNetwork<?> p2pNetwork;\n+  private final MetadataMessagesFactory metadataMessageFactory = new MetadataMessagesFactory();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzMzk3MQ=="}, "originalCommit": {"oid": "a7fc79eb0e2cbbdae01f1338ca687416880475ec"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODgxNDg4OnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMjo1MDowNFrOGgN4Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMjo1MDowNFrOGgN4Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzNTAwMg==", "bodyText": "The discovery advertised address is not fixed at startup - it can be updated based on discv5 messages we receive (e.g. if we move to a different network out external IP might change).  It should always be retrieved from the local node record and not stored.\nAlso MultiaddrUtil is currently designed just for TCP (hard codes /tcp/ in the address) but discovery is UDP.", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436435002", "createdAt": "2020-06-08T02:50:04Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java", "diffHunk": "@@ -25,24 +28,29 @@\n import org.ethereum.beacon.discovery.schema.NodeStatus;\n import tech.pegasys.teku.networking.p2p.discovery.DiscoveryPeer;\n import tech.pegasys.teku.networking.p2p.discovery.DiscoveryService;\n+import tech.pegasys.teku.networking.p2p.libp2p.MultiaddrUtil;\n+import tech.pegasys.teku.networking.p2p.network.NetworkConfig;\n import tech.pegasys.teku.service.serviceutils.Service;\n import tech.pegasys.teku.util.async.SafeFuture;\n \n public class DiscV5Service extends Service implements DiscoveryService {\n \n   private final DiscoverySystem discoverySystem;\n+  private final Multiaddr advertisedAddr;\n \n-  public DiscV5Service(final DiscoverySystem discoverySystem) {\n+  private DiscV5Service(final DiscoverySystem discoverySystem, NetworkConfig config) {\n     this.discoverySystem = discoverySystem;\n+    final byte[] nodeId = discoverySystem.getLocalNodeRecord().getNodeId().toArray();\n+    this.advertisedAddr = getAdvertisedAddr(config, nodeId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fc79eb0e2cbbdae01f1338ca687416880475ec"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODg0NDk1OnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMzoxNzo1NVrOGgOJzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMzoyMDoyMlrOGgOLRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzOTUwMQ==", "bodyText": "It's really unclear what the result of this is actually meant to be. I've never seen anything that defines how to encode a discovery ENR as a multiaddr correctly which is what this is trying to do.  Best I can see is that we use:\nfinal NodeRecord nodeRecord = discoverySystem.getLocalNodeRecord();\nif (nodeRecord.getUdpAddress().isEmpty() {\n  return Optional.empty();\n}\nfinal DiscoveryPeer discoveryPeer = new DiscoveryPeer(((Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1), nodeRecord.getUdpAddress().get(), Optional.empty());\n\nreturn MultiaddrUtil.fromDiscoveryPeer(discoveryPeer); // But this needs to be a new variant that uses /udp/ not /tcp/", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436439501", "createdAt": "2020-06-08T03:17:55Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java", "diffHunk": "@@ -83,6 +91,21 @@ public static DiscoveryService create(\n     return Optional.of(discoverySystem.getLocalNodeRecord().asEnr());\n   }\n \n+  @Override\n+  public Optional<String> getDiscoveryAddress() {\n+    return Optional.of(advertisedAddr.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fc79eb0e2cbbdae01f1338ca687416880475ec"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzOTg3Ng==", "bodyText": "You just can't use the resulting multiaddr for anything useful because you don't have the public key of the node record and this will actually wind up including a hash of the public key.", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436439876", "createdAt": "2020-06-08T03:20:22Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/DiscV5Service.java", "diffHunk": "@@ -83,6 +91,21 @@ public static DiscoveryService create(\n     return Optional.of(discoverySystem.getLocalNodeRecord().asEnr());\n   }\n \n+  @Override\n+  public Optional<String> getDiscoveryAddress() {\n+    return Optional.of(advertisedAddr.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQzOTUwMQ=="}, "originalCommit": {"oid": "a7fc79eb0e2cbbdae01f1338ca687416880475ec"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODg1Nzg1OnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMzozMDowNlrOGgORcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMzozMDowNlrOGgORcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0MTQ1Ng==", "bodyText": "I'm not convinced this code belongs in MultiaddrUtil - it doesn't actually have anything to do with Multiaddres (just our config and InetSocketAddress).  It wouldn't need to move if we're getting the discv5 address from the local node record.", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436441456", "createdAt": "2020-06-08T03:30:06Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PNetwork.java", "diffHunk": "@@ -224,15 +223,7 @@ private Gossip createGossip() {\n \n   private Multiaddr getAdvertisedAddr(NetworkConfig config, final NodeId nodeId) {\n     try {\n-      final InetSocketAddress advertisedAddress =\n-          new InetSocketAddress(config.getAdvertisedIp(), config.getAdvertisedPort());\n-      final InetSocketAddress resolvedAddress;\n-      if (advertisedAddress.getAddress().isAnyLocalAddress()) {\n-        resolvedAddress =\n-            new InetSocketAddress(InetAddress.getLocalHost(), advertisedAddress.getPort());\n-      } else {\n-        resolvedAddress = advertisedAddress;\n-      }\n+      final InetSocketAddress resolvedAddress = MultiaddrUtil.getResolvedInetSocketAddress(config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fc79eb0e2cbbdae01f1338ca687416880475ec"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODg2MDI3OnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMzozMTo1N1rOGgOSzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwMzozMTo1N1rOGgOSzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ0MTgwNQ==", "bodyText": "We should avoid using byte[] for nodeId - it makes it very unclear what type of node ID it actually is (discv5 and libp2p have very different node IDs).  NodeId is an interface for that purpose but at the moment I have no idea what the spec actually wants for the discovery node ID.", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r436441805", "createdAt": "2020-06-08T03:31:57Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java", "diffHunk": "@@ -45,10 +48,33 @@ public static Multiaddr fromInetSocketAddress(\n     return addPeerId(fromInetSocketAddress(address), nodeId);\n   }\n \n+  public static InetSocketAddress getResolvedInetSocketAddress(NetworkConfig config)\n+      throws UnknownHostException {\n+    final InetSocketAddress advertisedAddress =\n+        new InetSocketAddress(config.getAdvertisedIp(), config.getAdvertisedPort());\n+    final InetSocketAddress resolvedAddress;\n+    if (advertisedAddress.getAddress().isAnyLocalAddress()) {\n+      resolvedAddress =\n+          new InetSocketAddress(InetAddress.getLocalHost(), advertisedAddress.getPort());\n+    } else {\n+      resolvedAddress = advertisedAddress;\n+    }\n+    return resolvedAddress;\n+  }\n+\n+  public static Multiaddr fromInetSocketAddress(\n+      final InetSocketAddress address, final byte[] nodeId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fc79eb0e2cbbdae01f1338ca687416880475ec"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjU2OTc3OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoxMToyNlrOGgyLfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjo0ODoyM1rOGgy_CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyOTc1Nw==", "bodyText": "We should probably make this return Optional or this is going to create a lot of surprises when p2p is disabled.", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r437029757", "createdAt": "2020-06-08T22:11:26Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java", "diffHunk": "@@ -27,4 +28,9 @@ public void unsubscribeFromAttestationSubnetId(final int subnetId) {}\n \n   @Override\n   public void setLongTermAttestationSubnetSubscriptions(final Iterable<Integer> subnetIndices) {}\n+\n+  @Override\n+  public MetadataMessage getMetadata() {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fd0c57ff2fe409e284ebc477569abf48d3bfe8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyOTk0Nw==", "bodyText": "Alternatively this can probably just return sequence 1 and all zeros for the subscribed subnets which is probably better.", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r437029947", "createdAt": "2020-06-08T22:12:00Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java", "diffHunk": "@@ -27,4 +28,9 @@ public void unsubscribeFromAttestationSubnetId(final int subnetId) {}\n \n   @Override\n   public void setLongTermAttestationSubnetSubscriptions(final Iterable<Integer> subnetIndices) {}\n+\n+  @Override\n+  public MetadataMessage getMetadata() {\n+    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyOTc1Nw=="}, "originalCommit": {"oid": "b0fd0c57ff2fe409e284ebc477569abf48d3bfe8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0MTY5MA==", "bodyText": "ok, there's a MetadataMessage.createDefault() which creates sequence 0 and all 0's for subscribed, so i've called that here. hopefully sequence 0 is fine...", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r437041690", "createdAt": "2020-06-08T22:44:34Z", "author": {"login": "rolfyone"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java", "diffHunk": "@@ -27,4 +28,9 @@ public void unsubscribeFromAttestationSubnetId(final int subnetId) {}\n \n   @Override\n   public void setLongTermAttestationSubnetSubscriptions(final Iterable<Integer> subnetIndices) {}\n+\n+  @Override\n+  public MetadataMessage getMetadata() {\n+    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyOTc1Nw=="}, "originalCommit": {"oid": "b0fd0c57ff2fe409e284ebc477569abf48d3bfe8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0Mjk1Mw==", "bodyText": "Yep, using that is a better idea. :)", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r437042953", "createdAt": "2020-06-08T22:48:23Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/mock/NoOpEth2Network.java", "diffHunk": "@@ -27,4 +28,9 @@ public void unsubscribeFromAttestationSubnetId(final int subnetId) {}\n \n   @Override\n   public void setLongTermAttestationSubnetSubscriptions(final Iterable<Integer> subnetIndices) {}\n+\n+  @Override\n+  public MetadataMessage getMetadata() {\n+    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyOTc1Nw=="}, "originalCommit": {"oid": "b0fd0c57ff2fe409e284ebc477569abf48d3bfe8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjU3Mzc1OnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoxMzowOVrOGgyN3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoxMzowOVrOGgyN3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMDM2Nw==", "bodyText": "nit: I'm be tempted to make this private and just have the two fromDiscoveryPeer methods use it internally.", "url": "https://github.com/ConsenSys/teku/pull/2074#discussion_r437030367", "createdAt": "2020-06-08T22:13:09Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/MultiaddrUtil.java", "diffHunk": "@@ -30,19 +30,29 @@ public static Multiaddr fromDiscoveryPeer(final DiscoveryPeer peer) {\n     return fromInetSocketAddress(peer.getNodeAddress(), getNodeId(peer));\n   }\n \n+  public static Multiaddr fromDiscoveryPeerAsUdp(final DiscoveryPeer peer) {\n+    return addPeerId(fromInetSocketAddress(peer.getNodeAddress(), \"udp\"), getNodeId(peer));\n+  }\n+\n   public static Multiaddr fromInetSocketAddress(final InetSocketAddress address) {\n+    return fromInetSocketAddress(address, \"tcp\");\n+  }\n+\n+  public static Multiaddr fromInetSocketAddress(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fd0c57ff2fe409e284ebc477569abf48d3bfe8"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3558, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}