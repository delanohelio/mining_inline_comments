{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxNzgwNDcz", "number": 2750, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0MToyMFrOEhVISQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0MToyMFrOEhVISQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzg0NjQ5OnYy", "diffSide": "RIGHT", "path": "sync/src/main/java/tech/pegasys/teku/sync/multipeer/eventthread/ExecutorEventThread.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0MToyMFrOHOlhig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMToyMTowM1rOHOzOEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1NjkwNg==", "bodyText": "Don't we want to stick here to AsyncRunner interface as our primary scheduler?\nThat can be useful when/if we would like to implement 'time machine'", "url": "https://github.com/ConsenSys/teku/pull/2750#discussion_r485056906", "createdAt": "2020-09-08T16:41:20Z", "author": {"login": "Nashatyrev"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/multipeer/eventthread/ExecutorEventThread.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.sync.multipeer.eventthread;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class ExecutorEventThread implements EventThread {\n+  private final AtomicBoolean started = new AtomicBoolean(false);\n+  private final String name;\n+  private ExecutorService thread;\n+\n+  /** The ID of the event thread. The first task executed by the executor sets this ID. */\n+  private volatile long eventThreadId = -1;\n+\n+  public ExecutorEventThread(final String name) {\n+    this.name = name;\n+  }\n+\n+  @Override\n+  public void checkOnEventThread() {\n+    checkState(isEventThread(), \"Attempting to access \" + name + \" resource from non-event thread\");\n+  }\n+\n+  private boolean isEventThread() {\n+    return Thread.currentThread().getId() == eventThreadId;\n+  }\n+\n+  @Override\n+  public synchronized void start() {\n+    if (started.get()) {\n+      return;\n+    }\n+    thread =\n+        Executors.newSingleThreadExecutor(\n+            new ThreadFactoryBuilder().setNameFormat(name).setDaemon(true).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "209e9b3dcce97e1bc77cc1fa1088668ac31d04c9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI4MTI5OQ==", "bodyText": "Probably won't affect the time machine but still worth using the same infrastructure - it gives us metrics on the length of the queue as well which is useful.", "url": "https://github.com/ConsenSys/teku/pull/2750#discussion_r485281299", "createdAt": "2020-09-09T01:21:03Z", "author": {"login": "ajsutton"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/multipeer/eventthread/ExecutorEventThread.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.sync.multipeer.eventthread;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class ExecutorEventThread implements EventThread {\n+  private final AtomicBoolean started = new AtomicBoolean(false);\n+  private final String name;\n+  private ExecutorService thread;\n+\n+  /** The ID of the event thread. The first task executed by the executor sets this ID. */\n+  private volatile long eventThreadId = -1;\n+\n+  public ExecutorEventThread(final String name) {\n+    this.name = name;\n+  }\n+\n+  @Override\n+  public void checkOnEventThread() {\n+    checkState(isEventThread(), \"Attempting to access \" + name + \" resource from non-event thread\");\n+  }\n+\n+  private boolean isEventThread() {\n+    return Thread.currentThread().getId() == eventThreadId;\n+  }\n+\n+  @Override\n+  public synchronized void start() {\n+    if (started.get()) {\n+      return;\n+    }\n+    thread =\n+        Executors.newSingleThreadExecutor(\n+            new ThreadFactoryBuilder().setNameFormat(name).setDaemon(true).build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1NjkwNg=="}, "originalCommit": {"oid": "209e9b3dcce97e1bc77cc1fa1088668ac31d04c9"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3227, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}