{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMzU2MDgz", "number": 2932, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxODoxNzoxMVrOEsJxyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxODoxNzoxMVrOEsJxyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzMzMDAzOnYy", "diffSide": "RIGHT", "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/SendSignedBlockResult.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxODoxNzoxMVrOHfUMKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQyMjoyMjo0MVrOHfi1JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5ODY5OA==", "bodyText": "Why is a not imported block still published?", "url": "https://github.com/ConsenSys/teku/pull/2932#discussion_r502598698", "createdAt": "2020-10-09T18:17:11Z", "author": {"login": "cemozerr"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/SendSignedBlockResult.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import com.google.common.base.MoreObjects;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class SendSignedBlockResult {\n+  private final Optional<Bytes32> blockRoot;\n+  private final Optional<String> rejectionReason;\n+  private final boolean published;\n+\n+  private SendSignedBlockResult(\n+      final Optional<Bytes32> blockRoot,\n+      final Optional<String> rejectionReason,\n+      final boolean published) {\n+    this.blockRoot = blockRoot;\n+    this.rejectionReason = rejectionReason;\n+    this.published = published;\n+  }\n+\n+  public static SendSignedBlockResult success(final Bytes32 blockRoot) {\n+    return new SendSignedBlockResult(Optional.of(blockRoot), Optional.empty(), true);\n+  }\n+\n+  public static SendSignedBlockResult notImported(final String reason) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "306d28e441da8504c1be64585a305ff3b9ae238f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgzODU2NA==", "bodyText": "It may pass gossip validation but not state transition.", "url": "https://github.com/ConsenSys/teku/pull/2932#discussion_r502838564", "createdAt": "2020-10-10T22:22:41Z", "author": {"login": "ajsutton"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/SendSignedBlockResult.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import com.google.common.base.MoreObjects;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class SendSignedBlockResult {\n+  private final Optional<Bytes32> blockRoot;\n+  private final Optional<String> rejectionReason;\n+  private final boolean published;\n+\n+  private SendSignedBlockResult(\n+      final Optional<Bytes32> blockRoot,\n+      final Optional<String> rejectionReason,\n+      final boolean published) {\n+    this.blockRoot = blockRoot;\n+    this.rejectionReason = rejectionReason;\n+    this.published = published;\n+  }\n+\n+  public static SendSignedBlockResult success(final Bytes32 blockRoot) {\n+    return new SendSignedBlockResult(Optional.of(blockRoot), Optional.empty(), true);\n+  }\n+\n+  public static SendSignedBlockResult notImported(final String reason) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5ODY5OA=="}, "originalCommit": {"oid": "306d28e441da8504c1be64585a305ff3b9ae238f"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3168, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}