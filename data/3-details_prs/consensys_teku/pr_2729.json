{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5NjUwOTIx", "number": 2729, "title": "Lock validator keystore files when loading", "bodyText": "PR Description\nLock validator keystore files when loading.\nFixed Issue(s)\n\n\nFixes #2412\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-09-04T12:44:25Z", "url": "https://github.com/ConsenSys/teku/pull/2729", "merged": true, "mergeCommit": {"oid": "a03815b78a25613f48bf8a0be3ddddfb0a1ee29d"}, "closed": true, "closedAt": "2020-09-18T14:43:06Z", "author": {"login": "cemozerr"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFkkfnAH2gAyNDc5NjUwOTIxOjZlMjk4ZDUxZjJmZjYzMTZhMjQxNDRhYzNhMTIwMTIyOTIxNWYxMmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKFmligH2gAyNDc5NjUwOTIxOjAyODFmNjdhMDI1MDJlODI3NmRiODVmMmRkMGZlYjNmMTJiMzg1NTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6e298d51f2ff6316a24144ac3a1201229215f12c", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/6e298d51f2ff6316a24144ac3a1201229215f12c", "committedDate": "2020-09-04T12:43:18Z", "message": "Lock validator keystore files when loading"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "892ed0923dbaeae5c39e709febe8e71a05f43c86", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/892ed0923dbaeae5c39e709febe8e71a05f43c86", "committedDate": "2020-09-04T13:02:19Z", "message": "Fix spacing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMjQyMDUy", "url": "https://github.com/ConsenSys/teku/pull/2729#pullrequestreview-483242052", "createdAt": "2020-09-07T04:59:48Z", "commit": {"oid": "6e298d51f2ff6316a24144ac3a1201229215f12c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNDo1OTo0OFrOHNwN_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNDo1OTo0OFrOHNwN_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE4MzU1MA==", "bodyText": "We need to make sure this provides a nice clear error message on the command line and not a big stack trace.  Often this is done by throwing an InvalidConfigurationException.", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r484183550", "createdAt": "2020-09-07T04:59:48Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/KeystoreAlreadyInUseException.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+public class KeystoreAlreadyInUseException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e298d51f2ff6316a24144ac3a1201229215f12c"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97bb18e9ba7494bc2f7b71a7d0eb47033ca5a00f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/97bb18e9ba7494bc2f7b71a7d0eb47033ca5a00f", "committedDate": "2020-09-08T13:25:42Z", "message": "Seperate out the keystore locker"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NDMzMDky", "url": "https://github.com/ConsenSys/teku/pull/2729#pullrequestreview-485433092", "createdAt": "2020-09-09T22:00:00Z", "commit": {"oid": "97bb18e9ba7494bc2f7b71a7d0eb47033ca5a00f"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjowMDowMFrOHPbynA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMzo1ODo0N1rOHPeLHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk0NjAxMg==", "bodyText": "Is this really only visible for testing? Seems like someone external should be calling it in production code.", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r485946012", "createdAt": "2020-09-09T22:00:00Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/KeystoreLocker.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import static java.nio.file.StandardOpenOption.CREATE_NEW;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.Longs;\n+import java.io.IOException;\n+import java.nio.file.FileAlreadyExistsException;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Path;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+\n+public class KeystoreLocker {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final byte[] processPID = Longs.toByteArray(ProcessHandle.current().pid());\n+\n+  @VisibleForTesting\n+  public void lockKeystoreFile(Path keystoreFile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97bb18e9ba7494bc2f7b71a7d0eb47033ca5a00f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk3NzUyMw==", "bodyText": "ProcessHandle is able to throw UnsupportedOperationException if the JVM implementation or OS can't support them.  We need to handle that and just write an empty file in that case.\nFor compatibility with non-java clients we should also ensure we write the PID in native byte order.  So calculating our PID would be:\n    byte[] pidBytes;\n    try {\n      final long pid = ProcessHandle.current().pid();\n      final ByteBuffer buffer = ByteBuffer.allocate(Long.BYTES).order(ByteOrder.nativeOrder());\n      buffer.putLong(pid);\n      pidBytes = buffer.array();\n    } catch (final UnsupportedOperationException e) {\n      LOG.warn(\"....\");\n      pidBytes = new byte[0];\n    }\n\nAnd reading the PID would be:\n    final ByteBuffer readBuffer = ByteBuffer.allocate(Long.BYTES).order(ByteOrder.nativeOrder());\n    readBuffer.put(pidBytes);\n    final long result = readBuffer.getLong(0);", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r485977523", "createdAt": "2020-09-09T23:33:00Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/KeystoreLocker.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import static java.nio.file.StandardOpenOption.CREATE_NEW;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.Longs;\n+import java.io.IOException;\n+import java.nio.file.FileAlreadyExistsException;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Path;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+\n+public class KeystoreLocker {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final byte[] processPID = Longs.toByteArray(ProcessHandle.current().pid());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97bb18e9ba7494bc2f7b71a7d0eb47033ca5a00f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4MjAwNw==", "bodyText": "We should check that the file is precisely Long.BYTES long before treating it as a PID. We need to be really conservative before deleting lock files.", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r485982007", "createdAt": "2020-09-09T23:48:24Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/KeystoreLocker.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import static java.nio.file.StandardOpenOption.CREATE_NEW;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.Longs;\n+import java.io.IOException;\n+import java.nio.file.FileAlreadyExistsException;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Path;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+\n+public class KeystoreLocker {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final byte[] processPID = Longs.toByteArray(ProcessHandle.current().pid());\n+\n+  @VisibleForTesting\n+  public void lockKeystoreFile(Path keystoreFile) {\n+    deleteIfStaleLockfileExists(keystoreFile);\n+    try {\n+      final Path keystoreLockFile =\n+          Files.write(Path.of(keystoreFile.toString() + \".lock\"), processPID, CREATE_NEW);\n+      keystoreLockFile.toFile().deleteOnExit();\n+    } catch (FileAlreadyExistsException e) {\n+      throw new InvalidConfigurationException(\"Keystore file \" + keystoreFile + \" already in use.\");\n+    } catch (IOException e) {\n+      throw new RuntimeException(\n+          \"Unexpected error at KeystoreValidatorKeyProvider when locking keystore file.\", e);\n+    }\n+  }\n+\n+  public void deleteIfStaleLockfileExists(Path keystoreFile) {\n+    Path keystoreLockfile = Path.of(keystoreFile.toString() + \".lock\");\n+    try {\n+      byte[] pidInBytes = Files.readAllBytes(keystoreLockfile);\n+      if (pidInBytes.length != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97bb18e9ba7494bc2f7b71a7d0eb47033ca5a00f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4MjYyOA==", "bodyText": "Personal taste but I'd probably do:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ProcessHandle.of(pid)\n          \n          \n            \n                        .ifPresent(\n          \n          \n            \n                            p -> {\n          \n          \n            \n                              if (!p.isAlive()) {\n          \n          \n            \n                                if (!keystoreLockfile.toFile().delete()) {\n          \n          \n            \n                                  LOG.warn(\"Could not delete stale lockfile.\");\n          \n          \n            \n                                }\n          \n          \n            \n                              }\n          \n          \n            \n                            });\n          \n          \n            \n                    ProcessHandle.of(pid)\n          \n          \n            \n                        .filter(process -> !process.isAlive())\n          \n          \n            \n                        .ifPresent(\n          \n          \n            \n                            __ -> {\n          \n          \n            \n                                if (!keystoreLockfile.toFile().delete()) {\n          \n          \n            \n                                  LOG.warn(\"Could not delete stale lockfile.\");\n          \n          \n            \n                                }\n          \n          \n            \n                            });\n          \n      \n    \n    \n  \n\nIt's also possible that the process was exiting just as we came through this code so:\nif (!keystoreLockfile.toFile().delete() && keystoreLockfile.toFile().exists()) {", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r485982628", "createdAt": "2020-09-09T23:50:24Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/KeystoreLocker.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import static java.nio.file.StandardOpenOption.CREATE_NEW;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.Longs;\n+import java.io.IOException;\n+import java.nio.file.FileAlreadyExistsException;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Path;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+\n+public class KeystoreLocker {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final byte[] processPID = Longs.toByteArray(ProcessHandle.current().pid());\n+\n+  @VisibleForTesting\n+  public void lockKeystoreFile(Path keystoreFile) {\n+    deleteIfStaleLockfileExists(keystoreFile);\n+    try {\n+      final Path keystoreLockFile =\n+          Files.write(Path.of(keystoreFile.toString() + \".lock\"), processPID, CREATE_NEW);\n+      keystoreLockFile.toFile().deleteOnExit();\n+    } catch (FileAlreadyExistsException e) {\n+      throw new InvalidConfigurationException(\"Keystore file \" + keystoreFile + \" already in use.\");\n+    } catch (IOException e) {\n+      throw new RuntimeException(\n+          \"Unexpected error at KeystoreValidatorKeyProvider when locking keystore file.\", e);\n+    }\n+  }\n+\n+  public void deleteIfStaleLockfileExists(Path keystoreFile) {\n+    Path keystoreLockfile = Path.of(keystoreFile.toString() + \".lock\");\n+    try {\n+      byte[] pidInBytes = Files.readAllBytes(keystoreLockfile);\n+      if (pidInBytes.length != 0) {\n+        long pid = Longs.fromByteArray(pidInBytes);\n+        ProcessHandle.of(pid)\n+            .ifPresent(\n+                p -> {\n+                  if (!p.isAlive()) {\n+                    if (!keystoreLockfile.toFile().delete()) {\n+                      LOG.warn(\"Could not delete stale lockfile.\");\n+                    }\n+                  }\n+                });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97bb18e9ba7494bc2f7b71a7d0eb47033ca5a00f"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4MjgzOA==", "bodyText": "We shouldn't be using equals on exceptions and shouldn't be ignoring any IOException here.  Suspect the if should just be completely removed.", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r485982838", "createdAt": "2020-09-09T23:51:10Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/KeystoreLocker.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import static java.nio.file.StandardOpenOption.CREATE_NEW;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.Longs;\n+import java.io.IOException;\n+import java.nio.file.FileAlreadyExistsException;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Path;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+\n+public class KeystoreLocker {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final byte[] processPID = Longs.toByteArray(ProcessHandle.current().pid());\n+\n+  @VisibleForTesting\n+  public void lockKeystoreFile(Path keystoreFile) {\n+    deleteIfStaleLockfileExists(keystoreFile);\n+    try {\n+      final Path keystoreLockFile =\n+          Files.write(Path.of(keystoreFile.toString() + \".lock\"), processPID, CREATE_NEW);\n+      keystoreLockFile.toFile().deleteOnExit();\n+    } catch (FileAlreadyExistsException e) {\n+      throw new InvalidConfigurationException(\"Keystore file \" + keystoreFile + \" already in use.\");\n+    } catch (IOException e) {\n+      throw new RuntimeException(\n+          \"Unexpected error at KeystoreValidatorKeyProvider when locking keystore file.\", e);\n+    }\n+  }\n+\n+  public void deleteIfStaleLockfileExists(Path keystoreFile) {\n+    Path keystoreLockfile = Path.of(keystoreFile.toString() + \".lock\");\n+    try {\n+      byte[] pidInBytes = Files.readAllBytes(keystoreLockfile);\n+      if (pidInBytes.length != 0) {\n+        long pid = Longs.fromByteArray(pidInBytes);\n+        ProcessHandle.of(pid)\n+            .ifPresent(\n+                p -> {\n+                  if (!p.isAlive()) {\n+                    if (!keystoreLockfile.toFile().delete()) {\n+                      LOG.warn(\"Could not delete stale lockfile.\");\n+                    }\n+                  }\n+                });\n+      }\n+    } catch (IOException e) {\n+      if (e.equals(new NoSuchFileException(keystoreLockfile.toString()))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97bb18e9ba7494bc2f7b71a7d0eb47033ca5a00f"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4MzY2MQ==", "bodyText": "UncheckedIOException would be a better wrapper type here.", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r485983661", "createdAt": "2020-09-09T23:54:08Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/KeystoreLocker.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import static java.nio.file.StandardOpenOption.CREATE_NEW;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.Longs;\n+import java.io.IOException;\n+import java.nio.file.FileAlreadyExistsException;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.nio.file.Path;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+\n+public class KeystoreLocker {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final byte[] processPID = Longs.toByteArray(ProcessHandle.current().pid());\n+\n+  @VisibleForTesting\n+  public void lockKeystoreFile(Path keystoreFile) {\n+    deleteIfStaleLockfileExists(keystoreFile);\n+    try {\n+      final Path keystoreLockFile =\n+          Files.write(Path.of(keystoreFile.toString() + \".lock\"), processPID, CREATE_NEW);\n+      keystoreLockFile.toFile().deleteOnExit();\n+    } catch (FileAlreadyExistsException e) {\n+      throw new InvalidConfigurationException(\"Keystore file \" + keystoreFile + \" already in use.\");\n+    } catch (IOException e) {\n+      throw new RuntimeException(\n+          \"Unexpected error at KeystoreValidatorKeyProvider when locking keystore file.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97bb18e9ba7494bc2f7b71a7d0eb47033ca5a00f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4NDAxMg==", "bodyText": "Probably just create KeystoreLocker inline as there's no need to create it if we don't go on to create a KeystoresValidatorKeyProvider.", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r485984012", "createdAt": "2020-09-09T23:55:26Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java", "diffHunk": "@@ -110,8 +110,9 @@ private Signer createSigner(\n         keyProviders.add(new YamlValidatorKeyProvider());\n       }\n \n+      KeystoreLocker keystoreLocker = new KeystoreLocker();\n       if (config.getValidatorKeystorePasswordFilePairs() != null) {\n-        keyProviders.add(new KeystoresValidatorKeyProvider());\n+        keyProviders.add(new KeystoresValidatorKeyProvider(keystoreLocker));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97bb18e9ba7494bc2f7b71a7d0eb47033ca5a00f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4NTA1NQ==", "bodyText": "We need to add tests for existing PID files that have PIDs for live processes (will need to spawn something via ProcessBuilder - maybe run /bin/sleep and skip the test if it can't be executed like on Windows).  For PID files that have a PID that isn't alive, empty PID files and PID files containing something that isn't a long.\nAnd probably also a non-existent directory to trigger an IOException while creating the file.", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r485985055", "createdAt": "2020-09-09T23:58:47Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/loader/KeystoreLockerTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import com.google.common.io.Resources;\n+import java.nio.file.Path;\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+\n+public class KeystoreLockerTest {\n+\n+  private KeystoreLocker keystoreLocker = new KeystoreLocker();\n+\n+  @Test\n+  void shouldLockKeystoreFileAndFailWhenTryingCreateLockForLockedFile() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97bb18e9ba7494bc2f7b71a7d0eb47033ca5a00f"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82ec7bf17b33cc0452c1b928549f69553af4ed31", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/82ec7bf17b33cc0452c1b928549f69553af4ed31", "committedDate": "2020-09-10T12:29:55Z", "message": "Read/write pid in native byte order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cc50cdc3109fe75a59ef574c2a5db8f67b9cc7d", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/4cc50cdc3109fe75a59ef574c2a5db8f67b9cc7d", "committedDate": "2020-09-10T15:54:05Z", "message": "Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f78bfb29204788c8a51c19ddea4a6f9e07e097c0", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/f78bfb29204788c8a51c19ddea4a6f9e07e097c0", "committedDate": "2020-09-10T16:00:34Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce26011314159961e4e382a4b74d816dbf474d35", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/ce26011314159961e4e382a4b74d816dbf474d35", "committedDate": "2020-09-10T16:34:43Z", "message": "Fix unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85b95cc1e61058eb11f66410acc0fa59a2ae91a1", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/85b95cc1e61058eb11f66410acc0fa59a2ae91a1", "committedDate": "2020-09-10T16:35:16Z", "message": "Run spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2Mzc4NDQ4", "url": "https://github.com/ConsenSys/teku/pull/2729#pullrequestreview-486378448", "createdAt": "2020-09-10T23:31:54Z", "commit": {"oid": "85b95cc1e61058eb11f66410acc0fa59a2ae91a1"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzozMTo1NFrOHQJJJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzo0NjowOFrOHQJZTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4OTA2Mg==", "bodyText": "We're still not handling UnsupportedOperationException that could be thrown by ProcessHandle.current()", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r486689062", "createdAt": "2020-09-10T23:31:54Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/KeystoreLocker.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import static java.nio.file.StandardOpenOption.CREATE_NEW;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.nio.file.FileAlreadyExistsException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+\n+public class KeystoreLocker {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final byte[] processPID = longPidToNativeByteArray(ProcessHandle.current().pid());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b95cc1e61058eb11f66410acc0fa59a2ae91a1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4OTcyNw==", "bodyText": "Why are we returning a boolean from this method when lockKeystoreFile never does anything with it?", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r486689727", "createdAt": "2020-09-10T23:34:14Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/KeystoreLocker.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import static java.nio.file.StandardOpenOption.CREATE_NEW;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.nio.file.FileAlreadyExistsException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+\n+public class KeystoreLocker {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final byte[] processPID = longPidToNativeByteArray(ProcessHandle.current().pid());\n+\n+  public void lockKeystoreFile(Path keystoreFile) {\n+    deleteIfStaleLockfileExists(keystoreFile);\n+    try {\n+      final Path keystoreLockFile =\n+          Files.write(Path.of(keystoreFile.toString() + \".lock\"), processPID, CREATE_NEW);\n+      keystoreLockFile.toFile().deleteOnExit();\n+    } catch (FileAlreadyExistsException e) {\n+      throw new InvalidConfigurationException(\"Keystore file \" + keystoreFile + \" already in use.\");\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(\"Unexpected error when trying to lock a keystore file.\", e);\n+    }\n+  }\n+\n+  static boolean deleteIfStaleLockfileExists(Path keystoreFile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b95cc1e61058eb11f66410acc0fa59a2ae91a1"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4OTg5Ng==", "bodyText": "We should have a single place where we create the path to the lock file instead of duplicating it here and in deleteIfStaleLockfileExists.", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r486689896", "createdAt": "2020-09-10T23:34:49Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/KeystoreLocker.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import static java.nio.file.StandardOpenOption.CREATE_NEW;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.nio.file.FileAlreadyExistsException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+\n+public class KeystoreLocker {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final byte[] processPID = longPidToNativeByteArray(ProcessHandle.current().pid());\n+\n+  public void lockKeystoreFile(Path keystoreFile) {\n+    deleteIfStaleLockfileExists(keystoreFile);\n+    try {\n+      final Path keystoreLockFile =\n+          Files.write(Path.of(keystoreFile.toString() + \".lock\"), processPID, CREATE_NEW);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b95cc1e61058eb11f66410acc0fa59a2ae91a1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5MTcxMg==", "bodyText": "Create a temp dir (which does exist) then ask KeystoreLocker to lock a non-existent keystore in a non-existent sub directory.", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r486691712", "createdAt": "2020-09-10T23:40:56Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/loader/KeystoreLockerTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import com.google.common.io.Resources;\n+import java.nio.file.Path;\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+\n+public class KeystoreLockerTest {\n+\n+  private KeystoreLocker keystoreLocker = new KeystoreLocker();\n+\n+  @Test\n+  void shouldLockKeystoreFileAndFailWhenTryingCreateLockForLockedFile() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4NTA1NQ=="}, "originalCommit": {"oid": "97bb18e9ba7494bc2f7b71a7d0eb47033ca5a00f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5MTkxOQ==", "bodyText": "Just realised we should be copying this to a temp dir rather than assuming we can write to a file beside the resource - theoretically the tests could be running from inside JAR files and we don't want tests writing to source directories regardless.\nAlso, the keystore doesn't actually have to exist or be valid - it's just a path we're passing to KeystoreLocker.  So just create a temp dir and then point to a non-existent keystore file in that dir (ie <tempdir>/keystore.json but no need for keystore.json to actually exist.", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r486691919", "createdAt": "2020-09-10T23:41:40Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/loader/KeystoreLockerTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import static java.nio.file.StandardOpenOption.CREATE_NEW;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+import static tech.pegasys.teku.validator.client.loader.KeystoreLocker.deleteIfStaleLockfileExists;\n+import static tech.pegasys.teku.validator.client.loader.KeystoreLocker.longPidToNativeByteArray;\n+\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+\n+public class KeystoreLockerTest {\n+\n+  private KeystoreLocker keystoreLocker = new KeystoreLocker();\n+\n+  @Test\n+  void shouldLockKeystoreFileAndFailWhenTryingCreateLockForLockedFile() throws Exception {\n+    final Path keystoreFile = Path.of(Resources.getResource(\"scryptTestVector.json\").toURI());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b95cc1e61058eb11f66410acc0fa59a2ae91a1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5Mjc4Mw==", "bodyText": "Just occurred to me that we can use our own PID for a process that's alive which then works on any platform.  And we can then just use KeystoreLocker itself to create the lock file.  Then try to run KeystoreLocker again on the same keystore and it should fail.", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r486692783", "createdAt": "2020-09-10T23:44:45Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/loader/KeystoreLockerTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import static java.nio.file.StandardOpenOption.CREATE_NEW;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+import static tech.pegasys.teku.validator.client.loader.KeystoreLocker.deleteIfStaleLockfileExists;\n+import static tech.pegasys.teku.validator.client.loader.KeystoreLocker.longPidToNativeByteArray;\n+\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+\n+public class KeystoreLockerTest {\n+\n+  private KeystoreLocker keystoreLocker = new KeystoreLocker();\n+\n+  @Test\n+  void shouldLockKeystoreFileAndFailWhenTryingCreateLockForLockedFile() throws Exception {\n+    final Path keystoreFile = Path.of(Resources.getResource(\"scryptTestVector.json\").toURI());\n+    deletePastLockfile(keystoreFile);\n+\n+    Assertions.assertThatCode(() -> keystoreLocker.lockKeystoreFile(keystoreFile))\n+        .doesNotThrowAnyException();\n+    Assertions.assertThatThrownBy(() -> keystoreLocker.lockKeystoreFile(keystoreFile))\n+        .isExactlyInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  void doNotDeleteLockfileIfTheProcessIsAlive() throws Exception {\n+    final Path keystoreFile = Path.of(Resources.getResource(\"lockfileTest1.json\").toURI());\n+    deletePastLockfile(keystoreFile);\n+\n+    Process process = new ProcessBuilder(\"/bin/sleep\", \"5\").start();\n+    long pid = process.pid();\n+    assertThat(process.isAlive()).isTrue();\n+    createLockfileWithContent(keystoreFile, longPidToNativeByteArray(pid));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b95cc1e61058eb11f66410acc0fa59a2ae91a1"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5MzE5Ng==", "bodyText": "The delete method should be private and we should just be calling the public lockKeystore method and asserting that it either works or throws an exception.  Then check the file exists with the expected content if it should have created the lock (or that the old content exists if it should have failed).\nCurrently these tests are only checking that the otherwise unused return value is correct - they aren't actually checking the keystore locking really works.", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r486693196", "createdAt": "2020-09-10T23:46:08Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/loader/KeystoreLockerTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import static java.nio.file.StandardOpenOption.CREATE_NEW;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+import static tech.pegasys.teku.validator.client.loader.KeystoreLocker.deleteIfStaleLockfileExists;\n+import static tech.pegasys.teku.validator.client.loader.KeystoreLocker.longPidToNativeByteArray;\n+\n+import com.google.common.io.Resources;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+\n+public class KeystoreLockerTest {\n+\n+  private KeystoreLocker keystoreLocker = new KeystoreLocker();\n+\n+  @Test\n+  void shouldLockKeystoreFileAndFailWhenTryingCreateLockForLockedFile() throws Exception {\n+    final Path keystoreFile = Path.of(Resources.getResource(\"scryptTestVector.json\").toURI());\n+    deletePastLockfile(keystoreFile);\n+\n+    Assertions.assertThatCode(() -> keystoreLocker.lockKeystoreFile(keystoreFile))\n+        .doesNotThrowAnyException();\n+    Assertions.assertThatThrownBy(() -> keystoreLocker.lockKeystoreFile(keystoreFile))\n+        .isExactlyInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  void doNotDeleteLockfileIfTheProcessIsAlive() throws Exception {\n+    final Path keystoreFile = Path.of(Resources.getResource(\"lockfileTest1.json\").toURI());\n+    deletePastLockfile(keystoreFile);\n+\n+    Process process = new ProcessBuilder(\"/bin/sleep\", \"5\").start();\n+    long pid = process.pid();\n+    assertThat(process.isAlive()).isTrue();\n+    createLockfileWithContent(keystoreFile, longPidToNativeByteArray(pid));\n+    assertThat(deleteIfStaleLockfileExists(keystoreFile)).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85b95cc1e61058eb11f66410acc0fa59a2ae91a1"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7885af913372f222b99489c7fc302e271c46aafa", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/7885af913372f222b99489c7fc302e271c46aafa", "committedDate": "2020-09-14T18:05:03Z", "message": "Handle process pid unsupported operation exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eea639cd9d6915ce9dc13d1846477f042be557ca", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/eea639cd9d6915ce9dc13d1846477f042be557ca", "committedDate": "2020-09-14T19:38:56Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2af437c7cdffe70ca9c54c8eec8ad7b8a6447667", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/2af437c7cdffe70ca9c54c8eec8ad7b8a6447667", "committedDate": "2020-09-14T19:39:21Z", "message": "Run Spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8c301eed43b64120fc8f857a28ec636b374d5b5", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/c8c301eed43b64120fc8f857a28ec636b374d5b5", "committedDate": "2020-09-14T19:49:10Z", "message": "Merge branch 'master' into addLockfileForSigningKeystores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d15391154ad542c4cf78289904451d2ccb519950", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/d15391154ad542c4cf78289904451d2ccb519950", "committedDate": "2020-09-14T21:02:18Z", "message": "Merge branch 'master' into addLockfileForSigningKeystores"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MjMwODk1", "url": "https://github.com/ConsenSys/teku/pull/2729#pullrequestreview-488230895", "createdAt": "2020-09-14T23:54:14Z", "commit": {"oid": "d15391154ad542c4cf78289904451d2ccb519950"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMzo1NDoxNFrOHRrg_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwMDowOToyMFrOHRrypw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwMDc5OQ==", "bodyText": "There's actually a race condition here where the file is deleted between our checking it exists and trying to read it.  We should catch FileNotFoundException explicitly and just return silently because there's no stale file to delete.\nActually there's also a race condition where two processes might be checking the stale file, deleting and creating a new one at the same time as well...  ie both processes see a stale lock file, P1 deletes it and creates its own then P2 deletes that new file and creates its own. Both processes now think they hold the lock.\nThere's no perfect solution to this, but if we took out a FileChannel lock, read the file and deleted all while holding that lock at least two Teku instances wouldn't run into that problem.", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r488300799", "createdAt": "2020-09-14T23:54:14Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/KeystoreLocker.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import static java.nio.file.StandardOpenOption.CREATE_NEW;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.nio.file.FileAlreadyExistsException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+\n+public class KeystoreLocker {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final byte[] processPID = getProcessPID();\n+\n+  public void lockKeystore(Path keystoreFile) {\n+    Path lockfilePath = Path.of(keystoreFile.toString() + \".lock\");\n+    deleteIfStaleLockfileExists(lockfilePath);\n+    try {\n+      final Path lockfile = Files.write(lockfilePath, processPID, CREATE_NEW);\n+      lockfile.toFile().deleteOnExit();\n+    } catch (FileAlreadyExistsException e) {\n+      throw new InvalidConfigurationException(\"Keystore file \" + keystoreFile + \" already in use.\");\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(\"Unexpected error when trying to lock a keystore file.\", e);\n+    }\n+  }\n+\n+  private static void deleteIfStaleLockfileExists(Path lockfilePath) {\n+    if (!lockfilePath.toFile().exists()) {\n+      return;\n+    }\n+\n+    try {\n+      byte[] pidInBytes = Files.readAllBytes(lockfilePath);\n+      if (pidInBytes.length == Long.BYTES) {\n+        long pid = nativeByteArrayToLong(pidInBytes);\n+        Optional<ProcessHandle> processHandle =\n+            ProcessHandle.of(pid).filter(ProcessHandle::isAlive);\n+        if (processHandle.isEmpty()) {\n+          if (!lockfilePath.toFile().delete() && lockfilePath.toFile().exists()) {\n+            LOG.warn(\"Could not delete stale lockfile.\");\n+          }\n+        }\n+      }\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(\"Unexpected error when trying read a keystore lockfile.\", e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d15391154ad542c4cf78289904451d2ccb519950"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwNTMxOQ==", "bodyText": "Rather than running an external program and sleeping, I'd suggest just using a really high value (probably Long.MAX_VALUE). Linux defaults to a max PID of 32768 and can only go up to 2^22 so it should be safe enough even if other OS's vary.", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r488305319", "createdAt": "2020-09-15T00:09:20Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/loader/KeystoreLockerTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import static java.nio.file.StandardOpenOption.CREATE_NEW;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static tech.pegasys.teku.validator.client.loader.KeystoreLocker.longPidToNativeByteArray;\n+import static tech.pegasys.teku.validator.client.loader.KeystoreLocker.nativeByteArrayToLong;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.api.io.TempDir;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+\n+public class KeystoreLockerTest {\n+\n+  private final KeystoreLocker keystoreLocker = new KeystoreLocker();\n+\n+  @Test\n+  void shouldLockKeystoreFileAndFailWhenTryingCreateLockForLockedFile(\n+      final @TempDir Path keystoreFile) throws Exception {\n+    Assertions.assertThatCode(() -> keystoreLocker.lockKeystore(keystoreFile))\n+        .doesNotThrowAnyException();\n+    Assertions.assertThatThrownBy(() -> keystoreLocker.lockKeystore(keystoreFile))\n+        .isExactlyInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  @EnabledOnOs({OS.LINUX, OS.MAC})\n+  void deleteLockfileIfTheProcessIsNotAlive(final @TempDir Path keystoreFile) throws Exception {\n+    Process process = new ProcessBuilder(\"/bin/sleep\", \"1\").start();\n+    Thread.sleep(1500);\n+    long pid = process.pid();\n+    assertThat(process.isAlive()).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d15391154ad542c4cf78289904451d2ccb519950"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07a9eec7f3a779ae1344b67fb3d04ddda79536ac", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/07a9eec7f3a779ae1344b67fb3d04ddda79536ac", "committedDate": "2020-09-15T14:06:38Z", "message": "Resolve comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fddb18de438bee06a758db74930db674eb27f83", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/0fddb18de438bee06a758db74930db674eb27f83", "committedDate": "2020-09-16T15:47:55Z", "message": "Fix race condition when deleting a stale lockfile and creating new"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d7fb505992db9e29e71f5dcca58e838552fff5e", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/6d7fb505992db9e29e71f5dcca58e838552fff5e", "committedDate": "2020-09-16T16:00:40Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a050b25bfc25fb836309e9fa9ae0581a2e0fd72e", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/a050b25bfc25fb836309e9fa9ae0581a2e0fd72e", "committedDate": "2020-09-16T16:02:05Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into addLockfileForSigningKeystores\n\n# Conflicts:\n#\tvalidator/client/src/test/java/tech/pegasys/teku/validator/client/loader/KeystoresValidatorKeyProviderTest.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMDgxOTI5", "url": "https://github.com/ConsenSys/teku/pull/2729#pullrequestreview-490081929", "createdAt": "2020-09-16T23:21:01Z", "commit": {"oid": "a050b25bfc25fb836309e9fa9ae0581a2e0fd72e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMzoyMTowMVrOHTHYyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMzoyMTowMVrOHTHYyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwNjAyNg==", "bodyText": "We should be doing all our IO through the FileChannel and need to ensure it and the lock are closed when we're done with it.\nIt's a bit awkward to work with but I think you wind up with:\npublic class KeystoreLocker {\n\n  private static final Logger LOG = LogManager.getLogger();\n  private final byte[] processPID = getProcessPID();\n\n  public void lockKeystore(Path keystoreFile) {\n    Path lockfilePath = Path.of(keystoreFile.toString() + \".lock\");\n    try {\n      if (lockfilePath.toFile().exists()) {\n        attemptReplaceStaleLockFile(lockfilePath);\n      } else {\n        createNewLock(lockfilePath);\n      }\n      lockfilePath.toFile().deleteOnExit();\n    } catch (FileAlreadyExistsException e) {\n      throw keystoreInUseException(keystoreFile);\n    } catch (IOException e) {\n      throw new UncheckedIOException(\"Unexpected error when trying to lock a keystore file.\", e);\n    }\n  }\n\n  public void attemptReplaceStaleLockFile(final Path lockfilePath) throws IOException {\n    try (final FileChannel channel =\n            FileChannel.open(lockfilePath, StandardOpenOption.READ, StandardOpenOption.WRITE);\n        final FileLock lock = channel.tryLock()) {\n      if (lock == null) {\n        // File is already locked, consider it a valid lock\n        throw keystoreInUseException(lockfilePath);\n      }\n      if (channel.size() != Long.BYTES) {\n        throw keystoreInUseException(lockfilePath);\n      }\n      final long pidFromFile = readPidFromFile(channel);\n      if (processIsAlive(pidFromFile)) {\n        throw keystoreInUseException(lockfilePath);\n      }\n\n      LOG.warn(\"Stale PID file for process ID {} detected. Overwriting.\", pidFromFile);\n      channel.write(ByteBuffer.wrap(processPID), 0);\n    } catch (final FileNotFoundException e) {\n      // File doesn't exist so try to create it new\n      createNewLock(lockfilePath);\n    }\n  }\n\n  private Boolean processIsAlive(final long pid) {\n    return ProcessHandle.of(pid).map(ProcessHandle::isAlive).orElse(false);\n  }\n\n  private InvalidConfigurationException keystoreInUseException(final Path keystoreFile) {\n    return new InvalidConfigurationException(\"Keystore file \" + keystoreFile + \" already in use.\");\n  }\n\n  private long readPidFromFile(final FileChannel channel) throws IOException {\n    final ByteBuffer content = ByteBuffer.allocate(Long.BYTES).order(ByteOrder.nativeOrder());\n    channel.read(content, 0);\n    return content.getLong(0);\n  }\n\n  private void createNewLock(final Path lockfilePath) throws IOException {\n    Files.write(lockfilePath, processPID, CREATE_NEW);\n  }\n\n  private static byte[] getProcessPID() {\n    byte[] pidBytes;\n    try {\n      long pid = ProcessHandle.current().pid();\n      pidBytes = longPidToNativeByteArray(pid);\n    } catch (final UnsupportedOperationException e) {\n      LOG.warn(\n          \"Process ID can not be detected. This will inhibit Teku from \"\n              + \"deleting stale validator keystore lockfiles in the future\");\n      pidBytes = new byte[0];\n    }\n    return pidBytes;\n  }\n\n  static byte[] longPidToNativeByteArray(final long pid) {\n    final ByteBuffer buffer = ByteBuffer.allocate(Long.BYTES).order(ByteOrder.nativeOrder());\n    buffer.putLong(pid);\n    return buffer.array();\n  }\n\n  static long nativeByteArrayToLong(final byte[] bytes) {\n    final ByteBuffer readBuffer = ByteBuffer.allocate(Long.BYTES).order(ByteOrder.nativeOrder());\n    readBuffer.put(bytes);\n    return readBuffer.getLong(0);\n  }\n}", "url": "https://github.com/ConsenSys/teku/pull/2729#discussion_r489806026", "createdAt": "2020-09-16T23:21:01Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/KeystoreLocker.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import static java.nio.file.StandardOpenOption.CREATE_NEW;\n+import static java.nio.file.StandardOpenOption.WRITE;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+import java.nio.file.FileAlreadyExistsException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+\n+public class KeystoreLocker {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final byte[] processPID = getProcessPID();\n+\n+  public void lockKeystore(Path keystoreFile) {\n+    Path lockfilePath = Path.of(keystoreFile.toString() + \".lock\");\n+    try {\n+      Path lockfile;\n+      if (lockfilePath.toFile().exists()) {\n+        FileLock lockfileLock = FileChannel.open(lockfilePath, WRITE).lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a050b25bfc25fb836309e9fa9ae0581a2e0fd72e"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4bd3dcb74452962b328b01409d5ef4683e69eef", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/c4bd3dcb74452962b328b01409d5ef4683e69eef", "committedDate": "2020-09-17T17:28:07Z", "message": "Replace KeystoreLocker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06eae9fdf85b721e706a3e94e722a73b09cf38b9", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/06eae9fdf85b721e706a3e94e722a73b09cf38b9", "committedDate": "2020-09-17T17:29:04Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0990509c773e354bc4e37b4adea905c4ee8414a", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/c0990509c773e354bc4e37b4adea905c4ee8414a", "committedDate": "2020-09-17T17:29:42Z", "message": "Merge branch 'master' into addLockfileForSigningKeystores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21ddb00bf15a947f37e992827936a924821f3334", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/21ddb00bf15a947f37e992827936a924821f3334", "committedDate": "2020-09-17T20:54:59Z", "message": "Merge branch 'master' into addLockfileForSigningKeystores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca884fad7ec320e58f4cc87c9f4b618978288d90", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/ca884fad7ec320e58f4cc87c9f4b618978288d90", "committedDate": "2020-09-17T21:31:35Z", "message": "Merge branch 'master' into addLockfileForSigningKeystores"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMTk1MjIx", "url": "https://github.com/ConsenSys/teku/pull/2729#pullrequestreview-491195221", "createdAt": "2020-09-18T06:54:09Z", "commit": {"oid": "ca884fad7ec320e58f4cc87c9f4b618978288d90"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0281f67a02502e8276db85f2dd0feb3f12b38559", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/0281f67a02502e8276db85f2dd0feb3f12b38559", "committedDate": "2020-09-18T13:28:09Z", "message": "Merge branch 'master' into addLockfileForSigningKeystores"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3577, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}