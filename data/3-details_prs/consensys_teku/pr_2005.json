{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MTM0NTg0", "number": 2005, "title": "Fix snappy blocking", "bodyText": "PR Description\nIn the Eth2 RPC code replace blocking handling (aka InputStream) with non-blocking ByteBuf processing.\nWhat was done:\n\nAdopted Netty Snappy framed Encoder/Decoder for standalone work\nReplaced all InputStream's with ByteBuf's in RPC code\nAdopted and extended tests for ByteBuf\n\nBenefits:\n\nNo thread growth for serving InputStream.read() waiting for the next response chunk from the wire\nNo accident thread leaks in some boundary cases\nLess bytes copying\n\nDrawbacks:\n\nToo complex and error prone to work with ByteBufs manually since you need to take care of message fragmentation, sticking and ByteBuf reference counting\nToo low-level code in a high-level module\n\nTODO\n\n Test for ByteBuf leaks\n Seems like checksum incompatibility between Xerial and Netty compressors\n Respect length limits", "createdAt": "2020-05-29T14:19:53Z", "url": "https://github.com/ConsenSys/teku/pull/2005", "merged": true, "mergeCommit": {"oid": "320b66c77e32b9f54b1291edbf2b714029fb19ef"}, "closed": true, "closedAt": "2020-06-23T10:59:36Z", "author": {"login": "Nashatyrev"}, "timelineItems": {"totalCount": 74, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmCkTYAH2gAyNDI1MTM0NTg0OmNlZDUzYjJmNWM4YTg5ZTI4NjFlNjliMWYwZmRjOTlkZmM2MGM4YTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuDHtWAH2gAyNDI1MTM0NTg0Ojk0ZmNiNTQ0MDJkMDY3MGE4MDFjOWVlNDU4NTExMmFhYzEwZTYyM2Q=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ced53b2f5c8a89e2861e69b1f0fdc99dfc60c8a9", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/ced53b2f5c8a89e2861e69b1f0fdc99dfc60c8a9", "committedDate": "2020-05-29T13:34:40Z", "message": "Experimental snappy decoder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7177049a53d76a82f97fc335e8169ca8ba6e306", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/c7177049a53d76a82f97fc335e8169ca8ba6e306", "committedDate": "2020-05-29T14:15:16Z", "message": "Add initial draft of Netty decoder for Snappy compressed RPC response chunks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMDE3NDQ4", "url": "https://github.com/ConsenSys/teku/pull/2005#pullrequestreview-421017448", "createdAt": "2020-05-29T14:39:32Z", "commit": {"oid": "c7177049a53d76a82f97fc335e8169ca8ba6e306"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDozOTozM1rOGcfq1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDo0NzoyNFrOGcf_Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzMjE4MA==", "bodyText": "Don't we want to decode regardless of the responseCode?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (respCode == 0 && compressed) {\n          \n          \n            \n                  if (compressed) {", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r432532180", "createdAt": "2020-05-29T14:39:33Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/RpcResponseChunkDecoder.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.core.encodings;\n+\n+import static java.lang.Integer.min;\n+\n+import io.libp2p.etc.types.ByteBufExtKt;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.compression.SnappyFrameDecoder;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Netty decoder which decodes ssz_snappy or raw ssz Eth2 RPC response chunks from inbound response\n+ * stream\n+ */\n+public class RpcResponseChunkDecoder extends SnappyFrameDecoder {\n+\n+  private final boolean compressed;\n+  private int respCode;\n+  private long remainingRawLength = 0;\n+  private boolean decodePayload = false;\n+  private final List<ByteBuf> rawDataFrames = new ArrayList<>();\n+\n+  /**\n+   * Create a new decoder\n+   *\n+   * @param compressed {@code true} if the stream is Snappy compressed, {@code false} if the stream\n+   *     is plain ssz\n+   */\n+  public RpcResponseChunkDecoder(boolean compressed) {\n+    super(true);\n+    this.compressed = compressed;\n+  }\n+\n+  @Override\n+  protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n+    if (!decodePayload) {\n+      if (in.readableBytes() < 2) {\n+        // wait for more byte to read resp code and length fields\n+        return;\n+      }\n+      int rollbackIndex = in.readerIndex();\n+\n+      byte respCode = in.readByte();\n+      long length = ByteBufExtKt.readUvarint(in);\n+      if (length < 0) {\n+        // wait for more byte to read length field\n+        in.readerIndex(rollbackIndex);\n+        return;\n+      }\n+      this.respCode = respCode;\n+      this.remainingRawLength = length;\n+      decodePayload = true;\n+    } else {\n+      ArrayList<Object> rawOut = new ArrayList<>();\n+      if (respCode == 0 && compressed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7177049a53d76a82f97fc335e8169ca8ba6e306"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzNzM2Mw==", "bodyText": "Should this be a while?:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (!rawOut.isEmpty()) {\n          \n          \n            \n                  while (!rawOut.isEmpty()) {", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r432537363", "createdAt": "2020-05-29T14:47:24Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/RpcResponseChunkDecoder.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.core.encodings;\n+\n+import static java.lang.Integer.min;\n+\n+import io.libp2p.etc.types.ByteBufExtKt;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.compression.SnappyFrameDecoder;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Netty decoder which decodes ssz_snappy or raw ssz Eth2 RPC response chunks from inbound response\n+ * stream\n+ */\n+public class RpcResponseChunkDecoder extends SnappyFrameDecoder {\n+\n+  private final boolean compressed;\n+  private int respCode;\n+  private long remainingRawLength = 0;\n+  private boolean decodePayload = false;\n+  private final List<ByteBuf> rawDataFrames = new ArrayList<>();\n+\n+  /**\n+   * Create a new decoder\n+   *\n+   * @param compressed {@code true} if the stream is Snappy compressed, {@code false} if the stream\n+   *     is plain ssz\n+   */\n+  public RpcResponseChunkDecoder(boolean compressed) {\n+    super(true);\n+    this.compressed = compressed;\n+  }\n+\n+  @Override\n+  protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n+    if (!decodePayload) {\n+      if (in.readableBytes() < 2) {\n+        // wait for more byte to read resp code and length fields\n+        return;\n+      }\n+      int rollbackIndex = in.readerIndex();\n+\n+      byte respCode = in.readByte();\n+      long length = ByteBufExtKt.readUvarint(in);\n+      if (length < 0) {\n+        // wait for more byte to read length field\n+        in.readerIndex(rollbackIndex);\n+        return;\n+      }\n+      this.respCode = respCode;\n+      this.remainingRawLength = length;\n+      decodePayload = true;\n+    } else {\n+      ArrayList<Object> rawOut = new ArrayList<>();\n+      if (respCode == 0 && compressed) {\n+        super.decode(ctx, in, rawOut);\n+      } else {\n+        rawOut.add(in.readSlice(min(in.readableBytes(), (int) remainingRawLength)).retain());\n+      }\n+\n+      if (remainingRawLength == 0) {\n+        // special case for chunk with 0 length\n+        rawOut.add(Unpooled.EMPTY_BUFFER);\n+      }\n+\n+      if (!rawOut.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7177049a53d76a82f97fc335e8169ca8ba6e306"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6749db2affcf96cd453791207d144f711ddc8964", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/6749db2affcf96cd453791207d144f711ddc8964", "committedDate": "2020-06-03T09:43:58Z", "message": "Error response should also be compressed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c6356aaf99a7dc8fda09e6e3b2d20f7a628889a", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/8c6356aaf99a7dc8fda09e6e3b2d20f7a628889a", "committedDate": "2020-06-05T15:16:05Z", "message": "Merge remote-tracking branch 'pegasys/master' into fix-snappy-blocking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cb4e4ae6dbceda5bb1db740b7c876280d826ef9", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/1cb4e4ae6dbceda5bb1db740b7c876280d826ef9", "committedDate": "2020-06-05T16:12:52Z", "message": "Initial copy of netty SnappyFrameDecoder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71fdaae0a1b4985c2089a5c420920bdb644e2107", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/71fdaae0a1b4985c2089a5c420920bdb644e2107", "committedDate": "2020-06-05T16:20:44Z", "message": "Draft commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cb73986fd148e96ad0f7242ee7ac391f4465079", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/8cb73986fd148e96ad0f7242ee7ac391f4465079", "committedDate": "2020-06-08T17:36:49Z", "message": "Draft RPC response decoders commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1eadef3b0fb255b553ff16ae66faa4aa5f33ede9", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/1eadef3b0fb255b553ff16ae66faa4aa5f33ede9", "committedDate": "2020-06-10T10:47:27Z", "message": "Something what compiles and can potentially work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "502df73e3a2a75dae6fa66fbd7170160e5346dea", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/502df73e3a2a75dae6fa66fbd7170160e5346dea", "committedDate": "2020-06-10T12:16:01Z", "message": "Fix a bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be7da417e14c5b70aef1672461465191fede68af", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/be7da417e14c5b70aef1672461465191fede68af", "committedDate": "2020-06-10T15:09:10Z", "message": "Fix another bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30983e6d9cc4c80fe66ba6faf5ec2c332fed8d68", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/30983e6d9cc4c80fe66ba6faf5ec2c332fed8d68", "committedDate": "2020-06-10T15:11:41Z", "message": "Delegate refcounting to CompositeByteBuf as it may be retained with output ByteBuf."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7327c30c738fa339b1415d372ba4b8e48d03439b", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/7327c30c738fa339b1415d372ba4b8e48d03439b", "committedDate": "2020-06-10T15:12:41Z", "message": "Replace static exception instance with factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b1150248e854753af1505862b7511be9710f583", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/1b1150248e854753af1505862b7511be9710f583", "committedDate": "2020-06-10T15:13:46Z", "message": "Release ByteBuf after message decoding. Copy bytes to decoder as it may retain Bytes.slice()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1bb12da961369dc8d7d5ba15537a4f98c468a00", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/e1bb12da961369dc8d7d5ba15537a4f98c468a00", "committedDate": "2020-06-10T15:14:45Z", "message": "Temp comment tests. Adjust and pass RpcRequestDecoderTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c5493c9a50fadd69e80b90f5d2b642624d7332d", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/4c5493c9a50fadd69e80b90f5d2b642624d7332d", "committedDate": "2020-06-10T17:43:18Z", "message": "RpcResponseDecoder: decode all available messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52457aa84b3c3a8f44e7eaf57409d831f92af7b7", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/52457aa84b3c3a8f44e7eaf57409d831f92af7b7", "committedDate": "2020-06-11T10:00:30Z", "message": "Temp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97ed48f7933680ceca49eb9f185300bf5673fbfa", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/97ed48f7933680ceca49eb9f185300bf5673fbfa", "committedDate": "2020-06-11T14:40:40Z", "message": "Create compressor on each chunk to avoid side effects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c020c9fb691301ae3d900b4b020a3a4e2ffed810", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/c020c9fb691301ae3d900b4b020a3a4e2ffed810", "committedDate": "2020-06-11T14:41:21Z", "message": "Throw EXTRA_DATA_APPENDED only when extra data is present in buffer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eede4cd030efdf240623c3377571992d00897031", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/eede4cd030efdf240623c3377571992d00897031", "committedDate": "2020-06-11T16:16:32Z", "message": "Release unprocessed retained buffers on complete()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c71c3736df1cb7e5c23b443c18a5f90a40235d12", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/c71c3736df1cb7e5c23b443c18a5f90a40235d12", "committedDate": "2020-06-11T16:17:07Z", "message": "Add Compressor.uncompressComplete() to release retained unprocessed buffers and throw error in this case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0db1dcaa52db0b7152cf09c7bc34addf7433950", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/a0db1dcaa52db0b7152cf09c7bc34addf7433950", "committedDate": "2020-06-11T17:10:56Z", "message": "Release any buffered ByteBufs on uncompression failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63bd8acd54668cc967826f1c10c9f2923e5446d7", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/63bd8acd54668cc967826f1c10c9f2923e5446d7", "committedDate": "2020-06-11T17:13:22Z", "message": "Adjust SnappyCompressionTest. Make more ByteBuf test slices"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa9f822c2552c28856ff6ea6d4b5b4d3008de27a", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/fa9f822c2552c28856ff6ea6d4b5b4d3008de27a", "committedDate": "2020-06-16T12:32:16Z", "message": "Create a disposable decompressor instance via Compressor.createDecompressor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd0b9f303b896324ecc091f466ff04303ef032aa", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/dd0b9f303b896324ecc091f466ff04303ef032aa", "committedDate": "2020-06-16T14:50:48Z", "message": "Restrict reusing disposable decoder. Throw MESSAGE_TRUNCATED on complete() when no message was decoded"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c13e6f410605c5dc35f8d641fa76bebc69e9102b", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/c13e6f410605c5dc35f8d641fa76bebc69e9102b", "committedDate": "2020-06-16T14:51:20Z", "message": "Adjust LengthPrefixedEncodingTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "660dfd8681494acb928a25a9e624c16b6b1b989b", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/660dfd8681494acb928a25a9e624c16b6b1b989b", "committedDate": "2020-06-16T16:38:25Z", "message": "Add RpcRequestHandler.active() method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6160267044189935f5c202f6968916f4283e26b4", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/6160267044189935f5c202f6968916f4283e26b4", "committedDate": "2020-06-16T18:25:16Z", "message": "Some fixes for Eth2OutgoingRequestHandler. Adjusted tests Eth2Incoming/OutgoingRequestHandlerTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d626ad79afdbe62ee966ebe41e1b97acd1e76ac", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/9d626ad79afdbe62ee966ebe41e1b97acd1e76ac", "committedDate": "2020-06-16T18:30:49Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e780cbed485ee844df4f18c2d205a15d7b07025", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/4e780cbed485ee844df4f18c2d205a15d7b07025", "committedDate": "2020-06-16T18:34:29Z", "message": "Remove unused field"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28983686b94e0a43f64f8db0b7eeee12aeea66bf", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/28983686b94e0a43f64f8db0b7eeee12aeea66bf", "committedDate": "2020-06-16T18:39:51Z", "message": "Resolve warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebfa00302b748c164f9ca2e93c1a7708e1d0440c", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/ebfa00302b748c164f9ca2e93c1a7708e1d0440c", "committedDate": "2020-06-16T19:49:08Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd641f16d929624e22d48a13f43d0c8f2bc1ca5a", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/bd641f16d929624e22d48a13f43d0c8f2bc1ca5a", "committedDate": "2020-06-17T09:55:57Z", "message": "Fix test on Win"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1d35645c24ac2e943c61b904f06f84299d569b8", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/a1d35645c24ac2e943c61b904f06f84299d569b8", "committedDate": "2020-06-17T09:57:55Z", "message": "Fix errorprone warning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9921456ddf52016d45dc91a4d3734c650f369154", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/9921456ddf52016d45dc91a4d3734c650f369154", "committedDate": "2020-06-17T10:12:37Z", "message": "Fix more errorprone warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b08e4b128ce19a19b3e3db83fbaace34f8df8e2e", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/b08e4b128ce19a19b3e3db83fbaace34f8df8e2e", "committedDate": "2020-06-17T11:13:20Z", "message": "Should invoke RpcHandler.complete() when remote write is closed on the stream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c3bf2f76a9991337a79a84c4dd499dd77a3b015", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/0c3bf2f76a9991337a79a84c4dd499dd77a3b015", "committedDate": "2020-06-17T11:44:21Z", "message": "Add a bit more info to error log msg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08374b5a6d12aab3a852ee787331097f105a8043", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/08374b5a6d12aab3a852ee787331097f105a8043", "committedDate": "2020-06-17T13:55:33Z", "message": "Add Netty based snappy encoder. Get rid of xerial dependency. Fix and enable CRC validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c80e3b54d67f217cb32e6c4a1b5d82c47002c31", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/4c80e3b54d67f217cb32e6c4a1b5d82c47002c31", "committedDate": "2020-06-17T13:59:55Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81f7a0da670cdd99083f3097e98ccbb0c4cdb6e0", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/81f7a0da670cdd99083f3097e98ccbb0c4cdb6e0", "committedDate": "2020-06-17T14:46:29Z", "message": "Add ByteBuf slicing test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80b655482040c4ff41277bb95a0385be2e3adac9", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/80b655482040c4ff41277bb95a0385be2e3adac9", "committedDate": "2020-06-17T14:56:44Z", "message": "Minor fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35de5c43672c9ffd779a0a7fda1a1e82b5f1f3bd", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/35de5c43672c9ffd779a0a7fda1a1e82b5f1f3bd", "committedDate": "2020-06-17T15:11:46Z", "message": "Change buggy Bytes.wrapByteBuf() to safe copy variant (see https://github.com/apache/incubator-tuweni/issues/88)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33da4d0276e22c73afd980c684631007ab49ec19", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/33da4d0276e22c73afd980c684631007ab49ec19", "committedDate": "2020-06-17T16:52:01Z", "message": "Some interfaces refactoring. Add javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b78a62c379292fb74a3c7ae3865ddad47079d57", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/1b78a62c379292fb74a3c7ae3865ddad47079d57", "committedDate": "2020-06-17T17:13:45Z", "message": "It's better not to consume the ByteBuf came with Gossip message event"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76621982eb6e90e692b64bf6219b3ccb7ea5d322", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/76621982eb6e90e692b64bf6219b3ccb7ea5d322", "committedDate": "2020-06-17T17:32:30Z", "message": "Temporarily return back static exception instance. Would fix in a separate PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc9b5d8b314e1443107d7ac146e15e2eea4c3baf", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/cc9b5d8b314e1443107d7ac146e15e2eea4c3baf", "committedDate": "2020-06-17T17:37:55Z", "message": "Compressor has now disposable Decompressor factory, so no need to pass Compressor factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35424d4f273709c8eb4dd6f54ff0d643e50f8b74", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/35424d4f273709c8eb4dd6f54ff0d643e50f8b74", "committedDate": "2020-06-17T17:38:54Z", "message": "Minor javadoc fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b01a3b478482951823e4e3a6cba02d5a6282c9d3", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/b01a3b478482951823e4e3a6cba02d5a6282c9d3", "committedDate": "2020-06-17T18:04:10Z", "message": "Remove commented code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22afeff54f30ded0d52db684af46591e0f1e32af", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/22afeff54f30ded0d52db684af46591e0f1e32af", "committedDate": "2020-06-17T18:04:58Z", "message": "Use new SnappyFrameEncoder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7905a5e34471c880f4a48df722a02115af8bf506", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/7905a5e34471c880f4a48df722a02115af8bf506", "committedDate": "2020-06-17T18:06:05Z", "message": "Remove commented code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de1e0e35901be6d33b72a1ee9f36612549b1bd9f", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/de1e0e35901be6d33b72a1ee9f36612549b1bd9f", "committedDate": "2020-06-17T18:09:03Z", "message": "Merge remote-tracking branch 'pegasys/master' into fix-snappy-blocking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c77a1d085701a15f5d2cdc1feca30cde2d33f929", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/c77a1d085701a15f5d2cdc1feca30cde2d33f929", "committedDate": "2020-06-17T18:20:46Z", "message": "Adjust xerial snappy dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/9d789946533d88950e8a8c76db5202d65149ef39", "committedDate": "2020-06-17T18:23:00Z", "message": "Minor fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTEwMDEz", "url": "https://github.com/ConsenSys/teku/pull/2005#pullrequestreview-433510013", "createdAt": "2020-06-18T17:43:25Z", "commit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "state": "COMMENTED", "comments": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzo0MzoyNVrOGl5xEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMzowODo0OVrOGmC-pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5Njk0Nw==", "bodyText": "(nit) We usually put internal classes at the bottom of the file.", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442396947", "createdAt": "2020-06-18T17:43:25Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/LengthPrefixedPayloadDecoder.java", "diffHunk": "@@ -14,102 +14,130 @@\n package tech.pegasys.teku.networking.eth2.rpc.core.encodings;\n \n import static tech.pegasys.teku.util.config.Constants.MAX_CHUNK_SIZE;\n-import static tech.pegasys.teku.util.iostreams.IOStreamConstants.END_OF_STREAM;\n \n-import com.google.protobuf.CodedInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n+import io.libp2p.etc.types.ByteBufExtKt;\n+import io.netty.buffer.ByteBuf;\n+import java.util.Optional;\n import org.apache.tuweni.bytes.Bytes;\n import tech.pegasys.teku.networking.eth2.rpc.core.RpcException;\n import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.Compressor;\n+import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.Compressor.Decompressor;\n import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.exceptions.CompressionException;\n-import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.exceptions.PayloadLargerThanExpectedException;\n-import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.exceptions.PayloadSmallerThanExpectedException;\n \n-class LengthPrefixedPayloadDecoder<T> {\n-  private static final Logger LOG = LogManager.getLogger();\n+class LengthPrefixedPayloadDecoder<T> implements RpcByteBufDecoder<T> {\n \n-  static final Bytes MAX_CHUNK_SIZE_PREFIX = ProtobufEncoder.encodeVarInt(MAX_CHUNK_SIZE);\n+  private static class VarIntDecoder extends AbstractByteBufDecoder<Long> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMjQ3Ng==", "bodyText": "Seems like RpcException.EXTRA_DATA_APPENDED would be a better error here?", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442402476", "createdAt": "2020-06-18T17:53:14Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/AbstractByteBufDecoder.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.core.encodings;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.CompositeByteBuf;\n+import io.netty.buffer.Unpooled;\n+import java.util.Optional;\n+import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.exceptions.PayloadSmallerThanExpectedException;\n+\n+/**\n+ * Abstract {@link ByteBufDecoder} implementation which handles unprocessed {@link ByteBuf}s\n+ *\n+ * <p>This class is a standalone analog of Netty {@link io.netty.handler.codec.ByteToMessageDecoder}\n+ */\n+public abstract class AbstractByteBufDecoder<TMessage>\n+    implements ByteBufDecoder<TMessage, RuntimeException> {\n+\n+  private CompositeByteBuf compositeByteBuf = Unpooled.compositeBuffer();\n+\n+  @Override\n+  public synchronized Optional<TMessage> decodeOneMessage(ByteBuf in) {\n+    if (!in.isReadable()) {\n+      return Optional.empty();\n+    }\n+    compositeByteBuf.addComponent(true, in.retainedSlice());\n+    try {\n+      Optional<TMessage> outBuf;\n+      while (true) {\n+        int readerIndex = compositeByteBuf.readerIndex();\n+        outBuf = decodeOneImpl(compositeByteBuf);\n+        if (outBuf.isPresent()\n+            || readerIndex == compositeByteBuf.readerIndex()\n+            || compositeByteBuf.readableBytes() == 0) {\n+          break;\n+        }\n+      }\n+      if (outBuf.isPresent()) {\n+        in.skipBytes(in.readableBytes() - compositeByteBuf.readableBytes());\n+        compositeByteBuf.release();\n+        compositeByteBuf = Unpooled.compositeBuffer();\n+      } else {\n+        in.skipBytes(in.readableBytes());\n+      }\n+      return outBuf;\n+    } catch (Throwable t) {\n+      compositeByteBuf.release();\n+      compositeByteBuf = Unpooled.compositeBuffer();\n+      throw t;\n+    }\n+  }\n+\n+  @Override\n+  public void complete() {\n+    if (compositeByteBuf.isReadable()) {\n+      compositeByteBuf.release();\n+      throw new PayloadSmallerThanExpectedException(\n+          \"Rpc stream complete, but unprocessed data left: \" + compositeByteBuf.readableBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQxNDY4MQ==", "bodyText": "What about:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      // making a copy here since the Bytes.wrapByteBuf(buf).slice(...)\n          \n          \n            \n                      // would be broken after [in] buffer is released\n          \n          \n            \n                      byte[] arr = new byte[ret.get().readableBytes()];\n          \n          \n            \n                      ret.get().readBytes(arr);\n          \n          \n            \n                      Bytes bytes = Bytes.wrap(arr);\n          \n          \n            \n                      Bytes bytes = Bytes.wrapByteBuf(ret.get()).copy();", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442414681", "createdAt": "2020-06-18T18:15:47Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/LengthPrefixedPayloadDecoder.java", "diffHunk": "@@ -14,102 +14,130 @@\n package tech.pegasys.teku.networking.eth2.rpc.core.encodings;\n \n import static tech.pegasys.teku.util.config.Constants.MAX_CHUNK_SIZE;\n-import static tech.pegasys.teku.util.iostreams.IOStreamConstants.END_OF_STREAM;\n \n-import com.google.protobuf.CodedInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n+import io.libp2p.etc.types.ByteBufExtKt;\n+import io.netty.buffer.ByteBuf;\n+import java.util.Optional;\n import org.apache.tuweni.bytes.Bytes;\n import tech.pegasys.teku.networking.eth2.rpc.core.RpcException;\n import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.Compressor;\n+import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.Compressor.Decompressor;\n import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.exceptions.CompressionException;\n-import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.exceptions.PayloadLargerThanExpectedException;\n-import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.exceptions.PayloadSmallerThanExpectedException;\n \n-class LengthPrefixedPayloadDecoder<T> {\n-  private static final Logger LOG = LogManager.getLogger();\n+class LengthPrefixedPayloadDecoder<T> implements RpcByteBufDecoder<T> {\n \n-  static final Bytes MAX_CHUNK_SIZE_PREFIX = ProtobufEncoder.encodeVarInt(MAX_CHUNK_SIZE);\n+  private static class VarIntDecoder extends AbstractByteBufDecoder<Long> {\n+    @Override\n+    protected Optional<Long> decodeOneImpl(ByteBuf in) {\n+      long length = ByteBufExtKt.readUvarint(in);\n+      if (length < 0) {\n+        // wait for more byte to read length field\n+        return Optional.empty();\n+      }\n+      return Optional.of(length);\n+    }\n+  }\n \n   private final RpcPayloadEncoder<T> payloadEncoder;\n   private final Compressor compressor;\n+  private Optional<Decompressor> decompressor = Optional.empty();\n+  private Optional<VarIntDecoder> varIntDecoder = Optional.empty();\n+  private boolean decoded = false;\n+  private boolean disposed = false;\n \n   public LengthPrefixedPayloadDecoder(\n       final RpcPayloadEncoder<T> payloadEncoder, final Compressor compressor) {\n     this.payloadEncoder = payloadEncoder;\n     this.compressor = compressor;\n   }\n \n-  public T decodePayload(final InputStream inputStream) throws RpcException {\n-    try {\n-      final int uncompressedPayloadSize = processLengthPrefixHeader(inputStream);\n-      return processPayload(inputStream, uncompressedPayloadSize);\n-    } catch (PayloadSmallerThanExpectedException e) {\n-      throw RpcException.PAYLOAD_TRUNCATED;\n-    } catch (PayloadLargerThanExpectedException e) {\n-      throw RpcException.EXTRA_DATA_APPENDED;\n-    } catch (CompressionException e) {\n-      LOG.debug(\"Failed to uncompress rpc payload\", e);\n-      throw RpcException.FAILED_TO_UNCOMPRESS_MESSAGE;\n-    } catch (IOException e) {\n-      LOG.error(\"Unable to decode rpc payload\", e);\n-      throw RpcException.SERVER_ERROR;\n+  @Override\n+  public Optional<T> decodeOneMessage(final ByteBuf in) throws RpcException {\n+    if (decoded || disposed) {\n+      throw new IllegalStateException(\"Trying to reuse disposable LengthPrefixedPayloadDecoder\");\n+    }\n+    if (decompressor.isEmpty()) {\n+      readLengthPrefixHeader(in)\n+          .ifPresent(len -> decompressor = Optional.of(compressor.createDecompressor(len)));\n+    }\n+    if (decompressor.isPresent()) {\n+      Optional<ByteBuf> ret = decompressor.get().decodeOneMessage(in);\n+      if (ret.isPresent()) {\n+        decompressor = Optional.empty();\n+        try {\n+          // making a copy here since the Bytes.wrapByteBuf(buf).slice(...)\n+          // would be broken after [in] buffer is released\n+          byte[] arr = new byte[ret.get().readableBytes()];\n+          ret.get().readBytes(arr);\n+          Bytes bytes = Bytes.wrap(arr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNjQxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * https://github.com/netty/netty/blob/4.1/codec/src/main/java/io/netty/handler/codec/compression/SnappyFramedDecoder.java\n          \n          \n            \n             * https://github.com/netty/netty/blob/4.1/codec/src/main/java/io/netty/handler/codec/compression/SnappyFrameDecoder.java", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442426419", "createdAt": "2020-06-18T18:37:30Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/compression/snappy/SnappyFrameDecoder.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.snappy;\n+\n+import static tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.snappy.SnappyUtil.validateChecksum;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.compression.CompressionException;\n+import io.netty.handler.codec.compression.Snappy;\n+import java.util.Optional;\n+import tech.pegasys.teku.networking.eth2.rpc.core.encodings.AbstractByteBufDecoder;\n+\n+/**\n+ * This class is mostly borrowed from the Netty implementation:\n+ * https://github.com/netty/netty/blob/4.1/codec/src/main/java/io/netty/handler/codec/compression/SnappyFramedDecoder.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyNzM4Nw==", "bodyText": "Looks like we're enabling these checks by default", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442427387", "createdAt": "2020-06-18T18:39:26Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/compression/snappy/SnappyFrameDecoder.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.snappy;\n+\n+import static tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.snappy.SnappyUtil.validateChecksum;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.compression.CompressionException;\n+import io.netty.handler.codec.compression.Snappy;\n+import java.util.Optional;\n+import tech.pegasys.teku.networking.eth2.rpc.core.encodings.AbstractByteBufDecoder;\n+\n+/**\n+ * This class is mostly borrowed from the Netty implementation:\n+ * https://github.com/netty/netty/blob/4.1/codec/src/main/java/io/netty/handler/codec/compression/SnappyFramedDecoder.java\n+ *\n+ * <p>Uncompresses a {@link ByteBuf} encoded with the Snappy framing format.\n+ *\n+ * <p>See <a href=\"https://github.com/google/snappy/blob/master/framing_format.txt\">Snappy framing\n+ * format</a>.\n+ *\n+ * <p>Note that by default, validation of the checksum header in each chunk is DISABLED for\n+ * performance improvements. If performance is less of an issue, or if you would prefer the safety\n+ * that checksum validation brings, please use the {@link #SnappyFrameDecoder(boolean)} constructor\n+ * with the argument set to {@code true}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQyODAxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Creates a new snappy-framed decoder with validation of checksums turned OFF. To turn checksum\n          \n          \n            \n               * validation on, please use the alternate {@link #SnappyFrameDecoder(boolean)} constructor.\n          \n          \n            \n               */\n          \n          \n            \n               * Creates a new snappy-framed decoder with validation of checksums turned on. To turn checksum\n          \n          \n            \n               * validation off, please use the alternate {@link #SnappyFrameDecoder(boolean)} constructor.\n          \n          \n            \n               */", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442428016", "createdAt": "2020-06-18T18:40:34Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/compression/snappy/SnappyFrameDecoder.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.snappy;\n+\n+import static tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.snappy.SnappyUtil.validateChecksum;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.compression.CompressionException;\n+import io.netty.handler.codec.compression.Snappy;\n+import java.util.Optional;\n+import tech.pegasys.teku.networking.eth2.rpc.core.encodings.AbstractByteBufDecoder;\n+\n+/**\n+ * This class is mostly borrowed from the Netty implementation:\n+ * https://github.com/netty/netty/blob/4.1/codec/src/main/java/io/netty/handler/codec/compression/SnappyFramedDecoder.java\n+ *\n+ * <p>Uncompresses a {@link ByteBuf} encoded with the Snappy framing format.\n+ *\n+ * <p>See <a href=\"https://github.com/google/snappy/blob/master/framing_format.txt\">Snappy framing\n+ * format</a>.\n+ *\n+ * <p>Note that by default, validation of the checksum header in each chunk is DISABLED for\n+ * performance improvements. If performance is less of an issue, or if you would prefer the safety\n+ * that checksum validation brings, please use the {@link #SnappyFrameDecoder(boolean)} constructor\n+ * with the argument set to {@code true}.\n+ */\n+public class SnappyFrameDecoder extends AbstractByteBufDecoder<ByteBuf> {\n+\n+  private enum ChunkType {\n+    STREAM_IDENTIFIER,\n+    COMPRESSED_DATA,\n+    UNCOMPRESSED_DATA,\n+    RESERVED_UNSKIPPABLE,\n+    RESERVED_SKIPPABLE\n+  }\n+\n+  private static final int SNAPPY_IDENTIFIER_LEN = 6;\n+  private static final int MAX_UNCOMPRESSED_DATA_SIZE = 65536 + 4;\n+\n+  private final Snappy snappy = new Snappy();\n+  private final boolean validateChecksums;\n+\n+  private boolean started;\n+  private boolean corrupted;\n+\n+  /**\n+   * Creates a new snappy-framed decoder with validation of checksums turned OFF. To turn checksum\n+   * validation on, please use the alternate {@link #SnappyFrameDecoder(boolean)} constructor.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjIzNw==", "bodyText": "Shouldn't we make sure that started == false?  I put together a quick test and it looks like we'll accept extra snappy headers prepended to the message.", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442442237", "createdAt": "2020-06-18T19:06:48Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/compression/snappy/SnappyFrameDecoder.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.snappy;\n+\n+import static tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.snappy.SnappyUtil.validateChecksum;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.compression.CompressionException;\n+import io.netty.handler.codec.compression.Snappy;\n+import java.util.Optional;\n+import tech.pegasys.teku.networking.eth2.rpc.core.encodings.AbstractByteBufDecoder;\n+\n+/**\n+ * This class is mostly borrowed from the Netty implementation:\n+ * https://github.com/netty/netty/blob/4.1/codec/src/main/java/io/netty/handler/codec/compression/SnappyFramedDecoder.java\n+ *\n+ * <p>Uncompresses a {@link ByteBuf} encoded with the Snappy framing format.\n+ *\n+ * <p>See <a href=\"https://github.com/google/snappy/blob/master/framing_format.txt\">Snappy framing\n+ * format</a>.\n+ *\n+ * <p>Note that by default, validation of the checksum header in each chunk is DISABLED for\n+ * performance improvements. If performance is less of an issue, or if you would prefer the safety\n+ * that checksum validation brings, please use the {@link #SnappyFrameDecoder(boolean)} constructor\n+ * with the argument set to {@code true}.\n+ */\n+public class SnappyFrameDecoder extends AbstractByteBufDecoder<ByteBuf> {\n+\n+  private enum ChunkType {\n+    STREAM_IDENTIFIER,\n+    COMPRESSED_DATA,\n+    UNCOMPRESSED_DATA,\n+    RESERVED_UNSKIPPABLE,\n+    RESERVED_SKIPPABLE\n+  }\n+\n+  private static final int SNAPPY_IDENTIFIER_LEN = 6;\n+  private static final int MAX_UNCOMPRESSED_DATA_SIZE = 65536 + 4;\n+\n+  private final Snappy snappy = new Snappy();\n+  private final boolean validateChecksums;\n+\n+  private boolean started;\n+  private boolean corrupted;\n+\n+  /**\n+   * Creates a new snappy-framed decoder with validation of checksums turned OFF. To turn checksum\n+   * validation on, please use the alternate {@link #SnappyFrameDecoder(boolean)} constructor.\n+   */\n+  public SnappyFrameDecoder() {\n+    this(true);\n+  }\n+\n+  /**\n+   * Creates a new snappy-framed decoder with validation of checksums as specified.\n+   *\n+   * @param validateChecksums If true, the checksum field will be validated against the actual\n+   *     uncompressed data, and if the checksums do not match, a suitable {@link\n+   *     CompressionException} will be thrown\n+   */\n+  public SnappyFrameDecoder(boolean validateChecksums) {\n+    this.validateChecksums = validateChecksums;\n+  }\n+\n+  @Override\n+  protected Optional<ByteBuf> decodeOneImpl(ByteBuf in) {\n+    if (corrupted) {\n+      in.skipBytes(in.readableBytes());\n+      return Optional.empty();\n+    }\n+\n+    ByteBuf ret = null;\n+\n+    try {\n+      int idx = in.readerIndex();\n+      final int inSize = in.readableBytes();\n+      if (inSize < 4) {\n+        // We need to be at least able to read the chunk type identifier (one byte),\n+        // and the length of the chunk (3 bytes) in order to proceed\n+        return Optional.empty();\n+      }\n+\n+      final int chunkTypeVal = in.getUnsignedByte(idx);\n+      final ChunkType chunkType = mapChunkType((byte) chunkTypeVal);\n+      final int chunkLength = in.getUnsignedMediumLE(idx + 1);\n+\n+      switch (chunkType) {\n+        case STREAM_IDENTIFIER:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ2MjExNQ==", "bodyText": "Why not just use the netty Snappy implementations of this utils?", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442462115", "createdAt": "2020-06-18T19:43:43Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/compression/snappy/SnappyUtil.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.snappy;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.handler.codec.compression.DecompressionException;\n+import java.util.zip.CRC32C;\n+\n+class SnappyUtil {\n+\n+  static int calculateChecksum(ByteBuf data) {\n+    return calculateChecksum(data, data.readerIndex(), data.readableBytes());\n+  }\n+\n+  static int calculateChecksum(ByteBuf data, int offset, int length) {\n+    CRC32C crc32 = new CRC32C();\n+    try {\n+      for (int i = offset; i < offset + length; i++) {\n+        crc32.update(data.getByte(i));\n+      }\n+      return maskChecksum((int) crc32.getValue());\n+    } finally {\n+      crc32.reset();\n+    }\n+  }\n+\n+  static int maskChecksum(int checksum) {\n+    return (checksum >>> 15 | checksum << 17) + 0xa282ead8;\n+  }\n+\n+  static void validateChecksum(int expectedChecksum, ByteBuf data, int offset, int length) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ3MjYxNg==", "bodyText": "I think we can simplify this by handling the \"first byte\" logic here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<TResponse> maybeResponses =\n          \n          \n            \n                        responseDecoder.decodeNextResponses(data, this::onFirstByteReceived);\n          \n          \n            \n                    if (data.isReadable()) {\n          \n          \n            \n                        onFirstByteReceived();\n          \n          \n            \n                    }\n          \n          \n            \n                    List<TResponse> maybeResponses = responseDecoder.decodeNextResponses(data);", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442472616", "createdAt": "2020-06-18T20:04:02Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/Eth2OutgoingRequestHandler.java", "diffHunk": "@@ -76,37 +76,29 @@ public void handleInitialPayloadSent(final RpcStream stream) {\n   }\n \n   @Override\n-  public void processInput(\n-      final NodeId nodeId, final RpcStream rpcStream, final InputStream input) {\n+  public void active(NodeId nodeId, RpcStream rpcStream) {}\n+\n+  @Override\n+  public void processData(final NodeId nodeId, final RpcStream rpcStream, final ByteBuf data) {\n     try {\n       this.rpcStream = rpcStream;\n \n-      Optional<TResponse> maybeResponse =\n-          responseDecoder.decodeNextResponse(input, this::onFirstByteReceived);\n-      while (!isClosed.get() && maybeResponse.isPresent()) {\n-        final TResponse response = maybeResponse.get();\n-        responseProcessor.processResponse(response);\n-\n-        final int chunksReceived = currentChunkCount.incrementAndGet();\n-        if (chunksReceived >= maximumResponseChunks) {\n-          // Make sure there aren't any trailing unconsumed bytes\n-          if (input.available() > 0) {\n-            LOG.debug(\n-                \"Encountered unconsumed data after last expected response chunk was processed.\");\n-            cancelRequest(rpcStream, RpcException.EXTRA_DATA_APPENDED);\n-          } else {\n-            completeRequest(rpcStream);\n-          }\n-          break;\n+      if (!isClosed.get()) {\n+        List<TResponse> maybeResponses =\n+            responseDecoder.decodeNextResponses(data, this::onFirstByteReceived);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ3NTYzNg==", "bodyText": "We should catch the specific exception we're expecting here", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442475636", "createdAt": "2020-06-18T20:10:14Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/LengthPrefixedPayloadDecoder.java", "diffHunk": "@@ -14,102 +14,130 @@\n package tech.pegasys.teku.networking.eth2.rpc.core.encodings;\n \n import static tech.pegasys.teku.util.config.Constants.MAX_CHUNK_SIZE;\n-import static tech.pegasys.teku.util.iostreams.IOStreamConstants.END_OF_STREAM;\n \n-import com.google.protobuf.CodedInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n+import io.libp2p.etc.types.ByteBufExtKt;\n+import io.netty.buffer.ByteBuf;\n+import java.util.Optional;\n import org.apache.tuweni.bytes.Bytes;\n import tech.pegasys.teku.networking.eth2.rpc.core.RpcException;\n import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.Compressor;\n+import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.Compressor.Decompressor;\n import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.exceptions.CompressionException;\n-import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.exceptions.PayloadLargerThanExpectedException;\n-import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.exceptions.PayloadSmallerThanExpectedException;\n \n-class LengthPrefixedPayloadDecoder<T> {\n-  private static final Logger LOG = LogManager.getLogger();\n+class LengthPrefixedPayloadDecoder<T> implements RpcByteBufDecoder<T> {\n \n-  static final Bytes MAX_CHUNK_SIZE_PREFIX = ProtobufEncoder.encodeVarInt(MAX_CHUNK_SIZE);\n+  private static class VarIntDecoder extends AbstractByteBufDecoder<Long> {\n+    @Override\n+    protected Optional<Long> decodeOneImpl(ByteBuf in) {\n+      long length = ByteBufExtKt.readUvarint(in);\n+      if (length < 0) {\n+        // wait for more byte to read length field\n+        return Optional.empty();\n+      }\n+      return Optional.of(length);\n+    }\n+  }\n \n   private final RpcPayloadEncoder<T> payloadEncoder;\n   private final Compressor compressor;\n+  private Optional<Decompressor> decompressor = Optional.empty();\n+  private Optional<VarIntDecoder> varIntDecoder = Optional.empty();\n+  private boolean decoded = false;\n+  private boolean disposed = false;\n \n   public LengthPrefixedPayloadDecoder(\n       final RpcPayloadEncoder<T> payloadEncoder, final Compressor compressor) {\n     this.payloadEncoder = payloadEncoder;\n     this.compressor = compressor;\n   }\n \n-  public T decodePayload(final InputStream inputStream) throws RpcException {\n-    try {\n-      final int uncompressedPayloadSize = processLengthPrefixHeader(inputStream);\n-      return processPayload(inputStream, uncompressedPayloadSize);\n-    } catch (PayloadSmallerThanExpectedException e) {\n-      throw RpcException.PAYLOAD_TRUNCATED;\n-    } catch (PayloadLargerThanExpectedException e) {\n-      throw RpcException.EXTRA_DATA_APPENDED;\n-    } catch (CompressionException e) {\n-      LOG.debug(\"Failed to uncompress rpc payload\", e);\n-      throw RpcException.FAILED_TO_UNCOMPRESS_MESSAGE;\n-    } catch (IOException e) {\n-      LOG.error(\"Unable to decode rpc payload\", e);\n-      throw RpcException.SERVER_ERROR;\n+  @Override\n+  public Optional<T> decodeOneMessage(final ByteBuf in) throws RpcException {\n+    if (decoded || disposed) {\n+      throw new IllegalStateException(\"Trying to reuse disposable LengthPrefixedPayloadDecoder\");\n+    }\n+    if (decompressor.isEmpty()) {\n+      readLengthPrefixHeader(in)\n+          .ifPresent(len -> decompressor = Optional.of(compressor.createDecompressor(len)));\n+    }\n+    if (decompressor.isPresent()) {\n+      Optional<ByteBuf> ret = decompressor.get().decodeOneMessage(in);\n+      if (ret.isPresent()) {\n+        decompressor = Optional.empty();\n+        try {\n+          // making a copy here since the Bytes.wrapByteBuf(buf).slice(...)\n+          // would be broken after [in] buffer is released\n+          byte[] arr = new byte[ret.get().readableBytes()];\n+          ret.get().readBytes(arr);\n+          Bytes bytes = Bytes.wrap(arr);\n+          decoded = true;\n+          return Optional.of(payloadEncoder.decode(bytes));\n+        } finally {\n+          ret.get().release();\n+        }\n+      } else {\n+        return Optional.empty();\n+      }\n+    } else {\n+      return Optional.empty();\n     }\n   }\n \n-  /** Decode the length-prefix header, which contains the length of the uncompressed payload */\n-  private int processLengthPrefixHeader(final InputStream inputStream)\n-      throws RpcException, IOException {\n-    // Collect length prefix raw bytes\n-    final ByteArrayOutputStream headerBytes = new ByteArrayOutputStream();\n-\n-    boolean foundTerminatingCharacter = false;\n-    int nextByte;\n-    while ((nextByte = inputStream.read()) != END_OF_STREAM) {\n-      if (headerBytes.size() >= MAX_CHUNK_SIZE_PREFIX.size()) {\n-        // Any protobuf length requiring more bytes than this will also be bigger.\n-        throw RpcException.CHUNK_TOO_LONG;\n+  @Override\n+  public void complete() throws RpcException {\n+    if (disposed) {\n+      throw new IllegalStateException(\"Trying to reuse disposable LengthPrefixedPayloadDecoder\");\n+    }\n+    disposed = true;\n+    RpcException err = null;\n+    if (varIntDecoder.isPresent()) {\n+      try {\n+        varIntDecoder.ifPresent(AbstractByteBufDecoder::complete);\n+      } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwMTkzNQ==", "bodyText": "We're not guaranteed to receive this event right?  Don't we need to make sure complete is always called so that resources are definitely released in all cases?", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442501935", "createdAt": "2020-06-18T21:05:03Z", "author": {"login": "mbaxter"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/rpc/RpcHandler.java", "diffHunk": "@@ -232,36 +188,23 @@ public void handlerRemoved(ChannelHandlerContext ctx) throws IllegalArgumentExce\n       close();\n     }\n \n-    private void close() {\n-      SafeFuture.of(p2pChannel.closeFuture())\n-          .whenComplete(\n-              (res, err) -> {\n-                if (err != null) {\n-                  LOG.warn(\"Failed to close p2pChannel.\", err);\n-                }\n-                closeOutputStream();\n-              })\n-          .reportExceptions();\n+    @Override\n+    public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n+      if (evt instanceof RemoteWriteClosed) {\n+        rpcRequestHandler.complete(nodeId, rpcStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwMjY0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOG.debug(\"RPC Request stream ends prematurely\", e);\n          \n          \n            \n                  LOG.debug(\"RPC Request stream closed prematurely\", e);", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442502645", "createdAt": "2020-06-18T21:06:33Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/Eth2IncomingRequestHandler.java", "diffHunk": "@@ -59,19 +59,32 @@ public Eth2IncomingRequestHandler(\n   }\n \n   @Override\n-  public void processInput(\n-      final NodeId nodeId, final RpcStream rpcStream, final InputStream input) {\n-\n+  public void active(NodeId nodeId, RpcStream rpcStream) {\n     ensureRequestReceivedWithinTimeLimit(rpcStream);\n+  }\n \n-    final ResponseCallback<TResponse> callback = new RpcResponseCallback<>(rpcStream, rpcEncoder);\n+  @Override\n+  public void processData(final NodeId nodeId, final RpcStream rpcStream, final ByteBuf data) {\n     try {\n       Optional<Eth2Peer> peer = peerLookup.getConnectedPeer(nodeId);\n-      final TRequest request = requestDecoder.decodeRequest(input);\n-      handleRequest(peer, request, callback);\n+      requestDecoder\n+          .decodeRequest(data)\n+          .ifPresent(\n+              request ->\n+                  handleRequest(peer, request, new RpcResponseCallback<>(rpcStream, rpcEncoder)));\n     } catch (final RpcException e) {\n       requestHandled.set(true);\n-      callback.completeWithErrorResponse(e);\n+      new RpcResponseCallback<>(rpcStream, rpcEncoder).completeWithErrorResponse(e);\n+    }\n+  }\n+\n+  @Override\n+  public void complete(NodeId nodeId, RpcStream rpcStream) {\n+    try {\n+      requestDecoder.complete();\n+    } catch (RpcException e) {\n+      new RpcResponseCallback<>(rpcStream, rpcEncoder).completeWithErrorResponse(e);\n+      LOG.debug(\"RPC Request stream ends prematurely\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwMzE5OA==", "bodyText": "nice \ud83d\udcaf", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442503198", "createdAt": "2020-06-18T21:07:42Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/Eth2IncomingRequestHandler.java", "diffHunk": "@@ -97,8 +110,9 @@ private void ensureRequestReceivedWithinTimeLimit(final RpcStream stream) {\n             (__) -> {\n               if (!requestHandled.get()) {\n                 LOG.debug(\n-                    \"Failed to receive incoming request data within {} sec. Close stream.\",\n-                    timeout.getSeconds());\n+                    \"Failed to receive incoming request data within {} sec for method {}. Close stream.\",\n+                    timeout.getSeconds(),\n+                    method);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUwODE1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                firstByteListener.ifPresent(FirstByteReceivedListener::onFirstByteReceived);\n          \n          \n            \n            \n          \n          \n            \n                if (!data.isReadable()) {\n          \n          \n            \n                  return Optional.empty();\n          \n          \n            \n                }\n          \n          \n            \n                if (!data.isReadable()) {\n          \n          \n            \n                  return Optional.empty();\n          \n          \n            \n                }\n          \n          \n            \n                firstByteListener.ifPresent(FirstByteReceivedListener::onFirstByteReceived);", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442508154", "createdAt": "2020-06-18T21:18:21Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/RpcResponseDecoder.java", "diffHunk": "@@ -31,62 +29,96 @@\n  * @param <T>\n  */\n public class RpcResponseDecoder<T> {\n-  private static final Logger LOG = LogManager.getLogger();\n-\n+  private Optional<Integer> respCodeMaybe = Optional.empty();\n+  private Optional<RpcByteBufDecoder<T>> payloadDecoder = Optional.empty();\n+  private Optional<RpcByteBufDecoder<String>> errorDecoder = Optional.empty();\n   private final Class<T> responseType;\n   private final RpcEncoding encoding;\n \n-  protected RpcResponseDecoder(final Class<T> responseType, final RpcEncoding encoding) {\n+  public RpcResponseDecoder(Class<T> responseType, RpcEncoding encoding) {\n     this.responseType = responseType;\n     this.encoding = encoding;\n   }\n \n-  public Optional<T> decodeNextResponse(final InputStream input) throws RpcException {\n-    return decodeNextResponse(input, Optional.empty());\n+  public List<T> decodeNextResponses(final ByteBuf data) throws RpcException {\n+    return decodeNextResponses(data, Optional.empty());\n   }\n \n-  public Optional<T> decodeNextResponse(\n-      final InputStream input, final FirstByteReceivedListener firstByteReceivedListener)\n+  public List<T> decodeNextResponses(\n+      final ByteBuf data, final FirstByteReceivedListener firstByteReceivedListener)\n       throws RpcException {\n-    return decodeNextResponse(input, Optional.of(firstByteReceivedListener));\n+    return decodeNextResponses(data, Optional.of(firstByteReceivedListener));\n   }\n \n-  private Optional<T> decodeNextResponse(\n-      final InputStream input, Optional<FirstByteReceivedListener> firstByteListener)\n+  private List<T> decodeNextResponses(\n+      final ByteBuf data, Optional<FirstByteReceivedListener> firstByteListener)\n       throws RpcException {\n-    try {\n-      final OptionalInt maybeStatus = getNextStatusCode(input);\n-      if (maybeStatus.isEmpty()) {\n-        // Empty status indicates we're finished reading responses\n-        return Optional.empty();\n-      }\n-      firstByteListener.ifPresent(FirstByteReceivedListener::onFirstByteReceived);\n-      final int status = maybeStatus.getAsInt();\n-      if (status == SUCCESS_RESPONSE_CODE) {\n-        final T response = encoding.decodePayload(input, responseType);\n-        return Optional.of(response);\n+    List<T> ret = new ArrayList<>();\n+    while (true) {\n+      Optional<T> responseMaybe = decodeNextResponse(data, firstByteListener);\n+      if (responseMaybe.isPresent()) {\n+        ret.add(responseMaybe.get());\n       } else {\n-        throw decodeError(input, status);\n+        break;\n       }\n-    } catch (IOException e) {\n-      LOG.error(\"Unexpected error while reading rpc responses\", e);\n-      throw RpcException.SERVER_ERROR;\n     }\n+\n+    return ret;\n   }\n \n-  private RpcException decodeError(final InputStream input, final int statusCode)\n+  private Optional<T> decodeNextResponse(\n+      final ByteBuf data, Optional<FirstByteReceivedListener> firstByteListener)\n       throws RpcException {\n-    final String errorMessage = encoding.decodePayload(input, String.class);\n-    return new RpcException(toByteExactUnsigned(statusCode), errorMessage);\n-  }\n+    firstByteListener.ifPresent(FirstByteReceivedListener::onFirstByteReceived);\n+\n+    if (!data.isReadable()) {\n+      return Optional.empty();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxMDMzNQ==", "bodyText": "If all of the ByteBuf's are coming in on the netty thread, do we need this to be synchronized?", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442510335", "createdAt": "2020-06-18T21:23:07Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/AbstractByteBufDecoder.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.core.encodings;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.CompositeByteBuf;\n+import io.netty.buffer.Unpooled;\n+import java.util.Optional;\n+import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.exceptions.PayloadSmallerThanExpectedException;\n+\n+/**\n+ * Abstract {@link ByteBufDecoder} implementation which handles unprocessed {@link ByteBuf}s\n+ *\n+ * <p>This class is a standalone analog of Netty {@link io.netty.handler.codec.ByteToMessageDecoder}\n+ */\n+public abstract class AbstractByteBufDecoder<TMessage>\n+    implements ByteBufDecoder<TMessage, RuntimeException> {\n+\n+  private CompositeByteBuf compositeByteBuf = Unpooled.compositeBuffer();\n+\n+  @Override\n+  public synchronized Optional<TMessage> decodeOneMessage(ByteBuf in) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzMTcxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class NoopFrameDecoder extends AbstractByteBufDecoder<ByteBuf> {\n          \n          \n            \n            public class NoopDecoder extends AbstractByteBufDecoder<ByteBuf> {", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442531716", "createdAt": "2020-06-18T22:16:29Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/compression/noop/NoopFrameDecoder.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.noop;\n+\n+import io.netty.buffer.ByteBuf;\n+import java.util.Optional;\n+import tech.pegasys.teku.networking.eth2.rpc.core.encodings.AbstractByteBufDecoder;\n+\n+public class NoopFrameDecoder extends AbstractByteBufDecoder<ByteBuf> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzMjExNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * https://github.com/netty/netty/blob/4.1/codec/src/main/java/io/netty/handler/codec/compression/SnappyFramedEncoder.java\n          \n          \n            \n             * https://github.com/netty/netty/blob/4.1/codec/src/main/java/io/netty/handler/codec/compression/SnappyFrameEncoder.java", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442532115", "createdAt": "2020-06-18T22:17:41Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/compression/snappy/SnappyFrameEncoder.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.snappy;\n+\n+import static tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.snappy.SnappyUtil.calculateChecksum;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.compression.Snappy;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.exceptions.CompressionException;\n+\n+/**\n+ * This class is mostly borrowed from the Netty implementation:\n+ * https://github.com/netty/netty/blob/4.1/codec/src/main/java/io/netty/handler/codec/compression/SnappyFramedEncoder.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzMzU3NA==", "bodyText": "Never seen this \ud83e\udd14 What about just:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  for (; ; ) {\n          \n          \n            \n                  while(true) {", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442533574", "createdAt": "2020-06-18T22:22:15Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/compression/snappy/SnappyFrameEncoder.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.snappy;\n+\n+import static tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.snappy.SnappyUtil.calculateChecksum;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import io.netty.handler.codec.compression.Snappy;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.networking.eth2.rpc.core.encodings.compression.exceptions.CompressionException;\n+\n+/**\n+ * This class is mostly borrowed from the Netty implementation:\n+ * https://github.com/netty/netty/blob/4.1/codec/src/main/java/io/netty/handler/codec/compression/SnappyFramedEncoder.java\n+ *\n+ * <p>Compresses a {@link ByteBuf} using the Snappy framing format.\n+ *\n+ * <p>See <a href=\"https://github.com/google/snappy/blob/master/framing_format.txt\">Snappy framing\n+ * format</a>.\n+ */\n+public class SnappyFrameEncoder {\n+  /**\n+   * The minimum amount that we'll consider actually attempting to compress. This value is preamble\n+   * + the minimum length our Snappy service will compress (instead of just emitting a literal).\n+   */\n+  private static final int MIN_COMPRESSIBLE_LENGTH = 18;\n+\n+  /**\n+   * All streams should start with the \"Stream identifier\", containing chunk type 0xff, a length\n+   * field of 0x6, and 'sNaPpY' in ASCII.\n+   */\n+  private static final byte[] STREAM_START = {\n+    (byte) 0xff, 0x06, 0x00, 0x00, 0x73, 0x4e, 0x61, 0x50, 0x70, 0x59\n+  };\n+\n+  private final Snappy snappy = new Snappy();\n+  private boolean started;\n+\n+  public Bytes encode(Bytes in) {\n+    ByteBuf inBuf = Unpooled.wrappedBuffer(in.toArrayUnsafe());\n+    ByteBuf outBuf = Unpooled.buffer(in.size() / 2);\n+    try {\n+      encode(inBuf, outBuf);\n+      byte[] bytes = new byte[outBuf.readableBytes()];\n+      outBuf.readBytes(bytes);\n+      return Bytes.wrap(bytes);\n+    } finally {\n+      inBuf.release();\n+      outBuf.release();\n+    }\n+  }\n+\n+  public void encode(ByteBuf in, ByteBuf out) {\n+    if (!in.isReadable()) {\n+      return;\n+    }\n+\n+    if (!started) {\n+      started = true;\n+      out.writeBytes(STREAM_START);\n+    }\n+\n+    int dataLength = in.readableBytes();\n+    if (dataLength > MIN_COMPRESSIBLE_LENGTH) {\n+      for (; ; ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNzQ2OA==", "bodyText": "Nice test util - some more comments on what's happening here would be helpful :D", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442537468", "createdAt": "2020-06-18T22:34:23Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/rpc/Utils.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc;\n+\n+import static java.lang.Integer.max;\n+import static java.lang.Integer.min;\n+\n+import com.google.common.collect.Streams;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public class Utils {\n+\n+  public static List<List<ByteBuf>> generateTestSlices(Bytes... chunks) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNzY4Ng==", "bodyText": "Stray comments", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442537686", "createdAt": "2020-06-18T22:35:11Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/rpc/core/AbstractRequestHandlerTest.java", "diffHunk": "@@ -63,8 +55,8 @@\n   protected final Eth2Peer peer = mock(Eth2Peer.class);\n   protected T reqHandler;\n \n-  private Thread inputHandlerThread;\n-  private final AtomicBoolean inputHandlerDone = new AtomicBoolean(false);\n+  //  private Thread inputHandlerThread;\n+  //  private final AtomicBoolean inputHandlerDone = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzODE5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected void deliverBytes(final Bytes bytes, final int waitUntilBytesConsumed) {\n          \n          \n            \n              protected void deliverBytes(final Bytes bytes) {", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442538199", "createdAt": "2020-06-18T22:36:43Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/rpc/core/AbstractRequestHandlerTest.java", "diffHunk": "@@ -123,14 +90,7 @@ protected void deliverBytes(final Bytes bytes) throws IOException {\n     deliverBytes(bytes, bytes.size());\n   }\n \n-  protected void deliverBytes(final Bytes bytes, final int waitUntilBytesConsumed)\n-      throws IOException {\n-    checkArgument(\n-        waitUntilBytesConsumed <= bytes.size(), \"Cannot wait for more bytes than those supplied.\");\n-    inputStream.deliverBytes(bytes);\n-    final int maxRemainingBytes = bytes.size() - waitUntilBytesConsumed;\n-    Waiter.waitFor(\n-        () ->\n-            assertThat(inputStream.countUnconsumedBytes()).isLessThanOrEqualTo(maxRemainingBytes));\n+  protected void deliverBytes(final Bytes bytes, final int waitUntilBytesConsumed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzOTM1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldParseSingleResponseReceivedInSinglePacket() throws Exception {\n          \n          \n            \n              public void shouldParseSingleResponse() throws Exception {", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442539358", "createdAt": "2020-06-18T22:40:25Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/rpc/core/RpcRequestDecoderTest.java", "diffHunk": "@@ -16,29 +16,54 @@\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n+import io.netty.buffer.ByteBuf;\n+import java.util.ArrayList;\n+import java.util.List;\n import org.apache.tuweni.bytes.Bytes;\n import org.junit.jupiter.api.Test;\n import tech.pegasys.teku.datastructures.networking.libp2p.rpc.BeaconBlocksByRootRequestMessage;\n \n class RpcRequestDecoderTest extends RpcDecoderTestBase {\n \n-  private final RpcRequestDecoder<BeaconBlocksByRootRequestMessage> decoder =\n-      METHOD.createRequestDecoder();\n-\n   @Test\n   public void shouldParseSingleResponseReceivedInSinglePacket() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0MDE3Nw==", "bodyText": "(nit) This class should probably go in the testFixtures directory", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442540177", "createdAt": "2020-06-18T22:42:57Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/rpc/Utils.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc;\n+\n+import static java.lang.Integer.max;\n+import static java.lang.Integer.min;\n+\n+import com.google.common.collect.Streams;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public class Utils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0MjQ0Mg==", "bodyText": "(nit) Could probably improve readability by just having an instance variable for the status decoder that we use throughout:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThatThrownBy(() -> encoding.createDecoder(StatusMessage.class).decodeOneMessage(input))\n          \n          \n            \n                assertThatThrownBy(() -> statusDecoder.decodeOneMessage(input))", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442542442", "createdAt": "2020-06-18T22:50:11Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/LengthPrefixedEncodingTest.java", "diffHunk": "@@ -41,65 +42,109 @@\n \n   @Test\n   public void decodePayload_shouldReturnErrorWhenLengthPrefixIsTooLong() {\n-    assertThatThrownBy(\n-            () ->\n-                encoding.decodePayload(\n-                    inputStream(\"0xAAAAAAAAAAAAAAAAAAAA80\"), StatusMessage.class))\n+    ByteBuf input = inputByteBuffer(\"0xAAAAAAAAAAAAAAAAAAAA80\");\n+    assertThatThrownBy(() -> encoding.createDecoder(StatusMessage.class).decodeOneMessage(input))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0MzAxNQ==", "bodyText": "Why not:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .isInstanceOf(RpcException.class)\n          \n          \n            \n                    .hasMessageContaining(\"payload smaller\");\n          \n          \n            \n                    .isEqualTo(RpcException.PAYLOAD_TRUNCATED);\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442543015", "createdAt": "2020-06-18T22:52:05Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/LengthPrefixedEncodingTest.java", "diffHunk": "@@ -41,65 +42,109 @@\n \n   @Test\n   public void decodePayload_shouldReturnErrorWhenLengthPrefixIsTooLong() {\n-    assertThatThrownBy(\n-            () ->\n-                encoding.decodePayload(\n-                    inputStream(\"0xAAAAAAAAAAAAAAAAAAAA80\"), StatusMessage.class))\n+    ByteBuf input = inputByteBuffer(\"0xAAAAAAAAAAAAAAAAAAAA80\");\n+    assertThatThrownBy(() -> encoding.createDecoder(StatusMessage.class).decodeOneMessage(input))\n         .isEqualTo(RpcException.CHUNK_TOO_LONG);\n+    input.release();\n+    assertThat(input.refCnt()).isEqualTo(0);\n   }\n \n   @Test\n   public void decodePayload_shouldReturnErrorWhenNoPayloadIsPresent() {\n-    final InputStream invalidMessage = inputStream(ONE_BYTE_LENGTH_PREFIX);\n-    assertThatThrownBy(() -> encoding.decodePayload(invalidMessage, StatusMessage.class))\n-        .isEqualTo(RpcException.PAYLOAD_TRUNCATED);\n+    ByteBuf input = inputByteBuffer(ONE_BYTE_LENGTH_PREFIX);\n+    assertThatThrownBy(\n+            () -> {\n+              RpcByteBufDecoder<StatusMessage> decoder =\n+                  encoding.createDecoder(StatusMessage.class);\n+\n+              assertThat(decoder.decodeOneMessage(input)).isEmpty();\n+              decoder.complete();\n+            })\n+        .isInstanceOf(RpcException.class)\n+        .hasMessageContaining(\"payload smaller\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0MzIwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .isInstanceOf(RpcException.class)\n          \n          \n            \n                    .hasMessageContaining(\"payload smaller\");\n          \n          \n            \n                    .isEqualTo(RpcException.PAYLOAD_TRUNCATED);", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442543206", "createdAt": "2020-06-18T22:52:41Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/LengthPrefixedEncodingTest.java", "diffHunk": "@@ -41,65 +42,109 @@\n \n   @Test\n   public void decodePayload_shouldReturnErrorWhenLengthPrefixIsTooLong() {\n-    assertThatThrownBy(\n-            () ->\n-                encoding.decodePayload(\n-                    inputStream(\"0xAAAAAAAAAAAAAAAAAAAA80\"), StatusMessage.class))\n+    ByteBuf input = inputByteBuffer(\"0xAAAAAAAAAAAAAAAAAAAA80\");\n+    assertThatThrownBy(() -> encoding.createDecoder(StatusMessage.class).decodeOneMessage(input))\n         .isEqualTo(RpcException.CHUNK_TOO_LONG);\n+    input.release();\n+    assertThat(input.refCnt()).isEqualTo(0);\n   }\n \n   @Test\n   public void decodePayload_shouldReturnErrorWhenNoPayloadIsPresent() {\n-    final InputStream invalidMessage = inputStream(ONE_BYTE_LENGTH_PREFIX);\n-    assertThatThrownBy(() -> encoding.decodePayload(invalidMessage, StatusMessage.class))\n-        .isEqualTo(RpcException.PAYLOAD_TRUNCATED);\n+    ByteBuf input = inputByteBuffer(ONE_BYTE_LENGTH_PREFIX);\n+    assertThatThrownBy(\n+            () -> {\n+              RpcByteBufDecoder<StatusMessage> decoder =\n+                  encoding.createDecoder(StatusMessage.class);\n+\n+              assertThat(decoder.decodeOneMessage(input)).isEmpty();\n+              decoder.complete();\n+            })\n+        .isInstanceOf(RpcException.class)\n+        .hasMessageContaining(\"payload smaller\");\n+    input.release();\n+    assertThat(input.refCnt()).isEqualTo(0);\n   }\n \n   @Test\n   public void decodePayload_shouldReturnErrorWhenPayloadTooShort() {\n     final Bytes correctMessage = createValidStatusMessage();\n     final int truncatedSize = correctMessage.size() - 5;\n-    final InputStream partialMessage = inputStream(correctMessage.slice(0, truncatedSize));\n-    assertThatThrownBy(() -> encoding.decodePayload(partialMessage, StatusMessage.class))\n-        .isEqualTo(RpcException.PAYLOAD_TRUNCATED);\n+    ByteBuf input = inputByteBuffer(correctMessage.slice(0, truncatedSize));\n+    assertThatThrownBy(\n+            () -> {\n+              RpcByteBufDecoder<StatusMessage> decoder =\n+                  encoding.createDecoder(StatusMessage.class);\n+              assertThat(decoder.decodeOneMessage(input)).isEmpty();\n+              decoder.complete();\n+            })\n+        .isInstanceOf(RpcException.class)\n+        .hasMessageContaining(\"payload smaller\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0Njk0OA==", "bodyText": "What's wrong with the existing line?", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442546948", "createdAt": "2020-06-18T23:05:35Z", "author": {"login": "mbaxter"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/gossip/GossipHandler.java", "diffHunk": "@@ -64,7 +64,9 @@ public GossipHandler(\n           GOSSIP_MAX_SIZE);\n       return VALIDATION_FAILED;\n     }\n-    Bytes bytes = Bytes.wrapByteBuf(message.getData()).copy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0Nzg3Nw==", "bodyText": "What's this for?", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r442547877", "createdAt": "2020-06-18T23:08:49Z", "author": {"login": "mbaxter"}, "path": "teku/src/test/java/tech/pegasys/teku/cli/BeaconNodeCommandTest.java", "diffHunk": "@@ -203,7 +203,9 @@ private Path createConfigFile() throws IOException {\n     final URL configFile = this.getClass().getResource(\"/complete_config.yaml\");\n     final String updatedConfig =\n         Resources.toString(configFile, UTF_8)\n-            .replace(\"data-path: \\\".\\\"\", \"data-path: \\\"\" + dataPath.toString() + \"\\\"\");\n+            .replace(\n+                \"data-path: \\\".\\\"\",\n+                \"data-path: \\\"\" + dataPath.toString().replace(\"\\\\\", \"\\\\\\\\\") + \"\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d789946533d88950e8a8c76db5202d65149ef39"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "644007a528c7d21a74522fa4c96641d468f03a8c", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/644007a528c7d21a74522fa4c96641d468f03a8c", "committedDate": "2020-06-22T11:01:36Z", "message": "Move internal class to the bottom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab9ec744e8fffc014f595ec02be7c4b26602930c", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/ab9ec744e8fffc014f595ec02be7c4b26602930c", "committedDate": "2020-06-22T11:07:39Z", "message": "Fix links to Netty classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb6cb6a657b65ac944ed9ad8f85216276cdb37f4", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/bb6cb6a657b65ac944ed9ad8f85216276cdb37f4", "committedDate": "2020-06-22T11:08:52Z", "message": "Remove irrelevant doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0424bb2d087bacc4ee6ef8bffc20b1b0b2df7ecf", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/0424bb2d087bacc4ee6ef8bffc20b1b0b2df7ecf", "committedDate": "2020-06-22T11:10:21Z", "message": "Fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2db462a4fdbb085d5e3c2a7f2ee3eeca510ed813", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/2db462a4fdbb085d5e3c2a7f2ee3eeca510ed813", "committedDate": "2020-06-22T11:19:20Z", "message": "SnappyFrameDecoder: fail on extra snappy header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4af7640aaf03384fae3d70e225bb567c07eaed55", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/4af7640aaf03384fae3d70e225bb567c07eaed55", "committedDate": "2020-06-22T11:23:50Z", "message": "Wording fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a4060baaa9149ac701f3eba45561f91027acb35", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/7a4060baaa9149ac701f3eba45561f91027acb35", "committedDate": "2020-06-22T11:28:56Z", "message": "Remove unnecessary synchronized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0501a6a0a4616703b207a9d5908cacc6c18707ad", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/0501a6a0a4616703b207a9d5908cacc6c18707ad", "committedDate": "2020-06-22T11:33:41Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aceea760bbc9e8779653d2b57e4eb540f7739a7", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/0aceea760bbc9e8779653d2b57e4eb540f7739a7", "committedDate": "2020-06-22T11:33:55Z", "message": "Rename class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c45ba63f32efccdbd0dbee621f729e3310f0e78", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/8c45ba63f32efccdbd0dbee621f729e3310f0e78", "committedDate": "2020-06-22T11:35:33Z", "message": "Minor style fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01d9e5ec0689b4b07a6abc7440a07da9d0ef7d46", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/01d9e5ec0689b4b07a6abc7440a07da9d0ef7d46", "committedDate": "2020-06-22T11:54:11Z", "message": "Move Utils to testFixtures, add javadoc for the method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "186626b31e0acf74ee784152e2f418ffd19ee6e1", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/186626b31e0acf74ee784152e2f418ffd19ee6e1", "committedDate": "2020-06-22T11:58:05Z", "message": "Tests cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caf219d6903217ed1478da23b6a3727f36fd607d", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/caf219d6903217ed1478da23b6a3727f36fd607d", "committedDate": "2020-06-22T12:54:21Z", "message": "Minor test fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30bf5426a12d43336ca784c3c804dd5da2abf780", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/30bf5426a12d43336ca784c3c804dd5da2abf780", "committedDate": "2020-06-22T13:01:14Z", "message": "Simplify RPC response first byte handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b25386bdb73fe0143c2a3efd79eb425f1e9dfc96", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/b25386bdb73fe0143c2a3efd79eb425f1e9dfc96", "committedDate": "2020-06-22T14:31:07Z", "message": "RpcRequestHandler.complete() should be called in any case of stream close"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7877404f7e0e63f2cfadfdf67751a4e07e05007", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/a7877404f7e0e63f2cfadfdf67751a4e07e05007", "committedDate": "2020-06-22T15:58:54Z", "message": "Make CompressionException back checked. Refactor Compressor/Rpc exceptions handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e32f47d8c72dbda75549ea8bd232d528e98b0f3b", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/e32f47d8c72dbda75549ea8bd232d528e98b0f3b", "committedDate": "2020-06-22T16:01:22Z", "message": "Merge remote-tracking branch 'pegasys/master' into fix-snappy-blocking\n\n# Conflicts:\n#\tnetworking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/RpcResponseDecoder.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MjIyMTAy", "url": "https://github.com/ConsenSys/teku/pull/2005#pullrequestreview-435222102", "createdAt": "2020-06-22T19:45:06Z", "commit": {"oid": "e32f47d8c72dbda75549ea8bd232d528e98b0f3b"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxOTo0NTowNlrOGnOiwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDoxODozM1rOGnPg_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc4NTkyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected abstract void throwDataTruncatedException(int dataLeft) throws TException;\n          \n          \n            \n              protected abstract void throwUnprocessedDataException(int dataLeft) throws TException;", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r443785920", "createdAt": "2020-06-22T19:45:06Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/AbstractByteBufDecoder.java", "diffHunk": "@@ -65,14 +64,15 @@\n   }\n \n   @Override\n-  public void complete() {\n+  public void complete() throws TException {\n     if (compositeByteBuf.isReadable()) {\n       compositeByteBuf.release();\n-      throw new PayloadSmallerThanExpectedException(\n-          \"Rpc stream complete, but unprocessed data left: \" + compositeByteBuf.readableBytes());\n+      throwDataTruncatedException(compositeByteBuf.readableBytes());\n     }\n   }\n \n+  protected abstract void throwDataTruncatedException(int dataLeft) throws TException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32f47d8c72dbda75549ea8bd232d528e98b0f3b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc5NzE0MA==", "bodyText": "I think this should throw the opposite error - we think we're done processing the response but there's extra data in the pipeline, so the payload was larger than we expected:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                throw new PayloadSmallerThanExpectedException(\n          \n          \n            \n                throw new PayloadLargerThanExpectedException(", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r443797140", "createdAt": "2020-06-22T20:09:10Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/compression/snappy/SnappyFrameDecoder.java", "diffHunk": "@@ -194,14 +195,20 @@ public SnappyFrameDecoder(boolean validateChecksums) {\n           snappy.reset();\n           break;\n       }\n-    } catch (Exception e) {\n+    } catch (CompressionException e) {\n       corrupted = true;\n       throw e;\n     }\n     return Optional.ofNullable(ret);\n   }\n \n-  private static void checkByte(byte actual, byte expect) {\n+  @Override\n+  protected void throwDataTruncatedException(int dataLeft) throws CompressionException {\n+    throw new PayloadSmallerThanExpectedException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32f47d8c72dbda75549ea8bd232d528e98b0f3b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc5OTU5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"Unexpected stream identifier contents. Mismatched snappy \" + \"protocol version?\");\n          \n          \n            \n                      \"Unexpected stream identifier contents. Mismatched snappy protocol version?\");", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r443799595", "createdAt": "2020-06-22T20:14:18Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/compression/snappy/SnappyFrameDecoder.java", "diffHunk": "@@ -194,14 +195,20 @@ public SnappyFrameDecoder(boolean validateChecksums) {\n           snappy.reset();\n           break;\n       }\n-    } catch (Exception e) {\n+    } catch (CompressionException e) {\n       corrupted = true;\n       throw e;\n     }\n     return Optional.ofNullable(ret);\n   }\n \n-  private static void checkByte(byte actual, byte expect) {\n+  @Override\n+  protected void throwDataTruncatedException(int dataLeft) throws CompressionException {\n+    throw new PayloadSmallerThanExpectedException(\n+        \"Snappy stream complete, but unprocessed data left: \" + dataLeft);\n+  }\n+\n+  private static void checkByte(byte actual, byte expect) throws CompressionException {\n     if (actual != expect) {\n       throw new CompressionException(\n           \"Unexpected stream identifier contents. Mismatched snappy \" + \"protocol version?\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32f47d8c72dbda75549ea8bd232d528e98b0f3b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgwMTg1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                throw new PayloadSmallerThanExpectedException(\n          \n          \n            \n                throw new PayloadLargerThanExpectedException(", "url": "https://github.com/ConsenSys/teku/pull/2005#discussion_r443801853", "createdAt": "2020-06-22T20:18:33Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/compression/noop/NoopDecoder.java", "diffHunk": "@@ -31,4 +33,10 @@ public NoopDecoder(int expectedBytes) {\n     }\n     return Optional.of(in.readRetainedSlice(expectedBytes));\n   }\n+\n+  @Override\n+  protected void throwDataTruncatedException(int dataLeft) throws CompressionException {\n+    throw new PayloadSmallerThanExpectedException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e32f47d8c72dbda75549ea8bd232d528e98b0f3b"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f66d13e12b3f6027caba3d371ab439ebc159a59", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/7f66d13e12b3f6027caba3d371ab439ebc159a59", "committedDate": "2020-06-23T10:44:38Z", "message": "Rename method and minor fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94fcb54402d0670a801c9ee4585112aac10e623d", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/94fcb54402d0670a801c9ee4585112aac10e623d", "committedDate": "2020-06-23T10:44:44Z", "message": "Merge remote-tracking branch 'pegasys/master' into fix-snappy-blocking"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4068, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}