{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0OTY5ODE3", "number": 2156, "title": "Retrieve block root at slot from protoarray to avoid regenerating states", "bodyText": "PR Description\nNodes on witti were being swamped by beacon block by range requests because Teku was looking up block roots by slot from the historical state roots.  This required walking backwards through states to get to the first request block which is a pathological case during long periods of non-finalisation.\nInstead, we can find the block root for a slot from the fork choice protoarray, for anything past finalisation (which is all RecentChainData is intended to provide).\nLimit the number of blocks included in BeaconBlocksByRange responses.\nFixed Issue(s)\nExpecting this to help with if not eliminate #2149 - we have a ton of close futures because we're still generating results for the requests they made.\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-06-16T04:43:14Z", "url": "https://github.com/ConsenSys/teku/pull/2156", "merged": true, "mergeCommit": {"oid": "645a254ccc61c78dab6a88cdf57aa98ff41ad7fe"}, "closed": true, "closedAt": "2020-06-16T23:39:29Z", "author": {"login": "ajsutton"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrtrwkgH2gAyNDM0OTY5ODE3OmMwOTU4Y2M0YTkxNWVlMjYwYmI1ZDc0MWY2OTlkNmRjYTY3NGRlYWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr9RcIgH2gAyNDM0OTY5ODE3OjVkNWQ5NTM2MDc5ZWZiNTM4MGZlZjhmYzJjNWY2YWQzMWU3ZWEzYjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c0958cc4a915ee260bb5d741f699d6dca674deaf", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/c0958cc4a915ee260bb5d741f699d6dca674deaf", "committedDate": "2020-06-16T04:38:21Z", "message": "Retrieve block root at slot from protoarray to avoid regenerating states.\nLimit the number of blocks included in BeaconBlocksByRange responses."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc801f3567dbe615da05df81708193548e26c44b", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/bc801f3567dbe615da05df81708193548e26c44b", "committedDate": "2020-06-16T05:02:05Z", "message": "Fix integration tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTIzMDMw", "url": "https://github.com/ConsenSys/teku/pull/2156#pullrequestreview-431523030", "createdAt": "2020-06-16T13:50:32Z", "commit": {"oid": "bc801f3567dbe615da05df81708193548e26c44b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo1MDozMlrOGkcTXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo1MDozMlrOGkcTXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2NTYyOA==", "bodyText": "nit: We could make the test more explicit by saying count = Constants.MAX_BLOCK_BY_RANGE_REQUEST_SIZE + 1", "url": "https://github.com/ConsenSys/teku/pull/2156#discussion_r440865628", "createdAt": "2020-06-16T13:50:32Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/rpc/beaconchain/methods/BeaconBlocksByRangeMessageHandlerTest.java", "diffHunk": "@@ -269,6 +272,23 @@ public void shouldRejectRequestWhenStepIsZero() {\n     verifyNoMoreInteractions(combinedChainDataClient);\n   }\n \n+  @Test\n+  void shouldLimitNumberOfBlocksReturned() {\n+    final RequestState requestState =\n+        new RequestState(\n+            new BeaconBlocksByRangeRequestMessage(\n+                UnsignedLong.ZERO, UnsignedLong.valueOf(500), UnsignedLong.ONE),\n+            UnsignedLong.valueOf(10000),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc801f3567dbe615da05df81708193548e26c44b"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTI1NTMy", "url": "https://github.com/ConsenSys/teku/pull/2156#pullrequestreview-431525532", "createdAt": "2020-06-16T13:52:40Z", "commit": {"oid": "bc801f3567dbe615da05df81708193548e26c44b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo1Mjo0MFrOGkcZ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo1Mjo0MFrOGkcZ7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2NzMwOA==", "bodyText": "Are we okay with not being able to get any block root before finalization?", "url": "https://github.com/ConsenSys/teku/pull/2156#discussion_r440867308", "createdAt": "2020-06-16T13:52:40Z", "author": {"login": "cemozerr"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/client/RecentChainData.java", "diffHunk": "@@ -304,87 +308,17 @@ public boolean containsBlock(final Bytes32 root) {\n     return Optional.ofNullable(store.getBlockState(blockRoot));\n   }\n \n-  public Optional<BeaconBlock> getBlockBySlot(final UnsignedLong slot) {\n-    return getBlockRootBySlot(slot)\n-        .map(blockRoot -> store.getBlock(blockRoot))\n-        .filter(block -> block.getSlot().equals(slot));\n-  }\n-\n   public Optional<BeaconState> getStateInEffectAtSlot(final UnsignedLong slot) {\n     return getBlockRootBySlot(slot).map(blockRoot -> store.getBlockState(blockRoot));\n   }\n \n-  public boolean isIncludedInBestState(final Bytes32 blockRoot) {\n-    if (store == null) {\n-      return false;\n-    }\n-    final BeaconBlock block = store.getBlock(blockRoot);\n-    if (block == null) {\n-      return false;\n-    }\n-    return getBlockRootBySlot(block.getSlot())\n-        .map(actualRoot -> actualRoot.equals(block.hash_tree_root()))\n-        .orElse(false);\n-  }\n-\n   public Optional<Bytes32> getBlockRootBySlot(final UnsignedLong slot) {\n-    if (store == null || chainHead.isEmpty() || isHistoricalBlockRootAtSlotUnavailable(slot)) {\n-      return Optional.empty();\n-    }\n-    return getBlockRootBySlot(slot, chainHead.get());\n+    return chainHead.flatMap(head -> getBlockRootBySlot(slot, head.getRoot()));\n   }\n \n-  public Optional<Bytes32> getBlockRootBySlot(final UnsignedLong slot, final Bytes32 headRoot) {\n-    if (store == null || isHistoricalBlockRootAtSlotUnavailable(slot)) {\n-      return Optional.empty();\n-    }\n-    return store.getBlockAndState(headRoot).flatMap(head -> getBlockRootBySlot(slot, head));\n-  }\n-\n-  private boolean isHistoricalBlockRootAtSlotUnavailable(final UnsignedLong slot) {\n-    // If slot is prior to genesis, it is not available\n-    final UnsignedLong genesisSlot = UnsignedLong.valueOf(Constants.GENESIS_SLOT);\n-    if (slot.compareTo(genesisSlot) < 0) {\n-      return true;\n-    }\n-\n-    // If slot is out of range of the latest finalized block, it is unavailable\n-    final UnsignedLong slotsPerHistoricalRoot = UnsignedLong.valueOf(SLOTS_PER_HISTORICAL_ROOT);\n-    final UnsignedLong oldestAvailableState = store.getLatestFinalizedBlockSlot();\n-    final UnsignedLong oldestAvailableRoot =\n-        oldestAvailableState.compareTo(slotsPerHistoricalRoot) >= 0\n-            ? oldestAvailableState.minus(slotsPerHistoricalRoot)\n-            : UnsignedLong.ZERO;\n-    return slot.compareTo(oldestAvailableRoot) < 0;\n-  }\n-\n-  private Optional<Bytes32> getBlockRootBySlot(\n-      final UnsignedLong slot, final SignedBlockAndState headBlock) {\n-    checkNotNull(slot);\n-    final UnsignedLong slotsPerHistoricalRoot = UnsignedLong.valueOf(SLOTS_PER_HISTORICAL_ROOT);\n-    // Since older blocks are pruned - query the newest queryable slot where possible\n-    final UnsignedLong youngestQueryableSlot = slot.plus(slotsPerHistoricalRoot);\n-\n-    SignedBlockAndState currentBlock = headBlock;\n-    while (currentBlock != null) {\n-      if (currentBlock.getSlot().compareTo(slot) <= 0) {\n-        // The current block is less than or equal to the target slot, so it must be the block in\n-        // effect\n-        return Optional.of(currentBlock.getRoot());\n-      }\n-      if (BeaconStateUtil.isBlockRootAvailableFromState(currentBlock.getState(), slot)) {\n-        // The root is available from the current state\n-        return Optional.of(BeaconStateUtil.get_block_root_at_slot(currentBlock.getState(), slot));\n-      }\n-\n-      // Pull an older block to search\n-      final UnsignedLong oldestQueryableSlot = currentBlock.getSlot().minus(slotsPerHistoricalRoot);\n-      final UnsignedLong olderSlot = max(youngestQueryableSlot, oldestQueryableSlot);\n-      final Bytes32 olderRoot = get_block_root_at_slot(currentBlock.getState(), olderSlot);\n-      currentBlock = store.getBlockAndState(olderRoot).orElse(null);\n-    }\n-\n-    return Optional.empty();\n+  public Optional<Bytes32> getBlockRootBySlot(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc801f3567dbe615da05df81708193548e26c44b"}, "originalPosition": 150}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTMyOTE1", "url": "https://github.com/ConsenSys/teku/pull/2156#pullrequestreview-431532915", "createdAt": "2020-06-16T13:57:05Z", "commit": {"oid": "bc801f3567dbe615da05df81708193548e26c44b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c06bd4f05356485fa745b438bd13a56fdcafa5a9", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/c06bd4f05356485fa745b438bd13a56fdcafa5a9", "committedDate": "2020-06-16T22:47:58Z", "message": "Clearer test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d5d9536079efb5380fef8fc2c5f6ad31e7ea3b1", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/5d5d9536079efb5380fef8fc2c5f6ad31e7ea3b1", "committedDate": "2020-06-16T22:48:05Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into block-root-from-protoarray"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3938, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}