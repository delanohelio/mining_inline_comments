{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyOTI0NTMy", "number": 1904, "title": "Improve error handling", "bodyText": "PR Description\nAdds a default exception handler so that all uncaught exceptions are sent to Log4J not System.err.\nWhen an OutOfMemoryError occurs and is not caught, exit the process.  Once memory has been exhausted it's extremely unlikely the node can operate correctly and it's better to exit so monitoring tools detect the process is missing and it can be automatically restarted and/or alerts raised.", "createdAt": "2020-05-25T23:34:14Z", "url": "https://github.com/ConsenSys/teku/pull/1904", "merged": true, "mergeCommit": {"oid": "00f914596d92ea1bbc40aed07e6f1f524e624e1d"}, "closed": true, "closedAt": "2020-05-26T21:58:32Z", "author": {"login": "ajsutton"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABck4r-GAH2gAyNDIyOTI0NTMyOmI4NmJiOGUyNTM2MGI2OWE4YjFlMTc2ZmYxYjFjMDIyMzBiNmU4Y2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclLXPKgH2gAyNDIyOTI0NTMyOmU2YTE2MDRiMWJkOGY4NDQ4NjdiNDM3MDI3Y2JlMmVjMmJkMmFkZDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b86bb8e25360b69a8b1e176ff1b1c02230b6e8cd", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/b86bb8e25360b69a8b1e176ff1b1c02230b6e8cd", "committedDate": "2020-05-25T23:30:04Z", "message": "Add a default exception handler so that uncaught exceptions are sent to Log4J.\nExit the process when OutOfMemoryError occurs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cbe0c7b87ec7f840d1c81c372dc3d9106978fab", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/3cbe0c7b87ec7f840d1c81c372dc3d9106978fab", "committedDate": "2020-05-25T23:59:16Z", "message": "Fix SafeFutureTest."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3OTk2OTI5", "url": "https://github.com/ConsenSys/teku/pull/1904#pullrequestreview-417996929", "createdAt": "2020-05-26T06:17:18Z", "commit": {"oid": "3cbe0c7b87ec7f840d1c81c372dc3d9106978fab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NDc1NzMy", "url": "https://github.com/ConsenSys/teku/pull/1904#pullrequestreview-418475732", "createdAt": "2020-05-26T16:33:05Z", "commit": {"oid": "3cbe0c7b87ec7f840d1c81c372dc3d9106978fab"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjozMzowNVrOGamppA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjozNzozMFrOGam0tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU0OTQxMg==", "bodyText": "This is a pretty bad test - we should probably make this more sophisticated at some point :D", "url": "https://github.com/ConsenSys/teku/pull/1904#discussion_r430549412", "createdAt": "2020-05-26T16:33:05Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/TekuDefaultExceptionHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.eventbus.SubscriberExceptionContext;\n+import com.google.common.eventbus.SubscriberExceptionHandler;\n+import java.lang.Thread.UncaughtExceptionHandler;\n+import java.lang.reflect.Method;\n+import java.util.function.Function;\n+import tech.pegasys.teku.events.ChannelExceptionHandler;\n+import tech.pegasys.teku.logging.StatusLogger;\n+\n+public final class TekuDefaultExceptionHandler\n+    implements SubscriberExceptionHandler,\n+        ChannelExceptionHandler,\n+        UncaughtExceptionHandler,\n+        Function<Throwable, Void> {\n+\n+  private final StatusLogger log;\n+\n+  public TekuDefaultExceptionHandler() {\n+    this(StatusLogger.STATUS_LOG);\n+  }\n+\n+  @VisibleForTesting\n+  TekuDefaultExceptionHandler(final StatusLogger log) {\n+    this.log = log;\n+  }\n+\n+  @Override\n+  public void handleException(final Throwable exception, final SubscriberExceptionContext context) {\n+    handleException(\n+        exception,\n+        \"event '\"\n+            + context.getEvent().getClass().getName()\n+            + \"'\"\n+            + \" in handler '\"\n+            + context.getSubscriber().getClass().getName()\n+            + \"'\"\n+            + \" (method  '\"\n+            + context.getSubscriberMethod().getName()\n+            + \"')\");\n+  }\n+\n+  @Override\n+  public void handleException(\n+      final Throwable error,\n+      final Object subscriber,\n+      final Method invokedMethod,\n+      final Object[] args) {\n+    handleException(\n+        error,\n+        \"event '\"\n+            + invokedMethod.getDeclaringClass()\n+            + \".\"\n+            + invokedMethod.getName()\n+            + \"' in handler '\"\n+            + subscriber.getClass().getName()\n+            + \"'\");\n+  }\n+\n+  @Override\n+  public void uncaughtException(final Thread t, final Throwable e) {\n+    handleException(e, t.getName());\n+  }\n+\n+  private void handleException(final Throwable exception, final String subscriberDescription) {\n+    if (isSpecFailure(exception)) {\n+      log.specificationFailure(subscriberDescription, exception);\n+    } else {\n+      log.unexpectedFailure(subscriberDescription, exception);\n+    }\n+    if (exception instanceof OutOfMemoryError) {\n+      System.exit(2);\n+    }\n+  }\n+\n+  private static boolean isSpecFailure(final Throwable exception) {\n+    return exception instanceof IllegalArgumentException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cbe0c7b87ec7f840d1c81c372dc3d9106978fab"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1MDA0NQ==", "bodyText": "This seems like a good idea - but I'm afraid we'll end up bubbling up a lot of noise to the status logger now ...  Maybe the right answer is to make this change and add more custom handling where too much noise bubbles up.", "url": "https://github.com/ConsenSys/teku/pull/1904#discussion_r430550045", "createdAt": "2020-05-26T16:34:03Z", "author": {"login": "mbaxter"}, "path": "util/src/main/java/tech/pegasys/teku/util/async/SafeFuture.java", "diffHunk": "@@ -22,18 +22,16 @@\n import java.util.function.Function;\n import java.util.function.Supplier;\n import java.util.stream.Stream;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n \n public class SafeFuture<T> extends CompletableFuture<T> {\n-  private static final Logger LOG = LogManager.getLogger();\n \n   public static SafeFuture<Void> COMPLETE = SafeFuture.completedFuture(null);\n \n   public static void reportExceptions(final CompletionStage<?> future) {\n     future.exceptionally(\n         error -> {\n-          LOG.error(\"Unhandled exception\", error);\n+          final Thread currentThread = Thread.currentThread();\n+          currentThread.getUncaughtExceptionHandler().uncaughtException(currentThread, error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cbe0c7b87ec7f840d1c81c372dc3d9106978fab"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1MjI0NA==", "bodyText": "nice \ud83d\udcaf", "url": "https://github.com/ConsenSys/teku/pull/1904#discussion_r430552244", "createdAt": "2020-05-26T16:37:30Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/TekuDefaultExceptionHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.eventbus.SubscriberExceptionContext;\n+import com.google.common.eventbus.SubscriberExceptionHandler;\n+import java.lang.Thread.UncaughtExceptionHandler;\n+import java.lang.reflect.Method;\n+import java.util.function.Function;\n+import tech.pegasys.teku.events.ChannelExceptionHandler;\n+import tech.pegasys.teku.logging.StatusLogger;\n+\n+public final class TekuDefaultExceptionHandler\n+    implements SubscriberExceptionHandler,\n+        ChannelExceptionHandler,\n+        UncaughtExceptionHandler,\n+        Function<Throwable, Void> {\n+\n+  private final StatusLogger log;\n+\n+  public TekuDefaultExceptionHandler() {\n+    this(StatusLogger.STATUS_LOG);\n+  }\n+\n+  @VisibleForTesting\n+  TekuDefaultExceptionHandler(final StatusLogger log) {\n+    this.log = log;\n+  }\n+\n+  @Override\n+  public void handleException(final Throwable exception, final SubscriberExceptionContext context) {\n+    handleException(\n+        exception,\n+        \"event '\"\n+            + context.getEvent().getClass().getName()\n+            + \"'\"\n+            + \" in handler '\"\n+            + context.getSubscriber().getClass().getName()\n+            + \"'\"\n+            + \" (method  '\"\n+            + context.getSubscriberMethod().getName()\n+            + \"')\");\n+  }\n+\n+  @Override\n+  public void handleException(\n+      final Throwable error,\n+      final Object subscriber,\n+      final Method invokedMethod,\n+      final Object[] args) {\n+    handleException(\n+        error,\n+        \"event '\"\n+            + invokedMethod.getDeclaringClass()\n+            + \".\"\n+            + invokedMethod.getName()\n+            + \"' in handler '\"\n+            + subscriber.getClass().getName()\n+            + \"'\");\n+  }\n+\n+  @Override\n+  public void uncaughtException(final Thread t, final Throwable e) {\n+    handleException(e, t.getName());\n+  }\n+\n+  private void handleException(final Throwable exception, final String subscriberDescription) {\n+    if (isSpecFailure(exception)) {\n+      log.specificationFailure(subscriberDescription, exception);\n+    } else {\n+      log.unexpectedFailure(subscriberDescription, exception);\n+    }\n+    if (exception instanceof OutOfMemoryError) {\n+      System.exit(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cbe0c7b87ec7f840d1c81c372dc3d9106978fab"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6a1604b1bd8f844867b437027cbe2ec2bd2add0", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/e6a1604b1bd8f844867b437027cbe2ec2bd2add0", "committedDate": "2020-05-26T21:15:37Z", "message": "Merge branch 'master' into crash-properly"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4030, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}