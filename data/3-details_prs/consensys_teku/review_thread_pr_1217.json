{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NzY0ODgy", "number": 1217, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzo1NDo1MVrODiMFBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzo0NDoyMFrODjUsGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTc2MDcwOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzo1NDo1MVrOFtTpvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzo1NDo1MVrOFtTpvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA1MjIyMA==", "bodyText": "nit: we should probably alpha order the endpoints by class name now, so they're easier to find later..", "url": "https://github.com/ConsenSys/teku/pull/1217#discussion_r383052220", "createdAt": "2020-02-23T23:54:51Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -146,9 +146,9 @@ private void addBeaconHandlers(\n     app.get(\n         BeaconChainHeadHandler.ROUTE, new BeaconChainHeadHandler(chainStorageClient, jsonProvider));\n     app.get(BeaconStateHandler.ROUTE, new BeaconStateHandler(chainStorageClient, jsonProvider));\n-    // TODO: not in Minimal or optional specified set - some are similar to lighthouse\n-    // implementation\n-    handlers.add(new BeaconBlockHandler(chainStorageClient, historicalChainData));\n+    app.get(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5040d0fc36c4a2978a549d16132dc6ba8e5c31a4"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTc2MTA2OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzo1NTozMFrOFtTp6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzo1NTozMFrOFtTp6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA1MjI2Ng==", "bodyText": "remove annotation @NotNull", "url": "https://github.com/ConsenSys/teku/pull/1217#discussion_r383052266", "createdAt": "2020-02-23T23:55:30Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -13,57 +13,71 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_start_slot_at_epoch;\n \n-import com.google.common.collect.ImmutableMap;\n import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconBlockResponse;\n import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n import tech.pegasys.artemis.storage.HistoricalChainData;\n \n-public class BeaconBlockHandler implements BeaconRestApiHandler {\n+public class BeaconBlockHandler implements Handler {\n \n   private final ChainStorageClient client;\n   private final HistoricalChainData historicalChainData;\n+  public static final String ROUTE = \"/beacon/block\";\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconBlockHandler(ChainStorageClient client, HistoricalChainData historicalChainData) {\n+  public BeaconBlockHandler(\n+      final ChainStorageClient client,\n+      final HistoricalChainData historicalChainData,\n+      final JsonProvider jsonProvider) {\n     this.client = client;\n     this.historicalChainData = historicalChainData;\n+    this.jsonProvider = jsonProvider;\n   }\n \n   @Override\n-  public String getPath() {\n-    return \"/beacon/block\";\n-  }\n-\n-  @Override\n-  public Object handleRequest(RequestParams param) {\n-    Map<String, List<String>> queryParamMap = param.getQueryParamMap();\n+  public void handle(@NotNull Context ctx) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5040d0fc36c4a2978a549d16132dc6ba8e5c31a4"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTc2MzMzOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QyMzo1OToxMlrOFtTrQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwMjoyMTozOFrOFtUhSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA1MjYxMQ==", "bodyText": "If the block doesn't exist this might get ugly, we might have to do the getBlock, check if its not null, then encode or 404...\na test case around this will show us if its an issue...", "url": "https://github.com/ConsenSys/teku/pull/1217#discussion_r383052611", "createdAt": "2020-02-23T23:59:12Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -13,57 +13,71 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_start_slot_at_epoch;\n \n-import com.google.common.collect.ImmutableMap;\n import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconBlockResponse;\n import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n import tech.pegasys.artemis.storage.HistoricalChainData;\n \n-public class BeaconBlockHandler implements BeaconRestApiHandler {\n+public class BeaconBlockHandler implements Handler {\n \n   private final ChainStorageClient client;\n   private final HistoricalChainData historicalChainData;\n+  public static final String ROUTE = \"/beacon/block\";\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconBlockHandler(ChainStorageClient client, HistoricalChainData historicalChainData) {\n+  public BeaconBlockHandler(\n+      final ChainStorageClient client,\n+      final HistoricalChainData historicalChainData,\n+      final JsonProvider jsonProvider) {\n     this.client = client;\n     this.historicalChainData = historicalChainData;\n+    this.jsonProvider = jsonProvider;\n   }\n \n   @Override\n-  public String getPath() {\n-    return \"/beacon/block\";\n-  }\n-\n-  @Override\n-  public Object handleRequest(RequestParams param) {\n-    Map<String, List<String>> queryParamMap = param.getQueryParamMap();\n+  public void handle(@NotNull Context ctx) throws Exception {\n+    final Map<String, List<String>> queryParamMap = ctx.queryParamMap();\n     if (queryParamMap.containsKey(\"root\")) {\n-      Bytes32 root = Bytes32.fromHexString(param.getQueryParam(\"root\"));\n-      return client.getStore() != null ? client.getStore().getBlock(root) : null;\n+      final Bytes32 root = Bytes32.fromHexString(queryParamMap.get(\"root\").get(0));\n+      if (client.getStore() != null) {\n+        ctx.result(\n+            jsonProvider.objectToJSON(new BeaconBlockResponse(client.getStore().getBlock(root))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5040d0fc36c4a2978a549d16132dc6ba8e5c31a4"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA2NjQ0Mw==", "bodyText": "I'm thinking this could be where my current fail is.  Will investigate.", "url": "https://github.com/ConsenSys/teku/pull/1217#discussion_r383066443", "createdAt": "2020-02-24T02:21:38Z", "author": {"login": "mark-terry"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -13,57 +13,71 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_start_slot_at_epoch;\n \n-import com.google.common.collect.ImmutableMap;\n import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconBlockResponse;\n import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n import tech.pegasys.artemis.storage.HistoricalChainData;\n \n-public class BeaconBlockHandler implements BeaconRestApiHandler {\n+public class BeaconBlockHandler implements Handler {\n \n   private final ChainStorageClient client;\n   private final HistoricalChainData historicalChainData;\n+  public static final String ROUTE = \"/beacon/block\";\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconBlockHandler(ChainStorageClient client, HistoricalChainData historicalChainData) {\n+  public BeaconBlockHandler(\n+      final ChainStorageClient client,\n+      final HistoricalChainData historicalChainData,\n+      final JsonProvider jsonProvider) {\n     this.client = client;\n     this.historicalChainData = historicalChainData;\n+    this.jsonProvider = jsonProvider;\n   }\n \n   @Override\n-  public String getPath() {\n-    return \"/beacon/block\";\n-  }\n-\n-  @Override\n-  public Object handleRequest(RequestParams param) {\n-    Map<String, List<String>> queryParamMap = param.getQueryParamMap();\n+  public void handle(@NotNull Context ctx) throws Exception {\n+    final Map<String, List<String>> queryParamMap = ctx.queryParamMap();\n     if (queryParamMap.containsKey(\"root\")) {\n-      Bytes32 root = Bytes32.fromHexString(param.getQueryParam(\"root\"));\n-      return client.getStore() != null ? client.getStore().getBlock(root) : null;\n+      final Bytes32 root = Bytes32.fromHexString(queryParamMap.get(\"root\").get(0));\n+      if (client.getStore() != null) {\n+        ctx.result(\n+            jsonProvider.objectToJSON(new BeaconBlockResponse(client.getStore().getBlock(root))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA1MjYxMQ=="}, "originalCommit": {"oid": "5040d0fc36c4a2978a549d16132dc6ba8e5c31a4"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MTc5ODE0OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwMDo1MTozOFrOFtT92A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwMDo1MTozOFrOFtT92A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA1NzM2OA==", "bodyText": "shouldReturnNotFoundWhenParametersNotSpecified\nThis is a similar use case to #1218, at least yours is returning a 404, not 500. could potentially return a 400 in this use case...", "url": "https://github.com/ConsenSys/teku/pull/1217#discussion_r383057368", "createdAt": "2020-02-24T00:51:38Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandlerTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n+\n+import static java.util.Optional.empty;\n+import static java.util.Optional.of;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconBlockResponse;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.HistoricalChainData;\n+import tech.pegasys.artemis.storage.Store;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class BeaconBlockHandlerTest {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final ChainStorageClient storageClient = mock(ChainStorageClient.class);\n+  private final HistoricalChainData historicalChainData = mock(HistoricalChainData.class);\n+  private final Store store = mock(Store.class);\n+  private final Bytes32 blockRoot = Bytes32.random();\n+  private final Context context = mock(Context.class);\n+\n+  private final SignedBeaconBlock signedBeaconBlock =\n+      DataStructureUtil.randomSignedBeaconBlock(1, 1);\n+  private final BeaconBlock beaconBlock = signedBeaconBlock.getMessage();\n+  private final BeaconBlockHandler handler =\n+      new BeaconBlockHandler(storageClient, historicalChainData, jsonProvider);\n+\n+  @Test\n+  public void shouldReturnNotFoundWhenRootQueryAndStoreNull() throws Exception {\n+    final String rootKey = \"0xf22e4ec2\";\n+    final Map<String, List<String>> params = Map.of(\"root\", List.of(rootKey));\n+\n+    when(storageClient.getStore()).thenReturn(null);\n+    when(context.queryParamMap()).thenReturn(params);\n+\n+    handler.handle(context);\n+\n+    verify(context).status(SC_NOT_FOUND);\n+  }\n+\n+  @Test\n+  public void shouldReturnNotFoundWhenValidParamNotSpecified() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5040d0fc36c4a2978a549d16132dc6ba8e5c31a4"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTAyNTUxOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoyNjoxNFrOFtyJGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoyNjoxNFrOFtyJGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU1MTc2OA==", "bodyText": "the beacon chain block?", "url": "https://github.com/ConsenSys/teku/pull/1217#discussion_r383551768", "createdAt": "2020-02-24T22:26:14Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -13,68 +13,117 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_start_slot_at_epoch;\n \n-import com.google.common.collect.ImmutableMap;\n import com.google.common.primitives.UnsignedLong;\n-import java.util.List;\n-import java.util.Map;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n-import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconBlockResponse;\n import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n import tech.pegasys.artemis.storage.HistoricalChainData;\n \n-public class BeaconBlockHandler implements BeaconRestApiHandler {\n+public class BeaconBlockHandler implements Handler {\n \n   private final ChainStorageClient client;\n   private final HistoricalChainData historicalChainData;\n+  public static final String ROUTE = \"/beacon/block\";\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconBlockHandler(ChainStorageClient client, HistoricalChainData historicalChainData) {\n+  public BeaconBlockHandler(\n+      final ChainStorageClient client,\n+      final HistoricalChainData historicalChainData,\n+      final JsonProvider jsonProvider) {\n     this.client = client;\n     this.historicalChainData = historicalChainData;\n+    this.jsonProvider = jsonProvider;\n   }\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Request that the node return a specified beacon chain block.\",\n+      tags = {\"Beacon\"},\n+      queryParams = {\n+        @OpenApiParam(name = \"epoch\", description = \"Query by epoch number (uint64)\"),\n+        @OpenApiParam(name = \"slot\", description = \"Query by slot number (uint64)\"),\n+        @OpenApiParam(name = \"root\", description = \"Query by tree hash root (Bytes32)\")\n+      },\n+      description =\n+          \"Request that the node return a beacon chain block that matches the provided criteria.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fb34f0b82b82185906bcdb3db4fb06427a4f43"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTAyNzAxOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoyNjo0NVrOFtyKAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoyNjo0NVrOFtyKAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU1MjAwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @OpenApiResponse(status = \"400\", description = \"Invalid parameters supplied\"),\n          \n          \n            \n                    @OpenApiResponse(status = \"400\", description = \"Invalid parameter supplied\"),", "url": "https://github.com/ConsenSys/teku/pull/1217#discussion_r383552003", "createdAt": "2020-02-24T22:26:45Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -13,68 +13,117 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_start_slot_at_epoch;\n \n-import com.google.common.collect.ImmutableMap;\n import com.google.common.primitives.UnsignedLong;\n-import java.util.List;\n-import java.util.Map;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n-import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconBlockResponse;\n import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n import tech.pegasys.artemis.storage.HistoricalChainData;\n \n-public class BeaconBlockHandler implements BeaconRestApiHandler {\n+public class BeaconBlockHandler implements Handler {\n \n   private final ChainStorageClient client;\n   private final HistoricalChainData historicalChainData;\n+  public static final String ROUTE = \"/beacon/block\";\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconBlockHandler(ChainStorageClient client, HistoricalChainData historicalChainData) {\n+  public BeaconBlockHandler(\n+      final ChainStorageClient client,\n+      final HistoricalChainData historicalChainData,\n+      final JsonProvider jsonProvider) {\n     this.client = client;\n     this.historicalChainData = historicalChainData;\n+    this.jsonProvider = jsonProvider;\n   }\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Request that the node return a specified beacon chain block.\",\n+      tags = {\"Beacon\"},\n+      queryParams = {\n+        @OpenApiParam(name = \"epoch\", description = \"Query by epoch number (uint64)\"),\n+        @OpenApiParam(name = \"slot\", description = \"Query by slot number (uint64)\"),\n+        @OpenApiParam(name = \"root\", description = \"Query by tree hash root (Bytes32)\")\n+      },\n+      description =\n+          \"Request that the node return a beacon chain block that matches the provided criteria.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = \"200\",\n+            content = @OpenApiContent(from = BeaconBlockResponse.class)),\n+        @OpenApiResponse(status = \"400\", description = \"Invalid parameters supplied\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fb34f0b82b82185906bcdb3db4fb06427a4f43"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTAzMDMwOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoyNzo1MlrOFtyL6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjoyNzo1MlrOFtyL6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU1MjQ4OQ==", "bodyText": "do we want to give any more info eg one of root or epoch or slot", "url": "https://github.com/ConsenSys/teku/pull/1217#discussion_r383552489", "createdAt": "2020-02-24T22:27:52Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -13,68 +13,117 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_start_slot_at_epoch;\n \n-import com.google.common.collect.ImmutableMap;\n import com.google.common.primitives.UnsignedLong;\n-import java.util.List;\n-import java.util.Map;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n-import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconBlockResponse;\n import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n import tech.pegasys.artemis.storage.HistoricalChainData;\n \n-public class BeaconBlockHandler implements BeaconRestApiHandler {\n+public class BeaconBlockHandler implements Handler {\n \n   private final ChainStorageClient client;\n   private final HistoricalChainData historicalChainData;\n+  public static final String ROUTE = \"/beacon/block\";\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconBlockHandler(ChainStorageClient client, HistoricalChainData historicalChainData) {\n+  public BeaconBlockHandler(\n+      final ChainStorageClient client,\n+      final HistoricalChainData historicalChainData,\n+      final JsonProvider jsonProvider) {\n     this.client = client;\n     this.historicalChainData = historicalChainData;\n+    this.jsonProvider = jsonProvider;\n   }\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Request that the node return a specified beacon chain block.\",\n+      tags = {\"Beacon\"},\n+      queryParams = {\n+        @OpenApiParam(name = \"epoch\", description = \"Query by epoch number (uint64)\"),\n+        @OpenApiParam(name = \"slot\", description = \"Query by slot number (uint64)\"),\n+        @OpenApiParam(name = \"root\", description = \"Query by tree hash root (Bytes32)\")\n+      },\n+      description =\n+          \"Request that the node return a beacon chain block that matches the provided criteria.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = \"200\",\n+            content = @OpenApiContent(from = BeaconBlockResponse.class)),\n+        @OpenApiResponse(status = \"400\", description = \"Invalid parameters supplied\"),\n+        @OpenApiResponse(status = \"404\", description = \"Specified block not found\")\n+      })\n   @Override\n-  public String getPath() {\n-    return \"/beacon/block\";\n-  }\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      if (ctx.queryParamMap().size() > 1) {\n+        throw new IllegalArgumentException(\n+            \"Too many query parameters specified. Please supply only one.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fb34f0b82b82185906bcdb3db4fb06427a4f43"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTA1MjA3OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjozNjoyNlrOFtyZyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjozNjoyNlrOFtyZyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU1NjA0MA==", "bodyText": "add a string constant for these, then we can reference them from tests and from here. something like EPOCH_PARAMETER or EPOCH", "url": "https://github.com/ConsenSys/teku/pull/1217#discussion_r383556040", "createdAt": "2020-02-24T22:36:26Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -13,68 +13,117 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_start_slot_at_epoch;\n \n-import com.google.common.collect.ImmutableMap;\n import com.google.common.primitives.UnsignedLong;\n-import java.util.List;\n-import java.util.Map;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n-import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconBlockResponse;\n import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n import tech.pegasys.artemis.storage.HistoricalChainData;\n \n-public class BeaconBlockHandler implements BeaconRestApiHandler {\n+public class BeaconBlockHandler implements Handler {\n \n   private final ChainStorageClient client;\n   private final HistoricalChainData historicalChainData;\n+  public static final String ROUTE = \"/beacon/block\";\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconBlockHandler(ChainStorageClient client, HistoricalChainData historicalChainData) {\n+  public BeaconBlockHandler(\n+      final ChainStorageClient client,\n+      final HistoricalChainData historicalChainData,\n+      final JsonProvider jsonProvider) {\n     this.client = client;\n     this.historicalChainData = historicalChainData;\n+    this.jsonProvider = jsonProvider;\n   }\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Request that the node return a specified beacon chain block.\",\n+      tags = {\"Beacon\"},\n+      queryParams = {\n+        @OpenApiParam(name = \"epoch\", description = \"Query by epoch number (uint64)\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fb34f0b82b82185906bcdb3db4fb06427a4f43"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTA2MjU5OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMjo0MDo0MFrOFtygLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDo0MjowM1rOFt0-oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU1NzY3OQ==", "bodyText": "probably should try to be consistent with the pattern, either when.thenReturn or doReturn.when...", "url": "https://github.com/ConsenSys/teku/pull/1217#discussion_r383557679", "createdAt": "2020-02-24T22:40:40Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandlerTest.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.empty;\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.util.ContextUtil;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconBlockResponse;\n+import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.HistoricalChainData;\n+import tech.pegasys.artemis.storage.Store;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class BeaconBlockHandlerTest {\n+  private static final BadRequest BAD_REQUEST =\n+      new BadRequest(\n+          SC_BAD_REQUEST, \"Query parameter missing. Must specify one of root or epoch or slot.\");\n+\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final ChainStorageClient storageClient = mock(ChainStorageClient.class);\n+  private final HistoricalChainData historicalChainData = mock(HistoricalChainData.class);\n+  private final Store store = mock(Store.class);\n+  private final Bytes32 blockRoot = Bytes32.random();\n+  private final Context context = mock(Context.class);\n+\n+  private final SignedBeaconBlock signedBeaconBlock =\n+      DataStructureUtil.randomSignedBeaconBlock(1, 1);\n+  private final BeaconBlockHandler handler =\n+      new BeaconBlockHandler(storageClient, historicalChainData, jsonProvider);\n+  private final Context realContext =\n+      spy(ContextUtil.init(mock(HttpServletRequest.class), mock(HttpServletResponse.class)));\n+\n+  @Test\n+  public void shouldReturnNotFoundWhenRootQueryAndStoreNull() throws Exception {\n+    final String rootKey = \"0xf22e4ec2\";\n+    final Map<String, List<String>> params = Map.of(\"root\", List.of(rootKey));\n+\n+    when(storageClient.getStore()).thenReturn(null);\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(rootKey);\n+\n+    handler.handle(context);\n+\n+    verify(context).result(jsonProvider.objectToJSON(BAD_REQUEST));\n+  }\n+\n+  @Test\n+  public void shouldReturnNotFoundWhenValidParamNotSpecified() throws Exception {\n+    handler.handle(context);\n+    verify(context).result(jsonProvider.objectToJSON(BAD_REQUEST));\n+  }\n+\n+  @Test\n+  public void shouldReturnNotFoundWhenEpochQueryAndBlockNotFound() throws Exception {\n+    final String epochNum = \"1\";\n+    final Map<String, List<String>> params = Map.of(\"epoch\", List.of(epochNum));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(epochNum);\n+    when(storageClient.getBlockRootBySlot(any())).thenReturn(Optional.of(blockRoot));\n+    when(storageClient.getStore()).thenReturn(store);\n+    when(store.getBlock(any())).thenReturn(null);\n+    when(historicalChainData.getFinalizedBlockAtSlot(any()))\n+        .thenReturn(SafeFuture.completedFuture(empty()));\n+\n+    handler.handle(context);\n+\n+    verify(context).status(SC_NOT_FOUND);\n+  }\n+\n+  @Test\n+  public void shouldReturnNotFoundWhenSlotQueryAndBlockNotFound() throws Exception {\n+    final String slotNum = \"1\";\n+    final Map<String, List<String>> params = Map.of(\"slot\", List.of(slotNum));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(slotNum);\n+    when(storageClient.getStore()).thenReturn(store);\n+    when(storageClient.getBlockRootBySlot(any())).thenReturn(Optional.of(blockRoot));\n+    when(store.getBlock(any())).thenReturn(null);\n+    when(historicalChainData.getFinalizedBlockAtSlot(any()))\n+        .thenReturn(SafeFuture.completedFuture(empty()));\n+\n+    handler.handle(context);\n+\n+    verify(context).status(SC_NOT_FOUND);\n+  }\n+\n+  @Test\n+  public void shouldReturnNotFoundWhenEpochQueryAndNoBlockRootAndBlockNotFound() throws Exception {\n+    final String epochNum = \"1\";\n+    final Map<String, List<String>> params = Map.of(\"epoch\", List.of(epochNum));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(epochNum);\n+    when(storageClient.getBlockRootBySlot(any())).thenReturn(empty());\n+    when(historicalChainData.getFinalizedBlockAtSlot(any()))\n+        .thenReturn(SafeFuture.completedFuture(empty()));\n+\n+    handler.handle(context);\n+\n+    verify(context).status(SC_NOT_FOUND);\n+  }\n+\n+  @Test\n+  public void shouldReturnNotFoundWhenSlotQueryAndNoBlockRootAndBlockNotFound() throws Exception {\n+    final String slotNum = \"1\";\n+    final Map<String, List<String>> params = Map.of(\"slot\", List.of(slotNum));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(slotNum);\n+    when(storageClient.getBlockRootBySlot(any())).thenReturn(empty());\n+    when(historicalChainData.getFinalizedBlockAtSlot(any()))\n+        .thenReturn(SafeFuture.completedFuture(empty()));\n+\n+    handler.handle(context);\n+\n+    verify(context).status(SC_NOT_FOUND);\n+  }\n+\n+  @Test\n+  public void shouldReturnBlockWhenRootParamSpecified() throws Exception {\n+    final String hash = signedBeaconBlock.getParent_root().toHexString();\n+    final Map<String, List<String>> params = Map.of(\"root\", List.of(hash));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(hash);\n+    when(storageClient.getStore()).thenReturn(store);\n+    when(store.getSignedBlock(any())).thenReturn(signedBeaconBlock);\n+\n+    handler.handle(context);\n+\n+    final String jsonResponse =\n+        jsonProvider.objectToJSON(new BeaconBlockResponse(signedBeaconBlock));\n+    verify(context).result(jsonResponse);\n+  }\n+\n+  @Test\n+  public void shouldReturnBlockWhenEpochQuery() throws Exception {\n+    final String epochNum = \"1\";\n+    final Map<String, List<String>> params = Map.of(\"epoch\", List.of(epochNum));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(epochNum);\n+    when(storageClient.getBlockRootBySlot(any())).thenReturn(Optional.of(blockRoot));\n+    when(storageClient.getStore()).thenReturn(store);\n+    when(store.getSignedBlock(any())).thenReturn(signedBeaconBlock);\n+    when(historicalChainData.getFinalizedBlockAtSlot(any()))\n+        .thenReturn(SafeFuture.completedFuture(empty()));\n+\n+    handler.handle(context);\n+\n+    final String jsonResponse =\n+        jsonProvider.objectToJSON(new BeaconBlockResponse(signedBeaconBlock));\n+    verify(context).result(jsonResponse);\n+  }\n+\n+  @Test\n+  public void shouldReturnBlockWhenSlotQuery() throws Exception {\n+    final String slotNum = \"1\";\n+    final Map<String, List<String>> params = Map.of(\"slot\", List.of(slotNum));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(slotNum);\n+    when(storageClient.getStore()).thenReturn(store);\n+    when(storageClient.getBlockRootBySlot(any())).thenReturn(Optional.of(blockRoot));\n+    when(store.getSignedBlock(any())).thenReturn(signedBeaconBlock);\n+    when(historicalChainData.getFinalizedBlockAtSlot(any()))\n+        .thenReturn(SafeFuture.completedFuture(empty()));\n+\n+    handler.handle(context);\n+\n+    final String jsonResponse =\n+        jsonProvider.objectToJSON(new BeaconBlockResponse(signedBeaconBlock));\n+    verify(context).result(jsonResponse);\n+  }\n+\n+  @Test\n+  public void shouldReturnBlockWhenEpochQueryAndNoBlockRoot() throws Exception {\n+    final String epochNum = \"1\";\n+    final Map<String, List<String>> params = Map.of(\"epoch\", List.of(epochNum));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(epochNum);\n+    when(storageClient.getBlockRootBySlot(any())).thenReturn(empty());\n+    when(historicalChainData.getFinalizedBlockAtSlot(any()))\n+        .thenReturn(SafeFuture.completedFuture(Optional.of(signedBeaconBlock)));\n+\n+    handler.handle(context);\n+\n+    final String jsonResponse =\n+        jsonProvider.objectToJSON(new BeaconBlockResponse(signedBeaconBlock));\n+    verify(context).result(jsonResponse);\n+  }\n+\n+  @Test\n+  public void shouldReturnBlockWhenSlotQueryAndNoBlockRoot() throws Exception {\n+    final String slotNum = \"1\";\n+    final Map<String, List<String>> params = Map.of(\"slot\", List.of(slotNum));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(slotNum);\n+    when(storageClient.getBlockRootBySlot(any())).thenReturn(empty());\n+    when(historicalChainData.getFinalizedBlockAtSlot(any()))\n+        .thenReturn(SafeFuture.completedFuture(Optional.of(signedBeaconBlock)));\n+\n+    handler.handle(context);\n+\n+    final String jsonResponse =\n+        jsonProvider.objectToJSON(new BeaconBlockResponse(signedBeaconBlock));\n+    verify(context).result(jsonResponse);\n+  }\n+\n+  @Test\n+  public void shouldFailWhenNoParams() throws Exception {\n+    handler.handle(realContext);\n+\n+    final String actualResponse = realContext.resultString();\n+    final String expectedResponse = jsonProvider.objectToJSON(BAD_REQUEST);\n+\n+    assertThat(actualResponse).isEqualTo(expectedResponse);\n+  }\n+\n+  @Test\n+  public void shouldFailWithEmptyRootParamValue() throws Exception {\n+    final Map<String, List<String>> params = Map.of(\"root\", emptyList());\n+\n+    doReturn(params).when(realContext).queryParamMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fb34f0b82b82185906bcdb3db4fb06427a4f43"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU5ODI0MQ==", "bodyText": "realContext is a spy(), which (IIRC) requires the doReturn pattern due to evaluation order.", "url": "https://github.com/ConsenSys/teku/pull/1217#discussion_r383598241", "createdAt": "2020-02-25T00:42:03Z", "author": {"login": "mark-terry"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandlerTest.java", "diffHunk": "@@ -0,0 +1,299 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.empty;\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.util.ContextUtil;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconBlockResponse;\n+import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.HistoricalChainData;\n+import tech.pegasys.artemis.storage.Store;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class BeaconBlockHandlerTest {\n+  private static final BadRequest BAD_REQUEST =\n+      new BadRequest(\n+          SC_BAD_REQUEST, \"Query parameter missing. Must specify one of root or epoch or slot.\");\n+\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final ChainStorageClient storageClient = mock(ChainStorageClient.class);\n+  private final HistoricalChainData historicalChainData = mock(HistoricalChainData.class);\n+  private final Store store = mock(Store.class);\n+  private final Bytes32 blockRoot = Bytes32.random();\n+  private final Context context = mock(Context.class);\n+\n+  private final SignedBeaconBlock signedBeaconBlock =\n+      DataStructureUtil.randomSignedBeaconBlock(1, 1);\n+  private final BeaconBlockHandler handler =\n+      new BeaconBlockHandler(storageClient, historicalChainData, jsonProvider);\n+  private final Context realContext =\n+      spy(ContextUtil.init(mock(HttpServletRequest.class), mock(HttpServletResponse.class)));\n+\n+  @Test\n+  public void shouldReturnNotFoundWhenRootQueryAndStoreNull() throws Exception {\n+    final String rootKey = \"0xf22e4ec2\";\n+    final Map<String, List<String>> params = Map.of(\"root\", List.of(rootKey));\n+\n+    when(storageClient.getStore()).thenReturn(null);\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(rootKey);\n+\n+    handler.handle(context);\n+\n+    verify(context).result(jsonProvider.objectToJSON(BAD_REQUEST));\n+  }\n+\n+  @Test\n+  public void shouldReturnNotFoundWhenValidParamNotSpecified() throws Exception {\n+    handler.handle(context);\n+    verify(context).result(jsonProvider.objectToJSON(BAD_REQUEST));\n+  }\n+\n+  @Test\n+  public void shouldReturnNotFoundWhenEpochQueryAndBlockNotFound() throws Exception {\n+    final String epochNum = \"1\";\n+    final Map<String, List<String>> params = Map.of(\"epoch\", List.of(epochNum));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(epochNum);\n+    when(storageClient.getBlockRootBySlot(any())).thenReturn(Optional.of(blockRoot));\n+    when(storageClient.getStore()).thenReturn(store);\n+    when(store.getBlock(any())).thenReturn(null);\n+    when(historicalChainData.getFinalizedBlockAtSlot(any()))\n+        .thenReturn(SafeFuture.completedFuture(empty()));\n+\n+    handler.handle(context);\n+\n+    verify(context).status(SC_NOT_FOUND);\n+  }\n+\n+  @Test\n+  public void shouldReturnNotFoundWhenSlotQueryAndBlockNotFound() throws Exception {\n+    final String slotNum = \"1\";\n+    final Map<String, List<String>> params = Map.of(\"slot\", List.of(slotNum));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(slotNum);\n+    when(storageClient.getStore()).thenReturn(store);\n+    when(storageClient.getBlockRootBySlot(any())).thenReturn(Optional.of(blockRoot));\n+    when(store.getBlock(any())).thenReturn(null);\n+    when(historicalChainData.getFinalizedBlockAtSlot(any()))\n+        .thenReturn(SafeFuture.completedFuture(empty()));\n+\n+    handler.handle(context);\n+\n+    verify(context).status(SC_NOT_FOUND);\n+  }\n+\n+  @Test\n+  public void shouldReturnNotFoundWhenEpochQueryAndNoBlockRootAndBlockNotFound() throws Exception {\n+    final String epochNum = \"1\";\n+    final Map<String, List<String>> params = Map.of(\"epoch\", List.of(epochNum));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(epochNum);\n+    when(storageClient.getBlockRootBySlot(any())).thenReturn(empty());\n+    when(historicalChainData.getFinalizedBlockAtSlot(any()))\n+        .thenReturn(SafeFuture.completedFuture(empty()));\n+\n+    handler.handle(context);\n+\n+    verify(context).status(SC_NOT_FOUND);\n+  }\n+\n+  @Test\n+  public void shouldReturnNotFoundWhenSlotQueryAndNoBlockRootAndBlockNotFound() throws Exception {\n+    final String slotNum = \"1\";\n+    final Map<String, List<String>> params = Map.of(\"slot\", List.of(slotNum));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(slotNum);\n+    when(storageClient.getBlockRootBySlot(any())).thenReturn(empty());\n+    when(historicalChainData.getFinalizedBlockAtSlot(any()))\n+        .thenReturn(SafeFuture.completedFuture(empty()));\n+\n+    handler.handle(context);\n+\n+    verify(context).status(SC_NOT_FOUND);\n+  }\n+\n+  @Test\n+  public void shouldReturnBlockWhenRootParamSpecified() throws Exception {\n+    final String hash = signedBeaconBlock.getParent_root().toHexString();\n+    final Map<String, List<String>> params = Map.of(\"root\", List.of(hash));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(hash);\n+    when(storageClient.getStore()).thenReturn(store);\n+    when(store.getSignedBlock(any())).thenReturn(signedBeaconBlock);\n+\n+    handler.handle(context);\n+\n+    final String jsonResponse =\n+        jsonProvider.objectToJSON(new BeaconBlockResponse(signedBeaconBlock));\n+    verify(context).result(jsonResponse);\n+  }\n+\n+  @Test\n+  public void shouldReturnBlockWhenEpochQuery() throws Exception {\n+    final String epochNum = \"1\";\n+    final Map<String, List<String>> params = Map.of(\"epoch\", List.of(epochNum));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(epochNum);\n+    when(storageClient.getBlockRootBySlot(any())).thenReturn(Optional.of(blockRoot));\n+    when(storageClient.getStore()).thenReturn(store);\n+    when(store.getSignedBlock(any())).thenReturn(signedBeaconBlock);\n+    when(historicalChainData.getFinalizedBlockAtSlot(any()))\n+        .thenReturn(SafeFuture.completedFuture(empty()));\n+\n+    handler.handle(context);\n+\n+    final String jsonResponse =\n+        jsonProvider.objectToJSON(new BeaconBlockResponse(signedBeaconBlock));\n+    verify(context).result(jsonResponse);\n+  }\n+\n+  @Test\n+  public void shouldReturnBlockWhenSlotQuery() throws Exception {\n+    final String slotNum = \"1\";\n+    final Map<String, List<String>> params = Map.of(\"slot\", List.of(slotNum));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(slotNum);\n+    when(storageClient.getStore()).thenReturn(store);\n+    when(storageClient.getBlockRootBySlot(any())).thenReturn(Optional.of(blockRoot));\n+    when(store.getSignedBlock(any())).thenReturn(signedBeaconBlock);\n+    when(historicalChainData.getFinalizedBlockAtSlot(any()))\n+        .thenReturn(SafeFuture.completedFuture(empty()));\n+\n+    handler.handle(context);\n+\n+    final String jsonResponse =\n+        jsonProvider.objectToJSON(new BeaconBlockResponse(signedBeaconBlock));\n+    verify(context).result(jsonResponse);\n+  }\n+\n+  @Test\n+  public void shouldReturnBlockWhenEpochQueryAndNoBlockRoot() throws Exception {\n+    final String epochNum = \"1\";\n+    final Map<String, List<String>> params = Map.of(\"epoch\", List.of(epochNum));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(epochNum);\n+    when(storageClient.getBlockRootBySlot(any())).thenReturn(empty());\n+    when(historicalChainData.getFinalizedBlockAtSlot(any()))\n+        .thenReturn(SafeFuture.completedFuture(Optional.of(signedBeaconBlock)));\n+\n+    handler.handle(context);\n+\n+    final String jsonResponse =\n+        jsonProvider.objectToJSON(new BeaconBlockResponse(signedBeaconBlock));\n+    verify(context).result(jsonResponse);\n+  }\n+\n+  @Test\n+  public void shouldReturnBlockWhenSlotQueryAndNoBlockRoot() throws Exception {\n+    final String slotNum = \"1\";\n+    final Map<String, List<String>> params = Map.of(\"slot\", List.of(slotNum));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(context.queryParam(any())).thenReturn(slotNum);\n+    when(storageClient.getBlockRootBySlot(any())).thenReturn(empty());\n+    when(historicalChainData.getFinalizedBlockAtSlot(any()))\n+        .thenReturn(SafeFuture.completedFuture(Optional.of(signedBeaconBlock)));\n+\n+    handler.handle(context);\n+\n+    final String jsonResponse =\n+        jsonProvider.objectToJSON(new BeaconBlockResponse(signedBeaconBlock));\n+    verify(context).result(jsonResponse);\n+  }\n+\n+  @Test\n+  public void shouldFailWhenNoParams() throws Exception {\n+    handler.handle(realContext);\n+\n+    final String actualResponse = realContext.resultString();\n+    final String expectedResponse = jsonProvider.objectToJSON(BAD_REQUEST);\n+\n+    assertThat(actualResponse).isEqualTo(expectedResponse);\n+  }\n+\n+  @Test\n+  public void shouldFailWithEmptyRootParamValue() throws Exception {\n+    final Map<String, List<String>> params = Map.of(\"root\", emptyList());\n+\n+    doReturn(params).when(realContext).queryParamMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU1NzY3OQ=="}, "originalCommit": {"oid": "64fb34f0b82b82185906bcdb3db4fb06427a4f43"}, "originalPosition": 261}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTI0ODMzOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDowMzoxOVrOFt0RFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDowMzoxOVrOFt0RFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4NjU4MQ==", "bodyText": "validateParams\nLets make this static and in a shared lib, it'll be used a lot.", "url": "https://github.com/ConsenSys/teku/pull/1217#discussion_r383586581", "createdAt": "2020-02-25T00:03:19Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -13,68 +13,117 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_start_slot_at_epoch;\n \n-import com.google.common.collect.ImmutableMap;\n import com.google.common.primitives.UnsignedLong;\n-import java.util.List;\n-import java.util.Map;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n-import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconBlockResponse;\n import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n import tech.pegasys.artemis.storage.HistoricalChainData;\n \n-public class BeaconBlockHandler implements BeaconRestApiHandler {\n+public class BeaconBlockHandler implements Handler {\n \n   private final ChainStorageClient client;\n   private final HistoricalChainData historicalChainData;\n+  public static final String ROUTE = \"/beacon/block\";\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconBlockHandler(ChainStorageClient client, HistoricalChainData historicalChainData) {\n+  public BeaconBlockHandler(\n+      final ChainStorageClient client,\n+      final HistoricalChainData historicalChainData,\n+      final JsonProvider jsonProvider) {\n     this.client = client;\n     this.historicalChainData = historicalChainData;\n+    this.jsonProvider = jsonProvider;\n   }\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Request that the node return a specified beacon chain block.\",\n+      tags = {\"Beacon\"},\n+      queryParams = {\n+        @OpenApiParam(name = \"epoch\", description = \"Query by epoch number (uint64)\"),\n+        @OpenApiParam(name = \"slot\", description = \"Query by slot number (uint64)\"),\n+        @OpenApiParam(name = \"root\", description = \"Query by tree hash root (Bytes32)\")\n+      },\n+      description =\n+          \"Request that the node return a beacon chain block that matches the provided criteria.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = \"200\",\n+            content = @OpenApiContent(from = BeaconBlockResponse.class)),\n+        @OpenApiResponse(status = \"400\", description = \"Invalid parameters supplied\"),\n+        @OpenApiResponse(status = \"404\", description = \"Specified block not found\")\n+      })\n   @Override\n-  public String getPath() {\n-    return \"/beacon/block\";\n-  }\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      if (ctx.queryParamMap().size() > 1) {\n+        throw new IllegalArgumentException(\n+            \"Too many query parameters specified. Please supply only one.\");\n+      }\n \n-  @Override\n-  public Object handleRequest(RequestParams param) {\n-    Map<String, List<String>> queryParamMap = param.getQueryParamMap();\n-    if (queryParamMap.containsKey(\"root\")) {\n-      Bytes32 root = Bytes32.fromHexString(param.getQueryParam(\"root\"));\n-      return client.getStore() != null ? client.getStore().getBlock(root) : null;\n-    }\n+      if (ctx.queryParamMap().containsKey(\"root\")) {\n+        final Bytes32 root = Bytes32.fromHexString(validateParms(ctx, \"root\"));\n+        if (client.getStore() != null) {\n+          final SignedBeaconBlock block = client.getStore().getSignedBlock(root);\n+          if (block != null) {\n+            ctx.result(jsonProvider.objectToJSON(new BeaconBlockResponse(block)));\n+            return;\n+          }\n+          ctx.status(SC_NOT_FOUND);\n+          return;\n+        }\n+      }\n \n-    UnsignedLong slot;\n-    if (queryParamMap.containsKey(\"epoch\")) {\n-      slot = compute_start_slot_at_epoch(UnsignedLong.valueOf(param.getQueryParam(\"epoch\")));\n-    } else if (queryParamMap.containsKey(\"slot\")) {\n-      slot = UnsignedLong.valueOf(param.getQueryParam(\"slot\"));\n-    } else {\n-      return null;\n-    }\n+      final UnsignedLong slot;\n+      if (ctx.queryParamMap().containsKey(\"epoch\")) {\n+        slot = compute_start_slot_at_epoch(UnsignedLong.valueOf(validateParms(ctx, \"epoch\")));\n+      } else if (ctx.queryParamMap().containsKey(\"slot\")) {\n+        slot = UnsignedLong.valueOf(validateParms(ctx, \"slot\"));\n+      } else {\n+        throw new IllegalArgumentException(\n+            \"Query parameter missing. Must specify one of root or epoch or slot.\");\n+      }\n \n-    return getBlockBySlot(slot)\n-        .map(\n-            block ->\n-                ImmutableMap.of(\"block\", block, \"blockRoot\", block.hash_tree_root().toHexString()))\n-        .orElse(null);\n+      final Optional<SignedBeaconBlock> blockBySlot = getBlockBySlot(slot);\n+      if (blockBySlot.isPresent()) {\n+        ctx.result(jsonProvider.objectToJSON(new BeaconBlockResponse(blockBySlot.get())));\n+        return;\n+      }\n+      ctx.status(SC_NOT_FOUND);\n+    } catch (final IllegalArgumentException e) {\n+      ctx.result(jsonProvider.objectToJSON(new BadRequest(SC_BAD_REQUEST, e.getMessage())));\n+    }\n   }\n \n-  private Optional<BeaconBlock> getBlockBySlot(UnsignedLong slot) {\n+  private Optional<SignedBeaconBlock> getBlockBySlot(final UnsignedLong slot) {\n     return client\n         .getBlockRootBySlot(slot)\n-        .map(root -> client.getStore().getBlock(root))\n-        .or(\n-            () -> {\n-              Optional<SignedBeaconBlock> signedBeaconBlock =\n-                  historicalChainData.getFinalizedBlockAtSlot(slot).join();\n-              return signedBeaconBlock.map(SignedBeaconBlock::getMessage);\n-            });\n-  };\n+        .map(root -> client.getStore().getSignedBlock(root))\n+        .or(() -> historicalChainData.getFinalizedBlockAtSlot(slot).join());\n+  }\n+\n+  private String validateParms(final Context ctx, final String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fb34f0b82b82185906bcdb3db4fb06427a4f43"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjY5NzgwOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDozNjoyNFrOFu7SRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDozNjoyNFrOFu7SRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1MDE0OQ==", "bodyText": "you can use all of the constants through here for parameters, tags, response codes", "url": "https://github.com/ConsenSys/teku/pull/1217#discussion_r384750149", "createdAt": "2020-02-26T20:36:24Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -13,71 +13,116 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.EPOCH;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.ROOT;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiUtils.validateQueryParameter;\n import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_start_slot_at_epoch;\n \n-import com.google.common.collect.ImmutableMap;\n import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n-import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconBlockResponse;\n import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n import tech.pegasys.artemis.storage.HistoricalChainData;\n \n-public class BeaconBlockHandler implements BeaconRestApiHandler {\n+public class BeaconBlockHandler implements Handler {\n \n   private final ChainStorageClient client;\n   private final HistoricalChainData historicalChainData;\n+  public static final String ROUTE = \"/beacon/block\";\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconBlockHandler(ChainStorageClient client, HistoricalChainData historicalChainData) {\n+  public BeaconBlockHandler(\n+      final ChainStorageClient client,\n+      final HistoricalChainData historicalChainData,\n+      final JsonProvider jsonProvider) {\n     this.client = client;\n     this.historicalChainData = historicalChainData;\n+    this.jsonProvider = jsonProvider;\n   }\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Request that the node return the specified beacon chain block.\",\n+      tags = {\"Beacon\"},\n+      queryParams = {\n+        @OpenApiParam(name = \"epoch\", description = \"Query by epoch number (uint64)\"),\n+        @OpenApiParam(name = \"slot\", description = \"Query by slot number (uint64)\"),\n+        @OpenApiParam(name = \"root\", description = \"Query by tree hash root (Bytes32)\")\n+      },\n+      description =\n+          \"Request that the node return the beacon chain block that matches the provided criteria.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = \"200\",\n+            content = @OpenApiContent(from = BeaconBlockResponse.class)),\n+        @OpenApiResponse(status = \"400\", description = \"Invalid parameter supplied\"),\n+        @OpenApiResponse(status = \"404\", description = \"Specified block not found\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea31965f7865e7f48e546f1585c0c3296113187"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjcxNDQ5OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDo0MTo0MVrOFu7cag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzo0MTowMlrOFvEUYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1Mjc0Ng==", "bodyText": "so the store being null here is basically the SC_NO_CONTENT use-case that we have currently...", "url": "https://github.com/ConsenSys/teku/pull/1217#discussion_r384752746", "createdAt": "2020-02-26T20:41:41Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -13,71 +13,116 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.EPOCH;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.ROOT;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiUtils.validateQueryParameter;\n import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_start_slot_at_epoch;\n \n-import com.google.common.collect.ImmutableMap;\n import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n-import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconBlockResponse;\n import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n import tech.pegasys.artemis.storage.HistoricalChainData;\n \n-public class BeaconBlockHandler implements BeaconRestApiHandler {\n+public class BeaconBlockHandler implements Handler {\n \n   private final ChainStorageClient client;\n   private final HistoricalChainData historicalChainData;\n+  public static final String ROUTE = \"/beacon/block\";\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconBlockHandler(ChainStorageClient client, HistoricalChainData historicalChainData) {\n+  public BeaconBlockHandler(\n+      final ChainStorageClient client,\n+      final HistoricalChainData historicalChainData,\n+      final JsonProvider jsonProvider) {\n     this.client = client;\n     this.historicalChainData = historicalChainData;\n+    this.jsonProvider = jsonProvider;\n   }\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Request that the node return the specified beacon chain block.\",\n+      tags = {\"Beacon\"},\n+      queryParams = {\n+        @OpenApiParam(name = \"epoch\", description = \"Query by epoch number (uint64)\"),\n+        @OpenApiParam(name = \"slot\", description = \"Query by slot number (uint64)\"),\n+        @OpenApiParam(name = \"root\", description = \"Query by tree hash root (Bytes32)\")\n+      },\n+      description =\n+          \"Request that the node return the beacon chain block that matches the provided criteria.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = \"200\",\n+            content = @OpenApiContent(from = BeaconBlockResponse.class)),\n+        @OpenApiResponse(status = \"400\", description = \"Invalid parameter supplied\"),\n+        @OpenApiResponse(status = \"404\", description = \"Specified block not found\")\n+      })\n   @Override\n-  public String getPath() {\n-    return \"/beacon/block\";\n-  }\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      if (ctx.queryParamMap().size() > 1) {\n+        throw new IllegalArgumentException(\n+            \"Too many query parameters specified. Please supply only one.\");\n+      }\n \n-  @Override\n-  public Object handleRequest(RequestParams param) {\n-    Map<String, List<String>> queryParamMap = param.getQueryParamMap();\n-    if (queryParamMap.containsKey(ROOT)) {\n-      Bytes32 root = Bytes32.fromHexString(param.getQueryParam(ROOT));\n-      return client.getStore() != null ? client.getStore().getBlock(root) : null;\n-    }\n+      final Map<String, List<String>> queryParamMap = ctx.queryParamMap();\n+      if (ctx.queryParamMap().containsKey(ROOT)) {\n+        final Bytes32 root = Bytes32.fromHexString(validateQueryParameter(queryParamMap, ROOT));\n+        if (client.getStore() != null) {\n+          final SignedBeaconBlock block = client.getStore().getSignedBlock(root);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea31965f7865e7f48e546f1585c0c3296113187"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1OTg5Nw==", "bodyText": "Hrm i think this is probably a bigger problem... We need to probably use the combinedChainDataClient, because this client is only non finalized blocks which is something i found out doing beacon/state.\nThe upshot, is we can build most of the complexity of using chainDataClient v. historicalChainDataClient into the combinedChainDataClient, and then we're just responding to that.\nThe downside is then we really need to be respecting futures, because the storage is async.\nThe better thing might be to complete this task, then raise another to allow /beacon/block to retrieve finalized blocks...", "url": "https://github.com/ConsenSys/teku/pull/1217#discussion_r384759897", "createdAt": "2020-02-26T20:55:26Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -13,71 +13,116 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.EPOCH;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.ROOT;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiUtils.validateQueryParameter;\n import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_start_slot_at_epoch;\n \n-import com.google.common.collect.ImmutableMap;\n import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n-import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconBlockResponse;\n import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n import tech.pegasys.artemis.storage.HistoricalChainData;\n \n-public class BeaconBlockHandler implements BeaconRestApiHandler {\n+public class BeaconBlockHandler implements Handler {\n \n   private final ChainStorageClient client;\n   private final HistoricalChainData historicalChainData;\n+  public static final String ROUTE = \"/beacon/block\";\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconBlockHandler(ChainStorageClient client, HistoricalChainData historicalChainData) {\n+  public BeaconBlockHandler(\n+      final ChainStorageClient client,\n+      final HistoricalChainData historicalChainData,\n+      final JsonProvider jsonProvider) {\n     this.client = client;\n     this.historicalChainData = historicalChainData;\n+    this.jsonProvider = jsonProvider;\n   }\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Request that the node return the specified beacon chain block.\",\n+      tags = {\"Beacon\"},\n+      queryParams = {\n+        @OpenApiParam(name = \"epoch\", description = \"Query by epoch number (uint64)\"),\n+        @OpenApiParam(name = \"slot\", description = \"Query by slot number (uint64)\"),\n+        @OpenApiParam(name = \"root\", description = \"Query by tree hash root (Bytes32)\")\n+      },\n+      description =\n+          \"Request that the node return the beacon chain block that matches the provided criteria.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = \"200\",\n+            content = @OpenApiContent(from = BeaconBlockResponse.class)),\n+        @OpenApiResponse(status = \"400\", description = \"Invalid parameter supplied\"),\n+        @OpenApiResponse(status = \"404\", description = \"Specified block not found\")\n+      })\n   @Override\n-  public String getPath() {\n-    return \"/beacon/block\";\n-  }\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      if (ctx.queryParamMap().size() > 1) {\n+        throw new IllegalArgumentException(\n+            \"Too many query parameters specified. Please supply only one.\");\n+      }\n \n-  @Override\n-  public Object handleRequest(RequestParams param) {\n-    Map<String, List<String>> queryParamMap = param.getQueryParamMap();\n-    if (queryParamMap.containsKey(ROOT)) {\n-      Bytes32 root = Bytes32.fromHexString(param.getQueryParam(ROOT));\n-      return client.getStore() != null ? client.getStore().getBlock(root) : null;\n-    }\n+      final Map<String, List<String>> queryParamMap = ctx.queryParamMap();\n+      if (ctx.queryParamMap().containsKey(ROOT)) {\n+        final Bytes32 root = Bytes32.fromHexString(validateQueryParameter(queryParamMap, ROOT));\n+        if (client.getStore() != null) {\n+          final SignedBeaconBlock block = client.getStore().getSignedBlock(root);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1Mjc0Ng=="}, "originalCommit": {"oid": "bea31965f7865e7f48e546f1585c0c3296113187"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5ODE0NQ==", "bodyText": "Agreed - best bet is to always use CombinedChainDataClient for REST APIs.  The ChainStorageClient only has non-finalised blocks, everything else is written to disk and dropped from memory so only available from HistoricalChainDataClient.  CombinedChainDataClient is designed to work out which one you need for you.\nSeparate PR is a sensible approach.   Javalin makes working with async data simple since you can pass a Future to ctx.result. BeaconStateHandler is an example of doing this.", "url": "https://github.com/ConsenSys/teku/pull/1217#discussion_r384898145", "createdAt": "2020-02-27T03:41:02Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -13,71 +13,116 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.EPOCH;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.ROOT;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiUtils.validateQueryParameter;\n import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_start_slot_at_epoch;\n \n-import com.google.common.collect.ImmutableMap;\n import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n-import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconBlockResponse;\n import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n import tech.pegasys.artemis.storage.HistoricalChainData;\n \n-public class BeaconBlockHandler implements BeaconRestApiHandler {\n+public class BeaconBlockHandler implements Handler {\n \n   private final ChainStorageClient client;\n   private final HistoricalChainData historicalChainData;\n+  public static final String ROUTE = \"/beacon/block\";\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconBlockHandler(ChainStorageClient client, HistoricalChainData historicalChainData) {\n+  public BeaconBlockHandler(\n+      final ChainStorageClient client,\n+      final HistoricalChainData historicalChainData,\n+      final JsonProvider jsonProvider) {\n     this.client = client;\n     this.historicalChainData = historicalChainData;\n+    this.jsonProvider = jsonProvider;\n   }\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Request that the node return the specified beacon chain block.\",\n+      tags = {\"Beacon\"},\n+      queryParams = {\n+        @OpenApiParam(name = \"epoch\", description = \"Query by epoch number (uint64)\"),\n+        @OpenApiParam(name = \"slot\", description = \"Query by slot number (uint64)\"),\n+        @OpenApiParam(name = \"root\", description = \"Query by tree hash root (Bytes32)\")\n+      },\n+      description =\n+          \"Request that the node return the beacon chain block that matches the provided criteria.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = \"200\",\n+            content = @OpenApiContent(from = BeaconBlockResponse.class)),\n+        @OpenApiResponse(status = \"400\", description = \"Invalid parameter supplied\"),\n+        @OpenApiResponse(status = \"404\", description = \"Specified block not found\")\n+      })\n   @Override\n-  public String getPath() {\n-    return \"/beacon/block\";\n-  }\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      if (ctx.queryParamMap().size() > 1) {\n+        throw new IllegalArgumentException(\n+            \"Too many query parameters specified. Please supply only one.\");\n+      }\n \n-  @Override\n-  public Object handleRequest(RequestParams param) {\n-    Map<String, List<String>> queryParamMap = param.getQueryParamMap();\n-    if (queryParamMap.containsKey(ROOT)) {\n-      Bytes32 root = Bytes32.fromHexString(param.getQueryParam(ROOT));\n-      return client.getStore() != null ? client.getStore().getBlock(root) : null;\n-    }\n+      final Map<String, List<String>> queryParamMap = ctx.queryParamMap();\n+      if (ctx.queryParamMap().containsKey(ROOT)) {\n+        final Bytes32 root = Bytes32.fromHexString(validateQueryParameter(queryParamMap, ROOT));\n+        if (client.getStore() != null) {\n+          final SignedBeaconBlock block = client.getStore().getSignedBlock(root);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc1Mjc0Ng=="}, "originalCommit": {"oid": "bea31965f7865e7f48e546f1585c0c3296113187"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Mjc4MDEyOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTowMTo0NVrOFu8EWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTowMTo0NVrOFu8EWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2Mjk3MA==", "bodyText": "CombinedChainDataClient.getbBlockAtSlotExact", "url": "https://github.com/ConsenSys/teku/pull/1217#discussion_r384762970", "createdAt": "2020-02-26T21:01:45Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -13,71 +13,116 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.EPOCH;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.ROOT;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiUtils.validateQueryParameter;\n import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_start_slot_at_epoch;\n \n-import com.google.common.collect.ImmutableMap;\n import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n-import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconBlockResponse;\n import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n import tech.pegasys.artemis.storage.HistoricalChainData;\n \n-public class BeaconBlockHandler implements BeaconRestApiHandler {\n+public class BeaconBlockHandler implements Handler {\n \n   private final ChainStorageClient client;\n   private final HistoricalChainData historicalChainData;\n+  public static final String ROUTE = \"/beacon/block\";\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconBlockHandler(ChainStorageClient client, HistoricalChainData historicalChainData) {\n+  public BeaconBlockHandler(\n+      final ChainStorageClient client,\n+      final HistoricalChainData historicalChainData,\n+      final JsonProvider jsonProvider) {\n     this.client = client;\n     this.historicalChainData = historicalChainData;\n+    this.jsonProvider = jsonProvider;\n   }\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Request that the node return the specified beacon chain block.\",\n+      tags = {\"Beacon\"},\n+      queryParams = {\n+        @OpenApiParam(name = \"epoch\", description = \"Query by epoch number (uint64)\"),\n+        @OpenApiParam(name = \"slot\", description = \"Query by slot number (uint64)\"),\n+        @OpenApiParam(name = \"root\", description = \"Query by tree hash root (Bytes32)\")\n+      },\n+      description =\n+          \"Request that the node return the beacon chain block that matches the provided criteria.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = \"200\",\n+            content = @OpenApiContent(from = BeaconBlockResponse.class)),\n+        @OpenApiResponse(status = \"400\", description = \"Invalid parameter supplied\"),\n+        @OpenApiResponse(status = \"404\", description = \"Specified block not found\")\n+      })\n   @Override\n-  public String getPath() {\n-    return \"/beacon/block\";\n-  }\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      if (ctx.queryParamMap().size() > 1) {\n+        throw new IllegalArgumentException(\n+            \"Too many query parameters specified. Please supply only one.\");\n+      }\n \n-  @Override\n-  public Object handleRequest(RequestParams param) {\n-    Map<String, List<String>> queryParamMap = param.getQueryParamMap();\n-    if (queryParamMap.containsKey(ROOT)) {\n-      Bytes32 root = Bytes32.fromHexString(param.getQueryParam(ROOT));\n-      return client.getStore() != null ? client.getStore().getBlock(root) : null;\n-    }\n+      final Map<String, List<String>> queryParamMap = ctx.queryParamMap();\n+      if (ctx.queryParamMap().containsKey(ROOT)) {\n+        final Bytes32 root = Bytes32.fromHexString(validateQueryParameter(queryParamMap, ROOT));\n+        if (client.getStore() != null) {\n+          final SignedBeaconBlock block = client.getStore().getSignedBlock(root);\n+          if (block != null) {\n+            ctx.result(jsonProvider.objectToJSON(new BeaconBlockResponse(block)));\n+            return;\n+          }\n+          ctx.status(SC_NOT_FOUND);\n+          return;\n+        }\n+      }\n \n-    UnsignedLong slot;\n-    if (queryParamMap.containsKey(EPOCH)) {\n-      slot = compute_start_slot_at_epoch(UnsignedLong.valueOf(param.getQueryParam(EPOCH)));\n-    } else if (queryParamMap.containsKey(SLOT)) {\n-      slot = UnsignedLong.valueOf(param.getQueryParam(SLOT));\n-    } else {\n-      return null;\n-    }\n+      final UnsignedLong slot;\n+      if (ctx.queryParamMap().containsKey(EPOCH)) {\n+        slot =\n+            compute_start_slot_at_epoch(\n+                UnsignedLong.valueOf(validateQueryParameter(queryParamMap, EPOCH)));\n+      } else if (ctx.queryParamMap().containsKey(SLOT)) {\n+        slot = UnsignedLong.valueOf(validateQueryParameter(queryParamMap, SLOT));\n+      } else {\n+        throw new IllegalArgumentException(\n+            \"Query parameter missing. Must specify one of root or epoch or slot.\");\n+      }\n \n-    return getBlockBySlot(slot)\n-        .map(\n-            block ->\n-                ImmutableMap.of(\"block\", block, \"blockRoot\", block.hash_tree_root().toHexString()))\n-        .orElse(null);\n+      final Optional<SignedBeaconBlock> blockBySlot = getBlockBySlot(slot);\n+      if (blockBySlot.isPresent()) {\n+        ctx.result(jsonProvider.objectToJSON(new BeaconBlockResponse(blockBySlot.get())));\n+        return;\n+      }\n+      ctx.status(SC_NOT_FOUND);\n+    } catch (final IllegalArgumentException e) {\n+      ctx.result(jsonProvider.objectToJSON(new BadRequest(e.getMessage())));\n+    }\n   }\n \n-  private Optional<BeaconBlock> getBlockBySlot(UnsignedLong slot) {\n+  private Optional<SignedBeaconBlock> getBlockBySlot(final UnsignedLong slot) {\n     return client\n         .getBlockRootBySlot(slot)\n-        .map(root -> client.getStore().getBlock(root))\n-        .or(\n-            () -> {\n-              Optional<SignedBeaconBlock> signedBeaconBlock =\n-                  historicalChainData.getFinalizedBlockAtSlot(slot).join();\n-              return signedBeaconBlock.map(SignedBeaconBlock::getMessage);\n-            });\n-  };\n+        .map(root -> client.getStore().getSignedBlock(root))\n+        .or(() -> historicalChainData.getFinalizedBlockAtSlot(slot).join());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea31965f7865e7f48e546f1585c0c3296113187"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzY1NzIxOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzo0NDoyMFrOFvEW4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMzo0NDoyMFrOFvEW4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg5ODc4NA==", "bodyText": "Please avoid calling join in production code.  There are some places it can't be avoided and a few places that we do call it and shouldn't, but generally it's better to use the chaining methods (thenApply, thenCompose etc) and not just block the thread potentially forever.", "url": "https://github.com/ConsenSys/teku/pull/1217#discussion_r384898784", "createdAt": "2020-02-27T03:44:20Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -13,71 +13,116 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.EPOCH;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.ROOT;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiUtils.validateQueryParameter;\n import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_start_slot_at_epoch;\n \n-import com.google.common.collect.ImmutableMap;\n import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n-import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconBlockResponse;\n import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n import tech.pegasys.artemis.storage.HistoricalChainData;\n \n-public class BeaconBlockHandler implements BeaconRestApiHandler {\n+public class BeaconBlockHandler implements Handler {\n \n   private final ChainStorageClient client;\n   private final HistoricalChainData historicalChainData;\n+  public static final String ROUTE = \"/beacon/block\";\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconBlockHandler(ChainStorageClient client, HistoricalChainData historicalChainData) {\n+  public BeaconBlockHandler(\n+      final ChainStorageClient client,\n+      final HistoricalChainData historicalChainData,\n+      final JsonProvider jsonProvider) {\n     this.client = client;\n     this.historicalChainData = historicalChainData;\n+    this.jsonProvider = jsonProvider;\n   }\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Request that the node return the specified beacon chain block.\",\n+      tags = {\"Beacon\"},\n+      queryParams = {\n+        @OpenApiParam(name = \"epoch\", description = \"Query by epoch number (uint64)\"),\n+        @OpenApiParam(name = \"slot\", description = \"Query by slot number (uint64)\"),\n+        @OpenApiParam(name = \"root\", description = \"Query by tree hash root (Bytes32)\")\n+      },\n+      description =\n+          \"Request that the node return the beacon chain block that matches the provided criteria.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = \"200\",\n+            content = @OpenApiContent(from = BeaconBlockResponse.class)),\n+        @OpenApiResponse(status = \"400\", description = \"Invalid parameter supplied\"),\n+        @OpenApiResponse(status = \"404\", description = \"Specified block not found\")\n+      })\n   @Override\n-  public String getPath() {\n-    return \"/beacon/block\";\n-  }\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      if (ctx.queryParamMap().size() > 1) {\n+        throw new IllegalArgumentException(\n+            \"Too many query parameters specified. Please supply only one.\");\n+      }\n \n-  @Override\n-  public Object handleRequest(RequestParams param) {\n-    Map<String, List<String>> queryParamMap = param.getQueryParamMap();\n-    if (queryParamMap.containsKey(ROOT)) {\n-      Bytes32 root = Bytes32.fromHexString(param.getQueryParam(ROOT));\n-      return client.getStore() != null ? client.getStore().getBlock(root) : null;\n-    }\n+      final Map<String, List<String>> queryParamMap = ctx.queryParamMap();\n+      if (ctx.queryParamMap().containsKey(ROOT)) {\n+        final Bytes32 root = Bytes32.fromHexString(validateQueryParameter(queryParamMap, ROOT));\n+        if (client.getStore() != null) {\n+          final SignedBeaconBlock block = client.getStore().getSignedBlock(root);\n+          if (block != null) {\n+            ctx.result(jsonProvider.objectToJSON(new BeaconBlockResponse(block)));\n+            return;\n+          }\n+          ctx.status(SC_NOT_FOUND);\n+          return;\n+        }\n+      }\n \n-    UnsignedLong slot;\n-    if (queryParamMap.containsKey(EPOCH)) {\n-      slot = compute_start_slot_at_epoch(UnsignedLong.valueOf(param.getQueryParam(EPOCH)));\n-    } else if (queryParamMap.containsKey(SLOT)) {\n-      slot = UnsignedLong.valueOf(param.getQueryParam(SLOT));\n-    } else {\n-      return null;\n-    }\n+      final UnsignedLong slot;\n+      if (ctx.queryParamMap().containsKey(EPOCH)) {\n+        slot =\n+            compute_start_slot_at_epoch(\n+                UnsignedLong.valueOf(validateQueryParameter(queryParamMap, EPOCH)));\n+      } else if (ctx.queryParamMap().containsKey(SLOT)) {\n+        slot = UnsignedLong.valueOf(validateQueryParameter(queryParamMap, SLOT));\n+      } else {\n+        throw new IllegalArgumentException(\n+            \"Query parameter missing. Must specify one of root or epoch or slot.\");\n+      }\n \n-    return getBlockBySlot(slot)\n-        .map(\n-            block ->\n-                ImmutableMap.of(\"block\", block, \"blockRoot\", block.hash_tree_root().toHexString()))\n-        .orElse(null);\n+      final Optional<SignedBeaconBlock> blockBySlot = getBlockBySlot(slot);\n+      if (blockBySlot.isPresent()) {\n+        ctx.result(jsonProvider.objectToJSON(new BeaconBlockResponse(blockBySlot.get())));\n+        return;\n+      }\n+      ctx.status(SC_NOT_FOUND);\n+    } catch (final IllegalArgumentException e) {\n+      ctx.result(jsonProvider.objectToJSON(new BadRequest(e.getMessage())));\n+    }\n   }\n \n-  private Optional<BeaconBlock> getBlockBySlot(UnsignedLong slot) {\n+  private Optional<SignedBeaconBlock> getBlockBySlot(final UnsignedLong slot) {\n     return client\n         .getBlockRootBySlot(slot)\n-        .map(root -> client.getStore().getBlock(root))\n-        .or(\n-            () -> {\n-              Optional<SignedBeaconBlock> signedBeaconBlock =\n-                  historicalChainData.getFinalizedBlockAtSlot(slot).join();\n-              return signedBeaconBlock.map(SignedBeaconBlock::getMessage);\n-            });\n-  };\n+        .map(root -> client.getStore().getSignedBlock(root))\n+        .or(() -> historicalChainData.getFinalizedBlockAtSlot(slot).join());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdf199c2d262d9f67401041152ce084a86b9205a"}, "originalPosition": 151}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2662, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}