{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NzI5MzA1", "number": 2204, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOToyMTozNVrOEIGl0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOToyNToyOFrOEIGqSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTMyMDQ5OnYy", "diffSide": "RIGHT", "path": "logging/src/main/java/tech/pegasys/teku/logging/ValidatorLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOToyMTozNVrOGn3R6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOTozMDoyM1rOGn3jsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1MzM1Mg==", "bodyText": "Could make this more compact with something like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                actualValidatorIndex.ifPresentOrElse(\n          \n          \n            \n                    actualIndex ->\n          \n          \n            \n                        log.error(\n          \n          \n            \n                            print(\n          \n          \n            \n                                PREFIX\n          \n          \n            \n                                    + \"Produced invalid attestation for slot \"\n          \n          \n            \n                                    + slot\n          \n          \n            \n                                    + \" with expected validator index: \"\n          \n          \n            \n                                    + expectedValidatorIndex\n          \n          \n            \n                                    + \" and actual validator index: \"\n          \n          \n            \n                                    + actualIndex\n          \n          \n            \n                                    + \" invalid reason: \"\n          \n          \n            \n                                    + reason,\n          \n          \n            \n                                Color.RED)),\n          \n          \n            \n                final String actualDescription = actualValidatorIndex.map(idx -> \" and actual validator index: \" + actualIndex).orElse(\"\");\n          \n          \n            \n                log.error(\n          \n          \n            \n                            print(\n          \n          \n            \n                                PREFIX\n          \n          \n            \n                                    + \"Produced invalid attestation for slot \"\n          \n          \n            \n                                    + slot\n          \n          \n            \n                                    + \" with expected validator index: \"\n          \n          \n            \n                                    + expectedValidatorIndex\n          \n          \n            \n                                    + actualDescription\n          \n          \n            \n                                    + \" . Invalid reason: \"\n          \n          \n            \n                                    + reason,\n          \n          \n            \n                                Color.RED)),", "url": "https://github.com/ConsenSys/teku/pull/2204#discussion_r444453352", "createdAt": "2020-06-23T19:21:35Z", "author": {"login": "mbaxter"}, "path": "logging/src/main/java/tech/pegasys/teku/logging/ValidatorLogger.java", "diffHunk": "@@ -88,9 +89,36 @@ public void aggregationSkipped(final UnsignedLong slot) {\n             Color.YELLOW));\n   }\n \n-  public void producedInvalidAttestation(final UnsignedLong slot, final String reason) {\n-    log.error(\n-        print(PREFIX + \"Produced invalid attestation for slot \" + slot + \": \" + reason, Color.RED));\n+  public void producedInvalidAttestation(\n+      final UnsignedLong slot,\n+      final int expectedValidatorIndex,\n+      final Optional<Integer> actualValidatorIndex,\n+      final String reason) {\n+    actualValidatorIndex.ifPresentOrElse(\n+        actualIndex ->\n+            log.error(\n+                print(\n+                    PREFIX\n+                        + \"Produced invalid attestation for slot \"\n+                        + slot\n+                        + \" with expected validator index: \"\n+                        + expectedValidatorIndex\n+                        + \" and actual validator index: \"\n+                        + actualIndex\n+                        + \" invalid reason: \"\n+                        + reason,\n+                    Color.RED)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfcb8c8a604f431a176ced13d074f821daa5b1b1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1NzkwNQ==", "bodyText": "This makes sense to me.", "url": "https://github.com/ConsenSys/teku/pull/2204#discussion_r444457905", "createdAt": "2020-06-23T19:30:23Z", "author": {"login": "cemozerr"}, "path": "logging/src/main/java/tech/pegasys/teku/logging/ValidatorLogger.java", "diffHunk": "@@ -88,9 +89,36 @@ public void aggregationSkipped(final UnsignedLong slot) {\n             Color.YELLOW));\n   }\n \n-  public void producedInvalidAttestation(final UnsignedLong slot, final String reason) {\n-    log.error(\n-        print(PREFIX + \"Produced invalid attestation for slot \" + slot + \": \" + reason, Color.RED));\n+  public void producedInvalidAttestation(\n+      final UnsignedLong slot,\n+      final int expectedValidatorIndex,\n+      final Optional<Integer> actualValidatorIndex,\n+      final String reason) {\n+    actualValidatorIndex.ifPresentOrElse(\n+        actualIndex ->\n+            log.error(\n+                print(\n+                    PREFIX\n+                        + \"Produced invalid attestation for slot \"\n+                        + slot\n+                        + \" with expected validator index: \"\n+                        + expectedValidatorIndex\n+                        + \" and actual validator index: \"\n+                        + actualIndex\n+                        + \" invalid reason: \"\n+                        + reason,\n+                    Color.RED)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1MzM1Mg=="}, "originalCommit": {"oid": "dfcb8c8a604f431a176ced13d074f821daa5b1b1"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTMzMTk0OnYy", "diffSide": "RIGHT", "path": "validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/ValidatorApiHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOToyNToyOFrOGn3Zww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOToyOTo1N1rOGn3iuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1NTM2Mw==", "bodyText": "Do we need this method?  Could we just require the validatorIndex as a second param and drop the Optional?", "url": "https://github.com/ConsenSys/teku/pull/2204#discussion_r444455363", "createdAt": "2020-06-23T19:25:28Z", "author": {"login": "mbaxter"}, "path": "validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/ValidatorApiHandler.java", "diffHunk": "@@ -222,13 +223,29 @@ public void subscribeToPersistentSubnets(Set<SubnetSubscription> subnetSubscript\n   }\n \n   @Override\n-  public void sendSignedAttestation(final Attestation attestation) {\n+  public void sendSignedAttestation(\n+      final Attestation attestation, final Optional<Integer> expectedValidatorIndex) {\n     attestationManager\n         .onAttestation(ValidateableAttestation.fromAttestation(attestation))\n         .ifInvalid(\n-            reason ->\n-                VALIDATOR_LOGGER.producedInvalidAttestation(\n-                    attestation.getData().getSlot(), reason));\n+            reason -> {\n+              int actualValidatorIndex =\n+                  get_attesting_indices(\n+                          combinedChainDataClient.getHeadStateFromStore().orElseThrow(),\n+                          attestation.getData(),\n+                          attestation.getAggregation_bits())\n+                      .get(0);\n+              VALIDATOR_LOGGER.producedInvalidAttestation(\n+                  attestation.getData().getSlot(),\n+                  actualValidatorIndex,\n+                  expectedValidatorIndex,\n+                  reason);\n+            });\n+  }\n+\n+  @Override\n+  public void sendSignedAttestation(final Attestation attestation) {\n+    sendSignedAttestation(attestation, Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfcb8c8a604f431a176ced13d074f821daa5b1b1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1NzY1OQ==", "bodyText": "I kept it because otherwise, I would need to change a lot of tests, and since we don't normally require this change and only doing it for debugging purposes, I decided to keep this and pass the validator index as optional. I don't have a strong preference though.", "url": "https://github.com/ConsenSys/teku/pull/2204#discussion_r444457659", "createdAt": "2020-06-23T19:29:57Z", "author": {"login": "cemozerr"}, "path": "validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/ValidatorApiHandler.java", "diffHunk": "@@ -222,13 +223,29 @@ public void subscribeToPersistentSubnets(Set<SubnetSubscription> subnetSubscript\n   }\n \n   @Override\n-  public void sendSignedAttestation(final Attestation attestation) {\n+  public void sendSignedAttestation(\n+      final Attestation attestation, final Optional<Integer> expectedValidatorIndex) {\n     attestationManager\n         .onAttestation(ValidateableAttestation.fromAttestation(attestation))\n         .ifInvalid(\n-            reason ->\n-                VALIDATOR_LOGGER.producedInvalidAttestation(\n-                    attestation.getData().getSlot(), reason));\n+            reason -> {\n+              int actualValidatorIndex =\n+                  get_attesting_indices(\n+                          combinedChainDataClient.getHeadStateFromStore().orElseThrow(),\n+                          attestation.getData(),\n+                          attestation.getAggregation_bits())\n+                      .get(0);\n+              VALIDATOR_LOGGER.producedInvalidAttestation(\n+                  attestation.getData().getSlot(),\n+                  actualValidatorIndex,\n+                  expectedValidatorIndex,\n+                  reason);\n+            });\n+  }\n+\n+  @Override\n+  public void sendSignedAttestation(final Attestation attestation) {\n+    sendSignedAttestation(attestation, Optional.empty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1NTM2Mw=="}, "originalCommit": {"oid": "dfcb8c8a604f431a176ced13d074f821daa5b1b1"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3625, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}