{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMTk5NzI0", "number": 2940, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMDo0MzowNVrOEsa3Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMjo0ODoxM1rOEsbgCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDEyODc5OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostBlock.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMDo0MzowNVrOHfqdOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMDo0NToyMlrOHfqeHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk2MzUxNA==", "bodyText": "I don't think this matches the expected output.  It looks like the new API has no content for either 200 or 202 and error responses should have a code and message.", "url": "https://github.com/ConsenSys/teku/pull/2940#discussion_r502963514", "createdAt": "2020-10-11T20:43:05Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostBlock.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_ACCEPTED;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR_REQUIRED;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.SyncDataProvider;\n+import tech.pegasys.teku.api.ValidatorDataProvider;\n+import tech.pegasys.teku.api.schema.SignedBeaconBlock;\n+import tech.pegasys.teku.api.schema.ValidatorBlockResult;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class PostBlock implements Handler {\n+  public static final String ROUTE = \"/eth/v1/beacon/blocks\";\n+\n+  private final JsonProvider jsonProvider;\n+  private final ValidatorDataProvider validatorDataProvider;\n+  private final SyncDataProvider syncDataProvider;\n+\n+  public PostBlock(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    this.validatorDataProvider = dataProvider.getValidatorDataProvider();\n+    this.syncDataProvider = dataProvider.getSyncDataProvider();\n+    this.jsonProvider = jsonProvider;\n+  }\n+\n+  PostBlock(\n+      final ValidatorDataProvider validatorDataProvider,\n+      final SyncDataProvider syncDataProvider,\n+      final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.validatorDataProvider = validatorDataProvider;\n+    this.syncDataProvider = syncDataProvider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.POST,\n+      summary = \"Publish a signed block\",\n+      tags = {TAG_V1_BEACON, TAG_VALIDATOR_REQUIRED},\n+      requestBody =\n+          @OpenApiRequestBody(content = {@OpenApiContent(from = SignedBeaconBlock.class)}),\n+      description =\n+          \"Submit a signed beacon block to the beacon node to be imported.\"\n+              + \" The beacon node performs the required validation.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            description = \"Block has been successfully broadcast, validated and imported.\"),\n+        @OpenApiResponse(\n+            status = RES_ACCEPTED,\n+            description =\n+                \"Block has been successfully broadcast, but failed validation and has not been imported.\"),\n+        @OpenApiResponse(status = RES_BAD_REQUEST, description = \"Unable to parse request body.\"),\n+        @OpenApiResponse(\n+            status = RES_INTERNAL_ERROR,\n+            description = \"Beacon node experienced an internal error.\"),\n+        @OpenApiResponse(\n+            status = RES_SERVICE_UNAVAILABLE,\n+            description = \"Beacon node is currently syncing.\")\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      if (syncDataProvider.getSyncStatus().is_syncing) {\n+        ctx.status(SC_SERVICE_UNAVAILABLE);\n+        return;\n+      }\n+\n+      final SignedBeaconBlock signedBeaconBlock =\n+          jsonProvider.jsonToObject(ctx.body(), SignedBeaconBlock.class);\n+\n+      ctx.result(\n+          validatorDataProvider\n+              .submitSignedBlock(signedBeaconBlock)\n+              .thenApplyChecked(\n+                  validatorBlockResult -> handleResponseContext(ctx, validatorBlockResult)));\n+\n+    } catch (final JsonMappingException | JsonParseException ex) {\n+      ctx.status(SC_BAD_REQUEST);\n+    } catch (final Exception ex) {\n+      ctx.status(SC_INTERNAL_SERVER_ERROR);\n+    }\n+  }\n+\n+  private String handleResponseContext(\n+      final Context ctx, final ValidatorBlockResult validatorBlockResult)\n+      throws JsonProcessingException {\n+    ctx.status(validatorBlockResult.getResponseCode());\n+    if (validatorBlockResult.getFailureReason().isPresent()) {\n+      return jsonProvider.objectToJSON(validatorBlockResult.getFailureReason().get());\n+    } else {\n+      return jsonProvider.objectToJSON(\n+          validatorBlockResult.getHash_tree_root().map(Bytes32::toHexString).orElse(\"\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7ef4a378b7d65b0a995ebece14c73e1a6ccc177"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk2MzU3Nw==", "bodyText": "Can we also add some tests to cover what this should output please? I discovered on the weekend we had none and it was actually converting an Optional to JSON which wasn't pretty.", "url": "https://github.com/ConsenSys/teku/pull/2940#discussion_r502963577", "createdAt": "2020-10-11T20:43:55Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostBlock.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_ACCEPTED;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR_REQUIRED;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.SyncDataProvider;\n+import tech.pegasys.teku.api.ValidatorDataProvider;\n+import tech.pegasys.teku.api.schema.SignedBeaconBlock;\n+import tech.pegasys.teku.api.schema.ValidatorBlockResult;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class PostBlock implements Handler {\n+  public static final String ROUTE = \"/eth/v1/beacon/blocks\";\n+\n+  private final JsonProvider jsonProvider;\n+  private final ValidatorDataProvider validatorDataProvider;\n+  private final SyncDataProvider syncDataProvider;\n+\n+  public PostBlock(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    this.validatorDataProvider = dataProvider.getValidatorDataProvider();\n+    this.syncDataProvider = dataProvider.getSyncDataProvider();\n+    this.jsonProvider = jsonProvider;\n+  }\n+\n+  PostBlock(\n+      final ValidatorDataProvider validatorDataProvider,\n+      final SyncDataProvider syncDataProvider,\n+      final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.validatorDataProvider = validatorDataProvider;\n+    this.syncDataProvider = syncDataProvider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.POST,\n+      summary = \"Publish a signed block\",\n+      tags = {TAG_V1_BEACON, TAG_VALIDATOR_REQUIRED},\n+      requestBody =\n+          @OpenApiRequestBody(content = {@OpenApiContent(from = SignedBeaconBlock.class)}),\n+      description =\n+          \"Submit a signed beacon block to the beacon node to be imported.\"\n+              + \" The beacon node performs the required validation.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            description = \"Block has been successfully broadcast, validated and imported.\"),\n+        @OpenApiResponse(\n+            status = RES_ACCEPTED,\n+            description =\n+                \"Block has been successfully broadcast, but failed validation and has not been imported.\"),\n+        @OpenApiResponse(status = RES_BAD_REQUEST, description = \"Unable to parse request body.\"),\n+        @OpenApiResponse(\n+            status = RES_INTERNAL_ERROR,\n+            description = \"Beacon node experienced an internal error.\"),\n+        @OpenApiResponse(\n+            status = RES_SERVICE_UNAVAILABLE,\n+            description = \"Beacon node is currently syncing.\")\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      if (syncDataProvider.getSyncStatus().is_syncing) {\n+        ctx.status(SC_SERVICE_UNAVAILABLE);\n+        return;\n+      }\n+\n+      final SignedBeaconBlock signedBeaconBlock =\n+          jsonProvider.jsonToObject(ctx.body(), SignedBeaconBlock.class);\n+\n+      ctx.result(\n+          validatorDataProvider\n+              .submitSignedBlock(signedBeaconBlock)\n+              .thenApplyChecked(\n+                  validatorBlockResult -> handleResponseContext(ctx, validatorBlockResult)));\n+\n+    } catch (final JsonMappingException | JsonParseException ex) {\n+      ctx.status(SC_BAD_REQUEST);\n+    } catch (final Exception ex) {\n+      ctx.status(SC_INTERNAL_SERVER_ERROR);\n+    }\n+  }\n+\n+  private String handleResponseContext(\n+      final Context ctx, final ValidatorBlockResult validatorBlockResult)\n+      throws JsonProcessingException {\n+    ctx.status(validatorBlockResult.getResponseCode());\n+    if (validatorBlockResult.getFailureReason().isPresent()) {\n+      return jsonProvider.objectToJSON(validatorBlockResult.getFailureReason().get());\n+    } else {\n+      return jsonProvider.objectToJSON(\n+          validatorBlockResult.getHash_tree_root().map(Bytes32::toHexString).orElse(\"\"));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk2MzUxNA=="}, "originalCommit": {"oid": "a7ef4a378b7d65b0a995ebece14c73e1a6ccc177"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk2Mzc0Mg==", "bodyText": "Hrm I just lifted and shifted, i'll take another pass.", "url": "https://github.com/ConsenSys/teku/pull/2940#discussion_r502963742", "createdAt": "2020-10-11T20:45:22Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostBlock.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_ACCEPTED;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR_REQUIRED;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.SyncDataProvider;\n+import tech.pegasys.teku.api.ValidatorDataProvider;\n+import tech.pegasys.teku.api.schema.SignedBeaconBlock;\n+import tech.pegasys.teku.api.schema.ValidatorBlockResult;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class PostBlock implements Handler {\n+  public static final String ROUTE = \"/eth/v1/beacon/blocks\";\n+\n+  private final JsonProvider jsonProvider;\n+  private final ValidatorDataProvider validatorDataProvider;\n+  private final SyncDataProvider syncDataProvider;\n+\n+  public PostBlock(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    this.validatorDataProvider = dataProvider.getValidatorDataProvider();\n+    this.syncDataProvider = dataProvider.getSyncDataProvider();\n+    this.jsonProvider = jsonProvider;\n+  }\n+\n+  PostBlock(\n+      final ValidatorDataProvider validatorDataProvider,\n+      final SyncDataProvider syncDataProvider,\n+      final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.validatorDataProvider = validatorDataProvider;\n+    this.syncDataProvider = syncDataProvider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.POST,\n+      summary = \"Publish a signed block\",\n+      tags = {TAG_V1_BEACON, TAG_VALIDATOR_REQUIRED},\n+      requestBody =\n+          @OpenApiRequestBody(content = {@OpenApiContent(from = SignedBeaconBlock.class)}),\n+      description =\n+          \"Submit a signed beacon block to the beacon node to be imported.\"\n+              + \" The beacon node performs the required validation.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            description = \"Block has been successfully broadcast, validated and imported.\"),\n+        @OpenApiResponse(\n+            status = RES_ACCEPTED,\n+            description =\n+                \"Block has been successfully broadcast, but failed validation and has not been imported.\"),\n+        @OpenApiResponse(status = RES_BAD_REQUEST, description = \"Unable to parse request body.\"),\n+        @OpenApiResponse(\n+            status = RES_INTERNAL_ERROR,\n+            description = \"Beacon node experienced an internal error.\"),\n+        @OpenApiResponse(\n+            status = RES_SERVICE_UNAVAILABLE,\n+            description = \"Beacon node is currently syncing.\")\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      if (syncDataProvider.getSyncStatus().is_syncing) {\n+        ctx.status(SC_SERVICE_UNAVAILABLE);\n+        return;\n+      }\n+\n+      final SignedBeaconBlock signedBeaconBlock =\n+          jsonProvider.jsonToObject(ctx.body(), SignedBeaconBlock.class);\n+\n+      ctx.result(\n+          validatorDataProvider\n+              .submitSignedBlock(signedBeaconBlock)\n+              .thenApplyChecked(\n+                  validatorBlockResult -> handleResponseContext(ctx, validatorBlockResult)));\n+\n+    } catch (final JsonMappingException | JsonParseException ex) {\n+      ctx.status(SC_BAD_REQUEST);\n+    } catch (final Exception ex) {\n+      ctx.status(SC_INTERNAL_SERVER_ERROR);\n+    }\n+  }\n+\n+  private String handleResponseContext(\n+      final Context ctx, final ValidatorBlockResult validatorBlockResult)\n+      throws JsonProcessingException {\n+    ctx.status(validatorBlockResult.getResponseCode());\n+    if (validatorBlockResult.getFailureReason().isPresent()) {\n+      return jsonProvider.objectToJSON(validatorBlockResult.getFailureReason().get());\n+    } else {\n+      return jsonProvider.objectToJSON(\n+          validatorBlockResult.getHash_tree_root().map(Bytes32::toHexString).orElse(\"\"));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk2MzUxNA=="}, "originalCommit": {"oid": "a7ef4a378b7d65b0a995ebece14c73e1a6ccc177"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDIzMzcwOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostBlock.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMjo0ODoxM1rOHfrPmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMzowODoyMlrOHfrX7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3NjQxMA==", "bodyText": "er, this looks like an odd import.  I think I'd just use \"\" for an empty string, seems pretty easily understandable.", "url": "https://github.com/ConsenSys/teku/pull/2940#discussion_r502976410", "createdAt": "2020-10-11T22:48:13Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostBlock.java", "diffHunk": "@@ -34,12 +35,13 @@\n import io.javalin.plugin.openapi.annotations.OpenApiContent;\n import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n-import org.apache.tuweni.bytes.Bytes32;\n+import joptsimple.internal.Strings;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ca5b50d02f7625dcce33a80fe0c40a9e28208f3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3ODU0Mw==", "bodyText": "wow that is weird.. i thought strings.Empty was pretty standard, i'll fix. ta", "url": "https://github.com/ConsenSys/teku/pull/2940#discussion_r502978543", "createdAt": "2020-10-11T23:08:22Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostBlock.java", "diffHunk": "@@ -34,12 +35,13 @@\n import io.javalin.plugin.openapi.annotations.OpenApiContent;\n import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n-import org.apache.tuweni.bytes.Bytes32;\n+import joptsimple.internal.Strings;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3NjQxMA=="}, "originalCommit": {"oid": "7ca5b50d02f7625dcce33a80fe0c40a9e28208f3"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3180, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}