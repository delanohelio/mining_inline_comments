{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxMDI1MDQz", "number": 2376, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTo1MjoyMlrOEQQ5fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzowODo1NlrOEQSzEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDg5NTMzOnYy", "diffSide": "RIGHT", "path": "bls/src/main/java/tech/pegasys/teku/bls/impl/mikuli/MikuliBLS12381.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTo1MjoyMlrOG0UfYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoyMjoxMFrOG0aAoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUxNDg1MA==", "bodyText": "Any particular reason to use a single instance here?  We should probably make the constructor private if we're going to use this pattern.", "url": "https://github.com/ConsenSys/teku/pull/2376#discussion_r457514850", "createdAt": "2020-07-20T15:52:22Z", "author": {"login": "mbaxter"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/impl/mikuli/MikuliBLS12381.java", "diffHunk": "@@ -46,8 +52,9 @@\n  * <p>Apache Milagro can be included using the gradle dependency\n  * 'org.miracl.milagro.amcl:milagro-crypto-java'.\n  */\n-public final class BLS12381 {\n+public class MikuliBLS12381 implements BLS12381 {\n \n+  public static final MikuliBLS12381 INSTANCE = new MikuliBLS12381();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69313d7198d78bec898b98c1d3d932c72bedf9bd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4NDU3Mg==", "bodyText": "Yes, did the private constructor. \ud83d\udc4d\nNot sure what do you mean regarding this singleton pattern?", "url": "https://github.com/ConsenSys/teku/pull/2376#discussion_r457584572", "createdAt": "2020-07-20T17:45:15Z", "author": {"login": "Nashatyrev"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/impl/mikuli/MikuliBLS12381.java", "diffHunk": "@@ -46,8 +52,9 @@\n  * <p>Apache Milagro can be included using the gradle dependency\n  * 'org.miracl.milagro.amcl:milagro-crypto-java'.\n  */\n-public final class BLS12381 {\n+public class MikuliBLS12381 implements BLS12381 {\n \n+  public static final MikuliBLS12381 INSTANCE = new MikuliBLS12381();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUxNDg1MA=="}, "originalCommit": {"oid": "69313d7198d78bec898b98c1d3d932c72bedf9bd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4NzU0Ng==", "bodyText": "Just curious - wondering why we need the singleton pattern.  Not saying we should change this.", "url": "https://github.com/ConsenSys/teku/pull/2376#discussion_r457587546", "createdAt": "2020-07-20T17:50:30Z", "author": {"login": "mbaxter"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/impl/mikuli/MikuliBLS12381.java", "diffHunk": "@@ -46,8 +52,9 @@\n  * <p>Apache Milagro can be included using the gradle dependency\n  * 'org.miracl.milagro.amcl:milagro-crypto-java'.\n  */\n-public final class BLS12381 {\n+public class MikuliBLS12381 implements BLS12381 {\n \n+  public static final MikuliBLS12381 INSTANCE = new MikuliBLS12381();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUxNDg1MA=="}, "originalCommit": {"oid": "69313d7198d78bec898b98c1d3d932c72bedf9bd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwNTI4MA==", "bodyText": "Cause it's stateless and I don't think anyone would need several instances. Singleton is more explicit in that respect imho.", "url": "https://github.com/ConsenSys/teku/pull/2376#discussion_r457605280", "createdAt": "2020-07-20T18:22:10Z", "author": {"login": "Nashatyrev"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/impl/mikuli/MikuliBLS12381.java", "diffHunk": "@@ -46,8 +52,9 @@\n  * <p>Apache Milagro can be included using the gradle dependency\n  * 'org.miracl.milagro.amcl:milagro-crypto-java'.\n  */\n-public final class BLS12381 {\n+public class MikuliBLS12381 implements BLS12381 {\n \n+  public static final MikuliBLS12381 INSTANCE = new MikuliBLS12381();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUxNDg1MA=="}, "originalCommit": {"oid": "69313d7198d78bec898b98c1d3d932c72bedf9bd"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDk2MzMwOnYy", "diffSide": "RIGHT", "path": "bls/src/main/java/tech/pegasys/teku/bls/impl/mikuli/MikuliBLS12381.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjowNTo0MFrOG0VHRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOTowOTo1OVrOG0bn-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyNTA2MQ==", "bodyText": "Instead of assuming these keys are a specific type, what if we have a static helper method MikuliPublicKey.create() that either casts and returns the signature or creates a new signature of the right type?", "url": "https://github.com/ConsenSys/teku/pull/2376#discussion_r457525061", "createdAt": "2020-07-20T16:05:40Z", "author": {"login": "mbaxter"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/impl/mikuli/MikuliBLS12381.java", "diffHunk": "@@ -199,25 +216,50 @@ public static boolean coreAggregateVerify(\n    *\n    * @return the pair of values above in an opaque instance\n    */\n-  public static BatchSemiAggregate prepareBatchVerify(\n-      int index, List<PublicKey> publicKeys, Bytes message, Signature signature) {\n-\n+  @Override\n+  public BatchSemiAggregate prepareBatchVerify(\n+      int index, List<? extends PublicKey> publicKeys, Bytes message, Signature signature) {\n     G2Point sigG2Point;\n     G2Point msgG2Point;\n+\n+    List<MikuliPublicKey> mikuliPublicKeys =\n+        publicKeys.stream().map(pk -> (MikuliPublicKey) pk).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69313d7198d78bec898b98c1d3d932c72bedf9bd"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwMjIyMw==", "bodyText": "Yes, good idea, however I would avoid scenarios when different implementations are used simultaneously.\nBTW, did I got your idea right? : 198f872", "url": "https://github.com/ConsenSys/teku/pull/2376#discussion_r457602223", "createdAt": "2020-07-20T18:16:28Z", "author": {"login": "Nashatyrev"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/impl/mikuli/MikuliBLS12381.java", "diffHunk": "@@ -199,25 +216,50 @@ public static boolean coreAggregateVerify(\n    *\n    * @return the pair of values above in an opaque instance\n    */\n-  public static BatchSemiAggregate prepareBatchVerify(\n-      int index, List<PublicKey> publicKeys, Bytes message, Signature signature) {\n-\n+  @Override\n+  public BatchSemiAggregate prepareBatchVerify(\n+      int index, List<? extends PublicKey> publicKeys, Bytes message, Signature signature) {\n     G2Point sigG2Point;\n     G2Point msgG2Point;\n+\n+    List<MikuliPublicKey> mikuliPublicKeys =\n+        publicKeys.stream().map(pk -> (MikuliPublicKey) pk).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyNTA2MQ=="}, "originalCommit": {"oid": "69313d7198d78bec898b98c1d3d932c72bedf9bd"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYxNTI0NQ==", "bodyText": "yep - looks good! \ud83c\udf89\nI think there are a few more spots where we cast that can be replaced with the new helpers:\n\nhttps://github.com/PegaSysEng/teku/blob/198f872611fb6d5452009114eac4e3b70120439e/bls/src/main/java/tech/pegasys/teku/bls/impl/mikuli/MikuliBLS12381.java#L230\nhttps://github.com/PegaSysEng/teku/blob/198f872611fb6d5452009114eac4e3b70120439e/bls/src/main/java/tech/pegasys/teku/bls/impl/mikuli/MikuliBLS12381.java#L262\nhttps://github.com/PegaSysEng/teku/blob/198f872611fb6d5452009114eac4e3b70120439e/bls/src/main/java/tech/pegasys/teku/bls/impl/mikuli/MikuliBLS12381.java#L265", "url": "https://github.com/ConsenSys/teku/pull/2376#discussion_r457615245", "createdAt": "2020-07-20T18:40:11Z", "author": {"login": "mbaxter"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/impl/mikuli/MikuliBLS12381.java", "diffHunk": "@@ -199,25 +216,50 @@ public static boolean coreAggregateVerify(\n    *\n    * @return the pair of values above in an opaque instance\n    */\n-  public static BatchSemiAggregate prepareBatchVerify(\n-      int index, List<PublicKey> publicKeys, Bytes message, Signature signature) {\n-\n+  @Override\n+  public BatchSemiAggregate prepareBatchVerify(\n+      int index, List<? extends PublicKey> publicKeys, Bytes message, Signature signature) {\n     G2Point sigG2Point;\n     G2Point msgG2Point;\n+\n+    List<MikuliPublicKey> mikuliPublicKeys =\n+        publicKeys.stream().map(pk -> (MikuliPublicKey) pk).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyNTA2MQ=="}, "originalCommit": {"oid": "69313d7198d78bec898b98c1d3d932c72bedf9bd"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzMTczNw==", "bodyText": "Oh, right! Done!\nThought I've spotted all casts", "url": "https://github.com/ConsenSys/teku/pull/2376#discussion_r457631737", "createdAt": "2020-07-20T19:09:59Z", "author": {"login": "Nashatyrev"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/impl/mikuli/MikuliBLS12381.java", "diffHunk": "@@ -199,25 +216,50 @@ public static boolean coreAggregateVerify(\n    *\n    * @return the pair of values above in an opaque instance\n    */\n-  public static BatchSemiAggregate prepareBatchVerify(\n-      int index, List<PublicKey> publicKeys, Bytes message, Signature signature) {\n-\n+  @Override\n+  public BatchSemiAggregate prepareBatchVerify(\n+      int index, List<? extends PublicKey> publicKeys, Bytes message, Signature signature) {\n     G2Point sigG2Point;\n     G2Point msgG2Point;\n+\n+    List<MikuliPublicKey> mikuliPublicKeys =\n+        publicKeys.stream().map(pk -> (MikuliPublicKey) pk).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyNTA2MQ=="}, "originalCommit": {"oid": "69313d7198d78bec898b98c1d3d932c72bedf9bd"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTIwNjU2OnYy", "diffSide": "RIGHT", "path": "bls/src/main/java/tech/pegasys/teku/bls/BLSSecretKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzowODo1NlrOG0Xd5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo0NjoxOVrOG0YyDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2MzYyMA==", "bodyText": "Do we need this?  Seems potentially dangerous ...", "url": "https://github.com/ConsenSys/teku/pull/2376#discussion_r457563620", "createdAt": "2020-07-20T17:08:56Z", "author": {"login": "mbaxter"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/BLSSecretKey.java", "diffHunk": "@@ -79,4 +74,9 @@ public boolean equals(final Object o) {\n   public int hashCode() {\n     return Objects.hash(secretKey);\n   }\n+\n+  @Override\n+  public String toString() {\n+    return \"BLSSecretKey{\" + toBytes() + '}';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69313d7198d78bec898b98c1d3d932c72bedf9bd"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4NTE2NA==", "bodyText": "Yes, agree, it's dangerous indeed", "url": "https://github.com/ConsenSys/teku/pull/2376#discussion_r457585164", "createdAt": "2020-07-20T17:46:19Z", "author": {"login": "Nashatyrev"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/BLSSecretKey.java", "diffHunk": "@@ -79,4 +74,9 @@ public boolean equals(final Object o) {\n   public int hashCode() {\n     return Objects.hash(secretKey);\n   }\n+\n+  @Override\n+  public String toString() {\n+    return \"BLSSecretKey{\" + toBytes() + '}';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU2MzYyMA=="}, "originalCommit": {"oid": "69313d7198d78bec898b98c1d3d932c72bedf9bd"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3404, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}