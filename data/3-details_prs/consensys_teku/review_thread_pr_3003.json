{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MTc5NDQ0", "number": 3003, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNDoxODo1NlrOEvIBJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNDoyMjo0N1rOEvIFWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODQ5ODk0OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetStateEpochCommittees.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNDoxODo1NlrOHj7gXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzozNDoyMFrOHkZn8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQzNzE0OA==", "bodyText": "needs a different response object here or openapi will be incorrect in the schema tag", "url": "https://github.com/ConsenSys/teku/pull/3003#discussion_r507437148", "createdAt": "2020-10-19T04:18:56Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetStateEpochCommittees.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.getMaxAgeForSlot;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX_QUERY_DESCRIPTION;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.EPOCH;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_EPOCH;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_EPOCH_DESCRIPTION;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_STATE_ID;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_STATE_ID_DESCRIPTION;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_NOT_FOUND;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT_QUERY_DESCRIPTION;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.INVALID_NUMERIC_VALUE;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetStateEpochCommitteesResponse;\n+import tech.pegasys.teku.api.response.v1.beacon.GetStateRootResponse;\n+import tech.pegasys.teku.api.schema.BeaconHead;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.storage.client.ChainDataUnavailableException;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class GetStateEpochCommittees extends AbstractHandler implements Handler {\n+  private static final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/eth/v1/beacon/states/:state_id/committees/:epoch\";\n+\n+  private final ChainDataProvider provider;\n+  private final StateValidatorsUtil stateValidatorsUtil = new StateValidatorsUtil();\n+\n+  public GetStateEpochCommittees(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.provider = dataProvider.getChainDataProvider();\n+  }\n+\n+  GetStateEpochCommittees(\n+      final ChainDataProvider chainDataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.provider = chainDataProvider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get all committees for epoch\",\n+      tags = {TAG_V1_BEACON},\n+      description = \"Retrieves the committees for the given state at the given epoch.\",\n+      pathParams = {\n+        @OpenApiParam(name = PARAM_STATE_ID, description = PARAM_STATE_ID_DESCRIPTION),\n+        @OpenApiParam(name = PARAM_EPOCH, description = PARAM_EPOCH_DESCRIPTION)\n+      },\n+      queryParams = {\n+        @OpenApiParam(\n+            name = COMMITTEE_INDEX,\n+            description = COMMITTEE_INDEX_QUERY_DESCRIPTION,\n+            isRepeatable = false),\n+        @OpenApiParam(name = SLOT, description = SLOT_QUERY_DESCRIPTION, isRepeatable = false)\n+      },\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetStateRootResponse.class)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0555bc66715d72991344d7a8c37417bce56507fc"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzMDYwOA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/3003#discussion_r507930608", "createdAt": "2020-10-19T17:34:20Z", "author": {"login": "cemozerr"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetStateEpochCommittees.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.getMaxAgeForSlot;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX_QUERY_DESCRIPTION;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.EPOCH;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_EPOCH;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_EPOCH_DESCRIPTION;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_STATE_ID;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_STATE_ID_DESCRIPTION;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_NOT_FOUND;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT_QUERY_DESCRIPTION;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.INVALID_NUMERIC_VALUE;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetStateEpochCommitteesResponse;\n+import tech.pegasys.teku.api.response.v1.beacon.GetStateRootResponse;\n+import tech.pegasys.teku.api.schema.BeaconHead;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.storage.client.ChainDataUnavailableException;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class GetStateEpochCommittees extends AbstractHandler implements Handler {\n+  private static final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/eth/v1/beacon/states/:state_id/committees/:epoch\";\n+\n+  private final ChainDataProvider provider;\n+  private final StateValidatorsUtil stateValidatorsUtil = new StateValidatorsUtil();\n+\n+  public GetStateEpochCommittees(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.provider = dataProvider.getChainDataProvider();\n+  }\n+\n+  GetStateEpochCommittees(\n+      final ChainDataProvider chainDataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.provider = chainDataProvider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get all committees for epoch\",\n+      tags = {TAG_V1_BEACON},\n+      description = \"Retrieves the committees for the given state at the given epoch.\",\n+      pathParams = {\n+        @OpenApiParam(name = PARAM_STATE_ID, description = PARAM_STATE_ID_DESCRIPTION),\n+        @OpenApiParam(name = PARAM_EPOCH, description = PARAM_EPOCH_DESCRIPTION)\n+      },\n+      queryParams = {\n+        @OpenApiParam(\n+            name = COMMITTEE_INDEX,\n+            description = COMMITTEE_INDEX_QUERY_DESCRIPTION,\n+            isRepeatable = false),\n+        @OpenApiParam(name = SLOT, description = SLOT_QUERY_DESCRIPTION, isRepeatable = false)\n+      },\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetStateRootResponse.class)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQzNzE0OA=="}, "originalCommit": {"oid": "0555bc66715d72991344d7a8c37417bce56507fc"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODUwNDQ0OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetStateFork.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNDoyMDo1MFrOHj7kFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzozNDo0NlrOHkZo8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQzODEwMw==", "bodyText": "state_id", "url": "https://github.com/ConsenSys/teku/pull/3003#discussion_r507438103", "createdAt": "2020-10-19T04:20:50Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetStateFork.java", "diffHunk": "@@ -71,8 +71,7 @@ public GetStateFork(final DataProvider dataProvider, final JsonProvider jsonProv\n       method = HttpMethod.GET,\n       summary = \"Get state fork\",\n       tags = {TAG_V1_BEACON, TAG_VALIDATOR_REQUIRED},\n-      description =\n-          \"Request beacon node to provide all validators that are scheduled to propose a block in the given epoch.\",\n+      description = \"Returns Fork object for state with given 'stateId'.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0555bc66715d72991344d7a8c37417bce56507fc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkzMDg2NQ==", "bodyText": "Fixed in the other PR, which this builds upon. Hoping to merge that one first.", "url": "https://github.com/ConsenSys/teku/pull/3003#discussion_r507930865", "createdAt": "2020-10-19T17:34:46Z", "author": {"login": "cemozerr"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetStateFork.java", "diffHunk": "@@ -71,8 +71,7 @@ public GetStateFork(final DataProvider dataProvider, final JsonProvider jsonProv\n       method = HttpMethod.GET,\n       summary = \"Get state fork\",\n       tags = {TAG_V1_BEACON, TAG_VALIDATOR_REQUIRED},\n-      description =\n-          \"Request beacon node to provide all validators that are scheduled to propose a block in the given epoch.\",\n+      description = \"Returns Fork object for state with given 'stateId'.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQzODEwMw=="}, "originalCommit": {"oid": "0555bc66715d72991344d7a8c37417bce56507fc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODUwOTcxOnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/teku/api/ChainDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNDoyMjo0N1rOHj7nyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxODowMToyN1rOHkbN1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQzOTA1MA==", "bodyText": "possible to make that a bit easier to digest?", "url": "https://github.com/ConsenSys/teku/pull/3003#discussion_r507439050", "createdAt": "2020-10-19T04:22:47Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/ChainDataProvider.java", "diffHunk": "@@ -110,6 +112,48 @@ public GetForkResponse getForkInfo() {\n                             .collect(toList())));\n   }\n \n+  public SafeFuture<Optional<List<EpochCommitteeResponse>>> getCommitteesAtEpochV1(\n+      final UInt64 stateSlot,\n+      final UInt64 epoch,\n+      final Optional<UInt64> maybeSlot,\n+      final Optional<Integer> maybeIndex) {\n+    if (!combinedChainDataClient.isChainDataFullyAvailable()) {\n+      return chainUnavailable();\n+    }\n+\n+    final UInt64 earliestQueryableSlot =\n+        CommitteeUtil.getEarliestQueryableSlotForTargetEpoch(epoch);\n+    if (recentChainData.getHeadSlot().isLessThan(earliestQueryableSlot)) {\n+      return SafeFuture.completedFuture(Optional.empty());\n+    }\n+\n+    if (stateSlot.isLessThan(earliestQueryableSlot)) {\n+      return SafeFuture.completedFuture(Optional.empty());\n+    }\n+\n+    return combinedChainDataClient\n+        .getStateAtSlotExact(stateSlot)\n+        .thenApply(\n+            maybeResult ->\n+                maybeResult.map(\n+                    state ->\n+                        combinedChainDataClient.getCommitteesFromState(state, epoch).stream()\n+                            .filter(\n+                                committee ->\n+                                    maybeSlot\n+                                        .map(slot -> committee.getSlot().equals(slot))\n+                                        .orElse(true))\n+                            .filter(\n+                                committee ->\n+                                    maybeIndex\n+                                        .map(\n+                                            index ->\n+                                                committee.getCommitteeIndex().intValue() == index)\n+                                        .orElse(true))\n+                            .map(EpochCommitteeResponse::new)\n+                            .collect(toList())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0555bc66715d72991344d7a8c37417bce56507fc"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzk1NjY5Mw==", "bodyText": "Donne.", "url": "https://github.com/ConsenSys/teku/pull/3003#discussion_r507956693", "createdAt": "2020-10-19T18:01:27Z", "author": {"login": "cemozerr"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/ChainDataProvider.java", "diffHunk": "@@ -110,6 +112,48 @@ public GetForkResponse getForkInfo() {\n                             .collect(toList())));\n   }\n \n+  public SafeFuture<Optional<List<EpochCommitteeResponse>>> getCommitteesAtEpochV1(\n+      final UInt64 stateSlot,\n+      final UInt64 epoch,\n+      final Optional<UInt64> maybeSlot,\n+      final Optional<Integer> maybeIndex) {\n+    if (!combinedChainDataClient.isChainDataFullyAvailable()) {\n+      return chainUnavailable();\n+    }\n+\n+    final UInt64 earliestQueryableSlot =\n+        CommitteeUtil.getEarliestQueryableSlotForTargetEpoch(epoch);\n+    if (recentChainData.getHeadSlot().isLessThan(earliestQueryableSlot)) {\n+      return SafeFuture.completedFuture(Optional.empty());\n+    }\n+\n+    if (stateSlot.isLessThan(earliestQueryableSlot)) {\n+      return SafeFuture.completedFuture(Optional.empty());\n+    }\n+\n+    return combinedChainDataClient\n+        .getStateAtSlotExact(stateSlot)\n+        .thenApply(\n+            maybeResult ->\n+                maybeResult.map(\n+                    state ->\n+                        combinedChainDataClient.getCommitteesFromState(state, epoch).stream()\n+                            .filter(\n+                                committee ->\n+                                    maybeSlot\n+                                        .map(slot -> committee.getSlot().equals(slot))\n+                                        .orElse(true))\n+                            .filter(\n+                                committee ->\n+                                    maybeIndex\n+                                        .map(\n+                                            index ->\n+                                                committee.getCommitteeIndex().intValue() == index)\n+                                        .orElse(true))\n+                            .map(EpochCommitteeResponse::new)\n+                            .collect(toList())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQzOTA1MA=="}, "originalCommit": {"oid": "0555bc66715d72991344d7a8c37417bce56507fc"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3221, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}