{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MDczNDQw", "number": 1292, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjo0OTo0NFrODlnZ_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjo1MTowOVrODlnbgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzY5NTM1OnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/test/java/tech/pegasys/artemis/networking/p2p/discovery/ConnectionManagerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjo0OTo0NFrOFynBLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMTo0NDo1OFrOFyqq_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxMjM5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldLimitNumberOfNewConnectionsToKnownPeersOnStartup() {\n          \n          \n            \n              public void shouldLimitNumberOfNewConnectionsToRangeUpperBoundOnStartup() {", "url": "https://github.com/ConsenSys/teku/pull/1292#discussion_r388612398", "createdAt": "2020-03-05T22:49:44Z", "author": {"login": "macfarla"}, "path": "networking/p2p/src/test/java/tech/pegasys/artemis/networking/p2p/discovery/ConnectionManagerTest.java", "diffHunk": "@@ -251,7 +256,92 @@ public void shouldConnectToKnownPeersWhenDiscoverySearchCompletes() {\n     verify(network).connect(discoveryPeer2);\n   }\n \n+  @Test\n+  public void shouldLimitNumberOfNewConnectionsToKnownPeersOnStartup() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400ae034dc3954191c203e62d3588ef27257e31b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxMjU5Ng==", "bodyText": "nit - on first read I took it as limiting the connections to only known peers", "url": "https://github.com/ConsenSys/teku/pull/1292#discussion_r388612596", "createdAt": "2020-03-05T22:50:18Z", "author": {"login": "macfarla"}, "path": "networking/p2p/src/test/java/tech/pegasys/artemis/networking/p2p/discovery/ConnectionManagerTest.java", "diffHunk": "@@ -251,7 +256,92 @@ public void shouldConnectToKnownPeersWhenDiscoverySearchCompletes() {\n     verify(network).connect(discoveryPeer2);\n   }\n \n+  @Test\n+  public void shouldLimitNumberOfNewConnectionsToKnownPeersOnStartup() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxMjM5OA=="}, "originalCommit": {"oid": "400ae034dc3954191c203e62d3588ef27257e31b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY3MjI1NA==", "bodyText": "We aren't limiting the total number of connections, just the one to discovery peers.  Have clarified along those lines.", "url": "https://github.com/ConsenSys/teku/pull/1292#discussion_r388672254", "createdAt": "2020-03-06T01:44:58Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/test/java/tech/pegasys/artemis/networking/p2p/discovery/ConnectionManagerTest.java", "diffHunk": "@@ -251,7 +256,92 @@ public void shouldConnectToKnownPeersWhenDiscoverySearchCompletes() {\n     verify(network).connect(discoveryPeer2);\n   }\n \n+  @Test\n+  public void shouldLimitNumberOfNewConnectionsToKnownPeersOnStartup() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxMjM5OA=="}, "originalCommit": {"oid": "400ae034dc3954191c203e62d3588ef27257e31b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzY5OTIxOnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/test/java/tech/pegasys/artemis/networking/p2p/discovery/ConnectionManagerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjo1MTowOVrOFynDbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjo1MTowOVrOFynDbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYxMjk3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldLimitNumberOfNewConnectionsToKnownPeersOnRetry() {\n          \n          \n            \n              public void shouldLimitNumberOfNewConnectionsToRangeUpperBoundOnRetry() {", "url": "https://github.com/ConsenSys/teku/pull/1292#discussion_r388612974", "createdAt": "2020-03-05T22:51:09Z", "author": {"login": "macfarla"}, "path": "networking/p2p/src/test/java/tech/pegasys/artemis/networking/p2p/discovery/ConnectionManagerTest.java", "diffHunk": "@@ -251,7 +256,92 @@ public void shouldConnectToKnownPeersWhenDiscoverySearchCompletes() {\n     verify(network).connect(discoveryPeer2);\n   }\n \n+  @Test\n+  public void shouldLimitNumberOfNewConnectionsToKnownPeersOnStartup() {\n+    final ConnectionManager manager = createManager(new TargetPeerRange(1, 2));\n+    final DiscoveryPeer discoveryPeer1 = new DiscoveryPeer(Bytes.of(1), new InetSocketAddress(1));\n+    final DiscoveryPeer discoveryPeer2 = new DiscoveryPeer(Bytes.of(2), new InetSocketAddress(2));\n+    final DiscoveryPeer discoveryPeer3 = new DiscoveryPeer(Bytes.of(3), new InetSocketAddress(3));\n+    when(discoveryService.streamKnownPeers())\n+        .thenReturn(Stream.of(discoveryPeer1, discoveryPeer2, discoveryPeer3));\n+    when(network.connect(any(DiscoveryPeer.class))).thenReturn(new SafeFuture<>());\n+\n+    manager.start().join();\n+\n+    verify(network).connect(discoveryPeer1);\n+    verify(network).connect(discoveryPeer2);\n+    verify(network, never()).connect(discoveryPeer3);\n+  }\n+\n+  @Test\n+  public void shouldLimitNumberOfNewConnectionsToKnownPeersOnRetry() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "400ae034dc3954191c203e62d3588ef27257e31b"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2733, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}