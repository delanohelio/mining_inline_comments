{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxNzQ5NjU2", "number": 2748, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDoyMjo0NlrOEhEz4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMTo1NTowNFrOEhbazA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTE3MjgxOnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDoyMjo0NlrOHOMMxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDo0MDo1M1rOHOMcXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0MTk5MQ==", "bodyText": "This is definitely not ideal.  It probably should ask the network to convert the peerId into the right type rather than hard coding a LibP2PNodeId.  Probably the simplest thing would be to overload P2PNetwork.getPeer to have a version that takes a string - then the conversion to a NodeId can be done internally.\nShould consider what to do when the peerId isn't valid base58 - probably should return not found.", "url": "https://github.com/ConsenSys/teku/pull/2748#discussion_r484641991", "createdAt": "2020-09-08T04:22:46Z", "author": {"login": "ajsutton"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java", "diffHunk": "@@ -89,4 +94,23 @@ public int getListenPort() {\n   public Metadata getMetadata() {\n     return new Metadata(network.getMetadata());\n   }\n+\n+  public List<tech.pegasys.teku.api.response.v1.node.Peer> getPeers() {\n+    return network.streamPeers().map(this::toPeer).collect(Collectors.toList());\n+  }\n+\n+  public Optional<tech.pegasys.teku.api.response.v1.node.Peer> getPeerById(final String peerId) {\n+    final NodeId nodeId = new LibP2PNodeId(PeerId.fromBase58(peerId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135239aa8ae4b43a4747ed90012eff55fd1e02a9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0NTM1NA==", "bodyText": "wasn't super keen on that, means pulling in libp2p too, but wasn't sure what else to do.. will have a go with what you've suggested... otherwise i could potentially implement the interface for testing i guess...", "url": "https://github.com/ConsenSys/teku/pull/2748#discussion_r484645354", "createdAt": "2020-09-08T04:38:16Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java", "diffHunk": "@@ -89,4 +94,23 @@ public int getListenPort() {\n   public Metadata getMetadata() {\n     return new Metadata(network.getMetadata());\n   }\n+\n+  public List<tech.pegasys.teku.api.response.v1.node.Peer> getPeers() {\n+    return network.streamPeers().map(this::toPeer).collect(Collectors.toList());\n+  }\n+\n+  public Optional<tech.pegasys.teku.api.response.v1.node.Peer> getPeerById(final String peerId) {\n+    final NodeId nodeId = new LibP2PNodeId(PeerId.fromBase58(peerId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0MTk5MQ=="}, "originalCommit": {"oid": "135239aa8ae4b43a4747ed90012eff55fd1e02a9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0NTk4MQ==", "bodyText": "There's a MockNodeId which implements the interface for you.  I guess you could have another implementation that's a SimpleNodeId which just holds the base58 encoded node ID, but I think I'd be more inclined to leave it to the network to decode.", "url": "https://github.com/ConsenSys/teku/pull/2748#discussion_r484645981", "createdAt": "2020-09-08T04:40:53Z", "author": {"login": "ajsutton"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/NetworkDataProvider.java", "diffHunk": "@@ -89,4 +94,23 @@ public int getListenPort() {\n   public Metadata getMetadata() {\n     return new Metadata(network.getMetadata());\n   }\n+\n+  public List<tech.pegasys.teku.api.response.v1.node.Peer> getPeers() {\n+    return network.streamPeers().map(this::toPeer).collect(Collectors.toList());\n+  }\n+\n+  public Optional<tech.pegasys.teku.api.response.v1.node.Peer> getPeerById(final String peerId) {\n+    final NodeId nodeId = new LibP2PNodeId(PeerId.fromBase58(peerId));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0MTk5MQ=="}, "originalCommit": {"oid": "135239aa8ae4b43a4747ed90012eff55fd1e02a9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDg3NjkyOnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/network/DelegatingP2PNetwork.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMTo1NTowNFrOHOvVNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMTo1NTowNFrOHOvVNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxNzU4OA==", "bodyText": "This should just delegate to the underlying network\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return new LibP2PNodeId(PeerId.fromBase58(nodeId));\n          \n          \n            \n                return network.parseNodeId(nodeId);", "url": "https://github.com/ConsenSys/teku/pull/2748#discussion_r485217588", "createdAt": "2020-09-08T21:55:04Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/network/DelegatingP2PNetwork.java", "diffHunk": "@@ -41,6 +43,11 @@ public PeerAddress createPeerAddress(final DiscoveryPeer discoveryPeer) {\n     return network.createPeerAddress(discoveryPeer);\n   }\n \n+  @Override\n+  public NodeId parseNodeId(final String nodeId) {\n+    return new LibP2PNodeId(PeerId.fromBase58(nodeId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b427678dcaf87832db81dad351d71ff6dd359d61"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3381, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}