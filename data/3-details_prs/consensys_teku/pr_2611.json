{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NzUzNzA4", "number": 2611, "title": "[Issue 2608] Add ability to periodically persist hot states", "bodyText": "PR Description\nAdd an option to periodically persist hot states.  This is intended to help us avoid reprocessing long chains of blocks when regenerating states.\nFixes #2608\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-08-18T21:22:02Z", "url": "https://github.com/ConsenSys/teku/pull/2611", "merged": true, "mergeCommit": {"oid": "657ba2e98b9faec34c0b2c7c74f95d4b0b5463be"}, "closed": true, "closedAt": "2020-08-19T14:39:18Z", "author": {"login": "mbaxter"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAJIm7gH2gAyNDY5NzUzNzA4OjgyMWEyOTdkYmMzOGM0MzI5MWQ4ZjkzNGUyMzdlOThlMTE1ZWYyMzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAcfm1AH2gAyNDY5NzUzNzA4OmQ1Nzc4YjU2ZGNlNjM2OGYzMmQ5NzI0ZDM1MmRkYWYxYTg0NzFhZjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "821a297dbc38c43291d8f934e237e98e115ef233", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/821a297dbc38c43291d8f934e237e98e115ef233", "committedDate": "2020-08-18T15:55:47Z", "message": "Add column for hot states, add CRUD methods for hot states"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1117366f45d20d7ef5b71382d938868b35394770", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/1117366f45d20d7ef5b71382d938868b35394770", "committedDate": "2020-08-18T15:55:47Z", "message": "Update RocksDbDatabase to persist hot states"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83ae994be6556e35aeb073fa649c699cfa2da5e5", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/83ae994be6556e35aeb073fa649c699cfa2da5e5", "committedDate": "2020-08-18T15:55:47Z", "message": "Persist hot states at epoch boundaries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98f592bf8a41467103206558f5e78b5532860e55", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/98f592bf8a41467103206558f5e78b5532860e55", "committedDate": "2020-08-18T15:55:47Z", "message": "Add API for pulling hot state by root from the database"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "152019c9f57add65ed85f30c3c53165ce02295e4", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/152019c9f57add65ed85f30c3c53165ce02295e4", "committedDate": "2020-08-18T15:55:47Z", "message": "Fix new column index"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fbe1c342bc6dc1b611d5dd35a77379969d15abe", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/1fbe1c342bc6dc1b611d5dd35a77379969d15abe", "committedDate": "2020-08-18T15:55:47Z", "message": "Fix tests - implement BlockTree.equals()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37c720d24d1de36c2c2b50f513bd15c3e2452f8a", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/37c720d24d1de36c2c2b50f513bd15c3e2452f8a", "committedDate": "2020-08-18T15:55:47Z", "message": "Fix errorprone error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5123850b69c18bd31fce0826090dccab0a32607c", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/5123850b69c18bd31fce0826090dccab0a32607c", "committedDate": "2020-08-18T15:55:47Z", "message": "Look up recent epoch boundary states before reprocessing full chain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "996d3cefe9b5fc203b3eaf32aaf31001ad0883eb", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/996d3cefe9b5fc203b3eaf32aaf31001ad0883eb", "committedDate": "2020-08-18T15:55:47Z", "message": "Only attempt to pull the latest epoch boundary state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f4b6749508f6b0e5bcbda1bb54861566712cfa6", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/9f4b6749508f6b0e5bcbda1bb54861566712cfa6", "committedDate": "2020-08-18T15:55:47Z", "message": "Cut unused method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74103b5080c4491493d541c031a4428450e249d1", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/74103b5080c4491493d541c031a4428450e249d1", "committedDate": "2020-08-18T15:55:47Z", "message": "Add tests for BlockTree"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6cf9fd00c31f4314b5d50115b5529ec48586db8", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/d6cf9fd00c31f4314b5d50115b5529ec48586db8", "committedDate": "2020-08-18T15:55:47Z", "message": "Move hot state persistence config to StoreOptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0a10bba776e7b1fa268959f7665595e2f512cdd", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/e0a10bba776e7b1fa268959f7665595e2f512cdd", "committedDate": "2020-08-18T16:29:50Z", "message": "Create StoreOptions builder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47166cfdcc764745fdae24be697ab856caa6e194", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/47166cfdcc764745fdae24be697ab856caa6e194", "committedDate": "2020-08-18T18:02:48Z", "message": "Wire hot state persistent option through to CLI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abd9142d4dea978c0ec735b9a107e178df856aaf", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/abd9142d4dea978c0ec735b9a107e178df856aaf", "committedDate": "2020-08-18T19:33:50Z", "message": "Fix CLI tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edf0e31676a761f2d2a5769c84563b9c6d512029", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/edf0e31676a761f2d2a5769c84563b9c6d512029", "committedDate": "2020-08-18T19:48:33Z", "message": "Rework StorageSystem helpers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21f079f9ae5a227887a2570d50e5af1b66c5c0bd", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/21f079f9ae5a227887a2570d50e5af1b66c5c0bd", "committedDate": "2020-08-18T20:51:48Z", "message": "Add database-level tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8de2a40314a459ed75056cb55a9529d6b41872a9", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/8de2a40314a459ed75056cb55a9529d6b41872a9", "committedDate": "2020-08-18T21:09:06Z", "message": "Rework StateProvider to consolidate queries to ChainStorage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "266aa4f36b1065fc8cfe3606b7ce161845cc162c", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/266aa4f36b1065fc8cfe3606b7ce161845cc162c", "committedDate": "2020-08-18T22:07:20Z", "message": "Add some StateGenerationQueue tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e10b5d5ab59986c1b4b8f0b3c9a7666d052e22a", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/1e10b5d5ab59986c1b4b8f0b3c9a7666d052e22a", "committedDate": "2020-08-18T22:30:15Z", "message": "Clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99ae4f1b0a4a24aa1edb328763f6b73f518d9107", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/99ae4f1b0a4a24aa1edb328763f6b73f518d9107", "committedDate": "2020-08-18T23:20:00Z", "message": "Merge branch 'master' into issue-2608/add-ability-to-periodically-persist-hot-states"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODk3MTg0", "url": "https://github.com/ConsenSys/teku/pull/2611#pullrequestreview-469897184", "createdAt": "2020-08-18T23:29:56Z", "commit": {"oid": "1e10b5d5ab59986c1b4b8f0b3c9a7666d052e22a"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzoyOTo1NlrOHCqG1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzo0NToxNFrOHCqZWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0OTA3OQ==", "bodyText": "I'm still in two minds but I wonder if we should just make StoreOptions an interface that TekuConfiguration implements, then we don't have to rebuild a different config object, but still narrow down what gets passed in.  It already does it for MetricsConfig which I think was mostly driven by module dependencies but it seems to work (and eventually TekuConfiguration could just hold multiple separate objects so you getMetricsConfig out of it instead of using it directly.\nHappy to go either way with this at the moment though.", "url": "https://github.com/ConsenSys/teku/pull/2611#discussion_r472549079", "createdAt": "2020-08-18T23:29:56Z", "author": {"login": "ajsutton"}, "path": "services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -175,8 +176,13 @@ private void startServices() {\n   }\n \n   private SafeFuture<?> initialize() {\n+    final StoreOptions storeOptions =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e10b5d5ab59986c1b4b8f0b3c9a7666d052e22a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1MTcwNQ==", "bodyText": "Isn't this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return hashTree\n          \n          \n            \n                    .getParent(blockRoot)\n          \n          \n            \n                    .map(\n          \n          \n            \n                        parentRoot -> {\n          \n          \n            \n                          final UInt64 blockEpoch = getEpoch(blockRoot);\n          \n          \n            \n                          final UInt64 parentEpoch =\n          \n          \n            \n                              Optional.of(parentRoot)\n          \n          \n            \n                                  .filter(this::contains)\n          \n          \n            \n                                  .map(this::getEpoch)\n          \n          \n            \n                                  .orElse(blockEpoch);\n          \n          \n            \n                          return blockEpoch.isGreaterThan(parentEpoch);\n          \n          \n            \n                        })\n          \n          \n            \n                    .orElse(false);\n          \n          \n            \n                return hashTree\n          \n          \n            \n                    .getParent(blockRoot)\n          \n          \n            \n                    .filter(this::contains)\n          \n          \n            \n                    .map(this::getEpoch)\n          \n          \n            \n                    .map(parentEpoch -> getEpoch(blockRoot).isGreaterThan(parentEpoch))\n          \n          \n            \n                    .orElse(false);\n          \n      \n    \n    \n  \n\nMy reading of both versions being that it's the root at epoch boundary if this is the first block that exists for this epoch (so block's epoch is greater than the parent's epoch).", "url": "https://github.com/ConsenSys/teku/pull/2611#discussion_r472551705", "createdAt": "2020-08-18T23:38:04Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/BlockTree.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.store;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+\n+import com.google.common.collect.Sets;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.datastructures.hashtree.HashTree;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+public class BlockTree {\n+  private final HashTree hashTree;\n+  final Map<Bytes32, UInt64> blockRootToSlot;\n+\n+  private BlockTree(final HashTree hashTree, final Map<Bytes32, UInt64> blockRootToSlot) {\n+    validate(hashTree, blockRootToSlot);\n+    this.hashTree = hashTree;\n+    this.blockRootToSlot = blockRootToSlot;\n+  }\n+\n+  public static BlockTree create(\n+      final HashTree hashTree, final Map<Bytes32, UInt64> blockRootToSlot) {\n+    return new BlockTree(hashTree, blockRootToSlot);\n+  }\n+\n+  private void validate(final HashTree hashTree, final Map<Bytes32, UInt64> blockRootToSlot) {\n+    checkArgument(\n+        hashTree.size() == blockRootToSlot.size(),\n+        \"Slot lookup and hash tree must contain the same number of elements\");\n+    checkArgument(\n+        Sets.difference(hashTree.getAllRoots(), blockRootToSlot.keySet()).isEmpty(),\n+        \"Slot lookup and hash tree must contain the same roots\");\n+  }\n+\n+  public BlockTree updated(final Bytes32 newRoot, Collection<SignedBeaconBlock> newBlocks) {\n+    final HashTree updatedHashTree = hashTree.withRoot(newRoot).blocks(newBlocks).build();\n+\n+    // Create new root to slot mapping\n+    final Map<Bytes32, UInt64> updatedBlockRootToSlot = new HashMap<>(blockRootToSlot);\n+    newBlocks.forEach(b -> updatedBlockRootToSlot.put(b.getRoot(), b.getSlot()));\n+    updatedBlockRootToSlot.keySet().removeIf(next -> !updatedHashTree.contains(next));\n+\n+    return new BlockTree(updatedHashTree, updatedBlockRootToSlot);\n+  }\n+\n+  public HashTree getHashTree() {\n+    return hashTree;\n+  }\n+\n+  public Bytes32 getRootHash() {\n+    return hashTree.getRootHash();\n+  }\n+\n+  public boolean contains(final Bytes32 blockRoot) {\n+    return hashTree.contains(blockRoot);\n+  }\n+\n+  public Set<Bytes32> getAllRoots() {\n+    return hashTree.getAllRoots();\n+  }\n+\n+  /**\n+   * @return A list of block roots ordered to guarantee that parent roots will be sorted earlier\n+   *     than child roots\n+   */\n+  public List<Bytes32> getOrderedBlockRoots() {\n+    return hashTree.breadthFirstStream().collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Returns true if the block root is at an internal epoch boundary. The rootHash is not considered\n+   * an epoch boundary. A block is at an epoch boundary if it is the first block within an epoch.\n+   *\n+   * @param blockRoot The block root to check.\n+   * @return True if the block root is at an internal epoch boundary.\n+   */\n+  public boolean isRootAtEpochBoundary(Bytes32 blockRoot) {\n+    assertBlockIsInTree(blockRoot);\n+    return hashTree\n+        .getParent(blockRoot)\n+        .map(\n+            parentRoot -> {\n+              final UInt64 blockEpoch = getEpoch(blockRoot);\n+              final UInt64 parentEpoch =\n+                  Optional.of(parentRoot)\n+                      .filter(this::contains)\n+                      .map(this::getEpoch)\n+                      .orElse(blockEpoch);\n+              return blockEpoch.isGreaterThan(parentEpoch);\n+            })\n+        .orElse(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e10b5d5ab59986c1b4b8f0b3c9a7666d052e22a"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU1MzgxNw==", "bodyText": "Maybe call this one StoreConfig to differentiate from the CLI StoreOptions?", "url": "https://github.com/ConsenSys/teku/pull/2611#discussion_r472553817", "createdAt": "2020-08-18T23:45:14Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/StoreOptions.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.store;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import java.util.Objects;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class StoreOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e10b5d5ab59986c1b4b8f0b3c9a7666d052e22a"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c324cde420be8c45f66e4d22d74c8cce1b8f2b54", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/c324cde420be8c45f66e4d22d74c8cce1b8f2b54", "committedDate": "2020-08-19T01:46:00Z", "message": "Rename StoreOptions to StoreConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "639d9d6680f6f34efe61bfc8f8999dd771d43e1c", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/639d9d6680f6f34efe61bfc8f8999dd771d43e1c", "committedDate": "2020-08-19T01:48:08Z", "message": "Simplify logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5778b56dce6368f32d9724d352ddaf1a8471af9", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/d5778b56dce6368f32d9724d352ddaf1a8471af9", "committedDate": "2020-08-19T14:29:06Z", "message": "Merge branch 'master' into issue-2608/add-ability-to-periodically-persist-hot-states"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3501, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}