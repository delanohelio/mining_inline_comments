{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NDEwMDQ2", "number": 3383, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOTo1Mjo0N1rOFDG7_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToxNzowM1rOFDOByA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODAzNzEwOnYy", "diffSide": "RIGHT", "path": "services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainMetrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOTo1Mjo0N1rOICmofw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNDo0Nzo1NFrOIDo--A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYwMTAyMw==", "bodyText": "do we need to make sure the StateAndBlockSummary are current epoch?  If we change epoch and there's an empty slot it might not match?", "url": "https://github.com/ConsenSys/teku/pull/3383#discussion_r539601023", "createdAt": "2020-12-09T19:52:47Z", "author": {"login": "rolfyone"}, "path": "services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainMetrics.java", "diffHunk": "@@ -162,15 +175,57 @@ public BeaconChainMetrics(\n             TekuMetricCategory.BEACON,\n             \"previous_correct_validators\",\n             \"Number of validators who voted for correct source and target checkpoints in the previous epoch\");\n+\n+    currentEpochParticipationWeight =\n+        SettableGauge.create(\n+            metricsSystem,\n+            TekuMetricCategory.BEACON,\n+            \"current_epoch_participation_weight\",\n+            \"Total effective balance of all validators who voted for correct source and target checkpoints in the current epoch\");\n+    previousEpochParticipationWeight =\n+        SettableGauge.create(\n+            metricsSystem,\n+            TekuMetricCategory.BEACON,\n+            \"previous_epoch_participation_weight\",\n+            \"Total effective balance of all validators who voted for correct source and target checkpoints in the previous epoch\");\n+\n+    currentEpochTotalWeight =\n+        SettableGauge.create(\n+            metricsSystem,\n+            TekuMetricCategory.BEACON,\n+            \"current_epoch_total_weight\",\n+            \"Total effective balance of all active validators in the current epoch\");\n+    previousEpochTotalWeight =\n+        SettableGauge.create(\n+            metricsSystem,\n+            TekuMetricCategory.BEACON,\n+            \"previous_epoch_total_weight\",\n+            \"Total effective balance of all active validators in the previous epoch\");\n   }\n \n   @Override\n   public void onSlot(final UInt64 slot) {\n-    recentChainData.getChainHead().ifPresent(this::updateMetrics);\n+    recentChainData.getChainHead().ifPresent(head -> updateMetrics(slot, head));\n   }\n \n-  private void updateMetrics(final StateAndBlockSummary head) {\n+  private void updateMetrics(final UInt64 slot, final StateAndBlockSummary head) {\n     final BeaconState state = head.getState();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0911ef0d020c0cc353cd641c264ff2d20618422"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDY4ODEyMA==", "bodyText": "Hmm, good question.  It won't have updated if there's an empty slot but it will then update when the next block is received so it's probably not a big deal.  The alternative would be to use retrieveStateAtSlot but that risks triggering the processing of a bunch of empty slots and epoch transitions just to update metrics which I don't think we want to do.\nSo I'd probably leave it as is I think...", "url": "https://github.com/ConsenSys/teku/pull/3383#discussion_r540688120", "createdAt": "2020-12-11T04:47:54Z", "author": {"login": "ajsutton"}, "path": "services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainMetrics.java", "diffHunk": "@@ -162,15 +175,57 @@ public BeaconChainMetrics(\n             TekuMetricCategory.BEACON,\n             \"previous_correct_validators\",\n             \"Number of validators who voted for correct source and target checkpoints in the previous epoch\");\n+\n+    currentEpochParticipationWeight =\n+        SettableGauge.create(\n+            metricsSystem,\n+            TekuMetricCategory.BEACON,\n+            \"current_epoch_participation_weight\",\n+            \"Total effective balance of all validators who voted for correct source and target checkpoints in the current epoch\");\n+    previousEpochParticipationWeight =\n+        SettableGauge.create(\n+            metricsSystem,\n+            TekuMetricCategory.BEACON,\n+            \"previous_epoch_participation_weight\",\n+            \"Total effective balance of all validators who voted for correct source and target checkpoints in the previous epoch\");\n+\n+    currentEpochTotalWeight =\n+        SettableGauge.create(\n+            metricsSystem,\n+            TekuMetricCategory.BEACON,\n+            \"current_epoch_total_weight\",\n+            \"Total effective balance of all active validators in the current epoch\");\n+    previousEpochTotalWeight =\n+        SettableGauge.create(\n+            metricsSystem,\n+            TekuMetricCategory.BEACON,\n+            \"previous_epoch_total_weight\",\n+            \"Total effective balance of all active validators in the previous epoch\");\n   }\n \n   @Override\n   public void onSlot(final UInt64 slot) {\n-    recentChainData.getChainHead().ifPresent(this::updateMetrics);\n+    recentChainData.getChainHead().ifPresent(head -> updateMetrics(slot, head));\n   }\n \n-  private void updateMetrics(final StateAndBlockSummary head) {\n+  private void updateMetrics(final UInt64 slot, final StateAndBlockSummary head) {\n     final BeaconState state = head.getState();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYwMTAyMw=="}, "originalCommit": {"oid": "d0911ef0d020c0cc353cd641c264ff2d20618422"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODYyNTA4OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/epoch/EpochProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjoxNToyNlrOICr92Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjozNDo1NlrOICspOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4ODQwOQ==", "bodyText": "nit: I don't think you meant to rename this method - IntelliJ was being \"helpful\".", "url": "https://github.com/ConsenSys/teku/pull/3383#discussion_r539688409", "createdAt": "2020-12-09T22:15:26Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/epoch/EpochProcessor.java", "diffHunk": "@@ -27,7 +27,7 @@\n    */\n   public static BeaconState processEpoch(final BeaconState preState)\n       throws EpochProcessingException {\n-    final ValidatorStatuses validatorStatuses = ValidatorStatuses.create(preState);\n+    final ValidatorStatuses validatorStatuses = ValidatorStatuses.createTotalBalances(preState);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b4851ae0efbdaf647cd796addb644dee6329b5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY5OTUxNQ==", "bodyText": "oh shoot yeah. reverted.", "url": "https://github.com/ConsenSys/teku/pull/3383#discussion_r539699515", "createdAt": "2020-12-09T22:34:56Z", "author": {"login": "cemozerr"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/epoch/EpochProcessor.java", "diffHunk": "@@ -27,7 +27,7 @@\n    */\n   public static BeaconState processEpoch(final BeaconState preState)\n       throws EpochProcessingException {\n-    final ValidatorStatuses validatorStatuses = ValidatorStatuses.create(preState);\n+    final ValidatorStatuses validatorStatuses = ValidatorStatuses.createTotalBalances(preState);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4ODQwOQ=="}, "originalCommit": {"oid": "78b4851ae0efbdaf647cd796addb644dee6329b5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODYyOTEwOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/epoch/status/ValidatorStatuses.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjoxNjozMFrOICsALg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjozNTowOFrOICsplA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4OTAwNg==", "bodyText": "nit: This probably should just be private - you'd just create ValidatorStatuses and then use getTotalBalances to get it.", "url": "https://github.com/ConsenSys/teku/pull/3383#discussion_r539689006", "createdAt": "2020-12-09T22:16:30Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/epoch/status/ValidatorStatuses.java", "diffHunk": "@@ -135,4 +137,53 @@ public void apply(final ValidatorStatus status) {\n       status.updateInclusionInfo(inclusionInfo);\n     }\n   }\n+\n+  public static TotalBalances createTotalBalances(final List<ValidatorStatus> statuses) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b4851ae0efbdaf647cd796addb644dee6329b5"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY5OTYwNA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/3383#discussion_r539699604", "createdAt": "2020-12-09T22:35:08Z", "author": {"login": "cemozerr"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/epoch/status/ValidatorStatuses.java", "diffHunk": "@@ -135,4 +137,53 @@ public void apply(final ValidatorStatus status) {\n       status.updateInclusionInfo(inclusionInfo);\n     }\n   }\n+\n+  public static TotalBalances createTotalBalances(final List<ValidatorStatus> statuses) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4OTAwNg=="}, "originalCommit": {"oid": "78b4851ae0efbdaf647cd796addb644dee6329b5"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODYzOTUyOnYy", "diffSide": "RIGHT", "path": "services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjoxOToxNlrOICsGLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjozMzoxMFrOICsltQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY5MDU0Mg==", "bodyText": "Given these are now cheap to compute, we can probably update them each slot so that they update when we switch forks.", "url": "https://github.com/ConsenSys/teku/pull/3383#discussion_r539690542", "createdAt": "2020-12-09T22:19:16Z", "author": {"login": "ajsutton"}, "path": "services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainMetrics.java", "diffHunk": "@@ -162,15 +174,62 @@ public BeaconChainMetrics(\n             TekuMetricCategory.BEACON,\n             \"previous_correct_validators\",\n             \"Number of validators who voted for correct source and target checkpoints in the previous epoch\");\n+\n+    currentEpochParticipationWeight =\n+        SettableGauge.create(\n+            metricsSystem,\n+            TekuMetricCategory.BEACON,\n+            \"current_epoch_participation_weight\",\n+            \"Total effective balance of all validators who voted for correct source and target checkpoints in the current epoch\");\n+    previousEpochParticipationWeight =\n+        SettableGauge.create(\n+            metricsSystem,\n+            TekuMetricCategory.BEACON,\n+            \"previous_epoch_participation_weight\",\n+            \"Total effective balance of all validators who voted for correct source and target checkpoints in the previous epoch\");\n+\n+    currentEpochTotalWeight =\n+        SettableGauge.create(\n+            metricsSystem,\n+            TekuMetricCategory.BEACON,\n+            \"current_epoch_total_weight\",\n+            \"Total effective balance of all active validators in the current epoch\");\n+    previousEpochTotalWeight =\n+        SettableGauge.create(\n+            metricsSystem,\n+            TekuMetricCategory.BEACON,\n+            \"previous_epoch_total_weight\",\n+            \"Total effective balance of all active validators in the previous epoch\");\n   }\n \n   @Override\n   public void onSlot(final UInt64 slot) {\n-    recentChainData.getChainHead().ifPresent(this::updateMetrics);\n+    recentChainData.getChainHead().ifPresent(head -> updateMetrics(slot, head));\n   }\n \n-  private void updateMetrics(final StateAndBlockSummary head) {\n+  private void updateMetrics(final UInt64 slot, final StateAndBlockSummary head) {\n     final BeaconState state = head.getState();\n+    state\n+        .getTransitionCaches()\n+        .getLatestTotalBalances()\n+        .ifPresent(\n+            totalBalances -> {\n+              // Update participation weights only once per epoch, a slot after epoch transition to\n+              // make\n+              // sure\n+              // total balances are properly updated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b4851ae0efbdaf647cd796addb644dee6329b5"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY5ODYxMw==", "bodyText": "Makes sense. Done.", "url": "https://github.com/ConsenSys/teku/pull/3383#discussion_r539698613", "createdAt": "2020-12-09T22:33:10Z", "author": {"login": "cemozerr"}, "path": "services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainMetrics.java", "diffHunk": "@@ -162,15 +174,62 @@ public BeaconChainMetrics(\n             TekuMetricCategory.BEACON,\n             \"previous_correct_validators\",\n             \"Number of validators who voted for correct source and target checkpoints in the previous epoch\");\n+\n+    currentEpochParticipationWeight =\n+        SettableGauge.create(\n+            metricsSystem,\n+            TekuMetricCategory.BEACON,\n+            \"current_epoch_participation_weight\",\n+            \"Total effective balance of all validators who voted for correct source and target checkpoints in the current epoch\");\n+    previousEpochParticipationWeight =\n+        SettableGauge.create(\n+            metricsSystem,\n+            TekuMetricCategory.BEACON,\n+            \"previous_epoch_participation_weight\",\n+            \"Total effective balance of all validators who voted for correct source and target checkpoints in the previous epoch\");\n+\n+    currentEpochTotalWeight =\n+        SettableGauge.create(\n+            metricsSystem,\n+            TekuMetricCategory.BEACON,\n+            \"current_epoch_total_weight\",\n+            \"Total effective balance of all active validators in the current epoch\");\n+    previousEpochTotalWeight =\n+        SettableGauge.create(\n+            metricsSystem,\n+            TekuMetricCategory.BEACON,\n+            \"previous_epoch_total_weight\",\n+            \"Total effective balance of all active validators in the previous epoch\");\n   }\n \n   @Override\n   public void onSlot(final UInt64 slot) {\n-    recentChainData.getChainHead().ifPresent(this::updateMetrics);\n+    recentChainData.getChainHead().ifPresent(head -> updateMetrics(slot, head));\n   }\n \n-  private void updateMetrics(final StateAndBlockSummary head) {\n+  private void updateMetrics(final UInt64 slot, final StateAndBlockSummary head) {\n     final BeaconState state = head.getState();\n+    state\n+        .getTransitionCaches()\n+        .getLatestTotalBalances()\n+        .ifPresent(\n+            totalBalances -> {\n+              // Update participation weights only once per epoch, a slot after epoch transition to\n+              // make\n+              // sure\n+              // total balances are properly updated.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY5MDU0Mg=="}, "originalCommit": {"oid": "78b4851ae0efbdaf647cd796addb644dee6329b5"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODY0MzU1OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/state/TransitionCaches.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjoyMDoxM1rOICsIhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMjozMzoxNVrOICsl4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY5MTE0Mw==", "bodyText": "This will need to be volatile.", "url": "https://github.com/ConsenSys/teku/pull/3383#discussion_r539691143", "createdAt": "2020-12-09T22:20:13Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/state/TransitionCaches.java", "diffHunk": "@@ -65,6 +67,8 @@ public static TransitionCaches getNoOp() {\n   private final ValidatorIndexCache validatorIndexCache;\n   private final Cache<Bytes32, List<Integer>> committeeShuffle;\n \n+  private Optional<TotalBalances> latestTotalBalances = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b4851ae0efbdaf647cd796addb644dee6329b5"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY5ODY1Nw==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/3383#discussion_r539698657", "createdAt": "2020-12-09T22:33:15Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/state/TransitionCaches.java", "diffHunk": "@@ -65,6 +67,8 @@ public static TransitionCaches getNoOp() {\n   private final ValidatorIndexCache validatorIndexCache;\n   private final Cache<Bytes32, List<Integer>> committeeShuffle;\n \n+  private Optional<TotalBalances> latestTotalBalances = Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY5MTE0Mw=="}, "originalCommit": {"oid": "78b4851ae0efbdaf647cd796addb644dee6329b5"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTE1NzU5OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/epoch/status/ValidatorStatuses.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTowMTowMlrOICwkWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoyNTo1OVrOIDUwmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc2MzgwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static TotalBalances createTotalBalances(final List<ValidatorStatus> statuses) {\n          \n          \n            \n              @VisibleForTesting\n          \n          \n            \n              static TotalBalances createTotalBalances(final List<ValidatorStatus> statuses) {", "url": "https://github.com/ConsenSys/teku/pull/3383#discussion_r539763803", "createdAt": "2020-12-10T01:01:02Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/epoch/status/ValidatorStatuses.java", "diffHunk": "@@ -135,4 +137,53 @@ public void apply(final ValidatorStatus status) {\n       status.updateInclusionInfo(inclusionInfo);\n     }\n   }\n+\n+  static TotalBalances createTotalBalances(final List<ValidatorStatus> statuses) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82236af1ae71de008e1f7a4b0ca3767a10bfc802"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1Njc2Mg==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/3383#discussion_r540356762", "createdAt": "2020-12-10T17:25:59Z", "author": {"login": "cemozerr"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/epoch/status/ValidatorStatuses.java", "diffHunk": "@@ -135,4 +137,53 @@ public void apply(final ValidatorStatus status) {\n       status.updateInclusionInfo(inclusionInfo);\n     }\n   }\n+\n+  static TotalBalances createTotalBalances(final List<ValidatorStatus> statuses) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc2MzgwMw=="}, "originalCommit": {"oid": "82236af1ae71de008e1f7a4b0ca3767a10bfc802"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTE2MTQ4OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/state/BeaconState.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTowMjoxOVrOICwmRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzoyNTozMVrOIDUvcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc2NDI5NQ==", "bodyText": "Probably shouldn't add this here.  BeaconStateCache.getTransitionCaches is used to get the cache everywhere else.\nI'm not against changing this but if we do we should change it everywhere and I seem to recall @Nashatyrev had a preference for this approach and some reasoning behind it.", "url": "https://github.com/ConsenSys/teku/pull/3383#discussion_r539764295", "createdAt": "2020-12-10T01:02:19Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/state/BeaconState.java", "diffHunk": "@@ -193,6 +193,8 @@ static BeaconState create(\n             });\n   }\n \n+  TransitionCaches getTransitionCaches();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82236af1ae71de008e1f7a4b0ca3767a10bfc802"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk2MTQ4NA==", "bodyText": "I'm pretty fine with adding BeaconState.getTransitionCaches(), though you would either remove BeaconStateCache then or do  BeaconState extends  BeaconStateCache and yes then you would need to refactor all the usages", "url": "https://github.com/ConsenSys/teku/pull/3383#discussion_r539961484", "createdAt": "2020-12-10T08:16:12Z", "author": {"login": "Nashatyrev"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/state/BeaconState.java", "diffHunk": "@@ -193,6 +193,8 @@ static BeaconState create(\n             });\n   }\n \n+  TransitionCaches getTransitionCaches();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc2NDI5NQ=="}, "originalCommit": {"oid": "82236af1ae71de008e1f7a4b0ca3767a10bfc802"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM1NjQ2NA==", "bodyText": "Turns out BeaconStateCache.getTransitionCaches() works perfectly for my use case. I've removed this line.", "url": "https://github.com/ConsenSys/teku/pull/3383#discussion_r540356464", "createdAt": "2020-12-10T17:25:31Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/state/BeaconState.java", "diffHunk": "@@ -193,6 +193,8 @@ static BeaconState create(\n             });\n   }\n \n+  TransitionCaches getTransitionCaches();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc2NDI5NQ=="}, "originalCommit": {"oid": "82236af1ae71de008e1f7a4b0ca3767a10bfc802"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTE5ODgwOnYy", "diffSide": "RIGHT", "path": "services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainMetrics.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMToxNzowM1rOICw6_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo1NDoyM1rOIDWCHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc2OTU5Nw==", "bodyText": "Now that I think about it, these numbers don't quite work out like this (sorry).  The TotalBalances are created at the end of the epoch so the \"current\" balance is actually \"previous\" by the time we're actually updating the metrics.  I suspect we should just drop the \"current\" version of these metrics as they're not particularly useful anyway.\nThen we wind up setting:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          currentEpochTotalWeight.set(totalBalances.getCurrentEpoch().longValue());\n          \n          \n            \n                          previousEpochTotalWeight.set(totalBalances.getPreviousEpoch().longValue());\n          \n          \n            \n            \n          \n          \n            \n                          currentEpochParticipationWeight.set(\n          \n          \n            \n                              totalBalances.getCurrentEpochAttesters().longValue());\n          \n          \n            \n                          previousEpochParticipationWeight.set(\n          \n          \n            \n                              totalBalances.getPreviousEpochAttesters().longValue());\n          \n          \n            \n                          previousEpochTotalWeight.set(totalBalances.getCurrentEpoch().longValue());\n          \n          \n            \n            \n          \n          \n            \n                          previousEpochParticipationWeight.set(\n          \n          \n            \n                              totalBalances.getCurrentEpochAttesters().longValue());\n          \n      \n    \n    \n  \n\nand add a comment explaining why it's right even though it looks weird. :) Also need to consider if we have to worry about overflowing the signed long value with these metrics.  Prometheus actually uses a double for everything so we could potentially convert it to ETH if there's a risk of overflow.", "url": "https://github.com/ConsenSys/teku/pull/3383#discussion_r539769597", "createdAt": "2020-12-10T01:17:03Z", "author": {"login": "ajsutton"}, "path": "services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainMetrics.java", "diffHunk": "@@ -171,6 +208,19 @@ public void onSlot(final UInt64 slot) {\n \n   private void updateMetrics(final StateAndBlockSummary head) {\n     final BeaconState state = head.getState();\n+    state\n+        .getTransitionCaches()\n+        .getLatestTotalBalances()\n+        .ifPresent(\n+            totalBalances -> {\n+              currentEpochTotalWeight.set(totalBalances.getCurrentEpoch().longValue());\n+              previousEpochTotalWeight.set(totalBalances.getPreviousEpoch().longValue());\n+\n+              currentEpochParticipationWeight.set(\n+                  totalBalances.getCurrentEpochAttesters().longValue());\n+              previousEpochParticipationWeight.set(\n+                  totalBalances.getPreviousEpochAttesters().longValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82236af1ae71de008e1f7a4b0ca3767a10bfc802"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3NzE4MQ==", "bodyText": "I read that the double MAX value is: 1.7*10^308. So I don't think that will be an issue. Am I missing something?", "url": "https://github.com/ConsenSys/teku/pull/3383#discussion_r540377181", "createdAt": "2020-12-10T17:53:42Z", "author": {"login": "cemozerr"}, "path": "services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainMetrics.java", "diffHunk": "@@ -171,6 +208,19 @@ public void onSlot(final UInt64 slot) {\n \n   private void updateMetrics(final StateAndBlockSummary head) {\n     final BeaconState state = head.getState();\n+    state\n+        .getTransitionCaches()\n+        .getLatestTotalBalances()\n+        .ifPresent(\n+            totalBalances -> {\n+              currentEpochTotalWeight.set(totalBalances.getCurrentEpoch().longValue());\n+              previousEpochTotalWeight.set(totalBalances.getPreviousEpoch().longValue());\n+\n+              currentEpochParticipationWeight.set(\n+                  totalBalances.getCurrentEpochAttesters().longValue());\n+              previousEpochParticipationWeight.set(\n+                  totalBalances.getPreviousEpochAttesters().longValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc2OTU5Nw=="}, "originalCommit": {"oid": "82236af1ae71de008e1f7a4b0ca3767a10bfc802"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3NzYzMA==", "bodyText": "Put the comment and made the change for previous/current epoch confusion.", "url": "https://github.com/ConsenSys/teku/pull/3383#discussion_r540377630", "createdAt": "2020-12-10T17:54:23Z", "author": {"login": "cemozerr"}, "path": "services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainMetrics.java", "diffHunk": "@@ -171,6 +208,19 @@ public void onSlot(final UInt64 slot) {\n \n   private void updateMetrics(final StateAndBlockSummary head) {\n     final BeaconState state = head.getState();\n+    state\n+        .getTransitionCaches()\n+        .getLatestTotalBalances()\n+        .ifPresent(\n+            totalBalances -> {\n+              currentEpochTotalWeight.set(totalBalances.getCurrentEpoch().longValue());\n+              previousEpochTotalWeight.set(totalBalances.getPreviousEpoch().longValue());\n+\n+              currentEpochParticipationWeight.set(\n+                  totalBalances.getCurrentEpochAttesters().longValue());\n+              previousEpochParticipationWeight.set(\n+                  totalBalances.getPreviousEpochAttesters().longValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc2OTU5Nw=="}, "originalCommit": {"oid": "82236af1ae71de008e1f7a4b0ca3767a10bfc802"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2937, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}