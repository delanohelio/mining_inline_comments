{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4NjkxMzI5", "number": 1376, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMDowNTozMFrODoI4pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMDowODoxNVrODoI5Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDE1MjA1OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/network/GetListenAddresses.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMDowNTozMFrOF2g9dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMDowNTozMFrOF2g9dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwNzQ0NQ==", "bodyText": "should really be\n@OpenApiResponse(status = RES_OK, content = @OpenApiContent(from = String.class, isArray = true))", "url": "https://github.com/ConsenSys/teku/pull/1376#discussion_r392707445", "createdAt": "2020-03-15T20:05:30Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/network/GetListenAddresses.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.handlers.network;\n+\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_NETWORK;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.artemis.api.NetworkDataProvider;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+public class GetListenAddresses implements Handler {\n+  public static final String ROUTE = \"/network/listen_addresses\";\n+  private final JsonProvider jsonProvider;\n+  private final NetworkDataProvider network;\n+\n+  public GetListenAddresses(final NetworkDataProvider network, final JsonProvider jsonProvider) {\n+    this.network = network;\n+    this.jsonProvider = jsonProvider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Returns the list of MultiAddr that the client's libp2p service is listening on.\",\n+      tags = {TAG_NETWORK},\n+      description =\n+          \"Returns the list of MultiAddr that the client's libp2p service is listening on.\",\n+      responses = {\n+        @OpenApiResponse(status = RES_OK, content = @OpenApiContent(from = String.class)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0279097dafc4a350f1570086c782fac077a11d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDE1MzkwOnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/artemis/api/NetworkDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQyMDowODoxNVrOF2g-Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjoxOTo0NlrOF6C5AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwNzY3OQ==", "bodyText": "nit: can we have a unit test for this?", "url": "https://github.com/ConsenSys/teku/pull/1376#discussion_r392707679", "createdAt": "2020-03-15T20:08:15Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/api/NetworkDataProvider.java", "diffHunk": "@@ -79,4 +80,8 @@ public int getListenPort() {\n   P2PNetwork<?> getP2pNetwork() {\n     return p2pNetwork;\n   }\n+\n+  public List<String> getListeningAddresses() {\n+    return List.of(LibP2PNetwork.getAdvertisedAddrString(p2pNetwork.getConfig()));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0279097dafc4a350f1570086c782fac077a11d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQwOTA4OA==", "bodyText": "Added.", "url": "https://github.com/ConsenSys/teku/pull/1376#discussion_r396409088", "createdAt": "2020-03-23T12:19:46Z", "author": {"login": "mark-terry"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/api/NetworkDataProvider.java", "diffHunk": "@@ -79,4 +80,8 @@ public int getListenPort() {\n   P2PNetwork<?> getP2pNetwork() {\n     return p2pNetwork;\n   }\n+\n+  public List<String> getListeningAddresses() {\n+    return List.of(LibP2PNetwork.getAdvertisedAddrString(p2pNetwork.getConfig()));\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjcwNzY3OQ=="}, "originalCommit": {"oid": "ac0279097dafc4a350f1570086c782fac077a11d"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2546, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}