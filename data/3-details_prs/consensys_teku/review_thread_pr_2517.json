{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNzYyNDc3", "number": 2517, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOToyNDoxOVrOEVvrXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOToyNDoxOVrOEVvrXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjM2NzAyOnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/KeystoresValidatorKeyProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOToyNDoxOVrOG8rDEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOToyNDoxOVrOG8rDEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI3MzA0MA==", "bodyText": "This is a bit of a \"magic number\", though probably safe. Each Scrypt keystore takes about 300MB, so four in parallel is 1200mb, which is as low as we realistically might want to set the heap size, I guess.\nFor reference, I played with some code like this, which works well, but didn't manage to convince myself that it was a good idea:\n    // This is a guess. Actual parameters seem to be in tech.pegasys.signers.bls.keystore.model.ScryptParam.java\n    // final long memoryPerThread = 300_000_000L;\n    final long memoryPerThread = 128L * 262_144L * 8L;\n    final long allocatedMemory = (Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory());\n    final long presumableFreeMemory = Runtime.getRuntime().maxMemory() - allocatedMemory;\n    final int nThreads = (int) Math.max(1, Math.min(Runtime.getRuntime().availableProcessors(), (presumableFreeMemory / memoryPerThread)));\n\n    ForkJoinPool forkJoinPool = null;\n\n    try {\n\n      System.out.println(\"Available processors: \" + Runtime.getRuntime().availableProcessors());\n      System.out.println(\"Using \" + nThreads + \" threads to load validator keys\");\n      forkJoinPool = new ForkJoinPool(nThreads);\n\n      StatusLogger.STATUS_LOG.loadingValidators(keystorePasswordFilePairs.size());\n      // return distinct loaded key pairs\n      return forkJoinPool.submit(() -> keystorePasswordFilePairs.stream()\n              .parallel()\n              .map(pair -> loadBLSPrivateKey(pair.getLeft(), loadPassword(pair.getRight())))\n              .distinct()\n              .map(privKey -> new BLSKeyPair(BLSSecretKey.fromBytes(privKey)))\n              .collect(toList())).get();\netc...", "url": "https://github.com/ConsenSys/teku/pull/2517#discussion_r466273040", "createdAt": "2020-08-06T09:24:19Z", "author": {"login": "benjaminion"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/KeystoresValidatorKeyProvider.java", "diffHunk": "@@ -46,12 +52,35 @@\n \n     StatusLogger.STATUS_LOG.loadingValidators(keystorePasswordFilePairs.size());\n     // return distinct loaded key pairs\n-    return keystorePasswordFilePairs.stream()\n-        .parallel()\n-        .map(pair -> loadBLSPrivateKey(pair.getLeft(), loadPassword(pair.getRight())))\n-        .distinct()\n-        .map(privKey -> new BLSKeyPair(BLSSecretKey.fromBytes(privKey)))\n-        .collect(toList());\n+\n+    final ExecutorService executorService =\n+        Executors.newFixedThreadPool(Math.min(4, Runtime.getRuntime().availableProcessors()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc506b9f4fa5849b8d5531dee640b46c1bfb0136"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3463, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}