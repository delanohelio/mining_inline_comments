{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MDU1NTU5", "number": 3188, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo0MToxNFrOE3j9Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo1NToxNFrOE3kHkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njk2MjAyOnYy", "diffSide": "LEFT", "path": "infrastructure/io/src/test/java/tech/pegasys/teku/infrastructure/io/resource/FileResourceLoaderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo0MToxNFrOHw-79w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo0MToxNFrOHw-79w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyNDg1NQ==", "bodyText": "Probably worth keeping these Windows test fixes to the other PR but that one's ready to merge anyway so should all work out.", "url": "https://github.com/ConsenSys/teku/pull/3188#discussion_r521124855", "createdAt": "2020-11-11T05:41:14Z", "author": {"login": "ajsutton"}, "path": "infrastructure/io/src/test/java/tech/pegasys/teku/infrastructure/io/resource/FileResourceLoaderTest.java", "diffHunk": "@@ -43,10 +43,7 @@ public void shouldReturnEmptyWhenFileDoesNotExist(@TempDir Path tempDir) throws\n   }\n \n   @Test\n-  public void shouldCreateInputStreamWhenPathIsADirectory(@TempDir Path tempDir) throws Exception {\n-    // We could potentially return empty for directories, but it is going to be confusing for users\n-    // to say we couldn't find something that exists. We should report that we couldn't read it.\n-    assertThat(loader.load(tempDir.toAbsolutePath().toString())).isNotEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a4220fe3796828c3ba8952047be5b54d5623170"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njk2ODQ2OnYy", "diffSide": "LEFT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/ActiveEth2Network.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo0NDo0MVrOHw-_yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDo0MTowM1rOHxHtKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyNTgzMg==", "bodyText": "I think its probably better to continue just using the gossipEncoding passed in here - especially since it's still being passed into the constructor anyway.", "url": "https://github.com/ConsenSys/teku/pull/3188#discussion_r521125832", "createdAt": "2020-11-11T05:44:41Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/ActiveEth2Network.java", "diffHunk": "@@ -107,7 +106,6 @@ public ActiveEth2Network(\n     this.peerManager = peerManager;\n     this.eventBus = eventBus;\n     this.recentChainData = recentChainData;\n-    this.gossipEncoding = gossipEncoding;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a4220fe3796828c3ba8952047be5b54d5623170"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI2ODUyMQ==", "bodyText": "Yep, totally makes sense with the final PR version (this was done for the previous PR incarnation)", "url": "https://github.com/ConsenSys/teku/pull/3188#discussion_r521268521", "createdAt": "2020-11-11T10:41:03Z", "author": {"login": "Nashatyrev"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/ActiveEth2Network.java", "diffHunk": "@@ -107,7 +106,6 @@ public ActiveEth2Network(\n     this.peerManager = peerManager;\n     this.eventBus = eventBus;\n     this.recentChainData = recentChainData;\n-    this.gossipEncoding = gossipEncoding;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyNTgzMg=="}, "originalCommit": {"oid": "5a4220fe3796828c3ba8952047be5b54d5623170"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njk3MDY0OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/encoding/GossipEncoding.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo0NTo0NFrOHw_BCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo0NTo0NFrOHw_BCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyNjE1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Preprocess the raw Gossip message. The returned preprocessed message is be passed later to\n          \n          \n            \n               * Preprocess the raw Gossip message. The returned preprocessed message will be later passed to", "url": "https://github.com/ConsenSys/teku/pull/3188#discussion_r521126153", "createdAt": "2020-11-11T05:45:44Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/encoding/GossipEncoding.java", "diffHunk": "@@ -36,10 +36,34 @@\n   <T> Bytes encode(T value);\n \n   /**\n+   * Preprocess the raw Gossip message. The returned preprocessed message is be passed later to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a4220fe3796828c3ba8952047be5b54d5623170"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njk3NDM1OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/encoding/SnappyPreparedGossipMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo0Nzo1MFrOHw_DLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo0Nzo1MFrOHw_DLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyNjcwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Optional<Bytes> maybeUncompressed = getMaybeUncompressed();\n          \n          \n            \n                if (maybeUncompressed.isPresent()) {\n          \n          \n            \n                  return maybeUncompressed.get();\n          \n          \n            \n                } else {\n          \n          \n            \n                  throw new DecodingException(\"Couldn't uncompress the message\", uncompressException);\n          \n          \n            \n                }\n          \n          \n            \n                return getMaybeUncompressed().orElseThrow(() -> new DecodingException(\"Couldn't uncompress the message\", uncompressException));", "url": "https://github.com/ConsenSys/teku/pull/3188#discussion_r521126700", "createdAt": "2020-11-11T05:47:50Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/encoding/SnappyPreparedGossipMessage.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.encoding;\n+\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.crypto.Hash;\n+import tech.pegasys.teku.datastructures.util.LengthBounds;\n+import tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer;\n+import tech.pegasys.teku.networking.p2p.gossip.PreparedGossipMessage;\n+\n+/**\n+ * {@link PreparedGossipMessage} implementation which calculates Gossip 'message-id' according to\n+ * Eth2 spec based on uncompressed gossip message payload: <code>\n+ *   SHA256(MESSAGE_DOMAIN_VALID_SNAPPY + snappy_decompress(message.data))[:20]\n+ * </code> The message payload is uncompressed lazily and cached for the final message handling:\n+ * {@link tech.pegasys.teku.networking.p2p.gossip.TopicHandler#handleMessage(PreparedGossipMessage)}\n+ */\n+class SnappyPreparedGossipMessage implements PreparedGossipMessage {\n+  // 4-byte domain for gossip message-id isolation of *invalid* snappy messages\n+  public static final Bytes MESSAGE_DOMAIN_INVALID_SNAPPY = Bytes.fromHexString(\"0x00000000\");\n+  // 4-byte domain for gossip message-id isolation of *valid* snappy messages\n+  public static final Bytes MESSAGE_DOMAIN_VALID_SNAPPY = Bytes.fromHexString(\"0x01000000\");\n+\n+  private final Bytes compressedData;\n+  private final Class<?> valueType;\n+  private final SnappyBlockCompressor snappyCompressor;\n+  private final Supplier<Optional<Bytes>> uncompressed =\n+      Suppliers.memoize(this::maybeUncompressPayload);\n+  private DecodingException uncompressException;\n+\n+  static SnappyPreparedGossipMessage createUnknown(Bytes compressedData) {\n+    return new SnappyPreparedGossipMessage(compressedData, null, null);\n+  }\n+\n+  static SnappyPreparedGossipMessage create(\n+      Bytes compressedData, Class<?> valueType, SnappyBlockCompressor snappyCompressor) {\n+    return new SnappyPreparedGossipMessage(compressedData, valueType, snappyCompressor);\n+  }\n+\n+  private SnappyPreparedGossipMessage(\n+      Bytes compressedData, Class<?> valueType, SnappyBlockCompressor snappyCompressor) {\n+    this.compressedData = compressedData;\n+    this.valueType = valueType;\n+    this.snappyCompressor = snappyCompressor;\n+  }\n+\n+  public Bytes getUncompressedOrThrow() throws DecodingException {\n+    Optional<Bytes> maybeUncompressed = getMaybeUncompressed();\n+    if (maybeUncompressed.isPresent()) {\n+      return maybeUncompressed.get();\n+    } else {\n+      throw new DecodingException(\"Couldn't uncompress the message\", uncompressException);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a4220fe3796828c3ba8952047be5b54d5623170"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njk4ODk2OnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/gossip/LibP2PGossipNetwork.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo1NToxNFrOHw_LfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDo1NTozNFrOHxILbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyODgyOA==", "bodyText": "Good idea to move this init out of LibP2pNetwork but might be better to introduce a static create method rather than doing all the work in the constructor.", "url": "https://github.com/ConsenSys/teku/pull/3188#discussion_r521128828", "createdAt": "2020-11-11T05:55:14Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/gossip/LibP2PGossipNetwork.java", "diffHunk": "@@ -13,39 +13,70 @@\n \n package tech.pegasys.teku.networking.p2p.libp2p.gossip;\n \n+import com.google.common.base.Preconditions;\n import io.libp2p.core.PeerId;\n+import io.libp2p.core.pubsub.PubsubApi;\n+import io.libp2p.core.pubsub.PubsubApiKt;\n import io.libp2p.core.pubsub.PubsubPublisherApi;\n import io.libp2p.core.pubsub.PubsubSubscription;\n import io.libp2p.core.pubsub.Topic;\n+import io.libp2p.core.pubsub.ValidationResult;\n+import io.libp2p.pubsub.FastIdSeenCache;\n+import io.libp2p.pubsub.PubsubRouterMessageValidator;\n+import io.libp2p.pubsub.SeenCache;\n+import io.libp2p.pubsub.TTLSeenCache;\n import io.libp2p.pubsub.gossip.Gossip;\n+import io.libp2p.pubsub.gossip.GossipParams;\n+import io.libp2p.pubsub.gossip.GossipRouter;\n import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.handler.logging.LoggingHandler;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import kotlin.jvm.functions.Function0;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes;\n import org.hyperledger.besu.plugin.services.MetricsSystem;\n+import org.jetbrains.annotations.NotNull;\n import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.networking.p2p.gossip.GossipNetwork;\n+import tech.pegasys.teku.networking.p2p.gossip.PreparedGossipMessage;\n+import tech.pegasys.teku.networking.p2p.gossip.PreparedGossipMessageFactory;\n import tech.pegasys.teku.networking.p2p.gossip.TopicChannel;\n import tech.pegasys.teku.networking.p2p.gossip.TopicHandler;\n import tech.pegasys.teku.networking.p2p.libp2p.LibP2PNodeId;\n+import tech.pegasys.teku.networking.p2p.network.GossipConfig;\n import tech.pegasys.teku.networking.p2p.peer.NodeId;\n \n-public class LibP2PGossipNetwork implements tech.pegasys.teku.networking.p2p.gossip.GossipNetwork {\n+public class LibP2PGossipNetwork implements GossipNetwork {\n+\n   private static final Logger LOG = LogManager.getLogger();\n+  private static final PubsubRouterMessageValidator STRICT_FIELDS_VALIDATOR =\n+      new GossipWireValidator();\n+  private static final Function0<Long> NULL_SEQNO_GENERATOR = () -> null;\n \n   private final MetricsSystem metricsSystem;\n   private final Gossip gossip;\n   private final PubsubPublisherApi publisher;\n+  private final Map<String, TopicHandler> topicHandlerMap = new ConcurrentHashMap<>();\n+  private final PreparedGossipMessageFactory defaultMessageFactory;\n \n   public LibP2PGossipNetwork(\n-      final MetricsSystem metricsSystem, final Gossip gossip, final PubsubPublisherApi publisher) {\n+      MetricsSystem metricsSystem,\n+      GossipConfig gossipConfig,\n+      PreparedGossipMessageFactory defaultMessageFactory,\n+      boolean logWireGossip) {\n     this.metricsSystem = metricsSystem;\n-    this.gossip = gossip;\n-    this.publisher = publisher;\n+    this.defaultMessageFactory = defaultMessageFactory;\n+    this.gossip = createGossip(gossipConfig, logWireGossip);\n+    this.publisher = gossip.createPublisher(null, NULL_SEQNO_GENERATOR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a4220fe3796828c3ba8952047be5b54d5623170"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI3NjI2OQ==", "bodyText": "Please check this change: fa656bb. Is that what you have in mind?", "url": "https://github.com/ConsenSys/teku/pull/3188#discussion_r521276269", "createdAt": "2020-11-11T10:55:34Z", "author": {"login": "Nashatyrev"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/gossip/LibP2PGossipNetwork.java", "diffHunk": "@@ -13,39 +13,70 @@\n \n package tech.pegasys.teku.networking.p2p.libp2p.gossip;\n \n+import com.google.common.base.Preconditions;\n import io.libp2p.core.PeerId;\n+import io.libp2p.core.pubsub.PubsubApi;\n+import io.libp2p.core.pubsub.PubsubApiKt;\n import io.libp2p.core.pubsub.PubsubPublisherApi;\n import io.libp2p.core.pubsub.PubsubSubscription;\n import io.libp2p.core.pubsub.Topic;\n+import io.libp2p.core.pubsub.ValidationResult;\n+import io.libp2p.pubsub.FastIdSeenCache;\n+import io.libp2p.pubsub.PubsubRouterMessageValidator;\n+import io.libp2p.pubsub.SeenCache;\n+import io.libp2p.pubsub.TTLSeenCache;\n import io.libp2p.pubsub.gossip.Gossip;\n+import io.libp2p.pubsub.gossip.GossipParams;\n+import io.libp2p.pubsub.gossip.GossipRouter;\n import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.handler.logging.LoggingHandler;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import kotlin.jvm.functions.Function0;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes;\n import org.hyperledger.besu.plugin.services.MetricsSystem;\n+import org.jetbrains.annotations.NotNull;\n import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.networking.p2p.gossip.GossipNetwork;\n+import tech.pegasys.teku.networking.p2p.gossip.PreparedGossipMessage;\n+import tech.pegasys.teku.networking.p2p.gossip.PreparedGossipMessageFactory;\n import tech.pegasys.teku.networking.p2p.gossip.TopicChannel;\n import tech.pegasys.teku.networking.p2p.gossip.TopicHandler;\n import tech.pegasys.teku.networking.p2p.libp2p.LibP2PNodeId;\n+import tech.pegasys.teku.networking.p2p.network.GossipConfig;\n import tech.pegasys.teku.networking.p2p.peer.NodeId;\n \n-public class LibP2PGossipNetwork implements tech.pegasys.teku.networking.p2p.gossip.GossipNetwork {\n+public class LibP2PGossipNetwork implements GossipNetwork {\n+\n   private static final Logger LOG = LogManager.getLogger();\n+  private static final PubsubRouterMessageValidator STRICT_FIELDS_VALIDATOR =\n+      new GossipWireValidator();\n+  private static final Function0<Long> NULL_SEQNO_GENERATOR = () -> null;\n \n   private final MetricsSystem metricsSystem;\n   private final Gossip gossip;\n   private final PubsubPublisherApi publisher;\n+  private final Map<String, TopicHandler> topicHandlerMap = new ConcurrentHashMap<>();\n+  private final PreparedGossipMessageFactory defaultMessageFactory;\n \n   public LibP2PGossipNetwork(\n-      final MetricsSystem metricsSystem, final Gossip gossip, final PubsubPublisherApi publisher) {\n+      MetricsSystem metricsSystem,\n+      GossipConfig gossipConfig,\n+      PreparedGossipMessageFactory defaultMessageFactory,\n+      boolean logWireGossip) {\n     this.metricsSystem = metricsSystem;\n-    this.gossip = gossip;\n-    this.publisher = publisher;\n+    this.defaultMessageFactory = defaultMessageFactory;\n+    this.gossip = createGossip(gossipConfig, logWireGossip);\n+    this.publisher = gossip.createPublisher(null, NULL_SEQNO_GENERATOR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyODgyOA=="}, "originalCommit": {"oid": "5a4220fe3796828c3ba8952047be5b54d5623170"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2988, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}