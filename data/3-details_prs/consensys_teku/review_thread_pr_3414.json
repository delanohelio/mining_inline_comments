{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwNjE2NjM3", "number": 3414, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowNzoxNFrOFFyKQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTozNToyOFrOFLU8XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjA5MDI2OnYy", "diffSide": "RIGHT", "path": "teku/src/main/java/tech/pegasys/teku/cli/converter/GraffitiConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowNzoxNFrOIGd2RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowNzoxNFrOIGd2RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY1MTM5Nw==", "bodyText": "(nit) May be worth adding a method to  Bytes32Converter that directly accepts a String as well.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543651397", "createdAt": "2020-12-15T20:07:14Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/converter/GraffitiConverter.java", "diffHunk": "@@ -16,22 +16,21 @@\n import java.nio.charset.StandardCharsets;\n import org.apache.tuweni.bytes.Bytes32;\n import picocli.CommandLine;\n+import tech.pegasys.teku.validator.client.loader.graffiti.Bytes32Converter;\n \n public class GraffitiConverter implements CommandLine.ITypeConverter<Bytes32> {\n   @Override\n   public Bytes32 convert(final String value) {\n     byte[] input = value.getBytes(StandardCharsets.UTF_8);\n-    if (input.length > 32) {\n+    try {\n+      return Bytes32Converter.toBytes32(input);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjE1NzI2OnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/graffiti/GraffitiLoader.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDoyMzo1M1rOIGec2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoyNToxOFrOIHXteg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY2MTI3Mw==", "bodyText": "Rather than using readAllBytes, it's probably safer to use something like FileInputStream to read at most 32 bytes, and then detect if there's extra unread data and, if so, throw an error.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543661273", "createdAt": "2020-12-15T20:23:53Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/graffiti/GraffitiLoader.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader.graffiti;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class GraffitiLoader {\n+  public static Bytes32 loadFromFile(final Path graffitiFile) throws GraffitiLoaderException {\n+    checkNotNull(graffitiFile, \"GraffitiFile path cannot be null\");\n+    try {\n+      return Bytes32Converter.toBytes32(Files.readAllBytes(graffitiFile));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwMTY1Ng==", "bodyText": "Great idea. What if we just read in the first 32 and ignored the rest?\nThinking out loud... I think that would error in the case of users adding 32 chars and a new line char?", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543701656", "createdAt": "2020-12-15T21:32:56Z", "author": {"login": "EdwardPrentice"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/graffiti/GraffitiLoader.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader.graffiti;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class GraffitiLoader {\n+  public static Bytes32 loadFromFile(final Path graffitiFile) throws GraffitiLoaderException {\n+    checkNotNull(graffitiFile, \"GraffitiFile path cannot be null\");\n+    try {\n+      return Bytes32Converter.toBytes32(Files.readAllBytes(graffitiFile));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY2MTI3Mw=="}, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzMzEzNw==", "bodyText": "That's a good point.  I think to start, I'd err on the side of being strict (fail to read from the file if the format is unexpected).  This could help prevent errors where the node operator has pointed to the wrong file, for example.  We want to be pretty careful about what we post to the chain - no way to remove it later :D", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r544433137", "createdAt": "2020-12-16T16:19:12Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/graffiti/GraffitiLoader.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader.graffiti;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class GraffitiLoader {\n+  public static Bytes32 loadFromFile(final Path graffitiFile) throws GraffitiLoaderException {\n+    checkNotNull(graffitiFile, \"GraffitiFile path cannot be null\");\n+    try {\n+      return Bytes32Converter.toBytes32(Files.readAllBytes(graffitiFile));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY2MTI3Mw=="}, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQzNDI4Mg==", "bodyText": "We could always add some validation at startup - try to read from the provided file and if it fails, refuse to start.  This would give the node operator a heads up that the format is wrong.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r544434282", "createdAt": "2020-12-16T16:20:37Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/graffiti/GraffitiLoader.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader.graffiti;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class GraffitiLoader {\n+  public static Bytes32 loadFromFile(final Path graffitiFile) throws GraffitiLoaderException {\n+    checkNotNull(graffitiFile, \"GraffitiFile path cannot be null\");\n+    try {\n+      return Bytes32Converter.toBytes32(Files.readAllBytes(graffitiFile));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY2MTI3Mw=="}, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU5OTQxOA==", "bodyText": "I've put a stricter check in. Of course we can't rely on failing at start up because the file can change subsequently. Let me know what you think.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r544599418", "createdAt": "2020-12-16T20:25:18Z", "author": {"login": "EdwardPrentice"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/graffiti/GraffitiLoader.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader.graffiti;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class GraffitiLoader {\n+  public static Bytes32 loadFromFile(final Path graffitiFile) throws GraffitiLoaderException {\n+    checkNotNull(graffitiFile, \"GraffitiFile path cannot be null\");\n+    try {\n+      return Bytes32Converter.toBytes32(Files.readAllBytes(graffitiFile));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY2MTI3Mw=="}, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjE3MjAzOnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/graffiti/Bytes32Converter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDoyNzozOFrOIGelWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDoyNzozOFrOIGelWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY2MzQ0OQ==", "bodyText": "Looks like Bytes32.wrap expects the byte array to have exactly 32 bytes, so I don't think this will work.   With the current implementation we're allocating a single byte array which should be faster than creating a smaller Bytes object and then resizing it.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543663449", "createdAt": "2020-12-15T20:27:38Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/graffiti/Bytes32Converter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader.graffiti;\n+\n+import java.nio.charset.StandardCharsets;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class Bytes32Converter {\n+  public static Bytes32 toBytes32(final byte[] input) {\n+    if (input.length > 32) {\n+      throw new IllegalArgumentException(\n+          \"'\"\n+              + new String(input, StandardCharsets.UTF_8)\n+              + \"' converts to \"\n+              + input.length\n+              + \" bytes. Input must be 32 bytes or less.\");\n+    }\n+\n+    // TODO note to self and code reviewer. Is this implementation better or worse than\n+    //     return Bytes32.rightPad(Bytes32.wrap(\"myString\".getBytes(UTF_*)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjE4NzEwOnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/graffiti/Bytes32Converter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDozMTozNFrOIGeuVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMToyMDo0MFrOIGgdxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY2NTc1MA==", "bodyText": "(nit) I think I'd call this something like GraffitiParser.  We use \"converters\" in the CLI package because this is a picocli concept.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543665750", "createdAt": "2020-12-15T20:31:34Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/graffiti/Bytes32Converter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader.graffiti;\n+\n+import java.nio.charset.StandardCharsets;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class Bytes32Converter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4NDQ3NA==", "bodyText": "I think what I am trying to achieve here is separating the dirty business of converting from a String of some length to a Bytes32 from the higher level concept of Graffiti.\nAnd then \"GraffitiParser\" would ask this \"Bytes32parsingconvertingthingy\" to do most of the work for it. So maybe we need both names.\nDoes that make sense?", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543684474", "createdAt": "2020-12-15T21:03:33Z", "author": {"login": "EdwardPrentice"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/graffiti/Bytes32Converter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader.graffiti;\n+\n+import java.nio.charset.StandardCharsets;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class Bytes32Converter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY2NTc1MA=="}, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY5NDI3Ng==", "bodyText": "You mean we'd have GraffitiConverter, GraffitiParser, and Bytes32Parser ?", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543694276", "createdAt": "2020-12-15T21:20:40Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/graffiti/Bytes32Converter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader.graffiti;\n+\n+import java.nio.charset.StandardCharsets;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class Bytes32Converter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY2NTc1MA=="}, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjE5MzY1OnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/Validator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDozMzowNVrOIGex9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDozMzowNVrOIGex9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY2NjY3Ng==", "bodyText": "I'd keep this signature the same (returning Optional<Bytes32> and just load the graffiti here.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543666676", "createdAt": "2020-12-15T20:33:05Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/Validator.java", "diffHunk": "@@ -38,7 +35,7 @@ public Signer getSigner() {\n     return signer;\n   }\n \n-  public Optional<Bytes32> getGraffiti() {\n+  public Graffiti getGraffiti() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjIxODczOnYy", "diffSide": "RIGHT", "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorConfig.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDozOTo0OFrOIGfA3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDozOTowMVrOIHYL0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3MDQ5NQ==", "bodyText": "I think we could simplify and make this more easily customizable by defining a GraffitiProvider interface:\n@FunctionalInterface\ninterface GraffitiProvider {\n  Optional<Bytes32> get();\n}\n\nValidatorConfig could then just have a single graffitiProvider(...) setter.\nWe could then move the new Graffiti class to FileBackedGraffitiProvider implements GraffitiProvider.   The actual provider instance would be constructed in ValidatorOptions.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543670495", "createdAt": "2020-12-15T20:39:48Z", "author": {"login": "mbaxter"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorConfig.java", "diffHunk": "@@ -259,6 +267,11 @@ public Builder graffiti(Bytes32 graffiti) {\n       return this;\n     }\n \n+    public Builder graffitiFile(Path graffitiFile) {\n+      this.graffitiFile = graffitiFile;\n+      return this;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczMDk0MQ==", "bodyText": "I'm unsure \ud83d\ude15 I think that would yield some different behaviour if the graffiti were to be removed at some point (the fallback behaviour changes). I guess we need to pin that down first?", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543730941", "createdAt": "2020-12-15T22:23:51Z", "author": {"login": "EdwardPrentice"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorConfig.java", "diffHunk": "@@ -259,6 +267,11 @@ public Builder graffiti(Bytes32 graffiti) {\n       return this;\n     }\n \n+    public Builder graffitiFile(Path graffitiFile) {\n+      this.graffitiFile = graffitiFile;\n+      return this;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3MDQ5NQ=="}, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQxNzc4Mg==", "bodyText": "Not suggesting any different functionality here, just an interface to simplify the dependencies.  So we can pass around 1 value (graffitiProvider) instead of 2 (graffiti and graffitiFile).", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r544417782", "createdAt": "2020-12-16T16:00:18Z", "author": {"login": "mbaxter"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorConfig.java", "diffHunk": "@@ -259,6 +267,11 @@ public Builder graffiti(Bytes32 graffiti) {\n       return this;\n     }\n \n+    public Builder graffitiFile(Path graffitiFile) {\n+      this.graffitiFile = graffitiFile;\n+      return this;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3MDQ5NQ=="}, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU5MjgzMg==", "bodyText": "I'm not sure I'm totally following at this point. I'll make some changes and see if that's what you mean.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r544592832", "createdAt": "2020-12-16T20:14:03Z", "author": {"login": "EdwardPrentice"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorConfig.java", "diffHunk": "@@ -259,6 +267,11 @@ public Builder graffiti(Bytes32 graffiti) {\n       return this;\n     }\n \n+    public Builder graffitiFile(Path graffitiFile) {\n+      this.graffitiFile = graffitiFile;\n+      return this;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3MDQ5NQ=="}, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYwNzE4NQ==", "bodyText": "Happy to make a quick patch to show you what I mean as well - let me know if you think that would be helpful", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r544607185", "createdAt": "2020-12-16T20:39:01Z", "author": {"login": "mbaxter"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorConfig.java", "diffHunk": "@@ -259,6 +267,11 @@ public Builder graffiti(Bytes32 graffiti) {\n       return this;\n     }\n \n+    public Builder graffitiFile(Path graffitiFile) {\n+      this.graffitiFile = graffitiFile;\n+      return this;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3MDQ5NQ=="}, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjIzMTQxOnYy", "diffSide": "RIGHT", "path": "teku/src/test/java/tech/pegasys/teku/cli/converter/Bytes32ConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDo0MzowMlrOIGfIQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDo0MzowMlrOIGfIQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3MjM4Ng==", "bodyText": "Looks like this name was accidentally updated?", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543672386", "createdAt": "2020-12-15T20:43:02Z", "author": {"login": "mbaxter"}, "path": "teku/src/test/java/tech/pegasys/teku/cli/converter/Bytes32ConverterTest.java", "diffHunk": "@@ -20,7 +20,7 @@\n import org.junit.jupiter.api.Test;\n import picocli.CommandLine;\n \n-public class GraffitiConverterTest {\n+public class Bytes32ConverterTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjI4MzY3OnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/Graffiti.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDo1NTo1OFrOIGfmLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo1NzozMFrOIHMe4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4MDA0NQ==", "bodyText": "Thought I left a comment here, but it seems to have been lost.  We'll have to handle the case where one or both of these values are not provided via the CLI.  I'd suggest making these 2 value Optional.  Then we can load from file if that argument exists, otherwise we can return the default value.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543680045", "createdAt": "2020-12-15T20:55:58Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/Graffiti.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiLoader;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiLoaderException;\n+\n+/**\n+ * A type to hold the current graffiti value. Graffiti can be loaded from 2 places:\n+ *\n+ * <ul>\n+ *   <li>The config file at initialisation\n+ *   <li>The graffiti file which will be regularly checked\n+ * </ul>\n+ *\n+ * In the case that the file cannot be read, the graffiti value will remain unchanged from its\n+ * previous value.\n+ */\n+public class Graffiti {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private Bytes32 graffiti;\n+  private final Path graffitiFile;\n+\n+  public Graffiti(final Bytes32 graffiti, final Path graffitiFile) {\n+    this.graffiti = graffiti;\n+    this.graffitiFile = graffitiFile;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "000f9fe104efddd24a0e159c49878974a0ac5213"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcwNTI1NQ==", "bodyText": "Agreed. Unless I'm missing something I think that's what the code currently is designed to do.\nThe logic is currently:\nUse the new value in the file if possible else fall back to previous value of graffiti\nIf no value is set the default value will be blank\nSo I'm unsure exactly what to change here?", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543705255", "createdAt": "2020-12-15T21:39:19Z", "author": {"login": "EdwardPrentice"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/Graffiti.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiLoader;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiLoaderException;\n+\n+/**\n+ * A type to hold the current graffiti value. Graffiti can be loaded from 2 places:\n+ *\n+ * <ul>\n+ *   <li>The config file at initialisation\n+ *   <li>The graffiti file which will be regularly checked\n+ * </ul>\n+ *\n+ * In the case that the file cannot be read, the graffiti value will remain unchanged from its\n+ * previous value.\n+ */\n+public class Graffiti {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private Bytes32 graffiti;\n+  private final Path graffitiFile;\n+\n+  public Graffiti(final Bytes32 graffiti, final Path graffitiFile) {\n+    this.graffiti = graffiti;\n+    this.graffitiFile = graffitiFile;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4MDA0NQ=="}, "originalCommit": {"oid": "000f9fe104efddd24a0e159c49878974a0ac5213"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQxNTQ1Ng==", "bodyText": "The issue is I don't think we're handling null values safely.  In general, we tend to prefer explicit Optional's in the codebase when a value may be missing.  For example, if the graffitiFile is null, I believe we'll currently throw a NullPointerException.   If we have Optional's, we can do something like:\n  private final Optional<Bytes32> defaultGraffiti;\n  private final Optional<Path> graffitiFile;\n\n  public Graffiti(final Optional<Bytes32> defaultGraffiti, final Optional<Path> graffitiFile) {\n    this.defaultGraffiti = defaultGraffiti;\n    this.graffitiFile = graffitiFile;\n  }\n\n  public Optional<Bytes32> getGraffiti() {\n    return graffitiFile.flatMap(this::loadGraffitiFromFile).or(() -> defaultGraffiti);\n  }\n\n  private Optional<Bytes32> loadGraffitiFromFile(final Path path) {\n    try {\n      return Optional.ofNullable(GraffitiParser.loadFromFile(path));\n    } catch (final GraffitiLoaderException e) {\n      LOG.error(\"Loading graffiti from file \" + graffitiFile + \" failed.\", e);\n      return Optional.empty();\n    }\n  }\n\nNote - I have changed the behavior a bit here ^.  Instead of keeping the previous value in graffiti we just have a static default value to use if the file reading fails.  I think this ends up being a little more intuitive and a little safer:\n\nIf I'm supplying both a graffitiFile and a graffiti value, it seems more intuitive that the static value will be treated as a default rather than potentially being used only on the first block proposal if file reading fails.\nIf you're running multiple validators, you can set a default value to an empty Bytes32 to avoid potentially linking 2 different validators.  Say someone has a set up that writes new data to the file every slot so that each validator will broadcast unique graffiti.  If a file read fails, rather than using the previous value, we just use an empty value.  This prevents us from broadcasting the same graffiti for different validators.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r544415456", "createdAt": "2020-12-16T15:57:30Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/Graffiti.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiLoader;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiLoaderException;\n+\n+/**\n+ * A type to hold the current graffiti value. Graffiti can be loaded from 2 places:\n+ *\n+ * <ul>\n+ *   <li>The config file at initialisation\n+ *   <li>The graffiti file which will be regularly checked\n+ * </ul>\n+ *\n+ * In the case that the file cannot be read, the graffiti value will remain unchanged from its\n+ * previous value.\n+ */\n+public class Graffiti {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private Bytes32 graffiti;\n+  private final Path graffitiFile;\n+\n+  public Graffiti(final Bytes32 graffiti, final Path graffitiFile) {\n+    this.graffiti = graffiti;\n+    this.graffitiFile = graffitiFile;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4MDA0NQ=="}, "originalCommit": {"oid": "000f9fe104efddd24a0e159c49878974a0ac5213"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTE3NTY0OnYy", "diffSide": "RIGHT", "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjowMjoyMVrOIHMuNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjowMjoyMVrOIHMuNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQxOTM4MA==", "bodyText": "We're not currently using this setter.  This will need to be hooked up in ValidatorOptions.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r544419380", "createdAt": "2020-12-16T16:02:21Z", "author": {"login": "mbaxter"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorConfig.java", "diffHunk": "@@ -143,6 +146,10 @@ public Bytes32 getGraffiti() {\n     return graffiti;\n   }\n \n+  public Path getGraffitiFile() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eea55be00a7b89f3f383b707666e1c4d61fcd1"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTE5MDExOnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/Graffiti.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjowNToxM1rOIHM23w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjowNToxM1rOIHM23w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQyMTU5OQ==", "bodyText": "We really don't want to throw when we're trying to propose a block, so we should probably go ahead and add a general catch block as well:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } catch (final GraffitiLoaderException e) {\n          \n          \n            \n                  LOG.error(\"Loading graffiti from file \" + graffitiFile + \" failed.\", e);\n          \n          \n            \n                }\n          \n          \n            \n                } catch (final GraffitiLoaderException e) {\n          \n          \n            \n                  LOG.error(\"Loading graffiti from file \" + graffitiFile + \" failed.\", e);\n          \n          \n            \n                } catch (final Exception e) {\n          \n          \n            \n                  LOG.error(\"Encountered unexpected exception while loading graffiti from file \" + graffitiFile, e);\n          \n          \n            \n                }", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r544421599", "createdAt": "2020-12-16T16:05:13Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/Graffiti.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiLoaderException;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiParser;\n+\n+/**\n+ * A type to hold the current graffiti value. Graffiti can be loaded from 2 places:\n+ *\n+ * <ul>\n+ *   <li>The config file at initialisation\n+ *   <li>The graffiti file which will be regularly checked\n+ * </ul>\n+ *\n+ * In the case that the file cannot be read, the graffiti value will remain unchanged from its\n+ * previous value.\n+ */\n+public class Graffiti {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private Bytes32 graffiti;\n+  private final Path graffitiFile;\n+\n+  public Graffiti(final Bytes32 graffiti, final Path graffitiFile) {\n+    this.graffiti = graffiti;\n+    this.graffitiFile = graffitiFile;\n+  }\n+\n+  public Optional<Bytes32> getGraffiti() {\n+    reloadGraffitiFromFile(graffitiFile);\n+    return Optional.of(graffiti);\n+  }\n+\n+  private void reloadGraffitiFromFile(final Path path) {\n+    try {\n+      this.graffiti = GraffitiParser.loadFromFile(path);\n+    } catch (final GraffitiLoaderException e) {\n+      LOG.error(\"Loading graffiti from file \" + graffitiFile + \" failed.\", e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eea55be00a7b89f3f383b707666e1c4d61fcd1"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTIwODQyOnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/Graffiti.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjowODozNFrOIHNBnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxODowMjoyNlrOIKtNTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQyNDM1MQ==", "bodyText": "Let's add some tests for this class.  A few cases I can think of:\n\ngraffiti and graffitiFile are empty / null\ngraffiti is empty / null\ngraffitiFile is empty / null\ngraffitiFile is set, but the actual file doesn't exist\nread from file successfully, remove file from disk, read again", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r544424351", "createdAt": "2020-12-16T16:08:34Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/Graffiti.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiLoaderException;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiParser;\n+\n+/**\n+ * A type to hold the current graffiti value. Graffiti can be loaded from 2 places:\n+ *\n+ * <ul>\n+ *   <li>The config file at initialisation\n+ *   <li>The graffiti file which will be regularly checked\n+ * </ul>\n+ *\n+ * In the case that the file cannot be read, the graffiti value will remain unchanged from its\n+ * previous value.\n+ */\n+public class Graffiti {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eea55be00a7b89f3f383b707666e1c4d61fcd1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYxOTI0OA==", "bodyText": "Will come back to this once we're settled on the structure. Totally agree.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r544619248", "createdAt": "2020-12-16T20:59:51Z", "author": {"login": "EdwardPrentice"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/Graffiti.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiLoaderException;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiParser;\n+\n+/**\n+ * A type to hold the current graffiti value. Graffiti can be loaded from 2 places:\n+ *\n+ * <ul>\n+ *   <li>The config file at initialisation\n+ *   <li>The graffiti file which will be regularly checked\n+ * </ul>\n+ *\n+ * In the case that the file cannot be read, the graffiti value will remain unchanged from its\n+ * previous value.\n+ */\n+public class Graffiti {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQyNDM1MQ=="}, "originalCommit": {"oid": "c8eea55be00a7b89f3f383b707666e1c4d61fcd1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA5NzM1OA==", "bodyText": "Done", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r548097358", "createdAt": "2020-12-23T18:02:26Z", "author": {"login": "EdwardPrentice"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/Graffiti.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiLoaderException;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiParser;\n+\n+/**\n+ * A type to hold the current graffiti value. Graffiti can be loaded from 2 places:\n+ *\n+ * <ul>\n+ *   <li>The config file at initialisation\n+ *   <li>The graffiti file which will be regularly checked\n+ * </ul>\n+ *\n+ * In the case that the file cannot be read, the graffiti value will remain unchanged from its\n+ * previous value.\n+ */\n+public class Graffiti {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQyNDM1MQ=="}, "originalCommit": {"oid": "c8eea55be00a7b89f3f383b707666e1c4d61fcd1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTU4NTQ1OnYy", "diffSide": "RIGHT", "path": "teku/src/main/java/tech/pegasys/teku/cli/converter/GraffitiConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjo0MzozM1rOIIqaUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjo0MzozM1rOIIqaUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk1NDM4Ng==", "bodyText": "(nit) I think we can use your String -> Bytes32 helper directly here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return Bytes32Parser.toBytes32(input);\n          \n          \n            \n                  return Bytes32Parser.toBytes32(value);", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r545954386", "createdAt": "2020-12-18T16:43:33Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/converter/GraffitiConverter.java", "diffHunk": "@@ -16,22 +16,21 @@\n import java.nio.charset.StandardCharsets;\n import org.apache.tuweni.bytes.Bytes32;\n import picocli.CommandLine;\n+import tech.pegasys.teku.validator.api.Bytes32Parser;\n \n public class GraffitiConverter implements CommandLine.ITypeConverter<Bytes32> {\n   @Override\n   public Bytes32 convert(final String value) {\n     byte[] input = value.getBytes(StandardCharsets.UTF_8);\n-    if (input.length > 32) {\n+    try {\n+      return Bytes32Parser.toBytes32(input);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb23562f9eab4bfdbf45adb343c26b5b1e76924"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTU5NDc2OnYy", "diffSide": "RIGHT", "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/Bytes32Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjo0NTo1M1rOIIqf9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjo0NTo1M1rOIIqf9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk1NTgyOA==", "bodyText": "(nit)\nI'd revert to the original code here as it's a bit more efficient:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return Bytes32.wrap(Bytes32.rightPad(Bytes.wrap(input)));\n          \n          \n            \n                byte[] bytes = new byte[32];\n          \n          \n            \n                System.arraycopy(input, 0, bytes, 0, input.length);\n          \n          \n            \n                return Bytes32.wrap(bytes);", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r545955828", "createdAt": "2020-12-18T16:45:53Z", "author": {"login": "mbaxter"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/Bytes32Parser.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class Bytes32Parser {\n+\n+  public static Bytes32 toBytes32(final String input) {\n+    return toBytes32(input.getBytes(UTF_8));\n+  }\n+\n+  public static Bytes32 toBytes32(final byte[] input) {\n+    if (input.length > 32) {\n+      throw new IllegalArgumentException(\n+          \"'\"\n+              + new String(input, UTF_8)\n+              + \"' converts to \"\n+              + input.length\n+              + \" bytes. Input must be 32 bytes or less.\");\n+    }\n+    return Bytes32.wrap(Bytes32.rightPad(Bytes.wrap(input)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb23562f9eab4bfdbf45adb343c26b5b1e76924"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTYxODI2OnYy", "diffSide": "RIGHT", "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjo1MTo0NFrOIIqt1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjo1MTo0NFrOIIqt1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk1OTM4MQ==", "bodyText": "This reproduces the current behavior (users can optionally supply a static graffiti value).  If you want to make the new file-based option available, we'll need to add another instance variable to ValidatorOptions that accepts the graffiti file path.  For a similar example, see the --data-path annotations here.\nThen this can become:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .graffitiProvider(() -> Optional.of(graffiti)));\n          \n          \n            \n                            .graffitiProvider(new FileBackedGraffitiProvider(Optional.ofNullable(graffiti), Optional.ofNullable(graffitiFile)));", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r545959381", "createdAt": "2020-12-18T16:51:44Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java", "diffHunk": "@@ -82,7 +85,7 @@ public void configure(TekuConfiguration.Builder builder) {\n                 .validatorPerformanceTrackingMode(validatorPerformanceTrackingMode)\n                 .validatorExternalSignerSlashingProtectionEnabled(\n                     validatorExternalSignerSlashingProtectionEnabled)\n-                .graffiti(graffiti));\n+                .graffitiProvider(() -> Optional.of(graffiti)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb23562f9eab4bfdbf45adb343c26b5b1e76924"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTYzNjI4OnYy", "diffSide": "RIGHT", "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/FileBackedGraffitiProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjo1NjoyMVrOIIq4Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjo1NjoyMVrOIIq4Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk2MjA0Nw==", "bodyText": "(nit) This package shouldn't care about details around config files and CLI arguments - those are higher-level concerns that might change\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   <li>The config file at initialisation\n          \n          \n            \n             *   <li>The default value supplied at initialisation", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r545962047", "createdAt": "2020-12-18T16:56:21Z", "author": {"login": "mbaxter"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/FileBackedGraffitiProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * A type to hold the current graffiti value. Graffiti can be loaded from 2 places:\n+ *\n+ * <ul>\n+ *   <li>The config file at initialisation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb23562f9eab4bfdbf45adb343c26b5b1e76924"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTY0OTIxOnYy", "diffSide": "RIGHT", "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/AbstractDutySchedulerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjo1OTozNVrOIIq_6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjo1OTozNVrOIIq_6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk2NDAwOQ==", "bodyText": "(nit) For these tests, I'd just use a simple lambda to return the empty value\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  new Validator(VALIDATOR1_KEY, validator1Signer, new FileBackedGraffitiProvider(Optional.empty(), Optional.empty()));\n          \n          \n            \n                  new Validator(VALIDATOR1_KEY, validator1Signer, () -> Optional.empty());", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r545964009", "createdAt": "2020-12-18T16:59:35Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/AbstractDutySchedulerTest.java", "diffHunk": "@@ -44,8 +45,10 @@\n   final ValidatorIndexProvider validatorIndexProvider = mock(ValidatorIndexProvider.class);\n   final Signer validator1Signer = mock(Signer.class);\n   final Signer validator2Signer = mock(Signer.class);\n-  final Validator validator1 = new Validator(VALIDATOR1_KEY, validator1Signer, Optional.empty());\n-  final Validator validator2 = new Validator(VALIDATOR2_KEY, validator2Signer, Optional.empty());\n+  final Validator validator1 =\n+      new Validator(VALIDATOR1_KEY, validator1Signer, new FileBackedGraffitiProvider(Optional.empty(), Optional.empty()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb23562f9eab4bfdbf45adb343c26b5b1e76924"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjAwMDU2OnYy", "diffSide": "RIGHT", "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjo1Mzo1NVrOIKqa6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjo1Mzo1NVrOIKqa6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA1MTY5MQ==", "bodyText": "(nit) Might be worth noting here that if the file read fails, we'll fall back to the --graffiti value if supplied:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"File to load graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32).\",\n          \n          \n            \n                      \"File to load graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32).  If file reading fails during block creation, teku will fall back to any value supplied via --graffiti.\",", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r548051691", "createdAt": "2020-12-23T16:53:55Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java", "diffHunk": "@@ -30,10 +35,18 @@\n       converter = GraffitiConverter.class,\n       paramLabel = \"<GRAFFITI STRING>\",\n       description =\n-          \"Graffiti to include during block creation (gets converted to bytes and padded to Bytes32).\",\n+          \"Graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32).\",\n       arity = \"1\")\n   private Bytes32 graffiti;\n \n+  @Option(\n+      names = {\"--validators-graffiti-file\"},\n+      paramLabel = \"<GRAFFITI FILE>\",\n+      description =\n+          \"File to load graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32).\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff7cb8bf9e5730766aebadbd9aa7be90a0203937"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjAxMjEyOnYy", "diffSide": "RIGHT", "path": "teku/src/main/java/tech/pegasys/teku/cli/converter/GraffitiConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjo1ODowNVrOIKqh0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjo1ODowNVrOIKqh0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA1MzQ1Ng==", "bodyText": "Since we no longer know how many bytes are contained in the string here, I'd simplify the error message to something like: \"'\" + value + \"' contains too many bytes.  A maximum of 32 bytes can be used as graffiti.\"", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r548053456", "createdAt": "2020-12-23T16:58:05Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/converter/GraffitiConverter.java", "diffHunk": "@@ -16,22 +16,20 @@\n import java.nio.charset.StandardCharsets;\n import org.apache.tuweni.bytes.Bytes32;\n import picocli.CommandLine;\n+import tech.pegasys.teku.validator.api.Bytes32Parser;\n \n public class GraffitiConverter implements CommandLine.ITypeConverter<Bytes32> {\n   @Override\n   public Bytes32 convert(final String value) {\n-    byte[] input = value.getBytes(StandardCharsets.UTF_8);\n-    if (input.length > 32) {\n+    try {\n+      return Bytes32Parser.toBytes32(value);\n+    } catch (final IllegalArgumentException e) {\n       throw (new CommandLine.TypeConversionException(\n           \"'\"\n               + value\n               + \"' converts to \"\n-              + input.length\n+              + value.length()\n               + \" bytes. A maximum of 32 bytes can be used as graffiti.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff7cb8bf9e5730766aebadbd9aa7be90a0203937"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Njc2NzYyOnYy", "diffSide": "RIGHT", "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/FileBackedGraffitiProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxOTo0NTo0OFrOIKyIsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxOTo0NTo0OFrOIKyIsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE3ODA5Nw==", "bodyText": "If we want to use the default value on failure, this should be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return graffitiFile.map(this::loadGraffitiFromFile).orElse(defaultGraffiti);\n          \n          \n            \n                return graffitiFile.flatMap(this::loadGraffitiFromFile).or(() -> defaultGraffiti);", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r548178097", "createdAt": "2020-12-23T19:45:48Z", "author": {"login": "mbaxter"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/FileBackedGraffitiProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * A type to hold the current graffiti value. Graffiti can be loaded from 2 places:\n+ *\n+ * <ul>\n+ *   <li>The default value supplied at initialisation\n+ *   <li>The graffiti file which will be regularly checked\n+ * </ul>\n+ *\n+ * In the case that the file cannot be read, the default graffiti value will be used.\n+ */\n+public class FileBackedGraffitiProvider implements GraffitiProvider {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Optional<Bytes32> defaultGraffiti;\n+  private final Optional<Path> graffitiFile;\n+\n+  public FileBackedGraffitiProvider(\n+      final Optional<Bytes32> defaultGraffiti, final Optional<Path> graffitiFile) {\n+    this.defaultGraffiti = defaultGraffiti;\n+    this.graffitiFile = graffitiFile;\n+  }\n+\n+  @Override\n+  public Optional<Bytes32> get() {\n+    return graffitiFile.map(this::loadGraffitiFromFile).orElse(defaultGraffiti);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3016ad9c3d5104bcc9f0573540908f8011776bb"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0Njc3MTI5OnYy", "diffSide": "RIGHT", "path": "validator/api/src/test/java/tech/pegasys/teku/validator/api/FileBackedGraffitiProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxOTo0NjoyNFrOIKyK5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxOTo0NjoyNFrOIKyK5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE3ODY2MQ==", "bodyText": "I believe this should be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(graffitiProvider.get()).isEqualTo(Optional.empty());\n          \n          \n            \n                assertThat(graffitiProvider.get()).isEqualTo(Optional.of(graffiti));", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r548178661", "createdAt": "2020-12-23T19:46:24Z", "author": {"login": "mbaxter"}, "path": "validator/api/src/test/java/tech/pegasys/teku/validator/api/FileBackedGraffitiProviderTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.Test;\n+\n+public class FileBackedGraffitiProviderTest {\n+  private static final Bytes32 graffiti = Bytes32Parser.toBytes32(\"myGraffiti\");\n+  private static final Bytes32 graffitiFromSampleFile = Bytes32Parser.toBytes32(\"123456789\");\n+\n+  @Test\n+  public void testBothEmpty() {\n+    var graffitiProvider = new FileBackedGraffitiProvider(Optional.empty(), Optional.empty());\n+    assertThat(graffitiProvider.get()).isNotPresent();\n+  }\n+\n+  @Test\n+  public void testGraffitiWithoutFile() {\n+    var graffitiProvider = new FileBackedGraffitiProvider(Optional.of(graffiti), Optional.empty());\n+    assertThat(graffitiProvider.get()).isEqualTo(Optional.of(graffiti));\n+  }\n+\n+  @Test\n+  public void testEmptyGraffitiWithFile() {\n+    var graffitiProvider =\n+        new FileBackedGraffitiProvider(\n+            Optional.empty(), Optional.of(Path.of(\"src/test/resources/graffitiSample.txt\")));\n+    assertThat(graffitiProvider.get()).isEqualTo(Optional.of(graffitiFromSampleFile));\n+  }\n+\n+  @Test\n+  public void testGraffitiWithFile() {\n+    var graffitiProvider =\n+        new FileBackedGraffitiProvider(\n+            Optional.of(graffiti), Optional.of(Path.of(\"src/test/resources/graffitiSample.txt\")));\n+    assertThat(graffitiProvider.get()).isEqualTo(Optional.of(graffitiFromSampleFile));\n+  }\n+\n+  @Test\n+  public void testFileDoesntExist() {\n+    var graffitiProvider =\n+        new FileBackedGraffitiProvider(\n+            Optional.of(graffiti), Optional.of(Path.of(\"src/test/resources/noGraffitiFound.txt\")));\n+    assertThat(graffitiProvider.get()).isEqualTo(Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3016ad9c3d5104bcc9f0573540908f8011776bb"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTIzNTkyOnYy", "diffSide": "RIGHT", "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/GraffitiParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMjozNjo1MVrOIL4nWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMjozNjo1MVrOIL4nWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMzMjgyNg==", "bodyText": "InputStream (and the underlying file descriptor) is not closed after calling readNBytes. This would cause Validator.getGraffiti() to repeatedly open the graffiti file when producing a block. Of course, during finalization the FD would be closed, but I'd assume it's better practice to explicitely close it.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r549332826", "createdAt": "2020-12-28T12:36:51Z", "author": {"login": "systemfreund"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/GraffitiParser.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class GraffitiParser {\n+  public static Bytes32 loadFromFile(final Path graffitiFile) throws GraffitiLoaderException {\n+    try {\n+      checkNotNull(graffitiFile, \"GraffitiFile path cannot be null\");\n+      if (Files.size(graffitiFile) > 32) {\n+        throw new GraffitiLoaderException(\"GraffitiFile size too big, maximum size is 32 bytes\");\n+      }\n+      return Bytes32Parser.toBytes32(strip(Files.newInputStream(graffitiFile).readNBytes(32)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3016ad9c3d5104bcc9f0573540908f8011776bb"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODgyMTg3OnYy", "diffSide": "RIGHT", "path": "validator/api/src/test/java/tech/pegasys/teku/validator/api/GraffitiParserTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMDoxOTowNlrOIMXQyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMToyODoyN1rOINSt3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgzNDk1NA==", "bodyText": "A couple of boundary conditions:\n\nEmpty file\nfile of exactly 32 bytes\nfile of 33 bytes\n\nFor the 33 bytes i'd probably just shrink the 64 bytes file, but the test at the actual bound is worthwhile to demonstrate.\nI'd leave the current sample of 10 bytes, the middle sizes are most likely scenarios.\nGiven the file is read as bytes, could write 0x00 to file, this could be the '32 bytes' test from above... it would show that we can read 32 bytes, and that that 32 bytes can be 0x00.\nEmpty file and Bytes32.ZERO in file should both result in Bytes32.ZERO so it should be asserted against that value once it's been read.\nI like the tests overall, but boundaries tend to be where things can get fragile :)", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r549834954", "createdAt": "2020-12-29T20:19:06Z", "author": {"login": "rolfyone"}, "path": "validator/api/src/test/java/tech/pegasys/teku/validator/api/GraffitiParserTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;\n+\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.Test;\n+\n+class GraffitiParserTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwOTA1NQ==", "bodyText": "Made some changes", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r550809055", "createdAt": "2021-01-01T21:28:27Z", "author": {"login": "EdwardPrentice"}, "path": "validator/api/src/test/java/tech/pegasys/teku/validator/api/GraffitiParserTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;\n+\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.Test;\n+\n+class GraffitiParserTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgzNDk1NA=="}, "originalCommit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODg2OTQ0OnYy", "diffSide": "RIGHT", "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/FileBackedGraffitiProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMDo0NTo1NFrOIMXqlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMTo0MzoxOFrOINSyjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0MTU1OA==", "bodyText": "nit: could consider creating a default constructor\npublic FileBackedGraffitiProvider() {\nthis(Optional.empty(), Optional.empty());\n}\n\nnearly half the calls to this provider are empty, so it'd clean up some of that...\nas an aside, generally when we say 'nit' we're just nit-picking and its optional - just in case that's not something you generally see...", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r549841558", "createdAt": "2020-12-29T20:45:54Z", "author": {"login": "rolfyone"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/FileBackedGraffitiProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * A type to hold the current graffiti value. Graffiti can be loaded from 2 places:\n+ *\n+ * <ul>\n+ *   <li>The default value supplied at initialisation\n+ *   <li>The graffiti file which will be regularly checked\n+ * </ul>\n+ *\n+ * In the case that the file cannot be read, the default graffiti value will be used.\n+ */\n+public class FileBackedGraffitiProvider implements GraffitiProvider {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Optional<Bytes32> defaultGraffiti;\n+  private final Optional<Path> graffitiFile;\n+\n+  public FileBackedGraffitiProvider(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgwOTI1Mw==", "bodyText": "Ha - thanks. I haven't seen nit before. In general as long as I agree with a nit I'll strive to implement it.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r550809253", "createdAt": "2021-01-01T21:30:56Z", "author": {"login": "EdwardPrentice"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/FileBackedGraffitiProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * A type to hold the current graffiti value. Graffiti can be loaded from 2 places:\n+ *\n+ * <ul>\n+ *   <li>The default value supplied at initialisation\n+ *   <li>The graffiti file which will be regularly checked\n+ * </ul>\n+ *\n+ * In the case that the file cannot be read, the default graffiti value will be used.\n+ */\n+public class FileBackedGraffitiProvider implements GraffitiProvider {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Optional<Bytes32> defaultGraffiti;\n+  private final Optional<Path> graffitiFile;\n+\n+  public FileBackedGraffitiProvider(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0MTU1OA=="}, "originalCommit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgxMDI1Mw==", "bodyText": "For completeness, type erasure prevents the introduction of these constructors\n  public FileBackedGraffitiProvider(final Optional<Bytes32> defaultGraffiti) {\n    this(defaultGraffiti, Optional.empty());\n  }\n\n  public FileBackedGraffitiProvider(final Optional<Path> graffitiFile) {\n    this(Optional.empty(), graffitiFile);\n  }\n\nso I explored adding\n  public FileBackedGraffitiProvider(final Bytes32 defaultGraffiti) {\n    this(Optional.ofNullable(defaultGraffiti), Optional.empty());\n  }\n\n  public FileBackedGraffitiProvider(final Path graffitiFile) {\n    this(Optional.empty(), Optional.ofNullable(graffitiFile));\n  }\n\nbut as both of these constructors would only be used by test code I chose not to implement them.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r550810253", "createdAt": "2021-01-01T21:43:18Z", "author": {"login": "EdwardPrentice"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/FileBackedGraffitiProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * A type to hold the current graffiti value. Graffiti can be loaded from 2 places:\n+ *\n+ * <ul>\n+ *   <li>The default value supplied at initialisation\n+ *   <li>The graffiti file which will be regularly checked\n+ * </ul>\n+ *\n+ * In the case that the file cannot be read, the default graffiti value will be used.\n+ */\n+public class FileBackedGraffitiProvider implements GraffitiProvider {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Optional<Bytes32> defaultGraffiti;\n+  private final Optional<Path> graffitiFile;\n+\n+  public FileBackedGraffitiProvider(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0MTU1OA=="}, "originalCommit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODg3NjU0OnYy", "diffSide": "RIGHT", "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/GraffitiParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMDo0OToyMlrOIMXuUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMTo0NDowM1rOINSy1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0MjUxNQ==", "bodyText": "nit: could read the file size to variable and add context to the message, so it could be 'Graffiti file is too big (33 bytes), maximum size is 32 bytes'", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r549842515", "createdAt": "2020-12-29T20:49:22Z", "author": {"login": "rolfyone"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/GraffitiParser.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class GraffitiParser {\n+  public static Bytes32 loadFromFile(final Path graffitiFile) throws GraffitiLoaderException {\n+    try {\n+      checkNotNull(graffitiFile, \"GraffitiFile path cannot be null\");\n+      if (Files.size(graffitiFile) > 32) {\n+        throw new GraffitiLoaderException(\"GraffitiFile size too big, maximum size is 32 bytes\");\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgxMDMyNQ==", "bodyText": "This relates to when/if we strip whitespace so won't directly address here yet", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r550810325", "createdAt": "2021-01-01T21:44:03Z", "author": {"login": "EdwardPrentice"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/GraffitiParser.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class GraffitiParser {\n+  public static Bytes32 loadFromFile(final Path graffitiFile) throws GraffitiLoaderException {\n+    try {\n+      checkNotNull(graffitiFile, \"GraffitiFile path cannot be null\");\n+      if (Files.size(graffitiFile) > 32) {\n+        throw new GraffitiLoaderException(\"GraffitiFile size too big, maximum size is 32 bytes\");\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0MjUxNQ=="}, "originalCommit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1ODkxNjUxOnYy", "diffSide": "RIGHT", "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/GraffitiParser.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMToxMToyOFrOIMYEqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTozNDowN1rOIN2F7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0ODIzNA==", "bodyText": "this is all just really a question and some thoughts to ponder:\nthis puts an interesting twist on the concept of 'file is too big' really... If it's a file with a bunch of whitespace that puts it over, this would strip that whitespace and you might be left with valid graffiti? I guess what I'm thinking is the poor person that has '\\n' at the end of their file that pushes them over the graffiti limit, but equally accidentally putting whitespace before?\nI'm not sure what the answer is, just a question, because really if we're stripping we could potentially not check file size up front but rather attempt to get 32 bytes of graffiti from the file.\nso realistic use cases\n\nbytes32\\n\n bytes32 (leading space)\n\\nbytes32\\n\n\nCurrently these stripped characters would be basically 'your loss', I guess, you have a \\n at the end, so only get 31 bytes of graffiti, but this does seem like you'd potentially have a frustrating time figuring out where that byte disappears...", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r549848234", "createdAt": "2020-12-29T21:11:28Z", "author": {"login": "rolfyone"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/GraffitiParser.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class GraffitiParser {\n+  public static Bytes32 loadFromFile(final Path graffitiFile) throws GraffitiLoaderException {\n+    try {\n+      checkNotNull(graffitiFile, \"GraffitiFile path cannot be null\");\n+      if (Files.size(graffitiFile) > 32) {\n+        throw new GraffitiLoaderException(\"GraffitiFile size too big, maximum size is 32 bytes\");\n+      }\n+      try (final InputStream graffitiFileInputStream = Files.newInputStream(graffitiFile)) {\n+        return Bytes32Parser.toBytes32(strip(graffitiFileInputStream.readNBytes(32)));\n+      }\n+    } catch (final FileNotFoundException e) {\n+      throw new GraffitiLoaderException(\"GraffitiFile file not found: \" + graffitiFile, e);\n+    } catch (final IOException e) {\n+      throw new GraffitiLoaderException(\n+          \"Unexpected IO error while reading GraffitiFile: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  private static byte[] strip(final byte[] value) {\n+    return new String(value, StandardCharsets.UTF_8).strip().getBytes(StandardCharsets.UTF_8);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgxMjMyMQ==", "bodyText": "Lovely \ud83d\udc4d\nI think I'd prefer to do the kindest thing for well meaning users, so I think we should accommodate the \"32 bytes and a[n accidental] new line character\" scenario.\nOne concern Meredith raised was that we want to fail fast and if possible avoid reading a totally inappropriate file into memory at all.\nIn their current form I think these ideas are mutually exclusive - either we read the file to strip the whitespace to measure the length of the bytes that are left or we don't and we rely on the file metadata supplied by the OS which gives us the length inc any whitespace.\nA hybrid solution could be to test for a file of 40 bytes or less, and consider it unreasonable for a user to supply more than 8 bytes of leading or trailing whitespace. Once we've read the file, use the existing implementation here which will strip and convert to a Bytes32 (or fail). This allows users to make minor mistakes but also maintains our shared desire to not read files which are obviously too large or the wrong file altogether.\nHow does that sound?\nFor example, with a couple of tweaks to some tests, something like this:\n      if (Files.size(graffitiFile) > 40) {\n        throw new GraffitiLoaderException(\"GraffitiFile size too big, maximum size for graffiti is 32 bytes\");\n      }", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r550812321", "createdAt": "2021-01-01T22:07:09Z", "author": {"login": "EdwardPrentice"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/GraffitiParser.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class GraffitiParser {\n+  public static Bytes32 loadFromFile(final Path graffitiFile) throws GraffitiLoaderException {\n+    try {\n+      checkNotNull(graffitiFile, \"GraffitiFile path cannot be null\");\n+      if (Files.size(graffitiFile) > 32) {\n+        throw new GraffitiLoaderException(\"GraffitiFile size too big, maximum size is 32 bytes\");\n+      }\n+      try (final InputStream graffitiFileInputStream = Files.newInputStream(graffitiFile)) {\n+        return Bytes32Parser.toBytes32(strip(graffitiFileInputStream.readNBytes(32)));\n+      }\n+    } catch (final FileNotFoundException e) {\n+      throw new GraffitiLoaderException(\"GraffitiFile file not found: \" + graffitiFile, e);\n+    } catch (final IOException e) {\n+      throw new GraffitiLoaderException(\n+          \"Unexpected IO error while reading GraffitiFile: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  private static byte[] strip(final byte[] value) {\n+    return new String(value, StandardCharsets.UTF_8).strip().getBytes(StandardCharsets.UTF_8);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0ODIzNA=="}, "originalCommit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA0NzQ1OQ==", "bodyText": "Yep i think reading a few extra bytes and allowing the fast fail is still good, and it just means we need to check the graffiti is only 32 bytes once we're done and potentially throw the error at the end too...\nI completely agree that reading a large buffer wouldn't be great, I was thinking just being nice and allowing a few bytes either side, so this is good.\nThe other scenario (i think there's a ticket somewhere!) is to read binary from file....\nIn that scenario we wouldn't be able to do this conversion at all, so it'd become a moot point and we'd just read the 32 bytes max and move on, but i think given this ticket is looking at text, we get that in and worry about the other scenario later...", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r551047459", "createdAt": "2021-01-03T19:54:45Z", "author": {"login": "rolfyone"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/GraffitiParser.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class GraffitiParser {\n+  public static Bytes32 loadFromFile(final Path graffitiFile) throws GraffitiLoaderException {\n+    try {\n+      checkNotNull(graffitiFile, \"GraffitiFile path cannot be null\");\n+      if (Files.size(graffitiFile) > 32) {\n+        throw new GraffitiLoaderException(\"GraffitiFile size too big, maximum size is 32 bytes\");\n+      }\n+      try (final InputStream graffitiFileInputStream = Files.newInputStream(graffitiFile)) {\n+        return Bytes32Parser.toBytes32(strip(graffitiFileInputStream.readNBytes(32)));\n+      }\n+    } catch (final FileNotFoundException e) {\n+      throw new GraffitiLoaderException(\"GraffitiFile file not found: \" + graffitiFile, e);\n+    } catch (final IOException e) {\n+      throw new GraffitiLoaderException(\n+          \"Unexpected IO error while reading GraffitiFile: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  private static byte[] strip(final byte[] value) {\n+    return new String(value, StandardCharsets.UTF_8).strip().getBytes(StandardCharsets.UTF_8);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0ODIzNA=="}, "originalCommit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM3MzE0Mg==", "bodyText": "Sounds like a good plan @EdwardPrentice.  I think the main thing we want to avoid is reading in an excessive amount of data, but reading in even 64 bytes and then cleaning up / validating sounds good to me \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r551373142", "createdAt": "2021-01-04T15:08:33Z", "author": {"login": "mbaxter"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/GraffitiParser.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class GraffitiParser {\n+  public static Bytes32 loadFromFile(final Path graffitiFile) throws GraffitiLoaderException {\n+    try {\n+      checkNotNull(graffitiFile, \"GraffitiFile path cannot be null\");\n+      if (Files.size(graffitiFile) > 32) {\n+        throw new GraffitiLoaderException(\"GraffitiFile size too big, maximum size is 32 bytes\");\n+      }\n+      try (final InputStream graffitiFileInputStream = Files.newInputStream(graffitiFile)) {\n+        return Bytes32Parser.toBytes32(strip(graffitiFileInputStream.readNBytes(32)));\n+      }\n+    } catch (final FileNotFoundException e) {\n+      throw new GraffitiLoaderException(\"GraffitiFile file not found: \" + graffitiFile, e);\n+    } catch (final IOException e) {\n+      throw new GraffitiLoaderException(\n+          \"Unexpected IO error while reading GraffitiFile: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  private static byte[] strip(final byte[] value) {\n+    return new String(value, StandardCharsets.UTF_8).strip().getBytes(StandardCharsets.UTF_8);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0ODIzNA=="}, "originalCommit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM4ODY1Mw==", "bodyText": "Ok awesome. Will go for 40 and can optimise for change so it can be tweaked in the future if needed", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r551388653", "createdAt": "2021-01-04T15:34:07Z", "author": {"login": "EdwardPrentice"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/GraffitiParser.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class GraffitiParser {\n+  public static Bytes32 loadFromFile(final Path graffitiFile) throws GraffitiLoaderException {\n+    try {\n+      checkNotNull(graffitiFile, \"GraffitiFile path cannot be null\");\n+      if (Files.size(graffitiFile) > 32) {\n+        throw new GraffitiLoaderException(\"GraffitiFile size too big, maximum size is 32 bytes\");\n+      }\n+      try (final InputStream graffitiFileInputStream = Files.newInputStream(graffitiFile)) {\n+        return Bytes32Parser.toBytes32(strip(graffitiFileInputStream.readNBytes(32)));\n+      }\n+    } catch (final FileNotFoundException e) {\n+      throw new GraffitiLoaderException(\"GraffitiFile file not found: \" + graffitiFile, e);\n+    } catch (final IOException e) {\n+      throw new GraffitiLoaderException(\n+          \"Unexpected IO error while reading GraffitiFile: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  private static byte[] strip(final byte[] value) {\n+    return new String(value, StandardCharsets.UTF_8).strip().getBytes(StandardCharsets.UTF_8);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0ODIzNA=="}, "originalCommit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDAyNDQ2OnYy", "diffSide": "RIGHT", "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/duties/AttestationProductionDutyTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTowNToyOFrOIN1B_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTowNToyOFrOIN1B_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM3MTI2MQ==", "bodyText": "(nit) For tests that don't directly care about graffiti loading, we can just use Optional::empty as the graffiti provider:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    dataStructureUtil.randomPublicKey(), signer, new FileBackedGraffitiProvider());\n          \n          \n            \n                    dataStructureUtil.randomPublicKey(), signer, Optional::empty);", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r551371261", "createdAt": "2021-01-04T15:05:28Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/duties/AttestationProductionDutyTest.java", "diffHunk": "@@ -353,7 +354,8 @@ public void shouldCreateAttestationForMultipleValidatorsInDifferentCommittees()\n \n   public Validator createValidator() {\n     final Signer signer = mock(Signer.class);\n-    return new Validator(dataStructureUtil.randomPublicKey(), signer, Optional.empty());\n+    return new Validator(\n+        dataStructureUtil.randomPublicKey(), signer, new FileBackedGraffitiProvider());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70518034670ff2020cf16f9f7b407b2547459f0c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDIxNDMzOnYy", "diffSide": "RIGHT", "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTozNDozN1rOIOb5Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTozNDozN1rOIOb5Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAwNzkzOQ==", "bodyText": "There's a stray paren:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"Graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32).\",\n          \n          \n            \n                      \"Graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32.\",", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r552007939", "createdAt": "2021-01-05T15:34:37Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java", "diffHunk": "@@ -30,10 +33,18 @@\n       converter = GraffitiConverter.class,\n       paramLabel = \"<GRAFFITI STRING>\",\n       description =\n-          \"Graffiti to include during block creation (gets converted to bytes and padded to Bytes32).\",\n+          \"Graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32).\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "748742f80ab262ac35ef04c8dbf793f4de9cc758"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDIxNzg4OnYy", "diffSide": "RIGHT", "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTozNToyOFrOIOb7PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTozNToyOFrOIOb7PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAwODUwOQ==", "bodyText": "Another stray parenthesis:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"File to load graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32).  If file reading fails during block creation, teku will fall back to any value supplied via --graffiti.\",\n          \n          \n            \n                      \"File to load graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32.  If file reading fails during block creation, teku will fall back to any value supplied via --graffiti.\",", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r552008509", "createdAt": "2021-01-05T15:35:28Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java", "diffHunk": "@@ -30,10 +33,18 @@\n       converter = GraffitiConverter.class,\n       paramLabel = \"<GRAFFITI STRING>\",\n       description =\n-          \"Graffiti to include during block creation (gets converted to bytes and padded to Bytes32).\",\n+          \"Graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32).\",\n       arity = \"1\")\n   private Bytes32 graffiti;\n \n+  @Option(\n+      names = {\"--validators-graffiti-file\"},\n+      paramLabel = \"<GRAFFITI FILE>\",\n+      description =\n+          \"File to load graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32).  If file reading fails during block creation, teku will fall back to any value supplied via --graffiti.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "748742f80ab262ac35ef04c8dbf793f4de9cc758"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2968, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}