{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NDEzNjg2", "number": 2700, "title": "Requeue operations from blocks when re-org occurs", "bodyText": "PR Description\nThis PR deals with the management of operations in re-org situations.\nSpecifically, when blocks are imported, removes the operations from operation pools only if the block is on our canonical chain, and when a re-org occurs:\n\nre-adds operations from the old chain to the operation pools\nremoves operations from the new chain from operation pools\n\nFixed Issue(s)\n\n\nFixes #2001\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-08-31T16:51:44Z", "url": "https://github.com/ConsenSys/teku/pull/2700", "merged": true, "mergeCommit": {"oid": "ceb8ea2e0a31cb1d160f59bf60e5af4d460caa7f"}, "closed": true, "closedAt": "2020-09-04T23:02:13Z", "author": {"login": "cemozerr"}, "timelineItems": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEQNWsAH2gAyNDc2NDEzNjg2Ojg4OTg0MTc5NTJlM2I1MTIxM2JmYTJlMjc5NTkzODRjZWZhZTUyZmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFtDNAgH2gAyNDc2NDEzNjg2OjEzY2Q0N2ExM2ViMWFlYWYwNGExMmQyNTBkNTI4NWQ4MWM2YjgxZjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8898417952e3b51213bfa2e27959384cefae52fd", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/8898417952e3b51213bfa2e27959384cefae52fd", "committedDate": "2020-08-31T10:26:00Z", "message": "Add blockImportResult isBlockOnCanonical chain variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d294cfccf62901938db180dad721331a870e186", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/8d294cfccf62901938db180dad721331a870e186", "committedDate": "2020-08-31T10:31:53Z", "message": "Only remove operations from pools if block is on canonical chain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbf8d88f79e5a892ad7f29236a884e9a9681bb07", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/dbf8d88f79e5a892ad7f29236a884e9a9681bb07", "committedDate": "2020-08-31T16:50:25Z", "message": "Implement OperationsReOrgManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87f4df1d40e627e1fa2d7731b1fc8f69d49a5a1f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/87f4df1d40e627e1fa2d7731b1fc8f69d49a5a1f", "committedDate": "2020-09-01T10:40:20Z", "message": "Add comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a4c3aeaf1d0804ffce3ea30410b9f89ce11e7c9", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/8a4c3aeaf1d0804ffce3ea30410b9f89ce11e7c9", "committedDate": "2020-09-01T10:56:07Z", "message": "Refactor OperationsReOrgManager and run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c64740761812d65ed3e8f0203c8917dd19c4292", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/5c64740761812d65ed3e8f0203c8917dd19c4292", "committedDate": "2020-09-01T11:20:52Z", "message": "Add better future handling in case attestation processing goes awry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c0816fdc1a2a585964be22141ce086d9502a1c7", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/2c0816fdc1a2a585964be22141ce086d9502a1c7", "committedDate": "2020-09-01T11:26:24Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1ad6fe32563d2fefbc58af72610896e6d2bb9cb", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/c1ad6fe32563d2fefbc58af72610896e6d2bb9cb", "committedDate": "2020-09-01T15:41:44Z", "message": "Start the integration test for OperationsReOrgManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "855ee3ffcea1f5581321cc4e7522a1eddc64d36c", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/855ee3ffcea1f5581321cc4e7522a1eddc64d36c", "committedDate": "2020-09-01T15:44:11Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6235383e2238fad15c5f3d2185ef4899616cfb16", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/6235383e2238fad15c5f3d2185ef4899616cfb16", "committedDate": "2020-09-01T16:36:13Z", "message": "Improve test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNjE2NDc1", "url": "https://github.com/ConsenSys/teku/pull/2700#pullrequestreview-480616475", "createdAt": "2020-09-02T08:53:29Z", "commit": {"oid": "6235383e2238fad15c5f3d2185ef4899616cfb16"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwODo1MzozMFrOHLlNiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTowNDo1N1rOHLl2Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkwNjA1Ng==", "bodyText": "I don't think this is worth a warn level - if the block was finalized during the processing it isn't a big deal if we don't recover the operations from it.", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r481906056", "createdAt": "2020-09-02T08:53:30Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationsReOrgManager.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.attestation.ValidateableAttestation;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlockBody;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.statetransition.attestation.AggregatingAttestationPool;\n+import tech.pegasys.teku.statetransition.attestation.AttestationManager;\n+import tech.pegasys.teku.storage.api.ReorgEventChannel;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class OperationsReOrgManager implements ReorgEventChannel {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  final OperationPool<SignedVoluntaryExit> exitPool;\n+  final OperationPool<ProposerSlashing> proposerSlashingPool;\n+  final OperationPool<AttesterSlashing> attesterSlashingPool;\n+  final AttestationManager attestationManager;\n+  final AggregatingAttestationPool attestationPool;\n+  final RecentChainData recentChainData;\n+\n+  public OperationsReOrgManager(\n+      OperationPool<ProposerSlashing> proposerSlashingPool,\n+      OperationPool<AttesterSlashing> attesterSlashingPool,\n+      OperationPool<SignedVoluntaryExit> exitPool,\n+      AggregatingAttestationPool attestationPool,\n+      AttestationManager attestationManager,\n+      RecentChainData recentChainData) {\n+    this.exitPool = exitPool;\n+    this.proposerSlashingPool = proposerSlashingPool;\n+    this.attesterSlashingPool = attesterSlashingPool;\n+    this.attestationManager = attestationManager;\n+    this.attestationPool = attestationPool;\n+    this.recentChainData = recentChainData;\n+  }\n+\n+  @Override\n+  public void reorgOccurred(\n+      Bytes32 bestBlockRoot, UInt64 bestSlot, Bytes32 oldBestBlockRoot, UInt64 commonAncestorSlot) {\n+    NavigableMap<UInt64, Bytes32> notCanonicalBlockRoots =\n+        recentChainData.getAncestorRootsForRoot(commonAncestorSlot, oldBestBlockRoot);\n+    notCanonicalBlockRoots.forEach(\n+        (__, root) -> {\n+          SafeFuture<Optional<BeaconBlock>> maybeBlockFuture =\n+              recentChainData.retrieveBlockByRoot(root);\n+          maybeBlockFuture\n+              .thenAccept(\n+                  maybeBlock ->\n+                      maybeBlock.ifPresentOrElse(\n+                          block -> {\n+                            BeaconBlockBody blockBody = block.getBody();\n+                            proposerSlashingPool.addAll(blockBody.getProposer_slashings());\n+                            attesterSlashingPool.addAll(blockBody.getAttester_slashings());\n+                            exitPool.addAll(blockBody.getVoluntary_exits());\n+\n+                            // Attestations need to get re-processed through AttestationManager\n+                            // because we don't have access to the state with which they were\n+                            // verified anymore and we need to make sure later on\n+                            // that they're being included on the correct fork.\n+                            blockBody\n+                                .getAttestations()\n+                                .forEach(\n+                                    attestation -> {\n+                                      attestationManager\n+                                          .onAttestation(\n+                                              ValidateableAttestation.fromAttestation(attestation))\n+                                          .finish(\n+                                              result ->\n+                                                  result.ifInvalid(\n+                                                      reason ->\n+                                                          LOG.debug(\n+                                                              \"Rejected re-queued attestation from block: {} due to: {}\",\n+                                                              root,\n+                                                              reason)),\n+                                              err ->\n+                                                  LOG.error(\n+                                                      \"Failed to process re-queued attestation from block: {} due to: {}\",\n+                                                      root,\n+                                                      err));\n+                                    });\n+                          },\n+                          () ->\n+                              LOG.warn(\n+                                  \"Failed to re-queue operations for now non-canonical block: {}\",\n+                                  root)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6235383e2238fad15c5f3d2185ef4899616cfb16"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkwOTk5NQ==", "bodyText": "We shouldn't be casting to SuccesfulBlockImportResult - it's always just a BlockImportResult and for failures isBlockOnCanonicalChain would always return false (block isn't on the canonical chain if it failed to import).", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r481909995", "createdAt": "2020-09-02T08:57:39Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/blockimport/BlockImporter.java", "diffHunk": "@@ -82,7 +83,13 @@ public BlockImporter(\n \n               final Optional<BlockProcessingRecord> record = result.getBlockProcessingRecord();\n               eventBus.post(new ImportedBlockEvent(block));\n-              notifyBlockOperationSubscribers(block);\n+\n+              // Notify operation pools to remove operations only\n+              // if the block is on our canonical chain\n+              if (((SuccessfulBlockImportResult) result).isBlockOnCanonicalChain()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6235383e2238fad15c5f3d2185ef4899616cfb16"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxMzIwNg==", "bodyText": "Hard coded 10000 doesn't look right here.", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r481913206", "createdAt": "2020-09-02T09:01:11Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/client/RecentChainData.java", "diffHunk": "@@ -186,6 +187,12 @@ public UpdatableStore getStore() {\n         .orElseGet(TreeMap::new);\n   }\n \n+  public NavigableMap<UInt64, Bytes32> getAncestorRootsForRoot(\n+      final UInt64 startSlot, Bytes32 root) {\n+    return ForkChoiceUtil.getAncestors(\n+        forkChoiceStrategy.orElseThrow(), root, startSlot, UInt64.ONE, UInt64.valueOf(10000));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6235383e2238fad15c5f3d2185ef4899616cfb16"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxNDAwMQ==", "bodyText": "Also I'm suspicious that we might be including the common ancestor block itself when processing a reorg.  We should process both chains only from the block after the common ancestor (ie only process the blocks that actually changed).", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r481914001", "createdAt": "2020-09-02T09:02:04Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/client/RecentChainData.java", "diffHunk": "@@ -186,6 +187,12 @@ public UpdatableStore getStore() {\n         .orElseGet(TreeMap::new);\n   }\n \n+  public NavigableMap<UInt64, Bytes32> getAncestorRootsForRoot(\n+      final UInt64 startSlot, Bytes32 root) {\n+    return ForkChoiceUtil.getAncestors(\n+        forkChoiceStrategy.orElseThrow(), root, startSlot, UInt64.ONE, UInt64.valueOf(10000));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxMzIwNg=="}, "originalCommit": {"oid": "6235383e2238fad15c5f3d2185ef4899616cfb16"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxNjQyMw==", "bodyText": "This looks awfully complex and I think it still has to setup quite a lot of operations yet.  I suspect getting it all set up with valid data will be a lot of code and pretty slow.  I think I'd just do a unit test focused on OperationsReOrgManager - with a mock RecentChainData it should be fairly easy to inject the blocks we want and all we really need to see is that the operations from those blocks and added or removed from all the right places.  We know they do their job fine from there.", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r481916423", "createdAt": "2020-09-02T09:04:57Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/test/java/tech/pegasys/teku/statetransition/OperationsReOrgManagerTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.core.ChainBuilder;\n+import tech.pegasys.teku.core.StateTransition;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlockBody;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.statetransition.attestation.AggregatingAttestationPool;\n+import tech.pegasys.teku.statetransition.attestation.AttestationManager;\n+import tech.pegasys.teku.statetransition.forkchoice.ForkChoice;\n+import tech.pegasys.teku.statetransition.forkchoice.SingleThreadedForkChoiceExecutor;\n+import tech.pegasys.teku.storage.api.TrackingReorgEventChannel;\n+import tech.pegasys.teku.storage.client.ChainUpdater;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+import tech.pegasys.teku.storage.storageSystem.InMemoryStorageSystemBuilder;\n+import tech.pegasys.teku.storage.storageSystem.StorageSystem;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+public class OperationsReOrgManagerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6235383e2238fad15c5f3d2185ef4899616cfb16"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d924bf755d26b4e036b82d7cdb05bd5e7e44ed4e", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/d924bf755d26b4e036b82d7cdb05bd5e7e44ed4e", "committedDate": "2020-09-02T09:27:15Z", "message": "Change debug level and add method to BlockImportResult"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "464ca51c670827997cea583fc87a208b2769d22f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/464ca51c670827997cea583fc87a208b2769d22f", "committedDate": "2020-09-02T09:51:19Z", "message": "Added a method to return block roots for any chain defined by root and start slot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01c4b610658faa8c9a9a407d61646af242ae1e64", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/01c4b610658faa8c9a9a407d61646af242ae1e64", "committedDate": "2020-09-02T11:47:05Z", "message": "Switched to unit test for OperationsReOrgManager and added tests for RecentChainData"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25ce7a1ed7c77c4c5351d5d4380c4434aa54f3ce", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/25ce7a1ed7c77c4c5351d5d4380c4434aa54f3ce", "committedDate": "2020-09-02T11:51:45Z", "message": "Integrate OperationsReOrgManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f51549f088299900680406927ae8a92f79113b4e", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/f51549f088299900680406927ae8a92f79113b4e", "committedDate": "2020-09-02T11:52:18Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc57b11f1182f0b5f549ab960c8421a05fe0ead2", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/fc57b11f1182f0b5f549ab960c8421a05fe0ead2", "committedDate": "2020-09-02T12:15:28Z", "message": "Fix compile errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzgyMDMy", "url": "https://github.com/ConsenSys/teku/pull/2700#pullrequestreview-481382032", "createdAt": "2020-09-02T23:33:06Z", "commit": {"oid": "fc57b11f1182f0b5f549ab960c8421a05fe0ead2"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzozMzowNlrOHMPh_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzo1NDowMlrOHMP6mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5OTQyMQ==", "bodyText": "If we're going to add a java doc comment we should fill it all out. :)\nI also feel like this should be some variant of getAncestors so that it has a similar name to the existing getAncestors method.  Maybe getAncestorsOnFork?", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r482599421", "createdAt": "2020-09-02T23:33:06Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java", "diffHunk": "@@ -119,6 +119,26 @@ public static UInt64 compute_slots_since_epoch_start(UInt64 slot) {\n     return roots;\n   }\n \n+  /**\n+   * @param forkChoiceStrategy\n+   * @param root\n+   * @param startSlot\n+   * @return every block root from root (inclusive) to start slot (exclusive) traversing the chain\n+   *     backwards\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc57b11f1182f0b5f549ab960c8421a05fe0ead2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwMTk3Ng==", "bodyText": "The nesting levels here seem to have gotten a bit out of control.  Probably need to extract a method or two to reduce them.", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r482601976", "createdAt": "2020-09-02T23:41:34Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationsReOrgManager.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlockBody;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.statetransition.attestation.AggregatingAttestationPool;\n+import tech.pegasys.teku.statetransition.attestation.AttestationManager;\n+import tech.pegasys.teku.storage.api.ReorgEventChannel;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class OperationsReOrgManager implements ReorgEventChannel {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  final OperationPool<SignedVoluntaryExit> exitPool;\n+  final OperationPool<ProposerSlashing> proposerSlashingPool;\n+  final OperationPool<AttesterSlashing> attesterSlashingPool;\n+  final AttestationManager attestationManager;\n+  final AggregatingAttestationPool attestationPool;\n+  final RecentChainData recentChainData;\n+\n+  public OperationsReOrgManager(\n+      OperationPool<ProposerSlashing> proposerSlashingPool,\n+      OperationPool<AttesterSlashing> attesterSlashingPool,\n+      OperationPool<SignedVoluntaryExit> exitPool,\n+      AggregatingAttestationPool attestationPool,\n+      AttestationManager attestationManager,\n+      RecentChainData recentChainData) {\n+    this.exitPool = exitPool;\n+    this.proposerSlashingPool = proposerSlashingPool;\n+    this.attesterSlashingPool = attesterSlashingPool;\n+    this.attestationManager = attestationManager;\n+    this.attestationPool = attestationPool;\n+    this.recentChainData = recentChainData;\n+  }\n+\n+  @Override\n+  public void reorgOccurred(\n+      Bytes32 bestBlockRoot, UInt64 bestSlot, Bytes32 oldBestBlockRoot, UInt64 commonAncestorSlot) {\n+    NavigableMap<UInt64, Bytes32> notCanonicalBlockRoots =\n+        recentChainData.getEveryRootOnChainTillSlot(commonAncestorSlot, oldBestBlockRoot);\n+    notCanonicalBlockRoots.forEach(\n+        (__, root) -> {\n+          SafeFuture<Optional<BeaconBlock>> maybeBlockFuture =\n+              recentChainData.retrieveBlockByRoot(root);\n+          maybeBlockFuture\n+              .thenAccept(\n+                  maybeBlock ->\n+                      maybeBlock.ifPresentOrElse(\n+                          block -> {\n+                            BeaconBlockBody blockBody = block.getBody();\n+                            proposerSlashingPool.addAll(blockBody.getProposer_slashings());\n+                            attesterSlashingPool.addAll(blockBody.getAttester_slashings());\n+                            exitPool.addAll(blockBody.getVoluntary_exits());\n+\n+                            // Attestations need to get re-processed through AttestationManager\n+                            // because we don't have access to the state with which they were\n+                            // verified anymore and we need to make sure later on\n+                            // that they're being included on the correct fork.\n+                            blockBody\n+                                .getAttestations()\n+                                .forEach(\n+                                    attestation -> {\n+                                      attestationManager\n+                                          .onAttestation(attestation)\n+                                          .finish(\n+                                              result ->\n+                                                  result.ifInvalid(\n+                                                      reason ->\n+                                                          LOG.debug(\n+                                                              \"Rejected re-queued attestation from block: {} due to: {}\",\n+                                                              root,\n+                                                              reason)),\n+                                              err ->\n+                                                  LOG.error(\n+                                                      \"Failed to process re-queued attestation from block: {} due to: {}\",\n+                                                      root,\n+                                                      err));\n+                                    });\n+                          },\n+                          () ->\n+                              LOG.debug(\n+                                  \"Failed to re-queue operations for now non-canonical block: {}\",\n+                                  root)))\n+              .finish(\n+                  err ->\n+                      LOG.warn(\n+                          \"Failed to re-queue operations for now non-canonical block: {} due to future error: {}\",\n+                          root,\n+                          err.getMessage()));\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc57b11f1182f0b5f549ab960c8421a05fe0ead2"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwMjE4Nw==", "bodyText": "We should preserve the stack trace instead of only logging the error message.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                  LOG.warn(\n          \n          \n            \n                                      \"Failed to re-queue operations for now non-canonical block: {} due to future error: {}\",\n          \n          \n            \n                                      root,\n          \n          \n            \n                                      err.getMessage()));\n          \n          \n            \n                                  LOG.warn(\n          \n          \n            \n                                      \"Failed to re-queue operations for now non-canonical block: {}\",\n          \n          \n            \n                                      root,\n          \n          \n            \n                                      err));", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r482602187", "createdAt": "2020-09-02T23:42:17Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationsReOrgManager.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlockBody;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.statetransition.attestation.AggregatingAttestationPool;\n+import tech.pegasys.teku.statetransition.attestation.AttestationManager;\n+import tech.pegasys.teku.storage.api.ReorgEventChannel;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class OperationsReOrgManager implements ReorgEventChannel {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  final OperationPool<SignedVoluntaryExit> exitPool;\n+  final OperationPool<ProposerSlashing> proposerSlashingPool;\n+  final OperationPool<AttesterSlashing> attesterSlashingPool;\n+  final AttestationManager attestationManager;\n+  final AggregatingAttestationPool attestationPool;\n+  final RecentChainData recentChainData;\n+\n+  public OperationsReOrgManager(\n+      OperationPool<ProposerSlashing> proposerSlashingPool,\n+      OperationPool<AttesterSlashing> attesterSlashingPool,\n+      OperationPool<SignedVoluntaryExit> exitPool,\n+      AggregatingAttestationPool attestationPool,\n+      AttestationManager attestationManager,\n+      RecentChainData recentChainData) {\n+    this.exitPool = exitPool;\n+    this.proposerSlashingPool = proposerSlashingPool;\n+    this.attesterSlashingPool = attesterSlashingPool;\n+    this.attestationManager = attestationManager;\n+    this.attestationPool = attestationPool;\n+    this.recentChainData = recentChainData;\n+  }\n+\n+  @Override\n+  public void reorgOccurred(\n+      Bytes32 bestBlockRoot, UInt64 bestSlot, Bytes32 oldBestBlockRoot, UInt64 commonAncestorSlot) {\n+    NavigableMap<UInt64, Bytes32> notCanonicalBlockRoots =\n+        recentChainData.getEveryRootOnChainTillSlot(commonAncestorSlot, oldBestBlockRoot);\n+    notCanonicalBlockRoots.forEach(\n+        (__, root) -> {\n+          SafeFuture<Optional<BeaconBlock>> maybeBlockFuture =\n+              recentChainData.retrieveBlockByRoot(root);\n+          maybeBlockFuture\n+              .thenAccept(\n+                  maybeBlock ->\n+                      maybeBlock.ifPresentOrElse(\n+                          block -> {\n+                            BeaconBlockBody blockBody = block.getBody();\n+                            proposerSlashingPool.addAll(blockBody.getProposer_slashings());\n+                            attesterSlashingPool.addAll(blockBody.getAttester_slashings());\n+                            exitPool.addAll(blockBody.getVoluntary_exits());\n+\n+                            // Attestations need to get re-processed through AttestationManager\n+                            // because we don't have access to the state with which they were\n+                            // verified anymore and we need to make sure later on\n+                            // that they're being included on the correct fork.\n+                            blockBody\n+                                .getAttestations()\n+                                .forEach(\n+                                    attestation -> {\n+                                      attestationManager\n+                                          .onAttestation(attestation)\n+                                          .finish(\n+                                              result ->\n+                                                  result.ifInvalid(\n+                                                      reason ->\n+                                                          LOG.debug(\n+                                                              \"Rejected re-queued attestation from block: {} due to: {}\",\n+                                                              root,\n+                                                              reason)),\n+                                              err ->\n+                                                  LOG.error(\n+                                                      \"Failed to process re-queued attestation from block: {} due to: {}\",\n+                                                      root,\n+                                                      err));\n+                                    });\n+                          },\n+                          () ->\n+                              LOG.debug(\n+                                  \"Failed to re-queue operations for now non-canonical block: {}\",\n+                                  root)))\n+              .finish(\n+                  err ->\n+                      LOG.warn(\n+                          \"Failed to re-queue operations for now non-canonical block: {} due to future error: {}\",\n+                          root,\n+                          err.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc57b11f1182f0b5f549ab960c8421a05fe0ead2"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwMjQwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                              LOG.error(\n          \n          \n            \n                                                                  \"Failed to process re-queued attestation from block: {} due to: {}\",\n          \n          \n            \n                                                                  root,\n          \n          \n            \n                                                                  err));\n          \n          \n            \n                                                              LOG.error(\n          \n          \n            \n                                                                  \"Failed to process re-queued attestation from block: {}\",\n          \n          \n            \n                                                                  root,\n          \n          \n            \n                                                                  err));\n          \n      \n    \n    \n  \n\nAvoid losing the error message.", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r482602400", "createdAt": "2020-09-02T23:42:56Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationsReOrgManager.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlockBody;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.statetransition.attestation.AggregatingAttestationPool;\n+import tech.pegasys.teku.statetransition.attestation.AttestationManager;\n+import tech.pegasys.teku.storage.api.ReorgEventChannel;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class OperationsReOrgManager implements ReorgEventChannel {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  final OperationPool<SignedVoluntaryExit> exitPool;\n+  final OperationPool<ProposerSlashing> proposerSlashingPool;\n+  final OperationPool<AttesterSlashing> attesterSlashingPool;\n+  final AttestationManager attestationManager;\n+  final AggregatingAttestationPool attestationPool;\n+  final RecentChainData recentChainData;\n+\n+  public OperationsReOrgManager(\n+      OperationPool<ProposerSlashing> proposerSlashingPool,\n+      OperationPool<AttesterSlashing> attesterSlashingPool,\n+      OperationPool<SignedVoluntaryExit> exitPool,\n+      AggregatingAttestationPool attestationPool,\n+      AttestationManager attestationManager,\n+      RecentChainData recentChainData) {\n+    this.exitPool = exitPool;\n+    this.proposerSlashingPool = proposerSlashingPool;\n+    this.attesterSlashingPool = attesterSlashingPool;\n+    this.attestationManager = attestationManager;\n+    this.attestationPool = attestationPool;\n+    this.recentChainData = recentChainData;\n+  }\n+\n+  @Override\n+  public void reorgOccurred(\n+      Bytes32 bestBlockRoot, UInt64 bestSlot, Bytes32 oldBestBlockRoot, UInt64 commonAncestorSlot) {\n+    NavigableMap<UInt64, Bytes32> notCanonicalBlockRoots =\n+        recentChainData.getEveryRootOnChainTillSlot(commonAncestorSlot, oldBestBlockRoot);\n+    notCanonicalBlockRoots.forEach(\n+        (__, root) -> {\n+          SafeFuture<Optional<BeaconBlock>> maybeBlockFuture =\n+              recentChainData.retrieveBlockByRoot(root);\n+          maybeBlockFuture\n+              .thenAccept(\n+                  maybeBlock ->\n+                      maybeBlock.ifPresentOrElse(\n+                          block -> {\n+                            BeaconBlockBody blockBody = block.getBody();\n+                            proposerSlashingPool.addAll(blockBody.getProposer_slashings());\n+                            attesterSlashingPool.addAll(blockBody.getAttester_slashings());\n+                            exitPool.addAll(blockBody.getVoluntary_exits());\n+\n+                            // Attestations need to get re-processed through AttestationManager\n+                            // because we don't have access to the state with which they were\n+                            // verified anymore and we need to make sure later on\n+                            // that they're being included on the correct fork.\n+                            blockBody\n+                                .getAttestations()\n+                                .forEach(\n+                                    attestation -> {\n+                                      attestationManager\n+                                          .onAttestation(attestation)\n+                                          .finish(\n+                                              result ->\n+                                                  result.ifInvalid(\n+                                                      reason ->\n+                                                          LOG.debug(\n+                                                              \"Rejected re-queued attestation from block: {} due to: {}\",\n+                                                              root,\n+                                                              reason)),\n+                                              err ->\n+                                                  LOG.error(\n+                                                      \"Failed to process re-queued attestation from block: {} due to: {}\",\n+                                                      root,\n+                                                      err));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc57b11f1182f0b5f549ab960c8421a05fe0ead2"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwMzA3OQ==", "bodyText": "This method is too big overall. Probably worth splitting in two - process nonCanonical and then process canonical blocks.  And then probably a few other helper methods to make the optional/future chainings not wind up so deeply nested and hard to follow.", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r482603079", "createdAt": "2020-09-02T23:45:08Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationsReOrgManager.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlockBody;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.statetransition.attestation.AggregatingAttestationPool;\n+import tech.pegasys.teku.statetransition.attestation.AttestationManager;\n+import tech.pegasys.teku.storage.api.ReorgEventChannel;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class OperationsReOrgManager implements ReorgEventChannel {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  final OperationPool<SignedVoluntaryExit> exitPool;\n+  final OperationPool<ProposerSlashing> proposerSlashingPool;\n+  final OperationPool<AttesterSlashing> attesterSlashingPool;\n+  final AttestationManager attestationManager;\n+  final AggregatingAttestationPool attestationPool;\n+  final RecentChainData recentChainData;\n+\n+  public OperationsReOrgManager(\n+      OperationPool<ProposerSlashing> proposerSlashingPool,\n+      OperationPool<AttesterSlashing> attesterSlashingPool,\n+      OperationPool<SignedVoluntaryExit> exitPool,\n+      AggregatingAttestationPool attestationPool,\n+      AttestationManager attestationManager,\n+      RecentChainData recentChainData) {\n+    this.exitPool = exitPool;\n+    this.proposerSlashingPool = proposerSlashingPool;\n+    this.attesterSlashingPool = attesterSlashingPool;\n+    this.attestationManager = attestationManager;\n+    this.attestationPool = attestationPool;\n+    this.recentChainData = recentChainData;\n+  }\n+\n+  @Override\n+  public void reorgOccurred(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc57b11f1182f0b5f549ab960c8421a05fe0ead2"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwMzU0OQ==", "bodyText": "I probably wouldn't add this method.  We want to create the ValidatableAttestation only at the key entry points but this makes it much simpler to get that wrong and create a new ValidatableAttestation without thinking about it and then we'll lose the context it tracks.", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r482603549", "createdAt": "2020-09-02T23:46:41Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java", "diffHunk": "@@ -112,7 +113,10 @@ private void onBlockImported(final ImportedBlockEvent blockImportedEvent) {\n                               \"Failed to process pending attestation dependent on \" + blockRoot,\n                               err));\n             });\n-    block.getMessage().getBody().getAttestations().forEach(aggregatingAttestationPool::remove);\n+  }\n+\n+  public SafeFuture<AttestationProcessingResult> onAttestation(Attestation attestation) {\n+    return onAttestation(ValidateableAttestation.fromAttestation(attestation));\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc57b11f1182f0b5f549ab960c8421a05fe0ead2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwMzcxMA==", "bodyText": "Should avoid the cast to SuccessfulBlockImportResult.  Might need to make setBlockOnCanonicalChain a markAsCanonical method which throws UnsupportedOperationException for failed results.", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r482603710", "createdAt": "2020-09-02T23:47:10Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java", "diffHunk": "@@ -146,15 +147,18 @@ private void processHead(Optional<UInt64> nodeSlot) {\n                       forkChoiceStrategy.onAttestation(transaction, indexedAttestation));\n           return transaction\n               .commit()\n-              .thenRun(() -> updateForkChoiceForImportedBlock(block, forkChoiceStrategy, result))\n+              .thenRun(\n+                  () ->\n+                      updateForkChoiceForImportedBlock(\n+                          block, forkChoiceStrategy, (SuccessfulBlockImportResult) result))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc57b11f1182f0b5f549ab960c8421a05fe0ead2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNDMxNQ==", "bodyText": "Probably worth having a test for when blocks are removed but not added or vice-versa (ie a reorg that only changes from an empty slot to a full one and the other way).  Should work fine but that's the most common type of reorg so important to handle it right.", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r482604315", "createdAt": "2020-09-02T23:49:19Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/test/java/tech/pegasys/teku/statetransition/OperationsReOrgManagerTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.TreeMap;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.util.AttestationProcessingResult;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.statetransition.attestation.AggregatingAttestationPool;\n+import tech.pegasys.teku.statetransition.attestation.AttestationManager;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class OperationsReOrgManagerTest {\n+\n+  private DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+\n+  private OperationPool<ProposerSlashing> proposerSlashingOperationPool = mock(OperationPool.class);\n+  private OperationPool<AttesterSlashing> attesterSlashingOperationPool = mock(OperationPool.class);\n+  private OperationPool<SignedVoluntaryExit> exitOperationPool = mock(OperationPool.class);\n+  private AggregatingAttestationPool attestationPool = mock(AggregatingAttestationPool.class);\n+  private AttestationManager attestationManager = mock(AttestationManager.class);\n+\n+  private RecentChainData recentChainData = mock(RecentChainData.class);\n+\n+  private OperationsReOrgManager operationsReOrgManager =\n+      new OperationsReOrgManager(\n+          proposerSlashingOperationPool,\n+          attesterSlashingOperationPool,\n+          exitOperationPool,\n+          attestationPool,\n+          attestationManager,\n+          recentChainData);\n+\n+  @Test\n+  void shouldRequeueAndRemoveOperations() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc57b11f1182f0b5f549ab960c8421a05fe0ead2"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNTA1OQ==", "bodyText": "Should rename this to match the recentChainData method it delegates to.", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r482605059", "createdAt": "2020-09-02T23:51:43Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/client/CombinedChainDataClient.java", "diffHunk": "@@ -357,7 +357,7 @@ public UpdatableStore getStore() {\n \n   public NavigableMap<UInt64, Bytes32> getAncestorRoots(\n       final UInt64 startSlot, final UInt64 step, final UInt64 count) {\n-    return recentChainData.getAncestorRoots(startSlot, step, count);\n+    return recentChainData.getAncestorRootsForChainHead(startSlot, step, count);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc57b11f1182f0b5f549ab960c8421a05fe0ead2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwNTcyMw==", "bodyText": "Probably should have a test case for when the block root is unknown.", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r482605723", "createdAt": "2020-09-02T23:54:02Z", "author": {"login": "ajsutton"}, "path": "storage/src/test/java/tech/pegasys/teku/storage/client/RecentChainDataTest.java", "diffHunk": "@@ -564,6 +578,47 @@ public void commit_pruneParallelExistingBlocks() throws Exception {\n     testCommitPruningOfParallelBlocks(false);\n   }\n \n+  @Test\n+  public void getEveryRootOnChainTillSlot() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc57b11f1182f0b5f549ab960c8421a05fe0ead2"}, "originalPosition": 419}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a43f2ae099abc2d3ce1f9acfb536bad22f1a5a8", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/0a43f2ae099abc2d3ce1f9acfb536bad22f1a5a8", "committedDate": "2020-09-03T11:20:48Z", "message": "Add proper javadoc and change method name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a80539886c87eeb02c8045db1faccc42803781ea", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/a80539886c87eeb02c8045db1faccc42803781ea", "committedDate": "2020-09-03T11:34:08Z", "message": "Break up long method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e094319d0669237212704f30f1b195988c0d981", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/0e094319d0669237212704f30f1b195988c0d981", "committedDate": "2020-09-03T12:44:29Z", "message": "Resolve comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3752bb8a69ddb03930804fb6d5a075733aeda4a2", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/3752bb8a69ddb03930804fb6d5a075733aeda4a2", "committedDate": "2020-09-03T12:49:37Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb7edec9edf66187356229e164b0ffed27648099", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/bb7edec9edf66187356229e164b0ffed27648099", "committedDate": "2020-09-03T12:56:30Z", "message": "Add test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdb1f7c97025eb05840ff9c8fc67ec131731cef6", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/bdb1f7c97025eb05840ff9c8fc67ec131731cef6", "committedDate": "2020-09-03T12:56:44Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c98e489f30d073ff9db8cdac319146ac41abe2f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/2c98e489f30d073ff9db8cdac319146ac41abe2f", "committedDate": "2020-09-03T13:24:28Z", "message": "Remove redundant changes and fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49ab6a9b4ea7dc7961c35c079e55ab87d4d4eb9b", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/49ab6a9b4ea7dc7961c35c079e55ab87d4d4eb9b", "committedDate": "2020-09-03T13:28:36Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into requeueOperationsFromBlocksWhenReOrgOccurs\n\n# Conflicts:\n#\tservices/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainController.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72e121a0c3a00554d19c33bb3d31b0533fc9eb75", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/72e121a0c3a00554d19c33bb3d31b0533fc9eb75", "committedDate": "2020-09-03T13:53:23Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "628f85860f7bf77e54d59d44b832194283dd20e2", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/628f85860f7bf77e54d59d44b832194283dd20e2", "committedDate": "2020-09-04T09:18:21Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50594a5676cd342b387be2995fd4fcc03b75dd6e", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/50594a5676cd342b387be2995fd4fcc03b75dd6e", "committedDate": "2020-09-04T09:19:04Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9108f86f4933acbc0db89651c01db05452a8394c", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/9108f86f4933acbc0db89651c01db05452a8394c", "committedDate": "2020-09-04T10:01:21Z", "message": "Add json deserialization annotations for IndexedAttestation and AttesterSlashing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc223eea2a266978e7af0694413bf1c7d1654ab4", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/cc223eea2a266978e7af0694413bf1c7d1654ab4", "committedDate": "2020-09-04T10:02:04Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d81ba2af7818d78282ddcb97ec16381f9ee7afc", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/8d81ba2af7818d78282ddcb97ec16381f9ee7afc", "committedDate": "2020-09-04T10:13:22Z", "message": "Update outdated test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a97880bb54db19a4f59235c827d7386b3a43190d", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/a97880bb54db19a4f59235c827d7386b3a43190d", "committedDate": "2020-09-04T11:08:11Z", "message": "Run spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyNjAxODQ3", "url": "https://github.com/ConsenSys/teku/pull/2700#pullrequestreview-482601847", "createdAt": "2020-09-04T12:15:34Z", "commit": {"oid": "a97880bb54db19a4f59235c827d7386b3a43190d"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoxNTozNFrOHNLRFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoyMzoxOFrOHNLfMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3ODEzMg==", "bodyText": "I'm not sure why this change was required as part of this PR.", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r483578132", "createdAt": "2020-09-04T12:15:34Z", "author": {"login": "ajsutton"}, "path": "data/serializer/src/main/java/tech/pegasys/teku/api/schema/AttesterSlashing.java", "diffHunk": "@@ -23,6 +26,14 @@ public AttesterSlashing(\n     this.attestation_2 = new IndexedAttestation(attesterSlashing.getAttestation_2());\n   }\n \n+  @JsonCreator\n+  public AttesterSlashing(\n+      @JsonProperty(\"attestation_1\") final IndexedAttestation attestation_1,\n+      @JsonProperty(\"attestation_2\") final IndexedAttestation attestation_2) {\n+    this.attestation_1 = attestation_1;\n+    this.attestation_2 = attestation_2;\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a97880bb54db19a4f59235c827d7386b3a43190d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3ODMyMg==", "bodyText": "Not sure what caused this to be needed either.", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r483578322", "createdAt": "2020-09-04T12:15:57Z", "author": {"login": "ajsutton"}, "path": "data/serializer/src/main/java/tech/pegasys/teku/api/schema/IndexedAttestation.java", "diffHunk": "@@ -40,6 +42,16 @@ public IndexedAttestation(\n     this.signature = new BLSSignature(indexedAttestation.getSignature());\n   }\n \n+  @JsonCreator\n+  public IndexedAttestation(\n+      @JsonProperty(\"attesting_indices\") final List<UInt64> attesting_indices,\n+      @JsonProperty(\"data\") final AttestationData data,\n+      @JsonProperty(\"signature\") final BLSSignature signature) {\n+    this.attesting_indices = attesting_indices;\n+    this.data = data;\n+    this.signature = signature;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a97880bb54db19a4f59235c827d7386b3a43190d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3ODU4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                while (parentSlot.isPresent() && parentSlot.get().compareTo(startSlot) > 0) {\n          \n          \n            \n                while (parentSlot.isPresent() && parentSlot.get().isGreaterThan(startSlot)) {", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r483578589", "createdAt": "2020-09-04T12:16:35Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java", "diffHunk": "@@ -119,6 +119,26 @@ public static UInt64 compute_slots_since_epoch_start(UInt64 slot) {\n     return roots;\n   }\n \n+  /**\n+   * @param forkChoiceStrategy the object that stores information on forks and block roots\n+   * @param root the root that dictates the block/fork that we walk backwards from\n+   * @param startSlot the slot (exclusive) until which we walk the chain backwards\n+   * @return every block root from root (inclusive) to start slot (exclusive) traversing the chain\n+   *     backwards\n+   */\n+  public static NavigableMap<UInt64, Bytes32> getAncestorsOnFork(\n+      ForkChoiceStrategy forkChoiceStrategy, Bytes32 root, UInt64 startSlot) {\n+    final NavigableMap<UInt64, Bytes32> roots = new TreeMap<>();\n+    Bytes32 parentRoot = root;\n+    Optional<UInt64> parentSlot = forkChoiceStrategy.blockSlot(parentRoot);\n+    while (parentSlot.isPresent() && parentSlot.get().compareTo(startSlot) > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a97880bb54db19a4f59235c827d7386b3a43190d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3ODk5OQ==", "bodyText": "We definitely shouldn't have JSON serialisation annotations in our core classes.", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r483578999", "createdAt": "2020-09-04T12:17:25Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/operations/AttesterSlashing.java", "diffHunk": "@@ -41,6 +42,7 @@\n   private final IndexedAttestation attestation_2;\n \n   @Label(\"sos-ignore\")\n+  @JsonIgnore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a97880bb54db19a4f59235c827d7386b3a43190d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4MTA0Ng==", "bodyText": "Why is this a new method just to reorder the params?", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r483581046", "createdAt": "2020-09-04T12:21:51Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/testFixtures/java/tech/pegasys/teku/datastructures/util/DataStructureUtil.java", "diffHunk": "@@ -126,6 +126,11 @@ public BLSSignature randomSignature() {\n     return randomSSZList(classInfo, maxSize / 10, maxSize, valueGenerator);\n   }\n \n+  public <T> SSZList<T> randomSSZList(\n+      Class<? extends T> classInfo, long maxSize, Supplier<T> valueGenerator, long numItems) {\n+    return randomSSZList(classInfo, numItems, maxSize, valueGenerator);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a97880bb54db19a4f59235c827d7386b3a43190d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4MTc0Ng==", "bodyText": "I'd probably have at least 3 attestations in the blocks by default.  Good to have a slashing added in there that I'm guessing wound up with none before though.", "url": "https://github.com/ConsenSys/teku/pull/2700#discussion_r483581746", "createdAt": "2020-09-04T12:23:18Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/testFixtures/java/tech/pegasys/teku/datastructures/util/DataStructureUtil.java", "diffHunk": "@@ -381,8 +386,11 @@ public BeaconBlockBody randomBeaconBlockBody() {\n         randomSSZList(\n             ProposerSlashing.class, Constants.MAX_PROPOSER_SLASHINGS, this::randomProposerSlashing),\n         randomSSZList(\n-            AttesterSlashing.class, Constants.MAX_ATTESTER_SLASHINGS, this::randomAttesterSlashing),\n-        randomSSZList(Attestation.class, Constants.MAX_ATTESTATIONS, this::randomAttestation),\n+            AttesterSlashing.class,\n+            Constants.MAX_ATTESTER_SLASHINGS,\n+            this::randomAttesterSlashing,\n+            1),\n+        randomSSZList(Attestation.class, Constants.MAX_ATTESTATIONS, this::randomAttestation, 1),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a97880bb54db19a4f59235c827d7386b3a43190d"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f3ac3903cc4f1ef130e86694ee356e9064dce31", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/5f3ac3903cc4f1ef130e86694ee356e9064dce31", "committedDate": "2020-09-04T12:46:05Z", "message": "Switch to isGreaterThan"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "071c3b45f53b8fc09d53d70b597f36dfee236bcd", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/071c3b45f53b8fc09d53d70b597f36dfee236bcd", "committedDate": "2020-09-04T12:47:48Z", "message": "Remove json annotation in core class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8df57a72c498c71e0e2a253f07e684eae4c9f0b7", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/8df57a72c498c71e0e2a253f07e684eae4c9f0b7", "committedDate": "2020-09-04T12:52:54Z", "message": "Set random beacon block body default numbers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a42f50d88509843cdff4aa4e99c60946b138613", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/1a42f50d88509843cdff4aa4e99c60946b138613", "committedDate": "2020-09-04T12:59:06Z", "message": "Run spotlessApply"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c57c224e127c427c6ce7d026557df6e145643306", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/c57c224e127c427c6ce7d026557df6e145643306", "committedDate": "2020-09-04T13:01:08Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15ab918474016aeba13bc0c781dbfa57f0f86dac", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/15ab918474016aeba13bc0c781dbfa57f0f86dac", "committedDate": "2020-09-04T13:16:02Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a26759b0b2afd89bcb645b0b15cc697f2226b245", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/a26759b0b2afd89bcb645b0b15cc697f2226b245", "committedDate": "2020-09-04T22:35:38Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13cd47a13eb1aeaf04a12d250d5285d81c6b81f0", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/13cd47a13eb1aeaf04a12d250d5285d81c6b81f0", "committedDate": "2020-09-04T22:36:05Z", "message": "Merge branch 'master' into requeueOperationsFromBlocksWhenReOrgOccurs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3558, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}