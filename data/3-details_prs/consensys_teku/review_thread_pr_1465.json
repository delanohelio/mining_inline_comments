{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMTQyODE3", "number": 1465, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDowOTo1N1rODr0KSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTowMTo1MlrODstxUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjY5OTYzOnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateTransition.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDowOTo1N1rOF8Ye-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDo0NTo0MlrOF-ZaAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg2MDAyNw==", "bodyText": "Wouldn't it be more efficient to accumulate all of the changes on a single MutableBeaconState and commit the changes once?  Wondering if these methods that mutate state should all just accept a MutableBeaconState?", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r398860027", "createdAt": "2020-03-26T20:09:57Z", "author": {"login": "mbaxter"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateTransition.java", "diffHunk": "@@ -136,98 +135,105 @@ public BeaconState initiate(BeaconState state, SignedBeaconBlock block)\n    * https://github.com/ethereum/eth2.0-specs/blob/v0.7.1/specs/core/0_beacon-chain.md#beacon-chain-state-transition-function\n    * Processes block\n    *\n-   * @param state\n-   * @param block\n    * @throws BlockProcessingException\n    */\n-  private void process_block(\n-      MutableBeaconState state, BeaconBlock block, boolean validateStateRootAndSignatures)\n+  private BeaconState process_block(\n+      BeaconState preState, BeaconBlock block, boolean validateStateRootAndSignatures)\n       throws BlockProcessingException {\n-    process_block_header(state, block);\n-    process_randao(state, block.getBody(), validateStateRootAndSignatures);\n-    process_eth1_data(state, block.getBody());\n-    process_operations(state, block.getBody());\n+    return preState.updated(\n+        state -> {\n+          process_block_header(state, block);\n+          process_randao(state, block.getBody(), validateStateRootAndSignatures);\n+          process_eth1_data(state, block.getBody());\n+          process_operations(state, block.getBody());\n+        });\n   }\n \n   /**\n    * v0.7.1\n    * https://github.com/ethereum/eth2.0-specs/blob/v0.7.1/specs/core/0_beacon-chain.md#beacon-chain-state-transition-function\n    * Processes epoch\n    *\n-   * @param state\n    * @throws EpochProcessingException\n    */\n-  private static void process_epoch(MutableBeaconState state) throws EpochProcessingException {\n-    // Note: the lines with @ label here will be inserted here in a future phase\n-    process_justification_and_finalization(state);\n-    process_rewards_and_penalties(state);\n-    process_registry_updates(state);\n-    // @process_reveal_deadlines\n-    // @process_challenge_deadlines\n-    process_slashings(state);\n-    // @update_period_committee\n-    process_final_updates(state);\n-    // @after_process_final_updates\n+  private static BeaconState process_epoch(BeaconState preState) throws EpochProcessingException {\n+    return preState.updated(\n+        state -> {\n+          // Note: the lines with @ label here will be inserted here in a future phase\n+          process_justification_and_finalization(state);\n+          process_rewards_and_penalties(state);\n+          process_registry_updates(state);\n+          // @process_reveal_deadlines\n+          // @process_challenge_deadlines\n+          process_slashings(state);\n+          // @update_period_committee\n+          process_final_updates(state);\n+          // @after_process_final_updates\n+        });\n   }\n \n   /**\n    * v0.7.1\n    * https://github.com/ethereum/eth2.0-specs/blob/v0.7.1/specs/core/0_beacon-chain.md#beacon-chain-state-transition-function\n    * Processes slot\n-   *\n-   * @param state\n    */\n-  private static void process_slot(MutableBeaconState state) {\n-    // Cache state root\n-    Bytes32 previous_state_root = state.hash_tree_root();\n-    int index = state.getSlot().mod(UnsignedLong.valueOf(SLOTS_PER_HISTORICAL_ROOT)).intValue();\n-    state.getState_roots().set(index, previous_state_root);\n+  private static BeaconState process_slot(BeaconState preState) {\n+    return preState.updated(\n+        state -> {\n+          // Cache state root\n+          Bytes32 previous_state_root = state.hash_tree_root();\n+          int index =\n+              state.getSlot().mod(UnsignedLong.valueOf(SLOTS_PER_HISTORICAL_ROOT)).intValue();\n+          state.getState_roots().set(index, previous_state_root);\n \n-    // Cache latest block header state root\n-    BeaconBlockHeader latest_block_header = state.getLatest_block_header();\n-    if (latest_block_header.getState_root().equals(ZERO_HASH)) {\n-      BeaconBlockHeader latest_block_header_new =\n-          new BeaconBlockHeader(\n-              latest_block_header.getSlot(),\n-              latest_block_header.getParent_root(),\n-              previous_state_root,\n-              latest_block_header.getBody_root());\n-      state.setLatest_block_header(latest_block_header_new);\n-    }\n+          // Cache latest block header state root\n+          BeaconBlockHeader latest_block_header = state.getLatest_block_header();\n+          if (latest_block_header.getState_root().equals(ZERO_HASH)) {\n+            BeaconBlockHeader latest_block_header_new =\n+                new BeaconBlockHeader(\n+                    latest_block_header.getSlot(),\n+                    latest_block_header.getParent_root(),\n+                    previous_state_root,\n+                    latest_block_header.getBody_root());\n+            state.setLatest_block_header(latest_block_header_new);\n+          }\n \n-    // Cache block root\n-    Bytes32 previous_block_root = state.getLatest_block_header().hash_tree_root();\n-    state.getBlock_roots().set(index, previous_block_root);\n+          // Cache block root\n+          Bytes32 previous_block_root = state.getLatest_block_header().hash_tree_root();\n+          state.getBlock_roots().set(index, previous_block_root);\n+        });\n   }\n \n   /**\n    * v0.7.1\n    * https://github.com/ethereum/eth2.0-specs/blob/v0.7.1/specs/core/0_beacon-chain.md#beacon-chain-state-transition-function\n    * Processes slots through state slot through given slot\n    *\n-   * @param state\n-   * @param slot\n    * @throws EpochProcessingException\n    * @throws SlotProcessingException\n    */\n-  public void process_slots(MutableBeaconState state, UnsignedLong slot)\n+  public BeaconState process_slots(BeaconState preState, UnsignedLong slot)\n       throws SlotProcessingException, EpochProcessingException {\n     try {\n       checkArgument(\n-          state.getSlot().compareTo(slot) <= 0, \"process_slots: State slot higher than given slot\");\n+          preState.getSlot().compareTo(slot) <= 0,\n+          \"process_slots: State slot higher than given slot\");\n+      BeaconState state = preState;\n       while (state.getSlot().compareTo(slot) < 0) {\n-        process_slot(state);\n+        state = process_slot(state);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33198baf461a693db79cb5227a45b2917786cd04"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc5NTk3MA==", "bodyText": "I was tending to make BeaconState mutations scopes as restricted as possible. Also please note that copy/update BeaconState object is now very lightweight.\nNote that even if you are doing this loop with a single MutableBeaconState you would still need to calculate state hash_tree_root for every slot which implies backing tree update which is almost the same as updated() call.\nI just tried to update this piece of code and make just one BeaconState.updated() per loop iteration but found another issue:\nreportExceptions(CompletableFuture.runAsync(() -> recordMetrics(state)));\nI.e. state is asynchronously sent to the outer world. And this should definitely be immutable BeaconState instance.\nSo I would leave this part as is (safer variant) until it becomes a real perf bottleneck", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400795970", "createdAt": "2020-03-31T10:11:11Z", "author": {"login": "Nashatyrev"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateTransition.java", "diffHunk": "@@ -136,98 +135,105 @@ public BeaconState initiate(BeaconState state, SignedBeaconBlock block)\n    * https://github.com/ethereum/eth2.0-specs/blob/v0.7.1/specs/core/0_beacon-chain.md#beacon-chain-state-transition-function\n    * Processes block\n    *\n-   * @param state\n-   * @param block\n    * @throws BlockProcessingException\n    */\n-  private void process_block(\n-      MutableBeaconState state, BeaconBlock block, boolean validateStateRootAndSignatures)\n+  private BeaconState process_block(\n+      BeaconState preState, BeaconBlock block, boolean validateStateRootAndSignatures)\n       throws BlockProcessingException {\n-    process_block_header(state, block);\n-    process_randao(state, block.getBody(), validateStateRootAndSignatures);\n-    process_eth1_data(state, block.getBody());\n-    process_operations(state, block.getBody());\n+    return preState.updated(\n+        state -> {\n+          process_block_header(state, block);\n+          process_randao(state, block.getBody(), validateStateRootAndSignatures);\n+          process_eth1_data(state, block.getBody());\n+          process_operations(state, block.getBody());\n+        });\n   }\n \n   /**\n    * v0.7.1\n    * https://github.com/ethereum/eth2.0-specs/blob/v0.7.1/specs/core/0_beacon-chain.md#beacon-chain-state-transition-function\n    * Processes epoch\n    *\n-   * @param state\n    * @throws EpochProcessingException\n    */\n-  private static void process_epoch(MutableBeaconState state) throws EpochProcessingException {\n-    // Note: the lines with @ label here will be inserted here in a future phase\n-    process_justification_and_finalization(state);\n-    process_rewards_and_penalties(state);\n-    process_registry_updates(state);\n-    // @process_reveal_deadlines\n-    // @process_challenge_deadlines\n-    process_slashings(state);\n-    // @update_period_committee\n-    process_final_updates(state);\n-    // @after_process_final_updates\n+  private static BeaconState process_epoch(BeaconState preState) throws EpochProcessingException {\n+    return preState.updated(\n+        state -> {\n+          // Note: the lines with @ label here will be inserted here in a future phase\n+          process_justification_and_finalization(state);\n+          process_rewards_and_penalties(state);\n+          process_registry_updates(state);\n+          // @process_reveal_deadlines\n+          // @process_challenge_deadlines\n+          process_slashings(state);\n+          // @update_period_committee\n+          process_final_updates(state);\n+          // @after_process_final_updates\n+        });\n   }\n \n   /**\n    * v0.7.1\n    * https://github.com/ethereum/eth2.0-specs/blob/v0.7.1/specs/core/0_beacon-chain.md#beacon-chain-state-transition-function\n    * Processes slot\n-   *\n-   * @param state\n    */\n-  private static void process_slot(MutableBeaconState state) {\n-    // Cache state root\n-    Bytes32 previous_state_root = state.hash_tree_root();\n-    int index = state.getSlot().mod(UnsignedLong.valueOf(SLOTS_PER_HISTORICAL_ROOT)).intValue();\n-    state.getState_roots().set(index, previous_state_root);\n+  private static BeaconState process_slot(BeaconState preState) {\n+    return preState.updated(\n+        state -> {\n+          // Cache state root\n+          Bytes32 previous_state_root = state.hash_tree_root();\n+          int index =\n+              state.getSlot().mod(UnsignedLong.valueOf(SLOTS_PER_HISTORICAL_ROOT)).intValue();\n+          state.getState_roots().set(index, previous_state_root);\n \n-    // Cache latest block header state root\n-    BeaconBlockHeader latest_block_header = state.getLatest_block_header();\n-    if (latest_block_header.getState_root().equals(ZERO_HASH)) {\n-      BeaconBlockHeader latest_block_header_new =\n-          new BeaconBlockHeader(\n-              latest_block_header.getSlot(),\n-              latest_block_header.getParent_root(),\n-              previous_state_root,\n-              latest_block_header.getBody_root());\n-      state.setLatest_block_header(latest_block_header_new);\n-    }\n+          // Cache latest block header state root\n+          BeaconBlockHeader latest_block_header = state.getLatest_block_header();\n+          if (latest_block_header.getState_root().equals(ZERO_HASH)) {\n+            BeaconBlockHeader latest_block_header_new =\n+                new BeaconBlockHeader(\n+                    latest_block_header.getSlot(),\n+                    latest_block_header.getParent_root(),\n+                    previous_state_root,\n+                    latest_block_header.getBody_root());\n+            state.setLatest_block_header(latest_block_header_new);\n+          }\n \n-    // Cache block root\n-    Bytes32 previous_block_root = state.getLatest_block_header().hash_tree_root();\n-    state.getBlock_roots().set(index, previous_block_root);\n+          // Cache block root\n+          Bytes32 previous_block_root = state.getLatest_block_header().hash_tree_root();\n+          state.getBlock_roots().set(index, previous_block_root);\n+        });\n   }\n \n   /**\n    * v0.7.1\n    * https://github.com/ethereum/eth2.0-specs/blob/v0.7.1/specs/core/0_beacon-chain.md#beacon-chain-state-transition-function\n    * Processes slots through state slot through given slot\n    *\n-   * @param state\n-   * @param slot\n    * @throws EpochProcessingException\n    * @throws SlotProcessingException\n    */\n-  public void process_slots(MutableBeaconState state, UnsignedLong slot)\n+  public BeaconState process_slots(BeaconState preState, UnsignedLong slot)\n       throws SlotProcessingException, EpochProcessingException {\n     try {\n       checkArgument(\n-          state.getSlot().compareTo(slot) <= 0, \"process_slots: State slot higher than given slot\");\n+          preState.getSlot().compareTo(slot) <= 0,\n+          \"process_slots: State slot higher than given slot\");\n+      BeaconState state = preState;\n       while (state.getSlot().compareTo(slot) < 0) {\n-        process_slot(state);\n+        state = process_slot(state);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg2MDAyNw=="}, "originalCommit": {"oid": "33198baf461a693db79cb5227a45b2917786cd04"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk3MjI4OQ==", "bodyText": "cool, that makes sense to me \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400972289", "createdAt": "2020-03-31T14:45:42Z", "author": {"login": "mbaxter"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateTransition.java", "diffHunk": "@@ -136,98 +135,105 @@ public BeaconState initiate(BeaconState state, SignedBeaconBlock block)\n    * https://github.com/ethereum/eth2.0-specs/blob/v0.7.1/specs/core/0_beacon-chain.md#beacon-chain-state-transition-function\n    * Processes block\n    *\n-   * @param state\n-   * @param block\n    * @throws BlockProcessingException\n    */\n-  private void process_block(\n-      MutableBeaconState state, BeaconBlock block, boolean validateStateRootAndSignatures)\n+  private BeaconState process_block(\n+      BeaconState preState, BeaconBlock block, boolean validateStateRootAndSignatures)\n       throws BlockProcessingException {\n-    process_block_header(state, block);\n-    process_randao(state, block.getBody(), validateStateRootAndSignatures);\n-    process_eth1_data(state, block.getBody());\n-    process_operations(state, block.getBody());\n+    return preState.updated(\n+        state -> {\n+          process_block_header(state, block);\n+          process_randao(state, block.getBody(), validateStateRootAndSignatures);\n+          process_eth1_data(state, block.getBody());\n+          process_operations(state, block.getBody());\n+        });\n   }\n \n   /**\n    * v0.7.1\n    * https://github.com/ethereum/eth2.0-specs/blob/v0.7.1/specs/core/0_beacon-chain.md#beacon-chain-state-transition-function\n    * Processes epoch\n    *\n-   * @param state\n    * @throws EpochProcessingException\n    */\n-  private static void process_epoch(MutableBeaconState state) throws EpochProcessingException {\n-    // Note: the lines with @ label here will be inserted here in a future phase\n-    process_justification_and_finalization(state);\n-    process_rewards_and_penalties(state);\n-    process_registry_updates(state);\n-    // @process_reveal_deadlines\n-    // @process_challenge_deadlines\n-    process_slashings(state);\n-    // @update_period_committee\n-    process_final_updates(state);\n-    // @after_process_final_updates\n+  private static BeaconState process_epoch(BeaconState preState) throws EpochProcessingException {\n+    return preState.updated(\n+        state -> {\n+          // Note: the lines with @ label here will be inserted here in a future phase\n+          process_justification_and_finalization(state);\n+          process_rewards_and_penalties(state);\n+          process_registry_updates(state);\n+          // @process_reveal_deadlines\n+          // @process_challenge_deadlines\n+          process_slashings(state);\n+          // @update_period_committee\n+          process_final_updates(state);\n+          // @after_process_final_updates\n+        });\n   }\n \n   /**\n    * v0.7.1\n    * https://github.com/ethereum/eth2.0-specs/blob/v0.7.1/specs/core/0_beacon-chain.md#beacon-chain-state-transition-function\n    * Processes slot\n-   *\n-   * @param state\n    */\n-  private static void process_slot(MutableBeaconState state) {\n-    // Cache state root\n-    Bytes32 previous_state_root = state.hash_tree_root();\n-    int index = state.getSlot().mod(UnsignedLong.valueOf(SLOTS_PER_HISTORICAL_ROOT)).intValue();\n-    state.getState_roots().set(index, previous_state_root);\n+  private static BeaconState process_slot(BeaconState preState) {\n+    return preState.updated(\n+        state -> {\n+          // Cache state root\n+          Bytes32 previous_state_root = state.hash_tree_root();\n+          int index =\n+              state.getSlot().mod(UnsignedLong.valueOf(SLOTS_PER_HISTORICAL_ROOT)).intValue();\n+          state.getState_roots().set(index, previous_state_root);\n \n-    // Cache latest block header state root\n-    BeaconBlockHeader latest_block_header = state.getLatest_block_header();\n-    if (latest_block_header.getState_root().equals(ZERO_HASH)) {\n-      BeaconBlockHeader latest_block_header_new =\n-          new BeaconBlockHeader(\n-              latest_block_header.getSlot(),\n-              latest_block_header.getParent_root(),\n-              previous_state_root,\n-              latest_block_header.getBody_root());\n-      state.setLatest_block_header(latest_block_header_new);\n-    }\n+          // Cache latest block header state root\n+          BeaconBlockHeader latest_block_header = state.getLatest_block_header();\n+          if (latest_block_header.getState_root().equals(ZERO_HASH)) {\n+            BeaconBlockHeader latest_block_header_new =\n+                new BeaconBlockHeader(\n+                    latest_block_header.getSlot(),\n+                    latest_block_header.getParent_root(),\n+                    previous_state_root,\n+                    latest_block_header.getBody_root());\n+            state.setLatest_block_header(latest_block_header_new);\n+          }\n \n-    // Cache block root\n-    Bytes32 previous_block_root = state.getLatest_block_header().hash_tree_root();\n-    state.getBlock_roots().set(index, previous_block_root);\n+          // Cache block root\n+          Bytes32 previous_block_root = state.getLatest_block_header().hash_tree_root();\n+          state.getBlock_roots().set(index, previous_block_root);\n+        });\n   }\n \n   /**\n    * v0.7.1\n    * https://github.com/ethereum/eth2.0-specs/blob/v0.7.1/specs/core/0_beacon-chain.md#beacon-chain-state-transition-function\n    * Processes slots through state slot through given slot\n    *\n-   * @param state\n-   * @param slot\n    * @throws EpochProcessingException\n    * @throws SlotProcessingException\n    */\n-  public void process_slots(MutableBeaconState state, UnsignedLong slot)\n+  public BeaconState process_slots(BeaconState preState, UnsignedLong slot)\n       throws SlotProcessingException, EpochProcessingException {\n     try {\n       checkArgument(\n-          state.getSlot().compareTo(slot) <= 0, \"process_slots: State slot higher than given slot\");\n+          preState.getSlot().compareTo(slot) <= 0,\n+          \"process_slots: State slot higher than given slot\");\n+      BeaconState state = preState;\n       while (state.getSlot().compareTo(slot) < 0) {\n-        process_slot(state);\n+        state = process_slot(state);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg2MDAyNw=="}, "originalCommit": {"oid": "33198baf461a693db79cb5227a45b2917786cd04"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjcyNDQxOnYy", "diffSide": "RIGHT", "path": "eth-benchmark-tests/src/jmh/java/tech/pegasys/artemis/benchmarks/TransitionBenchmark.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDoxNjo0OFrOF8YuTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDoxNjo0OFrOF8YuTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg2Mzk0OA==", "bodyText": "Stray comment", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r398863948", "createdAt": "2020-03-26T20:16:48Z", "author": {"login": "mbaxter"}, "path": "eth-benchmark-tests/src/jmh/java/tech/pegasys/artemis/benchmarks/TransitionBenchmark.java", "diffHunk": "@@ -103,7 +106,7 @@ protected void importNextBlock() {\n     }\n     localChain.setSlot(block.getSlot());\n     lastResult = blockImporter.importBlock(block);\n-    System.out.println(\"Imported: \" + lastResult);\n+    //    System.out.println(\"Imported: \" + lastResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33198baf461a693db79cb5227a45b2917786cd04"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjczODE0OnYy", "diffSide": "RIGHT", "path": "eth-benchmark-tests/src/jmh/java/tech/pegasys/artemis/benchmarks/util/backing/BeaconStateBenchmark.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDoyMDo0OVrOF8Y2-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDoyMDo0OVrOF8Y2-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg2NjE3MA==", "bodyText": "Should this be deleted or uncommented?", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r398866170", "createdAt": "2020-03-26T20:20:49Z", "author": {"login": "mbaxter"}, "path": "eth-benchmark-tests/src/jmh/java/tech/pegasys/artemis/benchmarks/util/backing/BeaconStateBenchmark.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.benchmarks.util.backing;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.Validator;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+@State(Scope.Thread)\n+public class BeaconStateBenchmark {\n+\n+  private static final BLSPublicKey pubkey = BLSPublicKey.random(0);\n+  private static final DataStructureUtil dataStructureUtil =\n+      new DataStructureUtil(0).withPubKeyGenerator(() -> pubkey);\n+  private static final BeaconState beaconState = dataStructureUtil.randomBeaconState(32 * 1024);\n+\n+  public BeaconStateBenchmark() {\n+    Constants.setConstants(\"mainnet\");\n+  }\n+\n+  @Benchmark\n+  @Warmup(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+  @Measurement(iterations = 10, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+  public void iterateValidators(Blackhole bh) {\n+    for (Validator validator : beaconState.getValidators()) {\n+      bh.consume(validator);\n+    }\n+  }\n+\n+  @Benchmark\n+  @Warmup(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+  @Measurement(iterations = 10, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+  public void iterateValidatorsWithMethods(Blackhole bh) {\n+    for (Validator validator : beaconState.getValidators()) {\n+      bh.consume(validator.isSlashed());\n+      //      bh.consume(validator.getPubkey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33198baf461a693db79cb5227a45b2917786cd04"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Mjc4ODc1OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/CachedBranchNode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDozNToyMVrOF8ZXBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDozNToyMVrOF8ZXBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg3NDM3NQ==", "bodyText": "Looks like this class is unused", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r398874375", "createdAt": "2020-03-26T20:35:21Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/CachedBranchNode.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.tree;\n+\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.artemis.util.backing.tree.TreeNodeImpl.BranchNodeImpl;\n+import tech.pegasys.artemis.util.backing.type.CompositeViewType;\n+\n+public class CachedBranchNode extends BranchNodeImpl {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33198baf461a693db79cb5227a45b2917786cd04"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Mjk3NjE0OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeUpdates.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMToyOTo0N1rOF8bMlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNTo0MjoxOFrOF-cIZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwNDQ3MQ==", "bodyText": "(nit) I generally avoid using Pair.  It's pretty easy to create a small internal class with specific fields for each value, and I think thats usually more readable / self-documenting.", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r398904471", "createdAt": "2020-03-26T21:29:47Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeUpdates.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.tree;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * The collection of nodes and their target generalized indexes to be updated The class also\n+ * contains the target generalized index this set of changes is applicable to.\n+ *\n+ * @see TreeNode#updated(TreeUpdates)\n+ */\n+public class TreeUpdates {\n+\n+  /** Convenient collector for the stream with <code>Pair<Long, TreeNode></code> elements */\n+  public static Collector<Pair<Long, TreeNode>, ?, TreeUpdates> collector() {\n+    return Collectors.collectingAndThen(Collectors.toList(), TreeUpdates::new);\n+  }\n+\n+  private final List<Long> gIndexes;\n+  private final List<TreeNode> nodes;\n+\n+  private final long prefix;\n+  private final int heightFromLeaf;\n+\n+  /**\n+   * Creates a new instance of TreeNodes\n+   *\n+   * @param nodes the list of [[target generalized index], [new node value]] pairs <b>NOTE: the list\n+   *     should be sorted by target index</b> The ordering is not checked for performance reasons\n+   *     For unsorted list the behavior may be undefined but normally the {@link\n+   *     TreeNode#updated(TreeUpdates)} call would fail in this case\n+   */\n+  public TreeUpdates(List<Pair<Long, TreeNode>> nodes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33198baf461a693db79cb5227a45b2917786cd04"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAxNjkzNA==", "bodyText": "Yep, looks more verbose but cleaner now \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r401016934", "createdAt": "2020-03-31T15:42:18Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeUpdates.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.tree;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * The collection of nodes and their target generalized indexes to be updated The class also\n+ * contains the target generalized index this set of changes is applicable to.\n+ *\n+ * @see TreeNode#updated(TreeUpdates)\n+ */\n+public class TreeUpdates {\n+\n+  /** Convenient collector for the stream with <code>Pair<Long, TreeNode></code> elements */\n+  public static Collector<Pair<Long, TreeNode>, ?, TreeUpdates> collector() {\n+    return Collectors.collectingAndThen(Collectors.toList(), TreeUpdates::new);\n+  }\n+\n+  private final List<Long> gIndexes;\n+  private final List<TreeNode> nodes;\n+\n+  private final long prefix;\n+  private final int heightFromLeaf;\n+\n+  /**\n+   * Creates a new instance of TreeNodes\n+   *\n+   * @param nodes the list of [[target generalized index], [new node value]] pairs <b>NOTE: the list\n+   *     should be sorted by target index</b> The ordering is not checked for performance reasons\n+   *     For unsorted list the behavior may be undefined but normally the {@link\n+   *     TreeNode#updated(TreeUpdates)} call would fail in this case\n+   */\n+  public TreeUpdates(List<Pair<Long, TreeNode>> nodes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwNDQ3MQ=="}, "originalCommit": {"oid": "33198baf461a693db79cb5227a45b2917786cd04"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjczNTU5OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeUpdates.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOToyNDoxNVrOF8_BVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozNTowNFrOF_pGPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5MTQxMg==", "bodyText": "Might be a good idea to add some unit tests for TreeUpdates", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399491412", "createdAt": "2020-03-27T19:24:15Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeUpdates.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.tree;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * The collection of nodes and their target generalized indexes to be updated The class also\n+ * contains the target generalized index this set of changes is applicable to.\n+ *\n+ * @see TreeNode#updated(TreeUpdates)\n+ */\n+public class TreeUpdates {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MjQyMA==", "bodyText": "Yeah, a lot of unit tests missing. In progress now...", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r401572420", "createdAt": "2020-04-01T12:21:49Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeUpdates.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.tree;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * The collection of nodes and their target generalized indexes to be updated The class also\n+ * contains the target generalized index this set of changes is applicable to.\n+ *\n+ * @see TreeNode#updated(TreeUpdates)\n+ */\n+public class TreeUpdates {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5MTQxMg=="}, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3Nzk0OQ==", "bodyText": "Added some tests (for TreeUpdates as well). BTW finally added TreeUpdates source list validation.", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r402277949", "createdAt": "2020-04-02T12:35:04Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeUpdates.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.tree;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * The collection of nodes and their target generalized indexes to be updated The class also\n+ * contains the target generalized index this set of changes is applicable to.\n+ *\n+ * @see TreeNode#updated(TreeUpdates)\n+ */\n+public class TreeUpdates {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5MTQxMg=="}, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njc1NDg2OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeUpdates.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOTozMDowOVrOF8_NQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjo1OTo0M1rOF_qBQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5NDQ2NA==", "bodyText": "Might improve readability if we try to centralize generalized-index-related calculations into a helper utility with unit tests and documentation.  WDYT?", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399494464", "createdAt": "2020-03-27T19:30:09Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeUpdates.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.tree;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * The collection of nodes and their target generalized indexes to be updated The class also\n+ * contains the target generalized index this set of changes is applicable to.\n+ *\n+ * @see TreeNode#updated(TreeUpdates)\n+ */\n+public class TreeUpdates {\n+\n+  /** Convenient collector for the stream with <code>Pair<Long, TreeNode></code> elements */\n+  public static Collector<Pair<Long, TreeNode>, ?, TreeUpdates> collector() {\n+    return Collectors.collectingAndThen(Collectors.toList(), TreeUpdates::new);\n+  }\n+\n+  private final List<Long> gIndexes;\n+  private final List<TreeNode> nodes;\n+\n+  private final long prefix;\n+  private final int heightFromLeaf;\n+\n+  /**\n+   * Creates a new instance of TreeNodes\n+   *\n+   * @param nodes the list of [[target generalized index], [new node value]] pairs <b>NOTE: the list\n+   *     should be sorted by target index</b> The ordering is not checked for performance reasons\n+   *     For unsorted list the behavior may be undefined but normally the {@link\n+   *     TreeNode#updated(TreeUpdates)} call would fail in this case\n+   */\n+  public TreeUpdates(List<Pair<Long, TreeNode>> nodes) {\n+    this(\n+        nodes.stream().map(Pair::getLeft).collect(Collectors.toList()),\n+        nodes.stream().map(Pair::getRight).collect(Collectors.toList()));\n+  }\n+\n+  private TreeUpdates(List<Long> gIndexes, List<TreeNode> nodes) {\n+    this(gIndexes, nodes, 1, depth(gIndexes));\n+  }\n+\n+  private TreeUpdates(List<Long> gIndexes, List<TreeNode> nodes, long prefix, int heightFromLeaf) {\n+    this.gIndexes = gIndexes;\n+    this.nodes = nodes;\n+    this.prefix = prefix;\n+    this.heightFromLeaf = heightFromLeaf;\n+  }\n+\n+  /**\n+   * Split the nodes to left and right subtree subsets according the target generalized index\n+   *\n+   * @return the pair of node updates for left and right subtrees with accordingly adjusted target\n+   *     generalized indexes\n+   */\n+  public Pair<TreeUpdates, TreeUpdates> splitAtPivot() {\n+    long lPrefix = prefix << 1;\n+    long rPrefix = lPrefix | 1;\n+    long pivotGIndex = rPrefix << (heightFromLeaf - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3MzgwMQ==", "bodyText": "Good idea, though this TreeUpdates prefix trick is my proprietary invention and is not some generic index operation. Though I'll think if can be matched in a clear way...", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r401573801", "createdAt": "2020-04-01T12:24:20Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeUpdates.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.tree;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * The collection of nodes and their target generalized indexes to be updated The class also\n+ * contains the target generalized index this set of changes is applicable to.\n+ *\n+ * @see TreeNode#updated(TreeUpdates)\n+ */\n+public class TreeUpdates {\n+\n+  /** Convenient collector for the stream with <code>Pair<Long, TreeNode></code> elements */\n+  public static Collector<Pair<Long, TreeNode>, ?, TreeUpdates> collector() {\n+    return Collectors.collectingAndThen(Collectors.toList(), TreeUpdates::new);\n+  }\n+\n+  private final List<Long> gIndexes;\n+  private final List<TreeNode> nodes;\n+\n+  private final long prefix;\n+  private final int heightFromLeaf;\n+\n+  /**\n+   * Creates a new instance of TreeNodes\n+   *\n+   * @param nodes the list of [[target generalized index], [new node value]] pairs <b>NOTE: the list\n+   *     should be sorted by target index</b> The ordering is not checked for performance reasons\n+   *     For unsorted list the behavior may be undefined but normally the {@link\n+   *     TreeNode#updated(TreeUpdates)} call would fail in this case\n+   */\n+  public TreeUpdates(List<Pair<Long, TreeNode>> nodes) {\n+    this(\n+        nodes.stream().map(Pair::getLeft).collect(Collectors.toList()),\n+        nodes.stream().map(Pair::getRight).collect(Collectors.toList()));\n+  }\n+\n+  private TreeUpdates(List<Long> gIndexes, List<TreeNode> nodes) {\n+    this(gIndexes, nodes, 1, depth(gIndexes));\n+  }\n+\n+  private TreeUpdates(List<Long> gIndexes, List<TreeNode> nodes, long prefix, int heightFromLeaf) {\n+    this.gIndexes = gIndexes;\n+    this.nodes = nodes;\n+    this.prefix = prefix;\n+    this.heightFromLeaf = heightFromLeaf;\n+  }\n+\n+  /**\n+   * Split the nodes to left and right subtree subsets according the target generalized index\n+   *\n+   * @return the pair of node updates for left and right subtrees with accordingly adjusted target\n+   *     generalized indexes\n+   */\n+  public Pair<TreeUpdates, TreeUpdates> splitAtPivot() {\n+    long lPrefix = prefix << 1;\n+    long rPrefix = lPrefix | 1;\n+    long pivotGIndex = rPrefix << (heightFromLeaf - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5NDQ2NA=="}, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI5MzA1OQ==", "bodyText": "Honestly speaking I didn't come up with any reasonable decomposition here. If you have any specific ideas we can discuss them.", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r402293059", "createdAt": "2020-04-02T12:59:43Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeUpdates.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.tree;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * The collection of nodes and their target generalized indexes to be updated The class also\n+ * contains the target generalized index this set of changes is applicable to.\n+ *\n+ * @see TreeNode#updated(TreeUpdates)\n+ */\n+public class TreeUpdates {\n+\n+  /** Convenient collector for the stream with <code>Pair<Long, TreeNode></code> elements */\n+  public static Collector<Pair<Long, TreeNode>, ?, TreeUpdates> collector() {\n+    return Collectors.collectingAndThen(Collectors.toList(), TreeUpdates::new);\n+  }\n+\n+  private final List<Long> gIndexes;\n+  private final List<TreeNode> nodes;\n+\n+  private final long prefix;\n+  private final int heightFromLeaf;\n+\n+  /**\n+   * Creates a new instance of TreeNodes\n+   *\n+   * @param nodes the list of [[target generalized index], [new node value]] pairs <b>NOTE: the list\n+   *     should be sorted by target index</b> The ordering is not checked for performance reasons\n+   *     For unsorted list the behavior may be undefined but normally the {@link\n+   *     TreeNode#updated(TreeUpdates)} call would fail in this case\n+   */\n+  public TreeUpdates(List<Pair<Long, TreeNode>> nodes) {\n+    this(\n+        nodes.stream().map(Pair::getLeft).collect(Collectors.toList()),\n+        nodes.stream().map(Pair::getRight).collect(Collectors.toList()));\n+  }\n+\n+  private TreeUpdates(List<Long> gIndexes, List<TreeNode> nodes) {\n+    this(gIndexes, nodes, 1, depth(gIndexes));\n+  }\n+\n+  private TreeUpdates(List<Long> gIndexes, List<TreeNode> nodes, long prefix, int heightFromLeaf) {\n+    this.gIndexes = gIndexes;\n+    this.nodes = nodes;\n+    this.prefix = prefix;\n+    this.heightFromLeaf = heightFromLeaf;\n+  }\n+\n+  /**\n+   * Split the nodes to left and right subtree subsets according the target generalized index\n+   *\n+   * @return the pair of node updates for left and right subtrees with accordingly adjusted target\n+   *     generalized indexes\n+   */\n+  public Pair<TreeUpdates, TreeUpdates> splitAtPivot() {\n+    long lPrefix = prefix << 1;\n+    long rPrefix = lPrefix | 1;\n+    long pivotGIndex = rPrefix << (heightFromLeaf - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5NDQ2NA=="}, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njc2NDk0OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeUpdates.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOTozMzoyM1rOF8_TeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzoxNzozOVrOF-VThg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5NjA1Ng==", "bodyText": "It looks like we're also expecting all nodes to be at the same height in the tree - might be helpful to add this to the description.", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399496056", "createdAt": "2020-03-27T19:33:23Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeUpdates.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.tree;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * The collection of nodes and their target generalized indexes to be updated The class also\n+ * contains the target generalized index this set of changes is applicable to.\n+ *\n+ * @see TreeNode#updated(TreeUpdates)\n+ */\n+public class TreeUpdates {\n+\n+  /** Convenient collector for the stream with <code>Pair<Long, TreeNode></code> elements */\n+  public static Collector<Pair<Long, TreeNode>, ?, TreeUpdates> collector() {\n+    return Collectors.collectingAndThen(Collectors.toList(), TreeUpdates::new);\n+  }\n+\n+  private final List<Long> gIndexes;\n+  private final List<TreeNode> nodes;\n+\n+  private final long prefix;\n+  private final int heightFromLeaf;\n+\n+  /**\n+   * Creates a new instance of TreeNodes\n+   *\n+   * @param nodes the list of [[target generalized index], [new node value]] pairs <b>NOTE: the list\n+   *     should be sorted by target index</b> The ordering is not checked for performance reasons", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkwNTA5NA==", "bodyText": "Yep nice catch \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400905094", "createdAt": "2020-03-31T13:17:39Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeUpdates.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.tree;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * The collection of nodes and their target generalized indexes to be updated The class also\n+ * contains the target generalized index this set of changes is applicable to.\n+ *\n+ * @see TreeNode#updated(TreeUpdates)\n+ */\n+public class TreeUpdates {\n+\n+  /** Convenient collector for the stream with <code>Pair<Long, TreeNode></code> elements */\n+  public static Collector<Pair<Long, TreeNode>, ?, TreeUpdates> collector() {\n+    return Collectors.collectingAndThen(Collectors.toList(), TreeUpdates::new);\n+  }\n+\n+  private final List<Long> gIndexes;\n+  private final List<TreeNode> nodes;\n+\n+  private final long prefix;\n+  private final int heightFromLeaf;\n+\n+  /**\n+   * Creates a new instance of TreeNodes\n+   *\n+   * @param nodes the list of [[target generalized index], [new node value]] pairs <b>NOTE: the list\n+   *     should be sorted by target index</b> The ordering is not checked for performance reasons", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5NjA1Ng=="}, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njg0ODA2OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDowMToxNlrOF9AHIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjozNzo0M1rOF9ycTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwOTI4MA==", "bodyText": "Do we need this?  It looks like it's always overridden.", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399509280", "createdAt": "2020-03-27T20:01:16Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeNode.java", "diffHunk": "@@ -153,6 +153,15 @@ default TreeNode updated(long target, Function<TreeNode, TreeNode> nodeUpdater)\n    */\n   TreeNode updated(long generalizedIndex, Function<TreeNode, TreeNode> nodeUpdater);\n \n+  /** Updates the tree in a batch */\n+  default TreeNode updated(TreeUpdates newNodes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMzkwMA==", "bodyText": "I would leave this as a basic method implementation for new potential interface implementations. Also it might serve some documentation purpose - i.e. illustrate what the method actually does without any optimizations", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400333900", "createdAt": "2020-03-30T16:37:43Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeNode.java", "diffHunk": "@@ -153,6 +153,15 @@ default TreeNode updated(long target, Function<TreeNode, TreeNode> nodeUpdater)\n    */\n   TreeNode updated(long generalizedIndex, Function<TreeNode, TreeNode> nodeUpdater);\n \n+  /** Updates the tree in a batch */\n+  default TreeNode updated(TreeUpdates newNodes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwOTI4MA=="}, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njg4Mzc5OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/CompositeViewRead.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDoxNDowNlrOF9AdaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDoxNDowNlrOF9AdaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUxNDk4NA==", "bodyText": "nice \ud83c\udf89", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399514984", "createdAt": "2020-03-27T20:14:06Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/CompositeViewRead.java", "diffHunk": "@@ -18,9 +18,9 @@\n /**\n  * Represents composite immutable view which has descendant views\n  *\n- * @param <C> the type of children\n+ * @param <ChildType> the type of children", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzE0MTY1OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/cache/ArrayCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTo1NDo0NFrOF9C9jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTo1NDo0NFrOF9C9jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1NTk4Mw==", "bodyText": "Do we need to extend the array just to null out this value?  Isn't it implicitly null if the key is outside the bounds of the backing array?", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399555983", "createdAt": "2020-03-27T21:54:44Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/cache/ArrayCache.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.cache;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.IntFunction;\n+\n+public final class ArrayCache<V> implements IntCache<V> {\n+  private V[] values;\n+  private final int initSize;\n+\n+  public ArrayCache() {\n+    this(16);\n+  }\n+\n+  public ArrayCache(int initialSize) {\n+    this.initSize = initialSize;\n+    this.values = createArray(initialSize);\n+  }\n+\n+  private ArrayCache(V[] values, int initSize) {\n+    this.values = values;\n+    this.initSize = initSize;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private V[] createArray(int size) {\n+    return (V[]) new Object[size];\n+  }\n+\n+  private void extend(int index) {\n+    int newSize = values.length;\n+    if (index >= newSize) {\n+      while (index >= newSize) {\n+        newSize <<= 1;\n+      }\n+      values = Arrays.copyOf(values, newSize);\n+    }\n+  }\n+\n+  @Override\n+  public V getInt(int key, IntFunction<V> fallback) {\n+    V val = key >= values.length ? null : values[key];\n+    if (val == null) {\n+      val = fallback.apply(key);\n+      synchronized (this) {\n+        extend(key);\n+        values[key] = val;\n+      }\n+    }\n+    return val;\n+  }\n+\n+  @Override\n+  public Optional<V> getCached(Integer key) {\n+    return key >= values.length ? Optional.empty() : Optional.ofNullable(values[key]);\n+  }\n+\n+  @Override\n+  public IntCache<V> copy() {\n+    return new ArrayCache<>(Arrays.copyOf(values, values.length), initSize);\n+  }\n+\n+  @Override\n+  public synchronized IntCache<V> transfer() {\n+    ArrayCache<V> ret = new ArrayCache<>(values, initSize);\n+    values = createArray(initSize);\n+    return ret;\n+  }\n+\n+  @Override\n+  public synchronized void invalidateWithNewValueInt(int key, V newValue) {\n+    extend(key);\n+    values[key] = newValue;\n+  }\n+\n+  @Override\n+  public synchronized void invalidateInt(int key) {\n+    extend(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzE0NTA0OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/cache/ArrayCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTo1NjoyMVrOF9C_qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTo1NjoyMVrOF9C_qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1NjUyMg==", "bodyText": "(Optional)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public final class ArrayCache<V> implements IntCache<V> {\n          \n          \n            \n            public final class ArrayIntCache<V> implements IntCache<V> {\n          \n      \n    \n    \n  \n\nor maybe:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public final class ArrayCache<V> implements IntCache<V> {\n          \n          \n            \n            public final class ArrayBackedIndexCache<V> implements IndexCache<V> {", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399556522", "createdAt": "2020-03-27T21:56:21Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/cache/ArrayCache.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.cache;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.IntFunction;\n+\n+public final class ArrayCache<V> implements IntCache<V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzE0NjM1OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/cache/HashMapCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTo1Njo1MlrOF9DAaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTo1Njo1MlrOF9DAaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1NjcxNQ==", "bodyText": "Looks like this class is unused.", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399556715", "createdAt": "2020-03-27T21:56:52Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/cache/HashMapCache.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.cache;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+public class HashMapCache<K, V> implements Cache<K, V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzE1MTc5OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/type/ContainerViewType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTo1OToyMVrOF9DDwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTo1OToyMVrOF9DDwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1NzU2OQ==", "bodyText": "Stray comment", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399557569", "createdAt": "2020-03-27T21:59:21Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/type/ContainerViewType.java", "diffHunk": "@@ -62,6 +62,7 @@ public ViewType getChildType(int index) {\n   @Override\n   public C createFromBackingNode(TreeNode node) {\n     return instanceCtor.apply(this, node);\n+    //    return node.cachedValue(() -> instanceCtor.apply(this, node));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzE1NDA5OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/type/VectorViewType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjowMDoyOFrOF9DFOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo0NDo1OFrOF9yv2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1Nzk0Nw==", "bodyText": "Stray comment", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399557947", "createdAt": "2020-03-27T22:00:28Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/type/VectorViewType.java", "diffHunk": "@@ -44,6 +44,7 @@ protected TreeNode createDefaultTree() {\n   @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n   @Override\n   public VectorViewRead<C> createFromBackingNode(TreeNode node) {\n-    return new VectorViewImpl(this, node);\n+    //    return node.cachedValue(() -> new VectorViewImpl(this, node));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzODkwNw==", "bodyText": "Ugh, sorry for all this garbage", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400338907", "createdAt": "2020-03-30T16:44:58Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/type/VectorViewType.java", "diffHunk": "@@ -44,6 +44,7 @@ protected TreeNode createDefaultTree() {\n   @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n   @Override\n   public VectorViewRead<C> createFromBackingNode(TreeNode node) {\n-    return new VectorViewImpl(this, node);\n+    //    return node.cachedValue(() -> new VectorViewImpl(this, node));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1Nzk0Nw=="}, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzE1NzM3OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjowMjoxNFrOF9DHWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjowMjoxNFrOF9DHWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1ODQ4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>Thought internally this class has a mutable cache it may be thought of as immutable instance\n          \n          \n            \n             * <p>Though internally this class has a mutable cache it may be thought of as immutable instance", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399558488", "createdAt": "2020-03-27T22:02:14Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.view;\n+\n+import tech.pegasys.artemis.util.backing.CompositeViewRead;\n+import tech.pegasys.artemis.util.backing.ViewRead;\n+import tech.pegasys.artemis.util.backing.cache.ArrayCache;\n+import tech.pegasys.artemis.util.backing.cache.IntCache;\n+import tech.pegasys.artemis.util.backing.tree.TreeNode;\n+import tech.pegasys.artemis.util.backing.type.CompositeViewType;\n+\n+/**\n+ * Base backing view class for immutable composite views (lists, vectors, containers)\n+ *\n+ * <p>It caches it's child view instances so that if the underlying tree nodes are not changed (in\n+ * the corresponding mutable classes) the instances are not recreated from tree nodes on later\n+ * access.\n+ *\n+ * <p>Thought internally this class has a mutable cache it may be thought of as immutable instance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzE2NDI1OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjowNToxN1rOF9DLVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzowNTozM1rOF9zkaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1OTUwOA==", "bodyText": "(nit) We tend to use Optional's explicitly rather than allow nullable fields / parameters.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  CompositeViewType type, TreeNode backingNode, IntCache<ChildType> cache) {\n          \n          \n            \n                  CompositeViewType type, TreeNode backingNode, Optional<IntCache<ChildType>> cache) {", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399559508", "createdAt": "2020-03-27T22:05:17Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.view;\n+\n+import tech.pegasys.artemis.util.backing.CompositeViewRead;\n+import tech.pegasys.artemis.util.backing.ViewRead;\n+import tech.pegasys.artemis.util.backing.cache.ArrayCache;\n+import tech.pegasys.artemis.util.backing.cache.IntCache;\n+import tech.pegasys.artemis.util.backing.tree.TreeNode;\n+import tech.pegasys.artemis.util.backing.type.CompositeViewType;\n+\n+/**\n+ * Base backing view class for immutable composite views (lists, vectors, containers)\n+ *\n+ * <p>It caches it's child view instances so that if the underlying tree nodes are not changed (in\n+ * the corresponding mutable classes) the instances are not recreated from tree nodes on later\n+ * access.\n+ *\n+ * <p>Thought internally this class has a mutable cache it may be thought of as immutable instance\n+ * and used safely across threads\n+ *\n+ * @param <ChildType> the type of children. For heterogeneous composites (like container) this type\n+ *     would be just generic {@link ViewRead}\n+ */\n+public abstract class AbstractCompositeViewRead<ChildType extends ViewRead>\n+    implements CompositeViewRead<ChildType> {\n+\n+  private IntCache<ChildType> childrenViewCache;\n+  private final int sizeCache;\n+  private final CompositeViewType type;\n+  private final TreeNode backingNode;\n+\n+  /** Creates an instance from a type and a backing node */\n+  protected AbstractCompositeViewRead(CompositeViewType type, TreeNode backingNode) {\n+    this(type, backingNode, null);\n+  }\n+\n+  /**\n+   * Creates an instance from a type and a backing node Optionally the view instances cache can be\n+   * supplied for optimization to shortcut children views creation from backing nodes. The cache\n+   * should correspond to the supplied backing tree.\n+   */\n+  protected AbstractCompositeViewRead(\n+      CompositeViewType type, TreeNode backingNode, IntCache<ChildType> cache) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MjM2MA==", "bodyText": "Hm, seems like the Optional was generally intended to be used just for return types and not for params/fields but personally for me that doesn't sound like a dogma and denoting optional argument this way may be a good practice\nAnyway this class has also a constructor AbstractCompositeViewRead(CompositeViewType type, TreeNode backingNode) so I would better just make the cache param non-null", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400352360", "createdAt": "2020-03-30T17:05:33Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.view;\n+\n+import tech.pegasys.artemis.util.backing.CompositeViewRead;\n+import tech.pegasys.artemis.util.backing.ViewRead;\n+import tech.pegasys.artemis.util.backing.cache.ArrayCache;\n+import tech.pegasys.artemis.util.backing.cache.IntCache;\n+import tech.pegasys.artemis.util.backing.tree.TreeNode;\n+import tech.pegasys.artemis.util.backing.type.CompositeViewType;\n+\n+/**\n+ * Base backing view class for immutable composite views (lists, vectors, containers)\n+ *\n+ * <p>It caches it's child view instances so that if the underlying tree nodes are not changed (in\n+ * the corresponding mutable classes) the instances are not recreated from tree nodes on later\n+ * access.\n+ *\n+ * <p>Thought internally this class has a mutable cache it may be thought of as immutable instance\n+ * and used safely across threads\n+ *\n+ * @param <ChildType> the type of children. For heterogeneous composites (like container) this type\n+ *     would be just generic {@link ViewRead}\n+ */\n+public abstract class AbstractCompositeViewRead<ChildType extends ViewRead>\n+    implements CompositeViewRead<ChildType> {\n+\n+  private IntCache<ChildType> childrenViewCache;\n+  private final int sizeCache;\n+  private final CompositeViewType type;\n+  private final TreeNode backingNode;\n+\n+  /** Creates an instance from a type and a backing node */\n+  protected AbstractCompositeViewRead(CompositeViewType type, TreeNode backingNode) {\n+    this(type, backingNode, null);\n+  }\n+\n+  /**\n+   * Creates an instance from a type and a backing node Optionally the view instances cache can be\n+   * supplied for optimization to shortcut children views creation from backing nodes. The cache\n+   * should correspond to the supplied backing tree.\n+   */\n+  protected AbstractCompositeViewRead(\n+      CompositeViewType type, TreeNode backingNode, IntCache<ChildType> cache) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1OTUwOA=="}, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzE3NjA5OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjoxMToyOVrOF9DSmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMDozNjo1MFrOF-Pj_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2MTM3MQ==", "bodyText": "I'm not seeing where the cached values are eliminated from the current cache.  Is this comment out-of-date?", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399561371", "createdAt": "2020-03-27T22:11:29Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.view;\n+\n+import tech.pegasys.artemis.util.backing.CompositeViewRead;\n+import tech.pegasys.artemis.util.backing.ViewRead;\n+import tech.pegasys.artemis.util.backing.cache.ArrayCache;\n+import tech.pegasys.artemis.util.backing.cache.IntCache;\n+import tech.pegasys.artemis.util.backing.tree.TreeNode;\n+import tech.pegasys.artemis.util.backing.type.CompositeViewType;\n+\n+/**\n+ * Base backing view class for immutable composite views (lists, vectors, containers)\n+ *\n+ * <p>It caches it's child view instances so that if the underlying tree nodes are not changed (in\n+ * the corresponding mutable classes) the instances are not recreated from tree nodes on later\n+ * access.\n+ *\n+ * <p>Thought internally this class has a mutable cache it may be thought of as immutable instance\n+ * and used safely across threads\n+ *\n+ * @param <ChildType> the type of children. For heterogeneous composites (like container) this type\n+ *     would be just generic {@link ViewRead}\n+ */\n+public abstract class AbstractCompositeViewRead<ChildType extends ViewRead>\n+    implements CompositeViewRead<ChildType> {\n+\n+  private IntCache<ChildType> childrenViewCache;\n+  private final int sizeCache;\n+  private final CompositeViewType type;\n+  private final TreeNode backingNode;\n+\n+  /** Creates an instance from a type and a backing node */\n+  protected AbstractCompositeViewRead(CompositeViewType type, TreeNode backingNode) {\n+    this(type, backingNode, null);\n+  }\n+\n+  /**\n+   * Creates an instance from a type and a backing node Optionally the view instances cache can be\n+   * supplied for optimization to shortcut children views creation from backing nodes. The cache\n+   * should correspond to the supplied backing tree.\n+   */\n+  protected AbstractCompositeViewRead(\n+      CompositeViewType type, TreeNode backingNode, IntCache<ChildType> cache) {\n+    this.type = type;\n+    this.backingNode = backingNode;\n+    sizeCache = sizeImpl();\n+    childrenViewCache = cache == null ? createCache() : cache;\n+  }\n+\n+  /**\n+   * 'Transfers' the cache to a new Cache instance eliminating all the cached values from the\n+   * current view cache. This is made under assumption that the view instance this cache is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1NjAyNg==", "bodyText": "I just wanted to emphasize here that transferring the cache (not copying it) removes all the cached entries from this view's cache. This is actually how Cache.transfer is intended to work.\nPlease correct my wordings here if the idea was expressed too unclear.", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400356026", "createdAt": "2020-03-30T17:11:37Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.view;\n+\n+import tech.pegasys.artemis.util.backing.CompositeViewRead;\n+import tech.pegasys.artemis.util.backing.ViewRead;\n+import tech.pegasys.artemis.util.backing.cache.ArrayCache;\n+import tech.pegasys.artemis.util.backing.cache.IntCache;\n+import tech.pegasys.artemis.util.backing.tree.TreeNode;\n+import tech.pegasys.artemis.util.backing.type.CompositeViewType;\n+\n+/**\n+ * Base backing view class for immutable composite views (lists, vectors, containers)\n+ *\n+ * <p>It caches it's child view instances so that if the underlying tree nodes are not changed (in\n+ * the corresponding mutable classes) the instances are not recreated from tree nodes on later\n+ * access.\n+ *\n+ * <p>Thought internally this class has a mutable cache it may be thought of as immutable instance\n+ * and used safely across threads\n+ *\n+ * @param <ChildType> the type of children. For heterogeneous composites (like container) this type\n+ *     would be just generic {@link ViewRead}\n+ */\n+public abstract class AbstractCompositeViewRead<ChildType extends ViewRead>\n+    implements CompositeViewRead<ChildType> {\n+\n+  private IntCache<ChildType> childrenViewCache;\n+  private final int sizeCache;\n+  private final CompositeViewType type;\n+  private final TreeNode backingNode;\n+\n+  /** Creates an instance from a type and a backing node */\n+  protected AbstractCompositeViewRead(CompositeViewType type, TreeNode backingNode) {\n+    this(type, backingNode, null);\n+  }\n+\n+  /**\n+   * Creates an instance from a type and a backing node Optionally the view instances cache can be\n+   * supplied for optimization to shortcut children views creation from backing nodes. The cache\n+   * should correspond to the supplied backing tree.\n+   */\n+  protected AbstractCompositeViewRead(\n+      CompositeViewType type, TreeNode backingNode, IntCache<ChildType> cache) {\n+    this.type = type;\n+    this.backingNode = backingNode;\n+    sizeCache = sizeImpl();\n+    childrenViewCache = cache == null ? createCache() : cache;\n+  }\n+\n+  /**\n+   * 'Transfers' the cache to a new Cache instance eliminating all the cached values from the\n+   * current view cache. This is made under assumption that the view instance this cache is", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2MTM3MQ=="}, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2NjQxNA==", "bodyText": "No - that makes sense.  I just couldn't find where it was being cleared out because I was looking at the default impl in IntArray.  But I see that the child ArrayIntCache implementation works as described here.\nMaybe we should cut the default implementation?", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400466414", "createdAt": "2020-03-30T20:15:53Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.view;\n+\n+import tech.pegasys.artemis.util.backing.CompositeViewRead;\n+import tech.pegasys.artemis.util.backing.ViewRead;\n+import tech.pegasys.artemis.util.backing.cache.ArrayCache;\n+import tech.pegasys.artemis.util.backing.cache.IntCache;\n+import tech.pegasys.artemis.util.backing.tree.TreeNode;\n+import tech.pegasys.artemis.util.backing.type.CompositeViewType;\n+\n+/**\n+ * Base backing view class for immutable composite views (lists, vectors, containers)\n+ *\n+ * <p>It caches it's child view instances so that if the underlying tree nodes are not changed (in\n+ * the corresponding mutable classes) the instances are not recreated from tree nodes on later\n+ * access.\n+ *\n+ * <p>Thought internally this class has a mutable cache it may be thought of as immutable instance\n+ * and used safely across threads\n+ *\n+ * @param <ChildType> the type of children. For heterogeneous composites (like container) this type\n+ *     would be just generic {@link ViewRead}\n+ */\n+public abstract class AbstractCompositeViewRead<ChildType extends ViewRead>\n+    implements CompositeViewRead<ChildType> {\n+\n+  private IntCache<ChildType> childrenViewCache;\n+  private final int sizeCache;\n+  private final CompositeViewType type;\n+  private final TreeNode backingNode;\n+\n+  /** Creates an instance from a type and a backing node */\n+  protected AbstractCompositeViewRead(CompositeViewType type, TreeNode backingNode) {\n+    this(type, backingNode, null);\n+  }\n+\n+  /**\n+   * Creates an instance from a type and a backing node Optionally the view instances cache can be\n+   * supplied for optimization to shortcut children views creation from backing nodes. The cache\n+   * should correspond to the supplied backing tree.\n+   */\n+  protected AbstractCompositeViewRead(\n+      CompositeViewType type, TreeNode backingNode, IntCache<ChildType> cache) {\n+    this.type = type;\n+    this.backingNode = backingNode;\n+    sizeCache = sizeImpl();\n+    childrenViewCache = cache == null ? createCache() : cache;\n+  }\n+\n+  /**\n+   * 'Transfers' the cache to a new Cache instance eliminating all the cached values from the\n+   * current view cache. This is made under assumption that the view instance this cache is", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2MTM3MQ=="}, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgxMTAwNg==", "bodyText": "I would again leave this default implementation for potential interface implementations which don't bother with optimizing transfer() - copy() is just a naive transfer()", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400811006", "createdAt": "2020-03-31T10:36:50Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.view;\n+\n+import tech.pegasys.artemis.util.backing.CompositeViewRead;\n+import tech.pegasys.artemis.util.backing.ViewRead;\n+import tech.pegasys.artemis.util.backing.cache.ArrayCache;\n+import tech.pegasys.artemis.util.backing.cache.IntCache;\n+import tech.pegasys.artemis.util.backing.tree.TreeNode;\n+import tech.pegasys.artemis.util.backing.type.CompositeViewType;\n+\n+/**\n+ * Base backing view class for immutable composite views (lists, vectors, containers)\n+ *\n+ * <p>It caches it's child view instances so that if the underlying tree nodes are not changed (in\n+ * the corresponding mutable classes) the instances are not recreated from tree nodes on later\n+ * access.\n+ *\n+ * <p>Thought internally this class has a mutable cache it may be thought of as immutable instance\n+ * and used safely across threads\n+ *\n+ * @param <ChildType> the type of children. For heterogeneous composites (like container) this type\n+ *     would be just generic {@link ViewRead}\n+ */\n+public abstract class AbstractCompositeViewRead<ChildType extends ViewRead>\n+    implements CompositeViewRead<ChildType> {\n+\n+  private IntCache<ChildType> childrenViewCache;\n+  private final int sizeCache;\n+  private final CompositeViewType type;\n+  private final TreeNode backingNode;\n+\n+  /** Creates an instance from a type and a backing node */\n+  protected AbstractCompositeViewRead(CompositeViewType type, TreeNode backingNode) {\n+    this(type, backingNode, null);\n+  }\n+\n+  /**\n+   * Creates an instance from a type and a backing node Optionally the view instances cache can be\n+   * supplied for optimization to shortcut children views creation from backing nodes. The cache\n+   * should correspond to the supplied backing tree.\n+   */\n+  protected AbstractCompositeViewRead(\n+      CompositeViewType type, TreeNode backingNode, IntCache<ChildType> cache) {\n+    this.type = type;\n+    this.backingNode = backingNode;\n+    sizeCache = sizeImpl();\n+    childrenViewCache = cache == null ? createCache() : cache;\n+  }\n+\n+  /**\n+   * 'Transfers' the cache to a new Cache instance eliminating all the cached values from the\n+   * current view cache. This is made under assumption that the view instance this cache is", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2MTM3MQ=="}, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTQ3OTc0OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/cache/Cache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMToxMzozMVrOF9VMzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoxNDo0OVrOF9z6kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NDc5Nw==", "bodyText": "This looks the same as the Cache interface in the util module - is the plan to merge these interfaces at some point?", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399854797", "createdAt": "2020-03-29T21:13:31Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/cache/Cache.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.cache;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+/**\n+ * Cache\n+ *\n+ * @param <K> type of keys\n+ * @param <V> type of values\n+ */\n+public interface Cache<K, V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1ODAzMw==", "bodyText": "Yep ,that's currently TODO.\nWhen working on SSZ refactor I'm planning to eliminate util -> ssz module dependency and return back cache package to util module (since it looks pretty  generic)", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400358033", "createdAt": "2020-03-30T17:14:49Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/cache/Cache.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.cache;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+/**\n+ * Cache\n+ *\n+ * @param <K> type of keys\n+ * @param <V> type of values\n+ */\n+public interface Cache<K, V> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NDc5Nw=="}, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTg5NjMxOnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/state/MutableBeaconState.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxMjoxOFrOF9rtDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOToyMzozNFrOF-ku1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMzUwMA==", "bodyText": "Maybe we should keep these field indexes as constants somewhere.", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400223500", "createdAt": "2020-03-30T14:12:18Z", "author": {"login": "mbaxter"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/state/MutableBeaconState.java", "diffHunk": "@@ -14,78 +14,134 @@\n package tech.pegasys.artemis.datastructures.state;\n \n import com.google.common.primitives.UnsignedLong;\n+import java.util.function.Function;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.artemis.datastructures.blocks.BeaconBlockHeader;\n import tech.pegasys.artemis.datastructures.blocks.Eth1Data;\n import tech.pegasys.artemis.util.SSZTypes.Bitvector;\n+import tech.pegasys.artemis.util.SSZTypes.SSZBackingList;\n+import tech.pegasys.artemis.util.SSZTypes.SSZBackingVector;\n import tech.pegasys.artemis.util.SSZTypes.SSZMutableList;\n-import tech.pegasys.artemis.util.SSZTypes.SSZMutableRefList;\n import tech.pegasys.artemis.util.SSZTypes.SSZMutableVector;\n import tech.pegasys.artemis.util.backing.ContainerViewWriteRef;\n+import tech.pegasys.artemis.util.backing.view.AbstractBasicView;\n+import tech.pegasys.artemis.util.backing.view.BasicViews.Bytes32View;\n+import tech.pegasys.artemis.util.backing.view.BasicViews.UInt64View;\n+import tech.pegasys.artemis.util.backing.view.ViewUtils;\n \n public interface MutableBeaconState extends BeaconState, ContainerViewWriteRef {\n \n   static MutableBeaconState createBuilder() {\n-    return new BeaconStateImpl(true);\n+    return MutableBeaconStateImpl.createBuilder();\n   }\n \n   // Versioning\n \n-  void setGenesis_time(UnsignedLong genesis_time);\n+  default void setGenesis_time(UnsignedLong genesis_time) {\n+    set(0, new UInt64View(genesis_time));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32299f99b1a8b957cbad6e59c0095a48e94df638"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2NTIxMw==", "bodyText": "Enums would be nice for this purpose?", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400365213", "createdAt": "2020-03-30T17:25:52Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/state/MutableBeaconState.java", "diffHunk": "@@ -14,78 +14,134 @@\n package tech.pegasys.artemis.datastructures.state;\n \n import com.google.common.primitives.UnsignedLong;\n+import java.util.function.Function;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.artemis.datastructures.blocks.BeaconBlockHeader;\n import tech.pegasys.artemis.datastructures.blocks.Eth1Data;\n import tech.pegasys.artemis.util.SSZTypes.Bitvector;\n+import tech.pegasys.artemis.util.SSZTypes.SSZBackingList;\n+import tech.pegasys.artemis.util.SSZTypes.SSZBackingVector;\n import tech.pegasys.artemis.util.SSZTypes.SSZMutableList;\n-import tech.pegasys.artemis.util.SSZTypes.SSZMutableRefList;\n import tech.pegasys.artemis.util.SSZTypes.SSZMutableVector;\n import tech.pegasys.artemis.util.backing.ContainerViewWriteRef;\n+import tech.pegasys.artemis.util.backing.view.AbstractBasicView;\n+import tech.pegasys.artemis.util.backing.view.BasicViews.Bytes32View;\n+import tech.pegasys.artemis.util.backing.view.BasicViews.UInt64View;\n+import tech.pegasys.artemis.util.backing.view.ViewUtils;\n \n public interface MutableBeaconState extends BeaconState, ContainerViewWriteRef {\n \n   static MutableBeaconState createBuilder() {\n-    return new BeaconStateImpl(true);\n+    return MutableBeaconStateImpl.createBuilder();\n   }\n \n   // Versioning\n \n-  void setGenesis_time(UnsignedLong genesis_time);\n+  default void setGenesis_time(UnsignedLong genesis_time) {\n+    set(0, new UInt64View(genesis_time));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMzUwMA=="}, "originalCommit": {"oid": "32299f99b1a8b957cbad6e59c0095a48e94df638"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTExNDQ4Mw==", "bodyText": "@mbaxter @cemozerr I see your point and I also don't like those constants and absence of any type safety, but there we need some tradeoff.\nThough just creating constants for field numbers seems to me like a boilerplate code.\nThis is the best variant with static fields I can come up with: 27a1dac\nIt has at least additional value of combining fields with their order and type.\nWhat do you think?", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r401114483", "createdAt": "2020-03-31T18:10:59Z", "author": {"login": "Nashatyrev"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/state/MutableBeaconState.java", "diffHunk": "@@ -14,78 +14,134 @@\n package tech.pegasys.artemis.datastructures.state;\n \n import com.google.common.primitives.UnsignedLong;\n+import java.util.function.Function;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.artemis.datastructures.blocks.BeaconBlockHeader;\n import tech.pegasys.artemis.datastructures.blocks.Eth1Data;\n import tech.pegasys.artemis.util.SSZTypes.Bitvector;\n+import tech.pegasys.artemis.util.SSZTypes.SSZBackingList;\n+import tech.pegasys.artemis.util.SSZTypes.SSZBackingVector;\n import tech.pegasys.artemis.util.SSZTypes.SSZMutableList;\n-import tech.pegasys.artemis.util.SSZTypes.SSZMutableRefList;\n import tech.pegasys.artemis.util.SSZTypes.SSZMutableVector;\n import tech.pegasys.artemis.util.backing.ContainerViewWriteRef;\n+import tech.pegasys.artemis.util.backing.view.AbstractBasicView;\n+import tech.pegasys.artemis.util.backing.view.BasicViews.Bytes32View;\n+import tech.pegasys.artemis.util.backing.view.BasicViews.UInt64View;\n+import tech.pegasys.artemis.util.backing.view.ViewUtils;\n \n public interface MutableBeaconState extends BeaconState, ContainerViewWriteRef {\n \n   static MutableBeaconState createBuilder() {\n-    return new BeaconStateImpl(true);\n+    return MutableBeaconStateImpl.createBuilder();\n   }\n \n   // Versioning\n \n-  void setGenesis_time(UnsignedLong genesis_time);\n+  default void setGenesis_time(UnsignedLong genesis_time) {\n+    set(0, new UInt64View(genesis_time));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMzUwMA=="}, "originalCommit": {"oid": "32299f99b1a8b957cbad6e59c0095a48e94df638"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyNzU2NA==", "bodyText": "That looks good to me.", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r401127564", "createdAt": "2020-03-31T18:32:45Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/state/MutableBeaconState.java", "diffHunk": "@@ -14,78 +14,134 @@\n package tech.pegasys.artemis.datastructures.state;\n \n import com.google.common.primitives.UnsignedLong;\n+import java.util.function.Function;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.artemis.datastructures.blocks.BeaconBlockHeader;\n import tech.pegasys.artemis.datastructures.blocks.Eth1Data;\n import tech.pegasys.artemis.util.SSZTypes.Bitvector;\n+import tech.pegasys.artemis.util.SSZTypes.SSZBackingList;\n+import tech.pegasys.artemis.util.SSZTypes.SSZBackingVector;\n import tech.pegasys.artemis.util.SSZTypes.SSZMutableList;\n-import tech.pegasys.artemis.util.SSZTypes.SSZMutableRefList;\n import tech.pegasys.artemis.util.SSZTypes.SSZMutableVector;\n import tech.pegasys.artemis.util.backing.ContainerViewWriteRef;\n+import tech.pegasys.artemis.util.backing.view.AbstractBasicView;\n+import tech.pegasys.artemis.util.backing.view.BasicViews.Bytes32View;\n+import tech.pegasys.artemis.util.backing.view.BasicViews.UInt64View;\n+import tech.pegasys.artemis.util.backing.view.ViewUtils;\n \n public interface MutableBeaconState extends BeaconState, ContainerViewWriteRef {\n \n   static MutableBeaconState createBuilder() {\n-    return new BeaconStateImpl(true);\n+    return MutableBeaconStateImpl.createBuilder();\n   }\n \n   // Versioning\n \n-  void setGenesis_time(UnsignedLong genesis_time);\n+  default void setGenesis_time(UnsignedLong genesis_time) {\n+    set(0, new UInt64View(genesis_time));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMzUwMA=="}, "originalCommit": {"oid": "32299f99b1a8b957cbad6e59c0095a48e94df638"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1NzUwNg==", "bodyText": "+1 I like it!  \ud83c\udf89", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r401157506", "createdAt": "2020-03-31T19:22:59Z", "author": {"login": "mbaxter"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/state/MutableBeaconState.java", "diffHunk": "@@ -14,78 +14,134 @@\n package tech.pegasys.artemis.datastructures.state;\n \n import com.google.common.primitives.UnsignedLong;\n+import java.util.function.Function;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.artemis.datastructures.blocks.BeaconBlockHeader;\n import tech.pegasys.artemis.datastructures.blocks.Eth1Data;\n import tech.pegasys.artemis.util.SSZTypes.Bitvector;\n+import tech.pegasys.artemis.util.SSZTypes.SSZBackingList;\n+import tech.pegasys.artemis.util.SSZTypes.SSZBackingVector;\n import tech.pegasys.artemis.util.SSZTypes.SSZMutableList;\n-import tech.pegasys.artemis.util.SSZTypes.SSZMutableRefList;\n import tech.pegasys.artemis.util.SSZTypes.SSZMutableVector;\n import tech.pegasys.artemis.util.backing.ContainerViewWriteRef;\n+import tech.pegasys.artemis.util.backing.view.AbstractBasicView;\n+import tech.pegasys.artemis.util.backing.view.BasicViews.Bytes32View;\n+import tech.pegasys.artemis.util.backing.view.BasicViews.UInt64View;\n+import tech.pegasys.artemis.util.backing.view.ViewUtils;\n \n public interface MutableBeaconState extends BeaconState, ContainerViewWriteRef {\n \n   static MutableBeaconState createBuilder() {\n-    return new BeaconStateImpl(true);\n+    return MutableBeaconStateImpl.createBuilder();\n   }\n \n   // Versioning\n \n-  void setGenesis_time(UnsignedLong genesis_time);\n+  default void setGenesis_time(UnsignedLong genesis_time) {\n+    set(0, new UInt64View(genesis_time));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMzUwMA=="}, "originalCommit": {"oid": "32299f99b1a8b957cbad6e59c0095a48e94df638"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1Nzg0NA==", "bodyText": "(nit) I would probably rename field.getOrder to field.getIndex.", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r401157844", "createdAt": "2020-03-31T19:23:34Z", "author": {"login": "mbaxter"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/state/MutableBeaconState.java", "diffHunk": "@@ -14,78 +14,134 @@\n package tech.pegasys.artemis.datastructures.state;\n \n import com.google.common.primitives.UnsignedLong;\n+import java.util.function.Function;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.artemis.datastructures.blocks.BeaconBlockHeader;\n import tech.pegasys.artemis.datastructures.blocks.Eth1Data;\n import tech.pegasys.artemis.util.SSZTypes.Bitvector;\n+import tech.pegasys.artemis.util.SSZTypes.SSZBackingList;\n+import tech.pegasys.artemis.util.SSZTypes.SSZBackingVector;\n import tech.pegasys.artemis.util.SSZTypes.SSZMutableList;\n-import tech.pegasys.artemis.util.SSZTypes.SSZMutableRefList;\n import tech.pegasys.artemis.util.SSZTypes.SSZMutableVector;\n import tech.pegasys.artemis.util.backing.ContainerViewWriteRef;\n+import tech.pegasys.artemis.util.backing.view.AbstractBasicView;\n+import tech.pegasys.artemis.util.backing.view.BasicViews.Bytes32View;\n+import tech.pegasys.artemis.util.backing.view.BasicViews.UInt64View;\n+import tech.pegasys.artemis.util.backing.view.ViewUtils;\n \n public interface MutableBeaconState extends BeaconState, ContainerViewWriteRef {\n \n   static MutableBeaconState createBuilder() {\n-    return new BeaconStateImpl(true);\n+    return MutableBeaconStateImpl.createBuilder();\n   }\n \n   // Versioning\n \n-  void setGenesis_time(UnsignedLong genesis_time);\n+  default void setGenesis_time(UnsignedLong genesis_time) {\n+    set(0, new UInt64View(genesis_time));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMzUwMA=="}, "originalCommit": {"oid": "32299f99b1a8b957cbad6e59c0095a48e94df638"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTk0NTcwOnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoyMjozMFrOF9sL6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODozNzo0OFrOF-jEuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzMTQwMA==", "bodyText": "Should we be passing a Supplier for the backingNode so that we only produce the backing tree if we need it??\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected AbstractCompositeViewRead(CompositeViewType type, TreeNode backingNode) {\n          \n          \n            \n              protected AbstractCompositeViewRead(CompositeViewType type, Supplier<TreeNode> backingNode) {", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400231400", "createdAt": "2020-03-30T14:22:30Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.view;\n+\n+import tech.pegasys.artemis.util.backing.CompositeViewRead;\n+import tech.pegasys.artemis.util.backing.ViewRead;\n+import tech.pegasys.artemis.util.backing.cache.ArrayCache;\n+import tech.pegasys.artemis.util.backing.cache.IntCache;\n+import tech.pegasys.artemis.util.backing.tree.TreeNode;\n+import tech.pegasys.artemis.util.backing.type.CompositeViewType;\n+\n+/**\n+ * Base backing view class for immutable composite views (lists, vectors, containers)\n+ *\n+ * <p>It caches it's child view instances so that if the underlying tree nodes are not changed (in\n+ * the corresponding mutable classes) the instances are not recreated from tree nodes on later\n+ * access.\n+ *\n+ * <p>Thought internally this class has a mutable cache it may be thought of as immutable instance\n+ * and used safely across threads\n+ *\n+ * @param <ChildType> the type of children. For heterogeneous composites (like container) this type\n+ *     would be just generic {@link ViewRead}\n+ */\n+public abstract class AbstractCompositeViewRead<ChildType extends ViewRead>\n+    implements CompositeViewRead<ChildType> {\n+\n+  private IntCache<ChildType> childrenViewCache;\n+  private final int sizeCache;\n+  private final CompositeViewType type;\n+  private final TreeNode backingNode;\n+\n+  /** Creates an instance from a type and a backing node */\n+  protected AbstractCompositeViewRead(CompositeViewType type, TreeNode backingNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32299f99b1a8b957cbad6e59c0095a48e94df638"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4OTU4OQ==", "bodyText": "What use cases do you mean here?\nLike when you create an immutable container with field values?  Like here:\nhttps://github.com/PegaSysEng/teku/blob/a01633de6ded2fb9d7c464dd8bd73a9cbb1f46d7/ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/state/Fork.java#L59-L65\nOr something different?", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400389589", "createdAt": "2020-03-30T18:04:16Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.view;\n+\n+import tech.pegasys.artemis.util.backing.CompositeViewRead;\n+import tech.pegasys.artemis.util.backing.ViewRead;\n+import tech.pegasys.artemis.util.backing.cache.ArrayCache;\n+import tech.pegasys.artemis.util.backing.cache.IntCache;\n+import tech.pegasys.artemis.util.backing.tree.TreeNode;\n+import tech.pegasys.artemis.util.backing.type.CompositeViewType;\n+\n+/**\n+ * Base backing view class for immutable composite views (lists, vectors, containers)\n+ *\n+ * <p>It caches it's child view instances so that if the underlying tree nodes are not changed (in\n+ * the corresponding mutable classes) the instances are not recreated from tree nodes on later\n+ * access.\n+ *\n+ * <p>Thought internally this class has a mutable cache it may be thought of as immutable instance\n+ * and used safely across threads\n+ *\n+ * @param <ChildType> the type of children. For heterogeneous composites (like container) this type\n+ *     would be just generic {@link ViewRead}\n+ */\n+public abstract class AbstractCompositeViewRead<ChildType extends ViewRead>\n+    implements CompositeViewRead<ChildType> {\n+\n+  private IntCache<ChildType> childrenViewCache;\n+  private final int sizeCache;\n+  private final CompositeViewType type;\n+  private final TreeNode backingNode;\n+\n+  /** Creates an instance from a type and a backing node */\n+  protected AbstractCompositeViewRead(CompositeViewType type, TreeNode backingNode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzMTQwMA=="}, "originalCommit": {"oid": "32299f99b1a8b957cbad6e59c0095a48e94df638"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2MzI0Ng==", "bodyText": "Yeah - for example here we create a few intermediate versions of a Validator and we build a tree for each one even though we shouldn't need it for the intermediate ones.", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400463246", "createdAt": "2020-03-30T20:10:10Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.view;\n+\n+import tech.pegasys.artemis.util.backing.CompositeViewRead;\n+import tech.pegasys.artemis.util.backing.ViewRead;\n+import tech.pegasys.artemis.util.backing.cache.ArrayCache;\n+import tech.pegasys.artemis.util.backing.cache.IntCache;\n+import tech.pegasys.artemis.util.backing.tree.TreeNode;\n+import tech.pegasys.artemis.util.backing.type.CompositeViewType;\n+\n+/**\n+ * Base backing view class for immutable composite views (lists, vectors, containers)\n+ *\n+ * <p>It caches it's child view instances so that if the underlying tree nodes are not changed (in\n+ * the corresponding mutable classes) the instances are not recreated from tree nodes on later\n+ * access.\n+ *\n+ * <p>Thought internally this class has a mutable cache it may be thought of as immutable instance\n+ * and used safely across threads\n+ *\n+ * @param <ChildType> the type of children. For heterogeneous composites (like container) this type\n+ *     would be just generic {@link ViewRead}\n+ */\n+public abstract class AbstractCompositeViewRead<ChildType extends ViewRead>\n+    implements CompositeViewRead<ChildType> {\n+\n+  private IntCache<ChildType> childrenViewCache;\n+  private final int sizeCache;\n+  private final CompositeViewType type;\n+  private final TreeNode backingNode;\n+\n+  /** Creates an instance from a type and a backing node */\n+  protected AbstractCompositeViewRead(CompositeViewType type, TreeNode backingNode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzMTQwMA=="}, "originalCommit": {"oid": "32299f99b1a8b957cbad6e59c0095a48e94df638"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEzMDY4MQ==", "bodyText": "Yeah I see what you mean. That indeed looks sub optimal.\nHowever I would refrain from introducing this lambda for all views since it would most likely have negative overall performance impact, since normally a View either should already has backing tree node or would need it later.\nSo the only acceptable solution I see is to refactor AbstractImmutableContainer for such cases but I would not invest time in it as long as this is not a bottleneck now (i.e. avoid preliminary optimization).\nThe case you posted I optimized in the this way: 1fe4589 It is more verbose but shouldn't have overhead anymore : the Validator tree (created internally) should be used later.", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r401130681", "createdAt": "2020-03-31T18:37:48Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.view;\n+\n+import tech.pegasys.artemis.util.backing.CompositeViewRead;\n+import tech.pegasys.artemis.util.backing.ViewRead;\n+import tech.pegasys.artemis.util.backing.cache.ArrayCache;\n+import tech.pegasys.artemis.util.backing.cache.IntCache;\n+import tech.pegasys.artemis.util.backing.tree.TreeNode;\n+import tech.pegasys.artemis.util.backing.type.CompositeViewType;\n+\n+/**\n+ * Base backing view class for immutable composite views (lists, vectors, containers)\n+ *\n+ * <p>It caches it's child view instances so that if the underlying tree nodes are not changed (in\n+ * the corresponding mutable classes) the instances are not recreated from tree nodes on later\n+ * access.\n+ *\n+ * <p>Thought internally this class has a mutable cache it may be thought of as immutable instance\n+ * and used safely across threads\n+ *\n+ * @param <ChildType> the type of children. For heterogeneous composites (like container) this type\n+ *     would be just generic {@link ViewRead}\n+ */\n+public abstract class AbstractCompositeViewRead<ChildType extends ViewRead>\n+    implements CompositeViewRead<ChildType> {\n+\n+  private IntCache<ChildType> childrenViewCache;\n+  private final int sizeCache;\n+  private final CompositeViewType type;\n+  private final TreeNode backingNode;\n+\n+  /** Creates an instance from a type and a backing node */\n+  protected AbstractCompositeViewRead(CompositeViewType type, TreeNode backingNode) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzMTQwMA=="}, "originalCommit": {"oid": "32299f99b1a8b957cbad6e59c0095a48e94df638"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjEyNTA1OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/ListViewReadImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDo1ODo1OVrOF9t9Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDo1ODo1OVrOF9t9Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2MDQxMQ==", "bodyText": "Stray comments", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400260411", "createdAt": "2020-03-30T14:58:59Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/ListViewReadImpl.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.view;\n+\n+import java.util.Arrays;\n+import tech.pegasys.artemis.util.backing.ListViewRead;\n+import tech.pegasys.artemis.util.backing.ListViewWrite;\n+import tech.pegasys.artemis.util.backing.VectorViewRead;\n+import tech.pegasys.artemis.util.backing.ViewRead;\n+import tech.pegasys.artemis.util.backing.cache.IntCache;\n+import tech.pegasys.artemis.util.backing.tree.TreeNode;\n+import tech.pegasys.artemis.util.backing.type.BasicViewTypes;\n+import tech.pegasys.artemis.util.backing.type.ContainerViewType;\n+import tech.pegasys.artemis.util.backing.type.ListViewType;\n+import tech.pegasys.artemis.util.backing.type.VectorViewType;\n+import tech.pegasys.artemis.util.backing.view.BasicViews.UInt64View;\n+import tech.pegasys.artemis.util.backing.view.ListViewWriteImpl.ListContainerWrite;\n+\n+/**\n+ * View of SSZ List type. This view is compatible with and implemented as a <code>\n+ * Container[Vector(maxLength), size]</code> under the cover.\n+ */\n+public class ListViewReadImpl<ElementType extends ViewRead> implements ListViewRead<ElementType> {\n+\n+  static class ListContainerRead<ElementType extends ViewRead> extends ContainerViewReadImpl {\n+\n+    private static <C extends ViewRead>\n+        ContainerViewType<ListContainerRead<C>> vectorTypeToContainerType(\n+            VectorViewType<C> vectorType) {\n+      return new ContainerViewType<>(\n+          Arrays.asList(vectorType, BasicViewTypes.UINT64_TYPE), ListContainerRead::new);\n+    }\n+\n+    public ListContainerRead(VectorViewType<ElementType> vectorType) {\n+      super(vectorTypeToContainerType(vectorType));\n+    }\n+\n+    ListContainerRead(\n+        ContainerViewType<ListContainerRead<ElementType>> containerType, TreeNode backingNode) {\n+      super(containerType, backingNode);\n+    }\n+\n+    public ListContainerRead(\n+        VectorViewType<ElementType> vectorType, TreeNode backingNode, IntCache<ViewRead> cache) {\n+      super(vectorTypeToContainerType(vectorType), backingNode, cache);\n+    }\n+\n+    public int getSize() {\n+      return (int) ((UInt64View) get(1)).longValue();\n+    }\n+\n+    public VectorViewRead<ElementType> getData() {\n+      return getAny(0);\n+    }\n+\n+    @Override\n+    public ListContainerWrite<ElementType, ?> createWritableCopy() {\n+      return new ListContainerWrite<>(this);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    VectorViewType<ElementType> getVectorType() {\n+      return (VectorViewType<ElementType>) getType().getChildType(0);\n+    }\n+  }\n+\n+  private final ListViewType<ElementType> type;\n+  private final ListContainerRead<ElementType> container;\n+  private final int cachedSize;\n+  //  private final int size;\n+  //  private final VectorViewRead<C> vector;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32299f99b1a8b957cbad6e59c0095a48e94df638"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjEzODQxOnYy", "diffSide": "RIGHT", "path": "storage/src/test/java/tech/pegasys/artemis/storage/VersionedDatabaseFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTowMTo1MlrOF9uF5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTowMTo1MlrOF9uF5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2MjYzMA==", "bodyText": "good catch \ud83c\udf89", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400262630", "createdAt": "2020-03-30T15:01:52Z", "author": {"login": "mbaxter"}, "path": "storage/src/test/java/tech/pegasys/artemis/storage/VersionedDatabaseFactoryTest.java", "diffHunk": "@@ -39,10 +39,11 @@ public void setup() {\n   @Test\n   public void createDatabase_fromEmptyDataDir() throws Exception {\n     final VersionedDatabaseFactory dbFactory = new VersionedDatabaseFactory(config);\n-    final Database db = dbFactory.createDatabase();\n-    assertThat(db).isNotNull();\n+    try (final Database db = dbFactory.createDatabase()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32299f99b1a8b957cbad6e59c0095a48e94df638"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1732, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}