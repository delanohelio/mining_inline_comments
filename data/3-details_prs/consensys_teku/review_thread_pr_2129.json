{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMjEwOTY4", "number": 2129, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODoxMjoyOFrOEEy_Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjoyMTo0MFrOEE3liQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDY1MTQ3OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/AttesterSlashingStateTransitionValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODoxMjoyOFrOGipOOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOToxNDo0NlrOGirMcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MDE1Mw==", "bodyText": "I'd probably make this method private and have a second public method that accepts a non-optional set of precalculated indices.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public Optional<OperationInvalidReason> validateSlashing(\n          \n          \n            \n                  final BeaconState state,\n          \n          \n            \n                  final AttesterSlashing attesterSlashing,\n          \n          \n            \n                  final Optional<Set<UnsignedLong>> intersectingIndices) {\n          \n          \n            \n              public Optional<OperationInvalidReason> validateSlashing(\n          \n          \n            \n                  final BeaconState state,\n          \n          \n            \n                  final AttesterSlashing attesterSlashing,\n          \n          \n            \n                  final Set<UnsignedLong> intersectingIndices) {\n          \n          \n            \n                     return validateSlashing(state, attesterSlashing, Optional.of(intersectingIndices));\n          \n          \n            \n               }\n          \n          \n            \n            \n          \n          \n            \n              private Optional<OperationInvalidReason> validateSlashing(\n          \n          \n            \n                  final BeaconState state,\n          \n          \n            \n                  final AttesterSlashing attesterSlashing,\n          \n          \n            \n                  final Optional<Set<UnsignedLong>> intersectingIndices) {", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r438980153", "createdAt": "2020-06-11T18:12:28Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/AttesterSlashingStateTransitionValidator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.operationvalidators;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.check;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.firstOf;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_slashable_attestation_data;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_valid_indexed_attestation;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.ValidatorsUtil.is_slashable_validator;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public class AttesterSlashingStateTransitionValidator {\n+\n+  private List<UnsignedLong> indicesToSlash;\n+\n+  public Optional<OperationInvalidReason> validateSlashing(\n+      final BeaconState state,\n+      final AttesterSlashing attesterSlashing,\n+      final Optional<Set<UnsignedLong>> intersectingIndices) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxMjQ2NQ==", "bodyText": "Makes sense. Done.", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439012465", "createdAt": "2020-06-11T19:14:46Z", "author": {"login": "cemozerr"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/AttesterSlashingStateTransitionValidator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.operationvalidators;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.check;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.firstOf;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_slashable_attestation_data;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_valid_indexed_attestation;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.ValidatorsUtil.is_slashable_validator;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public class AttesterSlashingStateTransitionValidator {\n+\n+  private List<UnsignedLong> indicesToSlash;\n+\n+  public Optional<OperationInvalidReason> validateSlashing(\n+      final BeaconState state,\n+      final AttesterSlashing attesterSlashing,\n+      final Optional<Set<UnsignedLong>> intersectingIndices) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MDE1Mw=="}, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDc1OTEyOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/AttesterSlashingStateTransitionValidator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODo0NjoxNVrOGiqTgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTo0NDo0MVrOGisH7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5Nzg4OQ==", "bodyText": "It feels odd to be saving this information to a member variable and resetting it on every call.  What if we instead return a SlashingValidationResult that has a slashedIndices field and an optional OperationInvalidReason?", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r438997889", "createdAt": "2020-06-11T18:46:15Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/AttesterSlashingStateTransitionValidator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.operationvalidators;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.check;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.firstOf;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_slashable_attestation_data;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_valid_indexed_attestation;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.ValidatorsUtil.is_slashable_validator;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public class AttesterSlashingStateTransitionValidator {\n+\n+  private List<UnsignedLong> indicesToSlash;\n+\n+  public Optional<OperationInvalidReason> validateSlashing(\n+      final BeaconState state,\n+      final AttesterSlashing attesterSlashing,\n+      final Optional<Set<UnsignedLong>> intersectingIndices) {\n+    indicesToSlash = new ArrayList<>();\n+    IndexedAttestation attestation_1 = attesterSlashing.getAttestation_1();\n+    IndexedAttestation attestation_2 = attesterSlashing.getAttestation_2();\n+    return firstOf(\n+        () ->\n+            check(\n+                is_slashable_attestation_data(attestation_1.getData(), attestation_2.getData()),\n+                AttesterSlashingInvalidReason.ATTESTATIONS_NOT_SLASHABLE),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_1).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_1_INVALID),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_2).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_2_INVALID),\n+        () -> {\n+          boolean slashed_any = false;\n+\n+          Set<UnsignedLong> indices =\n+              intersectingIndices.orElse(\n+                  Sets.intersection(\n+                      new TreeSet<>(\n+                          attestation_1\n+                              .getAttesting_indices()\n+                              .asList()), // TreeSet as must be sorted\n+                      new HashSet<>(attestation_2.getAttesting_indices().asList())));\n+\n+          for (UnsignedLong index : indices) {\n+            if (is_slashable_validator(\n+                state.getValidators().get(toIntExact(index.longValue())),\n+                get_current_epoch(state))) {\n+              indicesToSlash.add(index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxNDYwNw==", "bodyText": "Currently we use the same utilities for by using OperationInvalidReason in all operations. I agree it's a bit odd, but I don't know a simpler way to return this information from this calculation without breaking compatibility with the utilities we use such as firstOf and check.", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439014607", "createdAt": "2020-06-11T19:19:13Z", "author": {"login": "cemozerr"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/AttesterSlashingStateTransitionValidator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.operationvalidators;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.check;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.firstOf;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_slashable_attestation_data;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_valid_indexed_attestation;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.ValidatorsUtil.is_slashable_validator;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public class AttesterSlashingStateTransitionValidator {\n+\n+  private List<UnsignedLong> indicesToSlash;\n+\n+  public Optional<OperationInvalidReason> validateSlashing(\n+      final BeaconState state,\n+      final AttesterSlashing attesterSlashing,\n+      final Optional<Set<UnsignedLong>> intersectingIndices) {\n+    indicesToSlash = new ArrayList<>();\n+    IndexedAttestation attestation_1 = attesterSlashing.getAttestation_1();\n+    IndexedAttestation attestation_2 = attesterSlashing.getAttestation_2();\n+    return firstOf(\n+        () ->\n+            check(\n+                is_slashable_attestation_data(attestation_1.getData(), attestation_2.getData()),\n+                AttesterSlashingInvalidReason.ATTESTATIONS_NOT_SLASHABLE),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_1).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_1_INVALID),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_2).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_2_INVALID),\n+        () -> {\n+          boolean slashed_any = false;\n+\n+          Set<UnsignedLong> indices =\n+              intersectingIndices.orElse(\n+                  Sets.intersection(\n+                      new TreeSet<>(\n+                          attestation_1\n+                              .getAttesting_indices()\n+                              .asList()), // TreeSet as must be sorted\n+                      new HashSet<>(attestation_2.getAttesting_indices().asList())));\n+\n+          for (UnsignedLong index : indices) {\n+            if (is_slashable_validator(\n+                state.getValidators().get(toIntExact(index.longValue())),\n+                get_current_epoch(state))) {\n+              indicesToSlash.add(index);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5Nzg4OQ=="}, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMTAwMg==", "bodyText": "What about something like:\npublic SlashingValidationResult validateSlashing(final BeaconState state, final AttesterSlashing slashing) {\n   final List<UnsignedLong> slashedIndices = new ArrayList<>();\n   Optional<OperationInvalidReason> failureReason = runChecks(state, slashing, slashedIndices);\n   return failureReason.map(SlashingValidationResult::failedResult)\n      .orElseGet(() -> SlashingValidationResult.successful(slashedIndices));\n}\n\nprivate Optional<OperationInvalidReason> runChecks(final BeaconState state, final AttesterSlashing attesterSlashing, final List<UnsignedLong> slashedIndices) {\n  firstOf(...);\n}", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439021002", "createdAt": "2020-06-11T19:31:33Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/AttesterSlashingStateTransitionValidator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.operationvalidators;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.check;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.firstOf;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_slashable_attestation_data;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_valid_indexed_attestation;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.ValidatorsUtil.is_slashable_validator;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public class AttesterSlashingStateTransitionValidator {\n+\n+  private List<UnsignedLong> indicesToSlash;\n+\n+  public Optional<OperationInvalidReason> validateSlashing(\n+      final BeaconState state,\n+      final AttesterSlashing attesterSlashing,\n+      final Optional<Set<UnsignedLong>> intersectingIndices) {\n+    indicesToSlash = new ArrayList<>();\n+    IndexedAttestation attestation_1 = attesterSlashing.getAttestation_1();\n+    IndexedAttestation attestation_2 = attesterSlashing.getAttestation_2();\n+    return firstOf(\n+        () ->\n+            check(\n+                is_slashable_attestation_data(attestation_1.getData(), attestation_2.getData()),\n+                AttesterSlashingInvalidReason.ATTESTATIONS_NOT_SLASHABLE),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_1).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_1_INVALID),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_2).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_2_INVALID),\n+        () -> {\n+          boolean slashed_any = false;\n+\n+          Set<UnsignedLong> indices =\n+              intersectingIndices.orElse(\n+                  Sets.intersection(\n+                      new TreeSet<>(\n+                          attestation_1\n+                              .getAttesting_indices()\n+                              .asList()), // TreeSet as must be sorted\n+                      new HashSet<>(attestation_2.getAttesting_indices().asList())));\n+\n+          for (UnsignedLong index : indices) {\n+            if (is_slashable_validator(\n+                state.getValidators().get(toIntExact(index.longValue())),\n+                get_current_epoch(state))) {\n+              indicesToSlash.add(index);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5Nzg4OQ=="}, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyNzY5Mw==", "bodyText": "I don't want to create a new SlashingValidationResult object because it might make deduplication of these state transition validators in the future harder, but I like the idea of passing in a List reference.", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439027693", "createdAt": "2020-06-11T19:44:41Z", "author": {"login": "cemozerr"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/AttesterSlashingStateTransitionValidator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.operationvalidators;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.check;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.firstOf;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_slashable_attestation_data;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_valid_indexed_attestation;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.ValidatorsUtil.is_slashable_validator;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public class AttesterSlashingStateTransitionValidator {\n+\n+  private List<UnsignedLong> indicesToSlash;\n+\n+  public Optional<OperationInvalidReason> validateSlashing(\n+      final BeaconState state,\n+      final AttesterSlashing attesterSlashing,\n+      final Optional<Set<UnsignedLong>> intersectingIndices) {\n+    indicesToSlash = new ArrayList<>();\n+    IndexedAttestation attestation_1 = attesterSlashing.getAttestation_1();\n+    IndexedAttestation attestation_2 = attesterSlashing.getAttestation_2();\n+    return firstOf(\n+        () ->\n+            check(\n+                is_slashable_attestation_data(attestation_1.getData(), attestation_2.getData()),\n+                AttesterSlashingInvalidReason.ATTESTATIONS_NOT_SLASHABLE),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_1).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_1_INVALID),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_2).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_2_INVALID),\n+        () -> {\n+          boolean slashed_any = false;\n+\n+          Set<UnsignedLong> indices =\n+              intersectingIndices.orElse(\n+                  Sets.intersection(\n+                      new TreeSet<>(\n+                          attestation_1\n+                              .getAttesting_indices()\n+                              .asList()), // TreeSet as must be sorted\n+                      new HashSet<>(attestation_2.getAttesting_indices().asList())));\n+\n+          for (UnsignedLong index : indices) {\n+            if (is_slashable_validator(\n+                state.getValidators().get(toIntExact(index.longValue())),\n+                get_current_epoch(state))) {\n+              indicesToSlash.add(index);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5Nzg4OQ=="}, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDc3MDAyOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/AttesterSlashingStateTransitionValidator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODo0OTozNlrOGiqaWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTozMDo1N1rOGirskA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTY0Mw==", "bodyText": "What if we move the intersecting indices calculation to AttesterSlashing.getSlashedValidatorIndices and keep a cache there?  That way we can centralize the calculation and we don't need the intersectingIndices argument.", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r438999643", "createdAt": "2020-06-11T18:49:36Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/AttesterSlashingStateTransitionValidator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.operationvalidators;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.check;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.firstOf;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_slashable_attestation_data;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_valid_indexed_attestation;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.ValidatorsUtil.is_slashable_validator;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public class AttesterSlashingStateTransitionValidator {\n+\n+  private List<UnsignedLong> indicesToSlash;\n+\n+  public Optional<OperationInvalidReason> validateSlashing(\n+      final BeaconState state,\n+      final AttesterSlashing attesterSlashing,\n+      final Optional<Set<UnsignedLong>> intersectingIndices) {\n+    indicesToSlash = new ArrayList<>();\n+    IndexedAttestation attestation_1 = attesterSlashing.getAttestation_1();\n+    IndexedAttestation attestation_2 = attesterSlashing.getAttestation_2();\n+    return firstOf(\n+        () ->\n+            check(\n+                is_slashable_attestation_data(attestation_1.getData(), attestation_2.getData()),\n+                AttesterSlashingInvalidReason.ATTESTATIONS_NOT_SLASHABLE),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_1).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_1_INVALID),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_2).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_2_INVALID),\n+        () -> {\n+          boolean slashed_any = false;\n+\n+          Set<UnsignedLong> indices =\n+              intersectingIndices.orElse(\n+                  Sets.intersection(\n+                      new TreeSet<>(\n+                          attestation_1\n+                              .getAttesting_indices()\n+                              .asList()), // TreeSet as must be sorted\n+                      new HashSet<>(attestation_2.getAttesting_indices().asList())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxNDg3Mg==", "bodyText": "That makes sense. I'll try that.", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439014872", "createdAt": "2020-06-11T19:19:43Z", "author": {"login": "cemozerr"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/AttesterSlashingStateTransitionValidator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.operationvalidators;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.check;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.firstOf;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_slashable_attestation_data;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_valid_indexed_attestation;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.ValidatorsUtil.is_slashable_validator;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public class AttesterSlashingStateTransitionValidator {\n+\n+  private List<UnsignedLong> indicesToSlash;\n+\n+  public Optional<OperationInvalidReason> validateSlashing(\n+      final BeaconState state,\n+      final AttesterSlashing attesterSlashing,\n+      final Optional<Set<UnsignedLong>> intersectingIndices) {\n+    indicesToSlash = new ArrayList<>();\n+    IndexedAttestation attestation_1 = attesterSlashing.getAttestation_1();\n+    IndexedAttestation attestation_2 = attesterSlashing.getAttestation_2();\n+    return firstOf(\n+        () ->\n+            check(\n+                is_slashable_attestation_data(attestation_1.getData(), attestation_2.getData()),\n+                AttesterSlashingInvalidReason.ATTESTATIONS_NOT_SLASHABLE),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_1).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_1_INVALID),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_2).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_2_INVALID),\n+        () -> {\n+          boolean slashed_any = false;\n+\n+          Set<UnsignedLong> indices =\n+              intersectingIndices.orElse(\n+                  Sets.intersection(\n+                      new TreeSet<>(\n+                          attestation_1\n+                              .getAttesting_indices()\n+                              .asList()), // TreeSet as must be sorted\n+                      new HashSet<>(attestation_2.getAttesting_indices().asList())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTY0Mw=="}, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMDY4OA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439020688", "createdAt": "2020-06-11T19:30:57Z", "author": {"login": "cemozerr"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/AttesterSlashingStateTransitionValidator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.operationvalidators;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.check;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.firstOf;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_slashable_attestation_data;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_valid_indexed_attestation;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.ValidatorsUtil.is_slashable_validator;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public class AttesterSlashingStateTransitionValidator {\n+\n+  private List<UnsignedLong> indicesToSlash;\n+\n+  public Optional<OperationInvalidReason> validateSlashing(\n+      final BeaconState state,\n+      final AttesterSlashing attesterSlashing,\n+      final Optional<Set<UnsignedLong>> intersectingIndices) {\n+    indicesToSlash = new ArrayList<>();\n+    IndexedAttestation attestation_1 = attesterSlashing.getAttestation_1();\n+    IndexedAttestation attestation_2 = attesterSlashing.getAttestation_2();\n+    return firstOf(\n+        () ->\n+            check(\n+                is_slashable_attestation_data(attestation_1.getData(), attestation_2.getData()),\n+                AttesterSlashingInvalidReason.ATTESTATIONS_NOT_SLASHABLE),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_1).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_1_INVALID),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_2).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_2_INVALID),\n+        () -> {\n+          boolean slashed_any = false;\n+\n+          Set<UnsignedLong> indices =\n+              intersectingIndices.orElse(\n+                  Sets.intersection(\n+                      new TreeSet<>(\n+                          attestation_1\n+                              .getAttesting_indices()\n+                              .asList()), // TreeSet as must be sorted\n+                      new HashSet<>(attestation_2.getAttesting_indices().asList())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTY0Mw=="}, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDc4NjM3OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttesterSlashingValidatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODo1NDozNFrOGiqk2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTozNToxNlrOGir1JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwMjMyOA==", "bodyText": "Do you need these block import calls?", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439002328", "createdAt": "2020-06-11T18:54:34Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttesterSlashingValidatorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.ACCEPT;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.IGNORE;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.REJECT;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.operationvalidators.AttesterSlashingStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.datastructures.util.MockStartValidatorKeyPairFactory;\n+import tech.pegasys.teku.statetransition.BeaconChainUtil;\n+import tech.pegasys.teku.storage.client.MemoryOnlyRecentChainData;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class AttesterSlashingValidatorTest {\n+  private static final List<BLSKeyPair> VALIDATOR_KEYS =\n+      new MockStartValidatorKeyPairFactory().generateKeyPairs(0, 25);\n+  private DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private RecentChainData recentChainData;\n+  private BeaconChainUtil beaconChainUtil;\n+  private AttesterSlashingValidator attesterSlashingValidator;\n+  private AttesterSlashingStateTransitionValidator stateTransitionValidator;\n+\n+  @BeforeEach\n+  void beforeEach() {\n+    recentChainData = MemoryOnlyRecentChainData.create(new EventBus());\n+    beaconChainUtil = BeaconChainUtil.create(recentChainData, VALIDATOR_KEYS, true);\n+    stateTransitionValidator = mock(AttesterSlashingStateTransitionValidator.class);\n+    attesterSlashingValidator =\n+        new AttesterSlashingValidator(recentChainData, stateTransitionValidator);\n+  }\n+\n+  @Test\n+  public void shouldAcceptValidAttesterSlashing() throws Exception {\n+    beaconChainUtil.initializeStorage();\n+    beaconChainUtil.createAndImportBlockAtSlot(6);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMjg4NA==", "bodyText": "Removed.", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439022884", "createdAt": "2020-06-11T19:35:16Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttesterSlashingValidatorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.ACCEPT;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.IGNORE;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.REJECT;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.operationvalidators.AttesterSlashingStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.datastructures.util.MockStartValidatorKeyPairFactory;\n+import tech.pegasys.teku.statetransition.BeaconChainUtil;\n+import tech.pegasys.teku.storage.client.MemoryOnlyRecentChainData;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class AttesterSlashingValidatorTest {\n+  private static final List<BLSKeyPair> VALIDATOR_KEYS =\n+      new MockStartValidatorKeyPairFactory().generateKeyPairs(0, 25);\n+  private DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private RecentChainData recentChainData;\n+  private BeaconChainUtil beaconChainUtil;\n+  private AttesterSlashingValidator attesterSlashingValidator;\n+  private AttesterSlashingStateTransitionValidator stateTransitionValidator;\n+\n+  @BeforeEach\n+  void beforeEach() {\n+    recentChainData = MemoryOnlyRecentChainData.create(new EventBus());\n+    beaconChainUtil = BeaconChainUtil.create(recentChainData, VALIDATOR_KEYS, true);\n+    stateTransitionValidator = mock(AttesterSlashingStateTransitionValidator.class);\n+    attesterSlashingValidator =\n+        new AttesterSlashingValidator(recentChainData, stateTransitionValidator);\n+  }\n+\n+  @Test\n+  public void shouldAcceptValidAttesterSlashing() throws Exception {\n+    beaconChainUtil.initializeStorage();\n+    beaconChainUtil.createAndImportBlockAtSlot(6);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwMjMyOA=="}, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDc5MDcwOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttesterSlashingValidatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODo1NTo1N1rOGiqnvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODo1NTo1N1rOGiqnvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwMzA2OA==", "bodyText": "(optional) ChainUpdater is a newer utility to use for importing blocks", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439003068", "createdAt": "2020-06-11T18:55:57Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttesterSlashingValidatorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.ACCEPT;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.IGNORE;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.REJECT;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.operationvalidators.AttesterSlashingStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.datastructures.util.MockStartValidatorKeyPairFactory;\n+import tech.pegasys.teku.statetransition.BeaconChainUtil;\n+import tech.pegasys.teku.storage.client.MemoryOnlyRecentChainData;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class AttesterSlashingValidatorTest {\n+  private static final List<BLSKeyPair> VALIDATOR_KEYS =\n+      new MockStartValidatorKeyPairFactory().generateKeyPairs(0, 25);\n+  private DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private RecentChainData recentChainData;\n+  private BeaconChainUtil beaconChainUtil;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDc5NzE2OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttesterSlashingValidatorTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODo1ODowMFrOGiqr6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTo1NTo1OVrOGisdIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNDEzNg==", "bodyText": "Do you need a real RecentChainData instance?  I think you can just mock it to return a best state.", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439004136", "createdAt": "2020-06-11T18:58:00Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttesterSlashingValidatorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.ACCEPT;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.IGNORE;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.REJECT;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.operationvalidators.AttesterSlashingStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.datastructures.util.MockStartValidatorKeyPairFactory;\n+import tech.pegasys.teku.statetransition.BeaconChainUtil;\n+import tech.pegasys.teku.storage.client.MemoryOnlyRecentChainData;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class AttesterSlashingValidatorTest {\n+  private static final List<BLSKeyPair> VALIDATOR_KEYS =\n+      new MockStartValidatorKeyPairFactory().generateKeyPairs(0, 25);\n+  private DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private RecentChainData recentChainData;\n+  private BeaconChainUtil beaconChainUtil;\n+  private AttesterSlashingValidator attesterSlashingValidator;\n+  private AttesterSlashingStateTransitionValidator stateTransitionValidator;\n+\n+  @BeforeEach\n+  void beforeEach() {\n+    recentChainData = MemoryOnlyRecentChainData.create(new EventBus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMzk3Ng==", "bodyText": "Isn't it preferable to use a real object? I thought we preferred using real objects over mocks.", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439023976", "createdAt": "2020-06-11T19:37:13Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttesterSlashingValidatorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.ACCEPT;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.IGNORE;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.REJECT;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.operationvalidators.AttesterSlashingStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.datastructures.util.MockStartValidatorKeyPairFactory;\n+import tech.pegasys.teku.statetransition.BeaconChainUtil;\n+import tech.pegasys.teku.storage.client.MemoryOnlyRecentChainData;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class AttesterSlashingValidatorTest {\n+  private static final List<BLSKeyPair> VALIDATOR_KEYS =\n+      new MockStartValidatorKeyPairFactory().generateKeyPairs(0, 25);\n+  private DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private RecentChainData recentChainData;\n+  private BeaconChainUtil beaconChainUtil;\n+  private AttesterSlashingValidator attesterSlashingValidator;\n+  private AttesterSlashingStateTransitionValidator stateTransitionValidator;\n+\n+  @BeforeEach\n+  void beforeEach() {\n+    recentChainData = MemoryOnlyRecentChainData.create(new EventBus());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNDEzNg=="}, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyODQxOQ==", "bodyText": "Well, I was going to suggest using InMemoryStorageSystem.createEmptyV3StorageSystem which is MORE real :). But then I thought since you only need the one method maybe mocking is simpler.  And everything else is mocked basically.", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439028419", "createdAt": "2020-06-11T19:46:05Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttesterSlashingValidatorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.ACCEPT;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.IGNORE;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.REJECT;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.operationvalidators.AttesterSlashingStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.datastructures.util.MockStartValidatorKeyPairFactory;\n+import tech.pegasys.teku.statetransition.BeaconChainUtil;\n+import tech.pegasys.teku.storage.client.MemoryOnlyRecentChainData;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class AttesterSlashingValidatorTest {\n+  private static final List<BLSKeyPair> VALIDATOR_KEYS =\n+      new MockStartValidatorKeyPairFactory().generateKeyPairs(0, 25);\n+  private DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private RecentChainData recentChainData;\n+  private BeaconChainUtil beaconChainUtil;\n+  private AttesterSlashingValidator attesterSlashingValidator;\n+  private AttesterSlashingStateTransitionValidator stateTransitionValidator;\n+\n+  @BeforeEach\n+  void beforeEach() {\n+    recentChainData = MemoryOnlyRecentChainData.create(new EventBus());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNDEzNg=="}, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzMzEyMg==", "bodyText": "Switched to mocking recentChainData.", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439033122", "createdAt": "2020-06-11T19:55:59Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttesterSlashingValidatorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.ACCEPT;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.IGNORE;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.REJECT;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.operationvalidators.AttesterSlashingStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.datastructures.util.MockStartValidatorKeyPairFactory;\n+import tech.pegasys.teku.statetransition.BeaconChainUtil;\n+import tech.pegasys.teku.storage.client.MemoryOnlyRecentChainData;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class AttesterSlashingValidatorTest {\n+  private static final List<BLSKeyPair> VALIDATOR_KEYS =\n+      new MockStartValidatorKeyPairFactory().generateKeyPairs(0, 25);\n+  private DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private RecentChainData recentChainData;\n+  private BeaconChainUtil beaconChainUtil;\n+  private AttesterSlashingValidator attesterSlashingValidator;\n+  private AttesterSlashingStateTransitionValidator stateTransitionValidator;\n+\n+  @BeforeEach\n+  void beforeEach() {\n+    recentChainData = MemoryOnlyRecentChainData.create(new EventBus());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNDEzNg=="}, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTQwNDg5OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/testFixtures/java/tech/pegasys/teku/datastructures/util/DataStructureUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjoyMTo0MFrOGiwvNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjozOTozM1rOGjKpdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwMzI4Nw==", "bodyText": "Shouldn't we actually construct a valid slashing here?", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439103287", "createdAt": "2020-06-11T22:21:40Z", "author": {"login": "mbaxter"}, "path": "ethereum/datastructures/src/testFixtures/java/tech/pegasys/teku/datastructures/util/DataStructureUtil.java", "diffHunk": "@@ -213,7 +213,8 @@ public PendingAttestation randomPendingAttestation() {\n   }\n \n   public AttesterSlashing randomAttesterSlashing() {\n-    return new AttesterSlashing(randomIndexedAttestation(), randomIndexedAttestation());\n+    IndexedAttestation attestation = randomIndexedAttestation();\n+    return new AttesterSlashing(attestation, attestation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "589ed3663b1e4195162f9071a6973b16fd71f9b3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyNzc5Ng==", "bodyText": "Fixed.", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439527796", "createdAt": "2020-06-12T16:39:33Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/testFixtures/java/tech/pegasys/teku/datastructures/util/DataStructureUtil.java", "diffHunk": "@@ -213,7 +213,8 @@ public PendingAttestation randomPendingAttestation() {\n   }\n \n   public AttesterSlashing randomAttesterSlashing() {\n-    return new AttesterSlashing(randomIndexedAttestation(), randomIndexedAttestation());\n+    IndexedAttestation attestation = randomIndexedAttestation();\n+    return new AttesterSlashing(attestation, attestation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwMzI4Nw=="}, "originalCommit": {"oid": "589ed3663b1e4195162f9071a6973b16fd71f9b3"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3586, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}