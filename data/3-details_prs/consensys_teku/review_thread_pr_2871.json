{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1ODA4NDA4", "number": 2871, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToxMTo1MlrOEqXPug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToxMTo1MlrOEqXPug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODU2NTA2OnYy", "diffSide": "RIGHT", "path": "ethereum/weaksubjectivity/src/main/java/tech/pegasys/teku/weaksubjectivity/WeakSubjectivityValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNToxMTo1MlrOHchoiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzozOToyMlrOHcnNOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY3MzIyNw==", "bodyText": "I'm not quite sure if this warn would be visible in console? If not may be it makes sense to print to console as well?", "url": "https://github.com/ConsenSys/teku/pull/2871#discussion_r499673227", "createdAt": "2020-10-05T15:11:52Z", "author": {"login": "Nashatyrev"}, "path": "ethereum/weaksubjectivity/src/main/java/tech/pegasys/teku/weaksubjectivity/WeakSubjectivityValidator.java", "diffHunk": "@@ -122,35 +125,41 @@ public void validateLatestFinalizedCheckpoint(\n       LOG.debug(\n           \"Latest finalized checkpoint at epoch {} is prior to weak subjectivity checkpoint at epoch {}. Defer validation.\",\n           latestFinalizedCheckpoint.getEpoch(),\n-          maybeWsCheckpoint.orElseThrow().getEpoch());\n+          config.getWeakSubjectivityCheckpoint().orElseThrow().getEpoch());\n       return;\n     }\n \n-    // Determine validity\n-    boolean isValid = true;\n-    if (isAtWSCheckpoint(latestFinalizedCheckpoint)) {\n-      // Roots must match\n-      isValid = isWSCheckpointRoot(latestFinalizedCheckpoint.getRoot());\n+    // Validate against ws checkpoint\n+    if (isAtWSCheckpoint(latestFinalizedCheckpoint)\n+        && !isWSCheckpointRoot(latestFinalizedCheckpoint.getRoot())) {\n+      // Finalized root is inconsistent with ws checkpoint\n+      handleInconsistentWsCheckpoint(latestFinalizedCheckpoint.getBlock());\n     }\n-    isValid = isValid && isWithinWSPeriod(latestFinalizedCheckpoint, currentSlot);\n-\n-    // Handle invalid checkpoint\n-    if (!isValid) {\n-      final int activeValidators =\n-          calculator.getActiveValidators(latestFinalizedCheckpoint.getState());\n-      for (WeakSubjectivityViolationPolicy policy : violationPolicies) {\n-        policy.onFinalizedCheckpointOutsideOfWeakSubjectivityPeriod(\n-            latestFinalizedCheckpoint, activeValidators, currentSlot);\n-      }\n+\n+    // Determine whether we should suppress ws period errors\n+    UInt64 currentEpoch = compute_epoch_at_slot(currentSlot);\n+    final Optional<UInt64> suppressionEpoch = getSuppressWSPeriodChecksUntilEpoch(currentSlot);\n+    final boolean shouldSuppressErrors =\n+        suppressionEpoch.map(e -> e.isGreaterThan(currentEpoch)).orElse(false);\n+\n+    // Validate against ws period\n+    final boolean withinWSPeriod = isWithinWSPeriod(latestFinalizedCheckpoint, currentSlot);\n+    if (!withinWSPeriod && !shouldSuppressErrors) {\n+      handleFinalizedCheckpointOutsideWSPeriod(latestFinalizedCheckpoint, currentSlot);\n+    } else if (!withinWSPeriod\n+        && currentSlot.mod(SUPPRESSION_WARNING_PERIOD_IN_SLOTS).equals(UInt64.ZERO)\n+        && getAndSetLastLoggedSlot(currentSlot).isLessThan(currentSlot)) {\n+      LOG.warn(\n+          \"Suppressing weak subjectivity errors until epoch {}\", suppressionEpoch.orElseThrow());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4a11c20071d7653cdadac6f3845d93ebf10f438"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2NDUzNw==", "bodyText": "hmm - good point", "url": "https://github.com/ConsenSys/teku/pull/2871#discussion_r499764537", "createdAt": "2020-10-05T17:39:22Z", "author": {"login": "mbaxter"}, "path": "ethereum/weaksubjectivity/src/main/java/tech/pegasys/teku/weaksubjectivity/WeakSubjectivityValidator.java", "diffHunk": "@@ -122,35 +125,41 @@ public void validateLatestFinalizedCheckpoint(\n       LOG.debug(\n           \"Latest finalized checkpoint at epoch {} is prior to weak subjectivity checkpoint at epoch {}. Defer validation.\",\n           latestFinalizedCheckpoint.getEpoch(),\n-          maybeWsCheckpoint.orElseThrow().getEpoch());\n+          config.getWeakSubjectivityCheckpoint().orElseThrow().getEpoch());\n       return;\n     }\n \n-    // Determine validity\n-    boolean isValid = true;\n-    if (isAtWSCheckpoint(latestFinalizedCheckpoint)) {\n-      // Roots must match\n-      isValid = isWSCheckpointRoot(latestFinalizedCheckpoint.getRoot());\n+    // Validate against ws checkpoint\n+    if (isAtWSCheckpoint(latestFinalizedCheckpoint)\n+        && !isWSCheckpointRoot(latestFinalizedCheckpoint.getRoot())) {\n+      // Finalized root is inconsistent with ws checkpoint\n+      handleInconsistentWsCheckpoint(latestFinalizedCheckpoint.getBlock());\n     }\n-    isValid = isValid && isWithinWSPeriod(latestFinalizedCheckpoint, currentSlot);\n-\n-    // Handle invalid checkpoint\n-    if (!isValid) {\n-      final int activeValidators =\n-          calculator.getActiveValidators(latestFinalizedCheckpoint.getState());\n-      for (WeakSubjectivityViolationPolicy policy : violationPolicies) {\n-        policy.onFinalizedCheckpointOutsideOfWeakSubjectivityPeriod(\n-            latestFinalizedCheckpoint, activeValidators, currentSlot);\n-      }\n+\n+    // Determine whether we should suppress ws period errors\n+    UInt64 currentEpoch = compute_epoch_at_slot(currentSlot);\n+    final Optional<UInt64> suppressionEpoch = getSuppressWSPeriodChecksUntilEpoch(currentSlot);\n+    final boolean shouldSuppressErrors =\n+        suppressionEpoch.map(e -> e.isGreaterThan(currentEpoch)).orElse(false);\n+\n+    // Validate against ws period\n+    final boolean withinWSPeriod = isWithinWSPeriod(latestFinalizedCheckpoint, currentSlot);\n+    if (!withinWSPeriod && !shouldSuppressErrors) {\n+      handleFinalizedCheckpointOutsideWSPeriod(latestFinalizedCheckpoint, currentSlot);\n+    } else if (!withinWSPeriod\n+        && currentSlot.mod(SUPPRESSION_WARNING_PERIOD_IN_SLOTS).equals(UInt64.ZERO)\n+        && getAndSetLastLoggedSlot(currentSlot).isLessThan(currentSlot)) {\n+      LOG.warn(\n+          \"Suppressing weak subjectivity errors until epoch {}\", suppressionEpoch.orElseThrow());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY3MzIyNw=="}, "originalCommit": {"oid": "e4a11c20071d7653cdadac6f3845d93ebf10f438"}, "originalPosition": 136}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3295, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}