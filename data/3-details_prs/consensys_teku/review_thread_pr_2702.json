{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NDkyODc2", "number": 2702, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDozMzozNVrOEeiY6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDozNDo1NVrOEeia9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNDU2MTcwOnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/teku/pow/ValidatingEth1EventsPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDozMzozNVrOHKPZPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTozNzoxNlrOHK8ZVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUwMDAyOA==", "bodyText": "I suspect this misses the case where we miss the very first deposit.  We won't have replayed anything from disk so the last deposit index will be unset and we should then expect the first deposit to have index 0.", "url": "https://github.com/ConsenSys/teku/pull/2702#discussion_r480500028", "createdAt": "2020-09-01T00:33:35Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/teku/pow/ValidatingEth1EventsPublisher.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.pow;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n+import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.teku.pow.exception.InvalidDepositEventsException;\n+\n+public class ValidatingEth1EventsPublisher extends DelegatingEth1EventsChannel {\n+  private Optional<UInt64> lastPublishedDeposit = Optional.empty();\n+\n+  public ValidatingEth1EventsPublisher(final Eth1EventsChannel delegate) {\n+    super(delegate);\n+  }\n+\n+  public synchronized void setLastestPublishedDeposit(final UInt64 latestPublishedDeposit) {\n+    checkNotNull(latestPublishedDeposit);\n+    if (!lastPublishedDeposit.isEmpty()) {\n+      throw new IllegalStateException(\"Latest published deposit is already set\");\n+    }\n+    this.lastPublishedDeposit = Optional.of(latestPublishedDeposit);\n+  }\n+\n+  @Override\n+  public synchronized void onDepositsFromBlock(final DepositsFromBlockEvent event) {\n+    assertDepositEventIsValid(event);\n+    lastPublishedDeposit = Optional.of(event.getLastDepositIndex());\n+\n+    delegate.onDepositsFromBlock(event);\n+  }\n+\n+  private void assertDepositEventIsValid(final DepositsFromBlockEvent event) {\n+    final Optional<UInt64> expectedFirstDepositIndex = lastPublishedDeposit.map(UInt64::increment);\n+    final boolean depositIndexIsValid =\n+        expectedFirstDepositIndex\n+            .map(expected -> expected.equals(event.getFirstDepositIndex()))\n+            .orElse(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba9c381da77d90f00e152960ab37e71355e7fc5b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzNzMzMw==", "bodyText": "good call - fixed", "url": "https://github.com/ConsenSys/teku/pull/2702#discussion_r481237333", "createdAt": "2020-09-01T15:37:16Z", "author": {"login": "mbaxter"}, "path": "pow/src/main/java/tech/pegasys/teku/pow/ValidatingEth1EventsPublisher.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.pow;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n+import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.teku.pow.exception.InvalidDepositEventsException;\n+\n+public class ValidatingEth1EventsPublisher extends DelegatingEth1EventsChannel {\n+  private Optional<UInt64> lastPublishedDeposit = Optional.empty();\n+\n+  public ValidatingEth1EventsPublisher(final Eth1EventsChannel delegate) {\n+    super(delegate);\n+  }\n+\n+  public synchronized void setLastestPublishedDeposit(final UInt64 latestPublishedDeposit) {\n+    checkNotNull(latestPublishedDeposit);\n+    if (!lastPublishedDeposit.isEmpty()) {\n+      throw new IllegalStateException(\"Latest published deposit is already set\");\n+    }\n+    this.lastPublishedDeposit = Optional.of(latestPublishedDeposit);\n+  }\n+\n+  @Override\n+  public synchronized void onDepositsFromBlock(final DepositsFromBlockEvent event) {\n+    assertDepositEventIsValid(event);\n+    lastPublishedDeposit = Optional.of(event.getLastDepositIndex());\n+\n+    delegate.onDepositsFromBlock(event);\n+  }\n+\n+  private void assertDepositEventIsValid(final DepositsFromBlockEvent event) {\n+    final Optional<UInt64> expectedFirstDepositIndex = lastPublishedDeposit.map(UInt64::increment);\n+    final boolean depositIndexIsValid =\n+        expectedFirstDepositIndex\n+            .map(expected -> expected.equals(event.getFirstDepositIndex()))\n+            .orElse(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUwMDAyOA=="}, "originalCommit": {"oid": "ba9c381da77d90f00e152960ab37e71355e7fc5b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNDU2NjkyOnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/teku/pow/exception/InvalidDepositEventsException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDozNDo1NVrOHKPcmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMDozNDo1NVrOHKPcmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDUwMDg4OA==", "bodyText": "Should we include the actual deposit index we got in the message?", "url": "https://github.com/ConsenSys/teku/pull/2702#discussion_r480500888", "createdAt": "2020-09-01T00:34:55Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/teku/pow/exception/InvalidDepositEventsException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.pow.exception;\n+\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+public class InvalidDepositEventsException extends IllegalArgumentException {\n+\n+  public InvalidDepositEventsException(final String s) {\n+    super(s);\n+  }\n+\n+  public static InvalidDepositEventsException expectedDepositAtIndex(UInt64 expectedIndex) {\n+    return new InvalidDepositEventsException(\"Expected next deposit at index \" + expectedIndex);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba9c381da77d90f00e152960ab37e71355e7fc5b"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3360, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}