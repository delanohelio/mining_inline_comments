{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3Mjg2OTk3", "number": 2453, "title": "Add Supranational BLS implementation", "bodyText": "PR Description\nAdd Supranational BLS implementation based on highly optimized native BLS-12381 library\nFor now I forked the Blst repo and made some tweaks for the Java SWIG binding works correctly on all platforms. Will be working with Blst team to resolve them and push upstream.\nThe Java SWIG wrapper generated classes and manually built native libraries (Windows, Linux, MacOS) are now in the separate repository: https://github.com/Nashatyrev/jblst. Gradle bintrayUpload task may be used to build and publish the tech.pegasys:jblst artifact\nBy default the blst BLS implementation is loaded. If for some reason it fails to load native lib BLS falls back to Mikuli implementation (with a WARN log)\nThe PR was tested on: Windows, Linux and MacOS\nFuture tasks to do:\n\nmigrate to better C++ SWIG bindings (here for now: https://github.com/dot-asm/blst/blob/python.demo/)\nresolve issues from the forked Blst repo and switch to the main Blst repo\nCreate and setup jblst repo to generate SWIG java wrappers and build native libs from upstream blst repo on CI platforms and build the final artifact\nRollback this commit Temporary handling infinite pubkey/signature as a special case if/when the issue with infinite pubkey/signatures is resolved: supranational/blst#11\nReplace BLSConstants.VERIFICATION_DISABLED flag with Noop BLS implementation\n\nTODOs\n\n Make common BLS tests cover both implementations\n Remove pubkey/signature bytes store/lazy calc as it it now handled in common classes\n Move artifact to official Pegasys Bintray org\n\nImport Benchmarks\nBefore:\nBenchmark                              (validatorsCount)  Mode  Cnt  Score   Error  Units\nTransitionBenchmark.Block.importBlock              32768    ss  250  0,076 \u00b1 0,002   s/op\nTransitionBenchmark.Epoch.importBlock              32768    ss  100  0,458 \u00b1 0,009   s/op\n\nAfter:\nBenchmark                              (validatorsCount)  Mode  Cnt  Score   Error  Units\nTransitionBenchmark.Block.importBlock              32768    ss  250  0,021 \u00b1 0,003   s/op\nTransitionBenchmark.Epoch.importBlock              32768    ss  100  0,415 \u00b1 0,012   s/op\n\nBLS Benchmarks\nBlst is x7-x9 faster than Mikuli:\n\n\n\nTest\nSigCnt\nMikuli\nBlst\nSpeedup\n\n\n\n\nverifySignatureBatchedNonParallelDoublePairing\n1\n36,177\n318,327\n8.8\n\n\nverifySignatureBatchedNonParallelDoublePairing\n2\n26,333\n206,738\n7.9\n\n\nverifySignatureBatchedNonParallelDoublePairing\n4\n16,908\n117,974\n7.0\n\n\nverifySignatureBatchedNonParallelDoublePairing\n8\n9,324\n66,379\n7.1\n\n\nverifySignatureBatchedNonParallelDoublePairing\n16\n5,379\n35,010\n6.5\n\n\nverifySignatureBatchedNonParallelDoublePairing\n32\n2,768\n18,101\n6.5\n\n\nverifySignatureBatchedNonParallelDoublePairing\n64\n1,442\n8,892\n6.2\n\n\nverifySignatureBatchedNonParallelDoublePairing\n128\n726\n4,654\n6.4\n\n\nverifySignatureBatchedNonParallelSinglePairing\n1\n36,713\n324,845\n8.8\n\n\nverifySignatureBatchedNonParallelSinglePairing\n2\n25,561\n203,667\n8.0\n\n\nverifySignatureBatchedNonParallelSinglePairing\n4\n16,004\n123,699\n7.7\n\n\nverifySignatureBatchedNonParallelSinglePairing\n8\n8,663\n67,762\n7.8\n\n\nverifySignatureBatchedNonParallelSinglePairing\n16\n4,644\n35,188\n7.6\n\n\nverifySignatureBatchedNonParallelSinglePairing\n32\n2,607\n18,015\n6.9\n\n\nverifySignatureBatchedNonParallelSinglePairing\n64\n1,337\n8,908\n6.7\n\n\nverifySignatureBatchedNonParallelSinglePairing\n128\n677\n4,607\n6.8\n\n\nverifySignatureBatchedParallelDoublePairing\n1\n36,081\n311,249\n8.6\n\n\nverifySignatureBatchedParallelDoublePairing\n2\n26,631\n207,796\n7.8\n\n\nverifySignatureBatchedParallelDoublePairing\n4\n23,819\n199,297\n8.4\n\n\nverifySignatureBatchedParallelDoublePairing\n8\n20,292\n151,721\n7.5\n\n\nverifySignatureBatchedParallelDoublePairing\n16\n14,747\n106,536\n7.2\n\n\nverifySignatureBatchedParallelDoublePairing\n32\n8,419\n60,879\n7.2\n\n\nverifySignatureBatchedParallelDoublePairing\n64\n4,466\n33,660\n7.5\n\n\nverifySignatureBatchedParallelDoublePairing\n128\n2,477\n16,651\n6.7\n\n\nverifySignatureBatchedParallelSinglePairing\n1\n35,797\n320,506\n9.0\n\n\nverifySignatureBatchedParallelSinglePairing\n2\n31,836\n300,686\n9.4\n\n\nverifySignatureBatchedParallelSinglePairing\n4\n27,452\n243,981\n8.9\n\n\nverifySignatureBatchedParallelSinglePairing\n8\n22,340\n187,294\n8.4\n\n\nverifySignatureBatchedParallelSinglePairing\n16\n14,204\n106,880\n7.5\n\n\nverifySignatureBatchedParallelSinglePairing\n32\n8,375\n64,067\n7.6\n\n\nverifySignatureBatchedParallelSinglePairing\n64\n4,551\n32,898\n7.2\n\n\nverifySignatureBatchedParallelSinglePairing\n128\n2,342\n16,482\n7.0\n\n\nverifySignatureSimple\n1\n51,861\n357,217\n6.9\n\n\nverifySignatureSimple\n2\n25,967\n174,044\n6.7\n\n\nverifySignatureSimple\n4\n12,868\n87,326\n6.8\n\n\nverifySignatureSimple\n8\n6,423\n44,326\n6.9\n\n\nverifySignatureSimple\n16\n3,259\n22,209\n6.8\n\n\nverifySignatureSimple\n32\n1,649\n10,938\n6.6\n\n\nverifySignatureSimple\n64\n816\n5,581\n6.8\n\n\nverifySignatureSimple\n128\n400\n2,775\n6.9\n\n\n\nFixes\nFix #2300\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-07-27T16:59:57Z", "url": "https://github.com/ConsenSys/teku/pull/2453", "merged": true, "mergeCommit": {"oid": "b3d2e07fc2ce20b4b56e57720fe5915b45566a02"}, "closed": true, "closedAt": "2020-07-31T12:35:02Z", "author": {"login": "Nashatyrev"}, "timelineItems": {"totalCount": 112, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6BcKEgH2gAyNDU3Mjg2OTk3OjVkY2EwNDMzYWVlMmY0MTBkOGVhNzliYWQxOTM1ZmJiOTNiYTgxMDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6QqWtAH2gAyNDU3Mjg2OTk3OmQ3NTU5Y2EzZTgxYjQwYmM0YzQ4YTZjNzMxNzE1MzUyNjI5MjliMWI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5dca0433aee2f410d8ea79bad1935fbb93ba8102", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/5dca0433aee2f410d8ea79bad1935fbb93ba8102", "committedDate": "2020-07-30T15:34:21Z", "message": "Make a distinction of BLSSignature from/toSSZBytes() and from/toBytesCompressed() though they are equivalent with the current SSZ implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "913e484ad9bf80718de5007a74e0fc789df903f4", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/913e484ad9bf80718de5007a74e0fc789df903f4", "committedDate": "2020-07-30T16:05:34Z", "message": "Add try/catch/finally to explicitly delete native structures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NTY3NjA1", "url": "https://github.com/ConsenSys/teku/pull/2453#pullrequestreview-458567605", "createdAt": "2020-07-30T16:31:27Z", "commit": {"oid": "913e484ad9bf80718de5007a74e0fc789df903f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjozMToyN1rOG5qzqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjozMToyN1rOG5qzqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyMzM2OA==", "bodyText": "Should we have an assert here, if only to be explicit about what we are testing for?", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r463123368", "createdAt": "2020-07-30T16:31:27Z", "author": {"login": "benjaminion"}, "path": "bls/src/test/java/tech/pegasys/teku/bls/BLSPublicKeyTest.java", "diffHunk": "@@ -29,16 +31,18 @@\n           \"0xc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\");\n \n   @Test\n-  void isValidReturnsTrueForValidKey() {\n-    BLSPublicKey publicKey = BLSPublicKey.random(1);\n-    assertTrue(publicKey.isValid());\n+  void fromBytesCompressedValidate_okWhenValidBytes() {\n+    BLSPublicKey.fromBytesCompressedValidate(BLSPublicKey.random(1).toBytesCompressed());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913e484ad9bf80718de5007a74e0fc789df903f4"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NTc4Mjkz", "url": "https://github.com/ConsenSys/teku/pull/2453#pullrequestreview-458578293", "createdAt": "2020-07-30T16:45:06Z", "commit": {"oid": "913e484ad9bf80718de5007a74e0fc789df903f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjo0NTowNlrOG5rTtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjo0NTowNlrOG5rTtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzMTU3Mw==", "bodyText": "Should probably assert something here - ideally that the signature is a member of G2. Or that we can sign and verify something with it. Not sure really.", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r463131573", "createdAt": "2020-07-30T16:45:06Z", "author": {"login": "benjaminion"}, "path": "bls/src/test/java/tech/pegasys/teku/bls/BLSSignatureTest.java", "diffHunk": "@@ -84,14 +85,34 @@ void succeedsWhenEqualsReturnsFalseForDifferentSignatures() {\n   @Test\n   void succeedsWhenRoundtripSSZReturnsTheSameSignature() {\n     BLSSignature signature1 = BLSSignature.random(65);\n-    BLSSignature signature2 = BLSSignature.fromBytes(signature1.toBytes());\n+    BLSSignature signature2 = BLSSignature.fromSSZBytes(signature1.toSSZBytes());\n     assertEquals(signature1, signature2);\n   }\n \n   @Test\n   void succeedsWhenRoundtripSSZReturnsTheEmptySignature() {\n     BLSSignature signature1 = BLSSignature.empty();\n-    BLSSignature signature2 = BLSSignature.fromBytes(signature1.toBytes());\n+    BLSSignature signature2 = BLSSignature.fromSSZBytes(signature1.toSSZBytes());\n     assertEquals(signature1, signature2);\n   }\n+\n+  @Test\n+  void succeedsWhenEqualsReturnsTrueForEmptySignatures() {\n+    assertEquals(BLSSignature.empty(), BLSSignature.empty());\n+    assertEquals(BLSSignature.empty().hashCode(), BLSSignature.empty().hashCode());\n+  }\n+\n+  @Test\n+  void roundtripEncodeDecodeCompressed() {\n+    BLSSignature signature = BLSSignature.random(513);\n+    final BLSSignature result = BLSSignature.fromBytesCompressed(signature.toBytesCompressed());\n+    assertEquals(signature, result);\n+    assertEquals(signature.hashCode(), result.hashCode());\n+  }\n+\n+  @Test\n+  void testRandomFromSeed() {\n+    BLSSignature randomSig = BLSSignature.random(92892840);\n+    System.out.println(randomSig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913e484ad9bf80718de5007a74e0fc789df903f4"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NTgxNDA3", "url": "https://github.com/ConsenSys/teku/pull/2453#pullrequestreview-458581407", "createdAt": "2020-07-30T16:48:59Z", "commit": {"oid": "913e484ad9bf80718de5007a74e0fc789df903f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjo0ODo1OVrOG5rdNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjo0ODo1OVrOG5rdNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzNDAwNg==", "bodyText": "Nit - comment looks like a left-over.", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r463134006", "createdAt": "2020-07-30T16:48:59Z", "author": {"login": "benjaminion"}, "path": "bls/src/test/java/tech/pegasys/teku/bls/impl/blst/BlstTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.bls.impl.blst;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BatchSemiAggregate;\n+\n+public class BlstTest {\n+  private static final Random random = new Random(1);\n+\n+  private static BlstBLS12381 BLS;\n+\n+  @BeforeAll\n+  static void setup() {\n+    BLS = BlstBLS12381.INSTANCE.orElseThrow();\n+  }\n+\n+  @Test\n+  void testBatchVerifySingleSig() {\n+    Bytes msg = Bytes32.ZERO; // .fromHexString(\"123456\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913e484ad9bf80718de5007a74e0fc789df903f4"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NTg5MjYz", "url": "https://github.com/ConsenSys/teku/pull/2453#pullrequestreview-458589263", "createdAt": "2020-07-30T16:59:04Z", "commit": {"oid": "913e484ad9bf80718de5007a74e0fc789df903f4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjo1OTowNFrOG5r1CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjo1OTowNFrOG5r1CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE0MDEwNQ==", "bodyText": "Ugh. Why did this change? Is dataStructureUtil.randomSignature(); using a different seed value? That whole thing looks a bit fragile to me. (Not your problem!)", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r463140105", "createdAt": "2020-07-30T16:59:04Z", "author": {"login": "benjaminion"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/signer/SignerTest.java", "diffHunk": "@@ -53,11 +53,11 @@ public void shouldCreateRandaoReveal() {\n   }\n \n   @Test\n-  public void shouldSignBlock() {\n+  public void shouldSignBlock1() {\n     final BeaconBlock block = dataStructureUtil.randomBeaconBlock(10);\n     final BLSSignature signature = dataStructureUtil.randomSignature();\n     final Bytes expectedSigningRoot =\n-        Bytes.fromHexString(\"0xc0e4ed8375c98504b262f610f217d31ebf109f0f73c164362090c6ad7d4770c1\");\n+        Bytes.fromHexString(\"0xfa8b3cfed0268ed15e354e84db5558eb76ad30737a86d6d057615e331ff30d44\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "913e484ad9bf80718de5007a74e0fc789df903f4"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NjAxOTI5", "url": "https://github.com/ConsenSys/teku/pull/2453#pullrequestreview-458601929", "createdAt": "2020-07-30T17:16:18Z", "commit": {"oid": "913e484ad9bf80718de5007a74e0fc789df903f4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ade0ab8882745d14b60b903de90ea617b0e4a64", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/7ade0ab8882745d14b60b903de90ea617b0e4a64", "committedDate": "2020-07-30T17:21:06Z", "message": "Minor BLS tests cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b60a0461bd941c71c1bf6b31f8679533098d00dc", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/b60a0461bd941c71c1bf6b31f8679533098d00dc", "committedDate": "2020-07-30T17:49:25Z", "message": "Move BLS.aggregatePublicKeys() -> BLSPublicKey.aggregate(), rename BLS.aggregateSignatures() -> BLS.aggregate()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Nzk1ODA5", "url": "https://github.com/ConsenSys/teku/pull/2453#pullrequestreview-458795809", "createdAt": "2020-07-30T22:21:01Z", "commit": {"oid": "b60a0461bd941c71c1bf6b31f8679533098d00dc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "377eaf116e5ab22011874c0e442d45b123f2c3b6", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/377eaf116e5ab22011874c0e442d45b123f2c3b6", "committedDate": "2020-07-30T23:03:52Z", "message": "Merge branch 'master' into feature-blst"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7559ca3e81b40bc4c48a6c73171535262929b1b", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/d7559ca3e81b40bc4c48a6c73171535262929b1b", "committedDate": "2020-07-31T09:18:26Z", "message": "Merge branch 'master' into feature-blst"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc11c9f816ebf4c0e1d4b4e7474e36aa177b6ee5", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/fc11c9f816ebf4c0e1d4b4e7474e36aa177b6ee5", "committedDate": "2020-06-25T11:36:52Z", "message": "Draft initial experiments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1532577877735027a196df225571347cdf0c3f4c", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/1532577877735027a196df225571347cdf0c3f4c", "committedDate": "2020-07-03T11:28:31Z", "message": "Merge remote-tracking branch 'pegasys/master' into experimental-supra"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "745ca3adf35b17310ec432c772069b485d40f1af", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/745ca3adf35b17310ec432c772069b485d40f1af", "committedDate": "2020-07-07T09:56:19Z", "message": "Add JNA library draft"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f442a696a28820d69b8c3a43530ec89a983c3c78", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/f442a696a28820d69b8c3a43530ec89a983c3c78", "committedDate": "2020-07-07T09:57:35Z", "message": "Move SWIG wrappers to a separate package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "986c4a8882b28a9bbfe689daf7b71cd8b4706b35", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/986c4a8882b28a9bbfe689daf7b71cd8b4706b35", "committedDate": "2020-07-09T09:39:48Z", "message": "Updated SWIG wrappers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eff96d075e98d3b985808d49b19a650a34aae3a", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/3eff96d075e98d3b985808d49b19a650a34aae3a", "committedDate": "2020-07-09T09:40:52Z", "message": "Initial BLS Blst classes. Tests updated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7413682b695272b224bf0e0bd142a120bae8aa28", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/7413682b695272b224bf0e0bd142a120bae8aa28", "committedDate": "2020-07-10T15:33:23Z", "message": "Merge remote-tracking branch 'pegasys/master' into experimental-supra"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cb89b4083413957d9d41236dab2c3e08fea3ac1", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/5cb89b4083413957d9d41236dab2c3e08fea3ac1", "committedDate": "2020-07-10T17:37:44Z", "message": "Update the draft"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54f7a01191054ce14ba03296572a8836e5d8a2a2", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/54f7a01191054ce14ba03296572a8836e5d8a2a2", "committedDate": "2020-07-15T15:47:11Z", "message": "Merge remote-tracking branch 'pegasys/master' into experimental-supra"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9256c9380888296119dc599a7e837e80ee9fe8a1", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/9256c9380888296119dc599a7e837e80ee9fe8a1", "committedDate": "2020-07-15T17:51:13Z", "message": "temp commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67b1a9dd9c81cf43320384ffda9186e5f157e2ce", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/67b1a9dd9c81cf43320384ffda9186e5f157e2ce", "committedDate": "2020-07-16T14:56:35Z", "message": "Upgrade blst classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8da728c5c00c36930b2774dd1317798b94bb1a0", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/f8da728c5c00c36930b2774dd1317798b94bb1a0", "committedDate": "2020-07-16T15:09:18Z", "message": "Update tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7439d5035a31ced82f0d9d4ebb5d9a62008c447", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/a7439d5035a31ced82f0d9d4ebb5d9a62008c447", "committedDate": "2020-07-16T15:10:34Z", "message": "Update dll"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "939e3016fcbb8e20688ee0445b654b41ec13d83c", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/939e3016fcbb8e20688ee0445b654b41ec13d83c", "committedDate": "2020-07-16T15:11:26Z", "message": "Temp disable json-simple lib"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fd531bb735616406bdab6f72bfccdf8ecaf621d", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/7fd531bb735616406bdab6f72bfccdf8ecaf621d", "committedDate": "2020-07-16T18:02:55Z", "message": "Initial draft for BLS interfaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69300d6d746f78fa517e2f43c8da168adf84b450", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/69300d6d746f78fa517e2f43c8da168adf84b450", "committedDate": "2020-07-16T19:02:44Z", "message": "exclude outdated junit transitive dependency from json-simple module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8724e7f1e9d3bbff924de56ee13f0e83e47521ef", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/8724e7f1e9d3bbff924de56ee13f0e83e47521ef", "committedDate": "2020-07-16T20:06:23Z", "message": "Rename test file to Win compatible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84691cd609aed1ee0aa357b8c33dad7b152aa45b", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/84691cd609aed1ee0aa357b8c33dad7b152aa45b", "committedDate": "2020-07-16T20:23:20Z", "message": "Merge branch 'fix-bls-tests-1' into feature-bls-interfaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8bafde8097d10593540eb8c0270bae987d62107", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/a8bafde8097d10593540eb8c0270bae987d62107", "committedDate": "2020-07-17T10:49:19Z", "message": "Another portion of draft changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5762f4aee4b16a48a31b7ac859eabdf527eba07", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/b5762f4aee4b16a48a31b7ac859eabdf527eba07", "committedDate": "2020-07-17T13:01:37Z", "message": "Adjust bls tests by separating them to abstract and implementation specific"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27aace71b79d77d6391efb4e797039e8be085abd", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/27aace71b79d77d6391efb4e797039e8be085abd", "committedDate": "2020-07-17T13:18:31Z", "message": "Add NoopBLS12381 implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f93ac4be839856ed8ce4982d1c608ef08d70929", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/5f93ac4be839856ed8ce4982d1c608ef08d70929", "committedDate": "2020-07-17T13:24:24Z", "message": "Fix warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c4faf635ea6915804b85790653e329101568426", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/7c4faf635ea6915804b85790653e329101568426", "committedDate": "2020-07-17T13:33:17Z", "message": "Fix more warns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c221980d33528bc0e081a9445d2ba7af6df2c3fe", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/c221980d33528bc0e081a9445d2ba7af6df2c3fe", "committedDate": "2020-07-17T13:37:37Z", "message": "Merge remote-tracking branch 'pegasys/master' into feature-bls-interfaces\n\n# Conflicts:\n#\tbls/src/main/java/tech/pegasys/teku/bls/BLS.java\n#\tbls/src/main/java/tech/pegasys/teku/bls/BLSPublicKey.java\n#\tbls/src/test/java/tech/pegasys/teku/bls/BLSPublicKeyTest.java\n#\tdata/provider/src/main/java/tech/pegasys/teku/api/schema/BLSPubKey.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c41c8d8a21a6be79118bac9892cdbca6f02ab9b", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/8c41c8d8a21a6be79118bac9892cdbca6f02ab9b", "committedDate": "2020-07-17T13:55:44Z", "message": "Resolve merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aab091f6a18e7a86df5b45d5a6f2cddeb9244205", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/aab091f6a18e7a86df5b45d5a6f2cddeb9244205", "committedDate": "2020-07-17T14:39:45Z", "message": "Fix the test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2040313237e184415e6ec626704ca5946ab045c3", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/2040313237e184415e6ec626704ca5946ab045c3", "committedDate": "2020-07-20T10:54:35Z", "message": "Fix the test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69313d7198d78bec898b98c1d3d932c72bedf9bd", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/69313d7198d78bec898b98c1d3d932c72bedf9bd", "committedDate": "2020-07-20T11:10:26Z", "message": "Merge remote-tracking branch 'pegasys/master' into feature-bls-interfaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59e59c129430b1f2f9d1375ad8d3531251af5dc6", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/59e59c129430b1f2f9d1375ad8d3531251af5dc6", "committedDate": "2020-07-20T16:30:38Z", "message": "Merge branch 'feature-bls-interfaces' into experimental-supra\n\n# Conflicts:\n#\tbls/build.gradle\n#\tbls/src/test/java/tech/pegasys/teku/bls/impl/mikuli/hash2g2/ReferenceTests.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b48be7b31b51fcd274143240f482ef2db02fafd", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/5b48be7b31b51fcd274143240f482ef2db02fafd", "committedDate": "2020-07-20T16:36:16Z", "message": "Remove JNA binding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c4314b57c06f0b95065fde3f4d3c86f4b78a9c8", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/6c4314b57c06f0b95065fde3f4d3c86f4b78a9c8", "committedDate": "2020-07-20T16:43:00Z", "message": "Move Blst code to the appropriate package, rename classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c653a5d041cc864eea2d5c78bcb70cf73b793cd", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/3c653a5d041cc864eea2d5c78bcb70cf73b793cd", "committedDate": "2020-07-20T17:31:10Z", "message": "Derive Blst classes from common impl interfaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edf288a4f1f89bf0e13d4d97d60f7749d7f63e46", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/edf288a4f1f89bf0e13d4d97d60f7749d7f63e46", "committedDate": "2020-07-21T11:56:39Z", "message": "Merge remote-tracking branch 'pegasys/master' into feature-blst\n\n# Conflicts:\n#\tbls/src/main/java/tech/pegasys/teku/bls/BLS.java\n#\tbls/src/main/java/tech/pegasys/teku/bls/impl/Signature.java\n#\tbls/src/main/java/tech/pegasys/teku/bls/impl/mikuli/MikuliBLS12381.java\n#\tbls/src/main/java/tech/pegasys/teku/bls/impl/mikuli/MikuliPublicKey.java\n#\tbls/src/main/java/tech/pegasys/teku/bls/impl/mikuli/MikuliSignature.java\n#\tbls/src/main/java/tech/pegasys/teku/bls/impl/noop/NoopBLS12381.java\n#\tbls/src/main/java/tech/pegasys/teku/bls/impl/noop/NoopSignature.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6aafa1a7bbee8ec5284fd6725ef06517a376fce", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/a6aafa1a7bbee8ec5284fd6725ef06517a376fce", "committedDate": "2020-07-21T12:02:53Z", "message": "Load native library from resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "763bddeae0e8124a3b384c2522376bf8a9a89093", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/763bddeae0e8124a3b384c2522376bf8a9a89093", "committedDate": "2020-07-21T13:13:40Z", "message": "BlstSecretKey should be created from 48 bytes and return 48 bytes from toBytes() according to interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "950622b3a5e349beaa260a8bf4528ba585df52dc", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/950622b3a5e349beaa260a8bf4528ba585df52dc", "committedDate": "2020-07-21T13:24:39Z", "message": "Make Mikuli specific test relying on the mikuli implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c20d6cbec9607577b946fd37be7be6dc1b8df781", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/c20d6cbec9607577b946fd37be7be6dc1b8df781", "committedDate": "2020-07-21T16:32:48Z", "message": "Merge remote-tracking branch 'pegasys/master' into feature-blst"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d32eed884e52b90e1d0b9cc5407e887417700922", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/d32eed884e52b90e1d0b9cc5407e887417700922", "committedDate": "2020-07-21T16:34:52Z", "message": "Add latest Blst DLL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28f099ac888ed45c6632dc2ebf4f85c8cd7fd6a2", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/28f099ac888ed45c6632dc2ebf4f85c8cd7fd6a2", "committedDate": "2020-07-22T12:22:20Z", "message": "Merge remote-tracking branch 'pegasys/master' into feature-blst"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc7f83b178654bb76d86cc5bd4222a764b21a6ba", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/cc7f83b178654bb76d86cc5bd4222a764b21a6ba", "committedDate": "2020-07-22T12:24:45Z", "message": "BlstSecretKey is created from Bytes32"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27f8cb35897616aac384aa9b2434f2bc501eb32a", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/27f8cb35897616aac384aa9b2434f2bc501eb32a", "committedDate": "2020-07-22T13:02:37Z", "message": "Fix Mikuli specific test to use Mikuli implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f06b765a9500f0ac94ad05ef07c82347c16fdccb", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/f06b765a9500f0ac94ad05ef07c82347c16fdccb", "committedDate": "2020-07-22T13:34:39Z", "message": "Implement BlstPublicKey validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "922254fda8f6ab2489ee9ba9ffea3ab8aaa9644c", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/922254fda8f6ab2489ee9ba9ffea3ab8aaa9644c", "committedDate": "2020-07-22T13:35:37Z", "message": "Replace BLSPublicKey.isValid() with fromBytesCompressedValidate() method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd744d1627e55ca3b6ec91e4e462e0f046e9a395", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/dd744d1627e55ca3b6ec91e4e462e0f046e9a395", "committedDate": "2020-07-22T14:07:36Z", "message": "Make BLSPublicKey fromBytesCompressed/toBytesCompressed operating with Bytes48 type. SecretKey.toBytes() returns Bytes32"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcef1b32c2db314cdff5752cd893a5cc1b55de4f", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/dcef1b32c2db314cdff5752cd893a5cc1b55de4f", "committedDate": "2020-07-22T14:38:54Z", "message": "Rename BLSPublicKey/BLSSignature.from/toBytes() methods to from/toSSZBytes() to be more explicit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8ae35bdc6eddc2dbf247328fdec6c8e7c98da08", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/a8ae35bdc6eddc2dbf247328fdec6c8e7c98da08", "committedDate": "2020-07-22T16:21:11Z", "message": "Hide constructors. Make PublicKey and Signature implementations to be lazily evaluated inside corresponding BLS wrappers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e13b6e4dd1356ed122bdb6f322d0599cb97e844", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/3e13b6e4dd1356ed122bdb6f322d0599cb97e844", "committedDate": "2020-07-22T16:21:33Z", "message": "Fix DLL binary attribute"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f4d590af28fc17afde806e2ffa5656cc7c3f399", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/2f4d590af28fc17afde806e2ffa5656cc7c3f399", "committedDate": "2020-07-22T16:22:07Z", "message": "Again add DLL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "706f888ca7c9b32c720fe8237ba230bb1b30c55d", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/706f888ca7c9b32c720fe8237ba230bb1b30c55d", "committedDate": "2020-07-22T16:35:06Z", "message": "Validate BlstSignature when creating from bytes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66a854c4caa0d14cbdcf1f14f3b91a58ae387fe5", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/66a854c4caa0d14cbdcf1f14f3b91a58ae387fe5", "committedDate": "2020-07-22T16:35:23Z", "message": "Add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4db7dc45482d71c2de28f2dec42829061f4a7cad", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/4db7dc45482d71c2de28f2dec42829061f4a7cad", "committedDate": "2020-07-22T16:54:03Z", "message": "Fix BlstPublicKey validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14e7f972ded2ed15775729362c960304d3f62dda", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/14e7f972ded2ed15775729362c960304d3f62dda", "committedDate": "2020-07-23T10:37:29Z", "message": "Fix accidentally committed wrong ETH2_DST"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b2f04ba4e04bf13da9f5b9bab778aeb4be21a56", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/1b2f04ba4e04bf13da9f5b9bab778aeb4be21a56", "committedDate": "2020-07-23T10:38:28Z", "message": "Add a BLS test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54c6d4ec3ba5383f5388f41c56c632b7df6e54df", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/54c6d4ec3ba5383f5388f41c56c632b7df6e54df", "committedDate": "2020-07-23T10:39:09Z", "message": "Add mikuli and blst specific infinity signature tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d65ec8644e185aa1d441212afaa4415e03522bc9", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/d65ec8644e185aa1d441212afaa4415e03522bc9", "committedDate": "2020-07-23T10:40:16Z", "message": "Add BlstPublicKey.fromBytesUncompressed for testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87d4cd5bced64b48775e8319aaa82c0470f8dc2d", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/87d4cd5bced64b48775e8319aaa82c0470f8dc2d", "committedDate": "2020-07-23T10:55:45Z", "message": "Convert pre-generated keypairs dump to 32-byte secretKeys and compressed pubkeys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4e5ca890651c35b8a8f1327847ef59275192105", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/d4e5ca890651c35b8a8f1327847ef59275192105", "committedDate": "2020-07-23T12:57:06Z", "message": "For BLSPublicKey/BLSSignature use bytes representation for hashCode() and equals() since we need ability to compare valid (from SSZ standpoint) 'empty' instances, but shouldn't decode them to real instances"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b308dd0ed9c05ef4152074099f4abd2971fe0a0", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/5b308dd0ed9c05ef4152074099f4abd2971fe0a0", "committedDate": "2020-07-23T12:59:07Z", "message": "Move the test case to BLSSignatureTest since empty() case is not handled by the implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1af5520357cb4d660c9b64ad08e2b34b2de869b5", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/1af5520357cb4d660c9b64ad08e2b34b2de869b5", "committedDate": "2020-07-23T13:02:28Z", "message": "Apply spotless. Remove obsolete file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e87006dfcea4a1402c2828226b98b3515819c550", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/e87006dfcea4a1402c2828226b98b3515819c550", "committedDate": "2020-07-23T13:46:54Z", "message": "In case of fail fast when deserializing invalid signature bytes, just mark the signature invalid. This is to deal with empty signatures (valid from SSZ perspective)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "902ec5661b3e1dc21b8c683c9f73b2406ccac34a", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/902ec5661b3e1dc21b8c683c9f73b2406ccac34a", "committedDate": "2020-07-23T13:47:21Z", "message": "Fix reference tests running on Windows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47ca1c63a1c333d7077a2c2348b24e6bc39b7927", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/47ca1c63a1c333d7077a2c2348b24e6bc39b7927", "committedDate": "2020-07-23T16:23:18Z", "message": "Merge remote-tracking branch 'pegasys/master' into feature-blst\n\n# Conflicts:\n#\tdata/provider/src/test/java/tech/pegasys/teku/api/ValidatorDataProviderTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b204b522cd06ad7cffc1149918bd248fadfd2b87", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/b204b522cd06ad7cffc1149918bd248fadfd2b87", "committedDate": "2020-07-24T11:20:08Z", "message": "Add Mikuli fallback when couldn't load Blst"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "569e742305281cbcbd710558c19a394f4febcf87", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/569e742305281cbcbd710558c19a394f4febcf87", "committedDate": "2020-07-24T13:12:49Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6836672814adaa5a746a6e6f03fc93b6074499f", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/e6836672814adaa5a746a6e6f03fc93b6074499f", "committedDate": "2020-07-24T15:10:20Z", "message": "Move SWIG wrapper to a separate project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41e647a36e55bfd4bb30f71ae459be59ccfd86e3", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/41e647a36e55bfd4bb30f71ae459be59ccfd86e3", "committedDate": "2020-07-24T15:21:37Z", "message": "Fix errorprone warns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e08b756b416dfcb10e4c6696ca2c289b9b36641d", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/e08b756b416dfcb10e4c6696ca2c289b9b36641d", "committedDate": "2020-07-24T15:41:02Z", "message": "Update license for jblst"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65f0f50a00cd7f1eedfeeb4a76c615d3579c2125", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/65f0f50a00cd7f1eedfeeb4a76c615d3579c2125", "committedDate": "2020-07-24T17:30:11Z", "message": "Put the blst artifact version to versions.gradle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acebccaa13bda6abebcd7e46a5d13b751db5475f", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/acebccaa13bda6abebcd7e46a5d13b751db5475f", "committedDate": "2020-07-27T11:05:43Z", "message": "Implement BlstSecretKey.destroy()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db88ac0d5287d9e1695fe0aa9288bdd300cda7ff", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/db88ac0d5287d9e1695fe0aa9288bdd300cda7ff", "committedDate": "2020-07-27T16:42:11Z", "message": "Temporary handling infinite pubkey/signature as a special case until https://github.com/supranational/blst/issues/11 is resolved"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "604766371e8ce45fe7e7550b6c2aed351454830e", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/604766371e8ce45fe7e7550b6c2aed351454830e", "committedDate": "2020-07-27T16:43:47Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "831854839a5b2c13b9d0b22680a5645eb573100b", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/831854839a5b2c13b9d0b22680a5645eb573100b", "committedDate": "2020-07-27T16:58:29Z", "message": "Resolve warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f9f68869f9b6795d1bb24b2c2ce1b8f7631e767", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/1f9f68869f9b6795d1bb24b2c2ce1b8f7631e767", "committedDate": "2020-07-27T17:11:52Z", "message": "Merge remote-tracking branch 'pegasys/master' into feature-blst"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aae5ea078cf23afa6a3964a15d38877b9b267a63", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/aae5ea078cf23afa6a3964a15d38877b9b267a63", "committedDate": "2020-07-28T16:26:53Z", "message": "Generate KeyPair from seed in an implementation independent way. Throw exception when instantiating SecretKey from non-valid BLS12381 scalar value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "193c8f512b3527b9f5618f202145fc360d08b94d", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/193c8f512b3527b9f5618f202145fc360d08b94d", "committedDate": "2020-07-28T16:29:12Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90a35da5c5b2f789ded9e9aa37c4cc2ee30386f2", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/90a35da5c5b2f789ded9e9aa37c4cc2ee30386f2", "committedDate": "2020-07-28T16:30:32Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce26e6aa3fd97997be658b9575c380aa37d7024c", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/ce26e6aa3fd97997be658b9575c380aa37d7024c", "committedDate": "2020-07-28T16:32:56Z", "message": "Rename method to a more specific: aggregateSignatures()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c02825ee51aaaf3c81ca08ac835fc489c4680d0", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/6c02825ee51aaaf3c81ca08ac835fc489c4680d0", "committedDate": "2020-07-28T16:34:22Z", "message": "Fix test compilation error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a2069c9b60ea7ebbab5adc0799ee4bfd26ac11f", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/8a2069c9b60ea7ebbab5adc0799ee4bfd26ac11f", "committedDate": "2020-07-28T16:35:59Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d82db16ea019fd63dbddb0a02927c0b3308a7a43", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/d82db16ea019fd63dbddb0a02927c0b3308a7a43", "committedDate": "2020-07-28T16:43:13Z", "message": "Make BLSPublicKey.getPublicKey() package private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1de2060ae0940d5ea71c08888943b094760ccdfb", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/1de2060ae0940d5ea71c08888943b094760ccdfb", "committedDate": "2020-07-28T17:06:22Z", "message": "Allow empty list signatures aggregation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16593568c8f8c98b122bdd9c97fe1a35f9c2339d", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/16593568c8f8c98b122bdd9c97fe1a35f9c2339d", "committedDate": "2020-07-28T17:19:48Z", "message": "Disallow empty list signatures aggregation (revert prev commit)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0b27d478fb2eb9ea31313600529ca384f60784e", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/d0b27d478fb2eb9ea31313600529ca384f60784e", "committedDate": "2020-07-28T19:20:57Z", "message": "Fix verify aggregated signature against multiple pubKey:message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4978c2bdfd4b7a17f2de369cca137beca9550523", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/4978c2bdfd4b7a17f2de369cca137beca9550523", "committedDate": "2020-07-29T10:29:10Z", "message": "Fix blst equal pubkeys aggregation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef1fa1c1624b3df9f8a28a847077b64eac297c64", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/ef1fa1c1624b3df9f8a28a847077b64eac297c64", "committedDate": "2020-07-29T10:41:28Z", "message": "Make BLSSignature.getSignature() package private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/fa8ec9862ed4dcda26ef467d981198c71be8c84d", "committedDate": "2020-07-29T10:52:43Z", "message": "Merge remote-tracking branch 'pegasys/master' into feature-blst"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTk3NDU2", "url": "https://github.com/ConsenSys/teku/pull/2453#pullrequestreview-457997456", "createdAt": "2020-07-30T01:09:43Z", "commit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMToxMTozMVrOG5Pgnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDowNTo0MlrOG5STZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3NjEyNw==", "bodyText": "Is there any risk that two keys with different bytes could wind up being the same G1 point when parsed (ie that two different byte representations could actually be the same key)?", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r462676127", "createdAt": "2020-07-30T01:11:31Z", "author": {"login": "ajsutton"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/BLSPublicKey.java", "diffHunk": "@@ -155,11 +167,11 @@ public boolean equals(Object obj) {\n     }\n \n     BLSPublicKey other = (BLSPublicKey) obj;\n-    return Objects.equals(this.getPublicKey(), other.getPublicKey());\n+    return Objects.equals(this.toBytesCompressed(), other.toBytesCompressed());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY3OTg1OA==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static BLS12381 BlsImpl;\n          \n          \n            \n              private static final BLS12381 blsImpl;\n          \n      \n    \n    \n  \n\nAlso see comment on MikuliBLS12381.INSTANCE.", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r462679858", "createdAt": "2020-07-30T01:25:48Z", "author": {"login": "ajsutton"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/BLS.java", "diffHunk": "@@ -43,7 +44,17 @@\n \n   private static final Logger LOG = LogManager.getLogger();\n \n-  private static BLS12381 BlsImpl = MikuliBLS12381.INSTANCE;\n+  private static BLS12381 BlsImpl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4MDg2NQ==", "bodyText": "This depends on class loading and initialisation behaviour which has been very unpredictable in the past (maybe the JVM spec has improved to make it more predictable now - not sure).  It may be worth making INSTANCE be an Optional that only has a value if the library was loaded successfully:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static BlstBLS12381 INSTANCE = new BlstBLS12381();\n          \n          \n            \n            \n          \n          \n            \n              private static final int BATCH_RANDOM_BYTES = 8;\n          \n          \n            \n            \n          \n          \n            \n              static {\n          \n          \n            \n                try {\n          \n          \n            \n                  NativeUtils.loadLibraryFromJar(\"/\" + System.mapLibraryName(\"jblst\"));\n          \n          \n            \n                } catch (IOException e) {\n          \n          \n            \n                  throw new RuntimeException(e);\n          \n          \n            \n                }\n          \n          \n            \n              }\n          \n          \n            \n              private static final Logger LOG = LogManager.getLogger();\n          \n          \n            \n              \n          \n          \n            \n              public static final Optional<BlstBLS12381> INSTANCE;\n          \n          \n            \n            \n          \n          \n            \n              private static final int BATCH_RANDOM_BYTES = 8;\n          \n          \n            \n            \n          \n          \n            \n              static {\n          \n          \n            \n                boolean libraryLoaded;\n          \n          \n            \n                try {\n          \n          \n            \n                  NativeUtils.loadLibraryFromJar(\"/\" + System.mapLibraryName(\"jblst\"));\n          \n          \n            \n                  libraryLoaded = true;\n          \n          \n            \n                  LOG.info(\"Successfully loaded native BLS library\");\n          \n          \n            \n                } catch (IOException e) {\n          \n          \n            \n                  LOG.warn(\"Couldn't load native BLS library: \" + e);\n          \n          \n            \n                  libraryLoaded = false;\n          \n          \n            \n                }\n          \n          \n            \n                INSTANCE = libraryLoaded ? Optional.of(new BlstBLS12381()) : Optional.empty();\n          \n          \n            \n              }", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r462680865", "createdAt": "2020-07-30T01:29:35Z", "author": {"login": "ajsutton"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/impl/blst/BlstBLS12381.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.bls.impl.blst;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Collectors;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.bytes.Bytes48;\n+import tech.pegasys.teku.bls.BatchSemiAggregate;\n+import tech.pegasys.teku.bls.impl.BLS12381;\n+import tech.pegasys.teku.bls.impl.KeyPair;\n+import tech.pegasys.teku.bls.impl.PublicKey;\n+import tech.pegasys.teku.bls.impl.Signature;\n+import tech.pegasys.teku.bls.impl.blst.swig.BLST_ERROR;\n+import tech.pegasys.teku.bls.impl.blst.swig.blst;\n+import tech.pegasys.teku.bls.impl.blst.swig.p2;\n+import tech.pegasys.teku.bls.impl.blst.swig.p2_affine;\n+import tech.pegasys.teku.bls.impl.blst.swig.pairing;\n+\n+public class BlstBLS12381 implements BLS12381 {\n+\n+  public static BlstBLS12381 INSTANCE = new BlstBLS12381();\n+\n+  private static final int BATCH_RANDOM_BYTES = 8;\n+\n+  static {\n+    try {\n+      NativeUtils.loadLibraryFromJar(\"/\" + System.mapLibraryName(\"jblst\"));\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY4Mzg2MA==", "bodyText": "If it's at all possible to have the SWIG bindings make these classes Autocloseable that would be awesome.  In any case we should ensure they are deleted regardless of any potential exceptions or errors that occur so would have to use try/finally blocks.  It will get really ugly without Autocloseable.\nWe're also winding up with a native memory leak because the wrapped BlstSignature returned has a reference to p2SignatureAffine but no way to close it and delete that native object.  The finalize method isn't guaranteed to be called in any kind of timely manner so we can't really depend on it.\nIf we have to depend on automatic cleanup (which may well be the case for things like public keys and signatures that are used outside of the Blst specific code and currently expect to be fully on-heap), we should use java.lang.ref.Cleaner to do it which is the recommended instead of finalize.\nMaybe use AutoCloseable if possible for the local variables we need to release and then use Cleaner for the things that are actually returned from this class.", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r462683860", "createdAt": "2020-07-30T01:38:33Z", "author": {"login": "ajsutton"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/impl/blst/BlstBLS12381.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.bls.impl.blst;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Collectors;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.bytes.Bytes48;\n+import tech.pegasys.teku.bls.BatchSemiAggregate;\n+import tech.pegasys.teku.bls.impl.BLS12381;\n+import tech.pegasys.teku.bls.impl.KeyPair;\n+import tech.pegasys.teku.bls.impl.PublicKey;\n+import tech.pegasys.teku.bls.impl.Signature;\n+import tech.pegasys.teku.bls.impl.blst.swig.BLST_ERROR;\n+import tech.pegasys.teku.bls.impl.blst.swig.blst;\n+import tech.pegasys.teku.bls.impl.blst.swig.p2;\n+import tech.pegasys.teku.bls.impl.blst.swig.p2_affine;\n+import tech.pegasys.teku.bls.impl.blst.swig.pairing;\n+\n+public class BlstBLS12381 implements BLS12381 {\n+\n+  public static BlstBLS12381 INSTANCE = new BlstBLS12381();\n+\n+  private static final int BATCH_RANDOM_BYTES = 8;\n+\n+  static {\n+    try {\n+      NativeUtils.loadLibraryFromJar(\"/\" + System.mapLibraryName(\"jblst\"));\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  private static Random getRND() {\n+    // Milagro RAND has some issues with generating 'small' random numbers\n+    // and is not thread safe\n+    // Using non-secure random due to the JDK Linux secure random issue:\n+    // https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6521844\n+    // A potential attack here has a very limited application and is not feasible\n+    // Thus using non-secure random doesn't significantly mitigate the security\n+    return ThreadLocalRandom.current();\n+  }\n+\n+  public static BlstSignature sign(BlstSecretKey secretKey, Bytes message) {\n+    p2 p2Signature = new p2();\n+    p2 hash = HashToCurve.hashToG2(message);\n+    blst.sign_pk_in_g1(p2Signature, hash, secretKey.getScalarVal());\n+    p2_affine p2SignatureAffine = new p2_affine();\n+    blst.p2_to_affine(p2SignatureAffine, p2Signature);\n+    p2Signature.delete();\n+    hash.delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcwNjUyNQ==", "bodyText": "This comment is a little scary. Does it still apply?", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r462706525", "createdAt": "2020-07-30T03:03:51Z", "author": {"login": "ajsutton"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/impl/blst/BlstBLS12381.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.bls.impl.blst;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Collectors;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.bytes.Bytes48;\n+import tech.pegasys.teku.bls.BatchSemiAggregate;\n+import tech.pegasys.teku.bls.impl.BLS12381;\n+import tech.pegasys.teku.bls.impl.KeyPair;\n+import tech.pegasys.teku.bls.impl.PublicKey;\n+import tech.pegasys.teku.bls.impl.Signature;\n+import tech.pegasys.teku.bls.impl.blst.swig.BLST_ERROR;\n+import tech.pegasys.teku.bls.impl.blst.swig.blst;\n+import tech.pegasys.teku.bls.impl.blst.swig.p2;\n+import tech.pegasys.teku.bls.impl.blst.swig.p2_affine;\n+import tech.pegasys.teku.bls.impl.blst.swig.pairing;\n+\n+public class BlstBLS12381 implements BLS12381 {\n+\n+  public static BlstBLS12381 INSTANCE = new BlstBLS12381();\n+\n+  private static final int BATCH_RANDOM_BYTES = 8;\n+\n+  static {\n+    try {\n+      NativeUtils.loadLibraryFromJar(\"/\" + System.mapLibraryName(\"jblst\"));\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  private static Random getRND() {\n+    // Milagro RAND has some issues with generating 'small' random numbers\n+    // and is not thread safe\n+    // Using non-secure random due to the JDK Linux secure random issue:\n+    // https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6521844\n+    // A potential attack here has a very limited application and is not feasible\n+    // Thus using non-secure random doesn't significantly mitigate the security\n+    return ThreadLocalRandom.current();\n+  }\n+\n+  public static BlstSignature sign(BlstSecretKey secretKey, Bytes message) {\n+    p2 p2Signature = new p2();\n+    p2 hash = HashToCurve.hashToG2(message);\n+    blst.sign_pk_in_g1(p2Signature, hash, secretKey.getScalarVal());\n+    p2_affine p2SignatureAffine = new p2_affine();\n+    blst.p2_to_affine(p2SignatureAffine, p2Signature);\n+    p2Signature.delete();\n+    hash.delete();\n+    return new BlstSignature(p2SignatureAffine, true);\n+  }\n+\n+  public static boolean verify(BlstPublicKey publicKey, Bytes message, BlstSignature signature) {\n+    if (publicKey.isInfinity() || signature.isInfinity()) {\n+      return publicKey.isInfinity() && signature.isInfinity();\n+    }\n+    BLST_ERROR res =\n+        blst.core_verify_pk_in_g1(\n+            publicKey.ecPoint,\n+            signature.ec2Point,\n+            1,\n+            message.toArrayUnsafe(),\n+            HashToCurve.ETH2_DST.toArrayUnsafe(),\n+            new byte[0]);\n+    return res == BLST_ERROR.BLST_SUCCESS;\n+  }\n+\n+  @Override\n+  public KeyPair generateKeyPair(Random random) {\n+    BlstSecretKey secretKey = BlstSecretKey.generateNew(random);\n+    return new KeyPair(secretKey);\n+  }\n+\n+  @Override\n+  public BlstPublicKey publicKeyFromCompressed(Bytes48 compressedPublicKeyBytes) {\n+    return BlstPublicKey.fromBytes(compressedPublicKeyBytes);\n+  }\n+\n+  @Override\n+  public BlstSignature signatureFromCompressed(Bytes compressedSignatureBytes) {\n+    return BlstSignature.fromBytes(compressedSignatureBytes);\n+  }\n+\n+  @Override\n+  public BlstSecretKey secretKeyFromBytes(Bytes32 secretKeyBytes) {\n+    return BlstSecretKey.fromBytes(secretKeyBytes);\n+  }\n+\n+  @Override\n+  public BlstPublicKey aggregatePublicKeys(List<? extends PublicKey> publicKeys) {\n+    return BlstPublicKey.aggregate(\n+        publicKeys.stream().map(k -> (BlstPublicKey) k).collect(Collectors.toList()));\n+  }\n+\n+  @Override\n+  public BlstSignature aggregateSignatures(List<? extends Signature> signatures) {\n+    return BlstSignature.aggregate(\n+        signatures.stream().map(s -> (BlstSignature) s).collect(Collectors.toList()));\n+  }\n+\n+  pairing blstPrepareVerifyAggregated(\n+      BlstPublicKey pubKey, Bytes message, pairing ctx, BlstSignature blstSignature) {\n+\n+    p2 g2Hash = HashToCurve.hashToG2(message);\n+    p2_affine p2Affine = new p2_affine();\n+    blst.p2_to_affine(p2Affine, g2Hash);\n+\n+    if (ctx == null) {\n+      ctx = new pairing();\n+      blst.pairing_init(ctx);\n+    }\n+\n+    try {\n+      BLST_ERROR ret =\n+          blst.pairing_aggregate_pk_in_g1(\n+              ctx,\n+              pubKey.ecPoint,\n+              blstSignature == null ? null : blstSignature.ec2Point,\n+              1,\n+              message.toArrayUnsafe(),\n+              HashToCurve.ETH2_DST.toArrayUnsafe(),\n+              null);\n+      if (ret != BLST_ERROR.BLST_SUCCESS) throw new IllegalArgumentException(\"Error: \" + ret);\n+    } catch (Exception e) {\n+      ctx.delete();\n+      throw e;\n+    } finally {\n+      g2Hash.delete();\n+      p2Affine.delete(); // not sure if its copied inside pairing_mul_n_aggregate_pk_in_g1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcwNzA0OQ==", "bodyText": "This is only called from within BlstSignature could it be moved to a private method there? Releasing a parameter is a little scary so would be nice if it could be inlined.", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r462707049", "createdAt": "2020-07-30T03:05:58Z", "author": {"login": "ajsutton"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/impl/blst/BlstBLS12381.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.bls.impl.blst;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Collectors;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.bytes.Bytes48;\n+import tech.pegasys.teku.bls.BatchSemiAggregate;\n+import tech.pegasys.teku.bls.impl.BLS12381;\n+import tech.pegasys.teku.bls.impl.KeyPair;\n+import tech.pegasys.teku.bls.impl.PublicKey;\n+import tech.pegasys.teku.bls.impl.Signature;\n+import tech.pegasys.teku.bls.impl.blst.swig.BLST_ERROR;\n+import tech.pegasys.teku.bls.impl.blst.swig.blst;\n+import tech.pegasys.teku.bls.impl.blst.swig.p2;\n+import tech.pegasys.teku.bls.impl.blst.swig.p2_affine;\n+import tech.pegasys.teku.bls.impl.blst.swig.pairing;\n+\n+public class BlstBLS12381 implements BLS12381 {\n+\n+  public static BlstBLS12381 INSTANCE = new BlstBLS12381();\n+\n+  private static final int BATCH_RANDOM_BYTES = 8;\n+\n+  static {\n+    try {\n+      NativeUtils.loadLibraryFromJar(\"/\" + System.mapLibraryName(\"jblst\"));\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  private static Random getRND() {\n+    // Milagro RAND has some issues with generating 'small' random numbers\n+    // and is not thread safe\n+    // Using non-secure random due to the JDK Linux secure random issue:\n+    // https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6521844\n+    // A potential attack here has a very limited application and is not feasible\n+    // Thus using non-secure random doesn't significantly mitigate the security\n+    return ThreadLocalRandom.current();\n+  }\n+\n+  public static BlstSignature sign(BlstSecretKey secretKey, Bytes message) {\n+    p2 p2Signature = new p2();\n+    p2 hash = HashToCurve.hashToG2(message);\n+    blst.sign_pk_in_g1(p2Signature, hash, secretKey.getScalarVal());\n+    p2_affine p2SignatureAffine = new p2_affine();\n+    blst.p2_to_affine(p2SignatureAffine, p2Signature);\n+    p2Signature.delete();\n+    hash.delete();\n+    return new BlstSignature(p2SignatureAffine, true);\n+  }\n+\n+  public static boolean verify(BlstPublicKey publicKey, Bytes message, BlstSignature signature) {\n+    if (publicKey.isInfinity() || signature.isInfinity()) {\n+      return publicKey.isInfinity() && signature.isInfinity();\n+    }\n+    BLST_ERROR res =\n+        blst.core_verify_pk_in_g1(\n+            publicKey.ecPoint,\n+            signature.ec2Point,\n+            1,\n+            message.toArrayUnsafe(),\n+            HashToCurve.ETH2_DST.toArrayUnsafe(),\n+            new byte[0]);\n+    return res == BLST_ERROR.BLST_SUCCESS;\n+  }\n+\n+  @Override\n+  public KeyPair generateKeyPair(Random random) {\n+    BlstSecretKey secretKey = BlstSecretKey.generateNew(random);\n+    return new KeyPair(secretKey);\n+  }\n+\n+  @Override\n+  public BlstPublicKey publicKeyFromCompressed(Bytes48 compressedPublicKeyBytes) {\n+    return BlstPublicKey.fromBytes(compressedPublicKeyBytes);\n+  }\n+\n+  @Override\n+  public BlstSignature signatureFromCompressed(Bytes compressedSignatureBytes) {\n+    return BlstSignature.fromBytes(compressedSignatureBytes);\n+  }\n+\n+  @Override\n+  public BlstSecretKey secretKeyFromBytes(Bytes32 secretKeyBytes) {\n+    return BlstSecretKey.fromBytes(secretKeyBytes);\n+  }\n+\n+  @Override\n+  public BlstPublicKey aggregatePublicKeys(List<? extends PublicKey> publicKeys) {\n+    return BlstPublicKey.aggregate(\n+        publicKeys.stream().map(k -> (BlstPublicKey) k).collect(Collectors.toList()));\n+  }\n+\n+  @Override\n+  public BlstSignature aggregateSignatures(List<? extends Signature> signatures) {\n+    return BlstSignature.aggregate(\n+        signatures.stream().map(s -> (BlstSignature) s).collect(Collectors.toList()));\n+  }\n+\n+  pairing blstPrepareVerifyAggregated(\n+      BlstPublicKey pubKey, Bytes message, pairing ctx, BlstSignature blstSignature) {\n+\n+    p2 g2Hash = HashToCurve.hashToG2(message);\n+    p2_affine p2Affine = new p2_affine();\n+    blst.p2_to_affine(p2Affine, g2Hash);\n+\n+    if (ctx == null) {\n+      ctx = new pairing();\n+      blst.pairing_init(ctx);\n+    }\n+\n+    try {\n+      BLST_ERROR ret =\n+          blst.pairing_aggregate_pk_in_g1(\n+              ctx,\n+              pubKey.ecPoint,\n+              blstSignature == null ? null : blstSignature.ec2Point,\n+              1,\n+              message.toArrayUnsafe(),\n+              HashToCurve.ETH2_DST.toArrayUnsafe(),\n+              null);\n+      if (ret != BLST_ERROR.BLST_SUCCESS) throw new IllegalArgumentException(\"Error: \" + ret);\n+    } catch (Exception e) {\n+      ctx.delete();\n+      throw e;\n+    } finally {\n+      g2Hash.delete();\n+      p2Affine.delete(); // not sure if its copied inside pairing_mul_n_aggregate_pk_in_g1\n+    }\n+\n+    return ctx;\n+  }\n+\n+  boolean blstCompleteVerifyAggregated(pairing ctx) {\n+    try {\n+      blst.pairing_commit(ctx);\n+      return blst.pairing_finalverify(ctx, null) > 0;\n+    } finally {\n+      ctx.delete();\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcwOTI4MQ==", "bodyText": "Shouldn't this return anyInvalidDummy?  ie if we have an invalid BlstInfiniteSemiAggregate and a BlstFiniteSemiAggregate we'd return false so why return true if we don't have a finite aggregate?", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r462709281", "createdAt": "2020-07-30T03:14:39Z", "author": {"login": "ajsutton"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/impl/blst/BlstBLS12381.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.bls.impl.blst;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.stream.Collectors;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.bytes.Bytes48;\n+import tech.pegasys.teku.bls.BatchSemiAggregate;\n+import tech.pegasys.teku.bls.impl.BLS12381;\n+import tech.pegasys.teku.bls.impl.KeyPair;\n+import tech.pegasys.teku.bls.impl.PublicKey;\n+import tech.pegasys.teku.bls.impl.Signature;\n+import tech.pegasys.teku.bls.impl.blst.swig.BLST_ERROR;\n+import tech.pegasys.teku.bls.impl.blst.swig.blst;\n+import tech.pegasys.teku.bls.impl.blst.swig.p2;\n+import tech.pegasys.teku.bls.impl.blst.swig.p2_affine;\n+import tech.pegasys.teku.bls.impl.blst.swig.pairing;\n+\n+public class BlstBLS12381 implements BLS12381 {\n+\n+  public static BlstBLS12381 INSTANCE = new BlstBLS12381();\n+\n+  private static final int BATCH_RANDOM_BYTES = 8;\n+\n+  static {\n+    try {\n+      NativeUtils.loadLibraryFromJar(\"/\" + System.mapLibraryName(\"jblst\"));\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  private static Random getRND() {\n+    // Milagro RAND has some issues with generating 'small' random numbers\n+    // and is not thread safe\n+    // Using non-secure random due to the JDK Linux secure random issue:\n+    // https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6521844\n+    // A potential attack here has a very limited application and is not feasible\n+    // Thus using non-secure random doesn't significantly mitigate the security\n+    return ThreadLocalRandom.current();\n+  }\n+\n+  public static BlstSignature sign(BlstSecretKey secretKey, Bytes message) {\n+    p2 p2Signature = new p2();\n+    p2 hash = HashToCurve.hashToG2(message);\n+    blst.sign_pk_in_g1(p2Signature, hash, secretKey.getScalarVal());\n+    p2_affine p2SignatureAffine = new p2_affine();\n+    blst.p2_to_affine(p2SignatureAffine, p2Signature);\n+    p2Signature.delete();\n+    hash.delete();\n+    return new BlstSignature(p2SignatureAffine, true);\n+  }\n+\n+  public static boolean verify(BlstPublicKey publicKey, Bytes message, BlstSignature signature) {\n+    if (publicKey.isInfinity() || signature.isInfinity()) {\n+      return publicKey.isInfinity() && signature.isInfinity();\n+    }\n+    BLST_ERROR res =\n+        blst.core_verify_pk_in_g1(\n+            publicKey.ecPoint,\n+            signature.ec2Point,\n+            1,\n+            message.toArrayUnsafe(),\n+            HashToCurve.ETH2_DST.toArrayUnsafe(),\n+            new byte[0]);\n+    return res == BLST_ERROR.BLST_SUCCESS;\n+  }\n+\n+  @Override\n+  public KeyPair generateKeyPair(Random random) {\n+    BlstSecretKey secretKey = BlstSecretKey.generateNew(random);\n+    return new KeyPair(secretKey);\n+  }\n+\n+  @Override\n+  public BlstPublicKey publicKeyFromCompressed(Bytes48 compressedPublicKeyBytes) {\n+    return BlstPublicKey.fromBytes(compressedPublicKeyBytes);\n+  }\n+\n+  @Override\n+  public BlstSignature signatureFromCompressed(Bytes compressedSignatureBytes) {\n+    return BlstSignature.fromBytes(compressedSignatureBytes);\n+  }\n+\n+  @Override\n+  public BlstSecretKey secretKeyFromBytes(Bytes32 secretKeyBytes) {\n+    return BlstSecretKey.fromBytes(secretKeyBytes);\n+  }\n+\n+  @Override\n+  public BlstPublicKey aggregatePublicKeys(List<? extends PublicKey> publicKeys) {\n+    return BlstPublicKey.aggregate(\n+        publicKeys.stream().map(k -> (BlstPublicKey) k).collect(Collectors.toList()));\n+  }\n+\n+  @Override\n+  public BlstSignature aggregateSignatures(List<? extends Signature> signatures) {\n+    return BlstSignature.aggregate(\n+        signatures.stream().map(s -> (BlstSignature) s).collect(Collectors.toList()));\n+  }\n+\n+  pairing blstPrepareVerifyAggregated(\n+      BlstPublicKey pubKey, Bytes message, pairing ctx, BlstSignature blstSignature) {\n+\n+    p2 g2Hash = HashToCurve.hashToG2(message);\n+    p2_affine p2Affine = new p2_affine();\n+    blst.p2_to_affine(p2Affine, g2Hash);\n+\n+    if (ctx == null) {\n+      ctx = new pairing();\n+      blst.pairing_init(ctx);\n+    }\n+\n+    try {\n+      BLST_ERROR ret =\n+          blst.pairing_aggregate_pk_in_g1(\n+              ctx,\n+              pubKey.ecPoint,\n+              blstSignature == null ? null : blstSignature.ec2Point,\n+              1,\n+              message.toArrayUnsafe(),\n+              HashToCurve.ETH2_DST.toArrayUnsafe(),\n+              null);\n+      if (ret != BLST_ERROR.BLST_SUCCESS) throw new IllegalArgumentException(\"Error: \" + ret);\n+    } catch (Exception e) {\n+      ctx.delete();\n+      throw e;\n+    } finally {\n+      g2Hash.delete();\n+      p2Affine.delete(); // not sure if its copied inside pairing_mul_n_aggregate_pk_in_g1\n+    }\n+\n+    return ctx;\n+  }\n+\n+  boolean blstCompleteVerifyAggregated(pairing ctx) {\n+    try {\n+      blst.pairing_commit(ctx);\n+      return blst.pairing_finalverify(ctx, null) > 0;\n+    } finally {\n+      ctx.delete();\n+    }\n+  }\n+\n+  @Override\n+  public BatchSemiAggregate prepareBatchVerify(\n+      int index, List<? extends PublicKey> publicKeys, Bytes message, Signature signature) {\n+\n+    BlstPublicKey aggrPubKey = aggregatePublicKeys(publicKeys);\n+    BlstSignature blstSignature = (BlstSignature) signature;\n+    if (aggrPubKey.isInfinity() || blstSignature.isInfinity()) {\n+      return new BlstInfiniteSemiAggregate(aggrPubKey.isInfinity() && blstSignature.isInfinity());\n+    }\n+    return blstPrepareBatchVerify(aggrPubKey, message, blstSignature);\n+  }\n+\n+  BatchSemiAggregate blstPrepareBatchVerify(\n+      BlstPublicKey pubKey, Bytes message, BlstSignature blstSignature) {\n+\n+    p2 g2Hash = HashToCurve.hashToG2(message);\n+    p2_affine p2Affine = new p2_affine();\n+    blst.p2_to_affine(p2Affine, g2Hash);\n+\n+    pairing ctx = new pairing();\n+    try {\n+      blst.pairing_init(ctx);\n+      BLST_ERROR ret =\n+          blst.pairing_mul_n_aggregate_pk_in_g1(\n+              ctx,\n+              pubKey.ecPoint,\n+              blstSignature.ec2Point,\n+              p2Affine,\n+              nextBatchRandomMultiplier(),\n+              BATCH_RANDOM_BYTES * 8);\n+      if (ret != BLST_ERROR.BLST_SUCCESS) throw new IllegalArgumentException(\"Error: \" + ret);\n+    } catch (Exception e) {\n+      ctx.delete();\n+      throw e;\n+    } finally {\n+      g2Hash.delete();\n+      p2Affine.delete(); // not sure if its copied inside pairing_mul_n_aggregate_pk_in_g1\n+    }\n+    blst.pairing_commit(ctx);\n+\n+    return new BlstFiniteSemiAggregate(ctx);\n+  }\n+\n+  @Override\n+  public BatchSemiAggregate prepareBatchVerify2(\n+      int index,\n+      List<? extends PublicKey> publicKeys1,\n+      Bytes message1,\n+      Signature signature1,\n+      List<? extends PublicKey> publicKeys2,\n+      Bytes message2,\n+      Signature signature2) {\n+    BatchSemiAggregate aggregate1 = prepareBatchVerify(index, publicKeys1, message1, signature1);\n+    BatchSemiAggregate aggregate2 =\n+        prepareBatchVerify(index + 1, publicKeys2, message2, signature2);\n+\n+    return BlstFiniteSemiAggregate.merge(aggregate1, aggregate2);\n+  }\n+\n+  @Override\n+  public boolean completeBatchVerify(List<? extends BatchSemiAggregate> preparedList) {\n+    boolean anyInvalidDummy =\n+        preparedList.stream()\n+            .filter(a -> a instanceof BlstInfiniteSemiAggregate)\n+            .map(a -> (BlstInfiniteSemiAggregate) a)\n+            .anyMatch(a -> !a.isValid());\n+\n+    List<BlstFiniteSemiAggregate> blstList =\n+        preparedList.stream()\n+            .filter(a -> a instanceof BlstFiniteSemiAggregate)\n+            .map(b -> (BlstFiniteSemiAggregate) b)\n+            .collect(Collectors.toList());\n+\n+    if (blstList.isEmpty()) {\n+      return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxMDc0MQ==", "bodyText": "Slightly surprised that if you aggregate a mix of finite and infinite keys you get a finite key back and the infinite keys are essentially just ignored.", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r462710741", "createdAt": "2020-07-30T03:20:29Z", "author": {"login": "ajsutton"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/impl/blst/BlstPublicKey.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.bls.impl.blst;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes48;\n+import tech.pegasys.teku.bls.impl.PublicKey;\n+import tech.pegasys.teku.bls.impl.blst.swig.BLST_ERROR;\n+import tech.pegasys.teku.bls.impl.blst.swig.blst;\n+import tech.pegasys.teku.bls.impl.blst.swig.p1;\n+import tech.pegasys.teku.bls.impl.blst.swig.p1_affine;\n+\n+public class BlstPublicKey implements PublicKey {\n+  private static final int COMPRESSED_PK_SIZE = 48;\n+  private static final int UNCOMPRESSED_PK_LENGTH = 96;\n+\n+  static final Bytes48 INFINITY_COMPRESSED_BYTES =\n+      Bytes48.fromHexString(\n+          \"0x\"\n+              + \"c0000000000000000000000000000000\"\n+              + \"00000000000000000000000000000000\"\n+              + \"00000000000000000000000000000000\");\n+\n+  static final BlstPublicKey INFINITY =\n+      new BlstPublicKey(null) {\n+        @Override\n+        public void forceValidation() {}\n+\n+        @Override\n+        public Bytes48 toBytesCompressed() {\n+          return INFINITY_COMPRESSED_BYTES;\n+        }\n+\n+        @Override\n+        public Bytes toBytesUncompressed() {\n+          throw new UnsupportedOperationException();\n+        }\n+      };\n+\n+  public static BlstPublicKey fromBytesUncompressed(Bytes uncompressed) {\n+    checkArgument(uncompressed.size() == UNCOMPRESSED_PK_LENGTH);\n+    p1_affine ecPoint = new p1_affine();\n+    if (blst.p1_deserialize(ecPoint, uncompressed.toArrayUnsafe()) == BLST_ERROR.BLST_SUCCESS) {\n+      return new BlstPublicKey(ecPoint);\n+    } else {\n+      ecPoint.delete();\n+      throw new IllegalArgumentException(\"Invalid PublicKey bytes: \" + uncompressed);\n+    }\n+  }\n+\n+  public static BlstPublicKey fromBytes(Bytes48 compressed) {\n+    if (compressed.equals(INFINITY_COMPRESSED_BYTES)) {\n+      return INFINITY;\n+    }\n+    p1_affine ecPoint = new p1_affine();\n+    if (blst.p1_uncompress(ecPoint, compressed.toArrayUnsafe()) == BLST_ERROR.BLST_SUCCESS) {\n+      return new BlstPublicKey(ecPoint);\n+    } else {\n+      ecPoint.delete();\n+      throw new IllegalArgumentException(\"Invalid PublicKey bytes: \" + compressed);\n+    }\n+  }\n+\n+  public static BlstPublicKey aggregate(List<BlstPublicKey> publicKeys) {\n+    checkArgument(publicKeys.size() > 0);\n+\n+    List<BlstPublicKey> finitePublicKeys =\n+        publicKeys.stream().filter(pk -> !pk.isInfinity()).collect(Collectors.toList());\n+    if (finitePublicKeys.isEmpty()) {\n+      return BlstPublicKey.INFINITY;\n+    }\n+\n+    p1 sum = new p1();\n+    blst.p1_from_affine(sum, finitePublicKeys.get(0).ecPoint);\n+    for (int i = 1; i < finitePublicKeys.size(); i++) {\n+      blst.p1_add_or_double_affine(sum, sum, finitePublicKeys.get(i).ecPoint);\n+    }\n+    p1_affine res = new p1_affine();\n+    blst.p1_to_affine(res, sum);\n+    sum.delete();\n+\n+    return new BlstPublicKey(res);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNTk3MA==", "bodyText": "We seem to have lost tests that confirm we can load a BLSPublicKey with an invalid point and safely compare them.  We need to ensure that deposits with invalid public keys can still be processed correctly when included in blocks (which depends on creating BLSPublicKey instances for invalid points and calling equals and hashCode.", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r462715970", "createdAt": "2020-07-30T03:41:14Z", "author": {"login": "ajsutton"}, "path": "bls/src/test/java/tech/pegasys/teku/bls/BLSPublicKeyTest.java", "diffHunk": "@@ -50,44 +54,29 @@ void succeedsWhenEqualsReturnsTrueForTheSameEmptyPublicKey() {\n   @Test\n   void succeedsWhenTwoInfinityPublicKeysAreEqual() {\n     // Infinity keys are valid G1 points, so pass the equality test\n-    BLSPublicKey publicKey1 = BLSPublicKey.fromBytes(InfinityPublicKey);\n-    BLSPublicKey publicKey2 = BLSPublicKey.fromBytes(InfinityPublicKey);\n+    BLSPublicKey publicKey1 = BLSPublicKey.fromSSZBytes(InfinityPublicKey);\n+    BLSPublicKey publicKey2 = BLSPublicKey.fromSSZBytes(InfinityPublicKey);\n     assertEquals(publicKey1, publicKey2);\n   }\n \n   @Test\n-  void succeedsWhenInvalidPublicKeyIsInvalid() {\n-    BLSPublicKey invalidPublicKey =\n-        BLSPublicKey.fromBytesCompressed(\n-            Bytes.fromHexString(\n-                \"0x9378a6e3984e96d2cd50450c76ca14732f1300efa04aecdb805b22e6d6926a85ef409e8f3acf494a1481090bf32ce3bd\"));\n-    assertFalse(invalidPublicKey.isValid());\n-  }\n-\n-  @Test\n-  void succeedsWhenComparingInvalidAndValidPublicKeyFails() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyMDc0NQ==", "bodyText": "Why disabled?", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r462720745", "createdAt": "2020-07-30T04:01:11Z", "author": {"login": "ajsutton"}, "path": "bls/src/test/java/tech/pegasys/teku/bls/impl/blst/BlstPublicKeyTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.bls.impl.blst;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes48;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+public class BlstPublicKeyTest {\n+\n+  @BeforeAll\n+  static void setup() {\n+    BlstBLS12381.INSTANCE.hashCode();\n+  }\n+\n+  @Disabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyMTA1NQ==", "bodyText": "Probably shouldn't have a System.out.println here and should assert something instead?", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r462721055", "createdAt": "2020-07-30T04:02:21Z", "author": {"login": "ajsutton"}, "path": "bls/src/test/java/tech/pegasys/teku/bls/impl/mikuli/MikuliPublicKeyTest.java", "diffHunk": "@@ -47,22 +47,36 @@ void succeedsWhenTwoInfinityPublicKeysAreEqual() {\n \n   @Test\n   void succeedsIfDeserializationOfInfinityPublicKeyIsCorrect() {\n-    BLSPublicKey infinityPublicKey = new BLSPublicKey(new MikuliPublicKey(new G1Point()));\n+    MikuliPublicKey infinityPublicKey = new MikuliPublicKey(new G1Point());\n     byte[] pointBytes = new byte[48];\n     pointBytes[0] = (byte) 0xc0;\n     Bytes infinityBytesSsz =\n         SSZ.encode(\n             writer -> {\n               writer.writeFixedBytes(Bytes.wrap(pointBytes));\n             });\n-    BLSPublicKey deserializedPublicKey = BLSPublicKey.fromBytes(infinityBytesSsz);\n+    MikuliPublicKey deserializedPublicKey = MikuliPublicKey.fromBytesCompressed(infinityBytesSsz);\n     assertEquals(infinityPublicKey, deserializedPublicKey);\n   }\n \n   @Test\n   void succeedsWhenRoundtripSSZReturnsTheInfinityPublicKey() {\n-    BLSPublicKey publicKey1 = new BLSPublicKey(new MikuliPublicKey(new G1Point()));\n-    BLSPublicKey publicKey2 = BLSPublicKey.fromBytes(publicKey1.toBytes());\n+    MikuliPublicKey publicKey1 = new MikuliPublicKey(new G1Point());\n+    MikuliPublicKey publicKey2 =\n+        MikuliPublicKey.fromBytesCompressed(publicKey1.toBytesCompressed());\n     assertEquals(publicKey1, publicKey2);\n   }\n+\n+  @Test\n+  void infinityPublicKeyIsValid() {\n+    MikuliPublicKey infinityG1 =\n+        MikuliPublicKey.fromBytesCompressed(\n+            Bytes48.fromHexString(\n+                \"0x\"\n+                    + \"c0000000000000000000000000000000\"\n+                    + \"00000000000000000000000000000000\"\n+                    + \"00000000000000000000000000000000\"));\n+    infinityG1.forceValidation();\n+    System.out.println(infinityG1.g1Point());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyMTg5Mw==", "bodyText": "We should probably log a ticket to get the license information included in the blst native jar.  I can't remember the magic incantation and its not a priority but something we should do when we setup a full CI for it and then we shouldn't need this.", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r462721893", "createdAt": "2020-07-30T04:05:42Z", "author": {"login": "ajsutton"}, "path": "gradle/check-licenses.gradle", "diffHunk": "@@ -169,6 +169,7 @@ downloadLicenses {\n       //JMH-Core is licensed under GPLv2 with the Classpath Exception, which allows us to link it and license the derived work under our license.\n       'org.openjdk.jmh:jmh-core:1.21': apache,\n       (group('io.libp2p')): apache,\n+      (group('tech.pegasys')): apache,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MzU0NTIx", "url": "https://github.com/ConsenSys/teku/pull/2453#pullrequestreview-458354521", "createdAt": "2020-07-30T12:32:42Z", "commit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjozMjo0MlrOG5g-cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjozMjo0MlrOG5g-cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2MjI5MA==", "bodyText": "As per the code comment higher up the file, my intention was that this BLS class follows the standard as closely as possible. There is no function similar to aggregatePublicKeys in the standard, and it seems only to be used in testing, so suggest moving it to a test class.", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r462962290", "createdAt": "2020-07-30T12:32:42Z", "author": {"login": "benjaminion"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/BLS.java", "diffHunk": "@@ -80,6 +91,13 @@ public static boolean verify(BLSPublicKey publicKey, Bytes message, BLSSignature\n     return signature.getSignature().verify(publicKey.getPublicKey(), message);\n   }\n \n+  public static BLSPublicKey aggregatePublicKeys(List<BLSPublicKey> publicKeys) {\n+    return new BLSPublicKey(\n+        getBlsImpl()\n+            .aggregatePublicKeys(\n+                publicKeys.stream().map(BLSPublicKey::getPublicKey).collect(Collectors.toList())));\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MzU1ODE2", "url": "https://github.com/ConsenSys/teku/pull/2453#pullrequestreview-458355816", "createdAt": "2020-07-30T12:34:27Z", "commit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjozNDoyN1rOG5hCCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjozNDoyN1rOG5hCCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2MzIwOQ==", "bodyText": "As per my comment on aggregatePublicKeys - if that is moved elsewhere, then this can be reverted to the same name it has in the standard (i.e. aggregate() - modulo a captial letter).", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r462963209", "createdAt": "2020-07-30T12:34:27Z", "author": {"login": "benjaminion"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/BLS.java", "diffHunk": "@@ -91,8 +109,10 @@ public static boolean verify(BLSPublicKey publicKey, Bytes message, BLSSignature\n    *\n    * @param signatures the list of signatures to be aggregated\n    * @return the aggregated signature\n+   * @throws IllegalArgumentException if any of supplied signatures is invalid\n    */\n-  public static BLSSignature aggregate(List<BLSSignature> signatures) {\n+  public static BLSSignature aggregateSignatures(List<BLSSignature> signatures)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MzY0NzY0", "url": "https://github.com/ConsenSys/teku/pull/2453#pullrequestreview-458364764", "createdAt": "2020-07-30T12:46:10Z", "commit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjo0NjoxMFrOG5hbbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjo0NjoxMFrOG5hbbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2OTcwOQ==", "bodyText": "We should probably have a constants class that contains things like this, and BLS_PUBKEY_SIZE, BLS_SIGNATURE_SIZE and other magic numbers. Mikuli extracts them from a Milagro constants class.\nThe point is that the mechanics of BLS signing are actually somewhat independent of the underlying curve, and it would be cleaner not to let details of the curve leak up to this level. But not a big deal.", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r462969709", "createdAt": "2020-07-30T12:46:10Z", "author": {"login": "benjaminion"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/BLSSecretKey.java", "diffHunk": "@@ -13,15 +13,46 @@\n \n package tech.pegasys.teku.bls;\n \n+import java.math.BigInteger;\n+import java.nio.ByteOrder;\n import java.util.Objects;\n import org.apache.tuweni.bytes.Bytes;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.teku.bls.impl.SecretKey;\n \n public final class BLSSecretKey {\n \n-  public static BLSSecretKey fromBytes(Bytes32 bytes) {\n-    return new BLSSecretKey(BLS.getBlsImpl().secretKeyFromBytes(bytes));\n+  private static final Bytes32 CURVE_ORDER =\n+      Bytes32.fromHexString(\"0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MzY2OTU5", "url": "https://github.com/ConsenSys/teku/pull/2453#pullrequestreview-458366959", "createdAt": "2020-07-30T12:48:51Z", "commit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjo0ODo1MlrOG5hhiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjo0ODo1MlrOG5hhiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3MTI3NQ==", "bodyText": "Oops, magic number. My fault. See comment about having a Constants class.", "url": "https://github.com/ConsenSys/teku/pull/2453#discussion_r462971275", "createdAt": "2020-07-30T12:48:52Z", "author": {"login": "benjaminion"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/BLSSecretKey.java", "diffHunk": "@@ -35,10 +66,14 @@ public BLSSecretKey(SecretKey secretKey) {\n     this.secretKey = secretKey;\n   }\n \n-  public SecretKey getSecretKey() {\n+  SecretKey getSecretKey() {\n     return secretKey;\n   }\n \n+  public BLSPublicKey toPublicKey() {\n+    return new BLSPublicKey(getSecretKey().derivePublicKey());\n+  }\n+\n   public Bytes toBytes() {\n     final Bytes bytes = secretKey.toBytes();\n     if (bytes.size() == 48) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8ec9862ed4dcda26ef467d981198c71be8c84d"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9577a005b334f9ab06960c92399a501a176c31c", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/f9577a005b334f9ab06960c92399a501a176c31c", "committedDate": "2020-07-30T13:33:04Z", "message": "Remove obsolete comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c248d95a202846329b92d251d9b3a0fc16632bb", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/0c248d95a202846329b92d251d9b3a0fc16632bb", "committedDate": "2020-07-30T13:37:01Z", "message": "Moved BlstSignature specific methods from BlstBLS12381 to BlstSignature and make them private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7447b6f1ca5a8e7787cf3d902b5f216e71fd25f8", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/7447b6f1ca5a8e7787cf3d902b5f216e71fd25f8", "committedDate": "2020-07-30T13:45:42Z", "message": "Fix batch verify case with invalid infinity signature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd219cca3d0492c16482680f63bb42308eb1e46f", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/fd219cca3d0492c16482680f63bb42308eb1e46f", "committedDate": "2020-07-30T13:57:29Z", "message": "Add lost test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "654e2fa78b9bd4427921e9a31322123acafa5c8f", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/654e2fa78b9bd4427921e9a31322123acafa5c8f", "committedDate": "2020-07-30T14:01:08Z", "message": "Left comment for disabled test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea927969e7ce5ec216f56f61dc46f5aa0f313b6d", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/ea927969e7ce5ec216f56f61dc46f5aa0f313b6d", "committedDate": "2020-07-30T14:03:32Z", "message": "Add explicit assertion to the test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d903419b01966e5aa2150f974fd3a6ffff9c8527", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/d903419b01966e5aa2150f974fd3a6ffff9c8527", "committedDate": "2020-07-30T14:07:37Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d17224f236916a9d20a0e98d19308cfbf97fd9f2", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/d17224f236916a9d20a0e98d19308cfbf97fd9f2", "committedDate": "2020-07-30T14:44:55Z", "message": "Make BlstBLS12381.INSTANCE initialization more reliable and make it as Optional"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25fb8026d8ef4c3d5fe134d2405cd98f577934c5", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/25fb8026d8ef4c3d5fe134d2405cd98f577934c5", "committedDate": "2020-07-30T15:22:41Z", "message": "Move BLS constants to BLSConstants class. Make a clear separation of BLSPublicKey fromSSZBytes() and fromBytesCompressed() though they are equivalent with current SSZ implementation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3689, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}