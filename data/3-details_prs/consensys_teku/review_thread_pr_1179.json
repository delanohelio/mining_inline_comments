{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1OTIwNTQ3", "number": 1179, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwNDozMTo1NVrODgRD3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDowNDowOFrODhAnOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTYwNTQyOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwNDozMTo1NVrOFqYQAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwNDozMTo1NVrOFqYQAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk4MTgyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  summary = \"Get the head of the beacon chain from the nodes perspective.\",\n          \n          \n            \n                  summary = \"Get the head of the beacon chain from the node's perspective.\",", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r379981825", "createdAt": "2020-02-17T04:31:55Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java", "diffHunk": "@@ -13,38 +13,64 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import com.google.common.primitives.UnsignedLong;\n-import java.util.HashMap;\n-import java.util.Map;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconHeadResponse;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-public class BeaconHeadHandler implements BeaconRestApiHandler {\n+public class BeaconHeadHandler implements Handler {\n+  private final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/beacon/head\";\n \n   private final ChainStorageClient client;\n \n   public BeaconHeadHandler(ChainStorageClient client) {\n     this.client = client;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/head\";\n+  private BeaconHeadResponse getBeaconHead() {\n+    Bytes32 headBlockRoot = client.getBestBlockRoot();\n+    if (headBlockRoot == null) {\n+      return null;\n+    }\n+    Bytes32 headStateRoot = client.getBestBlockRootState().hash_tree_root();\n+    return BeaconHeadResponse.builder()\n+        .best_slot(client.getBestSlot().longValue())\n+        .block_root(headBlockRoot.toHexString())\n+        .state_root(headStateRoot.toHexString())\n+        .build();\n   }\n \n+  @OpenApi(\n+      path = BeaconHeadHandler.ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get the head of the beacon chain from the nodes perspective.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94f6927738aae5f3c4aeec676bc660e29c71c26"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTYwNjQyOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/schema/BeaconHeadResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwNDozMjo1OFrOFqYQnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDozMDowN1rOFqvGjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk4MTk4MA==", "bodyText": "slot here but best_slot on the builder", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r379981980", "createdAt": "2020-02-17T04:32:58Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/schema/BeaconHeadResponse.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.schema;\n+\n+public class BeaconHeadResponse {\n+  public final long slot;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94f6927738aae5f3c4aeec676bc660e29c71c26"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1NjIzOQ==", "bodyText": "fair call, i'll rename it. I was kind of more interested in whether I should be doing a builder at all, but all feedback welcome.", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r380356239", "createdAt": "2020-02-17T20:30:07Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/schema/BeaconHeadResponse.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.schema;\n+\n+public class BeaconHeadResponse {\n+  public final long slot;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk4MTk4MA=="}, "originalCommit": {"oid": "b94f6927738aae5f3c4aeec676bc660e29c71c26"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTYwNjc5OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwNDozMzoyM1rOFqYQzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwNDozMzoyM1rOFqYQzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk4MjAyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void RestApiShouldHaveBeaconHeadEndpoint() throws Exception {\n          \n          \n            \n              public void restApiShouldHaveBeaconHeadEndpoint() throws Exception {", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r379982029", "createdAt": "2020-02-17T04:33:23Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java", "diffHunk": "@@ -57,4 +58,12 @@ public void RestApiShouldHaveVersionEndpoint() throws Exception {\n \n     verify(mockApp).get(eq(VersionHandler.ROUTE), any(VersionHandler.class));\n   }\n+\n+  @Test\n+  public void RestApiShouldHaveBeaconHeadEndpoint() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94f6927738aae5f3c4aeec676bc660e29c71c26"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDA5NDg3OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMTowMzo1NlrOFqvpdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMTowMzo1NlrOFqvpdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM2NTE3Mw==", "bodyText": "I thought we were going to separate the logic for getting the answer from the Javalin HTTP handling?", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r380365173", "createdAt": "2020-02-17T21:03:56Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java", "diffHunk": "@@ -13,38 +13,64 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import com.google.common.primitives.UnsignedLong;\n-import java.util.HashMap;\n-import java.util.Map;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconHeadResponse;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-public class BeaconHeadHandler implements BeaconRestApiHandler {\n+public class BeaconHeadHandler implements Handler {\n+  private final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/beacon/head\";\n \n   private final ChainStorageClient client;\n \n   public BeaconHeadHandler(ChainStorageClient client) {\n     this.client = client;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/head\";\n+  private BeaconHeadResponse getBeaconHead() {\n+    Bytes32 headBlockRoot = client.getBestBlockRoot();\n+    if (headBlockRoot == null) {\n+      return null;\n+    }\n+    Bytes32 headStateRoot = client.getBestBlockRootState().hash_tree_root();\n+    return BeaconHeadResponse.builder()\n+        .slot(client.getBestSlot().longValue())\n+        .block_root(headBlockRoot.toHexString())\n+        .state_root(headStateRoot.toHexString())\n+        .build();\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80b9bab671f22abbcc817884e87d0fdcc34b09d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDM5ODA4OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMDo1NDoyM1rOFqyZ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMDo1NDoyM1rOFqyZ5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxMDM0Mw==", "bodyText": "Are we able to provide a message to explain what this status means? It won't be obvious to people that you'd get no content pre-genesis.", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r380410343", "createdAt": "2020-02-18T00:54:23Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java", "diffHunk": "@@ -13,38 +13,64 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import com.google.common.primitives.UnsignedLong;\n-import java.util.HashMap;\n-import java.util.Map;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconHeadResponse;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-public class BeaconHeadHandler implements BeaconRestApiHandler {\n+public class BeaconHeadHandler implements Handler {\n+  private final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/beacon/head\";\n \n   private final ChainStorageClient client;\n \n   public BeaconHeadHandler(ChainStorageClient client) {\n     this.client = client;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/head\";\n+  private BeaconHeadResponse getBeaconHead() {\n+    Bytes32 headBlockRoot = client.getBestBlockRoot();\n+    if (headBlockRoot == null) {\n+      return null;\n+    }\n+    Bytes32 headStateRoot = client.getBestBlockRootState().hash_tree_root();\n+    return BeaconHeadResponse.builder()\n+        .slot(client.getBestSlot().longValue())\n+        .block_root(headBlockRoot.toHexString())\n+        .state_root(headStateRoot.toHexString())\n+        .build();\n   }\n \n+  @OpenApi(\n+      path = BeaconHeadHandler.ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get the head of the beacon chain from the node's perspective.\",\n+      tags = {\"Beacon\"},\n+      description = \"Requests the context of the best slot and head block from the beacon node.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = \"200\",\n+            content = @OpenApiContent(from = BeaconHeadResponse.class)),\n+        @OpenApiResponse(status = \"204\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80b9bab671f22abbcc817884e87d0fdcc34b09d"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDQwNDY2OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMTowMDowM1rOFqydsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNDozMjoxNVrOFrazRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxMTMxNQ==", "bodyText": "Suspect this should be trace level.  It's going to happen on every call pre-genesis and is pretty easy to detect as you get a no content response back.", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r380411315", "createdAt": "2020-02-18T01:00:03Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java", "diffHunk": "@@ -13,38 +13,64 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import com.google.common.primitives.UnsignedLong;\n-import java.util.HashMap;\n-import java.util.Map;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconHeadResponse;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-public class BeaconHeadHandler implements BeaconRestApiHandler {\n+public class BeaconHeadHandler implements Handler {\n+  private final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/beacon/head\";\n \n   private final ChainStorageClient client;\n \n   public BeaconHeadHandler(ChainStorageClient client) {\n     this.client = client;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/head\";\n+  private BeaconHeadResponse getBeaconHead() {\n+    Bytes32 headBlockRoot = client.getBestBlockRoot();\n+    if (headBlockRoot == null) {\n+      return null;\n+    }\n+    Bytes32 headStateRoot = client.getBestBlockRootState().hash_tree_root();\n+    return BeaconHeadResponse.builder()\n+        .slot(client.getBestSlot().longValue())\n+        .block_root(headBlockRoot.toHexString())\n+        .state_root(headStateRoot.toHexString())\n+        .build();\n   }\n \n+  @OpenApi(\n+      path = BeaconHeadHandler.ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get the head of the beacon chain from the node's perspective.\",\n+      tags = {\"Beacon\"},\n+      description = \"Requests the context of the best slot and head block from the beacon node.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = \"200\",\n+            content = @OpenApiContent(from = BeaconHeadResponse.class)),\n+        @OpenApiResponse(status = \"204\")\n+      })\n   @Override\n-  public Object handleRequest(RequestParams params) {\n-    Bytes32 head_block_root = client.getBestBlockRoot();\n-    if (head_block_root == null) {\n-      return null;\n+  public void handle(Context ctx) throws Exception {\n+    BeaconHeadResponse result = getBeaconHead();\n+    if (result == null) {\n+      LOG.debug(\"Failed to get beacon head\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80b9bab671f22abbcc817884e87d0fdcc34b09d"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA3MjE5OQ==", "bodyText": "ok", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r381072199", "createdAt": "2020-02-19T04:32:15Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java", "diffHunk": "@@ -13,38 +13,64 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import com.google.common.primitives.UnsignedLong;\n-import java.util.HashMap;\n-import java.util.Map;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconHeadResponse;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-public class BeaconHeadHandler implements BeaconRestApiHandler {\n+public class BeaconHeadHandler implements Handler {\n+  private final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/beacon/head\";\n \n   private final ChainStorageClient client;\n \n   public BeaconHeadHandler(ChainStorageClient client) {\n     this.client = client;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/head\";\n+  private BeaconHeadResponse getBeaconHead() {\n+    Bytes32 headBlockRoot = client.getBestBlockRoot();\n+    if (headBlockRoot == null) {\n+      return null;\n+    }\n+    Bytes32 headStateRoot = client.getBestBlockRootState().hash_tree_root();\n+    return BeaconHeadResponse.builder()\n+        .slot(client.getBestSlot().longValue())\n+        .block_root(headBlockRoot.toHexString())\n+        .state_root(headStateRoot.toHexString())\n+        .build();\n   }\n \n+  @OpenApi(\n+      path = BeaconHeadHandler.ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get the head of the beacon chain from the node's perspective.\",\n+      tags = {\"Beacon\"},\n+      description = \"Requests the context of the best slot and head block from the beacon node.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = \"200\",\n+            content = @OpenApiContent(from = BeaconHeadResponse.class)),\n+        @OpenApiResponse(status = \"204\")\n+      })\n   @Override\n-  public Object handleRequest(RequestParams params) {\n-    Bytes32 head_block_root = client.getBestBlockRoot();\n-    if (head_block_root == null) {\n-      return null;\n+  public void handle(Context ctx) throws Exception {\n+    BeaconHeadResponse result = getBeaconHead();\n+    if (result == null) {\n+      LOG.debug(\"Failed to get beacon head\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxMTMxNQ=="}, "originalCommit": {"oid": "c80b9bab671f22abbcc817884e87d0fdcc34b09d"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDQzNDQyOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/schema/BeaconHeadResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMToyNDo0OFrOFqyupA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMToyNDo0OFrOFqyupA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxNTY1Mg==", "bodyText": "I'm not sure I'd bother with a builder in this case.  It's a lot of extra boiler plate code for not a lot of value.  Just using the constructor directly is just as clear.  It also means that the compiler won't detect cases where fields are not being set which makes adding new fields in the future more error prone.", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r380415652", "createdAt": "2020-02-18T01:24:48Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/schema/BeaconHeadResponse.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.schema;\n+\n+public class BeaconHeadResponse {\n+  public final long slot;\n+  public final String block_root;\n+  public final String state_root;\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  public static class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80b9bab671f22abbcc817884e87d0fdcc34b09d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDQzODU1OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMToyODoxM1rOFqyxAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOTowOToxMFrOFrz95w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxNjI1Ng==", "bodyText": "I'm not sure these tests are providing any real value.  They aren't checking it's actually wired up correctly and are essentially just duplicating the internal logic of the class being tested.\nIf you can get a list of registered routes from the server and compare to the expected set that could be useful and lower maintenance but the risk of not registering the API at all seems fairly low.", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r380416256", "createdAt": "2020-02-18T01:28:13Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java", "diffHunk": "@@ -57,4 +58,12 @@ public void RestApiShouldHaveVersionEndpoint() throws Exception {\n \n     verify(mockApp).get(eq(VersionHandler.ROUTE), any(VersionHandler.class));\n   }\n+\n+  @Test\n+  public void restApiShouldHaveBeaconHeadEndpoint() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80b9bab671f22abbcc817884e87d0fdcc34b09d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA3MjYzOA==", "bodyText": "It's checking that the route has been linked to the correct class during startup. I added these because I'm working on the assumption that this is my altitude for testing - the object is handling correctly, and its linked to javalin, and beyond that javalin does its job...", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r381072638", "createdAt": "2020-02-19T04:34:08Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java", "diffHunk": "@@ -57,4 +58,12 @@ public void RestApiShouldHaveVersionEndpoint() throws Exception {\n \n     verify(mockApp).get(eq(VersionHandler.ROUTE), any(VersionHandler.class));\n   }\n+\n+  @Test\n+  public void restApiShouldHaveBeaconHeadEndpoint() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxNjI1Ng=="}, "originalCommit": {"oid": "c80b9bab671f22abbcc817884e87d0fdcc34b09d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5NjM1NA==", "bodyText": "if this was not wired in right, and this test fails, would ALL the tests fail?", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r381196354", "createdAt": "2020-02-19T10:13:53Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java", "diffHunk": "@@ -57,4 +58,12 @@ public void RestApiShouldHaveVersionEndpoint() throws Exception {\n \n     verify(mockApp).get(eq(VersionHandler.ROUTE), any(VersionHandler.class));\n   }\n+\n+  @Test\n+  public void restApiShouldHaveBeaconHeadEndpoint() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxNjI1Ng=="}, "originalCommit": {"oid": "c80b9bab671f22abbcc817884e87d0fdcc34b09d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ4NDUxOQ==", "bodyText": "depends on the test. this specific case is only looking at where this specific route is wired, so just this would fail... If we break the whole app object, then yes a lot of tests might fail", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r381484519", "createdAt": "2020-02-19T19:09:10Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java", "diffHunk": "@@ -57,4 +58,12 @@ public void RestApiShouldHaveVersionEndpoint() throws Exception {\n \n     verify(mockApp).get(eq(VersionHandler.ROUTE), any(VersionHandler.class));\n   }\n+\n+  @Test\n+  public void restApiShouldHaveBeaconHeadEndpoint() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxNjI1Ng=="}, "originalCommit": {"oid": "c80b9bab671f22abbcc817884e87d0fdcc34b09d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDQ0MDU4OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMToyOTo1NlrOFqyyOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOToxNjo0MVrOFr0OCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxNjU3MQ==", "bodyText": "I'd use DataStructureUtils.randomBeaconState rather than a mock.  It's generally better to use real instances of data structure classes rather than mocks since there's no functionality to be stubbed out.", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r380416571", "createdAt": "2020-02-18T01:29:56Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandlerTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconHeadResponse;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+\n+public class BeaconHeadHandlerTest {\n+  private Context mockContext = mock(Context.class);\n+  private BeaconState mockRootState = mock(BeaconState.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80b9bab671f22abbcc817884e87d0fdcc34b09d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ4ODY1MQ==", "bodyText": "i'll have to have a look at that utils class, thanks!", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r381488651", "createdAt": "2020-02-19T19:16:41Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandlerTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconHeadResponse;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+\n+public class BeaconHeadHandlerTest {\n+  private Context mockContext = mock(Context.class);\n+  private BeaconState mockRootState = mock(BeaconState.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxNjU3MQ=="}, "originalCommit": {"oid": "c80b9bab671f22abbcc817884e87d0fdcc34b09d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDQ0NDQ4OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMTozMzowMFrOFqy0hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNDozMTozM1rOFraykg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxNzE1Ng==", "bodyText": "It's kind of weird that we're mixing patterns for adding handlers.", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r380417156", "createdAt": "2020-02-18T01:33:00Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -132,11 +132,11 @@ private void addNodeHandlers(ChainStorageClient chainStorageClient) {\n \n   private void addBeaconHandlers(\n       ChainStorageClient chainStorageClient, HistoricalChainData historicalChainData) {\n+    app.get(BeaconHeadHandler.ROUTE, new BeaconHeadHandler(chainStorageClient));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c80b9bab671f22abbcc817884e87d0fdcc34b09d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA3MjAxOA==", "bodyText": "we're moving to this pattern, the intent is definitely not to mix pattern.  The handlers array will cease to exist in the next few days hopefully.", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r381072018", "createdAt": "2020-02-19T04:31:33Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -132,11 +132,11 @@ private void addNodeHandlers(ChainStorageClient chainStorageClient) {\n \n   private void addBeaconHandlers(\n       ChainStorageClient chainStorageClient, HistoricalChainData historicalChainData) {\n+    app.get(BeaconHeadHandler.ROUTE, new BeaconHeadHandler(chainStorageClient));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxNzE1Ng=="}, "originalCommit": {"oid": "c80b9bab671f22abbcc817884e87d0fdcc34b09d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTM5NjQwOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDowNDowOFrOFriChQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOToxNjo1N1rOFr0Oow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5MDc4OQ==", "bodyText": "can this just be ROUTE ?", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r381190789", "createdAt": "2020-02-19T10:04:08Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java", "diffHunk": "@@ -13,38 +13,63 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import com.google.common.primitives.UnsignedLong;\n-import java.util.HashMap;\n-import java.util.Map;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconHeadResponse;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-public class BeaconHeadHandler implements BeaconRestApiHandler {\n+public class BeaconHeadHandler implements Handler {\n+  private final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/beacon/head\";\n \n   private final ChainStorageClient client;\n \n   public BeaconHeadHandler(ChainStorageClient client) {\n     this.client = client;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/head\";\n+  private BeaconHeadResponse getBeaconHead() {\n+    Bytes32 headBlockRoot = client.getBestBlockRoot();\n+    if (headBlockRoot == null) {\n+      return null;\n+    }\n+    Bytes32 headStateRoot = client.getBestBlockRootState().hash_tree_root();\n+    return new BeaconHeadResponse(client.getBestSlot(), headBlockRoot, headStateRoot);\n   }\n \n+  @OpenApi(\n+      path = BeaconHeadHandler.ROUTE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0193ba538e1f2d1bc6132867f2069a61c4653aaf"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ4ODgwMw==", "bodyText": "yep. changed.", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r381488803", "createdAt": "2020-02-19T19:16:57Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java", "diffHunk": "@@ -13,38 +13,63 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import com.google.common.primitives.UnsignedLong;\n-import java.util.HashMap;\n-import java.util.Map;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconHeadResponse;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-public class BeaconHeadHandler implements BeaconRestApiHandler {\n+public class BeaconHeadHandler implements Handler {\n+  private final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/beacon/head\";\n \n   private final ChainStorageClient client;\n \n   public BeaconHeadHandler(ChainStorageClient client) {\n     this.client = client;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/head\";\n+  private BeaconHeadResponse getBeaconHead() {\n+    Bytes32 headBlockRoot = client.getBestBlockRoot();\n+    if (headBlockRoot == null) {\n+      return null;\n+    }\n+    Bytes32 headStateRoot = client.getBestBlockRootState().hash_tree_root();\n+    return new BeaconHeadResponse(client.getBestSlot(), headBlockRoot, headStateRoot);\n   }\n \n+  @OpenApi(\n+      path = BeaconHeadHandler.ROUTE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5MDc4OQ=="}, "originalCommit": {"oid": "0193ba538e1f2d1bc6132867f2069a61c4653aaf"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2619, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}