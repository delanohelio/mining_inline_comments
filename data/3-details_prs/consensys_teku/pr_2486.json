{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NzExODgy", "number": 2486, "title": "Wait for the previous write to complete before loading the next block", "bodyText": "PR Description\nFor req/resp calls that send multiple responses, wait for the first response to complete writing before loading the next one.  This ensures that we don't swamp the outbound write buffer needlessly.\nNote that the write is considered complete when it is written to the OS buffer, not necessarily when it is sent to the wire or received by the remote peer.  But that's enough to get the data out of user space and respect back pressure.\nFixed Issue(s)\nPart of #2480\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-07-31T01:42:30Z", "url": "https://github.com/ConsenSys/teku/pull/2486", "merged": true, "mergeCommit": {"oid": "6400e40715139197e7d8ec0522202b3fb4163662"}, "closed": true, "closedAt": "2020-08-03T21:00:39Z", "author": {"login": "ajsutton"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6KGGOAH2gAyNDU5NzExODgyOjYyODIzNjU5Mjc3YzBmZjgzNWZjMTUyN2E3ODk1M2MxYzQ3MGYyNmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7YWZeAH2gAyNDU5NzExODgyOmJkYmZmZTMyMzMxY2M0ODhlZTZmMDUxNjVlYThmZTI5YTI5NGI1YTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "62823659277c0ff835fc1527a78953c1c470f26c", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/62823659277c0ff835fc1527a78953c1c470f26c", "committedDate": "2020-07-31T01:39:24Z", "message": "Wait for the previous write to complete before loading the next block."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35af19b6c41a1cb54e64e00c56d761cecda744c3", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/35af19b6c41a1cb54e64e00c56d761cecda744c3", "committedDate": "2020-07-31T02:03:45Z", "message": "Update unit test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMTE1Njcz", "url": "https://github.com/ConsenSys/teku/pull/2486#pullrequestreview-460115673", "createdAt": "2020-08-03T15:19:25Z", "commit": {"oid": "35af19b6c41a1cb54e64e00c56d761cecda744c3"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNToxOToyNVrOG69wAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNToxOToyNVrOG69wAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ4MjMwNQ==", "bodyText": "Looks like RequestState.currentSlot and RequestState.remainingBlocks should be volatile.", "url": "https://github.com/ConsenSys/teku/pull/2486#discussion_r464482305", "createdAt": "2020-08-03T15:19:25Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/beaconchain/methods/BeaconBlocksByRangeMessageHandler.java", "diffHunk": "@@ -120,35 +120,43 @@ public void onIncomingMessage(\n   }\n \n   private SafeFuture<RequestState> sendNextBlock(final RequestState requestState) {\n-    SafeFuture<Optional<SignedBeaconBlock>> blockFuture = requestState.loadNextBlock();\n+    SafeFuture<Boolean> blockFuture = processNextBlock(requestState);\n     // Avoid risk of StackOverflowException by iterating when the block future is already complete\n     // Using thenCompose on the completed future would execute immediately and recurse back into\n     // this method to send the next block.  When not already complete, thenCompose is executed\n     // on a separate thread so doesn't recurse on the same stack.\n     while (blockFuture.isDone() && !blockFuture.isCompletedExceptionally()) {\n-      final boolean complete = handleLoadedBlock(requestState, blockFuture.join());\n-      if (complete) {\n+      if (blockFuture.join()) {\n         return completedFuture(requestState);\n       }\n-      blockFuture = requestState.loadNextBlock();\n+      blockFuture = processNextBlock(requestState);\n     }\n     return blockFuture.thenCompose(\n-        maybeBlock ->\n-            handleLoadedBlock(requestState, maybeBlock)\n-                ? completedFuture(requestState)\n-                : sendNextBlock(requestState));\n+        complete -> complete ? completedFuture(requestState) : sendNextBlock(requestState));\n+  }\n+\n+  private SafeFuture<Boolean> processNextBlock(final RequestState requestState) {\n+    // Ensure blocks are loaded off of the event thread\n+    return requestState\n+        .loadNextBlock()\n+        .thenCompose(block -> handleLoadedBlock(requestState, block));\n   }\n \n   /** Sends the block and returns true if the request is now complete. */\n-  private boolean handleLoadedBlock(\n+  private SafeFuture<Boolean> handleLoadedBlock(\n       final RequestState requestState, final Optional<SignedBeaconBlock> block) {\n-    block.ifPresent(requestState::sendBlock);\n-    if (requestState.isComplete()) {\n-      return true;\n-    } else {\n-      requestState.incrementCurrentSlot();\n-      return false;\n-    }\n+    return block\n+        .map(requestState::sendBlock)\n+        .orElse(SafeFuture.COMPLETE)\n+        .thenApply(\n+            __ -> {\n+              if (requestState.isComplete()) {\n+                return true;\n+              } else {\n+                requestState.incrementCurrentSlot();\n+                return false;\n+              }\n+            });\n   }\n \n   private class RequestState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35af19b6c41a1cb54e64e00c56d761cecda744c3"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdbffe32331cc488ee6f05165ea8fe29a294b5a1", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/bdbffe32331cc488ee6f05165ea8fe29a294b5a1", "committedDate": "2020-08-03T20:49:48Z", "message": "Merge branch 'master' into wait-for-write"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3710, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}