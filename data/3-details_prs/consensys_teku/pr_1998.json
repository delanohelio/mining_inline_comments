{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0ODQyNDM3", "number": 1998, "title": "Ensure invalid attestations are not included in blocks", "bodyText": "PR Description\nBlock creation sometimes failed because invalid attestations were included in the block.\nThis extracts AttestationData validations into a separate class so they can be reused by block processing and selecting which attestations to include.\nFixed Issue(s)\nfixes #1996", "createdAt": "2020-05-29T02:01:53Z", "url": "https://github.com/ConsenSys/teku/pull/1998", "merged": true, "mergeCommit": {"oid": "358350b0acb270574ff86871f6d5189179a24769"}, "closed": true, "closedAt": "2020-05-29T21:03:46Z", "author": {"login": "ajsutton"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcl4lkeAH2gAyNDI0ODQyNDM3Ojg2ZDRmMDE5YjQ2MzNlNDE1MDU5NWVkNWY5OTkxMjM1MGZmMGQwZTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmIzA9AH2gAyNDI0ODQyNDM3OjhmOWY3ZjA5OWIzMjRlYTdjNDIwZDAyMWZiNzI3OTBkY2ZlNWE3NjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "86d4f019b4633e4150595ed5f99912350ff0d0e4", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/86d4f019b4633e4150595ed5f99912350ff0d0e4", "committedDate": "2020-05-29T01:57:00Z", "message": "Extract AttestationData validations into a separate class so they can be reused by block processing and selecting which attestations to include."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d9a05d918a6b2c82193bf4d1bd6350b92e5a369", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/0d9a05d918a6b2c82193bf4d1bd6350b92e5a369", "committedDate": "2020-05-29T02:02:06Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into invalid-blocks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMDAzNjYx", "url": "https://github.com/ConsenSys/teku/pull/1998#pullrequestreview-421003661", "createdAt": "2020-05-29T14:23:46Z", "commit": {"oid": "0d9a05d918a6b2c82193bf4d1bd6350b92e5a369"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMzo0N1rOGce4qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMzo0N1rOGce4qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxOTMzNw==", "bodyText": "nit: I know we've been saying SUBMITTED_TOO_FAR_IN_HISTORY for a while, but maybe SUBMITTED_TOO_LATE could be simpler.", "url": "https://github.com/ConsenSys/teku/pull/1998#discussion_r432519337", "createdAt": "2020-05-29T14:23:47Z", "author": {"login": "cemozerr"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/BlockAttestationDataValidator.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core;\n+\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_committee_count_at_slot;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_previous_epoch;\n+import static tech.pegasys.teku.util.config.Constants.SLOTS_PER_EPOCH;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+import javax.annotation.CheckReturnValue;\n+import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class BlockAttestationDataValidator {\n+\n+  public Optional<InvalidReason> validateAttestation(\n+      final BeaconState state, final AttestationData data) {\n+\n+    final Supplier<Optional<InvalidReason>> justifiedCheckpointCheck;\n+    if (data.getTarget().getEpoch().equals(get_current_epoch(state))) {\n+      justifiedCheckpointCheck =\n+          () ->\n+              check(\n+                  data.getSource().equals(state.getCurrent_justified_checkpoint()),\n+                  InvalidReason.INCORRECT_CURRENT_JUSTIFIED_CHECKPOINT);\n+    } else {\n+      justifiedCheckpointCheck =\n+          () ->\n+              check(\n+                  data.getSource().equals(state.getPrevious_justified_checkpoint()),\n+                  InvalidReason.INCORRECT_PREVIOUS_JUSTIFIED_CHECKPOINT);\n+    }\n+\n+    return firstOf(\n+        () ->\n+            check(\n+                data.getIndex().compareTo(get_committee_count_at_slot(state, data.getSlot())) < 0,\n+                InvalidReason.COMMITTEE_INDEX_TOO_HIGH),\n+        () ->\n+            check(\n+                data.getTarget().getEpoch().equals(get_previous_epoch(state))\n+                    || data.getTarget().getEpoch().equals(get_current_epoch(state)),\n+                InvalidReason.NOT_FROM_CURRENT_OR_PREVIOUS_EPOCH),\n+        () ->\n+            check(\n+                data.getTarget().getEpoch().equals(compute_epoch_at_slot(data.getSlot())),\n+                InvalidReason.SLOT_NOT_IN_EPOCH),\n+        () ->\n+            check(\n+                data.getSlot()\n+                        .plus(UnsignedLong.valueOf(Constants.MIN_ATTESTATION_INCLUSION_DELAY))\n+                        .compareTo(state.getSlot())\n+                    <= 0,\n+                InvalidReason.SUBMITTED_TOO_QUICKLY),\n+        () ->\n+            check(\n+                state\n+                        .getSlot()\n+                        .compareTo(data.getSlot().plus(UnsignedLong.valueOf(SLOTS_PER_EPOCH)))\n+                    <= 0,\n+                InvalidReason.SUBMITTED_TOO_FAR_IN_HISTORY),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d9a05d918a6b2c82193bf4d1bd6350b92e5a369"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMDA0OTY2", "url": "https://github.com/ConsenSys/teku/pull/1998#pullrequestreview-421004966", "createdAt": "2020-05-29T14:25:13Z", "commit": {"oid": "0d9a05d918a6b2c82193bf4d1bd6350b92e5a369"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyNToxM1rOGce-GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyNToxM1rOGce-GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUyMDcyOA==", "bodyText": "maybe you could add Stream.parallel() here", "url": "https://github.com/ConsenSys/teku/pull/1998#discussion_r432520728", "createdAt": "2020-05-29T14:25:13Z", "author": {"login": "cemozerr"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/BlockAttestationDataValidator.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core;\n+\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_committee_count_at_slot;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_previous_epoch;\n+import static tech.pegasys.teku.util.config.Constants.SLOTS_PER_EPOCH;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+import javax.annotation.CheckReturnValue;\n+import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class BlockAttestationDataValidator {\n+\n+  public Optional<InvalidReason> validateAttestation(\n+      final BeaconState state, final AttestationData data) {\n+\n+    final Supplier<Optional<InvalidReason>> justifiedCheckpointCheck;\n+    if (data.getTarget().getEpoch().equals(get_current_epoch(state))) {\n+      justifiedCheckpointCheck =\n+          () ->\n+              check(\n+                  data.getSource().equals(state.getCurrent_justified_checkpoint()),\n+                  InvalidReason.INCORRECT_CURRENT_JUSTIFIED_CHECKPOINT);\n+    } else {\n+      justifiedCheckpointCheck =\n+          () ->\n+              check(\n+                  data.getSource().equals(state.getPrevious_justified_checkpoint()),\n+                  InvalidReason.INCORRECT_PREVIOUS_JUSTIFIED_CHECKPOINT);\n+    }\n+\n+    return firstOf(\n+        () ->\n+            check(\n+                data.getIndex().compareTo(get_committee_count_at_slot(state, data.getSlot())) < 0,\n+                InvalidReason.COMMITTEE_INDEX_TOO_HIGH),\n+        () ->\n+            check(\n+                data.getTarget().getEpoch().equals(get_previous_epoch(state))\n+                    || data.getTarget().getEpoch().equals(get_current_epoch(state)),\n+                InvalidReason.NOT_FROM_CURRENT_OR_PREVIOUS_EPOCH),\n+        () ->\n+            check(\n+                data.getTarget().getEpoch().equals(compute_epoch_at_slot(data.getSlot())),\n+                InvalidReason.SLOT_NOT_IN_EPOCH),\n+        () ->\n+            check(\n+                data.getSlot()\n+                        .plus(UnsignedLong.valueOf(Constants.MIN_ATTESTATION_INCLUSION_DELAY))\n+                        .compareTo(state.getSlot())\n+                    <= 0,\n+                InvalidReason.SUBMITTED_TOO_QUICKLY),\n+        () ->\n+            check(\n+                state\n+                        .getSlot()\n+                        .compareTo(data.getSlot().plus(UnsignedLong.valueOf(SLOTS_PER_EPOCH)))\n+                    <= 0,\n+                InvalidReason.SUBMITTED_TOO_FAR_IN_HISTORY),\n+        justifiedCheckpointCheck);\n+  }\n+\n+  @SafeVarargs\n+  private Optional<InvalidReason> firstOf(final Supplier<Optional<InvalidReason>>... checks) {\n+    return Stream.of(checks)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d9a05d918a6b2c82193bf4d1bd6350b92e5a369"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMDMzMTQ2", "url": "https://github.com/ConsenSys/teku/pull/1998#pullrequestreview-421033146", "createdAt": "2020-05-29T14:57:04Z", "commit": {"oid": "0d9a05d918a6b2c82193bf4d1bd6350b92e5a369"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7db33534fdd24c37e044ddf0e0f4d72aea55cb78", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/7db33534fdd24c37e044ddf0e0f4d72aea55cb78", "committedDate": "2020-05-29T20:40:37Z", "message": "Tidy up."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "924efe3e41c232b7af3b445fa047e09c5dd8c2c3", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/924efe3e41c232b7af3b445fa047e09c5dd8c2c3", "committedDate": "2020-05-29T20:50:04Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into invalid-blocks\n\n# Conflicts:\n#\tethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregatingAttestationPool.java\n#\tethereum/statetransition/src/test/java/tech/pegasys/teku/statetransition/attestation/AggregatingAttestationPoolTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f9f7f099b324ea7c420d021fb72790dcfe5a765", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/8f9f7f099b324ea7c420d021fb72790dcfe5a765", "committedDate": "2020-05-29T20:50:10Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into invalid-blocks"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4057, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}