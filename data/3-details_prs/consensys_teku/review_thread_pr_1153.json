{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0Njc5ODM5", "number": 1153, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjowODoxMVrODfbVHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwMToyNzoyOFrODgP8yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjgwMjIxOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNjowODoxMVrOFpH_1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOToxMDowNVrOFpgHHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2Njk2NA==", "bodyText": "Very recently I've added beaconChainHead and modified beaconBlock to expose Alethio a similar API to Prysm's. FYI. It would be nice to connect you guys actually (with Alethio) since they are going to be using this API a lot.", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r378666964", "createdAt": "2020-02-13T06:08:11Z", "author": {"login": "cemozerr"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -75,6 +80,70 @@ public void start() {\n                     ctx.status(SC_NOT_FOUND).result(JsonProvider.objectToJSON(\"Not found\"));\n                   }\n                 }));\n+\n+    app.start();\n+  }\n+\n+  private OpenApiOptions getOpenApiOptions() {\n+    // TODO: Need real values for version etc\n+    Info applicationInfo =\n+        new Info()\n+            .version(\"0.1.0\")\n+            .title(\"Minimal Beacon Node API for Validator\")\n+            .description(\n+                \"A minimal API specification for the beacon node, which enables a validator \"\n+                    + \"to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.\")\n+            .license(\n+                new License()\n+                    .name(\"Apache 2.0\")\n+                    .url(\"https://www.apache.org/licenses/LICENSE-2.0.html\"));\n+    OpenApiOptions options =\n+        new OpenApiOptions(applicationInfo)\n+            .activateAnnotationScanningFor(\"tech.pegasys.artemis.beaconrestapi\")\n+            .path(\"/swagger-docs\")\n+            .swagger(new SwaggerOptions(\"/swagger-ui\"));\n+    // TODO: allow swagger-ui to be turned off - ideally still leave swagger-docs, just dont add the\n+    // swagger-ui endpoint\n+    return options;\n+  }\n+\n+  private void addNodeHandlers() {\n+    app.get(GenesisTimeHandler.ROUTE, new GenesisTimeHandler(chainStorageClient));\n+    /*\n+     * TODO:\n+     *    /node/version\n+     *    /node/syncing\n+     *  Optional:\n+     *    /node/fork\n+     */\n+  }\n+\n+  private void addBeaconHandlers() {\n+    // TODO: not in Minimal or optional specified set - some are similar to lighthouse", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e268f2276fd399c21f4059ad2bf4c5e8d04d682"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2MjA0Ng==", "bodyText": "absolutely! Arash is coordinating as PO, we should get together and understand where things are at.", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379062046", "createdAt": "2020-02-13T19:10:05Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -75,6 +80,70 @@ public void start() {\n                     ctx.status(SC_NOT_FOUND).result(JsonProvider.objectToJSON(\"Not found\"));\n                   }\n                 }));\n+\n+    app.start();\n+  }\n+\n+  private OpenApiOptions getOpenApiOptions() {\n+    // TODO: Need real values for version etc\n+    Info applicationInfo =\n+        new Info()\n+            .version(\"0.1.0\")\n+            .title(\"Minimal Beacon Node API for Validator\")\n+            .description(\n+                \"A minimal API specification for the beacon node, which enables a validator \"\n+                    + \"to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.\")\n+            .license(\n+                new License()\n+                    .name(\"Apache 2.0\")\n+                    .url(\"https://www.apache.org/licenses/LICENSE-2.0.html\"));\n+    OpenApiOptions options =\n+        new OpenApiOptions(applicationInfo)\n+            .activateAnnotationScanningFor(\"tech.pegasys.artemis.beaconrestapi\")\n+            .path(\"/swagger-docs\")\n+            .swagger(new SwaggerOptions(\"/swagger-ui\"));\n+    // TODO: allow swagger-ui to be turned off - ideally still leave swagger-docs, just dont add the\n+    // swagger-ui endpoint\n+    return options;\n+  }\n+\n+  private void addNodeHandlers() {\n+    app.get(GenesisTimeHandler.ROUTE, new GenesisTimeHandler(chainStorageClient));\n+    /*\n+     * TODO:\n+     *    /node/version\n+     *    /node/syncing\n+     *  Optional:\n+     *    /node/fork\n+     */\n+  }\n+\n+  private void addBeaconHandlers() {\n+    // TODO: not in Minimal or optional specified set - some are similar to lighthouse", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2Njk2NA=="}, "originalCommit": {"oid": "3e268f2276fd399c21f4059ad2bf4c5e8d04d682"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTI3MTUwOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMTowODoyNFrOFqVTNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMTowODoyNFrOFqVTNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMzQ5NQ==", "bodyText": "nit: We don't typically use the @NotNull annotations (IntelliJ does sneak them in from time to time). They are unfortunately on the class path because of Kotlin dependencies.", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379933495", "createdAt": "2020-02-16T21:08:24Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandler.java", "diffHunk": "@@ -13,24 +13,49 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n-import tech.pegasys.artemis.storage.ChainStorageClient;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n \n-public class GenesisTimeHandler implements BeaconRestApiHandler {\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-  private final ChainStorageClient client;\n+public class GenesisTimeHandler implements Handler {\n+  private final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/node/genesis_time/\";\n+  ChainStorageClient chainStorageClient;\n \n-  public GenesisTimeHandler(final ChainStorageClient client) {\n-    this.client = client;\n-  }\n-\n-  @Override\n-  public String getPath() {\n-    return \"/node/genesis_time\";\n+  public GenesisTimeHandler(ChainStorageClient chainStorageClient) {\n+    this.chainStorageClient = chainStorageClient;\n   }\n \n+  @OpenApi(\n+      path = GenesisTimeHandler.ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get the genesis_time parameter from beacon node configuration.\",\n+      tags = {\"Node\"},\n+      description =\n+          \"Requests the genesis_time parameter from the beacon node, which should be consistent across all beacon nodes that follow the same beacon chain.\",\n+      responses = {\n+        @OpenApiResponse(status = \"200\", content = @OpenApiContent(from = UnsignedLong.class)),\n+        @OpenApiResponse(status = \"500\")\n+      })\n   @Override\n-  public Object handleRequest(RequestParams params) {\n-    return client.getGenesisTime();\n+  public void handle(@NotNull Context ctx) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9f93e47ef7c9a7e16ac5766eb4b63692099da6c"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTI3MjMzOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToxMDoyNlrOFqVTqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToxMDoyNlrOFqVTqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMzYxMQ==", "bodyText": "nit: Use a static import for mock.", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379933611", "createdAt": "2020-02-16T21:10:26Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.eventbus.EventBus;\n+import io.javalin.Javalin;\n+import io.javalin.core.JavalinServer;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import tech.pegasys.artemis.beaconrestapi.beaconhandlers.GenesisTimeHandler;\n+import tech.pegasys.artemis.beaconrestapi.beaconhandlers.VersionHandler;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+\n+class BeaconRestApiTest {\n+  private final ChainStorageClient storageClient =\n+      ChainStorageClient.memoryOnlyClient(new EventBus());\n+  private final JavalinServer mockServer = Mockito.mock(JavalinServer.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9f93e47ef7c9a7e16ac5766eb4b63692099da6c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTI3MjYxOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToxMDo1MlrOFqVTzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToxMDo1MlrOFqVTzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMzY0Ng==", "bodyText": "nit: static import for verify.", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379933646", "createdAt": "2020-02-16T21:10:52Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.eventbus.EventBus;\n+import io.javalin.Javalin;\n+import io.javalin.core.JavalinServer;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import tech.pegasys.artemis.beaconrestapi.beaconhandlers.GenesisTimeHandler;\n+import tech.pegasys.artemis.beaconrestapi.beaconhandlers.VersionHandler;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+\n+class BeaconRestApiTest {\n+  private final ChainStorageClient storageClient =\n+      ChainStorageClient.memoryOnlyClient(new EventBus());\n+  private final JavalinServer mockServer = Mockito.mock(JavalinServer.class);\n+  private final Javalin mockApp = Mockito.mock(Javalin.class);\n+  private static final Integer THE_PORT = 12345;\n+\n+  @Test\n+  public void RestApiShouldHaveServerPortSet() {\n+    when(mockApp.server()).thenReturn(mockServer);\n+    new BeaconRestApi(storageClient, null, null, THE_PORT, mockApp);\n+\n+    Mockito.verify(mockServer).setServerPort(THE_PORT);\n+  }\n+\n+  @Test\n+  public void RestApiShouldHaveGenesisTimeEndpoint() throws Exception {\n+    when(mockApp.server()).thenReturn(mockServer);\n+    new BeaconRestApi(storageClient, null, null, THE_PORT, mockApp);\n+\n+    Mockito.verify(mockApp).get(eq(GenesisTimeHandler.ROUTE), any(GenesisTimeHandler.class));\n+  }\n+\n+  @Test\n+  public void RestApiShouldHaveVersionEndpoint() throws Exception {\n+    when(mockApp.server()).thenReturn(mockServer);\n+    new BeaconRestApi(storageClient, null, null, THE_PORT, mockApp);\n+\n+    Mockito.verify(mockApp).get(eq(VersionHandler.ROUTE), any(VersionHandler.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9f93e47ef7c9a7e16ac5766eb4b63692099da6c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTI3Mjc5OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToxMToyMFrOFqVT5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToxMToyMFrOFqVT5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMzY2OA==", "bodyText": "nit: static import :)", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379933668", "createdAt": "2020-02-16T21:11:20Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java", "diffHunk": "@@ -13,30 +13,37 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n \n import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler.RequestParams;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-class GenesisTimeHandlerTest {\n-  private final RequestParams requestParams = Mockito.mock(RequestParams.class);\n+public class GenesisTimeHandlerTest {\n+  private Context mockContext = Mockito.mock(Context.class);\n+  private final UnsignedLong genesisTime = UnsignedLong.valueOf(51234);\n+\n   private final ChainStorageClient storageClient =\n       ChainStorageClient.memoryOnlyClient(new EventBus());\n-  private final GenesisTimeHandler handler = new GenesisTimeHandler(storageClient);\n \n   @Test\n-  public void shouldReturnEmptyObjectWhenGenesisTimeIsNotSet() {\n-    assertThat(handler.handleRequest(requestParams)).isEqualTo(null);\n+  public void shouldRaiseInternalErrorWhenGenesisTimeIsNotSet() throws Exception {\n+    GenesisTimeHandler subject = new GenesisTimeHandler(null);\n+    subject.handle(mockContext);\n+\n+    Mockito.verify(mockContext).status(SC_INTERNAL_SERVER_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9f93e47ef7c9a7e16ac5766eb4b63692099da6c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTI3MzU3OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToxMjo0MlrOFqVURQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToxMjo0MlrOFqVURQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMzc2NQ==", "bodyText": "nit: We rarely use names like subject for test subjects in the codebase - typically this would just be handler.", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379933765", "createdAt": "2020-02-16T21:12:42Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java", "diffHunk": "@@ -13,30 +13,37 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n \n import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler.RequestParams;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-class GenesisTimeHandlerTest {\n-  private final RequestParams requestParams = Mockito.mock(RequestParams.class);\n+public class GenesisTimeHandlerTest {\n+  private Context mockContext = Mockito.mock(Context.class);\n+  private final UnsignedLong genesisTime = UnsignedLong.valueOf(51234);\n+\n   private final ChainStorageClient storageClient =\n       ChainStorageClient.memoryOnlyClient(new EventBus());\n-  private final GenesisTimeHandler handler = new GenesisTimeHandler(storageClient);\n \n   @Test\n-  public void shouldReturnEmptyObjectWhenGenesisTimeIsNotSet() {\n-    assertThat(handler.handleRequest(requestParams)).isEqualTo(null);\n+  public void shouldRaiseInternalErrorWhenGenesisTimeIsNotSet() throws Exception {\n+    GenesisTimeHandler subject = new GenesisTimeHandler(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9f93e47ef7c9a7e16ac5766eb4b63692099da6c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTI3NDIxOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToxMzo0MlrOFqVUmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMToxMzo0MlrOFqVUmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMzg0OA==", "bodyText": "I'm not sure this should be an internal server error.  There is a, potentially long, period where a node is running prior to the genesis event occurring and we should have some meaningful response during that time (it may still be an error, but an expected one, not an internal server error).  404 Not found is probably the most accurate in REST terms but likely to be confusing for users who may think they got the URL wrong.\nDuring that period we would have a storageClient but it's store and genesisTime fields would be null.", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379933848", "createdAt": "2020-02-16T21:13:42Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java", "diffHunk": "@@ -13,30 +13,37 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n \n import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler.RequestParams;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-class GenesisTimeHandlerTest {\n-  private final RequestParams requestParams = Mockito.mock(RequestParams.class);\n+public class GenesisTimeHandlerTest {\n+  private Context mockContext = Mockito.mock(Context.class);\n+  private final UnsignedLong genesisTime = UnsignedLong.valueOf(51234);\n+\n   private final ChainStorageClient storageClient =\n       ChainStorageClient.memoryOnlyClient(new EventBus());\n-  private final GenesisTimeHandler handler = new GenesisTimeHandler(storageClient);\n \n   @Test\n-  public void shouldReturnEmptyObjectWhenGenesisTimeIsNotSet() {\n-    assertThat(handler.handleRequest(requestParams)).isEqualTo(null);\n+  public void shouldRaiseInternalErrorWhenGenesisTimeIsNotSet() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9f93e47ef7c9a7e16ac5766eb4b63692099da6c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTQwMTQ1OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwMTowMDoxMFrOFqWYUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwMTozNToxNVrOFqWomw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1MTE4Nw==", "bodyText": "nit: any reason for this ordering? why aren't all the beacon ones together", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379951187", "createdAt": "2020-02-17T01:00:10Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -77,6 +94,69 @@ public void start() {\n                     ctx.status(SC_NOT_FOUND).result(JsonProvider.objectToJSON(\"Not found\"));\n                   }\n                 }));\n+\n+    app.start();\n+  }\n+\n+  private static OpenApiOptions getOpenApiOptions() {\n+    Info applicationInfo =\n+        new Info()\n+            .title(StringUtils.capitalize(VersionProvider.CLIENT_IDENTITY))\n+            .version(VersionProvider.IMPLEMENTATION_VERSION)\n+            .description(\n+                \"A minimal API specification for the beacon node, which enables a validator \"\n+                    + \"to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.\")\n+            .license(\n+                new License()\n+                    .name(\"Apache 2.0\")\n+                    .url(\"https://www.apache.org/licenses/LICENSE-2.0.html\"));\n+    OpenApiOptions options =\n+        new OpenApiOptions(applicationInfo)\n+            .path(\"/swagger-docs\")\n+            .swagger(new SwaggerOptions(\"/swagger-ui\"));\n+    // TODO: allow swagger-ui to be turned off - ideally still leave swagger-docs, just dont add the\n+    // swagger-ui endpoint\n+    return options;\n+  }\n+\n+  private void addNodeHandlers(ChainStorageClient chainStorageClient) {\n+    app.get(GenesisTimeHandler.ROUTE, new GenesisTimeHandler(chainStorageClient));\n+    app.get(VersionHandler.ROUTE, new VersionHandler());\n+    /*\n+     * TODO:\n+     *    /node/syncing\n+     *  Optional:\n+     *    /node/fork\n+     */\n+  }\n+\n+  private void addBeaconHandlers(\n+      ChainStorageClient chainStorageClient, HistoricalChainData historicalChainData) {\n+    // TODO: not in Minimal or optional specified set - some are similar to lighthouse\n+    // implementation\n+    handlers.add(new BeaconHeadHandler(chainStorageClient));\n+    handlers.add(new BeaconChainHeadHandler(chainStorageClient));\n+    handlers.add(new BeaconStateHandler(chainStorageClient));\n+    handlers.add(new FinalizedCheckpointHandler(chainStorageClient));\n+    handlers.add(new BeaconBlockHandler(chainStorageClient, historicalChainData));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0f47b626a69f3c08e71edf2ec967bce4b1cb11a"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1NTM1NQ==", "bodyText": "these are all slated for deletion by the time we're done... I will re-order them if you prefer, but they're on borrowed time.", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379955355", "createdAt": "2020-02-17T01:35:15Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -77,6 +94,69 @@ public void start() {\n                     ctx.status(SC_NOT_FOUND).result(JsonProvider.objectToJSON(\"Not found\"));\n                   }\n                 }));\n+\n+    app.start();\n+  }\n+\n+  private static OpenApiOptions getOpenApiOptions() {\n+    Info applicationInfo =\n+        new Info()\n+            .title(StringUtils.capitalize(VersionProvider.CLIENT_IDENTITY))\n+            .version(VersionProvider.IMPLEMENTATION_VERSION)\n+            .description(\n+                \"A minimal API specification for the beacon node, which enables a validator \"\n+                    + \"to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.\")\n+            .license(\n+                new License()\n+                    .name(\"Apache 2.0\")\n+                    .url(\"https://www.apache.org/licenses/LICENSE-2.0.html\"));\n+    OpenApiOptions options =\n+        new OpenApiOptions(applicationInfo)\n+            .path(\"/swagger-docs\")\n+            .swagger(new SwaggerOptions(\"/swagger-ui\"));\n+    // TODO: allow swagger-ui to be turned off - ideally still leave swagger-docs, just dont add the\n+    // swagger-ui endpoint\n+    return options;\n+  }\n+\n+  private void addNodeHandlers(ChainStorageClient chainStorageClient) {\n+    app.get(GenesisTimeHandler.ROUTE, new GenesisTimeHandler(chainStorageClient));\n+    app.get(VersionHandler.ROUTE, new VersionHandler());\n+    /*\n+     * TODO:\n+     *    /node/syncing\n+     *  Optional:\n+     *    /node/fork\n+     */\n+  }\n+\n+  private void addBeaconHandlers(\n+      ChainStorageClient chainStorageClient, HistoricalChainData historicalChainData) {\n+    // TODO: not in Minimal or optional specified set - some are similar to lighthouse\n+    // implementation\n+    handlers.add(new BeaconHeadHandler(chainStorageClient));\n+    handlers.add(new BeaconChainHeadHandler(chainStorageClient));\n+    handlers.add(new BeaconStateHandler(chainStorageClient));\n+    handlers.add(new FinalizedCheckpointHandler(chainStorageClient));\n+    handlers.add(new BeaconBlockHandler(chainStorageClient, historicalChainData));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1MTE4Nw=="}, "originalCommit": {"oid": "c0f47b626a69f3c08e71edf2ec967bce4b1cb11a"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTQwMjAzOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwMTowMDo0M1rOFqWYlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwMTo0MTozMVrOFqWrzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1MTI1NQ==", "bodyText": "nit: EnrHandler ?", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379951255", "createdAt": "2020-02-17T01:00:43Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -77,6 +94,69 @@ public void start() {\n                     ctx.status(SC_NOT_FOUND).result(JsonProvider.objectToJSON(\"Not found\"));\n                   }\n                 }));\n+\n+    app.start();\n+  }\n+\n+  private static OpenApiOptions getOpenApiOptions() {\n+    Info applicationInfo =\n+        new Info()\n+            .title(StringUtils.capitalize(VersionProvider.CLIENT_IDENTITY))\n+            .version(VersionProvider.IMPLEMENTATION_VERSION)\n+            .description(\n+                \"A minimal API specification for the beacon node, which enables a validator \"\n+                    + \"to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.\")\n+            .license(\n+                new License()\n+                    .name(\"Apache 2.0\")\n+                    .url(\"https://www.apache.org/licenses/LICENSE-2.0.html\"));\n+    OpenApiOptions options =\n+        new OpenApiOptions(applicationInfo)\n+            .path(\"/swagger-docs\")\n+            .swagger(new SwaggerOptions(\"/swagger-ui\"));\n+    // TODO: allow swagger-ui to be turned off - ideally still leave swagger-docs, just dont add the\n+    // swagger-ui endpoint\n+    return options;\n+  }\n+\n+  private void addNodeHandlers(ChainStorageClient chainStorageClient) {\n+    app.get(GenesisTimeHandler.ROUTE, new GenesisTimeHandler(chainStorageClient));\n+    app.get(VersionHandler.ROUTE, new VersionHandler());\n+    /*\n+     * TODO:\n+     *    /node/syncing\n+     *  Optional:\n+     *    /node/fork\n+     */\n+  }\n+\n+  private void addBeaconHandlers(\n+      ChainStorageClient chainStorageClient, HistoricalChainData historicalChainData) {\n+    // TODO: not in Minimal or optional specified set - some are similar to lighthouse\n+    // implementation\n+    handlers.add(new BeaconHeadHandler(chainStorageClient));\n+    handlers.add(new BeaconChainHeadHandler(chainStorageClient));\n+    handlers.add(new BeaconStateHandler(chainStorageClient));\n+    handlers.add(new FinalizedCheckpointHandler(chainStorageClient));\n+    handlers.add(new BeaconBlockHandler(chainStorageClient, historicalChainData));\n+  }\n+\n+  private void addValidatorHandlers() {\n+    /*\n+     * TODO:\n+     *   reference: https://ethereum.github.io/eth2.0-APIs/#/\n+     *   /validator/{pubkey}\n+     *   /validator/duties\n+     *   /validator/block (GET/POST)\n+     *   /validator/attestation (GET/POST)\n+     **/\n+  }\n+\n+  private void addNetworkHandlers(P2PNetwork<?> p2pNetwork) {\n+    // not in Minimal or optional specified set\n+    handlers.add(new PeerIdHandler(p2pNetwork));\n+    handlers.add(new PeersHandler(p2pNetwork));\n+    handlers.add(new ENRHandler());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0f47b626a69f3c08e71edf2ec967bce4b1cb11a"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1NjE3Mw==", "bodyText": "leaving for this PR, per discussion.", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379956173", "createdAt": "2020-02-17T01:41:31Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -77,6 +94,69 @@ public void start() {\n                     ctx.status(SC_NOT_FOUND).result(JsonProvider.objectToJSON(\"Not found\"));\n                   }\n                 }));\n+\n+    app.start();\n+  }\n+\n+  private static OpenApiOptions getOpenApiOptions() {\n+    Info applicationInfo =\n+        new Info()\n+            .title(StringUtils.capitalize(VersionProvider.CLIENT_IDENTITY))\n+            .version(VersionProvider.IMPLEMENTATION_VERSION)\n+            .description(\n+                \"A minimal API specification for the beacon node, which enables a validator \"\n+                    + \"to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.\")\n+            .license(\n+                new License()\n+                    .name(\"Apache 2.0\")\n+                    .url(\"https://www.apache.org/licenses/LICENSE-2.0.html\"));\n+    OpenApiOptions options =\n+        new OpenApiOptions(applicationInfo)\n+            .path(\"/swagger-docs\")\n+            .swagger(new SwaggerOptions(\"/swagger-ui\"));\n+    // TODO: allow swagger-ui to be turned off - ideally still leave swagger-docs, just dont add the\n+    // swagger-ui endpoint\n+    return options;\n+  }\n+\n+  private void addNodeHandlers(ChainStorageClient chainStorageClient) {\n+    app.get(GenesisTimeHandler.ROUTE, new GenesisTimeHandler(chainStorageClient));\n+    app.get(VersionHandler.ROUTE, new VersionHandler());\n+    /*\n+     * TODO:\n+     *    /node/syncing\n+     *  Optional:\n+     *    /node/fork\n+     */\n+  }\n+\n+  private void addBeaconHandlers(\n+      ChainStorageClient chainStorageClient, HistoricalChainData historicalChainData) {\n+    // TODO: not in Minimal or optional specified set - some are similar to lighthouse\n+    // implementation\n+    handlers.add(new BeaconHeadHandler(chainStorageClient));\n+    handlers.add(new BeaconChainHeadHandler(chainStorageClient));\n+    handlers.add(new BeaconStateHandler(chainStorageClient));\n+    handlers.add(new FinalizedCheckpointHandler(chainStorageClient));\n+    handlers.add(new BeaconBlockHandler(chainStorageClient, historicalChainData));\n+  }\n+\n+  private void addValidatorHandlers() {\n+    /*\n+     * TODO:\n+     *   reference: https://ethereum.github.io/eth2.0-APIs/#/\n+     *   /validator/{pubkey}\n+     *   /validator/duties\n+     *   /validator/block (GET/POST)\n+     *   /validator/attestation (GET/POST)\n+     **/\n+  }\n+\n+  private void addNetworkHandlers(P2PNetwork<?> p2pNetwork) {\n+    // not in Minimal or optional specified set\n+    handlers.add(new PeerIdHandler(p2pNetwork));\n+    handlers.add(new PeersHandler(p2pNetwork));\n+    handlers.add(new ENRHandler());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1MTI1NQ=="}, "originalCommit": {"oid": "c0f47b626a69f3c08e71edf2ec967bce4b1cb11a"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MTQyMzQ0OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwMToyNzoyOFrOFqWkqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwMToyNzoyOFrOFqWkqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1NDM0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldReturnNoContentGenesisTimeIsNotSet() throws Exception {\n          \n          \n            \n              public void shouldReturnNoContentWhenGenesisTimeIsNotSet() throws Exception {", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379954346", "createdAt": "2020-02-17T01:27:28Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java", "diffHunk": "@@ -13,30 +13,38 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n \n import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n import org.junit.jupiter.api.Test;\n-import org.mockito.Mockito;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler.RequestParams;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-class GenesisTimeHandlerTest {\n-  private final RequestParams requestParams = Mockito.mock(RequestParams.class);\n+public class GenesisTimeHandlerTest {\n+  private Context mockContext = mock(Context.class);\n+  private final UnsignedLong genesisTime = UnsignedLong.valueOf(51234);\n+\n   private final ChainStorageClient storageClient =\n       ChainStorageClient.memoryOnlyClient(new EventBus());\n-  private final GenesisTimeHandler handler = new GenesisTimeHandler(storageClient);\n \n   @Test\n-  public void shouldReturnEmptyObjectWhenGenesisTimeIsNotSet() {\n-    assertThat(handler.handleRequest(requestParams)).isEqualTo(null);\n+  public void shouldReturnNoContentGenesisTimeIsNotSet() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0f47b626a69f3c08e71edf2ec967bce4b1cb11a"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2603, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}