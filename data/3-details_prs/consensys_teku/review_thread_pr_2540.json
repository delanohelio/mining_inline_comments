{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MjE0OTc4", "number": 2540, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQyMzoxMTozMFrOEWnwiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQyMzoxOTowNlrOEWnzDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTU1NTMxOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQyMzoxMTozMFrOG9-fog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQyMzoxMTozMFrOG9-fog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY0MDIyNg==", "bodyText": "We make UInt64 available everywhere by default.  Have to exclude the unsigned module itself and errorprone-checks from that to avoid recursive dependency loops.", "url": "https://github.com/ConsenSys/teku/pull/2540#discussion_r467640226", "createdAt": "2020-08-09T23:11:30Z", "author": {"login": "ajsutton"}, "path": "build.gradle", "diffHunk": "@@ -532,6 +532,10 @@ subprojects {\n     testFixturesImplementation 'org.assertj:assertj-core'\n   }\n \n+  if (project.name != 'unsigned' && project.name != 'errorprone-checks') {\n+    dependencies.implementation(project(':infrastructure:unsigned'))\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c58bfa273ba1a1c2e311633422789501dedd88f8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTU1NjQxOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/RestApiConstants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQyMzoxMjo1N1rOG9-gLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQyMzoxMjo1N1rOG9-gLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY0MDM2Ng==", "bodyText": "@rolfyone Do we want this to still say UnsignedLong?  I've changed all the places that openapi referred to UnsignedLong to uint64 so its consistent with the @Schema annotations we have.", "url": "https://github.com/ConsenSys/teku/pull/2540#discussion_r467640366", "createdAt": "2020-08-09T23:12:57Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/RestApiConstants.java", "diffHunk": "@@ -48,9 +48,9 @@\n       \"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\";\n   public static final String INVALID_BODY_SUPPLIED = \"Invalid body supplied.\";\n \n-  public static final String EPOCH_QUERY_DESCRIPTION = \"`UnsignedLong` Epoch number to query.\";\n+  public static final String EPOCH_QUERY_DESCRIPTION = \"`UInt64` Epoch number to query.\";\n   public static final String SLOT_QUERY_DESCRIPTION =\n-      \"`UnsignedLong` Slot to query in the canonical chain.\";\n+      \"`UInt64` Slot to query in the canonical chain.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c58bfa273ba1a1c2e311633422789501dedd88f8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTU2MTc0OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/epoch/EpochProcessorUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOVQyMzoxOTowNlrOG9-irg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODoyODo1M1rOG-Fkzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY0MTAwNg==", "bodyText": "We should review this to make sure it can never overflow. But that's not for this PR.", "url": "https://github.com/ConsenSys/teku/pull/2540#discussion_r467641006", "createdAt": "2020-08-09T23:19:06Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/epoch/EpochProcessorUtil.java", "diffHunk": "@@ -318,28 +314,26 @@ public static void process_registry_updates(MutableBeaconState state)\n    *     <a>https://github.com/ethereum/eth2.0-specs/blob/v0.8.0/specs/core/0_beacon-chain.md#slashings</a>\n    */\n   public static void process_slashings(MutableBeaconState state) {\n-    UnsignedLong epoch = get_current_epoch(state);\n-    UnsignedLong total_balance = get_total_active_balance(state);\n+    UInt64 epoch = get_current_epoch(state);\n+    UInt64 total_balance = get_total_active_balance(state);\n \n     SSZList<Validator> validators = state.getValidators();\n     for (int index = 0; index < validators.size(); index++) {\n       Validator validator = validators.get(index);\n       if (validator.isSlashed()\n           && epoch\n-              .plus(UnsignedLong.valueOf(EPOCHS_PER_SLASHINGS_VECTOR / 2))\n+              .plus(UInt64.valueOf(EPOCHS_PER_SLASHINGS_VECTOR / 2))\n               .equals(validator.getWithdrawable_epoch())) {\n-        UnsignedLong increment = EFFECTIVE_BALANCE_INCREMENT;\n-        UnsignedLong penalty_numerator =\n+        UInt64 increment = EFFECTIVE_BALANCE_INCREMENT;\n+        UInt64 penalty_numerator =\n             validator\n                 .getEffective_balance()\n                 .dividedBy(increment)\n                 .times(\n-                    min(\n-                        UnsignedLong.valueOf(\n-                            state.getSlashings().stream().mapToLong(UnsignedLong::longValue).sum()\n-                                * 3),\n-                        total_balance));\n-        UnsignedLong penalty = penalty_numerator.dividedBy(total_balance).times(increment);\n+                    UInt64.valueOf(\n+                            state.getSlashings().stream().mapToLong(UInt64::longValue).sum() * 3)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c58bfa273ba1a1c2e311633422789501dedd88f8"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc1NjIzOQ==", "bodyText": "This was dealt with in the spec in ethereum/consensus-specs#1286 and the implementation here looks to match the spec. So I believe we are good.", "url": "https://github.com/ConsenSys/teku/pull/2540#discussion_r467756239", "createdAt": "2020-08-10T08:28:53Z", "author": {"login": "benjaminion"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/epoch/EpochProcessorUtil.java", "diffHunk": "@@ -318,28 +314,26 @@ public static void process_registry_updates(MutableBeaconState state)\n    *     <a>https://github.com/ethereum/eth2.0-specs/blob/v0.8.0/specs/core/0_beacon-chain.md#slashings</a>\n    */\n   public static void process_slashings(MutableBeaconState state) {\n-    UnsignedLong epoch = get_current_epoch(state);\n-    UnsignedLong total_balance = get_total_active_balance(state);\n+    UInt64 epoch = get_current_epoch(state);\n+    UInt64 total_balance = get_total_active_balance(state);\n \n     SSZList<Validator> validators = state.getValidators();\n     for (int index = 0; index < validators.size(); index++) {\n       Validator validator = validators.get(index);\n       if (validator.isSlashed()\n           && epoch\n-              .plus(UnsignedLong.valueOf(EPOCHS_PER_SLASHINGS_VECTOR / 2))\n+              .plus(UInt64.valueOf(EPOCHS_PER_SLASHINGS_VECTOR / 2))\n               .equals(validator.getWithdrawable_epoch())) {\n-        UnsignedLong increment = EFFECTIVE_BALANCE_INCREMENT;\n-        UnsignedLong penalty_numerator =\n+        UInt64 increment = EFFECTIVE_BALANCE_INCREMENT;\n+        UInt64 penalty_numerator =\n             validator\n                 .getEffective_balance()\n                 .dividedBy(increment)\n                 .times(\n-                    min(\n-                        UnsignedLong.valueOf(\n-                            state.getSlashings().stream().mapToLong(UnsignedLong::longValue).sum()\n-                                * 3),\n-                        total_balance));\n-        UnsignedLong penalty = penalty_numerator.dividedBy(total_balance).times(increment);\n+                    UInt64.valueOf(\n+                            state.getSlashings().stream().mapToLong(UInt64::longValue).sum() * 3)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY0MTAwNg=="}, "originalCommit": {"oid": "c58bfa273ba1a1c2e311633422789501dedd88f8"}, "originalPosition": 165}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3384, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}