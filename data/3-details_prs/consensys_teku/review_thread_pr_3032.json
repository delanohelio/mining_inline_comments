{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MDA3NjIy", "number": 3032, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOTowMTozNlrOEwbRAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOTowMTozNlrOEwbRAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjEzODI3OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/teku/ssz/backing/type/BasicViewTypes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxOTowMTozNlrOHl-7Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoyOToxOFrOHmkrdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU5MDM3MQ==", "bodyText": "Why are we appling this only when the byteIndex is zero? Can we not use a compressed tree node even when the byte index is not 0?", "url": "https://github.com/ConsenSys/teku/pull/3032#discussion_r509590371", "createdAt": "2020-10-21T19:01:36Z", "author": {"login": "cemozerr"}, "path": "ssz/src/main/java/tech/pegasys/teku/ssz/backing/type/BasicViewTypes.java", "diffHunk": "@@ -31,27 +31,35 @@\n \n /** The collection of commonly used basic types */\n public class BasicViewTypes {\n+  private static final TreeNode SINGLE_FALSE_NODE = TreeNode.createCompressedLeafNode(Bytes.of(0));\n+  private static final TreeNode SINGLE_TRUE_NODE = TreeNode.createCompressedLeafNode(Bytes.of(1));\n \n   public static final BasicViewType<BitView> BIT_TYPE =\n       new BasicViewType<>(1) {\n         @Override\n         public BitView createFromBackingNode(TreeNode node, int idx) {\n-          return new BitView((node.hashTreeRoot().get(idx / 8) & (1 << (idx % 8))) != 0);\n+          return BitView.viewOf((node.hashTreeRoot().get(idx / 8) & (1 << (idx % 8))) != 0);\n         }\n \n         @Override\n         public TreeNode updateBackingNode(TreeNode srcNode, int idx, ViewRead newValue) {\n-          MutableBytes32 dest = srcNode.hashTreeRoot().mutableCopy();\n           int byteIndex = idx / 8;\n           int bitIndex = idx % 8;\n-          byte b = dest.get(byteIndex);\n-          if (((BitView) newValue).get()) {\n+          Bytes32 originalBytes = srcNode.hashTreeRoot();\n+          byte b = originalBytes.get(byteIndex);\n+          boolean bit = ((BitView) newValue).get();\n+          if (bit) {\n             b = (byte) (b | (1 << bitIndex));\n           } else {\n             b = (byte) (b & ~(1 << bitIndex));\n           }\n-          dest.set(byteIndex, b);\n-          return TreeNode.createLeafNode(dest);\n+          if (srcNode.isZero() && byteIndex == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e83ae3db39b0a48968c34ec25ed8ce0d43722b44"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIwODg4NQ==", "bodyText": "This optimization is primarily intended for 'small' types (like UInt64) in containers which are effectively value bytes right padded with zeroes to Bytes32 and are created exactly with\nupdateBackingNode(zeroLeafNode, 0, myUInt64ValueView)\nIf you are updating a node with idx > 0 that may only mean that this is a List/Vector with packed basic values and optimizing this case makes things more complicated and doesn't yield much benefit.\nHere you may see what I'm referring to:\n(sample backing tree of a Validator structure: )\n\u251c\u2500\u2510\n\u2502 \u251c\u2500\u2510\n\u2502 \u2502 \u251c\u2500\u2510\n\u2502 \u2502 \u2502 \u251c\u2500[0x8c43edcff6f1d56f2a42072637c0cfd9467ddfccb918ce1a8c2d1babb9cdd658]\n\u2502 \u2502 \u2502 \u2514\u2500[0x4b601dde9b2bafe027be489bbdcf82ef00000000000000000000000000000000]\n\u2502 \u2502 \u2514\u2500[0x92fcc742102977503966d35cb217fc55bd583232b0c551605c08b9c319485bb5]\n\u2502 \u2514\u2500\u2510\n\u2502   \u251c\u2500[0x0040597307000000000000000000000000000000000000000000000000000000]\n\u2502   \u2514\u2500[0x0]\n\u2514\u2500\u2510\n  \u251c\u2500\u2510\n  \u2502 \u251c\u2500[0xffffffffffffffff000000000000000000000000000000000000000000000000]\n  \u2502 \u2514\u2500[0xffffffffffffffff000000000000000000000000000000000000000000000000]\n  \u2514\u2500\u2510\n    \u251c\u2500[0xffffffffffffffff000000000000000000000000000000000000000000000000]\n    \u2514\u2500[0xffffffffffffffff000000000000000000000000000000000000000000000000]\n\nIdeally the publicKey here (Bytes48) can be optimized as well cause it has 16 trailing zero bytes but for this case we would need more expensive check that all the bytes to right a zeroes while TreeNode.isZero() is almost free", "url": "https://github.com/ConsenSys/teku/pull/3032#discussion_r510208885", "createdAt": "2020-10-22T14:29:18Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/teku/ssz/backing/type/BasicViewTypes.java", "diffHunk": "@@ -31,27 +31,35 @@\n \n /** The collection of commonly used basic types */\n public class BasicViewTypes {\n+  private static final TreeNode SINGLE_FALSE_NODE = TreeNode.createCompressedLeafNode(Bytes.of(0));\n+  private static final TreeNode SINGLE_TRUE_NODE = TreeNode.createCompressedLeafNode(Bytes.of(1));\n \n   public static final BasicViewType<BitView> BIT_TYPE =\n       new BasicViewType<>(1) {\n         @Override\n         public BitView createFromBackingNode(TreeNode node, int idx) {\n-          return new BitView((node.hashTreeRoot().get(idx / 8) & (1 << (idx % 8))) != 0);\n+          return BitView.viewOf((node.hashTreeRoot().get(idx / 8) & (1 << (idx % 8))) != 0);\n         }\n \n         @Override\n         public TreeNode updateBackingNode(TreeNode srcNode, int idx, ViewRead newValue) {\n-          MutableBytes32 dest = srcNode.hashTreeRoot().mutableCopy();\n           int byteIndex = idx / 8;\n           int bitIndex = idx % 8;\n-          byte b = dest.get(byteIndex);\n-          if (((BitView) newValue).get()) {\n+          Bytes32 originalBytes = srcNode.hashTreeRoot();\n+          byte b = originalBytes.get(byteIndex);\n+          boolean bit = ((BitView) newValue).get();\n+          if (bit) {\n             b = (byte) (b | (1 << bitIndex));\n           } else {\n             b = (byte) (b & ~(1 << bitIndex));\n           }\n-          dest.set(byteIndex, b);\n-          return TreeNode.createLeafNode(dest);\n+          if (srcNode.isZero() && byteIndex == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU5MDM3MQ=="}, "originalCommit": {"oid": "e83ae3db39b0a48968c34ec25ed8ce0d43722b44"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3060, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}