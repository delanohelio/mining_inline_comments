{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NzE5OTMy", "number": 1516, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjo1Njo1NlrODtW6cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjo1OTozNlrODtW8Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODg3OTIwOnYy", "diffSide": "RIGHT", "path": "util/src/test/java/tech/pegasys/artemis/util/async/SafeFutureTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjo1Njo1NlrOF-vHvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjo1Njo1NlrOF-vHvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyODA2MA==", "bodyText": "lol", "url": "https://github.com/ConsenSys/teku/pull/1516#discussion_r401328060", "createdAt": "2020-04-01T02:56:56Z", "author": {"login": "cemozerr"}, "path": "util/src/test/java/tech/pegasys/artemis/util/async/SafeFutureTest.java", "diffHunk": "@@ -485,6 +485,45 @@ public void fromRunnable_propagatesExceptionalResult() {\n     assertExceptionallyCompletedWith(future, error);\n   }\n \n+  @Test\n+  public void allOf_shouldAddAllSuppressedExceptions() {\n+    final Throwable error1 = new RuntimeException(\"Nope\");\n+    final Throwable error2 = new RuntimeException(\"Oh dear\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02142b4425fc690e631138237a7bb105da2c8be5"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODg4MzUwOnYy", "diffSide": "RIGHT", "path": "util/src/test/java/tech/pegasys/artemis/util/async/SafeFutureTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMjo1OTozNlrOF-vKVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMzowNDowMFrOF-vOiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyODcyNA==", "bodyText": "What makes the error1 the root cause here and not the error2?", "url": "https://github.com/ConsenSys/teku/pull/1516#discussion_r401328724", "createdAt": "2020-04-01T02:59:36Z", "author": {"login": "cemozerr"}, "path": "util/src/test/java/tech/pegasys/artemis/util/async/SafeFutureTest.java", "diffHunk": "@@ -485,6 +485,45 @@ public void fromRunnable_propagatesExceptionalResult() {\n     assertExceptionallyCompletedWith(future, error);\n   }\n \n+  @Test\n+  public void allOf_shouldAddAllSuppressedExceptions() {\n+    final Throwable error1 = new RuntimeException(\"Nope\");\n+    final Throwable error2 = new RuntimeException(\"Oh dear\");\n+    final SafeFuture<Void> future1 = new SafeFuture<>();\n+    final SafeFuture<Void> future2 = new SafeFuture<>();\n+    final SafeFuture<Void> future3 = new SafeFuture<>();\n+\n+    final SafeFuture<Void> result = SafeFuture.allOf(future1, future2, future3);\n+    assertThat(result).isNotDone();\n+\n+    future2.completeExceptionally(error2);\n+    assertThat(result).isNotDone();\n+\n+    future3.complete(null);\n+    assertThat(result).isNotDone();\n+\n+    future1.completeExceptionally(error1);\n+\n+    assertThat(result).isCompletedExceptionally();\n+    assertThatThrownBy(result::join).hasSuppressedException(error2);\n+    assertThatThrownBy(result::join).hasRootCause(error1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02142b4425fc690e631138237a7bb105da2c8be5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyOTgwMw==", "bodyText": "Just the way CompletableFuture works.  I was expecting error2 as well to be honest.", "url": "https://github.com/ConsenSys/teku/pull/1516#discussion_r401329803", "createdAt": "2020-04-01T03:04:00Z", "author": {"login": "ajsutton"}, "path": "util/src/test/java/tech/pegasys/artemis/util/async/SafeFutureTest.java", "diffHunk": "@@ -485,6 +485,45 @@ public void fromRunnable_propagatesExceptionalResult() {\n     assertExceptionallyCompletedWith(future, error);\n   }\n \n+  @Test\n+  public void allOf_shouldAddAllSuppressedExceptions() {\n+    final Throwable error1 = new RuntimeException(\"Nope\");\n+    final Throwable error2 = new RuntimeException(\"Oh dear\");\n+    final SafeFuture<Void> future1 = new SafeFuture<>();\n+    final SafeFuture<Void> future2 = new SafeFuture<>();\n+    final SafeFuture<Void> future3 = new SafeFuture<>();\n+\n+    final SafeFuture<Void> result = SafeFuture.allOf(future1, future2, future3);\n+    assertThat(result).isNotDone();\n+\n+    future2.completeExceptionally(error2);\n+    assertThat(result).isNotDone();\n+\n+    future3.complete(null);\n+    assertThat(result).isNotDone();\n+\n+    future1.completeExceptionally(error1);\n+\n+    assertThat(result).isCompletedExceptionally();\n+    assertThatThrownBy(result::join).hasSuppressedException(error2);\n+    assertThatThrownBy(result::join).hasRootCause(error1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMyODcyNA=="}, "originalCommit": {"oid": "02142b4425fc690e631138237a7bb105da2c8be5"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1798, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}