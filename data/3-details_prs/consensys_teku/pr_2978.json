{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNzc0Njky", "number": 2978, "title": "Rename GenesisTimeProvider to GenesisDataProvider and add genesis validators root", "bodyText": "Signed-off-by: Paul Harris paul.harris@consensys.net\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-10-15T03:23:45Z", "url": "https://github.com/ConsenSys/teku/pull/2978", "merged": true, "mergeCommit": {"oid": "56e8dbb24d6e2ace5617723d43c354ba295cfee1"}, "closed": true, "closedAt": "2020-10-15T05:27:12Z", "author": {"login": "rolfyone"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSpIcQAH2gAyNTAzNzc0NjkyOjE0NGFkMGRmNzJiOWNkYmY4OTAwYmRjNWZkNzc2YzUyMjEyYzZlZDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSp2kZgFqTUwODkyNDMxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "144ad0df72b9cdbf8900bdc5fd776c52212c6ed5", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/144ad0df72b9cdbf8900bdc5fd776c52212c6ed5", "committedDate": "2020-10-15T03:23:12Z", "message": "Update validator client to call the standard Rest api to get fork.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4OTEwODk5", "url": "https://github.com/ConsenSys/teku/pull/2978#pullrequestreview-508910899", "createdAt": "2020-10-15T03:25:34Z", "commit": {"oid": "144ad0df72b9cdbf8900bdc5fd776c52212c6ed5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzoyNTozNFrOHhvbjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzoyNjo1OVrOHhvc4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MjE1Nw==", "bodyText": "Could this continue using genesisDataProvider.getGenesisTime()?", "url": "https://github.com/ConsenSys/teku/pull/2978#discussion_r505142157", "createdAt": "2020-10-15T03:25:34Z", "author": {"login": "ajsutton"}, "path": "validator/beaconnode/src/main/java/tech/pegasys/teku/validator/beaconnode/TimeBasedEventAdapter.java", "diffHunk": "@@ -87,7 +88,7 @@ private boolean isTooLate(final UInt64 scheduledTime, final UInt64 actualTime) {\n   public SafeFuture<Void> start() {\n     // Don't wait for the genesis time to be available before considering startup complete\n     // The beacon node may not be available or genesis may not yet be known.\n-    genesisTimeProvider.getGenesisTime().thenAccept(this::start).reportExceptions();\n+    genesisDataProvider.getGenesisData().thenAccept(this::start).reportExceptions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144ad0df72b9cdbf8900bdc5fd776c52212c6ed5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MjQ5Ng==", "bodyText": "This case is the same as shouldRetryWhenGenesisTimeIsNotYetKnown", "url": "https://github.com/ConsenSys/teku/pull/2978#discussion_r505142496", "createdAt": "2020-10-15T03:26:59Z", "author": {"login": "ajsutton"}, "path": "validator/beaconnode/src/test/java/tech/pegasys/teku/validator/beaconnode/GenesisDataProviderTest.java", "diffHunk": "@@ -23,79 +23,107 @@\n import static tech.pegasys.teku.infrastructure.async.SafeFuture.failedFuture;\n \n import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n import org.assertj.core.api.Assertions;\n import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.datastructures.genesis.GenesisData;\n import tech.pegasys.teku.infrastructure.async.SafeFuture;\n import tech.pegasys.teku.infrastructure.async.StubAsyncRunner;\n import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n \n-class GenesisTimeProviderTest {\n+class GenesisDataProviderTest {\n \n   private static final UInt64 GENESIS_TIME = UInt64.valueOf(12341234);\n+  private static final Bytes32 GENESIS_VALIDATORS_ROOT = Bytes32.fromHexString(\"0x01\");\n   private final StubAsyncRunner asyncRunner = new StubAsyncRunner();\n   private final ValidatorApiChannel validatorApiChannel = mock(ValidatorApiChannel.class);\n \n-  private final GenesisTimeProvider genesisTimeProvider =\n-      new GenesisTimeProvider(asyncRunner, validatorApiChannel);\n+  private final GenesisDataProvider genesisDataProvider =\n+      new GenesisDataProvider(asyncRunner, validatorApiChannel);\n \n   @Test\n   void shouldRequestGenesisTimeWhenNotPreviouslyLoaded() {\n-    final SafeFuture<Optional<UInt64>> request = new SafeFuture<>();\n-    when(validatorApiChannel.getGenesisTime()).thenReturn(request);\n+    final SafeFuture<Optional<GenesisData>> request = new SafeFuture<>();\n+    when(validatorApiChannel.getGenesisData()).thenReturn(request);\n \n-    final SafeFuture<UInt64> result = genesisTimeProvider.getGenesisTime();\n+    final SafeFuture<UInt64> result = genesisDataProvider.getGenesisTime();\n     assertThat(result).isNotDone();\n \n-    request.complete(Optional.of(GENESIS_TIME));\n+    request.complete(Optional.of(new GenesisData(GENESIS_TIME, GENESIS_VALIDATORS_ROOT)));\n     assertThat(result).isCompletedWithValue(GENESIS_TIME);\n   }\n \n   @Test\n   void shouldReturnCachedGenesisTimeWhenPreviouslyLoaded() {\n-    when(validatorApiChannel.getGenesisTime())\n-        .thenReturn(SafeFuture.completedFuture(Optional.of(GENESIS_TIME)));\n-    assertThat(genesisTimeProvider.getGenesisTime()).isCompletedWithValue(GENESIS_TIME);\n-    verify(validatorApiChannel).getGenesisTime();\n+    when(validatorApiChannel.getGenesisData())\n+        .thenReturn(\n+            SafeFuture.completedFuture(\n+                Optional.of(new GenesisData(GENESIS_TIME, GENESIS_VALIDATORS_ROOT))));\n+    assertThat(genesisDataProvider.getGenesisData())\n+        .isCompletedWithValue(new GenesisData(GENESIS_TIME, GENESIS_VALIDATORS_ROOT));\n+    verify(validatorApiChannel).getGenesisData();\n \n     // Subsequent requests just return the cached version\n-    assertThat(genesisTimeProvider.getGenesisTime()).isCompletedWithValue(GENESIS_TIME);\n+    assertThat(genesisDataProvider.getGenesisData())\n+        .isCompletedWithValue(new GenesisData(GENESIS_TIME, GENESIS_VALIDATORS_ROOT));\n     verifyNoMoreInteractions(validatorApiChannel);\n   }\n \n   @Test\n   void shouldRetryWhenGenesisTimeFailsToLoad() {\n-    when(validatorApiChannel.getGenesisTime())\n+    when(validatorApiChannel.getGenesisData())\n         .thenReturn(failedFuture(new RuntimeException(\"Nope\")))\n-        .thenReturn(completedFuture(Optional.of(GENESIS_TIME)));\n+        .thenReturn(\n+            completedFuture(Optional.of(new GenesisData(GENESIS_TIME, GENESIS_VALIDATORS_ROOT))));\n \n     // First request fails\n-    final SafeFuture<UInt64> result = genesisTimeProvider.getGenesisTime();\n-    verify(validatorApiChannel).getGenesisTime();\n+    final SafeFuture<UInt64> result = genesisDataProvider.getGenesisTime();\n+    verify(validatorApiChannel).getGenesisData();\n     assertThat(result).isNotDone();\n     Assertions.assertThat(asyncRunner.hasDelayedActions()).isTrue();\n \n     // Retry is scheduled.\n     asyncRunner.executeQueuedActions();\n-    verify(validatorApiChannel, times(2)).getGenesisTime();\n+    verify(validatorApiChannel, times(2)).getGenesisData();\n     assertThat(result).isCompletedWithValue(GENESIS_TIME);\n   }\n \n   @Test\n   void shouldRetryWhenGenesisTimeIsNotYetKnown() {\n-    when(validatorApiChannel.getGenesisTime())\n+    when(validatorApiChannel.getGenesisData())\n         .thenReturn(completedFuture(Optional.empty()))\n-        .thenReturn(completedFuture(Optional.of(GENESIS_TIME)));\n+        .thenReturn(\n+            completedFuture(Optional.of(new GenesisData(GENESIS_TIME, GENESIS_VALIDATORS_ROOT))));\n \n     // First request fails\n-    final SafeFuture<UInt64> result = genesisTimeProvider.getGenesisTime();\n-    verify(validatorApiChannel).getGenesisTime();\n+    final SafeFuture<UInt64> result = genesisDataProvider.getGenesisTime();\n+    verify(validatorApiChannel).getGenesisData();\n     assertThat(result).isNotDone();\n     Assertions.assertThat(asyncRunner.hasDelayedActions()).isTrue();\n \n     // Retry is scheduled.\n     asyncRunner.executeQueuedActions();\n-    verify(validatorApiChannel, times(2)).getGenesisTime();\n+    verify(validatorApiChannel, times(2)).getGenesisData();\n     assertThat(result).isCompletedWithValue(GENESIS_TIME);\n   }\n+\n+  @Test\n+  void shouldRetryWhenGenesisValidatorsRootIsNotYetKnown() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "144ad0df72b9cdbf8900bdc5fd776c52212c6ed5"}, "originalPosition": 112}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f45120523918585c9b957d520f8e250f1b86b688", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/f45120523918585c9b957d520f8e250f1b86b688", "committedDate": "2020-10-15T03:53:03Z", "message": "changes from review feedback.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd607f96db77e56f6e4616ec87157e5898a1c598", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/fd607f96db77e56f6e4616ec87157e5898a1c598", "committedDate": "2020-10-15T03:55:39Z", "message": "Merge remote-tracking branch 'upstream/master' into validator-get-fork"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0afdd5bf9f3201ac134c587df7f30f05aaab376e", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/0afdd5bf9f3201ac134c587df7f30f05aaab376e", "committedDate": "2020-10-15T04:12:14Z", "message": "changes from review feedback.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4OTI0MzEx", "url": "https://github.com/ConsenSys/teku/pull/2978#pullrequestreview-508924311", "createdAt": "2020-10-15T04:13:35Z", "commit": {"oid": "0afdd5bf9f3201ac134c587df7f30f05aaab376e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3365, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}