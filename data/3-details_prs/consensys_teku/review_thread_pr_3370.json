{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNDE1MzM5", "number": 3370, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDoxOToyMFrOFB9_rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxMzowMlrOFB_Wcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjA4NjIwOnYy", "diffSide": "RIGHT", "path": "infrastructure/logging/src/main/java/tech/pegasys/teku/infrastructure/logging/StatusLogger.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDoxOToyMFrOIA49FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzowOTo1NVrOIA--gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwNDA1Mw==", "bodyText": "this is happening every 30 seconds, I can understand logging when it wasn't available and now it is back, but if it's been available I'd prefer this is a debug level... Most of the time this will equate to log noise...", "url": "https://github.com/ConsenSys/teku/pull/3370#discussion_r537804053", "createdAt": "2020-12-07T20:19:20Z", "author": {"login": "rolfyone"}, "path": "infrastructure/logging/src/main/java/tech/pegasys/teku/infrastructure/logging/StatusLogger.java", "diffHunk": "@@ -236,6 +237,17 @@ public void eth1DepositChainIdMismatch(int expectedChainId, int eth1ChainId) {\n         eth1ChainId);\n   }\n \n+  public void externalSignerStatus(final URL externalSignerUrl, boolean isReachable) {\n+    if (isReachable) {\n+      log.info(\"External signer is reachable at {}\", externalSignerUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d1b8fd0332a0143d7940986ad6e1c3a90e218c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwNjQyNQ==", "bodyText": "actually, it does look like this isn't every 30 seconds but on each change... if that's the case I'm happy \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/3370#discussion_r537806425", "createdAt": "2020-12-07T20:22:43Z", "author": {"login": "rolfyone"}, "path": "infrastructure/logging/src/main/java/tech/pegasys/teku/infrastructure/logging/StatusLogger.java", "diffHunk": "@@ -236,6 +237,17 @@ public void eth1DepositChainIdMismatch(int expectedChainId, int eth1ChainId) {\n         eth1ChainId);\n   }\n \n+  public void externalSignerStatus(final URL externalSignerUrl, boolean isReachable) {\n+    if (isReachable) {\n+      log.info(\"External signer is reachable at {}\", externalSignerUrl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwNDA1Mw=="}, "originalCommit": {"oid": "39d1b8fd0332a0143d7940986ad6e1c3a90e218c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwMjcyMA==", "bodyText": "yes, log all failures, once after every success.", "url": "https://github.com/ConsenSys/teku/pull/3370#discussion_r537902720", "createdAt": "2020-12-07T23:09:55Z", "author": {"login": "usmansaleem"}, "path": "infrastructure/logging/src/main/java/tech/pegasys/teku/infrastructure/logging/StatusLogger.java", "diffHunk": "@@ -236,6 +237,17 @@ public void eth1DepositChainIdMismatch(int expectedChainId, int eth1ChainId) {\n         eth1ChainId);\n   }\n \n+  public void externalSignerStatus(final URL externalSignerUrl, boolean isReachable) {\n+    if (isReachable) {\n+      log.info(\"External signer is reachable at {}\", externalSignerUrl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwNDA1Mw=="}, "originalCommit": {"oid": "39d1b8fd0332a0143d7940986ad6e1c3a90e218c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjMwODM0OnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/ExternalSignerUpcheck.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxMzowMlrOIA68Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzoyODo0OFrOIA_p6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNjY0Ng==", "bodyText": "Can we log the exception at debug level so we have a better idea why its failing if needed?", "url": "https://github.com/ConsenSys/teku/pull/3370#discussion_r537836646", "createdAt": "2020-12-07T21:13:02Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/ExternalSignerUpcheck.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.signer;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.time.Duration;\n+\n+public class ExternalSignerUpcheck {\n+  private final URL signingServiceUrl;\n+  private final Duration timeout;\n+  private final HttpClient httpClient;\n+\n+  public static final String UPCHECK_ENDPOINT = \"/upcheck\";\n+\n+  public ExternalSignerUpcheck(\n+      final HttpClient httpClient, final URL signingServiceUrl, final Duration timeout) {\n+    this.httpClient = httpClient;\n+    this.signingServiceUrl = signingServiceUrl;\n+    this.timeout = timeout;\n+  }\n+\n+  public boolean upcheck() {\n+    try {\n+      final HttpRequest request =\n+          HttpRequest.newBuilder()\n+              .uri(signingServiceUrl.toURI().resolve(UPCHECK_ENDPOINT))\n+              .timeout(timeout)\n+              .GET()\n+              .build();\n+      final HttpResponse<Void> response =\n+          httpClient.send(request, HttpResponse.BodyHandlers.discarding());\n+      return response.statusCode() == 200;\n+    } catch (final URISyntaxException | IOException | InterruptedException e) {\n+      return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39d1b8fd0332a0143d7940986ad6e1c3a90e218c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwMjA3MA==", "bodyText": "\ud83d\udc4d , separated the catch block to handle URISyntax and IO/Interrupted. Added the debug log.", "url": "https://github.com/ConsenSys/teku/pull/3370#discussion_r537902070", "createdAt": "2020-12-07T23:08:37Z", "author": {"login": "usmansaleem"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/ExternalSignerUpcheck.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.signer;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.time.Duration;\n+\n+public class ExternalSignerUpcheck {\n+  private final URL signingServiceUrl;\n+  private final Duration timeout;\n+  private final HttpClient httpClient;\n+\n+  public static final String UPCHECK_ENDPOINT = \"/upcheck\";\n+\n+  public ExternalSignerUpcheck(\n+      final HttpClient httpClient, final URL signingServiceUrl, final Duration timeout) {\n+    this.httpClient = httpClient;\n+    this.signingServiceUrl = signingServiceUrl;\n+    this.timeout = timeout;\n+  }\n+\n+  public boolean upcheck() {\n+    try {\n+      final HttpRequest request =\n+          HttpRequest.newBuilder()\n+              .uri(signingServiceUrl.toURI().resolve(UPCHECK_ENDPOINT))\n+              .timeout(timeout)\n+              .GET()\n+              .build();\n+      final HttpResponse<Void> response =\n+          httpClient.send(request, HttpResponse.BodyHandlers.discarding());\n+      return response.statusCode() == 200;\n+    } catch (final URISyntaxException | IOException | InterruptedException e) {\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNjY0Ng=="}, "originalCommit": {"oid": "39d1b8fd0332a0143d7940986ad6e1c3a90e218c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxMDA1Mw==", "bodyText": "I don't think they need to be separated.  Just to be clear, we shouldn't ever silently swallow an exception.  So if it fails for any reason, we want a debug log showing that.", "url": "https://github.com/ConsenSys/teku/pull/3370#discussion_r537910053", "createdAt": "2020-12-07T23:23:33Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/ExternalSignerUpcheck.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.signer;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.time.Duration;\n+\n+public class ExternalSignerUpcheck {\n+  private final URL signingServiceUrl;\n+  private final Duration timeout;\n+  private final HttpClient httpClient;\n+\n+  public static final String UPCHECK_ENDPOINT = \"/upcheck\";\n+\n+  public ExternalSignerUpcheck(\n+      final HttpClient httpClient, final URL signingServiceUrl, final Duration timeout) {\n+    this.httpClient = httpClient;\n+    this.signingServiceUrl = signingServiceUrl;\n+    this.timeout = timeout;\n+  }\n+\n+  public boolean upcheck() {\n+    try {\n+      final HttpRequest request =\n+          HttpRequest.newBuilder()\n+              .uri(signingServiceUrl.toURI().resolve(UPCHECK_ENDPOINT))\n+              .timeout(timeout)\n+              .GET()\n+              .build();\n+      final HttpResponse<Void> response =\n+          httpClient.send(request, HttpResponse.BodyHandlers.discarding());\n+      return response.statusCode() == 200;\n+    } catch (final URISyntaxException | IOException | InterruptedException e) {\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNjY0Ng=="}, "originalCommit": {"oid": "39d1b8fd0332a0143d7940986ad6e1c3a90e218c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxMzgzMg==", "bodyText": "Ah right, now I see the new code that makes sense.", "url": "https://github.com/ConsenSys/teku/pull/3370#discussion_r537913832", "createdAt": "2020-12-07T23:28:48Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/ExternalSignerUpcheck.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.signer;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.time.Duration;\n+\n+public class ExternalSignerUpcheck {\n+  private final URL signingServiceUrl;\n+  private final Duration timeout;\n+  private final HttpClient httpClient;\n+\n+  public static final String UPCHECK_ENDPOINT = \"/upcheck\";\n+\n+  public ExternalSignerUpcheck(\n+      final HttpClient httpClient, final URL signingServiceUrl, final Duration timeout) {\n+    this.httpClient = httpClient;\n+    this.signingServiceUrl = signingServiceUrl;\n+    this.timeout = timeout;\n+  }\n+\n+  public boolean upcheck() {\n+    try {\n+      final HttpRequest request =\n+          HttpRequest.newBuilder()\n+              .uri(signingServiceUrl.toURI().resolve(UPCHECK_ENDPOINT))\n+              .timeout(timeout)\n+              .GET()\n+              .build();\n+      final HttpResponse<Void> response =\n+          httpClient.send(request, HttpResponse.BodyHandlers.discarding());\n+      return response.statusCode() == 200;\n+    } catch (final URISyntaxException | IOException | InterruptedException e) {\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNjY0Ng=="}, "originalCommit": {"oid": "39d1b8fd0332a0143d7940986ad6e1c3a90e218c"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2919, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}