{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NDY3MTYz", "number": 2318, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzozMzozN1rOELr-0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzozMzozN1rOELr-0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjkwMzg2OnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/connection/ReputationManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzozMzozN1rOGtXctA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTo1MDozNFrOGtoOqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyMzI4NA==", "bodyText": "Isn't making a peer totally unsuitable for connection if they disconnect one time a bit harsh?", "url": "https://github.com/ConsenSys/teku/pull/2318#discussion_r450223284", "createdAt": "2020-07-06T13:33:37Z", "author": {"login": "cemozerr"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/connection/ReputationManager.java", "diffHunk": "@@ -53,28 +58,55 @@ public void reportInitiatedConnectionSuccessful(final PeerAddress peerAddress) {\n     getOrCreateReputation(peerAddress).reportInitiatedConnectionSuccessful();\n   }\n \n+  public void reportDisconnection(\n+      final PeerAddress peerAddress,\n+      final Optional<DisconnectReason> reason,\n+      final boolean locallyInitiated) {\n+    getOrCreateReputation(peerAddress)\n+        .reportDisconnection(timeProvider.getTimeInSeconds(), reason, locallyInitiated);\n+  }\n+\n   private Reputation getOrCreateReputation(final PeerAddress peerAddress) {\n-    return peerReputations.get(peerAddress, key -> new Reputation());\n+    return peerReputations.get(peerAddress.getId(), key -> new Reputation());\n   }\n \n   private static class Reputation {\n-    private static final UnsignedLong FAILURE_BAN_PERIOD = UnsignedLong.valueOf(60); // Seconds\n     private volatile Optional<UnsignedLong> lastInitiationFailure = Optional.empty();\n+    private volatile boolean unsuitable = false;\n \n     public void reportInitiatedConnectionFailed(final UnsignedLong failureTime) {\n       lastInitiationFailure = Optional.of(failureTime);\n     }\n \n     public boolean shouldInitiateConnection(final UnsignedLong currentTime) {\n-      return lastInitiationFailure\n-          .map(\n-              lastFailureTime ->\n-                  lastFailureTime.plus(FAILURE_BAN_PERIOD).compareTo(currentTime) < 0)\n-          .orElse(true);\n+      return !unsuitable\n+          && lastInitiationFailure\n+              .map(\n+                  lastFailureTime ->\n+                      lastFailureTime.plus(FAILURE_BAN_PERIOD).compareTo(currentTime) < 0)\n+              .orElse(true);\n     }\n \n     public void reportInitiatedConnectionSuccessful() {\n       lastInitiationFailure = Optional.empty();\n     }\n+\n+    public void reportDisconnection(\n+        final UnsignedLong disconnectTime,\n+        final Optional<DisconnectReason> reason,\n+        final boolean locallyInitiated) {\n+      if (isLocallyConsideredUnsuitable(reason, locallyInitiated)\n+          || reason.map(DisconnectReason::isPermanent).orElse(false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7efa84cf436b071f28c962169e69528ac71ead2f"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyNjc5Nw==", "bodyText": "Now I understand that we only disconnect permanently if we're unable to verify their network, or if they're on an irrelevant network. Smart.", "url": "https://github.com/ConsenSys/teku/pull/2318#discussion_r450226797", "createdAt": "2020-07-06T13:39:27Z", "author": {"login": "cemozerr"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/connection/ReputationManager.java", "diffHunk": "@@ -53,28 +58,55 @@ public void reportInitiatedConnectionSuccessful(final PeerAddress peerAddress) {\n     getOrCreateReputation(peerAddress).reportInitiatedConnectionSuccessful();\n   }\n \n+  public void reportDisconnection(\n+      final PeerAddress peerAddress,\n+      final Optional<DisconnectReason> reason,\n+      final boolean locallyInitiated) {\n+    getOrCreateReputation(peerAddress)\n+        .reportDisconnection(timeProvider.getTimeInSeconds(), reason, locallyInitiated);\n+  }\n+\n   private Reputation getOrCreateReputation(final PeerAddress peerAddress) {\n-    return peerReputations.get(peerAddress, key -> new Reputation());\n+    return peerReputations.get(peerAddress.getId(), key -> new Reputation());\n   }\n \n   private static class Reputation {\n-    private static final UnsignedLong FAILURE_BAN_PERIOD = UnsignedLong.valueOf(60); // Seconds\n     private volatile Optional<UnsignedLong> lastInitiationFailure = Optional.empty();\n+    private volatile boolean unsuitable = false;\n \n     public void reportInitiatedConnectionFailed(final UnsignedLong failureTime) {\n       lastInitiationFailure = Optional.of(failureTime);\n     }\n \n     public boolean shouldInitiateConnection(final UnsignedLong currentTime) {\n-      return lastInitiationFailure\n-          .map(\n-              lastFailureTime ->\n-                  lastFailureTime.plus(FAILURE_BAN_PERIOD).compareTo(currentTime) < 0)\n-          .orElse(true);\n+      return !unsuitable\n+          && lastInitiationFailure\n+              .map(\n+                  lastFailureTime ->\n+                      lastFailureTime.plus(FAILURE_BAN_PERIOD).compareTo(currentTime) < 0)\n+              .orElse(true);\n     }\n \n     public void reportInitiatedConnectionSuccessful() {\n       lastInitiationFailure = Optional.empty();\n     }\n+\n+    public void reportDisconnection(\n+        final UnsignedLong disconnectTime,\n+        final Optional<DisconnectReason> reason,\n+        final boolean locallyInitiated) {\n+      if (isLocallyConsideredUnsuitable(reason, locallyInitiated)\n+          || reason.map(DisconnectReason::isPermanent).orElse(false)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyMzI4NA=="}, "originalCommit": {"oid": "7efa84cf436b071f28c962169e69528ac71ead2f"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5ODIxNg==", "bodyText": "Yep and it only means that we don't connect to them - they can still connect to us if they want.", "url": "https://github.com/ConsenSys/teku/pull/2318#discussion_r450498216", "createdAt": "2020-07-06T21:50:34Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/connection/ReputationManager.java", "diffHunk": "@@ -53,28 +58,55 @@ public void reportInitiatedConnectionSuccessful(final PeerAddress peerAddress) {\n     getOrCreateReputation(peerAddress).reportInitiatedConnectionSuccessful();\n   }\n \n+  public void reportDisconnection(\n+      final PeerAddress peerAddress,\n+      final Optional<DisconnectReason> reason,\n+      final boolean locallyInitiated) {\n+    getOrCreateReputation(peerAddress)\n+        .reportDisconnection(timeProvider.getTimeInSeconds(), reason, locallyInitiated);\n+  }\n+\n   private Reputation getOrCreateReputation(final PeerAddress peerAddress) {\n-    return peerReputations.get(peerAddress, key -> new Reputation());\n+    return peerReputations.get(peerAddress.getId(), key -> new Reputation());\n   }\n \n   private static class Reputation {\n-    private static final UnsignedLong FAILURE_BAN_PERIOD = UnsignedLong.valueOf(60); // Seconds\n     private volatile Optional<UnsignedLong> lastInitiationFailure = Optional.empty();\n+    private volatile boolean unsuitable = false;\n \n     public void reportInitiatedConnectionFailed(final UnsignedLong failureTime) {\n       lastInitiationFailure = Optional.of(failureTime);\n     }\n \n     public boolean shouldInitiateConnection(final UnsignedLong currentTime) {\n-      return lastInitiationFailure\n-          .map(\n-              lastFailureTime ->\n-                  lastFailureTime.plus(FAILURE_BAN_PERIOD).compareTo(currentTime) < 0)\n-          .orElse(true);\n+      return !unsuitable\n+          && lastInitiationFailure\n+              .map(\n+                  lastFailureTime ->\n+                      lastFailureTime.plus(FAILURE_BAN_PERIOD).compareTo(currentTime) < 0)\n+              .orElse(true);\n     }\n \n     public void reportInitiatedConnectionSuccessful() {\n       lastInitiationFailure = Optional.empty();\n     }\n+\n+    public void reportDisconnection(\n+        final UnsignedLong disconnectTime,\n+        final Optional<DisconnectReason> reason,\n+        final boolean locallyInitiated) {\n+      if (isLocallyConsideredUnsuitable(reason, locallyInitiated)\n+          || reason.map(DisconnectReason::isPermanent).orElse(false)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyMzI4NA=="}, "originalCommit": {"oid": "7efa84cf436b071f28c962169e69528ac71ead2f"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3516, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}