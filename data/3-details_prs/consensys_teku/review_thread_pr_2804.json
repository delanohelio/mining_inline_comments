{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NjkzMjEw", "number": 2804, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTozNTo0NVrOEj-Q3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTozNTo0NVrOEj-Q3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTU1NzQxOnYy", "diffSide": "RIGHT", "path": "sync/src/main/java/tech/pegasys/teku/sync/multipeer/BatchImporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTozNTo0NVrOHSonLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMToxODowMFrOHTEkig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwMTgwNw==", "bodyText": "Why do we need runAsync here if the importBlock is async itself?", "url": "https://github.com/ConsenSys/teku/pull/2804#discussion_r489301807", "createdAt": "2020-09-16T09:35:45Z", "author": {"login": "Nashatyrev"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/multipeer/BatchImporter.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.sync.multipeer;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import tech.pegasys.teku.core.results.BlockImportResult;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.infrastructure.async.AsyncRunner;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.statetransition.blockimport.BlockImporter;\n+import tech.pegasys.teku.sync.multipeer.batches.Batch;\n+\n+public class BatchImporter {\n+\n+  private final BlockImporter blockImporter;\n+  private final AsyncRunner asyncRunner;\n+\n+  public BatchImporter(final BlockImporter blockImporter, final AsyncRunner asyncRunner) {\n+    this.blockImporter = blockImporter;\n+    this.asyncRunner = asyncRunner;\n+  }\n+\n+  /**\n+   * Import the blocks in the specified batch.\n+   *\n+   * <p>Guaranteed to return immediately and perform the import on worker threads.\n+   *\n+   * @param batch the batch to import\n+   * @return a future reporting the result of the import\n+   */\n+  public SafeFuture<BatchImportResult> importBatch(final Batch batch) {\n+    // Copy the blocks as we're going to use them from off the event thread.\n+    final List<SignedBeaconBlock> blocks = new ArrayList<>(batch.getBlocks());\n+    checkState(!blocks.isEmpty(), \"Batch has no blocks to import\");\n+    return asyncRunner.runAsync(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0becd6ed7bbb48548e0f4da7f88ee05e5e8fe205"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1OTg4Mg==", "bodyText": "importBlock may be async but isn't guaranteed to be. If the checkpoints and state required are already available in the in-memory store, the block import will happen synchronously.", "url": "https://github.com/ConsenSys/teku/pull/2804#discussion_r489759882", "createdAt": "2020-09-16T21:18:00Z", "author": {"login": "ajsutton"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/multipeer/BatchImporter.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.sync.multipeer;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import tech.pegasys.teku.core.results.BlockImportResult;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.infrastructure.async.AsyncRunner;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.statetransition.blockimport.BlockImporter;\n+import tech.pegasys.teku.sync.multipeer.batches.Batch;\n+\n+public class BatchImporter {\n+\n+  private final BlockImporter blockImporter;\n+  private final AsyncRunner asyncRunner;\n+\n+  public BatchImporter(final BlockImporter blockImporter, final AsyncRunner asyncRunner) {\n+    this.blockImporter = blockImporter;\n+    this.asyncRunner = asyncRunner;\n+  }\n+\n+  /**\n+   * Import the blocks in the specified batch.\n+   *\n+   * <p>Guaranteed to return immediately and perform the import on worker threads.\n+   *\n+   * @param batch the batch to import\n+   * @return a future reporting the result of the import\n+   */\n+  public SafeFuture<BatchImportResult> importBatch(final Batch batch) {\n+    // Copy the blocks as we're going to use them from off the event thread.\n+    final List<SignedBeaconBlock> blocks = new ArrayList<>(batch.getBlocks());\n+    checkState(!blocks.isEmpty(), \"Batch has no blocks to import\");\n+    return asyncRunner.runAsync(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMwMTgwNw=="}, "originalCommit": {"oid": "0becd6ed7bbb48548e0f4da7f88ee05e5e8fe205"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3269, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}