{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1OTc5Mjc0", "number": 1340, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjoyMzozNlrODm4KbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMDo0NjozNlrODm55AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDkyNjUzOnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjoyMzozNlrOF0jKTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzowODoxNFrOF0kG5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY0NjM1MA==", "bodyText": "what happens if it's == committeeCount? This msg doesn't quite match the if statement", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390646350", "createdAt": "2020-03-10T22:23:36Z", "author": {"login": "macfarla"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java", "diffHunk": "@@ -139,6 +146,36 @@ CombinedChainDataClient getCombinedChainDataClient() {\n         .exceptionally(err -> Optional.empty());\n   }\n \n+  public Optional<Attestation> getUnsignedAttestationAtSlot(\n+      UnsignedLong slot, Integer committeeIndex) {\n+    if (!isStoreAvailable()) {\n+      return Optional.empty();\n+    }\n+    if (isFinalized(slot)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Slot %s is finalized, no attestation will be created.\", slot.toString()));\n+    }\n+    Optional<BeaconBlock> block = chainStorageClient.getBlockBySlot(slot);\n+    if (block.isEmpty()) {\n+      return Optional.empty();\n+    }\n+\n+    tech.pegasys.artemis.datastructures.state.BeaconState state =\n+        chainStorageClient.getBestBlockRootState();\n+    int committeeCount = get_committee_count_at_slot(state, slot).intValue();\n+    if (committeeIndex < 0 || committeeIndex > committeeCount) {\n+      throw new IllegalArgumentException(\n+          \"Invalid committee index provided - expected between 0 and \" + (committeeCount - 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92cc9c0f113a57461dc171e1513d559139afa3c5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MTg2Mw==", "bodyText": "i'll fix this, but i'll also look at an upper boundary test, it looks like its not done if that check is wrong like that.", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390661863", "createdAt": "2020-03-10T23:08:14Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java", "diffHunk": "@@ -139,6 +146,36 @@ CombinedChainDataClient getCombinedChainDataClient() {\n         .exceptionally(err -> Optional.empty());\n   }\n \n+  public Optional<Attestation> getUnsignedAttestationAtSlot(\n+      UnsignedLong slot, Integer committeeIndex) {\n+    if (!isStoreAvailable()) {\n+      return Optional.empty();\n+    }\n+    if (isFinalized(slot)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Slot %s is finalized, no attestation will be created.\", slot.toString()));\n+    }\n+    Optional<BeaconBlock> block = chainStorageClient.getBlockBySlot(slot);\n+    if (block.isEmpty()) {\n+      return Optional.empty();\n+    }\n+\n+    tech.pegasys.artemis.datastructures.state.BeaconState state =\n+        chainStorageClient.getBestBlockRootState();\n+    int committeeCount = get_committee_count_at_slot(state, slot).intValue();\n+    if (committeeIndex < 0 || committeeIndex > committeeCount) {\n+      throw new IllegalArgumentException(\n+          \"Invalid committee index provided - expected between 0 and \" + (committeeCount - 1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY0NjM1MA=="}, "originalCommit": {"oid": "92cc9c0f113a57461dc171e1513d559139afa3c5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDk4Mjc3OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjo0NzoyNVrOF0jsYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjo0NzoyNVrOF0jsYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1NTA3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void shouldHaveAttestationReturned() throws Exception {\n          \n          \n            \n              void shouldReturnAttestation() throws Exception {", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390655072", "createdAt": "2020-03-10T22:47:25Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.validatorhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.Attestation;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class AttestationHandlerTest {\n+  @Mock private Context context;\n+  @Mock private ChainDataProvider provider;\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private AttestationHandler handler;\n+  private Attestation attestation = new Attestation(DataStructureUtil.randomAttestation(1111));\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new AttestationHandler(provider, jsonProvider);\n+  }\n+\n+  private void badRequestParamsTest(final Map<String, List<String>> params, String message)\n+      throws Exception {\n+    when(context.queryParamMap()).thenReturn(params);\n+\n+    handler.handle(context);\n+    verify(context).status(SC_BAD_REQUEST);\n+\n+    if (StringUtils.isNotEmpty(message)) {\n+      BadRequest badRequest = new BadRequest(message);\n+      verify(context).result(jsonProvider.objectToJSON(badRequest));\n+    }\n+  }\n+\n+  @Test\n+  void shouldRejectTooFewArguments() throws Exception {\n+    badRequestParamsTest(Map.of(), \"Please specify both slot and committee_index\");\n+  }\n+\n+  @Test\n+  void shouldRejectWithoutSlot() throws Exception {\n+    badRequestParamsTest(\n+        Map.of(\"foo\", List.of(), \"Foo2\", List.of()), \"'slot' cannot be null or empty.\");\n+  }\n+\n+  @Test\n+  void shouldRejectWithoutCommitteeIndex() throws Exception {\n+    badRequestParamsTest(\n+        Map.of(SLOT, List.of(\"1\"), \"Foo2\", List.of()),\n+        \"'committee_index' cannot be null or empty.\");\n+  }\n+\n+  @Test\n+  void shouldRejectNegativeCommitteeIndex() throws Exception {\n+    badRequestParamsTest(\n+        Map.of(SLOT, List.of(\"1\"), COMMITTEE_INDEX, List.of(\"-1\")),\n+        \"'committee_index' needs to be greater than or equal to 0.\");\n+  }\n+\n+  @Test\n+  void shouldReturnNoContentIfNotReady() throws Exception {\n+    Map<String, List<String>> params = Map.of(SLOT, List.of(\"1\"), COMMITTEE_INDEX, List.of(\"1\"));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(provider.isStoreAvailable()).thenReturn(false);\n+    handler.handle(context);\n+\n+    verify(provider).isStoreAvailable();\n+  }\n+\n+  @Test\n+  void shouldHaveAttestationReturned() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa94182eccbffa8bcbe7e80a9ffafad9fb47764"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDk4MzY3OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjo0Nzo0OVrOF0js6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjo1ODo0MlrOF0j7LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1NTIwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void shouldHaveNoAttestationReturnedIfNotFound() throws Exception {\n          \n          \n            \n              void shouldReturnNoAttestationIfNotFound() throws Exception {", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390655209", "createdAt": "2020-03-10T22:47:49Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.validatorhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.Attestation;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class AttestationHandlerTest {\n+  @Mock private Context context;\n+  @Mock private ChainDataProvider provider;\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private AttestationHandler handler;\n+  private Attestation attestation = new Attestation(DataStructureUtil.randomAttestation(1111));\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new AttestationHandler(provider, jsonProvider);\n+  }\n+\n+  private void badRequestParamsTest(final Map<String, List<String>> params, String message)\n+      throws Exception {\n+    when(context.queryParamMap()).thenReturn(params);\n+\n+    handler.handle(context);\n+    verify(context).status(SC_BAD_REQUEST);\n+\n+    if (StringUtils.isNotEmpty(message)) {\n+      BadRequest badRequest = new BadRequest(message);\n+      verify(context).result(jsonProvider.objectToJSON(badRequest));\n+    }\n+  }\n+\n+  @Test\n+  void shouldRejectTooFewArguments() throws Exception {\n+    badRequestParamsTest(Map.of(), \"Please specify both slot and committee_index\");\n+  }\n+\n+  @Test\n+  void shouldRejectWithoutSlot() throws Exception {\n+    badRequestParamsTest(\n+        Map.of(\"foo\", List.of(), \"Foo2\", List.of()), \"'slot' cannot be null or empty.\");\n+  }\n+\n+  @Test\n+  void shouldRejectWithoutCommitteeIndex() throws Exception {\n+    badRequestParamsTest(\n+        Map.of(SLOT, List.of(\"1\"), \"Foo2\", List.of()),\n+        \"'committee_index' cannot be null or empty.\");\n+  }\n+\n+  @Test\n+  void shouldRejectNegativeCommitteeIndex() throws Exception {\n+    badRequestParamsTest(\n+        Map.of(SLOT, List.of(\"1\"), COMMITTEE_INDEX, List.of(\"-1\")),\n+        \"'committee_index' needs to be greater than or equal to 0.\");\n+  }\n+\n+  @Test\n+  void shouldReturnNoContentIfNotReady() throws Exception {\n+    Map<String, List<String>> params = Map.of(SLOT, List.of(\"1\"), COMMITTEE_INDEX, List.of(\"1\"));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(provider.isStoreAvailable()).thenReturn(false);\n+    handler.handle(context);\n+\n+    verify(provider).isStoreAvailable();\n+  }\n+\n+  @Test\n+  void shouldHaveAttestationReturned() throws Exception {\n+    Map<String, List<String>> params = Map.of(SLOT, List.of(\"1\"), COMMITTEE_INDEX, List.of(\"1\"));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(provider.isStoreAvailable()).thenReturn(true);\n+    when(provider.getUnsignedAttestationAtSlot(UnsignedLong.ONE, 1))\n+        .thenReturn(Optional.of(attestation));\n+    handler.handle(context);\n+\n+    verify(provider).isStoreAvailable();\n+    verify(context).result(jsonProvider.objectToJSON(attestation));\n+  }\n+\n+  @Test\n+  void shouldHaveNoAttestationReturnedIfNotFound() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa94182eccbffa8bcbe7e80a9ffafad9fb47764"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1ODg2MA==", "bodyText": "or shouldReturnNotFoundIfNoAttestationFound ?", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390658860", "createdAt": "2020-03-10T22:58:42Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.validatorhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.Attestation;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class AttestationHandlerTest {\n+  @Mock private Context context;\n+  @Mock private ChainDataProvider provider;\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private AttestationHandler handler;\n+  private Attestation attestation = new Attestation(DataStructureUtil.randomAttestation(1111));\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new AttestationHandler(provider, jsonProvider);\n+  }\n+\n+  private void badRequestParamsTest(final Map<String, List<String>> params, String message)\n+      throws Exception {\n+    when(context.queryParamMap()).thenReturn(params);\n+\n+    handler.handle(context);\n+    verify(context).status(SC_BAD_REQUEST);\n+\n+    if (StringUtils.isNotEmpty(message)) {\n+      BadRequest badRequest = new BadRequest(message);\n+      verify(context).result(jsonProvider.objectToJSON(badRequest));\n+    }\n+  }\n+\n+  @Test\n+  void shouldRejectTooFewArguments() throws Exception {\n+    badRequestParamsTest(Map.of(), \"Please specify both slot and committee_index\");\n+  }\n+\n+  @Test\n+  void shouldRejectWithoutSlot() throws Exception {\n+    badRequestParamsTest(\n+        Map.of(\"foo\", List.of(), \"Foo2\", List.of()), \"'slot' cannot be null or empty.\");\n+  }\n+\n+  @Test\n+  void shouldRejectWithoutCommitteeIndex() throws Exception {\n+    badRequestParamsTest(\n+        Map.of(SLOT, List.of(\"1\"), \"Foo2\", List.of()),\n+        \"'committee_index' cannot be null or empty.\");\n+  }\n+\n+  @Test\n+  void shouldRejectNegativeCommitteeIndex() throws Exception {\n+    badRequestParamsTest(\n+        Map.of(SLOT, List.of(\"1\"), COMMITTEE_INDEX, List.of(\"-1\")),\n+        \"'committee_index' needs to be greater than or equal to 0.\");\n+  }\n+\n+  @Test\n+  void shouldReturnNoContentIfNotReady() throws Exception {\n+    Map<String, List<String>> params = Map.of(SLOT, List.of(\"1\"), COMMITTEE_INDEX, List.of(\"1\"));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(provider.isStoreAvailable()).thenReturn(false);\n+    handler.handle(context);\n+\n+    verify(provider).isStoreAvailable();\n+  }\n+\n+  @Test\n+  void shouldHaveAttestationReturned() throws Exception {\n+    Map<String, List<String>> params = Map.of(SLOT, List.of(\"1\"), COMMITTEE_INDEX, List.of(\"1\"));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(provider.isStoreAvailable()).thenReturn(true);\n+    when(provider.getUnsignedAttestationAtSlot(UnsignedLong.ONE, 1))\n+        .thenReturn(Optional.of(attestation));\n+    handler.handle(context);\n+\n+    verify(provider).isStoreAvailable();\n+    verify(context).result(jsonProvider.objectToJSON(attestation));\n+  }\n+\n+  @Test\n+  void shouldHaveNoAttestationReturnedIfNotFound() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1NTIwOQ=="}, "originalCommit": {"oid": "dfa94182eccbffa8bcbe7e80a9ffafad9fb47764"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDk5MTg1OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjo1MTozOVrOF0jx4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjo1ODowMVrOF0j6Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1NjQ4Mw==", "bodyText": "this ain't right", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390656483", "createdAt": "2020-03-10T22:51:39Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandler.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.validatorhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_NOT_FOUND;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+import static tech.pegasys.artemis.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsInt;\n+import static tech.pegasys.artemis.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsUnsignedLong;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.Attestation;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+public class AttestationHandler implements Handler {\n+  public static final String ROUTE = \"/validator/attestation\";\n+\n+  private final ChainDataProvider provider;\n+  private final JsonProvider jsonProvider;\n+\n+  public AttestationHandler(final ChainDataProvider provider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get an unsigned attestation of a slot from the current state.\",\n+      tags = {TAG_VALIDATOR},\n+      queryParams = {\n+        @OpenApiParam(\n+            name = SLOT,\n+            description = \"The slot to create the attestation for (uint64)\",\n+            required = true),\n+        @OpenApiParam(\n+            name = COMMITTEE_INDEX,\n+            description = \"The index of the committee making the attestation.\",\n+            required = true)\n+      },\n+      description =\n+          \"Request that the node return the beacon chain block that matches the provided criteria.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa94182eccbffa8bcbe7e80a9ffafad9fb47764"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1ODYzNA==", "bodyText": "this is copy/paste and not update :/", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390658634", "createdAt": "2020-03-10T22:58:01Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandler.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.validatorhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_NOT_FOUND;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+import static tech.pegasys.artemis.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsInt;\n+import static tech.pegasys.artemis.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsUnsignedLong;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.Attestation;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+public class AttestationHandler implements Handler {\n+  public static final String ROUTE = \"/validator/attestation\";\n+\n+  private final ChainDataProvider provider;\n+  private final JsonProvider jsonProvider;\n+\n+  public AttestationHandler(final ChainDataProvider provider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get an unsigned attestation of a slot from the current state.\",\n+      tags = {TAG_VALIDATOR},\n+      queryParams = {\n+        @OpenApiParam(\n+            name = SLOT,\n+            description = \"The slot to create the attestation for (uint64)\",\n+            required = true),\n+        @OpenApiParam(\n+            name = COMMITTEE_INDEX,\n+            description = \"The index of the committee making the attestation.\",\n+            required = true)\n+      },\n+      description =\n+          \"Request that the node return the beacon chain block that matches the provided criteria.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1NjQ4Mw=="}, "originalCommit": {"oid": "dfa94182eccbffa8bcbe7e80a9ffafad9fb47764"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDk5MzM5OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjo1MjoyMlrOF0jyyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjo1MjoyMlrOF0jyyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1NjcxNQ==", "bodyText": "slot not found?", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390656715", "createdAt": "2020-03-10T22:52:22Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandler.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.validatorhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_NOT_FOUND;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+import static tech.pegasys.artemis.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsInt;\n+import static tech.pegasys.artemis.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsUnsignedLong;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.Attestation;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+public class AttestationHandler implements Handler {\n+  public static final String ROUTE = \"/validator/attestation\";\n+\n+  private final ChainDataProvider provider;\n+  private final JsonProvider jsonProvider;\n+\n+  public AttestationHandler(final ChainDataProvider provider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get an unsigned attestation of a slot from the current state.\",\n+      tags = {TAG_VALIDATOR},\n+      queryParams = {\n+        @OpenApiParam(\n+            name = SLOT,\n+            description = \"The slot to create the attestation for (uint64)\",\n+            required = true),\n+        @OpenApiParam(\n+            name = COMMITTEE_INDEX,\n+            description = \"The index of the committee making the attestation.\",\n+            required = true)\n+      },\n+      description =\n+          \"Request that the node return the beacon chain block that matches the provided criteria.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = Attestation.class),\n+            description = \"Returns an attestation with a default signature.\"),\n+        @OpenApiResponse(status = RES_BAD_REQUEST, description = \"Invalid parameter supplied\"),\n+        @OpenApiResponse(status = RES_NOT_FOUND, description = \"Specified block not found\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa94182eccbffa8bcbe7e80a9ffafad9fb47764"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTAwMTgxOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMjo1NjoxMVrOF0j37Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoxMDowMFrOF0kJIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1ODAyOQ==", "bodyText": "convention but we normally put non-test util methods at the bottom after all the tests", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390658029", "createdAt": "2020-03-10T22:56:11Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.validatorhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.Attestation;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class AttestationHandlerTest {\n+  @Mock private Context context;\n+  @Mock private ChainDataProvider provider;\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private AttestationHandler handler;\n+  private Attestation attestation = new Attestation(DataStructureUtil.randomAttestation(1111));\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new AttestationHandler(provider, jsonProvider);\n+  }\n+\n+  private void badRequestParamsTest(final Map<String, List<String>> params, String message)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfa94182eccbffa8bcbe7e80a9ffafad9fb47764"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MjQzMg==", "bodyText": "this is the actual test method all the following tests use... i can move it if you'd prefer...", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390662432", "createdAt": "2020-03-10T23:10:00Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.validatorhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.Attestation;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class AttestationHandlerTest {\n+  @Mock private Context context;\n+  @Mock private ChainDataProvider provider;\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private AttestationHandler handler;\n+  private Attestation attestation = new Attestation(DataStructureUtil.randomAttestation(1111));\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new AttestationHandler(provider, jsonProvider);\n+  }\n+\n+  private void badRequestParamsTest(final Map<String, List<String>> params, String message)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1ODAyOQ=="}, "originalCommit": {"oid": "dfa94182eccbffa8bcbe7e80a9ffafad9fb47764"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTA2MzQzOnYy", "diffSide": "RIGHT", "path": "data/provider/src/test/java/tech/pegasys/artemis/api/ChainDataProviderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMzoyNDoxM1rOF0kdMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMDozMjo1M1rOF0ln-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NzU3MQ==", "bodyText": "these 3 tests are almost the same - wonder if we can refactor to make the differences clear?", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390667571", "createdAt": "2020-03-10T23:24:13Z", "author": {"login": "macfarla"}, "path": "data/provider/src/test/java/tech/pegasys/artemis/api/ChainDataProviderTest.java", "diffHunk": "@@ -315,4 +318,78 @@ void getStateByBlockRoot_shouldReturnBeaconStateWhenFound()\n     BeaconState result = future.get().get();\n     assertThat(result).usingRecursiveComparison().isEqualTo(beaconState);\n   }\n+\n+  @Test\n+  void getUnsignedAttestationAtSlot_shouldReturnEmptyIfStoreNotFound() {\n+    ChainDataProvider provider =\n+        new ChainDataProvider(chainStorageClient, mockCombinedChainDataClient);\n+    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(false);\n+    Optional<Attestation> optional = provider.getUnsignedAttestationAtSlot(ZERO, 0);\n+    verify(mockCombinedChainDataClient).isStoreAvailable();\n+    assertTrue(optional.isEmpty());\n+  }\n+\n+  @Test\n+  void getUnsignedAttestationAtSlot_shouldReturnEmptyIfSlotIsFinalized() {\n+    ChainDataProvider provider =\n+        new ChainDataProvider(chainStorageClient, mockCombinedChainDataClient);\n+    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(true);\n+    when(mockCombinedChainDataClient.isFinalized(ZERO)).thenReturn(true);\n+    assertThrows(\n+        IllegalArgumentException.class, () -> provider.getUnsignedAttestationAtSlot(ZERO, 0));\n+    verify(mockCombinedChainDataClient).isStoreAvailable();\n+    verify(mockCombinedChainDataClient).isFinalized(ZERO);\n+  }\n+\n+  @Test\n+  void getUnsignedAttestationAtSlot_shouldReturnEmptyIfCommitteeBelowRange() {\n+    ChainDataProvider provider =\n+        new ChainDataProvider(chainStorageClient, mockCombinedChainDataClient);\n+    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(true);\n+    when(mockCombinedChainDataClient.isFinalized(ZERO)).thenReturn(false);\n+    assertThrows(\n+        IllegalArgumentException.class, () -> provider.getUnsignedAttestationAtSlot(ZERO, -1));\n+    verify(mockCombinedChainDataClient).isStoreAvailable();\n+    verify(mockCombinedChainDataClient).isFinalized(ZERO);\n+  }\n+\n+  @Test\n+  void getUnsignedAttestationAtSlot_shouldReturnEmptyIfCommitteeAboveRange() {\n+    ChainDataProvider provider =\n+        new ChainDataProvider(chainStorageClient, mockCombinedChainDataClient);\n+    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(true);\n+    when(mockCombinedChainDataClient.isFinalized(ZERO)).thenReturn(false);\n+    assertThrows(\n+        IllegalArgumentException.class, () -> provider.getUnsignedAttestationAtSlot(ZERO, 1));\n+    verify(mockCombinedChainDataClient).isStoreAvailable();\n+    verify(mockCombinedChainDataClient).isFinalized(ZERO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d0bc02169c6b13177cf5d1256157b90bd624667"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY4NjcxMw==", "bodyText": "refactored.", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390686713", "createdAt": "2020-03-11T00:32:53Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/test/java/tech/pegasys/artemis/api/ChainDataProviderTest.java", "diffHunk": "@@ -315,4 +318,78 @@ void getStateByBlockRoot_shouldReturnBeaconStateWhenFound()\n     BeaconState result = future.get().get();\n     assertThat(result).usingRecursiveComparison().isEqualTo(beaconState);\n   }\n+\n+  @Test\n+  void getUnsignedAttestationAtSlot_shouldReturnEmptyIfStoreNotFound() {\n+    ChainDataProvider provider =\n+        new ChainDataProvider(chainStorageClient, mockCombinedChainDataClient);\n+    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(false);\n+    Optional<Attestation> optional = provider.getUnsignedAttestationAtSlot(ZERO, 0);\n+    verify(mockCombinedChainDataClient).isStoreAvailable();\n+    assertTrue(optional.isEmpty());\n+  }\n+\n+  @Test\n+  void getUnsignedAttestationAtSlot_shouldReturnEmptyIfSlotIsFinalized() {\n+    ChainDataProvider provider =\n+        new ChainDataProvider(chainStorageClient, mockCombinedChainDataClient);\n+    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(true);\n+    when(mockCombinedChainDataClient.isFinalized(ZERO)).thenReturn(true);\n+    assertThrows(\n+        IllegalArgumentException.class, () -> provider.getUnsignedAttestationAtSlot(ZERO, 0));\n+    verify(mockCombinedChainDataClient).isStoreAvailable();\n+    verify(mockCombinedChainDataClient).isFinalized(ZERO);\n+  }\n+\n+  @Test\n+  void getUnsignedAttestationAtSlot_shouldReturnEmptyIfCommitteeBelowRange() {\n+    ChainDataProvider provider =\n+        new ChainDataProvider(chainStorageClient, mockCombinedChainDataClient);\n+    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(true);\n+    when(mockCombinedChainDataClient.isFinalized(ZERO)).thenReturn(false);\n+    assertThrows(\n+        IllegalArgumentException.class, () -> provider.getUnsignedAttestationAtSlot(ZERO, -1));\n+    verify(mockCombinedChainDataClient).isStoreAvailable();\n+    verify(mockCombinedChainDataClient).isFinalized(ZERO);\n+  }\n+\n+  @Test\n+  void getUnsignedAttestationAtSlot_shouldReturnEmptyIfCommitteeAboveRange() {\n+    ChainDataProvider provider =\n+        new ChainDataProvider(chainStorageClient, mockCombinedChainDataClient);\n+    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(true);\n+    when(mockCombinedChainDataClient.isFinalized(ZERO)).thenReturn(false);\n+    assertThrows(\n+        IllegalArgumentException.class, () -> provider.getUnsignedAttestationAtSlot(ZERO, 1));\n+    verify(mockCombinedChainDataClient).isStoreAvailable();\n+    verify(mockCombinedChainDataClient).isFinalized(ZERO);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NzU3MQ=="}, "originalCommit": {"oid": "0d0bc02169c6b13177cf5d1256157b90bd624667"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTIwOTYxOnYy", "diffSide": "RIGHT", "path": "data/provider/src/test/java/tech/pegasys/artemis/api/ChainDataProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMDo0NjozNlrOF0l1PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMDo0NjozNlrOF0l1PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5MDEwOQ==", "bodyText": "nice", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390690109", "createdAt": "2020-03-11T00:46:36Z", "author": {"login": "macfarla"}, "path": "data/provider/src/test/java/tech/pegasys/artemis/api/ChainDataProviderTest.java", "diffHunk": "@@ -315,4 +318,70 @@ void getStateByBlockRoot_shouldReturnBeaconStateWhenFound()\n     BeaconState result = future.get().get();\n     assertThat(result).usingRecursiveComparison().isEqualTo(beaconState);\n   }\n+\n+  @Test\n+  void getUnsignedAttestationAtSlot_shouldReturnEmptyIfStoreNotFound() {\n+    ChainDataProvider provider =\n+        new ChainDataProvider(chainStorageClient, mockCombinedChainDataClient);\n+    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(false);\n+    Optional<Attestation> optional = provider.getUnsignedAttestationAtSlot(ZERO, 0);\n+    verify(mockCombinedChainDataClient).isStoreAvailable();\n+    assertTrue(optional.isEmpty());\n+  }\n+\n+  @Test\n+  void getUnsignedAttestationAtSlot_shouldReturnEmptyIfSlotIsFinalized() {\n+    getUnsignedAttestationAtSlot_throwsIllegalArgumentException(0, true);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "465f36de1bed5ad723484f0cff5a3d5636b493d6"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2527, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}