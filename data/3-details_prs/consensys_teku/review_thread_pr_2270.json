{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMTI2NzQ5", "number": 2270, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0OTowNFrOEKRXQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0NzoxN1rOEKo83w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjA1Njk2OnYy", "diffSide": "RIGHT", "path": "storage/src/test/java/tech/pegasys/teku/storage/server/ProtoArrayStorageTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0OTowNFrOGrN6Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTo1MTo1MFrOGrPxLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2OTg4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final SignedBlockAndState genesis = chainBuilder.generateGenesis();\n          \n          \n            \n                storageSystem.recentChainData().initializeFromGenesis(genesis.getState());\n          \n          \n            \n                storageSystem.chainUpdater().initializeGenesis();", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447969882", "createdAt": "2020-06-30T20:49:04Z", "author": {"login": "mbaxter"}, "path": "storage/src/test/java/tech/pegasys/teku/storage/server/ProtoArrayStorageTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyGenerator;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.ChainBuilder;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoNode;\n+import tech.pegasys.teku.storage.storageSystem.InMemoryStorageSystem;\n+import tech.pegasys.teku.storage.storageSystem.StorageSystem;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.config.StateStorageMode;\n+\n+public class ProtoArrayStorageTest {\n+  protected static final List<BLSKeyPair> VALIDATOR_KEYS = BLSKeyGenerator.generateKeyPairs(3);\n+  private ProtoArrayStorage protoArrayStorage;\n+\n+  protected final ChainBuilder chainBuilder = ChainBuilder.create(VALIDATOR_KEYS);\n+\n+  private final StorageSystem storageSystem =\n+      InMemoryStorageSystem.createEmptyV4StorageSystem(StateStorageMode.ARCHIVE, 1);\n+\n+  @BeforeEach\n+  public void beforeEach() {\n+    // Initialize db\n+    final SignedBlockAndState genesis = chainBuilder.generateGenesis();\n+    storageSystem.recentChainData().initializeFromGenesis(genesis.getState());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDMwMA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000300", "createdAt": "2020-06-30T21:51:50Z", "author": {"login": "cemozerr"}, "path": "storage/src/test/java/tech/pegasys/teku/storage/server/ProtoArrayStorageTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyGenerator;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.ChainBuilder;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoNode;\n+import tech.pegasys.teku.storage.storageSystem.InMemoryStorageSystem;\n+import tech.pegasys.teku.storage.storageSystem.StorageSystem;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.config.StateStorageMode;\n+\n+public class ProtoArrayStorageTest {\n+  protected static final List<BLSKeyPair> VALIDATOR_KEYS = BLSKeyGenerator.generateKeyPairs(3);\n+  private ProtoArrayStorage protoArrayStorage;\n+\n+  protected final ChainBuilder chainBuilder = ChainBuilder.create(VALIDATOR_KEYS);\n+\n+  private final StorageSystem storageSystem =\n+      InMemoryStorageSystem.createEmptyV4StorageSystem(StateStorageMode.ARCHIVE, 1);\n+\n+  @BeforeEach\n+  public void beforeEach() {\n+    // Initialize db\n+    final SignedBlockAndState genesis = chainBuilder.generateGenesis();\n+    storageSystem.recentChainData().initializeFromGenesis(genesis.getState());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2OTg4Mg=="}, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjA4MjkzOnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/serialization/ProtoArraySerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1Njo0MlrOGrOKKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTo1MDo1MFrOGrPviQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3MzkyOA==", "bodyText": "final", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447973928", "createdAt": "2020-06-30T20:56:42Z", "author": {"login": "rolfyone"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/serialization/ProtoArraySerializer.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server.rocksdb.serialization;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.ssz.SSZ;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoNode;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySerializer implements RocksDbSerializer<ProtoArray> {\n+  @Override\n+  public ProtoArray deserialize(final byte[] data) {\n+    return SSZ.decode(\n+        Bytes.of(data),\n+        reader -> {\n+          final UnsignedLong justifiedEpoch = UnsignedLong.fromLongBits(reader.readUInt64());\n+          final UnsignedLong finalizedEpoch = UnsignedLong.fromLongBits(reader.readUInt64());\n+          final List<BlockInformation> blockInformationList =\n+              reader.readBytesList().stream().map(BlockInformation::fromBytes).collect(toList());\n+          ProtoArray protoArray =\n+              new ProtoArray(\n+                  Constants.PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD,\n+                  justifiedEpoch,\n+                  finalizedEpoch,\n+                  new ArrayList<>(),\n+                  new HashMap<>());\n+          blockInformationList.forEach(\n+              blockInformation ->\n+                  protoArray.onBlock(\n+                      blockInformation.blockSlot,\n+                      blockInformation.blockRoot,\n+                      blockInformation.parentRoot,\n+                      blockInformation.stateRoot,\n+                      blockInformation.justifiedEpoch,\n+                      blockInformation.finalizedEpoch));\n+          return protoArray;\n+        });\n+  }\n+\n+  @Override\n+  public byte[] serialize(final ProtoArray protoArray) {\n+    Bytes bytes =\n+        SSZ.encode(\n+            writer -> {\n+              writer.writeUInt64(protoArray.getJustifiedEpoch().longValue());\n+              writer.writeUInt64(protoArray.getFinalizedEpoch().longValue());\n+              writer.writeBytesList(\n+                  protoArray.getNodes().stream().map(BlockInformation::toBytes).collect(toList()));\n+            });\n+    return bytes.toArrayUnsafe();\n+  }\n+\n+  private static class BlockInformation {\n+    private final UnsignedLong blockSlot;\n+    private final Bytes32 blockRoot;\n+    private final Bytes32 parentRoot;\n+    private final Bytes32 stateRoot;\n+    private final UnsignedLong justifiedEpoch;\n+    private final UnsignedLong finalizedEpoch;\n+\n+    private BlockInformation(\n+        UnsignedLong blockSlot,\n+        Bytes32 blockRoot,\n+        Bytes32 parentRoot,\n+        Bytes32 stateRoot,\n+        UnsignedLong justifiedEpoch,\n+        UnsignedLong finalizedEpoch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5OTg4MQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447999881", "createdAt": "2020-06-30T21:50:50Z", "author": {"login": "cemozerr"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/serialization/ProtoArraySerializer.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server.rocksdb.serialization;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.ssz.SSZ;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoNode;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySerializer implements RocksDbSerializer<ProtoArray> {\n+  @Override\n+  public ProtoArray deserialize(final byte[] data) {\n+    return SSZ.decode(\n+        Bytes.of(data),\n+        reader -> {\n+          final UnsignedLong justifiedEpoch = UnsignedLong.fromLongBits(reader.readUInt64());\n+          final UnsignedLong finalizedEpoch = UnsignedLong.fromLongBits(reader.readUInt64());\n+          final List<BlockInformation> blockInformationList =\n+              reader.readBytesList().stream().map(BlockInformation::fromBytes).collect(toList());\n+          ProtoArray protoArray =\n+              new ProtoArray(\n+                  Constants.PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD,\n+                  justifiedEpoch,\n+                  finalizedEpoch,\n+                  new ArrayList<>(),\n+                  new HashMap<>());\n+          blockInformationList.forEach(\n+              blockInformation ->\n+                  protoArray.onBlock(\n+                      blockInformation.blockSlot,\n+                      blockInformation.blockRoot,\n+                      blockInformation.parentRoot,\n+                      blockInformation.stateRoot,\n+                      blockInformation.justifiedEpoch,\n+                      blockInformation.finalizedEpoch));\n+          return protoArray;\n+        });\n+  }\n+\n+  @Override\n+  public byte[] serialize(final ProtoArray protoArray) {\n+    Bytes bytes =\n+        SSZ.encode(\n+            writer -> {\n+              writer.writeUInt64(protoArray.getJustifiedEpoch().longValue());\n+              writer.writeUInt64(protoArray.getFinalizedEpoch().longValue());\n+              writer.writeBytesList(\n+                  protoArray.getNodes().stream().map(BlockInformation::toBytes).collect(toList()));\n+            });\n+    return bytes.toArrayUnsafe();\n+  }\n+\n+  private static class BlockInformation {\n+    private final UnsignedLong blockSlot;\n+    private final Bytes32 blockRoot;\n+    private final Bytes32 parentRoot;\n+    private final Bytes32 stateRoot;\n+    private final UnsignedLong justifiedEpoch;\n+    private final UnsignedLong finalizedEpoch;\n+\n+    private BlockInformation(\n+        UnsignedLong blockSlot,\n+        Bytes32 blockRoot,\n+        Bytes32 parentRoot,\n+        Bytes32 stateRoot,\n+        UnsignedLong justifiedEpoch,\n+        UnsignedLong finalizedEpoch) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3MzkyOA=="}, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjA4NzgzOnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/serialization/ProtoArraySerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1Nzo1OFrOGrONGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTo1MTowOVrOGrPwFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDY4MA==", "bodyText": "nit: params should probably be final", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447974680", "createdAt": "2020-06-30T20:57:58Z", "author": {"login": "rolfyone"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/serialization/ProtoArraySerializer.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server.rocksdb.serialization;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.ssz.SSZ;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoNode;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySerializer implements RocksDbSerializer<ProtoArray> {\n+  @Override\n+  public ProtoArray deserialize(final byte[] data) {\n+    return SSZ.decode(\n+        Bytes.of(data),\n+        reader -> {\n+          final UnsignedLong justifiedEpoch = UnsignedLong.fromLongBits(reader.readUInt64());\n+          final UnsignedLong finalizedEpoch = UnsignedLong.fromLongBits(reader.readUInt64());\n+          final List<BlockInformation> blockInformationList =\n+              reader.readBytesList().stream().map(BlockInformation::fromBytes).collect(toList());\n+          ProtoArray protoArray =\n+              new ProtoArray(\n+                  Constants.PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD,\n+                  justifiedEpoch,\n+                  finalizedEpoch,\n+                  new ArrayList<>(),\n+                  new HashMap<>());\n+          blockInformationList.forEach(\n+              blockInformation ->\n+                  protoArray.onBlock(\n+                      blockInformation.blockSlot,\n+                      blockInformation.blockRoot,\n+                      blockInformation.parentRoot,\n+                      blockInformation.stateRoot,\n+                      blockInformation.justifiedEpoch,\n+                      blockInformation.finalizedEpoch));\n+          return protoArray;\n+        });\n+  }\n+\n+  @Override\n+  public byte[] serialize(final ProtoArray protoArray) {\n+    Bytes bytes =\n+        SSZ.encode(\n+            writer -> {\n+              writer.writeUInt64(protoArray.getJustifiedEpoch().longValue());\n+              writer.writeUInt64(protoArray.getFinalizedEpoch().longValue());\n+              writer.writeBytesList(\n+                  protoArray.getNodes().stream().map(BlockInformation::toBytes).collect(toList()));\n+            });\n+    return bytes.toArrayUnsafe();\n+  }\n+\n+  private static class BlockInformation {\n+    private final UnsignedLong blockSlot;\n+    private final Bytes32 blockRoot;\n+    private final Bytes32 parentRoot;\n+    private final Bytes32 stateRoot;\n+    private final UnsignedLong justifiedEpoch;\n+    private final UnsignedLong finalizedEpoch;\n+\n+    private BlockInformation(\n+        UnsignedLong blockSlot,\n+        Bytes32 blockRoot,\n+        Bytes32 parentRoot,\n+        Bytes32 stateRoot,\n+        UnsignedLong justifiedEpoch,\n+        UnsignedLong finalizedEpoch) {\n+      this.blockSlot = blockSlot;\n+      this.blockRoot = blockRoot;\n+      this.parentRoot = parentRoot;\n+      this.stateRoot = stateRoot;\n+      this.justifiedEpoch = justifiedEpoch;\n+      this.finalizedEpoch = finalizedEpoch;\n+    }\n+\n+    public static Bytes toBytes(ProtoNode node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDAyMQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000021", "createdAt": "2020-06-30T21:51:09Z", "author": {"login": "cemozerr"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/serialization/ProtoArraySerializer.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server.rocksdb.serialization;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.ssz.SSZ;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoNode;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySerializer implements RocksDbSerializer<ProtoArray> {\n+  @Override\n+  public ProtoArray deserialize(final byte[] data) {\n+    return SSZ.decode(\n+        Bytes.of(data),\n+        reader -> {\n+          final UnsignedLong justifiedEpoch = UnsignedLong.fromLongBits(reader.readUInt64());\n+          final UnsignedLong finalizedEpoch = UnsignedLong.fromLongBits(reader.readUInt64());\n+          final List<BlockInformation> blockInformationList =\n+              reader.readBytesList().stream().map(BlockInformation::fromBytes).collect(toList());\n+          ProtoArray protoArray =\n+              new ProtoArray(\n+                  Constants.PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD,\n+                  justifiedEpoch,\n+                  finalizedEpoch,\n+                  new ArrayList<>(),\n+                  new HashMap<>());\n+          blockInformationList.forEach(\n+              blockInformation ->\n+                  protoArray.onBlock(\n+                      blockInformation.blockSlot,\n+                      blockInformation.blockRoot,\n+                      blockInformation.parentRoot,\n+                      blockInformation.stateRoot,\n+                      blockInformation.justifiedEpoch,\n+                      blockInformation.finalizedEpoch));\n+          return protoArray;\n+        });\n+  }\n+\n+  @Override\n+  public byte[] serialize(final ProtoArray protoArray) {\n+    Bytes bytes =\n+        SSZ.encode(\n+            writer -> {\n+              writer.writeUInt64(protoArray.getJustifiedEpoch().longValue());\n+              writer.writeUInt64(protoArray.getFinalizedEpoch().longValue());\n+              writer.writeBytesList(\n+                  protoArray.getNodes().stream().map(BlockInformation::toBytes).collect(toList()));\n+            });\n+    return bytes.toArrayUnsafe();\n+  }\n+\n+  private static class BlockInformation {\n+    private final UnsignedLong blockSlot;\n+    private final Bytes32 blockRoot;\n+    private final Bytes32 parentRoot;\n+    private final Bytes32 stateRoot;\n+    private final UnsignedLong justifiedEpoch;\n+    private final UnsignedLong finalizedEpoch;\n+\n+    private BlockInformation(\n+        UnsignedLong blockSlot,\n+        Bytes32 blockRoot,\n+        Bytes32 parentRoot,\n+        Bytes32 stateRoot,\n+        UnsignedLong justifiedEpoch,\n+        UnsignedLong finalizedEpoch) {\n+      this.blockSlot = blockSlot;\n+      this.blockRoot = blockRoot;\n+      this.parentRoot = parentRoot;\n+      this.stateRoot = stateRoot;\n+      this.justifiedEpoch = justifiedEpoch;\n+      this.finalizedEpoch = finalizedEpoch;\n+    }\n+\n+    public static Bytes toBytes(ProtoNode node) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDY4MA=="}, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjEwNzc5OnYy", "diffSide": "RIGHT", "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayStorageChannel.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTowNDowMVrOGrOZZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNTo0OToxNVrOGrrpwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzgyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void updateProtoArrayOnDisk(ProtoArray protoArray);\n          \n          \n            \n              void onProtoArrayUpdate(ProtoArray protoArray);", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447977829", "createdAt": "2020-06-30T21:04:01Z", "author": {"login": "mbaxter"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayStorageChannel.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public interface ProtoArrayStorageChannel {\n+\n+  void updateProtoArrayOnDisk(ProtoArray protoArray);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5OTk5Mw==", "bodyText": "Sending the same mutable instance of ProtoArray over the event channel isn't a good idea.  We'll wind up with multiple threads accessing it and what actually gets stored won't be the same as what was there when the call to this method was made.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447999993", "createdAt": "2020-06-30T21:51:05Z", "author": {"login": "ajsutton"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayStorageChannel.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public interface ProtoArrayStorageChannel {\n+\n+  void updateProtoArrayOnDisk(ProtoArray protoArray);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzgyOQ=="}, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDQ1MQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000451", "createdAt": "2020-06-30T21:52:09Z", "author": {"login": "cemozerr"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayStorageChannel.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public interface ProtoArrayStorageChannel {\n+\n+  void updateProtoArrayOnDisk(ProtoArray protoArray);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzgyOQ=="}, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQyOTUyMg==", "bodyText": "I'm thinking about my options. If I send a final ProtoArray instance we'll still wind up with multiple threads accessing it since it is only a reference. Seems like the best way forward is to convert to bytes on the client-side and send only bytes over the event channel.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448429522", "createdAt": "2020-07-01T15:06:51Z", "author": {"login": "cemozerr"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayStorageChannel.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public interface ProtoArrayStorageChannel {\n+\n+  void updateProtoArrayOnDisk(ProtoArray protoArray);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzgyOQ=="}, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0ODc2MQ==", "bodyText": "After offline discussion with @mbaxter, I'm moving on to taking a snapshot of the ProtoArray and sending that over instead.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448448761", "createdAt": "2020-07-01T15:36:01Z", "author": {"login": "cemozerr"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayStorageChannel.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public interface ProtoArrayStorageChannel {\n+\n+  void updateProtoArrayOnDisk(ProtoArray protoArray);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzgyOQ=="}, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ1NzE1NA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448457154", "createdAt": "2020-07-01T15:49:15Z", "author": {"login": "cemozerr"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayStorageChannel.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public interface ProtoArrayStorageChannel {\n+\n+  void updateProtoArrayOnDisk(ProtoArray protoArray);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzgyOQ=="}, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjEwODg4OnYy", "diffSide": "RIGHT", "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayStorageChannel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTowNDoxN1rOGrOaAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTo1MjozNlrOGrPydA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3Nzk4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              SafeFuture<Optional<ProtoArray>> getProtoArrayFromDisk();\n          \n          \n            \n              SafeFuture<Optional<ProtoArray>> getProtoArray();", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447977987", "createdAt": "2020-06-30T21:04:17Z", "author": {"login": "mbaxter"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayStorageChannel.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public interface ProtoArrayStorageChannel {\n+\n+  void updateProtoArrayOnDisk(ProtoArray protoArray);\n+\n+  SafeFuture<Optional<ProtoArray>> getProtoArrayFromDisk();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDE5Mg==", "bodyText": "Loading a full ProtoArray is fine here because the server side hands it off and doesn't use it again.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000192", "createdAt": "2020-06-30T21:51:35Z", "author": {"login": "ajsutton"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayStorageChannel.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public interface ProtoArrayStorageChannel {\n+\n+  void updateProtoArrayOnDisk(ProtoArray protoArray);\n+\n+  SafeFuture<Optional<ProtoArray>> getProtoArrayFromDisk();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3Nzk4Nw=="}, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDYyOA==", "bodyText": "Hmm I do like the explicitness of this method name.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000628", "createdAt": "2020-06-30T21:52:36Z", "author": {"login": "cemozerr"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayStorageChannel.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public interface ProtoArrayStorageChannel {\n+\n+  void updateProtoArrayOnDisk(ProtoArray protoArray);\n+\n+  SafeFuture<Optional<ProtoArray>> getProtoArrayFromDisk();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3Nzk4Nw=="}, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjIxMDkwOnYy", "diffSide": "RIGHT", "path": "storage/src/test/java/tech/pegasys/teku/storage/server/ProtoArrayStorageTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTozODozMFrOGrPaHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjozNDoxMVrOGrtR7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5NDM5OA==", "bodyText": "We should probably be running this test against different versions of the db.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447994398", "createdAt": "2020-06-30T21:38:30Z", "author": {"login": "mbaxter"}, "path": "storage/src/test/java/tech/pegasys/teku/storage/server/ProtoArrayStorageTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyGenerator;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.ChainBuilder;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoNode;\n+import tech.pegasys.teku.storage.storageSystem.InMemoryStorageSystem;\n+import tech.pegasys.teku.storage.storageSystem.StorageSystem;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.config.StateStorageMode;\n+\n+public class ProtoArrayStorageTest {\n+  protected static final List<BLSKeyPair> VALIDATOR_KEYS = BLSKeyGenerator.generateKeyPairs(3);\n+  private ProtoArrayStorage protoArrayStorage;\n+\n+  protected final ChainBuilder chainBuilder = ChainBuilder.create(VALIDATOR_KEYS);\n+\n+  private final StorageSystem storageSystem =\n+      InMemoryStorageSystem.createEmptyV4StorageSystem(StateStorageMode.ARCHIVE, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDgwMQ==", "bodyText": "Great point.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000801", "createdAt": "2020-06-30T21:52:59Z", "author": {"login": "cemozerr"}, "path": "storage/src/test/java/tech/pegasys/teku/storage/server/ProtoArrayStorageTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyGenerator;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.ChainBuilder;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoNode;\n+import tech.pegasys.teku.storage.storageSystem.InMemoryStorageSystem;\n+import tech.pegasys.teku.storage.storageSystem.StorageSystem;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.config.StateStorageMode;\n+\n+public class ProtoArrayStorageTest {\n+  protected static final List<BLSKeyPair> VALIDATOR_KEYS = BLSKeyGenerator.generateKeyPairs(3);\n+  private ProtoArrayStorage protoArrayStorage;\n+\n+  protected final ChainBuilder chainBuilder = ChainBuilder.create(VALIDATOR_KEYS);\n+\n+  private final StorageSystem storageSystem =\n+      InMemoryStorageSystem.createEmptyV4StorageSystem(StateStorageMode.ARCHIVE, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5NDM5OA=="}, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4MzgyMA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448483820", "createdAt": "2020-07-01T16:34:11Z", "author": {"login": "cemozerr"}, "path": "storage/src/test/java/tech/pegasys/teku/storage/server/ProtoArrayStorageTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyGenerator;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.ChainBuilder;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoNode;\n+import tech.pegasys.teku.storage.storageSystem.InMemoryStorageSystem;\n+import tech.pegasys.teku.storage.storageSystem.StorageSystem;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.config.StateStorageMode;\n+\n+public class ProtoArrayStorageTest {\n+  protected static final List<BLSKeyPair> VALIDATOR_KEYS = BLSKeyGenerator.generateKeyPairs(3);\n+  private ProtoArrayStorage protoArrayStorage;\n+\n+  protected final ChainBuilder chainBuilder = ChainBuilder.create(VALIDATOR_KEYS);\n+\n+  private final StorageSystem storageSystem =\n+      InMemoryStorageSystem.createEmptyV4StorageSystem(StateStorageMode.ARCHIVE, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5NDM5OA=="}, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjI0OTQwOnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/Database.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTo1MjowNlrOGrPxrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTo1MjowNlrOGrPxrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDQzMQ==", "bodyText": "nit: fromDisk is implied given it's a database - probably just getProtoArray", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000431", "createdAt": "2020-06-30T21:52:06Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/Database.java", "diffHunk": "@@ -70,7 +71,11 @@\n   @MustBeClosed\n   Stream<DepositsFromBlockEvent> streamDepositsFromBlocks();\n \n+  Optional<ProtoArray> getProtoArrayFromDisk();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjI1MDI1OnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/Database.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTo1MjoyNVrOGrPyLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoxMzowOVrOGrshhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDU1OQ==", "bodyText": "nit: Probably just putProtoArray.\nActually thinking about it, probably don't need OnDisk or FromDisk anywhere - the particular storage implementation in use might not write to disk.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000559", "createdAt": "2020-06-30T21:52:25Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/Database.java", "diffHunk": "@@ -70,7 +71,11 @@\n   @MustBeClosed\n   Stream<DepositsFromBlockEvent> streamDepositsFromBlocks();\n \n+  Optional<ProtoArray> getProtoArrayFromDisk();\n+\n   void addMinGenesisTimeBlock(final MinGenesisTimeBlockEvent event);\n \n   void addDepositsFromBlockEvent(final DepositsFromBlockEvent event);\n+\n+  void updateProtoArrayOnDisk(final ProtoArray protoArray);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3MTQyOA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448471428", "createdAt": "2020-07-01T16:13:09Z", "author": {"login": "cemozerr"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/Database.java", "diffHunk": "@@ -70,7 +71,11 @@\n   @MustBeClosed\n   Stream<DepositsFromBlockEvent> streamDepositsFromBlocks();\n \n+  Optional<ProtoArray> getProtoArrayFromDisk();\n+\n   void addMinGenesisTimeBlock(final MinGenesisTimeBlockEvent event);\n \n   void addDepositsFromBlockEvent(final DepositsFromBlockEvent event);\n+\n+  void updateProtoArrayOnDisk(final ProtoArray protoArray);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDU1OQ=="}, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTg4NTI5OnYy", "diffSide": "RIGHT", "path": "storage/src/test/java/tech/pegasys/teku/storage/server/ProtoArrayStorageTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTozNDo0MlrOGry1Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDoxMToyNFrOGrz19Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NDczNQ==", "bodyText": "(nit) Probably a good idea to use the centralized provider so we have one location where we can update tests that depend on the database:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @MethodSource(\"getStorageSystems\")\n          \n          \n            \n              @ArgumentsSource(StorageSystemArgumentsProvider.class)", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448574735", "createdAt": "2020-07-01T19:34:42Z", "author": {"login": "mbaxter"}, "path": "storage/src/test/java/tech/pegasys/teku/storage/server/ProtoArrayStorageTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static tech.pegasys.teku.protoarray.ProtoArrayTestUtil.assertThatProtoArrayMatches;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoArraySnaphot;\n+import tech.pegasys.teku.storage.storageSystem.InMemoryStorageSystem;\n+import tech.pegasys.teku.storage.storageSystem.StorageSystem;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.config.StateStorageMode;\n+\n+public class ProtoArrayStorageTest {\n+  private ProtoArrayStorage protoArrayStorage;\n+\n+  @ParameterizedTest\n+  @MethodSource(\"getStorageSystems\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MTM0OQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448591349", "createdAt": "2020-07-01T20:11:24Z", "author": {"login": "cemozerr"}, "path": "storage/src/test/java/tech/pegasys/teku/storage/server/ProtoArrayStorageTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static tech.pegasys.teku.protoarray.ProtoArrayTestUtil.assertThatProtoArrayMatches;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoArraySnaphot;\n+import tech.pegasys.teku.storage.storageSystem.InMemoryStorageSystem;\n+import tech.pegasys.teku.storage.storageSystem.StorageSystem;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.config.StateStorageMode;\n+\n+public class ProtoArrayStorageTest {\n+  private ProtoArrayStorage protoArrayStorage;\n+\n+  @ParameterizedTest\n+  @MethodSource(\"getStorageSystems\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NDczNQ=="}, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTg4NzczOnYy", "diffSide": "RIGHT", "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTozNTozMlrOGry2qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDowMzozNFrOGrzoYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NTE0Ng==", "bodyText": "(nit) Why not just:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public ProtoNode cloneForSaving() {\n          \n          \n            \n              public ProtoNode clone() {", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448575146", "createdAt": "2020-07-01T19:35:32Z", "author": {"login": "mbaxter"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoNode.java", "diffHunk": "@@ -122,4 +123,50 @@ public void setBestChildIndex(Optional<Integer> bestChildIndex) {\n   public void setBestDescendantIndex(Optional<Integer> bestDescendantIndex) {\n     this.bestDescendantIndex = bestDescendantIndex;\n   }\n+\n+  public ProtoNode cloneForSaving() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4Nzg3NA==", "bodyText": "Because we don't clone variables that are not necessary for saving such as parentIndex, weight etc.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448587874", "createdAt": "2020-07-01T20:03:34Z", "author": {"login": "cemozerr"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoNode.java", "diffHunk": "@@ -122,4 +123,50 @@ public void setBestChildIndex(Optional<Integer> bestChildIndex) {\n   public void setBestDescendantIndex(Optional<Integer> bestDescendantIndex) {\n     this.bestDescendantIndex = bestDescendantIndex;\n   }\n+\n+  public ProtoNode cloneForSaving() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NTE0Ng=="}, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTg5MjgyOnYy", "diffSide": "RIGHT", "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTozNjo1M1rOGry5lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDowNTozOVrOGrzsHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NTg5NQ==", "bodyText": "(nit) \"save\" seems a bit misleading:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static ProtoArraySnaphot save(final ProtoArray protoArray) {\n          \n          \n            \n              public static ProtoArraySnaphot create(final ProtoArray protoArray) {", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448575895", "createdAt": "2020-07-01T19:36:53Z", "author": {"login": "mbaxter"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {\n+\n+  private final UnsignedLong justifiedEpoch;\n+  private final UnsignedLong finalizedEpoch;\n+  private final List<ProtoNode> nodes;\n+\n+  private ProtoArraySnaphot(\n+      UnsignedLong justifiedEpoch, UnsignedLong finalizedEpoch, List<ProtoNode> nodes) {\n+    this.justifiedEpoch = justifiedEpoch;\n+    this.finalizedEpoch = finalizedEpoch;\n+    this.nodes = nodes;\n+  }\n+\n+  public static ProtoArraySnaphot save(final ProtoArray protoArray) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4ODgzMA==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448588830", "createdAt": "2020-07-01T20:05:39Z", "author": {"login": "cemozerr"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {\n+\n+  private final UnsignedLong justifiedEpoch;\n+  private final UnsignedLong finalizedEpoch;\n+  private final List<ProtoNode> nodes;\n+\n+  private ProtoArraySnaphot(\n+      UnsignedLong justifiedEpoch, UnsignedLong finalizedEpoch, List<ProtoNode> nodes) {\n+    this.justifiedEpoch = justifiedEpoch;\n+    this.finalizedEpoch = finalizedEpoch;\n+    this.nodes = nodes;\n+  }\n+\n+  public static ProtoArraySnaphot save(final ProtoArray protoArray) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NTg5NQ=="}, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTg5OTY4OnYy", "diffSide": "RIGHT", "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTozOToyMFrOGry9_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMDowNDo1MlrOGrzqog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NzAyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ProtoArraySnaphot {\n          \n          \n            \n            public class ProtoArraySnapshot {", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448577022", "createdAt": "2020-07-01T19:39:20Z", "author": {"login": "mbaxter"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4ODQ1MA==", "bodyText": "fixed.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448588450", "createdAt": "2020-07-01T20:04:52Z", "author": {"login": "cemozerr"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NzAyMg=="}, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTkxMDQ2OnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/ProtoArrayStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0MzoxMlrOGrzExA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjowMzoxNlrOGr2yjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3ODc1Ng==", "bodyText": "(nit) I think I'd just pass the snapshot to the db.  That way the API's are a bit clearer in requiring an immutable copy of protoarray\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                database.putProtoArray(protoArraySnaphot.toProtoArray());\n          \n          \n            \n                database.putProtoArray(protoArraySnaphot);", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448578756", "createdAt": "2020-07-01T19:43:12Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/ProtoArrayStorage.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoArraySnaphot;\n+import tech.pegasys.teku.protoarray.ProtoArrayStorageChannel;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public class ProtoArrayStorage implements ProtoArrayStorageChannel {\n+  private final Database database;\n+\n+  public ProtoArrayStorage(Database database) {\n+    this.database = database;\n+  }\n+\n+  @Override\n+  public void onProtoArrayUpdate(ProtoArraySnaphot protoArraySnaphot) {\n+    database.putProtoArray(protoArraySnaphot.toProtoArray());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzOTYzMA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448639630", "createdAt": "2020-07-01T22:03:16Z", "author": {"login": "cemozerr"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/ProtoArrayStorage.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoArraySnaphot;\n+import tech.pegasys.teku.protoarray.ProtoArrayStorageChannel;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public class ProtoArrayStorage implements ProtoArrayStorageChannel {\n+  private final Database database;\n+\n+  public ProtoArrayStorage(Database database) {\n+    this.database = database;\n+  }\n+\n+  @Override\n+  public void onProtoArrayUpdate(ProtoArraySnaphot protoArraySnaphot) {\n+    database.putProtoArray(protoArraySnaphot.toProtoArray());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3ODc1Ng=="}, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTkxNjkxOnYy", "diffSide": "RIGHT", "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0NTozM1rOGrzI2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjowMzoyNFrOGr2yrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ==", "bodyText": "If we really want to enforce immutability, we should probably create a copy of the nodes list we're passing into the new ProtoArray instance.  Or else, have ProtoArray create the copy internally.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448579801", "createdAt": "2020-07-01T19:45:33Z", "author": {"login": "mbaxter"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {\n+\n+  private final UnsignedLong justifiedEpoch;\n+  private final UnsignedLong finalizedEpoch;\n+  private final List<ProtoNode> nodes;\n+\n+  private ProtoArraySnaphot(\n+      UnsignedLong justifiedEpoch, UnsignedLong finalizedEpoch, List<ProtoNode> nodes) {\n+    this.justifiedEpoch = justifiedEpoch;\n+    this.finalizedEpoch = finalizedEpoch;\n+    this.nodes = nodes;\n+  }\n+\n+  public static ProtoArraySnaphot save(final ProtoArray protoArray) {\n+    List<ProtoNode> nodes =\n+        protoArray.getNodes().stream().map(ProtoNode::cloneForSaving).collect(Collectors.toList());\n+    UnsignedLong justifiedEpoch = protoArray.getJustifiedEpoch();\n+    UnsignedLong finalizedEpoch = protoArray.getFinalizedEpoch();\n+    return new ProtoArraySnaphot(justifiedEpoch, finalizedEpoch, nodes);\n+  }\n+\n+  public ProtoArray toProtoArray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4OTU1OQ==", "bodyText": "We create a copy of the nodes list as we're creating the ProtoArraySnapshot. What am I missing?", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448589559", "createdAt": "2020-07-01T20:07:23Z", "author": {"login": "cemozerr"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {\n+\n+  private final UnsignedLong justifiedEpoch;\n+  private final UnsignedLong finalizedEpoch;\n+  private final List<ProtoNode> nodes;\n+\n+  private ProtoArraySnaphot(\n+      UnsignedLong justifiedEpoch, UnsignedLong finalizedEpoch, List<ProtoNode> nodes) {\n+    this.justifiedEpoch = justifiedEpoch;\n+    this.finalizedEpoch = finalizedEpoch;\n+    this.nodes = nodes;\n+  }\n+\n+  public static ProtoArraySnaphot save(final ProtoArray protoArray) {\n+    List<ProtoNode> nodes =\n+        protoArray.getNodes().stream().map(ProtoNode::cloneForSaving).collect(Collectors.toList());\n+    UnsignedLong justifiedEpoch = protoArray.getJustifiedEpoch();\n+    UnsignedLong finalizedEpoch = protoArray.getFinalizedEpoch();\n+    return new ProtoArraySnaphot(justifiedEpoch, finalizedEpoch, nodes);\n+  }\n+\n+  public ProtoArray toProtoArray() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ=="}, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxOTUzMA==", "bodyText": "The snapshot is indirectly mutable because you can do something like:\nprotoArray = snapshot.toProtoArray();\nprotoArray.onBlock(...)\n\nAnd I think those changes will then be reflected back in the snapshot.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448619530", "createdAt": "2020-07-01T21:14:19Z", "author": {"login": "mbaxter"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {\n+\n+  private final UnsignedLong justifiedEpoch;\n+  private final UnsignedLong finalizedEpoch;\n+  private final List<ProtoNode> nodes;\n+\n+  private ProtoArraySnaphot(\n+      UnsignedLong justifiedEpoch, UnsignedLong finalizedEpoch, List<ProtoNode> nodes) {\n+    this.justifiedEpoch = justifiedEpoch;\n+    this.finalizedEpoch = finalizedEpoch;\n+    this.nodes = nodes;\n+  }\n+\n+  public static ProtoArraySnaphot save(final ProtoArray protoArray) {\n+    List<ProtoNode> nodes =\n+        protoArray.getNodes().stream().map(ProtoNode::cloneForSaving).collect(Collectors.toList());\n+    UnsignedLong justifiedEpoch = protoArray.getJustifiedEpoch();\n+    UnsignedLong finalizedEpoch = protoArray.getFinalizedEpoch();\n+    return new ProtoArraySnaphot(justifiedEpoch, finalizedEpoch, nodes);\n+  }\n+\n+  public ProtoArray toProtoArray() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ=="}, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMTgxMQ==", "bodyText": "Oh gotcha, makes sense.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448621811", "createdAt": "2020-07-01T21:19:36Z", "author": {"login": "cemozerr"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {\n+\n+  private final UnsignedLong justifiedEpoch;\n+  private final UnsignedLong finalizedEpoch;\n+  private final List<ProtoNode> nodes;\n+\n+  private ProtoArraySnaphot(\n+      UnsignedLong justifiedEpoch, UnsignedLong finalizedEpoch, List<ProtoNode> nodes) {\n+    this.justifiedEpoch = justifiedEpoch;\n+    this.finalizedEpoch = finalizedEpoch;\n+    this.nodes = nodes;\n+  }\n+\n+  public static ProtoArraySnaphot save(final ProtoArray protoArray) {\n+    List<ProtoNode> nodes =\n+        protoArray.getNodes().stream().map(ProtoNode::cloneForSaving).collect(Collectors.toList());\n+    UnsignedLong justifiedEpoch = protoArray.getJustifiedEpoch();\n+    UnsignedLong finalizedEpoch = protoArray.getFinalizedEpoch();\n+    return new ProtoArraySnaphot(justifiedEpoch, finalizedEpoch, nodes);\n+  }\n+\n+  public ProtoArray toProtoArray() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ=="}, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNDUyNw==", "bodyText": "Actually, this is fine because it doesn't matter if the snapshot is later manipulated.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448624527", "createdAt": "2020-07-01T21:25:46Z", "author": {"login": "cemozerr"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {\n+\n+  private final UnsignedLong justifiedEpoch;\n+  private final UnsignedLong finalizedEpoch;\n+  private final List<ProtoNode> nodes;\n+\n+  private ProtoArraySnaphot(\n+      UnsignedLong justifiedEpoch, UnsignedLong finalizedEpoch, List<ProtoNode> nodes) {\n+    this.justifiedEpoch = justifiedEpoch;\n+    this.finalizedEpoch = finalizedEpoch;\n+    this.nodes = nodes;\n+  }\n+\n+  public static ProtoArraySnaphot save(final ProtoArray protoArray) {\n+    List<ProtoNode> nodes =\n+        protoArray.getNodes().stream().map(ProtoNode::cloneForSaving).collect(Collectors.toList());\n+    UnsignedLong justifiedEpoch = protoArray.getJustifiedEpoch();\n+    UnsignedLong finalizedEpoch = protoArray.getFinalizedEpoch();\n+    return new ProtoArraySnaphot(justifiedEpoch, finalizedEpoch, nodes);\n+  }\n+\n+  public ProtoArray toProtoArray() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ=="}, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNDgwOQ==", "bodyText": "Because the server side hands it off and does not touch it again.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448624809", "createdAt": "2020-07-01T21:26:25Z", "author": {"login": "cemozerr"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {\n+\n+  private final UnsignedLong justifiedEpoch;\n+  private final UnsignedLong finalizedEpoch;\n+  private final List<ProtoNode> nodes;\n+\n+  private ProtoArraySnaphot(\n+      UnsignedLong justifiedEpoch, UnsignedLong finalizedEpoch, List<ProtoNode> nodes) {\n+    this.justifiedEpoch = justifiedEpoch;\n+    this.finalizedEpoch = finalizedEpoch;\n+    this.nodes = nodes;\n+  }\n+\n+  public static ProtoArraySnaphot save(final ProtoArray protoArray) {\n+    List<ProtoNode> nodes =\n+        protoArray.getNodes().stream().map(ProtoNode::cloneForSaving).collect(Collectors.toList());\n+    UnsignedLong justifiedEpoch = protoArray.getJustifiedEpoch();\n+    UnsignedLong finalizedEpoch = protoArray.getFinalizedEpoch();\n+    return new ProtoArraySnaphot(justifiedEpoch, finalizedEpoch, nodes);\n+  }\n+\n+  public ProtoArray toProtoArray() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ=="}, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNTMyMA==", "bodyText": "Yeah it will work but it's not a very good pattern to have a class look like it's immutable but not actually be.  Sets you up for bugs in the future when how its used changes.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448625320", "createdAt": "2020-07-01T21:27:28Z", "author": {"login": "ajsutton"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {\n+\n+  private final UnsignedLong justifiedEpoch;\n+  private final UnsignedLong finalizedEpoch;\n+  private final List<ProtoNode> nodes;\n+\n+  private ProtoArraySnaphot(\n+      UnsignedLong justifiedEpoch, UnsignedLong finalizedEpoch, List<ProtoNode> nodes) {\n+    this.justifiedEpoch = justifiedEpoch;\n+    this.finalizedEpoch = finalizedEpoch;\n+    this.nodes = nodes;\n+  }\n+\n+  public static ProtoArraySnaphot save(final ProtoArray protoArray) {\n+    List<ProtoNode> nodes =\n+        protoArray.getNodes().stream().map(ProtoNode::cloneForSaving).collect(Collectors.toList());\n+    UnsignedLong justifiedEpoch = protoArray.getJustifiedEpoch();\n+    UnsignedLong finalizedEpoch = protoArray.getFinalizedEpoch();\n+    return new ProtoArraySnaphot(justifiedEpoch, finalizedEpoch, nodes);\n+  }\n+\n+  public ProtoArray toProtoArray() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ=="}, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzNTkyMw==", "bodyText": "I made the comment but the next commit will make it immutable regardless.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448635923", "createdAt": "2020-07-01T21:53:21Z", "author": {"login": "cemozerr"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {\n+\n+  private final UnsignedLong justifiedEpoch;\n+  private final UnsignedLong finalizedEpoch;\n+  private final List<ProtoNode> nodes;\n+\n+  private ProtoArraySnaphot(\n+      UnsignedLong justifiedEpoch, UnsignedLong finalizedEpoch, List<ProtoNode> nodes) {\n+    this.justifiedEpoch = justifiedEpoch;\n+    this.finalizedEpoch = finalizedEpoch;\n+    this.nodes = nodes;\n+  }\n+\n+  public static ProtoArraySnaphot save(final ProtoArray protoArray) {\n+    List<ProtoNode> nodes =\n+        protoArray.getNodes().stream().map(ProtoNode::cloneForSaving).collect(Collectors.toList());\n+    UnsignedLong justifiedEpoch = protoArray.getJustifiedEpoch();\n+    UnsignedLong finalizedEpoch = protoArray.getFinalizedEpoch();\n+    return new ProtoArraySnaphot(justifiedEpoch, finalizedEpoch, nodes);\n+  }\n+\n+  public ProtoArray toProtoArray() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ=="}, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzOTY2MA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448639660", "createdAt": "2020-07-01T22:03:24Z", "author": {"login": "cemozerr"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {\n+\n+  private final UnsignedLong justifiedEpoch;\n+  private final UnsignedLong finalizedEpoch;\n+  private final List<ProtoNode> nodes;\n+\n+  private ProtoArraySnaphot(\n+      UnsignedLong justifiedEpoch, UnsignedLong finalizedEpoch, List<ProtoNode> nodes) {\n+    this.justifiedEpoch = justifiedEpoch;\n+    this.finalizedEpoch = finalizedEpoch;\n+    this.nodes = nodes;\n+  }\n+\n+  public static ProtoArraySnaphot save(final ProtoArray protoArray) {\n+    List<ProtoNode> nodes =\n+        protoArray.getNodes().stream().map(ProtoNode::cloneForSaving).collect(Collectors.toList());\n+    UnsignedLong justifiedEpoch = protoArray.getJustifiedEpoch();\n+    UnsignedLong finalizedEpoch = protoArray.getFinalizedEpoch();\n+    return new ProtoArraySnaphot(justifiedEpoch, finalizedEpoch, nodes);\n+  }\n+\n+  public ProtoArray toProtoArray() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ=="}, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTkyMTU5OnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/ProtoArrayStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0NzoxN1rOGrzL4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjowMzozM1rOGr2y1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MDU3OQ==", "bodyText": "(nit) Similarly, it might make sense to return a snapshot here", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448580579", "createdAt": "2020-07-01T19:47:17Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/ProtoArrayStorage.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoArraySnaphot;\n+import tech.pegasys.teku.protoarray.ProtoArrayStorageChannel;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public class ProtoArrayStorage implements ProtoArrayStorageChannel {\n+  private final Database database;\n+\n+  public ProtoArrayStorage(Database database) {\n+    this.database = database;\n+  }\n+\n+  @Override\n+  public void onProtoArrayUpdate(ProtoArraySnaphot protoArraySnaphot) {\n+    database.putProtoArray(protoArraySnaphot.toProtoArray());\n+  }\n+\n+  @Override\n+  public SafeFuture<Optional<ProtoArray>> getProtoArray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzOTcwMQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448639701", "createdAt": "2020-07-01T22:03:33Z", "author": {"login": "cemozerr"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/ProtoArrayStorage.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoArraySnaphot;\n+import tech.pegasys.teku.protoarray.ProtoArrayStorageChannel;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public class ProtoArrayStorage implements ProtoArrayStorageChannel {\n+  private final Database database;\n+\n+  public ProtoArrayStorage(Database database) {\n+    this.database = database;\n+  }\n+\n+  @Override\n+  public void onProtoArrayUpdate(ProtoArraySnaphot protoArraySnaphot) {\n+    database.putProtoArray(protoArraySnaphot.toProtoArray());\n+  }\n+\n+  @Override\n+  public SafeFuture<Optional<ProtoArray>> getProtoArray() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MDU3OQ=="}, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3494, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}