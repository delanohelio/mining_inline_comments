{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NjEzNjcz", "number": 1510, "title": "[BC-315] Add RocksDB Database implementation", "bodyText": "PR Description\nAdd a RocksDB-backed Database implementation.  Generalize existing MapDbDatabaseTest to run over different Database implementations (storage-backed MapDbDatabase, in-memory MapDbDatabase, and RocksDbDatabase).", "createdAt": "2020-03-31T21:27:31Z", "url": "https://github.com/ConsenSys/teku/pull/1510", "merged": true, "mergeCommit": {"oid": "50366ea31409129605ebf3b302feecc080a44f74"}, "closed": true, "closedAt": "2020-04-02T15:41:33Z", "author": {"login": "mbaxter"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQffTRgH2gAyMzk2NjEzNjczOjcxNzEwYmMxNGEyYWY0MWM2ODcxYWZlYmNmMTI3MmY4Zjc1Mjg3OTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTt_s4gH2gAyMzk2NjEzNjczOmYxNmExMDMwODM5Yzk3YTQ5NDgxOGUyNTA1ZTRhYmRjZDU4NjM5ZTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "71710bc14a2af41c6871afebcf1272f8f7528793", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/71710bc14a2af41c6871afebcf1272f8f7528793", "committedDate": "2020-03-23T14:50:07Z", "message": "(In progress) Start adding rocksdb database"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b578eeb1d6b3999be97c235346a2d72346d485f", "author": {"user": {"login": "rojotek", "name": "Rob Dawson"}}, "url": "https://github.com/ConsenSys/teku/commit/3b578eeb1d6b3999be97c235346a2d72346d485f", "committedDate": "2020-03-23T14:50:07Z", "message": "Close to compiling version of the RocksDbDatabase."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e10121097a5d8cf62235d38eea96a5b126e28a3", "author": {"user": {"login": "rojotek", "name": "Rob Dawson"}}, "url": "https://github.com/ConsenSys/teku/commit/1e10121097a5d8cf62235d38eea96a5b126e28a3", "committedDate": "2020-03-23T14:50:07Z", "message": "Implemented methods, got code compiling, handle transactions and iterators properly."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "525ebbd7286a7cd37162739307d8d9695c2d22eb", "author": {"user": {"login": "rojotek", "name": "Rob Dawson"}}, "url": "https://github.com/ConsenSys/teku/commit/525ebbd7286a7cd37162739307d8d9695c2d22eb", "committedDate": "2020-03-23T14:56:35Z", "message": "fixed static import."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0236b37d514907c699dda3d5620bd942f817656", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/f0236b37d514907c699dda3d5620bd942f817656", "committedDate": "2020-03-23T18:36:09Z", "message": "Set column family options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e21eec60f7f7ef892b5f74366312cdfceb04581", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/5e21eec60f7f7ef892b5f74366312cdfceb04581", "committedDate": "2020-03-25T18:19:55Z", "message": "Merge branch 'master' into bc-315/add-rocksdb-impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47320082a96d0dcf97427009cb157053eabeadc1", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/47320082a96d0dcf97427009cb157053eabeadc1", "committedDate": "2020-03-30T16:01:49Z", "message": "Merge branch 'master' into bc-315/add-rocksdb-impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f4bdfc6b91fc29af68fbe6440d8d55b4016d8f3", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/7f4bdfc6b91fc29af68fbe6440d8d55b4016d8f3", "committedDate": "2020-03-30T16:08:48Z", "message": "Incorporate changes from merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f9cc58b1b0355044291f8c96380ff13ac350593", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/2f9cc58b1b0355044291f8c96380ff13ac350593", "committedDate": "2020-03-30T16:43:49Z", "message": "Add rocksdb config defaults, update factory to create v2 database"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f82dd14090d2e97295f52fe1674698ead8745718", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/f82dd14090d2e97295f52fe1674698ead8745718", "committedDate": "2020-03-30T19:08:00Z", "message": "Make database test generic across implementations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9d53496a002826d0ca0709ba21d66aacf44a1b6", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/b9d53496a002826d0ca0709ba21d66aacf44a1b6", "committedDate": "2020-03-30T19:12:41Z", "message": "Merge branch 'master' into bc-315/add-rocksdb-impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44890020a262d86b69b077286c61ff24dd265577", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/44890020a262d86b69b077286c61ff24dd265577", "committedDate": "2020-03-31T16:19:39Z", "message": "Use expected identifier for rocksdb default column"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba1ff02a0389d9d1702a68447bec5a939888ef89", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/ba1ff02a0389d9d1702a68447bec5a939888ef89", "committedDate": "2020-03-31T16:23:29Z", "message": "Deserialize state using concrete class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a871d35f67ff5e121c0914b360513e70dccef5e", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/8a871d35f67ff5e121c0914b360513e70dccef5e", "committedDate": "2020-03-31T16:23:41Z", "message": "Fix spotless error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb0b95419a425122b0cd4f82dff1e8c9bb42bbfa", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/cb0b95419a425122b0cd4f82dff1e8c9bb42bbfa", "committedDate": "2020-03-31T16:37:04Z", "message": "Fix column reference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11e8be2c851e4f9e4f7d562a28fb3b0620a7bda1", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/11e8be2c851e4f9e4f7d562a28fb3b0620a7bda1", "committedDate": "2020-03-31T21:17:39Z", "message": "Upgrade rocksdb version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2b635f4ed0618944e0dc80e17fa7bd369ec2198", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/c2b635f4ed0618944e0dc80e17fa7bd369ec2198", "committedDate": "2020-03-31T21:19:00Z", "message": "Use junit @TempDir annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5689133d11a469075d20c4bb640eef9703cd86c", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/a5689133d11a469075d20c4bb640eef9703cd86c", "committedDate": "2020-03-31T21:20:28Z", "message": "Fix a few issues in RocksDbDatabase implementation\n\nFix columng reference, fix unintentionally skipped keys.  Handle null\nvalues when deserializing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cefe0d28c48fee5563bc0fb02a096bbcfaefa93e", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/cefe0d28c48fee5563bc0fb02a096bbcfaefa93e", "committedDate": "2020-03-31T21:21:09Z", "message": "Merge branch 'master' into bc-315/add-rocksdb-impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0854e863ab2e6ac565916341775df7639c3dee78", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/0854e863ab2e6ac565916341775df7639c3dee78", "committedDate": "2020-04-01T15:36:42Z", "message": "Merge branch 'master' into bc-315/add-rocksdb-impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b526ae433d8f76cd424a10ac258ada6a6367957", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/2b526ae433d8f76cd424a10ac258ada6a6367957", "committedDate": "2020-04-01T15:42:55Z", "message": "Move rocksdb classes into server package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1db0d91bd4ea24b507cb19448ca533add4abe7a", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/e1db0d91bd4ea24b507cb19448ca533add4abe7a", "committedDate": "2020-04-01T19:34:13Z", "message": "Reorganize files, some cleanup to RocksDbDatabase\n\nMove MapDbDatabase and related utils to mapdb package.  Fix some issues\nwith exception handling, update var names, reorganize methods in\nRocksDbDatabase."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c49ca5232736b32339c9ad17761af72d83f541c2", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/c49ca5232736b32339c9ad17761af72d83f541c2", "committedDate": "2020-04-01T22:00:48Z", "message": "Add test that stores block with a very large slot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "101a012c1523e2af515a4febc436ea6168cc2aae", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/101a012c1523e2af515a4febc436ea6168cc2aae", "committedDate": "2020-04-01T22:03:02Z", "message": "Merge branch 'master' into bc-315/add-rocksdb-impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f967b1517ec73cfe6ce75b248405e69a0025c26", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/8f967b1517ec73cfe6ce75b248405e69a0025c26", "committedDate": "2020-04-01T22:17:13Z", "message": "Standarize exception handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1OTU0MzE4", "url": "https://github.com/ConsenSys/teku/pull/1510#pullrequestreview-385954318", "createdAt": "2020-04-01T21:15:04Z", "commit": {"oid": "0854e863ab2e6ac565916341775df7639c3dee78"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMToxNTowNFrOF_S34g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjo1Njo0NVrOF_VjQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMzgyNg==", "bodyText": "Seems suspicious that we're storing the state in hot states and the blocks in finalised.  Suspect this should just be storing hot blocks by root.", "url": "https://github.com/ConsenSys/teku/pull/1510#discussion_r401913826", "createdAt": "2020-04-01T21:15:04Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/artemis/storage/rocksdb/RocksDbDatabase.java", "diffHunk": "@@ -0,0 +1,669 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.storage.rocksdb;\n+\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.CHECKPOINT_STATES;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.DEFAULT;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.FINALIZED_BLOCKS_BY_ROOT;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.FINALIZED_ROOTS_BY_SLOT;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.FINALIZED_STATES_BY_ROOT;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.HOT_BLOCKS_BY_ROOT;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.HOT_STATES_BY_ROOT;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.LATEST_MESSAGES;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbDefaultColumnKey.BEST_JUSTIFIED_CHECKPOINT_KEY;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbDefaultColumnKey.FINALIZED_CHECKPOINT_KEY;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbDefaultColumnKey.GENESIS_TIME_KEY;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbDefaultColumnKey.JUSTIFIED_CHECKPOINT_KEY;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.primitives.Longs;\n+import com.google.common.primitives.UnsignedLong;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentNavigableMap;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.rocksdb.BlockBasedTableConfig;\n+import org.rocksdb.ColumnFamilyDescriptor;\n+import org.rocksdb.ColumnFamilyHandle;\n+import org.rocksdb.ColumnFamilyOptions;\n+import org.rocksdb.DBOptions;\n+import org.rocksdb.Env;\n+import org.rocksdb.LRUCache;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+import org.rocksdb.Statistics;\n+import org.rocksdb.Transaction;\n+import org.rocksdb.Transaction.TransactionState;\n+import org.rocksdb.TransactionDB;\n+import org.rocksdb.TransactionDBOptions;\n+import org.rocksdb.WriteOptions;\n+import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.BeaconStateImpl;\n+import tech.pegasys.artemis.datastructures.state.Checkpoint;\n+import tech.pegasys.artemis.datastructures.util.SimpleOffsetSerializer;\n+import tech.pegasys.artemis.storage.Store;\n+import tech.pegasys.artemis.storage.events.StorageUpdate;\n+import tech.pegasys.artemis.storage.events.StorageUpdateResult;\n+import tech.pegasys.artemis.storage.server.Database;\n+import tech.pegasys.artemis.storage.server.DatabaseStorageException;\n+import tech.pegasys.artemis.storage.server.StateStorageMode;\n+import tech.pegasys.artemis.util.sos.SimpleOffsetSerializable;\n+\n+public class RocksDbDatabase implements Database {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  static {\n+    RocksDbUtil.loadNativeLibrary();\n+  }\n+\n+  private final DBOptions options;\n+  private final TransactionDBOptions txOptions;\n+  private final AtomicBoolean closed = new AtomicBoolean(false);\n+  private final TransactionDB db;\n+  private final ImmutableMap<RocksDbColumn, ColumnFamilyHandle> columnHandlesByName;\n+  private final StateStorageMode stateStorageMode;\n+\n+  // In memory only\n+  private final ConcurrentNavigableMap<UnsignedLong, Set<Bytes32>> hotRootsBySlotCache =\n+      new ConcurrentSkipListMap<>();\n+\n+  public static Database createOnDisk(\n+      final RocksDbConfiguration configuration, final StateStorageMode stateStorageMode) {\n+    return new RocksDbDatabase(configuration, stateStorageMode);\n+  }\n+\n+  private RocksDbDatabase(\n+      final RocksDbConfiguration configuration, final StateStorageMode stateStorageMode) {\n+    this.stateStorageMode = stateStorageMode;\n+    final Statistics stats = new Statistics();\n+\n+    options =\n+        new DBOptions()\n+            .setCreateIfMissing(true)\n+            .setMaxOpenFiles(configuration.getMaxOpenFiles())\n+            .setMaxBackgroundCompactions(configuration.getMaxBackgroundCompactions())\n+            .setStatistics(stats)\n+            .setCreateMissingColumnFamilies(true)\n+            .setEnv(\n+                Env.getDefault().setBackgroundThreads(configuration.getBackgroundThreadCount()));\n+\n+    final ColumnFamilyOptions columnFamilyOptions =\n+        new ColumnFamilyOptions().setTableFormatConfig(createBlockBasedTableConfig(configuration));\n+    List<ColumnFamilyDescriptor> columnDescriptors =\n+        EnumSet.allOf(RocksDbColumn.class).stream()\n+            .map(col -> new ColumnFamilyDescriptor(col.getId(), columnFamilyOptions))\n+            .collect(Collectors.toList());\n+\n+    final List<ColumnFamilyHandle> columnHandles = new ArrayList<>(columnDescriptors.size());\n+\n+    Map<Bytes, RocksDbColumn> columnsById =\n+        EnumSet.allOf(RocksDbColumn.class).stream()\n+            .collect(Collectors.toMap(col -> Bytes.wrap(col.getId()), Function.identity()));\n+    txOptions = new TransactionDBOptions();\n+    try {\n+      db =\n+          TransactionDB.open(\n+              options,\n+              txOptions,\n+              configuration.getDatabaseDir().toString(),\n+              columnDescriptors,\n+              columnHandles);\n+\n+      final ImmutableMap.Builder<RocksDbColumn, ColumnFamilyHandle> builder =\n+          ImmutableMap.builder();\n+      for (ColumnFamilyHandle columnHandle : columnHandles) {\n+        final RocksDbColumn rocksDbColumn = columnsById.get(Bytes.wrap(columnHandle.getName()));\n+        builder.put(rocksDbColumn, columnHandle);\n+      }\n+      columnHandlesByName = builder.build();\n+\n+    } catch (RocksDBException e) {\n+      throw new DatabaseStorageException(\n+          \"Failed to open database at path: \" + configuration.getDatabaseDir(), e);\n+    }\n+  }\n+\n+  private BlockBasedTableConfig createBlockBasedTableConfig(final RocksDbConfiguration config) {\n+    final LRUCache cache = new LRUCache(config.getCacheCapacity());\n+    return new BlockBasedTableConfig().setBlockCache(cache);\n+  }\n+\n+  @Override\n+  public void storeGenesis(final Store store) {\n+    throwIfClosed();\n+    final WriteOptions options = new WriteOptions();\n+    try (Transaction transaction = db.beginTransaction(options)) {\n+      try {\n+        ColumnFamilyHandle defaultColumn = columnHandlesByName.get(DEFAULT);\n+        transaction.put(\n+            defaultColumn,\n+            GENESIS_TIME_KEY.getId(),\n+            Longs.toByteArray(store.getGenesisTime().longValue()));\n+        transaction.put(\n+            defaultColumn,\n+            RocksDbDefaultColumnKey.JUSTIFIED_CHECKPOINT_KEY.getId(),\n+            serialize(store.getJustifiedCheckpoint()));\n+        transaction.put(\n+            defaultColumn,\n+            RocksDbDefaultColumnKey.BEST_JUSTIFIED_CHECKPOINT_KEY.getId(),\n+            serialize(store.getBestJustifiedCheckpoint()));\n+        transaction.put(\n+            defaultColumn,\n+            FINALIZED_CHECKPOINT_KEY.getId(),\n+            serialize(store.getFinalizedCheckpoint()));\n+        store\n+            .getBlockRoots()\n+            .forEach(\n+                root -> {\n+                  final SignedBeaconBlock block = store.getSignedBlock(root);\n+                  final BeaconState state = store.getBlockState(root);\n+                  try {\n+                    addHotBlock(transaction, root, block);\n+                    byte[] rootArray = root.toArrayUnsafe();\n+                    transaction.put(\n+                        columnHandlesByName.get(HOT_STATES_BY_ROOT), rootArray, serialize(state));\n+                    transaction.put(\n+                        columnHandlesByName.get(FINALIZED_ROOTS_BY_SLOT),\n+                        Longs.toByteArray(block.getSlot().longValue()),\n+                        rootArray);\n+                    transaction.put(\n+                        columnHandlesByName.get(FINALIZED_BLOCKS_BY_ROOT),\n+                        rootArray,\n+                        serialize(block));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0854e863ab2e6ac565916341775df7639c3dee78"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NzU5Mw==", "bodyText": "Why doesn't this use the @TempDir support?", "url": "https://github.com/ConsenSys/teku/pull/1510#discussion_r401957593", "createdAt": "2020-04-01T22:56:31Z", "author": {"login": "ajsutton"}, "path": "storage/src/test/java/tech/pegasys/artemis/storage/server/AbstractStorageBackedDatabaseTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.io.Files;\n+import com.google.common.primitives.UnsignedLong;\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.Checkpoint;\n+import tech.pegasys.artemis.storage.TrackingStorageUpdateChannel;\n+\n+public abstract class AbstractStorageBackedDatabaseTest extends AbstractDatabaseTest {\n+\n+  protected abstract Database createDatabase(\n+      final File tempDir, final StateStorageMode storageMode);\n+\n+  @Override\n+  protected Database createDatabase(final StateStorageMode storageMode) {\n+    final File tmpDir = Files.createTempDir();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f967b1517ec73cfe6ce75b248405e69a0025c26"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NzY5Nw==", "bodyText": "Does this work for a directory given it won't be empty by the time the test finishes?", "url": "https://github.com/ConsenSys/teku/pull/1510#discussion_r401957697", "createdAt": "2020-04-01T22:56:45Z", "author": {"login": "ajsutton"}, "path": "storage/src/test/java/tech/pegasys/artemis/storage/server/AbstractStorageBackedDatabaseTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.io.Files;\n+import com.google.common.primitives.UnsignedLong;\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.Checkpoint;\n+import tech.pegasys.artemis.storage.TrackingStorageUpdateChannel;\n+\n+public abstract class AbstractStorageBackedDatabaseTest extends AbstractDatabaseTest {\n+\n+  protected abstract Database createDatabase(\n+      final File tempDir, final StateStorageMode storageMode);\n+\n+  @Override\n+  protected Database createDatabase(final StateStorageMode storageMode) {\n+    final File tmpDir = Files.createTempDir();\n+    tmpDir.deleteOnExit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f967b1517ec73cfe6ce75b248405e69a0025c26"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "411108d3bf5111a76a612f16d313f104921dedd4", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/411108d3bf5111a76a612f16d313f104921dedd4", "committedDate": "2020-04-02T15:02:10Z", "message": "Add some clarifying comments around genesis persistence"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38d939cf47b37ee05acfb2637511ca0e96a74306", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/38d939cf47b37ee05acfb2637511ca0e96a74306", "committedDate": "2020-04-02T15:22:25Z", "message": "Make sure tmp directories get cleaned up on teardown"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f16a1030839c97a494818e2505e4abdcd58639e7", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/f16a1030839c97a494818e2505e4abdcd58639e7", "committedDate": "2020-04-02T15:25:57Z", "message": "Merge branch 'master' into bc-315/add-rocksdb-impl"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4425, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}