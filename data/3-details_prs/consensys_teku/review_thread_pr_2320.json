{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0OTIxMDIw", "number": 2320, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTo1Njo1OFrOEL2yvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowNjozN1rOEMQnrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODY3NTE3OnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/DiscoveryPeer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTo1Njo1OFrOGtoYUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDo0NzowN1rOGuCHIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwMDY4OQ==", "bodyText": "I think it's probably better to just use an empty list if the attribute is not present rather than having an Optional<List>.  Not advertising any persistent subnets is effectively the same as not having any.\nAlso it would probably be better to stick with the Bitvector rather than converting to List<Integer> the most common thing we'll do is check for a specific value which in a List means iterating through every item but is as single lookup in a Bitvector.", "url": "https://github.com/ConsenSys/teku/pull/2320#discussion_r450500689", "createdAt": "2020-07-06T21:56:58Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/DiscoveryPeer.java", "diffHunk": "@@ -14,21 +14,28 @@\n package tech.pegasys.teku.networking.p2p.discovery;\n \n import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n import java.net.InetSocketAddress;\n-import java.util.Objects;\n+import java.util.List;\n import java.util.Optional;\n import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.datastructures.networking.libp2p.rpc.EnrForkId;\n \n public class DiscoveryPeer {\n   private final Bytes publicKey;\n   private final InetSocketAddress nodeAddress;\n-  private final Optional<Bytes> enrForkId;\n+  private final Optional<EnrForkId> enrForkId;\n+  private final Optional<List<Integer>> persistentSubnets;\n \n   public DiscoveryPeer(\n-      final Bytes publicKey, final InetSocketAddress nodeAddress, final Optional<Bytes> enrForkId) {\n+      final Bytes publicKey,\n+      final InetSocketAddress nodeAddress,\n+      final Optional<EnrForkId> enrForkId,\n+      final Optional<List<Integer>> persistentSubnets) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "565d1e4ac50af748affb3c3e782d35f2b8288691"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkyMjI3Mg==", "bodyText": "Makes sense to me.", "url": "https://github.com/ConsenSys/teku/pull/2320#discussion_r450922272", "createdAt": "2020-07-07T14:47:07Z", "author": {"login": "cemozerr"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/DiscoveryPeer.java", "diffHunk": "@@ -14,21 +14,28 @@\n package tech.pegasys.teku.networking.p2p.discovery;\n \n import com.google.common.base.MoreObjects;\n+import com.google.common.base.Objects;\n import java.net.InetSocketAddress;\n-import java.util.Objects;\n+import java.util.List;\n import java.util.Optional;\n import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.datastructures.networking.libp2p.rpc.EnrForkId;\n \n public class DiscoveryPeer {\n   private final Bytes publicKey;\n   private final InetSocketAddress nodeAddress;\n-  private final Optional<Bytes> enrForkId;\n+  private final Optional<EnrForkId> enrForkId;\n+  private final Optional<List<Integer>> persistentSubnets;\n \n   public DiscoveryPeer(\n-      final Bytes publicKey, final InetSocketAddress nodeAddress, final Optional<Bytes> enrForkId) {\n+      final Bytes publicKey,\n+      final InetSocketAddress nodeAddress,\n+      final Optional<EnrForkId> enrForkId,\n+      final Optional<List<Integer>> persistentSubnets) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwMDY4OQ=="}, "originalCommit": {"oid": "565d1e4ac50af748affb3c3e782d35f2b8288691"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjkwNjcwOnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/NodeRecordConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjowNjozN1rOGuRTFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwMzoxMzowNFrOGuWkTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MTA5Mg==", "bodyText": "This may throw an IllegalArgumentException if the bytes are not the right length.", "url": "https://github.com/ConsenSys/teku/pull/2320#discussion_r451171092", "createdAt": "2020-07-07T22:06:37Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/NodeRecordConverter.java", "diffHunk": "@@ -29,9 +36,19 @@\n \n   private static DiscoveryPeer socketAddressToDiscoveryPeer(\n       final NodeRecord nodeRecord, final InetSocketAddress address) {\n+\n+    Optional<EnrForkId> enrForkId =\n+        Optional.ofNullable((Bytes) nodeRecord.get(ETH2_ENR_FIELD))\n+            .map(enrField -> SimpleOffsetSerializer.deserialize(enrField, EnrForkId.class));\n+\n+    Bitvector persistentSubnets =\n+        Optional.ofNullable((Bytes) nodeRecord.get(ATTESTATION_SUBNET_ENR_FIELD))\n+            .map(\n+                attestionSubnetsField ->\n+                    Bitvector.fromBytes(attestionSubnetsField, ATTESTATION_SUBNET_COUNT))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2da97ae603e83e3d4e5ba01b05b8f43680a9a336"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI1NzQyMw==", "bodyText": "I needed to build on this so have added error handling for both ENR fields and merged. :)", "url": "https://github.com/ConsenSys/teku/pull/2320#discussion_r451257423", "createdAt": "2020-07-08T03:13:04Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/NodeRecordConverter.java", "diffHunk": "@@ -29,9 +36,19 @@\n \n   private static DiscoveryPeer socketAddressToDiscoveryPeer(\n       final NodeRecord nodeRecord, final InetSocketAddress address) {\n+\n+    Optional<EnrForkId> enrForkId =\n+        Optional.ofNullable((Bytes) nodeRecord.get(ETH2_ENR_FIELD))\n+            .map(enrField -> SimpleOffsetSerializer.deserialize(enrField, EnrForkId.class));\n+\n+    Bitvector persistentSubnets =\n+        Optional.ofNullable((Bytes) nodeRecord.get(ATTESTATION_SUBNET_ENR_FIELD))\n+            .map(\n+                attestionSubnetsField ->\n+                    Bitvector.fromBytes(attestionSubnetsField, ATTESTATION_SUBNET_COUNT))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3MTA5Mg=="}, "originalCommit": {"oid": "2da97ae603e83e3d4e5ba01b05b8f43680a9a336"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3521, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}