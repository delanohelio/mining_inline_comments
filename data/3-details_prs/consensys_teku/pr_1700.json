{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNzI3MzMz", "number": 1700, "title": "[BC-383] Add GetMetadata RPC method", "bodyText": "PR Description\nAdd GetMetadata RPC method\nCurrently the method is just ready but not used anywhere. Please let me know if any additional logic needs to be added at this stage.", "createdAt": "2020-04-30T17:19:07Z", "url": "https://github.com/ConsenSys/teku/pull/1700", "merged": true, "mergeCommit": {"oid": "ff6d2314047d6410298fd5d278a1fb83523c94aa"}, "closed": true, "closedAt": "2020-05-08T10:11:51Z", "author": {"login": "Nashatyrev"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccwUdSgH2gAyNDExNzI3MzMzOjE0ZDMxNjM1YjFiOTNlNWYyZTM2OTU2Zjg3ZGQzMTAwYzA2NmMwY2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfO3pNgH2gAyNDExNzI3MzMzOmVkMTM5NmEzMTM3NWYzYjIwYzY0YTI5N2M1MTE0NjlhYmI3Zjk4NWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "14d31635b1b93e5f2e36956f87dd3100c066c0cf", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/14d31635b1b93e5f2e36956f87dd3100c066c0cf", "committedDate": "2020-04-30T17:13:45Z", "message": "Add GetMetadata RPC method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzI1ODMy", "url": "https://github.com/ConsenSys/teku/pull/1700#pullrequestreview-403725832", "createdAt": "2020-04-30T17:23:00Z", "commit": {"oid": "14d31635b1b93e5f2e36956f87dd3100c066c0cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzoyMzowMVrOGOzBPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzoyMzowMVrOGOzBPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2OTE1MA==", "bodyText": "Each new subscriber receives the latest data. This method is not thread-safe but it's ok for now since we are subscribing on initialization step only. If no one minds I would add a reactive-streams dependency (I think Reactor it the best fit) and make this subscription stuff based on Publisher to not reinvent the wheel.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r418169150", "createdAt": "2020-04-30T17:23:01Z", "author": {"login": "Nashatyrev"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/AttestationSubnetService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2;\n+\n+import java.util.Collections;\n+import java.util.function.Consumer;\n+import tech.pegasys.artemis.util.events.Subscribers;\n+\n+/**\n+ * Service tracks long term attestation subnet subscriptions and notifies subscribers on their\n+ * changes\n+ */\n+public class AttestationSubnetService {\n+  private final Subscribers<Consumer<Iterable<Integer>>> subscribers = Subscribers.create(true);\n+  private volatile Iterable<Integer> currentSubscriptions = Collections.emptyList();\n+\n+  public void updateSubscriptions(final Iterable<Integer> subnetIndices) {\n+    subscribers.deliver(Consumer::accept, subnetIndices);\n+    currentSubscriptions = subnetIndices;\n+  }\n+\n+  public Iterable<Integer> getCurrentAttestatoinSubnetSubscriptions() {\n+    return currentSubscriptions;\n+  }\n+\n+  public long subscribeToUpdates(Consumer<Iterable<Integer>> observer) {\n+    observer.accept(getCurrentAttestatoinSubnetSubscriptions());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14d31635b1b93e5f2e36956f87dd3100c066c0cf"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3949706cd7f0ea48e7eb13f4ed7091c6633bc28", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/e3949706cd7f0ea48e7eb13f4ed7091c6633bc28", "committedDate": "2020-04-30T17:24:30Z", "message": "Remove unnecessary parentheses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "719851b827f749199bf3ee8f9f0715596c76a3cc", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/719851b827f749199bf3ee8f9f0715596c76a3cc", "committedDate": "2020-04-30T17:32:03Z", "message": "Fix the warning"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODY3NjY0", "url": "https://github.com/ConsenSys/teku/pull/1700#pullrequestreview-403867664", "createdAt": "2020-04-30T20:50:49Z", "commit": {"oid": "719851b827f749199bf3ee8f9f0715596c76a3cc"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo1MDo0OVrOGO53Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTowNjozNlrOGO6WZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4MTIxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(md3.getSeqNumber()).isNotEqualTo(md2.getSeqNumber());\n          \n          \n            \n                assertThat(md3.getSeqNumber()).isGreaterThan(md2.getSeqNumber());", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r418281218", "createdAt": "2020-04-30T20:50:49Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/integration-test/java/tech/pegasys/artemis/networking/eth2/GetMetadataIntegrationTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.datastructures.networking.libp2p.rpc.MetadataMessage;\n+import tech.pegasys.artemis.networking.eth2.peers.Eth2Peer;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class GetMetadataIntegrationTest {\n+  private final Eth2NetworkFactory networkFactory = new Eth2NetworkFactory();\n+  private Eth2Network network1;\n+  private Eth2Network network2;\n+  private Eth2Peer peer1;\n+\n+  @BeforeEach\n+  public void setUp() throws Exception {\n+    network1 = networkFactory.builder().startNetwork();\n+    network2 = networkFactory.builder().peer(network1).startNetwork();\n+    peer1 = network2.getPeer(network1.getNodeId()).orElseThrow();\n+  }\n+\n+  @AfterEach\n+  public void tearDown() {\n+    networkFactory.stopAll();\n+  }\n+\n+  @Test\n+  public void testCorrectMetadataSent() throws Exception {\n+    MetadataMessage md1 = peer1.requestMetadata().get(10, TimeUnit.SECONDS);\n+    MetadataMessage md2 = peer1.requestMetadata().get(10, TimeUnit.SECONDS);\n+\n+    assertThat(md1.getSeqNumber()).isEqualTo(md2.getSeqNumber());\n+    assertThat(md1.getAttnets().getSize()).isEqualTo(Constants.ATTESTATION_SUBNET_COUNT);\n+    assertThat(\n+            IntStream.range(0, Constants.ATTESTATION_SUBNET_COUNT)\n+                .map(i -> md1.getAttnets().getBit(i) ? 1 : 0)\n+                .sum())\n+        .isEqualTo(0);\n+    network1.setLongTermAttestationSubnetSubscriptions(List.of(0, 1, 8));\n+\n+    MetadataMessage md3 = peer1.requestMetadata().get(10, TimeUnit.SECONDS);\n+    assertThat(md3.getSeqNumber()).isNotEqualTo(md2.getSeqNumber());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719851b827f749199bf3ee8f9f0715596c76a3cc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4NTA5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public Iterable<Integer> getCurrentAttestatoinSubnetSubscriptions() {\n          \n          \n            \n              public Iterable<Integer> getCurrentAttestationSubnetSubscriptions() {", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r418285096", "createdAt": "2020-04-30T20:58:32Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/AttestationSubnetService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2;\n+\n+import java.util.Collections;\n+import java.util.function.Consumer;\n+import tech.pegasys.artemis.util.events.Subscribers;\n+\n+/**\n+ * Service tracks long term attestation subnet subscriptions and notifies subscribers on their\n+ * changes\n+ */\n+public class AttestationSubnetService {\n+  private final Subscribers<Consumer<Iterable<Integer>>> subscribers = Subscribers.create(true);\n+  private volatile Iterable<Integer> currentSubscriptions = Collections.emptyList();\n+\n+  public void updateSubscriptions(final Iterable<Integer> subnetIndices) {\n+    subscribers.deliver(Consumer::accept, subnetIndices);\n+    currentSubscriptions = subnetIndices;\n+  }\n+\n+  public Iterable<Integer> getCurrentAttestatoinSubnetSubscriptions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719851b827f749199bf3ee8f9f0715596c76a3cc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4NTQyMQ==", "bodyText": "Although actually we don't currently need this method if subscribeToUpdates just read currentSubscriptions directly.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r418285421", "createdAt": "2020-04-30T20:59:07Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/AttestationSubnetService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2;\n+\n+import java.util.Collections;\n+import java.util.function.Consumer;\n+import tech.pegasys.artemis.util.events.Subscribers;\n+\n+/**\n+ * Service tracks long term attestation subnet subscriptions and notifies subscribers on their\n+ * changes\n+ */\n+public class AttestationSubnetService {\n+  private final Subscribers<Consumer<Iterable<Integer>>> subscribers = Subscribers.create(true);\n+  private volatile Iterable<Integer> currentSubscriptions = Collections.emptyList();\n+\n+  public void updateSubscriptions(final Iterable<Integer> subnetIndices) {\n+    subscribers.deliver(Consumer::accept, subnetIndices);\n+    currentSubscriptions = subnetIndices;\n+  }\n+\n+  public Iterable<Integer> getCurrentAttestatoinSubnetSubscriptions() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4NTA5Ng=="}, "originalCommit": {"oid": "719851b827f749199bf3ee8f9f0715596c76a3cc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4NjI2NA==", "bodyText": "I'm not sure I see the threading issue here.  The Subscribers class is specifically intended for this kind of subscriber pattern and is thread safe.  current subscriptions is volatile so the only risk is if updateSubscriptions is passed something that's also modified externally (which is a problem even ignoring threads).\nI guess it's also possible that multiple threads make simultaneous calls to updateSubscriptions but there's no way to replace the whole list concurrently and not wind up losing one of the changes so it will have to be the upstream caller that handles that.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r418286264", "createdAt": "2020-04-30T21:00:42Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/AttestationSubnetService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2;\n+\n+import java.util.Collections;\n+import java.util.function.Consumer;\n+import tech.pegasys.artemis.util.events.Subscribers;\n+\n+/**\n+ * Service tracks long term attestation subnet subscriptions and notifies subscribers on their\n+ * changes\n+ */\n+public class AttestationSubnetService {\n+  private final Subscribers<Consumer<Iterable<Integer>>> subscribers = Subscribers.create(true);\n+  private volatile Iterable<Integer> currentSubscriptions = Collections.emptyList();\n+\n+  public void updateSubscriptions(final Iterable<Integer> subnetIndices) {\n+    subscribers.deliver(Consumer::accept, subnetIndices);\n+    currentSubscriptions = subnetIndices;\n+  }\n+\n+  public Iterable<Integer> getCurrentAttestatoinSubnetSubscriptions() {\n+    return currentSubscriptions;\n+  }\n+\n+  public long subscribeToUpdates(Consumer<Iterable<Integer>> observer) {\n+    observer.accept(getCurrentAttestatoinSubnetSubscriptions());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2OTE1MA=="}, "originalCommit": {"oid": "14d31635b1b93e5f2e36956f87dd3100c066c0cf"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4ODU0Nw==", "bodyText": "nit: Field can be final.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r418288547", "createdAt": "2020-04-30T21:05:05Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/rpc/beaconchain/methods/MetadataMessageFactory.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2.rpc.beaconchain.methods;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Consumer;\n+import tech.pegasys.artemis.datastructures.networking.libp2p.rpc.MetadataMessage;\n+import tech.pegasys.artemis.ssz.SSZTypes.Bitvector;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class MetadataMessageFactory implements Consumer<Iterable<Integer>> {\n+\n+  private AtomicLong seqNumberGenerator = new AtomicLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719851b827f749199bf3ee8f9f0715596c76a3cc"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4OTI1Mg==", "bodyText": "This doesn't seem to be used.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r418289252", "createdAt": "2020-04-30T21:06:36Z", "author": {"login": "ajsutton"}, "path": "util/src/main/java/tech/pegasys/artemis/util/events/Publisher.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.events;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.function.Consumer;\n+\n+public class Publisher<C> implements Consumer<C> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719851b827f749199bf3ee8f9f0715596c76a3cc"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4039b3cecfc95c1e1c12c02cfd902268bed978a7", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/4039b3cecfc95c1e1c12c02cfd902268bed978a7", "committedDate": "2020-05-01T09:53:38Z", "message": "Strengthen condition: metadata seq_number should increase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "362cb23f53d9b46361a27acac2df5bc4de5bccde", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/362cb23f53d9b46361a27acac2df5bc4de5bccde", "committedDate": "2020-05-01T09:54:43Z", "message": "Remove obsolete method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f6bd20f83122f07f0bb3a05e95fecd13785b25b", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/7f6bd20f83122f07f0bb3a05e95fecd13785b25b", "committedDate": "2020-05-01T09:55:44Z", "message": "Make field final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ac075a6a36a49543076ebb0ca200a2d1bf5ca2b", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/5ac075a6a36a49543076ebb0ca200a2d1bf5ca2b", "committedDate": "2020-05-01T09:58:52Z", "message": "Remove accidentally committed class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c02fdc8a9b2205c8785a2a40a4503f07f591cba", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/5c02fdc8a9b2205c8785a2a40a4503f07f591cba", "committedDate": "2020-05-01T10:54:15Z", "message": "Merge remote-tracking branch 'pegasys/master' into feature-rpc-get-metadata\n\n# Conflicts:\n#\tnetworking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/Eth2NetworkBuilder.java\n#\tnetworking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/peers/Eth2PeerManager.java\n#\tnetworking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/rpc/beaconchain/BeaconChainMethods.java\n#\tnetworking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/peers/Eth2PeerManagerTest.java\n#\tnetworking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/rpc/beaconchain/methods/BeaconChainMethodsTest.java\n#\tnetworking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/rpc/core/Eth2IncomingRequestHandlerTest.java\n#\tnetworking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/rpc/core/Eth2OutgoingRequestHandlerTest.java\n#\tnetworking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/rpc/core/RpcDecoderTestBase.java\n#\tnetworking/eth2/src/testFixtures/java/tech/pegasys/artemis/networking/eth2/Eth2NetworkFactory.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc36adeab34738bc7a1a78470405f28d754c834d", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/bc36adeab34738bc7a1a78470405f28d754c834d", "committedDate": "2020-05-01T11:59:05Z", "message": "Resolve merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6158b7965b55e57f49fce1f143858adae049bf44", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/6158b7965b55e57f49fce1f143858adae049bf44", "committedDate": "2020-05-04T23:44:44Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into feature-rpc-get-metadata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00637dbcfac0f1e8bbb637db78c771048cf7ae33", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/00637dbcfac0f1e8bbb637db78c771048cf7ae33", "committedDate": "2020-05-06T16:08:11Z", "message": "Make AttestationSubnetService thread safe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "609579653753fb637bacf30b629939747a1e894d", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/609579653753fb637bacf30b629939747a1e894d", "committedDate": "2020-05-06T16:08:29Z", "message": "Merge remote-tracking branch 'origin/feature-rpc-get-metadata' into feature-rpc-get-metadata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "542d804f226eec0452089bb0c476c3b6907fc82e", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/542d804f226eec0452089bb0c476c3b6907fc82e", "committedDate": "2020-05-06T16:12:17Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e3383c3c7334adf5988ff5e136bfc825aa48c80", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/6e3383c3c7334adf5988ff5e136bfc825aa48c80", "committedDate": "2020-05-07T15:27:32Z", "message": "Get rid of a dedicated thread for AttestationSubnetService in favor of ObservableValue class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "213904b6f3d40930c5cf179a3f88b60cb5895ae2", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/213904b6f3d40930c5cf179a3f88b60cb5895ae2", "committedDate": "2020-05-07T15:33:42Z", "message": "Fix the warn about Vector"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3OTA4OTc1", "url": "https://github.com/ConsenSys/teku/pull/1700#pullrequestreview-407908975", "createdAt": "2020-05-07T23:44:29Z", "commit": {"oid": "213904b6f3d40930c5cf179a3f88b60cb5895ae2"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzo0NDoyOVrOGSUDRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzo0OToyMVrOGSUJKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NjA2OA==", "bodyText": "It's probably worth creating a specific interface rather than using the generic Consumer here.  Makes it easier to understand where values are coming from in the classes that implement it.  Something like ValueObserver with an onValueChanged method.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r421856068", "createdAt": "2020-05-07T23:44:29Z", "author": {"login": "ajsutton"}, "path": "util/src/main/java/tech/pegasys/teku/util/events/ObservableValue.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.events;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.function.Consumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * A value holder class which notifies subscribers on value updates\n+ *\n+ * <p>The key feature of this class is that upon subscription a new subscriber is always notified on\n+ * the current value (if the value exist) and this is performed in a thread-safe manner such that\n+ * {@link #set(Object)} and {@link #subscribe(Consumer)} methods can be safely called from different\n+ * threads\n+ *\n+ * <p>All subscribers are guaranteed:\n+ *\n+ * <ul>\n+ *   <li>to be always notified on the latest value\n+ *   <li>to be notified on each value just once\n+ *   <li>to be notified in the right order if the {@link #set(Object)} is invoked on the same thread\n+ * </ul>\n+ *\n+ * Initially the holder has no value so added subscribers are not notified upon subscription\n+ *\n+ * @param <C> Value type\n+ */\n+public class ObservableValue<C> {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private static final class Subscription<C> {\n+    private final Consumer<C> subscriber;\n+    private final long subscriptionId;\n+\n+    public Subscription(Consumer<C> subscriber, long subscriptionId) {\n+      this.subscriber = subscriber;\n+      this.subscriptionId = subscriptionId;\n+    }\n+\n+    public Consumer<C> getSubscriber() {\n+      return subscriber;\n+    }\n+\n+    public long getSubscriptionId() {\n+      return subscriptionId;\n+    }\n+  }\n+\n+  private long idCounter = 0;\n+  private final List<Subscription<C>> subscriptions = new CopyOnWriteArrayList<>();\n+  private C curValue;\n+  private final boolean suppressCallbackExceptions;\n+\n+  /**\n+   * Creates instance\n+   *\n+   * @param suppressCallbackExceptions if true then any exceptions thrown from a subscriber update\n+   *     callback are just printed to the log\n+   */\n+  public ObservableValue(boolean suppressCallbackExceptions) {\n+    this.suppressCallbackExceptions = suppressCallbackExceptions;\n+  }\n+\n+  /**\n+   * Subscribe to value update notification\n+   *\n+   * <p>New subscriber is notified on the latest value if the value exist\n+   *\n+   * @return subscription ID to be used for {@link #unsubscribe(long)}\n+   */\n+  public synchronized long subscribe(Consumer<C> subscriber) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "213904b6f3d40930c5cf179a3f88b60cb5895ae2"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NjU4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>The key feature of this class is that upon subscription a new subscriber is always notified on\n          \n          \n            \n             * the current value (if the value exist) and this is performed in a thread-safe manner such that\n          \n          \n            \n             * <p>The key feature of this class is that upon subscription a new subscriber is always notified of\n          \n          \n            \n             * the current value (if the value exists) and this is performed in a thread-safe manner such that", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r421856589", "createdAt": "2020-05-07T23:46:00Z", "author": {"login": "ajsutton"}, "path": "util/src/main/java/tech/pegasys/teku/util/events/ObservableValue.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.events;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.function.Consumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * A value holder class which notifies subscribers on value updates\n+ *\n+ * <p>The key feature of this class is that upon subscription a new subscriber is always notified on\n+ * the current value (if the value exist) and this is performed in a thread-safe manner such that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "213904b6f3d40930c5cf179a3f88b60cb5895ae2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NzA0Nw==", "bodyText": "Stray println.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r421857047", "createdAt": "2020-05-07T23:47:37Z", "author": {"login": "ajsutton"}, "path": "util/src/test/java/tech/pegasys/teku/util/events/ObservableValueTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.events;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.Test;\n+\n+public class ObservableValueTest {\n+\n+  @Test\n+  public void testConcurrentSubscribersNotifications() throws InterruptedException {\n+    ObservableValue<Integer> observableValue = new ObservableValue<>(false);\n+    class Listener implements Consumer<Integer> {\n+      int val;\n+\n+      @Override\n+      public void accept(Integer integer) {\n+        if (val == -2 || integer <= val) {\n+          throw new RuntimeException();\n+        }\n+        val = integer;\n+      }\n+    }\n+\n+    List<Listener> listeners = Collections.synchronizedList(new ArrayList<>());\n+    int threadCnt = 64;\n+    CountDownLatch startLatch = new CountDownLatch(threadCnt);\n+    CountDownLatch stopLatch = new CountDownLatch(threadCnt);\n+\n+    Runnable runnable =\n+        () -> {\n+          while (!Thread.interrupted()) {\n+            Listener listener = new Listener();\n+            observableValue.subscribe(listener);\n+            listeners.add(listener);\n+            startLatch.countDown();\n+          }\n+          stopLatch.countDown();\n+        };\n+\n+    List<Thread> threads =\n+        Stream.generate(() -> runnable)\n+            .map(Thread::new)\n+            .peek(Thread::start)\n+            .limit(threadCnt)\n+            .collect(Collectors.toList());\n+\n+    startLatch.await(5, TimeUnit.SECONDS);\n+    observableValue.set(777);\n+    threads.forEach(Thread::interrupt);\n+    stopLatch.await(5, TimeUnit.SECONDS);\n+\n+    System.out.println(\"Listeners: \" + listeners.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "213904b6f3d40930c5cf179a3f88b60cb5895ae2"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NzU3Ng==", "bodyText": "Maybe use Assertions.fail here and provide a message.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r421857576", "createdAt": "2020-05-07T23:49:21Z", "author": {"login": "ajsutton"}, "path": "util/src/test/java/tech/pegasys/teku/util/events/ObservableValueTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.events;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.Test;\n+\n+public class ObservableValueTest {\n+\n+  @Test\n+  public void testConcurrentSubscribersNotifications() throws InterruptedException {\n+    ObservableValue<Integer> observableValue = new ObservableValue<>(false);\n+    class Listener implements Consumer<Integer> {\n+      int val;\n+\n+      @Override\n+      public void accept(Integer integer) {\n+        if (val == -2 || integer <= val) {\n+          throw new RuntimeException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "213904b6f3d40930c5cf179a3f88b60cb5895ae2"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dac38a67293221bb77a54677a9ae7de576106099", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/dac38a67293221bb77a54677a9ae7de576106099", "committedDate": "2020-05-08T08:44:11Z", "message": "Merge remote-tracking branch 'pegasys/master' into feature-rpc-get-metadata\n\n# Conflicts:\n#\tnetworking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/ActiveEth2Network.java\n#\tnetworking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2NetworkBuilder.java\n#\tnetworking/eth2/src/testFixtures/java/tech/pegasys/teku/networking/eth2/Eth2NetworkFactory.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15103cb077c2b6cc29cb34aca462a1f3293e8d07", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/15103cb077c2b6cc29cb34aca462a1f3293e8d07", "committedDate": "2020-05-08T09:12:16Z", "message": "Resolve merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "354cb7abf410c1ed80677e5b2864dd0e9363c5a3", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/354cb7abf410c1ed80677e5b2864dd0e9363c5a3", "committedDate": "2020-05-08T09:36:20Z", "message": "Add ValueObserver interface instead of generic Consumer. Other minor updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed1396a31375f3b20c64a297c511469abb7f985a", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/ed1396a31375f3b20c64a297c511469abb7f985a", "committedDate": "2020-05-08T09:57:11Z", "message": "Revert accidentally committed change"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4146, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}