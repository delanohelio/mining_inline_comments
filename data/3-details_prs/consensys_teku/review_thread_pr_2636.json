{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxMzcxODkx", "number": 2636, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjo1OToxM1rOEb7dSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzowNDo0OVrOEb7kRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzIxMTYxOnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/AbstractDutyScheduler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjo1OToxM1rOHGKJlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTo1OToxNVrOHGnokg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxOTc5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                LOG.debug(\"Chain reorganisation detected. Recalculating validator attestation duties\");\n          \n          \n            \n                LOG.debug(\"Chain reorganisation detected. Recalculating validator duties\");\n          \n      \n    \n    \n  \n\nsince this is the base class used for both attestations and blocks. Or just remove this and leave logging to the subclasses.", "url": "https://github.com/ConsenSys/teku/pull/2636#discussion_r476219799", "createdAt": "2020-08-25T06:59:13Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/AbstractDutyScheduler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+\n+import java.util.NavigableMap;\n+import java.util.TreeMap;\n+import java.util.function.BiConsumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.validator.api.ValidatorTimingChannel;\n+\n+public abstract class AbstractDutyScheduler implements ValidatorTimingChannel {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final DutyLoader epochDutiesScheduler;\n+\n+  protected final NavigableMap<UInt64, DutyQueue> dutiesByEpoch = new TreeMap<>();\n+\n+  protected AbstractDutyScheduler(final DutyLoader epochDutiesScheduler) {\n+    this.epochDutiesScheduler = epochDutiesScheduler;\n+  }\n+\n+  protected DutyQueue requestDutiesForEpoch(final UInt64 epochNumber) {\n+    return new DutyQueue(epochDutiesScheduler.loadDutiesForEpoch(epochNumber));\n+  }\n+\n+  protected void notifyDutyQueue(final BiConsumer<DutyQueue, UInt64> action, final UInt64 slot) {\n+    final DutyQueue dutyQueue = dutiesByEpoch.get(compute_epoch_at_slot(slot));\n+    if (dutyQueue != null) {\n+      action.accept(dutyQueue, slot);\n+    }\n+  }\n+\n+  @Override\n+  public void onSlot(final UInt64 slot) {\n+    final UInt64 epochNumber = compute_epoch_at_slot(slot);\n+    removePriorEpochs(epochNumber);\n+    dutiesByEpoch.computeIfAbsent(epochNumber, this::requestDutiesForEpoch);\n+  }\n+\n+  @Override\n+  public void onChainReorg(final UInt64 newSlot) {\n+    LOG.debug(\"Chain reorganisation detected. Recalculating validator attestation duties\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29969cdc63c0dd007ae77f499335131678f9ba34"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcwMjg2Ng==", "bodyText": "ah yes, i moved this yesterday last thing and didnt catch the message!", "url": "https://github.com/ConsenSys/teku/pull/2636#discussion_r476702866", "createdAt": "2020-08-25T19:59:15Z", "author": {"login": "rolfyone"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/AbstractDutyScheduler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+\n+import java.util.NavigableMap;\n+import java.util.TreeMap;\n+import java.util.function.BiConsumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.validator.api.ValidatorTimingChannel;\n+\n+public abstract class AbstractDutyScheduler implements ValidatorTimingChannel {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final DutyLoader epochDutiesScheduler;\n+\n+  protected final NavigableMap<UInt64, DutyQueue> dutiesByEpoch = new TreeMap<>();\n+\n+  protected AbstractDutyScheduler(final DutyLoader epochDutiesScheduler) {\n+    this.epochDutiesScheduler = epochDutiesScheduler;\n+  }\n+\n+  protected DutyQueue requestDutiesForEpoch(final UInt64 epochNumber) {\n+    return new DutyQueue(epochDutiesScheduler.loadDutiesForEpoch(epochNumber));\n+  }\n+\n+  protected void notifyDutyQueue(final BiConsumer<DutyQueue, UInt64> action, final UInt64 slot) {\n+    final DutyQueue dutyQueue = dutiesByEpoch.get(compute_epoch_at_slot(slot));\n+    if (dutyQueue != null) {\n+      action.accept(dutyQueue, slot);\n+    }\n+  }\n+\n+  @Override\n+  public void onSlot(final UInt64 slot) {\n+    final UInt64 epochNumber = compute_epoch_at_slot(slot);\n+    removePriorEpochs(epochNumber);\n+    dutiesByEpoch.computeIfAbsent(epochNumber, this::requestDutiesForEpoch);\n+  }\n+\n+  @Override\n+  public void onChainReorg(final UInt64 newSlot) {\n+    LOG.debug(\"Chain reorganisation detected. Recalculating validator attestation duties\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxOTc5OQ=="}, "originalCommit": {"oid": "29969cdc63c0dd007ae77f499335131678f9ba34"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzIyMzk1OnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/AbstractDutyScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzowMjo1M1rOHGKQrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzowMjo1M1rOHGKQrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIyMTYxMg==", "bodyText": "Probably worth extracting a dedicated method to compute duties relative to a given epoch (ie this line) which the attestation duties scheduler would override to calculate for this epoch and next rather than having to override both onSlot and onReorg to do it.", "url": "https://github.com/ConsenSys/teku/pull/2636#discussion_r476221612", "createdAt": "2020-08-25T07:02:53Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/AbstractDutyScheduler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+\n+import java.util.NavigableMap;\n+import java.util.TreeMap;\n+import java.util.function.BiConsumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.validator.api.ValidatorTimingChannel;\n+\n+public abstract class AbstractDutyScheduler implements ValidatorTimingChannel {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final DutyLoader epochDutiesScheduler;\n+\n+  protected final NavigableMap<UInt64, DutyQueue> dutiesByEpoch = new TreeMap<>();\n+\n+  protected AbstractDutyScheduler(final DutyLoader epochDutiesScheduler) {\n+    this.epochDutiesScheduler = epochDutiesScheduler;\n+  }\n+\n+  protected DutyQueue requestDutiesForEpoch(final UInt64 epochNumber) {\n+    return new DutyQueue(epochDutiesScheduler.loadDutiesForEpoch(epochNumber));\n+  }\n+\n+  protected void notifyDutyQueue(final BiConsumer<DutyQueue, UInt64> action, final UInt64 slot) {\n+    final DutyQueue dutyQueue = dutiesByEpoch.get(compute_epoch_at_slot(slot));\n+    if (dutyQueue != null) {\n+      action.accept(dutyQueue, slot);\n+    }\n+  }\n+\n+  @Override\n+  public void onSlot(final UInt64 slot) {\n+    final UInt64 epochNumber = compute_epoch_at_slot(slot);\n+    removePriorEpochs(epochNumber);\n+    dutiesByEpoch.computeIfAbsent(epochNumber, this::requestDutiesForEpoch);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29969cdc63c0dd007ae77f499335131678f9ba34"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NzIyOTUxOnYy", "diffSide": "LEFT", "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/AttestationDutySchedulerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzowNDo0OVrOHGKT9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNzowNDo0OVrOHGKT9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIyMjQ1NQ==", "bodyText": "This is an important test to keep for the attestation duty scheduler but will have to be converted to checking it doesn't publish attestations for the same slot rather than blocks in this case.", "url": "https://github.com/ConsenSys/teku/pull/2636#discussion_r476222455", "createdAt": "2020-08-25T07:04:49Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/AttestationDutySchedulerTest.java", "diffHunk": "@@ -264,43 +175,14 @@ public void shouldDelayExecutingDutiesUntilSchedulingIsComplete() {\n     dutyScheduler.onAttestationCreationDue(ZERO);\n     dutyScheduler.onAttestationAggregationDue(ZERO);\n     // Duties haven't been loaded yet.\n-    verify(scheduledDuties, never()).produceBlock(ZERO);\n     verify(scheduledDuties, never()).produceAttestations(ZERO);\n     verify(scheduledDuties, never()).performAggregation(ZERO);\n \n     epoch0Duties.complete(Optional.of(emptyList()));\n-    verify(scheduledDuties).produceBlock(ZERO);\n     verify(scheduledDuties).produceAttestations(ZERO);\n     verify(scheduledDuties).performAggregation(ZERO);\n   }\n \n-  @Test\n-  public void shouldNotPerformDutiesForSameSlotTwice() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29969cdc63c0dd007ae77f499335131678f9ba34"}, "originalPosition": 154}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3337, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}