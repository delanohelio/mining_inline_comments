{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMTQyODE3", "number": 1465, "title": "Optimize backing views", "bodyText": "PR Description\nThis is the follow up to #1133 which had a naive backing tree views implementations with pretty straightforward read/write code (i.e. traverse the whole tree path on every read and modify the whole tree path on every write) which resulted in 4x epoch processing time increase comparing to POJO BeaconState implementation.\nThis PR optimizes backing views:\n\nread-only views cache their child views so the composite view traverse performance is somewhat near array traverse\na mutable view has backing immutable view plus changes accumulated in a simple HashMap (no backing tree modifications are done prior to commitChanges)\nWhen doing commitChanges the changes accumulated in a mutable view are merged with backing immutable view cache to form the created immutable view cache in place. Also the backing binary tree is built in batched manner. This way the view objects which are not changed need not be recreated across any number of transitions.\n\nThe Validator container was made immutable for performance reasons: the changes to Validator is pretty rare comparing to reads.\nDeprecate BeaconState.createWritableCopy() in favor of BeaconState.updated(Consumer<MutableBeaconState>) to restrict the scope of using MutableBeaconState instances and enforce immutable instances usage.\nPiggy tailing a couple of bonus optimizations to this PR which won another ~20% of performance:\n\n12d666e\n6c49148\n91830d4\n\nBenchmarks:\nThe preliminary result is that epoch transition speed up is ~4x and is almost the same as original POJO BeaconState implementation.\nBefore:\nBenchmark                              (validatorsCount)  Mode  Cnt  Score   Error  Units\nTransitionBenchmark.Block.importBlock              16384    ss   50  0,266 \u00b1 0,005   s/op\nTransitionBenchmark.Block.importBlock              32768    ss   50  0,387 \u00b1 0,004   s/op\nTransitionBenchmark.Epoch.importBlock              16384    ss   10  0,897 \u00b1 0,042   s/op\nTransitionBenchmark.Epoch.importBlock              32768    ss   10  1,638 \u00b1 0,018   s/op\n\nAfter:\nBenchmark                              (validatorsCount)  Mode  Cnt  Score   Error  Units\nTransitionBenchmark.Block.importBlock              16384    ss  250  0,152 \u00b1 0,004   s/op\nTransitionBenchmark.Block.importBlock              32768    ss  250  0,183 \u00b1 0,003   s/op\nTransitionBenchmark.Epoch.importBlock              16384    ss  100  0,322 \u00b1 0,005   s/op\nTransitionBenchmark.Epoch.importBlock              32768    ss  100  0,559 \u00b1 0,020   s/op\n\nAfter (with bonus optimizations):\nBenchmark                              (validatorsCount)  Mode  Cnt  Score   Error  Units\nTransitionBenchmark.Block.importBlock              16384    ss  250  0,121 \u00b1 0,002   s/op\nTransitionBenchmark.Block.importBlock              32768    ss  250  0,146 \u00b1 0,004   s/op\nTransitionBenchmark.Epoch.importBlock              16384    ss  100  0,266 \u00b1 0,007   s/op\nTransitionBenchmark.Epoch.importBlock              32768    ss  100  0,452 \u00b1 0,009   s/op\n\nBlock processing time most likely improved due to the new BLS scheme and has nothing with this PR changes", "createdAt": "2020-03-24T17:26:41Z", "url": "https://github.com/ConsenSys/teku/pull/1465", "merged": true, "mergeCommit": {"oid": "73c6879b29c87b835786d7a3f1d010eccd4f1991"}, "closed": true, "closedAt": "2020-04-03T15:57:09Z", "author": {"login": "Nashatyrev"}, "timelineItems": {"totalCount": 85, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKuuCzgH2gAyMzkzMTQyODE3OjViZWE5ZGE3MDIxZDFhNTIyNTUxOWI2Y2QyN2EyYmU5MDZkZWUwMjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUCxG6gH2gAyMzkzMTQyODE3OjE1MTQyYzFiMjA0YTY0M2ZhOTYzMTcwZGYyMjQ0Mzg0ZDBhNjRkOTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5bea9da7021d1a5225519b6cd27a2be906dee026", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/5bea9da7021d1a5225519b6cd27a2be906dee026", "committedDate": "2020-03-05T17:11:15Z", "message": "Cache composites type size and List size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77fa9a2cf96415649c335282391a3a97aad57e24", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/77fa9a2cf96415649c335282391a3a97aad57e24", "committedDate": "2020-03-06T15:48:09Z", "message": "Temp commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8db4d42caffa9d249932ffe05721e2c2cd583d7a", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/8db4d42caffa9d249932ffe05721e2c2cd583d7a", "committedDate": "2020-03-06T20:00:17Z", "message": "Add BeaconStateBenchmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0f9c28230b1f7ff61e4027a0099a63256465def", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/f0f9c28230b1f7ff61e4027a0099a63256465def", "committedDate": "2020-03-12T07:52:54Z", "message": "Temp commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "878a03fc43d41d8c396845dd26c67b406d493014", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/878a03fc43d41d8c396845dd26c67b406d493014", "committedDate": "2020-03-12T11:31:26Z", "message": "Temp commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c695f3a0b1f9c7abc8b290b00289f853b062897", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/5c695f3a0b1f9c7abc8b290b00289f853b062897", "committedDate": "2020-03-17T12:23:42Z", "message": "Draft working version of read/write view implementations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3902b4550af0d7bbbc6962bc4994e71a25dc91ff", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/3902b4550af0d7bbbc6962bc4994e71a25dc91ff", "committedDate": "2020-03-18T16:05:57Z", "message": "Name method correctly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79f32560793c921594ecabbb93a2000d22ede454", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/79f32560793c921594ecabbb93a2000d22ede454", "committedDate": "2020-03-19T09:03:36Z", "message": "First semi-working version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "499bdc45f3abd9038ca6eac2cc577b86b1f270af", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/499bdc45f3abd9038ca6eac2cc577b86b1f270af", "committedDate": "2020-03-19T16:57:27Z", "message": "Cache square_root(total_balance)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80df46e1c9c874bb8a48a3957b74ae8974b5da9e", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/80df46e1c9c874bb8a48a3957b74ae8974b5da9e", "committedDate": "2020-03-19T17:54:20Z", "message": "Some more fixes, changes optimizations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cf8a6c52a05970b52d7c8a3707a96c7ca006d0b", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/8cf8a6c52a05970b52d7c8a3707a96c7ca006d0b", "committedDate": "2020-03-19T18:00:53Z", "message": "Replace AbstractImmutableContainer with a brand new implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fab6544e0040e1e480401d97963c64cfb4c4191", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/3fab6544e0040e1e480401d97963c64cfb4c4191", "committedDate": "2020-03-20T10:57:09Z", "message": "Refactor Validator classes to a new base"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9539652057bfc2c483e6014e1ba9c9b978e3e265", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/9539652057bfc2c483e6014e1ba9c9b978e3e265", "committedDate": "2020-03-20T13:31:28Z", "message": "Make BeaconState iteration GC-less"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c68c57a2033f7321b4317120c70d77c03676c2f", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/8c68c57a2033f7321b4317120c70d77c03676c2f", "committedDate": "2020-03-20T13:32:18Z", "message": "Make BeaconState iteration GC-less"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dd850ea800ffcdb3dca156791218b84557f4091", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/2dd850ea800ffcdb3dca156791218b84557f4091", "committedDate": "2020-03-20T14:22:00Z", "message": "Predefined view cache sizes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ea13a8c42e6409d5c9f88989c101673d937cd51", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/7ea13a8c42e6409d5c9f88989c101673d937cd51", "committedDate": "2020-03-20T15:06:13Z", "message": "Optimize: get hash_tree_root after commitChanges"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a011e721e3d2af6c2d2f96cb4b1b164931796615", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/a011e721e3d2af6c2d2f96cb4b1b164931796615", "committedDate": "2020-03-23T14:41:35Z", "message": "Add cached SSZCollections to [Mutable]BeaconState"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccf7ee5effb6d5155e4758d162d33c7c3647c955", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/ccf7ee5effb6d5155e4758d162d33c7c3647c955", "committedDate": "2020-03-23T17:38:34Z", "message": "Make Validator container immutable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17c80c661c57e7755c28c53b6c3a6bbdae3ea246", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/17c80c661c57e7755c28c53b6c3a6bbdae3ea246", "committedDate": "2020-03-23T18:03:10Z", "message": "Merge remote-tracking branch 'origin/optimize-backing-views' into optimize-backing-views\n\n# Conflicts:\n#\tethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/state/MutableValidatorImpl.java\n#\tethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/state/ValidatorImpl.java\n#\tutil/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java\n#\tutil/src/main/java/tech/pegasys/artemis/util/backing/view/ContainerViewReadImpl.java\n#\tutil/src/main/java/tech/pegasys/artemis/util/backing/view/VectorViewReadImpl.java\n#\tutil/src/main/java/tech/pegasys/artemis/util/cache/ArrayCache.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdc1a63552b8eb5a97ca2a27e0c6d3f70559b6d0", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/fdc1a63552b8eb5a97ca2a27e0c6d3f70559b6d0", "committedDate": "2020-03-23T18:10:50Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "188ecbbf9745fe43f84119c30a65ce8fcad0247e", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/188ecbbf9745fe43f84119c30a65ce8fcad0247e", "committedDate": "2020-03-23T18:16:02Z", "message": "Remove obsolete method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d37288b120f7d364b2d3538753ee825676a1339", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/3d37288b120f7d364b2d3538753ee825676a1339", "committedDate": "2020-03-24T10:47:52Z", "message": "Get rid of obsolete classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67b34af8dde38bf5c67a8932e1895b79d6720ff5", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/67b34af8dde38bf5c67a8932e1895b79d6720ff5", "committedDate": "2020-03-24T12:45:37Z", "message": "Uncomment back BLS verification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bd85472967ed03b812a82d031b41057ee3c4f19", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/9bd85472967ed03b812a82d031b41057ee3c4f19", "committedDate": "2020-03-24T13:21:17Z", "message": "Fix the test to work correctly on Win"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cab4fd79d1257a24c7b85db10c17a8c587160e68", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/cab4fd79d1257a24c7b85db10c17a8c587160e68", "committedDate": "2020-03-24T13:22:43Z", "message": "Fix BeaconState mutable instance lifecycle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dc15afd28d6914b3b9bb5da416c98bab61c1b20", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/2dc15afd28d6914b3b9bb5da416c98bab61c1b20", "committedDate": "2020-03-24T13:42:53Z", "message": "Suppress/check warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "930247d3a2f20186b0db4db38616636027c1c241", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/930247d3a2f20186b0db4db38616636027c1c241", "committedDate": "2020-03-24T16:06:09Z", "message": "temp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b61c6535fdeb14204705a502a44873c983f4cdc5", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/b61c6535fdeb14204705a502a44873c983f4cdc5", "committedDate": "2020-03-24T17:50:11Z", "message": "Rough merge with head"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33d5115dcbde84839ade806de297dbe9996ab998", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/33d5115dcbde84839ade806de297dbe9996ab998", "committedDate": "2020-03-25T16:22:36Z", "message": "Initial merge conflicts fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74f40c7846119ce941666077c0877c67553745dd", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/74f40c7846119ce941666077c0877c67553745dd", "committedDate": "2020-03-25T17:11:56Z", "message": "Fix random state generation: decrease number of generated items"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f953cc70f9691894d59ef6be024a32e92e4214d3", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/f953cc70f9691894d59ef6be024a32e92e4214d3", "committedDate": "2020-03-25T17:39:27Z", "message": "Optimize random BeaconState generation for benchmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4de1c43b4b61c072f09962f772fd4eba3ce68c9f", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/4de1c43b4b61c072f09962f772fd4eba3ce68c9f", "committedDate": "2020-03-25T17:58:44Z", "message": "Fix tests on Windows"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fc44ee77023b80d51b6cbd8d5b5365dc3a03f4a", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/9fc44ee77023b80d51b6cbd8d5b5365dc3a03f4a", "committedDate": "2020-03-25T18:07:51Z", "message": "Split cache classes onto general purpose and ssz backing specific"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "181e8547146127cde62ae23df799b366635007e1", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/181e8547146127cde62ae23df799b366635007e1", "committedDate": "2020-03-25T18:34:25Z", "message": "Add MutableBeaconState toString(), equals(), hashCode()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a01633de6ded2fb9d7c464dd8bd73a9cbb1f46d7", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/a01633de6ded2fb9d7c464dd8bd73a9cbb1f46d7", "committedDate": "2020-03-25T18:36:25Z", "message": "Merge remote-tracking branch 'pegasys/master' into optimize-backing-views\n\n# Conflicts:\n#\tdata/keystore/src/test/java/tech/pegasys/artemis/bls/keystore/KeyStoreTest.java\n#\tvalidator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java\n#\tvalidator/coordinator/src/test/java/tech/pegasys/artemis/validator/coordinator/ValidatorApiHandlerTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2aef09c1712960fadc686999d8adee124da4d60f", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/2aef09c1712960fadc686999d8adee124da4d60f", "committedDate": "2020-03-25T19:08:59Z", "message": "Resolve merge issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "030420496d05cd4bce599c89f535ae165aa3c404", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/030420496d05cd4bce599c89f535ae165aa3c404", "committedDate": "2020-03-25T19:28:19Z", "message": "Create immutable BeaconState for BlockProposalUtil"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f093a7d1378a7bb51fe25d210fb4b9372fe6eb45", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/f093a7d1378a7bb51fe25d210fb4b9372fe6eb45", "committedDate": "2020-03-26T12:14:09Z", "message": "Do MutableBeaconState.commitChanges()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41f2c1b71178b035611bf6598058bf3cd64cff38", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/41f2c1b71178b035611bf6598058bf3cd64cff38", "committedDate": "2020-03-26T12:15:03Z", "message": "Implement optimized backing tree batch update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4b97df5a3d902a4c966a3313dd1b56db433022e", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/d4b97df5a3d902a4c966a3313dd1b56db433022e", "committedDate": "2020-03-26T12:32:38Z", "message": "Add benchmark to measure all state balances update perf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "349cecc444610f7d267ce9e9caee764fdaf7eec7", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/349cecc444610f7d267ce9e9caee764fdaf7eec7", "committedDate": "2020-03-26T12:44:54Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f687dc209ef48aabcbbe979d7ee9db1845e726ad", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/f687dc209ef48aabcbbe979d7ee9db1845e726ad", "committedDate": "2020-03-26T12:51:43Z", "message": "Fix errorprone warn"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e999701765e01caa7d348f07f3d7807d89c1fa0", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/1e999701765e01caa7d348f07f3d7807d89c1fa0", "committedDate": "2020-03-26T13:31:20Z", "message": "Fix a bug: should sort after grouping to a map"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32d03c832a9dc718870ddc5bf894f1a4f7755867", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/32d03c832a9dc718870ddc5bf894f1a4f7755867", "committedDate": "2020-03-26T16:36:14Z", "message": "Limit the scope of MutableBeaconState to avoid leaking mutable instances instead of immutable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4800339c1c72f2d8590270875481776f5a5c21ce", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/4800339c1c72f2d8590270875481776f5a5c21ce", "committedDate": "2020-03-26T16:44:29Z", "message": "Return back BLS validations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c281b7effb26c77b0ea395e2207e34f69945876", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/6c281b7effb26c77b0ea395e2207e34f69945876", "committedDate": "2020-03-26T17:08:14Z", "message": "Fix passing mutable beacon state to the method requiring immutable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25ec3352d46fc721dfed7125739a58c5d5bdb4ee", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/25ec3352d46fc721dfed7125739a58c5d5bdb4ee", "committedDate": "2020-03-26T17:12:45Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61b9d09722fd64381c66b1d7f98a62f97e45ade2", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/61b9d09722fd64381c66b1d7f98a62f97e45ade2", "committedDate": "2020-03-26T18:17:54Z", "message": "Make minor refactorings, add javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33198baf461a693db79cb5227a45b2917786cd04", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/33198baf461a693db79cb5227a45b2917786cd04", "committedDate": "2020-03-26T18:20:23Z", "message": "Merge remote-tracking branch 'pegasys/master' into optimize-backing-views\n\n# Conflicts:\n#\tstorage/src/test/java/tech/pegasys/artemis/storage/VersionedDatabaseFactoryTest.java\n#\tvalidator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1268c5451ca7006a6cf37722c95ba8e9bab5be8", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/a1268c5451ca7006a6cf37722c95ba8e9bab5be8", "committedDate": "2020-03-27T11:17:56Z", "message": "Regenerate keys and blocks dumps for the spec version 0.10.x"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "567fcf9c7ec8cbfd22bdf816579006e3461524c4", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/567fcf9c7ec8cbfd22bdf816579006e3461524c4", "committedDate": "2020-03-27T14:13:08Z", "message": "Eliminate extra hash_tree_root call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12d666e397980ba560bc698328e8282dd1e59946", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/12d666e397980ba560bc698328e8282dd1e59946", "committedDate": "2020-03-27T14:13:15Z", "message": "Optimization: for ArrayCache synchronize only modification access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/6c49148318bdbbd357d399f00d02351e27cc0727", "committedDate": "2020-03-27T14:41:10Z", "message": "Pre calculate base_rewards instead of re-calculating them inline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79d76e8719020e70c5dfc7be85a3c5041b0443b3", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/79d76e8719020e70c5dfc7be85a3c5041b0443b3", "committedDate": "2020-03-27T14:56:53Z", "message": "Merge remote-tracking branch 'pegasys/master' into optimize-backing-views\n\n# Conflicts:\n#\tvalidator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java\n#\tvalidator/coordinator/src/test/java/tech/pegasys/artemis/validator/coordinator/ValidatorApiHandlerTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc5c7223e7146ed7780d656c0b84d5df4e5e820e", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/cc5c7223e7146ed7780d656c0b84d5df4e5e820e", "committedDate": "2020-03-30T12:46:01Z", "message": "Merge remote-tracking branch 'pegasys/master' into optimize-backing-views\n\n# Conflicts:\n#\teth-benchmark-tests/src/jmh/java/tech/pegasys/artemis/benchmarks/ProfilingRun.java\n#\tvalidator/coordinator/src/test/java/tech/pegasys/artemis/validator/coordinator/ValidatorApiHandlerTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32299f99b1a8b957cbad6e59c0095a48e94df638", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/32299f99b1a8b957cbad6e59c0095a48e94df638", "committedDate": "2020-03-30T13:16:27Z", "message": "Apply spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMzc2ODg2", "url": "https://github.com/ConsenSys/teku/pull/1465#pullrequestreview-382376886", "createdAt": "2020-03-26T20:09:56Z", "commit": {"oid": "33198baf461a693db79cb5227a45b2917786cd04"}, "state": "COMMENTED", "comments": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDowOTo1N1rOF8Ye-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTowMTo1MlrOF9uF5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg2MDAyNw==", "bodyText": "Wouldn't it be more efficient to accumulate all of the changes on a single MutableBeaconState and commit the changes once?  Wondering if these methods that mutate state should all just accept a MutableBeaconState?", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r398860027", "createdAt": "2020-03-26T20:09:57Z", "author": {"login": "mbaxter"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateTransition.java", "diffHunk": "@@ -136,98 +135,105 @@ public BeaconState initiate(BeaconState state, SignedBeaconBlock block)\n    * https://github.com/ethereum/eth2.0-specs/blob/v0.7.1/specs/core/0_beacon-chain.md#beacon-chain-state-transition-function\n    * Processes block\n    *\n-   * @param state\n-   * @param block\n    * @throws BlockProcessingException\n    */\n-  private void process_block(\n-      MutableBeaconState state, BeaconBlock block, boolean validateStateRootAndSignatures)\n+  private BeaconState process_block(\n+      BeaconState preState, BeaconBlock block, boolean validateStateRootAndSignatures)\n       throws BlockProcessingException {\n-    process_block_header(state, block);\n-    process_randao(state, block.getBody(), validateStateRootAndSignatures);\n-    process_eth1_data(state, block.getBody());\n-    process_operations(state, block.getBody());\n+    return preState.updated(\n+        state -> {\n+          process_block_header(state, block);\n+          process_randao(state, block.getBody(), validateStateRootAndSignatures);\n+          process_eth1_data(state, block.getBody());\n+          process_operations(state, block.getBody());\n+        });\n   }\n \n   /**\n    * v0.7.1\n    * https://github.com/ethereum/eth2.0-specs/blob/v0.7.1/specs/core/0_beacon-chain.md#beacon-chain-state-transition-function\n    * Processes epoch\n    *\n-   * @param state\n    * @throws EpochProcessingException\n    */\n-  private static void process_epoch(MutableBeaconState state) throws EpochProcessingException {\n-    // Note: the lines with @ label here will be inserted here in a future phase\n-    process_justification_and_finalization(state);\n-    process_rewards_and_penalties(state);\n-    process_registry_updates(state);\n-    // @process_reveal_deadlines\n-    // @process_challenge_deadlines\n-    process_slashings(state);\n-    // @update_period_committee\n-    process_final_updates(state);\n-    // @after_process_final_updates\n+  private static BeaconState process_epoch(BeaconState preState) throws EpochProcessingException {\n+    return preState.updated(\n+        state -> {\n+          // Note: the lines with @ label here will be inserted here in a future phase\n+          process_justification_and_finalization(state);\n+          process_rewards_and_penalties(state);\n+          process_registry_updates(state);\n+          // @process_reveal_deadlines\n+          // @process_challenge_deadlines\n+          process_slashings(state);\n+          // @update_period_committee\n+          process_final_updates(state);\n+          // @after_process_final_updates\n+        });\n   }\n \n   /**\n    * v0.7.1\n    * https://github.com/ethereum/eth2.0-specs/blob/v0.7.1/specs/core/0_beacon-chain.md#beacon-chain-state-transition-function\n    * Processes slot\n-   *\n-   * @param state\n    */\n-  private static void process_slot(MutableBeaconState state) {\n-    // Cache state root\n-    Bytes32 previous_state_root = state.hash_tree_root();\n-    int index = state.getSlot().mod(UnsignedLong.valueOf(SLOTS_PER_HISTORICAL_ROOT)).intValue();\n-    state.getState_roots().set(index, previous_state_root);\n+  private static BeaconState process_slot(BeaconState preState) {\n+    return preState.updated(\n+        state -> {\n+          // Cache state root\n+          Bytes32 previous_state_root = state.hash_tree_root();\n+          int index =\n+              state.getSlot().mod(UnsignedLong.valueOf(SLOTS_PER_HISTORICAL_ROOT)).intValue();\n+          state.getState_roots().set(index, previous_state_root);\n \n-    // Cache latest block header state root\n-    BeaconBlockHeader latest_block_header = state.getLatest_block_header();\n-    if (latest_block_header.getState_root().equals(ZERO_HASH)) {\n-      BeaconBlockHeader latest_block_header_new =\n-          new BeaconBlockHeader(\n-              latest_block_header.getSlot(),\n-              latest_block_header.getParent_root(),\n-              previous_state_root,\n-              latest_block_header.getBody_root());\n-      state.setLatest_block_header(latest_block_header_new);\n-    }\n+          // Cache latest block header state root\n+          BeaconBlockHeader latest_block_header = state.getLatest_block_header();\n+          if (latest_block_header.getState_root().equals(ZERO_HASH)) {\n+            BeaconBlockHeader latest_block_header_new =\n+                new BeaconBlockHeader(\n+                    latest_block_header.getSlot(),\n+                    latest_block_header.getParent_root(),\n+                    previous_state_root,\n+                    latest_block_header.getBody_root());\n+            state.setLatest_block_header(latest_block_header_new);\n+          }\n \n-    // Cache block root\n-    Bytes32 previous_block_root = state.getLatest_block_header().hash_tree_root();\n-    state.getBlock_roots().set(index, previous_block_root);\n+          // Cache block root\n+          Bytes32 previous_block_root = state.getLatest_block_header().hash_tree_root();\n+          state.getBlock_roots().set(index, previous_block_root);\n+        });\n   }\n \n   /**\n    * v0.7.1\n    * https://github.com/ethereum/eth2.0-specs/blob/v0.7.1/specs/core/0_beacon-chain.md#beacon-chain-state-transition-function\n    * Processes slots through state slot through given slot\n    *\n-   * @param state\n-   * @param slot\n    * @throws EpochProcessingException\n    * @throws SlotProcessingException\n    */\n-  public void process_slots(MutableBeaconState state, UnsignedLong slot)\n+  public BeaconState process_slots(BeaconState preState, UnsignedLong slot)\n       throws SlotProcessingException, EpochProcessingException {\n     try {\n       checkArgument(\n-          state.getSlot().compareTo(slot) <= 0, \"process_slots: State slot higher than given slot\");\n+          preState.getSlot().compareTo(slot) <= 0,\n+          \"process_slots: State slot higher than given slot\");\n+      BeaconState state = preState;\n       while (state.getSlot().compareTo(slot) < 0) {\n-        process_slot(state);\n+        state = process_slot(state);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33198baf461a693db79cb5227a45b2917786cd04"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg2Mzk0OA==", "bodyText": "Stray comment", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r398863948", "createdAt": "2020-03-26T20:16:48Z", "author": {"login": "mbaxter"}, "path": "eth-benchmark-tests/src/jmh/java/tech/pegasys/artemis/benchmarks/TransitionBenchmark.java", "diffHunk": "@@ -103,7 +106,7 @@ protected void importNextBlock() {\n     }\n     localChain.setSlot(block.getSlot());\n     lastResult = blockImporter.importBlock(block);\n-    System.out.println(\"Imported: \" + lastResult);\n+    //    System.out.println(\"Imported: \" + lastResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33198baf461a693db79cb5227a45b2917786cd04"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg2NjE3MA==", "bodyText": "Should this be deleted or uncommented?", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r398866170", "createdAt": "2020-03-26T20:20:49Z", "author": {"login": "mbaxter"}, "path": "eth-benchmark-tests/src/jmh/java/tech/pegasys/artemis/benchmarks/util/backing/BeaconStateBenchmark.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.benchmarks.util.backing;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.Validator;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+@State(Scope.Thread)\n+public class BeaconStateBenchmark {\n+\n+  private static final BLSPublicKey pubkey = BLSPublicKey.random(0);\n+  private static final DataStructureUtil dataStructureUtil =\n+      new DataStructureUtil(0).withPubKeyGenerator(() -> pubkey);\n+  private static final BeaconState beaconState = dataStructureUtil.randomBeaconState(32 * 1024);\n+\n+  public BeaconStateBenchmark() {\n+    Constants.setConstants(\"mainnet\");\n+  }\n+\n+  @Benchmark\n+  @Warmup(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+  @Measurement(iterations = 10, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+  public void iterateValidators(Blackhole bh) {\n+    for (Validator validator : beaconState.getValidators()) {\n+      bh.consume(validator);\n+    }\n+  }\n+\n+  @Benchmark\n+  @Warmup(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+  @Measurement(iterations = 10, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+  public void iterateValidatorsWithMethods(Blackhole bh) {\n+    for (Validator validator : beaconState.getValidators()) {\n+      bh.consume(validator.isSlashed());\n+      //      bh.consume(validator.getPubkey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33198baf461a693db79cb5227a45b2917786cd04"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg3NDM3NQ==", "bodyText": "Looks like this class is unused", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r398874375", "createdAt": "2020-03-26T20:35:21Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/CachedBranchNode.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.tree;\n+\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.artemis.util.backing.tree.TreeNodeImpl.BranchNodeImpl;\n+import tech.pegasys.artemis.util.backing.type.CompositeViewType;\n+\n+public class CachedBranchNode extends BranchNodeImpl {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33198baf461a693db79cb5227a45b2917786cd04"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkwNDQ3MQ==", "bodyText": "(nit) I generally avoid using Pair.  It's pretty easy to create a small internal class with specific fields for each value, and I think thats usually more readable / self-documenting.", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r398904471", "createdAt": "2020-03-26T21:29:47Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeUpdates.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.tree;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * The collection of nodes and their target generalized indexes to be updated The class also\n+ * contains the target generalized index this set of changes is applicable to.\n+ *\n+ * @see TreeNode#updated(TreeUpdates)\n+ */\n+public class TreeUpdates {\n+\n+  /** Convenient collector for the stream with <code>Pair<Long, TreeNode></code> elements */\n+  public static Collector<Pair<Long, TreeNode>, ?, TreeUpdates> collector() {\n+    return Collectors.collectingAndThen(Collectors.toList(), TreeUpdates::new);\n+  }\n+\n+  private final List<Long> gIndexes;\n+  private final List<TreeNode> nodes;\n+\n+  private final long prefix;\n+  private final int heightFromLeaf;\n+\n+  /**\n+   * Creates a new instance of TreeNodes\n+   *\n+   * @param nodes the list of [[target generalized index], [new node value]] pairs <b>NOTE: the list\n+   *     should be sorted by target index</b> The ordering is not checked for performance reasons\n+   *     For unsorted list the behavior may be undefined but normally the {@link\n+   *     TreeNode#updated(TreeUpdates)} call would fail in this case\n+   */\n+  public TreeUpdates(List<Pair<Long, TreeNode>> nodes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33198baf461a693db79cb5227a45b2917786cd04"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5MTQxMg==", "bodyText": "Might be a good idea to add some unit tests for TreeUpdates", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399491412", "createdAt": "2020-03-27T19:24:15Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeUpdates.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.tree;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * The collection of nodes and their target generalized indexes to be updated The class also\n+ * contains the target generalized index this set of changes is applicable to.\n+ *\n+ * @see TreeNode#updated(TreeUpdates)\n+ */\n+public class TreeUpdates {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5NDQ2NA==", "bodyText": "Might improve readability if we try to centralize generalized-index-related calculations into a helper utility with unit tests and documentation.  WDYT?", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399494464", "createdAt": "2020-03-27T19:30:09Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeUpdates.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.tree;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * The collection of nodes and their target generalized indexes to be updated The class also\n+ * contains the target generalized index this set of changes is applicable to.\n+ *\n+ * @see TreeNode#updated(TreeUpdates)\n+ */\n+public class TreeUpdates {\n+\n+  /** Convenient collector for the stream with <code>Pair<Long, TreeNode></code> elements */\n+  public static Collector<Pair<Long, TreeNode>, ?, TreeUpdates> collector() {\n+    return Collectors.collectingAndThen(Collectors.toList(), TreeUpdates::new);\n+  }\n+\n+  private final List<Long> gIndexes;\n+  private final List<TreeNode> nodes;\n+\n+  private final long prefix;\n+  private final int heightFromLeaf;\n+\n+  /**\n+   * Creates a new instance of TreeNodes\n+   *\n+   * @param nodes the list of [[target generalized index], [new node value]] pairs <b>NOTE: the list\n+   *     should be sorted by target index</b> The ordering is not checked for performance reasons\n+   *     For unsorted list the behavior may be undefined but normally the {@link\n+   *     TreeNode#updated(TreeUpdates)} call would fail in this case\n+   */\n+  public TreeUpdates(List<Pair<Long, TreeNode>> nodes) {\n+    this(\n+        nodes.stream().map(Pair::getLeft).collect(Collectors.toList()),\n+        nodes.stream().map(Pair::getRight).collect(Collectors.toList()));\n+  }\n+\n+  private TreeUpdates(List<Long> gIndexes, List<TreeNode> nodes) {\n+    this(gIndexes, nodes, 1, depth(gIndexes));\n+  }\n+\n+  private TreeUpdates(List<Long> gIndexes, List<TreeNode> nodes, long prefix, int heightFromLeaf) {\n+    this.gIndexes = gIndexes;\n+    this.nodes = nodes;\n+    this.prefix = prefix;\n+    this.heightFromLeaf = heightFromLeaf;\n+  }\n+\n+  /**\n+   * Split the nodes to left and right subtree subsets according the target generalized index\n+   *\n+   * @return the pair of node updates for left and right subtrees with accordingly adjusted target\n+   *     generalized indexes\n+   */\n+  public Pair<TreeUpdates, TreeUpdates> splitAtPivot() {\n+    long lPrefix = prefix << 1;\n+    long rPrefix = lPrefix | 1;\n+    long pivotGIndex = rPrefix << (heightFromLeaf - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ5NjA1Ng==", "bodyText": "It looks like we're also expecting all nodes to be at the same height in the tree - might be helpful to add this to the description.", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399496056", "createdAt": "2020-03-27T19:33:23Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeUpdates.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.tree;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collector;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * The collection of nodes and their target generalized indexes to be updated The class also\n+ * contains the target generalized index this set of changes is applicable to.\n+ *\n+ * @see TreeNode#updated(TreeUpdates)\n+ */\n+public class TreeUpdates {\n+\n+  /** Convenient collector for the stream with <code>Pair<Long, TreeNode></code> elements */\n+  public static Collector<Pair<Long, TreeNode>, ?, TreeUpdates> collector() {\n+    return Collectors.collectingAndThen(Collectors.toList(), TreeUpdates::new);\n+  }\n+\n+  private final List<Long> gIndexes;\n+  private final List<TreeNode> nodes;\n+\n+  private final long prefix;\n+  private final int heightFromLeaf;\n+\n+  /**\n+   * Creates a new instance of TreeNodes\n+   *\n+   * @param nodes the list of [[target generalized index], [new node value]] pairs <b>NOTE: the list\n+   *     should be sorted by target index</b> The ordering is not checked for performance reasons", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwOTI4MA==", "bodyText": "Do we need this?  It looks like it's always overridden.", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399509280", "createdAt": "2020-03-27T20:01:16Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/tree/TreeNode.java", "diffHunk": "@@ -153,6 +153,15 @@ default TreeNode updated(long target, Function<TreeNode, TreeNode> nodeUpdater)\n    */\n   TreeNode updated(long generalizedIndex, Function<TreeNode, TreeNode> nodeUpdater);\n \n+  /** Updates the tree in a batch */\n+  default TreeNode updated(TreeUpdates newNodes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUxNDk4NA==", "bodyText": "nice \ud83c\udf89", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399514984", "createdAt": "2020-03-27T20:14:06Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/CompositeViewRead.java", "diffHunk": "@@ -18,9 +18,9 @@\n /**\n  * Represents composite immutable view which has descendant views\n  *\n- * @param <C> the type of children\n+ * @param <ChildType> the type of children", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1NTk4Mw==", "bodyText": "Do we need to extend the array just to null out this value?  Isn't it implicitly null if the key is outside the bounds of the backing array?", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399555983", "createdAt": "2020-03-27T21:54:44Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/cache/ArrayCache.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.cache;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.IntFunction;\n+\n+public final class ArrayCache<V> implements IntCache<V> {\n+  private V[] values;\n+  private final int initSize;\n+\n+  public ArrayCache() {\n+    this(16);\n+  }\n+\n+  public ArrayCache(int initialSize) {\n+    this.initSize = initialSize;\n+    this.values = createArray(initialSize);\n+  }\n+\n+  private ArrayCache(V[] values, int initSize) {\n+    this.values = values;\n+    this.initSize = initSize;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private V[] createArray(int size) {\n+    return (V[]) new Object[size];\n+  }\n+\n+  private void extend(int index) {\n+    int newSize = values.length;\n+    if (index >= newSize) {\n+      while (index >= newSize) {\n+        newSize <<= 1;\n+      }\n+      values = Arrays.copyOf(values, newSize);\n+    }\n+  }\n+\n+  @Override\n+  public V getInt(int key, IntFunction<V> fallback) {\n+    V val = key >= values.length ? null : values[key];\n+    if (val == null) {\n+      val = fallback.apply(key);\n+      synchronized (this) {\n+        extend(key);\n+        values[key] = val;\n+      }\n+    }\n+    return val;\n+  }\n+\n+  @Override\n+  public Optional<V> getCached(Integer key) {\n+    return key >= values.length ? Optional.empty() : Optional.ofNullable(values[key]);\n+  }\n+\n+  @Override\n+  public IntCache<V> copy() {\n+    return new ArrayCache<>(Arrays.copyOf(values, values.length), initSize);\n+  }\n+\n+  @Override\n+  public synchronized IntCache<V> transfer() {\n+    ArrayCache<V> ret = new ArrayCache<>(values, initSize);\n+    values = createArray(initSize);\n+    return ret;\n+  }\n+\n+  @Override\n+  public synchronized void invalidateWithNewValueInt(int key, V newValue) {\n+    extend(key);\n+    values[key] = newValue;\n+  }\n+\n+  @Override\n+  public synchronized void invalidateInt(int key) {\n+    extend(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1NjUyMg==", "bodyText": "(Optional)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public final class ArrayCache<V> implements IntCache<V> {\n          \n          \n            \n            public final class ArrayIntCache<V> implements IntCache<V> {\n          \n      \n    \n    \n  \n\nor maybe:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public final class ArrayCache<V> implements IntCache<V> {\n          \n          \n            \n            public final class ArrayBackedIndexCache<V> implements IndexCache<V> {", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399556522", "createdAt": "2020-03-27T21:56:21Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/cache/ArrayCache.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.cache;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.IntFunction;\n+\n+public final class ArrayCache<V> implements IntCache<V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1NjcxNQ==", "bodyText": "Looks like this class is unused.", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399556715", "createdAt": "2020-03-27T21:56:52Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/cache/HashMapCache.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.cache;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+public class HashMapCache<K, V> implements Cache<K, V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1NzU2OQ==", "bodyText": "Stray comment", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399557569", "createdAt": "2020-03-27T21:59:21Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/type/ContainerViewType.java", "diffHunk": "@@ -62,6 +62,7 @@ public ViewType getChildType(int index) {\n   @Override\n   public C createFromBackingNode(TreeNode node) {\n     return instanceCtor.apply(this, node);\n+    //    return node.cachedValue(() -> instanceCtor.apply(this, node));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1Nzk0Nw==", "bodyText": "Stray comment", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399557947", "createdAt": "2020-03-27T22:00:28Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/type/VectorViewType.java", "diffHunk": "@@ -44,6 +44,7 @@ protected TreeNode createDefaultTree() {\n   @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n   @Override\n   public VectorViewRead<C> createFromBackingNode(TreeNode node) {\n-    return new VectorViewImpl(this, node);\n+    //    return node.cachedValue(() -> new VectorViewImpl(this, node));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1ODQ4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>Thought internally this class has a mutable cache it may be thought of as immutable instance\n          \n          \n            \n             * <p>Though internally this class has a mutable cache it may be thought of as immutable instance", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399558488", "createdAt": "2020-03-27T22:02:14Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.view;\n+\n+import tech.pegasys.artemis.util.backing.CompositeViewRead;\n+import tech.pegasys.artemis.util.backing.ViewRead;\n+import tech.pegasys.artemis.util.backing.cache.ArrayCache;\n+import tech.pegasys.artemis.util.backing.cache.IntCache;\n+import tech.pegasys.artemis.util.backing.tree.TreeNode;\n+import tech.pegasys.artemis.util.backing.type.CompositeViewType;\n+\n+/**\n+ * Base backing view class for immutable composite views (lists, vectors, containers)\n+ *\n+ * <p>It caches it's child view instances so that if the underlying tree nodes are not changed (in\n+ * the corresponding mutable classes) the instances are not recreated from tree nodes on later\n+ * access.\n+ *\n+ * <p>Thought internally this class has a mutable cache it may be thought of as immutable instance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1OTUwOA==", "bodyText": "(nit) We tend to use Optional's explicitly rather than allow nullable fields / parameters.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  CompositeViewType type, TreeNode backingNode, IntCache<ChildType> cache) {\n          \n          \n            \n                  CompositeViewType type, TreeNode backingNode, Optional<IntCache<ChildType>> cache) {", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399559508", "createdAt": "2020-03-27T22:05:17Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.view;\n+\n+import tech.pegasys.artemis.util.backing.CompositeViewRead;\n+import tech.pegasys.artemis.util.backing.ViewRead;\n+import tech.pegasys.artemis.util.backing.cache.ArrayCache;\n+import tech.pegasys.artemis.util.backing.cache.IntCache;\n+import tech.pegasys.artemis.util.backing.tree.TreeNode;\n+import tech.pegasys.artemis.util.backing.type.CompositeViewType;\n+\n+/**\n+ * Base backing view class for immutable composite views (lists, vectors, containers)\n+ *\n+ * <p>It caches it's child view instances so that if the underlying tree nodes are not changed (in\n+ * the corresponding mutable classes) the instances are not recreated from tree nodes on later\n+ * access.\n+ *\n+ * <p>Thought internally this class has a mutable cache it may be thought of as immutable instance\n+ * and used safely across threads\n+ *\n+ * @param <ChildType> the type of children. For heterogeneous composites (like container) this type\n+ *     would be just generic {@link ViewRead}\n+ */\n+public abstract class AbstractCompositeViewRead<ChildType extends ViewRead>\n+    implements CompositeViewRead<ChildType> {\n+\n+  private IntCache<ChildType> childrenViewCache;\n+  private final int sizeCache;\n+  private final CompositeViewType type;\n+  private final TreeNode backingNode;\n+\n+  /** Creates an instance from a type and a backing node */\n+  protected AbstractCompositeViewRead(CompositeViewType type, TreeNode backingNode) {\n+    this(type, backingNode, null);\n+  }\n+\n+  /**\n+   * Creates an instance from a type and a backing node Optionally the view instances cache can be\n+   * supplied for optimization to shortcut children views creation from backing nodes. The cache\n+   * should correspond to the supplied backing tree.\n+   */\n+  protected AbstractCompositeViewRead(\n+      CompositeViewType type, TreeNode backingNode, IntCache<ChildType> cache) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2MTM3MQ==", "bodyText": "I'm not seeing where the cached values are eliminated from the current cache.  Is this comment out-of-date?", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399561371", "createdAt": "2020-03-27T22:11:29Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.view;\n+\n+import tech.pegasys.artemis.util.backing.CompositeViewRead;\n+import tech.pegasys.artemis.util.backing.ViewRead;\n+import tech.pegasys.artemis.util.backing.cache.ArrayCache;\n+import tech.pegasys.artemis.util.backing.cache.IntCache;\n+import tech.pegasys.artemis.util.backing.tree.TreeNode;\n+import tech.pegasys.artemis.util.backing.type.CompositeViewType;\n+\n+/**\n+ * Base backing view class for immutable composite views (lists, vectors, containers)\n+ *\n+ * <p>It caches it's child view instances so that if the underlying tree nodes are not changed (in\n+ * the corresponding mutable classes) the instances are not recreated from tree nodes on later\n+ * access.\n+ *\n+ * <p>Thought internally this class has a mutable cache it may be thought of as immutable instance\n+ * and used safely across threads\n+ *\n+ * @param <ChildType> the type of children. For heterogeneous composites (like container) this type\n+ *     would be just generic {@link ViewRead}\n+ */\n+public abstract class AbstractCompositeViewRead<ChildType extends ViewRead>\n+    implements CompositeViewRead<ChildType> {\n+\n+  private IntCache<ChildType> childrenViewCache;\n+  private final int sizeCache;\n+  private final CompositeViewType type;\n+  private final TreeNode backingNode;\n+\n+  /** Creates an instance from a type and a backing node */\n+  protected AbstractCompositeViewRead(CompositeViewType type, TreeNode backingNode) {\n+    this(type, backingNode, null);\n+  }\n+\n+  /**\n+   * Creates an instance from a type and a backing node Optionally the view instances cache can be\n+   * supplied for optimization to shortcut children views creation from backing nodes. The cache\n+   * should correspond to the supplied backing tree.\n+   */\n+  protected AbstractCompositeViewRead(\n+      CompositeViewType type, TreeNode backingNode, IntCache<ChildType> cache) {\n+    this.type = type;\n+    this.backingNode = backingNode;\n+    sizeCache = sizeImpl();\n+    childrenViewCache = cache == null ? createCache() : cache;\n+  }\n+\n+  /**\n+   * 'Transfers' the cache to a new Cache instance eliminating all the cached values from the\n+   * current view cache. This is made under assumption that the view instance this cache is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1NDc5Nw==", "bodyText": "This looks the same as the Cache interface in the util module - is the plan to merge these interfaces at some point?", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r399854797", "createdAt": "2020-03-29T21:13:31Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/cache/Cache.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.cache;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+/**\n+ * Cache\n+ *\n+ * @param <K> type of keys\n+ * @param <V> type of values\n+ */\n+public interface Cache<K, V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c49148318bdbbd357d399f00d02351e27cc0727"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMzUwMA==", "bodyText": "Maybe we should keep these field indexes as constants somewhere.", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400223500", "createdAt": "2020-03-30T14:12:18Z", "author": {"login": "mbaxter"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/state/MutableBeaconState.java", "diffHunk": "@@ -14,78 +14,134 @@\n package tech.pegasys.artemis.datastructures.state;\n \n import com.google.common.primitives.UnsignedLong;\n+import java.util.function.Function;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.artemis.datastructures.blocks.BeaconBlockHeader;\n import tech.pegasys.artemis.datastructures.blocks.Eth1Data;\n import tech.pegasys.artemis.util.SSZTypes.Bitvector;\n+import tech.pegasys.artemis.util.SSZTypes.SSZBackingList;\n+import tech.pegasys.artemis.util.SSZTypes.SSZBackingVector;\n import tech.pegasys.artemis.util.SSZTypes.SSZMutableList;\n-import tech.pegasys.artemis.util.SSZTypes.SSZMutableRefList;\n import tech.pegasys.artemis.util.SSZTypes.SSZMutableVector;\n import tech.pegasys.artemis.util.backing.ContainerViewWriteRef;\n+import tech.pegasys.artemis.util.backing.view.AbstractBasicView;\n+import tech.pegasys.artemis.util.backing.view.BasicViews.Bytes32View;\n+import tech.pegasys.artemis.util.backing.view.BasicViews.UInt64View;\n+import tech.pegasys.artemis.util.backing.view.ViewUtils;\n \n public interface MutableBeaconState extends BeaconState, ContainerViewWriteRef {\n \n   static MutableBeaconState createBuilder() {\n-    return new BeaconStateImpl(true);\n+    return MutableBeaconStateImpl.createBuilder();\n   }\n \n   // Versioning\n \n-  void setGenesis_time(UnsignedLong genesis_time);\n+  default void setGenesis_time(UnsignedLong genesis_time) {\n+    set(0, new UInt64View(genesis_time));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32299f99b1a8b957cbad6e59c0095a48e94df638"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzMTQwMA==", "bodyText": "Should we be passing a Supplier for the backingNode so that we only produce the backing tree if we need it??\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected AbstractCompositeViewRead(CompositeViewType type, TreeNode backingNode) {\n          \n          \n            \n              protected AbstractCompositeViewRead(CompositeViewType type, Supplier<TreeNode> backingNode) {", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400231400", "createdAt": "2020-03-30T14:22:30Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/AbstractCompositeViewRead.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.view;\n+\n+import tech.pegasys.artemis.util.backing.CompositeViewRead;\n+import tech.pegasys.artemis.util.backing.ViewRead;\n+import tech.pegasys.artemis.util.backing.cache.ArrayCache;\n+import tech.pegasys.artemis.util.backing.cache.IntCache;\n+import tech.pegasys.artemis.util.backing.tree.TreeNode;\n+import tech.pegasys.artemis.util.backing.type.CompositeViewType;\n+\n+/**\n+ * Base backing view class for immutable composite views (lists, vectors, containers)\n+ *\n+ * <p>It caches it's child view instances so that if the underlying tree nodes are not changed (in\n+ * the corresponding mutable classes) the instances are not recreated from tree nodes on later\n+ * access.\n+ *\n+ * <p>Thought internally this class has a mutable cache it may be thought of as immutable instance\n+ * and used safely across threads\n+ *\n+ * @param <ChildType> the type of children. For heterogeneous composites (like container) this type\n+ *     would be just generic {@link ViewRead}\n+ */\n+public abstract class AbstractCompositeViewRead<ChildType extends ViewRead>\n+    implements CompositeViewRead<ChildType> {\n+\n+  private IntCache<ChildType> childrenViewCache;\n+  private final int sizeCache;\n+  private final CompositeViewType type;\n+  private final TreeNode backingNode;\n+\n+  /** Creates an instance from a type and a backing node */\n+  protected AbstractCompositeViewRead(CompositeViewType type, TreeNode backingNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32299f99b1a8b957cbad6e59c0095a48e94df638"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2MDQxMQ==", "bodyText": "Stray comments", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400260411", "createdAt": "2020-03-30T14:58:59Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/util/backing/view/ListViewReadImpl.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.backing.view;\n+\n+import java.util.Arrays;\n+import tech.pegasys.artemis.util.backing.ListViewRead;\n+import tech.pegasys.artemis.util.backing.ListViewWrite;\n+import tech.pegasys.artemis.util.backing.VectorViewRead;\n+import tech.pegasys.artemis.util.backing.ViewRead;\n+import tech.pegasys.artemis.util.backing.cache.IntCache;\n+import tech.pegasys.artemis.util.backing.tree.TreeNode;\n+import tech.pegasys.artemis.util.backing.type.BasicViewTypes;\n+import tech.pegasys.artemis.util.backing.type.ContainerViewType;\n+import tech.pegasys.artemis.util.backing.type.ListViewType;\n+import tech.pegasys.artemis.util.backing.type.VectorViewType;\n+import tech.pegasys.artemis.util.backing.view.BasicViews.UInt64View;\n+import tech.pegasys.artemis.util.backing.view.ListViewWriteImpl.ListContainerWrite;\n+\n+/**\n+ * View of SSZ List type. This view is compatible with and implemented as a <code>\n+ * Container[Vector(maxLength), size]</code> under the cover.\n+ */\n+public class ListViewReadImpl<ElementType extends ViewRead> implements ListViewRead<ElementType> {\n+\n+  static class ListContainerRead<ElementType extends ViewRead> extends ContainerViewReadImpl {\n+\n+    private static <C extends ViewRead>\n+        ContainerViewType<ListContainerRead<C>> vectorTypeToContainerType(\n+            VectorViewType<C> vectorType) {\n+      return new ContainerViewType<>(\n+          Arrays.asList(vectorType, BasicViewTypes.UINT64_TYPE), ListContainerRead::new);\n+    }\n+\n+    public ListContainerRead(VectorViewType<ElementType> vectorType) {\n+      super(vectorTypeToContainerType(vectorType));\n+    }\n+\n+    ListContainerRead(\n+        ContainerViewType<ListContainerRead<ElementType>> containerType, TreeNode backingNode) {\n+      super(containerType, backingNode);\n+    }\n+\n+    public ListContainerRead(\n+        VectorViewType<ElementType> vectorType, TreeNode backingNode, IntCache<ViewRead> cache) {\n+      super(vectorTypeToContainerType(vectorType), backingNode, cache);\n+    }\n+\n+    public int getSize() {\n+      return (int) ((UInt64View) get(1)).longValue();\n+    }\n+\n+    public VectorViewRead<ElementType> getData() {\n+      return getAny(0);\n+    }\n+\n+    @Override\n+    public ListContainerWrite<ElementType, ?> createWritableCopy() {\n+      return new ListContainerWrite<>(this);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    VectorViewType<ElementType> getVectorType() {\n+      return (VectorViewType<ElementType>) getType().getChildType(0);\n+    }\n+  }\n+\n+  private final ListViewType<ElementType> type;\n+  private final ListContainerRead<ElementType> container;\n+  private final int cachedSize;\n+  //  private final int size;\n+  //  private final VectorViewRead<C> vector;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32299f99b1a8b957cbad6e59c0095a48e94df638"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2MjYzMA==", "bodyText": "good catch \ud83c\udf89", "url": "https://github.com/ConsenSys/teku/pull/1465#discussion_r400262630", "createdAt": "2020-03-30T15:01:52Z", "author": {"login": "mbaxter"}, "path": "storage/src/test/java/tech/pegasys/artemis/storage/VersionedDatabaseFactoryTest.java", "diffHunk": "@@ -39,10 +39,11 @@ public void setup() {\n   @Test\n   public void createDatabase_fromEmptyDataDir() throws Exception {\n     final VersionedDatabaseFactory dbFactory = new VersionedDatabaseFactory(config);\n-    final Database db = dbFactory.createDatabase();\n-    assertThat(db).isNotNull();\n+    try (final Database db = dbFactory.createDatabase()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32299f99b1a8b957cbad6e59c0095a48e94df638"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34d702aaa5d36be1df468a8e712a05b5004e3e4b", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/34d702aaa5d36be1df468a8e712a05b5004e3e4b", "committedDate": "2020-03-30T17:40:19Z", "message": "Minor refactoring and some cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af118aa35f2e3b92e303db06f717b66595fb75f8", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/af118aa35f2e3b92e303db06f717b66595fb75f8", "committedDate": "2020-03-30T18:11:32Z", "message": "Fix NPE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "588d5af8e40249ccb0a34a0858263fce6f90796a", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/588d5af8e40249ccb0a34a0858263fce6f90796a", "committedDate": "2020-03-31T10:14:28Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c2b4c3ef7ed2daa5218658999abdb7b4aa95872", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/4c2b4c3ef7ed2daa5218658999abdb7b4aa95872", "committedDate": "2020-03-31T13:14:34Z", "message": "Update TreeUpdates javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9726cd340cdbd49007428ede77e689e8422f179f", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/9726cd340cdbd49007428ede77e689e8422f179f", "committedDate": "2020-03-31T15:41:15Z", "message": "Use specific TreeUpdates.Update struct instead of Pair"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b26b5e202a531a098e955ee0e0c3193687e0edc3", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/b26b5e202a531a098e955ee0e0c3193687e0edc3", "committedDate": "2020-03-31T18:03:10Z", "message": "Fix benchmarks StorageUpdateChannel mock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27a1dace691dc5e26d167666244ab40edcb30b56", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/27a1dace691dc5e26d167666244ab40edcb30b56", "committedDate": "2020-03-31T18:04:36Z", "message": "Enumerate BeaconState members as static fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fe4589e4b05242d47f5ae5fccfd561250552f9b", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/1fe4589e4b05242d47f5ae5fccfd561250552f9b", "committedDate": "2020-03-31T18:29:42Z", "message": "Optimize Validator modification code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "034d6c057089ea4081568d1f331a27efb335f54c", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/034d6c057089ea4081568d1f331a27efb335f54c", "committedDate": "2020-04-01T09:25:45Z", "message": "Rename Field.order property to Field.index"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43eeebc58a46ce7780129b6854232d575e24fde0", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/43eeebc58a46ce7780129b6854232d575e24fde0", "committedDate": "2020-04-01T09:30:03Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c302975eabac7de38600783c24286c20b745113f", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/c302975eabac7de38600783c24286c20b745113f", "committedDate": "2020-04-01T10:56:26Z", "message": "Fix the bug when changed constant is not refreshed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ba9018721117f13661bece2545815e16004ad51", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/9ba9018721117f13661bece2545815e16004ad51", "committedDate": "2020-04-01T12:04:08Z", "message": "Merge remote-tracking branch 'pegasys/master' into optimize-backing-views\n\n# Conflicts:\n#\teth-benchmark-tests/src/jmh/java/tech/pegasys/artemis/benchmarks/ProfilingRun.java\n#\teth-benchmark-tests/src/jmh/java/tech/pegasys/artemis/benchmarks/TransitionBenchmark.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9a8e8c899bee0b1f6980018dc182a9458006511", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/c9a8e8c899bee0b1f6980018dc182a9458006511", "committedDate": "2020-04-01T12:13:06Z", "message": "Resolve merge conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "498fa97babba34275c129fa7b81aa99b15ed6c91", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/498fa97babba34275c129fa7b81aa99b15ed6c91", "committedDate": "2020-04-01T12:26:30Z", "message": "Restore static constants after the test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2731c51cb05bd3b6484c9b64d5f51cd7da7505ed", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/2731c51cb05bd3b6484c9b64d5f51cd7da7505ed", "committedDate": "2020-04-01T15:14:05Z", "message": "Add TreeUpdates constructor argument validation. Add TreeUpdates tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e8060147bad2eb2472d1f390c12c30136d50ff5", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/4e8060147bad2eb2472d1f390c12c30136d50ff5", "committedDate": "2020-04-01T17:42:46Z", "message": "Fix ArrayIntCache threading bug: changes to transferred cache could affect source cache data. Make transfer() copy the cache since it appeared far more effective than synchronizing cache reads (with either synchronized or ReentrantLock)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6655d27b8094d0f19f675be7d53f6ee0a1d71767", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/6655d27b8094d0f19f675be7d53f6ee0a1d71767", "committedDate": "2020-04-01T17:51:16Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63e364939bf0b91333af6cbe939f0591cb1c62b2", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/63e364939bf0b91333af6cbe939f0591cb1c62b2", "committedDate": "2020-04-02T10:01:44Z", "message": "Add TreeTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69cb8391dd0d13ebfb39faddcb8ac188b0949580", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/69cb8391dd0d13ebfb39faddcb8ac188b0949580", "committedDate": "2020-04-02T12:32:27Z", "message": "Add thread safety test for complex views"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe673cd9db995290ea7efe651ba295cdaeecbf07", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/fe673cd9db995290ea7efe651ba295cdaeecbf07", "committedDate": "2020-04-02T12:45:56Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e90fb52941804fb06bc7a667f5032b380f1f647", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/4e90fb52941804fb06bc7a667f5032b380f1f647", "committedDate": "2020-04-02T16:09:14Z", "message": "Fix test failure which caused by modifying static spec constant in another test. Make 'non-configurable' constants final to avoid accident modification in tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf9f54f545be4fd6fc04ff677ce897b7bfdeea06", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/bf9f54f545be4fd6fc04ff677ce897b7bfdeea06", "committedDate": "2020-04-02T16:29:49Z", "message": "Avoid caching BeaconState type in the static field to eliminate cases when Constants.* field changes but is not picked up by the BeaconState type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e9b9e339e68eee8676a86dafa19c25f28bba293", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/4e9b9e339e68eee8676a86dafa19c25f28bba293", "committedDate": "2020-04-03T10:06:33Z", "message": "Return back 'non-configurable' Constants to be non-final: some configs may contain those \u0441onstants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "918fe8473fec7ae367e101fd4d826bf7bec46963", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/918fe8473fec7ae367e101fd4d826bf7bec46963", "committedDate": "2020-04-03T10:07:03Z", "message": "Merge remote-tracking branch 'pegasys/master' into optimize-backing-views"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91830d432b67ae041a214dd22e4ac485f32068de", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/91830d432b67ae041a214dd22e4ac485f32068de", "committedDate": "2020-04-03T13:32:16Z", "message": "Lazily calculate PublicKey rawData from point. This greatly improves keys aggregation performance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2481224ff34553682fd4532a323a947f8ebb2b5f", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/2481224ff34553682fd4532a323a947f8ebb2b5f", "committedDate": "2020-04-03T14:28:21Z", "message": "Fix PublicKey.equals()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MzY3NDY0", "url": "https://github.com/ConsenSys/teku/pull/1465#pullrequestreview-387367464", "createdAt": "2020-04-03T15:37:46Z", "commit": {"oid": "2481224ff34553682fd4532a323a947f8ebb2b5f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15142c1b204a643fa963170df2244384d0a64d96", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/15142c1b204a643fa963170df2244384d0a64d96", "committedDate": "2020-04-03T15:38:01Z", "message": "Merge branch 'master' into optimize-backing-views"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4376, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}