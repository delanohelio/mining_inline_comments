{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyOTcxOTA3", "number": 2127, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDozMToyMlrOEEtdcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDozMToyMlrOEEtdcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzc0NTc5OnYy", "diffSide": "RIGHT", "path": "bls/src/main/java/tech/pegasys/teku/bls/mikuli/KeyPair.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDozMToyMlrOGigF1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNToyNTo1MFrOGiiaFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMDU1MQ==", "bodyText": "I couldn't find the documentation but I'm assuming BIG.randomnum is exclusive?", "url": "https://github.com/ConsenSys/teku/pull/2127#discussion_r438830551", "createdAt": "2020-06-11T14:31:22Z", "author": {"login": "cemozerr"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/mikuli/KeyPair.java", "diffHunk": "@@ -36,24 +33,30 @@ public static KeyPair random(final SecureRandom srng) {\n     byte[] b = new byte[128];\n     srng.nextBytes(b);\n     rng.seed(128, b);\n-    Scalar secret = new Scalar(BIG.randomnum(curveOrder, rng));\n+    // secret key must be between 1 and (curveOrder - 1) inclusive\n+    BIG bigSecret = BIG.randomnum(curveOrder.minus(new BIG(1)), rng);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77dc56aad05d22b23b9a8ec7859d70846306ee6f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg1NTk3Mw==", "bodyText": "Afaics, the BIG.randomnum() method includes 0, but excludes the upper limit (curveOrder here.) in its range of results. My workaround is to subtract one from curveOrder and add one to the result. This is hard to test: we might be waiting around to the end of the universe before it generates a number at the end of the range.", "url": "https://github.com/ConsenSys/teku/pull/2127#discussion_r438855973", "createdAt": "2020-06-11T15:07:46Z", "author": {"login": "benjaminion"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/mikuli/KeyPair.java", "diffHunk": "@@ -36,24 +33,30 @@ public static KeyPair random(final SecureRandom srng) {\n     byte[] b = new byte[128];\n     srng.nextBytes(b);\n     rng.seed(128, b);\n-    Scalar secret = new Scalar(BIG.randomnum(curveOrder, rng));\n+    // secret key must be between 1 and (curveOrder - 1) inclusive\n+    BIG bigSecret = BIG.randomnum(curveOrder.minus(new BIG(1)), rng);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMDU1MQ=="}, "originalCommit": {"oid": "77dc56aad05d22b23b9a8ec7859d70846306ee6f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2ODUwMw==", "bodyText": "Yeah, that made sense to me, assuming that the upper bound is exclusive. LOL about waiting around to the end of the universe :D", "url": "https://github.com/ConsenSys/teku/pull/2127#discussion_r438868503", "createdAt": "2020-06-11T15:25:50Z", "author": {"login": "cemozerr"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/mikuli/KeyPair.java", "diffHunk": "@@ -36,24 +33,30 @@ public static KeyPair random(final SecureRandom srng) {\n     byte[] b = new byte[128];\n     srng.nextBytes(b);\n     rng.seed(128, b);\n-    Scalar secret = new Scalar(BIG.randomnum(curveOrder, rng));\n+    // secret key must be between 1 and (curveOrder - 1) inclusive\n+    BIG bigSecret = BIG.randomnum(curveOrder.minus(new BIG(1)), rng);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgzMDU1MQ=="}, "originalCommit": {"oid": "77dc56aad05d22b23b9a8ec7859d70846306ee6f"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3583, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}