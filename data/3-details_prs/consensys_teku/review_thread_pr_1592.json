{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNTIyOTg0", "number": 1592, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1NjowNlrODyHE7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1NzozMFrODyHHmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODcxMzQxOnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/DutyScheduler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1NjowNlrOGF9wZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjo0MjozNFrOGGOJpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwNzg3OA==", "bodyText": "This line assumes that this validator won't have any duties for this epoch, so it will need to remove the future above, right?", "url": "https://github.com/ConsenSys/teku/pull/1592#discussion_r408907878", "createdAt": "2020-04-15T14:56:06Z", "author": {"login": "cemozerr"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/DutyScheduler.java", "diffHunk": "@@ -69,13 +86,19 @@ public void onSlot(final UnsignedLong slotNumber) {\n           for (UnsignedLong currentEpoch = startEpoch;\n               currentEpoch.compareTo(endEpoch) <= 0;\n               currentEpoch = currentEpoch.plus(ONE)) {\n-            scheduleDutiesForEpoch(currentEpoch).reportExceptions();\n+            scheduleDutiesForEpoch(currentEpoch);\n           }\n           return startEpoch.compareTo(endEpoch) > 0 ? lastRequestedEpoch : endEpoch;\n         });\n   }\n \n-  private SafeFuture<Void> scheduleDutiesForEpoch(final UnsignedLong epoch) {\n+  private void scheduleDutiesForEpoch(final UnsignedLong epoch) {\n+    final SafeFuture<Void> future = requestAndScheduleDutiesForEpoch(epoch);\n+    pendingTasksByEpoch.put(epoch, future);\n+    removeWhenAllTasksComplete(epoch, future);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84d2137460e33f834c5f1c7da5daf00ca00c55be"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5NjY2MQ==", "bodyText": "removeWhenAllTasksComplete will only remove the entry if the key and value match.  So this is handling the normal case where we are scheduling duties ahead of time and it completes scheduling before those slots occur.  In that case when future completes it will still be the value in the map and so will be removed.  When the slots occur there's no entry in the map so they execute immediately.\nIf however while the request for duties is in-flight one of the slots for that epoch occurs, that slot will replace this future with the one for it's own task and this call to removeWhenAllTasksComplete will wind up doing nothing. Responsibility for cleaning up moves to the task that was scheduled by onSlot (and this process repeats for each scheduled task - it gets tacked onto the end and takes responsibility for removing things).\nWhich I think is a long winded way of saying yes. :)", "url": "https://github.com/ConsenSys/teku/pull/1592#discussion_r409096661", "createdAt": "2020-04-15T19:55:34Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/DutyScheduler.java", "diffHunk": "@@ -69,13 +86,19 @@ public void onSlot(final UnsignedLong slotNumber) {\n           for (UnsignedLong currentEpoch = startEpoch;\n               currentEpoch.compareTo(endEpoch) <= 0;\n               currentEpoch = currentEpoch.plus(ONE)) {\n-            scheduleDutiesForEpoch(currentEpoch).reportExceptions();\n+            scheduleDutiesForEpoch(currentEpoch);\n           }\n           return startEpoch.compareTo(endEpoch) > 0 ? lastRequestedEpoch : endEpoch;\n         });\n   }\n \n-  private SafeFuture<Void> scheduleDutiesForEpoch(final UnsignedLong epoch) {\n+  private void scheduleDutiesForEpoch(final UnsignedLong epoch) {\n+    final SafeFuture<Void> future = requestAndScheduleDutiesForEpoch(epoch);\n+    pendingTasksByEpoch.put(epoch, future);\n+    removeWhenAllTasksComplete(epoch, future);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwNzg3OA=="}, "originalCommit": {"oid": "84d2137460e33f834c5f1c7da5daf00ca00c55be"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3NjQ4NQ==", "bodyText": "Thanks for the detailed answer :)", "url": "https://github.com/ConsenSys/teku/pull/1592#discussion_r409176485", "createdAt": "2020-04-15T22:42:34Z", "author": {"login": "cemozerr"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/DutyScheduler.java", "diffHunk": "@@ -69,13 +86,19 @@ public void onSlot(final UnsignedLong slotNumber) {\n           for (UnsignedLong currentEpoch = startEpoch;\n               currentEpoch.compareTo(endEpoch) <= 0;\n               currentEpoch = currentEpoch.plus(ONE)) {\n-            scheduleDutiesForEpoch(currentEpoch).reportExceptions();\n+            scheduleDutiesForEpoch(currentEpoch);\n           }\n           return startEpoch.compareTo(endEpoch) > 0 ? lastRequestedEpoch : endEpoch;\n         });\n   }\n \n-  private SafeFuture<Void> scheduleDutiesForEpoch(final UnsignedLong epoch) {\n+  private void scheduleDutiesForEpoch(final UnsignedLong epoch) {\n+    final SafeFuture<Void> future = requestAndScheduleDutiesForEpoch(epoch);\n+    pendingTasksByEpoch.put(epoch, future);\n+    removeWhenAllTasksComplete(epoch, future);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwNzg3OA=="}, "originalCommit": {"oid": "84d2137460e33f834c5f1c7da5daf00ca00c55be"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODcyMDI0OnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/DutyScheduler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1NzozMFrOGF90rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTo1ODozNlrOGGJYIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwODk3NA==", "bodyText": "Isn't there any side effect of chaining multiple .always() to the same Future chain? So they don't get overwritten or anything?", "url": "https://github.com/ConsenSys/teku/pull/1592#discussion_r408908974", "createdAt": "2020-04-15T14:57:30Z", "author": {"login": "cemozerr"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/DutyScheduler.java", "diffHunk": "@@ -182,16 +205,43 @@ private void scheduleAggregation(\n \n   @Override\n   public void onBlockProductionDue(final UnsignedLong slot) {\n-    scheduledDuties.produceBlock(slot);\n+    whenDutiesScheduled(slot, scheduledDuties::produceBlock);\n   }\n \n   @Override\n   public void onAttestationCreationDue(final UnsignedLong slot) {\n-    scheduledDuties.produceAttestations(slot);\n+    whenDutiesScheduled(slot, scheduledDuties::produceAttestations);\n   }\n \n   @Override\n   public void onAttestationAggregationDue(final UnsignedLong slot) {\n-    scheduledDuties.performAggregation(slot);\n+    whenDutiesScheduled(slot, scheduledDuties::performAggregation);\n+  }\n+\n+  private void whenDutiesScheduled(final UnsignedLong slot, final Consumer<UnsignedLong> action) {\n+    // We chain the futures to ensure all actions always happen in their original order.\n+    final UnsignedLong epoch = compute_epoch_at_slot(slot);\n+    final SafeFuture<Void> delayedAction =\n+        pendingTasksByEpoch.computeIfPresent(\n+            epoch, (key, previousTask) -> previousTask.thenRun(() -> action.accept(slot)));\n+    if (delayedAction == null) {\n+      // There was no pending tasks so execute immediately.\n+      action.accept(slot);\n+    } else {\n+      removeWhenAllTasksComplete(epoch, delayedAction);\n+    }\n+  }\n+\n+  /**\n+   * Once each new task has been added to {@link #pendingTasksByEpoch}, this function ensures that\n+   * the task queue is removed when that tasks completes, if and only if it is still the last task\n+   * in the queue.\n+   *\n+   * @param epoch the epoch the task was queued for\n+   * @param enqueuedTask the task that was queued\n+   */\n+  private void removeWhenAllTasksComplete(\n+      final UnsignedLong epoch, final SafeFuture<Void> enqueuedTask) {\n+    enqueuedTask.always(() -> pendingTasksByEpoch.remove(epoch, enqueuedTask));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84d2137460e33f834c5f1c7da5daf00ca00c55be"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5ODI3NA==", "bodyText": ".always winds up mapping to a .handle call under the covers - it's just like any other kind of chaining call on CompletableFuture, so perfectly fine to call multiple times.  In this case though it's actually only called once per future anyway because it's a different future passed into this function each time.", "url": "https://github.com/ConsenSys/teku/pull/1592#discussion_r409098274", "createdAt": "2020-04-15T19:58:36Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/DutyScheduler.java", "diffHunk": "@@ -182,16 +205,43 @@ private void scheduleAggregation(\n \n   @Override\n   public void onBlockProductionDue(final UnsignedLong slot) {\n-    scheduledDuties.produceBlock(slot);\n+    whenDutiesScheduled(slot, scheduledDuties::produceBlock);\n   }\n \n   @Override\n   public void onAttestationCreationDue(final UnsignedLong slot) {\n-    scheduledDuties.produceAttestations(slot);\n+    whenDutiesScheduled(slot, scheduledDuties::produceAttestations);\n   }\n \n   @Override\n   public void onAttestationAggregationDue(final UnsignedLong slot) {\n-    scheduledDuties.performAggregation(slot);\n+    whenDutiesScheduled(slot, scheduledDuties::performAggregation);\n+  }\n+\n+  private void whenDutiesScheduled(final UnsignedLong slot, final Consumer<UnsignedLong> action) {\n+    // We chain the futures to ensure all actions always happen in their original order.\n+    final UnsignedLong epoch = compute_epoch_at_slot(slot);\n+    final SafeFuture<Void> delayedAction =\n+        pendingTasksByEpoch.computeIfPresent(\n+            epoch, (key, previousTask) -> previousTask.thenRun(() -> action.accept(slot)));\n+    if (delayedAction == null) {\n+      // There was no pending tasks so execute immediately.\n+      action.accept(slot);\n+    } else {\n+      removeWhenAllTasksComplete(epoch, delayedAction);\n+    }\n+  }\n+\n+  /**\n+   * Once each new task has been added to {@link #pendingTasksByEpoch}, this function ensures that\n+   * the task queue is removed when that tasks completes, if and only if it is still the last task\n+   * in the queue.\n+   *\n+   * @param epoch the epoch the task was queued for\n+   * @param enqueuedTask the task that was queued\n+   */\n+  private void removeWhenAllTasksComplete(\n+      final UnsignedLong epoch, final SafeFuture<Void> enqueuedTask) {\n+    enqueuedTask.always(() -> pendingTasksByEpoch.remove(epoch, enqueuedTask));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwODk3NA=="}, "originalCommit": {"oid": "84d2137460e33f834c5f1c7da5daf00ca00c55be"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1616, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}