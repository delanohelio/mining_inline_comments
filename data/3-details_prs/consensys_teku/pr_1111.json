{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2Mjk3MTM4", "number": 1111, "title": "Optimize: add dedicated BeaconSate cache container, add active validators cache", "bodyText": "PR Description\n\nAdd TransitionCaches instance to the BeaconStateWithCaches. It would contain all the caches persistent across transitions. The TransitionCaches should be\n\nthread-safe: it should safe to parallelize any spec helper function with the same TransitionCaches instance\nfork-safe: any cache modification made in one fork shouldn't be visible in another fork\n\n\nAdd active validators cache. get_active_validator_indices is frequently invoked while its return value is persistent within an epoch.\n\nResults\nNote: below results are not absolute (may differ from results measured on this branch) and should be treated relatively.\nBefore\nBenchmark                              (validatorsCount)  Mode  Cnt   Score   Error  Units\nTransitionBenchmark.Block.importBlock               1024    ss   50   0,352 \u00b1 0,004   s/op\nTransitionBenchmark.Block.importBlock               3072    ss   50   0,527 \u00b1 0,003   s/op\nTransitionBenchmark.Epoch.importBlock               1024    ss   10   2,053 \u00b1 0,035   s/op\nTransitionBenchmark.Epoch.importBlock               3072    ss   10  16,164 \u00b1 0,146   s/op\n\nAfter\nBenchmark                              (validatorsCount)  Mode  Cnt  Score   Error  Units\nTransitionBenchmark.Block.importBlock               1024    ss   50  0,351 \u00b1 0,009   s/op\nTransitionBenchmark.Block.importBlock               3072    ss   50  0,529 \u00b1 0,005   s/op\nTransitionBenchmark.Block.importBlock              10240    ss   50  1,135 \u00b1 0,020   s/op\nTransitionBenchmark.Epoch.importBlock               1024    ss   10  0,613 \u00b1 0,011   s/op\nTransitionBenchmark.Epoch.importBlock               3072    ss   10  2,704 \u00b1 0,090   s/op\nTransitionBenchmark.Epoch.importBlock              10240    ss   10 28,404 \u00b1 3,693   s/op", "createdAt": "2020-01-23T10:47:55Z", "url": "https://github.com/ConsenSys/teku/pull/1111", "merged": true, "mergeCommit": {"oid": "07ef3372b02fa26ce666e26b83ea6c8dfb4c25c8"}, "closed": true, "closedAt": "2020-01-27T16:30:15Z", "author": {"login": "Nashatyrev"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9Gy8XgH2gAyMzY2Mjk3MTM4OmJjYzYwMzE1YWQ2NTRkNDlkNTAwZjdjOGQ4MzAxY2JhOTM1ZDY0MjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-fNRLgH2gAyMzY2Mjk3MTM4OjA1OTE2N2Y1YzAwMWY3YWQyM2NkNzYwMTkwODNlOTI0YjA0MjczYTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bcc60315ad654d49d500f7c8d8301cba935d6426", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/bcc60315ad654d49d500f7c8d8301cba935d6426", "committedDate": "2020-01-23T09:19:23Z", "message": "Add activeValidatorsCache (naive static implementation)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d724d3aab1f020d1c4b7aa71e87e39f9b1e9d69c", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/d724d3aab1f020d1c4b7aa71e87e39f9b1e9d69c", "committedDate": "2020-01-23T09:27:26Z", "message": "Add TransitionCaches to the BeaconChainWithCache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89d375ca06891b1d214094ac0a7beff94afc99cf", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/89d375ca06891b1d214094ac0a7beff94afc99cf", "committedDate": "2020-01-23T09:27:43Z", "message": "Move activeValidators cache from ValidatorUtils statics to the TransitionsCache instance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8588b1d60b72857ff10ec1a7e0130f2ea1990d0f", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/8588b1d60b72857ff10ec1a7e0130f2ea1990d0f", "committedDate": "2020-01-23T09:50:49Z", "message": "Make LRUCache to evict last inserted entry instead of last accessed, since it is more appropriate for transition logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84ecfd1a24c5d394b183b526febce60a8c3e6776", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/84ecfd1a24c5d394b183b526febce60a8c3e6776", "committedDate": "2020-01-23T09:51:02Z", "message": "Add javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c88eecc073a94bde9a3312e28730fbf69d59c7a7", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/c88eecc073a94bde9a3312e28730fbf69d59c7a7", "committedDate": "2020-01-23T10:55:07Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a0a51f476df20d56fc11468af7d31b499365b30", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/9a0a51f476df20d56fc11468af7d31b499365b30", "committedDate": "2020-01-23T11:36:38Z", "message": "Fix compiler warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04f9319220e4e56f1c3b85dac1ab8f77595c25e5", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/04f9319220e4e56f1c3b85dac1ab8f77595c25e5", "committedDate": "2020-01-23T12:54:11Z", "message": "Make LRUCache.copy() method thread-safe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfa0829bcbc02347f177b19f665d1bf927ddfbff", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/cfa0829bcbc02347f177b19f665d1bf927ddfbff", "committedDate": "2020-01-23T13:14:05Z", "message": "Blocks generator: use the right keys source"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07206583d6e2e5b0df720ebcda3076328228c1b0", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/07206583d6e2e5b0df720ebcda3076328228c1b0", "committedDate": "2020-01-23T13:48:36Z", "message": "Re-generate benchmark blocks for 0.9.4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dad2554ecba9653bae9a6669c33652cda3ff3198", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/dad2554ecba9653bae9a6669c33652cda3ff3198", "committedDate": "2020-01-23T13:49:44Z", "message": "Remove debug blocks printing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NTcyODAz", "url": "https://github.com/ConsenSys/teku/pull/1111#pullrequestreview-347572803", "createdAt": "2020-01-23T20:04:56Z", "commit": {"oid": "dad2554ecba9653bae9a6669c33652cda3ff3198"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDowNDo1NlrOFhLB-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDo1Mjo1MlrOFhMQzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyODA1Nw==", "bodyText": "Could this just use LimitedHashMap?  The static block to add initialCachedContent would just have to be done after construction but that should be safe since we're still in the constructor so no other operations can be happening.", "url": "https://github.com/ConsenSys/teku/pull/1111#discussion_r370328057", "createdAt": "2020-01-23T20:04:56Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/cache/LRUCache.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util.cache;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+/**\n+ * Cache made around LRU-map with fixed size, removing eldest entries (by added) when the space is\n+ * over\n+ *\n+ * @param <K> Keys type\n+ * @param <V> Values type\n+ */\n+public class LRUCache<K, V> implements Cache<K, V> {\n+\n+  private final Map<K, V> cacheData;\n+  private final int maxCapacity;\n+\n+  /**\n+   * Creates cache\n+   *\n+   * @param capacity Size of the cache\n+   */\n+  public LRUCache(int capacity) {\n+    this(capacity, Collections.emptyMap());\n+  }\n+\n+  private LRUCache(int capacity, Map<K, V> initialCachedContent) {\n+    this.maxCapacity = capacity;\n+    this.cacheData =\n+        Collections.synchronizedMap(\n+            new LinkedHashMap<>(maxCapacity + 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad2554ecba9653bae9a6669c33652cda3ff3198"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyOTM0OA==", "bodyText": "I was going to suggest we consider using the Guava cache libraries rather than writing our own, but their version of Cache.get throws a checked exception to allow the fallback function to throw checked exceptions which makes using the cache kind of awful.", "url": "https://github.com/ConsenSys/teku/pull/1111#discussion_r370329348", "createdAt": "2020-01-23T20:08:04Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/cache/LRUCache.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util.cache;\n+\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+/**\n+ * Cache made around LRU-map with fixed size, removing eldest entries (by added) when the space is\n+ * over\n+ *\n+ * @param <K> Keys type\n+ * @param <V> Values type\n+ */\n+public class LRUCache<K, V> implements Cache<K, V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad2554ecba9653bae9a6669c33652cda3ff3198"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0NzIwNg==", "bodyText": "This works and I like how it winds up with very minimal changes, but I wonder if as we introduce more caches we'll wind up with a lot of boilerplate in getting the caches etc obscuring the actual business logic.\nI think we should land this as-is, but I am wondering if we could be a bit radical here and take advantage of polymorphism.  1144a56 is what I have in mind.  If BeaconState provided a getActiveValidatorIndices method with the actual spec logic, then BeaconStateWithCache could just override that method to check the cache first.  Feels really nice and clean in many ways.\nBut there's a couple of downsides:\n\nNot sure this scales well - we could wind up with half the transition code in BeaconState.\nI don't see this playing well with hard forks after launch (neither does our current approach)\n\nWhich I think is enough to talk me out of it, and that it's better for classes like ValidatorUtils to use actual instances rather than all static methods - then this polymorphism approach could be used there, and different implementations could be provided for different hard forks, but that's a bigger scope of work.\nYou can safely ignore this for now if you like, I just keep pondering how we need to evolve the design to be more flexible in the future...  Happy to hear any thoughts anyone has though.", "url": "https://github.com/ConsenSys/teku/pull/1111#discussion_r370347206", "createdAt": "2020-01-23T20:50:18Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/ValidatorsUtil.java", "diffHunk": "@@ -100,11 +101,17 @@ public static boolean is_eligible_for_activation(BeaconState state, Validator va\n    *     <a>https://github.com/ethereum/eth2.0-specs/blob/v0.8.0/specs/core/0_beacon-chain.md#get_active_validator_indices</a>\n    */\n   public static List<Integer> get_active_validator_indices(BeaconState state, UnsignedLong epoch) {\n-    List<Validator> validators = state.getValidators();\n-    return IntStream.range(0, validators.size())\n-        .filter(index -> is_active_validator(validators.get(index), epoch))\n-        .boxed()\n-        .collect(Collectors.toList());\n+    return BeaconStateWithCache.getTransitionCaches(state)\n+        .getActiveValidators()\n+        .get(\n+            epoch,\n+            e -> {\n+              List<Validator> validators = state.getValidators();\n+              return IntStream.range(0, validators.size())\n+                  .filter(index -> is_active_validator(validators.get(index), epoch))\n+                  .boxed()\n+                  .collect(Collectors.toList());\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad2554ecba9653bae9a6669c33652cda3ff3198"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM0ODIzNw==", "bodyText": "Would it be better to add getTransitionCaches to BeaconState and then use polymorphism so BeaconState returns TransitionCaches.getNoOp() and BeaconStateWithCache overrides it to return a real cache?\nThat would avoid the instanceof checks here and in deepCopy.", "url": "https://github.com/ConsenSys/teku/pull/1111#discussion_r370348237", "createdAt": "2020-01-23T20:52:52Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/state/BeaconStateWithCache.java", "diffHunk": "@@ -172,6 +225,16 @@ public static BeaconStateWithCache fromBeaconState(BeaconState state) {\n         state.getFinalized_checkpoint());\n   }\n \n+  public static TransitionCaches getTransitionCaches(BeaconState state) {\n+    return state instanceof BeaconStateWithCache\n+        ? ((BeaconStateWithCache) state).getTransitionCaches()\n+        : TransitionCaches.getNoOp();\n+  }\n+\n+  public TransitionCaches getTransitionCaches() {\n+    return transitionCaches;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad2554ecba9653bae9a6669c33652cda3ff3198"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19d72bc794a3046bed74b5f9380a3bff80835604", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/19d72bc794a3046bed74b5f9380a3bff80835604", "committedDate": "2020-01-24T07:08:26Z", "message": "Use existing LimitedHashMap instead of duplicating code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43403794e6e081b9a084b9d3a54e28b706f136cc", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/43403794e6e081b9a084b9d3a54e28b706f136cc", "committedDate": "2020-01-24T07:22:53Z", "message": "Merge remote-tracking branch 'pegasys/master' into optimize-add-cache-active-validators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ae65418ee21f58897ec62e63116b7fd4e03e438", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/8ae65418ee21f58897ec62e63116b7fd4e03e438", "committedDate": "2020-01-24T07:59:46Z", "message": "Benchmark resource updated with a block list of 300 entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa4a266eca9b4da95137bca8c8645c8137f6b643", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/aa4a266eca9b4da95137bca8c8645c8137f6b643", "committedDate": "2020-01-24T08:40:28Z", "message": "Rephrase the code to fix the DoubleBraceInitialization warning"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDg4NTU1", "url": "https://github.com/ConsenSys/teku/pull/1111#pullrequestreview-348088555", "createdAt": "2020-01-24T16:53:59Z", "commit": {"oid": "aa4a266eca9b4da95137bca8c8645c8137f6b643"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "059167f5c001f7ad23cd76019083e924b04273a4", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/059167f5c001f7ad23cd76019083e924b04273a4", "committedDate": "2020-01-27T16:19:47Z", "message": "Merge branch 'master' into optimize-add-cache-active-validators"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4233, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}