{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNzEyODUw", "number": 2235, "title": "Optimize memory:  keep BeaconState view caches via SoftReference", "bodyText": "PR Description\nKeep the roots of remerkable view caches (BeaconStateImpl) via SoftReference so in case of heap memory lack they can be released.\nThe fix doesn't affect performance as only the topmost views (BeaconState children views) are accessed by SoftReference\nThis is not ideal solution, since arbitrary caches are erased instead of 'last recently used'.\nBut the latter approach would be more complex and error-prone. While the current solution is pretty simple, reliable and allows to avoid OOM at the expense of possible ~2x BeaconState structures access slowdown\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-06-26T17:52:11Z", "url": "https://github.com/ConsenSys/teku/pull/2235", "merged": true, "mergeCommit": {"oid": "5dd16956dec48d62f6a52a08263761f0c6db76d9"}, "closed": true, "closedAt": "2020-06-29T13:12:51Z", "author": {"login": "Nashatyrev"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvF7GWAH2gAyNDQwNzEyODUwOjY2N2UyMThlZDkxNjllMzI0ZDBjNWFiMTkwMTFiYjZmOTJhYzJhYTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwAg1vgH2gAyNDQwNzEyODUwOjBjYjJjYmQyMWQ3ZGE0YjQyMTE4OWVjYTM4MWJhMGQ2YmJkZGM3MDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "667e218ed9169e324d0c5ab19011bb6f92ac2aa0", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/667e218ed9169e324d0c5ab19011bb6f92ac2aa0", "committedDate": "2020-06-26T16:34:36Z", "message": "Clean up ProfilingRun and add a separate method for manual mem testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec9483550d750df34d9f177e74e45deca53a3a63", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/ec9483550d750df34d9f177e74e45deca53a3a63", "committedDate": "2020-06-26T17:35:41Z", "message": "Adjust ProfilingRun and add missing dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7504a14eeeaabb61b70f10ad6521976c7779e82", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/b7504a14eeeaabb61b70f10ad6521976c7779e82", "committedDate": "2020-06-26T17:37:21Z", "message": "For topmost BeaconStateImpl view create a soft-reference child view cache to make heap usage more flexible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a46a5b99a5cd2070b5398f4b529881b42c6917c", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/3a46a5b99a5cd2070b5398f4b529881b42c6917c", "committedDate": "2020-06-26T17:41:09Z", "message": "Apply spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41a2b8e09e8776eb341189446c86a8c6d4d6c13a", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/41a2b8e09e8776eb341189446c86a8c6d4d6c13a", "committedDate": "2020-06-26T18:04:15Z", "message": "Resolve erroprone warns"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4ODE1MDUy", "url": "https://github.com/ConsenSys/teku/pull/2235#pullrequestreview-438815052", "createdAt": "2020-06-28T21:33:24Z", "commit": {"oid": "41a2b8e09e8776eb341189446c86a8c6d4d6c13a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMTozMzoyNVrOGqAdSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMTozMzoyNVrOGqAdSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwMDg3Mg==", "bodyText": "I'm assuming we're ok with multiple threads winding up creating new caches at the same time here?  One of them will just wind up being GC'd again pretty much immediately which is the same behaviour we'd see if a single new SoftReference as created and the GC immediately cleared it out again.", "url": "https://github.com/ConsenSys/teku/pull/2235#discussion_r446700872", "createdAt": "2020-06-28T21:33:25Z", "author": {"login": "ajsutton"}, "path": "ssz/src/main/java/tech/pegasys/teku/ssz/backing/cache/SoftRefIntCache.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.ssz.backing.cache;\n+\n+import java.lang.ref.SoftReference;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.IntFunction;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Keeps the delegate cache in a {@link SoftReference} to allow the cache to be GC'ed if the\n+ * application lacks of heap memory.\n+ *\n+ * <p>On {@link #copy()} or {@link #transfer()} also returns a {@link SoftRefIntCache} instance\n+ */\n+public class SoftRefIntCache<V> implements IntCache<V> {\n+\n+  private final Supplier<IntCache<V>> cacheCtor;\n+  private volatile SoftReference<IntCache<V>> delegate;\n+\n+  private SoftRefIntCache(IntCache<V> initialDelegate, Supplier<IntCache<V>> cacheCtor) {\n+    this.cacheCtor = cacheCtor;\n+    delegate = new SoftReference<>(initialDelegate);\n+  }\n+\n+  public SoftRefIntCache(Supplier<IntCache<V>> cacheCtor) {\n+    this(cacheCtor.get(), cacheCtor);\n+  }\n+\n+  public IntCache<V> getDelegate() {\n+    IntCache<V> cache = delegate.get();\n+    if (cache == null) {\n+      cache = cacheCtor.get();\n+      delegate = new SoftReference<>(cache);\n+    }\n+    return cache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a2b8e09e8776eb341189446c86a8c6d4d6c13a"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a318e3f421db891d2443196b7c4d9133206ac8b6", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/a318e3f421db891d2443196b7c4d9133206ac8b6", "committedDate": "2020-06-29T11:30:03Z", "message": "Merge branch 'master' into optimize-mem-state-views"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cb2cbd21d7da4b421189eca381ba0d6bbddc704", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/0cb2cbd21d7da4b421189eca381ba0d6bbddc704", "committedDate": "2020-06-29T12:50:19Z", "message": "Resolve merge conflict"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3747, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}