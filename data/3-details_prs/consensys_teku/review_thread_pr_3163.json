{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MzE2NTcw", "number": 3163, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMDozODo0OVrOE2jPLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMDozODo0OVrOE2jPLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NjM1ODg0OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/stategenerator/StateRegenerationBaseSelector.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMDozODo0OVrOHvaMAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTo0MTozN1rOHv0uIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NDE3OQ==", "bodyText": "If we don't actually need the block, would it be better to always create the summary purely off of the state and avoid looking up via blockProvider entirely?  I worry that if the block is sometimes available and sometimes not, it creates more corner cases that could be hard to test.  Whereas if it's never present we know the downstream code has to be able to handle it.", "url": "https://github.com/ConsenSys/teku/pull/3163#discussion_r519474179", "createdAt": "2020-11-08T20:38:49Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/stategenerator/StateRegenerationBaseSelector.java", "diffHunk": "@@ -121,13 +121,20 @@ private boolean isBetterThanCurrentRebasedStartingPoint(\n             .isGreaterThan(closestAvailableFromStore.getSlot())) {\n       return SafeFuture.completedFuture(rebasedStartingPoint);\n     }\n+\n     return blockProvider\n         .getBlock(closestAvailableFromStore.getBlockRoot())\n         .thenApply(\n-            maybeBlock ->\n-                maybeBlock.map(\n+            maybeBlock -> {\n+              if (maybeBlock.isPresent()) {\n+                return maybeBlock.map(\n                     block ->\n-                        StateAndBlockSummary.create(block, closestAvailableFromStore.getState())));\n+                        StateAndBlockSummary.create(block, closestAvailableFromStore.getState()));\n+              } else {\n+                return Optional.of(\n+                    StateAndBlockSummary.create(closestAvailableFromStore.getState()));\n+              }\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198f97b4ad14ae117741d3fa729b623042cffaad"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg4NTg5NQ==", "bodyText": "Good point - I'll follow up on this suggestion in another PR.  I wanted to avoid changing the current production behavior in this PR, but it does make sense to simplify where we can.", "url": "https://github.com/ConsenSys/teku/pull/3163#discussion_r519885895", "createdAt": "2020-11-09T15:11:09Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/stategenerator/StateRegenerationBaseSelector.java", "diffHunk": "@@ -121,13 +121,20 @@ private boolean isBetterThanCurrentRebasedStartingPoint(\n             .isGreaterThan(closestAvailableFromStore.getSlot())) {\n       return SafeFuture.completedFuture(rebasedStartingPoint);\n     }\n+\n     return blockProvider\n         .getBlock(closestAvailableFromStore.getBlockRoot())\n         .thenApply(\n-            maybeBlock ->\n-                maybeBlock.map(\n+            maybeBlock -> {\n+              if (maybeBlock.isPresent()) {\n+                return maybeBlock.map(\n                     block ->\n-                        StateAndBlockSummary.create(block, closestAvailableFromStore.getState())));\n+                        StateAndBlockSummary.create(block, closestAvailableFromStore.getState()));\n+              } else {\n+                return Optional.of(\n+                    StateAndBlockSummary.create(closestAvailableFromStore.getState()));\n+              }\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NDE3OQ=="}, "originalCommit": {"oid": "198f97b4ad14ae117741d3fa729b623042cffaad"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkwODg5OA==", "bodyText": "Added a follow-up ticket here to make sure I don't forget: #3184", "url": "https://github.com/ConsenSys/teku/pull/3163#discussion_r519908898", "createdAt": "2020-11-09T15:41:37Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/stategenerator/StateRegenerationBaseSelector.java", "diffHunk": "@@ -121,13 +121,20 @@ private boolean isBetterThanCurrentRebasedStartingPoint(\n             .isGreaterThan(closestAvailableFromStore.getSlot())) {\n       return SafeFuture.completedFuture(rebasedStartingPoint);\n     }\n+\n     return blockProvider\n         .getBlock(closestAvailableFromStore.getBlockRoot())\n         .thenApply(\n-            maybeBlock ->\n-                maybeBlock.map(\n+            maybeBlock -> {\n+              if (maybeBlock.isPresent()) {\n+                return maybeBlock.map(\n                     block ->\n-                        StateAndBlockSummary.create(block, closestAvailableFromStore.getState())));\n+                        StateAndBlockSummary.create(block, closestAvailableFromStore.getState()));\n+              } else {\n+                return Optional.of(\n+                    StateAndBlockSummary.create(closestAvailableFromStore.getState()));\n+              }\n+            });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NDE3OQ=="}, "originalCommit": {"oid": "198f97b4ad14ae117741d3fa729b623042cffaad"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2973, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}