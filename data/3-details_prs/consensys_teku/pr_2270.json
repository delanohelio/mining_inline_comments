{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMTI2NzQ5", "number": 2270, "title": "Implement ProtoArray disk storage utilities", "bodyText": "PR Description\nImplements ProtoArray disk storage utilities\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-06-30T15:53:36Z", "url": "https://github.com/ConsenSys/teku/pull/2270", "merged": true, "mergeCommit": {"oid": "4cadd6ef69d125eb72daa6448870d42ee4423813"}, "closed": true, "closedAt": "2020-07-02T15:18:45Z", "author": {"login": "cemozerr"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwXwKOAH2gAyNDQyMTI2NzQ5OjkzODkxOWFlMGE1NzQxZGE5ZDdlOWJlMGMxNTVhYTc2YWY3NjRlZmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxARYCgH2gAyNDQyMTI2NzQ5OjM1MTJhNmRmMTY1ZWFlMTU3ODQ1YjljYzdkN2Q4MjA3ZjU0ZjgzOGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "938919ae0a5741da9d7e9be0c155aa76af764eff", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/938919ae0a5741da9d7e9be0c155aa76af764eff", "committedDate": "2020-06-30T15:54:52Z", "message": "Build utilities to write protoArray to disk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/6e02cdef9b60fd6ade19c193033489c2dcafd0c4", "committedDate": "2020-06-30T15:54:52Z", "message": "Add override annotation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ae364036dab67c525fd3e3975d183e69404e917", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/1ae364036dab67c525fd3e3975d183e69404e917", "committedDate": "2020-06-30T15:46:38Z", "message": "Build utilities to write protoArray to disk"}, "afterCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/6e02cdef9b60fd6ade19c193033489c2dcafd0c4", "committedDate": "2020-06-30T15:54:52Z", "message": "Add override annotation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMzc5NTQ2", "url": "https://github.com/ConsenSys/teku/pull/2270#pullrequestreview-440379546", "createdAt": "2020-06-30T20:56:42Z", "commit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1Njo0MlrOGrOKKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1Njo0MlrOGrOKKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3MzkyOA==", "bodyText": "final", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447973928", "createdAt": "2020-06-30T20:56:42Z", "author": {"login": "rolfyone"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/serialization/ProtoArraySerializer.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server.rocksdb.serialization;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.ssz.SSZ;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoNode;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySerializer implements RocksDbSerializer<ProtoArray> {\n+  @Override\n+  public ProtoArray deserialize(final byte[] data) {\n+    return SSZ.decode(\n+        Bytes.of(data),\n+        reader -> {\n+          final UnsignedLong justifiedEpoch = UnsignedLong.fromLongBits(reader.readUInt64());\n+          final UnsignedLong finalizedEpoch = UnsignedLong.fromLongBits(reader.readUInt64());\n+          final List<BlockInformation> blockInformationList =\n+              reader.readBytesList().stream().map(BlockInformation::fromBytes).collect(toList());\n+          ProtoArray protoArray =\n+              new ProtoArray(\n+                  Constants.PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD,\n+                  justifiedEpoch,\n+                  finalizedEpoch,\n+                  new ArrayList<>(),\n+                  new HashMap<>());\n+          blockInformationList.forEach(\n+              blockInformation ->\n+                  protoArray.onBlock(\n+                      blockInformation.blockSlot,\n+                      blockInformation.blockRoot,\n+                      blockInformation.parentRoot,\n+                      blockInformation.stateRoot,\n+                      blockInformation.justifiedEpoch,\n+                      blockInformation.finalizedEpoch));\n+          return protoArray;\n+        });\n+  }\n+\n+  @Override\n+  public byte[] serialize(final ProtoArray protoArray) {\n+    Bytes bytes =\n+        SSZ.encode(\n+            writer -> {\n+              writer.writeUInt64(protoArray.getJustifiedEpoch().longValue());\n+              writer.writeUInt64(protoArray.getFinalizedEpoch().longValue());\n+              writer.writeBytesList(\n+                  protoArray.getNodes().stream().map(BlockInformation::toBytes).collect(toList()));\n+            });\n+    return bytes.toArrayUnsafe();\n+  }\n+\n+  private static class BlockInformation {\n+    private final UnsignedLong blockSlot;\n+    private final Bytes32 blockRoot;\n+    private final Bytes32 parentRoot;\n+    private final Bytes32 stateRoot;\n+    private final UnsignedLong justifiedEpoch;\n+    private final UnsignedLong finalizedEpoch;\n+\n+    private BlockInformation(\n+        UnsignedLong blockSlot,\n+        Bytes32 blockRoot,\n+        Bytes32 parentRoot,\n+        Bytes32 stateRoot,\n+        UnsignedLong justifiedEpoch,\n+        UnsignedLong finalizedEpoch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMzgwMzc3", "url": "https://github.com/ConsenSys/teku/pull/2270#pullrequestreview-440380377", "createdAt": "2020-06-30T20:57:58Z", "commit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1Nzo1OFrOGrONGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo1Nzo1OFrOGrONGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDY4MA==", "bodyText": "nit: params should probably be final", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447974680", "createdAt": "2020-06-30T20:57:58Z", "author": {"login": "rolfyone"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/serialization/ProtoArraySerializer.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server.rocksdb.serialization;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.ssz.SSZ;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoNode;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySerializer implements RocksDbSerializer<ProtoArray> {\n+  @Override\n+  public ProtoArray deserialize(final byte[] data) {\n+    return SSZ.decode(\n+        Bytes.of(data),\n+        reader -> {\n+          final UnsignedLong justifiedEpoch = UnsignedLong.fromLongBits(reader.readUInt64());\n+          final UnsignedLong finalizedEpoch = UnsignedLong.fromLongBits(reader.readUInt64());\n+          final List<BlockInformation> blockInformationList =\n+              reader.readBytesList().stream().map(BlockInformation::fromBytes).collect(toList());\n+          ProtoArray protoArray =\n+              new ProtoArray(\n+                  Constants.PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD,\n+                  justifiedEpoch,\n+                  finalizedEpoch,\n+                  new ArrayList<>(),\n+                  new HashMap<>());\n+          blockInformationList.forEach(\n+              blockInformation ->\n+                  protoArray.onBlock(\n+                      blockInformation.blockSlot,\n+                      blockInformation.blockRoot,\n+                      blockInformation.parentRoot,\n+                      blockInformation.stateRoot,\n+                      blockInformation.justifiedEpoch,\n+                      blockInformation.finalizedEpoch));\n+          return protoArray;\n+        });\n+  }\n+\n+  @Override\n+  public byte[] serialize(final ProtoArray protoArray) {\n+    Bytes bytes =\n+        SSZ.encode(\n+            writer -> {\n+              writer.writeUInt64(protoArray.getJustifiedEpoch().longValue());\n+              writer.writeUInt64(protoArray.getFinalizedEpoch().longValue());\n+              writer.writeBytesList(\n+                  protoArray.getNodes().stream().map(BlockInformation::toBytes).collect(toList()));\n+            });\n+    return bytes.toArrayUnsafe();\n+  }\n+\n+  private static class BlockInformation {\n+    private final UnsignedLong blockSlot;\n+    private final Bytes32 blockRoot;\n+    private final Bytes32 parentRoot;\n+    private final Bytes32 stateRoot;\n+    private final UnsignedLong justifiedEpoch;\n+    private final UnsignedLong finalizedEpoch;\n+\n+    private BlockInformation(\n+        UnsignedLong blockSlot,\n+        Bytes32 blockRoot,\n+        Bytes32 parentRoot,\n+        Bytes32 stateRoot,\n+        UnsignedLong justifiedEpoch,\n+        UnsignedLong finalizedEpoch) {\n+      this.blockSlot = blockSlot;\n+      this.blockRoot = blockRoot;\n+      this.parentRoot = parentRoot;\n+      this.stateRoot = stateRoot;\n+      this.justifiedEpoch = justifiedEpoch;\n+      this.finalizedEpoch = finalizedEpoch;\n+    }\n+\n+    public static Bytes toBytes(ProtoNode node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMzc0NjA2", "url": "https://github.com/ConsenSys/teku/pull/2270#pullrequestreview-440374606", "createdAt": "2020-06-30T20:49:04Z", "commit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMDo0OTowNFrOGrN6Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTowNDoxN1rOGrOaAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2OTg4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final SignedBlockAndState genesis = chainBuilder.generateGenesis();\n          \n          \n            \n                storageSystem.recentChainData().initializeFromGenesis(genesis.getState());\n          \n          \n            \n                storageSystem.chainUpdater().initializeGenesis();", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447969882", "createdAt": "2020-06-30T20:49:04Z", "author": {"login": "mbaxter"}, "path": "storage/src/test/java/tech/pegasys/teku/storage/server/ProtoArrayStorageTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyGenerator;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.ChainBuilder;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoNode;\n+import tech.pegasys.teku.storage.storageSystem.InMemoryStorageSystem;\n+import tech.pegasys.teku.storage.storageSystem.StorageSystem;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.config.StateStorageMode;\n+\n+public class ProtoArrayStorageTest {\n+  protected static final List<BLSKeyPair> VALIDATOR_KEYS = BLSKeyGenerator.generateKeyPairs(3);\n+  private ProtoArrayStorage protoArrayStorage;\n+\n+  protected final ChainBuilder chainBuilder = ChainBuilder.create(VALIDATOR_KEYS);\n+\n+  private final StorageSystem storageSystem =\n+      InMemoryStorageSystem.createEmptyV4StorageSystem(StateStorageMode.ARCHIVE, 1);\n+\n+  @BeforeEach\n+  public void beforeEach() {\n+    // Initialize db\n+    final SignedBlockAndState genesis = chainBuilder.generateGenesis();\n+    storageSystem.recentChainData().initializeFromGenesis(genesis.getState());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzgyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void updateProtoArrayOnDisk(ProtoArray protoArray);\n          \n          \n            \n              void onProtoArrayUpdate(ProtoArray protoArray);", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447977829", "createdAt": "2020-06-30T21:04:01Z", "author": {"login": "mbaxter"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayStorageChannel.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public interface ProtoArrayStorageChannel {\n+\n+  void updateProtoArrayOnDisk(ProtoArray protoArray);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3Nzk4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              SafeFuture<Optional<ProtoArray>> getProtoArrayFromDisk();\n          \n          \n            \n              SafeFuture<Optional<ProtoArray>> getProtoArray();", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447977987", "createdAt": "2020-06-30T21:04:17Z", "author": {"login": "mbaxter"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayStorageChannel.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public interface ProtoArrayStorageChannel {\n+\n+  void updateProtoArrayOnDisk(ProtoArray protoArray);\n+\n+  SafeFuture<Optional<ProtoArray>> getProtoArrayFromDisk();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDA1MDI4", "url": "https://github.com/ConsenSys/teku/pull/2270#pullrequestreview-440405028", "createdAt": "2020-06-30T21:38:30Z", "commit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTozODozMFrOGrPaHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTozODozMFrOGrPaHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5NDM5OA==", "bodyText": "We should probably be running this test against different versions of the db.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447994398", "createdAt": "2020-06-30T21:38:30Z", "author": {"login": "mbaxter"}, "path": "storage/src/test/java/tech/pegasys/teku/storage/server/ProtoArrayStorageTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyGenerator;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.ChainBuilder;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoNode;\n+import tech.pegasys.teku.storage.storageSystem.InMemoryStorageSystem;\n+import tech.pegasys.teku.storage.storageSystem.StorageSystem;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.config.StateStorageMode;\n+\n+public class ProtoArrayStorageTest {\n+  protected static final List<BLSKeyPair> VALIDATOR_KEYS = BLSKeyGenerator.generateKeyPairs(3);\n+  private ProtoArrayStorage protoArrayStorage;\n+\n+  protected final ChainBuilder chainBuilder = ChainBuilder.create(VALIDATOR_KEYS);\n+\n+  private final StorageSystem storageSystem =\n+      InMemoryStorageSystem.createEmptyV4StorageSystem(StateStorageMode.ARCHIVE, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDExNzUy", "url": "https://github.com/ConsenSys/teku/pull/2270#pullrequestreview-440411752", "createdAt": "2020-06-30T21:51:05Z", "commit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTo1MTowNVrOGrPv-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMTo1MjoyNVrOGrPyLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5OTk5Mw==", "bodyText": "Sending the same mutable instance of ProtoArray over the event channel isn't a good idea.  We'll wind up with multiple threads accessing it and what actually gets stored won't be the same as what was there when the call to this method was made.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447999993", "createdAt": "2020-06-30T21:51:05Z", "author": {"login": "ajsutton"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayStorageChannel.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public interface ProtoArrayStorageChannel {\n+\n+  void updateProtoArrayOnDisk(ProtoArray protoArray);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzgyOQ=="}, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDE5Mg==", "bodyText": "Loading a full ProtoArray is fine here because the server side hands it off and doesn't use it again.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000192", "createdAt": "2020-06-30T21:51:35Z", "author": {"login": "ajsutton"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayStorageChannel.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public interface ProtoArrayStorageChannel {\n+\n+  void updateProtoArrayOnDisk(ProtoArray protoArray);\n+\n+  SafeFuture<Optional<ProtoArray>> getProtoArrayFromDisk();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3Nzk4Nw=="}, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDQzMQ==", "bodyText": "nit: fromDisk is implied given it's a database - probably just getProtoArray", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000431", "createdAt": "2020-06-30T21:52:06Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/Database.java", "diffHunk": "@@ -70,7 +71,11 @@\n   @MustBeClosed\n   Stream<DepositsFromBlockEvent> streamDepositsFromBlocks();\n \n+  Optional<ProtoArray> getProtoArrayFromDisk();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDU1OQ==", "bodyText": "nit: Probably just putProtoArray.\nActually thinking about it, probably don't need OnDisk or FromDisk anywhere - the particular storage implementation in use might not write to disk.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000559", "createdAt": "2020-06-30T21:52:25Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/Database.java", "diffHunk": "@@ -70,7 +71,11 @@\n   @MustBeClosed\n   Stream<DepositsFromBlockEvent> streamDepositsFromBlocks();\n \n+  Optional<ProtoArray> getProtoArrayFromDisk();\n+\n   void addMinGenesisTimeBlock(final MinGenesisTimeBlockEvent event);\n \n   void addDepositsFromBlockEvent(final DepositsFromBlockEvent event);\n+\n+  void updateProtoArrayOnDisk(final ProtoArray protoArray);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2ce283773cf0dc81a9b7a5766cdb37ae56aa638", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/b2ce283773cf0dc81a9b7a5766cdb37ae56aa638", "committedDate": "2020-07-01T14:14:50Z", "message": "Resolve comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3918743039ce50c5cdd2722a31ff7c7c40494072", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/3918743039ce50c5cdd2722a31ff7c7c40494072", "committedDate": "2020-07-01T16:21:51Z", "message": "Save protoArray snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16a9ef25ded887f16806675d80d3ef4c58b28c42", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/16a9ef25ded887f16806675d80d3ef4c58b28c42", "committedDate": "2020-07-01T16:23:38Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into protoArrayToDiskUtilities\n\n# Conflicts:\n#\tstorage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/RocksDbDatabase.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/99858f01594e7a28e4373761e3e18c8b7f97122f", "committedDate": "2020-07-01T18:52:30Z", "message": "Merge branch 'master' into protoArrayToDiskUtilities"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTQ0MjQ2", "url": "https://github.com/ConsenSys/teku/pull/2270#pullrequestreview-441144246", "createdAt": "2020-07-01T19:34:42Z", "commit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTozNDo0MlrOGry1Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxOTo0NzoxN1rOGrzL4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NDczNQ==", "bodyText": "(nit) Probably a good idea to use the centralized provider so we have one location where we can update tests that depend on the database:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @MethodSource(\"getStorageSystems\")\n          \n          \n            \n              @ArgumentsSource(StorageSystemArgumentsProvider.class)", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448574735", "createdAt": "2020-07-01T19:34:42Z", "author": {"login": "mbaxter"}, "path": "storage/src/test/java/tech/pegasys/teku/storage/server/ProtoArrayStorageTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static tech.pegasys.teku.protoarray.ProtoArrayTestUtil.assertThatProtoArrayMatches;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoArraySnaphot;\n+import tech.pegasys.teku.storage.storageSystem.InMemoryStorageSystem;\n+import tech.pegasys.teku.storage.storageSystem.StorageSystem;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.config.StateStorageMode;\n+\n+public class ProtoArrayStorageTest {\n+  private ProtoArrayStorage protoArrayStorage;\n+\n+  @ParameterizedTest\n+  @MethodSource(\"getStorageSystems\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NTE0Ng==", "bodyText": "(nit) Why not just:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public ProtoNode cloneForSaving() {\n          \n          \n            \n              public ProtoNode clone() {", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448575146", "createdAt": "2020-07-01T19:35:32Z", "author": {"login": "mbaxter"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoNode.java", "diffHunk": "@@ -122,4 +123,50 @@ public void setBestChildIndex(Optional<Integer> bestChildIndex) {\n   public void setBestDescendantIndex(Optional<Integer> bestDescendantIndex) {\n     this.bestDescendantIndex = bestDescendantIndex;\n   }\n+\n+  public ProtoNode cloneForSaving() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NTg5NQ==", "bodyText": "(nit) \"save\" seems a bit misleading:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static ProtoArraySnaphot save(final ProtoArray protoArray) {\n          \n          \n            \n              public static ProtoArraySnaphot create(final ProtoArray protoArray) {", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448575895", "createdAt": "2020-07-01T19:36:53Z", "author": {"login": "mbaxter"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {\n+\n+  private final UnsignedLong justifiedEpoch;\n+  private final UnsignedLong finalizedEpoch;\n+  private final List<ProtoNode> nodes;\n+\n+  private ProtoArraySnaphot(\n+      UnsignedLong justifiedEpoch, UnsignedLong finalizedEpoch, List<ProtoNode> nodes) {\n+    this.justifiedEpoch = justifiedEpoch;\n+    this.finalizedEpoch = finalizedEpoch;\n+    this.nodes = nodes;\n+  }\n+\n+  public static ProtoArraySnaphot save(final ProtoArray protoArray) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NzAyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ProtoArraySnaphot {\n          \n          \n            \n            public class ProtoArraySnapshot {", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448577022", "createdAt": "2020-07-01T19:39:20Z", "author": {"login": "mbaxter"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3ODc1Ng==", "bodyText": "(nit) I think I'd just pass the snapshot to the db.  That way the API's are a bit clearer in requiring an immutable copy of protoarray\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                database.putProtoArray(protoArraySnaphot.toProtoArray());\n          \n          \n            \n                database.putProtoArray(protoArraySnaphot);", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448578756", "createdAt": "2020-07-01T19:43:12Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/ProtoArrayStorage.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoArraySnaphot;\n+import tech.pegasys.teku.protoarray.ProtoArrayStorageChannel;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public class ProtoArrayStorage implements ProtoArrayStorageChannel {\n+  private final Database database;\n+\n+  public ProtoArrayStorage(Database database) {\n+    this.database = database;\n+  }\n+\n+  @Override\n+  public void onProtoArrayUpdate(ProtoArraySnaphot protoArraySnaphot) {\n+    database.putProtoArray(protoArraySnaphot.toProtoArray());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ==", "bodyText": "If we really want to enforce immutability, we should probably create a copy of the nodes list we're passing into the new ProtoArray instance.  Or else, have ProtoArray create the copy internally.", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448579801", "createdAt": "2020-07-01T19:45:33Z", "author": {"login": "mbaxter"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {\n+\n+  private final UnsignedLong justifiedEpoch;\n+  private final UnsignedLong finalizedEpoch;\n+  private final List<ProtoNode> nodes;\n+\n+  private ProtoArraySnaphot(\n+      UnsignedLong justifiedEpoch, UnsignedLong finalizedEpoch, List<ProtoNode> nodes) {\n+    this.justifiedEpoch = justifiedEpoch;\n+    this.finalizedEpoch = finalizedEpoch;\n+    this.nodes = nodes;\n+  }\n+\n+  public static ProtoArraySnaphot save(final ProtoArray protoArray) {\n+    List<ProtoNode> nodes =\n+        protoArray.getNodes().stream().map(ProtoNode::cloneForSaving).collect(Collectors.toList());\n+    UnsignedLong justifiedEpoch = protoArray.getJustifiedEpoch();\n+    UnsignedLong finalizedEpoch = protoArray.getFinalizedEpoch();\n+    return new ProtoArraySnaphot(justifiedEpoch, finalizedEpoch, nodes);\n+  }\n+\n+  public ProtoArray toProtoArray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MDU3OQ==", "bodyText": "(nit) Similarly, it might make sense to return a snapshot here", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448580579", "createdAt": "2020-07-01T19:47:17Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/ProtoArrayStorage.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoArraySnaphot;\n+import tech.pegasys.teku.protoarray.ProtoArrayStorageChannel;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public class ProtoArrayStorage implements ProtoArrayStorageChannel {\n+  private final Database database;\n+\n+  public ProtoArrayStorage(Database database) {\n+    this.database = database;\n+  }\n+\n+  @Override\n+  public void onProtoArrayUpdate(ProtoArraySnaphot protoArraySnaphot) {\n+    database.putProtoArray(protoArraySnaphot.toProtoArray());\n+  }\n+\n+  @Override\n+  public SafeFuture<Optional<ProtoArray>> getProtoArray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d98e61d4b97224733a4ff987037bd7b05fb2f95", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/7d98e61d4b97224733a4ff987037bd7b05fb2f95", "committedDate": "2020-07-01T22:02:59Z", "message": "Deal only with snapshots on database & use central argument provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25ce9fba8fe6ff36d04cad28103921e57c741b2c", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/25ce9fba8fe6ff36d04cad28103921e57c741b2c", "committedDate": "2020-07-01T22:03:46Z", "message": "Merge branch 'master' into protoArrayToDiskUtilities"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjQ2OTY2", "url": "https://github.com/ConsenSys/teku/pull/2270#pullrequestreview-441246966", "createdAt": "2020-07-01T22:59:09Z", "commit": {"oid": "25ce9fba8fe6ff36d04cad28103921e57c741b2c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b44eec3616abc744521fc91b331a9545e6faaff", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/9b44eec3616abc744521fc91b331a9545e6faaff", "committedDate": "2020-07-02T14:35:12Z", "message": "Fix parametrized test arguments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3512a6df165eae157845b9cc7d7d8207f54f838c", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/3512a6df165eae157845b9cc7d7d8207f54f838c", "committedDate": "2020-07-02T15:07:21Z", "message": "Merge branch 'master' into protoArrayToDiskUtilities"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3771, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}