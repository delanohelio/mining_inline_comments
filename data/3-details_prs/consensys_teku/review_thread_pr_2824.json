{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NTIwNzkx", "number": 2824, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzowNTowOVrOElwm2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzowNTowOVrOElwm2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDI5MTQ0OnYy", "diffSide": "RIGHT", "path": "ethereum/weaksubjectivity/src/test/java/tech/pegasys/teku/weaksubjectivity/WeakSubjectivityValidatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzowNTowOVrOHVaZjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzowNTowOVrOHVaZjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNDY2OQ==", "bodyText": "nit: stale comment \"different root\"", "url": "https://github.com/ConsenSys/teku/pull/2824#discussion_r492214669", "createdAt": "2020-09-21T17:05:09Z", "author": {"login": "cemozerr"}, "path": "ethereum/weaksubjectivity/src/test/java/tech/pegasys/teku/weaksubjectivity/WeakSubjectivityValidatorTest.java", "diffHunk": "@@ -69,22 +127,73 @@ public void validateLatestFinalizedCheckpoint_validationShouldFail() {\n   }\n \n   @Test\n-  public void validateLatestFinalizedCheckpoint_validationShouldPass() {\n+  public void\n+      validateLatestFinalizedCheckpoint_withWSCheckpoint_shouldRunChecksWhenFinalizeAfterCheckpoint_shouldPass() {\n+    final Checkpoint wsCheckpoint =\n+        new Checkpoint(UInt64.valueOf(100), Bytes32.fromHexStringLenient(\"0x01\"));\n+    final WeakSubjectivityValidator validator =\n+        new WeakSubjectivityValidator(calculator, policies, Optional.of(wsCheckpoint));\n+    when(checkpointState.getEpoch()).thenReturn(wsCheckpoint.getEpoch().plus(1));\n     when(calculator.isWithinWeakSubjectivityPeriod(checkpointState, currentSlot)).thenReturn(true);\n \n     validator.validateLatestFinalizedCheckpoint(checkpointState, currentSlot);\n \n-    for (WeakSubjectivityViolationPolicy policy : policies) {\n-      orderedPolicyMocks\n-          .verify(policy, never())\n-          .onFinalizedCheckpointOutsideOfWeakSubjectivityPeriod(any(), anyInt(), any());\n-    }\n+    verify(calculator).isWithinWeakSubjectivityPeriod(checkpointState, currentSlot);\n+    orderedPolicyMocks.verifyNoMoreInteractions();\n+  }\n+\n+  @Test\n+  public void\n+      validateLatestFinalizedCheckpoint_withWSCheckpoint_shouldRunChecksWhenFinalizeAtCheckpoint_shouldFail() {\n+    final Checkpoint wsCheckpoint =\n+        new Checkpoint(UInt64.valueOf(100), Bytes32.fromHexStringLenient(\"0x01\"));\n+    final WeakSubjectivityValidator validator =\n+        new WeakSubjectivityValidator(calculator, policies, Optional.of(wsCheckpoint));\n \n+    final int validatorCount = 101;\n+    // Checkpoint is at the ws epoch, but has a different root\n+    when(checkpointState.getEpoch()).thenReturn(wsCheckpoint.getEpoch());\n+    when(checkpointState.getRoot()).thenReturn(Bytes32.fromHexStringLenient(\"0x02\"));\n+    when(calculator.isWithinWeakSubjectivityPeriod(checkpointState, currentSlot)).thenReturn(true);\n+    when(calculator.getActiveValidators(checkpointState.getState())).thenReturn(validatorCount);\n+\n+    validator.validateLatestFinalizedCheckpoint(checkpointState, currentSlot);\n+\n+    orderedPolicyMocks\n+        .verify(policies.get(0))\n+        .onFinalizedCheckpointOutsideOfWeakSubjectivityPeriod(\n+            checkpointState, validatorCount, currentSlot);\n+    orderedPolicyMocks\n+        .verify(policies.get(1))\n+        .onFinalizedCheckpointOutsideOfWeakSubjectivityPeriod(\n+            checkpointState, validatorCount, currentSlot);\n+\n+    orderedPolicyMocks.verifyNoMoreInteractions();\n+  }\n+\n+  @Test\n+  public void\n+      validateLatestFinalizedCheckpoint_withWSCheckpoint_shouldRunChecksWhenFinalizeAtCheckpoint_shouldPass() {\n+    final Checkpoint wsCheckpoint =\n+        new Checkpoint(UInt64.valueOf(100), Bytes32.fromHexStringLenient(\"0x01\"));\n+    final WeakSubjectivityValidator validator =\n+        new WeakSubjectivityValidator(calculator, policies, Optional.of(wsCheckpoint));\n+    // Checkpoint is at the ws epoch, with the same root different root", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f45bcb2bc06cb95cf1d30afd10e863b44f83a31"}, "originalPosition": 160}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3271, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}