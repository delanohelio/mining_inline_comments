{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMTMwMjI4", "number": 1249, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwMToyNzoyMFrODkH6tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToyNzowOVrODkfBLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjA1MDQ2OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/artemis/util/config/ArtemisConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwMToyNzoyMFrOFwRmOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwMTozNDowMVrOFwRphw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE2NDI4Mg==", "bodyText": "Why do we need a config entry that points to another config file that lists the keystores?", "url": "https://github.com/ConsenSys/teku/pull/1249#discussion_r386164282", "createdAt": "2020-03-02T01:27:20Z", "author": {"login": "ajsutton"}, "path": "util/src/main/java/tech/pegasys/artemis/util/config/ArtemisConfiguration.java", "diffHunk": "@@ -54,6 +54,12 @@ static final Schema createSchema() {\n     builder.addString(\"node.bootnodes\", \"\", \"ENR of the bootnode\", null);\n     builder.addString(\n         \"validator.validatorsKeyFile\", \"\", \"The file to load validator keys from\", null);\n+    builder.addString(\n+        \"validator.validatorsKeystoreConfFile\",\n+        \"\",\n+        \"The file containing paths to encrypted keystore files and password files to decrypt them\",\n+        null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ad711146e01fab2cfbc7b70606114fa27cdf307"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE2NTEyNw==", "bodyText": "I'll change it to specify all the keystores files and corresponding password files instead of using another configuration file.", "url": "https://github.com/ConsenSys/teku/pull/1249#discussion_r386165127", "createdAt": "2020-03-02T01:34:01Z", "author": {"login": "usmansaleem"}, "path": "util/src/main/java/tech/pegasys/artemis/util/config/ArtemisConfiguration.java", "diffHunk": "@@ -54,6 +54,12 @@ static final Schema createSchema() {\n     builder.addString(\"node.bootnodes\", \"\", \"ENR of the bootnode\", null);\n     builder.addString(\n         \"validator.validatorsKeyFile\", \"\", \"The file to load validator keys from\", null);\n+    builder.addString(\n+        \"validator.validatorsKeystoreConfFile\",\n+        \"\",\n+        \"The file containing paths to encrypted keystore files and password files to decrypt them\",\n+        null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE2NDI4Mg=="}, "originalCommit": {"oid": "6ad711146e01fab2cfbc7b70606114fa27cdf307"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTY5NTExOnYy", "diffSide": "RIGHT", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/KeystoresValidatorKeyProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDoxNDo0MlrOFw0C3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMDo0MTozNlrOFw0ing==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyODY3MA==", "bodyText": "You can just use:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return new ArrayList<>(\n          \n          \n            \n                    keystorePasswordFilePairs.stream()\n          \n          \n            \n                        .map(\n          \n          \n            \n                            pair -> {\n          \n          \n            \n                              final String password = loadPassword(pair.getRight());\n          \n          \n            \n                              final Bytes privKey = loadBLSPrivateKey(pair.getLeft(), password);\n          \n          \n            \n                              return new BLSKeyPair(new KeyPair(SecretKey.fromBytes(padLeft(privKey))));\n          \n          \n            \n                            })\n          \n          \n            \n                        .collect(\n          \n          \n            \n                            toMap(\n          \n          \n            \n                                blsKeyPair -> blsKeyPair.getPublicKey().toString(),\n          \n          \n            \n                                Function.identity(),\n          \n          \n            \n                                (dupKey1, dupKey2) -> dupKey2))\n          \n          \n            \n                        .values());\n          \n          \n            \n                 return keystorePasswordFilePairs.stream()\n          \n          \n            \n                    .map(pair -> padLeft(loadBLSPrivateKey(pair.getLeft(), loadPassword(pair.getRight()))))\n          \n          \n            \n                    .distinct()\n          \n          \n            \n                    .map(privKey -> new BLSKeyPair(new KeyPair(SecretKey.fromBytes(privKey))))\n          \n          \n            \n                    .collect(toList());", "url": "https://github.com/ConsenSys/teku/pull/1249#discussion_r386728670", "createdAt": "2020-03-03T00:14:42Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/KeystoresValidatorKeyProvider.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.coordinator;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.lang.String.format;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.stream.Collectors.toMap;\n+import static org.apache.commons.lang3.StringUtils.isEmpty;\n+import static tech.pegasys.artemis.util.alogger.ALogger.STDOUT;\n+\n+import com.google.common.io.Files;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.Level;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.bls.keystore.KeyStore;\n+import tech.pegasys.artemis.bls.keystore.KeyStoreLoader;\n+import tech.pegasys.artemis.bls.keystore.KeyStoreValidationException;\n+import tech.pegasys.artemis.bls.keystore.model.KeyStoreData;\n+import tech.pegasys.artemis.util.bls.BLSKeyPair;\n+import tech.pegasys.artemis.util.config.ArtemisConfiguration;\n+import tech.pegasys.artemis.util.mikuli.KeyPair;\n+import tech.pegasys.artemis.util.mikuli.SecretKey;\n+\n+public class KeystoresValidatorKeyProvider implements ValidatorKeyProvider {\n+  static final int KEY_LENGTH = 48;\n+\n+  @Override\n+  public List<BLSKeyPair> loadValidatorKeys(final ArtemisConfiguration config) {\n+    final List<Pair<Path, Path>> keystorePasswordFilePairs =\n+        config.getValidatorKeystorePasswordFilePairs();\n+    checkNotNull(keystorePasswordFilePairs, \"validator keystore and password pairs cannot be null\");\n+\n+    // return distinct loaded key pairs\n+\n+    return new ArrayList<>(\n+        keystorePasswordFilePairs.stream()\n+            .map(\n+                pair -> {\n+                  final String password = loadPassword(pair.getRight());\n+                  final Bytes privKey = loadBLSPrivateKey(pair.getLeft(), password);\n+                  return new BLSKeyPair(new KeyPair(SecretKey.fromBytes(padLeft(privKey))));\n+                })\n+            .collect(\n+                toMap(\n+                    blsKeyPair -> blsKeyPair.getPublicKey().toString(),\n+                    Function.identity(),\n+                    (dupKey1, dupKey2) -> dupKey2))\n+            .values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e53948e8563833fceac2a966f28948192c818c6"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczMzkxNA==", "bodyText": "very clever, i forgot we have distinct in streams api as well.", "url": "https://github.com/ConsenSys/teku/pull/1249#discussion_r386733914", "createdAt": "2020-03-03T00:31:55Z", "author": {"login": "usmansaleem"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/KeystoresValidatorKeyProvider.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.coordinator;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.lang.String.format;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.stream.Collectors.toMap;\n+import static org.apache.commons.lang3.StringUtils.isEmpty;\n+import static tech.pegasys.artemis.util.alogger.ALogger.STDOUT;\n+\n+import com.google.common.io.Files;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.Level;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.bls.keystore.KeyStore;\n+import tech.pegasys.artemis.bls.keystore.KeyStoreLoader;\n+import tech.pegasys.artemis.bls.keystore.KeyStoreValidationException;\n+import tech.pegasys.artemis.bls.keystore.model.KeyStoreData;\n+import tech.pegasys.artemis.util.bls.BLSKeyPair;\n+import tech.pegasys.artemis.util.config.ArtemisConfiguration;\n+import tech.pegasys.artemis.util.mikuli.KeyPair;\n+import tech.pegasys.artemis.util.mikuli.SecretKey;\n+\n+public class KeystoresValidatorKeyProvider implements ValidatorKeyProvider {\n+  static final int KEY_LENGTH = 48;\n+\n+  @Override\n+  public List<BLSKeyPair> loadValidatorKeys(final ArtemisConfiguration config) {\n+    final List<Pair<Path, Path>> keystorePasswordFilePairs =\n+        config.getValidatorKeystorePasswordFilePairs();\n+    checkNotNull(keystorePasswordFilePairs, \"validator keystore and password pairs cannot be null\");\n+\n+    // return distinct loaded key pairs\n+\n+    return new ArrayList<>(\n+        keystorePasswordFilePairs.stream()\n+            .map(\n+                pair -> {\n+                  final String password = loadPassword(pair.getRight());\n+                  final Bytes privKey = loadBLSPrivateKey(pair.getLeft(), password);\n+                  return new BLSKeyPair(new KeyPair(SecretKey.fromBytes(padLeft(privKey))));\n+                })\n+            .collect(\n+                toMap(\n+                    blsKeyPair -> blsKeyPair.getPublicKey().toString(),\n+                    Function.identity(),\n+                    (dupKey1, dupKey2) -> dupKey2))\n+            .values());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyODY3MA=="}, "originalCommit": {"oid": "4e53948e8563833fceac2a966f28948192c818c6"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczNjc5OA==", "bodyText": "in fact this has taken care of the reason why I used publickey as map key because BLsKeyPair was always getting multiple instances even with same private/public key (because of raw bytes comparison somewhere deep within).", "url": "https://github.com/ConsenSys/teku/pull/1249#discussion_r386736798", "createdAt": "2020-03-03T00:41:36Z", "author": {"login": "usmansaleem"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/KeystoresValidatorKeyProvider.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.coordinator;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.lang.String.format;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.stream.Collectors.toMap;\n+import static org.apache.commons.lang3.StringUtils.isEmpty;\n+import static tech.pegasys.artemis.util.alogger.ALogger.STDOUT;\n+\n+import com.google.common.io.Files;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.Level;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.bls.keystore.KeyStore;\n+import tech.pegasys.artemis.bls.keystore.KeyStoreLoader;\n+import tech.pegasys.artemis.bls.keystore.KeyStoreValidationException;\n+import tech.pegasys.artemis.bls.keystore.model.KeyStoreData;\n+import tech.pegasys.artemis.util.bls.BLSKeyPair;\n+import tech.pegasys.artemis.util.config.ArtemisConfiguration;\n+import tech.pegasys.artemis.util.mikuli.KeyPair;\n+import tech.pegasys.artemis.util.mikuli.SecretKey;\n+\n+public class KeystoresValidatorKeyProvider implements ValidatorKeyProvider {\n+  static final int KEY_LENGTH = 48;\n+\n+  @Override\n+  public List<BLSKeyPair> loadValidatorKeys(final ArtemisConfiguration config) {\n+    final List<Pair<Path, Path>> keystorePasswordFilePairs =\n+        config.getValidatorKeystorePasswordFilePairs();\n+    checkNotNull(keystorePasswordFilePairs, \"validator keystore and password pairs cannot be null\");\n+\n+    // return distinct loaded key pairs\n+\n+    return new ArrayList<>(\n+        keystorePasswordFilePairs.stream()\n+            .map(\n+                pair -> {\n+                  final String password = loadPassword(pair.getRight());\n+                  final Bytes privKey = loadBLSPrivateKey(pair.getLeft(), password);\n+                  return new BLSKeyPair(new KeyPair(SecretKey.fromBytes(padLeft(privKey))));\n+                })\n+            .collect(\n+                toMap(\n+                    blsKeyPair -> blsKeyPair.getPublicKey().toString(),\n+                    Function.identity(),\n+                    (dupKey1, dupKey2) -> dupKey2))\n+            .values());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyODY3MA=="}, "originalCommit": {"oid": "4e53948e8563833fceac2a966f28948192c818c6"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTgzMTA3OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/artemis/util/config/ArtemisConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToyNDo1MlrOFw1UXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToyNDo1MlrOFw1UXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0OTUzNA==", "bodyText": "Be nice to pass in the values you are validating", "url": "https://github.com/ConsenSys/teku/pull/1249#discussion_r386749534", "createdAt": "2020-03-03T01:24:52Z", "author": {"login": "jframe"}, "path": "util/src/main/java/tech/pegasys/artemis/util/config/ArtemisConfiguration.java", "diffHunk": "@@ -313,6 +360,20 @@ public void validateConfig() throws IllegalArgumentException {\n     if (getNumValidators() < Constants.SLOTS_PER_EPOCH) {\n       throw new IllegalArgumentException(\"Invalid config.toml\");\n     }\n+    validateKeyStoreFilesAndPasswordFilesSize();\n+  }\n+\n+  private void validateKeyStoreFilesAndPasswordFilesSize() {\n+    final List<String> validatorKeystoreFiles = getValidatorKeystoreFiles();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a5db6b07f37bb93a1c046daa3c6ef6994ad3c9b"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTgzNTM0OnYy", "diffSide": "RIGHT", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/KeystoresValidatorKeyProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToyNzowOVrOFw1W9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMjozNTo1NFrOFw2eiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1MDE5OA==", "bodyText": "Why does this need to be distinct? Is it an error if a user has duplicate validator keys?", "url": "https://github.com/ConsenSys/teku/pull/1249#discussion_r386750198", "createdAt": "2020-03-03T01:27:09Z", "author": {"login": "jframe"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/KeystoresValidatorKeyProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.coordinator;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.lang.String.format;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.commons.lang3.StringUtils.isEmpty;\n+import static tech.pegasys.artemis.util.alogger.ALogger.STDOUT;\n+\n+import com.google.common.io.Files;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.Level;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.bls.keystore.KeyStore;\n+import tech.pegasys.artemis.bls.keystore.KeyStoreLoader;\n+import tech.pegasys.artemis.bls.keystore.KeyStoreValidationException;\n+import tech.pegasys.artemis.bls.keystore.model.KeyStoreData;\n+import tech.pegasys.artemis.util.bls.BLSKeyPair;\n+import tech.pegasys.artemis.util.config.ArtemisConfiguration;\n+import tech.pegasys.artemis.util.mikuli.KeyPair;\n+import tech.pegasys.artemis.util.mikuli.SecretKey;\n+\n+public class KeystoresValidatorKeyProvider implements ValidatorKeyProvider {\n+  static final int KEY_LENGTH = 48;\n+\n+  @Override\n+  public List<BLSKeyPair> loadValidatorKeys(final ArtemisConfiguration config) {\n+    final List<Pair<Path, Path>> keystorePasswordFilePairs =\n+        config.getValidatorKeystorePasswordFilePairs();\n+    checkNotNull(keystorePasswordFilePairs, \"validator keystore and password pairs cannot be null\");\n+\n+    // return distinct loaded key pairs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a5db6b07f37bb93a1c046daa3c6ef6994ad3c9b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc2ODUyMw==", "bodyText": "I suspect it will wind up going through a map and becoming distinct naturally anyway, but running two instances of the same validator is the quickest and easiest way to get yourself slashed, so making sure keys are distinct is a really good idea.", "url": "https://github.com/ConsenSys/teku/pull/1249#discussion_r386768523", "createdAt": "2020-03-03T02:35:54Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/KeystoresValidatorKeyProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.coordinator;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static java.lang.String.format;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.stream.Collectors.toList;\n+import static org.apache.commons.lang3.StringUtils.isEmpty;\n+import static tech.pegasys.artemis.util.alogger.ALogger.STDOUT;\n+\n+import com.google.common.io.Files;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.Level;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.bls.keystore.KeyStore;\n+import tech.pegasys.artemis.bls.keystore.KeyStoreLoader;\n+import tech.pegasys.artemis.bls.keystore.KeyStoreValidationException;\n+import tech.pegasys.artemis.bls.keystore.model.KeyStoreData;\n+import tech.pegasys.artemis.util.bls.BLSKeyPair;\n+import tech.pegasys.artemis.util.config.ArtemisConfiguration;\n+import tech.pegasys.artemis.util.mikuli.KeyPair;\n+import tech.pegasys.artemis.util.mikuli.SecretKey;\n+\n+public class KeystoresValidatorKeyProvider implements ValidatorKeyProvider {\n+  static final int KEY_LENGTH = 48;\n+\n+  @Override\n+  public List<BLSKeyPair> loadValidatorKeys(final ArtemisConfiguration config) {\n+    final List<Pair<Path, Path>> keystorePasswordFilePairs =\n+        config.getValidatorKeystorePasswordFilePairs();\n+    checkNotNull(keystorePasswordFilePairs, \"validator keystore and password pairs cannot be null\");\n+\n+    // return distinct loaded key pairs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1MDE5OA=="}, "originalCommit": {"oid": "9a5db6b07f37bb93a1c046daa3c6ef6994ad3c9b"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2701, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}