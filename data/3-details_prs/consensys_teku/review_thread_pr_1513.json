{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NjQ0Mjcz", "number": 1513, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjozMzo1M1rODtT-SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzozNToyMFrODtUxSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODM5NzUyOnYy", "diffSide": "RIGHT", "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjozMzo1M1rOF-qo1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDowNDowNlrOF-sZzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1NDYxMw==", "bodyText": "I had to pull out the creation of pendingAttestations to here so that I can do the subscription to event channel on this level rather than passing event channels to modules below. Not sure whether I should move the initialization of all the objects in AttestationManager, i.e. AttestationProcessor and FutureAttestations to this level, so that they all can follow the dependency injection model.", "url": "https://github.com/ConsenSys/teku/pull/1513#discussion_r401254613", "createdAt": "2020-03-31T22:33:53Z", "author": {"login": "cemozerr"}, "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -271,8 +275,12 @@ private void initPreGenesisDepositHandler() {\n   }\n \n   private void initAttestationPropagationManager() {\n-    attestationManager = AttestationManager.create(eventBus, recentChainData);\n-    eventChannels.subscribe(SlotEventsChannel.class, attestationManager);\n+    final PendingPool<DelayableAttestation> pendingAttestations =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64e3842bd0bce8ac7b28a16028f906c01250c7ca"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1NDg0NQ==", "bodyText": "The same thinking applies to the members of BlockPropagationManager below.", "url": "https://github.com/ConsenSys/teku/pull/1513#discussion_r401254845", "createdAt": "2020-03-31T22:34:29Z", "author": {"login": "cemozerr"}, "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -271,8 +275,12 @@ private void initPreGenesisDepositHandler() {\n   }\n \n   private void initAttestationPropagationManager() {\n-    attestationManager = AttestationManager.create(eventBus, recentChainData);\n-    eventChannels.subscribe(SlotEventsChannel.class, attestationManager);\n+    final PendingPool<DelayableAttestation> pendingAttestations =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1NDYxMw=="}, "originalCommit": {"oid": "64e3842bd0bce8ac7b28a16028f906c01250c7ca"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4MTY2Ng==", "bodyText": "I'm a fan of pulling the creation of stuff upward more and doing more dependency injection.  At some point we'll need to refactor BeaconChainController so we don't literally have one class creating the entire world but the idea of having a few dedicated builder classes at the top that build things and then inject them where needed makes a lot of sense.", "url": "https://github.com/ConsenSys/teku/pull/1513#discussion_r401281666", "createdAt": "2020-03-31T23:57:34Z", "author": {"login": "ajsutton"}, "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -271,8 +275,12 @@ private void initPreGenesisDepositHandler() {\n   }\n \n   private void initAttestationPropagationManager() {\n-    attestationManager = AttestationManager.create(eventBus, recentChainData);\n-    eventChannels.subscribe(SlotEventsChannel.class, attestationManager);\n+    final PendingPool<DelayableAttestation> pendingAttestations =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1NDYxMw=="}, "originalCommit": {"oid": "64e3842bd0bce8ac7b28a16028f906c01250c7ca"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4MzUzMw==", "bodyText": "Makes sense. Will move objects of AttestationPropagationManager and BlockPropagationManager in that direction.", "url": "https://github.com/ConsenSys/teku/pull/1513#discussion_r401283533", "createdAt": "2020-04-01T00:04:06Z", "author": {"login": "cemozerr"}, "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -271,8 +275,12 @@ private void initPreGenesisDepositHandler() {\n   }\n \n   private void initAttestationPropagationManager() {\n-    attestationManager = AttestationManager.create(eventBus, recentChainData);\n-    eventChannels.subscribe(SlotEventsChannel.class, attestationManager);\n+    final PendingPool<DelayableAttestation> pendingAttestations =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1NDYxMw=="}, "originalCommit": {"oid": "64e3842bd0bce8ac7b28a16028f906c01250c7ca"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODUyODA4OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/state/Checkpoint.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzozNToyMFrOF-r4CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDoyOToxNFrOF-s0qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3NDg4OA==", "bodyText": "Seems weird to have two public methods that do the exact same thing.  And this new one seems to be unused... :)", "url": "https://github.com/ConsenSys/teku/pull/1513#discussion_r401274888", "createdAt": "2020-03-31T23:35:20Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/state/Checkpoint.java", "diffHunk": "@@ -124,6 +124,10 @@ public UnsignedLong getEpochStartSlot() {\n     return compute_start_slot_at_epoch(getEpoch());\n   }\n \n+  public UnsignedLong getFinalizedSlot() {\n+    return getEpochStartSlot();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23ed7f49cbec51635872ec22e80a60f8be04e18"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4ODgzNA==", "bodyText": "It's used! The now removed FinalizedCheckpointEvent had a method like this: getFinalizedSlot() which would return checkpoint.getEpochStartSlot(), for legibility purposes as I understand, so I wanted to keep the same thing, but it does look weird that a random Checkpoint can have a getFinalizedSlot() method. I'm going to remove it.", "url": "https://github.com/ConsenSys/teku/pull/1513#discussion_r401288834", "createdAt": "2020-04-01T00:23:40Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/state/Checkpoint.java", "diffHunk": "@@ -124,6 +124,10 @@ public UnsignedLong getEpochStartSlot() {\n     return compute_start_slot_at_epoch(getEpoch());\n   }\n \n+  public UnsignedLong getFinalizedSlot() {\n+    return getEpochStartSlot();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3NDg4OA=="}, "originalCommit": {"oid": "d23ed7f49cbec51635872ec22e80a60f8be04e18"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5MDQxMA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1513#discussion_r401290410", "createdAt": "2020-04-01T00:29:14Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/state/Checkpoint.java", "diffHunk": "@@ -124,6 +124,10 @@ public UnsignedLong getEpochStartSlot() {\n     return compute_start_slot_at_epoch(getEpoch());\n   }\n \n+  public UnsignedLong getFinalizedSlot() {\n+    return getEpochStartSlot();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3NDg4OA=="}, "originalCommit": {"oid": "d23ed7f49cbec51635872ec22e80a60f8be04e18"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1789, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}