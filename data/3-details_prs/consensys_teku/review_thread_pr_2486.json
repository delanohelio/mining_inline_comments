{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NzExODgy", "number": 2486, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNToxOToyNVrOEUpdZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNToxOToyNVrOEUpdZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDg2MjQ2OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/beaconchain/methods/BeaconBlocksByRangeMessageHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNToxOToyNVrOG69wAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMTowMDozM1rOG7IkwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ4MjMwNQ==", "bodyText": "Looks like RequestState.currentSlot and RequestState.remainingBlocks should be volatile.", "url": "https://github.com/ConsenSys/teku/pull/2486#discussion_r464482305", "createdAt": "2020-08-03T15:19:25Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/beaconchain/methods/BeaconBlocksByRangeMessageHandler.java", "diffHunk": "@@ -120,35 +120,43 @@ public void onIncomingMessage(\n   }\n \n   private SafeFuture<RequestState> sendNextBlock(final RequestState requestState) {\n-    SafeFuture<Optional<SignedBeaconBlock>> blockFuture = requestState.loadNextBlock();\n+    SafeFuture<Boolean> blockFuture = processNextBlock(requestState);\n     // Avoid risk of StackOverflowException by iterating when the block future is already complete\n     // Using thenCompose on the completed future would execute immediately and recurse back into\n     // this method to send the next block.  When not already complete, thenCompose is executed\n     // on a separate thread so doesn't recurse on the same stack.\n     while (blockFuture.isDone() && !blockFuture.isCompletedExceptionally()) {\n-      final boolean complete = handleLoadedBlock(requestState, blockFuture.join());\n-      if (complete) {\n+      if (blockFuture.join()) {\n         return completedFuture(requestState);\n       }\n-      blockFuture = requestState.loadNextBlock();\n+      blockFuture = processNextBlock(requestState);\n     }\n     return blockFuture.thenCompose(\n-        maybeBlock ->\n-            handleLoadedBlock(requestState, maybeBlock)\n-                ? completedFuture(requestState)\n-                : sendNextBlock(requestState));\n+        complete -> complete ? completedFuture(requestState) : sendNextBlock(requestState));\n+  }\n+\n+  private SafeFuture<Boolean> processNextBlock(final RequestState requestState) {\n+    // Ensure blocks are loaded off of the event thread\n+    return requestState\n+        .loadNextBlock()\n+        .thenCompose(block -> handleLoadedBlock(requestState, block));\n   }\n \n   /** Sends the block and returns true if the request is now complete. */\n-  private boolean handleLoadedBlock(\n+  private SafeFuture<Boolean> handleLoadedBlock(\n       final RequestState requestState, final Optional<SignedBeaconBlock> block) {\n-    block.ifPresent(requestState::sendBlock);\n-    if (requestState.isComplete()) {\n-      return true;\n-    } else {\n-      requestState.incrementCurrentSlot();\n-      return false;\n-    }\n+    return block\n+        .map(requestState::sendBlock)\n+        .orElse(SafeFuture.COMPLETE)\n+        .thenApply(\n+            __ -> {\n+              if (requestState.isComplete()) {\n+                return true;\n+              } else {\n+                requestState.incrementCurrentSlot();\n+                return false;\n+              }\n+            });\n   }\n \n   private class RequestState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35af19b6c41a1cb54e64e00c56d761cecda744c3"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1OTY0OQ==", "bodyText": "They don't need to be volatile because there's only one thread at a time accessing them (ie we load one block at a time).  Even though those actions might wind up happening on different threads, CompletableFuture guarantees that anything that happens in a thread before completing a future happens-before the completion stage runs (which applies even if it's run with one of the Async methods).  So even as we jump threads, we're guaranteed to see the most up to date values of those variables.", "url": "https://github.com/ConsenSys/teku/pull/2486#discussion_r464659649", "createdAt": "2020-08-03T21:00:33Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/beaconchain/methods/BeaconBlocksByRangeMessageHandler.java", "diffHunk": "@@ -120,35 +120,43 @@ public void onIncomingMessage(\n   }\n \n   private SafeFuture<RequestState> sendNextBlock(final RequestState requestState) {\n-    SafeFuture<Optional<SignedBeaconBlock>> blockFuture = requestState.loadNextBlock();\n+    SafeFuture<Boolean> blockFuture = processNextBlock(requestState);\n     // Avoid risk of StackOverflowException by iterating when the block future is already complete\n     // Using thenCompose on the completed future would execute immediately and recurse back into\n     // this method to send the next block.  When not already complete, thenCompose is executed\n     // on a separate thread so doesn't recurse on the same stack.\n     while (blockFuture.isDone() && !blockFuture.isCompletedExceptionally()) {\n-      final boolean complete = handleLoadedBlock(requestState, blockFuture.join());\n-      if (complete) {\n+      if (blockFuture.join()) {\n         return completedFuture(requestState);\n       }\n-      blockFuture = requestState.loadNextBlock();\n+      blockFuture = processNextBlock(requestState);\n     }\n     return blockFuture.thenCompose(\n-        maybeBlock ->\n-            handleLoadedBlock(requestState, maybeBlock)\n-                ? completedFuture(requestState)\n-                : sendNextBlock(requestState));\n+        complete -> complete ? completedFuture(requestState) : sendNextBlock(requestState));\n+  }\n+\n+  private SafeFuture<Boolean> processNextBlock(final RequestState requestState) {\n+    // Ensure blocks are loaded off of the event thread\n+    return requestState\n+        .loadNextBlock()\n+        .thenCompose(block -> handleLoadedBlock(requestState, block));\n   }\n \n   /** Sends the block and returns true if the request is now complete. */\n-  private boolean handleLoadedBlock(\n+  private SafeFuture<Boolean> handleLoadedBlock(\n       final RequestState requestState, final Optional<SignedBeaconBlock> block) {\n-    block.ifPresent(requestState::sendBlock);\n-    if (requestState.isComplete()) {\n-      return true;\n-    } else {\n-      requestState.incrementCurrentSlot();\n-      return false;\n-    }\n+    return block\n+        .map(requestState::sendBlock)\n+        .orElse(SafeFuture.COMPLETE)\n+        .thenApply(\n+            __ -> {\n+              if (requestState.isComplete()) {\n+                return true;\n+              } else {\n+                requestState.incrementCurrentSlot();\n+                return false;\n+              }\n+            });\n   }\n \n   private class RequestState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ4MjMwNQ=="}, "originalCommit": {"oid": "35af19b6c41a1cb54e64e00c56d761cecda744c3"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3449, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}