{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMTI4ODEx", "number": 3095, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzozNDo0NFrOEyl9dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMTozMDo1M1rOE1Ckiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDg2MTk4OnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/teku/api/NodeDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzozNDo0NFrOHpUvtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTozMDozOFrOHp-PAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MzU1Ng==", "bodyText": "I don't think we should be exposing the AggregatingAttestationPool from here.\nThe way providers are currently setup, they never return internal objects, only the external ones.  We should follow that same pattern in this provider.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r513093556", "createdAt": "2020-10-27T23:34:44Z", "author": {"login": "ajsutton"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/NodeDataProvider.java", "diffHunk": "@@ -13,14 +13,52 @@\n \n package tech.pegasys.teku.api;\n \n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.statetransition.OperationPool;\n import tech.pegasys.teku.statetransition.attestation.AggregatingAttestationPool;\n \n public class NodeDataProvider {\n \n   private final AggregatingAttestationPool attestationPool;\n+  private final OperationPool<AttesterSlashing> attesterSlashingPool;\n+  private final OperationPool<ProposerSlashing> proposerSlashingPool;\n+  private final OperationPool<SignedVoluntaryExit> voluntaryExitPool;\n \n-  public NodeDataProvider(final AggregatingAttestationPool attestationPool) {\n+  public NodeDataProvider(\n+      AggregatingAttestationPool attestationPool,\n+      OperationPool<AttesterSlashing> attesterSlashingsPool,\n+      OperationPool<ProposerSlashing> proposerSlashingPool,\n+      OperationPool<SignedVoluntaryExit> voluntaryExitPool) {\n     this.attestationPool = attestationPool;\n+    this.attesterSlashingPool = attesterSlashingsPool;\n+    this.proposerSlashingPool = proposerSlashingPool;\n+    this.voluntaryExitPool = voluntaryExitPool;\n+  }\n+\n+  public AggregatingAttestationPool getAttestationPool() {\n+    return attestationPool;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8503dec9abda433df43b2eeb8a50bf76bbe0bc1b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc3MzMxNQ==", "bodyText": "Agreed, removed that function, it was not used anywhere.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r513773315", "createdAt": "2020-10-28T21:30:38Z", "author": {"login": "cemozerr"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/NodeDataProvider.java", "diffHunk": "@@ -13,14 +13,52 @@\n \n package tech.pegasys.teku.api;\n \n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.statetransition.OperationPool;\n import tech.pegasys.teku.statetransition.attestation.AggregatingAttestationPool;\n \n public class NodeDataProvider {\n \n   private final AggregatingAttestationPool attestationPool;\n+  private final OperationPool<AttesterSlashing> attesterSlashingPool;\n+  private final OperationPool<ProposerSlashing> proposerSlashingPool;\n+  private final OperationPool<SignedVoluntaryExit> voluntaryExitPool;\n \n-  public NodeDataProvider(final AggregatingAttestationPool attestationPool) {\n+  public NodeDataProvider(\n+      AggregatingAttestationPool attestationPool,\n+      OperationPool<AttesterSlashing> attesterSlashingsPool,\n+      OperationPool<ProposerSlashing> proposerSlashingPool,\n+      OperationPool<SignedVoluntaryExit> voluntaryExitPool) {\n     this.attestationPool = attestationPool;\n+    this.attesterSlashingPool = attesterSlashingsPool;\n+    this.proposerSlashingPool = proposerSlashingPool;\n+    this.voluntaryExitPool = voluntaryExitPool;\n+  }\n+\n+  public AggregatingAttestationPool getAttestationPool() {\n+    return attestationPool;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5MzU1Ng=="}, "originalCommit": {"oid": "8503dec9abda433df43b2eeb8a50bf76bbe0bc1b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDg2NzgzOnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzozNzo0M1rOHpUzSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMToyOTo1MlrOHp-NjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NDQ3NQ==", "bodyText": "I'd suggest\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return operations;\n          \n          \n            \n                return Collections.unmodifiableSet(operations);\n          \n      \n    \n    \n  \n\nto be paranoid.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r513094475", "createdAt": "2020-10-27T23:37:43Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "diffHunk": "@@ -72,4 +79,8 @@ public void addAll(SSZList<T> items) {\n   public void removeAll(SSZList<T> items) {\n     operations.removeAll(items.asList());\n   }\n+\n+  public Set<T> getAll() {\n+    return operations;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8503dec9abda433df43b2eeb8a50bf76bbe0bc1b"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc3Mjk0MA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r513772940", "createdAt": "2020-10-28T21:29:52Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "diffHunk": "@@ -72,4 +79,8 @@ public void addAll(SSZList<T> items) {\n   public void removeAll(SSZList<T> items) {\n     operations.removeAll(items.asList());\n   }\n+\n+  public Set<T> getAll() {\n+    return operations;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NDQ3NQ=="}, "originalCommit": {"oid": "8503dec9abda433df43b2eeb8a50bf76bbe0bc1b"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDg3NzI0OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/operationvalidators/InternalValidationResult.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzo0MTo0NFrOHpU4dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMToyODo1OVrOHp-LdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NTc5Ng==", "bodyText": "It's very weird to have these comments here...", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r513095796", "createdAt": "2020-10-27T23:41:44Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/operationvalidators/InternalValidationResult.java", "diffHunk": "@@ -11,23 +11,11 @@\n  * specific language governing permissions and limitations under the License.\n  */\n \n-package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n-\n-import io.libp2p.core.pubsub.ValidationResult;\n+package tech.pegasys.teku.statetransition.operationvalidators;\n \n public enum InternalValidationResult {\n-  ACCEPT(ValidationResult.Valid),\n-  SAVE_FOR_FUTURE(ValidationResult.Ignore),\n-  IGNORE(ValidationResult.Ignore),\n-  REJECT(ValidationResult.Invalid);\n-\n-  private final ValidationResult gossipSubValidationResult;\n-\n-  InternalValidationResult(ValidationResult validationResult) {\n-    this.gossipSubValidationResult = validationResult;\n-  }\n-\n-  public ValidationResult getGossipSubValidationResult() {\n-    return this.gossipSubValidationResult;\n-  }\n+  ACCEPT, // (ValidationResult.Valid),\n+  SAVE_FOR_FUTURE, // (ValidationResult.Ignore),\n+  IGNORE, // (ValidationResult.Ignore),\n+  REJECT // (ValidationResult.Invalid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8503dec9abda433df43b2eeb8a50bf76bbe0bc1b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyMTU4Ng==", "bodyText": "Removed.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r513621586", "createdAt": "2020-10-28T17:14:35Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/operationvalidators/InternalValidationResult.java", "diffHunk": "@@ -11,23 +11,11 @@\n  * specific language governing permissions and limitations under the License.\n  */\n \n-package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n-\n-import io.libp2p.core.pubsub.ValidationResult;\n+package tech.pegasys.teku.statetransition.operationvalidators;\n \n public enum InternalValidationResult {\n-  ACCEPT(ValidationResult.Valid),\n-  SAVE_FOR_FUTURE(ValidationResult.Ignore),\n-  IGNORE(ValidationResult.Ignore),\n-  REJECT(ValidationResult.Invalid);\n-\n-  private final ValidationResult gossipSubValidationResult;\n-\n-  InternalValidationResult(ValidationResult validationResult) {\n-    this.gossipSubValidationResult = validationResult;\n-  }\n-\n-  public ValidationResult getGossipSubValidationResult() {\n-    return this.gossipSubValidationResult;\n-  }\n+  ACCEPT, // (ValidationResult.Valid),\n+  SAVE_FOR_FUTURE, // (ValidationResult.Ignore),\n+  IGNORE, // (ValidationResult.Ignore),\n+  REJECT // (ValidationResult.Invalid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NTc5Ng=="}, "originalCommit": {"oid": "8503dec9abda433df43b2eeb8a50bf76bbe0bc1b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc3MjQwNA==", "bodyText": "I've put these changes in the other PR, in which I broke up the moving of validation to state transition package level. #3106", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r513772404", "createdAt": "2020-10-28T21:28:59Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/operationvalidators/InternalValidationResult.java", "diffHunk": "@@ -11,23 +11,11 @@\n  * specific language governing permissions and limitations under the License.\n  */\n \n-package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n-\n-import io.libp2p.core.pubsub.ValidationResult;\n+package tech.pegasys.teku.statetransition.operationvalidators;\n \n public enum InternalValidationResult {\n-  ACCEPT(ValidationResult.Valid),\n-  SAVE_FOR_FUTURE(ValidationResult.Ignore),\n-  IGNORE(ValidationResult.Ignore),\n-  REJECT(ValidationResult.Invalid);\n-\n-  private final ValidationResult gossipSubValidationResult;\n-\n-  InternalValidationResult(ValidationResult validationResult) {\n-    this.gossipSubValidationResult = validationResult;\n-  }\n-\n-  public ValidationResult getGossipSubValidationResult() {\n-    return this.gossipSubValidationResult;\n-  }\n+  ACCEPT, // (ValidationResult.Valid),\n+  SAVE_FOR_FUTURE, // (ValidationResult.Ignore),\n+  IGNORE, // (ValidationResult.Ignore),\n+  REJECT // (ValidationResult.Invalid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5NTc5Ng=="}, "originalCommit": {"oid": "8503dec9abda433df43b2eeb8a50bf76bbe0bc1b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDg4MzY4OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/topichandlers/AttesterSlashingTopicHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMzo0NTowMVrOHpU8Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMToyOToxOVrOHp-MKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5Njc1NA==", "bodyText": "Feels like these don't need to be subclasses anymore.  Just pass the topic name and value type into the constructor.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r513096754", "createdAt": "2020-10-27T23:45:01Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/topichandlers/AttesterSlashingTopicHandler.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.topichandlers;\n+\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.state.ForkInfo;\n+import tech.pegasys.teku.infrastructure.async.AsyncRunner;\n+import tech.pegasys.teku.networking.eth2.gossip.encoding.GossipEncoding;\n+import tech.pegasys.teku.networking.eth2.gossip.topics.OperationProcessor;\n+\n+public class AttesterSlashingTopicHandler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8503dec9abda433df43b2eeb8a50bf76bbe0bc1b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc3MjU4Ng==", "bodyText": "Done, but again in this PR: #3106", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r513772586", "createdAt": "2020-10-28T21:29:19Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/topichandlers/AttesterSlashingTopicHandler.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.topichandlers;\n+\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.state.ForkInfo;\n+import tech.pegasys.teku.infrastructure.async.AsyncRunner;\n+import tech.pegasys.teku.networking.eth2.gossip.encoding.GossipEncoding;\n+import tech.pegasys.teku.networking.eth2.gossip.topics.OperationProcessor;\n+\n+public class AttesterSlashingTopicHandler", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5Njc1NA=="}, "originalCommit": {"oid": "8503dec9abda433df43b2eeb8a50bf76bbe0bc1b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODk5NTk3OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1OTowNFrOHreSgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1OTowNFrOHreSgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NzA3NQ==", "bodyText": "I've created a BadRequestException which has a generic handler, makes life easier - just need to catch the appropritate places and throw the BadRequestException (getParameterValueAsUInt64IfPresent will throw it once i merge #3112)", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515347075", "createdAt": "2020-10-30T19:59:04Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetAttestationsResponse;\n+import tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestations extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attestations\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetAttestations(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get attestations from operation pool\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Retrieves attestations known by the node but not necessarily incorporated into any block.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetAttestationsResponse.class)),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      Optional<UInt64> maybeSlot =\n+          SingleQueryParameterUtils.getParameterValueAsUInt64IfPresent(ctx.queryParamMap(), SLOT);\n+      Optional<UInt64> maybeCommitteeIndex =\n+          SingleQueryParameterUtils.getParameterValueAsUInt64IfPresent(\n+              ctx.queryParamMap(), COMMITTEE_INDEX);\n+      ctx.header(Header.CACHE_CONTROL, CACHE_NONE);\n+      ctx.result(\n+          jsonProvider.objectToJSON(\n+              new GetAttestationsResponse(\n+                  nodeDataProvider.getAttestations(maybeSlot, maybeCommitteeIndex))));\n+    } catch (IllegalArgumentException e) {\n+      ctx.result(\"The slot or committee index could not be parsed.\");\n+      ctx.status(SC_BAD_REQUEST);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODk5ODcwOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttesterSlashings.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOTo1OTo1MFrOHreUCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMToxMjozOFrOHrgoAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NzQ2NA==", "bodyText": "extract the function call into a variable just so it's more readable...", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515347464", "createdAt": "2020-10-30T19:59:50Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttesterSlashings.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetAttesterSlashingsResponse;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttesterSlashings extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attester_slashings\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetAttesterSlashings(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  GetAttesterSlashings(final NodeDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get AttesterSlashings from operation pool\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Retrieves attester slashings known by the node but not necessarily incorporated into any block.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetAttesterSlashingsResponse.class)),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    ctx.header(Header.CACHE_CONTROL, CACHE_NONE);\n+    ctx.result(\n+        jsonProvider.objectToJSON(\n+            new GetAttesterSlashingsResponse(nodeDataProvider.getAttesterSlashings())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4NTM0NA==", "bodyText": "Done", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515385344", "createdAt": "2020-10-30T21:12:38Z", "author": {"login": "cemozerr"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttesterSlashings.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetAttesterSlashingsResponse;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttesterSlashings extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attester_slashings\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetAttesterSlashings(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  GetAttesterSlashings(final NodeDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get AttesterSlashings from operation pool\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Retrieves attester slashings known by the node but not necessarily incorporated into any block.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetAttesterSlashingsResponse.class)),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    ctx.header(Header.CACHE_CONTROL, CACHE_NONE);\n+    ctx.result(\n+        jsonProvider.objectToJSON(\n+            new GetAttesterSlashingsResponse(nodeDataProvider.getAttesterSlashings())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NzQ2NA=="}, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTAwNDA3OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetProposerSlashings.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowMTozNlrOHreXLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMToxMzo0NlrOHrgpkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0ODI2OQ==", "bodyText": "this will wrap to next line, not sure if we need 'from operation pool' in the summary, but also space in Proposer Slashings would read better, probably just lower case 'proposer slashings'", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515348269", "createdAt": "2020-10-30T20:01:36Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetProposerSlashings.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetProposerSlashingsResponse;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetProposerSlashings extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/proposer_slashings\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetProposerSlashings(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  GetProposerSlashings(final NodeDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get ProposerSlashings from operation pool\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4NTc0NA==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515385744", "createdAt": "2020-10-30T21:13:46Z", "author": {"login": "cemozerr"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetProposerSlashings.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetProposerSlashingsResponse;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetProposerSlashings extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/proposer_slashings\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetProposerSlashings(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  GetProposerSlashings(final NodeDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get ProposerSlashings from operation pool\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0ODI2OQ=="}, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTAwNTA4OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetProposerSlashings.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowMTo1NVrOHreXwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowMTo1NVrOHreXwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0ODQxOA==", "bodyText": "extract fn to variable", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515348418", "createdAt": "2020-10-30T20:01:55Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetProposerSlashings.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetProposerSlashingsResponse;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetProposerSlashings extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/proposer_slashings\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetProposerSlashings(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  GetProposerSlashings(final NodeDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get ProposerSlashings from operation pool\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Retrieves proposer slashings known by the node but not necessarily incorporated into any block.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetProposerSlashingsResponse.class)),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    ctx.header(Header.CACHE_CONTROL, CACHE_NONE);\n+    ctx.result(\n+        jsonProvider.objectToJSON(\n+            new GetProposerSlashingsResponse(nodeDataProvider.getProposerSlashings())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTAxNTY3OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetVoluntaryExits.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowNTozMlrOHreeUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMToxNToxN1rOHrgrpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MDA5OQ==", "bodyText": "split nodeDataProvider fn to variable for readability", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515350099", "createdAt": "2020-10-30T20:05:32Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetVoluntaryExits.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetVoluntaryExitsResponse;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetVoluntaryExits extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/voluntary_exits\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetVoluntaryExits(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  GetVoluntaryExits(final NodeDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get SignedVoluntaryExits from operation pool\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Retrieves voluntary exits known by the node but not necessarily incorporated into any block.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetVoluntaryExitsResponse.class)),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    ctx.header(Header.CACHE_CONTROL, CACHE_NONE);\n+    ctx.result(\n+        jsonProvider.objectToJSON(\n+            new GetVoluntaryExitsResponse(nodeDataProvider.getVoluntaryExits())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4NjI3OQ==", "bodyText": "done", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515386279", "createdAt": "2020-10-30T21:15:17Z", "author": {"login": "cemozerr"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetVoluntaryExits.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetVoluntaryExitsResponse;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetVoluntaryExits extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/voluntary_exits\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetVoluntaryExits(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  GetVoluntaryExits(final NodeDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get SignedVoluntaryExits from operation pool\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Retrieves voluntary exits known by the node but not necessarily incorporated into any block.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetVoluntaryExitsResponse.class)),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    ctx.header(Header.CACHE_CONTROL, CACHE_NONE);\n+    ctx.result(\n+        jsonProvider.objectToJSON(\n+            new GetVoluntaryExitsResponse(nodeDataProvider.getVoluntaryExits())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MDA5OQ=="}, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTAxNzUxOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetVoluntaryExits.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowNjowOFrOHrefdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMToxNToyNFrOHrgr1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MDM5MA==", "bodyText": "tweak summary as described previously", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515350390", "createdAt": "2020-10-30T20:06:08Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetVoluntaryExits.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetVoluntaryExitsResponse;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetVoluntaryExits extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/voluntary_exits\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetVoluntaryExits(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  GetVoluntaryExits(final NodeDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get SignedVoluntaryExits from operation pool\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4NjMyNQ==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515386325", "createdAt": "2020-10-30T21:15:24Z", "author": {"login": "cemozerr"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetVoluntaryExits.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetVoluntaryExitsResponse;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetVoluntaryExits extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/voluntary_exits\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetVoluntaryExits(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  GetVoluntaryExits(final NodeDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get SignedVoluntaryExits from operation pool\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MDM5MA=="}, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTAxODg3OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttesterSlashings.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowNjozOVrOHregRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMToxNTozMVrOHrgr_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MDU5OA==", "bodyText": "tweak summary", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515350598", "createdAt": "2020-10-30T20:06:39Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttesterSlashings.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetAttesterSlashingsResponse;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttesterSlashings extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attester_slashings\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetAttesterSlashings(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  GetAttesterSlashings(final NodeDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get AttesterSlashings from operation pool\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4NjM2Ng==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515386366", "createdAt": "2020-10-30T21:15:31Z", "author": {"login": "cemozerr"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttesterSlashings.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetAttesterSlashingsResponse;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttesterSlashings extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attester_slashings\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetAttesterSlashings(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  GetAttesterSlashings(final NodeDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get AttesterSlashings from operation pool\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MDU5OA=="}, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTAyMDUwOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowNzowOVrOHrehWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMToxNTo1MFrOHrgsbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MDg3NA==", "bodyText": "tweak summary", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515350874", "createdAt": "2020-10-30T20:07:09Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetAttestationsResponse;\n+import tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestations extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attestations\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetAttestations(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get attestations from operation pool\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4NjQ3OQ==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515386479", "createdAt": "2020-10-30T21:15:50Z", "author": {"login": "cemozerr"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetAttestationsResponse;\n+import tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestations extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attestations\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetAttestations(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get attestations from operation pool\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MDg3NA=="}, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTAyMTc1OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowNzozNlrOHreiCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMToxNjoyOVrOHrgtVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MTA1MA==", "bodyText": "split call into variable for readability", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515351050", "createdAt": "2020-10-30T20:07:36Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetAttestationsResponse;\n+import tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestations extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attestations\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetAttestations(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get attestations from operation pool\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Retrieves attestations known by the node but not necessarily incorporated into any block.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetAttestationsResponse.class)),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      Optional<UInt64> maybeSlot =\n+          SingleQueryParameterUtils.getParameterValueAsUInt64IfPresent(ctx.queryParamMap(), SLOT);\n+      Optional<UInt64> maybeCommitteeIndex =\n+          SingleQueryParameterUtils.getParameterValueAsUInt64IfPresent(\n+              ctx.queryParamMap(), COMMITTEE_INDEX);\n+      ctx.header(Header.CACHE_CONTROL, CACHE_NONE);\n+      ctx.result(\n+          jsonProvider.objectToJSON(\n+              new GetAttestationsResponse(\n+                  nodeDataProvider.getAttestations(maybeSlot, maybeCommitteeIndex))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4NjcwOA==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515386708", "createdAt": "2020-10-30T21:16:29Z", "author": {"login": "cemozerr"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetAttestationsResponse;\n+import tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestations extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attestations\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetAttestations(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get attestations from operation pool\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Retrieves attestations known by the node but not necessarily incorporated into any block.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetAttestationsResponse.class)),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      Optional<UInt64> maybeSlot =\n+          SingleQueryParameterUtils.getParameterValueAsUInt64IfPresent(ctx.queryParamMap(), SLOT);\n+      Optional<UInt64> maybeCommitteeIndex =\n+          SingleQueryParameterUtils.getParameterValueAsUInt64IfPresent(\n+              ctx.queryParamMap(), COMMITTEE_INDEX);\n+      ctx.header(Header.CACHE_CONTROL, CACHE_NONE);\n+      ctx.result(\n+          jsonProvider.objectToJSON(\n+              new GetAttestationsResponse(\n+                  nodeDataProvider.getAttestations(maybeSlot, maybeCommitteeIndex))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MTA1MA=="}, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTAyNDMzOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowODozM1rOHrejoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMToxNjozNlrOHrgthQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MTQ1Nw==", "bodyText": "need to use BadRequest.badRequest so that the response is json formatted and has error code", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515351457", "createdAt": "2020-10-30T20:08:33Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetAttestationsResponse;\n+import tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestations extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attestations\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetAttestations(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get attestations from operation pool\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Retrieves attestations known by the node but not necessarily incorporated into any block.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetAttestationsResponse.class)),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      Optional<UInt64> maybeSlot =\n+          SingleQueryParameterUtils.getParameterValueAsUInt64IfPresent(ctx.queryParamMap(), SLOT);\n+      Optional<UInt64> maybeCommitteeIndex =\n+          SingleQueryParameterUtils.getParameterValueAsUInt64IfPresent(\n+              ctx.queryParamMap(), COMMITTEE_INDEX);\n+      ctx.header(Header.CACHE_CONTROL, CACHE_NONE);\n+      ctx.result(\n+          jsonProvider.objectToJSON(\n+              new GetAttestationsResponse(\n+                  nodeDataProvider.getAttestations(maybeSlot, maybeCommitteeIndex))));\n+    } catch (IllegalArgumentException e) {\n+      ctx.result(\"The slot or committee index could not be parsed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4Njc1Nw==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515386757", "createdAt": "2020-10-30T21:16:36Z", "author": {"login": "cemozerr"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetAttestationsResponse;\n+import tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestations extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attestations\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetAttestations(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get attestations from operation pool\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Retrieves attestations known by the node but not necessarily incorporated into any block.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetAttestationsResponse.class)),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      Optional<UInt64> maybeSlot =\n+          SingleQueryParameterUtils.getParameterValueAsUInt64IfPresent(ctx.queryParamMap(), SLOT);\n+      Optional<UInt64> maybeCommitteeIndex =\n+          SingleQueryParameterUtils.getParameterValueAsUInt64IfPresent(\n+              ctx.queryParamMap(), COMMITTEE_INDEX);\n+      ctx.header(Header.CACHE_CONTROL, CACHE_NONE);\n+      ctx.result(\n+          jsonProvider.objectToJSON(\n+              new GetAttestationsResponse(\n+                  nodeDataProvider.getAttestations(maybeSlot, maybeCommitteeIndex))));\n+    } catch (IllegalArgumentException e) {\n+      ctx.result(\"The slot or committee index could not be parsed.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MTQ1Nw=="}, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTAyODA2OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowOTo1NFrOHrel4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMToxNjo1NVrOHrgt8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MjAzNQ==", "bodyText": "we're explicitly throwing badRequest, should be a documented possibility", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515352035", "createdAt": "2020-10-30T20:09:54Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetAttestationsResponse;\n+import tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestations extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attestations\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetAttestations(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get attestations from operation pool\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Retrieves attestations known by the node but not necessarily incorporated into any block.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetAttestationsResponse.class)),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4Njg2NQ==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515386865", "createdAt": "2020-10-30T21:16:55Z", "author": {"login": "cemozerr"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetAttestationsResponse;\n+import tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestations extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attestations\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetAttestations(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get attestations from operation pool\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Retrieves attestations known by the node but not necessarily incorporated into any block.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetAttestationsResponse.class)),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MjAzNQ=="}, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTAzMjcyOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDoxMTo0N1rOHreowA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMToxNzo1MlrOHrgvZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1Mjc2OA==", "bodyText": "for testing purposes, do getParamMap as a variable, helps write integration tests.\nthen its not called twice here from ctx, only once.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515352768", "createdAt": "2020-10-30T20:11:47Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetAttestationsResponse;\n+import tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestations extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attestations\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetAttestations(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get attestations from operation pool\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Retrieves attestations known by the node but not necessarily incorporated into any block.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetAttestationsResponse.class)),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      Optional<UInt64> maybeSlot =\n+          SingleQueryParameterUtils.getParameterValueAsUInt64IfPresent(ctx.queryParamMap(), SLOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4NzIzOA==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515387238", "createdAt": "2020-10-30T21:17:52Z", "author": {"login": "cemozerr"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetAttestationsResponse;\n+import tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestations extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attestations\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetAttestations(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get attestations from operation pool\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Retrieves attestations known by the node but not necessarily incorporated into any block.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetAttestationsResponse.class)),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      Optional<UInt64> maybeSlot =\n+          SingleQueryParameterUtils.getParameterValueAsUInt64IfPresent(ctx.queryParamMap(), SLOT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1Mjc2OA=="}, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTAzNTIzOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDoxMjo0MFrOHreqOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDoxMjo0MFrOHreqOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1MzE0NQ==", "bodyText": "good pickup on using cache control, caching would be bad for these \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515353145", "createdAt": "2020-10-30T20:12:40Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetAttestationsResponse;\n+import tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestations extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attestations\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetAttestations(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get attestations from operation pool\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Retrieves attestations known by the node but not necessarily incorporated into any block.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetAttestationsResponse.class)),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      Optional<UInt64> maybeSlot =\n+          SingleQueryParameterUtils.getParameterValueAsUInt64IfPresent(ctx.queryParamMap(), SLOT);\n+      Optional<UInt64> maybeCommitteeIndex =\n+          SingleQueryParameterUtils.getParameterValueAsUInt64IfPresent(\n+              ctx.queryParamMap(), COMMITTEE_INDEX);\n+      ctx.header(Header.CACHE_CONTROL, CACHE_NONE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTA0MzAzOnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/teku/api/NodeDataProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDoxNToyOVrOHreu-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMToyNTo1NFrOHrg6MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1NDM2MA==", "bodyText": "my preference would be the internal structures are fully qualified below and the external schema structures are the ones imported. it makes the function prototypes way easier to read, and they're what's being consumed...", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515354360", "createdAt": "2020-10-30T20:15:29Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/NodeDataProvider.java", "diffHunk": "@@ -13,14 +13,58 @@\n \n package tech.pegasys.teku.api;\n \n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4OTA3OA==", "bodyText": "I did it purely out of the fact that I had more internal structures in the clas than external schema structures. Will change.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515389078", "createdAt": "2020-10-30T21:23:15Z", "author": {"login": "cemozerr"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/NodeDataProvider.java", "diffHunk": "@@ -13,14 +13,58 @@\n \n package tech.pegasys.teku.api;\n \n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1NDM2MA=="}, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM5MDAwMQ==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515390001", "createdAt": "2020-10-30T21:25:54Z", "author": {"login": "cemozerr"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/NodeDataProvider.java", "diffHunk": "@@ -13,14 +13,58 @@\n \n package tech.pegasys.teku.api;\n \n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1NDM2MA=="}, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTA0NTkxOnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/teku/api/NodeDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDoxNjozN1rOHrewwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToyMzoyNVrOHsSgDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1NDgxOA==", "bodyText": "no tests?", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r515354818", "createdAt": "2020-10-30T20:16:37Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/NodeDataProvider.java", "diffHunk": "@@ -13,14 +13,58 @@\n \n package tech.pegasys.teku.api;\n \n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.statetransition.OperationPool;\n import tech.pegasys.teku.statetransition.attestation.AggregatingAttestationPool;\n \n public class NodeDataProvider {\n \n   private final AggregatingAttestationPool attestationPool;\n+  private final OperationPool<AttesterSlashing> attesterSlashingPool;\n+  private final OperationPool<ProposerSlashing> proposerSlashingPool;\n+  private final OperationPool<SignedVoluntaryExit> voluntaryExitPool;\n \n-  public NodeDataProvider(final AggregatingAttestationPool attestationPool) {\n+  public NodeDataProvider(\n+      AggregatingAttestationPool attestationPool,\n+      OperationPool<AttesterSlashing> attesterSlashingsPool,\n+      OperationPool<ProposerSlashing> proposerSlashingPool,\n+      OperationPool<SignedVoluntaryExit> voluntaryExitPool) {\n     this.attestationPool = attestationPool;\n+    this.attesterSlashingPool = attesterSlashingsPool;\n+    this.proposerSlashingPool = proposerSlashingPool;\n+    this.voluntaryExitPool = voluntaryExitPool;\n+  }\n+\n+  public List<tech.pegasys.teku.api.schema.Attestation> getAttestations(\n+      Optional<UInt64> maybeSlot, Optional<UInt64> maybeCommitteeIndex) {\n+    return attestationPool\n+        .getAttestations(maybeSlot, maybeCommitteeIndex)\n+        .map(tech.pegasys.teku.api.schema.Attestation::new)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public List<tech.pegasys.teku.api.schema.AttesterSlashing> getAttesterSlashings() {\n+    return attesterSlashingPool.getAll().stream()\n+        .map(tech.pegasys.teku.api.schema.AttesterSlashing::new)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public List<tech.pegasys.teku.api.schema.ProposerSlashing> getProposerSlashings() {\n+    return proposerSlashingPool.getAll().stream()\n+        .map(tech.pegasys.teku.api.schema.ProposerSlashing::new)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public List<tech.pegasys.teku.api.schema.SignedVoluntaryExit> getVoluntaryExits() {\n+    return voluntaryExitPool.getAll().stream()\n+        .map(tech.pegasys.teku.api.schema.SignedVoluntaryExit::new)\n+        .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMjUxMA==", "bodyText": "I've added tests for the attestationPool.getAttestations() method, but the rest are basic getter methods that map internal data structures to API schema so I don't see how I could properly test them.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r516202510", "createdAt": "2020-11-02T19:23:25Z", "author": {"login": "cemozerr"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/NodeDataProvider.java", "diffHunk": "@@ -13,14 +13,58 @@\n \n package tech.pegasys.teku.api;\n \n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.statetransition.OperationPool;\n import tech.pegasys.teku.statetransition.attestation.AggregatingAttestationPool;\n \n public class NodeDataProvider {\n \n   private final AggregatingAttestationPool attestationPool;\n+  private final OperationPool<AttesterSlashing> attesterSlashingPool;\n+  private final OperationPool<ProposerSlashing> proposerSlashingPool;\n+  private final OperationPool<SignedVoluntaryExit> voluntaryExitPool;\n \n-  public NodeDataProvider(final AggregatingAttestationPool attestationPool) {\n+  public NodeDataProvider(\n+      AggregatingAttestationPool attestationPool,\n+      OperationPool<AttesterSlashing> attesterSlashingsPool,\n+      OperationPool<ProposerSlashing> proposerSlashingPool,\n+      OperationPool<SignedVoluntaryExit> voluntaryExitPool) {\n     this.attestationPool = attestationPool;\n+    this.attesterSlashingPool = attesterSlashingsPool;\n+    this.proposerSlashingPool = proposerSlashingPool;\n+    this.voluntaryExitPool = voluntaryExitPool;\n+  }\n+\n+  public List<tech.pegasys.teku.api.schema.Attestation> getAttestations(\n+      Optional<UInt64> maybeSlot, Optional<UInt64> maybeCommitteeIndex) {\n+    return attestationPool\n+        .getAttestations(maybeSlot, maybeCommitteeIndex)\n+        .map(tech.pegasys.teku.api.schema.Attestation::new)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public List<tech.pegasys.teku.api.schema.AttesterSlashing> getAttesterSlashings() {\n+    return attesterSlashingPool.getAll().stream()\n+        .map(tech.pegasys.teku.api.schema.AttesterSlashing::new)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public List<tech.pegasys.teku.api.schema.ProposerSlashing> getProposerSlashings() {\n+    return proposerSlashingPool.getAll().stream()\n+        .map(tech.pegasys.teku.api.schema.ProposerSlashing::new)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public List<tech.pegasys.teku.api.schema.SignedVoluntaryExit> getVoluntaryExits() {\n+    return voluntaryExitPool.getAll().stream()\n+        .map(tech.pegasys.teku.api.schema.SignedVoluntaryExit::new)\n+        .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1NDgxOA=="}, "originalCommit": {"oid": "fcc57338817adf6508237a880322277a7f887c69"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDUyMTA3OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMTozMDo1M1rOHtGKUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxOToyOToyOFrOHtmqTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA0ODkxNQ==", "bodyText": "theres a generic handler, we don't need to explicitly catch BadRequestException here.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r517048915", "createdAt": "2020-11-04T01:30:53Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.exceptions.BadRequestException;\n+import tech.pegasys.teku.api.response.v1.beacon.GetAttestationsResponse;\n+import tech.pegasys.teku.api.schema.Attestation;\n+import tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestations extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attestations\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetAttestations(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get attestations\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Retrieves attestations known by the node but not necessarily incorporated into any block.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetAttestationsResponse.class)),\n+        @OpenApiResponse(status = RES_BAD_REQUEST),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      Map<String, List<String>> queryParamMap = ctx.queryParamMap();\n+      Optional<UInt64> maybeSlot =\n+          SingleQueryParameterUtils.getParameterValueAsUInt64IfPresent(queryParamMap, SLOT);\n+      Optional<UInt64> maybeCommitteeIndex =\n+          SingleQueryParameterUtils.getParameterValueAsUInt64IfPresent(\n+              ctx.queryParamMap(), COMMITTEE_INDEX);\n+      ctx.header(Header.CACHE_CONTROL, CACHE_NONE);\n+      List<Attestation> attestations =\n+          nodeDataProvider.getAttestations(maybeSlot, maybeCommitteeIndex);\n+      ctx.result(jsonProvider.objectToJSON(new GetAttestationsResponse(attestations)));\n+    } catch (BadRequestException e) {\n+      ctx.result(\"The slot or committee index could not be parsed.\");\n+      ctx.status(SC_BAD_REQUEST);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ca22c5d6724cbaf21c82ab13614701a5729523d"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU4MTM4OA==", "bodyText": "Removed.", "url": "https://github.com/ConsenSys/teku/pull/3095#discussion_r517581388", "createdAt": "2020-11-04T19:29:28Z", "author": {"login": "cemozerr"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetAttestations.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.exceptions.BadRequestException;\n+import tech.pegasys.teku.api.response.v1.beacon.GetAttestationsResponse;\n+import tech.pegasys.teku.api.schema.Attestation;\n+import tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestations extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attestations\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public GetAttestations(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get attestations\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Retrieves attestations known by the node but not necessarily incorporated into any block.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetAttestationsResponse.class)),\n+        @OpenApiResponse(status = RES_BAD_REQUEST),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      Map<String, List<String>> queryParamMap = ctx.queryParamMap();\n+      Optional<UInt64> maybeSlot =\n+          SingleQueryParameterUtils.getParameterValueAsUInt64IfPresent(queryParamMap, SLOT);\n+      Optional<UInt64> maybeCommitteeIndex =\n+          SingleQueryParameterUtils.getParameterValueAsUInt64IfPresent(\n+              ctx.queryParamMap(), COMMITTEE_INDEX);\n+      ctx.header(Header.CACHE_CONTROL, CACHE_NONE);\n+      List<Attestation> attestations =\n+          nodeDataProvider.getAttestations(maybeSlot, maybeCommitteeIndex);\n+      ctx.result(jsonProvider.objectToJSON(new GetAttestationsResponse(attestations)));\n+    } catch (BadRequestException e) {\n+      ctx.result(\"The slot or committee index could not be parsed.\");\n+      ctx.status(SC_BAD_REQUEST);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA0ODkxNQ=="}, "originalCommit": {"oid": "6ca22c5d6724cbaf21c82ab13614701a5729523d"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3110, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}