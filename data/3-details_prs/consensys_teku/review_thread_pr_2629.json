{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNzMyODg2", "number": 2629, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODo0NDoxNFrOEbEcvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToyMDoyNFrOEbFN-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODE5OTAyOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/stategenerator/StateGenerationTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxODo0NDoxNFrOHE3iRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjo0OTowNVrOHF42-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NjI0Nw==", "bodyText": "To make it clearer what's happening here, maybe we should add some validation in the constructor:\ncheckArgument(tree.getRootHash().equals(baseBlockAndState.getRoot()), \"Tree must be rooted at the base block\");", "url": "https://github.com/ConsenSys/teku/pull/2629#discussion_r474866247", "createdAt": "2020-08-21T18:44:14Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/stategenerator/StateGenerationTask.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.stategenerator;\n+\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.core.lookup.BlockProvider;\n+import tech.pegasys.teku.core.lookup.StateAndBlockProvider;\n+import tech.pegasys.teku.core.stategenerator.CachingTaskQueue.CacheableTask;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.datastructures.hashtree.HashTree;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+\n+public class StateGenerationTask implements CacheableTask<Bytes32, SignedBlockAndState> {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final HashTree tree;\n+  private final SignedBlockAndState baseBlockAndState;\n+  protected final Optional<Bytes32> epochBoundaryRoot;\n+  private final BlockProvider blockProvider;\n+  protected final StateAndBlockProvider stateAndBlockProvider;\n+  private final Bytes32 blockRoot;\n+\n+  public StateGenerationTask(\n+      final Bytes32 blockRoot,\n+      final HashTree tree,\n+      final SignedBlockAndState baseBlockAndState,\n+      final Optional<Bytes32> epochBoundaryRoot,\n+      final BlockProvider blockProvider,\n+      final StateAndBlockProvider stateAndBlockProvider) {\n+    this.tree = tree;\n+    this.baseBlockAndState = baseBlockAndState;\n+    this.epochBoundaryRoot = epochBoundaryRoot;\n+    this.blockProvider = blockProvider;\n+    this.stateAndBlockProvider = stateAndBlockProvider;\n+    this.blockRoot = blockRoot;\n+  }\n+\n+  @Override\n+  public Bytes32 getKey() {\n+    return blockRoot;\n+  }\n+\n+  @Override\n+  public Stream<Bytes32> streamIntermediateSteps() {\n+    final Bytes32 rootParent = tree.getParent(tree.getRootHash()).orElseThrow();\n+    return Stream.iterate(\n+            tree.getParent(blockRoot),\n+            Optional::isPresent,\n+            current -> current.flatMap(tree::getParent))\n+        .flatMap(Optional::stream)\n+        // The root's parent is in the tree but is worse that the current starting point so exclude\n+        .filter(ancestorRoot -> !ancestorRoot.equals(rootParent));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70a0fc4ddb13740d70c7061bdd1a4f6e4ddaf32b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzNjUwNQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2629#discussion_r475936505", "createdAt": "2020-08-24T22:49:05Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/stategenerator/StateGenerationTask.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.stategenerator;\n+\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.core.lookup.BlockProvider;\n+import tech.pegasys.teku.core.lookup.StateAndBlockProvider;\n+import tech.pegasys.teku.core.stategenerator.CachingTaskQueue.CacheableTask;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.datastructures.hashtree.HashTree;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+\n+public class StateGenerationTask implements CacheableTask<Bytes32, SignedBlockAndState> {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final HashTree tree;\n+  private final SignedBlockAndState baseBlockAndState;\n+  protected final Optional<Bytes32> epochBoundaryRoot;\n+  private final BlockProvider blockProvider;\n+  protected final StateAndBlockProvider stateAndBlockProvider;\n+  private final Bytes32 blockRoot;\n+\n+  public StateGenerationTask(\n+      final Bytes32 blockRoot,\n+      final HashTree tree,\n+      final SignedBlockAndState baseBlockAndState,\n+      final Optional<Bytes32> epochBoundaryRoot,\n+      final BlockProvider blockProvider,\n+      final StateAndBlockProvider stateAndBlockProvider) {\n+    this.tree = tree;\n+    this.baseBlockAndState = baseBlockAndState;\n+    this.epochBoundaryRoot = epochBoundaryRoot;\n+    this.blockProvider = blockProvider;\n+    this.stateAndBlockProvider = stateAndBlockProvider;\n+    this.blockRoot = blockRoot;\n+  }\n+\n+  @Override\n+  public Bytes32 getKey() {\n+    return blockRoot;\n+  }\n+\n+  @Override\n+  public Stream<Bytes32> streamIntermediateSteps() {\n+    final Bytes32 rootParent = tree.getParent(tree.getRootHash()).orElseThrow();\n+    return Stream.iterate(\n+            tree.getParent(blockRoot),\n+            Optional::isPresent,\n+            current -> current.flatMap(tree::getParent))\n+        .flatMap(Optional::stream)\n+        // The root's parent is in the tree but is worse that the current starting point so exclude\n+        .filter(ancestorRoot -> !ancestorRoot.equals(rootParent));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NjI0Nw=="}, "originalCommit": {"oid": "70a0fc4ddb13740d70c7061bdd1a4f6e4ddaf32b"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODMxODI5OnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/store/StoreBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToxOTowNFrOHE4rYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjo0ODo0M1rOHF42mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4NDk2MQ==", "bodyText": "Now that we're passing stateAndBlockProvider into Store directly, I think we need to add this assert to assertValid() as well.", "url": "https://github.com/ConsenSys/teku/pull/2629#discussion_r474884961", "createdAt": "2020-08-21T19:19:04Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/StoreBuilder.java", "diffHunk": "@@ -106,16 +107,17 @@ public static StoreBuilder forkChoiceStoreBuilder(\n   }\n \n   private void createDefaults() {\n-    if (stateGenerationQueue == null) {\n+    if (stateTaskQueue == null) {\n       checkState(stateAndBlockProvider != null, \"StateAndBlockProvider must be defined\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70a0fc4ddb13740d70c7061bdd1a4f6e4ddaf32b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzNjQwOA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2629#discussion_r475936408", "createdAt": "2020-08-24T22:48:43Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/StoreBuilder.java", "diffHunk": "@@ -106,16 +107,17 @@ public static StoreBuilder forkChoiceStoreBuilder(\n   }\n \n   private void createDefaults() {\n-    if (stateGenerationQueue == null) {\n+    if (stateTaskQueue == null) {\n       checkState(stateAndBlockProvider != null, \"StateAndBlockProvider must be defined\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4NDk2MQ=="}, "originalCommit": {"oid": "70a0fc4ddb13740d70c7061bdd1a4f6e4ddaf32b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2ODMyNTA2OnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/store/StoreBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOToyMDoyNFrOHE4vqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMjo0ODo1OVrOHF423A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4NjA1OQ==", "bodyText": "We could probably just construct this inside of Store.", "url": "https://github.com/ConsenSys/teku/pull/2629#discussion_r474886059", "createdAt": "2020-08-21T19:20:24Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/StoreBuilder.java", "diffHunk": "@@ -106,16 +107,17 @@ public static StoreBuilder forkChoiceStoreBuilder(\n   }\n \n   private void createDefaults() {\n-    if (stateGenerationQueue == null) {\n+    if (stateTaskQueue == null) {\n       checkState(stateAndBlockProvider != null, \"StateAndBlockProvider must be defined\");\n-      stateGenerationQueue = StateGenerationQueue.create(stateAndBlockProvider, metricsSystem);\n+      stateTaskQueue =\n+          CachingTaskQueue.create(metricsSystem, \"memory_states\", storeConfig.getStateCacheSize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70a0fc4ddb13740d70c7061bdd1a4f6e4ddaf32b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkzNjQ3Ng==", "bodyText": "Yep, makes sense - then it follows the same pattern as for checkpoint states.", "url": "https://github.com/ConsenSys/teku/pull/2629#discussion_r475936476", "createdAt": "2020-08-24T22:48:59Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/StoreBuilder.java", "diffHunk": "@@ -106,16 +107,17 @@ public static StoreBuilder forkChoiceStoreBuilder(\n   }\n \n   private void createDefaults() {\n-    if (stateGenerationQueue == null) {\n+    if (stateTaskQueue == null) {\n       checkState(stateAndBlockProvider != null, \"StateAndBlockProvider must be defined\");\n-      stateGenerationQueue = StateGenerationQueue.create(stateAndBlockProvider, metricsSystem);\n+      stateTaskQueue =\n+          CachingTaskQueue.create(metricsSystem, \"memory_states\", storeConfig.getStateCacheSize());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg4NjA1OQ=="}, "originalCommit": {"oid": "70a0fc4ddb13740d70c7061bdd1a4f6e4ddaf32b"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3329, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}