{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzOTI0NTY1", "number": 1596, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1Njo0OVrODyM-HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo1MzoyNlrODy_h2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY3OTAxOnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/artemis/util/config/Constants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1Njo0OVrOGGHUHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzo0MToyMFrOGGPW-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NDQ3Nw==", "bodyText": "Some of these constants are defined closer to the classes that use them - so you should make sure to deduplicate.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409064477", "createdAt": "2020-04-15T18:56:49Z", "author": {"login": "mbaxter"}, "path": "util/src/main/java/tech/pegasys/artemis/util/config/Constants.java", "diffHunk": "@@ -147,6 +147,15 @@\n   public static final long FORK_RETRY_DELAY_SECONDS = 10; // in sec\n   public static final long FORK_REFRESH_TIME_SECONDS = TimeUnit.MINUTES.toSeconds(5); // in sec\n \n+  // Networking\n+  public static final int GOSSIP_MAX_SIZE = 1048576; // bytes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ee1c99c42a77ddaad2ced5a97703d88e49a418"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5NjI4Mw==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409196283", "createdAt": "2020-04-15T23:41:20Z", "author": {"login": "cemozerr"}, "path": "util/src/main/java/tech/pegasys/artemis/util/config/Constants.java", "diffHunk": "@@ -147,6 +147,15 @@\n   public static final long FORK_RETRY_DELAY_SECONDS = 10; // in sec\n   public static final long FORK_REFRESH_TIME_SECONDS = TimeUnit.MINUTES.toSeconds(5); // in sec\n \n+  // Networking\n+  public static final int GOSSIP_MAX_SIZE = 1048576; // bytes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NDQ3Nw=="}, "originalCommit": {"oid": "31ee1c99c42a77ddaad2ced5a97703d88e49a418"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTcwMjE3OnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/network/P2PNetwork.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowMjo1N1rOGGHiaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDowMzo1NlrOGGJjbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2ODEzNg==", "bodyText": "(nit) Maybe just:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void updateCustomENRField(String fieldName, Bytes value);\n          \n          \n            \n              void setENRField(String fieldName, Bytes value);", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409068136", "createdAt": "2020-04-15T19:02:57Z", "author": {"login": "mbaxter"}, "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/network/P2PNetwork.java", "diffHunk": "@@ -88,6 +89,15 @@\n    */\n   Optional<String> getEnr();\n \n+  /**\n+   * Updates the value of or creates a field for the Ethereum Node Record (ENR) for the local node,\n+   * if one exists.\n+   *\n+   * @param fieldName\n+   * @param value\n+   */\n+  void updateCustomENRField(String fieldName, Bytes value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31ee1c99c42a77ddaad2ced5a97703d88e49a418"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwMTE2Nw==", "bodyText": "updateCustomENRField is not the best, but there can be multiple different custom fields, so set wouldn't be too correct either. I'm undecided.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409101167", "createdAt": "2020-04-15T20:03:56Z", "author": {"login": "cemozerr"}, "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/network/P2PNetwork.java", "diffHunk": "@@ -88,6 +89,15 @@\n    */\n   Optional<String> getEnr();\n \n+  /**\n+   * Updates the value of or creates a field for the Ethereum Node Record (ENR) for the local node,\n+   * if one exists.\n+   *\n+   * @param fieldName\n+   * @param value\n+   */\n+  void updateCustomENRField(String fieldName, Bytes value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2ODEzNg=="}, "originalCommit": {"oid": "31ee1c99c42a77ddaad2ced5a97703d88e49a418"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDU0MTI0OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzo1MzozMFrOGGPmPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoxMToyOVrOGGszTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwMDE5MQ==", "bodyText": "The ENR should only report the subnets that we randomly selected to subscribe to long term, not the ones that we temporarily subscribe to as part of our aggregation duties:\nhttps://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/validator.md#phase-0-attestation-subnet-stability:\n\nMaintain advertisement of the randomly selected subnets in their node's ENR attnets entry by setting the randomly selected subnet_id bits to True (e.g. ENR[\"attnets\"][subnet_id] = True) for all persistent attestation subnets\n\nRight now I think that's always an empty set because we aren't selecting long term subnets.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409200191", "createdAt": "2020-04-15T23:53:30Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptions.java", "diffHunk": "@@ -38,6 +47,7 @@ public synchronized void subscribeToCommittee(\n     final UnsignedLong currentUnsubscribeSlot =\n         unsubscriptionSlotByCommittee.getOrDefault(committeeIndex, ZERO);\n     unsubscriptionSlotByCommittee.put(committeeIndex, max(currentUnsubscribeSlot, aggregationSlot));\n+    handleCommitteeSubscriptionENRChange(committeeIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a678e998ea97808c297619b3825f44cb962be224"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY3ODY3MQ==", "bodyText": "My thinking was that, since we don't have the random selection of persistent subnets yet, for now, the new ENR attestation subnet bitfield functionality would be used to display attestation subnets we're subscribing for aggregation. That was probably an assumption I should have made more explicitly, and maybe not the best assumption to make. I will refactor this PR to explicitly expose an interface to subscribe and unsubscribe from randomly selected persistent attestation subnets.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409678671", "createdAt": "2020-04-16T16:11:29Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptions.java", "diffHunk": "@@ -38,6 +47,7 @@ public synchronized void subscribeToCommittee(\n     final UnsignedLong currentUnsubscribeSlot =\n         unsubscriptionSlotByCommittee.getOrDefault(committeeIndex, ZERO);\n     unsubscriptionSlotByCommittee.put(committeeIndex, max(currentUnsubscribeSlot, aggregationSlot));\n+    handleCommitteeSubscriptionENRChange(committeeIndex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwMDE5MQ=="}, "originalCommit": {"oid": "a678e998ea97808c297619b3825f44cb962be224"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDU0NjkwOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/rpc/core/RpcTimeouts.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzo1NjowOVrOGGPpdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNTo0MTo0OVrOGGriYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwMTAxMw==", "bodyText": "We're going to have to have a conversation about shoving every constant into one file at some point - it's getting very crowded in there....", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409201013", "createdAt": "2020-04-15T23:56:09Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/rpc/core/RpcTimeouts.java", "diffHunk": "@@ -23,9 +24,9 @@\n public abstract class RpcTimeouts {\n \n   // The maximum time to wait for first byte of request response (time-to-first-byte).\n-  static final Duration TTFB_TIMEOUT = Duration.ofSeconds(5);\n+  static final Duration TTFB_TIMEOUT = Duration.ofSeconds(Constants.TTFB_TIMEOUT);\n   // The maximum time for complete response transfer.\n-  static final Duration RESP_TIMEOUT = Duration.ofSeconds(10);\n+  static final Duration RESP_TIMEOUT = Duration.ofSeconds(Constants.RESP_TIMEOUT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a678e998ea97808c297619b3825f44cb962be224"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1Nzk1NQ==", "bodyText": "I understand, but I'm trying to be as consistent as possible. If we did decide to move the constants out of that file to individual files, I would not shove them there.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409657955", "createdAt": "2020-04-16T15:41:49Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/rpc/core/RpcTimeouts.java", "diffHunk": "@@ -23,9 +24,9 @@\n public abstract class RpcTimeouts {\n \n   // The maximum time to wait for first byte of request response (time-to-first-byte).\n-  static final Duration TTFB_TIMEOUT = Duration.ofSeconds(5);\n+  static final Duration TTFB_TIMEOUT = Duration.ofSeconds(Constants.TTFB_TIMEOUT);\n   // The maximum time for complete response transfer.\n-  static final Duration RESP_TIMEOUT = Duration.ofSeconds(10);\n+  static final Duration RESP_TIMEOUT = Duration.ofSeconds(Constants.RESP_TIMEOUT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwMTAxMw=="}, "originalCommit": {"oid": "a678e998ea97808c297619b3825f44cb962be224"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDU4NDQ4OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/Eth2Network.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMDoxNDo0NlrOGGP_nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNjozNjoyNFrOGHVHlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwNjY4Nw==", "bodyText": "I think we've wound up mixing committeeIndex and attestation subnet in this interface with the subscribe/unsubscribe talking in terms of committee index but the attestation subnet defining subnet indices. Prior to v0.11 that was a 1-1 mapping but now that the topic index is committeeIndex % ATTESTATION_SUBNET_COUNT they wind up different and something has to handle cases where two committees map to the same subnet (especially when we unsubscribe from one but not the other).\nI'd be tempted to define this entirely in terms of subnet index so the AttestationTopicSubscriptions class is responsible for the mapping from committee index to subnet index and working out which subnets we should be subscribed from that.\nBut I'd also be very tempted to change updateAttestationSubnetENRField to be more discovery system agnostic so it's just setLongTermAttestationSubnetSubscriptions(List<Integer> subnetIndices) and that flows all the way down to DiscoveryNetwork which is responsible for converting the indices to the right format to put in an ENR.  Outside of DiscoveryNetwork shouldn't need to know how it's represented (or really even that it goes in the ENR).  In the future it might use discv5 topic searches rather than an enr field and ideally only DiscoveryNetwork would have to change.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409206687", "createdAt": "2020-04-16T00:14:46Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/Eth2Network.java", "diffHunk": "@@ -21,4 +22,6 @@\n   void subscribeToAttestationCommitteeTopic(int committeeIndex);\n \n   void unsubscribeFromAttestationCommitteeTopic(int committeeIndex);\n+\n+  void updateAttestationSubnetENRField(Bytes value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a678e998ea97808c297619b3825f44cb962be224"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4ODIyOA==", "bodyText": "changing updateAttestationSubnetENRField to setLongTermAttestationSubnetSubscriptions(List<Integer> subnetIndices) makes a lot of sense to me.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409688228", "createdAt": "2020-04-16T16:25:42Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/Eth2Network.java", "diffHunk": "@@ -21,4 +22,6 @@\n   void subscribeToAttestationCommitteeTopic(int committeeIndex);\n \n   void unsubscribeFromAttestationCommitteeTopic(int committeeIndex);\n+\n+  void updateAttestationSubnetENRField(Bytes value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwNjY4Nw=="}, "originalCommit": {"oid": "a678e998ea97808c297619b3825f44cb962be224"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcxNDk5OA==", "bodyText": "However, the fact that DiscoveryNetwork is an instance of the P2PNetwork makes it impossible, as far as I understand, to keep any Discovery specific implementation detail out of P2PNetwork, DelegatingP2PNetwork, LibP2PNetwork, MockP2PNetwork etc. Any DiscoveryNetwork specific API I need to implement, I need to implement for all these classes as well.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409714998", "createdAt": "2020-04-16T17:07:42Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/Eth2Network.java", "diffHunk": "@@ -21,4 +22,6 @@\n   void subscribeToAttestationCommitteeTopic(int committeeIndex);\n \n   void unsubscribeFromAttestationCommitteeTopic(int committeeIndex);\n+\n+  void updateAttestationSubnetENRField(Bytes value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwNjY4Nw=="}, "originalCommit": {"oid": "a678e998ea97808c297619b3825f44cb962be224"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgyNzQ0Mg==", "bodyText": "I think all the discovery specific stuff should be inside DiscoveryNetwork, not exposed by it's API.  Just like the discovery library dependency is entire inside DiscoveryNetwork.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409827442", "createdAt": "2020-04-16T20:25:56Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/Eth2Network.java", "diffHunk": "@@ -21,4 +22,6 @@\n   void subscribeToAttestationCommitteeTopic(int committeeIndex);\n \n   void unsubscribeFromAttestationCommitteeTopic(int committeeIndex);\n+\n+  void updateAttestationSubnetENRField(Bytes value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwNjY4Nw=="}, "originalCommit": {"oid": "a678e998ea97808c297619b3825f44cb962be224"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMzOTIyMg==", "bodyText": "Makes total sense to me as discussed offline.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410339222", "createdAt": "2020-04-17T16:36:24Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/Eth2Network.java", "diffHunk": "@@ -21,4 +22,6 @@\n   void subscribeToAttestationCommitteeTopic(int committeeIndex);\n \n   void unsubscribeFromAttestationCommitteeTopic(int committeeIndex);\n+\n+  void updateAttestationSubnetENRField(Bytes value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwNjY4Nw=="}, "originalCommit": {"oid": "a678e998ea97808c297619b3825f44cb962be224"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDU5MTM3OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMDoxODoxNVrOGGQDww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMDoxODoxNVrOGGQDww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwNzc0Nw==", "bodyText": "We shouldn't be calling unsubscribeFromCommittee when the subnet overlaps with one we stay subscribed to either.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409207747", "createdAt": "2020-04-16T00:18:15Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java", "diffHunk": "@@ -82,12 +85,67 @@ public void shouldPreserveLaterSubscriptionPeriodWhenEarlierSlotAdded() {\n     final UnsignedLong secondSlot = UnsignedLong.valueOf(15);\n \n     subscriptions.subscribeToCommittee(committeeIndex, secondSlot);\n-    subscriptions.subscribeToCommittee(committeeIndex, firstSlot);\n \n     subscriptions.onSlot(firstSlot.plus(ONE));\n     verify(eth2Network, never()).unsubscribeFromAttestationCommitteeTopic(committeeIndex);\n \n     subscriptions.onSlot(secondSlot.plus(ONE));\n     verify(eth2Network).unsubscribeFromAttestationCommitteeTopic(committeeIndex);\n   }\n+\n+  @Test\n+  public void shouldSubscribeToSubnet() {\n+    final int committeeIndex = 3;\n+\n+    final UnsignedLong firstSlot = UnsignedLong.valueOf(10);\n+    subscriptions.subscribeToCommittee(committeeIndex, firstSlot);\n+    int subnetIndex = committeeIndex % ATTESTATION_SUBNET_COUNT;\n+    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n+    bitvector.setBit(subnetIndex);\n+\n+    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n+  }\n+\n+  @Test\n+  public void shouldSubscribeToMultipleSubnets() {\n+    final int committeeIndex1 = 3;\n+    final int committeeIndex2 = 10;\n+\n+    final UnsignedLong firstSlot = UnsignedLong.valueOf(10);\n+    subscriptions.subscribeToCommittee(committeeIndex1, firstSlot);\n+    subscriptions.subscribeToCommittee(committeeIndex2, firstSlot);\n+    int subnetIndex1 = committeeIndex1 % ATTESTATION_SUBNET_COUNT;\n+    int subnetIndex2 = committeeIndex2 % ATTESTATION_SUBNET_COUNT;\n+    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n+\n+    bitvector.setBit(subnetIndex1);\n+    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n+\n+    bitvector.setBit(subnetIndex2);\n+    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n+  }\n+\n+  @Test\n+  public void shouldNotUnsubscribeWhenThereAreOtherCommitteeThatMapToSameSubnet() {\n+\n+    final int committeeIndex1 = 4;\n+    final int committeeIndex2 = 4 + ATTESTATION_SUBNET_COUNT;\n+\n+    final UnsignedLong slot1 = UnsignedLong.valueOf(10);\n+    final UnsignedLong slot2 = UnsignedLong.valueOf(13);\n+    subscriptions.subscribeToCommittee(committeeIndex1, slot1);\n+    subscriptions.subscribeToCommittee(committeeIndex2, slot2);\n+\n+    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n+    bitvector.setBit(4);\n+\n+    verify(eth2Network, times(1)).updateAttestationSubnetENRField(bitvector.serialize());\n+\n+    subscriptions.onSlot(slot1.plus(ONE));\n+    verify(eth2Network, times(1)).updateAttestationSubnetENRField(bitvector.serialize());\n+\n+    bitvector.clearBit(4);\n+    subscriptions.onSlot(slot2.plus(ONE));\n+    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a678e998ea97808c297619b3825f44cb962be224"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDU5MzU5OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMDoxOToyMFrOGGQE_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMDozOToyMFrOGGQbGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwODA2Mw==", "bodyText": "I suspect this should be\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                verify(eth2Network, times(1)).updateAttestationSubnetENRField(bitvector.serialize());\n          \n          \n            \n                verify(eth2Network, times(1)).updateAttestationSubnetENRField(any());\n          \n      \n    \n    \n  \n\nOtherwise the test will pass if the ENR field is updated with a different value because it's only asserting that particular value is only set once.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409208063", "createdAt": "2020-04-16T00:19:20Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java", "diffHunk": "@@ -82,12 +85,67 @@ public void shouldPreserveLaterSubscriptionPeriodWhenEarlierSlotAdded() {\n     final UnsignedLong secondSlot = UnsignedLong.valueOf(15);\n \n     subscriptions.subscribeToCommittee(committeeIndex, secondSlot);\n-    subscriptions.subscribeToCommittee(committeeIndex, firstSlot);\n \n     subscriptions.onSlot(firstSlot.plus(ONE));\n     verify(eth2Network, never()).unsubscribeFromAttestationCommitteeTopic(committeeIndex);\n \n     subscriptions.onSlot(secondSlot.plus(ONE));\n     verify(eth2Network).unsubscribeFromAttestationCommitteeTopic(committeeIndex);\n   }\n+\n+  @Test\n+  public void shouldSubscribeToSubnet() {\n+    final int committeeIndex = 3;\n+\n+    final UnsignedLong firstSlot = UnsignedLong.valueOf(10);\n+    subscriptions.subscribeToCommittee(committeeIndex, firstSlot);\n+    int subnetIndex = committeeIndex % ATTESTATION_SUBNET_COUNT;\n+    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n+    bitvector.setBit(subnetIndex);\n+\n+    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n+  }\n+\n+  @Test\n+  public void shouldSubscribeToMultipleSubnets() {\n+    final int committeeIndex1 = 3;\n+    final int committeeIndex2 = 10;\n+\n+    final UnsignedLong firstSlot = UnsignedLong.valueOf(10);\n+    subscriptions.subscribeToCommittee(committeeIndex1, firstSlot);\n+    subscriptions.subscribeToCommittee(committeeIndex2, firstSlot);\n+    int subnetIndex1 = committeeIndex1 % ATTESTATION_SUBNET_COUNT;\n+    int subnetIndex2 = committeeIndex2 % ATTESTATION_SUBNET_COUNT;\n+    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n+\n+    bitvector.setBit(subnetIndex1);\n+    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n+\n+    bitvector.setBit(subnetIndex2);\n+    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n+  }\n+\n+  @Test\n+  public void shouldNotUnsubscribeWhenThereAreOtherCommitteeThatMapToSameSubnet() {\n+\n+    final int committeeIndex1 = 4;\n+    final int committeeIndex2 = 4 + ATTESTATION_SUBNET_COUNT;\n+\n+    final UnsignedLong slot1 = UnsignedLong.valueOf(10);\n+    final UnsignedLong slot2 = UnsignedLong.valueOf(13);\n+    subscriptions.subscribeToCommittee(committeeIndex1, slot1);\n+    subscriptions.subscribeToCommittee(committeeIndex2, slot2);\n+\n+    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n+    bitvector.setBit(4);\n+\n+    verify(eth2Network, times(1)).updateAttestationSubnetENRField(bitvector.serialize());\n+\n+    subscriptions.onSlot(slot1.plus(ONE));\n+    verify(eth2Network, times(1)).updateAttestationSubnetENRField(bitvector.serialize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a678e998ea97808c297619b3825f44cb962be224"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxMzcyMA==", "bodyText": "Yeah. Good catch.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409213720", "createdAt": "2020-04-16T00:39:20Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java", "diffHunk": "@@ -82,12 +85,67 @@ public void shouldPreserveLaterSubscriptionPeriodWhenEarlierSlotAdded() {\n     final UnsignedLong secondSlot = UnsignedLong.valueOf(15);\n \n     subscriptions.subscribeToCommittee(committeeIndex, secondSlot);\n-    subscriptions.subscribeToCommittee(committeeIndex, firstSlot);\n \n     subscriptions.onSlot(firstSlot.plus(ONE));\n     verify(eth2Network, never()).unsubscribeFromAttestationCommitteeTopic(committeeIndex);\n \n     subscriptions.onSlot(secondSlot.plus(ONE));\n     verify(eth2Network).unsubscribeFromAttestationCommitteeTopic(committeeIndex);\n   }\n+\n+  @Test\n+  public void shouldSubscribeToSubnet() {\n+    final int committeeIndex = 3;\n+\n+    final UnsignedLong firstSlot = UnsignedLong.valueOf(10);\n+    subscriptions.subscribeToCommittee(committeeIndex, firstSlot);\n+    int subnetIndex = committeeIndex % ATTESTATION_SUBNET_COUNT;\n+    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n+    bitvector.setBit(subnetIndex);\n+\n+    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n+  }\n+\n+  @Test\n+  public void shouldSubscribeToMultipleSubnets() {\n+    final int committeeIndex1 = 3;\n+    final int committeeIndex2 = 10;\n+\n+    final UnsignedLong firstSlot = UnsignedLong.valueOf(10);\n+    subscriptions.subscribeToCommittee(committeeIndex1, firstSlot);\n+    subscriptions.subscribeToCommittee(committeeIndex2, firstSlot);\n+    int subnetIndex1 = committeeIndex1 % ATTESTATION_SUBNET_COUNT;\n+    int subnetIndex2 = committeeIndex2 % ATTESTATION_SUBNET_COUNT;\n+    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n+\n+    bitvector.setBit(subnetIndex1);\n+    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n+\n+    bitvector.setBit(subnetIndex2);\n+    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n+  }\n+\n+  @Test\n+  public void shouldNotUnsubscribeWhenThereAreOtherCommitteeThatMapToSameSubnet() {\n+\n+    final int committeeIndex1 = 4;\n+    final int committeeIndex2 = 4 + ATTESTATION_SUBNET_COUNT;\n+\n+    final UnsignedLong slot1 = UnsignedLong.valueOf(10);\n+    final UnsignedLong slot2 = UnsignedLong.valueOf(13);\n+    subscriptions.subscribeToCommittee(committeeIndex1, slot1);\n+    subscriptions.subscribeToCommittee(committeeIndex2, slot2);\n+\n+    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n+    bitvector.setBit(4);\n+\n+    verify(eth2Network, times(1)).updateAttestationSubnetENRField(bitvector.serialize());\n+\n+    subscriptions.onSlot(slot1.plus(ONE));\n+    verify(eth2Network, times(1)).updateAttestationSubnetENRField(bitvector.serialize());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwODA2Mw=="}, "originalCommit": {"oid": "a678e998ea97808c297619b3825f44cb962be224"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzkxMDMyOnYy", "diffSide": "LEFT", "path": "networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzozNjo1N1rOGHXFig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDoxNDo0NlrOGHgSNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MTQ2Ng==", "bodyText": "Why was this line removed?", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410371466", "createdAt": "2020-04-17T17:36:57Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java", "diffHunk": "@@ -82,7 +82,6 @@ public void shouldPreserveLaterSubscriptionPeriodWhenEarlierSlotAdded() {\n     final UnsignedLong secondSlot = UnsignedLong.valueOf(15);\n \n     subscriptions.subscribeToCommittee(committeeIndex, secondSlot);\n-    subscriptions.subscribeToCommittee(committeeIndex, firstSlot);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff94cb679c847f3de55afff79c68fb0d44f638c5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMjE2Ng==", "bodyText": "My bad. Thanks for the catch.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410522166", "createdAt": "2020-04-18T00:14:46Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java", "diffHunk": "@@ -82,7 +82,6 @@ public void shouldPreserveLaterSubscriptionPeriodWhenEarlierSlotAdded() {\n     final UnsignedLong secondSlot = UnsignedLong.valueOf(15);\n \n     subscriptions.subscribeToCommittee(committeeIndex, secondSlot);\n-    subscriptions.subscribeToCommittee(committeeIndex, firstSlot);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MTQ2Ng=="}, "originalCommit": {"oid": "ff94cb679c847f3de55afff79c68fb0d44f638c5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzkzMjQzOnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo0NDoyN1rOGHXUZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjozMzowOVrOGHe9jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3NTI3MQ==", "bodyText": "Instead of adding a check here, you could just accept a Set of indices:\npublic Bitvector(Set<Integer> indicesToSet, int size) {", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410375271", "createdAt": "2020-04-17T17:44:27Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -40,6 +42,26 @@ public Bitvector(Bitvector bitvector) {\n     this.size = bitvector.size;\n   }\n \n+  public Bitvector(List<Integer> indicesToSet, int size) {\n+    this.size = size;\n+    this.data = new BitSet(size);\n+    if (indicesToSet.size() == 0) {\n+      return;\n+    }\n+    checkArgument(\n+        indicesToSet.stream().distinct().count() != indicesToSet.size(),\n+        \"Bitvector: Bit indices to set are not distinct\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff94cb679c847f3de55afff79c68fb0d44f638c5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMDQ5NQ==", "bodyText": "That's quite an expensive check to add as well and I'm not sure it actually matters.  It's like creating a Set from a List - duplicates should just be ignored.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410500495", "createdAt": "2020-04-17T22:33:09Z", "author": {"login": "ajsutton"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -40,6 +42,26 @@ public Bitvector(Bitvector bitvector) {\n     this.size = bitvector.size;\n   }\n \n+  public Bitvector(List<Integer> indicesToSet, int size) {\n+    this.size = size;\n+    this.data = new BitSet(size);\n+    if (indicesToSet.size() == 0) {\n+      return;\n+    }\n+    checkArgument(\n+        indicesToSet.stream().distinct().count() != indicesToSet.size(),\n+        \"Bitvector: Bit indices to set are not distinct\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3NTI3MQ=="}, "originalCommit": {"oid": "ff94cb679c847f3de55afff79c68fb0d44f638c5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzkzMzYwOnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo0NDo0OVrOGHXVKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDoxNzowNVrOGHgTdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3NTQ2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    indicesToSet.stream().max(Integer::compareTo).get() > size,\n          \n          \n            \n                    indicesToSet.stream().max(Integer::compareTo).get() >= size,", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410375466", "createdAt": "2020-04-17T17:44:49Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -40,6 +42,26 @@ public Bitvector(Bitvector bitvector) {\n     this.size = bitvector.size;\n   }\n \n+  public Bitvector(List<Integer> indicesToSet, int size) {\n+    this.size = size;\n+    this.data = new BitSet(size);\n+    if (indicesToSet.size() == 0) {\n+      return;\n+    }\n+    checkArgument(\n+        indicesToSet.stream().distinct().count() != indicesToSet.size(),\n+        \"Bitvector: Bit indices to set are not distinct\");\n+    checkArgument(\n+        indicesToSet.stream().min(Integer::compareTo).get() > -1,\n+        \"Bitvector: Bit index less than 0\");\n+    checkArgument(\n+        indicesToSet.stream().max(Integer::compareTo).get() > size,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff94cb679c847f3de55afff79c68fb0d44f638c5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMzAwMA==", "bodyText": "This check is requiring us to iterate through the List a second time.  I'd suggest the constructor would just be:\npublic Bitvector(Iterable<Integer> indicesToSet, int size) {\n  this(size);\n  for (int i : indicesToSet) {\n    setBit(i);\n  }\n}\n\nThe element index is then check as part of setting each bit so we only iterate once and any checks added in the future are automatically applied.  It basically just becomes syntactic sugar to make converting a list of ints to a Bitvector easy but does exactly the same thing as if you'd use the public APIs yourself.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410503000", "createdAt": "2020-04-17T22:42:39Z", "author": {"login": "ajsutton"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -40,6 +42,26 @@ public Bitvector(Bitvector bitvector) {\n     this.size = bitvector.size;\n   }\n \n+  public Bitvector(List<Integer> indicesToSet, int size) {\n+    this.size = size;\n+    this.data = new BitSet(size);\n+    if (indicesToSet.size() == 0) {\n+      return;\n+    }\n+    checkArgument(\n+        indicesToSet.stream().distinct().count() != indicesToSet.size(),\n+        \"Bitvector: Bit indices to set are not distinct\");\n+    checkArgument(\n+        indicesToSet.stream().min(Integer::compareTo).get() > -1,\n+        \"Bitvector: Bit index less than 0\");\n+    checkArgument(\n+        indicesToSet.stream().max(Integer::compareTo).get() > size,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3NTQ2Ng=="}, "originalCommit": {"oid": "ff94cb679c847f3de55afff79c68fb0d44f638c5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMjQ4Nw==", "bodyText": "Makes a lot of sense. Done.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410522487", "createdAt": "2020-04-18T00:17:05Z", "author": {"login": "cemozerr"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -40,6 +42,26 @@ public Bitvector(Bitvector bitvector) {\n     this.size = bitvector.size;\n   }\n \n+  public Bitvector(List<Integer> indicesToSet, int size) {\n+    this.size = size;\n+    this.data = new BitSet(size);\n+    if (indicesToSet.size() == 0) {\n+      return;\n+    }\n+    checkArgument(\n+        indicesToSet.stream().distinct().count() != indicesToSet.size(),\n+        \"Bitvector: Bit indices to set are not distinct\");\n+    checkArgument(\n+        indicesToSet.stream().min(Integer::compareTo).get() > -1,\n+        \"Bitvector: Bit index less than 0\");\n+    checkArgument(\n+        indicesToSet.stream().max(Integer::compareTo).get() > size,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3NTQ2Ng=="}, "originalCommit": {"oid": "ff94cb679c847f3de55afff79c68fb0d44f638c5"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Nzk2MjQ4OnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo1MzoyNlrOGHXnNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMDoyMDozNFrOGHgVsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4MDA4Nw==", "bodyText": "What about:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void setLongTermAttestationSubnetSubscriptions(List<Integer> subnetIds) {\n          \n          \n            \n              public void advertiseLongTermAttestationSubnetSubscriptions(final Set<Integer> subnetIds) {\n          \n      \n    \n    \n  \n\nSince the discovery network's role is limited to advertisements.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410380087", "createdAt": "2020-04-17T17:53:26Z", "author": {"login": "mbaxter"}, "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java", "diffHunk": "@@ -119,6 +124,12 @@ public void addStaticPeer(final String peerAddress) {\n     return discoveryService.getEnr();\n   }\n \n+  public void setLongTermAttestationSubnetSubscriptions(List<Integer> subnetIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff94cb679c847f3de55afff79c68fb0d44f638c5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwNDA1NA==", "bodyText": "Following on from Meredith's suggestion to use a Set in the Bitvector constructor, we should probably use a Collection here to allow callers to choose either a List or Set.  The order doesn't matter to us so being flexible is quite useful.\nAnd when we add the piece to call this building up the indices as a Set would make a lot of sense.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410504054", "createdAt": "2020-04-17T22:46:56Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java", "diffHunk": "@@ -119,6 +124,12 @@ public void addStaticPeer(final String peerAddress) {\n     return discoveryService.getEnr();\n   }\n \n+  public void setLongTermAttestationSubnetSubscriptions(List<Integer> subnetIds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4MDA4Nw=="}, "originalCommit": {"oid": "ff94cb679c847f3de55afff79c68fb0d44f638c5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMzA1Nw==", "bodyText": "Makes sense.", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410523057", "createdAt": "2020-04-18T00:20:34Z", "author": {"login": "cemozerr"}, "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java", "diffHunk": "@@ -119,6 +124,12 @@ public void addStaticPeer(final String peerAddress) {\n     return discoveryService.getEnr();\n   }\n \n+  public void setLongTermAttestationSubnetSubscriptions(List<Integer> subnetIds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4MDA4Nw=="}, "originalCommit": {"oid": "ff94cb679c847f3de55afff79c68fb0d44f638c5"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1626, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}