{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MjkxNTg4", "number": 2711, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDo1MzowNlrOEfE2YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDo1NDo0NVrOEfE4cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDIwNzY5OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/teku/util/exceptions/ExceptionUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDo1MzowNlrOHLH0Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjoxNzozN1rOHLKLqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQyNDQ3OQ==", "bodyText": "It may be worth using Guava's Throwables.getCausalChain so we benefit from all the details they have in iterating exception causes like loop detection.  I think it would be something like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static <T extends Throwable> Optional<T> getCause(\n          \n          \n            \n                  final Throwable err, Class<T> targetType) {\n          \n          \n            \n                Throwable current = err;\n          \n          \n            \n                while (current != null) {\n          \n          \n            \n                  if (targetType.isInstance(current)) {\n          \n          \n            \n                    return Optional.of((T) current);\n          \n          \n            \n                  }\n          \n          \n            \n                  current = current.getCause();\n          \n          \n            \n                }\n          \n          \n            \n                return Optional.empty();\n          \n          \n            \n              }\n          \n          \n            \n              public static <T extends Throwable> Optional<T> getCause(\n          \n          \n            \n                  final Throwable err, Class<T> targetType) {\n          \n          \n            \n                return Throwables.getCausalChain(err).filter(cause -> targetType.isInstance(cause)).findFirst();\n          \n          \n            \n              }", "url": "https://github.com/ConsenSys/teku/pull/2711#discussion_r481424479", "createdAt": "2020-09-01T20:53:06Z", "author": {"login": "ajsutton"}, "path": "util/src/main/java/tech/pegasys/teku/util/exceptions/ExceptionUtil.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.exceptions;\n+\n+import java.util.Optional;\n+\n+public class ExceptionUtil {\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public static <T extends Throwable> Optional<T> getCause(\n+      final Throwable err, Class<T> targetType) {\n+    Throwable current = err;\n+    while (current != null) {\n+      if (targetType.isInstance(current)) {\n+        return Optional.of((T) current);\n+      }\n+      current = current.getCause();\n+    }\n+    return Optional.empty();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "505f9e8ca1f92ccd20e3104051e88a46ca04bda2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ2MzIwOQ==", "bodyText": "Used apache commons ExceptionUtils.getThrowableList() because the guava util throws if there's a loop.", "url": "https://github.com/ConsenSys/teku/pull/2711#discussion_r481463209", "createdAt": "2020-09-01T22:17:37Z", "author": {"login": "mbaxter"}, "path": "util/src/main/java/tech/pegasys/teku/util/exceptions/ExceptionUtil.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.exceptions;\n+\n+import java.util.Optional;\n+\n+public class ExceptionUtil {\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public static <T extends Throwable> Optional<T> getCause(\n+      final Throwable err, Class<T> targetType) {\n+    Throwable current = err;\n+    while (current != null) {\n+      if (targetType.isInstance(current)) {\n+        return Optional.of((T) current);\n+      }\n+      current = current.getCause();\n+    }\n+    return Optional.empty();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQyNDQ3OQ=="}, "originalCommit": {"oid": "505f9e8ca1f92ccd20e3104051e88a46ca04bda2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDIxMjk2OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDo1NDo0NVrOHLH3jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjo1NDoxMVrOHLK9iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQyNTI5NA==", "bodyText": "Just to confirm, this doesn't apply when the ETH1 node is down at startup right? We should keep retrying in that case until the node comes up.  Otherwise it gets very difficult to coordinate services properly in things like docker-compose.", "url": "https://github.com/ConsenSys/teku/pull/2711#discussion_r481425294", "createdAt": "2020-09-01T20:54:45Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java", "diffHunk": "@@ -61,9 +62,12 @@ public void start() {\n         .thenCompose(\n             replayDepositsResult ->\n                 getHead().thenCompose(headBlock -> processStart(headBlock, replayDepositsResult)))\n-        .finish(\n-            () -> LOG.info(\"Eth1DepositsManager successfully ran startup sequence.\"),\n-            (err) -> LOG.fatal(\"Eth1DepositsManager unable to run startup sequence.\", err));\n+        .thenAccept(__ -> LOG.info(\"Eth1DepositsManager successfully ran startup sequence.\"))\n+        .exceptionally(\n+            (err) -> {\n+              throw new FatalServiceFailureException(getClass(), err);\n+            })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "505f9e8ca1f92ccd20e3104051e88a46ca04bda2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMzAyMw==", "bodyText": "good question - i'll double-check", "url": "https://github.com/ConsenSys/teku/pull/2711#discussion_r481433023", "createdAt": "2020-09-01T21:09:39Z", "author": {"login": "mbaxter"}, "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java", "diffHunk": "@@ -61,9 +62,12 @@ public void start() {\n         .thenCompose(\n             replayDepositsResult ->\n                 getHead().thenCompose(headBlock -> processStart(headBlock, replayDepositsResult)))\n-        .finish(\n-            () -> LOG.info(\"Eth1DepositsManager successfully ran startup sequence.\"),\n-            (err) -> LOG.fatal(\"Eth1DepositsManager unable to run startup sequence.\", err));\n+        .thenAccept(__ -> LOG.info(\"Eth1DepositsManager successfully ran startup sequence.\"))\n+        .exceptionally(\n+            (err) -> {\n+              throw new FatalServiceFailureException(getClass(), err);\n+            })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQyNTI5NA=="}, "originalCommit": {"oid": "505f9e8ca1f92ccd20e3104051e88a46ca04bda2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3NTk3OQ==", "bodyText": "Tested manually - we keep retrying if the eth1 node isn't up.  Also added some unit tests.", "url": "https://github.com/ConsenSys/teku/pull/2711#discussion_r481475979", "createdAt": "2020-09-01T22:54:11Z", "author": {"login": "mbaxter"}, "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java", "diffHunk": "@@ -61,9 +62,12 @@ public void start() {\n         .thenCompose(\n             replayDepositsResult ->\n                 getHead().thenCompose(headBlock -> processStart(headBlock, replayDepositsResult)))\n-        .finish(\n-            () -> LOG.info(\"Eth1DepositsManager successfully ran startup sequence.\"),\n-            (err) -> LOG.fatal(\"Eth1DepositsManager unable to run startup sequence.\", err));\n+        .thenAccept(__ -> LOG.info(\"Eth1DepositsManager successfully ran startup sequence.\"))\n+        .exceptionally(\n+            (err) -> {\n+              throw new FatalServiceFailureException(getClass(), err);\n+            })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQyNTI5NA=="}, "originalCommit": {"oid": "505f9e8ca1f92ccd20e3104051e88a46ca04bda2"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3364, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}