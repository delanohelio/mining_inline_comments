{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxODI0MjA5", "number": 3233, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDozNjozNlrOE5qkKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDo0NDowMlrOE5qtug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTAxNjc1OnYy", "diffSide": "RIGHT", "path": ".circleci/config.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDozNjozNlrOH0QY_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDozNjozNlrOH0QY_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1NjU0Mw==", "bodyText": "This doesn't seem right.  We should be extracting the API spec on PRs, just not publishing them. Otherwise if the extract is broken we don't find out until after it merges.", "url": "https://github.com/ConsenSys/teku/pull/3233#discussion_r524556543", "createdAt": "2020-11-16T20:36:36Z", "author": {"login": "ajsutton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -461,11 +414,15 @@ workflows:\n             tags:\n               <<: *filters-release-tags\n           context:\n-            - dockerhub-quorumengineering-ro             \n+            - dockerhub-quorumengineering-ro\n       - extractAPISpec:\n           requires:\n             - assemble\n           filters:\n+            branches:\n+              only:\n+                - master\n+                - /^release-.*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8709b7dc5cb9d6633f0327ebcc89abf082466cd"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTA0MTIyOnYy", "diffSide": "RIGHT", "path": ".openapidoc/config.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDo0NDowMlrOH0QoEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDo0NDowMlrOH0QoEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU2MDQwMQ==", "bodyText": "nit: comment is out of date.", "url": "https://github.com/ConsenSys/teku/pull/3233#discussion_r524560401", "createdAt": "2020-11-16T20:44:02Z", "author": {"login": "ajsutton"}, "path": ".openapidoc/config.js", "diffHunk": "@@ -0,0 +1,96 @@\n+const fs = require(\"fs\");\n+const path = require(\"path\");\n+const yaml = require(\"js-yaml\");\n+const GitUrlParse = require(\"git-url-parse\");\n+\n+const distDir = process.env.OA_DIST_DIR || \"./dist\";\n+const specDir =\n+  process.env.OA_SPEC_DIR || \"./spec\";\n+const gitUrl =\n+  process.env.OA_GIT_URL || \"git@github.com:Consensys/teku.git\";\n+const gitUserName = process.env.OA_GIT_USERNAME || \"CircleCI Build\";\n+const gitEmail = process.env.OA_GIT_EMAIL || \"ci-build@consensys.net\";\n+const branch = process.env.OA_GH_PAGES_BRANCH || \"gh-pages\";\n+const versionsFileName = process.env.OA_VERSIONS_FILE_NAME || \"versions.json\";\n+\n+module.exports = {\n+  getConfig,\n+};\n+\n+function getConfig() {\n+  const repo = GitUrlParse(gitUrl);\n+  const specs = calculateSpecs();\n+  if (specs.length == 0) {\n+    throw new Error(\"Unable to parse specs in dist\" + distDir);\n+  }\n+\n+  return {\n+    specs: specs,\n+    distDir: distDir,\n+    versions: calculateVersionDetails(repo, branch),\n+    ghPagesConfig: {\n+      add: true, // allows gh-pages module to keep remote files\n+      branch: branch,\n+      repo: repo.href,\n+      user: {\n+        name: gitUserName,\n+        email: gitEmail,\n+      },\n+      message: `[skip ci] OpenAPI Publish [${specs[0].version}]`,\n+    },\n+  };\n+}\n+\n+function calculateSpecs() {\n+  const extension = \".json\";\n+  const specFiles = fs.readdirSync(specDir);\n+  var specArr = [];\n+  specFiles.forEach((file) => {\n+    if (path.extname(file).toLowerCase() === extension) {\n+      specArr.push(calculateSpecDetails(path.join(specDir, file)));\n+    }\n+  });\n+\n+  return specArr;\n+}\n+\n+function calculateSpecDetails(specFile) {\n+  const specVersion = calculateSpecVersion(specFile);\n+  const release = isReleaseVersion(specVersion);\n+  const latestDist = destinationPath(true, specFile, \"latest\");\n+  const latestDistCompat = destinationPath(false, specFile, \"latest\");\n+  const releaseDist = destinationPath(true, specFile, specVersion);\n+\n+  return {\n+    path: specFile,\n+    version: specVersion,\n+    isReleaseVersion: release,\n+    latestDist: latestDist,\n+    latestDistCompat: latestDistCompat,\n+    releaseDist: releaseDist,\n+  };\n+}\n+\n+function calculateSpecVersion(specFile) {\n+  return yaml.safeLoad(fs.readFileSync(specFile, \"utf8\")).info.version;\n+}\n+\n+function isReleaseVersion(specVersion) {\n+  // our main project's gradle's build calculateVersion puts -dev- for snapshot version", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8709b7dc5cb9d6633f0327ebcc89abf082466cd"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3030, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}