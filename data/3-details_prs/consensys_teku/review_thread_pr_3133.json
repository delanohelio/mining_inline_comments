{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NDIxODMz", "number": 3133, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMjozMDoyMFrOE0oy8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMzoxOToxMFrOE1bq0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjI5ODA4OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/blocks/BeaconBlockHeader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMjozMDoyMFrOHseakg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMjozMDoyMFrOHseakg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5NzcxNA==", "bodyText": "nit: I think you can just use:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    block.getBody().hash_tree_root());\n          \n          \n            \n                    block.getBodyRoot());", "url": "https://github.com/ConsenSys/teku/pull/3133#discussion_r516397714", "createdAt": "2020-11-03T02:30:20Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/blocks/BeaconBlockHeader.java", "diffHunk": "@@ -87,6 +94,43 @@ public BeaconBlockHeader() {\n     super(TYPE);\n   }\n \n+  /**\n+   * Returns the block header associated with this state\n+   *\n+   * @param state A beacon state\n+   * @return The latest block header from the state, with stateRoot pointing to the supplied state\n+   */\n+  public static BeaconBlockHeader fromState(final BeaconState state) {\n+    BeaconBlockHeader latestHeader = state.getLatest_block_header();\n+\n+    if (latestHeader.getStateRoot().isZero()) {\n+      // If the state root is empty, replace it with the current state root\n+      final Bytes32 stateRoot = state.hash_tree_root();\n+      latestHeader =\n+          new BeaconBlockHeader(\n+              latestHeader.getSlot(),\n+              latestHeader.getProposerIndex(),\n+              latestHeader.getParentRoot(),\n+              stateRoot,\n+              latestHeader.getBodyRoot());\n+    }\n+\n+    return latestHeader;\n+  }\n+\n+  public static BeaconBlockHeader fromBlock(final BeaconBlock block) {\n+    return new BeaconBlockHeader(\n+        block.getSlot(),\n+        block.getProposerIndex(),\n+        block.getParentRoot(),\n+        block.getStateRoot(),\n+        block.getBody().hash_tree_root());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e9b993c8bd476854f6470d72597b3989f113b84"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDYzMzE0OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/state/AnchorPoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMzoxOToxMFrOHttLVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjoyMjoxNVrOHuLRKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY4ODE1MQ==", "bodyText": "This is potentially a bit heavy handed as it removes all compile time checking.  Can we get away with:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .map(BeaconBlockSummary.class::cast)\n          \n          \n            \n                        .<BeaconBlockSummary>map(a -> a)\n          \n      \n    \n    \n  \n\nIt doesn't read quite as well, but will give compile errors if block ever winds up not actually being a BeaconBlockSummary.", "url": "https://github.com/ConsenSys/teku/pull/3133#discussion_r517688151", "createdAt": "2020-11-04T23:19:10Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/state/AnchorPoint.java", "diffHunk": "@@ -30,33 +34,36 @@\n  * Represents an \"anchor\" - a trusted, finalized (block, state, checkpoint) tuple from which we can\n  * sync.\n  */\n-public class AnchorPoint {\n+public class AnchorPoint extends StateAndBlockSummary {\n   private final Checkpoint checkpoint;\n-  private final SignedBeaconBlock block;\n-  private final BeaconState state;\n   private final boolean isGenesis;\n-  private final SignedBlockAndState blockAndState;\n \n   private AnchorPoint(\n-      final Checkpoint checkpoint, final SignedBeaconBlock block, final BeaconState state) {\n+      final Checkpoint checkpoint, final BeaconState state, final BeaconBlockSummary blockSummary) {\n+    super(blockSummary, state);\n     checkArgument(\n-        block.getStateRoot().equals(state.hash_tree_root()), \"Block and state must match\");\n-    checkArgument(checkpoint.getRoot().equals(block.getRoot()), \"Checkpoint and block must match\");\n+        checkpoint.getRoot().equals(blockSummary.getRoot()), \"Checkpoint and block must match\");\n \n     this.checkpoint = checkpoint;\n-    this.block = block;\n-    this.state = state;\n     this.isGenesis = checkpoint.getEpoch().equals(UInt64.valueOf(Constants.GENESIS_EPOCH));\n-    this.blockAndState = new SignedBlockAndState(block, state);\n+  }\n+\n+  public static AnchorPoint create(\n+      Checkpoint checkpoint, BeaconState state, Optional<SignedBeaconBlock> block) {\n+    final BeaconBlockSummary blockSummary =\n+        block\n+            .map(BeaconBlockSummary.class::cast)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79567956621c69f1600c5435a111ad58e1047e9a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE4MTE2Mw==", "bodyText": "good call \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/3133#discussion_r518181163", "createdAt": "2020-11-05T16:22:15Z", "author": {"login": "mbaxter"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/state/AnchorPoint.java", "diffHunk": "@@ -30,33 +34,36 @@\n  * Represents an \"anchor\" - a trusted, finalized (block, state, checkpoint) tuple from which we can\n  * sync.\n  */\n-public class AnchorPoint {\n+public class AnchorPoint extends StateAndBlockSummary {\n   private final Checkpoint checkpoint;\n-  private final SignedBeaconBlock block;\n-  private final BeaconState state;\n   private final boolean isGenesis;\n-  private final SignedBlockAndState blockAndState;\n \n   private AnchorPoint(\n-      final Checkpoint checkpoint, final SignedBeaconBlock block, final BeaconState state) {\n+      final Checkpoint checkpoint, final BeaconState state, final BeaconBlockSummary blockSummary) {\n+    super(blockSummary, state);\n     checkArgument(\n-        block.getStateRoot().equals(state.hash_tree_root()), \"Block and state must match\");\n-    checkArgument(checkpoint.getRoot().equals(block.getRoot()), \"Checkpoint and block must match\");\n+        checkpoint.getRoot().equals(blockSummary.getRoot()), \"Checkpoint and block must match\");\n \n     this.checkpoint = checkpoint;\n-    this.block = block;\n-    this.state = state;\n     this.isGenesis = checkpoint.getEpoch().equals(UInt64.valueOf(Constants.GENESIS_EPOCH));\n-    this.blockAndState = new SignedBlockAndState(block, state);\n+  }\n+\n+  public static AnchorPoint create(\n+      Checkpoint checkpoint, BeaconState state, Optional<SignedBeaconBlock> block) {\n+    final BeaconBlockSummary blockSummary =\n+        block\n+            .map(BeaconBlockSummary.class::cast)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY4ODE1MQ=="}, "originalCommit": {"oid": "79567956621c69f1600c5435a111ad58e1047e9a"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3128, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}