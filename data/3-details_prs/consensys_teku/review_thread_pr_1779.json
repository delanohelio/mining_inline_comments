{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MzA0MDIw", "number": 1779, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxNzoyM1rOD8HS9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoxNDozN1rOD8QVJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzYwNjk1OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2Peer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxNzoyM1rOGU2r9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozODozOVrOGU8eHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMDY5Mw==", "bodyText": "I'd probably move this logic into Eth2PeerManager - the other peer validation / management logic is in the manager.", "url": "https://github.com/ConsenSys/teku/pull/1779#discussion_r424520693", "createdAt": "2020-05-13T15:17:23Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2Peer.java", "diffHunk": "@@ -171,9 +180,16 @@ void markChainValidated() {\n   }\n \n   public SafeFuture<UnsignedLong> sendPing() {\n-    return requestSingleItem(rpcMethods.ping(), metadataMessagesFactory.createPingMessage())\n-        .thenApply(PingMessage::getSeqNumber)\n-        .thenPeek(this::updateMetadataSeqNumber);\n+    if (outstandingPings.getAndIncrement() >= outstandingPingsThreshold) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f75d4a590020a2cb037c5d4251d139354cf7c6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNTQ1Mg==", "bodyText": "Yep, that makes sense \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/1779#discussion_r424615452", "createdAt": "2020-05-13T17:38:39Z", "author": {"login": "Nashatyrev"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2Peer.java", "diffHunk": "@@ -171,9 +180,16 @@ void markChainValidated() {\n   }\n \n   public SafeFuture<UnsignedLong> sendPing() {\n-    return requestSingleItem(rpcMethods.ping(), metadataMessagesFactory.createPingMessage())\n-        .thenApply(PingMessage::getSeqNumber)\n-        .thenPeek(this::updateMetadataSeqNumber);\n+    if (outstandingPings.getAndIncrement() >= outstandingPingsThreshold) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMDY5Mw=="}, "originalCommit": {"oid": "10f75d4a590020a2cb037c5d4251d139354cf7c6"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzYxMTA4OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2Peer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxODoxNVrOGU2ueg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxODoxNVrOGU2ueg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMTMzOA==", "bodyText": "Even though the peer is probably gone, I don't think it would hurt to send a goodBye message just in case.", "url": "https://github.com/ConsenSys/teku/pull/1779#discussion_r424521338", "createdAt": "2020-05-13T15:18:15Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2Peer.java", "diffHunk": "@@ -171,9 +180,16 @@ void markChainValidated() {\n   }\n \n   public SafeFuture<UnsignedLong> sendPing() {\n-    return requestSingleItem(rpcMethods.ping(), metadataMessagesFactory.createPingMessage())\n-        .thenApply(PingMessage::getSeqNumber)\n-        .thenPeek(this::updateMetadataSeqNumber);\n+    if (outstandingPings.getAndIncrement() >= outstandingPingsThreshold) {\n+      LOG.debug(\"Disconnecting the peer {} due to PING timeout.\", getId());\n+      disconnectImmediately();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f75d4a590020a2cb037c5d4251d139354cf7c6"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzYyMzAzOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/integration-test/java/tech/pegasys/teku/networking/eth2/PingIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyMDo1OVrOGU22UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoxMTo1MVrOGU7e2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMzM0NA==", "bodyText": "I think this is too fast - looks like we're sometimes disconnecting the peer before the network notices we're connected.", "url": "https://github.com/ConsenSys/teku/pull/1779#discussion_r424523344", "createdAt": "2020-05-13T15:20:59Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/integration-test/java/tech/pegasys/teku/networking/eth2/PingIntegrationTest.java", "diffHunk": "@@ -114,4 +116,64 @@ public void testPingPeriodically() throws Exception {\n     // detecting that ping was automatically sent via updated att subnets of the remote peer\n     waitFor(() -> assertThat(peer1.getRemoteAttestationSubnets()).contains(expectedBitvector1));\n   }\n+\n+  @Test\n+  public void testManualPingTimeout() throws Exception {\n+    // sending PING manually to check eth2RpcOutstandingPingThreshold works correctly\n+    Duration pingPeriod = Duration.ofDays(1);\n+    network1 =\n+        networkFactory\n+            .builder()\n+            .eth2RpcPingInterval(pingPeriod)\n+            .eth2RpcOutstandingPingThreshold(2)\n+            // remove PING method\n+            .rpcMethodsModifier(m -> Stream.of(m).filter(t -> !t.getId().contains(\"/ping\")))\n+            .startNetwork();\n+    network2 =\n+        networkFactory\n+            .builder()\n+            .eth2RpcPingInterval(pingPeriod)\n+            .eth2RpcOutstandingPingThreshold(2)\n+            .peer(network1)\n+            .startNetwork();\n+\n+    peer1 = network2.getPeer(network1.getNodeId()).orElseThrow();\n+    peer2 = network1.getPeer(network2.getNodeId()).orElseThrow();\n+\n+    assertThatThrownBy(() -> peer1.sendPing().get(5, TimeUnit.SECONDS)).isNotNull();\n+    assertThat(peer1.isConnected()).isTrue();\n+    assertThatThrownBy(() -> peer1.sendPing().get(5, TimeUnit.SECONDS)).isNotNull();\n+    assertThat(peer1.isConnected()).isTrue();\n+    // the 3rd ping attempt should disconnect the peer since there are 2 unanswered PING requests\n+    assertThatThrownBy(() -> peer1.sendPing().get(5, TimeUnit.SECONDS)).isNotNull();\n+    waitFor(() -> assertThat(peer1.isConnected()).isFalse());\n+  }\n+\n+  @Test\n+  public void testAutomaticPingTimeout() throws Exception {\n+    // PING is send automatically each 100ms.\n+    // The peer should be finally disconnected as it doesn't answer\n+    Duration pingPeriod = Duration.ofMillis(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f75d4a590020a2cb037c5d4251d139354cf7c6"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5MjkzMw==", "bodyText": "Yeah, tried to fix this in a 'right' way with overriding BeaconChainMethods in Eth2PeerManager but came up with a pretty long chain of changes which are subject for a separate PR.\nI can change this to 1000ms but it still can fail potentially.\nOr I can remove this test at all since it nearly duplicates the previous test", "url": "https://github.com/ConsenSys/teku/pull/1779#discussion_r424592933", "createdAt": "2020-05-13T17:01:09Z", "author": {"login": "Nashatyrev"}, "path": "networking/eth2/src/integration-test/java/tech/pegasys/teku/networking/eth2/PingIntegrationTest.java", "diffHunk": "@@ -114,4 +116,64 @@ public void testPingPeriodically() throws Exception {\n     // detecting that ping was automatically sent via updated att subnets of the remote peer\n     waitFor(() -> assertThat(peer1.getRemoteAttestationSubnets()).contains(expectedBitvector1));\n   }\n+\n+  @Test\n+  public void testManualPingTimeout() throws Exception {\n+    // sending PING manually to check eth2RpcOutstandingPingThreshold works correctly\n+    Duration pingPeriod = Duration.ofDays(1);\n+    network1 =\n+        networkFactory\n+            .builder()\n+            .eth2RpcPingInterval(pingPeriod)\n+            .eth2RpcOutstandingPingThreshold(2)\n+            // remove PING method\n+            .rpcMethodsModifier(m -> Stream.of(m).filter(t -> !t.getId().contains(\"/ping\")))\n+            .startNetwork();\n+    network2 =\n+        networkFactory\n+            .builder()\n+            .eth2RpcPingInterval(pingPeriod)\n+            .eth2RpcOutstandingPingThreshold(2)\n+            .peer(network1)\n+            .startNetwork();\n+\n+    peer1 = network2.getPeer(network1.getNodeId()).orElseThrow();\n+    peer2 = network1.getPeer(network2.getNodeId()).orElseThrow();\n+\n+    assertThatThrownBy(() -> peer1.sendPing().get(5, TimeUnit.SECONDS)).isNotNull();\n+    assertThat(peer1.isConnected()).isTrue();\n+    assertThatThrownBy(() -> peer1.sendPing().get(5, TimeUnit.SECONDS)).isNotNull();\n+    assertThat(peer1.isConnected()).isTrue();\n+    // the 3rd ping attempt should disconnect the peer since there are 2 unanswered PING requests\n+    assertThatThrownBy(() -> peer1.sendPing().get(5, TimeUnit.SECONDS)).isNotNull();\n+    waitFor(() -> assertThat(peer1.isConnected()).isFalse());\n+  }\n+\n+  @Test\n+  public void testAutomaticPingTimeout() throws Exception {\n+    // PING is send automatically each 100ms.\n+    // The peer should be finally disconnected as it doesn't answer\n+    Duration pingPeriod = Duration.ofMillis(100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMzM0NA=="}, "originalCommit": {"oid": "10f75d4a590020a2cb037c5d4251d139354cf7c6"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU5OTI1Nw==", "bodyText": "yeah - I think the manual one is pretty good.  maybe we should just cut this one ...", "url": "https://github.com/ConsenSys/teku/pull/1779#discussion_r424599257", "createdAt": "2020-05-13T17:11:51Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/integration-test/java/tech/pegasys/teku/networking/eth2/PingIntegrationTest.java", "diffHunk": "@@ -114,4 +116,64 @@ public void testPingPeriodically() throws Exception {\n     // detecting that ping was automatically sent via updated att subnets of the remote peer\n     waitFor(() -> assertThat(peer1.getRemoteAttestationSubnets()).contains(expectedBitvector1));\n   }\n+\n+  @Test\n+  public void testManualPingTimeout() throws Exception {\n+    // sending PING manually to check eth2RpcOutstandingPingThreshold works correctly\n+    Duration pingPeriod = Duration.ofDays(1);\n+    network1 =\n+        networkFactory\n+            .builder()\n+            .eth2RpcPingInterval(pingPeriod)\n+            .eth2RpcOutstandingPingThreshold(2)\n+            // remove PING method\n+            .rpcMethodsModifier(m -> Stream.of(m).filter(t -> !t.getId().contains(\"/ping\")))\n+            .startNetwork();\n+    network2 =\n+        networkFactory\n+            .builder()\n+            .eth2RpcPingInterval(pingPeriod)\n+            .eth2RpcOutstandingPingThreshold(2)\n+            .peer(network1)\n+            .startNetwork();\n+\n+    peer1 = network2.getPeer(network1.getNodeId()).orElseThrow();\n+    peer2 = network1.getPeer(network2.getNodeId()).orElseThrow();\n+\n+    assertThatThrownBy(() -> peer1.sendPing().get(5, TimeUnit.SECONDS)).isNotNull();\n+    assertThat(peer1.isConnected()).isTrue();\n+    assertThatThrownBy(() -> peer1.sendPing().get(5, TimeUnit.SECONDS)).isNotNull();\n+    assertThat(peer1.isConnected()).isTrue();\n+    // the 3rd ping attempt should disconnect the peer since there are 2 unanswered PING requests\n+    assertThatThrownBy(() -> peer1.sendPing().get(5, TimeUnit.SECONDS)).isNotNull();\n+    waitFor(() -> assertThat(peer1.isConnected()).isFalse());\n+  }\n+\n+  @Test\n+  public void testAutomaticPingTimeout() throws Exception {\n+    // PING is send automatically each 100ms.\n+    // The peer should be finally disconnected as it doesn't answer\n+    Duration pingPeriod = Duration.ofMillis(100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMzM0NA=="}, "originalCommit": {"oid": "10f75d4a590020a2cb037c5d4251d139354cf7c6"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTAxOTEzOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTo0ODozOFrOGVEu5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTo0ODozOFrOGVEu5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1MDgyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void sendPeriodicPing(Eth2Peer peer) {\n          \n          \n            \n              @VisibleForTesting\n          \n          \n            \n              void sendPeriodicPing(Eth2Peer peer) {", "url": "https://github.com/ConsenSys/teku/pull/1779#discussion_r424750821", "createdAt": "2020-05-13T21:48:38Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "diffHunk": "@@ -148,13 +153,25 @@ public void onConnect(final Peer peer) {\n     @SuppressWarnings(\"FutureReturnValueIgnored\")\n     SafeFuture<Void> pingTask =\n         asyncRunner.runWithFixedDelay(\n-            eth2Peer::sendPing,\n+            () -> sendPeriodicPing(eth2Peer),\n             eth2RpcPingInterval.toMillis(),\n             TimeUnit.MILLISECONDS,\n             t -> LOG.debug(\"Exception executing ping\", t));\n     peer.subscribeDisconnect(() -> pingTask.cancel(false));\n   }\n \n+  void sendPeriodicPing(Eth2Peer peer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf4357aa778ecc14fa24f6cd216e4304e47ff91"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTA0MTMwOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTo1Njo1OFrOGVE8ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTowNjo0NlrOGVTAnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1NDMzNA==", "bodyText": "Not sure we need the logging on successfully sending the ping - seems noisey.", "url": "https://github.com/ConsenSys/teku/pull/1779#discussion_r424754334", "createdAt": "2020-05-13T21:56:58Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "diffHunk": "@@ -148,13 +153,25 @@ public void onConnect(final Peer peer) {\n     @SuppressWarnings(\"FutureReturnValueIgnored\")\n     SafeFuture<Void> pingTask =\n         asyncRunner.runWithFixedDelay(\n-            eth2Peer::sendPing,\n+            () -> sendPeriodicPing(eth2Peer),\n             eth2RpcPingInterval.toMillis(),\n             TimeUnit.MILLISECONDS,\n             t -> LOG.debug(\"Exception executing ping\", t));\n     peer.subscribeDisconnect(() -> pingTask.cancel(false));\n   }\n \n+  void sendPeriodicPing(Eth2Peer peer) {\n+    if (peer.getOutstandingPings() >= eth2RpcOutstandingPingThreshold) {\n+      LOG.debug(\"Disconnecting the peer {} due to PING timeout.\", peer.getId());\n+      peer.disconnectCleanly(DisconnectReason.REMOTE_FAULT);\n+    } else {\n+      peer.sendPing()\n+          .finish(\n+              i -> LOG.trace(\"Periodic ping returned {} from {}\", i, peer.getId()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf4357aa778ecc14fa24f6cd216e4304e47ff91"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk4NDczMw==", "bodyText": "IMHO doesn't look too noisy for trace level: one log in 10 sec per one peer. That also carries some helpful info: the ping executed successfully and it's return value is logged.\nThat may even deserve debug level \ud83d\ude04", "url": "https://github.com/ConsenSys/teku/pull/1779#discussion_r424984733", "createdAt": "2020-05-14T09:06:46Z", "author": {"login": "Nashatyrev"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "diffHunk": "@@ -148,13 +153,25 @@ public void onConnect(final Peer peer) {\n     @SuppressWarnings(\"FutureReturnValueIgnored\")\n     SafeFuture<Void> pingTask =\n         asyncRunner.runWithFixedDelay(\n-            eth2Peer::sendPing,\n+            () -> sendPeriodicPing(eth2Peer),\n             eth2RpcPingInterval.toMillis(),\n             TimeUnit.MILLISECONDS,\n             t -> LOG.debug(\"Exception executing ping\", t));\n     peer.subscribeDisconnect(() -> pingTask.cancel(false));\n   }\n \n+  void sendPeriodicPing(Eth2Peer peer) {\n+    if (peer.getOutstandingPings() >= eth2RpcOutstandingPingThreshold) {\n+      LOG.debug(\"Disconnecting the peer {} due to PING timeout.\", peer.getId());\n+      peer.disconnectCleanly(DisconnectReason.REMOTE_FAULT);\n+    } else {\n+      peer.sendPing()\n+          .finish(\n+              i -> LOG.trace(\"Periodic ping returned {} from {}\", i, peer.getId()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1NDMzNA=="}, "originalCommit": {"oid": "caf4357aa778ecc14fa24f6cd216e4304e47ff91"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTA2NzIyOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/ActiveEth2Network.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjowNzowMVrOGVFNBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNTo0NTo1M1rOGVilbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1ODUzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              Eth2PeerManager getPeerManager() {\n          \n          \n            \n              @VisibleForTesting\n          \n          \n            \n              Eth2PeerManager getPeerManager() {", "url": "https://github.com/ConsenSys/teku/pull/1779#discussion_r424758533", "createdAt": "2020-05-13T22:07:01Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/ActiveEth2Network.java", "diffHunk": "@@ -169,4 +169,8 @@ public void unsubscribeFromAttestationSubnetId(final int subnetId) {\n   public void setLongTermAttestationSubnetSubscriptions(final Iterable<Integer> subnetIndices) {\n     attestationSubnetService.updateSubscriptions(subnetIndices);\n   }\n+\n+  Eth2PeerManager getPeerManager() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf4357aa778ecc14fa24f6cd216e4304e47ff91"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MTM5OA==", "bodyText": "(optional) Another option for structuring this would be to have the Eth2NetworkFactory return a special subclass of Eth2Network that exposes extra test utilities (MockEth2Network.sendPeriodicPing())", "url": "https://github.com/ConsenSys/teku/pull/1779#discussion_r424761398", "createdAt": "2020-05-13T22:13:51Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/ActiveEth2Network.java", "diffHunk": "@@ -169,4 +169,8 @@ public void unsubscribeFromAttestationSubnetId(final int subnetId) {\n   public void setLongTermAttestationSubnetSubscriptions(final Iterable<Integer> subnetIndices) {\n     attestationSubnetService.updateSubscriptions(subnetIndices);\n   }\n+\n+  Eth2PeerManager getPeerManager() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1ODUzMw=="}, "originalCommit": {"oid": "caf4357aa778ecc14fa24f6cd216e4304e47ff91"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDk5MTgwMg==", "bodyText": "Yep, good idea \ud83d\udc4d\nDo you mean that MockEth2Network interface should be a part of testFixtures module?\nThough in this case we would need another Eth2Network wrapper which is extra boilerplate\nAnother option is add this interface to the main src module and implement it by Eth2Network implementations but not expose via 'public API'. Like this interface in libp2p", "url": "https://github.com/ConsenSys/teku/pull/1779#discussion_r424991802", "createdAt": "2020-05-14T09:17:58Z", "author": {"login": "Nashatyrev"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/ActiveEth2Network.java", "diffHunk": "@@ -169,4 +169,8 @@ public void unsubscribeFromAttestationSubnetId(final int subnetId) {\n   public void setLongTermAttestationSubnetSubscriptions(final Iterable<Integer> subnetIndices) {\n     attestationSubnetService.updateSubscriptions(subnetIndices);\n   }\n+\n+  Eth2PeerManager getPeerManager() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1ODUzMw=="}, "originalCommit": {"oid": "caf4357aa778ecc14fa24f6cd216e4304e47ff91"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIzOTkxOQ==", "bodyText": "Do you mean that MockEth2Network interface should be a part of testFixtures module?\n\nRight.\n\nThough in this case we would need another Eth2Network wrapper which is extra boilerplate\n\nYeah, there's usually a bit of boilerplate involved in test utilities.  Even though it can get a bit verbose, I tend to take this approach because it helps us avoid adding testing-specific logic to production classes.", "url": "https://github.com/ConsenSys/teku/pull/1779#discussion_r425239919", "createdAt": "2020-05-14T15:45:53Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/ActiveEth2Network.java", "diffHunk": "@@ -169,4 +169,8 @@ public void unsubscribeFromAttestationSubnetId(final int subnetId) {\n   public void setLongTermAttestationSubnetSubscriptions(final Iterable<Integer> subnetIndices) {\n     attestationSubnetService.updateSubscriptions(subnetIndices);\n   }\n+\n+  Eth2PeerManager getPeerManager() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1ODUzMw=="}, "originalCommit": {"oid": "caf4357aa778ecc14fa24f6cd216e4304e47ff91"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTA4NzExOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2NetworkBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoxNDozN1rOGVFZWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoxNDozN1rOGVFZWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MTY4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public Eth2NetworkBuilder eth2RpcOutstandingPingThreshold(int eth2RpcOutstandingPingThreshold) {\n          \n          \n            \n              public Eth2NetworkBuilder eth2RpcOutstandingPingThreshold(final int eth2RpcOutstandingPingThreshold) {", "url": "https://github.com/ConsenSys/teku/pull/1779#discussion_r424761689", "createdAt": "2020-05-13T22:14:37Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2NetworkBuilder.java", "diffHunk": "@@ -178,4 +182,10 @@ public Eth2NetworkBuilder eth2RpcPingInterval(Duration eth2RpcPingInterval) {\n     this.eth2RpcPingInterval = eth2RpcPingInterval;\n     return this;\n   }\n+\n+  public Eth2NetworkBuilder eth2RpcOutstandingPingThreshold(int eth2RpcOutstandingPingThreshold) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caf4357aa778ecc14fa24f6cd216e4304e47ff91"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3800, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}