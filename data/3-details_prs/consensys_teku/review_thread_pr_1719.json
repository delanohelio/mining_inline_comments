{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMzE3NjQ5", "number": 1719, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTowMDowNFrOD5cYHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTowMDowNFrOD5cYHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTYwMzUxOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/PeerRequiredLocalMessageHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTowMDowNFrOGQtnjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMToxOToyOFrOGQ7-GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3NzgwNg==", "bodyText": "This isn't really a server error - what about completing with a PeerDisconnectedException?  And then we could update completeWithError to only attempt writing the message to our peer if it gets an RcpException.", "url": "https://github.com/ConsenSys/teku/pull/1719#discussion_r420177806", "createdAt": "2020-05-05T15:00:04Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/PeerRequiredLocalMessageHandler.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.core;\n+\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.networking.eth2.peers.Eth2Peer;\n+\n+public abstract class PeerRequiredLocalMessageHandler<I, O> implements LocalMessageHandler<I, O> {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  @Override\n+  public void onIncomingMessage(\n+      final Optional<Eth2Peer> maybePeer, final I message, final ResponseCallback<O> callback) {\n+    maybePeer.ifPresentOrElse(\n+        peer -> onIncomingMessage(peer, message, callback),\n+        () -> {\n+          LOG.trace(\n+              \"Ignoring message of type {} because peer has disconnected\", message.getClass());\n+          callback.completeWithError(\n+              new RpcException(RpcResponseStatus.SERVER_ERROR_CODE, \"Peer disconnected\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56032389699463847b05c12fa4e46c2a60885ae7"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxMjk1Mg==", "bodyText": "I like the separation of RPC error responses from unexpected errors.  We do need to send unexpected responses back as a SERVER_ERROR response but can skip doing so for PeerDisconnectedException and it would generally be nicer to push that handling into RpcResponseCallback instead of randomly reporting server errors from the handling code.\nSo I've now got two methods in ResponseCallback completeWithErrorResponse(RpcException) and completeWithUnexpectedError(Throwable).", "url": "https://github.com/ConsenSys/teku/pull/1719#discussion_r420412952", "createdAt": "2020-05-05T21:19:28Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/PeerRequiredLocalMessageHandler.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.core;\n+\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.networking.eth2.peers.Eth2Peer;\n+\n+public abstract class PeerRequiredLocalMessageHandler<I, O> implements LocalMessageHandler<I, O> {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  @Override\n+  public void onIncomingMessage(\n+      final Optional<Eth2Peer> maybePeer, final I message, final ResponseCallback<O> callback) {\n+    maybePeer.ifPresentOrElse(\n+        peer -> onIncomingMessage(peer, message, callback),\n+        () -> {\n+          LOG.trace(\n+              \"Ignoring message of type {} because peer has disconnected\", message.getClass());\n+          callback.completeWithError(\n+              new RpcException(RpcResponseStatus.SERVER_ERROR_CODE, \"Peer disconnected\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3NzgwNg=="}, "originalCommit": {"oid": "56032389699463847b05c12fa4e46c2a60885ae7"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3761, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}