{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MDE1NTIy", "number": 1773, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDowNjo1MVrOD73ccQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyODoyOFrOD8Hm-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTAwOTc3OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDowNjo1MVrOGUdH4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDo1Nzo0MlrOGU1w0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMTg1Nw==", "bodyText": "Suggest combining these into one call to subscribeDisconnect:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                peer.subscribeDisconnect(() -> periodicStatusUpdateTask.cancel(false));\n          \n          \n            \n                peer.subscribeDisconnect(() -> periodicPingTask.cancel(false));\n          \n          \n            \n                peer.subscribeDisconnect(() -> {\n          \n          \n            \n                    periodicStatusUpdateTask.cancel(false);\n          \n          \n            \n                    periodicPingTask.cancel(false);\n          \n          \n            \n                 });", "url": "https://github.com/ConsenSys/teku/pull/1773#discussion_r424101857", "createdAt": "2020-05-13T00:06:51Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "diffHunk": "@@ -105,7 +111,49 @@ public static Eth2PeerManager create(\n         peerValidatorFactory,\n         attestationSubnetService,\n         rpcEncoding,\n-        eth2RpcPingInterval);\n+        eth2RpcPingInterval,\n+        eth2StatusUpdateInterval);\n+  }\n+\n+  private void setUpPeriodicTasksForPeer(Eth2Peer peer) {\n+    SafeFuture<Void> periodicStatusUpdateTask = periodicallyUpdatePeerStatus(peer);\n+    SafeFuture<Void> periodicPingTask = periodicallyPingPeer(peer);\n+    peer.subscribeDisconnect(() -> periodicStatusUpdateTask.cancel(false));\n+    peer.subscribeDisconnect(() -> periodicPingTask.cancel(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "449ea320b1574ead31e8c09183e2cb9b14497834"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwNTU1Mw==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1773#discussion_r424505553", "createdAt": "2020-05-13T14:57:42Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "diffHunk": "@@ -105,7 +111,49 @@ public static Eth2PeerManager create(\n         peerValidatorFactory,\n         attestationSubnetService,\n         rpcEncoding,\n-        eth2RpcPingInterval);\n+        eth2RpcPingInterval,\n+        eth2StatusUpdateInterval);\n+  }\n+\n+  private void setUpPeriodicTasksForPeer(Eth2Peer peer) {\n+    SafeFuture<Void> periodicStatusUpdateTask = periodicallyUpdatePeerStatus(peer);\n+    SafeFuture<Void> periodicPingTask = periodicallyPingPeer(peer);\n+    peer.subscribeDisconnect(() -> periodicStatusUpdateTask.cancel(false));\n+    peer.subscribeDisconnect(() -> periodicPingTask.cancel(false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMTg1Nw=="}, "originalCommit": {"oid": "449ea320b1574ead31e8c09183e2cb9b14497834"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTAxNzY5OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDoxMTozNVrOGUdMgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzo1MTo1NVrOGU888w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzA0Mw==", "bodyText": "I misunderstood this when I read the ping PR, but we shouldn't be ignoring futures here.  If the peer:sendStatus call fails (ie we don't get a response from them or it's invalid) - what should we do?  Feels like we should disconnect if we get too many of those but definitely should at least report it at debug level.", "url": "https://github.com/ConsenSys/teku/pull/1773#discussion_r424103043", "createdAt": "2020-05-13T00:11:35Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "diffHunk": "@@ -105,7 +111,49 @@ public static Eth2PeerManager create(\n         peerValidatorFactory,\n         attestationSubnetService,\n         rpcEncoding,\n-        eth2RpcPingInterval);\n+        eth2RpcPingInterval,\n+        eth2StatusUpdateInterval);\n+  }\n+\n+  private void setUpPeriodicTasksForPeer(Eth2Peer peer) {\n+    SafeFuture<Void> periodicStatusUpdateTask = periodicallyUpdatePeerStatus(peer);\n+    SafeFuture<Void> periodicPingTask = periodicallyPingPeer(peer);\n+    peer.subscribeDisconnect(() -> periodicStatusUpdateTask.cancel(false));\n+    peer.subscribeDisconnect(() -> periodicPingTask.cancel(false));\n+  }\n+\n+  @SuppressWarnings(\"FutureReturnValueIgnored\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "449ea320b1574ead31e8c09183e2cb9b14497834"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwODI4NQ==", "bodyText": "@Nashatyrev has a PR up that counts the number of outstanding requests and disconnects at a certain point (specifically for PING messages). I think the future value still gets ignored in Anton's PR, but we count the number of outstanding requests instead. I think the same approach can be applied to periodically updating peer status.", "url": "https://github.com/ConsenSys/teku/pull/1773#discussion_r424508285", "createdAt": "2020-05-13T15:01:09Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "diffHunk": "@@ -105,7 +111,49 @@ public static Eth2PeerManager create(\n         peerValidatorFactory,\n         attestationSubnetService,\n         rpcEncoding,\n-        eth2RpcPingInterval);\n+        eth2RpcPingInterval,\n+        eth2StatusUpdateInterval);\n+  }\n+\n+  private void setUpPeriodicTasksForPeer(Eth2Peer peer) {\n+    SafeFuture<Void> periodicStatusUpdateTask = periodicallyUpdatePeerStatus(peer);\n+    SafeFuture<Void> periodicPingTask = periodicallyPingPeer(peer);\n+    peer.subscribeDisconnect(() -> periodicStatusUpdateTask.cancel(false));\n+    peer.subscribeDisconnect(() -> periodicPingTask.cancel(false));\n+  }\n+\n+  @SuppressWarnings(\"FutureReturnValueIgnored\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzA0Mw=="}, "originalCommit": {"oid": "449ea320b1574ead31e8c09183e2cb9b14497834"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwOTQ4OA==", "bodyText": "So, I'm probably going to merge this in and make another ticket for dealing with outstanding Status requests. (not to step Anton's toes even further)", "url": "https://github.com/ConsenSys/teku/pull/1773#discussion_r424509488", "createdAt": "2020-05-13T15:02:46Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "diffHunk": "@@ -105,7 +111,49 @@ public static Eth2PeerManager create(\n         peerValidatorFactory,\n         attestationSubnetService,\n         rpcEncoding,\n-        eth2RpcPingInterval);\n+        eth2RpcPingInterval,\n+        eth2StatusUpdateInterval);\n+  }\n+\n+  private void setUpPeriodicTasksForPeer(Eth2Peer peer) {\n+    SafeFuture<Void> periodicStatusUpdateTask = periodicallyUpdatePeerStatus(peer);\n+    SafeFuture<Void> periodicPingTask = periodicallyPingPeer(peer);\n+    peer.subscribeDisconnect(() -> periodicStatusUpdateTask.cancel(false));\n+    peer.subscribeDisconnect(() -> periodicPingTask.cancel(false));\n+  }\n+\n+  @SuppressWarnings(\"FutureReturnValueIgnored\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzA0Mw=="}, "originalCommit": {"oid": "449ea320b1574ead31e8c09183e2cb9b14497834"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxMjYyNA==", "bodyText": "Also @Nashatyrev, this made me think, and am now curious, if instead of specifically counting outstanding PING requests (in this PR #1779), if we should count all outstanding requests by type in the Eth2Peer.sendRequest method. It's probably important for us to know if the peer is not responding to requests of any type.", "url": "https://github.com/ConsenSys/teku/pull/1773#discussion_r424512624", "createdAt": "2020-05-13T15:06:50Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "diffHunk": "@@ -105,7 +111,49 @@ public static Eth2PeerManager create(\n         peerValidatorFactory,\n         attestationSubnetService,\n         rpcEncoding,\n-        eth2RpcPingInterval);\n+        eth2RpcPingInterval,\n+        eth2StatusUpdateInterval);\n+  }\n+\n+  private void setUpPeriodicTasksForPeer(Eth2Peer peer) {\n+    SafeFuture<Void> periodicStatusUpdateTask = periodicallyUpdatePeerStatus(peer);\n+    SafeFuture<Void> periodicPingTask = periodicallyPingPeer(peer);\n+    peer.subscribeDisconnect(() -> periodicStatusUpdateTask.cancel(false));\n+    peer.subscribeDisconnect(() -> periodicPingTask.cancel(false));\n+  }\n+\n+  @SuppressWarnings(\"FutureReturnValueIgnored\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzA0Mw=="}, "originalCommit": {"oid": "449ea320b1574ead31e8c09183e2cb9b14497834"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMDc2MQ==", "bodyText": "I've also added .finish() handler to deal with success and failure by logging some information.", "url": "https://github.com/ConsenSys/teku/pull/1773#discussion_r424520761", "createdAt": "2020-05-13T15:17:30Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "diffHunk": "@@ -105,7 +111,49 @@ public static Eth2PeerManager create(\n         peerValidatorFactory,\n         attestationSubnetService,\n         rpcEncoding,\n-        eth2RpcPingInterval);\n+        eth2RpcPingInterval,\n+        eth2StatusUpdateInterval);\n+  }\n+\n+  private void setUpPeriodicTasksForPeer(Eth2Peer peer) {\n+    SafeFuture<Void> periodicStatusUpdateTask = periodicallyUpdatePeerStatus(peer);\n+    SafeFuture<Void> periodicPingTask = periodicallyPingPeer(peer);\n+    peer.subscribeDisconnect(() -> periodicStatusUpdateTask.cancel(false));\n+    peer.subscribeDisconnect(() -> periodicPingTask.cancel(false));\n+  }\n+\n+  @SuppressWarnings(\"FutureReturnValueIgnored\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzA0Mw=="}, "originalCommit": {"oid": "449ea320b1574ead31e8c09183e2cb9b14497834"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0MjgzMw==", "bodyText": "Ping is sent with a predefined period so when missing some ping responses means that some significant time have passed without responses. While you may potentially do a lot of concurrent requests in say 10ms and all of them would be pending for responses", "url": "https://github.com/ConsenSys/teku/pull/1773#discussion_r424542833", "createdAt": "2020-05-13T15:46:47Z", "author": {"login": "Nashatyrev"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "diffHunk": "@@ -105,7 +111,49 @@ public static Eth2PeerManager create(\n         peerValidatorFactory,\n         attestationSubnetService,\n         rpcEncoding,\n-        eth2RpcPingInterval);\n+        eth2RpcPingInterval,\n+        eth2StatusUpdateInterval);\n+  }\n+\n+  private void setUpPeriodicTasksForPeer(Eth2Peer peer) {\n+    SafeFuture<Void> periodicStatusUpdateTask = periodicallyUpdatePeerStatus(peer);\n+    SafeFuture<Void> periodicPingTask = periodicallyPingPeer(peer);\n+    peer.subscribeDisconnect(() -> periodicStatusUpdateTask.cancel(false));\n+    peer.subscribeDisconnect(() -> periodicPingTask.cancel(false));\n+  }\n+\n+  @SuppressWarnings(\"FutureReturnValueIgnored\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzA0Mw=="}, "originalCommit": {"oid": "449ea320b1574ead31e8c09183e2cb9b14497834"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyMzM0Nw==", "bodyText": "I understand. So I think that check would need to be specific to each Eth2Peer.", "url": "https://github.com/ConsenSys/teku/pull/1773#discussion_r424623347", "createdAt": "2020-05-13T17:51:55Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "diffHunk": "@@ -105,7 +111,49 @@ public static Eth2PeerManager create(\n         peerValidatorFactory,\n         attestationSubnetService,\n         rpcEncoding,\n-        eth2RpcPingInterval);\n+        eth2RpcPingInterval,\n+        eth2StatusUpdateInterval);\n+  }\n+\n+  private void setUpPeriodicTasksForPeer(Eth2Peer peer) {\n+    SafeFuture<Void> periodicStatusUpdateTask = periodicallyUpdatePeerStatus(peer);\n+    SafeFuture<Void> periodicPingTask = periodicallyPingPeer(peer);\n+    peer.subscribeDisconnect(() -> periodicStatusUpdateTask.cancel(false));\n+    peer.subscribeDisconnect(() -> periodicPingTask.cancel(false));\n+  }\n+\n+  @SuppressWarnings(\"FutureReturnValueIgnored\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMzA0Mw=="}, "originalCommit": {"oid": "449ea320b1574ead31e8c09183e2cb9b14497834"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzY1ODE3OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyODoyOFrOGU3MyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzo1Mzo1N1rOGU9B3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyOTA5Ng==", "bodyText": "This variant of runWithFixedDelay returns Future which is actually never completes (until cancel() call). So the only method which makes sense here is Future.cancel(). Any exception happened in the periodic task is reported via exceptionHandler ((err) -> LOG.debug(\"Exception updating peer status.\", err)))\nThat's probably my fault and the runWithFixedDelay method should return something like Cancellable instead of SafeFuture<Void>", "url": "https://github.com/ConsenSys/teku/pull/1773#discussion_r424529096", "createdAt": "2020-05-13T15:28:28Z", "author": {"login": "Nashatyrev"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "diffHunk": "@@ -105,7 +111,49 @@ public static Eth2PeerManager create(\n         peerValidatorFactory,\n         attestationSubnetService,\n         rpcEncoding,\n-        eth2RpcPingInterval);\n+        eth2RpcPingInterval,\n+        eth2StatusUpdateInterval);\n+  }\n+\n+  private void setUpPeriodicTasksForPeer(Eth2Peer peer) {\n+    SafeFuture<Void> periodicStatusUpdateTask = periodicallyUpdatePeerStatus(peer);\n+    SafeFuture<Void> periodicPingTask = periodicallyPingPeer(peer);\n+    peer.subscribeDisconnect(() -> periodicStatusUpdateTask.cancel(false));\n+    peer.subscribeDisconnect(() -> periodicPingTask.cancel(false));\n+  }\n+\n+  @SuppressWarnings(\"FutureReturnValueIgnored\")\n+  SafeFuture<Void> periodicallyUpdatePeerStatus(Eth2Peer peer) {\n+    return asyncRunner\n+        .runWithFixedDelay(\n+            peer::sendStatus,\n+            eth2StatusUpdateInterval.getSeconds(),\n+            TimeUnit.SECONDS,\n+            (err) -> LOG.debug(\"Exception updating peer status.\", err))\n+        .exceptionallyCompose(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "449ea320b1574ead31e8c09183e2cb9b14497834"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyNDYwNA==", "bodyText": "We discussed this further offline, and Anton made a patch that switched runWithFixedDelay to return a Cancellable object instead of a SafeFuture. I've included the patch in this PR.", "url": "https://github.com/ConsenSys/teku/pull/1773#discussion_r424624604", "createdAt": "2020-05-13T17:53:57Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "diffHunk": "@@ -105,7 +111,49 @@ public static Eth2PeerManager create(\n         peerValidatorFactory,\n         attestationSubnetService,\n         rpcEncoding,\n-        eth2RpcPingInterval);\n+        eth2RpcPingInterval,\n+        eth2StatusUpdateInterval);\n+  }\n+\n+  private void setUpPeriodicTasksForPeer(Eth2Peer peer) {\n+    SafeFuture<Void> periodicStatusUpdateTask = periodicallyUpdatePeerStatus(peer);\n+    SafeFuture<Void> periodicPingTask = periodicallyPingPeer(peer);\n+    peer.subscribeDisconnect(() -> periodicStatusUpdateTask.cancel(false));\n+    peer.subscribeDisconnect(() -> periodicPingTask.cancel(false));\n+  }\n+\n+  @SuppressWarnings(\"FutureReturnValueIgnored\")\n+  SafeFuture<Void> periodicallyUpdatePeerStatus(Eth2Peer peer) {\n+    return asyncRunner\n+        .runWithFixedDelay(\n+            peer::sendStatus,\n+            eth2StatusUpdateInterval.getSeconds(),\n+            TimeUnit.SECONDS,\n+            (err) -> LOG.debug(\"Exception updating peer status.\", err))\n+        .exceptionallyCompose(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyOTA5Ng=="}, "originalCommit": {"oid": "449ea320b1574ead31e8c09183e2cb9b14497834"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3795, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}