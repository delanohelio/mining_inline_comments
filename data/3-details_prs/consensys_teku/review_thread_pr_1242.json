{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMTY4NDkz", "number": 1242, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjoyMzo1NVrODjrUeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMzowMzo1OVrODjrqNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzM2NTA2OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconValidatorsHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjoyMzo1NVrOFvnrsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjoyMzo1NVrOFvnrsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3NzU1NA==", "bodyText": "need to add SC_NOT_FOUND, SC_NO_CONTENT as responses.", "url": "https://github.com/ConsenSys/teku/pull/1242#discussion_r385477554", "createdAt": "2020-02-28T02:23:55Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconValidatorsHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_BEACON;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconValidatorsResponse;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.storage.CombinedChainDataClient;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class BeaconValidatorsHandler implements Handler {\n+\n+  private final CombinedChainDataClient combinedClient;\n+\n+  public BeaconValidatorsHandler(\n+      final CombinedChainDataClient combinedClient, final JsonProvider jsonProvider) {\n+    this.combinedClient = combinedClient;\n+    this.jsonProvider = jsonProvider;\n+  }\n+\n+  public static final String ROUTE = \"/beacon/validators\";\n+  private final JsonProvider jsonProvider;\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get validators from the running beacon node.\",\n+      tags = {TAG_BEACON},\n+      description = \"Requests that the beacon node gives information about validators\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = BeaconValidatorsResponse.class)),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae049e993c7edd353333cadbb6051b7671a2151e"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzM2ODI3OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconValidatorsHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjoyNjowNVrOFvntnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMjoyNjowNVrOFvntnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3ODA0Nw==", "bodyText": "should be able to put in a test case for this too.", "url": "https://github.com/ConsenSys/teku/pull/1242#discussion_r385478047", "createdAt": "2020-02-28T02:26:05Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconValidatorsHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_BEACON;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconValidatorsResponse;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.storage.CombinedChainDataClient;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class BeaconValidatorsHandler implements Handler {\n+\n+  private final CombinedChainDataClient combinedClient;\n+\n+  public BeaconValidatorsHandler(\n+      final CombinedChainDataClient combinedClient, final JsonProvider jsonProvider) {\n+    this.combinedClient = combinedClient;\n+    this.jsonProvider = jsonProvider;\n+  }\n+\n+  public static final String ROUTE = \"/beacon/validators\";\n+  private final JsonProvider jsonProvider;\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get validators from the running beacon node.\",\n+      tags = {TAG_BEACON},\n+      description = \"Requests that the beacon node gives information about validators\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = BeaconValidatorsResponse.class)),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR)\n+      })\n+  @Override\n+  public void handle(Context ctx) throws Exception {\n+    Optional<Bytes32> optionalRoot = combinedClient.getBestBlockRoot();\n+    if (optionalRoot.isPresent()) {\n+      SafeFuture<Optional<BeaconState>> future = queryByRootHash(optionalRoot.get());\n+      ctx.result(\n+          future.thenApplyChecked(\n+              state -> {\n+                if (state.isEmpty()) {\n+                  ctx.status(SC_NOT_FOUND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae049e993c7edd353333cadbb6051b7671a2151e"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzQyMDcwOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconValidatorsHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMzowMzo1OVrOFvoNRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMzowMzo1OVrOFvoNRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4NjE1MA==", "bodyText": "could actually just use List.of() at the interface level...", "url": "https://github.com/ConsenSys/teku/pull/1242#discussion_r385486150", "createdAt": "2020-02-28T03:03:59Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconValidatorsHandler.java", "diffHunk": "@@ -67,8 +71,9 @@ public void handle(Context ctx) throws Exception {\n           future.thenApplyChecked(\n               state -> {\n                 if (state.isEmpty()) {\n-                  ctx.status(SC_NOT_FOUND);\n-                  return null;\n+                  // empty list\n+                  return jsonProvider.objectToJSON(\n+                      new BeaconValidatorsResponse(new SSZList<>(Validator.class, 0L)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2efb20a9538d14f1921be706408c37939814795"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2692, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}