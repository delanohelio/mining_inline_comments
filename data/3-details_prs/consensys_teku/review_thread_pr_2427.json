{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NDgxMzIx", "number": 2427, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjoxNzo1OFrOERopTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNDo0OTozOVrOESPBXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTI3MTgxOnYy", "diffSide": "RIGHT", "path": "services/remote-validator/src/main/java/tech/pegasys/teku/services/remotevalidator/BeaconChainEvent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjoxNzo1OFrOG2deYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjoxNzo1OFrOG2deYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1OTIwMA==", "bodyText": "We have a JsonProvider class that would be good to use here instead of creating a new Gson every time.", "url": "https://github.com/ConsenSys/teku/pull/2427#discussion_r459759200", "createdAt": "2020-07-23T22:17:58Z", "author": {"login": "ajsutton"}, "path": "services/remote-validator/src/main/java/tech/pegasys/teku/services/remotevalidator/BeaconChainEvent.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.services.remotevalidator;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import com.google.gson.Gson;\n+\n+public class BeaconChainEvent {\n+\n+  public static final String ATTESTATION = \"BroadcastAttestationEvent\";\n+  public static final String AGGREGATION = \"BroadcastAggregatesEvent\";\n+  public static final String IMPORTED_BLOCK = \"ImportedBlockEvent\";\n+  public static final String ON_SLOT = \"OnSlotEvent\";\n+  public static final String REORG_OCCURRED = \"ReorgOccurredEvent\";\n+\n+  private String name;\n+  private UnsignedLong data;\n+\n+  public BeaconChainEvent(final String name, final UnsignedLong data) {\n+    this.name = name;\n+    this.data = data;\n+  }\n+\n+  public BeaconChainEvent() {}\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public void setName(final String name) {\n+    this.name = name;\n+  }\n+\n+  public UnsignedLong getData() {\n+    return data;\n+  }\n+\n+  public void setData(final UnsignedLong data) {\n+    this.data = data;\n+  }\n+\n+  public String toJson() {\n+    return new Gson().toJson(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d696820a49948f27df49b70866510400ffa80b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTM1MjU3OnYy", "diffSide": "RIGHT", "path": "services/remote-validator/src/main/java/tech/pegasys/teku/services/remotevalidator/RemoteValidatorApi.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo1MzoxMVrOG2eOhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo1MzoxMVrOG2eOhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3MTUyNQ==", "bodyText": "ah, so this is why we'll wind up merging this into the beacon chain instead of being its own service.  It should be using the same port as the rest of the REST API.  But we may as well delay that until we have a clear direction on what to use for delivering these events.", "url": "https://github.com/ConsenSys/teku/pull/2427#discussion_r459771525", "createdAt": "2020-07-23T22:53:11Z", "author": {"login": "ajsutton"}, "path": "services/remote-validator/src/main/java/tech/pegasys/teku/services/remotevalidator/RemoteValidatorApi.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.services.remotevalidator;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.javalin.Javalin;\n+import io.javalin.websocket.WsConnectContext;\n+import io.javalin.websocket.WsContext;\n+import java.io.IOException;\n+import java.util.Objects;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.util.config.TekuConfiguration;\n+\n+public class RemoteValidatorApi {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final RemoteValidatorSubscriptions subscriptionManager;\n+  private final Javalin app;\n+\n+  public RemoteValidatorApi(\n+      final TekuConfiguration configuration,\n+      final RemoteValidatorSubscriptions subscriptionManager) {\n+    checkNotNull(configuration, \"TekuConfiguration can't be null\");\n+    checkNotNull(subscriptionManager, \"RemoteValidatorSubscriptions can't be null\");\n+\n+    this.subscriptionManager = subscriptionManager;\n+\n+    this.app =\n+        Javalin.create(\n+            config -> {\n+              config.defaultContentType = \"application/json\";\n+              config.logIfServerNotStarted = false;\n+              config.showJavalinBanner = false;\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d696820a49948f27df49b70866510400ffa80b"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTM1Njc5OnYy", "diffSide": "RIGHT", "path": "services/remote-validator/src/main/java/tech/pegasys/teku/services/remotevalidator/RemoteValidatorApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo1NTowOVrOG2eRGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo1NTowOVrOG2eRGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3MjE4Ng==", "bodyText": "Tough love, I like it.", "url": "https://github.com/ConsenSys/teku/pull/2427#discussion_r459772186", "createdAt": "2020-07-23T22:55:09Z", "author": {"login": "ajsutton"}, "path": "services/remote-validator/src/main/java/tech/pegasys/teku/services/remotevalidator/RemoteValidatorApi.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.services.remotevalidator;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.javalin.Javalin;\n+import io.javalin.websocket.WsConnectContext;\n+import io.javalin.websocket.WsContext;\n+import java.io.IOException;\n+import java.util.Objects;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.util.config.TekuConfiguration;\n+\n+public class RemoteValidatorApi {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final RemoteValidatorSubscriptions subscriptionManager;\n+  private final Javalin app;\n+\n+  public RemoteValidatorApi(\n+      final TekuConfiguration configuration,\n+      final RemoteValidatorSubscriptions subscriptionManager) {\n+    checkNotNull(configuration, \"TekuConfiguration can't be null\");\n+    checkNotNull(subscriptionManager, \"RemoteValidatorSubscriptions can't be null\");\n+\n+    this.subscriptionManager = subscriptionManager;\n+\n+    this.app =\n+        Javalin.create(\n+            config -> {\n+              config.defaultContentType = \"application/json\";\n+              config.logIfServerNotStarted = false;\n+              config.showJavalinBanner = false;\n+            });\n+\n+    configureServer(configuration);\n+  }\n+\n+  private void configureServer(final TekuConfiguration configuration) {\n+    Objects.requireNonNull(this.app.server())\n+        .setServerHost(configuration.getRemoteValidatorApiInterface());\n+    Objects.requireNonNull(this.app.server())\n+        .setServerPort(configuration.getRemoteValidatorApiPort());\n+\n+    app.ws(\n+        \"/\",\n+        (ws) -> {\n+          ws.onConnect(this::subscribeValidator);\n+\n+          ws.onClose(this::unsubscribeValidator);\n+\n+          /*\n+           The server should not receive any messages from the remote validators\n+          */\n+          ws.onMessage(this::unsubscribeValidator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d696820a49948f27df49b70866510400ffa80b"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTM2NTI1OnYy", "diffSide": "RIGHT", "path": "services/remote-validator/src/main/java/tech/pegasys/teku/services/remotevalidator/RemoteValidatorSubscriptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo1OTowOFrOG2eWGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo1OTowOFrOG2eWGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3MzQ2Ng==", "bodyText": "Yeah ultimately it would have to wind up being a command line option.", "url": "https://github.com/ConsenSys/teku/pull/2427#discussion_r459773466", "createdAt": "2020-07-23T22:59:08Z", "author": {"login": "ajsutton"}, "path": "services/remote-validator/src/main/java/tech/pegasys/teku/services/remotevalidator/RemoteValidatorSubscriptions.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.services.remotevalidator;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Consumer;\n+\n+public class RemoteValidatorSubscriptions implements BeaconChainEventsListener {\n+\n+  // TODO should we parametrize maxSubscribers?\n+  private final int maxSubscribers = 1_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d696820a49948f27df49b70866510400ffa80b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTM2OTMyOnYy", "diffSide": "RIGHT", "path": "teku/src/main/java/tech/pegasys/teku/cli/options/RemoteValidatorApiOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzowMDo1OVrOG2eYeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzowMDo1OVrOG2eYeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NDA3Mg==", "bodyText": "If you prefix these with --X they'll turn up when you run teku -X so they're easier to find.", "url": "https://github.com/ConsenSys/teku/pull/2427#discussion_r459774072", "createdAt": "2020-07-23T23:00:59Z", "author": {"login": "ajsutton"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/options/RemoteValidatorApiOptions.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.cli.options;\n+\n+import picocli.CommandLine.Option;\n+\n+public class RemoteValidatorApiOptions {\n+\n+  @Option(\n+      names = {\"--remote-validator-api-enabled\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d696820a49948f27df49b70866510400ffa80b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTU1NDI5OnYy", "diffSide": "RIGHT", "path": "gradle/versions.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNDo0NjoyOFrOG3Tffw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNDo0NjoyOFrOG3Tffw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0NDIyMw==", "bodyText": "We've been consistently not using this in Teku.  Just using the static methods on Mockito rather than the annotations.", "url": "https://github.com/ConsenSys/teku/pull/2427#discussion_r460644223", "createdAt": "2020-07-27T04:46:28Z", "author": {"login": "ajsutton"}, "path": "gradle/versions.gradle", "diffHunk": "@@ -111,6 +111,7 @@ dependencyManagement {\n     }\n \n     dependency 'org.mockito:mockito-core:3.3.3'\n+    dependency 'org.mockito:mockito-junit-jupiter:3.3.3'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "598c4aaea2239ba2c049141e5c511131029f27d6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTU1NzM3OnYy", "diffSide": "RIGHT", "path": "services/remote-validator/src/test/java/tech/pegasys/teku/services/remotevalidator/RemoteValidatorApiTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNDo0ODoyM1rOG3ThLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNDo0ODoyM1rOG3ThLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0NDY1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Mock private TekuConfiguration configuration;\n          \n          \n            \n              private TekuConfiguration configuration = mock(TekuConfiguration.class);\n          \n      \n    \n    \n  \n\nand so on. for the other fields. :)", "url": "https://github.com/ConsenSys/teku/pull/2427#discussion_r460644652", "createdAt": "2020-07-27T04:48:23Z", "author": {"login": "ajsutton"}, "path": "services/remote-validator/src/test/java/tech/pegasys/teku/services/remotevalidator/RemoteValidatorApiTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.services.remotevalidator;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.websocket.WsConnectContext;\n+import java.io.IOException;\n+import java.util.UUID;\n+import java.util.function.Consumer;\n+import javax.servlet.http.HttpServletRequest;\n+import org.eclipse.jetty.websocket.api.RemoteEndpoint;\n+import org.eclipse.jetty.websocket.api.Session;\n+import org.eclipse.jetty.websocket.api.StatusCode;\n+import org.eclipse.jetty.websocket.servlet.ServletUpgradeRequest;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.teku.services.remotevalidator.RemoteValidatorSubscriptions.SubscriptionStatus;\n+import tech.pegasys.teku.util.config.TekuConfiguration;\n+\n+@ExtendWith(MockitoExtension.class)\n+class RemoteValidatorApiTest {\n+\n+  @Mock private TekuConfiguration configuration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "598c4aaea2239ba2c049141e5c511131029f27d6"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTU1OTM1OnYy", "diffSide": "RIGHT", "path": "services/remote-validator/src/test/java/tech/pegasys/teku/services/remotevalidator/RemoteValidatorApiTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNDo0OTozOVrOG3TiSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNDo0OTozOVrOG3TiSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0NDkzOQ==", "bodyText": "And the nice thing about not using @Mock annotations is the values are immediately available so you can just declare these values inline rather than needing a beforeEach method.", "url": "https://github.com/ConsenSys/teku/pull/2427#discussion_r460644939", "createdAt": "2020-07-27T04:49:39Z", "author": {"login": "ajsutton"}, "path": "services/remote-validator/src/test/java/tech/pegasys/teku/services/remotevalidator/RemoteValidatorApiTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.services.remotevalidator;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.websocket.WsConnectContext;\n+import java.io.IOException;\n+import java.util.UUID;\n+import java.util.function.Consumer;\n+import javax.servlet.http.HttpServletRequest;\n+import org.eclipse.jetty.websocket.api.RemoteEndpoint;\n+import org.eclipse.jetty.websocket.api.Session;\n+import org.eclipse.jetty.websocket.api.StatusCode;\n+import org.eclipse.jetty.websocket.servlet.ServletUpgradeRequest;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.teku.services.remotevalidator.RemoteValidatorSubscriptions.SubscriptionStatus;\n+import tech.pegasys.teku.util.config.TekuConfiguration;\n+\n+@ExtendWith(MockitoExtension.class)\n+class RemoteValidatorApiTest {\n+\n+  @Mock private TekuConfiguration configuration;\n+\n+  @Mock private RemoteValidatorSubscriptions subscriptionManager;\n+\n+  @Mock private Session wsSession;\n+\n+  @Captor private ArgumentCaptor<Consumer<BeaconChainEvent>> subscriberCallbackArgCaptor;\n+\n+  private WsConnectContext wsContext;\n+\n+  private RemoteValidatorApi remoteValidatorApi;\n+\n+  @BeforeEach\n+  public void beforeEach() {\n+    wsContext = createWsContextStub();\n+    remoteValidatorApi = new RemoteValidatorApi(configuration, subscriptionManager);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "598c4aaea2239ba2c049141e5c511131029f27d6"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3429, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}