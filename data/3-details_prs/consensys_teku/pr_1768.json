{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NDY4OTEw", "number": 1768, "title": "Add validator client metrics", "bodyText": "PR Description\nStart recording metrics in the validator client so administrators can monitor what the validator is doing, and how much load it is placing on the beacon chain.\nImplements a StubMetricsService so metrics can be tested directly and updates existing tests to use it.\nAlso reduces the number of places we have to explicitly depend on the besu plugin APIs by making it part of the metrics module API - anything that accesses the metrics categories is likely to need to use the actual metrics.", "createdAt": "2020-05-12T03:54:14Z", "url": "https://github.com/ConsenSys/teku/pull/1768", "merged": true, "mergeCommit": {"oid": "103b59ebb4e97aacabdb30778adcc55707fdf937"}, "closed": true, "closedAt": "2020-05-12T21:30:59Z", "author": {"login": "ajsutton"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgZRRWgH2gAyNDE2NDY4OTEwOmQ0YWE1MDE5MDAxNWYyNzFjNGU4ZWM4YmRkOTQzMmM1ZGU0ZjNlZGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgqz1GgH2gAyNDE2NDY4OTEwOjJkODg0OGM5ZjhlNjk4ZWQyNGJlNjg4YjFjMzQ3Yjc0YjIxYjVhMTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d4aa50190015f271c4e8ec8bdd9432c5de4f3edd", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/d4aa50190015f271c4e8ec8bdd9432c5de4f3edd", "committedDate": "2020-05-12T00:38:09Z", "message": "Switch BeaconChainMetricsTest to actually test the metrics, not just the accessor methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e05ea4dba9a75aef410909d3166bc869f125ee63", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/e05ea4dba9a75aef410909d3166bc869f125ee63", "committedDate": "2020-05-12T01:13:27Z", "message": "Use api to automatically inherit the metrics classes for things that depend on our metrics model since they're inevitably going to be required."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d155b07b30fc0aceff3cfb9dda06aecc62624f4f", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/d155b07b30fc0aceff3cfb9dda06aecc62624f4f", "committedDate": "2020-05-12T03:47:19Z", "message": "Record metrics in the validator client:\n * Number of local validators\n * Counters for requests made to the beacon chain node\n * Current number of scheduled duties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57efe37a754f8aa7aeb402be6dbc24e6c5553ffc", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/57efe37a754f8aa7aeb402be6dbc24e6c5553ffc", "committedDate": "2020-05-12T03:51:11Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into more-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "095deebe94b86d9c5d8809bbab63dafa3e537136", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/095deebe94b86d9c5d8809bbab63dafa3e537136", "committedDate": "2020-05-12T03:54:04Z", "message": "Check expected result is returned."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMjQxODY3", "url": "https://github.com/ConsenSys/teku/pull/1768#pullrequestreview-410241867", "createdAt": "2020-05-12T16:58:03Z", "commit": {"oid": "095deebe94b86d9c5d8809bbab63dafa3e537136"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjo1ODowNFrOGUQMPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjo1ODowNFrOGUQMPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg4OTk4MQ==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Map<MetricCategory, Map<String, StubGauge>> guages = new ConcurrentHashMap<>();\n          \n          \n            \n              private Map<MetricCategory, Map<String, StubGauge>> gauges = new ConcurrentHashMap<>();", "url": "https://github.com/ConsenSys/teku/pull/1768#discussion_r423889981", "createdAt": "2020-05-12T16:58:04Z", "author": {"login": "cemozerr"}, "path": "data/metrics/src/testFixtures/java/tech/pegasys/teku/metrics/StubMetricsSystem.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.metrics;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.DoubleSupplier;\n+import org.hyperledger.besu.plugin.services.MetricsSystem;\n+import org.hyperledger.besu.plugin.services.metrics.Counter;\n+import org.hyperledger.besu.plugin.services.metrics.LabelledMetric;\n+import org.hyperledger.besu.plugin.services.metrics.MetricCategory;\n+import org.hyperledger.besu.plugin.services.metrics.OperationTimer;\n+\n+public class StubMetricsSystem implements MetricsSystem {\n+\n+  private Map<MetricCategory, Map<String, StubCounter>> counters = new ConcurrentHashMap<>();\n+  private Map<MetricCategory, Map<String, StubGauge>> guages = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "095deebe94b86d9c5d8809bbab63dafa3e537136"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMjQ0ODA0", "url": "https://github.com/ConsenSys/teku/pull/1768#pullrequestreview-410244804", "createdAt": "2020-05-12T17:01:28Z", "commit": {"oid": "095deebe94b86d9c5d8809bbab63dafa3e537136"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzowMToyOFrOGUQVJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzowMToyOFrOGUQVJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg5MjI2Mg==", "bodyText": "In line with how you did in createGauge, wouldn't it make more sense to check if a labeled counter with the same name exists? and throw an error if yes?", "url": "https://github.com/ConsenSys/teku/pull/1768#discussion_r423892262", "createdAt": "2020-05-12T17:01:28Z", "author": {"login": "cemozerr"}, "path": "data/metrics/src/testFixtures/java/tech/pegasys/teku/metrics/StubMetricsSystem.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.metrics;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.DoubleSupplier;\n+import org.hyperledger.besu.plugin.services.MetricsSystem;\n+import org.hyperledger.besu.plugin.services.metrics.Counter;\n+import org.hyperledger.besu.plugin.services.metrics.LabelledMetric;\n+import org.hyperledger.besu.plugin.services.metrics.MetricCategory;\n+import org.hyperledger.besu.plugin.services.metrics.OperationTimer;\n+\n+public class StubMetricsSystem implements MetricsSystem {\n+\n+  private Map<MetricCategory, Map<String, StubCounter>> counters = new ConcurrentHashMap<>();\n+  private Map<MetricCategory, Map<String, StubGauge>> guages = new ConcurrentHashMap<>();\n+\n+  @Override\n+  public LabelledMetric<Counter> createLabelledCounter(\n+      final MetricCategory category,\n+      final String name,\n+      final String help,\n+      final String... labelNames) {\n+    return counters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "095deebe94b86d9c5d8809bbab63dafa3e537136"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMjcxNDM5", "url": "https://github.com/ConsenSys/teku/pull/1768#pullrequestreview-410271439", "createdAt": "2020-05-12T17:35:17Z", "commit": {"oid": "095deebe94b86d9c5d8809bbab63dafa3e537136"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozNToxN1rOGURmJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzozNToxN1rOGURmJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxMjk5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    MetricRecordingValidatorApiChannelTest.requestDataTest(\n          \n          \n            \n                    requestDataTest(", "url": "https://github.com/ConsenSys/teku/pull/1768#discussion_r423912997", "createdAt": "2020-05-12T17:35:17Z", "author": {"login": "cemozerr"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/metrics/MetricRecordingValidatorApiChannelTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.metrics;\n+\n+import static java.util.Collections.emptySet;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.metrics.StubMetricsSystem;\n+import tech.pegasys.teku.metrics.TekuMetricCategory;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+import tech.pegasys.teku.validator.client.metrics.BeaconChainRequestCounter.RequestOutcome;\n+\n+class MetricRecordingValidatorApiChannelTest {\n+\n+  private final ValidatorApiChannel delegate = mock(ValidatorApiChannel.class);\n+  private final StubMetricsSystem metricsSystem = new StubMetricsSystem();\n+  private final MetricRecordingValidatorApiChannel apiChannel =\n+      new MetricRecordingValidatorApiChannel(metricsSystem, delegate);\n+\n+  @ParameterizedTest(name = \"{displayName} - {0}\")\n+  @MethodSource(\"getDataRequestArguments\")\n+  public void shouldRecordSuccessfulRequestForData(\n+      final String name,\n+      final Function<ValidatorApiChannel, SafeFuture<Optional<Object>>> method,\n+      final String counterName,\n+      final Object value) {\n+    final Optional<Object> response = Optional.of(value);\n+    when(method.apply(delegate)).thenReturn(SafeFuture.completedFuture(response));\n+\n+    final SafeFuture<Optional<Object>> result = method.apply(apiChannel);\n+\n+    assertThat(result).isCompletedWithValue(response);\n+\n+    assertThat(getCounterValue(counterName, RequestOutcome.SUCCESS)).isEqualTo(1);\n+    assertThat(getCounterValue(counterName, RequestOutcome.ERROR)).isZero();\n+    assertThat(getCounterValue(counterName, RequestOutcome.DATA_UNAVAILABLE)).isZero();\n+  }\n+\n+  @ParameterizedTest(name = \"{displayName} - {0}\")\n+  @MethodSource(\"getDataRequestArguments\")\n+  public void shouldRecordFailedRequestForData(\n+      final String name,\n+      final Function<ValidatorApiChannel, SafeFuture<Optional<Object>>> method,\n+      final String counterName,\n+      final Object value) {\n+    final RuntimeException exception = new RuntimeException(\"Nope\");\n+    when(method.apply(delegate)).thenReturn(SafeFuture.failedFuture(exception));\n+\n+    final SafeFuture<Optional<Object>> result = method.apply(apiChannel);\n+    assertThat(result).isCompletedExceptionally();\n+    assertThatThrownBy(result::join).hasRootCause(exception);\n+\n+    assertThat(getCounterValue(counterName, RequestOutcome.ERROR)).isEqualTo(1);\n+    assertThat(getCounterValue(counterName, RequestOutcome.SUCCESS)).isZero();\n+    assertThat(getCounterValue(counterName, RequestOutcome.DATA_UNAVAILABLE)).isZero();\n+  }\n+\n+  @ParameterizedTest(name = \"{displayName} - {0}\")\n+  @MethodSource(\"getDataRequestArguments\")\n+  public void shouldRecordRequestForDataWhenDataUnavailable(\n+      final String name,\n+      final Function<ValidatorApiChannel, SafeFuture<Optional<Object>>> method,\n+      final String counterName,\n+      final Object value) {\n+    when(method.apply(delegate)).thenReturn(SafeFuture.completedFuture(Optional.empty()));\n+\n+    final SafeFuture<Optional<Object>> result = method.apply(apiChannel);\n+    assertThat(result).isCompletedWithValue(Optional.empty());\n+\n+    assertThat(getCounterValue(counterName, RequestOutcome.DATA_UNAVAILABLE)).isEqualTo(1);\n+    assertThat(getCounterValue(counterName, RequestOutcome.SUCCESS)).isZero();\n+    assertThat(getCounterValue(counterName, RequestOutcome.ERROR)).isZero();\n+  }\n+\n+  @ParameterizedTest(name = \"{displayName} - {0}\")\n+  @MethodSource(\"getNoResponseCallArguments\")\n+  public void shouldRecordCallsWithNoResponse(\n+      final String name, final Consumer<ValidatorApiChannel> method, final String counterName) {\n+    method.accept(apiChannel);\n+\n+    assertThat(metricsSystem.getCounter(TekuMetricCategory.VALIDATOR, counterName).getValue())\n+        .isEqualTo(1);\n+  }\n+\n+  public static Stream<Arguments> getNoResponseCallArguments() {\n+    final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+    return Stream.of(\n+        noResponseTest(\n+            \"subscribeToBeaconCommitteeForAggregation\",\n+            channel -> channel.subscribeToBeaconCommitteeForAggregation(1, UnsignedLong.ZERO),\n+            MetricRecordingValidatorApiChannel.AGGREGATION_SUBSCRIPTION_COUNTER_NAME),\n+        noResponseTest(\n+            \"subscribeToPersistentSubnets\",\n+            channel -> channel.subscribeToPersistentSubnets(emptySet()),\n+            MetricRecordingValidatorApiChannel.PERSISTENT_SUBSCRIPTION_COUNTER_NAME),\n+        noResponseTest(\n+            \"sendSignedAttestation\",\n+            channel -> channel.sendSignedAttestation(dataStructureUtil.randomAttestation()),\n+            MetricRecordingValidatorApiChannel.PUBLISHED_ATTESTATION_COUNTER_NAME),\n+        noResponseTest(\n+            \"sendAggregateAndProof\",\n+            channel ->\n+                channel.sendAggregateAndProof(dataStructureUtil.randomSignedAggregateAndProof()),\n+            MetricRecordingValidatorApiChannel.PUBLISHED_AGGREGATE_COUNTER_NAME),\n+        noResponseTest(\n+            \"sendSignedBlock\",\n+            channel -> channel.sendSignedBlock(dataStructureUtil.randomSignedBeaconBlock(1)),\n+            MetricRecordingValidatorApiChannel.PUBLISHED_BLOCK_COUNTER_NAME));\n+  }\n+\n+  private static Arguments noResponseTest(\n+      final String name, final Consumer<ValidatorApiChannel> method, final String counterName) {\n+    return Arguments.of(name, method, counterName);\n+  }\n+\n+  public static Stream<Arguments> getDataRequestArguments() {\n+    final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+    final UnsignedLong slot = dataStructureUtil.randomUnsignedLong();\n+    final BLSSignature signature = dataStructureUtil.randomSignature();\n+    final AttestationData attestationData = dataStructureUtil.randomAttestationData();\n+    return Stream.of(\n+        requestDataTest(\n+            \"getForkInfo\",\n+            ValidatorApiChannel::getForkInfo,\n+            MetricRecordingValidatorApiChannel.FORK_REQUESTS_COUNTER_NAME,\n+            dataStructureUtil.randomForkInfo()),\n+        MetricRecordingValidatorApiChannelTest.requestDataTest(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "095deebe94b86d9c5d8809bbab63dafa3e537136"}, "originalPosition": 154}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMjgwMjY5", "url": "https://github.com/ConsenSys/teku/pull/1768#pullrequestreview-410280269", "createdAt": "2020-05-12T17:46:42Z", "commit": {"oid": "095deebe94b86d9c5d8809bbab63dafa3e537136"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8235ef3673b37e36dc750a1e35d312cd4f6f605a", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/8235ef3673b37e36dc750a1e35d312cd4f6f605a", "committedDate": "2020-05-12T21:04:11Z", "message": "Tidy ups."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d8848c9f8e698ed24be688b1c347b74b21b5a17", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/2d8848c9f8e698ed24be688b1c347b74b21b5a17", "committedDate": "2020-05-12T21:04:17Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into more-metrics"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4189, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}