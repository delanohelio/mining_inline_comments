{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5Njc2NjUx", "number": 3073, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowOTowNVrOEyFqCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxMDo1N1rOEyFs5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU2OTM4OnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/teku/api/ChainDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowOTowNVrOHoidHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxNjoxNVrOHoisTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2OTU5OQ==", "bodyText": "We could have a default method getSingleBlock in the BlockSelector interface that does this conversion from list to Optional.  Could just do a blockList.stream().findFirst() so simplify it.", "url": "https://github.com/ConsenSys/teku/pull/3073#discussion_r512269599", "createdAt": "2020-10-26T21:09:05Z", "author": {"login": "ajsutton"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/ChainDataProvider.java", "diffHunk": "@@ -196,24 +199,14 @@ public GetForkResponse getForkInfo() {\n       return chainUnavailable();\n     }\n \n-    final Optional<UInt64> maybeSlot = blockParameterToSlot(slotParameter);\n-    if (maybeSlot.isEmpty()) {\n-      return getBlockHeaderByBlockRoot(Bytes32.fromHexString(slotParameter));\n-    }\n-\n-    final UInt64 slot = maybeSlot.get();\n-    return combinedChainDataClient\n-        .getBlockAtSlotExact(slot)\n-        .thenApply(maybeBlock -> maybeBlock.map(block -> new BlockHeader(block, true)));\n-  }\n-\n-  // because this is called after attempting to match a block to a slot, this function\n-  // will only ever be run for non canonical blocks. if made public, it will have to be updated to\n-  // first check that the block doesnt have a slot, before it can make that assumption.\n-  SafeFuture<Optional<BlockHeader>> getBlockHeaderByBlockRoot(final Bytes32 blockRoot) {\n-    return combinedChainDataClient\n-        .getBlockByBlockRoot(blockRoot)\n-        .thenApply(maybeBlock -> maybeBlock.map(block -> new BlockHeader(block, false)));\n+    return defaultBlockSelectorFactory\n+        .defaultBlockSelector(slotParameter)\n+        .getBlock()\n+        .thenApply(\n+            blockList ->\n+                blockList.isEmpty()\n+                    ? Optional.empty()\n+                    : Optional.of(new BlockHeader(blockList.get(0), true)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13a1018384dfbcaf2207203b7f5426de612d0d73"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MzQ4Ng==", "bodyText": "Also I'd have expected the handler to convert the String slotParameter to a BlockSelector and then pass the BlockSelector into this method.  That way the handler is responsible for interpreting the request and the provider has the business logic.  With it this way the provider is interpreting the request and doing the business logic.", "url": "https://github.com/ConsenSys/teku/pull/3073#discussion_r512273486", "createdAt": "2020-10-26T21:16:15Z", "author": {"login": "ajsutton"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/ChainDataProvider.java", "diffHunk": "@@ -196,24 +199,14 @@ public GetForkResponse getForkInfo() {\n       return chainUnavailable();\n     }\n \n-    final Optional<UInt64> maybeSlot = blockParameterToSlot(slotParameter);\n-    if (maybeSlot.isEmpty()) {\n-      return getBlockHeaderByBlockRoot(Bytes32.fromHexString(slotParameter));\n-    }\n-\n-    final UInt64 slot = maybeSlot.get();\n-    return combinedChainDataClient\n-        .getBlockAtSlotExact(slot)\n-        .thenApply(maybeBlock -> maybeBlock.map(block -> new BlockHeader(block, true)));\n-  }\n-\n-  // because this is called after attempting to match a block to a slot, this function\n-  // will only ever be run for non canonical blocks. if made public, it will have to be updated to\n-  // first check that the block doesnt have a slot, before it can make that assumption.\n-  SafeFuture<Optional<BlockHeader>> getBlockHeaderByBlockRoot(final Bytes32 blockRoot) {\n-    return combinedChainDataClient\n-        .getBlockByBlockRoot(blockRoot)\n-        .thenApply(maybeBlock -> maybeBlock.map(block -> new BlockHeader(block, false)));\n+    return defaultBlockSelectorFactory\n+        .defaultBlockSelector(slotParameter)\n+        .getBlock()\n+        .thenApply(\n+            blockList ->\n+                blockList.isEmpty()\n+                    ? Optional.empty()\n+                    : Optional.of(new BlockHeader(blockList.get(0), true)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2OTU5OQ=="}, "originalCommit": {"oid": "13a1018384dfbcaf2207203b7f5426de612d0d73"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU3NjcwOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/rpc/core/Eth2OutgoingRequestHandlerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxMDo1N1rOHoihbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMjo1NDo1M1rOHolW-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MDcwMw==", "bodyText": "We shouldn't be expecting this and it probably shouldn't be in this change.  Need to work out why it's being released twice and fix that in a different PR. :)", "url": "https://github.com/ConsenSys/teku/pull/3073#discussion_r512270703", "createdAt": "2020-10-26T21:10:57Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/rpc/core/Eth2OutgoingRequestHandlerTest.java", "diffHunk": "@@ -280,7 +282,7 @@ public void shouldCompleteExceptionallyWhenClosedWithTruncatedMessage() {\n \n     asyncRequestRunner.executeQueuedActions();\n \n-    complete();\n+    assertThrows(IllegalReferenceCountException.class, this::complete);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13a1018384dfbcaf2207203b7f5426de612d0d73"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxNjYyMA==", "bodyText": "alright but it blocks every build i do, so basically i cant get a green build on my machine before i push", "url": "https://github.com/ConsenSys/teku/pull/3073#discussion_r512316620", "createdAt": "2020-10-26T22:53:28Z", "author": {"login": "rolfyone"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/rpc/core/Eth2OutgoingRequestHandlerTest.java", "diffHunk": "@@ -280,7 +282,7 @@ public void shouldCompleteExceptionallyWhenClosedWithTruncatedMessage() {\n \n     asyncRequestRunner.executeQueuedActions();\n \n-    complete();\n+    assertThrows(IllegalReferenceCountException.class, this::complete);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MDcwMw=="}, "originalCommit": {"oid": "13a1018384dfbcaf2207203b7f5426de612d0d73"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjMxNzE3Nw==", "bodyText": "I don't think this is the right fix either - complete exceptionally is different to throws exception.  I wouldn't have expected to get this exception from a call to complete.", "url": "https://github.com/ConsenSys/teku/pull/3073#discussion_r512317177", "createdAt": "2020-10-26T22:54:53Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/rpc/core/Eth2OutgoingRequestHandlerTest.java", "diffHunk": "@@ -280,7 +282,7 @@ public void shouldCompleteExceptionallyWhenClosedWithTruncatedMessage() {\n \n     asyncRequestRunner.executeQueuedActions();\n \n-    complete();\n+    assertThrows(IllegalReferenceCountException.class, this::complete);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MDcwMw=="}, "originalCommit": {"oid": "13a1018384dfbcaf2207203b7f5426de612d0d73"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3096, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}