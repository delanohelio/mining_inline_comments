{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNzEyODUw", "number": 2235, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMTozMzoyNVrOEJfEWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMTozMzoyNVrOEJfEWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzgxNjU4OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/teku/ssz/backing/cache/SoftRefIntCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMTozMzoyNVrOGqAdSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTozNjowOFrOGqMu4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwMDg3Mg==", "bodyText": "I'm assuming we're ok with multiple threads winding up creating new caches at the same time here?  One of them will just wind up being GC'd again pretty much immediately which is the same behaviour we'd see if a single new SoftReference as created and the GC immediately cleared it out again.", "url": "https://github.com/ConsenSys/teku/pull/2235#discussion_r446700872", "createdAt": "2020-06-28T21:33:25Z", "author": {"login": "ajsutton"}, "path": "ssz/src/main/java/tech/pegasys/teku/ssz/backing/cache/SoftRefIntCache.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.ssz.backing.cache;\n+\n+import java.lang.ref.SoftReference;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.IntFunction;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Keeps the delegate cache in a {@link SoftReference} to allow the cache to be GC'ed if the\n+ * application lacks of heap memory.\n+ *\n+ * <p>On {@link #copy()} or {@link #transfer()} also returns a {@link SoftRefIntCache} instance\n+ */\n+public class SoftRefIntCache<V> implements IntCache<V> {\n+\n+  private final Supplier<IntCache<V>> cacheCtor;\n+  private volatile SoftReference<IntCache<V>> delegate;\n+\n+  private SoftRefIntCache(IntCache<V> initialDelegate, Supplier<IntCache<V>> cacheCtor) {\n+    this.cacheCtor = cacheCtor;\n+    delegate = new SoftReference<>(initialDelegate);\n+  }\n+\n+  public SoftRefIntCache(Supplier<IntCache<V>> cacheCtor) {\n+    this(cacheCtor.get(), cacheCtor);\n+  }\n+\n+  public IntCache<V> getDelegate() {\n+    IntCache<V> cache = delegate.get();\n+    if (cache == null) {\n+      cache = cacheCtor.get();\n+      delegate = new SoftReference<>(cache);\n+    }\n+    return cache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a2b8e09e8776eb341189446c86a8c6d4d6c13a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwMTk4NA==", "bodyText": "Yes, concurrent access case that should work fine here. It can lead to an additional cache miss in that case but that trade off seems OK to me.\nI decided to avoid synchronized here as concurrent access would not be the usual case IMHO", "url": "https://github.com/ConsenSys/teku/pull/2235#discussion_r446901984", "createdAt": "2020-06-29T11:36:08Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/teku/ssz/backing/cache/SoftRefIntCache.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.ssz.backing.cache;\n+\n+import java.lang.ref.SoftReference;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.IntFunction;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Keeps the delegate cache in a {@link SoftReference} to allow the cache to be GC'ed if the\n+ * application lacks of heap memory.\n+ *\n+ * <p>On {@link #copy()} or {@link #transfer()} also returns a {@link SoftRefIntCache} instance\n+ */\n+public class SoftRefIntCache<V> implements IntCache<V> {\n+\n+  private final Supplier<IntCache<V>> cacheCtor;\n+  private volatile SoftReference<IntCache<V>> delegate;\n+\n+  private SoftRefIntCache(IntCache<V> initialDelegate, Supplier<IntCache<V>> cacheCtor) {\n+    this.cacheCtor = cacheCtor;\n+    delegate = new SoftReference<>(initialDelegate);\n+  }\n+\n+  public SoftRefIntCache(Supplier<IntCache<V>> cacheCtor) {\n+    this(cacheCtor.get(), cacheCtor);\n+  }\n+\n+  public IntCache<V> getDelegate() {\n+    IntCache<V> cache = delegate.get();\n+    if (cache == null) {\n+      cache = cacheCtor.get();\n+      delegate = new SoftReference<>(cache);\n+    }\n+    return cache;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwMDg3Mg=="}, "originalCommit": {"oid": "41a2b8e09e8776eb341189446c86a8c6d4d6c13a"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3474, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}