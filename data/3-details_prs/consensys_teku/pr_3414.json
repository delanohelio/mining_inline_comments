{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwNjE2NjM3", "number": 3414, "title": "[Issue-3373] Graffiti loading without restart", "bodyText": "Read graffiti from a file without restarting the validator\n\n\nPR Description\nImplements a Graffiti class and a file loader in order to read graffiti from a file without restarting the validator\nFixed Issue(s)\naddresses #3373\nDocumentation\nAdd new option: --validators-graffiti-file", "createdAt": "2020-12-15T19:30:18Z", "url": "https://github.com/ConsenSys/teku/pull/3414", "merged": true, "mergeCommit": {"oid": "5eb9110ca2c4b4434703b98ef1c7f599a1fc7142"}, "closed": true, "closedAt": "2021-01-05T15:52:45Z", "author": {"login": "EdwardPrentice"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmfnzAgBqjQxMTYzMTc0NTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtM3M7gFqTU2MTg5ODU0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "303b2a35b476662f1baac49981594cc6ff947121", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/303b2a35b476662f1baac49981594cc6ff947121", "committedDate": "2020-12-15T19:26:24Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}, "afterCommit": {"oid": "2fc146319eba212a3d33cbd3b228f0435e8653ca", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/2fc146319eba212a3d33cbd3b228f0435e8653ca", "committedDate": "2020-12-15T19:36:47Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2fc146319eba212a3d33cbd3b228f0435e8653ca", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/2fc146319eba212a3d33cbd3b228f0435e8653ca", "committedDate": "2020-12-15T19:36:47Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}, "afterCommit": {"oid": "0de7c4bfec4df1bc582106309f460104f0a10dbb", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/0de7c4bfec4df1bc582106309f460104f0a10dbb", "committedDate": "2020-12-15T19:49:34Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0de7c4bfec4df1bc582106309f460104f0a10dbb", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/0de7c4bfec4df1bc582106309f460104f0a10dbb", "committedDate": "2020-12-15T19:49:34Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}, "afterCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c", "committedDate": "2020-12-15T19:52:18Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c", "committedDate": "2020-12-15T19:52:18Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}, "afterCommit": {"oid": "bc5d51c4b2bdd2217b036ac8b5c880437f860845", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/bc5d51c4b2bdd2217b036ac8b5c880437f860845", "committedDate": "2020-12-15T20:47:35Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc5d51c4b2bdd2217b036ac8b5c880437f860845", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/bc5d51c4b2bdd2217b036ac8b5c880437f860845", "committedDate": "2020-12-15T20:47:35Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}, "afterCommit": {"oid": "b794d161b1796af7b2f4932942d4b2ff551e5ba4", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/b794d161b1796af7b2f4932942d4b2ff551e5ba4", "committedDate": "2020-12-15T20:52:14Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyODI3MDI5", "url": "https://github.com/ConsenSys/teku/pull/3414#pullrequestreview-552827029", "createdAt": "2020-12-15T20:07:14Z", "commit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowNzoxNFrOIGd2RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDo0MzowMlrOIGfIQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY1MTM5Nw==", "bodyText": "(nit) May be worth adding a method to  Bytes32Converter that directly accepts a String as well.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543651397", "createdAt": "2020-12-15T20:07:14Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/converter/GraffitiConverter.java", "diffHunk": "@@ -16,22 +16,21 @@\n import java.nio.charset.StandardCharsets;\n import org.apache.tuweni.bytes.Bytes32;\n import picocli.CommandLine;\n+import tech.pegasys.teku.validator.client.loader.graffiti.Bytes32Converter;\n \n public class GraffitiConverter implements CommandLine.ITypeConverter<Bytes32> {\n   @Override\n   public Bytes32 convert(final String value) {\n     byte[] input = value.getBytes(StandardCharsets.UTF_8);\n-    if (input.length > 32) {\n+    try {\n+      return Bytes32Converter.toBytes32(input);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY2MTI3Mw==", "bodyText": "Rather than using readAllBytes, it's probably safer to use something like FileInputStream to read at most 32 bytes, and then detect if there's extra unread data and, if so, throw an error.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543661273", "createdAt": "2020-12-15T20:23:53Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/graffiti/GraffitiLoader.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader.graffiti;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class GraffitiLoader {\n+  public static Bytes32 loadFromFile(final Path graffitiFile) throws GraffitiLoaderException {\n+    checkNotNull(graffitiFile, \"GraffitiFile path cannot be null\");\n+    try {\n+      return Bytes32Converter.toBytes32(Files.readAllBytes(graffitiFile));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY2MzQ0OQ==", "bodyText": "Looks like Bytes32.wrap expects the byte array to have exactly 32 bytes, so I don't think this will work.   With the current implementation we're allocating a single byte array which should be faster than creating a smaller Bytes object and then resizing it.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543663449", "createdAt": "2020-12-15T20:27:38Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/graffiti/Bytes32Converter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader.graffiti;\n+\n+import java.nio.charset.StandardCharsets;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class Bytes32Converter {\n+  public static Bytes32 toBytes32(final byte[] input) {\n+    if (input.length > 32) {\n+      throw new IllegalArgumentException(\n+          \"'\"\n+              + new String(input, StandardCharsets.UTF_8)\n+              + \"' converts to \"\n+              + input.length\n+              + \" bytes. Input must be 32 bytes or less.\");\n+    }\n+\n+    // TODO note to self and code reviewer. Is this implementation better or worse than\n+    //     return Bytes32.rightPad(Bytes32.wrap(\"myString\".getBytes(UTF_*)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY2NTc1MA==", "bodyText": "(nit) I think I'd call this something like GraffitiParser.  We use \"converters\" in the CLI package because this is a picocli concept.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543665750", "createdAt": "2020-12-15T20:31:34Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/graffiti/Bytes32Converter.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader.graffiti;\n+\n+import java.nio.charset.StandardCharsets;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class Bytes32Converter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY2NjY3Ng==", "bodyText": "I'd keep this signature the same (returning Optional<Bytes32> and just load the graffiti here.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543666676", "createdAt": "2020-12-15T20:33:05Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/Validator.java", "diffHunk": "@@ -38,7 +35,7 @@ public Signer getSigner() {\n     return signer;\n   }\n \n-  public Optional<Bytes32> getGraffiti() {\n+  public Graffiti getGraffiti() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3MDQ5NQ==", "bodyText": "I think we could simplify and make this more easily customizable by defining a GraffitiProvider interface:\n@FunctionalInterface\ninterface GraffitiProvider {\n  Optional<Bytes32> get();\n}\n\nValidatorConfig could then just have a single graffitiProvider(...) setter.\nWe could then move the new Graffiti class to FileBackedGraffitiProvider implements GraffitiProvider.   The actual provider instance would be constructed in ValidatorOptions.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543670495", "createdAt": "2020-12-15T20:39:48Z", "author": {"login": "mbaxter"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorConfig.java", "diffHunk": "@@ -259,6 +267,11 @@ public Builder graffiti(Bytes32 graffiti) {\n       return this;\n     }\n \n+    public Builder graffitiFile(Path graffitiFile) {\n+      this.graffitiFile = graffitiFile;\n+      return this;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY3MjM4Ng==", "bodyText": "Looks like this name was accidentally updated?", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543672386", "createdAt": "2020-12-15T20:43:02Z", "author": {"login": "mbaxter"}, "path": "teku/src/test/java/tech/pegasys/teku/cli/converter/Bytes32ConverterTest.java", "diffHunk": "@@ -20,7 +20,7 @@\n import org.junit.jupiter.api.Test;\n import picocli.CommandLine;\n \n-public class GraffitiConverterTest {\n+public class Bytes32ConverterTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f20e1d0ce3c31f3913d6e6e7d95bdeb0edc08c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyODYxMDAx", "url": "https://github.com/ConsenSys/teku/pull/3414#pullrequestreview-552861001", "createdAt": "2020-12-15T20:55:58Z", "commit": {"oid": "000f9fe104efddd24a0e159c49878974a0ac5213"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDo1NTo1OFrOIGfmLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDo1NTo1OFrOIGfmLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY4MDA0NQ==", "bodyText": "Thought I left a comment here, but it seems to have been lost.  We'll have to handle the case where one or both of these values are not provided via the CLI.  I'd suggest making these 2 value Optional.  Then we can load from file if that argument exists, otherwise we can return the default value.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r543680045", "createdAt": "2020-12-15T20:55:58Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/Graffiti.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiLoader;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiLoaderException;\n+\n+/**\n+ * A type to hold the current graffiti value. Graffiti can be loaded from 2 places:\n+ *\n+ * <ul>\n+ *   <li>The config file at initialisation\n+ *   <li>The graffiti file which will be regularly checked\n+ * </ul>\n+ *\n+ * In the case that the file cannot be read, the graffiti value will remain unchanged from its\n+ * previous value.\n+ */\n+public class Graffiti {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private Bytes32 graffiti;\n+  private final Path graffitiFile;\n+\n+  public Graffiti(final Bytes32 graffiti, final Path graffitiFile) {\n+    this.graffiti = graffiti;\n+    this.graffitiFile = graffitiFile;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "000f9fe104efddd24a0e159c49878974a0ac5213"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "000f9fe104efddd24a0e159c49878974a0ac5213", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/000f9fe104efddd24a0e159c49878974a0ac5213", "committedDate": "2020-12-15T20:54:11Z", "message": "Merge branch 'master' into issue-3373/reading-graffiti-from-file"}, "afterCommit": {"oid": "394876973e96b0ba65ba3e5abc5ad004ffb60cb8", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/394876973e96b0ba65ba3e5abc5ad004ffb60cb8", "committedDate": "2020-12-15T21:58:35Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "394876973e96b0ba65ba3e5abc5ad004ffb60cb8", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/394876973e96b0ba65ba3e5abc5ad004ffb60cb8", "committedDate": "2020-12-15T21:58:35Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}, "afterCommit": {"oid": "ec6491f0e9428f0abca78a4f43b54609d1d2cfe8", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/ec6491f0e9428f0abca78a4f43b54609d1d2cfe8", "committedDate": "2020-12-15T22:00:26Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec6491f0e9428f0abca78a4f43b54609d1d2cfe8", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/ec6491f0e9428f0abca78a4f43b54609d1d2cfe8", "committedDate": "2020-12-15T22:00:26Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}, "afterCommit": {"oid": "4248ac57e2a9200bdb5561f113a515bde6e095ca", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/4248ac57e2a9200bdb5561f113a515bde6e095ca", "committedDate": "2020-12-15T22:06:08Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4248ac57e2a9200bdb5561f113a515bde6e095ca", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/4248ac57e2a9200bdb5561f113a515bde6e095ca", "committedDate": "2020-12-15T22:06:08Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}, "afterCommit": {"oid": "c8eea55be00a7b89f3f383b707666e1c4d61fcd1", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/c8eea55be00a7b89f3f383b707666e1c4d61fcd1", "committedDate": "2020-12-15T22:25:12Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODM2ODgw", "url": "https://github.com/ConsenSys/teku/pull/3414#pullrequestreview-553836880", "createdAt": "2020-12-16T16:02:21Z", "commit": {"oid": "c8eea55be00a7b89f3f383b707666e1c4d61fcd1"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjowMjoyMVrOIHMuNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjowODozNFrOIHNBnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQxOTM4MA==", "bodyText": "We're not currently using this setter.  This will need to be hooked up in ValidatorOptions.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r544419380", "createdAt": "2020-12-16T16:02:21Z", "author": {"login": "mbaxter"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorConfig.java", "diffHunk": "@@ -143,6 +146,10 @@ public Bytes32 getGraffiti() {\n     return graffiti;\n   }\n \n+  public Path getGraffitiFile() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eea55be00a7b89f3f383b707666e1c4d61fcd1"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQyMTU5OQ==", "bodyText": "We really don't want to throw when we're trying to propose a block, so we should probably go ahead and add a general catch block as well:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } catch (final GraffitiLoaderException e) {\n          \n          \n            \n                  LOG.error(\"Loading graffiti from file \" + graffitiFile + \" failed.\", e);\n          \n          \n            \n                }\n          \n          \n            \n                } catch (final GraffitiLoaderException e) {\n          \n          \n            \n                  LOG.error(\"Loading graffiti from file \" + graffitiFile + \" failed.\", e);\n          \n          \n            \n                } catch (final Exception e) {\n          \n          \n            \n                  LOG.error(\"Encountered unexpected exception while loading graffiti from file \" + graffitiFile, e);\n          \n          \n            \n                }", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r544421599", "createdAt": "2020-12-16T16:05:13Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/Graffiti.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiLoaderException;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiParser;\n+\n+/**\n+ * A type to hold the current graffiti value. Graffiti can be loaded from 2 places:\n+ *\n+ * <ul>\n+ *   <li>The config file at initialisation\n+ *   <li>The graffiti file which will be regularly checked\n+ * </ul>\n+ *\n+ * In the case that the file cannot be read, the graffiti value will remain unchanged from its\n+ * previous value.\n+ */\n+public class Graffiti {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private Bytes32 graffiti;\n+  private final Path graffitiFile;\n+\n+  public Graffiti(final Bytes32 graffiti, final Path graffitiFile) {\n+    this.graffiti = graffiti;\n+    this.graffitiFile = graffitiFile;\n+  }\n+\n+  public Optional<Bytes32> getGraffiti() {\n+    reloadGraffitiFromFile(graffitiFile);\n+    return Optional.of(graffiti);\n+  }\n+\n+  private void reloadGraffitiFromFile(final Path path) {\n+    try {\n+      this.graffiti = GraffitiParser.loadFromFile(path);\n+    } catch (final GraffitiLoaderException e) {\n+      LOG.error(\"Loading graffiti from file \" + graffitiFile + \" failed.\", e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eea55be00a7b89f3f383b707666e1c4d61fcd1"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQyNDM1MQ==", "bodyText": "Let's add some tests for this class.  A few cases I can think of:\n\ngraffiti and graffitiFile are empty / null\ngraffiti is empty / null\ngraffitiFile is empty / null\ngraffitiFile is set, but the actual file doesn't exist\nread from file successfully, remove file from disk, read again", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r544424351", "createdAt": "2020-12-16T16:08:34Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/Graffiti.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiLoaderException;\n+import tech.pegasys.teku.validator.client.loader.graffiti.GraffitiParser;\n+\n+/**\n+ * A type to hold the current graffiti value. Graffiti can be loaded from 2 places:\n+ *\n+ * <ul>\n+ *   <li>The config file at initialisation\n+ *   <li>The graffiti file which will be regularly checked\n+ * </ul>\n+ *\n+ * In the case that the file cannot be read, the graffiti value will remain unchanged from its\n+ * previous value.\n+ */\n+public class Graffiti {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8eea55be00a7b89f3f383b707666e1c4d61fcd1"}, "originalPosition": 35}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8eea55be00a7b89f3f383b707666e1c4d61fcd1", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/c8eea55be00a7b89f3f383b707666e1c4d61fcd1", "committedDate": "2020-12-15T22:25:12Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}, "afterCommit": {"oid": "2eb23562f9eab4bfdbf45adb343c26b5b1e76924", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/2eb23562f9eab4bfdbf45adb343c26b5b1e76924", "committedDate": "2020-12-16T20:55:20Z", "message": "Implemented all comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NjQ1OTc3", "url": "https://github.com/ConsenSys/teku/pull/3414#pullrequestreview-555645977", "createdAt": "2020-12-18T16:43:33Z", "commit": {"oid": "2eb23562f9eab4bfdbf45adb343c26b5b1e76924"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjo0MzozM1rOIIqaUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNjo1OTozNVrOIIq_6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk1NDM4Ng==", "bodyText": "(nit) I think we can use your String -> Bytes32 helper directly here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return Bytes32Parser.toBytes32(input);\n          \n          \n            \n                  return Bytes32Parser.toBytes32(value);", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r545954386", "createdAt": "2020-12-18T16:43:33Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/converter/GraffitiConverter.java", "diffHunk": "@@ -16,22 +16,21 @@\n import java.nio.charset.StandardCharsets;\n import org.apache.tuweni.bytes.Bytes32;\n import picocli.CommandLine;\n+import tech.pegasys.teku.validator.api.Bytes32Parser;\n \n public class GraffitiConverter implements CommandLine.ITypeConverter<Bytes32> {\n   @Override\n   public Bytes32 convert(final String value) {\n     byte[] input = value.getBytes(StandardCharsets.UTF_8);\n-    if (input.length > 32) {\n+    try {\n+      return Bytes32Parser.toBytes32(input);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb23562f9eab4bfdbf45adb343c26b5b1e76924"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk1NTgyOA==", "bodyText": "(nit)\nI'd revert to the original code here as it's a bit more efficient:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return Bytes32.wrap(Bytes32.rightPad(Bytes.wrap(input)));\n          \n          \n            \n                byte[] bytes = new byte[32];\n          \n          \n            \n                System.arraycopy(input, 0, bytes, 0, input.length);\n          \n          \n            \n                return Bytes32.wrap(bytes);", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r545955828", "createdAt": "2020-12-18T16:45:53Z", "author": {"login": "mbaxter"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/Bytes32Parser.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class Bytes32Parser {\n+\n+  public static Bytes32 toBytes32(final String input) {\n+    return toBytes32(input.getBytes(UTF_8));\n+  }\n+\n+  public static Bytes32 toBytes32(final byte[] input) {\n+    if (input.length > 32) {\n+      throw new IllegalArgumentException(\n+          \"'\"\n+              + new String(input, UTF_8)\n+              + \"' converts to \"\n+              + input.length\n+              + \" bytes. Input must be 32 bytes or less.\");\n+    }\n+    return Bytes32.wrap(Bytes32.rightPad(Bytes.wrap(input)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb23562f9eab4bfdbf45adb343c26b5b1e76924"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk1OTM4MQ==", "bodyText": "This reproduces the current behavior (users can optionally supply a static graffiti value).  If you want to make the new file-based option available, we'll need to add another instance variable to ValidatorOptions that accepts the graffiti file path.  For a similar example, see the --data-path annotations here.\nThen this can become:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .graffitiProvider(() -> Optional.of(graffiti)));\n          \n          \n            \n                            .graffitiProvider(new FileBackedGraffitiProvider(Optional.ofNullable(graffiti), Optional.ofNullable(graffitiFile)));", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r545959381", "createdAt": "2020-12-18T16:51:44Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java", "diffHunk": "@@ -82,7 +85,7 @@ public void configure(TekuConfiguration.Builder builder) {\n                 .validatorPerformanceTrackingMode(validatorPerformanceTrackingMode)\n                 .validatorExternalSignerSlashingProtectionEnabled(\n                     validatorExternalSignerSlashingProtectionEnabled)\n-                .graffiti(graffiti));\n+                .graffitiProvider(() -> Optional.of(graffiti)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb23562f9eab4bfdbf45adb343c26b5b1e76924"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk2MjA0Nw==", "bodyText": "(nit) This package shouldn't care about details around config files and CLI arguments - those are higher-level concerns that might change\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   <li>The config file at initialisation\n          \n          \n            \n             *   <li>The default value supplied at initialisation", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r545962047", "createdAt": "2020-12-18T16:56:21Z", "author": {"login": "mbaxter"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/FileBackedGraffitiProvider.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * A type to hold the current graffiti value. Graffiti can be loaded from 2 places:\n+ *\n+ * <ul>\n+ *   <li>The config file at initialisation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb23562f9eab4bfdbf45adb343c26b5b1e76924"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk2NDAwOQ==", "bodyText": "(nit) For these tests, I'd just use a simple lambda to return the empty value\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  new Validator(VALIDATOR1_KEY, validator1Signer, new FileBackedGraffitiProvider(Optional.empty(), Optional.empty()));\n          \n          \n            \n                  new Validator(VALIDATOR1_KEY, validator1Signer, () -> Optional.empty());", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r545964009", "createdAt": "2020-12-18T16:59:35Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/AbstractDutySchedulerTest.java", "diffHunk": "@@ -44,8 +45,10 @@\n   final ValidatorIndexProvider validatorIndexProvider = mock(ValidatorIndexProvider.class);\n   final Signer validator1Signer = mock(Signer.class);\n   final Signer validator2Signer = mock(Signer.class);\n-  final Validator validator1 = new Validator(VALIDATOR1_KEY, validator1Signer, Optional.empty());\n-  final Validator validator2 = new Validator(VALIDATOR2_KEY, validator2Signer, Optional.empty());\n+  final Validator validator1 =\n+      new Validator(VALIDATOR1_KEY, validator1Signer, new FileBackedGraffitiProvider(Optional.empty(), Optional.empty()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eb23562f9eab4bfdbf45adb343c26b5b1e76924"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2eb23562f9eab4bfdbf45adb343c26b5b1e76924", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/2eb23562f9eab4bfdbf45adb343c26b5b1e76924", "committedDate": "2020-12-16T20:55:20Z", "message": "Implemented all comments"}, "afterCommit": {"oid": "0bf9a7d9a10bf825124a726fc1f99c6da3db7b03", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/0bf9a7d9a10bf825124a726fc1f99c6da3db7b03", "committedDate": "2020-12-21T17:18:49Z", "message": "Implemented all comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb2ff03d2dff28c0ce62d86d6405d43c0709629d", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/fb2ff03d2dff28c0ce62d86d6405d43c0709629d", "committedDate": "2020-12-21T22:23:05Z", "message": "WIP nearly there..."}, "afterCommit": {"oid": "ff7cb8bf9e5730766aebadbd9aa7be90a0203937", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/ff7cb8bf9e5730766aebadbd9aa7be90a0203937", "committedDate": "2020-12-21T22:38:18Z", "message": "WIP nearly there..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c3f9fea0ec0a83b74553cbbed9035e7f3f79cc4", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/4c3f9fea0ec0a83b74553cbbed9035e7f3f79cc4", "committedDate": "2020-12-23T17:58:37Z", "message": "spotlessApply"}, "afterCommit": {"oid": "f3016ad9c3d5104bcc9f0573540908f8011776bb", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/f3016ad9c3d5104bcc9f0573540908f8011776bb", "committedDate": "2020-12-23T18:03:38Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MDk0MjAz", "url": "https://github.com/ConsenSys/teku/pull/3414#pullrequestreview-558094203", "createdAt": "2020-12-23T16:53:55Z", "commit": {"oid": "ff7cb8bf9e5730766aebadbd9aa7be90a0203937"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjo1Mzo1NVrOIKqa6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxOTo0NjoyNFrOIKyK5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA1MTY5MQ==", "bodyText": "(nit) Might be worth noting here that if the file read fails, we'll fall back to the --graffiti value if supplied:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"File to load graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32).\",\n          \n          \n            \n                      \"File to load graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32).  If file reading fails during block creation, teku will fall back to any value supplied via --graffiti.\",", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r548051691", "createdAt": "2020-12-23T16:53:55Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java", "diffHunk": "@@ -30,10 +35,18 @@\n       converter = GraffitiConverter.class,\n       paramLabel = \"<GRAFFITI STRING>\",\n       description =\n-          \"Graffiti to include during block creation (gets converted to bytes and padded to Bytes32).\",\n+          \"Graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32).\",\n       arity = \"1\")\n   private Bytes32 graffiti;\n \n+  @Option(\n+      names = {\"--validators-graffiti-file\"},\n+      paramLabel = \"<GRAFFITI FILE>\",\n+      description =\n+          \"File to load graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32).\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff7cb8bf9e5730766aebadbd9aa7be90a0203937"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA1MzQ1Ng==", "bodyText": "Since we no longer know how many bytes are contained in the string here, I'd simplify the error message to something like: \"'\" + value + \"' contains too many bytes.  A maximum of 32 bytes can be used as graffiti.\"", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r548053456", "createdAt": "2020-12-23T16:58:05Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/converter/GraffitiConverter.java", "diffHunk": "@@ -16,22 +16,20 @@\n import java.nio.charset.StandardCharsets;\n import org.apache.tuweni.bytes.Bytes32;\n import picocli.CommandLine;\n+import tech.pegasys.teku.validator.api.Bytes32Parser;\n \n public class GraffitiConverter implements CommandLine.ITypeConverter<Bytes32> {\n   @Override\n   public Bytes32 convert(final String value) {\n-    byte[] input = value.getBytes(StandardCharsets.UTF_8);\n-    if (input.length > 32) {\n+    try {\n+      return Bytes32Parser.toBytes32(value);\n+    } catch (final IllegalArgumentException e) {\n       throw (new CommandLine.TypeConversionException(\n           \"'\"\n               + value\n               + \"' converts to \"\n-              + input.length\n+              + value.length()\n               + \" bytes. A maximum of 32 bytes can be used as graffiti.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff7cb8bf9e5730766aebadbd9aa7be90a0203937"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE3ODA5Nw==", "bodyText": "If we want to use the default value on failure, this should be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return graffitiFile.map(this::loadGraffitiFromFile).orElse(defaultGraffiti);\n          \n          \n            \n                return graffitiFile.flatMap(this::loadGraffitiFromFile).or(() -> defaultGraffiti);", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r548178097", "createdAt": "2020-12-23T19:45:48Z", "author": {"login": "mbaxter"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/FileBackedGraffitiProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * A type to hold the current graffiti value. Graffiti can be loaded from 2 places:\n+ *\n+ * <ul>\n+ *   <li>The default value supplied at initialisation\n+ *   <li>The graffiti file which will be regularly checked\n+ * </ul>\n+ *\n+ * In the case that the file cannot be read, the default graffiti value will be used.\n+ */\n+public class FileBackedGraffitiProvider implements GraffitiProvider {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Optional<Bytes32> defaultGraffiti;\n+  private final Optional<Path> graffitiFile;\n+\n+  public FileBackedGraffitiProvider(\n+      final Optional<Bytes32> defaultGraffiti, final Optional<Path> graffitiFile) {\n+    this.defaultGraffiti = defaultGraffiti;\n+    this.graffitiFile = graffitiFile;\n+  }\n+\n+  @Override\n+  public Optional<Bytes32> get() {\n+    return graffitiFile.map(this::loadGraffitiFromFile).orElse(defaultGraffiti);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3016ad9c3d5104bcc9f0573540908f8011776bb"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODE3ODY2MQ==", "bodyText": "I believe this should be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(graffitiProvider.get()).isEqualTo(Optional.empty());\n          \n          \n            \n                assertThat(graffitiProvider.get()).isEqualTo(Optional.of(graffiti));", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r548178661", "createdAt": "2020-12-23T19:46:24Z", "author": {"login": "mbaxter"}, "path": "validator/api/src/test/java/tech/pegasys/teku/validator/api/FileBackedGraffitiProviderTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.Test;\n+\n+public class FileBackedGraffitiProviderTest {\n+  private static final Bytes32 graffiti = Bytes32Parser.toBytes32(\"myGraffiti\");\n+  private static final Bytes32 graffitiFromSampleFile = Bytes32Parser.toBytes32(\"123456789\");\n+\n+  @Test\n+  public void testBothEmpty() {\n+    var graffitiProvider = new FileBackedGraffitiProvider(Optional.empty(), Optional.empty());\n+    assertThat(graffitiProvider.get()).isNotPresent();\n+  }\n+\n+  @Test\n+  public void testGraffitiWithoutFile() {\n+    var graffitiProvider = new FileBackedGraffitiProvider(Optional.of(graffiti), Optional.empty());\n+    assertThat(graffitiProvider.get()).isEqualTo(Optional.of(graffiti));\n+  }\n+\n+  @Test\n+  public void testEmptyGraffitiWithFile() {\n+    var graffitiProvider =\n+        new FileBackedGraffitiProvider(\n+            Optional.empty(), Optional.of(Path.of(\"src/test/resources/graffitiSample.txt\")));\n+    assertThat(graffitiProvider.get()).isEqualTo(Optional.of(graffitiFromSampleFile));\n+  }\n+\n+  @Test\n+  public void testGraffitiWithFile() {\n+    var graffitiProvider =\n+        new FileBackedGraffitiProvider(\n+            Optional.of(graffiti), Optional.of(Path.of(\"src/test/resources/graffitiSample.txt\")));\n+    assertThat(graffitiProvider.get()).isEqualTo(Optional.of(graffitiFromSampleFile));\n+  }\n+\n+  @Test\n+  public void testFileDoesntExist() {\n+    var graffitiProvider =\n+        new FileBackedGraffitiProvider(\n+            Optional.of(graffiti), Optional.of(Path.of(\"src/test/resources/noGraffitiFound.txt\")));\n+    assertThat(graffitiProvider.get()).isEqualTo(Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3016ad9c3d5104bcc9f0573540908f8011776bb"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MTI3Njkw", "url": "https://github.com/ConsenSys/teku/pull/3414#pullrequestreview-559127690", "createdAt": "2020-12-28T12:36:51Z", "commit": {"oid": "f3016ad9c3d5104bcc9f0573540908f8011776bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMjozNjo1MVrOIL4nWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxMjozNjo1MVrOIL4nWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMzMjgyNg==", "bodyText": "InputStream (and the underlying file descriptor) is not closed after calling readNBytes. This would cause Validator.getGraffiti() to repeatedly open the graffiti file when producing a block. Of course, during finalization the FD would be closed, but I'd assume it's better practice to explicitely close it.", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r549332826", "createdAt": "2020-12-28T12:36:51Z", "author": {"login": "systemfreund"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/GraffitiParser.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class GraffitiParser {\n+  public static Bytes32 loadFromFile(final Path graffitiFile) throws GraffitiLoaderException {\n+    try {\n+      checkNotNull(graffitiFile, \"GraffitiFile path cannot be null\");\n+      if (Files.size(graffitiFile) > 32) {\n+        throw new GraffitiLoaderException(\"GraffitiFile size too big, maximum size is 32 bytes\");\n+      }\n+      return Bytes32Parser.toBytes32(strip(Files.newInputStream(graffitiFile).readNBytes(32)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3016ad9c3d5104bcc9f0573540908f8011776bb"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32061754ad2c2ee6f5c2eecef7a397d6bb42d981", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/32061754ad2c2ee6f5c2eecef7a397d6bb42d981", "committedDate": "2020-12-29T15:55:36Z", "message": "Addressed all comments"}, "afterCommit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/db4ab6e25dfbcbc484d371260a967dc863b69757", "committedDate": "2020-12-29T15:57:38Z", "message": "Addressed all comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5Njg2NTk4", "url": "https://github.com/ConsenSys/teku/pull/3414#pullrequestreview-559686598", "createdAt": "2020-12-29T20:19:06Z", "commit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMDoxOTowNlrOIMXQyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMDoxOTowNlrOIMXQyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTgzNDk1NA==", "bodyText": "A couple of boundary conditions:\n\nEmpty file\nfile of exactly 32 bytes\nfile of 33 bytes\n\nFor the 33 bytes i'd probably just shrink the 64 bytes file, but the test at the actual bound is worthwhile to demonstrate.\nI'd leave the current sample of 10 bytes, the middle sizes are most likely scenarios.\nGiven the file is read as bytes, could write 0x00 to file, this could be the '32 bytes' test from above... it would show that we can read 32 bytes, and that that 32 bytes can be 0x00.\nEmpty file and Bytes32.ZERO in file should both result in Bytes32.ZERO so it should be asserted against that value once it's been read.\nI like the tests overall, but boundaries tend to be where things can get fragile :)", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r549834954", "createdAt": "2020-12-29T20:19:06Z", "author": {"login": "rolfyone"}, "path": "validator/api/src/test/java/tech/pegasys/teku/validator/api/GraffitiParserTest.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n+import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;\n+\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.Test;\n+\n+class GraffitiParserTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5Njk0MTAx", "url": "https://github.com/ConsenSys/teku/pull/3414#pullrequestreview-559694101", "createdAt": "2020-12-29T20:45:53Z", "commit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMDo0NTo1NFrOIMXqlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMDo0NTo1NFrOIMXqlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0MTU1OA==", "bodyText": "nit: could consider creating a default constructor\npublic FileBackedGraffitiProvider() {\nthis(Optional.empty(), Optional.empty());\n}\n\nnearly half the calls to this provider are empty, so it'd clean up some of that...\nas an aside, generally when we say 'nit' we're just nit-picking and its optional - just in case that's not something you generally see...", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r549841558", "createdAt": "2020-12-29T20:45:54Z", "author": {"login": "rolfyone"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/FileBackedGraffitiProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * A type to hold the current graffiti value. Graffiti can be loaded from 2 places:\n+ *\n+ * <ul>\n+ *   <li>The default value supplied at initialisation\n+ *   <li>The graffiti file which will be regularly checked\n+ * </ul>\n+ *\n+ * In the case that the file cannot be read, the default graffiti value will be used.\n+ */\n+public class FileBackedGraffitiProvider implements GraffitiProvider {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Optional<Bytes32> defaultGraffiti;\n+  private final Optional<Path> graffitiFile;\n+\n+  public FileBackedGraffitiProvider(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5Njk1MTE3", "url": "https://github.com/ConsenSys/teku/pull/3414#pullrequestreview-559695117", "createdAt": "2020-12-29T20:49:22Z", "commit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMDo0OToyMlrOIMXuUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMDo0OToyMlrOIMXuUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0MjUxNQ==", "bodyText": "nit: could read the file size to variable and add context to the message, so it could be 'Graffiti file is too big (33 bytes), maximum size is 32 bytes'", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r549842515", "createdAt": "2020-12-29T20:49:22Z", "author": {"login": "rolfyone"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/GraffitiParser.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class GraffitiParser {\n+  public static Bytes32 loadFromFile(final Path graffitiFile) throws GraffitiLoaderException {\n+    try {\n+      checkNotNull(graffitiFile, \"GraffitiFile path cannot be null\");\n+      if (Files.size(graffitiFile) > 32) {\n+        throw new GraffitiLoaderException(\"GraffitiFile size too big, maximum size is 32 bytes\");\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NzAxNTMz", "url": "https://github.com/ConsenSys/teku/pull/3414#pullrequestreview-559701533", "createdAt": "2020-12-29T21:11:28Z", "commit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMToxMToyOFrOIMYEqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQyMToxMToyOFrOIMYEqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0ODIzNA==", "bodyText": "this is all just really a question and some thoughts to ponder:\nthis puts an interesting twist on the concept of 'file is too big' really... If it's a file with a bunch of whitespace that puts it over, this would strip that whitespace and you might be left with valid graffiti? I guess what I'm thinking is the poor person that has '\\n' at the end of their file that pushes them over the graffiti limit, but equally accidentally putting whitespace before?\nI'm not sure what the answer is, just a question, because really if we're stripping we could potentially not check file size up front but rather attempt to get 32 bytes of graffiti from the file.\nso realistic use cases\n\nbytes32\\n\n bytes32 (leading space)\n\\nbytes32\\n\n\nCurrently these stripped characters would be basically 'your loss', I guess, you have a \\n at the end, so only get 31 bytes of graffiti, but this does seem like you'd potentially have a frustrating time figuring out where that byte disappears...", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r549848234", "createdAt": "2020-12-29T21:11:28Z", "author": {"login": "rolfyone"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/GraffitiParser.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class GraffitiParser {\n+  public static Bytes32 loadFromFile(final Path graffitiFile) throws GraffitiLoaderException {\n+    try {\n+      checkNotNull(graffitiFile, \"GraffitiFile path cannot be null\");\n+      if (Files.size(graffitiFile) > 32) {\n+        throw new GraffitiLoaderException(\"GraffitiFile size too big, maximum size is 32 bytes\");\n+      }\n+      try (final InputStream graffitiFileInputStream = Files.newInputStream(graffitiFile)) {\n+        return Bytes32Parser.toBytes32(strip(graffitiFileInputStream.readNBytes(32)));\n+      }\n+    } catch (final FileNotFoundException e) {\n+      throw new GraffitiLoaderException(\"GraffitiFile file not found: \" + graffitiFile, e);\n+    } catch (final IOException e) {\n+      throw new GraffitiLoaderException(\n+          \"Unexpected IO error while reading GraffitiFile: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  private static byte[] strip(final byte[] value) {\n+    return new String(value, StandardCharsets.UTF_8).strip().getBytes(StandardCharsets.UTF_8);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "674e3ec37f042159e30be5619027aac820d483ca", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/674e3ec37f042159e30be5619027aac820d483ca", "committedDate": "2021-01-01T22:16:22Z", "message": "[Issue-3373] Implement a Graffiti class and a file loader in order to\nread graffiti from a file without restarting the validator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fa1d3cccea306237b10c1a7accaedce77150bcc", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/6fa1d3cccea306237b10c1a7accaedce77150bcc", "committedDate": "2021-01-01T22:16:22Z", "message": "Update teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java\n\nCo-authored-by: mbaxter <meredith.baxter@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09f4d654239fec853e082932e21ef0dab60bb6dd", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/09f4d654239fec853e082932e21ef0dab60bb6dd", "committedDate": "2021-01-01T22:16:22Z", "message": "Update validator/api/src/test/java/tech/pegasys/teku/validator/api/FileBackedGraffitiProviderTest.java\n\nCo-authored-by: mbaxter <meredith.baxter@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "852a0b56d92249b1e140e204d4cfffe71f809917", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/852a0b56d92249b1e140e204d4cfffe71f809917", "committedDate": "2021-01-01T22:16:22Z", "message": "Addressed all comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15b6661c40b349a401b7a9f313467a4bafedca1b", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/15b6661c40b349a401b7a9f313467a4bafedca1b", "committedDate": "2021-01-01T22:16:22Z", "message": "WIPity WIPity WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70518034670ff2020cf16f9f7b407b2547459f0c", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/70518034670ff2020cf16f9f7b407b2547459f0c", "committedDate": "2021-01-01T22:16:22Z", "message": "WIP SpotlessApply"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e0598c8955bc8d50b67674ee0cbcf79961dd80f", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/3e0598c8955bc8d50b67674ee0cbcf79961dd80f", "committedDate": "2021-01-01T22:11:31Z", "message": "WIP SpotlessApply"}, "afterCommit": {"oid": "70518034670ff2020cf16f9f7b407b2547459f0c", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/70518034670ff2020cf16f9f7b407b2547459f0c", "committedDate": "2021-01-01T22:16:22Z", "message": "WIP SpotlessApply"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMTAwOTE4", "url": "https://github.com/ConsenSys/teku/pull/3414#pullrequestreview-561100918", "createdAt": "2021-01-04T15:05:28Z", "commit": {"oid": "70518034670ff2020cf16f9f7b407b2547459f0c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTowNToyOFrOIN1B_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTowODozM1rOIN1JVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM3MTI2MQ==", "bodyText": "(nit) For tests that don't directly care about graffiti loading, we can just use Optional::empty as the graffiti provider:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    dataStructureUtil.randomPublicKey(), signer, new FileBackedGraffitiProvider());\n          \n          \n            \n                    dataStructureUtil.randomPublicKey(), signer, Optional::empty);", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r551371261", "createdAt": "2021-01-04T15:05:28Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/duties/AttestationProductionDutyTest.java", "diffHunk": "@@ -353,7 +354,8 @@ public void shouldCreateAttestationForMultipleValidatorsInDifferentCommittees()\n \n   public Validator createValidator() {\n     final Signer signer = mock(Signer.class);\n-    return new Validator(dataStructureUtil.randomPublicKey(), signer, Optional.empty());\n+    return new Validator(\n+        dataStructureUtil.randomPublicKey(), signer, new FileBackedGraffitiProvider());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70518034670ff2020cf16f9f7b407b2547459f0c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM3MzE0Mg==", "bodyText": "Sounds like a good plan @EdwardPrentice.  I think the main thing we want to avoid is reading in an excessive amount of data, but reading in even 64 bytes and then cleaning up / validating sounds good to me \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r551373142", "createdAt": "2021-01-04T15:08:33Z", "author": {"login": "mbaxter"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/GraffitiParser.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.api;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class GraffitiParser {\n+  public static Bytes32 loadFromFile(final Path graffitiFile) throws GraffitiLoaderException {\n+    try {\n+      checkNotNull(graffitiFile, \"GraffitiFile path cannot be null\");\n+      if (Files.size(graffitiFile) > 32) {\n+        throw new GraffitiLoaderException(\"GraffitiFile size too big, maximum size is 32 bytes\");\n+      }\n+      try (final InputStream graffitiFileInputStream = Files.newInputStream(graffitiFile)) {\n+        return Bytes32Parser.toBytes32(strip(graffitiFileInputStream.readNBytes(32)));\n+      }\n+    } catch (final FileNotFoundException e) {\n+      throw new GraffitiLoaderException(\"GraffitiFile file not found: \" + graffitiFile, e);\n+    } catch (final IOException e) {\n+      throw new GraffitiLoaderException(\n+          \"Unexpected IO error while reading GraffitiFile: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  private static byte[] strip(final byte[] value) {\n+    return new String(value, StandardCharsets.UTF_8).strip().getBytes(StandardCharsets.UTF_8);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTg0ODIzNA=="}, "originalCommit": {"oid": "db4ab6e25dfbcbc484d371260a967dc863b69757"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "748742f80ab262ac35ef04c8dbf793f4de9cc758", "author": {"user": {"login": "EdwardPrentice", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/748742f80ab262ac35ef04c8dbf793f4de9cc758", "committedDate": "2021-01-04T16:25:43Z", "message": "32 to 40"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxODkxMDU3", "url": "https://github.com/ConsenSys/teku/pull/3414#pullrequestreview-561891057", "createdAt": "2021-01-05T15:34:37Z", "commit": {"oid": "748742f80ab262ac35ef04c8dbf793f4de9cc758"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTozNDozN1rOIOb5Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTozNToyOFrOIOb7PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAwNzkzOQ==", "bodyText": "There's a stray paren:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"Graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32).\",\n          \n          \n            \n                      \"Graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32.\",", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r552007939", "createdAt": "2021-01-05T15:34:37Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java", "diffHunk": "@@ -30,10 +33,18 @@\n       converter = GraffitiConverter.class,\n       paramLabel = \"<GRAFFITI STRING>\",\n       description =\n-          \"Graffiti to include during block creation (gets converted to bytes and padded to Bytes32).\",\n+          \"Graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32).\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "748742f80ab262ac35ef04c8dbf793f4de9cc758"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAwODUwOQ==", "bodyText": "Another stray parenthesis:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"File to load graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32).  If file reading fails during block creation, teku will fall back to any value supplied via --graffiti.\",\n          \n          \n            \n                      \"File to load graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32.  If file reading fails during block creation, teku will fall back to any value supplied via --graffiti.\",", "url": "https://github.com/ConsenSys/teku/pull/3414#discussion_r552008509", "createdAt": "2021-01-05T15:35:28Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java", "diffHunk": "@@ -30,10 +33,18 @@\n       converter = GraffitiConverter.class,\n       paramLabel = \"<GRAFFITI STRING>\",\n       description =\n-          \"Graffiti to include during block creation (gets converted to bytes and padded to Bytes32).\",\n+          \"Graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32).\",\n       arity = \"1\")\n   private Bytes32 graffiti;\n \n+  @Option(\n+      names = {\"--validators-graffiti-file\"},\n+      paramLabel = \"<GRAFFITI FILE>\",\n+      description =\n+          \"File to load graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32).  If file reading fails during block creation, teku will fall back to any value supplied via --graffiti.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "748742f80ab262ac35ef04c8dbf793f4de9cc758"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bad39ae55bde0958dd40aaa7899bd322bb29fcf", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/6bad39ae55bde0958dd40aaa7899bd322bb29fcf", "committedDate": "2021-01-05T15:37:39Z", "message": "Cut stray paren"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a781355ce6884a383ee6d6d6000cde71282b73a9", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/a781355ce6884a383ee6d6d6000cde71282b73a9", "committedDate": "2021-01-05T15:38:12Z", "message": "Cut stray paren again"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxODk4NTQ1", "url": "https://github.com/ConsenSys/teku/pull/3414#pullrequestreview-561898545", "createdAt": "2021-01-05T15:42:59Z", "commit": {"oid": "a781355ce6884a383ee6d6d6000cde71282b73a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4398, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}