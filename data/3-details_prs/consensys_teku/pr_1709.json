{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMzIxNzMw", "number": 1709, "title": "Implement StableSubnetSubscriber", "bodyText": "PR Description\nThis PR is the first out of two PR's that are focused on solving BC-388.\nIt implements StableSubnetSubscriber, which is an object on ValidatorClient that randomly subscribes to a number of attention subnets, notifies BeaconNode when there's a change to those subscriptions, and when a subscription expires, renews it with a new random subscription.", "createdAt": "2020-05-01T22:17:17Z", "url": "https://github.com/ConsenSys/teku/pull/1709", "merged": true, "mergeCommit": {"oid": "a166d949d18e7ad10e8841681bc2c18cf6f7b979"}, "closed": true, "closedAt": "2020-05-11T16:40:11Z", "author": {"login": "cemozerr"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdJBnoAH2gAyNDEyMzIxNzMwOmY4NmIxZjI3YjVlYTcwNWNlMjNjOWQ0YzlkMmZkYjBlOWIzNjczZjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgSQuUgH2gAyNDEyMzIxNzMwOjFhNzMzOGFmNzg5YTAxYTZlODU4YWFjNzA2OTc3OGU0MDYyZDVjNmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f86b1f27b5ea705ce23c9d4c9d2fdb0e9b3673f6", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/f86b1f27b5ea705ce23c9d4c9d2fdb0e9b3673f6", "committedDate": "2020-05-01T22:00:48Z", "message": "Implement StableSubnetSubscriber"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "006e3f3b4472dc8724a537da4f3c9fae2e463721", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/006e3f3b4472dc8724a537da4f3c9fae2e463721", "committedDate": "2020-05-01T22:00:48Z", "message": "Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "375b82f4cf94ba53460e33a8307de7b1efbf3402", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/375b82f4cf94ba53460e33a8307de7b1efbf3402", "committedDate": "2020-05-01T22:09:33Z", "message": "Run spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MDQwNTUw", "url": "https://github.com/ConsenSys/teku/pull/1709#pullrequestreview-405040550", "createdAt": "2020-05-04T14:27:56Z", "commit": {"oid": "375b82f4cf94ba53460e33a8307de7b1efbf3402"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDoyNzo1NlrOGQC7Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNToxMDowN1rOGQE0sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ3ODMyNw==", "bodyText": "I'd define a small class that holds the subnet id & duration of the subscription:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void updateRandomSubnetSubscriptions(Map<Integer, UnsignedLong> subnetIdToUnsubscriptionSlot);\n          \n          \n            \n              void updatePersistentSubnetSubscriptions(List<SubnetSubscription> subscriptions);", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r419478327", "createdAt": "2020-05-04T14:27:56Z", "author": {"login": "mbaxter"}, "path": "validator/api/src/main/java/tech/pegasys/artemis/validator/api/ValidatorApiChannel.java", "diffHunk": "@@ -41,7 +42,9 @@\n \n   SafeFuture<Optional<Attestation>> createAggregate(AttestationData attestationData);\n \n-  void subscribeToBeaconCommittee(int committeeIndex, UnsignedLong aggregationSlot);\n+  void subscribeToBeaconCommitteeForAggregation(int committeeIndex, UnsignedLong aggregationSlot);\n+\n+  void updateRandomSubnetSubscriptions(Map<Integer, UnsignedLong> subnetIdToUnsubscriptionSlot);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375b82f4cf94ba53460e33a8307de7b1efbf3402"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUwNDk1MA==", "bodyText": "If you define a SubnetSubscription class, you can keep this as a TreeSet sorted by unsubscription slot.  Then we can find / replace expired subscriptions more efficiently.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final Map<Integer, UnsignedLong> subnetIdToUnsubscriptionSlot = new HashMap<>();\n          \n          \n            \n              private final NavigableSet<SubnetSubscription> subnetSubscriptions = new TreeSet<>();", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r419504950", "createdAt": "2020-05-04T15:03:46Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/StableSubnetSubscriber.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client;\n+\n+import static java.lang.Integer.min;\n+import static tech.pegasys.artemis.util.config.Constants.ATTESTATION_SUBNET_COUNT;\n+import static tech.pegasys.artemis.util.config.Constants.EPOCHS_PER_RANDOM_SUBNET_SUBSCRIPTION;\n+import static tech.pegasys.artemis.util.config.Constants.RANDOM_SUBNETS_PER_VALIDATOR;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import tech.pegasys.artemis.bls.BLSPublicKey;\n+import tech.pegasys.artemis.validator.api.ValidatorApiChannel;\n+\n+public class StableSubnetSubscriber {\n+\n+  private final ValidatorApiChannel validatorApiChannel;\n+  private final Map<BLSPublicKey, Validator> validators;\n+  private final Set<Integer> availableSubnetIndices =\n+      IntStream.range(0, ATTESTATION_SUBNET_COUNT).boxed().collect(Collectors.toSet());\n+  private final Map<Integer, UnsignedLong> subnetIdToUnsubscriptionSlot = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375b82f4cf94ba53460e33a8307de7b1efbf3402"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTUwOTQyNw==", "bodyText": "So, we're basically watching to see if this validators map is updated?  This seems a little dangerous in that we're assuming we have access to updates that are happening elsewhere, and it's possible we could also run into concurrency issues.\nIs it possible to instead call a method like StableSubnetSubscriber.updateValidatorCount(final int new validatorCount) when the validator count changes?", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r419509427", "createdAt": "2020-05-04T15:10:07Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/StableSubnetSubscriber.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client;\n+\n+import static java.lang.Integer.min;\n+import static tech.pegasys.artemis.util.config.Constants.ATTESTATION_SUBNET_COUNT;\n+import static tech.pegasys.artemis.util.config.Constants.EPOCHS_PER_RANDOM_SUBNET_SUBSCRIPTION;\n+import static tech.pegasys.artemis.util.config.Constants.RANDOM_SUBNETS_PER_VALIDATOR;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import tech.pegasys.artemis.bls.BLSPublicKey;\n+import tech.pegasys.artemis.validator.api.ValidatorApiChannel;\n+\n+public class StableSubnetSubscriber {\n+\n+  private final ValidatorApiChannel validatorApiChannel;\n+  private final Map<BLSPublicKey, Validator> validators;\n+  private final Set<Integer> availableSubnetIndices =\n+      IntStream.range(0, ATTESTATION_SUBNET_COUNT).boxed().collect(Collectors.toSet());\n+  private final Map<Integer, UnsignedLong> subnetIdToUnsubscriptionSlot = new HashMap<>();\n+  private final Random rand = new Random();\n+\n+  public StableSubnetSubscriber(\n+      ValidatorApiChannel validatorApiChannel, Map<BLSPublicKey, Validator> validators) {\n+    this.validatorApiChannel = validatorApiChannel;\n+    this.validators = validators;\n+    onSlot(UnsignedLong.ZERO);\n+  }\n+\n+  public void onSlot(UnsignedLong slot) {\n+    boolean updated = adjustNumberOfSubscriptionsToNumberOfValidators(slot);\n+\n+    // Iterate through current subscriptions to replace the ones that have expired\n+    final Iterator<Map.Entry<Integer, UnsignedLong>> iterator =\n+        subnetIdToUnsubscriptionSlot.entrySet().iterator();\n+    while (iterator.hasNext()) {\n+      final Map.Entry<Integer, UnsignedLong> entry = iterator.next();\n+      if (entry.getValue().compareTo(slot) > 0) {\n+        continue;\n+      }\n+\n+      iterator.remove();\n+      int subnetId = entry.getKey();\n+      availableSubnetIndices.add(subnetId);\n+      subscribeToNewRandomSubnet(slot);\n+      updated = true;\n+    }\n+\n+    // If any update was made to the subscriptions pass the new subscription set to BeaconNode\n+    if (updated) {\n+      validatorApiChannel.updateRandomSubnetSubscriptions(subnetIdToUnsubscriptionSlot);\n+    }\n+  }\n+\n+  /**\n+   * Adjusts the number of subscriptions to the number of validators. Returns true if there was any\n+   * change made to the number of subscribed subnets.\n+   */\n+  private boolean adjustNumberOfSubscriptionsToNumberOfValidators(UnsignedLong currentSlot) {\n+    boolean updated = false;\n+\n+    int totalNumberOfSubscriptions =\n+        min(ATTESTATION_SUBNET_COUNT, RANDOM_SUBNETS_PER_VALIDATOR * validators.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "375b82f4cf94ba53460e33a8307de7b1efbf3402"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b862339d9d82acccf94074b8b58333edf5c7c8b3", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/b862339d9d82acccf94074b8b58333edf5c7c8b3", "committedDate": "2020-05-04T23:30:04Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into implementStabilitySubnetSubscriber"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a999da106f4ffdacf862bc5894fa1a86376a70f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/2a999da106f4ffdacf862bc5894fa1a86376a70f", "committedDate": "2020-05-06T20:53:15Z", "message": "Define SubnetSubscription class & change API function name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "342f3c9527c8eb949a504c40446fd2cb293f489e", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/342f3c9527c8eb949a504c40446fd2cb293f489e", "committedDate": "2020-05-06T20:55:24Z", "message": "Create method to explicity update validator count"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70079615635740a245e72f383302e5d6bf8ab60b", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/70079615635740a245e72f383302e5d6bf8ab60b", "committedDate": "2020-05-06T20:57:12Z", "message": "Merge branch 'master' into implementStabilitySubnetSubscriber"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "331e276b4210fb34f56152e7da1e7a127a0c0efe", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/331e276b4210fb34f56152e7da1e7a127a0c0efe", "committedDate": "2020-05-06T21:05:15Z", "message": "Update Exception message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5686f407d128edd06b9706ef7fec3fd846f31b3", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/e5686f407d128edd06b9706ef7fec3fd846f31b3", "committedDate": "2020-05-06T21:11:04Z", "message": "Update Validator API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3310e3fce23e077373f54ee650bac902e17e1217", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/3310e3fce23e077373f54ee650bac902e17e1217", "committedDate": "2020-05-06T21:26:25Z", "message": "Merge branch 'master' into implementStabilitySubnetSubscriber"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MTAzMTU4", "url": "https://github.com/ConsenSys/teku/pull/1709#pullrequestreview-407103158", "createdAt": "2020-05-07T02:03:27Z", "commit": {"oid": "3310e3fce23e077373f54ee650bac902e17e1217"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMjowMzoyN1rOGRrw3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMjoyMzoxMVrOGRsEag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE5NTk5Ng==", "bodyText": "This will consider any two subscriptions with the same unsubscription slot as equal and thus only actually store one of them.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  new TreeSet<>(Comparator.comparing(SubnetSubscription::getUnsubscriptionSlot));\n          \n          \n            \n                  new TreeSet<>(Comparator.comparing(SubnetSubscription::getUnsubscriptionSlot).thenComparing(SubnetSubscription::getSubnetId));", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r421195996", "createdAt": "2020-05-07T02:03:27Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/StableSubnetSubscriber.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static java.lang.Integer.min;\n+import static tech.pegasys.teku.util.config.Constants.ATTESTATION_SUBNET_COUNT;\n+import static tech.pegasys.teku.util.config.Constants.EPOCHS_PER_RANDOM_SUBNET_SUBSCRIPTION;\n+import static tech.pegasys.teku.util.config.Constants.RANDOM_SUBNETS_PER_VALIDATOR;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Comparator;\n+import java.util.Iterator;\n+import java.util.NavigableSet;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import tech.pegasys.teku.validator.api.SubnetSubscription;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class StableSubnetSubscriber {\n+\n+  private final ValidatorApiChannel validatorApiChannel;\n+  private final Set<Integer> availableSubnetIndices =\n+      IntStream.range(0, ATTESTATION_SUBNET_COUNT).boxed().collect(Collectors.toSet());\n+  private final NavigableSet<SubnetSubscription> subnetSubscriptions =\n+      new TreeSet<>(Comparator.comparing(SubnetSubscription::getUnsubscriptionSlot));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3310e3fce23e077373f54ee650bac902e17e1217"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE5Njk5Mw==", "bodyText": "I don't think we should call this on creation - it will wind up activating things during the construction phase before we finish wiring everything in.  I'd probably just wait for the first actual slot event.", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r421196993", "createdAt": "2020-05-07T02:07:19Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/StableSubnetSubscriber.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static java.lang.Integer.min;\n+import static tech.pegasys.teku.util.config.Constants.ATTESTATION_SUBNET_COUNT;\n+import static tech.pegasys.teku.util.config.Constants.EPOCHS_PER_RANDOM_SUBNET_SUBSCRIPTION;\n+import static tech.pegasys.teku.util.config.Constants.RANDOM_SUBNETS_PER_VALIDATOR;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Comparator;\n+import java.util.Iterator;\n+import java.util.NavigableSet;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import tech.pegasys.teku.validator.api.SubnetSubscription;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class StableSubnetSubscriber {\n+\n+  private final ValidatorApiChannel validatorApiChannel;\n+  private final Set<Integer> availableSubnetIndices =\n+      IntStream.range(0, ATTESTATION_SUBNET_COUNT).boxed().collect(Collectors.toSet());\n+  private final NavigableSet<SubnetSubscription> subnetSubscriptions =\n+      new TreeSet<>(Comparator.comparing(SubnetSubscription::getUnsubscriptionSlot));\n+  private final Random rand = new Random();\n+\n+  private volatile int validatorCount;\n+\n+  public StableSubnetSubscriber(ValidatorApiChannel validatorApiChannel, int validatorCount) {\n+    this.validatorApiChannel = validatorApiChannel;\n+    this.validatorCount = validatorCount;\n+    onSlot(UnsignedLong.ZERO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3310e3fce23e077373f54ee650bac902e17e1217"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE5ODI4NQ==", "bodyText": "This should wind up throwing a ConcurrentModificationException because you're adding a new subscription into the map while iterating over it. The unit tests aren't picking it up because they're only replacing one expired subscription so the loop immediately exits after the change. If there was another entry the call to next() would fail though.\nI'd suggest just iterating through the existing subscriptions, removing any that have expired, then call adjustNumberOfSubscriptionsToNumberOfValidators to create as many more subscriptions as are now required.", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r421198285", "createdAt": "2020-05-07T02:12:16Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/StableSubnetSubscriber.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static java.lang.Integer.min;\n+import static tech.pegasys.teku.util.config.Constants.ATTESTATION_SUBNET_COUNT;\n+import static tech.pegasys.teku.util.config.Constants.EPOCHS_PER_RANDOM_SUBNET_SUBSCRIPTION;\n+import static tech.pegasys.teku.util.config.Constants.RANDOM_SUBNETS_PER_VALIDATOR;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Comparator;\n+import java.util.Iterator;\n+import java.util.NavigableSet;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import tech.pegasys.teku.validator.api.SubnetSubscription;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class StableSubnetSubscriber {\n+\n+  private final ValidatorApiChannel validatorApiChannel;\n+  private final Set<Integer> availableSubnetIndices =\n+      IntStream.range(0, ATTESTATION_SUBNET_COUNT).boxed().collect(Collectors.toSet());\n+  private final NavigableSet<SubnetSubscription> subnetSubscriptions =\n+      new TreeSet<>(Comparator.comparing(SubnetSubscription::getUnsubscriptionSlot));\n+  private final Random rand = new Random();\n+\n+  private volatile int validatorCount;\n+\n+  public StableSubnetSubscriber(ValidatorApiChannel validatorApiChannel, int validatorCount) {\n+    this.validatorApiChannel = validatorApiChannel;\n+    this.validatorCount = validatorCount;\n+    onSlot(UnsignedLong.ZERO);\n+  }\n+\n+  public void onSlot(UnsignedLong slot) {\n+    boolean updated = adjustNumberOfSubscriptionsToNumberOfValidators(slot, validatorCount);\n+\n+    // Iterate through current subscriptions to replace the ones that have expired\n+    final Iterator<SubnetSubscription> iterator = subnetSubscriptions.iterator();\n+    while (iterator.hasNext()) {\n+      final SubnetSubscription subnetSubscription = iterator.next();\n+      if (subnetSubscription.getUnsubscriptionSlot().compareTo(slot) > 0) {\n+        break;\n+      }\n+\n+      iterator.remove();\n+      int subnetId = subnetSubscription.getSubnetId();\n+      availableSubnetIndices.add(subnetId);\n+      subscribeToNewRandomSubnet(slot);\n+      updated = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3310e3fce23e077373f54ee650bac902e17e1217"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE5OTI5Nw==", "bodyText": "We should add a test to cover when the number of validators means we should subscribe to more subnets than exist. And for decreasing the number of validators when we still have enough to stay subscribed to all the subnets.\nAlso for decreasing the number of validators to 0.", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r421199297", "createdAt": "2020-05-07T02:16:22Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/StableSubnetSubscriberTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Set;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import tech.pegasys.teku.validator.api.SubnetSubscription;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class StableSubnetSubscriberTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3310e3fce23e077373f54ee650bac902e17e1217"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMDQ1NA==", "bodyText": "This Api won't work when there are more than one validator client running.  It should just be a subscribeToPersistentSubnetSubscriptions.\nI don't think we can provide an unsubscribe version because we don't know if another validator client still requires the subscription.  So if validators reduce we probably just need to wait for the subscription to expire.", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r421200454", "createdAt": "2020-05-07T02:20:45Z", "author": {"login": "ajsutton"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorApiChannel.java", "diffHunk": "@@ -41,7 +42,9 @@\n \n   SafeFuture<Optional<Attestation>> createAggregate(AttestationData attestationData);\n \n-  void subscribeToBeaconCommittee(int committeeIndex, UnsignedLong aggregationSlot);\n+  void subscribeToBeaconCommitteeForAggregation(int committeeIndex, UnsignedLong aggregationSlot);\n+\n+  void updatePersistentSubnetSubscriptions(Set<SubnetSubscription> subnetSubscriptions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3310e3fce23e077373f54ee650bac902e17e1217"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIwMTAwMg==", "bodyText": "I'd also suggest injecting the Random instance into StableSubnetSubscriber then you could inject one with a known seed (or a mock) and know which subscriptions should be added or removed.", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r421201002", "createdAt": "2020-05-07T02:23:11Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/StableSubnetSubscriberTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Set;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import tech.pegasys.teku.validator.api.SubnetSubscription;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class StableSubnetSubscriberTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE5OTI5Nw=="}, "originalCommit": {"oid": "3310e3fce23e077373f54ee650bac902e17e1217"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cabd95f3b97ce6843a8f783d9a36b8d6c5de1a42", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/cabd95f3b97ce6843a8f783d9a36b8d6c5de1a42", "committedDate": "2020-05-07T16:16:09Z", "message": "Add second comparison to TreeSet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54cfac4f20d7102db35db0c32c59478dac3277ac", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/54cfac4f20d7102db35db0c32c59478dac3277ac", "committedDate": "2020-05-07T16:16:09Z", "message": "Don't call onSlot at constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c32ccc87119e0d00d447195aa90d86a1e1f4f1c", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/6c32ccc87119e0d00d447195aa90d86a1e1f4f1c", "committedDate": "2020-05-07T16:16:09Z", "message": "Remove items and add items to the list in seperate loops"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12e5dd9cef99541ee3e05ff53bf0dcc8b1c962fb", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/12e5dd9cef99541ee3e05ff53bf0dcc8b1c962fb", "committedDate": "2020-05-07T16:16:09Z", "message": "Add tests for subscribing to all/no subnets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "940ec243dba7b518bc129b40b6ed9ef860cfe78f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/940ec243dba7b518bc129b40b6ed9ef860cfe78f", "committedDate": "2020-05-07T16:16:09Z", "message": "Inject the Random object and run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b08bd7fe09347d6bf6c4685b293d95b36b7ee6cc", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/b08bd7fe09347d6bf6c4685b293d95b36b7ee6cc", "committedDate": "2020-05-07T16:16:09Z", "message": "Change method name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "712cf6a10a83556f5e682a62eec85e873478d0db", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/712cf6a10a83556f5e682a62eec85e873478d0db", "committedDate": "2020-05-07T16:18:49Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ab4487171d3e1182ed20d3c8758bb7ca386d97b", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/4ab4487171d3e1182ed20d3c8758bb7ca386d97b", "committedDate": "2020-05-07T16:19:06Z", "message": "Merge branch 'master' into implementStabilitySubnetSubscriber"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0576936160311701db94834be0cac7ece32c557f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/0576936160311701db94834be0cac7ece32c557f", "committedDate": "2020-05-07T17:45:24Z", "message": "Fix subscription length bug & refactor test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cac1f1d52d6e0952236454001fb8282a63cb4e2", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/1cac1f1d52d6e0952236454001fb8282a63cb4e2", "committedDate": "2020-05-07T21:01:29Z", "message": "Merge branch 'master' into implementStabilitySubnetSubscriber"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1be58de850ef68665cf005430b46a0c880aa0225", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/1be58de850ef68665cf005430b46a0c880aa0225", "committedDate": "2020-05-08T14:50:15Z", "message": "Revert test to not depend on Set ordering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d199a56521ad2d4fc3aedd9a1078a0dd4e0936d6", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/d199a56521ad2d4fc3aedd9a1078a0dd4e0936d6", "committedDate": "2020-05-08T14:50:29Z", "message": "Merge branch 'master' into implementStabilitySubnetSubscriber"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NDQzOTI3", "url": "https://github.com/ConsenSys/teku/pull/1709#pullrequestreview-408443927", "createdAt": "2020-05-08T18:42:43Z", "commit": {"oid": "d199a56521ad2d4fc3aedd9a1078a0dd4e0936d6"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxODo0Mjo0M1rOGSvnTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOTowNzo1MVrOGSwXFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwNzY2MA==", "bodyText": "We only need to call this if we added subscriptions right?  We're currently calling this if we drop subscriptions as well.  We really only need to call this with the set of new subscriptions.", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r422307660", "createdAt": "2020-05-08T18:42:43Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/StableSubnetSubscriber.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static java.lang.Integer.min;\n+import static tech.pegasys.teku.util.config.Constants.ATTESTATION_SUBNET_COUNT;\n+import static tech.pegasys.teku.util.config.Constants.EPOCHS_PER_RANDOM_SUBNET_SUBSCRIPTION;\n+import static tech.pegasys.teku.util.config.Constants.RANDOM_SUBNETS_PER_VALIDATOR;\n+import static tech.pegasys.teku.util.config.Constants.SLOTS_PER_EPOCH;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.NavigableSet;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.IntStream;\n+import tech.pegasys.teku.validator.api.SubnetSubscription;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class StableSubnetSubscriber {\n+\n+  private final ValidatorApiChannel validatorApiChannel;\n+  private final Set<Integer> availableSubnetIndices = new HashSet<>();\n+  private final NavigableSet<SubnetSubscription> subnetSubscriptions =\n+      new TreeSet<>(\n+          Comparator.comparing(SubnetSubscription::getUnsubscriptionSlot)\n+              .thenComparing(SubnetSubscription::getSubnetId));\n+  private final Random random;\n+\n+  private volatile int validatorCount;\n+\n+  public StableSubnetSubscriber(\n+      ValidatorApiChannel validatorApiChannel, Random random, int validatorCount) {\n+    this.validatorApiChannel = validatorApiChannel;\n+    this.validatorCount = validatorCount;\n+    this.random = random;\n+    IntStream.range(0, ATTESTATION_SUBNET_COUNT).forEach(availableSubnetIndices::add);\n+  }\n+\n+  public void onSlot(UnsignedLong slot) {\n+    // Iterate through current subscriptions to remove the ones that have expired\n+    final Iterator<SubnetSubscription> iterator = subnetSubscriptions.iterator();\n+    while (iterator.hasNext()) {\n+      final SubnetSubscription subnetSubscription = iterator.next();\n+      if (subnetSubscription.getUnsubscriptionSlot().compareTo(slot) > 0) {\n+        break;\n+      }\n+\n+      iterator.remove();\n+      int subnetId = subnetSubscription.getSubnetId();\n+      availableSubnetIndices.add(subnetId);\n+    }\n+\n+    // Adjust the number of subscriptions\n+    // If any update was made to the subscriptions pass the new subscription set to BeaconNode\n+    if (adjustNumberOfSubscriptionsToNumberOfValidators(slot, validatorCount)) {\n+      validatorApiChannel.subscribeToPersistentSubnets(subnetSubscriptions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d199a56521ad2d4fc3aedd9a1078a0dd4e0936d6"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxMjkxOA==", "bodyText": "We should probably inspect the subscriptions - to make sure the subnets are distinct, and the unsubscribe slots are in bounds.", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r422312918", "createdAt": "2020-05-08T18:53:13Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/StableSubnetSubscriberTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static com.google.common.primitives.UnsignedLong.valueOf;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Random;\n+import java.util.Set;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import tech.pegasys.teku.util.config.Constants;\n+import tech.pegasys.teku.validator.api.SubnetSubscription;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class StableSubnetSubscriberTest {\n+  private final ValidatorApiChannel validatorApiChannel = mock(ValidatorApiChannel.class);\n+  private StableSubnetSubscriber stableSubnetSubscriber;\n+\n+  @BeforeEach\n+  void setUp() {\n+    stableSubnetSubscriber = new StableSubnetSubscriber(validatorApiChannel, new Random(), 2);\n+    stableSubnetSubscriber.onSlot(valueOf(0));\n+  }\n+\n+  @Test\n+  void shouldCreateEnoughSubscriptionsAtStart() {\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d199a56521ad2d4fc3aedd9a1078a0dd4e0936d6"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxMzUxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                stableSubnetSubscriber.updateValidatorCount(66);\n          \n          \n            \n                stableSubnetSubscriber.updateValidatorCount(ATTESTATION_SUBNET_COUNT + 2);", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r422313514", "createdAt": "2020-05-08T18:54:21Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/StableSubnetSubscriberTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static com.google.common.primitives.UnsignedLong.valueOf;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Random;\n+import java.util.Set;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import tech.pegasys.teku.util.config.Constants;\n+import tech.pegasys.teku.validator.api.SubnetSubscription;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class StableSubnetSubscriberTest {\n+  private final ValidatorApiChannel validatorApiChannel = mock(ValidatorApiChannel.class);\n+  private StableSubnetSubscriber stableSubnetSubscriber;\n+\n+  @BeforeEach\n+  void setUp() {\n+    stableSubnetSubscriber = new StableSubnetSubscriber(validatorApiChannel, new Random(), 2);\n+    stableSubnetSubscriber.onSlot(valueOf(0));\n+  }\n+\n+  @Test\n+  void shouldCreateEnoughSubscriptionsAtStart() {\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+  }\n+\n+  @Test\n+  void shouldLowerNumberOfSubscriptionsWhenNumberOfValidatorsDecrease() {\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    stableSubnetSubscriber.updateValidatorCount(1);\n+\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(argThat(arg -> arg.size() == 1));\n+  }\n+\n+  @Test\n+  void shouldIncreaseNumberOfSubscriptionsWhenNumberOfValidatorsIncrease() {\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    stableSubnetSubscriber.updateValidatorCount(3);\n+\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(argThat(arg -> arg.size() == 3));\n+  }\n+\n+  @Test\n+  void shouldSubscribeToAllSubnetsWhenNecessary() {\n+    // Attestation Subnet Count is 64\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    // with 66 validators, we'll have to subscribe to all subnets\n+    stableSubnetSubscriber.updateValidatorCount(66);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d199a56521ad2d4fc3aedd9a1078a0dd4e0936d6"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxNzg3OA==", "bodyText": "looks like this is unused", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r422317878", "createdAt": "2020-05-08T19:03:35Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/StableSubnetSubscriberTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static com.google.common.primitives.UnsignedLong.valueOf;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Random;\n+import java.util.Set;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import tech.pegasys.teku.util.config.Constants;\n+import tech.pegasys.teku.validator.api.SubnetSubscription;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class StableSubnetSubscriberTest {\n+  private final ValidatorApiChannel validatorApiChannel = mock(ValidatorApiChannel.class);\n+  private StableSubnetSubscriber stableSubnetSubscriber;\n+\n+  @BeforeEach\n+  void setUp() {\n+    stableSubnetSubscriber = new StableSubnetSubscriber(validatorApiChannel, new Random(), 2);\n+    stableSubnetSubscriber.onSlot(valueOf(0));\n+  }\n+\n+  @Test\n+  void shouldCreateEnoughSubscriptionsAtStart() {\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+  }\n+\n+  @Test\n+  void shouldLowerNumberOfSubscriptionsWhenNumberOfValidatorsDecrease() {\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    stableSubnetSubscriber.updateValidatorCount(1);\n+\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(argThat(arg -> arg.size() == 1));\n+  }\n+\n+  @Test\n+  void shouldIncreaseNumberOfSubscriptionsWhenNumberOfValidatorsIncrease() {\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    stableSubnetSubscriber.updateValidatorCount(3);\n+\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(argThat(arg -> arg.size() == 3));\n+  }\n+\n+  @Test\n+  void shouldSubscribeToAllSubnetsWhenNecessary() {\n+    // Attestation Subnet Count is 64\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    // with 66 validators, we'll have to subscribe to all subnets\n+    stableSubnetSubscriber.updateValidatorCount(66);\n+\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(\n+            argThat(arg -> arg.size() == Constants.ATTESTATION_SUBNET_COUNT));\n+  }\n+\n+  @Test\n+  void shouldSubscribeToAllSubnetsEvenIfValidatorNumberIsDecreased() {\n+    // Attestation Subnet Count is 64\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    stableSubnetSubscriber.updateValidatorCount(72);\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(\n+            argThat(arg -> arg.size() == Constants.ATTESTATION_SUBNET_COUNT));\n+\n+    stableSubnetSubscriber.updateValidatorCount(65);\n+    stableSubnetSubscriber.onSlot(valueOf(2));\n+\n+    verifyNoMoreInteractions(validatorApiChannel);\n+  }\n+\n+  @Test\n+  void shouldUnsubscribeFromAllSubnetsWhenValidatorCountGoesToZero() {\n+    // Attestation Subnet Count is 64\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    stableSubnetSubscriber.updateValidatorCount(72);\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(\n+            argThat(arg -> arg.size() == Constants.ATTESTATION_SUBNET_COUNT));\n+\n+    stableSubnetSubscriber.updateValidatorCount(0);\n+    stableSubnetSubscriber.onSlot(valueOf(2));\n+\n+    verify(validatorApiChannel, times(3))\n+        .subscribeToPersistentSubnets(argThat(arg -> arg.size() == 0));\n+  }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  void shouldReplaceExpiredSubscriptionsWithNewOnes() {\n+    ValidatorApiChannel validatorApiChannel = mock(ValidatorApiChannel.class);\n+    Random mockRandom = mock(Random.class);\n+    when(mockRandom.nextInt(2)).thenReturn(10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d199a56521ad2d4fc3aedd9a1078a0dd4e0936d6"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxOTI5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                stableSubnetSubscriber.updateValidatorCount(72);\n          \n          \n            \n                stableSubnetSubscriber.updateValidatorCount(ATTESTATION_SUBNET_COUNT + 8);", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r422319296", "createdAt": "2020-05-08T19:06:36Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/StableSubnetSubscriberTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static com.google.common.primitives.UnsignedLong.valueOf;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Random;\n+import java.util.Set;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import tech.pegasys.teku.util.config.Constants;\n+import tech.pegasys.teku.validator.api.SubnetSubscription;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class StableSubnetSubscriberTest {\n+  private final ValidatorApiChannel validatorApiChannel = mock(ValidatorApiChannel.class);\n+  private StableSubnetSubscriber stableSubnetSubscriber;\n+\n+  @BeforeEach\n+  void setUp() {\n+    stableSubnetSubscriber = new StableSubnetSubscriber(validatorApiChannel, new Random(), 2);\n+    stableSubnetSubscriber.onSlot(valueOf(0));\n+  }\n+\n+  @Test\n+  void shouldCreateEnoughSubscriptionsAtStart() {\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+  }\n+\n+  @Test\n+  void shouldLowerNumberOfSubscriptionsWhenNumberOfValidatorsDecrease() {\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    stableSubnetSubscriber.updateValidatorCount(1);\n+\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(argThat(arg -> arg.size() == 1));\n+  }\n+\n+  @Test\n+  void shouldIncreaseNumberOfSubscriptionsWhenNumberOfValidatorsIncrease() {\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    stableSubnetSubscriber.updateValidatorCount(3);\n+\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(argThat(arg -> arg.size() == 3));\n+  }\n+\n+  @Test\n+  void shouldSubscribeToAllSubnetsWhenNecessary() {\n+    // Attestation Subnet Count is 64\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    // with 66 validators, we'll have to subscribe to all subnets\n+    stableSubnetSubscriber.updateValidatorCount(66);\n+\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(\n+            argThat(arg -> arg.size() == Constants.ATTESTATION_SUBNET_COUNT));\n+  }\n+\n+  @Test\n+  void shouldSubscribeToAllSubnetsEvenIfValidatorNumberIsDecreased() {\n+    // Attestation Subnet Count is 64\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    stableSubnetSubscriber.updateValidatorCount(72);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d199a56521ad2d4fc3aedd9a1078a0dd4e0936d6"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxOTQ2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                stableSubnetSubscriber.updateValidatorCount(65);\n          \n          \n            \n                stableSubnetSubscriber.updateValidatorCount(ATTESTATION_SUBNET_COUNT);", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r422319462", "createdAt": "2020-05-08T19:06:59Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/StableSubnetSubscriberTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static com.google.common.primitives.UnsignedLong.valueOf;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Random;\n+import java.util.Set;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import tech.pegasys.teku.util.config.Constants;\n+import tech.pegasys.teku.validator.api.SubnetSubscription;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class StableSubnetSubscriberTest {\n+  private final ValidatorApiChannel validatorApiChannel = mock(ValidatorApiChannel.class);\n+  private StableSubnetSubscriber stableSubnetSubscriber;\n+\n+  @BeforeEach\n+  void setUp() {\n+    stableSubnetSubscriber = new StableSubnetSubscriber(validatorApiChannel, new Random(), 2);\n+    stableSubnetSubscriber.onSlot(valueOf(0));\n+  }\n+\n+  @Test\n+  void shouldCreateEnoughSubscriptionsAtStart() {\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+  }\n+\n+  @Test\n+  void shouldLowerNumberOfSubscriptionsWhenNumberOfValidatorsDecrease() {\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    stableSubnetSubscriber.updateValidatorCount(1);\n+\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(argThat(arg -> arg.size() == 1));\n+  }\n+\n+  @Test\n+  void shouldIncreaseNumberOfSubscriptionsWhenNumberOfValidatorsIncrease() {\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    stableSubnetSubscriber.updateValidatorCount(3);\n+\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(argThat(arg -> arg.size() == 3));\n+  }\n+\n+  @Test\n+  void shouldSubscribeToAllSubnetsWhenNecessary() {\n+    // Attestation Subnet Count is 64\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    // with 66 validators, we'll have to subscribe to all subnets\n+    stableSubnetSubscriber.updateValidatorCount(66);\n+\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(\n+            argThat(arg -> arg.size() == Constants.ATTESTATION_SUBNET_COUNT));\n+  }\n+\n+  @Test\n+  void shouldSubscribeToAllSubnetsEvenIfValidatorNumberIsDecreased() {\n+    // Attestation Subnet Count is 64\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    stableSubnetSubscriber.updateValidatorCount(72);\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(\n+            argThat(arg -> arg.size() == Constants.ATTESTATION_SUBNET_COUNT));\n+\n+    stableSubnetSubscriber.updateValidatorCount(65);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d199a56521ad2d4fc3aedd9a1078a0dd4e0936d6"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxOTg5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                stableSubnetSubscriber.updateValidatorCount(72);\n          \n          \n            \n                stableSubnetSubscriber.updateValidatorCount(ATTESTATION_SUBNET_COUNT + 8);", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r422319892", "createdAt": "2020-05-08T19:07:51Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/StableSubnetSubscriberTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static com.google.common.primitives.UnsignedLong.valueOf;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Random;\n+import java.util.Set;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import tech.pegasys.teku.util.config.Constants;\n+import tech.pegasys.teku.validator.api.SubnetSubscription;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class StableSubnetSubscriberTest {\n+  private final ValidatorApiChannel validatorApiChannel = mock(ValidatorApiChannel.class);\n+  private StableSubnetSubscriber stableSubnetSubscriber;\n+\n+  @BeforeEach\n+  void setUp() {\n+    stableSubnetSubscriber = new StableSubnetSubscriber(validatorApiChannel, new Random(), 2);\n+    stableSubnetSubscriber.onSlot(valueOf(0));\n+  }\n+\n+  @Test\n+  void shouldCreateEnoughSubscriptionsAtStart() {\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+  }\n+\n+  @Test\n+  void shouldLowerNumberOfSubscriptionsWhenNumberOfValidatorsDecrease() {\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    stableSubnetSubscriber.updateValidatorCount(1);\n+\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(argThat(arg -> arg.size() == 1));\n+  }\n+\n+  @Test\n+  void shouldIncreaseNumberOfSubscriptionsWhenNumberOfValidatorsIncrease() {\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    stableSubnetSubscriber.updateValidatorCount(3);\n+\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(argThat(arg -> arg.size() == 3));\n+  }\n+\n+  @Test\n+  void shouldSubscribeToAllSubnetsWhenNecessary() {\n+    // Attestation Subnet Count is 64\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    // with 66 validators, we'll have to subscribe to all subnets\n+    stableSubnetSubscriber.updateValidatorCount(66);\n+\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(\n+            argThat(arg -> arg.size() == Constants.ATTESTATION_SUBNET_COUNT));\n+  }\n+\n+  @Test\n+  void shouldSubscribeToAllSubnetsEvenIfValidatorNumberIsDecreased() {\n+    // Attestation Subnet Count is 64\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    stableSubnetSubscriber.updateValidatorCount(72);\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(\n+            argThat(arg -> arg.size() == Constants.ATTESTATION_SUBNET_COUNT));\n+\n+    stableSubnetSubscriber.updateValidatorCount(65);\n+    stableSubnetSubscriber.onSlot(valueOf(2));\n+\n+    verifyNoMoreInteractions(validatorApiChannel);\n+  }\n+\n+  @Test\n+  void shouldUnsubscribeFromAllSubnetsWhenValidatorCountGoesToZero() {\n+    // Attestation Subnet Count is 64\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(argThat(arg -> arg.size() == 2));\n+\n+    stableSubnetSubscriber.updateValidatorCount(72);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d199a56521ad2d4fc3aedd9a1078a0dd4e0936d6"}, "originalPosition": 112}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e08d59e0738abc453ed17cf2601c82a384354b9a", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/e08d59e0738abc453ed17cf2601c82a384354b9a", "committedDate": "2020-05-08T19:35:58Z", "message": "Do not notify any change when validators decrease"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NDkzMDQ1", "url": "https://github.com/ConsenSys/teku/pull/1709#pullrequestreview-408493045", "createdAt": "2020-05-08T20:05:40Z", "commit": {"oid": "d199a56521ad2d4fc3aedd9a1078a0dd4e0936d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDowNTo0MFrOGSyB5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDowNTo0MFrOGSyB5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NzIzOQ==", "bodyText": "Does this get called anywhere outside of tests?", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r422347239", "createdAt": "2020-05-08T20:05:40Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/StableSubnetSubscriber.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static java.lang.Integer.min;\n+import static tech.pegasys.teku.util.config.Constants.ATTESTATION_SUBNET_COUNT;\n+import static tech.pegasys.teku.util.config.Constants.EPOCHS_PER_RANDOM_SUBNET_SUBSCRIPTION;\n+import static tech.pegasys.teku.util.config.Constants.RANDOM_SUBNETS_PER_VALIDATOR;\n+import static tech.pegasys.teku.util.config.Constants.SLOTS_PER_EPOCH;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.NavigableSet;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.IntStream;\n+import tech.pegasys.teku.validator.api.SubnetSubscription;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class StableSubnetSubscriber {\n+\n+  private final ValidatorApiChannel validatorApiChannel;\n+  private final Set<Integer> availableSubnetIndices = new HashSet<>();\n+  private final NavigableSet<SubnetSubscription> subnetSubscriptions =\n+      new TreeSet<>(\n+          Comparator.comparing(SubnetSubscription::getUnsubscriptionSlot)\n+              .thenComparing(SubnetSubscription::getSubnetId));\n+  private final Random random;\n+\n+  private volatile int validatorCount;\n+\n+  public StableSubnetSubscriber(\n+      ValidatorApiChannel validatorApiChannel, Random random, int validatorCount) {\n+    this.validatorApiChannel = validatorApiChannel;\n+    this.validatorCount = validatorCount;\n+    this.random = random;\n+    IntStream.range(0, ATTESTATION_SUBNET_COUNT).forEach(availableSubnetIndices::add);\n+  }\n+\n+  public void onSlot(UnsignedLong slot) {\n+    // Iterate through current subscriptions to remove the ones that have expired\n+    final Iterator<SubnetSubscription> iterator = subnetSubscriptions.iterator();\n+    while (iterator.hasNext()) {\n+      final SubnetSubscription subnetSubscription = iterator.next();\n+      if (subnetSubscription.getUnsubscriptionSlot().compareTo(slot) > 0) {\n+        break;\n+      }\n+\n+      iterator.remove();\n+      int subnetId = subnetSubscription.getSubnetId();\n+      availableSubnetIndices.add(subnetId);\n+    }\n+\n+    // Adjust the number of subscriptions\n+    // If any update was made to the subscriptions pass the new subscription set to BeaconNode\n+    if (adjustNumberOfSubscriptionsToNumberOfValidators(slot, validatorCount)) {\n+      validatorApiChannel.subscribeToPersistentSubnets(subnetSubscriptions);\n+    }\n+  }\n+\n+  public void updateValidatorCount(final int validatorCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d199a56521ad2d4fc3aedd9a1078a0dd4e0936d6"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e322240db132e33d11b1d7f01befdbaff17c7e1", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/0e322240db132e33d11b1d7f01befdbaff17c7e1", "committedDate": "2020-05-08T21:04:23Z", "message": "Add more checks to the tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c251f8ea711ba90302f4951cac1d553ed9494342", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/c251f8ea711ba90302f4951cac1d553ed9494342", "committedDate": "2020-05-08T21:05:07Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2d7619b8896f166b174b80fd9b28e07a8383202", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/f2d7619b8896f166b174b80fd9b28e07a8383202", "committedDate": "2020-05-08T21:56:06Z", "message": "Fix assemble warnings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5Mjg0MDky", "url": "https://github.com/ConsenSys/teku/pull/1709#pullrequestreview-409284092", "createdAt": "2020-05-11T15:30:02Z", "commit": {"oid": "f2d7619b8896f166b174b80fd9b28e07a8383202"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNTozMDowMlrOGThhOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNTozOTo0N1rOGTh8Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyNTMwNA==", "bodyText": "What if adjustNumberOfSubscriptionsToNumberOfValidators returns the new subscriptions, and if that set is non-empty we call validatorApiChannel.subscribeToPersistentSubnets?  The would mean we're requesting the minimum amount of work from the validatorApiChannel.", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r423125304", "createdAt": "2020-05-11T15:30:02Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/StableSubnetSubscriber.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static java.lang.Integer.min;\n+import static tech.pegasys.teku.util.config.Constants.ATTESTATION_SUBNET_COUNT;\n+import static tech.pegasys.teku.util.config.Constants.EPOCHS_PER_RANDOM_SUBNET_SUBSCRIPTION;\n+import static tech.pegasys.teku.util.config.Constants.RANDOM_SUBNETS_PER_VALIDATOR;\n+import static tech.pegasys.teku.util.config.Constants.SLOTS_PER_EPOCH;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.NavigableSet;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.IntStream;\n+import tech.pegasys.teku.validator.api.SubnetSubscription;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class StableSubnetSubscriber {\n+\n+  private final ValidatorApiChannel validatorApiChannel;\n+  private final Set<Integer> availableSubnetIndices = new HashSet<>();\n+  private final NavigableSet<SubnetSubscription> subnetSubscriptions =\n+      new TreeSet<>(\n+          Comparator.comparing(SubnetSubscription::getUnsubscriptionSlot)\n+              .thenComparing(SubnetSubscription::getSubnetId));\n+  private final Random random;\n+\n+  private volatile int validatorCount;\n+\n+  public StableSubnetSubscriber(\n+      ValidatorApiChannel validatorApiChannel, Random random, int validatorCount) {\n+    this.validatorApiChannel = validatorApiChannel;\n+    this.validatorCount = validatorCount;\n+    this.random = random;\n+    IntStream.range(0, ATTESTATION_SUBNET_COUNT).forEach(availableSubnetIndices::add);\n+  }\n+\n+  public void onSlot(UnsignedLong slot) {\n+    // Iterate through current subscriptions to remove the ones that have expired\n+    final Iterator<SubnetSubscription> iterator = subnetSubscriptions.iterator();\n+    while (iterator.hasNext()) {\n+      final SubnetSubscription subnetSubscription = iterator.next();\n+      if (subnetSubscription.getUnsubscriptionSlot().compareTo(slot) > 0) {\n+        break;\n+      }\n+\n+      iterator.remove();\n+      int subnetId = subnetSubscription.getSubnetId();\n+      availableSubnetIndices.add(subnetId);\n+    }\n+\n+    // Adjust the number of subscriptions\n+    // If number of subscriptions increased, pass the new subscription set to BeaconNode\n+    if (adjustNumberOfSubscriptionsToNumberOfValidators(slot, validatorCount)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d7619b8896f166b174b80fd9b28e07a8383202"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEyNTk0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Adjusts the number of subscriptions to the number of validators. Returns true if there was any\n          \n          \n            \n               * change made to the number of subscribed subnets.\n          \n          \n            \n               * Adjusts the number of subscriptions to the number of validators. Returns true if any\n          \n          \n            \n               * new subscriptions were added.", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r423125946", "createdAt": "2020-05-11T15:30:55Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/StableSubnetSubscriber.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static java.lang.Integer.min;\n+import static tech.pegasys.teku.util.config.Constants.ATTESTATION_SUBNET_COUNT;\n+import static tech.pegasys.teku.util.config.Constants.EPOCHS_PER_RANDOM_SUBNET_SUBSCRIPTION;\n+import static tech.pegasys.teku.util.config.Constants.RANDOM_SUBNETS_PER_VALIDATOR;\n+import static tech.pegasys.teku.util.config.Constants.SLOTS_PER_EPOCH;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.NavigableSet;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.IntStream;\n+import tech.pegasys.teku.validator.api.SubnetSubscription;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class StableSubnetSubscriber {\n+\n+  private final ValidatorApiChannel validatorApiChannel;\n+  private final Set<Integer> availableSubnetIndices = new HashSet<>();\n+  private final NavigableSet<SubnetSubscription> subnetSubscriptions =\n+      new TreeSet<>(\n+          Comparator.comparing(SubnetSubscription::getUnsubscriptionSlot)\n+              .thenComparing(SubnetSubscription::getSubnetId));\n+  private final Random random;\n+\n+  private volatile int validatorCount;\n+\n+  public StableSubnetSubscriber(\n+      ValidatorApiChannel validatorApiChannel, Random random, int validatorCount) {\n+    this.validatorApiChannel = validatorApiChannel;\n+    this.validatorCount = validatorCount;\n+    this.random = random;\n+    IntStream.range(0, ATTESTATION_SUBNET_COUNT).forEach(availableSubnetIndices::add);\n+  }\n+\n+  public void onSlot(UnsignedLong slot) {\n+    // Iterate through current subscriptions to remove the ones that have expired\n+    final Iterator<SubnetSubscription> iterator = subnetSubscriptions.iterator();\n+    while (iterator.hasNext()) {\n+      final SubnetSubscription subnetSubscription = iterator.next();\n+      if (subnetSubscription.getUnsubscriptionSlot().compareTo(slot) > 0) {\n+        break;\n+      }\n+\n+      iterator.remove();\n+      int subnetId = subnetSubscription.getSubnetId();\n+      availableSubnetIndices.add(subnetId);\n+    }\n+\n+    // Adjust the number of subscriptions\n+    // If number of subscriptions increased, pass the new subscription set to BeaconNode\n+    if (adjustNumberOfSubscriptionsToNumberOfValidators(slot, validatorCount)) {\n+      validatorApiChannel.subscribeToPersistentSubnets(subnetSubscriptions);\n+    }\n+  }\n+\n+  public void updateValidatorCount(final int validatorCount) {\n+    this.validatorCount = validatorCount;\n+  }\n+\n+  /**\n+   * Adjusts the number of subscriptions to the number of validators. Returns true if there was any\n+   * change made to the number of subscribed subnets.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d7619b8896f166b174b80fd9b28e07a8383202"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEzMjIyMw==", "bodyText": "Since we're dealing with randomness, might be nice to add a test that generates a large number of subscriptions and checks that they're all correct (in bounds and distinct).", "url": "https://github.com/ConsenSys/teku/pull/1709#discussion_r423132223", "createdAt": "2020-05-11T15:39:47Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/StableSubnetSubscriberTest.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static com.google.common.primitives.UnsignedLong.ONE;\n+import static com.google.common.primitives.UnsignedLong.ZERO;\n+import static com.google.common.primitives.UnsignedLong.valueOf;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import tech.pegasys.teku.util.config.Constants;\n+import tech.pegasys.teku.validator.api.SubnetSubscription;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class StableSubnetSubscriberTest {\n+  @BeforeEach\n+  void setUp() {\n+    Constants.EPOCHS_PER_RANDOM_SUBNET_SUBSCRIPTION = 5;\n+  }\n+\n+  @Test\n+  void shouldCreateEnoughSubscriptionsAtStart() {\n+    ValidatorApiChannel validatorApiChannel = mock(ValidatorApiChannel.class);\n+    StableSubnetSubscriber stableSubnetSubscriber =\n+        new StableSubnetSubscriber(validatorApiChannel, new Random(), 2);\n+\n+    stableSubnetSubscriber.onSlot(ZERO);\n+    ArgumentCaptor<Set<SubnetSubscription>> subnetSubcriptions = ArgumentCaptor.forClass(Set.class);\n+\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(subnetSubcriptions.capture());\n+    assertThat(subnetSubcriptions.getValue()).hasSize(2);\n+    assertUnsubscribeSlotsAreInBound(subnetSubcriptions.getValue(), ZERO);\n+    assertSubnetsAreDistinct(subnetSubcriptions.getValue());\n+  }\n+\n+  @Test\n+  void shouldNotNotifyAnyChangeWhenNumberOfValidatorsDecrease() {\n+    ValidatorApiChannel validatorApiChannel = mock(ValidatorApiChannel.class);\n+    StableSubnetSubscriber stableSubnetSubscriber =\n+        new StableSubnetSubscriber(validatorApiChannel, new Random(), 2);\n+    ArgumentCaptor<Set<SubnetSubscription>> subnetSubcriptions = ArgumentCaptor.forClass(Set.class);\n+\n+    stableSubnetSubscriber.onSlot(ZERO);\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(subnetSubcriptions.capture());\n+\n+    assertUnsubscribeSlotsAreInBound(subnetSubcriptions.getValue(), ZERO);\n+    assertSubnetsAreDistinct(subnetSubcriptions.getValue());\n+\n+    stableSubnetSubscriber.updateValidatorCount(1);\n+\n+    stableSubnetSubscriber.onSlot(UnsignedLong.ONE);\n+    verifyNoMoreInteractions(validatorApiChannel);\n+  }\n+\n+  @Test\n+  void shouldIncreaseNumberOfSubscriptionsWhenNumberOfValidatorsIncrease() {\n+    ValidatorApiChannel validatorApiChannel = mock(ValidatorApiChannel.class);\n+    StableSubnetSubscriber stableSubnetSubscriber =\n+        new StableSubnetSubscriber(validatorApiChannel, new Random(), 0);\n+\n+    stableSubnetSubscriber.onSlot(ZERO);\n+    verifyNoInteractions(validatorApiChannel);\n+\n+    stableSubnetSubscriber.updateValidatorCount(3);\n+\n+    stableSubnetSubscriber.onSlot(ONE);\n+\n+    ArgumentCaptor<Set<SubnetSubscription>> subnetSubcriptions = ArgumentCaptor.forClass(Set.class);\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(subnetSubcriptions.capture());\n+\n+    assertThat(subnetSubcriptions.getValue()).hasSize(3);\n+    assertSubnetsAreDistinct(subnetSubcriptions.getValue());\n+  }\n+\n+  @Test\n+  void shouldSubscribeToAllSubnetsWhenNecessary() {\n+    ValidatorApiChannel validatorApiChannel = mock(ValidatorApiChannel.class);\n+    StableSubnetSubscriber stableSubnetSubscriber =\n+        new StableSubnetSubscriber(\n+            validatorApiChannel, new Random(), Constants.ATTESTATION_SUBNET_COUNT + 2);\n+\n+    UnsignedLong slot = valueOf(15);\n+    stableSubnetSubscriber.onSlot(slot);\n+\n+    ArgumentCaptor<Set<SubnetSubscription>> subnetSubcriptions = ArgumentCaptor.forClass(Set.class);\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(subnetSubcriptions.capture());\n+    assertThat(subnetSubcriptions.getValue()).hasSize(Constants.ATTESTATION_SUBNET_COUNT);\n+    assertSubnetsAreDistinct(subnetSubcriptions.getValue());\n+    assertUnsubscribeSlotsAreInBound(subnetSubcriptions.getValue(), valueOf(15));\n+  }\n+\n+  @Test\n+  void shouldStaySubscribedToAllSubnetsEvenIfValidatorNumberIsDecreased() {\n+    ValidatorApiChannel validatorApiChannel = mock(ValidatorApiChannel.class);\n+    StableSubnetSubscriber stableSubnetSubscriber =\n+        new StableSubnetSubscriber(\n+            validatorApiChannel, new Random(), Constants.ATTESTATION_SUBNET_COUNT + 8);\n+\n+    stableSubnetSubscriber.onSlot(ZERO);\n+\n+    ArgumentCaptor<Set<SubnetSubscription>> subnetSubcriptions = ArgumentCaptor.forClass(Set.class);\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(subnetSubcriptions.capture());\n+    assertSubnetsAreDistinct(subnetSubcriptions.getValue());\n+    assertThat(subnetSubcriptions.getValue()).hasSize(Constants.ATTESTATION_SUBNET_COUNT);\n+\n+    stableSubnetSubscriber.updateValidatorCount(Constants.ATTESTATION_SUBNET_COUNT);\n+    stableSubnetSubscriber.onSlot(valueOf(2));\n+\n+    verifyNoMoreInteractions(validatorApiChannel);\n+  }\n+\n+  @Test\n+  void shouldReplaceExpiredSubscriptionsWithNewOnes() {\n+    ValidatorApiChannel validatorApiChannel = mock(ValidatorApiChannel.class);\n+\n+    StableSubnetSubscriber stableSubnetSubscriber =\n+        new StableSubnetSubscriber(validatorApiChannel, new Random(), 2);\n+\n+    stableSubnetSubscriber.onSlot(valueOf(0));\n+\n+    ArgumentCaptor<Set<SubnetSubscription>> firstSubscriptionUpdate =\n+        ArgumentCaptor.forClass(Set.class);\n+    ArgumentCaptor<Set<SubnetSubscription>> secondSubscriptionUpdate =\n+        ArgumentCaptor.forClass(Set.class);\n+\n+    verify(validatorApiChannel).subscribeToPersistentSubnets(firstSubscriptionUpdate.capture());\n+\n+    assertThat(firstSubscriptionUpdate.getValue()).hasSize(2);\n+    assertThat(firstSubscriptionUpdate.getValue()).hasSize(2);\n+\n+    UnsignedLong firstUnsubscriptionSlot =\n+        firstSubscriptionUpdate.getValue().stream().findFirst().get().getUnsubscriptionSlot();\n+\n+    stableSubnetSubscriber.onSlot(firstUnsubscriptionSlot.minus(UnsignedLong.ONE));\n+\n+    verifyNoMoreInteractions(validatorApiChannel);\n+    stableSubnetSubscriber.onSlot(firstUnsubscriptionSlot);\n+\n+    verify(validatorApiChannel, times(2))\n+        .subscribeToPersistentSubnets(secondSubscriptionUpdate.capture());\n+\n+    UnsignedLong secondUnsubscriptionSlot =\n+        secondSubscriptionUpdate.getValue().stream().findFirst().get().getUnsubscriptionSlot();\n+\n+    assertThat(firstUnsubscriptionSlot).isNotEqualByComparingTo(secondUnsubscriptionSlot);\n+    // Can only verify unsubscription slot have changed and not the subnet id,\n+    // since subnet id can randomly be chosen the same\n+  }\n+\n+  private void assertUnsubscribeSlotsAreInBound(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2d7619b8896f166b174b80fd9b28e07a8383202"}, "originalPosition": 173}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12fc2bd7f4ae6bf33999dfe3913c5d541fd5ec37", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/12fc2bd7f4ae6bf33999dfe3913c5d541fd5ec37", "committedDate": "2020-05-11T16:27:55Z", "message": "Add test & decrease load on validatorApiHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a7338af789a01a6e858aac7069778e4062d5c6d", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/1a7338af789a01a6e858aac7069778e4062d5c6d", "committedDate": "2020-05-11T16:28:13Z", "message": "Merge branch 'master' into implementStabilitySubnetSubscriber"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4158, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}