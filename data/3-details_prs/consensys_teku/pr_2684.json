{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MTc3NTY0", "number": 2684, "title": "Added import and export for slashing protection data.", "bodyText": "teku slashing-protection export --data-path=<PATH> --to=<FILE>\n\n\nteku slashing-protection import --data-path=<PATH> --from=<FILE>\n\n\n--data-path defaults to the default path for teku.\n\n\nExporting will only export to the minimal interchange format, as that is all that's stored by teku.\nOn import, complete or minimal files are supported, and summarised for use by teku. If the genesis_validators_root does not match, the process will halt rather than corrupting existing data. If an existing file is found, the MAX of the existing data and imported data will be stored, to ensure there is no possibility of stepping 'backwards' in slashing protection data.\nfixes #2601\nSigned-off-by: Paul Harris paul.harris@consensys.net\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-08-28T06:34:33Z", "url": "https://github.com/ConsenSys/teku/pull/2684", "merged": true, "mergeCommit": {"oid": "6175077f3eac18f22e75b8725698891340820d8a"}, "closed": true, "closedAt": "2020-09-02T23:34:35Z", "author": {"login": "rolfyone"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDPC9agH2gAyNDc1MTc3NTY0OmEwOTkxMDBjNzU1N2E2YWU3YmU5ZjdmZDgzOTZiODZlNWJhYjkyODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFEfBvAH2gAyNDc1MTc3NTY0OmI0NDg2ODdmOGM5ZTdjYmFiYmIyNTUwYzZkYzkxMWYxNjk0ZDVlZTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a099100c7557a6ae7be9f7fd8396b86e5bab9283", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/a099100c7557a6ae7be9f7fd8396b86e5bab9283", "committedDate": "2020-08-28T06:30:49Z", "message": "Added import and export for slashing protection data.\n\n - teku slashing-protection export --data-path=<PATH> --to=<FILE>\n\n - teku slashing-protection import --data-path=<PATH> --from=<FILE>\n\n - --data-path defaults to the default path for teku.\n\n Exporting will only export to the minimal interchange format, as that is all that's stored by teku.\n\n On import, complete or minimal files are supported, and summarised for use by teku. If the genesis_validators_root does not match, the process will halt rather than corrupting existing data. If an existing file is found, the MAX of the exting data and imported data will be stored, to ensure there is no possibility of stepping 'backwards' in slashing protection data.\n\n fixes #2601\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eeadfcb1975e8d5dabbc4ac2ca6e88abe124c49", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/9eeadfcb1975e8d5dabbc4ac2ca6e88abe124c49", "committedDate": "2020-08-28T06:36:50Z", "message": "Merge remote-tracking branch 'upstream/master' into 2601"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2ad26ddd740a61adaa95e71720f284665e8ad21", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/e2ad26ddd740a61adaa95e71720f284665e8ad21", "committedDate": "2020-08-28T08:26:04Z", "message": "pretty print json\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb3177ec919a4e223c24c4669b5e465a7b4c9fa5", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/eb3177ec919a4e223c24c4669b5e465a7b4c9fa5", "committedDate": "2020-08-28T08:26:37Z", "message": "Merge remote-tracking branch 'upstream/master' into 2601"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3883af67b0f04ccabfb199e01fef693b9107ca0", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/d3883af67b0f04ccabfb199e01fef693b9107ca0", "committedDate": "2020-08-28T22:29:42Z", "message": "spotless\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8309149015da96df940e011f940141708608c702", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/8309149015da96df940e011f940141708608c702", "committedDate": "2020-08-30T21:03:51Z", "message": "Merge remote-tracking branch 'upstream/master' into 2601"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4544b5e5e628c4054bd9c19a239985585e38e702", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/4544b5e5e628c4054bd9c19a239985585e38e702", "committedDate": "2020-08-31T03:01:19Z", "message": "make NEVER_SIGNED be null, and conversion logic associated, as well as go back to using sync writer.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52a0e02188c5f3aba6fefd33775084fa4fa7468d", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/52a0e02188c5f3aba6fefd33775084fa4fa7468d", "committedDate": "2020-08-31T03:02:56Z", "message": "Merge remote-tracking branch 'upstream/master' into 2601"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/9dbb02d37f6f50ec791669fb938ab5a937317a20", "committedDate": "2020-08-31T03:24:03Z", "message": "typo\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4Mjg4NDUx", "url": "https://github.com/ConsenSys/teku/pull/2684#pullrequestreview-478288451", "createdAt": "2020-08-31T03:39:46Z", "commit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "state": "COMMENTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwMzozOTo0NlrOHJpCjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNDozODoyOVrOHJpxXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3MTYyOA==", "bodyText": "This should go via SubcommandLogger.error", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479871628", "createdAt": "2020-08-31T03:39:46Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionExporter.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.schema.BLSPubKey;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSlashingProtectionInterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.SlashingProtectionRecord;\n+import tech.pegasys.teku.data.slashinginterchange.YamlProvider;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionExporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final YamlProvider yamlProvider = new YamlProvider();\n+  private final List<MinimalSigningHistory> minimalSigningHistoryList = new ArrayList<>();\n+  private Bytes32 genesisValidatorsRoot = null;\n+\n+  public void initialise(final Path slashProtectionPath) {\n+    File slashingProtectionRecords = slashProtectionPath.toFile();\n+    Arrays.stream(slashingProtectionRecords.listFiles())\n+        .filter(file -> file.isFile() && file.getName().endsWith(\".yml\"))\n+        .forEach(this::readSlashProtectionFile);\n+  }\n+\n+  private void readSlashProtectionFile(final File file) {\n+    try {\n+      SlashingProtectionRecord slashingProtectionRecord =\n+          yamlProvider.fileToObject(file, SlashingProtectionRecord.class);\n+      if (genesisValidatorsRoot == null && slashingProtectionRecord.genesisValidatorsRoot != null) {\n+        this.genesisValidatorsRoot = slashingProtectionRecord.genesisValidatorsRoot;\n+      } else if (slashingProtectionRecord.genesisValidatorsRoot != null\n+          && !genesisValidatorsRoot.equals(slashingProtectionRecord.genesisValidatorsRoot)) {\n+        System.err.println(\n+            \"the genesisValidatorsRoot of \"\n+                + file.getName()\n+                + \" does not match the expected \"\n+                + genesisValidatorsRoot.toHexString().toLowerCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3MTg5Mw==", "bodyText": "I'm not convinced the YamlProvider should be dealing with file IO.  I'd expect it to mirror JsonProvider and just do the conversion to/from bytes (potentially to/from InputStream if we wanted to be able to stream the data.", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479871893", "createdAt": "2020-08-31T03:41:06Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionExporter.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.schema.BLSPubKey;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSlashingProtectionInterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.SlashingProtectionRecord;\n+import tech.pegasys.teku.data.slashinginterchange.YamlProvider;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionExporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final YamlProvider yamlProvider = new YamlProvider();\n+  private final List<MinimalSigningHistory> minimalSigningHistoryList = new ArrayList<>();\n+  private Bytes32 genesisValidatorsRoot = null;\n+\n+  public void initialise(final Path slashProtectionPath) {\n+    File slashingProtectionRecords = slashProtectionPath.toFile();\n+    Arrays.stream(slashingProtectionRecords.listFiles())\n+        .filter(file -> file.isFile() && file.getName().endsWith(\".yml\"))\n+        .forEach(this::readSlashProtectionFile);\n+  }\n+\n+  private void readSlashProtectionFile(final File file) {\n+    try {\n+      SlashingProtectionRecord slashingProtectionRecord =\n+          yamlProvider.fileToObject(file, SlashingProtectionRecord.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3MjQ5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final String pubkey = file.getName().substring(0, file.getName().length() - 4);\n          \n          \n            \n                  final String pubkey = file.getName().substring(0, file.getName().length() - \".yml\".length());", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479872498", "createdAt": "2020-08-31T03:43:49Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionExporter.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.schema.BLSPubKey;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSlashingProtectionInterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.SlashingProtectionRecord;\n+import tech.pegasys.teku.data.slashinginterchange.YamlProvider;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionExporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final YamlProvider yamlProvider = new YamlProvider();\n+  private final List<MinimalSigningHistory> minimalSigningHistoryList = new ArrayList<>();\n+  private Bytes32 genesisValidatorsRoot = null;\n+\n+  public void initialise(final Path slashProtectionPath) {\n+    File slashingProtectionRecords = slashProtectionPath.toFile();\n+    Arrays.stream(slashingProtectionRecords.listFiles())\n+        .filter(file -> file.isFile() && file.getName().endsWith(\".yml\"))\n+        .forEach(this::readSlashProtectionFile);\n+  }\n+\n+  private void readSlashProtectionFile(final File file) {\n+    try {\n+      SlashingProtectionRecord slashingProtectionRecord =\n+          yamlProvider.fileToObject(file, SlashingProtectionRecord.class);\n+      if (genesisValidatorsRoot == null && slashingProtectionRecord.genesisValidatorsRoot != null) {\n+        this.genesisValidatorsRoot = slashingProtectionRecord.genesisValidatorsRoot;\n+      } else if (slashingProtectionRecord.genesisValidatorsRoot != null\n+          && !genesisValidatorsRoot.equals(slashingProtectionRecord.genesisValidatorsRoot)) {\n+        System.err.println(\n+            \"the genesisValidatorsRoot of \"\n+                + file.getName()\n+                + \" does not match the expected \"\n+                + genesisValidatorsRoot.toHexString().toLowerCase());\n+        System.exit(1);\n+      }\n+      final String pubkey = file.getName().substring(0, file.getName().length() - 4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3MjkyOQ==", "bodyText": "Probably should catch the exception thrown when this filename turns out to not be a valid public key and provide a useful error message that includes the filename.", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479872929", "createdAt": "2020-08-31T03:45:36Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionExporter.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.schema.BLSPubKey;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSlashingProtectionInterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.SlashingProtectionRecord;\n+import tech.pegasys.teku.data.slashinginterchange.YamlProvider;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionExporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final YamlProvider yamlProvider = new YamlProvider();\n+  private final List<MinimalSigningHistory> minimalSigningHistoryList = new ArrayList<>();\n+  private Bytes32 genesisValidatorsRoot = null;\n+\n+  public void initialise(final Path slashProtectionPath) {\n+    File slashingProtectionRecords = slashProtectionPath.toFile();\n+    Arrays.stream(slashingProtectionRecords.listFiles())\n+        .filter(file -> file.isFile() && file.getName().endsWith(\".yml\"))\n+        .forEach(this::readSlashProtectionFile);\n+  }\n+\n+  private void readSlashProtectionFile(final File file) {\n+    try {\n+      SlashingProtectionRecord slashingProtectionRecord =\n+          yamlProvider.fileToObject(file, SlashingProtectionRecord.class);\n+      if (genesisValidatorsRoot == null && slashingProtectionRecord.genesisValidatorsRoot != null) {\n+        this.genesisValidatorsRoot = slashingProtectionRecord.genesisValidatorsRoot;\n+      } else if (slashingProtectionRecord.genesisValidatorsRoot != null\n+          && !genesisValidatorsRoot.equals(slashingProtectionRecord.genesisValidatorsRoot)) {\n+        System.err.println(\n+            \"the genesisValidatorsRoot of \"\n+                + file.getName()\n+                + \" does not match the expected \"\n+                + genesisValidatorsRoot.toHexString().toLowerCase());\n+        System.exit(1);\n+      }\n+      final String pubkey = file.getName().substring(0, file.getName().length() - 4);\n+      minimalSigningHistoryList.add(\n+          new MinimalSigningHistory(BLSPubKey.fromHexString(pubkey), slashingProtectionRecord));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3MzIxOA==", "bodyText": "Probably would be better to just convert to JSON with jsonProvider.objectToPrettyJSON then write to file rather than using getObjectMapper and having the Jackson specific code leak out to here.", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479873218", "createdAt": "2020-08-31T03:47:00Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionExporter.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.schema.BLSPubKey;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSlashingProtectionInterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.SlashingProtectionRecord;\n+import tech.pegasys.teku.data.slashinginterchange.YamlProvider;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionExporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final YamlProvider yamlProvider = new YamlProvider();\n+  private final List<MinimalSigningHistory> minimalSigningHistoryList = new ArrayList<>();\n+  private Bytes32 genesisValidatorsRoot = null;\n+\n+  public void initialise(final Path slashProtectionPath) {\n+    File slashingProtectionRecords = slashProtectionPath.toFile();\n+    Arrays.stream(slashingProtectionRecords.listFiles())\n+        .filter(file -> file.isFile() && file.getName().endsWith(\".yml\"))\n+        .forEach(this::readSlashProtectionFile);\n+  }\n+\n+  private void readSlashProtectionFile(final File file) {\n+    try {\n+      SlashingProtectionRecord slashingProtectionRecord =\n+          yamlProvider.fileToObject(file, SlashingProtectionRecord.class);\n+      if (genesisValidatorsRoot == null && slashingProtectionRecord.genesisValidatorsRoot != null) {\n+        this.genesisValidatorsRoot = slashingProtectionRecord.genesisValidatorsRoot;\n+      } else if (slashingProtectionRecord.genesisValidatorsRoot != null\n+          && !genesisValidatorsRoot.equals(slashingProtectionRecord.genesisValidatorsRoot)) {\n+        System.err.println(\n+            \"the genesisValidatorsRoot of \"\n+                + file.getName()\n+                + \" does not match the expected \"\n+                + genesisValidatorsRoot.toHexString().toLowerCase());\n+        System.exit(1);\n+      }\n+      final String pubkey = file.getName().substring(0, file.getName().length() - 4);\n+      minimalSigningHistoryList.add(\n+          new MinimalSigningHistory(BLSPubKey.fromHexString(pubkey), slashingProtectionRecord));\n+    } catch (IOException e) {\n+      System.err.println(\"Failed to read from file \" + file.toString());\n+      System.exit(1);\n+    }\n+  }\n+\n+  public void saveToFile(final String toFileName) throws IOException {\n+\n+    jsonProvider\n+        .getObjectMapper()\n+        .writerWithDefaultPrettyPrinter()\n+        .writeValue(\n+            new File(toFileName),\n+            new MinimalSlashingProtectionInterchangeFormat(\n+                new Metadata(InterchangeFormat.minimal, UInt64.valueOf(2L), genesisValidatorsRoot),\n+                minimalSigningHistoryList));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3MzQzNA==", "bodyText": "SubCommandLogger.error", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479873434", "createdAt": "2020-08-31T03:48:06Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionImporter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.data.slashinginterchange.CompleteSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.SignedAttestation;\n+import tech.pegasys.teku.data.slashinginterchange.SignedBlock;\n+import tech.pegasys.teku.data.slashinginterchange.SlashingProtectionRecord;\n+import tech.pegasys.teku.data.slashinginterchange.YamlProvider;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionImporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final YamlProvider yamlProvider = new YamlProvider();\n+  private Path slashingProtectionPath;\n+  private List<MinimalSigningHistory> data = new ArrayList<>();\n+  private Metadata metadata;\n+\n+  public void initialise(final File inputFile) throws IOException {\n+    final ObjectMapper jsonMapper = jsonProvider.getObjectMapper();\n+    JsonNode jsonNode = jsonMapper.readTree(inputFile);\n+    metadata = jsonMapper.treeToValue(jsonNode.get(\"metadata\"), Metadata.class);\n+    if (!metadata.interchangeFormatVersion.equals(UInt64.valueOf(2L))) {\n+      System.err.println(\n+          \"Import file \" + inputFile.toString() + \" is not format version 2, cannot continue.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3NDIyMQ==", "bodyText": "nit: I'd have this return the result rather than assign to data so the if above is symmetric with both versions assigning to data inline.", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479874221", "createdAt": "2020-08-31T03:51:59Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionImporter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.data.slashinginterchange.CompleteSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.SignedAttestation;\n+import tech.pegasys.teku.data.slashinginterchange.SignedBlock;\n+import tech.pegasys.teku.data.slashinginterchange.SlashingProtectionRecord;\n+import tech.pegasys.teku.data.slashinginterchange.YamlProvider;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionImporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final YamlProvider yamlProvider = new YamlProvider();\n+  private Path slashingProtectionPath;\n+  private List<MinimalSigningHistory> data = new ArrayList<>();\n+  private Metadata metadata;\n+\n+  public void initialise(final File inputFile) throws IOException {\n+    final ObjectMapper jsonMapper = jsonProvider.getObjectMapper();\n+    JsonNode jsonNode = jsonMapper.readTree(inputFile);\n+    metadata = jsonMapper.treeToValue(jsonNode.get(\"metadata\"), Metadata.class);\n+    if (!metadata.interchangeFormatVersion.equals(UInt64.valueOf(2L))) {\n+      System.err.println(\n+          \"Import file \" + inputFile.toString() + \" is not format version 2, cannot continue.\");\n+      System.exit(1);\n+    }\n+    if (metadata.interchangeFormat.equals(InterchangeFormat.minimal)) {\n+      data =\n+          Arrays.asList(\n+              jsonMapper.treeToValue(jsonNode.get(\"data\"), MinimalSigningHistory[].class));\n+    } else {\n+      summariseCompleteInterchangeFormat(\n+          Arrays.asList(\n+              jsonMapper.treeToValue(jsonNode.get(\"data\"), CompleteSigningHistory[].class)));\n+    }\n+  }\n+\n+  private void summariseCompleteInterchangeFormat(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3NDYzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        sourceEpoch.orElse(null),\n          \n          \n            \n                        targetEpoch.orElse(null),\n          \n          \n            \n                        sourceEpoch.orElse(ValidatorSigningRecord.NEVER_SIGNED),\n          \n          \n            \n                        targetEpoch.orElse(ValidatorSigningRecord.NEVER_SIGNED),", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479874635", "createdAt": "2020-08-31T03:54:05Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionImporter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.data.slashinginterchange.CompleteSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.SignedAttestation;\n+import tech.pegasys.teku.data.slashinginterchange.SignedBlock;\n+import tech.pegasys.teku.data.slashinginterchange.SlashingProtectionRecord;\n+import tech.pegasys.teku.data.slashinginterchange.YamlProvider;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionImporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final YamlProvider yamlProvider = new YamlProvider();\n+  private Path slashingProtectionPath;\n+  private List<MinimalSigningHistory> data = new ArrayList<>();\n+  private Metadata metadata;\n+\n+  public void initialise(final File inputFile) throws IOException {\n+    final ObjectMapper jsonMapper = jsonProvider.getObjectMapper();\n+    JsonNode jsonNode = jsonMapper.readTree(inputFile);\n+    metadata = jsonMapper.treeToValue(jsonNode.get(\"metadata\"), Metadata.class);\n+    if (!metadata.interchangeFormatVersion.equals(UInt64.valueOf(2L))) {\n+      System.err.println(\n+          \"Import file \" + inputFile.toString() + \" is not format version 2, cannot continue.\");\n+      System.exit(1);\n+    }\n+    if (metadata.interchangeFormat.equals(InterchangeFormat.minimal)) {\n+      data =\n+          Arrays.asList(\n+              jsonMapper.treeToValue(jsonNode.get(\"data\"), MinimalSigningHistory[].class));\n+    } else {\n+      summariseCompleteInterchangeFormat(\n+          Arrays.asList(\n+              jsonMapper.treeToValue(jsonNode.get(\"data\"), CompleteSigningHistory[].class)));\n+    }\n+  }\n+\n+  private void summariseCompleteInterchangeFormat(\n+      final List<CompleteSigningHistory> completeSigningData) {\n+    data =\n+        completeSigningData.stream()\n+            .map(this::minimalSigningHistoryConverter)\n+            .collect(Collectors.toList());\n+  }\n+\n+  private MinimalSigningHistory minimalSigningHistoryConverter(\n+      final CompleteSigningHistory completeSigningHistory) {\n+    final Optional<UInt64> lastSlot =\n+        completeSigningHistory.signedBlocks.stream()\n+            .map(SignedBlock::getSlot)\n+            .max(UInt64::compareTo);\n+    final Optional<UInt64> sourceEpoch =\n+        completeSigningHistory.signedAttestations.stream()\n+            .map(SignedAttestation::getSourceEpoch)\n+            .max(UInt64::compareTo);\n+    final Optional<UInt64> targetEpoch =\n+        completeSigningHistory.signedAttestations.stream()\n+            .map(SignedAttestation::getTargetEpoch)\n+            .max(UInt64::compareTo);\n+    SlashingProtectionRecord record =\n+        new SlashingProtectionRecord(\n+            lastSlot.orElse(UInt64.ZERO),\n+            sourceEpoch.orElse(null),\n+            targetEpoch.orElse(null),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3NTExOQ==", "bodyText": "SubCommandLogger.display", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479875119", "createdAt": "2020-08-31T03:56:20Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionImporter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.data.slashinginterchange.CompleteSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.SignedAttestation;\n+import tech.pegasys.teku.data.slashinginterchange.SignedBlock;\n+import tech.pegasys.teku.data.slashinginterchange.SlashingProtectionRecord;\n+import tech.pegasys.teku.data.slashinginterchange.YamlProvider;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionImporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final YamlProvider yamlProvider = new YamlProvider();\n+  private Path slashingProtectionPath;\n+  private List<MinimalSigningHistory> data = new ArrayList<>();\n+  private Metadata metadata;\n+\n+  public void initialise(final File inputFile) throws IOException {\n+    final ObjectMapper jsonMapper = jsonProvider.getObjectMapper();\n+    JsonNode jsonNode = jsonMapper.readTree(inputFile);\n+    metadata = jsonMapper.treeToValue(jsonNode.get(\"metadata\"), Metadata.class);\n+    if (!metadata.interchangeFormatVersion.equals(UInt64.valueOf(2L))) {\n+      System.err.println(\n+          \"Import file \" + inputFile.toString() + \" is not format version 2, cannot continue.\");\n+      System.exit(1);\n+    }\n+    if (metadata.interchangeFormat.equals(InterchangeFormat.minimal)) {\n+      data =\n+          Arrays.asList(\n+              jsonMapper.treeToValue(jsonNode.get(\"data\"), MinimalSigningHistory[].class));\n+    } else {\n+      summariseCompleteInterchangeFormat(\n+          Arrays.asList(\n+              jsonMapper.treeToValue(jsonNode.get(\"data\"), CompleteSigningHistory[].class)));\n+    }\n+  }\n+\n+  private void summariseCompleteInterchangeFormat(\n+      final List<CompleteSigningHistory> completeSigningData) {\n+    data =\n+        completeSigningData.stream()\n+            .map(this::minimalSigningHistoryConverter)\n+            .collect(Collectors.toList());\n+  }\n+\n+  private MinimalSigningHistory minimalSigningHistoryConverter(\n+      final CompleteSigningHistory completeSigningHistory) {\n+    final Optional<UInt64> lastSlot =\n+        completeSigningHistory.signedBlocks.stream()\n+            .map(SignedBlock::getSlot)\n+            .max(UInt64::compareTo);\n+    final Optional<UInt64> sourceEpoch =\n+        completeSigningHistory.signedAttestations.stream()\n+            .map(SignedAttestation::getSourceEpoch)\n+            .max(UInt64::compareTo);\n+    final Optional<UInt64> targetEpoch =\n+        completeSigningHistory.signedAttestations.stream()\n+            .map(SignedAttestation::getTargetEpoch)\n+            .max(UInt64::compareTo);\n+    SlashingProtectionRecord record =\n+        new SlashingProtectionRecord(\n+            lastSlot.orElse(UInt64.ZERO),\n+            sourceEpoch.orElse(null),\n+            targetEpoch.orElse(null),\n+            metadata.genesisValidatorsRoot);\n+    return new MinimalSigningHistory(completeSigningHistory.pubkey, record);\n+  }\n+\n+  public void updateLocalRecords(final Path slashingProtectionPath) {\n+    this.slashingProtectionPath = slashingProtectionPath;\n+    data.forEach(this::updateLocalRecord);\n+  }\n+\n+  private void updateLocalRecord(final MinimalSigningHistory minimalSigningHistory) {\n+    String validatorString = minimalSigningHistory.pubkey.toHexString().substring(2).toLowerCase();\n+\n+    System.out.println(\"Importing \" + validatorString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3NTY5Nw==", "bodyText": "I'd load all the existing validator records upfront and check they all match prior to starting to apply changes.  Otherwise we risk having some records imported and some not.\nBasically I'd import by reading the incoming records, reading all the existing records, merging the two and writing them out.  It might still fail while writing out because of IO errors but at least you've done all the validation up-front and given yourself a chance.\nAlso SubCommandLogger", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479875697", "createdAt": "2020-08-31T03:59:19Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionImporter.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.data.slashinginterchange.CompleteSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.SignedAttestation;\n+import tech.pegasys.teku.data.slashinginterchange.SignedBlock;\n+import tech.pegasys.teku.data.slashinginterchange.SlashingProtectionRecord;\n+import tech.pegasys.teku.data.slashinginterchange.YamlProvider;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionImporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final YamlProvider yamlProvider = new YamlProvider();\n+  private Path slashingProtectionPath;\n+  private List<MinimalSigningHistory> data = new ArrayList<>();\n+  private Metadata metadata;\n+\n+  public void initialise(final File inputFile) throws IOException {\n+    final ObjectMapper jsonMapper = jsonProvider.getObjectMapper();\n+    JsonNode jsonNode = jsonMapper.readTree(inputFile);\n+    metadata = jsonMapper.treeToValue(jsonNode.get(\"metadata\"), Metadata.class);\n+    if (!metadata.interchangeFormatVersion.equals(UInt64.valueOf(2L))) {\n+      System.err.println(\n+          \"Import file \" + inputFile.toString() + \" is not format version 2, cannot continue.\");\n+      System.exit(1);\n+    }\n+    if (metadata.interchangeFormat.equals(InterchangeFormat.minimal)) {\n+      data =\n+          Arrays.asList(\n+              jsonMapper.treeToValue(jsonNode.get(\"data\"), MinimalSigningHistory[].class));\n+    } else {\n+      summariseCompleteInterchangeFormat(\n+          Arrays.asList(\n+              jsonMapper.treeToValue(jsonNode.get(\"data\"), CompleteSigningHistory[].class)));\n+    }\n+  }\n+\n+  private void summariseCompleteInterchangeFormat(\n+      final List<CompleteSigningHistory> completeSigningData) {\n+    data =\n+        completeSigningData.stream()\n+            .map(this::minimalSigningHistoryConverter)\n+            .collect(Collectors.toList());\n+  }\n+\n+  private MinimalSigningHistory minimalSigningHistoryConverter(\n+      final CompleteSigningHistory completeSigningHistory) {\n+    final Optional<UInt64> lastSlot =\n+        completeSigningHistory.signedBlocks.stream()\n+            .map(SignedBlock::getSlot)\n+            .max(UInt64::compareTo);\n+    final Optional<UInt64> sourceEpoch =\n+        completeSigningHistory.signedAttestations.stream()\n+            .map(SignedAttestation::getSourceEpoch)\n+            .max(UInt64::compareTo);\n+    final Optional<UInt64> targetEpoch =\n+        completeSigningHistory.signedAttestations.stream()\n+            .map(SignedAttestation::getTargetEpoch)\n+            .max(UInt64::compareTo);\n+    SlashingProtectionRecord record =\n+        new SlashingProtectionRecord(\n+            lastSlot.orElse(UInt64.ZERO),\n+            sourceEpoch.orElse(null),\n+            targetEpoch.orElse(null),\n+            metadata.genesisValidatorsRoot);\n+    return new MinimalSigningHistory(completeSigningHistory.pubkey, record);\n+  }\n+\n+  public void updateLocalRecords(final Path slashingProtectionPath) {\n+    this.slashingProtectionPath = slashingProtectionPath;\n+    data.forEach(this::updateLocalRecord);\n+  }\n+\n+  private void updateLocalRecord(final MinimalSigningHistory minimalSigningHistory) {\n+    String validatorString = minimalSigningHistory.pubkey.toHexString().substring(2).toLowerCase();\n+\n+    System.out.println(\"Importing \" + validatorString);\n+    Path outputFile = slashingProtectionPath.resolve(validatorString.concat(\".yml\"));\n+    Optional<SlashingProtectionRecord> existingRecord = Optional.empty();\n+    if (outputFile.toFile().exists()) {\n+      try {\n+        existingRecord =\n+            Optional.ofNullable(\n+                yamlProvider.fileToObject(outputFile.toFile(), SlashingProtectionRecord.class));\n+      } catch (IOException e) {\n+        System.err.println(\"Failed to read existing file: \" + outputFile.toString());\n+        System.exit(1);\n+      }\n+    }\n+    if (existingRecord.isPresent()\n+        && metadata.genesisValidatorsRoot.compareTo(existingRecord.get().genesisValidatorsRoot)\n+            != 0) {\n+      System.err.println(\n+          \"Validator \"\n+              + minimalSigningHistory.pubkey.toHexString()\n+              + \" has a different validators signing root to the data being imported\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3Nzc3MQ==", "bodyText": "Mentioned above, but I'd get rid of these or at most have versions that take InputStream/OutputStream so they don't care where the data is coming from.", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479877771", "createdAt": "2020-08-31T04:09:42Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/slashinginterchange/YamlProvider.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data.slashinginterchange;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import java.io.File;\n+import java.io.IOException;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.Bytes32Deserializer;\n+import tech.pegasys.teku.provider.BytesSerializer;\n+\n+public class YamlProvider {\n+  private final ObjectMapper objectMapper;\n+\n+  public YamlProvider() {\n+    this.objectMapper = new ObjectMapper(new YAMLFactory());\n+    addTekuMappers();\n+  }\n+\n+  private void addTekuMappers() {\n+    SimpleModule module = new SimpleModule(\"TekuYaml\", new Version(1, 0, 0, null, null, null));\n+    module.addDeserializer(UInt64.class, new UInt64Deserializer());\n+    module.addSerializer(UInt64.class, new UInt64Serializer());\n+    module.addDeserializer(Bytes32.class, new Bytes32Deserializer());\n+    module.addSerializer(Bytes.class, new BytesSerializer());\n+    objectMapper.registerModule(module).writer(new DefaultPrettyPrinter());\n+  }\n+\n+  public <T> String objectToYaml(T object) throws JsonProcessingException {\n+    return objectMapper.writeValueAsString(object);\n+  }\n+\n+  public <T> T yamlToObject(String json, Class<T> clazz) throws JsonProcessingException {\n+    return objectMapper.readValue(json, clazz);\n+  }\n+\n+  public <T> T fileToObject(File file, Class<T> clazz) throws IOException {\n+    return objectMapper.readValue(file, clazz);\n+  }\n+\n+  public <T> void writeToFile(File file, T object) throws IOException {\n+    objectMapper.writerWithDefaultPrettyPrinter().writeValue(file, object);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3OTA4NQ==", "bodyText": "It would make more sense to pass genesis validators root into maySignBlock so that if it is allowed to sign, it just creates a new ValidatorSigningRecord that already holds the right genesis validators root.  It should also refuse to sign if it has a validators root that is different to what is passed in as that indicates that the slashing protection DB is from the wrong chain and something has gone wrong (make sure to log an error message in this case as well as the return or it won't be clear why it refused to sign).", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479879085", "createdAt": "2020-08-31T04:16:04Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/SlashingProtector.java", "diffHunk": "@@ -18,50 +18,64 @@\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.teku.bls.BLSPublicKey;\n import tech.pegasys.teku.core.signatures.record.ValidatorSigningRecord;\n+import tech.pegasys.teku.data.slashinginterchange.SlashingProtectionRecord;\n+import tech.pegasys.teku.data.slashinginterchange.YamlProvider;\n+import tech.pegasys.teku.datastructures.state.ForkInfo;\n import tech.pegasys.teku.infrastructure.async.SafeFuture;\n import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n \n public class SlashingProtector {\n-\n+  private static final Logger LOG = LogManager.getLogger();\n   private final Map<BLSPublicKey, ValidatorSigningRecord> signingRecords = new HashMap<>();\n-\n   private final SyncDataAccessor dataAccessor;\n+  private final YamlProvider yamlProvider = new YamlProvider();\n   private final Path slashingProtectionBaseDir;\n \n   public SlashingProtector(\n       final SyncDataAccessor dataAccessor, final Path slashingProtectionBaseDir) {\n-    this.dataAccessor = dataAccessor;\n     this.slashingProtectionBaseDir = slashingProtectionBaseDir;\n+    this.dataAccessor = dataAccessor;\n   }\n \n   public synchronized SafeFuture<Boolean> maySignBlock(\n-      final BLSPublicKey validator, final UInt64 slot) {\n+      final BLSPublicKey validator, final ForkInfo forkInfo, final UInt64 slot) {\n     return SafeFuture.of(\n         () -> {\n           final ValidatorSigningRecord signingRecord = loadSigningRecord(validator);\n-          return handleResult(validator, signingRecord.maySignBlock(slot));\n+          return handleResult(\n+              validator, forkInfo.getGenesisValidatorsRoot(), signingRecord.maySignBlock(slot));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg4MDA3MA==", "bodyText": "How did we manage to make this so much more complex?  Can we go back to how we were doing serialisation for ValidatorSigningRecord?  We seem to have wound up with yaml, IO and data model responsibilities scattered all through the code now.", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479880070", "createdAt": "2020-08-31T04:21:10Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/SlashingProtector.java", "diffHunk": "@@ -74,15 +88,35 @@ private ValidatorSigningRecord loadSigningRecord(final BLSPublicKey validator)\n     record =\n         dataAccessor\n             .read(validatorRecordPath(validator))\n-            .map(ValidatorSigningRecord::fromBytes)\n+            .map(\n+                val -> {\n+                  try {\n+                    return yamlProvider\n+                        .getObjectMapper()\n+                        .readValue(val.toArray(), SlashingProtectionRecord.class);\n+                  } catch (IOException e) {\n+                    LOG.trace(\n+                        \"error parsing slashing protection file \" + validatorRecordPath(validator),\n+                        e);\n+                  }\n+                  return new SlashingProtectionRecord();\n+                })\n+            .map(ValidatorSigningRecord::fromSlashingProtectionRecord)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg4MDU1Mg==", "bodyText": "Would be good to keep these as a simple delegation so that this class is focussed on being the data model and the details of serialisation are handled separately.\nBut they've also wound up only being used by tests which suggests the tests aren't actually testing what the production code now does.", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479880552", "createdAt": "2020-08-31T04:23:29Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/record/ValidatorSigningRecord.java", "diffHunk": "@@ -52,11 +60,24 @@ public ValidatorSigningRecord(\n   }\n \n   public static ValidatorSigningRecord fromBytes(final Bytes data) {\n-    return ValidatorSigningRecordSerialization.readRecord(data);\n+    try {\n+      final SlashingProtectionRecord spr =\n+          yamlProvider.getObjectMapper().readValue(data.toArray(), SlashingProtectionRecord.class);\n+      return ValidatorSigningRecord.fromSlashingProtectionRecord(spr);\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(e);\n+    }\n   }\n \n   public Bytes toBytes() {\n-    return ValidatorSigningRecordSerialization.writeRecord(this);\n+    try {\n+      return Bytes.wrap(\n+          yamlProvider.getObjectMapper().writeValueAsBytes(this.toSlashingProtectionRecord(null)));\n+    } catch (JsonGenerationException | JsonMappingException e) {\n+      throw new IllegalStateException(\"Failed to serialize ValidatorSigningRecord\", e);\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(e);\n+    }\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg4MDczMQ==", "bodyText": "We should be consistent with using NEVER_SIGNED rather than using null directly.", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479880731", "createdAt": "2020-08-31T04:24:34Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/record/ValidatorSigningRecord.java", "diffHunk": "@@ -92,24 +139,22 @@ public Bytes toBytes() {\n   }\n \n   private boolean isSafeSourceEpoch(final UInt64 sourceEpoch) {\n-    return attestationSourceEpoch.equals(NEVER_SIGNED)\n-        || attestationSourceEpoch.compareTo(sourceEpoch) <= 0;\n+    return attestationSourceEpoch == null || attestationSourceEpoch.compareTo(sourceEpoch) <= 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg4MDkxOQ==", "bodyText": "These shouldn't be public as we want to encapsulate the data as much as we can and just have the maySign* methods as the key public API.  They do appear to be unused now though.", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479880919", "createdAt": "2020-08-31T04:25:16Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/record/ValidatorSigningRecord.java", "diffHunk": "@@ -92,24 +139,22 @@ public Bytes toBytes() {\n   }\n \n   private boolean isSafeSourceEpoch(final UInt64 sourceEpoch) {\n-    return attestationSourceEpoch.equals(NEVER_SIGNED)\n-        || attestationSourceEpoch.compareTo(sourceEpoch) <= 0;\n+    return attestationSourceEpoch == null || attestationSourceEpoch.compareTo(sourceEpoch) <= 0;\n   }\n \n   private boolean isSafeTargetEpoch(final UInt64 targetEpoch) {\n-    return attestationTargetEpoch.equals(NEVER_SIGNED)\n-        || attestationTargetEpoch.compareTo(targetEpoch) < 0;\n+    return attestationTargetEpoch == null || attestationTargetEpoch.compareTo(targetEpoch) < 0;\n   }\n \n-  UInt64 getBlockSlot() {\n+  public UInt64 getBlockSlot() {\n     return blockSlot;\n   }\n \n-  UInt64 getAttestationSourceEpoch() {\n+  public UInt64 getAttestationSourceEpoch() {\n     return attestationSourceEpoch;\n   }\n \n-  UInt64 getAttestationTargetEpoch() {\n+  public UInt64 getAttestationTargetEpoch() {\n     return attestationTargetEpoch;\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg4MTMxNA==", "bodyText": "This is a human friendly name so:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Mixin(name = \"DataStorage\")\n          \n          \n            \n              @Mixin(name = \"Data Storage\")", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479881314", "createdAt": "2020-08-31T04:27:13Z", "author": {"login": "ajsutton"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/BeaconNodeCommand.java", "diffHunk": "@@ -149,6 +152,9 @@\n   @Mixin(name = \"Data\")\n   private DataOptions dataOptions;\n \n+  @Mixin(name = \"DataStorage\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg4MTkwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                description = \"Export slashing protection database in Minimal format.\",\n          \n          \n            \n                description = \"Export slashing protection database in minimal format.\",", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479881904", "createdAt": "2020-08-31T04:30:02Z", "author": {"login": "ajsutton"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/slashingprotection/ExportCommand.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.cli.slashingprotection;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import org.apache.logging.log4j.util.Strings;\n+import picocli.CommandLine;\n+import tech.pegasys.teku.cli.options.DataOptions;\n+import tech.pegasys.teku.data.SlashingProtectionExporter;\n+import tech.pegasys.teku.logging.SubCommandLogger;\n+import tech.pegasys.teku.util.cli.PicoCliVersionProvider;\n+\n+@CommandLine.Command(\n+    name = \"export\",\n+    description = \"Export slashing protection database in Minimal format.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg4MjI0Ng==", "bodyText": "We should probably display an error an exit if there are no slashing protection records found (ie the directory exists but is empty)", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479882246", "createdAt": "2020-08-31T04:31:39Z", "author": {"login": "ajsutton"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/slashingprotection/ExportCommand.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.cli.slashingprotection;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import org.apache.logging.log4j.util.Strings;\n+import picocli.CommandLine;\n+import tech.pegasys.teku.cli.options.DataOptions;\n+import tech.pegasys.teku.data.SlashingProtectionExporter;\n+import tech.pegasys.teku.logging.SubCommandLogger;\n+import tech.pegasys.teku.util.cli.PicoCliVersionProvider;\n+\n+@CommandLine.Command(\n+    name = \"export\",\n+    description = \"Export slashing protection database in Minimal format.\",\n+    mixinStandardHelpOptions = true,\n+    abbreviateSynopsis = true,\n+    versionProvider = PicoCliVersionProvider.class,\n+    synopsisHeading = \"%n\",\n+    descriptionHeading = \"%nDescription:%n%n\",\n+    optionListHeading = \"%nOptions:%n\",\n+    footerHeading = \"%n\",\n+    footer = \"Teku is licensed under the Apache License 2.0\")\n+public class ExportCommand implements Runnable {\n+  public static final SubCommandLogger SUB_COMMAND_LOG = new SubCommandLogger();\n+\n+  @CommandLine.Mixin(name = \"Data\")\n+  private DataOptions dataOptions;\n+\n+  @CommandLine.Option(\n+      names = {\"--to\"},\n+      paramLabel = \"<FILENAME>\",\n+      description = \"The file to export the slashing protection database to.\",\n+      required = true,\n+      arity = \"1\")\n+  private String toFileName = Strings.EMPTY;\n+\n+  @Override\n+  public void run() {\n+\n+    final Path slashProtectionPath =\n+        DataOptions.getValidatorsSlashingProtectionPath(dataOptions.getDataPath());\n+    verifySlashingProtectionPathExists(slashProtectionPath);\n+\n+    SlashingProtectionExporter slashingProtectionExporter = new SlashingProtectionExporter();\n+\n+    SUB_COMMAND_LOG.display(\"Reading slashing protection data from: \" + slashProtectionPath);\n+    slashingProtectionExporter.initialise(slashProtectionPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg4MjM1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"Import slashing protection database. Supports Minimal or Complete interchange format.\",\n          \n          \n            \n                    \"Import slashing protection database. Supports minimal or complete interchange format.\",", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479882356", "createdAt": "2020-08-31T04:32:16Z", "author": {"login": "ajsutton"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/slashingprotection/ImportCommand.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.cli.slashingprotection;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import org.apache.logging.log4j.util.Strings;\n+import picocli.CommandLine;\n+import tech.pegasys.teku.cli.options.DataOptions;\n+import tech.pegasys.teku.data.SlashingProtectionImporter;\n+import tech.pegasys.teku.logging.SubCommandLogger;\n+import tech.pegasys.teku.util.cli.PicoCliVersionProvider;\n+\n+@CommandLine.Command(\n+    name = \"import\",\n+    description =\n+        \"Import slashing protection database. Supports Minimal or Complete interchange format.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg4MzYxNQ==", "bodyText": "Calculating the slashingProtectionPath should stay inside ValidatorClientService.  The ServiceController class should know as little as possible about the details of the service and basically just create and pass the ServiceConfig.", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r479883615", "createdAt": "2020-08-31T04:38:29Z", "author": {"login": "ajsutton"}, "path": "teku/src/main/java/tech/pegasys/teku/services/ServiceController.java", "diffHunk": "@@ -37,7 +39,9 @@ public ServiceController(final ServiceConfig config) {\n     if (config.getConfig().isRemoteValidatorApiEnabled()) {\n       services.add(new RemoteValidatorService(config));\n     } else {\n-      services.add(ValidatorClientService.create(config));\n+      final Path slashingProtectionPath =\n+          DataOptions.getValidatorsSlashingProtectionPath(config.getConfig().getDataPath());\n+      services.add(ValidatorClientService.create(config, slashingProtectionPath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed0521d9708edd5f3432d5dfaa791003a578287d", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/ed0521d9708edd5f3432d5dfaa791003a578287d", "committedDate": "2020-08-31T08:32:13Z", "message": "review feedback\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31497fb11449f47719f2f4f4376871a95c7472a0", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/31497fb11449f47719f2f4f4376871a95c7472a0", "committedDate": "2020-08-31T21:30:52Z", "message": "review feedback\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2332d9b2e25a1d362ce894e38009409506b89216", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/2332d9b2e25a1d362ce894e38009409506b89216", "committedDate": "2020-09-01T07:00:13Z", "message": "merged 2601-signingrecord, and fixed build to work with the new signing record package.\n\nalso added some output and summaries to the command line output.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f19e239c4b52c0f89b8a64e66a9951209808a15", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/9f19e239c4b52c0f89b8a64e66a9951209808a15", "committedDate": "2020-09-01T20:25:40Z", "message": "Merge remote-tracking branch 'upstream/master' into 2601"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afb3d19ea738a63dfdf8bcd7499991070971d066", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/afb3d19ea738a63dfdf8bcd7499991070971d066", "committedDate": "2020-09-01T22:14:35Z", "message": "updated interchange version to v.3\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "457a0940eb6551dbfd9cd8eecb1ce2253f66f5cf", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/457a0940eb6551dbfd9cd8eecb1ce2253f66f5cf", "committedDate": "2020-09-01T22:15:00Z", "message": "Merge remote-tracking branch 'upstream/master' into 2601"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70d80edf2d3ed5d86cf5d5cccc622ae2d41ea20a", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/70d80edf2d3ed5d86cf5d5cccc622ae2d41ea20a", "committedDate": "2020-09-02T00:02:03Z", "message": "negative testing for import.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7c50eaf64bd873153414b11f7bec3d9b8aca957", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/e7c50eaf64bd873153414b11f7bec3d9b8aca957", "committedDate": "2020-09-02T00:09:55Z", "message": "Merge remote-tracking branch 'upstream/master' into 2601"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMjA4NDY5", "url": "https://github.com/ConsenSys/teku/pull/2684#pullrequestreview-480208469", "createdAt": "2020-09-02T00:39:39Z", "commit": {"oid": "e7c50eaf64bd873153414b11f7bec3d9b8aca957"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMDozOTozOVrOHLM53Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwMTowMDoxMFrOHLNgRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwNzgwNQ==", "bodyText": "nit: Since we're reading all the bytes at once anyway we can just use:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try (InputStream input = Files.newInputStream(file.toPath())) {\n          \n          \n            \n                  ValidatorSigningRecord validatorSigningRecord =\n          \n          \n            \n                      ValidatorSigningRecord.fromBytes(Bytes.of(input.readAllBytes()));\n          \n          \n            \n                try {\n          \n          \n            \n                  ValidatorSigningRecord validatorSigningRecord =\n          \n          \n            \n                      ValidatorSigningRecord.fromBytes(Bytes.of(Files.readAllBytes(file.toPath)));", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r481507805", "createdAt": "2020-09-02T00:39:39Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionExporter.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import static tech.pegasys.teku.data.slashinginterchange.Metadata.INTERCHANGE_VERSION;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.schema.BLSPubKey;\n+import tech.pegasys.teku.api.schema.PublicKeyException;\n+import tech.pegasys.teku.data.signingrecord.ValidatorSigningRecord;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSlashingProtectionInterchangeFormat;\n+import tech.pegasys.teku.logging.SubCommandLogger;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionExporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final List<MinimalSigningHistory> minimalSigningHistoryList = new ArrayList<>();\n+  private Bytes32 genesisValidatorsRoot = null;\n+\n+  private final SubCommandLogger log;\n+\n+  public SlashingProtectionExporter(final SubCommandLogger log) {\n+    this.log = log;\n+  }\n+\n+  public void initialise(final Path slashProtectionPath) {\n+    File slashingProtectionRecords = slashProtectionPath.toFile();\n+    Arrays.stream(slashingProtectionRecords.listFiles())\n+        .filter(file -> file.isFile() && file.getName().endsWith(\".yml\"))\n+        .forEach(this::readSlashProtectionFile);\n+  }\n+\n+  private void readSlashProtectionFile(final File file) {\n+    try (InputStream input = Files.newInputStream(file.toPath())) {\n+      ValidatorSigningRecord validatorSigningRecord =\n+          ValidatorSigningRecord.fromBytes(Bytes.of(input.readAllBytes()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c50eaf64bd873153414b11f7bec3d9b8aca957"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwODc3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"the genesisValidatorsRoot of \"\n          \n          \n            \n                        \"The genesisValidatorsRoot of \"", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r481508776", "createdAt": "2020-09-02T00:43:24Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionExporter.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import static tech.pegasys.teku.data.slashinginterchange.Metadata.INTERCHANGE_VERSION;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.schema.BLSPubKey;\n+import tech.pegasys.teku.api.schema.PublicKeyException;\n+import tech.pegasys.teku.data.signingrecord.ValidatorSigningRecord;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSlashingProtectionInterchangeFormat;\n+import tech.pegasys.teku.logging.SubCommandLogger;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionExporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final List<MinimalSigningHistory> minimalSigningHistoryList = new ArrayList<>();\n+  private Bytes32 genesisValidatorsRoot = null;\n+\n+  private final SubCommandLogger log;\n+\n+  public SlashingProtectionExporter(final SubCommandLogger log) {\n+    this.log = log;\n+  }\n+\n+  public void initialise(final Path slashProtectionPath) {\n+    File slashingProtectionRecords = slashProtectionPath.toFile();\n+    Arrays.stream(slashingProtectionRecords.listFiles())\n+        .filter(file -> file.isFile() && file.getName().endsWith(\".yml\"))\n+        .forEach(this::readSlashProtectionFile);\n+  }\n+\n+  private void readSlashProtectionFile(final File file) {\n+    try (InputStream input = Files.newInputStream(file.toPath())) {\n+      ValidatorSigningRecord validatorSigningRecord =\n+          ValidatorSigningRecord.fromBytes(Bytes.of(input.readAllBytes()));\n+      if (genesisValidatorsRoot == null\n+          && validatorSigningRecord.getGenesisValidatorsRoot() != null) {\n+        this.genesisValidatorsRoot = validatorSigningRecord.getGenesisValidatorsRoot();\n+      } else if (validatorSigningRecord.getGenesisValidatorsRoot() != null\n+          && !genesisValidatorsRoot.equals(validatorSigningRecord.getGenesisValidatorsRoot())) {\n+        log.exit(\n+            1,\n+            \"the genesisValidatorsRoot of \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c50eaf64bd873153414b11f7bec3d9b8aca957"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUwODg1NA==", "bodyText": "Not sure why there's a toLowerCase on this.", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r481508854", "createdAt": "2020-09-02T00:43:41Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionExporter.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import static tech.pegasys.teku.data.slashinginterchange.Metadata.INTERCHANGE_VERSION;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.schema.BLSPubKey;\n+import tech.pegasys.teku.api.schema.PublicKeyException;\n+import tech.pegasys.teku.data.signingrecord.ValidatorSigningRecord;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSlashingProtectionInterchangeFormat;\n+import tech.pegasys.teku.logging.SubCommandLogger;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionExporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final List<MinimalSigningHistory> minimalSigningHistoryList = new ArrayList<>();\n+  private Bytes32 genesisValidatorsRoot = null;\n+\n+  private final SubCommandLogger log;\n+\n+  public SlashingProtectionExporter(final SubCommandLogger log) {\n+    this.log = log;\n+  }\n+\n+  public void initialise(final Path slashProtectionPath) {\n+    File slashingProtectionRecords = slashProtectionPath.toFile();\n+    Arrays.stream(slashingProtectionRecords.listFiles())\n+        .filter(file -> file.isFile() && file.getName().endsWith(\".yml\"))\n+        .forEach(this::readSlashProtectionFile);\n+  }\n+\n+  private void readSlashProtectionFile(final File file) {\n+    try (InputStream input = Files.newInputStream(file.toPath())) {\n+      ValidatorSigningRecord validatorSigningRecord =\n+          ValidatorSigningRecord.fromBytes(Bytes.of(input.readAllBytes()));\n+      if (genesisValidatorsRoot == null\n+          && validatorSigningRecord.getGenesisValidatorsRoot() != null) {\n+        this.genesisValidatorsRoot = validatorSigningRecord.getGenesisValidatorsRoot();\n+      } else if (validatorSigningRecord.getGenesisValidatorsRoot() != null\n+          && !genesisValidatorsRoot.equals(validatorSigningRecord.getGenesisValidatorsRoot())) {\n+        log.exit(\n+            1,\n+            \"the genesisValidatorsRoot of \"\n+                + file.getName()\n+                + \" does not match the expected \"\n+                + genesisValidatorsRoot.toHexString().toLowerCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c50eaf64bd873153414b11f7bec3d9b8aca957"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUxMTI2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  String cause = e.getCause() != null ? e.getCause().getMessage() : Strings.EMPTY;\n          \n          \n            \n                  String cause = e.getCause() != null ? e.getCause().getMessage() : e.getMessage();", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r481511262", "createdAt": "2020-09-02T00:46:46Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionImporter.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import static tech.pegasys.teku.data.slashinginterchange.Metadata.INTERCHANGE_VERSION;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.logging.log4j.util.Strings;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.data.signingrecord.ValidatorSigningRecord;\n+import tech.pegasys.teku.data.slashinginterchange.CompleteSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.SignedAttestation;\n+import tech.pegasys.teku.data.slashinginterchange.SignedBlock;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.logging.SubCommandLogger;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionImporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private Path slashingProtectionPath;\n+  private List<MinimalSigningHistory> data = new ArrayList<>();\n+  private Metadata metadata;\n+  private final SubCommandLogger log;\n+\n+  public SlashingProtectionImporter(final SubCommandLogger log) {\n+    this.log = log;\n+  }\n+\n+  public void initialise(final File inputFile) throws IOException {\n+    final ObjectMapper jsonMapper = jsonProvider.getObjectMapper();\n+    try {\n+      final JsonNode jsonNode = jsonMapper.readTree(inputFile);\n+\n+      metadata = jsonMapper.treeToValue(jsonNode.get(\"metadata\"), Metadata.class);\n+      if (metadata == null) {\n+        log.exit(\n+            1,\n+            \"Import file \"\n+                + inputFile.toString()\n+                + \" does not appear to have metadata information, and cannot be loaded.\");\n+        return; // Testing mocks log.exit\n+      }\n+      if (!metadata.interchangeFormatVersion.equals(INTERCHANGE_VERSION)) {\n+        log.exit(\n+            1,\n+            \"Import file \"\n+                + inputFile.toString()\n+                + \" is not format version \"\n+                + INTERCHANGE_VERSION.toString()\n+                + \", cannot continue.\");\n+        return; // Testing mocks log.exit\n+      }\n+\n+      if (metadata.interchangeFormat.equals(InterchangeFormat.minimal)) {\n+        data =\n+            Arrays.asList(\n+                jsonMapper.treeToValue(jsonNode.get(\"data\"), MinimalSigningHistory[].class));\n+      } else {\n+        data =\n+            summariseCompleteInterchangeFormat(\n+                Arrays.asList(\n+                    jsonMapper.treeToValue(jsonNode.get(\"data\"), CompleteSigningHistory[].class)));\n+      }\n+    } catch (JsonMappingException e) {\n+      String cause = e.getCause() != null ? e.getCause().getMessage() : Strings.EMPTY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c50eaf64bd873153414b11f7bec3d9b8aca957"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUxMTQwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  String cause = e.getCause() != null ? e.getCause().getMessage() : Strings.EMPTY;\n          \n          \n            \n                  String cause = e.getCause() != null ? e.getCause().getMessage() : e.getMessage();", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r481511405", "createdAt": "2020-09-02T00:46:57Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionImporter.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import static tech.pegasys.teku.data.slashinginterchange.Metadata.INTERCHANGE_VERSION;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.logging.log4j.util.Strings;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.data.signingrecord.ValidatorSigningRecord;\n+import tech.pegasys.teku.data.slashinginterchange.CompleteSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.SignedAttestation;\n+import tech.pegasys.teku.data.slashinginterchange.SignedBlock;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.logging.SubCommandLogger;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionImporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private Path slashingProtectionPath;\n+  private List<MinimalSigningHistory> data = new ArrayList<>();\n+  private Metadata metadata;\n+  private final SubCommandLogger log;\n+\n+  public SlashingProtectionImporter(final SubCommandLogger log) {\n+    this.log = log;\n+  }\n+\n+  public void initialise(final File inputFile) throws IOException {\n+    final ObjectMapper jsonMapper = jsonProvider.getObjectMapper();\n+    try {\n+      final JsonNode jsonNode = jsonMapper.readTree(inputFile);\n+\n+      metadata = jsonMapper.treeToValue(jsonNode.get(\"metadata\"), Metadata.class);\n+      if (metadata == null) {\n+        log.exit(\n+            1,\n+            \"Import file \"\n+                + inputFile.toString()\n+                + \" does not appear to have metadata information, and cannot be loaded.\");\n+        return; // Testing mocks log.exit\n+      }\n+      if (!metadata.interchangeFormatVersion.equals(INTERCHANGE_VERSION)) {\n+        log.exit(\n+            1,\n+            \"Import file \"\n+                + inputFile.toString()\n+                + \" is not format version \"\n+                + INTERCHANGE_VERSION.toString()\n+                + \", cannot continue.\");\n+        return; // Testing mocks log.exit\n+      }\n+\n+      if (metadata.interchangeFormat.equals(InterchangeFormat.minimal)) {\n+        data =\n+            Arrays.asList(\n+                jsonMapper.treeToValue(jsonNode.get(\"data\"), MinimalSigningHistory[].class));\n+      } else {\n+        data =\n+            summariseCompleteInterchangeFormat(\n+                Arrays.asList(\n+                    jsonMapper.treeToValue(jsonNode.get(\"data\"), CompleteSigningHistory[].class)));\n+      }\n+    } catch (JsonMappingException e) {\n+      String cause = e.getCause() != null ? e.getCause().getMessage() : Strings.EMPTY;\n+      log.exit(1, \"Failed to load data from \" + inputFile.getName() + \". \" + cause);\n+    } catch (JsonParseException e) {\n+      String cause = e.getCause() != null ? e.getCause().getMessage() : Strings.EMPTY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c50eaf64bd873153414b11f7bec3d9b8aca957"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUxMTg2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (!metadata.interchangeFormatVersion.equals(INTERCHANGE_VERSION)) {\n          \n          \n            \n                  if (!INTERCHANGE_VERSION.equals(metadata.interchangeFormatVersion)) {\n          \n      \n    \n    \n  \n\nto avoid potential NullPointerException if the version is missing (Jackson might have caught it already but doesn't hurt to be paranoid)", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r481511860", "createdAt": "2020-09-02T00:48:40Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionImporter.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import static tech.pegasys.teku.data.slashinginterchange.Metadata.INTERCHANGE_VERSION;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.logging.log4j.util.Strings;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.data.signingrecord.ValidatorSigningRecord;\n+import tech.pegasys.teku.data.slashinginterchange.CompleteSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.SignedAttestation;\n+import tech.pegasys.teku.data.slashinginterchange.SignedBlock;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.logging.SubCommandLogger;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionImporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private Path slashingProtectionPath;\n+  private List<MinimalSigningHistory> data = new ArrayList<>();\n+  private Metadata metadata;\n+  private final SubCommandLogger log;\n+\n+  public SlashingProtectionImporter(final SubCommandLogger log) {\n+    this.log = log;\n+  }\n+\n+  public void initialise(final File inputFile) throws IOException {\n+    final ObjectMapper jsonMapper = jsonProvider.getObjectMapper();\n+    try {\n+      final JsonNode jsonNode = jsonMapper.readTree(inputFile);\n+\n+      metadata = jsonMapper.treeToValue(jsonNode.get(\"metadata\"), Metadata.class);\n+      if (metadata == null) {\n+        log.exit(\n+            1,\n+            \"Import file \"\n+                + inputFile.toString()\n+                + \" does not appear to have metadata information, and cannot be loaded.\");\n+        return; // Testing mocks log.exit\n+      }\n+      if (!metadata.interchangeFormatVersion.equals(INTERCHANGE_VERSION)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c50eaf64bd873153414b11f7bec3d9b8aca957"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUxMjAxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"Import file \"\n          \n          \n            \n                            + inputFile.toString()\n          \n          \n            \n                            + \" is not format version \"\n          \n          \n            \n                            + INTERCHANGE_VERSION.toString()\n          \n          \n            \n                            + \", cannot continue.\");\n          \n          \n            \n                        \"Import file \"\n          \n          \n            \n                            + inputFile.toString()\n          \n          \n            \n                            + \" has unsupported format version \"\n          \n          \n            \n                            + metadata.interchangeFormatVersion\n          \n          \n            \n                            + \". Required version is \"\n          \n          \n            \n                            + INTERCHANGE_VERSION);", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r481512017", "createdAt": "2020-09-02T00:49:18Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionImporter.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import static tech.pegasys.teku.data.slashinginterchange.Metadata.INTERCHANGE_VERSION;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.logging.log4j.util.Strings;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.data.signingrecord.ValidatorSigningRecord;\n+import tech.pegasys.teku.data.slashinginterchange.CompleteSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.SignedAttestation;\n+import tech.pegasys.teku.data.slashinginterchange.SignedBlock;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.logging.SubCommandLogger;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionImporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private Path slashingProtectionPath;\n+  private List<MinimalSigningHistory> data = new ArrayList<>();\n+  private Metadata metadata;\n+  private final SubCommandLogger log;\n+\n+  public SlashingProtectionImporter(final SubCommandLogger log) {\n+    this.log = log;\n+  }\n+\n+  public void initialise(final File inputFile) throws IOException {\n+    final ObjectMapper jsonMapper = jsonProvider.getObjectMapper();\n+    try {\n+      final JsonNode jsonNode = jsonMapper.readTree(inputFile);\n+\n+      metadata = jsonMapper.treeToValue(jsonNode.get(\"metadata\"), Metadata.class);\n+      if (metadata == null) {\n+        log.exit(\n+            1,\n+            \"Import file \"\n+                + inputFile.toString()\n+                + \" does not appear to have metadata information, and cannot be loaded.\");\n+        return; // Testing mocks log.exit\n+      }\n+      if (!metadata.interchangeFormatVersion.equals(INTERCHANGE_VERSION)) {\n+        log.exit(\n+            1,\n+            \"Import file \"\n+                + inputFile.toString()\n+                + \" is not format version \"\n+                + INTERCHANGE_VERSION.toString()\n+                + \", cannot continue.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c50eaf64bd873153414b11f7bec3d9b8aca957"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUxMjUxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String validatorString = minimalSigningHistory.pubkey.toHexString().substring(2).toLowerCase();\n          \n          \n            \n                String validatorString = minimalSigningHistory.pubkey.toUnprefixedHexString().toLowerCase();", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r481512512", "createdAt": "2020-09-02T00:51:05Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionImporter.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import static tech.pegasys.teku.data.slashinginterchange.Metadata.INTERCHANGE_VERSION;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.logging.log4j.util.Strings;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.data.signingrecord.ValidatorSigningRecord;\n+import tech.pegasys.teku.data.slashinginterchange.CompleteSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.SignedAttestation;\n+import tech.pegasys.teku.data.slashinginterchange.SignedBlock;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.logging.SubCommandLogger;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionImporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private Path slashingProtectionPath;\n+  private List<MinimalSigningHistory> data = new ArrayList<>();\n+  private Metadata metadata;\n+  private final SubCommandLogger log;\n+\n+  public SlashingProtectionImporter(final SubCommandLogger log) {\n+    this.log = log;\n+  }\n+\n+  public void initialise(final File inputFile) throws IOException {\n+    final ObjectMapper jsonMapper = jsonProvider.getObjectMapper();\n+    try {\n+      final JsonNode jsonNode = jsonMapper.readTree(inputFile);\n+\n+      metadata = jsonMapper.treeToValue(jsonNode.get(\"metadata\"), Metadata.class);\n+      if (metadata == null) {\n+        log.exit(\n+            1,\n+            \"Import file \"\n+                + inputFile.toString()\n+                + \" does not appear to have metadata information, and cannot be loaded.\");\n+        return; // Testing mocks log.exit\n+      }\n+      if (!metadata.interchangeFormatVersion.equals(INTERCHANGE_VERSION)) {\n+        log.exit(\n+            1,\n+            \"Import file \"\n+                + inputFile.toString()\n+                + \" is not format version \"\n+                + INTERCHANGE_VERSION.toString()\n+                + \", cannot continue.\");\n+        return; // Testing mocks log.exit\n+      }\n+\n+      if (metadata.interchangeFormat.equals(InterchangeFormat.minimal)) {\n+        data =\n+            Arrays.asList(\n+                jsonMapper.treeToValue(jsonNode.get(\"data\"), MinimalSigningHistory[].class));\n+      } else {\n+        data =\n+            summariseCompleteInterchangeFormat(\n+                Arrays.asList(\n+                    jsonMapper.treeToValue(jsonNode.get(\"data\"), CompleteSigningHistory[].class)));\n+      }\n+    } catch (JsonMappingException e) {\n+      String cause = e.getCause() != null ? e.getCause().getMessage() : Strings.EMPTY;\n+      log.exit(1, \"Failed to load data from \" + inputFile.getName() + \". \" + cause);\n+    } catch (JsonParseException e) {\n+      String cause = e.getCause() != null ? e.getCause().getMessage() : Strings.EMPTY;\n+      log.exit(1, \"Json does not appear valid in file \" + inputFile.getName() + \". \" + cause);\n+    }\n+  }\n+\n+  private List<MinimalSigningHistory> summariseCompleteInterchangeFormat(\n+      final List<CompleteSigningHistory> completeSigningData) {\n+    return completeSigningData.stream()\n+        .map(this::minimalSigningHistoryConverter)\n+        .collect(Collectors.toList());\n+  }\n+\n+  private MinimalSigningHistory minimalSigningHistoryConverter(\n+      final CompleteSigningHistory completeSigningHistory) {\n+    final Optional<UInt64> lastSlot =\n+        completeSigningHistory.signedBlocks.stream()\n+            .map(SignedBlock::getSlot)\n+            .max(UInt64::compareTo);\n+    final Optional<UInt64> sourceEpoch =\n+        completeSigningHistory.signedAttestations.stream()\n+            .map(SignedAttestation::getSourceEpoch)\n+            .max(UInt64::compareTo);\n+    final Optional<UInt64> targetEpoch =\n+        completeSigningHistory.signedAttestations.stream()\n+            .map(SignedAttestation::getTargetEpoch)\n+            .max(UInt64::compareTo);\n+    final ValidatorSigningRecord record =\n+        new ValidatorSigningRecord(\n+            metadata.genesisValidatorsRoot,\n+            lastSlot.orElse(UInt64.ZERO),\n+            sourceEpoch.orElse(ValidatorSigningRecord.NEVER_SIGNED),\n+            targetEpoch.orElse(ValidatorSigningRecord.NEVER_SIGNED));\n+    return new MinimalSigningHistory(completeSigningHistory.pubkey, record);\n+  }\n+\n+  public void updateLocalRecords(final Path slashingProtectionPath) {\n+    this.slashingProtectionPath = slashingProtectionPath;\n+    data.forEach(this::updateLocalRecord);\n+    log.display(\"Updated \" + data.size() + \" validator slashing protection records\");\n+  }\n+\n+  private void updateLocalRecord(final MinimalSigningHistory minimalSigningHistory) {\n+    String validatorString = minimalSigningHistory.pubkey.toHexString().substring(2).toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c50eaf64bd873153414b11f7bec3d9b8aca957"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUxMjYzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Path outputFile = slashingProtectionPath.resolve(validatorString.concat(\".yml\"));\n          \n          \n            \n                Path outputFile = slashingProtectionPath.resolve(validatorString + \".yml\");", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r481512634", "createdAt": "2020-09-02T00:51:40Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionImporter.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import static tech.pegasys.teku.data.slashinginterchange.Metadata.INTERCHANGE_VERSION;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.logging.log4j.util.Strings;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.data.signingrecord.ValidatorSigningRecord;\n+import tech.pegasys.teku.data.slashinginterchange.CompleteSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.SignedAttestation;\n+import tech.pegasys.teku.data.slashinginterchange.SignedBlock;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.logging.SubCommandLogger;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionImporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private Path slashingProtectionPath;\n+  private List<MinimalSigningHistory> data = new ArrayList<>();\n+  private Metadata metadata;\n+  private final SubCommandLogger log;\n+\n+  public SlashingProtectionImporter(final SubCommandLogger log) {\n+    this.log = log;\n+  }\n+\n+  public void initialise(final File inputFile) throws IOException {\n+    final ObjectMapper jsonMapper = jsonProvider.getObjectMapper();\n+    try {\n+      final JsonNode jsonNode = jsonMapper.readTree(inputFile);\n+\n+      metadata = jsonMapper.treeToValue(jsonNode.get(\"metadata\"), Metadata.class);\n+      if (metadata == null) {\n+        log.exit(\n+            1,\n+            \"Import file \"\n+                + inputFile.toString()\n+                + \" does not appear to have metadata information, and cannot be loaded.\");\n+        return; // Testing mocks log.exit\n+      }\n+      if (!metadata.interchangeFormatVersion.equals(INTERCHANGE_VERSION)) {\n+        log.exit(\n+            1,\n+            \"Import file \"\n+                + inputFile.toString()\n+                + \" is not format version \"\n+                + INTERCHANGE_VERSION.toString()\n+                + \", cannot continue.\");\n+        return; // Testing mocks log.exit\n+      }\n+\n+      if (metadata.interchangeFormat.equals(InterchangeFormat.minimal)) {\n+        data =\n+            Arrays.asList(\n+                jsonMapper.treeToValue(jsonNode.get(\"data\"), MinimalSigningHistory[].class));\n+      } else {\n+        data =\n+            summariseCompleteInterchangeFormat(\n+                Arrays.asList(\n+                    jsonMapper.treeToValue(jsonNode.get(\"data\"), CompleteSigningHistory[].class)));\n+      }\n+    } catch (JsonMappingException e) {\n+      String cause = e.getCause() != null ? e.getCause().getMessage() : Strings.EMPTY;\n+      log.exit(1, \"Failed to load data from \" + inputFile.getName() + \". \" + cause);\n+    } catch (JsonParseException e) {\n+      String cause = e.getCause() != null ? e.getCause().getMessage() : Strings.EMPTY;\n+      log.exit(1, \"Json does not appear valid in file \" + inputFile.getName() + \". \" + cause);\n+    }\n+  }\n+\n+  private List<MinimalSigningHistory> summariseCompleteInterchangeFormat(\n+      final List<CompleteSigningHistory> completeSigningData) {\n+    return completeSigningData.stream()\n+        .map(this::minimalSigningHistoryConverter)\n+        .collect(Collectors.toList());\n+  }\n+\n+  private MinimalSigningHistory minimalSigningHistoryConverter(\n+      final CompleteSigningHistory completeSigningHistory) {\n+    final Optional<UInt64> lastSlot =\n+        completeSigningHistory.signedBlocks.stream()\n+            .map(SignedBlock::getSlot)\n+            .max(UInt64::compareTo);\n+    final Optional<UInt64> sourceEpoch =\n+        completeSigningHistory.signedAttestations.stream()\n+            .map(SignedAttestation::getSourceEpoch)\n+            .max(UInt64::compareTo);\n+    final Optional<UInt64> targetEpoch =\n+        completeSigningHistory.signedAttestations.stream()\n+            .map(SignedAttestation::getTargetEpoch)\n+            .max(UInt64::compareTo);\n+    final ValidatorSigningRecord record =\n+        new ValidatorSigningRecord(\n+            metadata.genesisValidatorsRoot,\n+            lastSlot.orElse(UInt64.ZERO),\n+            sourceEpoch.orElse(ValidatorSigningRecord.NEVER_SIGNED),\n+            targetEpoch.orElse(ValidatorSigningRecord.NEVER_SIGNED));\n+    return new MinimalSigningHistory(completeSigningHistory.pubkey, record);\n+  }\n+\n+  public void updateLocalRecords(final Path slashingProtectionPath) {\n+    this.slashingProtectionPath = slashingProtectionPath;\n+    data.forEach(this::updateLocalRecord);\n+    log.display(\"Updated \" + data.size() + \" validator slashing protection records\");\n+  }\n+\n+  private void updateLocalRecord(final MinimalSigningHistory minimalSigningHistory) {\n+    String validatorString = minimalSigningHistory.pubkey.toHexString().substring(2).toLowerCase();\n+\n+    log.display(\"Importing \" + validatorString);\n+    Path outputFile = slashingProtectionPath.resolve(validatorString.concat(\".yml\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c50eaf64bd873153414b11f7bec3d9b8aca957"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUxMzQ1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  try (InputStream input = Files.newInputStream(outputFile)) {\n          \n          \n            \n                    existingRecord =\n          \n          \n            \n                        Optional.ofNullable(ValidatorSigningRecord.fromBytes(Bytes.of(input.readAllBytes())));\n          \n          \n            \n                  try {\n          \n          \n            \n                    existingRecord =\n          \n          \n            \n                        Optional.ofNullable(ValidatorSigningRecord.fromBytes(Bytes.of(Files.readAllBytes(outputFile)));", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r481513459", "createdAt": "2020-09-02T00:53:19Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionImporter.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import static tech.pegasys.teku.data.slashinginterchange.Metadata.INTERCHANGE_VERSION;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.logging.log4j.util.Strings;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.data.signingrecord.ValidatorSigningRecord;\n+import tech.pegasys.teku.data.slashinginterchange.CompleteSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.SignedAttestation;\n+import tech.pegasys.teku.data.slashinginterchange.SignedBlock;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.logging.SubCommandLogger;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionImporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private Path slashingProtectionPath;\n+  private List<MinimalSigningHistory> data = new ArrayList<>();\n+  private Metadata metadata;\n+  private final SubCommandLogger log;\n+\n+  public SlashingProtectionImporter(final SubCommandLogger log) {\n+    this.log = log;\n+  }\n+\n+  public void initialise(final File inputFile) throws IOException {\n+    final ObjectMapper jsonMapper = jsonProvider.getObjectMapper();\n+    try {\n+      final JsonNode jsonNode = jsonMapper.readTree(inputFile);\n+\n+      metadata = jsonMapper.treeToValue(jsonNode.get(\"metadata\"), Metadata.class);\n+      if (metadata == null) {\n+        log.exit(\n+            1,\n+            \"Import file \"\n+                + inputFile.toString()\n+                + \" does not appear to have metadata information, and cannot be loaded.\");\n+        return; // Testing mocks log.exit\n+      }\n+      if (!metadata.interchangeFormatVersion.equals(INTERCHANGE_VERSION)) {\n+        log.exit(\n+            1,\n+            \"Import file \"\n+                + inputFile.toString()\n+                + \" is not format version \"\n+                + INTERCHANGE_VERSION.toString()\n+                + \", cannot continue.\");\n+        return; // Testing mocks log.exit\n+      }\n+\n+      if (metadata.interchangeFormat.equals(InterchangeFormat.minimal)) {\n+        data =\n+            Arrays.asList(\n+                jsonMapper.treeToValue(jsonNode.get(\"data\"), MinimalSigningHistory[].class));\n+      } else {\n+        data =\n+            summariseCompleteInterchangeFormat(\n+                Arrays.asList(\n+                    jsonMapper.treeToValue(jsonNode.get(\"data\"), CompleteSigningHistory[].class)));\n+      }\n+    } catch (JsonMappingException e) {\n+      String cause = e.getCause() != null ? e.getCause().getMessage() : Strings.EMPTY;\n+      log.exit(1, \"Failed to load data from \" + inputFile.getName() + \". \" + cause);\n+    } catch (JsonParseException e) {\n+      String cause = e.getCause() != null ? e.getCause().getMessage() : Strings.EMPTY;\n+      log.exit(1, \"Json does not appear valid in file \" + inputFile.getName() + \". \" + cause);\n+    }\n+  }\n+\n+  private List<MinimalSigningHistory> summariseCompleteInterchangeFormat(\n+      final List<CompleteSigningHistory> completeSigningData) {\n+    return completeSigningData.stream()\n+        .map(this::minimalSigningHistoryConverter)\n+        .collect(Collectors.toList());\n+  }\n+\n+  private MinimalSigningHistory minimalSigningHistoryConverter(\n+      final CompleteSigningHistory completeSigningHistory) {\n+    final Optional<UInt64> lastSlot =\n+        completeSigningHistory.signedBlocks.stream()\n+            .map(SignedBlock::getSlot)\n+            .max(UInt64::compareTo);\n+    final Optional<UInt64> sourceEpoch =\n+        completeSigningHistory.signedAttestations.stream()\n+            .map(SignedAttestation::getSourceEpoch)\n+            .max(UInt64::compareTo);\n+    final Optional<UInt64> targetEpoch =\n+        completeSigningHistory.signedAttestations.stream()\n+            .map(SignedAttestation::getTargetEpoch)\n+            .max(UInt64::compareTo);\n+    final ValidatorSigningRecord record =\n+        new ValidatorSigningRecord(\n+            metadata.genesisValidatorsRoot,\n+            lastSlot.orElse(UInt64.ZERO),\n+            sourceEpoch.orElse(ValidatorSigningRecord.NEVER_SIGNED),\n+            targetEpoch.orElse(ValidatorSigningRecord.NEVER_SIGNED));\n+    return new MinimalSigningHistory(completeSigningHistory.pubkey, record);\n+  }\n+\n+  public void updateLocalRecords(final Path slashingProtectionPath) {\n+    this.slashingProtectionPath = slashingProtectionPath;\n+    data.forEach(this::updateLocalRecord);\n+    log.display(\"Updated \" + data.size() + \" validator slashing protection records\");\n+  }\n+\n+  private void updateLocalRecord(final MinimalSigningHistory minimalSigningHistory) {\n+    String validatorString = minimalSigningHistory.pubkey.toHexString().substring(2).toLowerCase();\n+\n+    log.display(\"Importing \" + validatorString);\n+    Path outputFile = slashingProtectionPath.resolve(validatorString.concat(\".yml\"));\n+    Optional<ValidatorSigningRecord> existingRecord = Optional.empty();\n+    if (outputFile.toFile().exists()) {\n+      try (InputStream input = Files.newInputStream(outputFile)) {\n+        existingRecord =\n+            Optional.ofNullable(ValidatorSigningRecord.fromBytes(Bytes.of(input.readAllBytes())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c50eaf64bd873153414b11f7bec3d9b8aca957"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUxNTE1Ng==", "bodyText": "Actually probably should use SyncDataAccessor here to make sure the change is really persisted to disk.  Likely have to move it to a different module but it's very standalone so that should be easy enough.", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r481515156", "createdAt": "2020-09-02T00:55:07Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionImporter.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data;\n+\n+import static tech.pegasys.teku.data.slashinginterchange.Metadata.INTERCHANGE_VERSION;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.logging.log4j.util.Strings;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.data.signingrecord.ValidatorSigningRecord;\n+import tech.pegasys.teku.data.slashinginterchange.CompleteSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.InterchangeFormat;\n+import tech.pegasys.teku.data.slashinginterchange.Metadata;\n+import tech.pegasys.teku.data.slashinginterchange.MinimalSigningHistory;\n+import tech.pegasys.teku.data.slashinginterchange.SignedAttestation;\n+import tech.pegasys.teku.data.slashinginterchange.SignedBlock;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.logging.SubCommandLogger;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class SlashingProtectionImporter {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private Path slashingProtectionPath;\n+  private List<MinimalSigningHistory> data = new ArrayList<>();\n+  private Metadata metadata;\n+  private final SubCommandLogger log;\n+\n+  public SlashingProtectionImporter(final SubCommandLogger log) {\n+    this.log = log;\n+  }\n+\n+  public void initialise(final File inputFile) throws IOException {\n+    final ObjectMapper jsonMapper = jsonProvider.getObjectMapper();\n+    try {\n+      final JsonNode jsonNode = jsonMapper.readTree(inputFile);\n+\n+      metadata = jsonMapper.treeToValue(jsonNode.get(\"metadata\"), Metadata.class);\n+      if (metadata == null) {\n+        log.exit(\n+            1,\n+            \"Import file \"\n+                + inputFile.toString()\n+                + \" does not appear to have metadata information, and cannot be loaded.\");\n+        return; // Testing mocks log.exit\n+      }\n+      if (!metadata.interchangeFormatVersion.equals(INTERCHANGE_VERSION)) {\n+        log.exit(\n+            1,\n+            \"Import file \"\n+                + inputFile.toString()\n+                + \" is not format version \"\n+                + INTERCHANGE_VERSION.toString()\n+                + \", cannot continue.\");\n+        return; // Testing mocks log.exit\n+      }\n+\n+      if (metadata.interchangeFormat.equals(InterchangeFormat.minimal)) {\n+        data =\n+            Arrays.asList(\n+                jsonMapper.treeToValue(jsonNode.get(\"data\"), MinimalSigningHistory[].class));\n+      } else {\n+        data =\n+            summariseCompleteInterchangeFormat(\n+                Arrays.asList(\n+                    jsonMapper.treeToValue(jsonNode.get(\"data\"), CompleteSigningHistory[].class)));\n+      }\n+    } catch (JsonMappingException e) {\n+      String cause = e.getCause() != null ? e.getCause().getMessage() : Strings.EMPTY;\n+      log.exit(1, \"Failed to load data from \" + inputFile.getName() + \". \" + cause);\n+    } catch (JsonParseException e) {\n+      String cause = e.getCause() != null ? e.getCause().getMessage() : Strings.EMPTY;\n+      log.exit(1, \"Json does not appear valid in file \" + inputFile.getName() + \". \" + cause);\n+    }\n+  }\n+\n+  private List<MinimalSigningHistory> summariseCompleteInterchangeFormat(\n+      final List<CompleteSigningHistory> completeSigningData) {\n+    return completeSigningData.stream()\n+        .map(this::minimalSigningHistoryConverter)\n+        .collect(Collectors.toList());\n+  }\n+\n+  private MinimalSigningHistory minimalSigningHistoryConverter(\n+      final CompleteSigningHistory completeSigningHistory) {\n+    final Optional<UInt64> lastSlot =\n+        completeSigningHistory.signedBlocks.stream()\n+            .map(SignedBlock::getSlot)\n+            .max(UInt64::compareTo);\n+    final Optional<UInt64> sourceEpoch =\n+        completeSigningHistory.signedAttestations.stream()\n+            .map(SignedAttestation::getSourceEpoch)\n+            .max(UInt64::compareTo);\n+    final Optional<UInt64> targetEpoch =\n+        completeSigningHistory.signedAttestations.stream()\n+            .map(SignedAttestation::getTargetEpoch)\n+            .max(UInt64::compareTo);\n+    final ValidatorSigningRecord record =\n+        new ValidatorSigningRecord(\n+            metadata.genesisValidatorsRoot,\n+            lastSlot.orElse(UInt64.ZERO),\n+            sourceEpoch.orElse(ValidatorSigningRecord.NEVER_SIGNED),\n+            targetEpoch.orElse(ValidatorSigningRecord.NEVER_SIGNED));\n+    return new MinimalSigningHistory(completeSigningHistory.pubkey, record);\n+  }\n+\n+  public void updateLocalRecords(final Path slashingProtectionPath) {\n+    this.slashingProtectionPath = slashingProtectionPath;\n+    data.forEach(this::updateLocalRecord);\n+    log.display(\"Updated \" + data.size() + \" validator slashing protection records\");\n+  }\n+\n+  private void updateLocalRecord(final MinimalSigningHistory minimalSigningHistory) {\n+    String validatorString = minimalSigningHistory.pubkey.toHexString().substring(2).toLowerCase();\n+\n+    log.display(\"Importing \" + validatorString);\n+    Path outputFile = slashingProtectionPath.resolve(validatorString.concat(\".yml\"));\n+    Optional<ValidatorSigningRecord> existingRecord = Optional.empty();\n+    if (outputFile.toFile().exists()) {\n+      try (InputStream input = Files.newInputStream(outputFile)) {\n+        existingRecord =\n+            Optional.ofNullable(ValidatorSigningRecord.fromBytes(Bytes.of(input.readAllBytes())));\n+      } catch (IOException e) {\n+        log.exit(1, \"Failed to read existing file: \" + outputFile.toString());\n+      }\n+    }\n+    if (existingRecord.isPresent()\n+        && metadata.genesisValidatorsRoot.compareTo(existingRecord.get().getGenesisValidatorsRoot())\n+            != 0) {\n+      log.exit(\n+          1,\n+          \"Validator \"\n+              + minimalSigningHistory.pubkey.toHexString()\n+              + \" has a different validators signing root to the data being imported\");\n+    }\n+\n+    try (OutputStream out = Files.newOutputStream(outputFile)) {\n+      out.write(\n+          minimalSigningHistory\n+              .toValidatorSigningRecord(existingRecord, metadata.genesisValidatorsRoot)\n+              .toBytes()\n+              .toArray());\n+    } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c50eaf64bd873153414b11f7bec3d9b8aca957"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUxNjI2OA==", "bodyText": "I think these are going to be renamed - probably wind up with a version 4.  Ok to merge as-is but we probably should wait for that change to come through before we really announce this so that we don't have to maintain support for version 3.", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r481516268", "createdAt": "2020-09-02T00:56:17Z", "author": {"login": "ajsutton"}, "path": "data/dataexchange/src/main/java/tech/pegasys/teku/data/slashinginterchange/MinimalSigningHistory.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.data.slashinginterchange;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.schema.BLSPubKey;\n+import tech.pegasys.teku.data.signingrecord.ValidatorSigningRecord;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+public class MinimalSigningHistory {\n+  @JsonProperty(\"pubkey\")\n+  public final BLSPubKey pubkey;\n+\n+  @JsonProperty(\"last_signed_block_slot\")\n+  public final UInt64 lastSignedBlockSlot;\n+\n+  @JsonProperty(\"last_signed_attestation_source_epoch\")\n+  public final UInt64 lastSignedAttestationSourceEpoch;\n+\n+  @JsonProperty(\"last_signed_attestation_target_epoch\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7c50eaf64bd873153414b11f7bec3d9b8aca957"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTUxNzYzOA==", "bodyText": "Maybe just add a separate item to TekuConfiguration that has the slashing protection path.  Right now it would be calculated off of data dir but then we'd be in a good place to be able to make it a separate CLI arg in the future.", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r481517638", "createdAt": "2020-09-02T01:00:10Z", "author": {"login": "ajsutton"}, "path": "teku/src/main/java/tech/pegasys/teku/services/ServiceController.java", "diffHunk": "@@ -37,7 +39,9 @@ public ServiceController(final ServiceConfig config) {\n     if (config.getConfig().isRemoteValidatorApiEnabled()) {\n       services.add(new RemoteValidatorService(config));\n     } else {\n-      services.add(ValidatorClientService.create(config));\n+      final Path slashingProtectionPath =\n+          DataOptions.getValidatorsSlashingProtectionPath(config.getConfig().getDataPath());\n+      services.add(ValidatorClientService.create(config, slashingProtectionPath));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg4MzYxNQ=="}, "originalCommit": {"oid": "9dbb02d37f6f50ec791669fb938ab5a937317a20"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f09c1fce8dff230cde09070cc23ea8320f7036a", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/1f09c1fce8dff230cde09070cc23ea8320f7036a", "committedDate": "2020-09-02T01:35:11Z", "message": "Update data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionImporter.java\n\nCo-authored-by: Adrian Sutton <adrian@symphonious.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75786833b1c3c1ec15e377923e08a5bcceeed9b6", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/75786833b1c3c1ec15e377923e08a5bcceeed9b6", "committedDate": "2020-09-02T01:37:50Z", "message": "Update data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionExporter.java\n\nCo-authored-by: Adrian Sutton <adrian@symphonious.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "627914166a4c205c66ecf2cd12c53c28903f38d9", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/627914166a4c205c66ecf2cd12c53c28903f38d9", "committedDate": "2020-09-02T01:38:00Z", "message": "Update data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionImporter.java\n\nCo-authored-by: Adrian Sutton <adrian@symphonious.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24d97258daf97966b13f8d3a23d36876b8ae7a7c", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/24d97258daf97966b13f8d3a23d36876b8ae7a7c", "committedDate": "2020-09-02T01:38:15Z", "message": "Update data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionExporter.java\n\nCo-authored-by: Adrian Sutton <adrian@symphonious.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a17a90feb94e961c04d61be00512a348ea75479", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/4a17a90feb94e961c04d61be00512a348ea75479", "committedDate": "2020-09-02T01:38:39Z", "message": "Update data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionImporter.java\n\nCo-authored-by: Adrian Sutton <adrian@symphonious.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef7344b897003978cfa619a0b840262ace522b10", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/ef7344b897003978cfa619a0b840262ace522b10", "committedDate": "2020-09-02T01:38:47Z", "message": "Update data/dataexchange/src/main/java/tech/pegasys/teku/data/SlashingProtectionImporter.java\n\nCo-authored-by: Adrian Sutton <adrian@symphonious.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08181b921cf76fd2d4c850792be37b4857145b0e", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/08181b921cf76fd2d4c850792be37b4857145b0e", "committedDate": "2020-09-02T02:14:38Z", "message": "review feedback\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ae95c4d890ce0d8e9f97919babd2eae1ae7f3c4", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/0ae95c4d890ce0d8e9f97919babd2eae1ae7f3c4", "committedDate": "2020-09-02T02:14:54Z", "message": "Merge branch '2601' of https://github.com/rolfyone/artemis into 2601"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "763c14507da9e17d390f028f2d879ad4de9db582", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/763c14507da9e17d390f028f2d879ad4de9db582", "committedDate": "2020-09-02T03:30:43Z", "message": "use SyncDataAccessor in import/export operations.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNDY3MTgx", "url": "https://github.com/ConsenSys/teku/pull/2684#pullrequestreview-480467181", "createdAt": "2020-09-02T04:02:42Z", "commit": {"oid": "763c14507da9e17d390f028f2d879ad4de9db582"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNDowMjo0MlrOHLU6Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNDowNTowOVrOHLVDIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTYzODk3OQ==", "bodyText": "Since we're creating a new module (which is a good idea), I'd call it :infrastructure:io rather than :data:files.", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r481638979", "createdAt": "2020-09-02T04:02:42Z", "author": {"login": "ajsutton"}, "path": "data/files/src/main/java/tech/pegasys/teku/data/files/SyncDataAccessor.java", "diffHunk": "@@ -11,7 +11,7 @@\n  * specific language governing permissions and limitations under the License.\n  */\n \n-package tech.pegasys.teku.core.signatures;\n+package tech.pegasys.teku.data.files;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "763c14507da9e17d390f028f2d879ad4de9db582"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY0MTI0OQ==", "bodyText": "We can just pass in config now and have ValidatorClientService get the slashing protection path from the config itself.", "url": "https://github.com/ConsenSys/teku/pull/2684#discussion_r481641249", "createdAt": "2020-09-02T04:05:09Z", "author": {"login": "ajsutton"}, "path": "teku/src/main/java/tech/pegasys/teku/services/ServiceController.java", "diffHunk": "@@ -37,7 +38,8 @@ public ServiceController(final ServiceConfig config) {\n     if (config.getConfig().isRemoteValidatorApiEnabled()) {\n       services.add(new RemoteValidatorService(config));\n     } else {\n-      services.add(ValidatorClientService.create(config));\n+      final Path slashingProtectionPath = config.getConfig().getValidatorsSlashingProtectionPath();\n+      services.add(ValidatorClientService.create(config, slashingProtectionPath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "763c14507da9e17d390f028f2d879ad4de9db582"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bdab638cedd5029026af934fa1011ca93995ca3", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/2bdab638cedd5029026af934fa1011ca93995ca3", "committedDate": "2020-09-02T04:36:34Z", "message": "rename new package for SyncDataAccessor to infrastructure:io\n\n - also get slashingProtection path from tekuConfig rather than passing into ValidatorClientService.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "810bfd8d16d4191b9495ec373bdb11f55527be3e", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/810bfd8d16d4191b9495ec373bdb11f55527be3e", "committedDate": "2020-09-02T04:52:15Z", "message": "Merge remote-tracking branch 'upstream/master' into 2601"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99efafb5fb82e8ee163205c40c3e7eaf60142978", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/99efafb5fb82e8ee163205c40c3e7eaf60142978", "committedDate": "2020-09-02T09:12:51Z", "message": "Merge remote-tracking branch 'upstream/master' into 2601"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0a906950a6d841ec04cd324416ca0dbe0a10a9a", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/e0a906950a6d841ec04cd324416ca0dbe0a10a9a", "committedDate": "2020-09-02T20:01:28Z", "message": "Merge remote-tracking branch 'upstream/master' into 2601"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d16da80777f6a5068494ec437676e27a8a2814d3", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/d16da80777f6a5068494ec437676e27a8a2814d3", "committedDate": "2020-09-02T21:54:46Z", "message": "Merge remote-tracking branch 'upstream/master' into 2601"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deb83c4c61cdec1a2eb43323f9ef233de3694e3b", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/deb83c4c61cdec1a2eb43323f9ef233de3694e3b", "committedDate": "2020-09-02T22:20:17Z", "message": "Merge remote-tracking branch 'upstream/master' into 2601"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc10af22eb1df1c2e362c841e064f94fb9b8513c", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/cc10af22eb1df1c2e362c841e064f94fb9b8513c", "committedDate": "2020-09-02T22:51:17Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Adrian Sutton <adrian@symphonious.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzY4Njg2", "url": "https://github.com/ConsenSys/teku/pull/2684#pullrequestreview-481368686", "createdAt": "2020-09-02T22:56:19Z", "commit": {"oid": "cc10af22eb1df1c2e362c841e064f94fb9b8513c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4d59728e912bc492b1c4416fa6cbac101bb3ac3", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/e4d59728e912bc492b1c4416fa6cbac101bb3ac3", "committedDate": "2020-09-02T23:11:47Z", "message": "fix build\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b448687f8c9e7cbabbb2550c6dc911f1694d5ee4", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/b448687f8c9e7cbabbb2550c6dc911f1694d5ee4", "committedDate": "2020-09-02T23:20:22Z", "message": "unit test fix\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3549, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}