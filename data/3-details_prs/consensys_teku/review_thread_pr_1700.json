{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNzI3MzMz", "number": 1700, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzoyMzowMVrOD4ItQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzo0OToyMVrOD6ddKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTg5NTA0OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/AttestationSubnetService.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzoyMzowMVrOGOzBPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNToyNzo1NVrOGSEEBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2OTE1MA==", "bodyText": "Each new subscriber receives the latest data. This method is not thread-safe but it's ok for now since we are subscribing on initialization step only. If no one minds I would add a reactive-streams dependency (I think Reactor it the best fit) and make this subscription stuff based on Publisher to not reinvent the wheel.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r418169150", "createdAt": "2020-04-30T17:23:01Z", "author": {"login": "Nashatyrev"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/AttestationSubnetService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2;\n+\n+import java.util.Collections;\n+import java.util.function.Consumer;\n+import tech.pegasys.artemis.util.events.Subscribers;\n+\n+/**\n+ * Service tracks long term attestation subnet subscriptions and notifies subscribers on their\n+ * changes\n+ */\n+public class AttestationSubnetService {\n+  private final Subscribers<Consumer<Iterable<Integer>>> subscribers = Subscribers.create(true);\n+  private volatile Iterable<Integer> currentSubscriptions = Collections.emptyList();\n+\n+  public void updateSubscriptions(final Iterable<Integer> subnetIndices) {\n+    subscribers.deliver(Consumer::accept, subnetIndices);\n+    currentSubscriptions = subnetIndices;\n+  }\n+\n+  public Iterable<Integer> getCurrentAttestatoinSubnetSubscriptions() {\n+    return currentSubscriptions;\n+  }\n+\n+  public long subscribeToUpdates(Consumer<Iterable<Integer>> observer) {\n+    observer.accept(getCurrentAttestatoinSubnetSubscriptions());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14d31635b1b93e5f2e36956f87dd3100c066c0cf"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4NjI2NA==", "bodyText": "I'm not sure I see the threading issue here.  The Subscribers class is specifically intended for this kind of subscriber pattern and is thread safe.  current subscriptions is volatile so the only risk is if updateSubscriptions is passed something that's also modified externally (which is a problem even ignoring threads).\nI guess it's also possible that multiple threads make simultaneous calls to updateSubscriptions but there's no way to replace the whole list concurrently and not wind up losing one of the changes so it will have to be the upstream caller that handles that.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r418286264", "createdAt": "2020-04-30T21:00:42Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/AttestationSubnetService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2;\n+\n+import java.util.Collections;\n+import java.util.function.Consumer;\n+import tech.pegasys.artemis.util.events.Subscribers;\n+\n+/**\n+ * Service tracks long term attestation subnet subscriptions and notifies subscribers on their\n+ * changes\n+ */\n+public class AttestationSubnetService {\n+  private final Subscribers<Consumer<Iterable<Integer>>> subscribers = Subscribers.create(true);\n+  private volatile Iterable<Integer> currentSubscriptions = Collections.emptyList();\n+\n+  public void updateSubscriptions(final Iterable<Integer> subnetIndices) {\n+    subscribers.deliver(Consumer::accept, subnetIndices);\n+    currentSubscriptions = subnetIndices;\n+  }\n+\n+  public Iterable<Integer> getCurrentAttestatoinSubnetSubscriptions() {\n+    return currentSubscriptions;\n+  }\n+\n+  public long subscribeToUpdates(Consumer<Iterable<Integer>> observer) {\n+    observer.accept(getCurrentAttestatoinSubnetSubscriptions());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2OTE1MA=="}, "originalCommit": {"oid": "14d31635b1b93e5f2e36956f87dd3100c066c0cf"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ5MDI1MQ==", "bodyText": "@ajsutton\nYep the Subscribers is thread-safe, but the AttestationSubnetService is not.\nWhat I'd like to have is the guarantee that:\n\nany subscriber added at any moment from any thread would receive the latest item.\nitems are delivered in the right order\nno duplicate items\n\nThe current implementation may violate all of the above restrictions. You just need to invoke subscribeToUpdates and updateSubscriptions from different threads. (while updateSubscriptions may always be called from a single thread)\nI tried to implement it (that Publisher class) but it appeared a bit tricky as I don't want the listener callbacks to be invoked under the lock since it is deadlock-prone.  So just doing both methods synchronized is not the case.\nThat's why I though that using Reactive library might be handy even for these primitive cases just to not reinvent a wheel.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r418490251", "createdAt": "2020-05-01T10:19:27Z", "author": {"login": "Nashatyrev"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/AttestationSubnetService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2;\n+\n+import java.util.Collections;\n+import java.util.function.Consumer;\n+import tech.pegasys.artemis.util.events.Subscribers;\n+\n+/**\n+ * Service tracks long term attestation subnet subscriptions and notifies subscribers on their\n+ * changes\n+ */\n+public class AttestationSubnetService {\n+  private final Subscribers<Consumer<Iterable<Integer>>> subscribers = Subscribers.create(true);\n+  private volatile Iterable<Integer> currentSubscriptions = Collections.emptyList();\n+\n+  public void updateSubscriptions(final Iterable<Integer> subnetIndices) {\n+    subscribers.deliver(Consumer::accept, subnetIndices);\n+    currentSubscriptions = subnetIndices;\n+  }\n+\n+  public Iterable<Integer> getCurrentAttestatoinSubnetSubscriptions() {\n+    return currentSubscriptions;\n+  }\n+\n+  public long subscribeToUpdates(Consumer<Iterable<Integer>> observer) {\n+    observer.accept(getCurrentAttestatoinSubnetSubscriptions());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2OTE1MA=="}, "originalCommit": {"oid": "14d31635b1b93e5f2e36956f87dd3100c066c0cf"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc2Mzk0Mg==", "bodyText": "Ah I see. The only reason we need that construct is because the list of subscriptions and the sequence number is being maintained in two separate places.  Given that the PING response needs to be able to provide the same sequence number, wouldn't it make more sense to maintain the sequence number in AttestationSubnetService? Then the listeners aren't required at all - both metadata and ping response handlers can just request the latest value and use it.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r419763942", "createdAt": "2020-05-04T22:22:15Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/AttestationSubnetService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2;\n+\n+import java.util.Collections;\n+import java.util.function.Consumer;\n+import tech.pegasys.artemis.util.events.Subscribers;\n+\n+/**\n+ * Service tracks long term attestation subnet subscriptions and notifies subscribers on their\n+ * changes\n+ */\n+public class AttestationSubnetService {\n+  private final Subscribers<Consumer<Iterable<Integer>>> subscribers = Subscribers.create(true);\n+  private volatile Iterable<Integer> currentSubscriptions = Collections.emptyList();\n+\n+  public void updateSubscriptions(final Iterable<Integer> subnetIndices) {\n+    subscribers.deliver(Consumer::accept, subnetIndices);\n+    currentSubscriptions = subnetIndices;\n+  }\n+\n+  public Iterable<Integer> getCurrentAttestatoinSubnetSubscriptions() {\n+    return currentSubscriptions;\n+  }\n+\n+  public long subscribeToUpdates(Consumer<Iterable<Integer>> observer) {\n+    observer.accept(getCurrentAttestatoinSubnetSubscriptions());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2OTE1MA=="}, "originalCommit": {"oid": "14d31635b1b93e5f2e36956f87dd3100c066c0cf"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkyMTU0NA==", "bodyText": "The reason I wanted to separate AttestationSubnetService is that other services might be interested in the value updates. E.g. at the moment the discoveryNetwork also needs to be notified on updates. The seq_number relates only to Eth2 RPC, so I thought it makes sense to manage it in a more RPC specific class (MetadataMessageFactory).\nFor serving the PING request I was going to use the same MetadataMessageFactory (though may be rename it appropriately)\nAnyways I've made AttestationSubnetService thread-safe so we may safely stick to any option", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r420921544", "createdAt": "2020-05-06T16:21:53Z", "author": {"login": "Nashatyrev"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/AttestationSubnetService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2;\n+\n+import java.util.Collections;\n+import java.util.function.Consumer;\n+import tech.pegasys.artemis.util.events.Subscribers;\n+\n+/**\n+ * Service tracks long term attestation subnet subscriptions and notifies subscribers on their\n+ * changes\n+ */\n+public class AttestationSubnetService {\n+  private final Subscribers<Consumer<Iterable<Integer>>> subscribers = Subscribers.create(true);\n+  private volatile Iterable<Integer> currentSubscriptions = Collections.emptyList();\n+\n+  public void updateSubscriptions(final Iterable<Integer> subnetIndices) {\n+    subscribers.deliver(Consumer::accept, subnetIndices);\n+    currentSubscriptions = subnetIndices;\n+  }\n+\n+  public Iterable<Integer> getCurrentAttestatoinSubnetSubscriptions() {\n+    return currentSubscriptions;\n+  }\n+\n+  public long subscribeToUpdates(Consumer<Iterable<Integer>> observer) {\n+    observer.accept(getCurrentAttestatoinSubnetSubscriptions());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2OTE1MA=="}, "originalCommit": {"oid": "14d31635b1b93e5f2e36956f87dd3100c066c0cf"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU5NDExNg==", "bodyText": "Finally came up with a thread safe ObservableValue class without a dedicated thread.\nThe only drawback of ObservableValue is that upon subscribe it calls the update callback under the lock. But this should be safe enough.\nOn updates subscribers callbacks are invoked without locking.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r421594116", "createdAt": "2020-05-07T15:27:55Z", "author": {"login": "Nashatyrev"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/AttestationSubnetService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2;\n+\n+import java.util.Collections;\n+import java.util.function.Consumer;\n+import tech.pegasys.artemis.util.events.Subscribers;\n+\n+/**\n+ * Service tracks long term attestation subnet subscriptions and notifies subscribers on their\n+ * changes\n+ */\n+public class AttestationSubnetService {\n+  private final Subscribers<Consumer<Iterable<Integer>>> subscribers = Subscribers.create(true);\n+  private volatile Iterable<Integer> currentSubscriptions = Collections.emptyList();\n+\n+  public void updateSubscriptions(final Iterable<Integer> subnetIndices) {\n+    subscribers.deliver(Consumer::accept, subnetIndices);\n+    currentSubscriptions = subnetIndices;\n+  }\n+\n+  public Iterable<Integer> getCurrentAttestatoinSubnetSubscriptions() {\n+    return currentSubscriptions;\n+  }\n+\n+  public long subscribeToUpdates(Consumer<Iterable<Integer>> observer) {\n+    observer.accept(getCurrentAttestatoinSubnetSubscriptions());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2OTE1MA=="}, "originalCommit": {"oid": "14d31635b1b93e5f2e36956f87dd3100c066c0cf"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjU4NjkxOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/integration-test/java/tech/pegasys/artemis/networking/eth2/GetMetadataIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo1MDo0OVrOGO53Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo1MDo0OVrOGO53Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4MTIxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(md3.getSeqNumber()).isNotEqualTo(md2.getSeqNumber());\n          \n          \n            \n                assertThat(md3.getSeqNumber()).isGreaterThan(md2.getSeqNumber());", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r418281218", "createdAt": "2020-04-30T20:50:49Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/integration-test/java/tech/pegasys/artemis/networking/eth2/GetMetadataIntegrationTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.datastructures.networking.libp2p.rpc.MetadataMessage;\n+import tech.pegasys.artemis.networking.eth2.peers.Eth2Peer;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class GetMetadataIntegrationTest {\n+  private final Eth2NetworkFactory networkFactory = new Eth2NetworkFactory();\n+  private Eth2Network network1;\n+  private Eth2Network network2;\n+  private Eth2Peer peer1;\n+\n+  @BeforeEach\n+  public void setUp() throws Exception {\n+    network1 = networkFactory.builder().startNetwork();\n+    network2 = networkFactory.builder().peer(network1).startNetwork();\n+    peer1 = network2.getPeer(network1.getNodeId()).orElseThrow();\n+  }\n+\n+  @AfterEach\n+  public void tearDown() {\n+    networkFactory.stopAll();\n+  }\n+\n+  @Test\n+  public void testCorrectMetadataSent() throws Exception {\n+    MetadataMessage md1 = peer1.requestMetadata().get(10, TimeUnit.SECONDS);\n+    MetadataMessage md2 = peer1.requestMetadata().get(10, TimeUnit.SECONDS);\n+\n+    assertThat(md1.getSeqNumber()).isEqualTo(md2.getSeqNumber());\n+    assertThat(md1.getAttnets().getSize()).isEqualTo(Constants.ATTESTATION_SUBNET_COUNT);\n+    assertThat(\n+            IntStream.range(0, Constants.ATTESTATION_SUBNET_COUNT)\n+                .map(i -> md1.getAttnets().getBit(i) ? 1 : 0)\n+                .sum())\n+        .isEqualTo(0);\n+    network1.setLongTermAttestationSubnetSubscriptions(List.of(0, 1, 8));\n+\n+    MetadataMessage md3 = peer1.requestMetadata().get(10, TimeUnit.SECONDS);\n+    assertThat(md3.getSeqNumber()).isNotEqualTo(md2.getSeqNumber());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719851b827f749199bf3ee8f9f0715596c76a3cc"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjYxMTY1OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/AttestationSubnetService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo1ODozMlrOGO6GKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo1OTowN1rOGO6HbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4NTA5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public Iterable<Integer> getCurrentAttestatoinSubnetSubscriptions() {\n          \n          \n            \n              public Iterable<Integer> getCurrentAttestationSubnetSubscriptions() {", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r418285096", "createdAt": "2020-04-30T20:58:32Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/AttestationSubnetService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2;\n+\n+import java.util.Collections;\n+import java.util.function.Consumer;\n+import tech.pegasys.artemis.util.events.Subscribers;\n+\n+/**\n+ * Service tracks long term attestation subnet subscriptions and notifies subscribers on their\n+ * changes\n+ */\n+public class AttestationSubnetService {\n+  private final Subscribers<Consumer<Iterable<Integer>>> subscribers = Subscribers.create(true);\n+  private volatile Iterable<Integer> currentSubscriptions = Collections.emptyList();\n+\n+  public void updateSubscriptions(final Iterable<Integer> subnetIndices) {\n+    subscribers.deliver(Consumer::accept, subnetIndices);\n+    currentSubscriptions = subnetIndices;\n+  }\n+\n+  public Iterable<Integer> getCurrentAttestatoinSubnetSubscriptions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719851b827f749199bf3ee8f9f0715596c76a3cc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4NTQyMQ==", "bodyText": "Although actually we don't currently need this method if subscribeToUpdates just read currentSubscriptions directly.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r418285421", "createdAt": "2020-04-30T20:59:07Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/AttestationSubnetService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2;\n+\n+import java.util.Collections;\n+import java.util.function.Consumer;\n+import tech.pegasys.artemis.util.events.Subscribers;\n+\n+/**\n+ * Service tracks long term attestation subnet subscriptions and notifies subscribers on their\n+ * changes\n+ */\n+public class AttestationSubnetService {\n+  private final Subscribers<Consumer<Iterable<Integer>>> subscribers = Subscribers.create(true);\n+  private volatile Iterable<Integer> currentSubscriptions = Collections.emptyList();\n+\n+  public void updateSubscriptions(final Iterable<Integer> subnetIndices) {\n+    subscribers.deliver(Consumer::accept, subnetIndices);\n+    currentSubscriptions = subnetIndices;\n+  }\n+\n+  public Iterable<Integer> getCurrentAttestatoinSubnetSubscriptions() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4NTA5Ng=="}, "originalCommit": {"oid": "719851b827f749199bf3ee8f9f0715596c76a3cc"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjYzMzczOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/rpc/beaconchain/methods/MetadataMessageFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTowNTowNVrOGO6Tow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTowNTowNVrOGO6Tow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4ODU0Nw==", "bodyText": "nit: Field can be final.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r418288547", "createdAt": "2020-04-30T21:05:05Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/rpc/beaconchain/methods/MetadataMessageFactory.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2.rpc.beaconchain.methods;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Consumer;\n+import tech.pegasys.artemis.datastructures.networking.libp2p.rpc.MetadataMessage;\n+import tech.pegasys.artemis.ssz.SSZTypes.Bitvector;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class MetadataMessageFactory implements Consumer<Iterable<Integer>> {\n+\n+  private AtomicLong seqNumberGenerator = new AtomicLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719851b827f749199bf3ee8f9f0715596c76a3cc"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjYzODA4OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/artemis/util/events/Publisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTowNjozNlrOGO6WZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwOTo1OToyMlrOGPGTwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4OTI1Mg==", "bodyText": "This doesn't seem to be used.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r418289252", "createdAt": "2020-04-30T21:06:36Z", "author": {"login": "ajsutton"}, "path": "util/src/main/java/tech/pegasys/artemis/util/events/Publisher.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.events;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.function.Consumer;\n+\n+public class Publisher<C> implements Consumer<C> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "719851b827f749199bf3ee8f9f0715596c76a3cc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ4NTE4NA==", "bodyText": "Ops, accidentally committed", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r418485184", "createdAt": "2020-05-01T09:59:22Z", "author": {"login": "Nashatyrev"}, "path": "util/src/main/java/tech/pegasys/artemis/util/events/Publisher.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.events;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.function.Consumer;\n+\n+public class Publisher<C> implements Consumer<C> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4OTI1Mg=="}, "originalCommit": {"oid": "719851b827f749199bf3ee8f9f0715596c76a3cc"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjI1NTY5OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/teku/util/events/ObservableValue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzo0NDoyOVrOGSUDRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwOToyNDoyOVrOGSfYMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NjA2OA==", "bodyText": "It's probably worth creating a specific interface rather than using the generic Consumer here.  Makes it easier to understand where values are coming from in the classes that implement it.  Something like ValueObserver with an onValueChanged method.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r421856068", "createdAt": "2020-05-07T23:44:29Z", "author": {"login": "ajsutton"}, "path": "util/src/main/java/tech/pegasys/teku/util/events/ObservableValue.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.events;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.function.Consumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * A value holder class which notifies subscribers on value updates\n+ *\n+ * <p>The key feature of this class is that upon subscription a new subscriber is always notified on\n+ * the current value (if the value exist) and this is performed in a thread-safe manner such that\n+ * {@link #set(Object)} and {@link #subscribe(Consumer)} methods can be safely called from different\n+ * threads\n+ *\n+ * <p>All subscribers are guaranteed:\n+ *\n+ * <ul>\n+ *   <li>to be always notified on the latest value\n+ *   <li>to be notified on each value just once\n+ *   <li>to be notified in the right order if the {@link #set(Object)} is invoked on the same thread\n+ * </ul>\n+ *\n+ * Initially the holder has no value so added subscribers are not notified upon subscription\n+ *\n+ * @param <C> Value type\n+ */\n+public class ObservableValue<C> {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private static final class Subscription<C> {\n+    private final Consumer<C> subscriber;\n+    private final long subscriptionId;\n+\n+    public Subscription(Consumer<C> subscriber, long subscriptionId) {\n+      this.subscriber = subscriber;\n+      this.subscriptionId = subscriptionId;\n+    }\n+\n+    public Consumer<C> getSubscriber() {\n+      return subscriber;\n+    }\n+\n+    public long getSubscriptionId() {\n+      return subscriptionId;\n+    }\n+  }\n+\n+  private long idCounter = 0;\n+  private final List<Subscription<C>> subscriptions = new CopyOnWriteArrayList<>();\n+  private C curValue;\n+  private final boolean suppressCallbackExceptions;\n+\n+  /**\n+   * Creates instance\n+   *\n+   * @param suppressCallbackExceptions if true then any exceptions thrown from a subscriber update\n+   *     callback are just printed to the log\n+   */\n+  public ObservableValue(boolean suppressCallbackExceptions) {\n+    this.suppressCallbackExceptions = suppressCallbackExceptions;\n+  }\n+\n+  /**\n+   * Subscribe to value update notification\n+   *\n+   * <p>New subscriber is notified on the latest value if the value exist\n+   *\n+   * @return subscription ID to be used for {@link #unsubscribe(long)}\n+   */\n+  public synchronized long subscribe(Consumer<C> subscriber) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "213904b6f3d40930c5cf179a3f88b60cb5895ae2"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA0MTY0OQ==", "bodyText": "Yes, sounds good \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r422041649", "createdAt": "2020-05-08T09:24:29Z", "author": {"login": "Nashatyrev"}, "path": "util/src/main/java/tech/pegasys/teku/util/events/ObservableValue.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.events;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.function.Consumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * A value holder class which notifies subscribers on value updates\n+ *\n+ * <p>The key feature of this class is that upon subscription a new subscriber is always notified on\n+ * the current value (if the value exist) and this is performed in a thread-safe manner such that\n+ * {@link #set(Object)} and {@link #subscribe(Consumer)} methods can be safely called from different\n+ * threads\n+ *\n+ * <p>All subscribers are guaranteed:\n+ *\n+ * <ul>\n+ *   <li>to be always notified on the latest value\n+ *   <li>to be notified on each value just once\n+ *   <li>to be notified in the right order if the {@link #set(Object)} is invoked on the same thread\n+ * </ul>\n+ *\n+ * Initially the holder has no value so added subscribers are not notified upon subscription\n+ *\n+ * @param <C> Value type\n+ */\n+public class ObservableValue<C> {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private static final class Subscription<C> {\n+    private final Consumer<C> subscriber;\n+    private final long subscriptionId;\n+\n+    public Subscription(Consumer<C> subscriber, long subscriptionId) {\n+      this.subscriber = subscriber;\n+      this.subscriptionId = subscriptionId;\n+    }\n+\n+    public Consumer<C> getSubscriber() {\n+      return subscriber;\n+    }\n+\n+    public long getSubscriptionId() {\n+      return subscriptionId;\n+    }\n+  }\n+\n+  private long idCounter = 0;\n+  private final List<Subscription<C>> subscriptions = new CopyOnWriteArrayList<>();\n+  private C curValue;\n+  private final boolean suppressCallbackExceptions;\n+\n+  /**\n+   * Creates instance\n+   *\n+   * @param suppressCallbackExceptions if true then any exceptions thrown from a subscriber update\n+   *     callback are just printed to the log\n+   */\n+  public ObservableValue(boolean suppressCallbackExceptions) {\n+    this.suppressCallbackExceptions = suppressCallbackExceptions;\n+  }\n+\n+  /**\n+   * Subscribe to value update notification\n+   *\n+   * <p>New subscriber is notified on the latest value if the value exist\n+   *\n+   * @return subscription ID to be used for {@link #unsubscribe(long)}\n+   */\n+  public synchronized long subscribe(Consumer<C> subscriber) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NjA2OA=="}, "originalCommit": {"oid": "213904b6f3d40930c5cf179a3f88b60cb5895ae2"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjI1OTMxOnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/teku/util/events/ObservableValue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzo0NjowMFrOGSUFTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzo0NjowMFrOGSUFTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NjU4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p>The key feature of this class is that upon subscription a new subscriber is always notified on\n          \n          \n            \n             * the current value (if the value exist) and this is performed in a thread-safe manner such that\n          \n          \n            \n             * <p>The key feature of this class is that upon subscription a new subscriber is always notified of\n          \n          \n            \n             * the current value (if the value exists) and this is performed in a thread-safe manner such that", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r421856589", "createdAt": "2020-05-07T23:46:00Z", "author": {"login": "ajsutton"}, "path": "util/src/main/java/tech/pegasys/teku/util/events/ObservableValue.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.events;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.function.Consumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * A value holder class which notifies subscribers on value updates\n+ *\n+ * <p>The key feature of this class is that upon subscription a new subscriber is always notified on\n+ * the current value (if the value exist) and this is performed in a thread-safe manner such that", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "213904b6f3d40930c5cf179a3f88b60cb5895ae2"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjI2MjMwOnYy", "diffSide": "RIGHT", "path": "util/src/test/java/tech/pegasys/teku/util/events/ObservableValueTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzo0NzozN1rOGSUHFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzo0NzozN1rOGSUHFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NzA0Nw==", "bodyText": "Stray println.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r421857047", "createdAt": "2020-05-07T23:47:37Z", "author": {"login": "ajsutton"}, "path": "util/src/test/java/tech/pegasys/teku/util/events/ObservableValueTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.events;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.Test;\n+\n+public class ObservableValueTest {\n+\n+  @Test\n+  public void testConcurrentSubscribersNotifications() throws InterruptedException {\n+    ObservableValue<Integer> observableValue = new ObservableValue<>(false);\n+    class Listener implements Consumer<Integer> {\n+      int val;\n+\n+      @Override\n+      public void accept(Integer integer) {\n+        if (val == -2 || integer <= val) {\n+          throw new RuntimeException();\n+        }\n+        val = integer;\n+      }\n+    }\n+\n+    List<Listener> listeners = Collections.synchronizedList(new ArrayList<>());\n+    int threadCnt = 64;\n+    CountDownLatch startLatch = new CountDownLatch(threadCnt);\n+    CountDownLatch stopLatch = new CountDownLatch(threadCnt);\n+\n+    Runnable runnable =\n+        () -> {\n+          while (!Thread.interrupted()) {\n+            Listener listener = new Listener();\n+            observableValue.subscribe(listener);\n+            listeners.add(listener);\n+            startLatch.countDown();\n+          }\n+          stopLatch.countDown();\n+        };\n+\n+    List<Thread> threads =\n+        Stream.generate(() -> runnable)\n+            .map(Thread::new)\n+            .peek(Thread::start)\n+            .limit(threadCnt)\n+            .collect(Collectors.toList());\n+\n+    startLatch.await(5, TimeUnit.SECONDS);\n+    observableValue.set(777);\n+    threads.forEach(Thread::interrupt);\n+    stopLatch.await(5, TimeUnit.SECONDS);\n+\n+    System.out.println(\"Listeners: \" + listeners.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "213904b6f3d40930c5cf179a3f88b60cb5895ae2"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjI2NjAwOnYy", "diffSide": "RIGHT", "path": "util/src/test/java/tech/pegasys/teku/util/events/ObservableValueTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzo0OToyMVrOGSUJKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzo0OToyMVrOGSUJKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1NzU3Ng==", "bodyText": "Maybe use Assertions.fail here and provide a message.", "url": "https://github.com/ConsenSys/teku/pull/1700#discussion_r421857576", "createdAt": "2020-05-07T23:49:21Z", "author": {"login": "ajsutton"}, "path": "util/src/test/java/tech/pegasys/teku/util/events/ObservableValueTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.events;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.Test;\n+\n+public class ObservableValueTest {\n+\n+  @Test\n+  public void testConcurrentSubscribersNotifications() throws InterruptedException {\n+    ObservableValue<Integer> observableValue = new ObservableValue<>(false);\n+    class Listener implements Consumer<Integer> {\n+      int val;\n+\n+      @Override\n+      public void accept(Integer integer) {\n+        if (val == -2 || integer <= val) {\n+          throw new RuntimeException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "213904b6f3d40930c5cf179a3f88b60cb5895ae2"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3743, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}