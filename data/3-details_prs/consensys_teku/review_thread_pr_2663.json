{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0MjQyOTg3", "number": 2663, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDo1MTozNFrOEc4GRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDo1MTozNFrOEc4GRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzE0Njk1OnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/store/BlockTree.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDo1MTozNFrOHHriPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDo1MTozNFrOHHriPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzgxNTM1Nw==", "bodyText": "Probably more understandable written as:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .map(e -> e.dividedBy(n))\n          \n          \n            \n                    .map(parentEpoch -> getEpoch(blockRoot).dividedBy(n).isGreaterThan(parentEpoch))\n          \n          \n            \n                    .map(parentEpoch -> getEpoch(blockRoot).dividedBy(n).isGreaterThan(parentEpoch.dividedBy(n)))\n          \n      \n    \n    \n  \n\nOtherwise parentEpoch is a misleading name and it's hard to see the symmetry of dividing both epochs.", "url": "https://github.com/ConsenSys/teku/pull/2663#discussion_r477815357", "createdAt": "2020-08-27T00:51:34Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/BlockTree.java", "diffHunk": "@@ -89,19 +89,22 @@ public boolean contains(final Bytes32 blockRoot) {\n   }\n \n   /**\n-   * Returns true if the block root is at an internal epoch boundary. The rootHash is not considered\n-   * an epoch boundary. A block is at an epoch boundary if it is the first block within an epoch.\n+   * Returns true if the block root is at an epoch boundary where the epoch boundary spanned by this\n+   * block is a multiple of n. The rootHash is not considered an epoch boundary. A block is at an\n+   * epoch boundary if it is the first block at or after an epoch start slot.\n    *\n    * @param blockRoot The block root to check.\n    * @return True if the block root is at an internal epoch boundary.\n    */\n-  public boolean isRootAtEpochBoundary(Bytes32 blockRoot) {\n+  public boolean isRootAtNthEpochBoundary(Bytes32 blockRoot, final int n) {\n+    checkArgument(n > 0, \"Parameter n must be greater than 0\");\n     assertBlockIsInTree(blockRoot);\n     return hashTree\n         .getParent(blockRoot)\n         .filter(this::contains)\n         .map(this::getEpoch)\n-        .map(parentEpoch -> getEpoch(blockRoot).isGreaterThan(parentEpoch))\n+        .map(e -> e.dividedBy(n))\n+        .map(parentEpoch -> getEpoch(blockRoot).dividedBy(n).isGreaterThan(parentEpoch))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4558b6c79e7e99483759017c6db1ed42dedb1fd"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3344, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}