{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MzQ3MzM5", "number": 3325, "title": "Reduce state scanning for retrieving validator indexes", "bodyText": "The validator index cache would scan for missing indexes, which can be a lot of scanning on larger networks if we start from index 0 for each key.\nInstead, cache known keys and indexes, and only look for more indexes on cache misses. Also only start from the high water mark, since validator index never changes for a validator.\nfixes #3316\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-11-27T01:18:20Z", "url": "https://github.com/ConsenSys/teku/pull/3325", "merged": true, "mergeCommit": {"oid": "b0c27bab30cbca44d4ed6e0177a360a7f94631d6"}, "closed": true, "closedAt": "2020-11-29T21:41:09Z", "author": {"login": "rolfyone"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgdG1-AH2gAyNTI4MzQ3MzM5OmUzYzNiYjE4NzAwZGMyZGU4MTQ4NWU5MjczYWJkMWNkNWNlOWNkYWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdhXnGyAH2gAyNTI4MzQ3MzM5Ojg2MjAyYWE1MjI1NjIzNWE0ZmU5YzFlNDdjMzZlNGYyYTliMGRhYjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e3c3bb18700dc2de81485e9273abd1cd5ce9cdac", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/e3c3bb18700dc2de81485e9273abd1cd5ce9cdac", "committedDate": "2020-11-27T01:17:32Z", "message": "Reduce state scanning for retrieving validator indexes\n\nThe validator index cache would scan for missing indexes, which can be a lot of scanning on larger networks if we start from index 0 for each key.\n\nInstead, cache known keys and indexes, and only look for more indexes on cache misses. Also only start from the high water mark, since validator index never changes for a validator.\n\nfixes #3316\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1e423b12dd1c922c684393f6d5847add6c2c0cb", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/a1e423b12dd1c922c684393f6d5847add6c2c0cb", "committedDate": "2020-11-27T09:45:53Z", "message": "cleanup the no index value a bit\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f574b6a95c7703856dad12866b0756d3d5b8f98", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/0f574b6a95c7703856dad12866b0756d3d5b8f98", "committedDate": "2020-11-28T20:10:04Z", "message": "small refactor\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTEyMDg4", "url": "https://github.com/ConsenSys/teku/pull/3325#pullrequestreview-540512088", "createdAt": "2020-11-29T20:08:12Z", "commit": {"oid": "0f574b6a95c7703856dad12866b0756d3d5b8f98"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQyMDowODoxMlrOH7mhZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQyMDowOTo0M1rOH7miFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI1OTE3NA==", "bodyText": "This isn't thread safe - it's possible that another thread updated the cache and lastIndex between when we checked the cache and getting the lastIndex here which could lead us to return unknown incorrectly.\nWe need to do lastIndex.get() and store the result, before we check the cache.  Then we are guaranteed that the cache is populated for all indices prior to the value we got.  We might have extra cache entries but that's safe.", "url": "https://github.com/ConsenSys/teku/pull/3325#discussion_r532259174", "createdAt": "2020-11-29T20:08:12Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/state/ValidatorIndexCache.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.state;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import tech.pegasys.teku.bls.BLSPublicKey;\n+import tech.pegasys.teku.infrastructure.collections.cache.Cache;\n+import tech.pegasys.teku.infrastructure.collections.cache.LRUCache;\n+import tech.pegasys.teku.infrastructure.collections.cache.NoOpCache;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+\n+public class ValidatorIndexCache {\n+  private final Cache<BLSPublicKey, Integer> validatorIndexes;\n+  private final AtomicInteger lastIndex;\n+\n+  private static final int INDEX_NONE = -1;\n+  static final ValidatorIndexCache NO_OP_INSTANCE =\n+      new ValidatorIndexCache(NoOpCache.getNoOpCache(), INDEX_NONE);\n+\n+  @VisibleForTesting\n+  ValidatorIndexCache(final Cache<BLSPublicKey, Integer> validatorIndexes, final int lastIndex) {\n+    this.validatorIndexes = validatorIndexes;\n+    this.lastIndex = new AtomicInteger(lastIndex);\n+  }\n+\n+  public ValidatorIndexCache() {\n+    this.validatorIndexes = new LRUCache<>(Integer.MAX_VALUE - 1);\n+    this.lastIndex = new AtomicInteger(INDEX_NONE);\n+  }\n+\n+  public Optional<Integer> getValidatorIndex(\n+      final BeaconState state, final BLSPublicKey publicKey) {\n+    final Optional<Integer> validatorIndex = validatorIndexes.getCached(publicKey);\n+    if (validatorIndex.isPresent()) {\n+      return validatorIndex.filter(index -> index < state.getValidators().size());\n+    }\n+\n+    return findIndexFromState(state.getValidators(), publicKey);\n+  }\n+\n+  private Optional<Integer> findIndexFromState(\n+      final SSZList<Validator> validatorList, final BLSPublicKey publicKey) {\n+    for (int i = Math.max(lastIndex.get(), 0); i < validatorList.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f574b6a95c7703856dad12866b0756d3d5b8f98"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI1OTM0OQ==", "bodyText": "We need to update lastIndex only after we store the value in the cache.  Additionally, updating an AtomicInteger is a relatively expensive operation (it inserts memory barriers that trigger cache line flushes to memory and subsequent cache misses) so we should only do it once when we've found the value - otherwise it will significantly slow down the iteration.", "url": "https://github.com/ConsenSys/teku/pull/3325#discussion_r532259349", "createdAt": "2020-11-29T20:09:43Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/state/ValidatorIndexCache.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.state;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import tech.pegasys.teku.bls.BLSPublicKey;\n+import tech.pegasys.teku.infrastructure.collections.cache.Cache;\n+import tech.pegasys.teku.infrastructure.collections.cache.LRUCache;\n+import tech.pegasys.teku.infrastructure.collections.cache.NoOpCache;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+\n+public class ValidatorIndexCache {\n+  private final Cache<BLSPublicKey, Integer> validatorIndexes;\n+  private final AtomicInteger lastIndex;\n+\n+  private static final int INDEX_NONE = -1;\n+  static final ValidatorIndexCache NO_OP_INSTANCE =\n+      new ValidatorIndexCache(NoOpCache.getNoOpCache(), INDEX_NONE);\n+\n+  @VisibleForTesting\n+  ValidatorIndexCache(final Cache<BLSPublicKey, Integer> validatorIndexes, final int lastIndex) {\n+    this.validatorIndexes = validatorIndexes;\n+    this.lastIndex = new AtomicInteger(lastIndex);\n+  }\n+\n+  public ValidatorIndexCache() {\n+    this.validatorIndexes = new LRUCache<>(Integer.MAX_VALUE - 1);\n+    this.lastIndex = new AtomicInteger(INDEX_NONE);\n+  }\n+\n+  public Optional<Integer> getValidatorIndex(\n+      final BeaconState state, final BLSPublicKey publicKey) {\n+    final Optional<Integer> validatorIndex = validatorIndexes.getCached(publicKey);\n+    if (validatorIndex.isPresent()) {\n+      return validatorIndex.filter(index -> index < state.getValidators().size());\n+    }\n+\n+    return findIndexFromState(state.getValidators(), publicKey);\n+  }\n+\n+  private Optional<Integer> findIndexFromState(\n+      final SSZList<Validator> validatorList, final BLSPublicKey publicKey) {\n+    for (int i = Math.max(lastIndex.get(), 0); i < validatorList.size(); i++) {\n+      final int currentIndex = i;\n+      lastIndex.updateAndGet(curr -> Math.max(curr, currentIndex));\n+      BLSPublicKey pubKey = BLSPublicKey.fromBytesCompressed(validatorList.get(i).getPubkey());\n+      validatorIndexes.invalidateWithNewValue(pubKey, i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f574b6a95c7703856dad12866b0756d3d5b8f98"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dbb3eacc709f66105e51b2409aa9504607ae196", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/5dbb3eacc709f66105e51b2409aa9504607ae196", "committedDate": "2020-11-29T20:34:58Z", "message": "review feedback\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "923574dd2170ffcbb857d14c14ccca70bb76e44c", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/923574dd2170ffcbb857d14c14ccca70bb76e44c", "committedDate": "2020-11-29T20:35:49Z", "message": "review feedback\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f4e5902dd3fad5781e408b4b03cf862701be13d", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/9f4e5902dd3fad5781e408b4b03cf862701be13d", "committedDate": "2020-11-29T20:40:20Z", "message": "extra test\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4b5115f1d01e72b72586a581443394ee3f7eff9", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/d4b5115f1d01e72b72586a581443394ee3f7eff9", "committedDate": "2020-11-29T20:42:07Z", "message": "Merge remote-tracking branch 'upstream/master' into 3316-validator-lookup-speed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTE1MzQz", "url": "https://github.com/ConsenSys/teku/pull/3325#pullrequestreview-540515343", "createdAt": "2020-11-29T20:49:52Z", "commit": {"oid": "d4b5115f1d01e72b72586a581443394ee3f7eff9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQyMDo0OTo1MlrOH7m1TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQyMDo1MDoyNlrOH7m1mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI2NDI2OQ==", "bodyText": "This still doesn't work.  We have to get the lastIndex before we check the cache (ie back up in getValidatorIndex. :)", "url": "https://github.com/ConsenSys/teku/pull/3325#discussion_r532264269", "createdAt": "2020-11-29T20:49:52Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/state/ValidatorIndexCache.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.state;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import tech.pegasys.teku.bls.BLSPublicKey;\n+import tech.pegasys.teku.infrastructure.collections.cache.Cache;\n+import tech.pegasys.teku.infrastructure.collections.cache.LRUCache;\n+import tech.pegasys.teku.infrastructure.collections.cache.NoOpCache;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+\n+public class ValidatorIndexCache {\n+  private final Cache<BLSPublicKey, Integer> validatorIndexes;\n+  private final AtomicInteger lastIndex;\n+\n+  private static final int INDEX_NONE = -1;\n+  static final ValidatorIndexCache NO_OP_INSTANCE =\n+      new ValidatorIndexCache(NoOpCache.getNoOpCache(), INDEX_NONE);\n+\n+  @VisibleForTesting\n+  ValidatorIndexCache(final Cache<BLSPublicKey, Integer> validatorIndexes, final int lastIndex) {\n+    this.validatorIndexes = validatorIndexes;\n+    this.lastIndex = new AtomicInteger(lastIndex);\n+  }\n+\n+  public ValidatorIndexCache() {\n+    this.validatorIndexes = new LRUCache<>(Integer.MAX_VALUE - 1);\n+    this.lastIndex = new AtomicInteger(INDEX_NONE);\n+  }\n+\n+  public Optional<Integer> getValidatorIndex(\n+      final BeaconState state, final BLSPublicKey publicKey) {\n+    final Optional<Integer> validatorIndex = validatorIndexes.getCached(publicKey);\n+    if (validatorIndex.isPresent()) {\n+      return validatorIndex.filter(index -> index < state.getValidators().size());\n+    }\n+\n+    return findIndexFromState(state.getValidators(), publicKey);\n+  }\n+\n+  private Optional<Integer> findIndexFromState(\n+      final SSZList<Validator> validatorList, final BLSPublicKey publicKey) {\n+    final int lastIndexSnapshot = lastIndex.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b5115f1d01e72b72586a581443394ee3f7eff9"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI2NDM0Nw==", "bodyText": "I probably wouldn't bother with this check - the Math.max will take care of it.  Updating the value is expensive inside a tight loop but won't be a big deal here.", "url": "https://github.com/ConsenSys/teku/pull/3325#discussion_r532264347", "createdAt": "2020-11-29T20:50:26Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/state/ValidatorIndexCache.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.state;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import tech.pegasys.teku.bls.BLSPublicKey;\n+import tech.pegasys.teku.infrastructure.collections.cache.Cache;\n+import tech.pegasys.teku.infrastructure.collections.cache.LRUCache;\n+import tech.pegasys.teku.infrastructure.collections.cache.NoOpCache;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+\n+public class ValidatorIndexCache {\n+  private final Cache<BLSPublicKey, Integer> validatorIndexes;\n+  private final AtomicInteger lastIndex;\n+\n+  private static final int INDEX_NONE = -1;\n+  static final ValidatorIndexCache NO_OP_INSTANCE =\n+      new ValidatorIndexCache(NoOpCache.getNoOpCache(), INDEX_NONE);\n+\n+  @VisibleForTesting\n+  ValidatorIndexCache(final Cache<BLSPublicKey, Integer> validatorIndexes, final int lastIndex) {\n+    this.validatorIndexes = validatorIndexes;\n+    this.lastIndex = new AtomicInteger(lastIndex);\n+  }\n+\n+  public ValidatorIndexCache() {\n+    this.validatorIndexes = new LRUCache<>(Integer.MAX_VALUE - 1);\n+    this.lastIndex = new AtomicInteger(INDEX_NONE);\n+  }\n+\n+  public Optional<Integer> getValidatorIndex(\n+      final BeaconState state, final BLSPublicKey publicKey) {\n+    final Optional<Integer> validatorIndex = validatorIndexes.getCached(publicKey);\n+    if (validatorIndex.isPresent()) {\n+      return validatorIndex.filter(index -> index < state.getValidators().size());\n+    }\n+\n+    return findIndexFromState(state.getValidators(), publicKey);\n+  }\n+\n+  private Optional<Integer> findIndexFromState(\n+      final SSZList<Validator> validatorList, final BLSPublicKey publicKey) {\n+    final int lastIndexSnapshot = lastIndex.get();\n+    for (int i = Math.max(lastIndexSnapshot, 0); i < validatorList.size(); i++) {\n+      BLSPublicKey pubKey = BLSPublicKey.fromBytesCompressed(validatorList.get(i).getPubkey());\n+      validatorIndexes.invalidateWithNewValue(pubKey, i);\n+      if (pubKey.equals(publicKey)) {\n+        updateLastIndex(i);\n+        return Optional.of(i);\n+      }\n+    }\n+    if (validatorList.size() > lastIndexSnapshot) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b5115f1d01e72b72586a581443394ee3f7eff9"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "785a96e79034364ee7bf3c569cd22fdf25b7d734", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/785a96e79034364ee7bf3c569cd22fdf25b7d734", "committedDate": "2020-11-29T21:05:27Z", "message": "check last index earlier\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef9d9d3464464419adc4f62740999733bf7ed21b", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/ef9d9d3464464419adc4f62740999733bf7ed21b", "committedDate": "2020-11-29T21:12:28Z", "message": "added comment\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNTE4MTQ0", "url": "https://github.com/ConsenSys/teku/pull/3325#pullrequestreview-540518144", "createdAt": "2020-11-29T21:25:52Z", "commit": {"oid": "ef9d9d3464464419adc4f62740999733bf7ed21b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86202aa52256235a4fe9c1e47c36e4f2a9b0dab7", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/86202aa52256235a4fe9c1e47c36e4f2a9b0dab7", "committedDate": "2020-11-29T21:27:16Z", "message": "Merge remote-tracking branch 'upstream/master' into 3316-validator-lookup-speed"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4322, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}