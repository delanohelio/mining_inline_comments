{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MjAwNjQw", "number": 1110, "title": "Ensure deposits are correctly ordered when creating the genesis state", "bodyText": "PR Description\nSort deposits so that genesis state generation is deterministic (and correct).  Fixes GenesisStateAcceptanceTest.\nDeposit handling still isn't quite right - we should include all transactions in the Eth1 block even if only some of them were required to reach the threshold for genesis (ie the process is block based but we're processing discreet deposit events).  There is also still a problem where if there are more deposits than required to trigger genesis we may include some from after genesis because of the out of order processing.\nBut it's a start.", "createdAt": "2020-01-23T06:23:31Z", "url": "https://github.com/ConsenSys/teku/pull/1110", "merged": true, "mergeCommit": {"oid": "ebe33cc74161330892f05051a9b1f890703c2607"}, "closed": true, "closedAt": "2020-01-24T22:47:31Z", "author": {"login": "ajsutton"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9EONZgH2gAyMzY2MjAwNjQwOjU1ZTc4YjFkNDBjNzMwN2ViYjI4NDg2NWZhNzY4MDZmMjY2Yjg1NmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9mJG5gH2gAyMzY2MjAwNjQwOjE3MjkyN2UyNjY5MTdjMGU2YzhhZmNlMmQ2MDVlMjdhODkyMTA2NzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "55e78b1d40c7307ebb284865fa76806f266b856f", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/55e78b1d40c7307ebb284865fa76806f266b856f", "committedDate": "2020-01-23T06:19:27Z", "message": "Ensure deposits are correctly ordered when creating the genesis state."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MzcyODM5", "url": "https://github.com/ConsenSys/teku/pull/1110#pullrequestreview-347372839", "createdAt": "2020-01-23T15:11:56Z", "commit": {"oid": "55e78b1d40c7307ebb284865fa76806f266b856f"}, "state": "DISMISSED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToxMTo1N1rOFhBu7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTozNTo1OFrOFhCq0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE3NTcyNQ==", "bodyText": "It's probably clearer to just work with the deposit object:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  genesisEth1BlockHash = Bytes32.fromHexString(event.getResponse().log.getBlockHash());\n          \n          \n            \n                  genesisEth1BlockHash = Bytes32.fromHexString(depositWithIndex.getLog().getBlockHash());", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370175725", "createdAt": "2020-01-23T15:11:57Z", "author": {"login": "mbaxter"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateProcessor.java", "diffHunk": "@@ -86,13 +89,20 @@ public Bytes32 processHead() {\n   @Subscribe\n   public void onDeposit(tech.pegasys.artemis.pow.event.Deposit event) {\n     STDOUT.log(Level.DEBUG, \"New deposit received\");\n-    deposits.add(DepositUtil.convertDepositEventToOperationDeposit(event));\n+    final DepositWithIndex depositWithIndex =\n+        DepositUtil.convertDepositEventToOperationDeposit(event);\n+    deposits.add(depositWithIndex);\n+    // Eth1 hash has to be from the block containing the last required deposit but we may be\n+    // receiving deposits out of order.\n+    if (deposits.last().equals(depositWithIndex)) {\n+      genesisEth1BlockHash = Bytes32.fromHexString(event.getResponse().log.getBlockHash());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e78b1d40c7307ebb284865fa76806f266b856f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4NDkzMg==", "bodyText": "So, this test passes deterministically because we're sending exactly the right number of deposits to trigger genesis?", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370184932", "createdAt": "2020-01-23T15:26:06Z", "author": {"login": "mbaxter"}, "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/artemis/test/acceptance/GenesisStateAcceptanceTest.java", "diffHunk": "@@ -13,13 +13,11 @@\n \n package tech.pegasys.artemis.test.acceptance;\n \n-import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n import tech.pegasys.artemis.test.acceptance.dsl.AcceptanceTestBase;\n import tech.pegasys.artemis.test.acceptance.dsl.ArtemisNode;\n import tech.pegasys.artemis.test.acceptance.dsl.BesuNode;\n \n-@Disabled(\"Genesis generation does not yet match\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e78b1d40c7307ebb284865fa76806f266b856f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4NTg4Mg==", "bodyText": "Doesn't look like we need the transaction objects:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    web3.ethGetBlockByHash(blockHash.toHexString(), true).send().getBlock().getTimestamp());\n          \n          \n            \n                    web3.ethGetBlockByHash(blockHash.toHexString(), false).send().getBlock().getTimestamp());", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370185882", "createdAt": "2020-01-23T15:27:29Z", "author": {"login": "mbaxter"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/DepositUtil.java", "diffHunk": "@@ -198,13 +196,10 @@ public static DepositWithIndex convertDepositEventToOperationDeposit(\n     return new tech.pegasys.artemis.pow.event.Deposit(response);\n   }\n \n-  public static UnsignedLong getEpochBlockTimeByDepositBlockNumber(\n-      BigInteger blockNumber, String provider) throws IOException {\n+  public static UnsignedLong getEpochBlockTimeByDepositBlockHash(Bytes32 blockHash, String provider)\n+      throws IOException {\n     Web3j web3 = Web3j.build(new HttpService(provider));\n     return UnsignedLong.valueOf(\n-        web3.ethGetBlockByNumber(new DefaultBlockParameterNumber(blockNumber), true)\n-            .send()\n-            .getBlock()\n-            .getTimestamp());\n+        web3.ethGetBlockByHash(blockHash.toHexString(), true).send().getBlock().getTimestamp());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e78b1d40c7307ebb284865fa76806f266b856f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4OTk3Ng==", "bodyText": "Should this be volatile?", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370189976", "createdAt": "2020-01-23T15:34:07Z", "author": {"login": "mbaxter"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateProcessor.java", "diffHunk": "@@ -53,7 +55,8 @@\n   private final BlockImporter blockImporter;\n   private final ChainStorageClient chainStorageClient;\n   private final ArtemisConfiguration config;\n-  private final List<DepositWithIndex> deposits = new ArrayList<>();\n+  private final NavigableSet<DepositWithIndex> deposits = new TreeSet<>();\n+  private Bytes32 genesisEth1BlockHash;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e78b1d40c7307ebb284865fa76806f266b856f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5MTA1Nw==", "bodyText": "Alternatively, could we just make this a local variable within onDeposit and always set it to the last deposit's blockHash?", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370191057", "createdAt": "2020-01-23T15:35:58Z", "author": {"login": "mbaxter"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateProcessor.java", "diffHunk": "@@ -53,7 +55,8 @@\n   private final BlockImporter blockImporter;\n   private final ChainStorageClient chainStorageClient;\n   private final ArtemisConfiguration config;\n-  private final List<DepositWithIndex> deposits = new ArrayList<>();\n+  private final NavigableSet<DepositWithIndex> deposits = new TreeSet<>();\n+  private Bytes32 genesisEth1BlockHash;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4OTk3Ng=="}, "originalCommit": {"oid": "55e78b1d40c7307ebb284865fa76806f266b856f"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "168fb6b557e30e2e7bd85b0db13342b39bbcfac1", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/168fb6b557e30e2e7bd85b0db13342b39bbcfac1", "committedDate": "2020-01-23T20:14:31Z", "message": "Switch to queuing deposits so they are processed in order not just ordered correctly in the genesis state."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e839c28a13077c6b46445c0d97f2d7a9e6eb536", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/7e839c28a13077c6b46445c0d97f2d7a9e6eb536", "committedDate": "2020-01-23T20:33:23Z", "message": "Split genesis creation into a separate class."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcdba2c8dd1bff9ee86332507bb9a92e89ceec5c", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/bcdba2c8dd1bff9ee86332507bb9a92e89ceec5c", "committedDate": "2020-01-24T00:21:34Z", "message": "Extract queuing and reordering logic for deposits to a separate class so it can be tested in isolation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3d0e0cc38495004bbfeddff1341b5e40efa837b", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/f3d0e0cc38495004bbfeddff1341b5e40efa837b", "committedDate": "2020-01-24T00:25:31Z", "message": "We don't need the full transaction objects."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d142d17325a8e48e38957ae6b338159e6d372c0", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/6d142d17325a8e48e38957ae6b338159e6d372c0", "committedDate": "2020-01-24T00:26:37Z", "message": "Remove genesisReady from StateProcessor as we can check directly with ChainStorageClient."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c1596aba9727949ec6b179c3c7511714d36e265", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/1c1596aba9727949ec6b179c3c7511714d36e265", "committedDate": "2020-01-24T00:29:14Z", "message": "Merge branch 'master' of github.com:PegaSysEng/artemis into deposit-order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba89b216c70f95db6402353cc7d2cec513143f95", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/ba89b216c70f95db6402353cc7d2cec513143f95", "committedDate": "2020-01-24T03:08:42Z", "message": "More useful logging."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDI3MTEy", "url": "https://github.com/ConsenSys/teku/pull/1110#pullrequestreview-348027112", "createdAt": "2020-01-24T15:24:06Z", "commit": {"oid": "ba89b216c70f95db6402353cc7d2cec513143f95"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNToyNDowN1rOFhhJFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNToyNDowN1rOFhhJFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY5MDMyNA==", "bodyText": "nice \ud83c\udf89", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370690324", "createdAt": "2020-01-24T15:24:07Z", "author": {"login": "mbaxter"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/DepositQueue.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.statetransition;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Iterator;\n+import java.util.NavigableSet;\n+import java.util.TreeSet;\n+import java.util.function.Consumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.artemis.datastructures.operations.DepositWithIndex;\n+\n+public class DepositQueue {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba89b216c70f95db6402353cc7d2cec513143f95"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDY3NDUx", "url": "https://github.com/ConsenSys/teku/pull/1110#pullrequestreview-348067451", "createdAt": "2020-01-24T16:21:44Z", "commit": {"oid": "ba89b216c70f95db6402353cc7d2cec513143f95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjoyMTo0NVrOFhi-JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjoyMTo0NVrOFhi-JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyMDI5Mg==", "bodyText": "First time seeing you use iterators. Why did you choose an iterator here?", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370720292", "createdAt": "2020-01-24T16:21:45Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/DepositQueue.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.statetransition;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Iterator;\n+import java.util.NavigableSet;\n+import java.util.TreeSet;\n+import java.util.function.Consumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.artemis.datastructures.operations.DepositWithIndex;\n+\n+public class DepositQueue {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final NavigableSet<DepositWithIndex> pendingDeposits = new TreeSet<>();\n+  private final Consumer<DepositWithIndex> depositConsumer;\n+  private UnsignedLong expectedDepositIndex = UnsignedLong.ZERO;\n+\n+  public DepositQueue(final Consumer<DepositWithIndex> depositConsumer) {\n+    this.depositConsumer = depositConsumer;\n+  }\n+\n+  public void onDeposit(DepositWithIndex deposit) {\n+    LOG.trace(\"New deposit received with index {}\", deposit.getIndex());\n+    pendingDeposits.add(deposit);\n+    processPendingDeposits();\n+  }\n+\n+  private void processPendingDeposits() {\n+    for (Iterator<DepositWithIndex> i = pendingDeposits.iterator(); i.hasNext(); ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba89b216c70f95db6402353cc7d2cec513143f95"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDc3Nzcx", "url": "https://github.com/ConsenSys/teku/pull/1110#pullrequestreview-348077771", "createdAt": "2020-01-24T16:37:29Z", "commit": {"oid": "ba89b216c70f95db6402353cc7d2cec513143f95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjozNzozMFrOFhjdDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjozNzozMFrOFhjdDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyODIwNQ==", "bodyText": "One thing I noticed in this PR, unrelated to this PR is that process slot gets called only when storeTime is greater than nextSlotStartTime. Since, at least with the current constants, onTick() gets called twice every second, in the worst-case scenario we're losing 500 ms processing time for each slot. I think we should fix this. Here's the ticket: https://pegasys1.atlassian.net/secure/RapidBoard.jspa?rapidView=67&modal=detail&selectedIssue=BC-244\nOne idea is to have a SlotScheduler class that has its own timer which gets kicked off exactly at genesis. This class could post SlotEvents, BroadcastAttestationEvents and BroadcastAggregateEvents just like the processSlot method here, however, it would post those events way more precisely.", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370728205", "createdAt": "2020-01-24T16:37:30Z", "author": {"login": "cemozerr"}, "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -281,21 +281,19 @@ private void onStoreInitializedEvent(final StoreInitializedEvent event) {\n   @Subscribe\n   @SuppressWarnings(\"unused\")\n   private void onTick(Date date) {\n-    if (!testMode && !stateProcessor.isGenesisReady()) {\n+    if (chainStorageClient.isPreGenesis()) {\n       return;\n     }\n     final UnsignedLong currentTime = UnsignedLong.valueOf(date.getTime() / 1000);\n-    if (chainStorageClient.getStore() != null) {\n-      final Store.Transaction transaction = chainStorageClient.startStoreTransaction();\n-      on_tick(transaction, currentTime);\n-      transaction.commit().join();\n-      final UnsignedLong nextSlotStartTime =\n-          chainStorageClient\n-              .getGenesisTime()\n-              .plus(nodeSlot.times(UnsignedLong.valueOf(SECONDS_PER_SLOT)));\n-      if (chainStorageClient.getStore().getTime().compareTo(nextSlotStartTime) >= 0) {\n-        processSlot();\n-      }\n+    final Store.Transaction transaction = chainStorageClient.startStoreTransaction();\n+    on_tick(transaction, currentTime);\n+    transaction.commit().join();\n+    final UnsignedLong nextSlotStartTime =\n+        chainStorageClient\n+            .getGenesisTime()\n+            .plus(nodeSlot.times(UnsignedLong.valueOf(SECONDS_PER_SLOT)));\n+    if (chainStorageClient.getStore().getTime().compareTo(nextSlotStartTime) >= 0) {\n+      processSlot();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba89b216c70f95db6402353cc7d2cec513143f95"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "172927e266917c0e6c8afce2d605e27a89210670", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/172927e266917c0e6c8afce2d605e27a89210670", "committedDate": "2020-01-24T21:50:39Z", "message": "Merge branch 'master' into deposit-order"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4231, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}