{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NDcwOTA5", "number": 2178, "title": "Move fork choice processing into Store", "bodyText": "PR Description\nMove fork choice processing into Store, allowing us to:\n\nConsolidate state processing.  Previously, Store would process every state after finalization while initializing, and afterwards we would set up ProtoArrayForkChoiceStrategy, which would also process every non-finalized state.  Because ProtoArrayForkChoiceStrategy iterated over blocks in a random order, during long periods of non-finalization we could end up reprocessing states many times as we initialized fork choice.  We now initialize Store and fork-choice at the same time, walking through non-finalized states only once.\nAvoid manually invoking fork-choice processing in tests whenever blocks are added to the Store.  Because fork-choice processing was already partially integrated with RecentChainData (we would pruneProtoArrayForkChoiceStrategy whenever the latest finalized checkpoint was updated), we previously needed to manually run fork-choice processing on all blocks added to the Store in order to avoid errors where we would try to prune ProtoArrayForkChoiceStrategy given a block that hadn't yet been processed.\nLay some groundwork for persisting fork-choice state to disk: having ProtoArrayForkChoiceStrategy owned by Store should make it easier to persist fork-choice state and keep this state in sync with the rest of our chain data.\n\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-06-20T22:58:19Z", "url": "https://github.com/ConsenSys/teku/pull/2178", "merged": true, "mergeCommit": {"oid": "60c2a7602902b6c99c5f2082db89c29a8f4dfd57"}, "closed": true, "closedAt": "2020-06-22T22:10:46Z", "author": {"login": "mbaxter"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsoEHhgH2gAyNDM3NDcwOTA5OjE2N2QwNGYxODlkNGNkNGE3NDhkMWM0MjFjMDVjNDc4ZTZkNTI0ZWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABct2zurgH2gAyNDM3NDcwOTA5OjE0MDFmYjliY2MwMzE3NjUyMjdmOGU1OGRlYTY0MzE0ZmQwNDJkZGY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "167d04f189d4cd4a748d1c421c05c478e6d524ec", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/167d04f189d4cd4a748d1c421c05c478e6d524ec", "committedDate": "2020-06-19T00:39:27Z", "message": "Move forkChoice block processing into RecentChainData"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6520dde42f2667b354e7f807f2fb1cd368595646", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/6520dde42f2667b354e7f807f2fb1cd368595646", "committedDate": "2020-06-19T00:39:27Z", "message": "Fix tests - use valid block / state pairs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8a14f4e4b45030db99fa135fb15254888046df1", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/d8a14f4e4b45030db99fa135fb15254888046df1", "committedDate": "2020-06-19T00:39:27Z", "message": "Make sure blocks are processed in order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de02b1088c7e5b61b344bd73b45e57a6e1c2c105", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/de02b1088c7e5b61b344bd73b45e57a6e1c2c105", "committedDate": "2020-06-19T21:22:05Z", "message": "Move forkChoice into Store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7821c7b1aeb7e3a072f0be8d0e170d2229073983", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/7821c7b1aeb7e3a072f0be8d0e170d2229073983", "committedDate": "2020-06-20T21:33:20Z", "message": "Fix fork choice logic - move processing out of tx.commit()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c74d9b78c72d21aefdad122fe6270fc104398b73", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/c74d9b78c72d21aefdad122fe6270fc104398b73", "committedDate": "2020-06-20T21:33:41Z", "message": "Fix Transaction getters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfd43aff9bbe8c24c013dc1b12fae054a8475e09", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/dfd43aff9bbe8c24c013dc1b12fae054a8475e09", "committedDate": "2020-06-21T00:54:55Z", "message": "Fix tests - set checkpoint state, update justified checkpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/e577d8d7b77e51ab1ddef0a497cc17a7a4468f75", "committedDate": "2020-06-21T01:41:12Z", "message": "Fix rest api tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NTU1MzM4", "url": "https://github.com/ConsenSys/teku/pull/2178#pullrequestreview-434555338", "createdAt": "2020-06-22T01:21:06Z", "commit": {"oid": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMToyMTowNlrOGmvlkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzo0NTo1M1rOGmxILg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI3ODczOQ==", "bodyText": "I feel like we should just delete this and OrigForkChoiceStrategy now.  We only use this as part of the fork choice reference tests - the original idea for keeping it around was to compare results with the protoarray fork choice but the reference tests are a better way to confirm it's behaviour is right.\nDoesn't need to be in this PR though.", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443278739", "createdAt": "2020-06-22T01:21:06Z", "author": {"login": "ajsutton"}, "path": "eth-reference-tests/src/referenceTest/java/tech/pegasys/teku/reference/phase0/fork_choice/implementatations/OrigForkChoiceProcessor.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.reference.phase0.fork_choice.implementatations;\n+\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.ValidatorsUtil.get_active_validator_indices;\n+import static tech.pegasys.teku.util.config.Constants.GENESIS_EPOCH;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.core.ForkChoiceUtil;\n+import tech.pegasys.teku.core.results.BlockImportResult;\n+import tech.pegasys.teku.datastructures.attestation.ValidateableAttestation;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.datastructures.forkchoice.MutableForkChoiceState;\n+import tech.pegasys.teku.datastructures.forkchoice.MutableStore;\n+import tech.pegasys.teku.datastructures.forkchoice.ReadOnlyStore;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.datastructures.state.CheckpointAndBlock;\n+import tech.pegasys.teku.datastructures.util.AttestationProcessingResult;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+import tech.pegasys.teku.storage.store.UpdatableStore;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class OrigForkChoiceProcessor extends ForkChoiceProcessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5NTU0Mg==", "bodyText": "nit: Probably better to use .join() or assert it's completed.  reportExceptions will allow the test to continue even if the commit fails.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                tx.commit().reportExceptions();\n          \n          \n            \n                assertThat(tx.commit()).isCompleted();", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443295542", "createdAt": "2020-06-22T02:59:08Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/testFixtures/java/tech/pegasys/teku/statetransition/BeaconChainUtil.java", "diffHunk": "@@ -193,7 +179,11 @@ public SignedBeaconBlock createAndImportBlockAtSlot(\n               + \": \"\n               + block);\n     }\n-    forkChoice.processHead();\n+\n+    final StoreTransaction tx = recentChainData.startStoreTransaction();\n+    tx.updateHead();\n+    tx.commit().reportExceptions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5ODUwOQ==", "bodyText": "We need to hold the protoArrayLock readLock here so that it's safe to access protoArray.  Given that justifiedCheckpoint is only updated in updateForkChoiceWeights which holds the protoArray write lock that will also make the access to justifiedCheckpoint safe.  Probably should add a comment that justifiedCheckpoint is guarded by protoArrayLock as it might not be obvious.", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443298509", "createdAt": "2020-06-22T03:15:13Z", "author": {"login": "ajsutton"}, "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayForkChoiceStrategy.java", "diffHunk": "@@ -32,55 +32,69 @@\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.forkchoice.MutableForkChoiceState;\n import tech.pegasys.teku.datastructures.forkchoice.MutableStore;\n-import tech.pegasys.teku.datastructures.forkchoice.ReadOnlyStore;\n import tech.pegasys.teku.datastructures.forkchoice.VoteTracker;\n import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n import tech.pegasys.teku.datastructures.state.BeaconState;\n import tech.pegasys.teku.datastructures.state.Checkpoint;\n import tech.pegasys.teku.util.config.Constants;\n \n-public class ProtoArrayForkChoiceStrategy implements ForkChoiceStrategy {\n+public class ProtoArrayForkChoiceStrategy implements MutableForkChoiceState {\n   private static final Logger LOG = LogManager.getLogger();\n \n   private final ReadWriteLock protoArrayLock = new ReentrantReadWriteLock();\n   private final ReadWriteLock votesLock = new ReentrantReadWriteLock();\n   private final ReadWriteLock balancesLock = new ReentrantReadWriteLock();\n   private final ProtoArray protoArray;\n \n+  private Checkpoint justifiedCheckpoint;\n   private List<UnsignedLong> balances;\n \n-  private ProtoArrayForkChoiceStrategy(ProtoArray protoArray, List<UnsignedLong> balances) {\n+  private ProtoArrayForkChoiceStrategy(\n+      ProtoArray protoArray, List<UnsignedLong> balances, final Checkpoint justifiedCheckpoint) {\n     this.protoArray = protoArray;\n     this.balances = balances;\n+    this.justifiedCheckpoint = justifiedCheckpoint;\n   }\n \n   // Public\n-  public static ProtoArrayForkChoiceStrategy create(ReadOnlyStore store) {\n+  public static ProtoArrayForkChoiceStrategy create(\n+      final Checkpoint finalizedCheckpoint, final Checkpoint justifiedCheckpoint) {\n+    return create(\n+        finalizedCheckpoint, justifiedCheckpoint, Constants.PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD);\n+  }\n+\n+  private static ProtoArrayForkChoiceStrategy create(\n+      final Checkpoint finalizedCheckpoint,\n+      final Checkpoint justifiedCheckpoint,\n+      final int pruningThreshold) {\n     ProtoArray protoArray =\n         new ProtoArray(\n-            Constants.PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD,\n-            store.getJustifiedCheckpoint().getEpoch(),\n-            store.getFinalizedCheckpoint().getEpoch(),\n+            pruningThreshold,\n+            justifiedCheckpoint.getEpoch(),\n+            finalizedCheckpoint.getEpoch(),\n             new ArrayList<>(),\n             new HashMap<>());\n \n-    processBlocksInStoreAtStartup(store, protoArray);\n-\n-    return new ProtoArrayForkChoiceStrategy(protoArray, new ArrayList<>());\n+    return new ProtoArrayForkChoiceStrategy(protoArray, new ArrayList<>(), justifiedCheckpoint);\n   }\n \n   @Override\n-  public Bytes32 findHead(final MutableStore store) {\n+  public void updateHead(final MutableStore store) {\n     Checkpoint justifiedCheckpoint = store.getJustifiedCheckpoint();\n-    return findHead(\n+    updateForkChoiceWeights(\n         store,\n-        justifiedCheckpoint.getEpoch(),\n-        justifiedCheckpoint.getRoot(),\n+        justifiedCheckpoint,\n         store.getFinalizedCheckpoint().getEpoch(),\n         store.getCheckpointState(justifiedCheckpoint).getBalances().asList());\n   }\n \n+  @Override\n+  public Bytes32 getHead() {\n+    return protoArray.findHead(justifiedCheckpoint.getRoot());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMTEzOA==", "bodyText": "forkChoiceState has its own locks and the variable in Store is final so we don't need to hold the read lock here.", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443301138", "createdAt": "2020-06-22T03:30:22Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/Store.java", "diffHunk": "@@ -302,6 +314,31 @@ public SignedBeaconBlock getSignedBlock(Bytes32 blockRoot) {\n     return getOrGenerateBlockState(blockRoot).map((state) -> new SignedBlockAndState(block, state));\n   }\n \n+  @Override\n+  public Bytes32 getHead() {\n+    return forkChoiceState.getHead();\n+  }\n+\n+  @Override\n+  public Optional<UnsignedLong> getBlockSlot(final Bytes32 blockRoot) {\n+    readLock.lock();\n+    try {\n+      return forkChoiceState.getBlockSlot(blockRoot);\n+    } finally {\n+      readLock.unlock();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMTE2MQ==", "bodyText": "We don't need the read lock here either.", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443301161", "createdAt": "2020-06-22T03:30:31Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/Store.java", "diffHunk": "@@ -302,6 +314,31 @@ public SignedBeaconBlock getSignedBlock(Bytes32 blockRoot) {\n     return getOrGenerateBlockState(blockRoot).map((state) -> new SignedBlockAndState(block, state));\n   }\n \n+  @Override\n+  public Bytes32 getHead() {\n+    return forkChoiceState.getHead();\n+  }\n+\n+  @Override\n+  public Optional<UnsignedLong> getBlockSlot(final Bytes32 blockRoot) {\n+    readLock.lock();\n+    try {\n+      return forkChoiceState.getBlockSlot(blockRoot);\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n+\n+  @Override\n+  public Optional<Bytes32> getBlockParent(final Bytes32 blockRoot) {\n+    readLock.lock();\n+    try {\n+      return forkChoiceState.getBlockParent(blockRoot);\n+    } finally {\n+      readLock.unlock();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMjkwOA==", "bodyText": "There's a bit of a clash going on here - every other method in Store.Transaction has no effect on the underlying Store until commit is called, except this one.\nupdateHead probably shouldn't be on Store.Transaction at all as the transaction is always immediately committed and no other changes are made to the store, so it probably should just be a method directly on UpdatableStore.", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443302908", "createdAt": "2020-06-22T03:40:18Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/Store.java", "diffHunk": "@@ -651,6 +716,17 @@ public boolean containsCheckpointState(final Checkpoint checkpoint) {\n       return checkpoint_states.containsKey(checkpoint)\n           || Store.this.containsCheckpointState(checkpoint);\n     }\n+\n+    @Override\n+    public void updateHead() {\n+      Store.this.forkChoiceState.updateHead(this);\n+      this.headUpdated = true;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMzI1NQ==", "bodyText": "This ones slightly interesting - I was expecting that it would wind up making changes to forkChoice immediately, but it actually only changes votes which are stored in Store and so no changes are applied until commit is called.  So it all works as long as forkChoiceState.onAttestation isn't changed in the future to change things other than votes.", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443303255", "createdAt": "2020-06-22T03:41:55Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/Store.java", "diffHunk": "@@ -651,6 +716,17 @@ public boolean containsCheckpointState(final Checkpoint checkpoint) {\n       return checkpoint_states.containsKey(checkpoint)\n           || Store.this.containsCheckpointState(checkpoint);\n     }\n+\n+    @Override\n+    public void updateHead() {\n+      Store.this.forkChoiceState.updateHead(this);\n+      this.headUpdated = true;\n+    }\n+\n+    @Override\n+    public void processAttestation(final IndexedAttestation attestation) {\n+      Store.this.forkChoiceState.onAttestation(this, attestation);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMzk4Mg==", "bodyText": "nit: No need to wrap and unwrap the block and state here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  store.forkChoiceState.onBlock(new SignedBlockAndState(newBlock, newState));\n          \n          \n            \n                  store.forkChoiceState.onBlock(newBlock.getMessage(), newState);", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443303982", "createdAt": "2020-06-22T03:45:53Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/StoreTransactionUpdates.java", "diffHunk": "@@ -266,6 +269,36 @@ public void applyToStore(final Store store) {\n                 removeBlockRootFromSlotIndex(store.rootsBySlotLookup, slot, root);\n               });\n         });\n+\n+    // Update forkchoice\n+    applyForkChoiceUpdates(store);\n+  }\n+\n+  private void applyForkChoiceUpdates(final Store store) {\n+    // Process new blocks and states\n+    final List<SignedBeaconBlock> sortedBlocks = new ArrayList<>(hotBlocks.values());\n+    sortedBlocks.sort(Comparator.comparing(SignedBeaconBlock::getSlot));\n+    for (SignedBeaconBlock newBlock : sortedBlocks) {\n+      final BeaconState newState = hotStates.get(newBlock.getRoot());\n+      store.forkChoiceState.onBlock(new SignedBlockAndState(newBlock, newState));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af6fb34f117c2314a44540b00e9cc2443ac793ea", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/af6fb34f117c2314a44540b00e9cc2443ac793ea", "committedDate": "2020-06-22T14:32:18Z", "message": "In tests, join on transaction commit results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d586af5fb4376815de687d56c5a5c0e55ee5f2f", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/8d586af5fb4376815de687d56c5a5c0e55ee5f2f", "committedDate": "2020-06-22T14:57:53Z", "message": "Fix locks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43675a59cf2c3c4ce2dcf7709e2a459dbfd517a4", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/43675a59cf2c3c4ce2dcf7709e2a459dbfd517a4", "committedDate": "2020-06-22T15:01:19Z", "message": "Cut unnecessary object creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb0cc2f9dffb9bf0a298f775de419048746538b5", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/fb0cc2f9dffb9bf0a298f775de419048746538b5", "committedDate": "2020-06-22T19:35:33Z", "message": "Move forkChoice mutations to an Updater object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1401fb9bcc031765227f8e58dea64314fd042ddf", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/1401fb9bcc031765227f8e58dea64314fd042ddf", "committedDate": "2020-06-22T20:24:03Z", "message": "Merge branch 'master' into issue-2037/move-fork-choice-into-store"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3948, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}