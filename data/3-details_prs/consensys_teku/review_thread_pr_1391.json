{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NjYwOTI4", "number": 1391, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoyNDozMFrODo6_bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTozNjo0NlrODo8TfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjM2MTQzOnYy", "diffSide": "RIGHT", "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/CommonParams.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoyNDozMFrOF3xfSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzo0Mzo1NVrOF3x36g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNjgyNA==", "bodyText": "nit: Instead of saying \"reading v3 keystore\" I think just calling it an Eth1 keystore would be clearer so something like \"reading Eth1 keystore\"", "url": "https://github.com/ConsenSys/teku/pull/1391#discussion_r394026824", "createdAt": "2020-03-17T23:24:30Z", "author": {"login": "jframe"}, "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/CommonParams.java", "diffHunk": "@@ -85,6 +103,41 @@ public UnsignedLong getAmount() {\n     return amount;\n   }\n \n+  Credentials getEth1Credentials() {\n+    if (eth1PrivateKeyOptions.eth1PrivateKey != null) {\n+      return Credentials.create(eth1PrivateKeyOptions.eth1PrivateKey);\n+    }\n+\n+    final String keystorePassword =\n+        KeystorePasswordOptions.readFromFile(\n+            spec.commandLine(),\n+            eth1PrivateKeyOptions.keystoreOptions.eth1PrivateKeystorePasswordFile);\n+    final File eth1PrivateKeystoreFile =\n+        eth1PrivateKeyOptions.keystoreOptions.eth1PrivateKeystoreFile;\n+    try {\n+      return WalletUtils.loadCredentials(keystorePassword, eth1PrivateKeystoreFile);\n+    } catch (final FileNotFoundException e) {\n+      throw new CommandLine.ParameterException(\n+          spec.commandLine(), \"Error: File not found: \" + eth1PrivateKeystoreFile, e);\n+    } catch (final IOException e) {\n+      throw new CommandLine.ParameterException(\n+          spec.commandLine(),\n+          \"Error: Unexpected IO Error while reading v3 keystore [\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0011000c9838d196f243082214cf852cefdb2e7a"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMzEzMA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/1391#discussion_r394033130", "createdAt": "2020-03-17T23:43:55Z", "author": {"login": "usmansaleem"}, "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/CommonParams.java", "diffHunk": "@@ -85,6 +103,41 @@ public UnsignedLong getAmount() {\n     return amount;\n   }\n \n+  Credentials getEth1Credentials() {\n+    if (eth1PrivateKeyOptions.eth1PrivateKey != null) {\n+      return Credentials.create(eth1PrivateKeyOptions.eth1PrivateKey);\n+    }\n+\n+    final String keystorePassword =\n+        KeystorePasswordOptions.readFromFile(\n+            spec.commandLine(),\n+            eth1PrivateKeyOptions.keystoreOptions.eth1PrivateKeystorePasswordFile);\n+    final File eth1PrivateKeystoreFile =\n+        eth1PrivateKeyOptions.keystoreOptions.eth1PrivateKeystoreFile;\n+    try {\n+      return WalletUtils.loadCredentials(keystorePassword, eth1PrivateKeystoreFile);\n+    } catch (final FileNotFoundException e) {\n+      throw new CommandLine.ParameterException(\n+          spec.commandLine(), \"Error: File not found: \" + eth1PrivateKeystoreFile, e);\n+    } catch (final IOException e) {\n+      throw new CommandLine.ParameterException(\n+          spec.commandLine(),\n+          \"Error: Unexpected IO Error while reading v3 keystore [\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNjgyNA=="}, "originalCommit": {"oid": "0011000c9838d196f243082214cf852cefdb2e7a"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjM2NTQwOnYy", "diffSide": "RIGHT", "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/Eth1PrivateKeyOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoyNjo1MFrOF3xhyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzo0NDo0NlrOF3x4tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNzQ2Ng==", "bodyText": "Do we need include private as part of this? It technically contains both. I think just \"--eth1-keystore-file\" would be enough", "url": "https://github.com/ConsenSys/teku/pull/1391#discussion_r394027466", "createdAt": "2020-03-17T23:26:50Z", "author": {"login": "jframe"}, "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/Eth1PrivateKeyOptions.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import java.io.File;\n+import picocli.CommandLine.ArgGroup;\n+import picocli.CommandLine.Option;\n+\n+class Eth1PrivateKeyOptions {\n+  @Option(\n+      names = {\"--eth1-private-key\"},\n+      required = true,\n+      paramLabel = \"<KEY>\",\n+      description = \"Ethereum 1 private key to use to send transactions\")\n+  String eth1PrivateKey;\n+\n+  @ArgGroup(exclusive = false, multiplicity = \"1\")\n+  Eth1EncryptedPrivateKeystoreOptions keystoreOptions;\n+\n+  static class Eth1EncryptedPrivateKeystoreOptions {\n+    @Option(\n+        names = {\"--eth1-private-keystore-file\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0011000c9838d196f243082214cf852cefdb2e7a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMzMzMw==", "bodyText": "I was slightly confused about that myself. I'll change it to --eth1-keystore-file.", "url": "https://github.com/ConsenSys/teku/pull/1391#discussion_r394033333", "createdAt": "2020-03-17T23:44:46Z", "author": {"login": "usmansaleem"}, "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/Eth1PrivateKeyOptions.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import java.io.File;\n+import picocli.CommandLine.ArgGroup;\n+import picocli.CommandLine.Option;\n+\n+class Eth1PrivateKeyOptions {\n+  @Option(\n+      names = {\"--eth1-private-key\"},\n+      required = true,\n+      paramLabel = \"<KEY>\",\n+      description = \"Ethereum 1 private key to use to send transactions\")\n+  String eth1PrivateKey;\n+\n+  @ArgGroup(exclusive = false, multiplicity = \"1\")\n+  Eth1EncryptedPrivateKeystoreOptions keystoreOptions;\n+\n+  static class Eth1EncryptedPrivateKeystoreOptions {\n+    @Option(\n+        names = {\"--eth1-private-keystore-file\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNzQ2Ng=="}, "originalCommit": {"oid": "0011000c9838d196f243082214cf852cefdb2e7a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjM2NjQ5OnYy", "diffSide": "RIGHT", "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/Eth1PrivateKeyOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoyNzoyM1rOF3xiXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoyNzoyM1rOF3xiXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNzYxNQ==", "bodyText": "Same as the related option, I think this can just be \"eth1-keystore-password-file\"", "url": "https://github.com/ConsenSys/teku/pull/1391#discussion_r394027615", "createdAt": "2020-03-17T23:27:23Z", "author": {"login": "jframe"}, "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/Eth1PrivateKeyOptions.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import java.io.File;\n+import picocli.CommandLine.ArgGroup;\n+import picocli.CommandLine.Option;\n+\n+class Eth1PrivateKeyOptions {\n+  @Option(\n+      names = {\"--eth1-private-key\"},\n+      required = true,\n+      paramLabel = \"<KEY>\",\n+      description = \"Ethereum 1 private key to use to send transactions\")\n+  String eth1PrivateKey;\n+\n+  @ArgGroup(exclusive = false, multiplicity = \"1\")\n+  Eth1EncryptedPrivateKeystoreOptions keystoreOptions;\n+\n+  static class Eth1EncryptedPrivateKeystoreOptions {\n+    @Option(\n+        names = {\"--eth1-private-keystore-file\"},\n+        required = true,\n+        paramLabel = \"<FILE>\",\n+        description =\n+            \"Path to encrypted (V3) keystore containing Ethereum 1 private key to use to send transactions\")\n+    File eth1PrivateKeystoreFile;\n+\n+    @Option(\n+        names = {\"--eth1-private-keystore-password-file\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0011000c9838d196f243082214cf852cefdb2e7a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjM4MDk3OnYy", "diffSide": "RIGHT", "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/CommonParams.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzozNToyOVrOF3xraw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDozMjo1MlrOF3ypUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyOTkzMQ==", "bodyText": "This block creating the credentials for the keystore would be nice to go into seperate function", "url": "https://github.com/ConsenSys/teku/pull/1391#discussion_r394029931", "createdAt": "2020-03-17T23:35:29Z", "author": {"login": "jframe"}, "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/CommonParams.java", "diffHunk": "@@ -85,6 +103,41 @@ public UnsignedLong getAmount() {\n     return amount;\n   }\n \n+  Credentials getEth1Credentials() {\n+    if (eth1PrivateKeyOptions.eth1PrivateKey != null) {\n+      return Credentials.create(eth1PrivateKeyOptions.eth1PrivateKey);\n+    }\n+\n+    final String keystorePassword =\n+        KeystorePasswordOptions.readFromFile(\n+            spec.commandLine(),\n+            eth1PrivateKeyOptions.keystoreOptions.eth1PrivateKeystorePasswordFile);\n+    final File eth1PrivateKeystoreFile =\n+        eth1PrivateKeyOptions.keystoreOptions.eth1PrivateKeystoreFile;\n+    try {\n+      return WalletUtils.loadCredentials(keystorePassword, eth1PrivateKeystoreFile);\n+    } catch (final FileNotFoundException e) {\n+      throw new CommandLine.ParameterException(\n+          spec.commandLine(), \"Error: File not found: \" + eth1PrivateKeystoreFile, e);\n+    } catch (final IOException e) {\n+      throw new CommandLine.ParameterException(\n+          spec.commandLine(),\n+          \"Error: Unexpected IO Error while reading v3 keystore [\"\n+              + eth1PrivateKeystoreFile\n+              + \"] : \"\n+              + e.getMessage(),\n+          e);\n+    } catch (CipherException e) {\n+      throw new CommandLine.ParameterException(\n+          spec.commandLine(),\n+          \"Error: Unable to decrypt v3 keystore [\"\n+              + eth1PrivateKeystoreFile\n+              + \"] : \"\n+              + e.getMessage(),\n+          e);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0011000c9838d196f243082214cf852cefdb2e7a"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NTc3Nw==", "bodyText": "refactored!", "url": "https://github.com/ConsenSys/teku/pull/1391#discussion_r394045777", "createdAt": "2020-03-18T00:32:52Z", "author": {"login": "usmansaleem"}, "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/CommonParams.java", "diffHunk": "@@ -85,6 +103,41 @@ public UnsignedLong getAmount() {\n     return amount;\n   }\n \n+  Credentials getEth1Credentials() {\n+    if (eth1PrivateKeyOptions.eth1PrivateKey != null) {\n+      return Credentials.create(eth1PrivateKeyOptions.eth1PrivateKey);\n+    }\n+\n+    final String keystorePassword =\n+        KeystorePasswordOptions.readFromFile(\n+            spec.commandLine(),\n+            eth1PrivateKeyOptions.keystoreOptions.eth1PrivateKeystorePasswordFile);\n+    final File eth1PrivateKeystoreFile =\n+        eth1PrivateKeyOptions.keystoreOptions.eth1PrivateKeystoreFile;\n+    try {\n+      return WalletUtils.loadCredentials(keystorePassword, eth1PrivateKeystoreFile);\n+    } catch (final FileNotFoundException e) {\n+      throw new CommandLine.ParameterException(\n+          spec.commandLine(), \"Error: File not found: \" + eth1PrivateKeystoreFile, e);\n+    } catch (final IOException e) {\n+      throw new CommandLine.ParameterException(\n+          spec.commandLine(),\n+          \"Error: Unexpected IO Error while reading v3 keystore [\"\n+              + eth1PrivateKeystoreFile\n+              + \"] : \"\n+              + e.getMessage(),\n+          e);\n+    } catch (CipherException e) {\n+      throw new CommandLine.ParameterException(\n+          spec.commandLine(),\n+          \"Error: Unable to decrypt v3 keystore [\"\n+              + eth1PrivateKeystoreFile\n+              + \"] : \"\n+              + e.getMessage(),\n+          e);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyOTkzMQ=="}, "originalCommit": {"oid": "0011000c9838d196f243082214cf852cefdb2e7a"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjM4Mjg1OnYy", "diffSide": "RIGHT", "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/CommonParams.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzozNjoxN1rOF3xscg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzozNjoxN1rOF3xscg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMDE5NA==", "bodyText": "Same as before I thinking we should just call it an Eth1 keystore?", "url": "https://github.com/ConsenSys/teku/pull/1391#discussion_r394030194", "createdAt": "2020-03-17T23:36:17Z", "author": {"login": "jframe"}, "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/CommonParams.java", "diffHunk": "@@ -85,6 +103,41 @@ public UnsignedLong getAmount() {\n     return amount;\n   }\n \n+  Credentials getEth1Credentials() {\n+    if (eth1PrivateKeyOptions.eth1PrivateKey != null) {\n+      return Credentials.create(eth1PrivateKeyOptions.eth1PrivateKey);\n+    }\n+\n+    final String keystorePassword =\n+        KeystorePasswordOptions.readFromFile(\n+            spec.commandLine(),\n+            eth1PrivateKeyOptions.keystoreOptions.eth1PrivateKeystorePasswordFile);\n+    final File eth1PrivateKeystoreFile =\n+        eth1PrivateKeyOptions.keystoreOptions.eth1PrivateKeystoreFile;\n+    try {\n+      return WalletUtils.loadCredentials(keystorePassword, eth1PrivateKeystoreFile);\n+    } catch (final FileNotFoundException e) {\n+      throw new CommandLine.ParameterException(\n+          spec.commandLine(), \"Error: File not found: \" + eth1PrivateKeystoreFile, e);\n+    } catch (final IOException e) {\n+      throw new CommandLine.ParameterException(\n+          spec.commandLine(),\n+          \"Error: Unexpected IO Error while reading v3 keystore [\"\n+              + eth1PrivateKeystoreFile\n+              + \"] : \"\n+              + e.getMessage(),\n+          e);\n+    } catch (CipherException e) {\n+      throw new CommandLine.ParameterException(\n+          spec.commandLine(),\n+          \"Error: Unable to decrypt v3 keystore [\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0011000c9838d196f243082214cf852cefdb2e7a"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjM4MzczOnYy", "diffSide": "RIGHT", "path": "artemis/src/test/java/tech/pegasys/artemis/cli/deposit/CommonParamsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzozNjo0NFrOF3xs6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzozNjo0NFrOF3xs6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMDMxMg==", "bodyText": "nit final", "url": "https://github.com/ConsenSys/teku/pull/1391#discussion_r394030312", "createdAt": "2020-03-17T23:36:44Z", "author": {"login": "jframe"}, "path": "artemis/src/test/java/tech/pegasys/artemis/cli/deposit/CommonParamsTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.web3j.crypto.CipherException;\n+import org.web3j.crypto.Credentials;\n+import org.web3j.crypto.ECKeyPair;\n+import org.web3j.crypto.WalletUtils;\n+import org.web3j.utils.Numeric;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Model.CommandSpec;\n+\n+class CommonParamsTest {\n+  private static final String ETH1_PRIVATE_KEY =\n+      \"8f2a55949038a9610f50fb23b5883af3b4ecb3c3bb792cbcefbd1542c692be63\";\n+  private static final ECKeyPair EXPECTED_EC_KEYPAIR =\n+      ECKeyPair.create(Numeric.toBigInt(ETH1_PRIVATE_KEY));\n+  private static final String PASSWORD = \"test123\";\n+  private CommandSpec commandSpec = mock(CommandSpec.class);\n+\n+  @Test\n+  void eth1PrivateKeyReturnsCredential() {\n+    Eth1PrivateKeyOptions eth1PrivateKeyOptions = new Eth1PrivateKeyOptions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0011000c9838d196f243082214cf852cefdb2e7a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjM4NzU0OnYy", "diffSide": "RIGHT", "path": "artemis/src/test/java/tech/pegasys/artemis/cli/deposit/CommonParamsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzozODoyMlrOF3xu_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDozMzowNlrOF3ypgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMDg0Nw==", "bodyText": "nit: missing some finals", "url": "https://github.com/ConsenSys/teku/pull/1391#discussion_r394030847", "createdAt": "2020-03-17T23:38:22Z", "author": {"login": "jframe"}, "path": "artemis/src/test/java/tech/pegasys/artemis/cli/deposit/CommonParamsTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.web3j.crypto.CipherException;\n+import org.web3j.crypto.Credentials;\n+import org.web3j.crypto.ECKeyPair;\n+import org.web3j.crypto.WalletUtils;\n+import org.web3j.utils.Numeric;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Model.CommandSpec;\n+\n+class CommonParamsTest {\n+  private static final String ETH1_PRIVATE_KEY =\n+      \"8f2a55949038a9610f50fb23b5883af3b4ecb3c3bb792cbcefbd1542c692be63\";\n+  private static final ECKeyPair EXPECTED_EC_KEYPAIR =\n+      ECKeyPair.create(Numeric.toBigInt(ETH1_PRIVATE_KEY));\n+  private static final String PASSWORD = \"test123\";\n+  private CommandSpec commandSpec = mock(CommandSpec.class);\n+\n+  @Test\n+  void eth1PrivateKeyReturnsCredential() {\n+    Eth1PrivateKeyOptions eth1PrivateKeyOptions = new Eth1PrivateKeyOptions();\n+    eth1PrivateKeyOptions.eth1PrivateKey = ETH1_PRIVATE_KEY;\n+    CommonParams commonParams = new CommonParams(commandSpec, eth1PrivateKeyOptions);\n+    final Credentials eth1Credentials = commonParams.getEth1Credentials();\n+    assertThat(eth1Credentials.getEcKeyPair()).isEqualTo(EXPECTED_EC_KEYPAIR);\n+  }\n+\n+  @Test\n+  void eth1EncryptedKeystoreReturnsCredential(@TempDir final Path tempDir)\n+      throws IOException, CipherException {\n+    // create v3 wallet\n+    final String keystoreFileName =\n+        WalletUtils.generateWalletFile(PASSWORD, EXPECTED_EC_KEYPAIR, tempDir.toFile(), true);\n+    final File keystoreFile = tempDir.resolve(keystoreFileName).toFile();\n+    // create password file\n+    final File passwordFile =\n+        Files.writeString(tempDir.resolve(\"password.txt\"), \"test123\").toFile();\n+\n+    Eth1PrivateKeyOptions.Eth1EncryptedPrivateKeystoreOptions keystoreOptions =\n+        new Eth1PrivateKeyOptions.Eth1EncryptedPrivateKeystoreOptions();\n+    keystoreOptions.eth1PrivateKeystoreFile = keystoreFile;\n+    keystoreOptions.eth1PrivateKeystorePasswordFile = passwordFile;\n+\n+    Eth1PrivateKeyOptions eth1PrivateKeyOptions = new Eth1PrivateKeyOptions();\n+    eth1PrivateKeyOptions.keystoreOptions = keystoreOptions;\n+\n+    CommonParams commonParams = new CommonParams(commandSpec, eth1PrivateKeyOptions);\n+    final Credentials eth1Credentials = commonParams.getEth1Credentials();\n+    assertThat(eth1Credentials.getEcKeyPair()).isEqualTo(EXPECTED_EC_KEYPAIR);\n+  }\n+\n+  @Test\n+  void nonExistentEth1EncryptedKeystoreThrowsError(@TempDir final Path tempDir)\n+      throws IOException, CipherException {\n+    Eth1PrivateKeyOptions.Eth1EncryptedPrivateKeystoreOptions keystoreOptions =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0011000c9838d196f243082214cf852cefdb2e7a"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NTgyNQ==", "bodyText": "fixed", "url": "https://github.com/ConsenSys/teku/pull/1391#discussion_r394045825", "createdAt": "2020-03-18T00:33:06Z", "author": {"login": "usmansaleem"}, "path": "artemis/src/test/java/tech/pegasys/artemis/cli/deposit/CommonParamsTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.web3j.crypto.CipherException;\n+import org.web3j.crypto.Credentials;\n+import org.web3j.crypto.ECKeyPair;\n+import org.web3j.crypto.WalletUtils;\n+import org.web3j.utils.Numeric;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Model.CommandSpec;\n+\n+class CommonParamsTest {\n+  private static final String ETH1_PRIVATE_KEY =\n+      \"8f2a55949038a9610f50fb23b5883af3b4ecb3c3bb792cbcefbd1542c692be63\";\n+  private static final ECKeyPair EXPECTED_EC_KEYPAIR =\n+      ECKeyPair.create(Numeric.toBigInt(ETH1_PRIVATE_KEY));\n+  private static final String PASSWORD = \"test123\";\n+  private CommandSpec commandSpec = mock(CommandSpec.class);\n+\n+  @Test\n+  void eth1PrivateKeyReturnsCredential() {\n+    Eth1PrivateKeyOptions eth1PrivateKeyOptions = new Eth1PrivateKeyOptions();\n+    eth1PrivateKeyOptions.eth1PrivateKey = ETH1_PRIVATE_KEY;\n+    CommonParams commonParams = new CommonParams(commandSpec, eth1PrivateKeyOptions);\n+    final Credentials eth1Credentials = commonParams.getEth1Credentials();\n+    assertThat(eth1Credentials.getEcKeyPair()).isEqualTo(EXPECTED_EC_KEYPAIR);\n+  }\n+\n+  @Test\n+  void eth1EncryptedKeystoreReturnsCredential(@TempDir final Path tempDir)\n+      throws IOException, CipherException {\n+    // create v3 wallet\n+    final String keystoreFileName =\n+        WalletUtils.generateWalletFile(PASSWORD, EXPECTED_EC_KEYPAIR, tempDir.toFile(), true);\n+    final File keystoreFile = tempDir.resolve(keystoreFileName).toFile();\n+    // create password file\n+    final File passwordFile =\n+        Files.writeString(tempDir.resolve(\"password.txt\"), \"test123\").toFile();\n+\n+    Eth1PrivateKeyOptions.Eth1EncryptedPrivateKeystoreOptions keystoreOptions =\n+        new Eth1PrivateKeyOptions.Eth1EncryptedPrivateKeystoreOptions();\n+    keystoreOptions.eth1PrivateKeystoreFile = keystoreFile;\n+    keystoreOptions.eth1PrivateKeystorePasswordFile = passwordFile;\n+\n+    Eth1PrivateKeyOptions eth1PrivateKeyOptions = new Eth1PrivateKeyOptions();\n+    eth1PrivateKeyOptions.keystoreOptions = keystoreOptions;\n+\n+    CommonParams commonParams = new CommonParams(commandSpec, eth1PrivateKeyOptions);\n+    final Credentials eth1Credentials = commonParams.getEth1Credentials();\n+    assertThat(eth1Credentials.getEcKeyPair()).isEqualTo(EXPECTED_EC_KEYPAIR);\n+  }\n+\n+  @Test\n+  void nonExistentEth1EncryptedKeystoreThrowsError(@TempDir final Path tempDir)\n+      throws IOException, CipherException {\n+    Eth1PrivateKeyOptions.Eth1EncryptedPrivateKeystoreOptions keystoreOptions =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMDg0Nw=="}, "originalCommit": {"oid": "0011000c9838d196f243082214cf852cefdb2e7a"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjM5OTUxOnYy", "diffSide": "RIGHT", "path": "artemis/src/test/java/tech/pegasys/artemis/cli/deposit/CommonParamsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzo0MjoxMlrOF3x2DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzo1OTowM1rOF3yIVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMjY1Mw==", "bodyText": "From this error, we testing that the incorrect version of the wallet store was provided? Can the test be renamed to make this clearer?", "url": "https://github.com/ConsenSys/teku/pull/1391#discussion_r394032653", "createdAt": "2020-03-17T23:42:12Z", "author": {"login": "jframe"}, "path": "artemis/src/test/java/tech/pegasys/artemis/cli/deposit/CommonParamsTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.web3j.crypto.CipherException;\n+import org.web3j.crypto.Credentials;\n+import org.web3j.crypto.ECKeyPair;\n+import org.web3j.crypto.WalletUtils;\n+import org.web3j.utils.Numeric;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Model.CommandSpec;\n+\n+class CommonParamsTest {\n+  private static final String ETH1_PRIVATE_KEY =\n+      \"8f2a55949038a9610f50fb23b5883af3b4ecb3c3bb792cbcefbd1542c692be63\";\n+  private static final ECKeyPair EXPECTED_EC_KEYPAIR =\n+      ECKeyPair.create(Numeric.toBigInt(ETH1_PRIVATE_KEY));\n+  private static final String PASSWORD = \"test123\";\n+  private CommandSpec commandSpec = mock(CommandSpec.class);\n+\n+  @Test\n+  void eth1PrivateKeyReturnsCredential() {\n+    Eth1PrivateKeyOptions eth1PrivateKeyOptions = new Eth1PrivateKeyOptions();\n+    eth1PrivateKeyOptions.eth1PrivateKey = ETH1_PRIVATE_KEY;\n+    CommonParams commonParams = new CommonParams(commandSpec, eth1PrivateKeyOptions);\n+    final Credentials eth1Credentials = commonParams.getEth1Credentials();\n+    assertThat(eth1Credentials.getEcKeyPair()).isEqualTo(EXPECTED_EC_KEYPAIR);\n+  }\n+\n+  @Test\n+  void eth1EncryptedKeystoreReturnsCredential(@TempDir final Path tempDir)\n+      throws IOException, CipherException {\n+    // create v3 wallet\n+    final String keystoreFileName =\n+        WalletUtils.generateWalletFile(PASSWORD, EXPECTED_EC_KEYPAIR, tempDir.toFile(), true);\n+    final File keystoreFile = tempDir.resolve(keystoreFileName).toFile();\n+    // create password file\n+    final File passwordFile =\n+        Files.writeString(tempDir.resolve(\"password.txt\"), \"test123\").toFile();\n+\n+    Eth1PrivateKeyOptions.Eth1EncryptedPrivateKeystoreOptions keystoreOptions =\n+        new Eth1PrivateKeyOptions.Eth1EncryptedPrivateKeystoreOptions();\n+    keystoreOptions.eth1PrivateKeystoreFile = keystoreFile;\n+    keystoreOptions.eth1PrivateKeystorePasswordFile = passwordFile;\n+\n+    Eth1PrivateKeyOptions eth1PrivateKeyOptions = new Eth1PrivateKeyOptions();\n+    eth1PrivateKeyOptions.keystoreOptions = keystoreOptions;\n+\n+    CommonParams commonParams = new CommonParams(commandSpec, eth1PrivateKeyOptions);\n+    final Credentials eth1Credentials = commonParams.getEth1Credentials();\n+    assertThat(eth1Credentials.getEcKeyPair()).isEqualTo(EXPECTED_EC_KEYPAIR);\n+  }\n+\n+  @Test\n+  void nonExistentEth1EncryptedKeystoreThrowsError(@TempDir final Path tempDir)\n+      throws IOException, CipherException {\n+    Eth1PrivateKeyOptions.Eth1EncryptedPrivateKeystoreOptions keystoreOptions =\n+        new Eth1PrivateKeyOptions.Eth1EncryptedPrivateKeystoreOptions();\n+    keystoreOptions.eth1PrivateKeystoreFile = tempDir.resolve(\"nonExistent\").toFile();\n+    keystoreOptions.eth1PrivateKeystorePasswordFile = tempDir.resolve(\"nonExistent\").toFile();\n+\n+    Eth1PrivateKeyOptions eth1PrivateKeyOptions = new Eth1PrivateKeyOptions();\n+    eth1PrivateKeyOptions.keystoreOptions = keystoreOptions;\n+\n+    CommonParams commonParams = new CommonParams(commandSpec, eth1PrivateKeyOptions);\n+\n+    when(commandSpec.commandLine()).thenReturn(mock(CommandLine.class));\n+    assertThatExceptionOfType(CommandLine.ParameterException.class)\n+        .isThrownBy(() -> commonParams.getEth1Credentials())\n+        .withMessage(\"Error: File not found: \" + keystoreOptions.eth1PrivateKeystoreFile);\n+  }\n+\n+  @Test\n+  void invalidEth1EncryptedKeystoreThrowsError(@TempDir final Path tempDir) throws IOException {\n+    Eth1PrivateKeyOptions.Eth1EncryptedPrivateKeystoreOptions keystoreOptions =\n+        new Eth1PrivateKeyOptions.Eth1EncryptedPrivateKeystoreOptions();\n+    keystoreOptions.eth1PrivateKeystoreFile =\n+        Files.writeString(tempDir.resolve(\"v3.json\"), \"{test:123}\").toFile();\n+    keystoreOptions.eth1PrivateKeystorePasswordFile =\n+        Files.writeString(tempDir.resolve(\"password.txt\"), \"test123\").toFile();\n+\n+    Eth1PrivateKeyOptions eth1PrivateKeyOptions = new Eth1PrivateKeyOptions();\n+    eth1PrivateKeyOptions.keystoreOptions = keystoreOptions;\n+\n+    CommonParams commonParams = new CommonParams(commandSpec, eth1PrivateKeyOptions);\n+\n+    when(commandSpec.commandLine()).thenReturn(mock(CommandLine.class));\n+    assertThatExceptionOfType(CommandLine.ParameterException.class)\n+        .isThrownBy(() -> commonParams.getEth1Credentials())\n+        .withMessage(\n+            \"Error: Unable to decrypt v3 keystore [%s] : Wallet version is not supported\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0011000c9838d196f243082214cf852cefdb2e7a"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzNzMzMg==", "bodyText": "The intent was to check a valid json which is not compliant with keystore format. I'll rename the method accordingly.", "url": "https://github.com/ConsenSys/teku/pull/1391#discussion_r394037332", "createdAt": "2020-03-17T23:59:03Z", "author": {"login": "usmansaleem"}, "path": "artemis/src/test/java/tech/pegasys/artemis/cli/deposit/CommonParamsTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.web3j.crypto.CipherException;\n+import org.web3j.crypto.Credentials;\n+import org.web3j.crypto.ECKeyPair;\n+import org.web3j.crypto.WalletUtils;\n+import org.web3j.utils.Numeric;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Model.CommandSpec;\n+\n+class CommonParamsTest {\n+  private static final String ETH1_PRIVATE_KEY =\n+      \"8f2a55949038a9610f50fb23b5883af3b4ecb3c3bb792cbcefbd1542c692be63\";\n+  private static final ECKeyPair EXPECTED_EC_KEYPAIR =\n+      ECKeyPair.create(Numeric.toBigInt(ETH1_PRIVATE_KEY));\n+  private static final String PASSWORD = \"test123\";\n+  private CommandSpec commandSpec = mock(CommandSpec.class);\n+\n+  @Test\n+  void eth1PrivateKeyReturnsCredential() {\n+    Eth1PrivateKeyOptions eth1PrivateKeyOptions = new Eth1PrivateKeyOptions();\n+    eth1PrivateKeyOptions.eth1PrivateKey = ETH1_PRIVATE_KEY;\n+    CommonParams commonParams = new CommonParams(commandSpec, eth1PrivateKeyOptions);\n+    final Credentials eth1Credentials = commonParams.getEth1Credentials();\n+    assertThat(eth1Credentials.getEcKeyPair()).isEqualTo(EXPECTED_EC_KEYPAIR);\n+  }\n+\n+  @Test\n+  void eth1EncryptedKeystoreReturnsCredential(@TempDir final Path tempDir)\n+      throws IOException, CipherException {\n+    // create v3 wallet\n+    final String keystoreFileName =\n+        WalletUtils.generateWalletFile(PASSWORD, EXPECTED_EC_KEYPAIR, tempDir.toFile(), true);\n+    final File keystoreFile = tempDir.resolve(keystoreFileName).toFile();\n+    // create password file\n+    final File passwordFile =\n+        Files.writeString(tempDir.resolve(\"password.txt\"), \"test123\").toFile();\n+\n+    Eth1PrivateKeyOptions.Eth1EncryptedPrivateKeystoreOptions keystoreOptions =\n+        new Eth1PrivateKeyOptions.Eth1EncryptedPrivateKeystoreOptions();\n+    keystoreOptions.eth1PrivateKeystoreFile = keystoreFile;\n+    keystoreOptions.eth1PrivateKeystorePasswordFile = passwordFile;\n+\n+    Eth1PrivateKeyOptions eth1PrivateKeyOptions = new Eth1PrivateKeyOptions();\n+    eth1PrivateKeyOptions.keystoreOptions = keystoreOptions;\n+\n+    CommonParams commonParams = new CommonParams(commandSpec, eth1PrivateKeyOptions);\n+    final Credentials eth1Credentials = commonParams.getEth1Credentials();\n+    assertThat(eth1Credentials.getEcKeyPair()).isEqualTo(EXPECTED_EC_KEYPAIR);\n+  }\n+\n+  @Test\n+  void nonExistentEth1EncryptedKeystoreThrowsError(@TempDir final Path tempDir)\n+      throws IOException, CipherException {\n+    Eth1PrivateKeyOptions.Eth1EncryptedPrivateKeystoreOptions keystoreOptions =\n+        new Eth1PrivateKeyOptions.Eth1EncryptedPrivateKeystoreOptions();\n+    keystoreOptions.eth1PrivateKeystoreFile = tempDir.resolve(\"nonExistent\").toFile();\n+    keystoreOptions.eth1PrivateKeystorePasswordFile = tempDir.resolve(\"nonExistent\").toFile();\n+\n+    Eth1PrivateKeyOptions eth1PrivateKeyOptions = new Eth1PrivateKeyOptions();\n+    eth1PrivateKeyOptions.keystoreOptions = keystoreOptions;\n+\n+    CommonParams commonParams = new CommonParams(commandSpec, eth1PrivateKeyOptions);\n+\n+    when(commandSpec.commandLine()).thenReturn(mock(CommandLine.class));\n+    assertThatExceptionOfType(CommandLine.ParameterException.class)\n+        .isThrownBy(() -> commonParams.getEth1Credentials())\n+        .withMessage(\"Error: File not found: \" + keystoreOptions.eth1PrivateKeystoreFile);\n+  }\n+\n+  @Test\n+  void invalidEth1EncryptedKeystoreThrowsError(@TempDir final Path tempDir) throws IOException {\n+    Eth1PrivateKeyOptions.Eth1EncryptedPrivateKeystoreOptions keystoreOptions =\n+        new Eth1PrivateKeyOptions.Eth1EncryptedPrivateKeystoreOptions();\n+    keystoreOptions.eth1PrivateKeystoreFile =\n+        Files.writeString(tempDir.resolve(\"v3.json\"), \"{test:123}\").toFile();\n+    keystoreOptions.eth1PrivateKeystorePasswordFile =\n+        Files.writeString(tempDir.resolve(\"password.txt\"), \"test123\").toFile();\n+\n+    Eth1PrivateKeyOptions eth1PrivateKeyOptions = new Eth1PrivateKeyOptions();\n+    eth1PrivateKeyOptions.keystoreOptions = keystoreOptions;\n+\n+    CommonParams commonParams = new CommonParams(commandSpec, eth1PrivateKeyOptions);\n+\n+    when(commandSpec.commandLine()).thenReturn(mock(CommandLine.class));\n+    assertThatExceptionOfType(CommandLine.ParameterException.class)\n+        .isThrownBy(() -> commonParams.getEth1Credentials())\n+        .withMessage(\n+            \"Error: Unable to decrypt v3 keystore [%s] : Wallet version is not supported\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAzMjY1Mw=="}, "originalCommit": {"oid": "0011000c9838d196f243082214cf852cefdb2e7a"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjU3NDIwOnYy", "diffSide": "RIGHT", "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/Eth1PrivateKeyOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTozNToxM1rOF3ziCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTozNToxM1rOF3ziCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MDI5OA==", "bodyText": "nit: since we are getting rid of private as part of describing the eth1 keystore might as well drop it here as well to be consistent. so Eth1EncryptedKeystoreOptions?", "url": "https://github.com/ConsenSys/teku/pull/1391#discussion_r394060298", "createdAt": "2020-03-18T01:35:13Z", "author": {"login": "jframe"}, "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/Eth1PrivateKeyOptions.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import java.io.File;\n+import picocli.CommandLine.ArgGroup;\n+import picocli.CommandLine.Option;\n+\n+class Eth1PrivateKeyOptions {\n+  @Option(\n+      names = {\"--eth1-private-key\"},\n+      required = true,\n+      paramLabel = \"<KEY>\",\n+      description = \"Ethereum 1 private key to use to send transactions\")\n+  String eth1PrivateKey;\n+\n+  @ArgGroup(exclusive = false, multiplicity = \"1\")\n+  Eth1EncryptedPrivateKeystoreOptions keystoreOptions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed791cd9ac495b2cea1c59842857c6507518f8a8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjU3NTEyOnYy", "diffSide": "RIGHT", "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/Eth1PrivateKeyOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTozNTo0MVrOF3zijA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTozNTo0MVrOF3zijA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MDQyOA==", "bodyText": "Similar to above perhaps Eth1EncryptedKeystoreOptions", "url": "https://github.com/ConsenSys/teku/pull/1391#discussion_r394060428", "createdAt": "2020-03-18T01:35:41Z", "author": {"login": "jframe"}, "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/Eth1PrivateKeyOptions.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import java.io.File;\n+import picocli.CommandLine.ArgGroup;\n+import picocli.CommandLine.Option;\n+\n+class Eth1PrivateKeyOptions {\n+  @Option(\n+      names = {\"--eth1-private-key\"},\n+      required = true,\n+      paramLabel = \"<KEY>\",\n+      description = \"Ethereum 1 private key to use to send transactions\")\n+  String eth1PrivateKey;\n+\n+  @ArgGroup(exclusive = false, multiplicity = \"1\")\n+  Eth1EncryptedPrivateKeystoreOptions keystoreOptions;\n+\n+  static class Eth1EncryptedPrivateKeystoreOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed791cd9ac495b2cea1c59842857c6507518f8a8"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjU3NTk5OnYy", "diffSide": "RIGHT", "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/Eth1PrivateKeyOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTozNjoyM1rOF3zjIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTozNjoyM1rOF3zjIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MDU3OQ==", "bodyText": "update the field to match the new param name, so eth1KeystoreFile", "url": "https://github.com/ConsenSys/teku/pull/1391#discussion_r394060579", "createdAt": "2020-03-18T01:36:23Z", "author": {"login": "jframe"}, "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/Eth1PrivateKeyOptions.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import java.io.File;\n+import picocli.CommandLine.ArgGroup;\n+import picocli.CommandLine.Option;\n+\n+class Eth1PrivateKeyOptions {\n+  @Option(\n+      names = {\"--eth1-private-key\"},\n+      required = true,\n+      paramLabel = \"<KEY>\",\n+      description = \"Ethereum 1 private key to use to send transactions\")\n+  String eth1PrivateKey;\n+\n+  @ArgGroup(exclusive = false, multiplicity = \"1\")\n+  Eth1EncryptedPrivateKeystoreOptions keystoreOptions;\n+\n+  static class Eth1EncryptedPrivateKeystoreOptions {\n+    @Option(\n+        names = {\"--eth1-keystore-file\"},\n+        required = true,\n+        paramLabel = \"<FILE>\",\n+        description =\n+            \"Path to encrypted (V3) keystore containing Ethereum 1 private key to use to send transactions\")\n+    File eth1PrivateKeystoreFile;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed791cd9ac495b2cea1c59842857c6507518f8a8"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjU3NjYxOnYy", "diffSide": "RIGHT", "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/Eth1PrivateKeyOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTozNjo0NlrOF3zjfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMTozNjo0NlrOF3zjfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2MDY2OA==", "bodyText": "update the field to match the new param name, so eth1KeystorePasswordFile", "url": "https://github.com/ConsenSys/teku/pull/1391#discussion_r394060668", "createdAt": "2020-03-18T01:36:46Z", "author": {"login": "jframe"}, "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/Eth1PrivateKeyOptions.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import java.io.File;\n+import picocli.CommandLine.ArgGroup;\n+import picocli.CommandLine.Option;\n+\n+class Eth1PrivateKeyOptions {\n+  @Option(\n+      names = {\"--eth1-private-key\"},\n+      required = true,\n+      paramLabel = \"<KEY>\",\n+      description = \"Ethereum 1 private key to use to send transactions\")\n+  String eth1PrivateKey;\n+\n+  @ArgGroup(exclusive = false, multiplicity = \"1\")\n+  Eth1EncryptedPrivateKeystoreOptions keystoreOptions;\n+\n+  static class Eth1EncryptedPrivateKeystoreOptions {\n+    @Option(\n+        names = {\"--eth1-keystore-file\"},\n+        required = true,\n+        paramLabel = \"<FILE>\",\n+        description =\n+            \"Path to encrypted (V3) keystore containing Ethereum 1 private key to use to send transactions\")\n+    File eth1PrivateKeystoreFile;\n+\n+    @Option(\n+        names = {\"--eth1-keystore-password-file\"},\n+        required = true,\n+        paramLabel = \"<FILE>\",\n+        description = \"Path to file containing password to decrypt Ethereum 1 keystore\")\n+    File eth1PrivateKeystorePasswordFile;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed791cd9ac495b2cea1c59842857c6507518f8a8"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2560, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}