{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NjE4OTM2", "number": 3058, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDo0NjoyM1rOEw_oeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDo0NjoyM1rOEw_oeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODA5NjU3OnYy", "diffSide": "RIGHT", "path": "validator/remote/src/main/java/tech/pegasys/teku/validator/remote/RemoteValidatorApiHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDo0NjoyM1rOHm4qFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMDo0NjoyM1rOHm4qFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzNjIxNQ==", "bodyText": "nit Beacon node has warned that we're making too many requests. Retrying after delay.", "url": "https://github.com/ConsenSys/teku/pull/3058#discussion_r510536215", "createdAt": "2020-10-23T00:46:23Z", "author": {"login": "rolfyone"}, "path": "validator/remote/src/main/java/tech/pegasys/teku/validator/remote/RemoteValidatorApiHandler.java", "diffHunk": "@@ -299,8 +304,36 @@ public void subscribeToPersistentSubnets(final Set<SubnetSubscription> subnetSub\n                         s.getSubnetId(), s.getUnsubscriptionSlot()))\n             .collect(Collectors.toSet());\n \n-    asyncRunner\n-        .runAsync(() -> apiClient.subscribeToPersistentSubnets(schemaSubscriptions))\n+    sendRequest(() -> apiClient.subscribeToPersistentSubnets(schemaSubscriptions))\n         .finish(error -> LOG.error(\"Failed to subscribe to persistent subnets\", error));\n   }\n+\n+  private SafeFuture<Void> sendRequest(final ExceptionThrowingRunnable requestExecutor) {\n+    return sendRequest(\n+        () -> {\n+          requestExecutor.run();\n+          return null;\n+        });\n+  }\n+\n+  private <T> SafeFuture<T> sendRequest(final ExceptionThrowingSupplier<T> requestExecutor) {\n+    return asyncRunner.runAsync(() -> sendRequest(requestExecutor, 0));\n+  }\n+\n+  private <T> SafeFuture<T> sendRequest(\n+      final ExceptionThrowingSupplier<T> requestExecutor, final int attempt) {\n+    return SafeFuture.of(requestExecutor)\n+        .exceptionallyCompose(\n+            error -> {\n+              if (Throwables.getRootCause(error) instanceof RateLimitedException\n+                  && attempt < MAX_RATE_LIMITING_RETRIES) {\n+                LOG.warn(\n+                    \"Received Too Many Requests response from beacon node. Retrying after a delay.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "399321d0d74cd184371dc78fa57bc66f873e7e04"}, "originalPosition": 202}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3079, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}