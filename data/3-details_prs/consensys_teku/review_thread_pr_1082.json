{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNTAxMDI0", "number": 1082, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNjozODo0NVrODWmgHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNjozODo0NVrODWmgHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MDI2MDc3OnYy", "diffSide": "RIGHT", "path": "sync/src/main/java/tech/pegasys/artemis/sync/PendingBlocks.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNjozODo0NVrOFbc2UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxODoxOToxMFrOFbfljw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyODUyOQ==", "bodyText": "Isn't this check redundant? How can a block be in the historical limit but not before a finalized slot?", "url": "https://github.com/ConsenSys/teku/pull/1082#discussion_r364328529", "createdAt": "2020-01-08T16:38:45Z", "author": {"login": "cemozerr"}, "path": "sync/src/main/java/tech/pegasys/artemis/sync/PendingBlocks.java", "diffHunk": "@@ -131,22 +134,40 @@ void onSlot(final SlotEvent slotEvent) {\n     currentSlot = slotEvent.getSlot();\n     if (currentSlot.mod(historicalBlockTolerance).equals(UnsignedLong.ZERO)) {\n       // Purge old blocks\n-      pruneBlocks(isTooOld());\n+      prune();\n     }\n   }\n \n+  @Subscribe\n+  void onFinalizedCheckpoint(final FinalizedCheckpointEvent finalizedCheckpointEvent) {\n+    this.latestFinalizedSlot = finalizedCheckpointEvent.getFinalizedSlot();\n+  }\n+\n+  @VisibleForTesting\n+  void prune() {\n+    pruneBlocks(this::isTooOld);\n+  }\n+\n   private boolean shouldIgnoreBlock(final BeaconBlock block) {\n-    return isTooOld().test(block) || isFromFuture().test(block);\n+    return isTooOld(block) || isFromFarFuture(block);\n   }\n \n-  private Predicate<BeaconBlock> isTooOld() {\n-    final UnsignedLong slot = calculateBlockAgeLimit();\n-    return (block) -> block.getSlot().compareTo(slot) <= 0;\n+  private boolean isTooOld(final BeaconBlock block) {\n+    return isFromAFinalizedSlot(block) || isOutsideOfHistoricalLimit(block);\n   }\n \n-  private Predicate<BeaconBlock> isFromFuture() {\n+  private boolean isFromFarFuture(final BeaconBlock block) {\n     final UnsignedLong slot = (calculateFutureBlockLimit());\n-    return (block) -> block.getSlot().compareTo(slot) > 0;\n+    return block.getSlot().compareTo(slot) > 0;\n+  }\n+\n+  private boolean isOutsideOfHistoricalLimit(final BeaconBlock block) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94eeedfd8e5834685d78b6592f5b890e1d26e029"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM3MzM5MQ==", "bodyText": "This check should only matter when we're out of sync.  It will prevent us from accumulating a huge set of pending blocks while we're doing our initial sync.", "url": "https://github.com/ConsenSys/teku/pull/1082#discussion_r364373391", "createdAt": "2020-01-08T18:19:10Z", "author": {"login": "mbaxter"}, "path": "sync/src/main/java/tech/pegasys/artemis/sync/PendingBlocks.java", "diffHunk": "@@ -131,22 +134,40 @@ void onSlot(final SlotEvent slotEvent) {\n     currentSlot = slotEvent.getSlot();\n     if (currentSlot.mod(historicalBlockTolerance).equals(UnsignedLong.ZERO)) {\n       // Purge old blocks\n-      pruneBlocks(isTooOld());\n+      prune();\n     }\n   }\n \n+  @Subscribe\n+  void onFinalizedCheckpoint(final FinalizedCheckpointEvent finalizedCheckpointEvent) {\n+    this.latestFinalizedSlot = finalizedCheckpointEvent.getFinalizedSlot();\n+  }\n+\n+  @VisibleForTesting\n+  void prune() {\n+    pruneBlocks(this::isTooOld);\n+  }\n+\n   private boolean shouldIgnoreBlock(final BeaconBlock block) {\n-    return isTooOld().test(block) || isFromFuture().test(block);\n+    return isTooOld(block) || isFromFarFuture(block);\n   }\n \n-  private Predicate<BeaconBlock> isTooOld() {\n-    final UnsignedLong slot = calculateBlockAgeLimit();\n-    return (block) -> block.getSlot().compareTo(slot) <= 0;\n+  private boolean isTooOld(final BeaconBlock block) {\n+    return isFromAFinalizedSlot(block) || isOutsideOfHistoricalLimit(block);\n   }\n \n-  private Predicate<BeaconBlock> isFromFuture() {\n+  private boolean isFromFarFuture(final BeaconBlock block) {\n     final UnsignedLong slot = (calculateFutureBlockLimit());\n-    return (block) -> block.getSlot().compareTo(slot) > 0;\n+    return block.getSlot().compareTo(slot) > 0;\n+  }\n+\n+  private boolean isOutsideOfHistoricalLimit(final BeaconBlock block) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyODUyOQ=="}, "originalCommit": {"oid": "94eeedfd8e5834685d78b6592f5b890e1d26e029"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2745, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}