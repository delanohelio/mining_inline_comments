{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNzUyODY1", "number": 1459, "title": "Add create block API to ValidatorApiChannel", "bodyText": "PR Description\nAdd createUnsignedBlock API to ValidatorApiChannel and use it both from ValidatorCoordinator and the REST API.\nAlso moves methods from BlockProposerUtil that were only used by tests into a BlockProposalTestUtil class in testFixtures.", "createdAt": "2020-03-24T03:19:07Z", "url": "https://github.com/ConsenSys/teku/pull/1459", "merged": true, "mergeCommit": {"oid": "71434dcf39244584e9f502b83ca8206ec437251d"}, "closed": true, "closedAt": "2020-03-24T22:04:00Z", "author": {"login": "ajsutton"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQmhxWgH2gAyMzkyNzUyODY1OjA5ZjVlOWE2ZWRjNGQ5NDNhMmM0Zjg1NGZlNmIxNDFhNzY2NzcyMGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQ6BZ_AH2gAyMzkyNzUyODY1OmExYTJkMDNhYWRlNzEzN2MxZDg3Y2QwODMwNTk3NjQyNDMyMjQwYTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "09f5e9a6edc4d943a2c4f854fe6b141a7667720b", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/09f5e9a6edc4d943a2c4f854fe6b141a7667720b", "committedDate": "2020-03-23T23:02:09Z", "message": "Only create on instance of ValidatorCoordinator.\nDelete some dead code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6908ccb3e6ff3ab7361b89ad52526cebb4f9d291", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/6908ccb3e6ff3ab7361b89ad52526cebb4f9d291", "committedDate": "2020-03-23T23:31:36Z", "message": "Merge branch 'only-create-one-validator-coordinator' into create-block-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9df33388ea84b24376b3df1dc325d5d91b7909f7", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/9df33388ea84b24376b3df1dc325d5d91b7909f7", "committedDate": "2020-03-23T23:53:49Z", "message": "Modify ValidatorCoordinator to use createNewUnsignedBlock instead of duplicating the logic."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f6a95b85fe997c46af4ec7a592379755bf16fa8", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/4f6a95b85fe997c46af4ec7a592379755bf16fa8", "committedDate": "2020-03-23T23:56:49Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into use-create-unsigned-block"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20a9f239daf4473b25c7fce85afba66b6e105660", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/20a9f239daf4473b25c7fce85afba66b6e105660", "committedDate": "2020-03-23T23:58:36Z", "message": "Spotless."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55f9fd160feadd5f18a42018f6c98d00c9f75a6d", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/55f9fd160feadd5f18a42018f6c98d00c9f75a6d", "committedDate": "2020-03-24T00:02:28Z", "message": "Revert \"Only create on instance of ValidatorCoordinator.\"\n\nThis reverts commit 09f5e9a6edc4d943a2c4f854fe6b141a7667720b."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "765549594f8dbcc23ba603d014e3cce89eed2615", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/765549594f8dbcc23ba603d014e3cce89eed2615", "committedDate": "2020-03-24T01:59:28Z", "message": "Implement createUnsignedBlock in ValidatorApiHander.\nSwitch ValidatorCoordinator over to using it."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5095ca0b320cb763cb909f568378721bd3ae4ff6", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/5095ca0b320cb763cb909f568378721bd3ae4ff6", "committedDate": "2020-03-24T02:01:04Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into create-block-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "300e9f196f9f8c82ec327b470a3f9c74d1dc0403", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/300e9f196f9f8c82ec327b470a3f9c74d1dc0403", "committedDate": "2020-03-24T03:03:08Z", "message": "Switch REST API over to using ValidatorApiChannel to create unsigned blocks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ff2ff1e0ad2e1c7d3f6af10af2864e69c9fcdb8", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/5ff2ff1e0ad2e1c7d3f6af10af2864e69c9fcdb8", "committedDate": "2020-03-24T03:07:09Z", "message": "Add SafeFuture tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30eb11af5bad5e7396632ad1f65644e005c76993", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/30eb11af5bad5e7396632ad1f65644e005c76993", "committedDate": "2020-03-24T03:26:24Z", "message": "Remove unused variable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e1ae10e41357ccea87fb0ea74f9ff1724289f27", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/2e1ae10e41357ccea87fb0ea74f9ff1724289f27", "committedDate": "2020-03-24T04:26:30Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into create-block-api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNjM4OTQ2", "url": "https://github.com/ConsenSys/teku/pull/1459#pullrequestreview-380638946", "createdAt": "2020-03-24T19:40:12Z", "commit": {"oid": "2e1ae10e41357ccea87fb0ea74f9ff1724289f27"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTo0MDoxMlrOF7AOgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxOTo1MTo1M1rOF7Aneg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxNDAxNw==", "bodyText": "I'm not sure if we should pull this exception down to the storage level.  If we do pull this down, it feels like we should be throwing this exception from the various methods that try to access the store or the chainHead.  But that seems like a mess.  Probably simpler to just return an SafeFuture<Optional<BeaconBlock>> for now?  Or create a custom exception in the validator package?", "url": "https://github.com/ConsenSys/teku/pull/1459#discussion_r397414017", "createdAt": "2020-03-24T19:40:12Z", "author": {"login": "mbaxter"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorApiHandler.java", "diffHunk": "@@ -66,6 +75,20 @@ public ValidatorApiHandler(final CombinedChainDataClient combinedChainDataClient\n                         }));\n   }\n \n+  @Override\n+  public SafeFuture<BeaconBlock> createUnsignedBlock(\n+      final UnsignedLong slot, final BLSSignature randaoReveal) {\n+    Store store = combinedChainDataClient.getStore();\n+    final Optional<Bytes32> headRoot = combinedChainDataClient.getBestBlockRoot();\n+    if (headRoot.isEmpty() || store == null) {\n+      return SafeFuture.failedFuture(new ChainDataUnavailableException());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1ae10e41357ccea87fb0ea74f9ff1724289f27"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxNjE3Mg==", "bodyText": "This change is because the StateTransitionException would be wrapped in a CompletionException?", "url": "https://github.com/ConsenSys/teku/pull/1459#discussion_r397416172", "createdAt": "2020-03-24T19:44:10Z", "author": {"login": "mbaxter"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java", "diffHunk": "@@ -284,31 +288,23 @@ private void createBlockIfNecessary(\n         return;\n       }\n \n-      SignedBeaconBlock newBlock;\n-      // Collect attestations to include\n-      SSZList<Attestation> attestations = blockAttestationsPool.getAttestationsForSlot(newSlot);\n-      // Collect slashing to include\n-      final SSZList<ProposerSlashing> slashingsInBlock = getSlashingsForBlock(newState);\n-      // Collect deposits\n-      final SSZList<Deposit> deposits = depositProvider.getDeposits(newState);\n-\n       final MessageSignerService signer = getSigner(proposer);\n-      Eth1Data eth1Data = eth1DataCache.get_eth1_vote(newState);\n-      final Bytes32 parentRoot = previousBlock.hash_tree_root();\n-      newBlock =\n-          blockCreator.createNewBlock(\n-              signer,\n-              newSlot,\n-              newState,\n-              parentRoot,\n-              eth1Data,\n-              attestations,\n-              slashingsInBlock,\n-              deposits);\n+      final BLSSignature randaoReveal =\n+          blockCreator.get_epoch_signature(newState, compute_epoch_at_slot(newSlot), signer);\n+      final BeaconBlock unsignedBlock =\n+          validatorApiChannel\n+              .createUnsignedBlock(newSlot, randaoReveal)\n+              .orTimeout(10, TimeUnit.SECONDS)\n+              .join();\n+\n+      final BLSSignature blockSignature =\n+          blockCreator.get_block_signature(newState, unsignedBlock, signer);\n+\n+      final SignedBeaconBlock newBlock = new SignedBeaconBlock(unsignedBlock, blockSignature);\n \n       this.eventBus.post(new ProposedBlockEvent(newBlock));\n       LOG.debug(\"Local validator produced a new block\");\n-    } catch (SlotProcessingException | EpochProcessingException | StateTransitionException e) {\n+    } catch (SlotProcessingException | EpochProcessingException | CompletionException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1ae10e41357ccea87fb0ea74f9ff1724289f27"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQxNzc2OQ==", "bodyText": "May be worth adding a test to check the behavior when storage isn't initialized.", "url": "https://github.com/ConsenSys/teku/pull/1459#discussion_r397417769", "createdAt": "2020-03-24T19:47:04Z", "author": {"login": "mbaxter"}, "path": "validator/coordinator/src/test/java/tech/pegasys/artemis/validator/coordinator/BlockFactoryTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.coordinator;\n+\n+import static com.google.common.primitives.UnsignedLong.ONE;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.datastructures.blocks.BeaconBlockBodyLists.createAttestations;\n+import static tech.pegasys.artemis.datastructures.blocks.BeaconBlockBodyLists.createDeposits;\n+\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.primitives.UnsignedLong;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.artemis.datastructures.blocks.Eth1Data;\n+import tech.pegasys.artemis.datastructures.operations.Attestation;\n+import tech.pegasys.artemis.datastructures.operations.Deposit;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.statetransition.BeaconChainUtil;\n+import tech.pegasys.artemis.statetransition.BlockAttestationsPool;\n+import tech.pegasys.artemis.statetransition.BlockProposalUtil;\n+import tech.pegasys.artemis.statetransition.StateTransition;\n+import tech.pegasys.artemis.statetransition.StateTransitionException;\n+import tech.pegasys.artemis.statetransition.util.EpochProcessingException;\n+import tech.pegasys.artemis.statetransition.util.SlotProcessingException;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.util.SSZTypes.SSZMutableList;\n+import tech.pegasys.artemis.util.bls.BLSSignature;\n+\n+class BlockFactoryTest {\n+\n+  public static final Eth1Data ETH1_DATA = new Eth1Data();\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private final ChainStorageClient chainStorageClient =\n+      ChainStorageClient.memoryOnlyClient(new EventBus());\n+  private final BeaconChainUtil beaconChainUtil = BeaconChainUtil.create(1, chainStorageClient);\n+  private final BlockAttestationsPool blockAttestationsPool = mock(BlockAttestationsPool.class);\n+  private final DepositProvider depositProvider = mock(DepositProvider.class);\n+  private final Eth1DataCache eth1DataCache = mock(Eth1DataCache.class);\n+  private final StateTransition stateTransition = new StateTransition();\n+  private final SSZMutableList<Deposit> deposits = createDeposits();\n+  private final SSZMutableList<Attestation> attestations = createAttestations();\n+\n+  private final BlockFactory blockFactory =\n+      new BlockFactory(\n+          new BlockProposalUtil(stateTransition),\n+          stateTransition,\n+          blockAttestationsPool,\n+          depositProvider,\n+          eth1DataCache);\n+\n+  @BeforeEach\n+  void setUp() {\n+    when(depositProvider.getDeposits(any())).thenReturn(deposits);\n+    when(blockAttestationsPool.getAttestationsForSlot(any())).thenReturn(attestations);\n+    when(eth1DataCache.get_eth1_vote(any())).thenReturn(ETH1_DATA);\n+    beaconChainUtil.initializeStorage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1ae10e41357ccea87fb0ea74f9ff1724289f27"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyMDQxMA==", "bodyText": "Another option would be to not handle this here, and let the global error handler manage this.  In which case, you'd need to test this with an integration test.", "url": "https://github.com/ConsenSys/teku/pull/1459#discussion_r397420410", "createdAt": "2020-03-24T19:51:53Z", "author": {"login": "mbaxter"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/GetNewBlock.java", "diffHunk": "@@ -84,18 +84,26 @@ public void handle(@NotNull Context ctx) throws Exception {\n       final Map<String, List<String>> queryParamMap = ctx.queryParamMap();\n       BLSSignature randao = getParameterValueAsBLSSignature(queryParamMap, RANDAO_REVEAL);\n       UnsignedLong slot = getParameterValueAsUnsignedLong(queryParamMap, SLOT);\n-      Optional<BeaconBlock> optional = provider.getUnsignedBeaconBlockAtSlot(slot, randao);\n-      if (optional.isPresent()) {\n-        ctx.result(jsonProvider.objectToJSON(optional.get()));\n-      } else {\n-        ctx.status(SC_NO_CONTENT);\n-      }\n-\n+      ctx.result(\n+          provider\n+              .getUnsignedBeaconBlockAtSlot(slot, randao)\n+              .thenApplyChecked(jsonProvider::objectToJSON)\n+              .exceptionallyCompose(error -> handleError(ctx, error)));\n     } catch (final IllegalArgumentException e) {\n       ctx.status(SC_BAD_REQUEST);\n       ctx.result(jsonProvider.objectToJSON(new BadRequest(e.getMessage())));\n-    } catch (DataProviderException e) {\n-      ctx.status(SC_INTERNAL_SERVER_ERROR);\n     }\n   }\n+\n+  private SafeFuture<String> handleError(final Context ctx, final Throwable error) {\n+    final Throwable rootCause = Throwables.getRootCause(error);\n+    if (rootCause instanceof ChainDataUnavailableException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1ae10e41357ccea87fb0ea74f9ff1724289f27"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ee2d54b112a43b10a253cd9b7312e98ef0ee401", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/0ee2d54b112a43b10a253cd9b7312e98ef0ee401", "committedDate": "2020-03-24T20:59:25Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into create-block-api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNjkzMzc5", "url": "https://github.com/ConsenSys/teku/pull/1459#pullrequestreview-380693379", "createdAt": "2020-03-24T21:01:39Z", "commit": {"oid": "2e1ae10e41357ccea87fb0ea74f9ff1724289f27"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "331247b69f4f9f135b214f900bc06fa0f0bc5939", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/331247b69f4f9f135b214f900bc06fa0f0bc5939", "committedDate": "2020-03-24T21:17:32Z", "message": "Back to returning Optional<BeaconBlock>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afab52aaad686e9f1f5a4de4c35234a4d716be79", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/afab52aaad686e9f1f5a4de4c35234a4d716be79", "committedDate": "2020-03-24T21:33:49Z", "message": "Fix test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1a2d03aade7137c1d87cd0830597642432240a5", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/a1a2d03aade7137c1d87cd0830597642432240a5", "committedDate": "2020-03-24T21:44:54Z", "message": "Fix another test."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4365, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}