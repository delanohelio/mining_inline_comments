{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNjY0ODQy", "number": 1084, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQyMDowNjo1NlrODXZMuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNjoyNDo1NVrODXbZdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODU2Njk5OnYy", "diffSide": "RIGHT", "path": "artemis/src/main/java/tech/pegasys/artemis/GenesisCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQyMDowNjo1NlrOFcq47Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQyMDowNjo1NlrOFcq47Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTYwNzE0OQ==", "bodyText": "Probably best to use a try-with-resources here (try (FileOutputStream fileStream = new FileOutputStream(params.outputFile) {) to ensure the stream is automatically closed even if exceptions are thrown.  Probably doesn't really matter in this case as the JVM will exit once this method ends anyway but good to follow the usual pattern.", "url": "https://github.com/ConsenSys/teku/pull/1084#discussion_r365607149", "createdAt": "2020-01-12T20:06:56Z", "author": {"login": "ajsutton"}, "path": "artemis/src/main/java/tech/pegasys/artemis/GenesisCommand.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis;\n+\n+import static tech.pegasys.artemis.datastructures.util.SimpleOffsetSerializer.serialize;\n+import static tech.pegasys.artemis.util.alogger.ALogger.STDOUT;\n+\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.logging.log4j.Level;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Mixin;\n+import picocli.CommandLine.Option;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.util.MockStartValidatorKeyPairFactory;\n+import tech.pegasys.artemis.statetransition.util.StartupUtil;\n+import tech.pegasys.artemis.util.bls.BLSKeyPair;\n+import tech.pegasys.artemis.util.cli.VersionProvider;\n+\n+@Command(\n+    name = \"genesis\",\n+    description = \"Commands for generating genesis state\",\n+    abbreviateSynopsis = true,\n+    mixinStandardHelpOptions = true,\n+    versionProvider = VersionProvider.class,\n+    synopsisHeading = \"%n\",\n+    descriptionHeading = \"%nDescription:%n%n\",\n+    optionListHeading = \"%nOptions:%n\",\n+    footerHeading = \"%n\",\n+    footer = \"Artemis is licensed under the Apache License 2.0\")\n+public class GenesisCommand {\n+\n+  @Command(\n+      name = \"mock\",\n+      description = \"Generate a mock genesis state\",\n+      mixinStandardHelpOptions = true,\n+      abbreviateSynopsis = true,\n+      versionProvider = VersionProvider.class,\n+      synopsisHeading = \"%n\",\n+      descriptionHeading = \"%nDescription:%n%n\",\n+      optionListHeading = \"%nOptions:%n\",\n+      footerHeading = \"%n\",\n+      footer = \"Artemis is licensed under the Apache License 2.0\")\n+  public void generate(@Mixin MockGenesisParams params) throws IOException {\n+    FileOutputStream fileStream = new FileOutputStream(params.outputFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54c6cfe885bdee43bce657f58470e1d9033dffa9"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODkyNzI3OnYy", "diffSide": "RIGHT", "path": "artemis/src/main/java/tech/pegasys/artemis/GenesisCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNjoyNDo1NVrOFct_3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNjoyNDo1NVrOFct_3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY1ODA3OA==", "bodyText": "When running via docker (especially in acceptance tests) it would be really useful if this wrote the genesis state to stdout if no output file is specified. Otherwise the result gets written to a file inside the docker container and you have to jump through hoops to get it back out.", "url": "https://github.com/ConsenSys/teku/pull/1084#discussion_r365658078", "createdAt": "2020-01-13T06:24:55Z", "author": {"login": "ajsutton"}, "path": "artemis/src/main/java/tech/pegasys/artemis/GenesisCommand.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis;\n+\n+import static tech.pegasys.artemis.datastructures.util.SimpleOffsetSerializer.serialize;\n+import static tech.pegasys.artemis.util.alogger.ALogger.STDOUT;\n+\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.logging.log4j.Level;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Mixin;\n+import picocli.CommandLine.Option;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.util.MockStartValidatorKeyPairFactory;\n+import tech.pegasys.artemis.statetransition.util.StartupUtil;\n+import tech.pegasys.artemis.util.bls.BLSKeyPair;\n+import tech.pegasys.artemis.util.cli.VersionProvider;\n+\n+@Command(\n+    name = \"genesis\",\n+    description = \"Commands for generating genesis state\",\n+    abbreviateSynopsis = true,\n+    mixinStandardHelpOptions = true,\n+    versionProvider = VersionProvider.class,\n+    synopsisHeading = \"%n\",\n+    descriptionHeading = \"%nDescription:%n%n\",\n+    optionListHeading = \"%nOptions:%n\",\n+    footerHeading = \"%n\",\n+    footer = \"Artemis is licensed under the Apache License 2.0\")\n+public class GenesisCommand {\n+\n+  @Command(\n+      name = \"mock\",\n+      description = \"Generate a mock genesis state\",\n+      mixinStandardHelpOptions = true,\n+      abbreviateSynopsis = true,\n+      versionProvider = VersionProvider.class,\n+      synopsisHeading = \"%n\",\n+      descriptionHeading = \"%nDescription:%n%n\",\n+      optionListHeading = \"%nOptions:%n\",\n+      footerHeading = \"%n\",\n+      footer = \"Artemis is licensed under the Apache License 2.0\")\n+  public void generate(@Mixin MockGenesisParams params) throws IOException {\n+    FileOutputStream fileStream = new FileOutputStream(params.outputFile);\n+\n+    STDOUT.log(\n+        Level.INFO,\n+        String.format(\n+            \"Generating mock genesis state for %d validators at genesis time %d\",\n+            params.validatorCount, params.genesisTime));\n+\n+    final long genesisTime = params.genesisTime;\n+    final List<BLSKeyPair> validatorKeys =\n+        new MockStartValidatorKeyPairFactory().generateKeyPairs(0, params.validatorCount);\n+    final BeaconState genesisState =\n+        StartupUtil.createMockedStartInitialBeaconState(genesisTime, validatorKeys);\n+\n+    STDOUT.log(Level.INFO, String.format(\"Saving genesis state to file: %s\", params.outputFile));\n+    fileStream.write(serialize(genesisState).toArrayUnsafe());\n+    fileStream.close();\n+  }\n+\n+  public static class MockGenesisParams {\n+    @Option(\n+        names = {\"-o\", \"--outputFile\"},\n+        paramLabel = \"<FILENAME>\",\n+        description = \"Path/filename of the output file\")\n+    private String outputFile = \"./mock-genesis-state.bin\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54c6cfe885bdee43bce657f58470e1d9033dffa9"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2754, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}