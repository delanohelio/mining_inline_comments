{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNjY5MTI0", "number": 2934, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjo1MzoxM1rOEszhOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjoxMjoyM1rOEtHeQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDE2ODg4OnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/VersionedDatabaseFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjo1MzoxM1rOHgPsVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNjo1ODowNlrOHgX9mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MzU5MA==", "bodyText": "I think this might be a little simpler if we just use a boolean here - something like: shouldDefaultToSeparateDbs", "url": "https://github.com/ConsenSys/teku/pull/2934#discussion_r503573590", "createdAt": "2020-10-12T22:53:13Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/VersionedDatabaseFactory.java", "diffHunk": "@@ -72,10 +78,30 @@ public VersionedDatabaseFactory(\n       final String createDatabaseVersion,\n       final long stateStorageFrequency,\n       final Eth1Address eth1Address) {\n+    this(\n+        metricsSystem,\n+        dataPath,\n+        Optional.empty(),\n+        dataStorageMode,\n+        createDatabaseVersion,\n+        stateStorageFrequency,\n+        eth1Address);\n+  }\n+\n+  public VersionedDatabaseFactory(\n+      final MetricsSystem metricsSystem,\n+      final String dataPath,\n+      final Optional<String> maybeArchiveDataPath,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df96affcdd2444a3f0d2434595910a9925c79c12"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwOTA4MQ==", "bodyText": "See my comment below: the idea was to allow a completely different location for archive DB", "url": "https://github.com/ConsenSys/teku/pull/2934#discussion_r503709081", "createdAt": "2020-10-13T06:58:06Z", "author": {"login": "Nashatyrev"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/VersionedDatabaseFactory.java", "diffHunk": "@@ -72,10 +78,30 @@ public VersionedDatabaseFactory(\n       final String createDatabaseVersion,\n       final long stateStorageFrequency,\n       final Eth1Address eth1Address) {\n+    this(\n+        metricsSystem,\n+        dataPath,\n+        Optional.empty(),\n+        dataStorageMode,\n+        createDatabaseVersion,\n+        stateStorageFrequency,\n+        eth1Address);\n+  }\n+\n+  public VersionedDatabaseFactory(\n+      final MetricsSystem metricsSystem,\n+      final String dataPath,\n+      final Optional<String> maybeArchiveDataPath,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3MzU5MA=="}, "originalCommit": {"oid": "df96affcdd2444a3f0d2434595910a9925c79c12"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDE3NzY5OnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/VersionedDatabaseFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjo1NzoyN1rOHgPxYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDoyNTowMVrOHgpfgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NDg4Mw==", "bodyText": "We want all the dbs to be in the data directory:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                this.v6ArchiveDirectory =\n          \n          \n            \n                    maybeArchiveDataPath.map(p -> Paths.get(p).resolve(ARCHIVE_PATH).toFile());\n          \n          \n            \n                final String archiveDirPath =  shouldCreateSeparateDbs ? ARCHIVE_PATH : DB_PATH\n          \n          \n            \n                this.v6ArchiveDirectory = this.dataDirectory.toPath().resolve(archiveDirPath).toFile();", "url": "https://github.com/ConsenSys/teku/pull/2934#discussion_r503574883", "createdAt": "2020-10-12T22:57:27Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/VersionedDatabaseFactory.java", "diffHunk": "@@ -72,10 +78,30 @@ public VersionedDatabaseFactory(\n       final String createDatabaseVersion,\n       final long stateStorageFrequency,\n       final Eth1Address eth1Address) {\n+    this(\n+        metricsSystem,\n+        dataPath,\n+        Optional.empty(),\n+        dataStorageMode,\n+        createDatabaseVersion,\n+        stateStorageFrequency,\n+        eth1Address);\n+  }\n+\n+  public VersionedDatabaseFactory(\n+      final MetricsSystem metricsSystem,\n+      final String dataPath,\n+      final Optional<String> maybeArchiveDataPath,\n+      final StateStorageMode dataStorageMode,\n+      final String createDatabaseVersion,\n+      final long stateStorageFrequency,\n+      final Eth1Address eth1Address) {\n     this.metricsSystem = metricsSystem;\n     this.dataDirectory = Paths.get(dataPath).toFile();\n     this.dbDirectory = this.dataDirectory.toPath().resolve(DB_PATH).toFile();\n-    this.archiveDirectory = this.dataDirectory.toPath().resolve(ARCHIVE_PATH).toFile();\n+    this.v5ArchiveDirectory = this.dataDirectory.toPath().resolve(ARCHIVE_PATH).toFile();\n+    this.v6ArchiveDirectory =\n+        maybeArchiveDataPath.map(p -> Paths.get(p).resolve(ARCHIVE_PATH).toFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df96affcdd2444a3f0d2434595910a9925c79c12"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcwODc3OA==", "bodyText": "@ajsutton commented:\n\nThe original plan was to be able to put the archive dB in a different dir so it could be on a slower bigger disk.\n\nSo the exact idea was to allow a different path for archive directory", "url": "https://github.com/ConsenSys/teku/pull/2934#discussion_r503708778", "createdAt": "2020-10-13T06:57:30Z", "author": {"login": "Nashatyrev"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/VersionedDatabaseFactory.java", "diffHunk": "@@ -72,10 +78,30 @@ public VersionedDatabaseFactory(\n       final String createDatabaseVersion,\n       final long stateStorageFrequency,\n       final Eth1Address eth1Address) {\n+    this(\n+        metricsSystem,\n+        dataPath,\n+        Optional.empty(),\n+        dataStorageMode,\n+        createDatabaseVersion,\n+        stateStorageFrequency,\n+        eth1Address);\n+  }\n+\n+  public VersionedDatabaseFactory(\n+      final MetricsSystem metricsSystem,\n+      final String dataPath,\n+      final Optional<String> maybeArchiveDataPath,\n+      final StateStorageMode dataStorageMode,\n+      final String createDatabaseVersion,\n+      final long stateStorageFrequency,\n+      final Eth1Address eth1Address) {\n     this.metricsSystem = metricsSystem;\n     this.dataDirectory = Paths.get(dataPath).toFile();\n     this.dbDirectory = this.dataDirectory.toPath().resolve(DB_PATH).toFile();\n-    this.archiveDirectory = this.dataDirectory.toPath().resolve(ARCHIVE_PATH).toFile();\n+    this.v5ArchiveDirectory = this.dataDirectory.toPath().resolve(ARCHIVE_PATH).toFile();\n+    this.v6ArchiveDirectory =\n+        maybeArchiveDataPath.map(p -> Paths.get(p).resolve(ARCHIVE_PATH).toFile());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NDg4Mw=="}, "originalCommit": {"oid": "df96affcdd2444a3f0d2434595910a9925c79c12"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5NjI5MA==", "bodyText": "Right - that makes sense actually :)", "url": "https://github.com/ConsenSys/teku/pull/2934#discussion_r503996290", "createdAt": "2020-10-13T14:25:01Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/VersionedDatabaseFactory.java", "diffHunk": "@@ -72,10 +78,30 @@ public VersionedDatabaseFactory(\n       final String createDatabaseVersion,\n       final long stateStorageFrequency,\n       final Eth1Address eth1Address) {\n+    this(\n+        metricsSystem,\n+        dataPath,\n+        Optional.empty(),\n+        dataStorageMode,\n+        createDatabaseVersion,\n+        stateStorageFrequency,\n+        eth1Address);\n+  }\n+\n+  public VersionedDatabaseFactory(\n+      final MetricsSystem metricsSystem,\n+      final String dataPath,\n+      final Optional<String> maybeArchiveDataPath,\n+      final StateStorageMode dataStorageMode,\n+      final String createDatabaseVersion,\n+      final long stateStorageFrequency,\n+      final Eth1Address eth1Address) {\n     this.metricsSystem = metricsSystem;\n     this.dataDirectory = Paths.get(dataPath).toFile();\n     this.dbDirectory = this.dataDirectory.toPath().resolve(DB_PATH).toFile();\n-    this.archiveDirectory = this.dataDirectory.toPath().resolve(ARCHIVE_PATH).toFile();\n+    this.v5ArchiveDirectory = this.dataDirectory.toPath().resolve(ARCHIVE_PATH).toFile();\n+    this.v6ArchiveDirectory =\n+        maybeArchiveDataPath.map(p -> Paths.get(p).resolve(ARCHIVE_PATH).toFile());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NDg4Mw=="}, "originalCommit": {"oid": "df96affcdd2444a3f0d2434595910a9925c79c12"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDE4ODEwOnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/VersionedDatabaseFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzowMjoyN1rOHgP3Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDoyMjoxMlrOHgpWPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NjQyMg==", "bodyText": "Any existing metadata should override preferences wrt single / multiple dbs:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      v6ArchiveDirectory.map(\n          \n          \n            \n                          dir ->\n          \n          \n            \n                              metaData\n          \n          \n            \n                                  .getSeparateDbConfiguration()\n          \n          \n            \n                                  .get()\n          \n          \n            \n                                  .getArchiveDbConfiguration()\n          \n          \n            \n                                  .withDatabaseDir(dir.toPath()));\n          \n          \n            \n                      v6ArchiveDirectory\n          \n          \n            \n                      .filter(__ -> !metaData.isSingleDB())\n          \n          \n            \n                      .map(dir ->\n          \n          \n            \n                              metaData\n          \n          \n            \n                                  .getSeparateDbConfiguration()\n          \n          \n            \n                                  .get()\n          \n          \n            \n                                  .getArchiveDbConfiguration()\n          \n          \n            \n                                  .withDatabaseDir(dir.toPath()));", "url": "https://github.com/ConsenSys/teku/pull/2934#discussion_r503576422", "createdAt": "2020-10-12T23:02:27Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/VersionedDatabaseFactory.java", "diffHunk": "@@ -164,13 +208,61 @@ private Database createV4Database() {\n    */\n   private Database createV5Database() {\n     try {\n-      final DatabaseMetadata metaData =\n-          DatabaseMetadata.init(getMetadataFile(), DatabaseMetadata.v5Defaults());\n+      final V5DatabaseMetadata metaData =\n+          V5DatabaseMetadata.init(getMetadataFile(), V5DatabaseMetadata.v5Defaults());\n       DatabaseNetwork.init(getNetworkFile(), Constants.GENESIS_FORK_VERSION, eth1Address);\n       return RocksDbDatabase.createV4(\n           metricsSystem,\n           metaData.getHotDbConfiguration().withDatabaseDir(dbDirectory.toPath()),\n-          metaData.getArchiveDbConfiguration().withDatabaseDir(archiveDirectory.toPath()),\n+          metaData.getArchiveDbConfiguration().withDatabaseDir(v5ArchiveDirectory.toPath()),\n+          stateStorageMode,\n+          stateStorageFrequency);\n+    } catch (final IOException e) {\n+      throw new DatabaseStorageException(\"Failed to read metadata\", e);\n+    }\n+  }\n+\n+  private Database createV6Database() {\n+    try {\n+      final V6DatabaseMetadata defaultMetaData;\n+      if (v6ArchiveDirectory.isPresent()) {\n+        defaultMetaData = V6DatabaseMetadata.separateDBDefault();\n+      } else {\n+        defaultMetaData = V6DatabaseMetadata.singleDBDefault();\n+      }\n+\n+      final V6DatabaseMetadata metaData =\n+          V6DatabaseMetadata.init(getMetadataFile(), defaultMetaData);\n+      if (defaultMetaData.isSingleDB() != metaData.isSingleDB()) {\n+        throw new DatabaseStorageException(\n+            \"The database was originally created as \"\n+                + (metaData.isSingleDB() ? \"Single\" : \"Separate\")\n+                + \" but now accessed as \"\n+                + (defaultMetaData.isSingleDB() ? \"Single\" : \"Separate\"));\n+      }\n+\n+      DatabaseNetwork.init(getNetworkFile(), Constants.GENESIS_FORK_VERSION, eth1Address);\n+\n+      final RocksDbConfiguration hotOrSingleDBConfiguration =\n+          metaData.isSingleDB()\n+              ? metaData.getSingleDbConfiguration().get().getConfiguration()\n+              : metaData.getSeparateDbConfiguration().get().getHotDbConfiguration();\n+\n+      final Optional<RocksDbConfiguration> finalizedConfiguration =\n+          v6ArchiveDirectory.map(\n+              dir ->\n+                  metaData\n+                      .getSeparateDbConfiguration()\n+                      .get()\n+                      .getArchiveDbConfiguration()\n+                      .withDatabaseDir(dir.toPath()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df96affcdd2444a3f0d2434595910a9925c79c12"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxMzAxMA==", "bodyText": "We are throwing exception if there is a mismatch between existing metadata and presence/absence of v6ArchiveDirectory. So the suggested filter() condition would always be true.\nhttps://github.com/PegaSysEng/teku/blob/d004e277b9949cf59e3a9e9394767d0566168477/storage/src/main/java/tech/pegasys/teku/storage/server/VersionedDatabaseFactory.java#L227-L242", "url": "https://github.com/ConsenSys/teku/pull/2934#discussion_r503713010", "createdAt": "2020-10-13T07:06:03Z", "author": {"login": "Nashatyrev"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/VersionedDatabaseFactory.java", "diffHunk": "@@ -164,13 +208,61 @@ private Database createV4Database() {\n    */\n   private Database createV5Database() {\n     try {\n-      final DatabaseMetadata metaData =\n-          DatabaseMetadata.init(getMetadataFile(), DatabaseMetadata.v5Defaults());\n+      final V5DatabaseMetadata metaData =\n+          V5DatabaseMetadata.init(getMetadataFile(), V5DatabaseMetadata.v5Defaults());\n       DatabaseNetwork.init(getNetworkFile(), Constants.GENESIS_FORK_VERSION, eth1Address);\n       return RocksDbDatabase.createV4(\n           metricsSystem,\n           metaData.getHotDbConfiguration().withDatabaseDir(dbDirectory.toPath()),\n-          metaData.getArchiveDbConfiguration().withDatabaseDir(archiveDirectory.toPath()),\n+          metaData.getArchiveDbConfiguration().withDatabaseDir(v5ArchiveDirectory.toPath()),\n+          stateStorageMode,\n+          stateStorageFrequency);\n+    } catch (final IOException e) {\n+      throw new DatabaseStorageException(\"Failed to read metadata\", e);\n+    }\n+  }\n+\n+  private Database createV6Database() {\n+    try {\n+      final V6DatabaseMetadata defaultMetaData;\n+      if (v6ArchiveDirectory.isPresent()) {\n+        defaultMetaData = V6DatabaseMetadata.separateDBDefault();\n+      } else {\n+        defaultMetaData = V6DatabaseMetadata.singleDBDefault();\n+      }\n+\n+      final V6DatabaseMetadata metaData =\n+          V6DatabaseMetadata.init(getMetadataFile(), defaultMetaData);\n+      if (defaultMetaData.isSingleDB() != metaData.isSingleDB()) {\n+        throw new DatabaseStorageException(\n+            \"The database was originally created as \"\n+                + (metaData.isSingleDB() ? \"Single\" : \"Separate\")\n+                + \" but now accessed as \"\n+                + (defaultMetaData.isSingleDB() ? \"Single\" : \"Separate\"));\n+      }\n+\n+      DatabaseNetwork.init(getNetworkFile(), Constants.GENESIS_FORK_VERSION, eth1Address);\n+\n+      final RocksDbConfiguration hotOrSingleDBConfiguration =\n+          metaData.isSingleDB()\n+              ? metaData.getSingleDbConfiguration().get().getConfiguration()\n+              : metaData.getSeparateDbConfiguration().get().getHotDbConfiguration();\n+\n+      final Optional<RocksDbConfiguration> finalizedConfiguration =\n+          v6ArchiveDirectory.map(\n+              dir ->\n+                  metaData\n+                      .getSeparateDbConfiguration()\n+                      .get()\n+                      .getArchiveDbConfiguration()\n+                      .withDatabaseDir(dir.toPath()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NjQyMg=="}, "originalCommit": {"oid": "df96affcdd2444a3f0d2434595910a9925c79c12"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk5MzkxNg==", "bodyText": "ah - i missed that, thanks!", "url": "https://github.com/ConsenSys/teku/pull/2934#discussion_r503993916", "createdAt": "2020-10-13T14:22:12Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/VersionedDatabaseFactory.java", "diffHunk": "@@ -164,13 +208,61 @@ private Database createV4Database() {\n    */\n   private Database createV5Database() {\n     try {\n-      final DatabaseMetadata metaData =\n-          DatabaseMetadata.init(getMetadataFile(), DatabaseMetadata.v5Defaults());\n+      final V5DatabaseMetadata metaData =\n+          V5DatabaseMetadata.init(getMetadataFile(), V5DatabaseMetadata.v5Defaults());\n       DatabaseNetwork.init(getNetworkFile(), Constants.GENESIS_FORK_VERSION, eth1Address);\n       return RocksDbDatabase.createV4(\n           metricsSystem,\n           metaData.getHotDbConfiguration().withDatabaseDir(dbDirectory.toPath()),\n-          metaData.getArchiveDbConfiguration().withDatabaseDir(archiveDirectory.toPath()),\n+          metaData.getArchiveDbConfiguration().withDatabaseDir(v5ArchiveDirectory.toPath()),\n+          stateStorageMode,\n+          stateStorageFrequency);\n+    } catch (final IOException e) {\n+      throw new DatabaseStorageException(\"Failed to read metadata\", e);\n+    }\n+  }\n+\n+  private Database createV6Database() {\n+    try {\n+      final V6DatabaseMetadata defaultMetaData;\n+      if (v6ArchiveDirectory.isPresent()) {\n+        defaultMetaData = V6DatabaseMetadata.separateDBDefault();\n+      } else {\n+        defaultMetaData = V6DatabaseMetadata.singleDBDefault();\n+      }\n+\n+      final V6DatabaseMetadata metaData =\n+          V6DatabaseMetadata.init(getMetadataFile(), defaultMetaData);\n+      if (defaultMetaData.isSingleDB() != metaData.isSingleDB()) {\n+        throw new DatabaseStorageException(\n+            \"The database was originally created as \"\n+                + (metaData.isSingleDB() ? \"Single\" : \"Separate\")\n+                + \" but now accessed as \"\n+                + (defaultMetaData.isSingleDB() ? \"Single\" : \"Separate\"));\n+      }\n+\n+      DatabaseNetwork.init(getNetworkFile(), Constants.GENESIS_FORK_VERSION, eth1Address);\n+\n+      final RocksDbConfiguration hotOrSingleDBConfiguration =\n+          metaData.isSingleDB()\n+              ? metaData.getSingleDbConfiguration().get().getConfiguration()\n+              : metaData.getSeparateDbConfiguration().get().getHotDbConfiguration();\n+\n+      final Optional<RocksDbConfiguration> finalizedConfiguration =\n+          v6ArchiveDirectory.map(\n+              dir ->\n+                  metaData\n+                      .getSeparateDbConfiguration()\n+                      .get()\n+                      .getArchiveDbConfiguration()\n+                      .withDatabaseDir(dir.toPath()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU3NjQyMg=="}, "originalCommit": {"oid": "df96affcdd2444a3f0d2434595910a9925c79c12"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDIxMzEzOnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/metadata/V6DatabaseMetadata.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzoxNTo1MlrOHgQF4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoyODo1N1rOHgY_zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MDEzMQ==", "bodyText": "Looks like these are being serialized - there's probably a flag to turn off this behavior", "url": "https://github.com/ConsenSys/teku/pull/2934#discussion_r503580131", "createdAt": "2020-10-12T23:15:52Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/metadata/V6DatabaseMetadata.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server.metadata;\n+\n+import static com.fasterxml.jackson.dataformat.yaml.YAMLGenerator.Feature.WRITE_DOC_START_MARKER;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonProperty.Access;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Optional;\n+import tech.pegasys.teku.storage.server.rocksdb.RocksDbConfiguration;\n+\n+/**\n+ * Defines the configuration for a database. The configuration used when a database is created is\n+ * written to a metadata.yaml file and reloaded to ensure we continue using compatible values for\n+ * the lifetime of that database.\n+ *\n+ * <p>To preserve backwards compatibility always ensure that the value assigned in field\n+ * declarations is compatible with existing databases. These values will be used if the field didn't\n+ * exist at the time the database was created, so typically should match the default.\n+ *\n+ * <p>If the value to use for new databases, differs from the original, set it in a factory function\n+ *\n+ * <p>Values that are safe to change for existing databases are marked with {@link\n+ * Access#WRITE_ONLY}. They will not be written to the metadata file but if present, the value will\n+ * be loaded providing a simple way to experiment with different values without it being fixed at\n+ * database creation.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class V6DatabaseMetadata {\n+\n+  @JsonIgnoreProperties(ignoreUnknown = true)\n+  public static class SingleDBMetadata {\n+    @JsonProperty(\"configuration\")\n+    private RocksDbConfiguration configuration;\n+\n+    public SingleDBMetadata() {}\n+\n+    public SingleDBMetadata(RocksDbConfiguration configuration) {\n+      this.configuration = configuration;\n+    }\n+\n+    public RocksDbConfiguration getConfiguration() {\n+      return configuration;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"SingleDBMetadata{\" + \"configuration=\" + configuration + '}';\n+    }\n+  }\n+\n+  @JsonIgnoreProperties(ignoreUnknown = true)\n+  public static class SeparateDBMetadata {\n+    @JsonProperty(\"hotDbConfiguration\")\n+    private RocksDbConfiguration hotDbConfiguration;\n+\n+    @JsonProperty(\"archiveDbConfiguration\")\n+    private RocksDbConfiguration archiveDbConfiguration;\n+\n+    public SeparateDBMetadata() {}\n+\n+    public SeparateDBMetadata(\n+        RocksDbConfiguration hotDbConfiguration, RocksDbConfiguration archiveDbConfiguration) {\n+      this.hotDbConfiguration = hotDbConfiguration;\n+      this.archiveDbConfiguration = archiveDbConfiguration;\n+    }\n+\n+    public RocksDbConfiguration getHotDbConfiguration() {\n+      return hotDbConfiguration;\n+    }\n+\n+    public RocksDbConfiguration getArchiveDbConfiguration() {\n+      return archiveDbConfiguration;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"SeparateDBMetadata{\"\n+          + \"hotDbConfiguration=\"\n+          + hotDbConfiguration\n+          + \", archiveDbConfiguration=\"\n+          + archiveDbConfiguration\n+          + '}';\n+    }\n+  }\n+\n+  @JsonProperty(\"singleDb\")\n+  private SingleDBMetadata singleDb;\n+\n+  @JsonProperty(\"separateDb\")\n+  private SeparateDBMetadata separateDb;\n+\n+  public V6DatabaseMetadata() {}\n+\n+  private V6DatabaseMetadata(RocksDbConfiguration singleDbConfiguration) {\n+    this.singleDb = new SingleDBMetadata(singleDbConfiguration);\n+  }\n+\n+  private V6DatabaseMetadata(\n+      RocksDbConfiguration hotDbConfiguration, RocksDbConfiguration archiveDbConfiguration) {\n+    this.separateDb = new SeparateDBMetadata(hotDbConfiguration, archiveDbConfiguration);\n+  }\n+\n+  public static V6DatabaseMetadata singleDBDefault() {\n+    return new V6DatabaseMetadata(RocksDbConfiguration.v6SingleDefaults());\n+  }\n+\n+  public static V6DatabaseMetadata separateDBDefault() {\n+    return new V6DatabaseMetadata(\n+        RocksDbConfiguration.v5HotDefaults(), RocksDbConfiguration.v5ArchiveDefaults());\n+  }\n+\n+  public Optional<SingleDBMetadata> getSingleDbConfiguration() {\n+    return Optional.ofNullable(singleDb);\n+  }\n+\n+  public Optional<SeparateDBMetadata> getSeparateDbConfiguration() {\n+    return Optional.ofNullable(separateDb);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df96affcdd2444a3f0d2434595910a9925c79c12"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcyNjAzMQ==", "bodyText": "Oh, thanks for pointing this \ud83d\udc4d\nFix here: 1b023b8\nAlso excluded serialization of a null field", "url": "https://github.com/ConsenSys/teku/pull/2934#discussion_r503726031", "createdAt": "2020-10-13T07:28:57Z", "author": {"login": "Nashatyrev"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/metadata/V6DatabaseMetadata.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server.metadata;\n+\n+import static com.fasterxml.jackson.dataformat.yaml.YAMLGenerator.Feature.WRITE_DOC_START_MARKER;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonProperty.Access;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Optional;\n+import tech.pegasys.teku.storage.server.rocksdb.RocksDbConfiguration;\n+\n+/**\n+ * Defines the configuration for a database. The configuration used when a database is created is\n+ * written to a metadata.yaml file and reloaded to ensure we continue using compatible values for\n+ * the lifetime of that database.\n+ *\n+ * <p>To preserve backwards compatibility always ensure that the value assigned in field\n+ * declarations is compatible with existing databases. These values will be used if the field didn't\n+ * exist at the time the database was created, so typically should match the default.\n+ *\n+ * <p>If the value to use for new databases, differs from the original, set it in a factory function\n+ *\n+ * <p>Values that are safe to change for existing databases are marked with {@link\n+ * Access#WRITE_ONLY}. They will not be written to the metadata file but if present, the value will\n+ * be loaded providing a simple way to experiment with different values without it being fixed at\n+ * database creation.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class V6DatabaseMetadata {\n+\n+  @JsonIgnoreProperties(ignoreUnknown = true)\n+  public static class SingleDBMetadata {\n+    @JsonProperty(\"configuration\")\n+    private RocksDbConfiguration configuration;\n+\n+    public SingleDBMetadata() {}\n+\n+    public SingleDBMetadata(RocksDbConfiguration configuration) {\n+      this.configuration = configuration;\n+    }\n+\n+    public RocksDbConfiguration getConfiguration() {\n+      return configuration;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"SingleDBMetadata{\" + \"configuration=\" + configuration + '}';\n+    }\n+  }\n+\n+  @JsonIgnoreProperties(ignoreUnknown = true)\n+  public static class SeparateDBMetadata {\n+    @JsonProperty(\"hotDbConfiguration\")\n+    private RocksDbConfiguration hotDbConfiguration;\n+\n+    @JsonProperty(\"archiveDbConfiguration\")\n+    private RocksDbConfiguration archiveDbConfiguration;\n+\n+    public SeparateDBMetadata() {}\n+\n+    public SeparateDBMetadata(\n+        RocksDbConfiguration hotDbConfiguration, RocksDbConfiguration archiveDbConfiguration) {\n+      this.hotDbConfiguration = hotDbConfiguration;\n+      this.archiveDbConfiguration = archiveDbConfiguration;\n+    }\n+\n+    public RocksDbConfiguration getHotDbConfiguration() {\n+      return hotDbConfiguration;\n+    }\n+\n+    public RocksDbConfiguration getArchiveDbConfiguration() {\n+      return archiveDbConfiguration;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"SeparateDBMetadata{\"\n+          + \"hotDbConfiguration=\"\n+          + hotDbConfiguration\n+          + \", archiveDbConfiguration=\"\n+          + archiveDbConfiguration\n+          + '}';\n+    }\n+  }\n+\n+  @JsonProperty(\"singleDb\")\n+  private SingleDBMetadata singleDb;\n+\n+  @JsonProperty(\"separateDb\")\n+  private SeparateDBMetadata separateDb;\n+\n+  public V6DatabaseMetadata() {}\n+\n+  private V6DatabaseMetadata(RocksDbConfiguration singleDbConfiguration) {\n+    this.singleDb = new SingleDBMetadata(singleDbConfiguration);\n+  }\n+\n+  private V6DatabaseMetadata(\n+      RocksDbConfiguration hotDbConfiguration, RocksDbConfiguration archiveDbConfiguration) {\n+    this.separateDb = new SeparateDBMetadata(hotDbConfiguration, archiveDbConfiguration);\n+  }\n+\n+  public static V6DatabaseMetadata singleDBDefault() {\n+    return new V6DatabaseMetadata(RocksDbConfiguration.v6SingleDefaults());\n+  }\n+\n+  public static V6DatabaseMetadata separateDBDefault() {\n+    return new V6DatabaseMetadata(\n+        RocksDbConfiguration.v5HotDefaults(), RocksDbConfiguration.v5ArchiveDefaults());\n+  }\n+\n+  public Optional<SingleDBMetadata> getSingleDbConfiguration() {\n+    return Optional.ofNullable(singleDb);\n+  }\n+\n+  public Optional<SeparateDBMetadata> getSeparateDbConfiguration() {\n+    return Optional.ofNullable(separateDb);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MDEzMQ=="}, "originalCommit": {"oid": "df96affcdd2444a3f0d2434595910a9925c79c12"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDIxOTM0OnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/schema/SchemaFinalized.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzoxOTo0NlrOHgQJ3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzoxOTo0NlrOHgQJ3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MTE0OA==", "bodyText": "Nice refactor :D", "url": "https://github.com/ConsenSys/teku/pull/2934#discussion_r503581148", "createdAt": "2020-10-12T23:19:46Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/schema/SchemaFinalized.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server.rocksdb.schema;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+public interface SchemaFinalized extends Schema {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df96affcdd2444a3f0d2434595910a9925c79c12"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njk2NTc0OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/teku/util/annotations/JsonExplicit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDozNTo0NFrOHgqA7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDozNTo0NFrOHgqA7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwNDg0NA==", "bodyText": "(nit) Maybe something like \"serialization\" would be more descriptive\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package tech.pegasys.teku.util.annotations;\n          \n          \n            \n            package tech.pegasys.teku.util.serialization;", "url": "https://github.com/ConsenSys/teku/pull/2934#discussion_r504004844", "createdAt": "2020-10-13T14:35:44Z", "author": {"login": "mbaxter"}, "path": "util/src/main/java/tech/pegasys/teku/util/annotations/JsonExplicit.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.annotations;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b023b894453f925fb7632eeb8d99d6486202bf8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njk2Njk2OnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/metadata/V6DatabaseMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDozNjowMFrOHgqBwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDozNjowMFrOHgqBwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAwNTA1Ng==", "bodyText": "nice", "url": "https://github.com/ConsenSys/teku/pull/2934#discussion_r504005056", "createdAt": "2020-10-13T14:36:00Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/metadata/V6DatabaseMetadata.java", "diffHunk": "@@ -42,9 +45,12 @@\n  * database creation.\n  */\n @JsonIgnoreProperties(ignoreUnknown = true)\n+@JsonExplicit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b023b894453f925fb7632eeb8d99d6486202bf8"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzQyOTAxOnYy", "diffSide": "RIGHT", "path": "storage/src/testFixtures/java/tech/pegasys/teku/storage/server/rocksdb/InMemoryRocksDbDatabaseFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjoxMDowOVrOHguhgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMTozMjozNVrOHhOmfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA3ODcyMQ==", "bodyText": "There's a helper class that provides various db versions called StorageSystemArgumentsProvider - we should add the v6 dbs to that class.", "url": "https://github.com/ConsenSys/teku/pull/2934#discussion_r504078721", "createdAt": "2020-10-13T16:10:09Z", "author": {"login": "mbaxter"}, "path": "storage/src/testFixtures/java/tech/pegasys/teku/storage/server/rocksdb/InMemoryRocksDbDatabaseFactory.java", "diffHunk": "@@ -36,7 +38,22 @@ public static Database createV4(\n         new StubMetricsSystem(), hotDb, coldDb, storageMode, stateStorageFrequency);\n   }\n \n+  public static Database createV6(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77526701fd96abf35f6a1c1ab94ebd2b661542c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwNDI4Ng==", "bodyText": "Right! Missed that place", "url": "https://github.com/ConsenSys/teku/pull/2934#discussion_r504604286", "createdAt": "2020-10-14T11:32:35Z", "author": {"login": "Nashatyrev"}, "path": "storage/src/testFixtures/java/tech/pegasys/teku/storage/server/rocksdb/InMemoryRocksDbDatabaseFactory.java", "diffHunk": "@@ -36,7 +38,22 @@ public static Database createV4(\n         new StubMetricsSystem(), hotDb, coldDb, storageMode, stateStorageFrequency);\n   }\n \n+  public static Database createV6(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA3ODcyMQ=="}, "originalCommit": {"oid": "b77526701fd96abf35f6a1c1ab94ebd2b661542c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzQzODA5OnYy", "diffSide": "RIGHT", "path": "storage/src/test/java/tech/pegasys/teku/storage/server/rocksdb/V6RocksDbDatabaseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjoxMjoyM1rOHgunLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjo0MzowNVrOHhREBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4MDE3Mg==", "bodyText": "Probably a good idea to create another test that uses separate dbs.", "url": "https://github.com/ConsenSys/teku/pull/2934#discussion_r504080172", "createdAt": "2020-10-13T16:12:23Z", "author": {"login": "mbaxter"}, "path": "storage/src/test/java/tech/pegasys/teku/storage/server/rocksdb/V6RocksDbDatabaseTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server.rocksdb;\n+\n+import java.io.File;\n+import tech.pegasys.teku.storage.server.DatabaseVersion;\n+import tech.pegasys.teku.storage.storageSystem.FileBackedStorageSystemBuilder;\n+import tech.pegasys.teku.storage.storageSystem.StorageSystem;\n+import tech.pegasys.teku.storage.store.StoreConfig;\n+import tech.pegasys.teku.util.config.StateStorageMode;\n+\n+public class V6RocksDbDatabaseTest extends AbstractRocksDbDatabaseWithHotStatesTest {\n+\n+  @Override\n+  protected StorageSystem createStorageSystem(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b77526701fd96abf35f6a1c1ab94ebd2b661542c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY0NDYxMw==", "bodyText": "Added \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/2934#discussion_r504644613", "createdAt": "2020-10-14T12:43:05Z", "author": {"login": "Nashatyrev"}, "path": "storage/src/test/java/tech/pegasys/teku/storage/server/rocksdb/V6RocksDbDatabaseTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server.rocksdb;\n+\n+import java.io.File;\n+import tech.pegasys.teku.storage.server.DatabaseVersion;\n+import tech.pegasys.teku.storage.storageSystem.FileBackedStorageSystemBuilder;\n+import tech.pegasys.teku.storage.storageSystem.StorageSystem;\n+import tech.pegasys.teku.storage.store.StoreConfig;\n+import tech.pegasys.teku.util.config.StateStorageMode;\n+\n+public class V6RocksDbDatabaseTest extends AbstractRocksDbDatabaseWithHotStatesTest {\n+\n+  @Override\n+  protected StorageSystem createStorageSystem(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4MDE3Mg=="}, "originalCommit": {"oid": "b77526701fd96abf35f6a1c1ab94ebd2b661542c"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3172, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}