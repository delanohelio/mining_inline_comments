{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMTA3NDkw", "number": 2506, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzowODo0M1rOEVPZqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzowODo0M1rOEVPZqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzA3ODgwOnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/network/DatabaseNetwork.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzowODo0M1rOG74hgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwMzowODo0M1rOG74hgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NTI1MA==", "bodyText": "nit: I'd flip this equals the other way around. We know for certain that forkVersionString isn't null but databaseNetwork just came from an external file.  We'll fail to start either way but it will be much more neat if we avoid NullPointerException.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (!databaseNetwork.forkVersion.equals(forkVersionString)) {\n          \n          \n            \n                  if (!forkVersionString.equals(databaseNetwork.forkVersion)) {", "url": "https://github.com/ConsenSys/teku/pull/2506#discussion_r465445250", "createdAt": "2020-08-05T03:08:43Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/network/DatabaseNetwork.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server.network;\n+\n+import static com.fasterxml.jackson.dataformat.yaml.YAMLGenerator.Feature.WRITE_DOC_START_MARKER;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Objects;\n+import tech.pegasys.teku.ssz.SSZTypes.Bytes4;\n+import tech.pegasys.teku.storage.server.DatabaseStorageException;\n+import tech.pegasys.teku.util.config.Eth1Address;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class DatabaseNetwork {\n+  @JsonProperty(\"fork_version\")\n+  @VisibleForTesting\n+  final String forkVersion;\n+\n+  @JsonProperty(\"deposit_contract\")\n+  @VisibleForTesting\n+  final String depositContract;\n+\n+  @JsonCreator\n+  DatabaseNetwork(\n+      @JsonProperty(\"fork_version\") final String forkVersion,\n+      @JsonProperty(\"deposit_contract\") final String depositContract) {\n+    this.forkVersion = forkVersion;\n+    this.depositContract = depositContract;\n+  }\n+\n+  public static DatabaseNetwork init(\n+      final File source, Bytes4 forkVersion, Eth1Address depositContract) throws IOException {\n+    final String forkVersionString = forkVersion.toHexString().toLowerCase();\n+    final String depositContractString =\n+        depositContract == null ? \"\" : depositContract.toHexString().toLowerCase();\n+    final ObjectMapper objectMapper =\n+        new ObjectMapper(new YAMLFactory().disable(WRITE_DOC_START_MARKER));\n+    if (source.exists()) {\n+      final DatabaseNetwork databaseNetwork =\n+          objectMapper.readerFor(DatabaseNetwork.class).readValue(source);\n+\n+      if (!databaseNetwork.forkVersion.equals(forkVersionString)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9053f4dd353e882295c40d068d8c2e9731154763"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3457, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}