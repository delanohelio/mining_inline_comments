{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNTE4Mjk0", "number": 1971, "title": "Validateable attestations", "bodyText": "PR Description\nWraps attestations so that we can better organize attestation processing and validation going forward.\nTODOs:\n\n Replace all Attestation with ValidateableAttestation\n Use a custom interface to pass ValidateableAttestation from the network layer to AttestationManager\n Make Eth2TopicHandler an interface instead of a base class\n Move AttestationManager to ethereum:statetransition package since sync was not the right place for it\n Pass certain attestations downstream from AttestationManager\n Use ValidateableAttestation instead of DelayableAttestation\n Fix tests", "createdAt": "2020-05-26T23:33:32Z", "url": "https://github.com/ConsenSys/teku/pull/1971", "merged": true, "mergeCommit": {"oid": "114132a853e3ec65cbbaccd21c588a44390d25c5"}, "closed": true, "closedAt": "2020-05-29T03:26:08Z", "author": {"login": "cemozerr"}, "timelineItems": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjinDyAH2gAyNDIzNTE4Mjk0OmMwZTZlNjU0MmYwZDQzN2ZkZjUwNmY5MzhkODk4MTU1NDAxNjM5MTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcl39VRgH2gAyNDIzNTE4Mjk0OmRmN2IxNWRkZjc3NDQ1MDIwYWU3NTU4ZmY3OWUzMmY2OTIwM2E4Yzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c0e6e6542f0d437fdf506f938d89815540163915", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/c0e6e6542f0d437fdf506f938d89815540163915", "committedDate": "2020-05-21T19:12:52Z", "message": "Validate future checks latest & pass attestations to Pool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "738dba85c6abfe609c59d93ab012b575468bae2f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/738dba85c6abfe609c59d93ab012b575468bae2f", "committedDate": "2020-05-21T19:43:24Z", "message": "Simplify indented code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "628c22b4a8d745eecdeb75ca6895935c5f82f5f5", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/628c22b4a8d745eecdeb75ca6895935c5f82f5f5", "committedDate": "2020-05-21T19:47:02Z", "message": "Pass pool to attestation manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e199ed07dff7bca30ed21fe290f6d3d1eabe3670", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/e199ed07dff7bca30ed21fe290f6d3d1eabe3670", "committedDate": "2020-05-21T21:30:22Z", "message": "Close of future Attestation DOS vector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "630f441ce25eb5de7ba1d7ea248b7c53f602562e", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/630f441ce25eb5de7ba1d7ea248b7c53f602562e", "committedDate": "2020-05-22T17:45:11Z", "message": "Make indexedAttestation variable volatile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c1e7b59f3b8c8cb25c6c1899313ba00a9c95ccf", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/7c1e7b59f3b8c8cb25c6c1899313ba00a9c95ccf", "committedDate": "2020-05-22T18:16:00Z", "message": "Pass indexed attestation around & change method names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6207ae8a3b9e0d64bd853b50ffc825275f3559ac", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/6207ae8a3b9e0d64bd853b50ffc825275f3559ac", "committedDate": "2020-05-22T20:56:38Z", "message": "Refactor tests to match refactored AttestationManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b18991dc1239fb9143972232e418f9753d9a4b1", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/6b18991dc1239fb9143972232e418f9753d9a4b1", "committedDate": "2020-05-22T21:02:07Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21be5ad414e7f9df65209ccc2cf01831aa51cd78", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/21be5ad414e7f9df65209ccc2cf01831aa51cd78", "committedDate": "2020-05-22T21:14:21Z", "message": "Fix unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f745abfeb309b414a3ffa9b291c610ece57aade9", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/f745abfeb309b414a3ffa9b291c610ece57aade9", "committedDate": "2020-05-22T21:31:54Z", "message": "Merge branch 'master' into validateAtestationFutureChecksLatest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07c21f4c5f4e011912025851d71d8ed113efe90f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/07c21f4c5f4e011912025851d71d8ed113efe90f", "committedDate": "2020-05-26T17:06:29Z", "message": "Remove usage of spies in test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff1c1657e59b867e106a5a82d4eddf411f087f48", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/ff1c1657e59b867e106a5a82d4eddf411f087f48", "committedDate": "2020-05-26T17:07:02Z", "message": "Merge branch 'master' into validateAtestationFutureChecksLatest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ae990290a7c5aa1ed4acad3c207206a957e4806", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/8ae990290a7c5aa1ed4acad3c207206a957e4806", "committedDate": "2020-05-26T17:18:37Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/b7602f4792b1c0e4098d291df9a40122e237bce2", "committedDate": "2020-05-26T23:29:27Z", "message": "Switch to using ValidateableAttestations in code\n\n- Replace all Attestations with ValidateableAttestations\n- Use a custom interface to pass ValidateableAttestations from\nnetwork layer to AttestationManager\n- Make Eth2TopicHandler an interface instead of a base class\n- Move AttestationManager to ethereum:statetransition package\nsince sync was not the right place for it"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4ODIwMDIx", "url": "https://github.com/ConsenSys/teku/pull/1971#pullrequestreview-418820021", "createdAt": "2020-05-27T02:43:14Z", "commit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMjo0MzoxNFrOGa3khA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzowNDowMVrOGa34Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyNjYyOA==", "bodyText": "Maybe not for the first pass, but I wonder if DelayableAttestation can just be removed and use ValidatableAttestation instead.  It would move to using a listener/subscriber pattern for onSuccessfulProcessing rather than passing a consumer to the constructor but that makes sense to me.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430826628", "createdAt": "2020-05-27T02:43:14Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/DelayableAttestation.java", "diffHunk": "@@ -22,14 +22,15 @@\n import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n \n public class DelayableAttestation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyNjc1OA==", "bodyText": "nit: probably make the constructor private since we have the two static factory methods.  And since it's then private, I'd be tempted to just have one constructor that takes Attestation, Optional<SignedAggregateAndProof> because the static methods still provide a nice external API.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430826758", "createdAt": "2020-05-27T02:43:47Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+import java.util.Optional;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private Optional<SignedAggregateAndProof> maybeAggregate = Optional.empty();\n+\n+  public static ValidateableAttestation fromSingle(Attestation attestation) {\n+    return new ValidateableAttestation(attestation);\n+  }\n+\n+  public static ValidateableAttestation fromAggregate(SignedAggregateAndProof attestation) {\n+    return new ValidateableAttestation(attestation);\n+  }\n+\n+  public ValidateableAttestation(Attestation attestation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyNzA4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!isAggregate()) {\n          \n          \n            \n                  throw new UnsupportedOperationException(\"ValidateableAttestation is not an aggregate.\");\n          \n          \n            \n                }\n          \n          \n            \n                return maybeAggregate.get();\n          \n          \n            \n                return maybeAggregate.orElseThrow(() -> new UnsupportedOperationException(\"ValidateableAttestation is not an aggregate.\"));", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430827088", "createdAt": "2020-05-27T02:45:09Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+import java.util.Optional;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private Optional<SignedAggregateAndProof> maybeAggregate = Optional.empty();\n+\n+  public static ValidateableAttestation fromSingle(Attestation attestation) {\n+    return new ValidateableAttestation(attestation);\n+  }\n+\n+  public static ValidateableAttestation fromAggregate(SignedAggregateAndProof attestation) {\n+    return new ValidateableAttestation(attestation);\n+  }\n+\n+  public ValidateableAttestation(Attestation attestation) {\n+    this.attestation = attestation;\n+  }\n+\n+  private ValidateableAttestation(SignedAggregateAndProof attestation) {\n+    maybeAggregate = Optional.of(attestation);\n+    this.attestation = attestation.getMessage().getAggregate();\n+  }\n+\n+  public boolean isAggregate() {\n+    return maybeAggregate.isPresent();\n+  }\n+\n+  public Attestation getAttestation() {\n+    return attestation;\n+  }\n+\n+  public SignedAggregateAndProof getSignedAggregateAndProof() {\n+    if (!isAggregate()) {\n+      throw new UnsupportedOperationException(\"ValidateableAttestation is not an aggregate.\");\n+    }\n+    return maybeAggregate.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyODAzNg==", "bodyText": "This is an interesting case. We're really creating a ValidatableAttestation in the middle of processing which we were aiming to avoid.  We will have already performed some validation on the input attestations so theoretically could skip some of those (e.g. we should know the signature is valid).  Some things like the index attestation would have to be rebuilt though...\nProbably best to leave it as-is for now and just consider an aggregate as a completely new attestation, but interesting source of new ValidatableAttestation instances.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430828036", "createdAt": "2020-05-27T02:49:18Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregateAttestationBuilder.java", "diffHunk": "@@ -28,42 +29,47 @@\n  * made redundant by the current aggregate.\n  */\n class AggregateAttestationBuilder {\n-  private final Set<Attestation> includedAttestations = new HashSet<>();\n+  private final Set<ValidateableAttestation> includedAttestations = new HashSet<>();\n   private final AttestationData attestationData;\n   private Bitlist currentAggregateBits;\n \n   AggregateAttestationBuilder(final AttestationData attestationData) {\n     this.attestationData = attestationData;\n   }\n \n-  public boolean canAggregate(final Attestation candidate) {\n+  public boolean canAggregate(final ValidateableAttestation candidate) {\n     return currentAggregateBits == null\n-        || !currentAggregateBits.intersects(candidate.getAggregation_bits());\n+        || !currentAggregateBits.intersects(candidate.getAttestation().getAggregation_bits());\n   }\n \n-  public boolean isFullyIncluded(final Attestation candidate) {\n+  public boolean isFullyIncluded(final ValidateableAttestation candidate) {\n     return currentAggregateBits != null\n-        && currentAggregateBits.isSuperSetOf(candidate.getAggregation_bits());\n+        && currentAggregateBits.isSuperSetOf(candidate.getAttestation().getAggregation_bits());\n   }\n \n-  public void aggregate(final Attestation attestation) {\n+  public void aggregate(final ValidateableAttestation attestation) {\n     includedAttestations.add(attestation);\n     if (currentAggregateBits == null) {\n-      currentAggregateBits = attestation.getAggregation_bits().copy();\n+      currentAggregateBits = attestation.getAttestation().getAggregation_bits().copy();\n     } else {\n-      currentAggregateBits.setAllBits(attestation.getAggregation_bits());\n+      currentAggregateBits.setAllBits(attestation.getAttestation().getAggregation_bits());\n     }\n   }\n \n-  public Attestation buildAggregate() {\n+  public ValidateableAttestation buildAggregate() {\n     checkState(currentAggregateBits != null, \"Must aggregate at least one attestation\");\n-    return new Attestation(\n-        currentAggregateBits,\n-        attestationData,\n-        BLS.aggregate(includedAttestations.stream().map(Attestation::getAggregate_signature)));\n+    return ValidateableAttestation.fromSingle(new Attestation(\n+            currentAggregateBits,\n+            attestationData,\n+            BLS.aggregate(\n+                    includedAttestations\n+                            .stream()\n+                            .map(ValidateableAttestation::getAttestation)\n+                            .map(Attestation::getAggregate_signature))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyOTY4Mg==", "bodyText": "It's a small detail, but I would actually return a ValidatableAttestation from here.  It will wind up being immediately unwrapped in ValidatorApiHandler because that is the boundary between beacon chain and validator client so shouldn't share validation state, but if something else winds up using this in the future it would be handy to keep any information about what's been validated around.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430829682", "createdAt": "2020-05-27T02:55:41Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregatingAttestationPool.java", "diffHunk": "@@ -100,13 +103,15 @@ private void removeFromSlotMappings(final UnsignedLong slot, final Bytes32 dataR\n         .filter(group -> group.getAttestationData().canIncludeInBlockAtSlot(slot))\n         .flatMap(MatchingDataAttestationGroup::stream)\n         .limit(attestations.getMaxSize())\n+        .map(ValidateableAttestation::getAttestation)\n         .forEach(attestations::add);\n     return attestations;\n   }\n \n   public synchronized Optional<Attestation> createAggregateFor(\n       final AttestationData attestationData) {\n     return Optional.ofNullable(attestationGroupByDataHash.get(attestationData.hash_tree_root()))\n-        .flatMap(attestations -> attestations.stream().findFirst());\n+            .flatMap(attestations -> attestations.stream().findFirst())\n+            .map(ValidateableAttestation::getAttestation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyOTgzNA==", "bodyText": "I think you can use:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return SafeFuture.completedFuture(null);\n          \n          \n            \n                return SafeFuture.COMPLETE;", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430829834", "createdAt": "2020-05-27T02:56:19Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java", "diffHunk": "@@ -141,12 +130,12 @@ private void processAttestation(final DelayableAttestation delayableAttestation)\n   @Override\n   protected SafeFuture<?> doStart() {\n     eventBus.register(this);\n-    return this.pendingAttestations.start();\n+    return SafeFuture.completedFuture(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMTIyNQ==", "bodyText": "Need to think about how we name this.  It's not really a pipe, but it's also not really a handler. Maybe just GossipedAttestationConsumer?  Not sure...", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430831225", "createdAt": "2020-05-27T03:01:58Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/UpstreamAttestationPipe.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package tech.pegasys.teku.networking.eth2.gossip.topics;\n+\n+import tech.pegasys.teku.datastructures.attestation.ValidateableAttestation;\n+\n+public interface UpstreamAttestationPipe {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMTY4Nw==", "bodyText": "I think we'll need to start sending these attestations to the AttestationManager since it won't pick it up from the eventBus anymore.  That's really what we want anyway design-wise.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430831687", "createdAt": "2020-05-27T03:04:01Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/ValidatorApiHandler.java", "diffHunk": "@@ -213,13 +214,13 @@ public void subscribeToPersistentSubnets(Set<SubnetSubscription> subnetSubscript\n \n   @Override\n   public void sendSignedAttestation(final Attestation attestation) {\n-    attestationPool.add(attestation);\n+    attestationPool.add(ValidateableAttestation.fromSingle(attestation));\n     eventBus.post(attestation);\n   }\n \n   @Override\n   public void sendAggregateAndProof(final SignedAggregateAndProof aggregateAndProof) {\n-    attestationPool.add(aggregateAndProof.getMessage().getAggregate());\n+    attestationPool.add(ValidateableAttestation.fromAggregate(aggregateAndProof));\n     eventBus.post(aggregateAndProof);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0e7c1f69580fa7e1860651972058614e8ae382b", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/b0e7c1f69580fa7e1860651972058614e8ae382b", "committedDate": "2020-05-27T15:42:59Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc8190f66382ff39680d2fd4b1e8e450ade193bf", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/bc8190f66382ff39680d2fd4b1e8e450ade193bf", "committedDate": "2020-05-27T15:45:07Z", "message": "Have only one constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87ed9c4efbc0217a4a3a91d3ed58e9aff205dddd", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/87ed9c4efbc0217a4a3a91d3ed58e9aff205dddd", "committedDate": "2020-05-27T15:45:40Z", "message": "Refactor method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55b1bea6b3aa0ebf1bc4e1b62a61109584fa03ee", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/55b1bea6b3aa0ebf1bc4e1b62a61109584fa03ee", "committedDate": "2020-05-27T15:47:04Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a8206762b46874f283d5124cf8555a77f0fe606", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/2a8206762b46874f283d5124cf8555a77f0fe606", "committedDate": "2020-05-27T15:47:56Z", "message": "Use SafeFuture static variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90e3316e6c5543fb0ee7338ed62e79060ec6b301", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/90e3316e6c5543fb0ee7338ed62e79060ec6b301", "committedDate": "2020-05-27T15:55:46Z", "message": "Rename custom attestation consuming interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf4c50df876f8ddbea4d30c50d2232f7b8f28195", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/bf4c50df876f8ddbea4d30c50d2232f7b8f28195", "committedDate": "2020-05-27T16:21:38Z", "message": "Return Validateable from createAggregate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9355865b8adda5ad6ee92d7c203f2e778199f24", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/b9355865b8adda5ad6ee92d7c203f2e778199f24", "committedDate": "2020-05-27T16:26:50Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c194951c6b55620e40c30368b14f932650b7364", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/3c194951c6b55620e40c30368b14f932650b7364", "committedDate": "2020-05-27T17:33:22Z", "message": "Fix all tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8de16fe80b93c32e59175602ad72283a843d7d3b", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/8de16fe80b93c32e59175602ad72283a843d7d3b", "committedDate": "2020-05-27T19:13:51Z", "message": "Add equals method to ValidateableAttestation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ecab24dccd51eb5ddf5f8112542f5ee43b41364", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/1ecab24dccd51eb5ddf5f8112542f5ee43b41364", "committedDate": "2020-05-27T19:16:29Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "935e91c927dec40f0b17bf35a841c989c25f4329", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/935e91c927dec40f0b17bf35a841c989c25f4329", "committedDate": "2020-05-27T19:18:56Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa7a4e6e58ed95fe35e0e531aedce2ea3b0b4612", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/fa7a4e6e58ed95fe35e0e531aedce2ea3b0b4612", "committedDate": "2020-05-27T21:23:34Z", "message": "Remove DelayableAttestations & pass ungossipped attestations to network"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91022bc495f5fe2df9240fe2f1e9d2b0b57c3742", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/91022bc495f5fe2df9240fe2f1e9d2b0b57c3742", "committedDate": "2020-05-27T21:24:15Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ab6e32d9faac8fcfe332bc4f8938370ad6f22cb", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/8ab6e32d9faac8fcfe332bc4f8938370ad6f22cb", "committedDate": "2020-05-27T22:20:34Z", "message": "Fix tests again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b186c15e78b9036e06449537114112fa8743152", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/2b186c15e78b9036e06449537114112fa8743152", "committedDate": "2020-05-28T02:41:02Z", "message": "Fix unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/840aa20edc2aba32f67f20777b3bb300dfe72ea3", "committedDate": "2020-05-28T02:41:40Z", "message": "Run spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5Nzc3MTkz", "url": "https://github.com/ConsenSys/teku/pull/1971#pullrequestreview-419777193", "createdAt": "2020-05-28T04:58:03Z", "commit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNDo1ODowM1rOGblpWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToyODo0MlrOGbmIeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MTUyOA==", "bodyText": "I feel like we should always set the indexed attestation - we've calculated it now so may as well keep it for as long as we keep the Attestation around.  It shouldn't get used but just feels wrong to have a system setup to cache things like this and then not always cache them.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431581528", "createdAt": "2020-05-28T04:58:03Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java", "diffHunk": "@@ -290,24 +292,48 @@ private static boolean blockDescendsFromLatestFinalizedBlock(\n   @CheckReturnValue\n   public static AttestationProcessingResult on_attestation(\n       final MutableStore store,\n-      final Attestation attestation,\n+      final ValidateableAttestation validateableAttestation,\n       final StateTransition stateTransition,\n       final ForkChoiceStrategy forkChoiceStrategy) {\n \n+    Attestation attestation = validateableAttestation.getAttestation();\n     Checkpoint target = attestation.getData().getTarget();\n \n     return validateOnAttestation(store, attestation)\n         .ifSuccessful(() -> storeTargetCheckpointState(store, stateTransition, target))\n         .ifSuccessful(\n-            () ->\n-                validateAndApplyIndexedAttestation(store, attestation, target, forkChoiceStrategy));\n+            () -> {\n+              Optional<IndexedAttestation> maybeIndexedAttestation =\n+                  indexAndValidateAttestation(store, attestation, target);\n+\n+              if (maybeIndexedAttestation.isEmpty()) {\n+                return INVALID;\n+              }\n+\n+              IndexedAttestation indexedAttestation = maybeIndexedAttestation.get();\n+              AttestationProcessingResult result =\n+                  checkIfAttestationShouldBeSavedForFuture(store, attestation);\n+\n+              if (result.isSuccessful()) {\n+                forkChoiceStrategy.onAttestation(store, indexedAttestation);\n+              } else {\n+                validateableAttestation.setIndexedAttestation(indexedAttestation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MTg5Nw==", "bodyText": "These should be volatile since we might access from multiple threads.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431581897", "createdAt": "2020-05-28T04:59:40Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private final Optional<SignedAggregateAndProof> maybeAggregate;\n+  private final AtomicBoolean gossiped;\n+\n+  private Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();\n+  private Optional<Bytes32> hashTreeRoot = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MjE2OA==", "bodyText": "Initial value is always false so probably should just use\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final AtomicBoolean gossiped;\n          \n          \n            \n              private final AtomicBoolean gossiped = new AtomicBoolean(false);", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431582168", "createdAt": "2020-05-28T05:00:41Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private final Optional<SignedAggregateAndProof> maybeAggregate;\n+  private final AtomicBoolean gossiped;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Mjc3OA==", "bodyText": "Nothing appears to set hashTreeRoot.  Would probably make more sense to use guava's memoize function: this.hashTreeRoot = Suppliers.memoize(() -> attestation.hash_tree_root())  in the constructor (would then be Supplier<Bytes32> hashTreeRoot and just call hashTreeRoot.get() here.  The memoize function will handle ensuring the root is only calculated once and cached properly.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431582778", "createdAt": "2020-05-28T05:03:22Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private final Optional<SignedAggregateAndProof> maybeAggregate;\n+  private final AtomicBoolean gossiped;\n+\n+  private Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();\n+  private Optional<Bytes32> hashTreeRoot = Optional.empty();\n+\n+  public static ValidateableAttestation fromSingle(Attestation attestation) {\n+    return new ValidateableAttestation(attestation, Optional.empty(), false);\n+  }\n+\n+  public static ValidateableAttestation fromAggregate(SignedAggregateAndProof attestation) {\n+    return new ValidateableAttestation(\n+        attestation.getMessage().getAggregate(), Optional.of(attestation), false);\n+  }\n+\n+  private ValidateableAttestation(\n+      Attestation attestation,\n+      Optional<SignedAggregateAndProof> aggregateAndProof,\n+      boolean gossiped) {\n+    this.maybeAggregate = aggregateAndProof;\n+    this.attestation = attestation;\n+    this.gossiped = new AtomicBoolean(gossiped);\n+  }\n+\n+  public IndexedAttestation getIndexedAttestation() {\n+    return maybeIndexedAttestation.orElseThrow(\n+        () ->\n+            new UnsupportedOperationException(\n+                \"ValidateableAttestation does not have an IndexedAttestation yet.\"));\n+  }\n+\n+  public void setIndexedAttestation(IndexedAttestation maybeIndexedAttestation) {\n+    this.maybeIndexedAttestation = Optional.of(maybeIndexedAttestation);\n+  }\n+\n+  public boolean markGossiped() {\n+    return gossiped.compareAndSet(false, true);\n+  }\n+\n+  public boolean isGossiped() {\n+    return gossiped.get();\n+  }\n+\n+  public boolean isAggregate() {\n+    return maybeAggregate.isPresent();\n+  }\n+\n+  public Attestation getAttestation() {\n+    return attestation;\n+  }\n+\n+  public SignedAggregateAndProof getSignedAggregateAndProof() {\n+    return maybeAggregate.orElseThrow(\n+        () -> new UnsupportedOperationException(\"ValidateableAttestation is not an aggregate.\"));\n+  }\n+\n+  public UnsignedLong getEarliestSlotForForkChoiceProcessing() {\n+    return attestation.getEarliestSlotForForkChoiceProcessing();\n+  }\n+\n+  public Collection<Bytes32> getDependentBlockRoots() {\n+    return attestation.getDependentBlockRoots();\n+  }\n+\n+  public Bytes32 hash_tree_root() {\n+    return hashTreeRoot.orElse(attestation.hash_tree_root());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MzQyOA==", "bodyText": "Not sure it makes sense to only notify listeners if the attestation hasn't been gossiped.  We don't know that the listener is gossiping it and we aren't marking it as gossiped.  Suspect here we should always notify subscribers, and then the subscriber that does the gossiping can check if it has already gossiped the attestation and ignore the notification if required.\nThis method would then just be notifySubscribers\nSlightly tempted not to differentiate between single and aggregate attestations here either and again let consumers decide if they need to differentiate between the two.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431583428", "createdAt": "2020-05-28T05:06:05Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition.attestation;\n+\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.attestation.ProcessedAggregateConsumer;\n+import tech.pegasys.teku.datastructures.attestation.ProcessedAttestationConsumer;\n+import tech.pegasys.teku.datastructures.attestation.ValidateableAttestation;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.service.serviceutils.Service;\n+import tech.pegasys.teku.statetransition.events.block.ImportedBlockEvent;\n+import tech.pegasys.teku.statetransition.util.FutureItems;\n+import tech.pegasys.teku.statetransition.util.PendingPool;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.events.Subscribers;\n+import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n+\n+public class AttestationManager extends Service implements SlotEventsChannel {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final EventBus eventBus;\n+  private final ForkChoiceAttestationProcessor attestationProcessor;\n+\n+  private final PendingPool<ValidateableAttestation> pendingAttestations;\n+  private final FutureItems<ValidateableAttestation> futureAttestations;\n+  private final AggregatingAttestationPool aggregatingAttestationPool;\n+\n+  private final Subscribers<ProcessedAttestationConsumer> processedAttestationSubscriber =\n+      Subscribers.create(true);\n+  private final Subscribers<ProcessedAggregateConsumer> processedAggregateSubscriber =\n+      Subscribers.create(true);\n+\n+  AttestationManager(\n+      final EventBus eventBus,\n+      final ForkChoiceAttestationProcessor attestationProcessor,\n+      final PendingPool<ValidateableAttestation> pendingAttestations,\n+      final FutureItems<ValidateableAttestation> futureAttestations,\n+      final AggregatingAttestationPool aggregatingAttestationPool) {\n+    this.eventBus = eventBus;\n+    this.attestationProcessor = attestationProcessor;\n+    this.pendingAttestations = pendingAttestations;\n+    this.futureAttestations = futureAttestations;\n+    this.aggregatingAttestationPool = aggregatingAttestationPool;\n+  }\n+\n+  public static AttestationManager create(\n+      final EventBus eventBus,\n+      final PendingPool<ValidateableAttestation> pendingAttestations,\n+      final FutureItems<ValidateableAttestation> futureAttestations,\n+      final ForkChoiceAttestationProcessor forkChoiceAttestationProcessor,\n+      final AggregatingAttestationPool aggregatingAttestationPool) {\n+    return new AttestationManager(\n+        eventBus,\n+        forkChoiceAttestationProcessor,\n+        pendingAttestations,\n+        futureAttestations,\n+        aggregatingAttestationPool);\n+  }\n+\n+  public void subscribeToProcessedAttestations(\n+      ProcessedAttestationConsumer processedAttestationConsumer) {\n+    processedAttestationSubscriber.subscribe(processedAttestationConsumer);\n+  }\n+\n+  public void subscribeToProcessedAggregates(\n+      ProcessedAggregateConsumer processedAggregateConsumer) {\n+    processedAggregateSubscriber.subscribe(processedAggregateConsumer);\n+  }\n+\n+  @Override\n+  public void onSlot(final UnsignedLong slot) {\n+    List<ValidateableAttestation> attestations = futureAttestations.prune(slot);\n+    attestations.stream()\n+        .map(ValidateableAttestation::getIndexedAttestation)\n+        .forEach(attestationProcessor::applyIndexedAttestationToForkChoice);\n+\n+    attestations.forEach(this::gossipAttestationIfNeeded);\n+  }\n+\n+  private void gossipAttestationIfNeeded(ValidateableAttestation attestation) {\n+    if (attestation.isGossiped()) {\n+      return;\n+    }\n+\n+    if (attestation.isAggregate()) {\n+      processedAggregateSubscriber.forEach(s -> s.accept(attestation));\n+    } else {\n+      processedAttestationSubscriber.forEach(s -> s.accept(attestation));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Njc4Mw==", "bodyText": "I'd introduce an AttestationListener interface and use it here instead of AttestationManager.  Actually I think the same interface could be used here and for processed attestations (instead of ProcessedAttestationConsumer.  It's the same role for a listener (tell me about attestations) just applied in different contexts (and it's still much more specific than just Consumer<Attestation> which I think is useful.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431586783", "createdAt": "2020-05-28T05:18:44Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2Network.java", "diffHunk": "@@ -23,4 +24,6 @@\n   void unsubscribeFromAttestationSubnetId(final int subnetId);\n \n   void setLongTermAttestationSubnetSubscriptions(final Iterable<Integer> subnetIndices);\n+\n+  void subscribeToAttestations(AttestationManager attestationManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Njk0MQ==", "bodyText": "nit: Probably could rename the method to attestationListener or attestationConsumer.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431586941", "createdAt": "2020-05-28T05:19:22Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2NetworkBuilder.java", "diffHunk": "@@ -151,6 +154,13 @@ public Eth2NetworkBuilder recentChainData(final RecentChainData recentChainData)\n     return this;\n   }\n \n+  public Eth2NetworkBuilder upstreamAttestationPipe(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4OTQ5OA==", "bodyText": "nit: Probably rename this method too.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431589498", "createdAt": "2020-05-28T05:28:42Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/testFixtures/java/tech/pegasys/teku/networking/eth2/Eth2NetworkFactory.java", "diffHunk": "@@ -246,6 +249,13 @@ public Eth2P2PNetworkBuilder recentChainData(final RecentChainData recentChainDa\n       return this;\n     }\n \n+    public Eth2P2PNetworkBuilder upstreamAttestationPipe(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6822a1ed59e26e8a7208d2afcffb4061036ada6d", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/6822a1ed59e26e8a7208d2afcffb4061036ada6d", "committedDate": "2020-05-28T15:45:15Z", "message": "Set indexed attestation cache regardless of attestation label"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "178240960aafe60f06e391e1e98e9b8a5fa728c0", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/178240960aafe60f06e391e1e98e9b8a5fa728c0", "committedDate": "2020-05-28T15:46:11Z", "message": "Make variables volatile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ce5fdcd21983e28201e14e9d704a50cf8f8792d", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/2ce5fdcd21983e28201e14e9d704a50cf8f8792d", "committedDate": "2020-05-28T15:47:20Z", "message": "Set gossiped false on declaration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30db74181ff15fe850066d922ce21e87f4b7781b", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/30db74181ff15fe850066d922ce21e87f4b7781b", "committedDate": "2020-05-28T15:52:36Z", "message": "Use suppliers.memoize to cache the hashTreeRoot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c4ce1153d44ca982b1f98b8fb23be0b310dbe67", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/7c4ce1153d44ca982b1f98b8fb23be0b310dbe67", "committedDate": "2020-05-28T17:31:53Z", "message": "Move gossiping logic to Networking layer & fix integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f100339ccd23d3b2a2ca736c262e03aebbb90885", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/f100339ccd23d3b2a2ca736c262e03aebbb90885", "committedDate": "2020-05-28T17:35:01Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c505b4e670ee0efeb3dbb59cf446546ca8c004f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/2c505b4e670ee0efeb3dbb59cf446546ca8c004f", "committedDate": "2020-05-28T17:54:04Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into validateableAttestations\n\n# Conflicts:\n#\tethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java\n#\tethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/forkchoice/DelayableAttestation.java\n#\tethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java\n#\tethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/ForkChoiceAttestationProcessor.java\n#\tethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java\n#\tnetworking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/ActiveEth2Network.java\n#\tsync/src/test/java/tech/pegasys/teku/sync/AttestationManagerTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57f0b3b20c489fe075cf600aaff917a1f04f8d20", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/57f0b3b20c489fe075cf600aaff917a1f04f8d20", "committedDate": "2020-05-28T18:12:02Z", "message": "Delete redundant file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTMxNTY0", "url": "https://github.com/ConsenSys/teku/pull/1971#pullrequestreview-420531564", "createdAt": "2020-05-28T22:17:39Z", "commit": {"oid": "57f0b3b20c489fe075cf600aaff917a1f04f8d20"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoxNzo0MFrOGcIqHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoxOTo0MFrOGcIs5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1NTE2NQ==", "bodyText": "Given you cleverly made markGossiped return a boolean, I'd do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (validateableAttestation.isGossiped() || validateableAttestation.isAggregate()) {\n          \n          \n            \n                if (validateableAttestation.isAggregate() || !validateableAttestation.markedGossiped()) {\n          \n      \n    \n    \n  \n\nThen you have no risk of two thread gossiping it at the same time.  In any case you need to markGossiped here to be sure we don't gossip it again later (we shouldn't with the current flow of things but that may change).", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r432155165", "createdAt": "2020-05-28T22:17:40Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationGossipManager.java", "diffHunk": "@@ -28,22 +27,21 @@\n \n   private final GossipEncoding gossipEncoding;\n   private final AttestationSubnetSubscriptions subnetSubscriptions;\n-  private final EventBus eventBus;\n \n   private final AtomicBoolean shutdown = new AtomicBoolean(false);\n \n   public AttestationGossipManager(\n       final GossipEncoding gossipEncoding,\n-      final AttestationSubnetSubscriptions attestationSubnetSubscriptions,\n-      final EventBus eventBus) {\n+      final AttestationSubnetSubscriptions attestationSubnetSubscriptions) {\n     this.gossipEncoding = gossipEncoding;\n     subnetSubscriptions = attestationSubnetSubscriptions;\n-    this.eventBus = eventBus;\n-    eventBus.register(this);\n   }\n \n-  @Subscribe\n-  public void onNewAttestation(final Attestation attestation) {\n+  public void onNewAttestation(final ValidateableAttestation validateableAttestation) {\n+    if (validateableAttestation.isGossiped() || validateableAttestation.isAggregate()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f0b3b20c489fe075cf600aaff917a1f04f8d20"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1NTg3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (validateableAttestation.isGossiped() || !validateableAttestation.isAggregate()) {\n          \n          \n            \n                if (!validateableAttestation.isAggregate() || !validateableAttestation.markGossiped()) {\n          \n      \n    \n    \n  \n\nas per comments below.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r432155879", "createdAt": "2020-05-28T22:19:40Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AggregateGossipManager.java", "diffHunk": "@@ -37,26 +35,26 @@ public AggregateGossipManager(\n       final GossipEncoding gossipEncoding,\n       final ForkInfo forkInfo,\n       final SignedAggregateAndProofValidator validator,\n-      final EventBus eventBus) {\n+      final GossipedAttestationConsumer gossipedAttestationConsumer) {\n     this.gossipEncoding = gossipEncoding;\n-\n-    final AggregateTopicHandler aggregateTopicHandler =\n-        new AggregateTopicHandler(gossipEncoding, forkInfo, validator, eventBus);\n-    this.channel = gossipNetwork.subscribe(aggregateTopicHandler.getTopic(), aggregateTopicHandler);\n-\n-    this.eventBus = eventBus;\n-    eventBus.register(this);\n+    final AggregateAttestationTopicHandler aggregateAttestationTopicHandler =\n+        new AggregateAttestationTopicHandler(\n+            gossipEncoding, forkInfo, validator, gossipedAttestationConsumer);\n+    this.channel =\n+        gossipNetwork.subscribe(\n+            aggregateAttestationTopicHandler.getTopic(), aggregateAttestationTopicHandler);\n   }\n \n-  @Subscribe\n-  public void onNewAggregate(final SignedAggregateAndProof aggregateAndProof) {\n-    final Bytes data = gossipEncoding.encode(aggregateAndProof);\n+  public void onNewAggregate(final ValidateableAttestation validateableAttestation) {\n+    if (validateableAttestation.isGossiped() || !validateableAttestation.isAggregate()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f0b3b20c489fe075cf600aaff917a1f04f8d20"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57ea522431ec6882932af76af196b55a0bc354a2", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/57ea522431ec6882932af76af196b55a0bc354a2", "committedDate": "2020-05-28T23:09:02Z", "message": "Mark gossiped attestations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c17d278b2debbba598fa099a6f70a10e5363a47", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/6c17d278b2debbba598fa099a6f70a10e5363a47", "committedDate": "2020-05-28T23:10:18Z", "message": "Mark valid attestations from network gossiped"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fcd72f93f382c5ad6369576a30d9abec07fa20d", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/0fcd72f93f382c5ad6369576a30d9abec07fa20d", "committedDate": "2020-05-28T23:12:29Z", "message": "Merge branch 'master' into validateableAttestations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "242ffdce5b3ca4c157512d1f165127229f205e43", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/242ffdce5b3ca4c157512d1f165127229f205e43", "committedDate": "2020-05-28T23:30:11Z", "message": "Merge branch 'master' into validateableAttestations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df7b15ddf77445020ae7558ff79e32f69203a8c7", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/df7b15ddf77445020ae7558ff79e32f69203a8c7", "committedDate": "2020-05-29T01:13:03Z", "message": "Merge branch 'master' into validateableAttestations"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4041, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}