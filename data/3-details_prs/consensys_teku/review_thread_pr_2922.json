{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMTU4MjM3", "number": 2922, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDozMDozM1rOErx3Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDozNzoxOFrOErx__A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzQxMjA3OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/BeaconRestApi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDozMDozM1rOHevShw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToxODoyN1rOHewxEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5NDExOQ==", "bodyText": "This is redundant - it will throw a NullPointerException with or without requireNonNull because that's what requireNonNull does when the param is null.  We shouldn't make any change here - the server is known to not be null at this point, just the analyser doesn't know that.", "url": "https://github.com/ConsenSys/teku/pull/2922#discussion_r501994119", "createdAt": "2020-10-08T20:30:33Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -105,8 +107,8 @@ private void initialize(\n             return jettyServer;\n           });\n     }\n-    app.server().setServerHost(configuration.getRestApiInterface());\n-    app.server().setServerPort(configuration.getRestApiPort());\n+    Objects.requireNonNull(app.server()).setServerHost(configuration.getRestApiInterface());\n+    Objects.requireNonNull(app.server()).setServerPort(configuration.getRestApiPort());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74c12083df136f0b8a38b8f131a0ed62dc918853"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAxODMyMg==", "bodyText": "Makes sense. Done.", "url": "https://github.com/ConsenSys/teku/pull/2922#discussion_r502018322", "createdAt": "2020-10-08T21:18:27Z", "author": {"login": "cemozerr"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -105,8 +107,8 @@ private void initialize(\n             return jettyServer;\n           });\n     }\n-    app.server().setServerHost(configuration.getRestApiInterface());\n-    app.server().setServerPort(configuration.getRestApiPort());\n+    Objects.requireNonNull(app.server()).setServerHost(configuration.getRestApiInterface());\n+    Objects.requireNonNull(app.server()).setServerPort(configuration.getRestApiPort());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5NDExOQ=="}, "originalCommit": {"oid": "74c12083df136f0b8a38b8f131a0ed62dc918853"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzQxNjc2OnYy", "diffSide": "LEFT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/BlockValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDozMjowMFrOHevVWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToxOToxOFrOHewypQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5NDg0Mg==", "bodyText": "I'd restore this.  While it is redundant today, it's not a good idea to catch and ignore an error then continue on. If code was later added after the catch block, the missing return here would likely go unnoticed and cause bugs.", "url": "https://github.com/ConsenSys/teku/pull/2922#discussion_r501994842", "createdAt": "2020-10-08T20:32:00Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/BlockValidator.java", "diffHunk": "@@ -87,7 +88,6 @@ public BlockValidator(RecentChainData recentChainData, StateTransition stateTran\n                 }\n               } catch (EpochProcessingException | SlotProcessingException e) {\n                 LOG.error(\"BlockValidator: Unable to process block state.\", e);\n-                return InternalValidationResult.REJECT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "701d694d16b52f90d1e2291c82f1052e69cc9096"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAxODcyNQ==", "bodyText": "Makes sense. Done.", "url": "https://github.com/ConsenSys/teku/pull/2922#discussion_r502018725", "createdAt": "2020-10-08T21:19:18Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/BlockValidator.java", "diffHunk": "@@ -87,7 +88,6 @@ public BlockValidator(RecentChainData recentChainData, StateTransition stateTran\n                 }\n               } catch (EpochProcessingException | SlotProcessingException e) {\n                 LOG.error(\"BlockValidator: Unable to process block state.\", e);\n-                return InternalValidationResult.REJECT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5NDg0Mg=="}, "originalCommit": {"oid": "701d694d16b52f90d1e2291c82f1052e69cc9096"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzQzMDM0OnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/teku/api/ValidatorDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDozNjowNlrOHevdpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo1MDowN1rOHfTYNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5Njk2Nw==", "bodyText": "Do these need to be public?  And can we use a predefined constant like from HttpServletResponse or one of the various HttpStatus classes?", "url": "https://github.com/ConsenSys/teku/pull/2922#discussion_r501996967", "createdAt": "2020-10-08T20:36:06Z", "author": {"login": "ajsutton"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/ValidatorDataProvider.java", "diffHunk": "@@ -62,6 +63,10 @@\n   private CombinedChainDataClient combinedChainDataClient;\n   private final BlockImporter blockImporter;\n \n+  public static final int INTERNAL_ERROR_HTTP_CODE = 500;\n+  public static final int ACCEPTED_HTTP_CODE = 202;\n+  public static final int OK_HTTP_CODE = 200;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab37079c850887a515e660116893c4be026f4cd0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4NTM5Ng==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2922#discussion_r502585396", "createdAt": "2020-10-09T17:50:07Z", "author": {"login": "cemozerr"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/ValidatorDataProvider.java", "diffHunk": "@@ -62,6 +63,10 @@\n   private CombinedChainDataClient combinedChainDataClient;\n   private final BlockImporter blockImporter;\n \n+  public static final int INTERNAL_ERROR_HTTP_CODE = 500;\n+  public static final int ACCEPTED_HTTP_CODE = 202;\n+  public static final int OK_HTTP_CODE = 200;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5Njk2Nw=="}, "originalCommit": {"oid": "ab37079c850887a515e660116893c4be026f4cd0"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzQzNDIwOnYy", "diffSide": "RIGHT", "path": "teku/src/main/java/tech/pegasys/teku/cli/deposit/DepositTransactionSender.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDozNzoxOFrOHevf9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzoxNzowNFrOHgQHJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5NzU1OQ==", "bodyText": "This constant is redundant and just makes the code harder to read.  We're literally in a method called getGasLimit so I think it's clear what the 200_000 means and REASONABLE_GAS_LIMIT doesn't provide any additional information, but does make the actual value one step further removed so harder to find.", "url": "https://github.com/ConsenSys/teku/pull/2922#discussion_r501997559", "createdAt": "2020-10-08T20:37:18Z", "author": {"login": "ajsutton"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/deposit/DepositTransactionSender.java", "diffHunk": "@@ -128,7 +130,7 @@ public BigInteger getGasLimit(final String contractFunc) {\n \n     @Override\n     public BigInteger getGasLimit() {\n-      return BigInteger.valueOf(200_000L);\n+      return BigInteger.valueOf(REASONABLE_GAS_LIMIT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b345d26e613383b9b6fb88728d30308d4d4b5cf6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MDQ1Mg==", "bodyText": "agree, if we were going to do that you'd be better off just having a constant declared and referencing the constant rather than calling another function to access it...", "url": "https://github.com/ConsenSys/teku/pull/2922#discussion_r503580452", "createdAt": "2020-10-12T23:17:04Z", "author": {"login": "rolfyone"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/deposit/DepositTransactionSender.java", "diffHunk": "@@ -128,7 +130,7 @@ public BigInteger getGasLimit(final String contractFunc) {\n \n     @Override\n     public BigInteger getGasLimit() {\n-      return BigInteger.valueOf(200_000L);\n+      return BigInteger.valueOf(REASONABLE_GAS_LIMIT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5NzU1OQ=="}, "originalCommit": {"oid": "b345d26e613383b9b6fb88728d30308d4d4b5cf6"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3159, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}