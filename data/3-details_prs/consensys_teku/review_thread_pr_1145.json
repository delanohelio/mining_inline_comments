{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMzgyMjU1", "number": 1145, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoxOTo1MVrODeoHvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjozMzowOVrODeoXFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDQxMjEyOnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoxOTo1MVrOFn3sJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1MDozMlrOFn4gjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MTIwNQ==", "bodyText": "I probably wouldn't rename this - depositMerkleTree  includes the important information that this is for deposits, not just that it's a merkle trie (side note: should be trie everywhere not tree but that can be for another day)", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377351205", "createdAt": "2020-02-10T22:19:51Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java", "diffHunk": "@@ -44,8 +44,8 @@\n import tech.pegasys.artemis.util.hashtree.HashTreeUtil;\n \n public class GenesisGenerator {\n-  private final MerkleTree<Bytes32> depositMerkleTree =\n-      new MerkleTree<>(DEPOSIT_CONTRACT_TREE_DEPTH);\n+  private final OptimizedMerkleTree merkleTree =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NDYyMQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377364621", "createdAt": "2020-02-10T22:50:32Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java", "diffHunk": "@@ -44,8 +44,8 @@\n import tech.pegasys.artemis.util.hashtree.HashTreeUtil;\n \n public class GenesisGenerator {\n-  private final MerkleTree<Bytes32> depositMerkleTree =\n-      new MerkleTree<>(DEPOSIT_CONTRACT_TREE_DEPTH);\n+  private final OptimizedMerkleTree merkleTree =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MTIwNQ=="}, "originalCommit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDQxNTIxOnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/MerkleTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoyMDo1MlrOFn3uEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzowMDowNlrOFn4v2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MTY5OA==", "bodyText": "nit: usually worth having the assertions first and we probably should be consistent in using checkArgument rather than the assert keyword.", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377351698", "createdAt": "2020-02-10T22:20:52Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/MerkleTree.java", "diffHunk": "@@ -22,40 +22,34 @@\n import org.apache.tuweni.crypto.Hash;\n import tech.pegasys.artemis.util.SSZTypes.SSZVector;\n \n-public class MerkleTree<T> {\n-  private final List<List<Bytes32>> tree;\n-  private final List<Bytes32> zeroHashes;\n-  private final int height;\n-  private boolean dirty = true;\n+abstract class MerkleTree {\n+  protected final List<List<Bytes32>> tree;\n+  protected final List<Bytes32> zeroHashes;\n+  protected final int treeDepth;\n \n-  public MerkleTree(int height) {\n-    assert (height > 1);\n-    this.height = height;\n-    tree = new ArrayList<List<Bytes32>>();\n-    for (int i = 0; i <= height; i++) {\n-      tree.add(new ArrayList<Bytes32>());\n+  protected MerkleTree(int treeDepth) {\n+    this.treeDepth = treeDepth;\n+    assert (treeDepth > 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2ODUzOQ==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377368539", "createdAt": "2020-02-10T23:00:06Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/MerkleTree.java", "diffHunk": "@@ -22,40 +22,34 @@\n import org.apache.tuweni.crypto.Hash;\n import tech.pegasys.artemis.util.SSZTypes.SSZVector;\n \n-public class MerkleTree<T> {\n-  private final List<List<Bytes32>> tree;\n-  private final List<Bytes32> zeroHashes;\n-  private final int height;\n-  private boolean dirty = true;\n+abstract class MerkleTree {\n+  protected final List<List<Bytes32>> tree;\n+  protected final List<Bytes32> zeroHashes;\n+  protected final int treeDepth;\n \n-  public MerkleTree(int height) {\n-    assert (height > 1);\n-    this.height = height;\n-    tree = new ArrayList<List<Bytes32>>();\n-    for (int i = 0; i <= height; i++) {\n-      tree.add(new ArrayList<Bytes32>());\n+  protected MerkleTree(int treeDepth) {\n+    this.treeDepth = treeDepth;\n+    assert (treeDepth > 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MTY5OA=="}, "originalCommit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDQyOTE5OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/OptimizedMerkleTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoyNTo0NVrOFn32xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1NDoyNVrOFn4nBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MzkyNA==", "bodyText": "Needs an @Override annotation.", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377353924", "createdAt": "2020-02-10T22:25:45Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/OptimizedMerkleTree.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util;\n+\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.crypto.Hash;\n+\n+public class OptimizedMerkleTree extends MerkleTree {\n+\n+  public OptimizedMerkleTree(int treeDepth) {\n+    super(treeDepth);\n+  }\n+\n+  public void add(Bytes32 leaf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NjI3OA==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377366278", "createdAt": "2020-02-10T22:54:25Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/OptimizedMerkleTree.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util;\n+\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.crypto.Hash;\n+\n+public class OptimizedMerkleTree extends MerkleTree {\n+\n+  public OptimizedMerkleTree(int treeDepth) {\n+    super(treeDepth);\n+  }\n+\n+  public void add(Bytes32 leaf) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MzkyNA=="}, "originalCommit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDQzNDkyOnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/OptimizedMerkleTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoyNzo1MlrOFn36dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1NDoxNlrOFn4m1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NDg2OA==", "bodyText": "should use .equals instead of == when comparing hashes.  It will likely work both ways but only because of implementation details so better to not depend on object equality here.", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377354868", "createdAt": "2020-02-10T22:27:52Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/OptimizedMerkleTree.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util;\n+\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.crypto.Hash;\n+\n+public class OptimizedMerkleTree extends MerkleTree {\n+\n+  public OptimizedMerkleTree(int treeDepth) {\n+    super(treeDepth);\n+  }\n+\n+  public void add(Bytes32 leaf) {\n+    if (!tree.get(0).isEmpty() && tree.get(0).get(tree.get(0).size() - 1) == zeroHashes.get(0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NjIzMA==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377366230", "createdAt": "2020-02-10T22:54:16Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/OptimizedMerkleTree.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util;\n+\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.crypto.Hash;\n+\n+public class OptimizedMerkleTree extends MerkleTree {\n+\n+  public OptimizedMerkleTree(int treeDepth) {\n+    super(treeDepth);\n+  }\n+\n+  public void add(Bytes32 leaf) {\n+    if (!tree.get(0).isEmpty() && tree.get(0).get(tree.get(0).size() - 1) == zeroHashes.get(0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NDg2OA=="}, "originalCommit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDQ0NTk1OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/merkletree/OptimizedMerkleTreeTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjozMToxNlrOFn4ArA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1Mzo0NFrOFn4l5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NjQ2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OptimizedMerkleTreeTests {\n          \n          \n            \n            public class OptimizedMerkleTreeTest {\n          \n      \n    \n    \n  \n\nEnding test classes with Test is a strong convention we should stick to (and often build tools actually search specifically for *Test classes to run.", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377356460", "createdAt": "2020-02-10T22:31:16Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/merkletree/OptimizedMerkleTreeTests.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.merkletree;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.datastructures.util.OptimizedMerkleTree;\n+import tech.pegasys.artemis.datastructures.util.SimpleMerkleTree;\n+\n+public class OptimizedMerkleTreeTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NTk4OQ==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377365989", "createdAt": "2020-02-10T22:53:44Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/merkletree/OptimizedMerkleTreeTests.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.merkletree;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.datastructures.util.OptimizedMerkleTree;\n+import tech.pegasys.artemis.datastructures.util.SimpleMerkleTree;\n+\n+public class OptimizedMerkleTreeTests {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NjQ2MA=="}, "originalCommit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDQ1MTQzOnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/merkletree/OptimizedMerkleTreeTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjozMzowOVrOFn4ECw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1Njo1OVrOFn4rQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NzMyMw==", "bodyText": "We should remove this or convert it to an actual jmh test in a benchmarks source tree.", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377357323", "createdAt": "2020-02-10T22:33:09Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/merkletree/OptimizedMerkleTreeTests.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.merkletree;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.datastructures.util.OptimizedMerkleTree;\n+import tech.pegasys.artemis.datastructures.util.SimpleMerkleTree;\n+\n+public class OptimizedMerkleTreeTests {\n+\n+  private int seed = 0;\n+\n+  private final int treeDepth = 32;\n+  private OptimizedMerkleTree optimizedMT;\n+  private SimpleMerkleTree simpleMT;\n+\n+  @BeforeEach\n+  void setUp() {\n+    optimizedMT = new OptimizedMerkleTree(treeDepth);\n+    simpleMT = new SimpleMerkleTree(treeDepth);\n+  }\n+\n+  @Test\n+  void test() {\n+    Bytes32 leaf = DataStructureUtil.randomBytes32(seed);\n+    optimizedMT.add(leaf);\n+    simpleMT.add(leaf);\n+    assertThat(optimizedMT.getProofTreeByValue(leaf)).isEqualTo(simpleMT.getProofTreeByValue(leaf));\n+  }\n+\n+  @Test\n+  void makeSureAllProofsMatch() {\n+\n+    List<Bytes32> leaves =\n+        IntStream.range(0, 10000)\n+            .mapToObj(\n+                i -> {\n+                  Bytes32 leaf = DataStructureUtil.randomBytes32(seed++);\n+                  optimizedMT.add(leaf);\n+                  simpleMT.add(leaf);\n+                  return leaf;\n+                })\n+            .collect(Collectors.toList());\n+\n+    leaves.forEach(\n+        (leaf) ->\n+            assertThat(optimizedMT.getProofTreeByValue(leaf))\n+                .isEqualTo(simpleMT.getProofTreeByValue(leaf)));\n+  }\n+\n+  @Test\n+  void checkSpeed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NzM2Mg==", "bodyText": "Removed.", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377367362", "createdAt": "2020-02-10T22:56:59Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/merkletree/OptimizedMerkleTreeTests.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.merkletree;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.datastructures.util.OptimizedMerkleTree;\n+import tech.pegasys.artemis.datastructures.util.SimpleMerkleTree;\n+\n+public class OptimizedMerkleTreeTests {\n+\n+  private int seed = 0;\n+\n+  private final int treeDepth = 32;\n+  private OptimizedMerkleTree optimizedMT;\n+  private SimpleMerkleTree simpleMT;\n+\n+  @BeforeEach\n+  void setUp() {\n+    optimizedMT = new OptimizedMerkleTree(treeDepth);\n+    simpleMT = new SimpleMerkleTree(treeDepth);\n+  }\n+\n+  @Test\n+  void test() {\n+    Bytes32 leaf = DataStructureUtil.randomBytes32(seed);\n+    optimizedMT.add(leaf);\n+    simpleMT.add(leaf);\n+    assertThat(optimizedMT.getProofTreeByValue(leaf)).isEqualTo(simpleMT.getProofTreeByValue(leaf));\n+  }\n+\n+  @Test\n+  void makeSureAllProofsMatch() {\n+\n+    List<Bytes32> leaves =\n+        IntStream.range(0, 10000)\n+            .mapToObj(\n+                i -> {\n+                  Bytes32 leaf = DataStructureUtil.randomBytes32(seed++);\n+                  optimizedMT.add(leaf);\n+                  simpleMT.add(leaf);\n+                  return leaf;\n+                })\n+            .collect(Collectors.toList());\n+\n+    leaves.forEach(\n+        (leaf) ->\n+            assertThat(optimizedMT.getProofTreeByValue(leaf))\n+                .isEqualTo(simpleMT.getProofTreeByValue(leaf)));\n+  }\n+\n+  @Test\n+  void checkSpeed() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NzMyMw=="}, "originalCommit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2855, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}