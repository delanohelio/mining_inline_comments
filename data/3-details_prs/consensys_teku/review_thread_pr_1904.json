{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyOTI0NTMy", "number": 1904, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjozMzowNVrOD_wT4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjozNzozMFrOD_wakA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTc4NDAwOnYy", "diffSide": "RIGHT", "path": "teku/src/main/java/tech/pegasys/teku/TekuDefaultExceptionHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjozMzowNVrOGamppA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMToxMzoyNlrOGawhlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU0OTQxMg==", "bodyText": "This is a pretty bad test - we should probably make this more sophisticated at some point :D", "url": "https://github.com/ConsenSys/teku/pull/1904#discussion_r430549412", "createdAt": "2020-05-26T16:33:05Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/TekuDefaultExceptionHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.eventbus.SubscriberExceptionContext;\n+import com.google.common.eventbus.SubscriberExceptionHandler;\n+import java.lang.Thread.UncaughtExceptionHandler;\n+import java.lang.reflect.Method;\n+import java.util.function.Function;\n+import tech.pegasys.teku.events.ChannelExceptionHandler;\n+import tech.pegasys.teku.logging.StatusLogger;\n+\n+public final class TekuDefaultExceptionHandler\n+    implements SubscriberExceptionHandler,\n+        ChannelExceptionHandler,\n+        UncaughtExceptionHandler,\n+        Function<Throwable, Void> {\n+\n+  private final StatusLogger log;\n+\n+  public TekuDefaultExceptionHandler() {\n+    this(StatusLogger.STATUS_LOG);\n+  }\n+\n+  @VisibleForTesting\n+  TekuDefaultExceptionHandler(final StatusLogger log) {\n+    this.log = log;\n+  }\n+\n+  @Override\n+  public void handleException(final Throwable exception, final SubscriberExceptionContext context) {\n+    handleException(\n+        exception,\n+        \"event '\"\n+            + context.getEvent().getClass().getName()\n+            + \"'\"\n+            + \" in handler '\"\n+            + context.getSubscriber().getClass().getName()\n+            + \"'\"\n+            + \" (method  '\"\n+            + context.getSubscriberMethod().getName()\n+            + \"')\");\n+  }\n+\n+  @Override\n+  public void handleException(\n+      final Throwable error,\n+      final Object subscriber,\n+      final Method invokedMethod,\n+      final Object[] args) {\n+    handleException(\n+        error,\n+        \"event '\"\n+            + invokedMethod.getDeclaringClass()\n+            + \".\"\n+            + invokedMethod.getName()\n+            + \"' in handler '\"\n+            + subscriber.getClass().getName()\n+            + \"'\");\n+  }\n+\n+  @Override\n+  public void uncaughtException(final Thread t, final Throwable e) {\n+    handleException(e, t.getName());\n+  }\n+\n+  private void handleException(final Throwable exception, final String subscriberDescription) {\n+    if (isSpecFailure(exception)) {\n+      log.specificationFailure(subscriberDescription, exception);\n+    } else {\n+      log.unexpectedFailure(subscriberDescription, exception);\n+    }\n+    if (exception instanceof OutOfMemoryError) {\n+      System.exit(2);\n+    }\n+  }\n+\n+  private static boolean isSpecFailure(final Throwable exception) {\n+    return exception instanceof IllegalArgumentException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cbe0c7b87ec7f840d1c81c372dc3d9106978fab"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxMTE5MQ==", "bodyText": "Yeah, I'm really quite keen to remove all the checkArgument calls from within the spec code - even if we just replace them with a specPrecondition that throws a custom exception it would make this check a lot better.", "url": "https://github.com/ConsenSys/teku/pull/1904#discussion_r430711191", "createdAt": "2020-05-26T21:13:26Z", "author": {"login": "ajsutton"}, "path": "teku/src/main/java/tech/pegasys/teku/TekuDefaultExceptionHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.eventbus.SubscriberExceptionContext;\n+import com.google.common.eventbus.SubscriberExceptionHandler;\n+import java.lang.Thread.UncaughtExceptionHandler;\n+import java.lang.reflect.Method;\n+import java.util.function.Function;\n+import tech.pegasys.teku.events.ChannelExceptionHandler;\n+import tech.pegasys.teku.logging.StatusLogger;\n+\n+public final class TekuDefaultExceptionHandler\n+    implements SubscriberExceptionHandler,\n+        ChannelExceptionHandler,\n+        UncaughtExceptionHandler,\n+        Function<Throwable, Void> {\n+\n+  private final StatusLogger log;\n+\n+  public TekuDefaultExceptionHandler() {\n+    this(StatusLogger.STATUS_LOG);\n+  }\n+\n+  @VisibleForTesting\n+  TekuDefaultExceptionHandler(final StatusLogger log) {\n+    this.log = log;\n+  }\n+\n+  @Override\n+  public void handleException(final Throwable exception, final SubscriberExceptionContext context) {\n+    handleException(\n+        exception,\n+        \"event '\"\n+            + context.getEvent().getClass().getName()\n+            + \"'\"\n+            + \" in handler '\"\n+            + context.getSubscriber().getClass().getName()\n+            + \"'\"\n+            + \" (method  '\"\n+            + context.getSubscriberMethod().getName()\n+            + \"')\");\n+  }\n+\n+  @Override\n+  public void handleException(\n+      final Throwable error,\n+      final Object subscriber,\n+      final Method invokedMethod,\n+      final Object[] args) {\n+    handleException(\n+        error,\n+        \"event '\"\n+            + invokedMethod.getDeclaringClass()\n+            + \".\"\n+            + invokedMethod.getName()\n+            + \"' in handler '\"\n+            + subscriber.getClass().getName()\n+            + \"'\");\n+  }\n+\n+  @Override\n+  public void uncaughtException(final Thread t, final Throwable e) {\n+    handleException(e, t.getName());\n+  }\n+\n+  private void handleException(final Throwable exception, final String subscriberDescription) {\n+    if (isSpecFailure(exception)) {\n+      log.specificationFailure(subscriberDescription, exception);\n+    } else {\n+      log.unexpectedFailure(subscriberDescription, exception);\n+    }\n+    if (exception instanceof OutOfMemoryError) {\n+      System.exit(2);\n+    }\n+  }\n+\n+  private static boolean isSpecFailure(final Throwable exception) {\n+    return exception instanceof IllegalArgumentException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU0OTQxMg=="}, "originalCommit": {"oid": "3cbe0c7b87ec7f840d1c81c372dc3d9106978fab"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTc4NzgwOnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/teku/util/async/SafeFuture.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjozNDowM1rOGamsHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMToxNToyN1rOGawlGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1MDA0NQ==", "bodyText": "This seems like a good idea - but I'm afraid we'll end up bubbling up a lot of noise to the status logger now ...  Maybe the right answer is to make this change and add more custom handling where too much noise bubbles up.", "url": "https://github.com/ConsenSys/teku/pull/1904#discussion_r430550045", "createdAt": "2020-05-26T16:34:03Z", "author": {"login": "mbaxter"}, "path": "util/src/main/java/tech/pegasys/teku/util/async/SafeFuture.java", "diffHunk": "@@ -22,18 +22,16 @@\n import java.util.function.Function;\n import java.util.function.Supplier;\n import java.util.stream.Stream;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n \n public class SafeFuture<T> extends CompletableFuture<T> {\n-  private static final Logger LOG = LogManager.getLogger();\n \n   public static SafeFuture<Void> COMPLETE = SafeFuture.completedFuture(null);\n \n   public static void reportExceptions(final CompletionStage<?> future) {\n     future.exceptionally(\n         error -> {\n-          LOG.error(\"Unhandled exception\", error);\n+          final Thread currentThread = Thread.currentThread();\n+          currentThread.getUncaughtExceptionHandler().uncaughtException(currentThread, error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cbe0c7b87ec7f840d1c81c372dc3d9106978fab"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxMjA4OA==", "bodyText": "Yeah, we've have a lot of people confused that Teku was \"doing nothing\" because they couldn't see the errors on the console but in the logs errors were appearing all over the place.  Adding all the needed error handling instead of letting things reach the uncaught exception level (which is what reportExceptions is meant to be (possibly need a better name) is good.  We potentially should also set things up so that the console log doesn't show stack traces but the log file does.", "url": "https://github.com/ConsenSys/teku/pull/1904#discussion_r430712088", "createdAt": "2020-05-26T21:15:27Z", "author": {"login": "ajsutton"}, "path": "util/src/main/java/tech/pegasys/teku/util/async/SafeFuture.java", "diffHunk": "@@ -22,18 +22,16 @@\n import java.util.function.Function;\n import java.util.function.Supplier;\n import java.util.stream.Stream;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n \n public class SafeFuture<T> extends CompletableFuture<T> {\n-  private static final Logger LOG = LogManager.getLogger();\n \n   public static SafeFuture<Void> COMPLETE = SafeFuture.completedFuture(null);\n \n   public static void reportExceptions(final CompletionStage<?> future) {\n     future.exceptionally(\n         error -> {\n-          LOG.error(\"Unhandled exception\", error);\n+          final Thread currentThread = Thread.currentThread();\n+          currentThread.getUncaughtExceptionHandler().uncaughtException(currentThread, error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1MDA0NQ=="}, "originalCommit": {"oid": "3cbe0c7b87ec7f840d1c81c372dc3d9106978fab"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTgwMTEyOnYy", "diffSide": "RIGHT", "path": "teku/src/main/java/tech/pegasys/teku/TekuDefaultExceptionHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjozNzozMFrOGam0tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjozNzozMFrOGam0tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1MjI0NA==", "bodyText": "nice \ud83d\udcaf", "url": "https://github.com/ConsenSys/teku/pull/1904#discussion_r430552244", "createdAt": "2020-05-26T16:37:30Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/TekuDefaultExceptionHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.eventbus.SubscriberExceptionContext;\n+import com.google.common.eventbus.SubscriberExceptionHandler;\n+import java.lang.Thread.UncaughtExceptionHandler;\n+import java.lang.reflect.Method;\n+import java.util.function.Function;\n+import tech.pegasys.teku.events.ChannelExceptionHandler;\n+import tech.pegasys.teku.logging.StatusLogger;\n+\n+public final class TekuDefaultExceptionHandler\n+    implements SubscriberExceptionHandler,\n+        ChannelExceptionHandler,\n+        UncaughtExceptionHandler,\n+        Function<Throwable, Void> {\n+\n+  private final StatusLogger log;\n+\n+  public TekuDefaultExceptionHandler() {\n+    this(StatusLogger.STATUS_LOG);\n+  }\n+\n+  @VisibleForTesting\n+  TekuDefaultExceptionHandler(final StatusLogger log) {\n+    this.log = log;\n+  }\n+\n+  @Override\n+  public void handleException(final Throwable exception, final SubscriberExceptionContext context) {\n+    handleException(\n+        exception,\n+        \"event '\"\n+            + context.getEvent().getClass().getName()\n+            + \"'\"\n+            + \" in handler '\"\n+            + context.getSubscriber().getClass().getName()\n+            + \"'\"\n+            + \" (method  '\"\n+            + context.getSubscriberMethod().getName()\n+            + \"')\");\n+  }\n+\n+  @Override\n+  public void handleException(\n+      final Throwable error,\n+      final Object subscriber,\n+      final Method invokedMethod,\n+      final Object[] args) {\n+    handleException(\n+        error,\n+        \"event '\"\n+            + invokedMethod.getDeclaringClass()\n+            + \".\"\n+            + invokedMethod.getName()\n+            + \"' in handler '\"\n+            + subscriber.getClass().getName()\n+            + \"'\");\n+  }\n+\n+  @Override\n+  public void uncaughtException(final Thread t, final Throwable e) {\n+    handleException(e, t.getName());\n+  }\n+\n+  private void handleException(final Throwable exception, final String subscriberDescription) {\n+    if (isSpecFailure(exception)) {\n+      log.specificationFailure(subscriberDescription, exception);\n+    } else {\n+      log.unexpectedFailure(subscriberDescription, exception);\n+    }\n+    if (exception instanceof OutOfMemoryError) {\n+      System.exit(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cbe0c7b87ec7f840d1c81c372dc3d9106978fab"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3660, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}