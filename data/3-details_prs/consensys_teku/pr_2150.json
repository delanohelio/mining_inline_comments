{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0Mjc4MTY4", "number": 2150, "title": "Switch to using an explicit executor for async runner", "bodyText": "PR Description\nReplace DelayedExcecutorAsyncRunner with ScheduledExecutorAsyncFactory so that we can report metrics around queue sizes.  DelayedExecutorAsyncRunner is still being used in tests as it doesn't leak threads if not shutdown - not sure if we want to remove it and risk having tests that leak threads by failing to shutdown the executor.\nAlso tidies up the shutdown process so that we stop processing new events before we shutdown services - this fixes a bunch of exceptions on shutdown caused by attempting to update database transactions after the database is closed.\nCurrently the p2p thread pool is larger because it's using blocking IO.  Once #2005 lands we should be able to bring it back down to the default.  Note also that the thread limit is a maximum -each pool drops back to a single thread if it's idle.\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-06-15T04:27:49Z", "url": "https://github.com/ConsenSys/teku/pull/2150", "merged": true, "mergeCommit": {"oid": "19a751709efc907705f6ccd18048244f123e851c"}, "closed": true, "closedAt": "2020-06-18T21:09:45Z", "author": {"login": "ajsutton"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrY4RugH2gAyNDM0Mjc4MTY4OjM2MDI4NTUyMDlhZTRhYjlhYmQ0M2JmMmJjNjEwMjU2MmRlYzczZWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsk53MAH2gAyNDM0Mjc4MTY4OmIzNTI3MmMyNzY4N2QwMGNiYmZkMTM3N2NmZDI3ZjM3ZDlmMTQ0YzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3602855209ae4ab9abd43bf2bc6102562dec73ea", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/3602855209ae4ab9abd43bf2bc6102562dec73ea", "committedDate": "2020-06-15T04:24:01Z", "message": "Switch to using an explicit executor for async runner and track metrics around queue sizes.\nAlso catches exceptions thrown by the supplier and reports them back via the returned future."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bfc4ef5a11f6813408761dcb14730a7ad86970e", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/5bfc4ef5a11f6813408761dcb14730a7ad86970e", "committedDate": "2020-06-15T04:30:51Z", "message": "Spotless."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "458b4b4f6089559b73793beb205a28b9bdd50581", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/458b4b4f6089559b73793beb205a28b9bdd50581", "committedDate": "2020-06-15T04:37:09Z", "message": "Suppress warning."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b9f72ae42e941224db86ac73ff7a6debca77a51", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/4b9f72ae42e941224db86ac73ff7a6debca77a51", "committedDate": "2020-06-15T06:53:49Z", "message": "Use a single threaded ScheduledExecutorService to schedule tasks but an expandable pool of worker threads to actually execute them.\nScheduledThreadPoolExecutor always uses a fixed number of threads which is not suitable for our use case."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63177a121a8ddd07c754c4805f3c3049ab6d2e78", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/63177a121a8ddd07c754c4805f3c3049ab6d2e78", "committedDate": "2020-06-17T23:52:59Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into executor-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "926d10e0b5d462d63aac000eff17b7d9036b8f3e", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/926d10e0b5d462d63aac000eff17b7d9036b8f3e", "committedDate": "2020-06-18T01:13:35Z", "message": "Add a limit to all thread pools to avoid excessive thread creation.\nExplicitly shutdown thread pools."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c94be9d13ff4145913dee83507008f1f9f8fc1aa", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/c94be9d13ff4145913dee83507008f1f9f8fc1aa", "committedDate": "2020-06-18T01:29:03Z", "message": "Order shutdown to avoid errors because resources are released while events are still firing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd3135bb72d3b0d77af54dc9fa44e321a11b65d2", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/fd3135bb72d3b0d77af54dc9fa44e321a11b65d2", "committedDate": "2020-06-18T03:41:05Z", "message": "Add tests.  Undo temp name change."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9fcd92f5d2c722cbda8f88892f19fbb72467038", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/f9fcd92f5d2c722cbda8f88892f19fbb72467038", "committedDate": "2020-06-18T03:41:19Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into executor-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcb48cd51f6ce2a1352180b814152f4a6f55c5c2", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/dcb48cd51f6ce2a1352180b814152f4a6f55c5c2", "committedDate": "2020-06-18T03:46:49Z", "message": "Spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1212649f42d4f8df66e19d65d91d243945199047", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/1212649f42d4f8df66e19d65d91d243945199047", "committedDate": "2020-06-18T03:47:54Z", "message": "Log when we ignore tasks due to shutdown."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMzgxNDA0", "url": "https://github.com/ConsenSys/teku/pull/2150#pullrequestreview-433381404", "createdAt": "2020-06-18T15:08:46Z", "commit": {"oid": "1212649f42d4f8df66e19d65d91d243945199047"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTowODo0NlrOGlz1Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTowODo0NlrOGlz1Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5OTcwNw==", "bodyText": "Should we not be returning a failed future here?", "url": "https://github.com/ConsenSys/teku/pull/2150#discussion_r442299707", "createdAt": "2020-06-18T15:08:46Z", "author": {"login": "cemozerr"}, "path": "services/serviceutils/src/main/java/tech/pegasys/teku/service/serviceutils/ScheduledExecutorAsyncRunner.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.service.serviceutils;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.hyperledger.besu.plugin.services.MetricsSystem;\n+import tech.pegasys.teku.metrics.TekuMetricCategory;\n+import tech.pegasys.teku.util.async.AsyncRunner;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+class ScheduledExecutorAsyncRunner implements AsyncRunner {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final AtomicBoolean shutdown = new AtomicBoolean(false);\n+  private final ScheduledExecutorService scheduler;\n+  private final ExecutorService workerPool;\n+\n+  ScheduledExecutorAsyncRunner(\n+      final ScheduledExecutorService scheduler, final ExecutorService workerPool) {\n+    this.scheduler = scheduler;\n+    this.workerPool = workerPool;\n+  }\n+\n+  static AsyncRunner create(\n+      final String name, final int maxThreads, final MetricsSystem metricsSystem) {\n+    final ScheduledExecutorService scheduler =\n+        Executors.newSingleThreadScheduledExecutor(\n+            new ThreadFactoryBuilder()\n+                .setNameFormat(name + \"-async-scheduler-%d\")\n+                .setDaemon(true)\n+                .build());\n+    final ThreadPoolExecutor workerPool =\n+        new ThreadPoolExecutor(\n+            1,\n+            maxThreads,\n+            60,\n+            TimeUnit.SECONDS,\n+            new SynchronousQueue<>(),\n+            new ThreadFactoryBuilder().setNameFormat(name + \"-async-%d\").setDaemon(true).build());\n+\n+    metricsSystem.createIntegerGauge(\n+        TekuMetricCategory.EXECUTOR,\n+        name + \"_queue_size\",\n+        \"Current size of the executor task queue\",\n+        () -> workerPool.getQueue().size());\n+    metricsSystem.createIntegerGauge(\n+        TekuMetricCategory.EXECUTOR,\n+        name + \"_thread_pool_size\",\n+        \"Current number of threads in the executor thread pool\",\n+        workerPool::getPoolSize);\n+    metricsSystem.createIntegerGauge(\n+        TekuMetricCategory.EXECUTOR,\n+        name + \"_thread_active_count\",\n+        \"Current number of threads executing tasks for this executor\",\n+        workerPool::getActiveCount);\n+\n+    return new ScheduledExecutorAsyncRunner(scheduler, workerPool);\n+  }\n+\n+  @Override\n+  public <U> SafeFuture<U> runAsync(final Supplier<SafeFuture<U>> action) {\n+    return runTask(action, workerPool::execute);\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"FutureReturnValueIgnored\")\n+  public <U> SafeFuture<U> runAfterDelay(\n+      final Supplier<SafeFuture<U>> action, final long delayAmount, final TimeUnit delayUnit) {\n+    return runTask(\n+        action, task -> scheduler.schedule(() -> workerPool.execute(task), delayAmount, delayUnit));\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    // All threads are daemon threads so don't wait for them to actually stop\n+    shutdown.set(true);\n+    scheduler.shutdownNow();\n+    workerPool.shutdownNow();\n+  }\n+\n+  private <U> SafeFuture<U> runTask(\n+      final Supplier<SafeFuture<U>> action, final Consumer<Runnable> scheduler) {\n+    if (shutdown.get()) {\n+      LOG.debug(\"Ignoring async task because shutdown is in progress\");\n+      return new SafeFuture<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1212649f42d4f8df66e19d65d91d243945199047"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMzk5NjA1", "url": "https://github.com/ConsenSys/teku/pull/2150#pullrequestreview-433399605", "createdAt": "2020-06-18T15:27:56Z", "commit": {"oid": "1212649f42d4f8df66e19d65d91d243945199047"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToyNzo1NlrOGl0pHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToyNzo1NlrOGl0pHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMxMjk4OA==", "bodyText": "nit: The argument name scheduler here is a bit confusing since we have a ScheduledExecutorService object used in this class with the variable name scheduler. Can we rename this to something similar to runner?", "url": "https://github.com/ConsenSys/teku/pull/2150#discussion_r442312988", "createdAt": "2020-06-18T15:27:56Z", "author": {"login": "cemozerr"}, "path": "services/serviceutils/src/main/java/tech/pegasys/teku/service/serviceutils/ScheduledExecutorAsyncRunner.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.service.serviceutils;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.hyperledger.besu.plugin.services.MetricsSystem;\n+import tech.pegasys.teku.metrics.TekuMetricCategory;\n+import tech.pegasys.teku.util.async.AsyncRunner;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+class ScheduledExecutorAsyncRunner implements AsyncRunner {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final AtomicBoolean shutdown = new AtomicBoolean(false);\n+  private final ScheduledExecutorService scheduler;\n+  private final ExecutorService workerPool;\n+\n+  ScheduledExecutorAsyncRunner(\n+      final ScheduledExecutorService scheduler, final ExecutorService workerPool) {\n+    this.scheduler = scheduler;\n+    this.workerPool = workerPool;\n+  }\n+\n+  static AsyncRunner create(\n+      final String name, final int maxThreads, final MetricsSystem metricsSystem) {\n+    final ScheduledExecutorService scheduler =\n+        Executors.newSingleThreadScheduledExecutor(\n+            new ThreadFactoryBuilder()\n+                .setNameFormat(name + \"-async-scheduler-%d\")\n+                .setDaemon(true)\n+                .build());\n+    final ThreadPoolExecutor workerPool =\n+        new ThreadPoolExecutor(\n+            1,\n+            maxThreads,\n+            60,\n+            TimeUnit.SECONDS,\n+            new SynchronousQueue<>(),\n+            new ThreadFactoryBuilder().setNameFormat(name + \"-async-%d\").setDaemon(true).build());\n+\n+    metricsSystem.createIntegerGauge(\n+        TekuMetricCategory.EXECUTOR,\n+        name + \"_queue_size\",\n+        \"Current size of the executor task queue\",\n+        () -> workerPool.getQueue().size());\n+    metricsSystem.createIntegerGauge(\n+        TekuMetricCategory.EXECUTOR,\n+        name + \"_thread_pool_size\",\n+        \"Current number of threads in the executor thread pool\",\n+        workerPool::getPoolSize);\n+    metricsSystem.createIntegerGauge(\n+        TekuMetricCategory.EXECUTOR,\n+        name + \"_thread_active_count\",\n+        \"Current number of threads executing tasks for this executor\",\n+        workerPool::getActiveCount);\n+\n+    return new ScheduledExecutorAsyncRunner(scheduler, workerPool);\n+  }\n+\n+  @Override\n+  public <U> SafeFuture<U> runAsync(final Supplier<SafeFuture<U>> action) {\n+    return runTask(action, workerPool::execute);\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"FutureReturnValueIgnored\")\n+  public <U> SafeFuture<U> runAfterDelay(\n+      final Supplier<SafeFuture<U>> action, final long delayAmount, final TimeUnit delayUnit) {\n+    return runTask(\n+        action, task -> scheduler.schedule(() -> workerPool.execute(task), delayAmount, delayUnit));\n+  }\n+\n+  @Override\n+  public void shutdown() {\n+    // All threads are daemon threads so don't wait for them to actually stop\n+    shutdown.set(true);\n+    scheduler.shutdownNow();\n+    workerPool.shutdownNow();\n+  }\n+\n+  private <U> SafeFuture<U> runTask(\n+      final Supplier<SafeFuture<U>> action, final Consumer<Runnable> scheduler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1212649f42d4f8df66e19d65d91d243945199047"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNDUxOTU3", "url": "https://github.com/ConsenSys/teku/pull/2150#pullrequestreview-433451957", "createdAt": "2020-06-18T16:27:46Z", "commit": {"oid": "1212649f42d4f8df66e19d65d91d243945199047"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoyNzo0NlrOGl3EXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjoyNzo0NlrOGl3EXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1MjczNQ==", "bodyText": "Nice.", "url": "https://github.com/ConsenSys/teku/pull/2150#discussion_r442352735", "createdAt": "2020-06-18T16:27:46Z", "author": {"login": "cemozerr"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java", "diffHunk": "@@ -193,7 +194,12 @@ public SyncingStatus getSyncStatus() {\n             })\n         .exceptionally(\n             error -> {\n-              LOG.error(\"Error during sync to peer \" + syncPeer, error);\n+              if (Throwables.getRootCause(error) instanceof PeerDisconnectedException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1212649f42d4f8df66e19d65d91d243945199047"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNDU0ODU2", "url": "https://github.com/ConsenSys/teku/pull/2150#pullrequestreview-433454856", "createdAt": "2020-06-18T16:31:22Z", "commit": {"oid": "1212649f42d4f8df66e19d65d91d243945199047"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34876b172154bea2f79cf38817937328084bcb0c", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/34876b172154bea2f79cf38817937328084bcb0c", "committedDate": "2020-06-18T20:58:25Z", "message": "Rename."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b35272c27687d00cbbfd1377cfd27f37d9f144c5", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/b35272c27687d00cbbfd1377cfd27f37d9f144c5", "committedDate": "2020-06-18T20:58:32Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into executor-metrics"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3928, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}