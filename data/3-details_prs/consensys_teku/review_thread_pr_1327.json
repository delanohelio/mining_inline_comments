{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MzkxNDIy", "number": 1327, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjowMToyMlrODmKziw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjowMDozMFrODm6kfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzQ5NTE1OnYy", "diffSide": "RIGHT", "path": "artemis/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjowMToyMlrOFzbq5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjowMjoxNVrOFzbrnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ3NTA0NQ==", "bodyText": "We've generally just used the static mockito methods so not needed the mockito-junit-jupiter dependency.  Would be good to remain consistent.", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r389475045", "createdAt": "2020-03-09T06:01:22Z", "author": {"login": "ajsutton"}, "path": "artemis/build.gradle", "diffHunk": "@@ -38,6 +38,8 @@ dependencies {\n \n   testImplementation 'com.squareup.okhttp3:okhttp'\n   testImplementation 'org.awaitility:awaitility'\n+  testImplementation 'org.mockito:mockito-core'\n+  testImplementation 'org.mockito:mockito-junit-jupiter'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a0b6cd1e46a0f951445cbe03c8aa8678ab2d594"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ3NTIyOA==", "bodyText": "Interesting, alright static it is \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r389475228", "createdAt": "2020-03-09T06:02:15Z", "author": {"login": "CjHare"}, "path": "artemis/build.gradle", "diffHunk": "@@ -38,6 +38,8 @@ dependencies {\n \n   testImplementation 'com.squareup.okhttp3:okhttp'\n   testImplementation 'org.awaitility:awaitility'\n+  testImplementation 'org.mockito:mockito-core'\n+  testImplementation 'org.mockito:mockito-junit-jupiter'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ3NTA0NQ=="}, "originalCommit": {"oid": "3a0b6cd1e46a0f951445cbe03c8aa8678ab2d594"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzUyODEzOnYy", "diffSide": "RIGHT", "path": "artemis/src/main/java/tech/pegasys/artemis/BeaconNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjoyMzo0NVrOFzb-Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoyMjoxMFrOFzc2HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ3OTk1MA==", "bodyText": "Since we're touching this anyway we should fix them to include the full stack trace.  So probably:\n} catch (fail CompletionException | IllegalArgumentException e) {\n    LOG.fatal(\"Startup failed\", e);\n}", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r389479950", "createdAt": "2020-03-09T06:23:45Z", "author": {"login": "ajsutton"}, "path": "artemis/src/main/java/tech/pegasys/artemis/BeaconNode.java", "diffHunk": "@@ -101,9 +100,9 @@ public void start() {\n       serviceController.startAll();\n \n     } catch (final CompletionException e) {\n-      STATUS_LOG.log(Level.FATAL, e.toString());\n+      LOG.fatal(e.toString());\n     } catch (final IllegalArgumentException e) {\n-      STATUS_LOG.log(Level.FATAL, e.getMessage());\n+      LOG.fatal(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5NDMwMQ==", "bodyText": "Actioned", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r389494301", "createdAt": "2020-03-09T07:22:10Z", "author": {"login": "CjHare"}, "path": "artemis/src/main/java/tech/pegasys/artemis/BeaconNode.java", "diffHunk": "@@ -101,9 +100,9 @@ public void start() {\n       serviceController.startAll();\n \n     } catch (final CompletionException e) {\n-      STATUS_LOG.log(Level.FATAL, e.toString());\n+      LOG.fatal(e.toString());\n     } catch (final IllegalArgumentException e) {\n-      STATUS_LOG.log(Level.FATAL, e.getMessage());\n+      LOG.fatal(e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ3OTk1MA=="}, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzUzMTQ0OnYy", "diffSide": "RIGHT", "path": "artemis/src/main/java/tech/pegasys/artemis/BeaconNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjoyNjoxOFrOFzcANA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoyOTo0N1rOFzc-gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4MDUwMA==", "bodyText": "These are the kinds of messages we almost certainly want going to STDOUT when in \"interactive\" mode rather than being hidden in a log file.  The spec failure suggests a block or attestation failed to process and the unexpected error definitely needs to be brought to the users attention.\nIs there a plan for how to display this kind of output which isn't the routine status updates, but should still go to the \"UI\"?", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r389480500", "createdAt": "2020-03-09T06:26:18Z", "author": {"login": "ajsutton"}, "path": "artemis/src/main/java/tech/pegasys/artemis/BeaconNode.java", "diffHunk": "@@ -118,10 +117,10 @@ public void stop() {\n final class EventBusExceptionHandler\n     implements SubscriberExceptionHandler, ChannelExceptionHandler {\n \n-  private final StatusLogger logger;\n+  private final Logger log;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5NjQ1MA==", "bodyText": "Thanks for the additional context, I'll switch it back \ud83d\udc4d\n\nIs there a plan for how to display this kind of output which isn't the routine status updates, but should still go to the \"UI\"?\n\nNot yet, the need for that extra bucket was only slowly dawning on me. It suggests the StatusLogger may need splitting into two classes (one handling status updates and the other this kind UI feedback), as that would allow for alternative behaviours/config for them \ud83e\udd14", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r389496450", "createdAt": "2020-03-09T07:29:47Z", "author": {"login": "CjHare"}, "path": "artemis/src/main/java/tech/pegasys/artemis/BeaconNode.java", "diffHunk": "@@ -118,10 +117,10 @@ public void stop() {\n final class EventBusExceptionHandler\n     implements SubscriberExceptionHandler, ChannelExceptionHandler {\n \n-  private final StatusLogger logger;\n+  private final Logger log;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4MDUwMA=="}, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzUzNDE4OnYy", "diffSide": "RIGHT", "path": "artemis/src/test/java/tech/pegasys/artemis/EventBusExceptionHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjoyODoxOVrOFzcB6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjoyODoxOVrOFzcB6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4MDkzOA==", "bodyText": "We use the static methods, not the annotations.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Mock private Logger log;\n          \n          \n            \n              private Logger log = Mockito.mock(Logger.class);\n          \n      \n    \n    \n  \n\ntypically with mock as a static import.", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r389480938", "createdAt": "2020-03-09T06:28:19Z", "author": {"login": "ajsutton"}, "path": "artemis/src/test/java/tech/pegasys/artemis/EventBusExceptionHandlerTest.java", "diffHunk": "@@ -41,6 +46,8 @@\n   private final SafeFuture<Throwable> handledException = new SafeFuture<>();\n   private final SafeFuture<Throwable> unhandledExceptionFuture = new SafeFuture<>();\n \n+  @Mock private Logger log;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzU1MDcwOnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateTransition.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjozOTo0NVrOFzcL-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzoxNTo0OFrOFz8c2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4MzUxNA==", "bodyText": "This is likely to trigger too often - there are multiple places in the codebase that will call process_slots but they aren't necessarily moving the canonical view of the chain forward.  Previously printEnabled appears to have always been false so this never printed. I suspect printEnabled should have been true some times but got broken somewhere along the way.  We probably want to print epoch events from BeaconChainController.processSlot where the slot events are currently printing as that is the canonical view moving forward.", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r389483514", "createdAt": "2020-03-09T06:39:45Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateTransition.java", "diffHunk": "@@ -226,15 +224,14 @@ public void process_slots(MutableBeaconState state, UnsignedLong slot, boolean p\n             .plus(UnsignedLong.ONE)\n             .mod(UnsignedLong.valueOf(SLOTS_PER_EPOCH))\n             .equals(UnsignedLong.ZERO)) {\n-          STATUS_LOG.log(\n-              Level.INFO, \"******* Epoch Event *******\", printEnabled, StatusLogger.Color.BLUE);\n+          STATUS_LOG.epochEvent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxMjEyMQ==", "bodyText": "Yes, I'd noticed that printEnabled was always false ..which did look suspect. This input saves me from working backwards to figure out where to remove the unnecessary calls from  \ud83d\ude42", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r390012121", "createdAt": "2020-03-09T23:15:48Z", "author": {"login": "CjHare"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateTransition.java", "diffHunk": "@@ -226,15 +224,14 @@ public void process_slots(MutableBeaconState state, UnsignedLong slot, boolean p\n             .plus(UnsignedLong.ONE)\n             .mod(UnsignedLong.valueOf(SLOTS_PER_EPOCH))\n             .equals(UnsignedLong.ZERO)) {\n-          STATUS_LOG.log(\n-              Level.INFO, \"******* Epoch Event *******\", printEnabled, StatusLogger.Color.BLUE);\n+          STATUS_LOG.epochEvent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4MzUxNA=="}, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzU1MTgxOnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateTransition.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjo0MDozM1rOFzcMrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjo0MDozM1rOFzcMrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4MzY5Mg==", "bodyText": "We should include full stack traces whenever we move to a normal log4j logger.  Just make sure to include a string as the first arg and not just use LOG.warn(e) which will only print the message.", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r389483692", "createdAt": "2020-03-09T06:40:33Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateTransition.java", "diffHunk": "@@ -226,15 +224,14 @@ public void process_slots(MutableBeaconState state, UnsignedLong slot, boolean p\n             .plus(UnsignedLong.ONE)\n             .mod(UnsignedLong.valueOf(SLOTS_PER_EPOCH))\n             .equals(UnsignedLong.ZERO)) {\n-          STATUS_LOG.log(\n-              Level.INFO, \"******* Epoch Event *******\", printEnabled, StatusLogger.Color.BLUE);\n+          STATUS_LOG.epochEvent();\n           process_epoch(state);\n           reportExceptions(CompletableFuture.runAsync(() -> recordMetrics(state)));\n         }\n         state.setSlot(state.getSlot().plus(UnsignedLong.ONE));\n       }\n     } catch (IllegalArgumentException e) {\n-      STATUS_LOG.log(Level.WARN, e.getMessage());\n+      LOG.warn(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzU1NDA4OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/StartupUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjo0MjoxOFrOFzcOLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMTo1NzowNFrOF0m1Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NDA3Nw==", "bodyText": "These are both really important messages that should go to STDOUT. I'd probably keep the colours too.", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r389484077", "createdAt": "2020-03-09T06:42:18Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/StartupUtil.java", "diffHunk": "@@ -91,21 +92,19 @@ public static void setupInitialState(\n     BeaconState initialState;\n     if (startState != null) {\n       try {\n-        STATUS_LOG.log(\n-            Level.INFO, \"Loading initial state from \" + startState, StatusLogger.Color.GREEN);\n+        LOG.log(Level.INFO, \"Loading initial state from \" + startState);\n         initialState = StartupUtil.loadBeaconStateFromFile(startState);\n       } catch (final IOException e) {\n         throw new IllegalStateException(\"Failed to load initial state\", e);\n       }\n     } else {\n-      STATUS_LOG.log(\n+      LOG.log(\n           Level.INFO,\n           \"Starting with mocked start interoperability mode with genesis time \"\n               + genesisTime\n               + \" and \"\n               + validatorKeyPairs.size()\n-              + \" validators\",\n-          Color.GREEN);\n+              + \" validators\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwNjQ2Ng==", "bodyText": "I'd still prefer these to go to stdout.  Where genesis comes from is a really important piece of information.", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r390706466", "createdAt": "2020-03-11T01:57:04Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/StartupUtil.java", "diffHunk": "@@ -91,21 +92,19 @@ public static void setupInitialState(\n     BeaconState initialState;\n     if (startState != null) {\n       try {\n-        STATUS_LOG.log(\n-            Level.INFO, \"Loading initial state from \" + startState, StatusLogger.Color.GREEN);\n+        LOG.log(Level.INFO, \"Loading initial state from \" + startState);\n         initialState = StartupUtil.loadBeaconStateFromFile(startState);\n       } catch (final IOException e) {\n         throw new IllegalStateException(\"Failed to load initial state\", e);\n       }\n     } else {\n-      STATUS_LOG.log(\n+      LOG.log(\n           Level.INFO,\n           \"Starting with mocked start interoperability mode with genesis time \"\n               + genesisTime\n               + \" and \"\n               + validatorKeyPairs.size()\n-              + \" validators\",\n-          Color.GREEN);\n+              + \" validators\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NDA3Nw=="}, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzU1ODYyOnYy", "diffSide": "RIGHT", "path": "logging/src/main/java/tech/pegasys/teku/logging/StatusLogger.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjo0NToyM1rOFzcQ1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjo0NToyM1rOFzcQ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NDc1Nw==", "bodyText": "I'm not a huge fan of making this singleton mutable.  Why is this needed?\nIf it is needed, it would need to be thread safe which it isn't currently.", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r389484757", "createdAt": "2020-03-09T06:45:23Z", "author": {"login": "ajsutton"}, "path": "logging/src/main/java/tech/pegasys/teku/logging/StatusLogger.java", "diffHunk": "@@ -13,84 +13,85 @@\n \n package tech.pegasys.teku.logging;\n \n-import org.apache.logging.log4j.Level;\n+import static tech.pegasys.teku.logging.ColorConsolePrinter.print;\n+\n+import com.google.common.primitives.UnsignedLong;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.logging.ColorConsolePrinter.Color;\n \n public class StatusLogger {\n \n   public static final StatusLogger STATUS_LOG = new StatusLogger(\"stdout\");\n \n-  public enum Color {\n-    RED,\n-    BLUE,\n-    PURPLE,\n-    WHITE,\n-    GREEN\n-  }\n+  private final Logger logger;\n+  private boolean enabled;\n \n-  private static final String resetCode = \"\\u001B[0m\";\n+  private StatusLogger(final String name) {\n+    this.logger = LogManager.getLogger(name);\n+  }\n \n-  private final Logger logger;\n+  public void setEnabled(final boolean enabled) {\n+    this.enabled = enabled;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzU2MTI5OnYy", "diffSide": "RIGHT", "path": "logging/src/main/java/tech/pegasys/teku/logging/StatusLogger.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjo0Njo1OVrOFzcSjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMzozNTo0MVrOFz80YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NTE5OA==", "bodyText": "nit: Worth being consistent in whether or not the constant strings have a concatenation break in them so the spacing lines up.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                info(\"Node slot:                             \" + nodeSlot);\n          \n          \n            \n                info(\"Head block slot:\" + \"                       \" + bestSlot);\n          \n          \n            \n                info(\"Justified epoch:\" + \"                       \" + justifiedEpoch);\n          \n          \n            \n                info(\"Finalized epoch:\" + \"                       \" + finalizedEpoch);\n          \n          \n            \n                info(\"Node slot:                             \" + nodeSlot);\n          \n          \n            \n                info(\"Head block slot:                       \" + bestSlot);\n          \n          \n            \n                info(\"Justified epoch:                       \" + justifiedEpoch);\n          \n          \n            \n                info(\"Finalized epoch:                       \" + finalizedEpoch);", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r389485198", "createdAt": "2020-03-09T06:46:59Z", "author": {"login": "ajsutton"}, "path": "logging/src/main/java/tech/pegasys/teku/logging/StatusLogger.java", "diffHunk": "@@ -13,84 +13,85 @@\n \n package tech.pegasys.teku.logging;\n \n-import org.apache.logging.log4j.Level;\n+import static tech.pegasys.teku.logging.ColorConsolePrinter.print;\n+\n+import com.google.common.primitives.UnsignedLong;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.logging.ColorConsolePrinter.Color;\n \n public class StatusLogger {\n \n   public static final StatusLogger STATUS_LOG = new StatusLogger(\"stdout\");\n \n-  public enum Color {\n-    RED,\n-    BLUE,\n-    PURPLE,\n-    WHITE,\n-    GREEN\n-  }\n+  private final Logger logger;\n+  private boolean enabled;\n \n-  private static final String resetCode = \"\\u001B[0m\";\n+  private StatusLogger(final String name) {\n+    this.logger = LogManager.getLogger(name);\n+  }\n \n-  private final Logger logger;\n+  public void setEnabled(final boolean enabled) {\n+    this.enabled = enabled;\n+  }\n \n-  protected StatusLogger(String className) {\n-    this.logger = LogManager.getLogger(className);\n+  public void genesisEvent(final Bytes32 hashTreeRoot, final Bytes32 genesisBlockRoot) {\n+    info(\"******* Eth2Genesis Event*******\", Color.WHITE);\n+    info(\"Initial state root is \" + hashTreeRoot.toHexString());\n+    info(\"Genesis block root is \" + genesisBlockRoot.toHexString());\n   }\n \n-  public void log(Level level, String message) {\n-    this.logger.log(level, message);\n+  public void epochEvent() {\n+    info(\"******* Epoch Event *******\", Color.PURPLE);\n   }\n \n-  public void log(Level level, String message, boolean printEnabled) {\n-    if (printEnabled) {\n-      this.logger.log(level, message);\n-    }\n+  public void slotEvent(\n+      final UnsignedLong nodeSlot,\n+      final UnsignedLong bestSlot,\n+      final UnsignedLong justifiedEpoch,\n+      final UnsignedLong finalizedEpoch) {\n+    info(\"******* Slot Event *******\", Color.WHITE);\n+    info(\"Node slot:                             \" + nodeSlot);\n+    info(\"Head block slot:\" + \"                       \" + bestSlot);\n+    info(\"Justified epoch:\" + \"                       \" + justifiedEpoch);\n+    info(\"Finalized epoch:\" + \"                       \" + finalizedEpoch);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAxODE0NQ==", "bodyText": "Consistency is good. The StatusLogger has yet to reach it's final iteration (hence these kind of inconsistencies) ...but I'll tidy 'em up for this PR \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r390018145", "createdAt": "2020-03-09T23:35:41Z", "author": {"login": "CjHare"}, "path": "logging/src/main/java/tech/pegasys/teku/logging/StatusLogger.java", "diffHunk": "@@ -13,84 +13,85 @@\n \n package tech.pegasys.teku.logging;\n \n-import org.apache.logging.log4j.Level;\n+import static tech.pegasys.teku.logging.ColorConsolePrinter.print;\n+\n+import com.google.common.primitives.UnsignedLong;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.logging.ColorConsolePrinter.Color;\n \n public class StatusLogger {\n \n   public static final StatusLogger STATUS_LOG = new StatusLogger(\"stdout\");\n \n-  public enum Color {\n-    RED,\n-    BLUE,\n-    PURPLE,\n-    WHITE,\n-    GREEN\n-  }\n+  private final Logger logger;\n+  private boolean enabled;\n \n-  private static final String resetCode = \"\\u001B[0m\";\n+  private StatusLogger(final String name) {\n+    this.logger = LogManager.getLogger(name);\n+  }\n \n-  private final Logger logger;\n+  public void setEnabled(final boolean enabled) {\n+    this.enabled = enabled;\n+  }\n \n-  protected StatusLogger(String className) {\n-    this.logger = LogManager.getLogger(className);\n+  public void genesisEvent(final Bytes32 hashTreeRoot, final Bytes32 genesisBlockRoot) {\n+    info(\"******* Eth2Genesis Event*******\", Color.WHITE);\n+    info(\"Initial state root is \" + hashTreeRoot.toHexString());\n+    info(\"Genesis block root is \" + genesisBlockRoot.toHexString());\n   }\n \n-  public void log(Level level, String message) {\n-    this.logger.log(level, message);\n+  public void epochEvent() {\n+    info(\"******* Epoch Event *******\", Color.PURPLE);\n   }\n \n-  public void log(Level level, String message, boolean printEnabled) {\n-    if (printEnabled) {\n-      this.logger.log(level, message);\n-    }\n+  public void slotEvent(\n+      final UnsignedLong nodeSlot,\n+      final UnsignedLong bestSlot,\n+      final UnsignedLong justifiedEpoch,\n+      final UnsignedLong finalizedEpoch) {\n+    info(\"******* Slot Event *******\", Color.WHITE);\n+    info(\"Node slot:                             \" + nodeSlot);\n+    info(\"Head block slot:\" + \"                       \" + bestSlot);\n+    info(\"Justified epoch:\" + \"                       \" + justifiedEpoch);\n+    info(\"Finalized epoch:\" + \"                       \" + finalizedEpoch);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NTE5OA=="}, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzU2Mzk0OnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/libp2p/LibP2PNetwork.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjo0ODozOVrOFzcUGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMjoyMTo0NlrOFz_Zmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NTU5NA==", "bodyText": "This is a really, really useful thing to have printed to stdout.", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r389485594", "createdAt": "2020-03-09T06:48:39Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/libp2p/LibP2PNetwork.java", "diffHunk": "@@ -149,11 +151,11 @@ public LibP2PNetwork(\n     if (!state.compareAndSet(State.IDLE, State.RUNNING)) {\n       return SafeFuture.failedFuture(new IllegalStateException(\"Network already started\"));\n     }\n-    STATUS_LOG.log(Level.INFO, \"Starting libp2p network...\");\n+    LOG.info(\"Starting libp2p network...\");\n     return SafeFuture.of(host.start())\n         .thenApply(\n             i -> {\n-              STATUS_LOG.log(Level.INFO, \"Listening for connections on: \" + getNodeAddress());\n+              LOG.info(\"Listening for connections on: {}\", getNodeAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2MDQ0Mw==", "bodyText": "Actioned", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r390060443", "createdAt": "2020-03-10T02:21:46Z", "author": {"login": "CjHare"}, "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/libp2p/LibP2PNetwork.java", "diffHunk": "@@ -149,11 +151,11 @@ public LibP2PNetwork(\n     if (!state.compareAndSet(State.IDLE, State.RUNNING)) {\n       return SafeFuture.failedFuture(new IllegalStateException(\"Network already started\"));\n     }\n-    STATUS_LOG.log(Level.INFO, \"Starting libp2p network...\");\n+    LOG.info(\"Starting libp2p network...\");\n     return SafeFuture.of(host.start())\n         .thenApply(\n             i -> {\n-              STATUS_LOG.log(Level.INFO, \"Listening for connections on: \" + getNodeAddress());\n+              LOG.info(\"Listening for connections on: {}\", getNodeAddress());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NTU5NA=="}, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzU2ODk3OnYy", "diffSide": "RIGHT", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/KeystoresValidatorKeyProvider.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjo1MTo1NFrOFzcXTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMDowOToxOVrOF0lPrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NjQxMw==", "bodyText": "Fatal error probably should go to stdout.  The user would want to know that we won't be running their validator so they will be losing money.", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r389486413", "createdAt": "2020-03-09T06:51:54Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/KeystoresValidatorKeyProvider.java", "diffHunk": "@@ -82,7 +84,7 @@ private String loadPassword(final Path passwordFile) {\n           format(\n               \"Unexpected IO error while reading keystore password file [%s]: %s\",\n               passwordFile, e.getMessage());\n-      STATUS_LOG.log(Level.FATAL, errorMessage);\n+      LOG.fatal(errorMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY3MTQ1Mg==", "bodyText": "The error message makes its way into the stdout, by virtue of being converted to a RuntimeException subclass and caught by the BeaconNode.start() catch block.\nPerhaps this log line is not required here (as it causes duplicate logging), without any additional information?", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r390671452", "createdAt": "2020-03-10T23:37:00Z", "author": {"login": "CjHare"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/KeystoresValidatorKeyProvider.java", "diffHunk": "@@ -82,7 +84,7 @@ private String loadPassword(final Path passwordFile) {\n           format(\n               \"Unexpected IO error while reading keystore password file [%s]: %s\",\n               passwordFile, e.getMessage());\n-      STATUS_LOG.log(Level.FATAL, errorMessage);\n+      LOG.fatal(errorMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NjQxMw=="}, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY3MjEyMg==", "bodyText": "Yes, we should either catch and log, or rethrow but not both (unless we can provide some extra unique information at this level that will be lost higher up).", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r390672122", "createdAt": "2020-03-10T23:39:22Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/KeystoresValidatorKeyProvider.java", "diffHunk": "@@ -82,7 +84,7 @@ private String loadPassword(final Path passwordFile) {\n           format(\n               \"Unexpected IO error while reading keystore password file [%s]: %s\",\n               passwordFile, e.getMessage());\n-      STATUS_LOG.log(Level.FATAL, errorMessage);\n+      LOG.fatal(errorMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NjQxMw=="}, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY3OTk1Nw==", "bodyText": "Thinking about this after finishing my first coffee of the day ...I should be deleting this duplicate logging,. Even if the message needs to be displayed in two seperate places that is probably best achieved with logging configuration, rather then programatically,", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r390679957", "createdAt": "2020-03-11T00:07:22Z", "author": {"login": "CjHare"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/KeystoresValidatorKeyProvider.java", "diffHunk": "@@ -82,7 +84,7 @@ private String loadPassword(final Path passwordFile) {\n           format(\n               \"Unexpected IO error while reading keystore password file [%s]: %s\",\n               passwordFile, e.getMessage());\n-      STATUS_LOG.log(Level.FATAL, errorMessage);\n+      LOG.fatal(errorMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NjQxMw=="}, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY4MDQ5Mw==", "bodyText": "Yep, all messages that go to stdout should also go to the log file so you have a complete record in the log file.", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r390680493", "createdAt": "2020-03-11T00:09:19Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/KeystoresValidatorKeyProvider.java", "diffHunk": "@@ -82,7 +84,7 @@ private String loadPassword(final Path passwordFile) {\n           format(\n               \"Unexpected IO error while reading keystore password file [%s]: %s\",\n               passwordFile, e.getMessage());\n-      STATUS_LOG.log(Level.FATAL, errorMessage);\n+      LOG.fatal(errorMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NjQxMw=="}, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzU2OTcxOnYy", "diffSide": "RIGHT", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjo1MjoyOVrOFzcX0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMzo0MjoxM1rOF0Ak4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NjU0Nw==", "bodyText": "Probably should be noted on stdout.  The user will lose money as a result of failing to perform their validator duties.", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r389486547", "createdAt": "2020-03-09T06:52:29Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java", "diffHunk": "@@ -212,7 +214,7 @@ public void onAttestationEvent(BroadcastAttestationEvent event) throws IllegalAr\n       // Save headState to check for slashings\n       //      this.headState = headState;\n     } catch (IllegalArgumentException e) {\n-      STATUS_LOG.log(Level.WARN, \"Can not produce attestations or create a block\" + e.toString());\n+      LOG.warn(\"Can not produce attestations or create a block\" + e.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2MTI1Mw==", "bodyText": "Would an error message output also be warranted for the other two flows that produce IllegalArgumentException?", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r390061253", "createdAt": "2020-03-10T02:24:55Z", "author": {"login": "CjHare"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java", "diffHunk": "@@ -212,7 +214,7 @@ public void onAttestationEvent(BroadcastAttestationEvent event) throws IllegalAr\n       // Save headState to check for slashings\n       //      this.headState = headState;\n     } catch (IllegalArgumentException e) {\n-      STATUS_LOG.log(Level.WARN, \"Can not produce attestations or create a block\" + e.toString());\n+      LOG.warn(\"Can not produce attestations or create a block\" + e.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NjU0Nw=="}, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2MjM1NQ==", "bodyText": "Not sure what other two flows you mean.  The basic rule I'm applying is that if it's going to cost me money, I want it to go to STDOUT.  Failing create attestations and blocks will do that.  Failing to process them may not (it may actually be an invalid block), but it's a bit border line because if there's a bug that caused a consensus failure then I'll drop out of sync and no longer be attesting to the right chain (and thus stop being rewarded).", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r390062355", "createdAt": "2020-03-10T02:29:04Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java", "diffHunk": "@@ -212,7 +214,7 @@ public void onAttestationEvent(BroadcastAttestationEvent event) throws IllegalAr\n       // Save headState to check for slashings\n       //      this.headState = headState;\n     } catch (IllegalArgumentException e) {\n-      STATUS_LOG.log(Level.WARN, \"Can not produce attestations or create a block\" + e.toString());\n+      LOG.warn(\"Can not produce attestations or create a block\" + e.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NjU0Nw=="}, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2NTU5OA==", "bodyText": "Sorry, I meant that for the above comment (on KeystoresValidatorKeyProvider.java), as that has the two IllegalArgumentException lines prior to the log case.\nAll three flows result in the same outcome, namely a runtime subclass.", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r390065598", "createdAt": "2020-03-10T02:43:00Z", "author": {"login": "CjHare"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java", "diffHunk": "@@ -212,7 +214,7 @@ public void onAttestationEvent(BroadcastAttestationEvent event) throws IllegalAr\n       // Save headState to check for slashings\n       //      this.headState = headState;\n     } catch (IllegalArgumentException e) {\n-      STATUS_LOG.log(Level.WARN, \"Can not produce attestations or create a block\" + e.toString());\n+      LOG.warn(\"Can not produce attestations or create a block\" + e.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NjU0Nw=="}, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2NjU1MA==", "bodyText": "Applying the principle of reporting things that would cause you to lose money to stdout, then yes anything that causes us to not load validator keys should be reported.  Probably should cause startup to fail entirely actually - not quite sure where the scope boundary for this work is in that mix though. :)", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r390066550", "createdAt": "2020-03-10T02:46:26Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java", "diffHunk": "@@ -212,7 +214,7 @@ public void onAttestationEvent(BroadcastAttestationEvent event) throws IllegalAr\n       // Save headState to check for slashings\n       //      this.headState = headState;\n     } catch (IllegalArgumentException e) {\n-      STATUS_LOG.log(Level.WARN, \"Can not produce attestations or create a block\" + e.toString());\n+      LOG.warn(\"Can not produce attestations or create a block\" + e.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NjU0Nw=="}, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3OTE0MA==", "bodyText": "Once you begin pulling at a thread ...I suppose \ud83d\ude44\nWhen a RuntimeException is thrown during those flows (or any time during startup, it seems), Teku stops loading with the Exception logged (to the log file, not the console).", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r390079140", "createdAt": "2020-03-10T03:39:42Z", "author": {"login": "CjHare"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java", "diffHunk": "@@ -212,7 +214,7 @@ public void onAttestationEvent(BroadcastAttestationEvent event) throws IllegalAr\n       // Save headState to check for slashings\n       //      this.headState = headState;\n     } catch (IllegalArgumentException e) {\n-      STATUS_LOG.log(Level.WARN, \"Can not produce attestations or create a block\" + e.toString());\n+      LOG.warn(\"Can not produce attestations or create a block\" + e.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NjU0Nw=="}, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA3OTcxMw==", "bodyText": "BeaconNode.start() is the line that I'll change to console logging, as that'll catch the validator password keyfile too", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r390079713", "createdAt": "2020-03-10T03:42:13Z", "author": {"login": "CjHare"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java", "diffHunk": "@@ -212,7 +214,7 @@ public void onAttestationEvent(BroadcastAttestationEvent event) throws IllegalAr\n       // Save headState to check for slashings\n       //      this.headState = headState;\n     } catch (IllegalArgumentException e) {\n-      STATUS_LOG.log(Level.WARN, \"Can not produce attestations or create a block\" + e.toString());\n+      LOG.warn(\"Can not produce attestations or create a block\" + e.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NjU0Nw=="}, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzU3MDM0OnYy", "diffSide": "RIGHT", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNjo1Mjo1MlrOFzcYOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMjozOTowM1rOFz_pyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NjY0OQ==", "bodyText": "Should go to std out, this will cause the user to lose money.", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r389486649", "createdAt": "2020-03-09T06:52:52Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java", "diffHunk": "@@ -283,9 +285,9 @@ private void createBlockIfNecessary(\n               deposits);\n \n       this.eventBus.post(new ProposedBlockEvent(newBlock));\n-      STATUS_LOG.log(Level.DEBUG, \"Local validator produced a new block\");\n+      LOG.debug(\"Local validator produced a new block\");\n     } catch (SlotProcessingException | EpochProcessingException | StateTransitionException e) {\n-      STATUS_LOG.log(Level.ERROR, \"Error during block creation \" + e.toString());\n+      LOG.error(\"Error during block creation \" + e.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2NDU4Ng==", "bodyText": "Done \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r390064586", "createdAt": "2020-03-10T02:39:03Z", "author": {"login": "CjHare"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java", "diffHunk": "@@ -283,9 +285,9 @@ private void createBlockIfNecessary(\n               deposits);\n \n       this.eventBus.post(new ProposedBlockEvent(newBlock));\n-      STATUS_LOG.log(Level.DEBUG, \"Local validator produced a new block\");\n+      LOG.debug(\"Local validator produced a new block\");\n     } catch (SlotProcessingException | EpochProcessingException | StateTransitionException e) {\n-      STATUS_LOG.log(Level.ERROR, \"Error during block creation \" + e.toString());\n+      LOG.error(\"Error during block creation \" + e.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ4NjY0OQ=="}, "originalCommit": {"oid": "7e87f65e1670e30ce26646b30a68eb46902b151b"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTMwODc5OnYy", "diffSide": "RIGHT", "path": "data/recorder/src/main/java/tech/pegasys/artemis/data/recorder/SSZTransitionRecorder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMTo1MzozMlrOF0mx-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMTo1MzozMlrOF0mx-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwNTY1Ng==", "bodyText": "We should include the full stack trace here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOG.error(\"Failed to record data to {} : {}\", file, e.getMessage());\n          \n          \n            \n                  LOG.error(\"Failed to record data to \" + file, e);", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r390705656", "createdAt": "2020-03-11T01:53:32Z", "author": {"login": "ajsutton"}, "path": "data/recorder/src/main/java/tech/pegasys/artemis/data/recorder/SSZTransitionRecorder.java", "diffHunk": "@@ -69,14 +71,13 @@ private void store(final Path file, SimpleOffsetSerializable data) {\n     try {\n       Files.write(file, serialize(data).toArrayUnsafe());\n     } catch (final IOException e) {\n-      STATUS_LOG.log(Level.ERROR, \"Failed to record data to \" + file + \": \" + e.getMessage());\n+      LOG.error(\"Failed to record data to {} : {}\", file, e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe5353f64927c78121d42b382d3405e956ebf554"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTMxMTE5OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateTransition.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMTo1NToxMlrOF0mzZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMTo1NToxMlrOF0mzZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwNjAyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOG.warn(e.getMessage(), e);\n          \n          \n            \n                  LOG.warn(\"Failed to process slots\"), e);\n          \n      \n    \n    \n  \n\nJust to provide context rather than repeating the exception message.", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r390706021", "createdAt": "2020-03-11T01:55:12Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateTransition.java", "diffHunk": "@@ -226,15 +223,13 @@ public void process_slots(MutableBeaconState state, UnsignedLong slot, boolean p\n             .plus(UnsignedLong.ONE)\n             .mod(UnsignedLong.valueOf(SLOTS_PER_EPOCH))\n             .equals(UnsignedLong.ZERO)) {\n-          STATUS_LOG.log(\n-              Level.INFO, \"******* Epoch Event *******\", printEnabled, StatusLogger.Color.BLUE);\n           process_epoch(state);\n           reportExceptions(CompletableFuture.runAsync(() -> recordMetrics(state)));\n         }\n         state.setSlot(state.getSlot().plus(UnsignedLong.ONE));\n       }\n     } catch (IllegalArgumentException e) {\n-      STATUS_LOG.log(Level.WARN, e.getMessage());\n+      LOG.warn(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe5353f64927c78121d42b382d3405e956ebf554"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTMyMDk0OnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/artemis/storage/MapDbDatabase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjowMDozMFrOF0m4zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMjowMDozMFrOF0m4zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwNzQwNQ==", "bodyText": "Need to include the exception\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOG.error(\"Failed to clear old database\");\n          \n          \n            \n                  LOG.error(\"Failed to clear old database\", e);", "url": "https://github.com/ConsenSys/teku/pull/1327#discussion_r390707405", "createdAt": "2020-03-11T02:00:30Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/artemis/storage/MapDbDatabase.java", "diffHunk": "@@ -77,7 +74,7 @@ public static Database createOnDisk(final File directory, final boolean startFro\n         Files.deleteIfExists(databaseFile.toPath());\n       }\n     } catch (IOException e) {\n-      STATUS_LOG.log(Level.ERROR, \"Failed to clear old database\");\n+      LOG.error(\"Failed to clear old database\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe5353f64927c78121d42b382d3405e956ebf554"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2516, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}