{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwNTUyMTE3", "number": 2070, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoyNzozNlrOEDen0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTowNzowN1rOEDfvZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDgyODk5OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/AttestationGossipManagerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoyNzozNlrOGghNdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMToxMjo0MlrOGgwnDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MTczMw==", "bodyText": "I'm confused with how we can be sure that these random attestations have the same subnetId?", "url": "https://github.com/ConsenSys/teku/pull/2070#discussion_r436751733", "createdAt": "2020-06-08T14:27:36Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/AttestationGossipManagerTest.java", "diffHunk": "@@ -52,39 +52,43 @@\n   private final GossipEncoding gossipEncoding = GossipEncoding.SSZ_SNAPPY;\n   private final TopicChannel topicChannel = mock(TopicChannel.class);\n   private AttestationGossipManager attestationGossipManager;\n+  private final AttestationSubnetSubscriptions attestationSubnetSubscriptions =\n+      new AttestationSubnetSubscriptions(\n+          gossipNetwork,\n+          gossipEncoding,\n+          attestationValidator,\n+          recentChainData,\n+          gossipedAttestationConsumer);\n \n   @BeforeEach\n   public void setup() {\n     BeaconChainUtil.create(0, recentChainData).initializeStorage();\n     doReturn(topicChannel).when(gossipNetwork).subscribe(contains(\"committee_index\"), any());\n-    AttestationSubnetSubscriptions attestationSubnetSubscriptions =\n-        new AttestationSubnetSubscriptions(\n-            gossipNetwork,\n-            gossipEncoding,\n-            attestationValidator,\n-            recentChainData,\n-            gossipedAttestationConsumer);\n     attestationGossipManager =\n         new AttestationGossipManager(gossipEncoding, attestationSubnetSubscriptions);\n   }\n \n   @Test\n   public void onNewAttestation_afterMatchingAssignment() {\n+    final Attestation attestation = dataStructureUtil.randomAttestation();\n+    final Attestation attestation2 =\n+        new Attestation(\n+            dataStructureUtil.randomBitlist(),\n+            dataStructureUtil.randomAttestationData(UnsignedLong.valueOf(13)),\n+            dataStructureUtil.randomSignature());\n+    final int subnetId = computeSubnetId(attestation);\n+    // Sanity check the attestations are for the same subnet\n+    assertThat(computeSubnetId(attestation2)).isEqualTo(subnetId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9fdd562ddd9ef740e4ce4a1c057e201e419606"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwNDA0NQ==", "bodyText": "Remember that we use a fixed seed for all randomness, so they're completely repeatable.  And then I carefully selected the slot for the second attestation to make it line up.", "url": "https://github.com/ConsenSys/teku/pull/2070#discussion_r437004045", "createdAt": "2020-06-08T21:12:42Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/AttestationGossipManagerTest.java", "diffHunk": "@@ -52,39 +52,43 @@\n   private final GossipEncoding gossipEncoding = GossipEncoding.SSZ_SNAPPY;\n   private final TopicChannel topicChannel = mock(TopicChannel.class);\n   private AttestationGossipManager attestationGossipManager;\n+  private final AttestationSubnetSubscriptions attestationSubnetSubscriptions =\n+      new AttestationSubnetSubscriptions(\n+          gossipNetwork,\n+          gossipEncoding,\n+          attestationValidator,\n+          recentChainData,\n+          gossipedAttestationConsumer);\n \n   @BeforeEach\n   public void setup() {\n     BeaconChainUtil.create(0, recentChainData).initializeStorage();\n     doReturn(topicChannel).when(gossipNetwork).subscribe(contains(\"committee_index\"), any());\n-    AttestationSubnetSubscriptions attestationSubnetSubscriptions =\n-        new AttestationSubnetSubscriptions(\n-            gossipNetwork,\n-            gossipEncoding,\n-            attestationValidator,\n-            recentChainData,\n-            gossipedAttestationConsumer);\n     attestationGossipManager =\n         new AttestationGossipManager(gossipEncoding, attestationSubnetSubscriptions);\n   }\n \n   @Test\n   public void onNewAttestation_afterMatchingAssignment() {\n+    final Attestation attestation = dataStructureUtil.randomAttestation();\n+    final Attestation attestation2 =\n+        new Attestation(\n+            dataStructureUtil.randomBitlist(),\n+            dataStructureUtil.randomAttestationData(UnsignedLong.valueOf(13)),\n+            dataStructureUtil.randomSignature());\n+    final int subnetId = computeSubnetId(attestation);\n+    // Sanity check the attestations are for the same subnet\n+    assertThat(computeSubnetId(attestation2)).isEqualTo(subnetId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MTczMw=="}, "originalCommit": {"oid": "3a9fdd562ddd9ef740e4ce4a1c057e201e419606"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDkxMzc5OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDo0NjozMlrOGgiCAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDo0NjozMlrOGgiCAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc2NTE4Nw==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Not point aggregating for historic slots and we can't calculate the subnet ID\n          \n          \n            \n                    // No point aggregating for historic slots and we can't calculate the subnet ID", "url": "https://github.com/ConsenSys/teku/pull/2070#discussion_r436765187", "createdAt": "2020-06-08T14:46:32Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "diffHunk": "@@ -24,22 +23,40 @@\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Set;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.datastructures.util.CommitteeUtil;\n import tech.pegasys.teku.datastructures.validator.SubnetSubscription;\n import tech.pegasys.teku.networking.eth2.Eth2Network;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n \n public class AttestationTopicSubscriber implements SlotEventsChannel {\n   private final Map<Integer, UnsignedLong> subnetIdToUnsubscribeSlot = new HashMap<>();\n   private final Set<Integer> persistentSubnetIdSet = new HashSet<>();\n   private final Eth2Network eth2Network;\n+  private final RecentChainData recentChainData;\n \n-  public AttestationTopicSubscriber(final Eth2Network eth2Network) {\n+  public AttestationTopicSubscriber(\n+      final Eth2Network eth2Network, final RecentChainData recentChainData) {\n     this.eth2Network = eth2Network;\n+    this.recentChainData = recentChainData;\n   }\n \n   public synchronized void subscribeToCommitteeForAggregation(\n       final int committeeIndex, final UnsignedLong aggregationSlot) {\n-    final int subnetId = committeeIndexToSubnetId(committeeIndex);\n+    recentChainData\n+        .getBestState()\n+        // Not point aggregating for historic slots and we can't calculate the subnet ID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9fdd562ddd9ef740e4ce4a1c057e201e419606"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTAxMjIzOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTowNzowN1rOGgi_Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMTowMjo1M1rOGgwT9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4MDg0Ng==", "bodyText": "Not sure I understand this line - don't we set up subscriptions at the beginning of each epoch, so wouldn't we expect that the aggregationSlot will be in the future?  Should this be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .filter(state -> state.getSlot().compareTo(aggregationSlot) <= 0)\n          \n          \n            \n                    .filter(state -> state.getSlot().compareTo(aggregationSlot) > 0)\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/ConsenSys/teku/pull/2070#discussion_r436780846", "createdAt": "2020-06-08T15:07:07Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "diffHunk": "@@ -24,22 +23,40 @@\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Set;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.datastructures.util.CommitteeUtil;\n import tech.pegasys.teku.datastructures.validator.SubnetSubscription;\n import tech.pegasys.teku.networking.eth2.Eth2Network;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n \n public class AttestationTopicSubscriber implements SlotEventsChannel {\n   private final Map<Integer, UnsignedLong> subnetIdToUnsubscribeSlot = new HashMap<>();\n   private final Set<Integer> persistentSubnetIdSet = new HashSet<>();\n   private final Eth2Network eth2Network;\n+  private final RecentChainData recentChainData;\n \n-  public AttestationTopicSubscriber(final Eth2Network eth2Network) {\n+  public AttestationTopicSubscriber(\n+      final Eth2Network eth2Network, final RecentChainData recentChainData) {\n     this.eth2Network = eth2Network;\n+    this.recentChainData = recentChainData;\n   }\n \n   public synchronized void subscribeToCommitteeForAggregation(\n       final int committeeIndex, final UnsignedLong aggregationSlot) {\n-    final int subnetId = committeeIndexToSubnetId(committeeIndex);\n+    recentChainData\n+        .getBestState()\n+        // Not point aggregating for historic slots and we can't calculate the subnet ID\n+        .filter(state -> state.getSlot().compareTo(aggregationSlot) <= 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a9fdd562ddd9ef740e4ce4a1c057e201e419606"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5OTE1Nw==", "bodyText": "Yes the aggregation slot should be greater than the current head slot (so it's in the future).  so state.getSlot() <= aggregationSlot.", "url": "https://github.com/ConsenSys/teku/pull/2070#discussion_r436999157", "createdAt": "2020-06-08T21:02:53Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "diffHunk": "@@ -24,22 +23,40 @@\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Set;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.datastructures.util.CommitteeUtil;\n import tech.pegasys.teku.datastructures.validator.SubnetSubscription;\n import tech.pegasys.teku.networking.eth2.Eth2Network;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n \n public class AttestationTopicSubscriber implements SlotEventsChannel {\n   private final Map<Integer, UnsignedLong> subnetIdToUnsubscribeSlot = new HashMap<>();\n   private final Set<Integer> persistentSubnetIdSet = new HashSet<>();\n   private final Eth2Network eth2Network;\n+  private final RecentChainData recentChainData;\n \n-  public AttestationTopicSubscriber(final Eth2Network eth2Network) {\n+  public AttestationTopicSubscriber(\n+      final Eth2Network eth2Network, final RecentChainData recentChainData) {\n     this.eth2Network = eth2Network;\n+    this.recentChainData = recentChainData;\n   }\n \n   public synchronized void subscribeToCommitteeForAggregation(\n       final int committeeIndex, final UnsignedLong aggregationSlot) {\n-    final int subnetId = committeeIndexToSubnetId(committeeIndex);\n+    recentChainData\n+        .getBestState()\n+        // Not point aggregating for historic slots and we can't calculate the subnet ID\n+        .filter(state -> state.getSlot().compareTo(aggregationSlot) <= 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4MDg0Ng=="}, "originalCommit": {"oid": "3a9fdd562ddd9ef740e4ce4a1c057e201e419606"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3556, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}