{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMTYwMjAz", "number": 2508, "title": "Implement Validator API GetAggregate method", "bodyText": "PR Description\n\nImplemented GetAggregate method (based on https://ethereum.github.io/eth2.0-APIs/#/Validator/getAggregatedAttestation)\nAt the moment, we are not verifying if the Beacon Node is subscribed to the subnet (error 403). Technically this isn't necessary atm. We might decide to add this in the future to be compliant with the spec.\n\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-08-05T05:48:25Z", "url": "https://github.com/ConsenSys/teku/pull/2508", "merged": true, "mergeCommit": {"oid": "fd2f3cf1c0fff20b075dd63887b53a13d105f937"}, "closed": true, "closedAt": "2020-08-05T06:29:40Z", "author": {"login": "lucassaldanha"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc70ncxAH2gAyNDYzMTYwMjAzOjI2Nzk4MThjNmUxNjEzMTg5ODhhYTM0OGY0ZGRiMjcxMmJkZGJiN2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc71HVyAH2gAyNDYzMTYwMjAzOjk5N2FjOTBlMGZhNjJjYTY4ZWEyNjlkZDNiODE5YmQyMjQ0MWY2NjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2679818c6e161318988aa348f4ddb2712bddbb7b", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/ConsenSys/teku/commit/2679818c6e161318988aa348f4ddb2712bddbb7b", "committedDate": "2020-08-05T05:45:46Z", "message": "Implement Validator API GetAggregate method\n\nhttps://ethereum.github.io/eth2.0-APIs/#/Validator/getAggregatedAttestation\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a265a34be9bf7fbd847c1126f22b6a5a12b9627", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/ConsenSys/teku/commit/7a265a34be9bf7fbd847c1126f22b6a5a12b9627", "committedDate": "2020-08-05T05:51:19Z", "message": "Update typo\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzYwMTYw", "url": "https://github.com/ConsenSys/teku/pull/2508#pullrequestreview-461360160", "createdAt": "2020-08-05T05:56:46Z", "commit": {"oid": "2679818c6e161318988aa348f4ddb2712bddbb7b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d696a1d68d64b47179e544328315dfcb5352bf49", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/ConsenSys/teku/commit/d696a1d68d64b47179e544328315dfcb5352bf49", "committedDate": "2020-08-05T06:01:57Z", "message": "Adding test for method route\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzU4OTY4", "url": "https://github.com/ConsenSys/teku/pull/2508#pullrequestreview-461358968", "createdAt": "2020-08-05T05:53:33Z", "commit": {"oid": "2679818c6e161318988aa348f4ddb2712bddbb7b"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNTo1MzozM1rOG77Nyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNTo1NjowMVrOG77RCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4OTM1NA==", "bodyText": "Ooo, that's a terrible abuse of the 403 response code. Good luck to anyone wanting to implement authenticated REST APIs and trying to distinguish between needing to authenticate and not being subscribed to the topic. On the plus side we're not actually performing the check so won't affect us.", "url": "https://github.com/ConsenSys/teku/pull/2508#discussion_r465489354", "createdAt": "2020-08-05T05:53:33Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/validator/GetAggregate.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.ATTESTATION_DATA_ROOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_FORBIDDEN;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsBytes32;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsUnsignedLong;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.ValidatorDataProvider;\n+import tech.pegasys.teku.api.schema.Attestation;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.beaconrestapi.schema.ErrorResponse;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAggregate implements Handler {\n+\n+  public static final String ROUTE = \"/validator/aggregate_attestation\";\n+\n+  private final ValidatorDataProvider provider;\n+  private final JsonProvider jsonProvider;\n+\n+  public GetAggregate(final ValidatorDataProvider provider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Aggregates all attestations matching given attestation data root and slot.\",\n+      tags = {TAG_VALIDATOR},\n+      queryParams = {\n+        @OpenApiParam(\n+            name = ATTESTATION_DATA_ROOT,\n+            description =\n+                \"`String` HashTreeRoot of AttestationData that validator want's aggregated.\",\n+            required = true),\n+        @OpenApiParam(\n+            name = SLOT,\n+            description = \"`UnsignedLong` Non-finalized slot for which to create the aggregation.\",\n+            required = true)\n+      },\n+      description = \"Aggregates all attestations matching given attestation data root and slot.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = Attestation.class, isArray = true),\n+            description =\n+                \"Returns aggregated `Attestation` object with same `AttestationData` root.\"),\n+        @OpenApiResponse(status = RES_BAD_REQUEST, description = \"Invalid parameter supplied\"),\n+        @OpenApiResponse(\n+            status = RES_FORBIDDEN,\n+            description = \"Beacon node was not assigned to aggregate on that subnet\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2679818c6e161318988aa348f4ddb2712bddbb7b"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ4OTczOQ==", "bodyText": "Would it be better to just not assign to a variable?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  @SuppressWarnings(\"unused\")\n          \n          \n            \n                  UnsignedLong slot = getParameterValueAsUnsignedLong(parameters, SLOT);\n          \n          \n            \n                  // Validate the slot parameter, even though we don't actually use it.\n          \n          \n            \n                  getParameterValueAsUnsignedLong(parameters, SLOT);", "url": "https://github.com/ConsenSys/teku/pull/2508#discussion_r465489739", "createdAt": "2020-08-05T05:54:46Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/validator/GetAggregate.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.ATTESTATION_DATA_ROOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_FORBIDDEN;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsBytes32;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsUnsignedLong;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.ValidatorDataProvider;\n+import tech.pegasys.teku.api.schema.Attestation;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.beaconrestapi.schema.ErrorResponse;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAggregate implements Handler {\n+\n+  public static final String ROUTE = \"/validator/aggregate_attestation\";\n+\n+  private final ValidatorDataProvider provider;\n+  private final JsonProvider jsonProvider;\n+\n+  public GetAggregate(final ValidatorDataProvider provider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Aggregates all attestations matching given attestation data root and slot.\",\n+      tags = {TAG_VALIDATOR},\n+      queryParams = {\n+        @OpenApiParam(\n+            name = ATTESTATION_DATA_ROOT,\n+            description =\n+                \"`String` HashTreeRoot of AttestationData that validator want's aggregated.\",\n+            required = true),\n+        @OpenApiParam(\n+            name = SLOT,\n+            description = \"`UnsignedLong` Non-finalized slot for which to create the aggregation.\",\n+            required = true)\n+      },\n+      description = \"Aggregates all attestations matching given attestation data root and slot.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = Attestation.class, isArray = true),\n+            description =\n+                \"Returns aggregated `Attestation` object with same `AttestationData` root.\"),\n+        @OpenApiResponse(status = RES_BAD_REQUEST, description = \"Invalid parameter supplied\"),\n+        @OpenApiResponse(\n+            status = RES_FORBIDDEN,\n+            description = \"Beacon node was not assigned to aggregate on that subnet\"),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR, description = \"Beacon node internal error.\")\n+      })\n+  @Override\n+  public void handle(Context ctx) throws Exception {\n+\n+    try {\n+      final Map<String, List<String>> parameters = ctx.queryParamMap();\n+      if (parameters.size() < 2) {\n+        throw new IllegalArgumentException(\n+            String.format(\"Please specify both %s and %s\", ATTESTATION_DATA_ROOT, SLOT));\n+      }\n+      Bytes32 beacon_block_root = getParameterValueAsBytes32(parameters, ATTESTATION_DATA_ROOT);\n+      @SuppressWarnings(\"unused\")\n+      UnsignedLong slot = getParameterValueAsUnsignedLong(parameters, SLOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2679818c6e161318988aa348f4ddb2712bddbb7b"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ5MDE4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               At the moment we aren't handling the error:\n          \n          \n            \n               At the moment we aren't enforcing:\n          \n      \n    \n    \n  \n\nJust so it doesn't sound like we might get an error and fail to handle it.", "url": "https://github.com/ConsenSys/teku/pull/2508#discussion_r465490187", "createdAt": "2020-08-05T05:56:01Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/validator/GetAggregate.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.ATTESTATION_DATA_ROOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_FORBIDDEN;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsBytes32;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsUnsignedLong;\n+\n+import com.google.common.base.Throwables;\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.ValidatorDataProvider;\n+import tech.pegasys.teku.api.schema.Attestation;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.beaconrestapi.schema.ErrorResponse;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAggregate implements Handler {\n+\n+  public static final String ROUTE = \"/validator/aggregate_attestation\";\n+\n+  private final ValidatorDataProvider provider;\n+  private final JsonProvider jsonProvider;\n+\n+  public GetAggregate(final ValidatorDataProvider provider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Aggregates all attestations matching given attestation data root and slot.\",\n+      tags = {TAG_VALIDATOR},\n+      queryParams = {\n+        @OpenApiParam(\n+            name = ATTESTATION_DATA_ROOT,\n+            description =\n+                \"`String` HashTreeRoot of AttestationData that validator want's aggregated.\",\n+            required = true),\n+        @OpenApiParam(\n+            name = SLOT,\n+            description = \"`UnsignedLong` Non-finalized slot for which to create the aggregation.\",\n+            required = true)\n+      },\n+      description = \"Aggregates all attestations matching given attestation data root and slot.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = Attestation.class, isArray = true),\n+            description =\n+                \"Returns aggregated `Attestation` object with same `AttestationData` root.\"),\n+        @OpenApiResponse(status = RES_BAD_REQUEST, description = \"Invalid parameter supplied\"),\n+        @OpenApiResponse(\n+            status = RES_FORBIDDEN,\n+            description = \"Beacon node was not assigned to aggregate on that subnet\"),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR, description = \"Beacon node internal error.\")\n+      })\n+  @Override\n+  public void handle(Context ctx) throws Exception {\n+\n+    try {\n+      final Map<String, List<String>> parameters = ctx.queryParamMap();\n+      if (parameters.size() < 2) {\n+        throw new IllegalArgumentException(\n+            String.format(\"Please specify both %s and %s\", ATTESTATION_DATA_ROOT, SLOT));\n+      }\n+      Bytes32 beacon_block_root = getParameterValueAsBytes32(parameters, ATTESTATION_DATA_ROOT);\n+      @SuppressWarnings(\"unused\")\n+      UnsignedLong slot = getParameterValueAsUnsignedLong(parameters, SLOT);\n+\n+      ctx.result(\n+          provider\n+              .createAggregate(beacon_block_root)\n+              .thenApplyChecked(optionalAttestation -> serializeResult(ctx, optionalAttestation))\n+              .exceptionallyCompose(error -> handleError(ctx, error)));\n+    } catch (final IllegalArgumentException e) {\n+      ctx.result(jsonProvider.objectToJSON(new BadRequest(e.getMessage())));\n+      ctx.status(SC_BAD_REQUEST);\n+    }\n+  }\n+\n+  private String serializeResult(final Context ctx, final Optional<Attestation> optionalAttestation)\n+      throws com.fasterxml.jackson.core.JsonProcessingException {\n+    if (optionalAttestation.isPresent()) {\n+      ctx.status(SC_OK);\n+      String json = jsonProvider.objectToJSON(optionalAttestation.get());\n+      return json;\n+    } else {\n+      ctx.status(SC_NOT_FOUND);\n+      return \"\";\n+    }\n+  }\n+\n+  /*\n+   At the moment we aren't handling the error:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2679818c6e161318988aa348f4ddb2712bddbb7b"}, "originalPosition": 129}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "997ac90e0fa62ca68ea269dd3b819bd22441f663", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/ConsenSys/teku/commit/997ac90e0fa62ca68ea269dd3b819bd22441f663", "committedDate": "2020-08-05T06:20:36Z", "message": "PR comments\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3726, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}