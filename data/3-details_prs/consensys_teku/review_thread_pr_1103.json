{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NTU2MDcy", "number": 1103, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjo0OTowM1rODZqaGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjo0OTowM1rODZqaGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjM1ODAwOnYy", "diffSide": "RIGHT", "path": "util/src/test/java/tech/pegasys/artemis/util/async/SafeFutureTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjo0OTowM1rOFgLa0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjo1MjowNlrOFgLfKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NTg0Mw==", "bodyText": "I don' t understand why you included this line.", "url": "https://github.com/ConsenSys/teku/pull/1103#discussion_r369285843", "createdAt": "2020-01-21T22:49:03Z", "author": {"login": "cemozerr"}, "path": "util/src/test/java/tech/pegasys/artemis/util/async/SafeFutureTest.java", "diffHunk": "@@ -309,6 +318,65 @@ public void exceptionallyCompose_shouldNotDoAnythingWhenCompletedSuccessfully()\n     assertThat(result).isCompletedWithValue(\"Success\");\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void runAsync_shouldExecuteActionWithExecutorAndReturnResult() {\n+    final SafeFuture<String> actionResult = new SafeFuture<>();\n+    final Executor executor = mock(Executor.class);\n+    final Supplier<SafeFuture<String>> action = mock(Supplier.class);\n+    when(action.get()).thenReturn(actionResult);\n+\n+    final SafeFuture<String> result = SafeFuture.runAsync(action, executor);\n+\n+    final ArgumentCaptor<Runnable> captor = ArgumentCaptor.forClass(Runnable.class);\n+    verify(executor).execute(captor.capture());\n+    final Runnable executedRunnable = captor.getValue();\n+\n+    executedRunnable.run();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d5930800d8d4002cacfd022a4ab026a7090c83e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NTk3Mw==", "bodyText": "Do you mind explaining it?", "url": "https://github.com/ConsenSys/teku/pull/1103#discussion_r369285973", "createdAt": "2020-01-21T22:49:28Z", "author": {"login": "cemozerr"}, "path": "util/src/test/java/tech/pegasys/artemis/util/async/SafeFutureTest.java", "diffHunk": "@@ -309,6 +318,65 @@ public void exceptionallyCompose_shouldNotDoAnythingWhenCompletedSuccessfully()\n     assertThat(result).isCompletedWithValue(\"Success\");\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void runAsync_shouldExecuteActionWithExecutorAndReturnResult() {\n+    final SafeFuture<String> actionResult = new SafeFuture<>();\n+    final Executor executor = mock(Executor.class);\n+    final Supplier<SafeFuture<String>> action = mock(Supplier.class);\n+    when(action.get()).thenReturn(actionResult);\n+\n+    final SafeFuture<String> result = SafeFuture.runAsync(action, executor);\n+\n+    final ArgumentCaptor<Runnable> captor = ArgumentCaptor.forClass(Runnable.class);\n+    verify(executor).execute(captor.capture());\n+    final Runnable executedRunnable = captor.getValue();\n+\n+    executedRunnable.run();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NTg0Mw=="}, "originalCommit": {"oid": "8d5930800d8d4002cacfd022a4ab026a7090c83e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4Njk1NQ==", "bodyText": "Because executor is a mock, it won't actually run the runnable that was passed in.  So we use an ArgumentCaptor to capture it so we can call it ourselves when we're ready to in the test.", "url": "https://github.com/ConsenSys/teku/pull/1103#discussion_r369286955", "createdAt": "2020-01-21T22:52:06Z", "author": {"login": "ajsutton"}, "path": "util/src/test/java/tech/pegasys/artemis/util/async/SafeFutureTest.java", "diffHunk": "@@ -309,6 +318,65 @@ public void exceptionallyCompose_shouldNotDoAnythingWhenCompletedSuccessfully()\n     assertThat(result).isCompletedWithValue(\"Success\");\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n+  @Test\n+  public void runAsync_shouldExecuteActionWithExecutorAndReturnResult() {\n+    final SafeFuture<String> actionResult = new SafeFuture<>();\n+    final Executor executor = mock(Executor.class);\n+    final Supplier<SafeFuture<String>> action = mock(Supplier.class);\n+    when(action.get()).thenReturn(actionResult);\n+\n+    final SafeFuture<String> result = SafeFuture.runAsync(action, executor);\n+\n+    final ArgumentCaptor<Runnable> captor = ArgumentCaptor.forClass(Runnable.class);\n+    verify(executor).execute(captor.capture());\n+    final Runnable executedRunnable = captor.getValue();\n+\n+    executedRunnable.run();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NTg0Mw=="}, "originalCommit": {"oid": "8d5930800d8d4002cacfd022a4ab026a7090c83e"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2786, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}