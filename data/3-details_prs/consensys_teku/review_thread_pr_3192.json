{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NDExOTY5", "number": 3192, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMToyNDoxM1rOE3Lp2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzowMzozOFrOE3N1TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Mjk4MDc1OnYy", "diffSide": "RIGHT", "path": "util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMToyNDoxM1rOHwYH0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjo1NDoyN1rOHwbNkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4ODkxMg==", "bodyText": "hmm, the JavaDoc explicitly says it will throw UnsupportedOperationException if symlinks aren't supported.  Probably should catch both exception types to be safe.", "url": "https://github.com/ConsenSys/teku/pull/3192#discussion_r520488912", "createdAt": "2020-11-10T11:24:13Z", "author": {"login": "ajsutton"}, "path": "util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java", "diffHunk": "@@ -201,7 +199,7 @@ public void shouldHandleSymlinkedDirectories(@TempDir final Path tempDir) throws\n     try {\n       Files.createSymbolicLink(tempDir.resolve(\"key\"), realKeyDir);\n       Files.createSymbolicLink(tempDir.resolve(\"pass\"), realPassDir);\n-    } catch (UnsupportedOperationException e) {\n+    } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97f9a676208e23fb973a496e2e179e47e3d1f8a4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUzOTUzNg==", "bodyText": "FileSystemException is thrown when not enough privilege on Win (which is usually the case). I think we could better just disable this case for Windows: 5af79c0", "url": "https://github.com/ConsenSys/teku/pull/3192#discussion_r520539536", "createdAt": "2020-11-10T12:54:27Z", "author": {"login": "Nashatyrev"}, "path": "util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java", "diffHunk": "@@ -201,7 +199,7 @@ public void shouldHandleSymlinkedDirectories(@TempDir final Path tempDir) throws\n     try {\n       Files.createSymbolicLink(tempDir.resolve(\"key\"), realKeyDir);\n       Files.createSymbolicLink(tempDir.resolve(\"pass\"), realPassDir);\n-    } catch (UnsupportedOperationException e) {\n+    } catch (IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4ODkxMg=="}, "originalCommit": {"oid": "97f9a676208e23fb973a496e2e179e47e3d1f8a4"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzMzNzcyOnYy", "diffSide": "LEFT", "path": "infrastructure/io/src/test/java/tech/pegasys/teku/infrastructure/io/resource/FileResourceLoaderTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzowMzozOFrOHwbjmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNTo0MDozM1rOHw-7Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0NTE3Nw==", "bodyText": "This is a temporary change to discuss this test case\n@ajsutton when calling Files.newInputStream(path) with directory path on Windows there is the following exception:\njava.nio.file.AccessDeniedException: C:\\Users\\Admin\\AppData\\Local\\Temp\\junit10004047955021046840\n\n\tat java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:89)\n\tat java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)\n\tat java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)\n\tat java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)\n\tat java.base/java.nio.file.Files.newByteChannel(Files.java:370)\n\tat java.base/java.nio.file.Files.newByteChannel(Files.java:421)\n\tat java.base/java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:420)\n\tat java.base/java.nio.file.Files.newInputStream(Files.java:155)\n\tat tech.pegasys.teku.infrastructure.io.resource.FileResourceLoader.load(FileResourceLoader.java:30)\n\tat tech.pegasys.teku.infrastructure.io.resource.FileResourceLoaderTest.shouldCreateInputStreamWhenPathIsADirectory(FileResourceLoaderTest.java:49)\n\nNot sure I got the rationale behind your comment and what InputStream should be returned in case of directory.\nI would suggest to either return empty when the path is directory or throw an exception.", "url": "https://github.com/ConsenSys/teku/pull/3192#discussion_r520545177", "createdAt": "2020-11-10T13:03:38Z", "author": {"login": "Nashatyrev"}, "path": "infrastructure/io/src/test/java/tech/pegasys/teku/infrastructure/io/resource/FileResourceLoaderTest.java", "diffHunk": "@@ -43,10 +43,7 @@ public void shouldReturnEmptyWhenFileDoesNotExist(@TempDir Path tempDir) throws\n   }\n \n   @Test\n-  public void shouldCreateInputStreamWhenPathIsADirectory(@TempDir Path tempDir) throws Exception {\n-    // We could potentially return empty for directories, but it is going to be confusing for users\n-    // to say we couldn't find something that exists. We should report that we couldn't read it.\n-    assertThat(loader.load(tempDir.toAbsolutePath().toString())).isNotEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5af79c02d2655f5a04d362c64f318724f9bb816c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0OTQ3Nw==", "bodyText": "You'll get an IOException of some form on all systems trying to actually read a directory.  The point of this behaviour is that this method returns an empty optional if the file couldn't be found, it throws an IOException if it can't be read.  Since directories do exist but can't be read, the expected behaviour is to throw IOException (or any subclass).  Both ways fail, but this way gives a much more accurate error message to the user.", "url": "https://github.com/ConsenSys/teku/pull/3192#discussion_r520849477", "createdAt": "2020-11-10T20:19:56Z", "author": {"login": "ajsutton"}, "path": "infrastructure/io/src/test/java/tech/pegasys/teku/infrastructure/io/resource/FileResourceLoaderTest.java", "diffHunk": "@@ -43,10 +43,7 @@ public void shouldReturnEmptyWhenFileDoesNotExist(@TempDir Path tempDir) throws\n   }\n \n   @Test\n-  public void shouldCreateInputStreamWhenPathIsADirectory(@TempDir Path tempDir) throws Exception {\n-    // We could potentially return empty for directories, but it is going to be confusing for users\n-    // to say we couldn't find something that exists. We should report that we couldn't read it.\n-    assertThat(loader.load(tempDir.toAbsolutePath().toString())).isNotEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0NTE3Nw=="}, "originalCommit": {"oid": "5af79c02d2655f5a04d362c64f318724f9bb816c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyNDY2Mg==", "bodyText": "Ah I see, on Windows it throws earlier than on UNIX.  Throwing is still the right answer rather than returning empty, just need to update the test to handle the exception being thrown either from load or from the read call.", "url": "https://github.com/ConsenSys/teku/pull/3192#discussion_r521124662", "createdAt": "2020-11-11T05:40:33Z", "author": {"login": "ajsutton"}, "path": "infrastructure/io/src/test/java/tech/pegasys/teku/infrastructure/io/resource/FileResourceLoaderTest.java", "diffHunk": "@@ -43,10 +43,7 @@ public void shouldReturnEmptyWhenFileDoesNotExist(@TempDir Path tempDir) throws\n   }\n \n   @Test\n-  public void shouldCreateInputStreamWhenPathIsADirectory(@TempDir Path tempDir) throws Exception {\n-    // We could potentially return empty for directories, but it is going to be confusing for users\n-    // to say we couldn't find something that exists. We should report that we couldn't read it.\n-    assertThat(loader.load(tempDir.toAbsolutePath().toString())).isNotEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0NTE3Nw=="}, "originalCommit": {"oid": "5af79c02d2655f5a04d362c64f318724f9bb816c"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2993, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}