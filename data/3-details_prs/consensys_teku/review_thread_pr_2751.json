{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxODUwMzQ3", "number": 2751, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNDoyNToyM1rOEhgBNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzoyOTozOVrOEiU5zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTYzMDYwOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNDoyNToyM1rOHO2JzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjowNDowNVrOHPkTDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyOTM1Ng==", "bodyText": "I'm not sure this is the right approach.  We shouldn't need to create a map of properties when we already have the required data in a suitable format.  I'd suggest that the MessageSignerService interface is removed and just move everything up to the Signer interface which has the required data and is where the built-in slashing protection hooks in.\nMay need to extract a helper class to compute the signing root for data rather than having to duplicate that logic but that's doable.", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r485329356", "createdAt": "2020-09-09T04:25:23Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java", "diffHunk": "@@ -43,22 +43,26 @@ public LocalMessageSignerService(final BLSKeyPair keypair, final AsyncRunner asy\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signAggregationSlot(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signAggregationSlot(\n+      final Bytes signingRoot, final Map<String, Object> additionalProperties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb7c875789fd83a378df221f2a2742156cf6b6f8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyOTgzOA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r485329838", "createdAt": "2020-09-09T04:27:28Z", "author": {"login": "usmansaleem"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java", "diffHunk": "@@ -43,22 +43,26 @@ public LocalMessageSignerService(final BLSKeyPair keypair, final AsyncRunner asy\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signAggregationSlot(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signAggregationSlot(\n+      final Bytes signingRoot, final Map<String, Object> additionalProperties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyOTM1Ng=="}, "originalCommit": {"oid": "bb7c875789fd83a378df221f2a2742156cf6b6f8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzMzEzOQ==", "bodyText": "The primary purpose for this map was to serialize it as json to external signing service. If we delete MessageSignerService, that would mean LocalSigner and ExternalSigner extends Signer, is that correct assumption?", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r485333139", "createdAt": "2020-09-09T04:40:09Z", "author": {"login": "usmansaleem"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java", "diffHunk": "@@ -43,22 +43,26 @@ public LocalMessageSignerService(final BLSKeyPair keypair, final AsyncRunner asy\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signAggregationSlot(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signAggregationSlot(\n+      final Bytes signingRoot, final Map<String, Object> additionalProperties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyOTM1Ng=="}, "originalCommit": {"oid": "bb7c875789fd83a378df221f2a2742156cf6b6f8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM0NzcxMA==", "bodyText": "Yep.", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r485347710", "createdAt": "2020-09-09T05:31:29Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java", "diffHunk": "@@ -43,22 +43,26 @@ public LocalMessageSignerService(final BLSKeyPair keypair, final AsyncRunner asy\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signAggregationSlot(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signAggregationSlot(\n+      final Bytes signingRoot, final Map<String, Object> additionalProperties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyOTM1Ng=="}, "originalCommit": {"oid": "bb7c875789fd83a378df221f2a2742156cf6b6f8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM0NzgzNA==", "bodyText": "Well, they'd implement Signer since its an interface but same idea. :)", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r485347834", "createdAt": "2020-09-09T05:31:50Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java", "diffHunk": "@@ -43,22 +43,26 @@ public LocalMessageSignerService(final BLSKeyPair keypair, final AsyncRunner asy\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signAggregationSlot(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signAggregationSlot(\n+      final Bytes signingRoot, final Map<String, Object> additionalProperties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyOTM1Ng=="}, "originalCommit": {"oid": "bb7c875789fd83a378df221f2a2742156cf6b6f8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA0NjQwNA==", "bodyText": "MessageSignerService has been removed. Refactored signingRoot calculation in a util class. Signer is now implemented directly by LocalSigner and ExternalSigner. Do we still want to wrap externalSigner in SlashingProtectedSigner (in ValidatorLoader)?", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486046404", "createdAt": "2020-09-10T03:50:35Z", "author": {"login": "usmansaleem"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java", "diffHunk": "@@ -43,22 +43,26 @@ public LocalMessageSignerService(final BLSKeyPair keypair, final AsyncRunner asy\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signAggregationSlot(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signAggregationSlot(\n+      final Bytes signingRoot, final Map<String, Object> additionalProperties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyOTM1Ng=="}, "originalCommit": {"oid": "bb7c875789fd83a378df221f2a2742156cf6b6f8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA0OTE4Mw==", "bodyText": "Yes definitely by default, but (possibly in a follow up PR) it would be good to have an option to disable the built-in slashing protection for external signers (it should not be possible to disable it for local validators).", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486049183", "createdAt": "2020-09-10T04:02:35Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java", "diffHunk": "@@ -43,22 +43,26 @@ public LocalMessageSignerService(final BLSKeyPair keypair, final AsyncRunner asy\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signAggregationSlot(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signAggregationSlot(\n+      final Bytes signingRoot, final Map<String, Object> additionalProperties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyOTM1Ng=="}, "originalCommit": {"oid": "bb7c875789fd83a378df221f2a2742156cf6b6f8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4NTM5MQ==", "bodyText": "\ud83d\udc4d  Thank you, that make sense.", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486085391", "createdAt": "2020-09-10T06:04:05Z", "author": {"login": "usmansaleem"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java", "diffHunk": "@@ -43,22 +43,26 @@ public LocalMessageSignerService(final BLSKeyPair keypair, final AsyncRunner asy\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signAggregationSlot(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signAggregationSlot(\n+      final Bytes signingRoot, final Map<String, Object> additionalProperties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyOTM1Ng=="}, "originalCommit": {"oid": "bb7c875789fd83a378df221f2a2742156cf6b6f8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTc2MDAzOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNTozMzo0NVrOHO3UGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMzoyMjoyM1rOHPhfZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM0ODM3Nw==", "bodyText": "This and the below sign methods don't require any additional parameters for the signing protection it's only the attestation and block", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r485348377", "createdAt": "2020-09-09T05:33:45Z", "author": {"login": "jframe"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java", "diffHunk": "@@ -30,32 +31,38 @@ public LocalMessageSignerService(final BLSKeyPair keypair, final AsyncRunner asy\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signBlock(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signBlock(\n+      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n     return sign(signingRoot);\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signAttestation(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signAttestation(\n+      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n     return sign(signingRoot);\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signAggregationSlot(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signAggregationSlot(\n+      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n     return sign(signingRoot);\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signAggregateAndProof(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signAggregateAndProof(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf7a48b8fd68077d040554be1e880f088a2aeab4"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAzOTM5OQ==", "bodyText": "fixed in ExternalSigner.", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486039399", "createdAt": "2020-09-10T03:22:23Z", "author": {"login": "usmansaleem"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java", "diffHunk": "@@ -30,32 +31,38 @@ public LocalMessageSignerService(final BLSKeyPair keypair, final AsyncRunner asy\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signBlock(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signBlock(\n+      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n     return sign(signingRoot);\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signAttestation(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signAttestation(\n+      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n     return sign(signingRoot);\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signAggregationSlot(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signAggregationSlot(\n+      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n     return sign(signingRoot);\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signAggregateAndProof(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signAggregateAndProof(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM0ODM3Nw=="}, "originalCommit": {"oid": "bf7a48b8fd68077d040554be1e880f088a2aeab4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDI0OTY3OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/test/java/tech/pegasys/teku/core/signatures/LocalSignerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDowODoyMFrOHPiLGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjowNDozNFrOHPkTpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MDU4Ng==", "bodyText": "This name seems odd, shouldSignBlock?", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486050586", "createdAt": "2020-09-10T04:08:20Z", "author": {"login": "jframe"}, "path": "ethereum/core/src/test/java/tech/pegasys/teku/core/signatures/LocalSignerTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.signatures;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.operations.VoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.ForkInfo;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.async.StubAsyncRunner;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+class LocalSignerTest {\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private final ForkInfo fork = dataStructureUtil.randomForkInfo();\n+\n+  private static final BLSKeyPair KEYPAIR = BLSKeyPair.random(1234);\n+  private final StubAsyncRunner asyncRunner = new StubAsyncRunner();\n+\n+  private final LocalSigner signer = new LocalSigner(KEYPAIR, asyncRunner);\n+\n+  @Test\n+  public void shouldSignBlock1() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb2092bdd9c76546c6ba47711e2287f214e8bdab"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4NTU0Mw==", "bodyText": "copied over from now deleted \"SignerTest\". Let me fix it.", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486085543", "createdAt": "2020-09-10T06:04:34Z", "author": {"login": "usmansaleem"}, "path": "ethereum/core/src/test/java/tech/pegasys/teku/core/signatures/LocalSignerTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.signatures;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.operations.VoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.ForkInfo;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.async.StubAsyncRunner;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+class LocalSignerTest {\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private final ForkInfo fork = dataStructureUtil.randomForkInfo();\n+\n+  private static final BLSKeyPair KEYPAIR = BLSKeyPair.random(1234);\n+  private final StubAsyncRunner asyncRunner = new StubAsyncRunner();\n+\n+  private final LocalSigner signer = new LocalSigner(KEYPAIR, asyncRunner);\n+\n+  @Test\n+  public void shouldSignBlock1() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MDU4Ng=="}, "originalCommit": {"oid": "bb2092bdd9c76546c6ba47711e2287f214e8bdab"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDI1Mjc2OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/signatures/TestSigner.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDoxMDoxMlrOHPiMzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjo1MDo0NlrOHPld8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MTAyMA==", "bodyText": "Is this needed? It looks almost the same as the LocalSigner.", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486051020", "createdAt": "2020-09-10T04:10:12Z", "author": {"login": "jframe"}, "path": "ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/signatures/TestSigner.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.signatures;\n+\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregateAndProof;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregationSlot;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAttestationData;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignBlock;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignVoluntaryExit;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.bls.BLS;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.operations.VoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.ForkInfo;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+public class TestSigner implements Signer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb2092bdd9c76546c6ba47711e2287f214e8bdab"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4NjA0OQ==", "bodyText": "LocalSigner uses asyncRunner. This one doesn't. May be I can modify LocalSigner slightly so that it can sign both sync and async mode. Then this can be deleted.", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486086049", "createdAt": "2020-09-10T06:05:58Z", "author": {"login": "usmansaleem"}, "path": "ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/signatures/TestSigner.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.signatures;\n+\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregateAndProof;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregationSlot;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAttestationData;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignBlock;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignVoluntaryExit;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.bls.BLS;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.operations.VoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.ForkInfo;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+public class TestSigner implements Signer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MTAyMA=="}, "originalCommit": {"oid": "bb2092bdd9c76546c6ba47711e2287f214e8bdab"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5MzM0OA==", "bodyText": "Just use LocalSigner with SyncAsyncRunner like we do in all the other tests.", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486093348", "createdAt": "2020-09-10T06:25:05Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/signatures/TestSigner.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.signatures;\n+\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregateAndProof;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregationSlot;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAttestationData;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignBlock;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignVoluntaryExit;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.bls.BLS;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.operations.VoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.ForkInfo;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+public class TestSigner implements Signer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MTAyMA=="}, "originalCommit": {"oid": "bb2092bdd9c76546c6ba47711e2287f214e8bdab"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEwNDU2Mw==", "bodyText": "Thanks for this hint @ajsutton, I was missing this bit :).", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486104563", "createdAt": "2020-09-10T06:50:46Z", "author": {"login": "usmansaleem"}, "path": "ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/signatures/TestSigner.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.signatures;\n+\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregateAndProof;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregationSlot;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAttestationData;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignBlock;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignVoluntaryExit;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.bls.BLS;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.operations.VoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.ForkInfo;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+public class TestSigner implements Signer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MTAyMA=="}, "originalCommit": {"oid": "bb2092bdd9c76546c6ba47711e2287f214e8bdab"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDI1OTQyOnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/ExternalSigner.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNDoxNDoyN1rOHPiQ6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjo1MDo1N1rOHPleXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MjA3Mw==", "bodyText": "can we include the type on all the sign requests. although there will be no additional data it would be nice for our metrics to seperate the type of signing request.", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486052073", "createdAt": "2020-09-10T04:14:27Z", "author": {"login": "jframe"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/ExternalSigner.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.signer;\n+\n+import static java.util.Collections.emptyMap;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForRandaoReveal;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregateAndProof;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregationSlot;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAttestationData;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignBlock;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignVoluntaryExit;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import java.net.URI;\n+import java.net.URL;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.time.Duration;\n+import java.util.Map;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.bls.BLSPublicKey;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.core.signatures.Signer;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.operations.VoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.ForkInfo;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class ExternalSigner implements Signer {\n+  public static final String EXTERNAL_SIGNER_ENDPOINT = \"/api/v1/eth2/sign\";\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final URL signingServiceUrl;\n+  private final BLSPublicKey blsPublicKey;\n+  private final Duration timeout;\n+  private final HttpClient httpClient = HttpClient.newHttpClient();\n+\n+  public ExternalSigner(\n+      final URL signingServiceUrl, final BLSPublicKey blsPublicKey, final Duration timeout) {\n+    this.signingServiceUrl = signingServiceUrl;\n+    this.blsPublicKey = blsPublicKey;\n+    this.timeout = timeout;\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> createRandaoReveal(final UInt64 epoch, final ForkInfo forkInfo) {\n+    return sign(signingRootForRandaoReveal(epoch, forkInfo), emptyMap());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb2092bdd9c76546c6ba47711e2287f214e8bdab"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4NjEyNw==", "bodyText": "will do.", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486086127", "createdAt": "2020-09-10T06:06:10Z", "author": {"login": "usmansaleem"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/ExternalSigner.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.signer;\n+\n+import static java.util.Collections.emptyMap;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForRandaoReveal;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregateAndProof;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregationSlot;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAttestationData;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignBlock;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignVoluntaryExit;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import java.net.URI;\n+import java.net.URL;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.time.Duration;\n+import java.util.Map;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.bls.BLSPublicKey;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.core.signatures.Signer;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.operations.VoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.ForkInfo;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class ExternalSigner implements Signer {\n+  public static final String EXTERNAL_SIGNER_ENDPOINT = \"/api/v1/eth2/sign\";\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final URL signingServiceUrl;\n+  private final BLSPublicKey blsPublicKey;\n+  private final Duration timeout;\n+  private final HttpClient httpClient = HttpClient.newHttpClient();\n+\n+  public ExternalSigner(\n+      final URL signingServiceUrl, final BLSPublicKey blsPublicKey, final Duration timeout) {\n+    this.signingServiceUrl = signingServiceUrl;\n+    this.blsPublicKey = blsPublicKey;\n+    this.timeout = timeout;\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> createRandaoReveal(final UInt64 epoch, final ForkInfo forkInfo) {\n+    return sign(signingRootForRandaoReveal(epoch, forkInfo), emptyMap());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MjA3Mw=="}, "originalCommit": {"oid": "bb2092bdd9c76546c6ba47711e2287f214e8bdab"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEwNDY3MA==", "bodyText": "done", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486104670", "createdAt": "2020-09-10T06:50:57Z", "author": {"login": "usmansaleem"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/ExternalSigner.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.signer;\n+\n+import static java.util.Collections.emptyMap;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForRandaoReveal;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregateAndProof;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregationSlot;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAttestationData;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignBlock;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignVoluntaryExit;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import java.net.URI;\n+import java.net.URL;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.time.Duration;\n+import java.util.Map;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.bls.BLSPublicKey;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.core.signatures.Signer;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.operations.VoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.ForkInfo;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class ExternalSigner implements Signer {\n+  public static final String EXTERNAL_SIGNER_ENDPOINT = \"/api/v1/eth2/sign\";\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final URL signingServiceUrl;\n+  private final BLSPublicKey blsPublicKey;\n+  private final Duration timeout;\n+  private final HttpClient httpClient = HttpClient.newHttpClient();\n+\n+  public ExternalSigner(\n+      final URL signingServiceUrl, final BLSPublicKey blsPublicKey, final Duration timeout) {\n+    this.signingServiceUrl = signingServiceUrl;\n+    this.blsPublicKey = blsPublicKey;\n+    this.timeout = timeout;\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> createRandaoReveal(final UInt64 epoch, final ForkInfo forkInfo) {\n+    return sign(signingRootForRandaoReveal(epoch, forkInfo), emptyMap());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MjA3Mw=="}, "originalCommit": {"oid": "bb2092bdd9c76546c6ba47711e2287f214e8bdab"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDI5NTE2OnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/SigningRequestBody.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzoyOTozOVrOHQJGjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzo1NTo1OVrOHQJkrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4ODM5Nw==", "bodyText": "Any particular reason to used a LinkedHashMap instead of just HashMap here?", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486688397", "createdAt": "2020-09-10T23:29:39Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/SigningRequestBody.java", "diffHunk": "@@ -13,28 +13,51 @@\n \n package tech.pegasys.teku.validator.client.signer;\n \n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonGetter;\n-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n import org.apache.tuweni.bytes.Bytes;\n \n-@JsonIgnoreProperties(ignoreUnknown = true)\n public class SigningRequestBody {\n+  @JsonProperty(\"signingRoot\")\n+  private Bytes signingRoot;\n \n-  private final Bytes data;\n+  @JsonProperty(\"type\")\n+  private SignType type;\n \n-  @JsonCreator\n-  public SigningRequestBody(@JsonProperty(\"data\") final String data) {\n-    this.data = Bytes.fromHexString(data);\n+  @JsonAnySetter private final Map<String, Object> metadata = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b00410a30da2117401bd4487821985be5a1aa6f4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NDE1Mg==", "bodyText": "Not for any particular performance reason I recall, I can switch it back to HashMap.", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486694152", "createdAt": "2020-09-10T23:49:28Z", "author": {"login": "usmansaleem"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/SigningRequestBody.java", "diffHunk": "@@ -13,28 +13,51 @@\n \n package tech.pegasys.teku.validator.client.signer;\n \n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonGetter;\n-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n import org.apache.tuweni.bytes.Bytes;\n \n-@JsonIgnoreProperties(ignoreUnknown = true)\n public class SigningRequestBody {\n+  @JsonProperty(\"signingRoot\")\n+  private Bytes signingRoot;\n \n-  private final Bytes data;\n+  @JsonProperty(\"type\")\n+  private SignType type;\n \n-  @JsonCreator\n-  public SigningRequestBody(@JsonProperty(\"data\") final String data) {\n-    this.data = Bytes.fromHexString(data);\n+  @JsonAnySetter private final Map<String, Object> metadata = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4ODM5Nw=="}, "originalCommit": {"oid": "b00410a30da2117401bd4487821985be5a1aa6f4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NDc0OA==", "bodyText": "Simpler is better. :). The only reason I can think of is if you're asserting the order of the content somehow in tests.  As long as you're using .equals comparison of two HashMap instances they won't care about order.", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486694748", "createdAt": "2020-09-10T23:51:10Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/SigningRequestBody.java", "diffHunk": "@@ -13,28 +13,51 @@\n \n package tech.pegasys.teku.validator.client.signer;\n \n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonGetter;\n-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n import org.apache.tuweni.bytes.Bytes;\n \n-@JsonIgnoreProperties(ignoreUnknown = true)\n public class SigningRequestBody {\n+  @JsonProperty(\"signingRoot\")\n+  private Bytes signingRoot;\n \n-  private final Bytes data;\n+  @JsonProperty(\"type\")\n+  private SignType type;\n \n-  @JsonCreator\n-  public SigningRequestBody(@JsonProperty(\"data\") final String data) {\n-    this.data = Bytes.fromHexString(data);\n+  @JsonAnySetter private final Map<String, Object> metadata = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4ODM5Nw=="}, "originalCommit": {"oid": "b00410a30da2117401bd4487821985be5a1aa6f4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NjExMA==", "bodyText": "The tests are asserting only outgoing json data in integration test, so using HashMap is working there.", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486696110", "createdAt": "2020-09-10T23:55:59Z", "author": {"login": "usmansaleem"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/SigningRequestBody.java", "diffHunk": "@@ -13,28 +13,51 @@\n \n package tech.pegasys.teku.validator.client.signer;\n \n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonGetter;\n-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n import org.apache.tuweni.bytes.Bytes;\n \n-@JsonIgnoreProperties(ignoreUnknown = true)\n public class SigningRequestBody {\n+  @JsonProperty(\"signingRoot\")\n+  private Bytes signingRoot;\n \n-  private final Bytes data;\n+  @JsonProperty(\"type\")\n+  private SignType type;\n \n-  @JsonCreator\n-  public SigningRequestBody(@JsonProperty(\"data\") final String data) {\n-    this.data = Bytes.fromHexString(data);\n+  @JsonAnySetter private final Map<String, Object> metadata = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4ODM5Nw=="}, "originalCommit": {"oid": "b00410a30da2117401bd4487821985be5a1aa6f4"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3230, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}