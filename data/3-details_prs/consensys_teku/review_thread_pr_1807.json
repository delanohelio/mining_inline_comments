{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NzEwNDgy", "number": 1807, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjowODoyNlrOD-CMSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjowODoyNlrOD-CMSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mzc0MjE5OnYy", "diffSide": "RIGHT", "path": "storage/src/test/java/tech/pegasys/teku/storage/client/RecentChainDataTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjowODoyNlrOGX40sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMjowODoyNlrOGX40sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcwMTQyNA==", "bodyText": "nit: Probably don't need the empty comment.", "url": "https://github.com/ConsenSys/teku/pull/1807#discussion_r427701424", "createdAt": "2020-05-20T02:08:26Z", "author": {"login": "ajsutton"}, "path": "storage/src/test/java/tech/pegasys/teku/storage/client/RecentChainDataTest.java", "diffHunk": "@@ -631,6 +631,55 @@ public void getBlockRootBySlot_queryEntireChain() throws Exception {\n     }\n   }\n \n+  @Test\n+  public void getBlockRootBySlotWithHeadRoot_forSlotAfterHeadRoot() throws Exception {\n+    final SignedBlockAndState targetBlock = advanceBestBlock(storageClient);\n+    final SignedBlockAndState bestBlock = advanceBestBlock(storageClient);\n+\n+    assertThat(storageClient.getBlockRootBySlot(bestBlock.getSlot(), targetBlock.getRoot()))\n+        .contains(targetBlock.getRoot());\n+  }\n+\n+  @Test\n+  public void getBlockRootBySlotWithHeadRoot_forUnknownHeadRoot() throws Exception {\n+    final Bytes32 headRoot = dataStructureUtil.randomBytes32();\n+    final SignedBlockAndState bestBlock = advanceBestBlock(storageClient);\n+\n+    assertThat(storageClient.getBlockRootBySlot(bestBlock.getSlot(), headRoot)).isEmpty();\n+  }\n+\n+  @Test\n+  public void getBlockRootBySlotWithHeadRoot_withForkRoot() throws Exception {\n+    // Build small chain\n+    for (int i = 0; i < 5; i++) {\n+      advanceChain(storageClient);\n+    }\n+\n+    // Split the chain\n+    final ChainBuilder fork = chainBuilder.fork();\n+    final UnsignedLong chainSplitSlot = chainBuilder.getLatestSlot();\n+    for (int i = 0; i < 5; i++) {\n+      final UnsignedLong canonicalBlockSlot = chainSplitSlot.plus(UnsignedLong.valueOf(i * 2 + 2));\n+      final UnsignedLong forkSlot = chainSplitSlot.plus(UnsignedLong.valueOf(i * 2 + 1));\n+      updateBestBlock(storageClient, chainBuilder.generateBlockAtSlot(canonicalBlockSlot));\n+      saveBlock(storageClient, fork.generateBlockAtSlot(forkSlot));\n+    }\n+\n+    final Bytes32 headRoot = fork.getLatestBlockAndState().getRoot();\n+    for (int i = 0; i < fork.getLatestSlot().intValue(); i++) {\n+      //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff7e64f118df27dd7517917d4f35bd021bf20cd0"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3636, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}