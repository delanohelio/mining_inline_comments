{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5ODk3MTQ2", "number": 2618, "title": "[Issue 2600] find a common ancestor slot to sync from", "bodyText": "If there are at least 10_000 slots after the local finalized slot, interrogate a set of slots in the range of 3000-2000 behind our head slot, and see if there are any in common with the peer. If that finds a match, use that as the first slot to sync from. Otherwise, sync from the finalized checkpoint as previously.\n\nfixes #2600\nSigned-off-by: Paul Harris paul.harris@consensys.net\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-08-19T03:25:10Z", "url": "https://github.com/ConsenSys/teku/pull/2618", "merged": true, "mergeCommit": {"oid": "05042113e8e3977bed6795e128a9ba43b919a9d4"}, "closed": true, "closedAt": "2020-08-19T05:56:10Z", "author": {"login": "rolfyone"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAS-7wAH2gAyNDY5ODk3MTQ2OjgwODA0ZjQyMWM5YjkwZmY3YzI3Yzg4ZDVhNzkxYjQwZjhlZDg0Yzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAU3xJgH2gAyNDY5ODk3MTQ2OjNhMDg0YjAyMjhkNjk1MTY3MGQwYTdjZmJjZDhkZmU2ZjAyOWUyOWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "80804f421c9b90ff7c27c88d5a791b40f8ed84c9", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/80804f421c9b90ff7c27c88d5a791b40f8ed84c9", "committedDate": "2020-08-19T03:24:16Z", "message": "[Issue 2600] find a common ancestor slot to sync from\n\n - If there are at least 10_000 slots after the local finalized slot, interrogate a set of slots in the range of 3000-2000 behind our head slot, and see if there are any in common with the peer. If that finds a match, use that as the first slot to sync from. Otherwise, sync from the finalized checkpoint as previously.\n\n fixes #2600\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMTAwNTc4", "url": "https://github.com/ConsenSys/teku/pull/2618#pullrequestreview-470100578", "createdAt": "2020-08-19T03:32:44Z", "commit": {"oid": "80804f421c9b90ff7c27c88d5a791b40f8ed84c9"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzozMjo0NVrOHCv3BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDowMjo1MlrOHCw-TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY0MzMzMw==", "bodyText": "10,000 slots seems like it's too many.  I wonder if we should just make this the same as optimistic history length. We only make one extra request if we trigger this logic so it's very cheap compared to downloading all the blocks since finalisation.", "url": "https://github.com/ConsenSys/teku/pull/2618#discussion_r472643333", "createdAt": "2020-08-19T03:32:45Z", "author": {"login": "ajsutton"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/CommonAncestor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.sync;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.networking.eth2.peers.Eth2Peer;\n+import tech.pegasys.teku.networking.eth2.peers.PeerStatus;\n+import tech.pegasys.teku.networking.eth2.rpc.core.ResponseStreamListener;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class CommonAncestor {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private static final int MINIMUM_VIABLE_SLOTS = 10000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80804f421c9b90ff7c27c88d5a791b40f8ed84c9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY0Njc0OA==", "bodyText": "I think we want localHead.min(status.getHeadSlot()) because in rare cases it's possible that the peer has a lower head slot but a higher finalised epoch which would cause us to sync to it.  This would be the case if 2/3rds of the Medalla validators all attested that there had been no blocks since finalisation stopped - head block would be back in epoch 2289 but the finalised epoch would be 3287.", "url": "https://github.com/ConsenSys/teku/pull/2618#discussion_r472646748", "createdAt": "2020-08-19T03:38:47Z", "author": {"login": "ajsutton"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/CommonAncestor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.sync;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.networking.eth2.peers.Eth2Peer;\n+import tech.pegasys.teku.networking.eth2.peers.PeerStatus;\n+import tech.pegasys.teku.networking.eth2.rpc.core.ResponseStreamListener;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class CommonAncestor {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private static final int MINIMUM_VIABLE_SLOTS = 10000;\n+  private static final int OPTIMISTIC_HISTORY_LENGTH = 3000;\n+  private final RecentChainData storageClient;\n+\n+  public CommonAncestor(final RecentChainData storageClient) {\n+    this.storageClient = storageClient;\n+  }\n+\n+  public SafeFuture<UInt64> getCommonAncestor(\n+      final Eth2Peer peer, final PeerStatus status, final UInt64 firstNonFinalSlot) {\n+    final UInt64 localHead = storageClient.getHeadSlot();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80804f421c9b90ff7c27c88d5a791b40f8ed84c9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY0Nzc3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (localHead.isGreaterThanOrEqualTo(firstNonFinalSlot.plus(MINIMUM_VIABLE_SLOTS))\n          \n          \n            \n                    && firstNonFinalSlot.plus(MINIMUM_VIABLE_SLOTS).isLessThan(status.getHeadSlot())) {\n          \n          \n            \n                if (localHead.isGreaterThanOrEqualTo(firstNonFinalSlot.plus(MINIMUM_VIABLE_SLOTS))\n          \n          \n            \n                    && status.getHeadSlot().isGreaterThanOrEqualTo(firstNonFinalSlot.plus(MINIMUM_VIABLE_SLOTS))) {\n          \n      \n    \n    \n  \n\nfor consistency", "url": "https://github.com/ConsenSys/teku/pull/2618#discussion_r472647776", "createdAt": "2020-08-19T03:40:27Z", "author": {"login": "ajsutton"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/CommonAncestor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.sync;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.networking.eth2.peers.Eth2Peer;\n+import tech.pegasys.teku.networking.eth2.peers.PeerStatus;\n+import tech.pegasys.teku.networking.eth2.rpc.core.ResponseStreamListener;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class CommonAncestor {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private static final int MINIMUM_VIABLE_SLOTS = 10000;\n+  private static final int OPTIMISTIC_HISTORY_LENGTH = 3000;\n+  private final RecentChainData storageClient;\n+\n+  public CommonAncestor(final RecentChainData storageClient) {\n+    this.storageClient = storageClient;\n+  }\n+\n+  public SafeFuture<UInt64> getCommonAncestor(\n+      final Eth2Peer peer, final PeerStatus status, final UInt64 firstNonFinalSlot) {\n+    final UInt64 localHead = storageClient.getHeadSlot();\n+    // more than 10000 blocks behind, try to find a better starting slot if we have non finalized\n+    // data\n+    if (localHead.isGreaterThanOrEqualTo(firstNonFinalSlot.plus(MINIMUM_VIABLE_SLOTS))\n+        && firstNonFinalSlot.plus(MINIMUM_VIABLE_SLOTS).isLessThan(status.getHeadSlot())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80804f421c9b90ff7c27c88d5a791b40f8ed84c9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY1OTIxOA==", "bodyText": "Probably make these constants and show the calculation - ie that it's important they total just 1000 slots, and with a comment about Prysm's limitations.", "url": "https://github.com/ConsenSys/teku/pull/2618#discussion_r472659218", "createdAt": "2020-08-19T03:59:09Z", "author": {"login": "ajsutton"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/CommonAncestor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.sync;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.networking.eth2.peers.Eth2Peer;\n+import tech.pegasys.teku.networking.eth2.peers.PeerStatus;\n+import tech.pegasys.teku.networking.eth2.rpc.core.ResponseStreamListener;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class CommonAncestor {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private static final int MINIMUM_VIABLE_SLOTS = 10000;\n+  private static final int OPTIMISTIC_HISTORY_LENGTH = 3000;\n+  private final RecentChainData storageClient;\n+\n+  public CommonAncestor(final RecentChainData storageClient) {\n+    this.storageClient = storageClient;\n+  }\n+\n+  public SafeFuture<UInt64> getCommonAncestor(\n+      final Eth2Peer peer, final PeerStatus status, final UInt64 firstNonFinalSlot) {\n+    final UInt64 localHead = storageClient.getHeadSlot();\n+    // more than 10000 blocks behind, try to find a better starting slot if we have non finalized\n+    // data\n+    if (localHead.isGreaterThanOrEqualTo(firstNonFinalSlot.plus(MINIMUM_VIABLE_SLOTS))\n+        && firstNonFinalSlot.plus(MINIMUM_VIABLE_SLOTS).isLessThan(status.getHeadSlot())) {\n+      final UInt64 localNonFinalisedSlotCount = localHead.minus(firstNonFinalSlot);\n+      final UInt64 count = UInt64.valueOf(20);\n+      final UInt64 freq = UInt64.valueOf(50);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80804f421c9b90ff7c27c88d5a791b40f8ed84c9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY2MDk3NQ==", "bodyText": "nit: Make MINIMUM_VIABLE_SLOTS a UInt in the constant to make this more readable.", "url": "https://github.com/ConsenSys/teku/pull/2618#discussion_r472660975", "createdAt": "2020-08-19T04:01:53Z", "author": {"login": "ajsutton"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/CommonAncestor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.sync;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.networking.eth2.peers.Eth2Peer;\n+import tech.pegasys.teku.networking.eth2.peers.PeerStatus;\n+import tech.pegasys.teku.networking.eth2.rpc.core.ResponseStreamListener;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class CommonAncestor {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private static final int MINIMUM_VIABLE_SLOTS = 10000;\n+  private static final int OPTIMISTIC_HISTORY_LENGTH = 3000;\n+  private final RecentChainData storageClient;\n+\n+  public CommonAncestor(final RecentChainData storageClient) {\n+    this.storageClient = storageClient;\n+  }\n+\n+  public SafeFuture<UInt64> getCommonAncestor(\n+      final Eth2Peer peer, final PeerStatus status, final UInt64 firstNonFinalSlot) {\n+    final UInt64 localHead = storageClient.getHeadSlot();\n+    // more than 10000 blocks behind, try to find a better starting slot if we have non finalized\n+    // data\n+    if (localHead.isGreaterThanOrEqualTo(firstNonFinalSlot.plus(MINIMUM_VIABLE_SLOTS))\n+        && firstNonFinalSlot.plus(MINIMUM_VIABLE_SLOTS).isLessThan(status.getHeadSlot())) {\n+      final UInt64 localNonFinalisedSlotCount = localHead.minus(firstNonFinalSlot);\n+      final UInt64 count = UInt64.valueOf(20);\n+      final UInt64 freq = UInt64.valueOf(50);\n+      final UInt64 firstRequestedSlot =\n+          localNonFinalisedSlotCount.isGreaterThanOrEqualTo(UInt64.valueOf(MINIMUM_VIABLE_SLOTS))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80804f421c9b90ff7c27c88d5a791b40f8ed84c9"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY2MTU4MQ==", "bodyText": "And probably invert the if condition so that we return early instead of having the whole method inside the if.", "url": "https://github.com/ConsenSys/teku/pull/2618#discussion_r472661581", "createdAt": "2020-08-19T04:02:52Z", "author": {"login": "ajsutton"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/CommonAncestor.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.sync;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.networking.eth2.peers.Eth2Peer;\n+import tech.pegasys.teku.networking.eth2.peers.PeerStatus;\n+import tech.pegasys.teku.networking.eth2.rpc.core.ResponseStreamListener;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class CommonAncestor {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private static final int MINIMUM_VIABLE_SLOTS = 10000;\n+  private static final int OPTIMISTIC_HISTORY_LENGTH = 3000;\n+  private final RecentChainData storageClient;\n+\n+  public CommonAncestor(final RecentChainData storageClient) {\n+    this.storageClient = storageClient;\n+  }\n+\n+  public SafeFuture<UInt64> getCommonAncestor(\n+      final Eth2Peer peer, final PeerStatus status, final UInt64 firstNonFinalSlot) {\n+    final UInt64 localHead = storageClient.getHeadSlot();\n+    // more than 10000 blocks behind, try to find a better starting slot if we have non finalized\n+    // data\n+    if (localHead.isGreaterThanOrEqualTo(firstNonFinalSlot.plus(MINIMUM_VIABLE_SLOTS))\n+        && firstNonFinalSlot.plus(MINIMUM_VIABLE_SLOTS).isLessThan(status.getHeadSlot())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY0Nzc3Ng=="}, "originalCommit": {"oid": "80804f421c9b90ff7c27c88d5a791b40f8ed84c9"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04318b62f285824876fe0e0a89fb2a9e51aa5bc8", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/04318b62f285824876fe0e0a89fb2a9e51aa5bc8", "committedDate": "2020-08-19T05:26:53Z", "message": "review feedback.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a084b0228d6951670d0a7cfbcd8dfe6f029e29a", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/3a084b0228d6951670d0a7cfbcd8dfe6f029e29a", "committedDate": "2020-08-19T05:36:15Z", "message": "Merge remote-tracking branch 'upstream/master' into optimistic-sync"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3506, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}