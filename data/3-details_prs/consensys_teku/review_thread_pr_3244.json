{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNjQzOTY3", "number": 3244, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMDowMzoxOVrOE6SVCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMDowMzoxOVrOE6SVCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTUzMTYyOnYy", "diffSide": "RIGHT", "path": "infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/SafeFuture.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMDowMzoxOVrOH1Qdeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMDoxNDowNlrOH2AR0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwNjI2Ng==", "bodyText": "This works well with the current use cases but at some point we probably should update it to avoid recursion if the returned future is already complete - otherwise we risk getting StackOverflowException.  Will be quite nice to hide that complexity in here.", "url": "https://github.com/ConsenSys/teku/pull/3244#discussion_r525606266", "createdAt": "2020-11-18T00:03:19Z", "author": {"login": "ajsutton"}, "path": "infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/SafeFuture.java", "diffHunk": "@@ -122,6 +122,17 @@ public static Interruptor createInterruptor(\n     return new Interruptor(interruptFuture, exceptionSupplier);\n   }\n \n+  /**\n+   * Repeatedly run the loop until it returns false or completes exceptionally\n+   *\n+   * @param loopBody A supplier for generating futures to be run in succession\n+   * @return A future that will complete when looping terminates\n+   */\n+  public static SafeFuture<Void> asyncDoWhile(ExceptionThrowingFutureSupplier<Boolean> loopBody) {\n+    return SafeFuture.of(loopBody::get)\n+        .thenCompose(res -> res ? asyncDoWhile(loopBody) : SafeFuture.COMPLETE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04780b934675c1bb0e3983f8b5dd16be0e1d569"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMzNjgwNw==", "bodyText": "good call - will follow up on this", "url": "https://github.com/ConsenSys/teku/pull/3244#discussion_r526336807", "createdAt": "2020-11-18T18:46:53Z", "author": {"login": "mbaxter"}, "path": "infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/SafeFuture.java", "diffHunk": "@@ -122,6 +122,17 @@ public static Interruptor createInterruptor(\n     return new Interruptor(interruptFuture, exceptionSupplier);\n   }\n \n+  /**\n+   * Repeatedly run the loop until it returns false or completes exceptionally\n+   *\n+   * @param loopBody A supplier for generating futures to be run in succession\n+   * @return A future that will complete when looping terminates\n+   */\n+  public static SafeFuture<Void> asyncDoWhile(ExceptionThrowingFutureSupplier<Boolean> loopBody) {\n+    return SafeFuture.of(loopBody::get)\n+        .thenCompose(res -> res ? asyncDoWhile(loopBody) : SafeFuture.COMPLETE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwNjI2Ng=="}, "originalCommit": {"oid": "f04780b934675c1bb0e3983f8b5dd16be0e1d569"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4OTcxMg==", "bodyText": "Fixed here: #3253", "url": "https://github.com/ConsenSys/teku/pull/3244#discussion_r526389712", "createdAt": "2020-11-18T20:14:06Z", "author": {"login": "mbaxter"}, "path": "infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/SafeFuture.java", "diffHunk": "@@ -122,6 +122,17 @@ public static Interruptor createInterruptor(\n     return new Interruptor(interruptFuture, exceptionSupplier);\n   }\n \n+  /**\n+   * Repeatedly run the loop until it returns false or completes exceptionally\n+   *\n+   * @param loopBody A supplier for generating futures to be run in succession\n+   * @return A future that will complete when looping terminates\n+   */\n+  public static SafeFuture<Void> asyncDoWhile(ExceptionThrowingFutureSupplier<Boolean> loopBody) {\n+    return SafeFuture.of(loopBody::get)\n+        .thenCompose(res -> res ? asyncDoWhile(loopBody) : SafeFuture.COMPLETE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYwNjI2Ng=="}, "originalCommit": {"oid": "f04780b934675c1bb0e3983f8b5dd16be0e1d569"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3037, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}