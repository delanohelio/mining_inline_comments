{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNjM2MjM0", "number": 1239, "title": "Introduce ConnectionManager and integrate discovery", "bodyText": "Integrates discovery into the P2PNetwork setup via a ConnectionManager that periodically searches for new peers and attempts to connect to them.\nNot entirely convinced that wrapping it all up in another P2PNetwork implementation, but nothing else seemed to work. The big advantage is that the whole P2P infrastructure is presented as a single component to the rest of the application but still has a clear divide between libp2p, eth2 and discv5 within the p2p module.\nMockId now implements equals and hashCode correctly (all NodeId implementation are now compared purely on the bytes representation of the ID so they are comparable).  This has resulted in a number of tests needing to specify unique IDs.", "createdAt": "2020-02-27T04:51:35Z", "url": "https://github.com/ConsenSys/teku/pull/1239", "merged": true, "mergeCommit": {"oid": "38185beae145f618486a25cdfb6728024d86d7cc"}, "closed": true, "closedAt": "2020-03-04T20:33:51Z", "author": {"login": "ajsutton"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcITxQ-gH2gAyMzgwNjM2MjM0OjczNmU4MWNiMjdkNzkzMjQwNzBlOWE1MzAxMjFmNTM1ZTk5OGFlZWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKc2ZcgH2gAyMzgwNjM2MjM0Ojc1YzhiMDk1ZDZiNjQxODQzNjMzMzY4YTQ3YWU0MzNlYTM1NjY2OTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "736e81cb27d79324070e9a530121f535e998aeeb", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/736e81cb27d79324070e9a530121f535e998aeeb", "committedDate": "2020-02-27T04:39:29Z", "message": "Introduce ConnectionManager and integrate discovery into our P2P network."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d7f709f31621361f0f9d40633939f81a940e698", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/3d7f709f31621361f0f9d40633939f81a940e698", "committedDate": "2020-02-27T04:41:06Z", "message": "Use interface as return type."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f3a820ea78eba40adc64320f66b6284b24f46ce", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/6f3a820ea78eba40adc64320f66b6284b24f46ce", "committedDate": "2020-02-27T04:51:52Z", "message": "Merge branch 'master' of github.com:PegaSysEng/artemis into connection-manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce23bbe717dd5fa818e73f4dc30e3b56c0f6a12a", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/ce23bbe717dd5fa818e73f4dc30e3b56c0f6a12a", "committedDate": "2020-02-27T05:14:28Z", "message": "Fix integration and add timeout."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e8840ef5224173f94aec6f5a6b872af3420d37f", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/3e8840ef5224173f94aec6f5a6b872af3420d37f", "committedDate": "2020-02-27T05:16:11Z", "message": "Merge branch 'master' of github.com:PegaSysEng/artemis into connection-manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccc5b0e12b02e0d58f7f9ec3d99c60a40898c6f0", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/ccc5b0e12b02e0d58f7f9ec3d99c60a40898c6f0", "committedDate": "2020-02-27T05:16:56Z", "message": "Spotless."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2617b922b0d18fa31b16ec996becfbb484cbd373", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/2617b922b0d18fa31b16ec996becfbb484cbd373", "committedDate": "2020-02-27T05:19:27Z", "message": "Suppress warning."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2d72b29428c4483b435d1363c00b2a6a8ebff5e", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/b2d72b29428c4483b435d1363c00b2a6a8ebff5e", "committedDate": "2020-02-27T09:05:03Z", "message": "Convert to LibP2P PeerIDs the right way."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc187152e857d85cb2cef8decf8f0f92476d5cee", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/fc187152e857d85cb2cef8decf8f0f92476d5cee", "committedDate": "2020-02-27T20:31:40Z", "message": "Merge branch 'master' of github.com:PegaSysEng/artemis into connection-manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b44d97c1aaa240486ed5d628819e19d6b3330462", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/b44d97c1aaa240486ed5d628819e19d6b3330462", "committedDate": "2020-02-27T22:07:04Z", "message": "Add getEnr."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34fb4f7e4070f9a5107c1b05291d6eaa49c3cffc", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/34fb4f7e4070f9a5107c1b05291d6eaa49c3cffc", "committedDate": "2020-02-27T22:11:10Z", "message": "Fix compile."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61171fe7b84f352556eef9efec414499f9883f71", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/61171fe7b84f352556eef9efec414499f9883f71", "committedDate": "2020-02-27T22:48:48Z", "message": "Fix test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1c8c9f6e26da7c6e5c40c028b37cd2597a3bf71", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/d1c8c9f6e26da7c6e5c40c028b37cd2597a3bf71", "committedDate": "2020-02-27T23:16:52Z", "message": "MockP2PNetwork never actually uses peers, so it can have a generic Peer type and we can avoid casting."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NDI4Mjk1", "url": "https://github.com/ConsenSys/teku/pull/1239#pullrequestreview-366428295", "createdAt": "2020-02-28T14:18:38Z", "commit": {"oid": "d1c8c9f6e26da7c6e5c40c028b37cd2597a3bf71"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDoxODozOFrOFv2cEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyNzo1MlrOFv40Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxOTMxNQ==", "bodyText": "nice", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r385719315", "createdAt": "2020-02-28T14:18:38Z", "author": {"login": "mbaxter"}, "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/discovery/ConnectionManager.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.p2p.discovery;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.artemis.networking.p2p.network.P2PNetwork;\n+import tech.pegasys.artemis.networking.p2p.peer.Peer;\n+import tech.pegasys.artemis.service.serviceutils.Service;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class ConnectionManager extends Service {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private static final Duration RECONNECT_TIMEOUT = Duration.ofSeconds(20);\n+  private static final Duration DISCOVERY_INTERVAL = Duration.ofSeconds(30);\n+  private final AsyncRunner asyncRunner;\n+  private final P2PNetwork<? extends Peer> network;\n+  private final List<String> staticPeers;\n+  private final DiscoveryService discoveryService;\n+\n+  public ConnectionManager(\n+      final DiscoveryService discoveryService,\n+      final AsyncRunner asyncRunner,\n+      final P2PNetwork<? extends Peer> network,\n+      final List<String> staticPeers) {\n+    this.asyncRunner = asyncRunner;\n+    this.network = network;\n+    this.staticPeers = staticPeers;\n+    this.discoveryService = discoveryService;\n+  }\n+\n+  @Override\n+  protected SafeFuture<?> doStart() {\n+    staticPeers.forEach(this::createPersistentConnection);\n+    connectToKnownPeers();\n+    searchForPeers().reportExceptions();\n+    return SafeFuture.COMPLETE;\n+  }\n+\n+  private void connectToKnownPeers() {\n+    discoveryService.streamKnownPeers().forEach(this::attemptConnection);\n+  }\n+\n+  private SafeFuture<Void> searchForPeers() {\n+    if (!isRunning()) {\n+      return SafeFuture.COMPLETE;\n+    }\n+    return SafeFuture.of(discoveryService.searchForPeers())\n+        .orTimeout(10, TimeUnit.SECONDS)\n+        .exceptionally(\n+            error -> {\n+              LOG.debug(\"Discovery failed\", error);\n+              return null;\n+            })\n+        .thenCompose(\n+            __ -> {\n+              connectToKnownPeers();\n+              return asyncRunner.runAfterDelay(\n+                  this::searchForPeers, DISCOVERY_INTERVAL.toMillis(), TimeUnit.MILLISECONDS);\n+            });\n+  }\n+\n+  private void attemptConnection(final DiscoveryPeer discoveryPeer) {\n+    network\n+        .connect(discoveryPeer)\n+        .finish(\n+            peer -> LOG.trace(\"Successfully connected to peer {}\", peer.getId()),\n+            error ->\n+                LOG.trace(\n+                    () -> \"Failed to connect to peer: \" + discoveryPeer.getPublicKey(), error));\n+  }\n+\n+  @Override\n+  protected SafeFuture<?> doStop() {\n+    return SafeFuture.COMPLETE;\n+  }\n+\n+  private void createPersistentConnection(final String peerAddress) {\n+    maintainPersistentConnection(peerAddress).reportExceptions();\n+  }\n+\n+  private SafeFuture<Peer> maintainPersistentConnection(final String peerAddress) {\n+    LOG.debug(\"Connecting to peer {}\", peerAddress);\n+    return network\n+        .connect(peerAddress)\n+        .exceptionallyCompose(\n+            error -> {\n+              if (!isRunning()) {\n+                // We've been stopped so halt the process.\n+                return new SafeFuture<>();\n+              }\n+              LOG.debug(\n+                  \"Connection to {} failed: {}. Will retry in {} sec\",\n+                  peerAddress,\n+                  error,\n+                  RECONNECT_TIMEOUT.toSeconds());\n+              return asyncRunner.runAfterDelay(\n+                  () -> maintainPersistentConnection(peerAddress),\n+                  RECONNECT_TIMEOUT.toMillis(),\n+                  TimeUnit.MILLISECONDS);\n+            })\n+        .thenApply(\n+            peer -> {\n+              LOG.debug(\"Connection to peer {} was successful\", peer.getId());\n+              peer.subscribeDisconnect(() -> createPersistentConnection(peerAddress));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c8c9f6e26da7c6e5c40c028b37cd2597a3bf71"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyMTIzNQ==", "bodyText": "Isn't this going to create multiple connections to each discovered peer?", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r385721235", "createdAt": "2020-02-28T14:22:19Z", "author": {"login": "mbaxter"}, "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/discovery/ConnectionManager.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.p2p.discovery;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.artemis.networking.p2p.network.P2PNetwork;\n+import tech.pegasys.artemis.networking.p2p.peer.Peer;\n+import tech.pegasys.artemis.service.serviceutils.Service;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class ConnectionManager extends Service {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private static final Duration RECONNECT_TIMEOUT = Duration.ofSeconds(20);\n+  private static final Duration DISCOVERY_INTERVAL = Duration.ofSeconds(30);\n+  private final AsyncRunner asyncRunner;\n+  private final P2PNetwork<? extends Peer> network;\n+  private final List<String> staticPeers;\n+  private final DiscoveryService discoveryService;\n+\n+  public ConnectionManager(\n+      final DiscoveryService discoveryService,\n+      final AsyncRunner asyncRunner,\n+      final P2PNetwork<? extends Peer> network,\n+      final List<String> staticPeers) {\n+    this.asyncRunner = asyncRunner;\n+    this.network = network;\n+    this.staticPeers = staticPeers;\n+    this.discoveryService = discoveryService;\n+  }\n+\n+  @Override\n+  protected SafeFuture<?> doStart() {\n+    staticPeers.forEach(this::createPersistentConnection);\n+    connectToKnownPeers();\n+    searchForPeers().reportExceptions();\n+    return SafeFuture.COMPLETE;\n+  }\n+\n+  private void connectToKnownPeers() {\n+    discoveryService.streamKnownPeers().forEach(this::attemptConnection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c8c9f6e26da7c6e5c40c028b37cd2597a3bf71"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyMjkwOA==", "bodyText": "We no longer need to manage static peers here, right?", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r385722908", "createdAt": "2020-02-28T14:25:25Z", "author": {"login": "mbaxter"}, "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/libp2p/LibP2PNetwork.java", "diffHunk": "@@ -154,7 +153,7 @@ public LibP2PNetwork(\n               STDOUT.log(Level.INFO, \"Listening for connections on: \" + getNodeAddress());\n               return null;\n             })\n-        .thenRun(() -> config.getPeers().forEach(reportExceptions(this::connect)));\n+        .thenRun(() -> config.getStaticPeers().forEach(reportExceptions(this::connect)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c8c9f6e26da7c6e5c40c028b37cd2597a3bf71"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTczODcyMw==", "bodyText": "This won't necessarily give us the right answer if we end up connecting to different endpoints using the same node id.  That sounds sort of theoretical, but the prysm node i've been running seems to be tracking lots of peers with the same node id but different addresses.  It also won't handle duplicate connections to the same endpoint.\nWe should probably make connectedPeerMap map from Connection to Peer.", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r385738723", "createdAt": "2020-02-28T14:54:19Z", "author": {"login": "mbaxter"}, "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/libp2p/PeerManager.java", "diffHunk": "@@ -81,36 +74,12 @@ public void unsubscribeConnect(final long subscriptionId) {\n     connectSubscribers.unsubscribe(subscriptionId);\n   }\n \n-  public SafeFuture<?> connect(final Multiaddr peer, final Network network) {\n+  public SafeFuture<Peer> connect(final Multiaddr peer, final Network network) {\n     LOG.debug(\"Connecting to {}\", peer);\n-    final SafeFuture<Connection> initialConnectionFuture = SafeFuture.of(network.connect(peer));\n-\n-    // Retry if peer disconnects or we fail to connect\n-    initialConnectionFuture\n-        .thenCompose(\n-            conn -> {\n-              LOG.debug(\"Connection to peer {} was successful\", conn.secureSession().getRemoteId());\n-              return SafeFuture.of(conn.closeFuture());\n-            })\n-        .exceptionally(\n-            (err) -> {\n-              LOG.debug(\"Connection to {} failed: {}\", peer, err);\n-              return null;\n-            })\n-        .thenCompose(\n-            (res) -> {\n-              LOG.debug(\n-                  \"Connection to {} was closed. Will retry in {} sec\",\n-                  peer,\n-                  RECONNECT_TIMEOUT.toSeconds());\n-              return asyncRunner.runAfterDelay(\n-                  () -> connect(peer, network).exceptionally(err -> null),\n-                  RECONNECT_TIMEOUT.toMillis(),\n-                  TimeUnit.MILLISECONDS);\n-            })\n-        .reportExceptions();\n-\n-    return initialConnectionFuture;\n+    return SafeFuture.of(network.connect(peer))\n+        .thenApply(\n+            connection ->\n+                connectedPeerMap.get(new LibP2PNodeId(connection.secureSession().getRemoteId())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c8c9f6e26da7c6e5c40c028b37cd2597a3bf71"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MzU0OQ==", "bodyText": "I'm not sure this is the right structure long-term.  At some point, the eth2 logic will need to be able to ask the ConnectionManager to find and maintain connections to peers who support specific topics.\nI was thinking we could have an independent p2p.connection package with a ConnectionManager that holds a P2PNetwork and a DiscoveryService, and could expose methods for setting static peers, max connections, and other peer requirements (like required topics).  Eth2NetworkFactory could then build a ConnectionManager configured however it wants.", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r385753549", "createdAt": "2020-02-28T15:19:52Z", "author": {"login": "mbaxter"}, "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.p2p;\n+\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.networking.p2p.discovery.ConnectionManager;\n+import tech.pegasys.artemis.networking.p2p.discovery.DiscoveryService;\n+import tech.pegasys.artemis.networking.p2p.discovery.discv5.DiscV5Service;\n+import tech.pegasys.artemis.networking.p2p.network.DelegatingP2PNetwork;\n+import tech.pegasys.artemis.networking.p2p.network.NetworkConfig;\n+import tech.pegasys.artemis.networking.p2p.network.P2PNetwork;\n+import tech.pegasys.artemis.networking.p2p.peer.NodeId;\n+import tech.pegasys.artemis.networking.p2p.peer.Peer;\n+import tech.pegasys.artemis.networking.p2p.peer.PeerConnectedSubscriber;\n+import tech.pegasys.artemis.util.async.DelayedExecutorAsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class DiscoveryNetwork<P extends Peer> extends DelegatingP2PNetwork<P> {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final P2PNetwork<P> p2pNetwork;\n+  private final DiscoveryService discoveryService;\n+  private final ConnectionManager connectionManager;\n+\n+  public DiscoveryNetwork(\n+      final P2PNetwork<P> p2pNetwork,\n+      final DiscoveryService discoveryService,\n+      final ConnectionManager connectionManager) {\n+    super(p2pNetwork);\n+    this.p2pNetwork = p2pNetwork;\n+    this.discoveryService = discoveryService;\n+    this.connectionManager = connectionManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c8c9f6e26da7c6e5c40c028b37cd2597a3bf71"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1ODI5MA==", "bodyText": "With everything now hooked up, can we get an integration test similar to: https://github.com/mbaxter/artemis/blob/488fbba1ef9b554912c0d513f09945394e31f76f/networking/eth2/src/integration-test/java/tech/pegasys/artemis/networking/eth2/DiscoveryIntegrationTest.java#L48-L63 ??", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r385758290", "createdAt": "2020-02-28T15:27:52Z", "author": {"login": "mbaxter"}, "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.p2p;\n+\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.networking.p2p.discovery.ConnectionManager;\n+import tech.pegasys.artemis.networking.p2p.discovery.DiscoveryService;\n+import tech.pegasys.artemis.networking.p2p.discovery.discv5.DiscV5Service;\n+import tech.pegasys.artemis.networking.p2p.network.DelegatingP2PNetwork;\n+import tech.pegasys.artemis.networking.p2p.network.NetworkConfig;\n+import tech.pegasys.artemis.networking.p2p.network.P2PNetwork;\n+import tech.pegasys.artemis.networking.p2p.peer.NodeId;\n+import tech.pegasys.artemis.networking.p2p.peer.Peer;\n+import tech.pegasys.artemis.networking.p2p.peer.PeerConnectedSubscriber;\n+import tech.pegasys.artemis.util.async.DelayedExecutorAsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class DiscoveryNetwork<P extends Peer> extends DelegatingP2PNetwork<P> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c8c9f6e26da7c6e5c40c028b37cd2597a3bf71"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3988df3c75c3ddc2f94f175417c7acd0f2079b05", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/3988df3c75c3ddc2f94f175417c7acd0f2079b05", "committedDate": "2020-03-01T21:44:34Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into connection-manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52bc166c35d29609ca50d5b27b5c9b7bc5f4b9b9", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/52bc166c35d29609ca50d5b27b5c9b7bc5f4b9b9", "committedDate": "2020-03-01T21:56:52Z", "message": "Remove last bit of static peer handling from LipP2PNetwork"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb9792ba6cd0747256a9a5640f5bdb46d72520db", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/eb9792ba6cd0747256a9a5640f5bdb46d72520db", "committedDate": "2020-03-01T23:48:19Z", "message": "Add discovery network integration test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4db8db6082952ba6c936cc2cb461e0ee5e8381da", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/4db8db6082952ba6c936cc2cb461e0ee5e8381da", "committedDate": "2020-03-01T23:53:08Z", "message": "Remove unused variable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64191c5f816802f3538be73d4517238ecd411429", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/64191c5f816802f3538be73d4517238ecd411429", "committedDate": "2020-03-02T00:04:02Z", "message": "Manually connect to static peers in Eth2NetworkFactory."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce37480388530460d8c18f4ecbfec5ca57a60f34", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/ce37480388530460d8c18f4ecbfec5ca57a60f34", "committedDate": "2020-03-02T00:08:13Z", "message": "Don't ignore future."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "386a26de7d16b354e7f02fc4cc5c6f99d57a73e7", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/386a26de7d16b354e7f02fc4cc5c6f99d57a73e7", "committedDate": "2020-03-02T02:07:07Z", "message": "Push creation of DiscoveryNetwork inside Eth2NetworkBuilder."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d75b76374c55f52e0523511a499db9a74f2818e", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/8d75b76374c55f52e0523511a499db9a74f2818e", "committedDate": "2020-03-02T03:58:58Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into connection-manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99f8c419af3f075f25de12deeb455a0dab9cd638", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/99f8c419af3f075f25de12deeb455a0dab9cd638", "committedDate": "2020-03-02T04:38:12Z", "message": "Respect the discovery config option so discv5 can be enabled and disabled."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5233a54c824c91c1c98a030feaa0524f580368b", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/f5233a54c824c91c1c98a030feaa0524f580368b", "committedDate": "2020-03-02T04:41:36Z", "message": "Spotless."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MjcyMzI1", "url": "https://github.com/ConsenSys/teku/pull/1239#pullrequestreview-367272325", "createdAt": "2020-03-02T15:09:05Z", "commit": {"oid": "f5233a54c824c91c1c98a030feaa0524f580368b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTowOTowNVrOFwi-Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNToxODoyOVrOFwjVsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0ODk1OQ==", "bodyText": "What about wrapping it the other way:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return DiscoveryNetwork.create(\n          \n          \n            \n                final P2PNetwork discoveryNetwork = DiscoveryNetwork.create(network, config);\n          \n          \n            \n                return new Eth2Network(discoveryNetwork, eth2PeerManager, eventBus, chainStorageClient);", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r386448959", "createdAt": "2020-03-02T15:09:05Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/Eth2NetworkBuilder.java", "diffHunk": "@@ -58,7 +60,8 @@ public Eth2Network build() {\n     // Build core network and inject eth2 handlers\n     final P2PNetwork<?> network = buildNetwork();\n \n-    return new Eth2Network(network, eth2PeerManager, eventBus, chainStorageClient);\n+    return DiscoveryNetwork.create(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5233a54c824c91c1c98a030feaa0524f580368b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ1MTI5Mg==", "bodyText": "Why add explicit connection logic here instead of just configuring the static peers?", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r386451292", "createdAt": "2020-03-02T15:12:52Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test-support/java/tech/pegasys/artemis/networking/eth2/Eth2NetworkFactory.java", "diffHunk": "@@ -80,6 +80,9 @@ protected Eth2Network buildAndStartNetwork() throws Exception {\n         try {\n           network.start().get(30, TimeUnit.SECONDS);\n           networks.add(network);\n+          for (Eth2Network peer : peers) {\n+            network.connect(peer.getNodeAddress()).join();\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5233a54c824c91c1c98a030feaa0524f580368b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ1NDk2MQ==", "bodyText": "If ConnectionManager holds the base P2PNetwork (LibP2PNetwork) rather than the higher-level Eth2Network, you don't get circular dependencies.", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r386454961", "createdAt": "2020-03-02T15:18:29Z", "author": {"login": "mbaxter"}, "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.p2p;\n+\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.networking.p2p.discovery.ConnectionManager;\n+import tech.pegasys.artemis.networking.p2p.discovery.DiscoveryService;\n+import tech.pegasys.artemis.networking.p2p.discovery.discv5.DiscV5Service;\n+import tech.pegasys.artemis.networking.p2p.network.DelegatingP2PNetwork;\n+import tech.pegasys.artemis.networking.p2p.network.NetworkConfig;\n+import tech.pegasys.artemis.networking.p2p.network.P2PNetwork;\n+import tech.pegasys.artemis.networking.p2p.peer.NodeId;\n+import tech.pegasys.artemis.networking.p2p.peer.Peer;\n+import tech.pegasys.artemis.networking.p2p.peer.PeerConnectedSubscriber;\n+import tech.pegasys.artemis.util.async.DelayedExecutorAsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class DiscoveryNetwork<P extends Peer> extends DelegatingP2PNetwork<P> {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final P2PNetwork<P> p2pNetwork;\n+  private final DiscoveryService discoveryService;\n+  private final ConnectionManager connectionManager;\n+\n+  public DiscoveryNetwork(\n+      final P2PNetwork<P> p2pNetwork,\n+      final DiscoveryService discoveryService,\n+      final ConnectionManager connectionManager) {\n+    super(p2pNetwork);\n+    this.p2pNetwork = p2pNetwork;\n+    this.discoveryService = discoveryService;\n+    this.connectionManager = connectionManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MzU0OQ=="}, "originalCommit": {"oid": "d1c8c9f6e26da7c6e5c40c028b37cd2597a3bf71"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e807f9c10a89a9d278285a654b40e07d068dbfb3", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/e807f9c10a89a9d278285a654b40e07d068dbfb3", "committedDate": "2020-03-03T03:13:39Z", "message": "Eth2Network delegates to DiscoveryNetwork rather than the other way around."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d68550774f4e0216e6729ae7cbbd6c1b2cee798", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/9d68550774f4e0216e6729ae7cbbd6c1b2cee798", "committedDate": "2020-03-03T03:13:46Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into connection-manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb20bf9efaa2129c13a742f250acea34fe8e2fef", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/fb20bf9efaa2129c13a742f250acea34fe8e2fef", "committedDate": "2020-03-03T23:43:39Z", "message": "Merge branch 'master' into connection-manager"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4ODY0MTA0", "url": "https://github.com/ConsenSys/teku/pull/1239#pullrequestreview-368864104", "createdAt": "2020-03-04T15:16:16Z", "commit": {"oid": "fb20bf9efaa2129c13a742f250acea34fe8e2fef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75c8b095d6b641843633368a47ae433ea3566693", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/75c8b095d6b641843633368a47ae433ea3566693", "committedDate": "2020-03-04T20:22:05Z", "message": "Merge branch 'master' into connection-manager"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4128, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}