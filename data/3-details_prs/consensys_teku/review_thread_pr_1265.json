{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNzY5Nzkz", "number": 1265, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwOTo1MTowNlrODklKJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzo0ODo1MVrODlPmpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Njg0MTM1OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/RestApiConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwOTo1MTowNlrOFw-36A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDo1NDo0MVrOFxf-tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkwNjA4OA==", "bodyText": "prysm defaults this to 250, i think we should do the same. even if we went as high as 500, just want to make sure that we get that middle ground of 'not too much' data.", "url": "https://github.com/ConsenSys/teku/pull/1265#discussion_r386906088", "createdAt": "2020-03-03T09:51:06Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/RestApiConstants.java", "diffHunk": "@@ -18,6 +18,10 @@\n   public static final String SLOT = \"slot\";\n   public static final String EPOCH = \"epoch\";\n   public static final String ACTIVE = \"active\";\n+  public static final String PAGE_SIZE = \"pageSize\";\n+  public static final String PAGE_TOKEN = \"pageToken\";\n+  public static final int PAGE_SIZE_DEFAULT = 20;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05376670b0edc46abaf5fe4bc8a24e2ba527badb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0ODUwMg==", "bodyText": "done", "url": "https://github.com/ConsenSys/teku/pull/1265#discussion_r387448502", "createdAt": "2020-03-04T04:54:41Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/RestApiConstants.java", "diffHunk": "@@ -18,6 +18,10 @@\n   public static final String SLOT = \"slot\";\n   public static final String EPOCH = \"epoch\";\n   public static final String ACTIVE = \"active\";\n+  public static final String PAGE_SIZE = \"pageSize\";\n+  public static final String PAGE_TOKEN = \"pageToken\";\n+  public static final int PAGE_SIZE_DEFAULT = 20;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkwNjA4OA=="}, "originalCommit": {"oid": "05376670b0edc46abaf5fe4bc8a24e2ba527badb"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Njg0NDY4OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconValidatorsHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwOTo1MjowN1rOFw-6AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjoxNzoxNFrOFxYozA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkwNjYyNA==", "bodyText": "should comment here that the default pagination is X (ideally reference the variable).", "url": "https://github.com/ConsenSys/teku/pull/1265#discussion_r386906624", "createdAt": "2020-03-03T09:52:07Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconValidatorsHandler.java", "diffHunk": "@@ -69,7 +74,13 @@ public BeaconValidatorsHandler(\n         @OpenApiParam(\n             name = ACTIVE,\n             description =\n-                \"If specified, return only validators which are active in the specified epoch\")\n+                \"If specified, return only validators which are active in the specified epoch.\"),\n+        @OpenApiParam(\n+            name = PAGE_SIZE,\n+            description = \"If specified, return only this many results.\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05376670b0edc46abaf5fe4bc8a24e2ba527badb"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMyODIwNA==", "bodyText": "done", "url": "https://github.com/ConsenSys/teku/pull/1265#discussion_r387328204", "createdAt": "2020-03-03T22:17:14Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconValidatorsHandler.java", "diffHunk": "@@ -69,7 +74,13 @@ public BeaconValidatorsHandler(\n         @OpenApiParam(\n             name = ACTIVE,\n             description =\n-                \"If specified, return only validators which are active in the specified epoch\")\n+                \"If specified, return only validators which are active in the specified epoch.\"),\n+        @OpenApiParam(\n+            name = PAGE_SIZE,\n+            description = \"If specified, return only this many results.\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkwNjYyNA=="}, "originalCommit": {"oid": "05376670b0edc46abaf5fe4bc8a24e2ba527badb"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Njk0MDg1OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/schema/BeaconValidatorsResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMDoxOTozMFrOFw_17Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNDozNjowOFrOFxfwRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkyMTk2NQ==", "bodyText": "i'm not sure in the response we want to be using SSZList unless we've got a good reason. we can just use ArrayList and not have the baggage... they serialize the same way\nWe might find this logic to be a useful utility function, passing in a list (I'd probably make it a List, as both SSZVector and SSZList come from Arraylist from memory) and getting a page of data...\nsince it's a list, we could possibly just use list.sublist, and pass it the start and end and return the result of that... also can just return List.of() for empty...", "url": "https://github.com/ConsenSys/teku/pull/1265#discussion_r386921965", "createdAt": "2020-03-03T10:19:30Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/schema/BeaconValidatorsResponse.java", "diffHunk": "@@ -18,8 +18,43 @@\n \n public class BeaconValidatorsResponse {\n   public final SSZList<Validator> validatorList;\n+  private int totalSize;\n+  private int nextPageToken;\n \n   public BeaconValidatorsResponse(SSZList<Validator> validatorList) {\n-    this.validatorList = validatorList;\n+    this(validatorList, 20, 0);\n+  }\n+\n+  public BeaconValidatorsResponse(\n+      SSZList<Validator> validatorList, final int pageSize, final int pageToken) {\n+    // first page is pageToken = 0\n+    if (pageSize > 0 && pageToken >= 0) {\n+      int offset = pageToken * pageSize;\n+      SSZList<Validator> pageOfValidators = new SSZList<>(Validator.class, pageSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05376670b0edc46abaf5fe4bc8a24e2ba527badb"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NDgwNg==", "bodyText": "as per discussion, can't simply use List.sublist because of the indexing. Other suggestions taken on board. SSZList is gone from Response and now using List.of() for empty", "url": "https://github.com/ConsenSys/teku/pull/1265#discussion_r387444806", "createdAt": "2020-03-04T04:36:08Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/schema/BeaconValidatorsResponse.java", "diffHunk": "@@ -18,8 +18,43 @@\n \n public class BeaconValidatorsResponse {\n   public final SSZList<Validator> validatorList;\n+  private int totalSize;\n+  private int nextPageToken;\n \n   public BeaconValidatorsResponse(SSZList<Validator> validatorList) {\n-    this.validatorList = validatorList;\n+    this(validatorList, 20, 0);\n+  }\n+\n+  public BeaconValidatorsResponse(\n+      SSZList<Validator> validatorList, final int pageSize, final int pageToken) {\n+    // first page is pageToken = 0\n+    if (pageSize > 0 && pageToken >= 0) {\n+      int offset = pageToken * pageSize;\n+      SSZList<Validator> pageOfValidators = new SSZList<>(Validator.class, pageSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkyMTk2NQ=="}, "originalCommit": {"oid": "05376670b0edc46abaf5fe4bc8a24e2ba527badb"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDU4MzM5OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconValidatorsHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzozNDoxNFrOFxiiaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMjo0NzozMVrOFyAd7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MDQxMQ==", "bodyText": "should probably say 'active' if that's what we're referring to by 'current'?", "url": "https://github.com/ConsenSys/teku/pull/1265#discussion_r387490411", "createdAt": "2020-03-04T07:34:14Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconValidatorsHandler.java", "diffHunk": "@@ -65,22 +63,30 @@ public BeaconValidatorsHandler(\n   @OpenApi(\n       path = ROUTE,\n       method = HttpMethod.GET,\n-      summary = \"Get validators from the running beacon node that match the specified query.\",\n+      summary = \"Returns validators that match the specified query.\",\n       tags = {TAG_BEACON},\n       description =\n-          \"Requests validator information. If no parameters specified, all current validators are returned.\",\n+          \"Returns validator information. If no parameters specified, the first page of current validators are returned.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f3fabb96b900defab10f0a402fb5ff51d15b61"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxMDgyOA==", "bodyText": "no it's current as in \"as of the current epoch\"", "url": "https://github.com/ConsenSys/teku/pull/1265#discussion_r387510828", "createdAt": "2020-03-04T08:26:25Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconValidatorsHandler.java", "diffHunk": "@@ -65,22 +63,30 @@ public BeaconValidatorsHandler(\n   @OpenApi(\n       path = ROUTE,\n       method = HttpMethod.GET,\n-      summary = \"Get validators from the running beacon node that match the specified query.\",\n+      summary = \"Returns validators that match the specified query.\",\n       tags = {TAG_BEACON},\n       description =\n-          \"Requests validator information. If no parameters specified, all current validators are returned.\",\n+          \"Returns validator information. If no parameters specified, the first page of current validators are returned.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MDQxMQ=="}, "originalCommit": {"oid": "29f3fabb96b900defab10f0a402fb5ff51d15b61"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4MDc4Mw==", "bodyText": "hopefully clearer now", "url": "https://github.com/ConsenSys/teku/pull/1265#discussion_r387980783", "createdAt": "2020-03-04T22:47:31Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconValidatorsHandler.java", "diffHunk": "@@ -65,22 +63,30 @@ public BeaconValidatorsHandler(\n   @OpenApi(\n       path = ROUTE,\n       method = HttpMethod.GET,\n-      summary = \"Get validators from the running beacon node that match the specified query.\",\n+      summary = \"Returns validators that match the specified query.\",\n       tags = {TAG_BEACON},\n       description =\n-          \"Requests validator information. If no parameters specified, all current validators are returned.\",\n+          \"Returns validator information. If no parameters specified, the first page of current validators are returned.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MDQxMQ=="}, "originalCommit": {"oid": "29f3fabb96b900defab10f0a402fb5ff51d15b61"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzc5NTU3OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconValidatorsHandlerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzo0ODo1MVrOFyBzMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzo0ODo1MVrOFyBzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODAwMjYxMQ==", "bodyText": "@tapanshah21", "url": "https://github.com/ConsenSys/teku/pull/1265#discussion_r388002611", "createdAt": "2020-03-04T23:48:51Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconValidatorsHandlerTest.java", "diffHunk": "@@ -186,45 +205,105 @@ public void shouldReturnActiveValidatorsWhenQueryByActiveOnly() throws Exception\n     assertEquals(data.get(), jsonProvider.objectToJSON(beaconActiveValidators));\n   }\n \n-  private BeaconState addActiveValidator(final BeaconState beaconState) {\n-    MutableBeaconState beaconStateW = beaconState.createWritableCopy();\n+  @Test\n+  public void shouldReturnSubsetOfValidatorsWhenQueryByEpochAndPageSize() throws Exception {\n+    BeaconValidatorsHandler handler = new BeaconValidatorsHandler(combinedClient, jsonProvider);\n+    final int suppliedPageSizeParam = 10;\n+    when(context.queryParamMap())\n+        .thenReturn(\n+            Map.of(\n+                EPOCH,\n+                List.of(epoch.toString()),\n+                PAGE_SIZE,\n+                List.of(String.valueOf(suppliedPageSizeParam))));\n+    final UnsignedLong slot = BeaconStateUtil.compute_start_slot_at_epoch(epoch);\n \n-    // create an ACTIVE validator and add it to the list\n-    MutableValidator v = DataStructureUtil.randomValidator(88).createWritableCopy();\n-    v.setActivation_eligibility_epoch(UnsignedLong.ZERO);\n-    v.setActivation_epoch(beaconState.getFinalized_checkpoint().getEpoch());\n-    beaconStateW.getValidators().add(v);\n-    return beaconStateW.commitChanges();\n+    when(combinedClient.getBestBlockRoot()).thenReturn(Optional.of(blockRoot));\n+\n+    BeaconValidatorsResponse beaconValidators =\n+        new BeaconValidatorsResponse(\n+            beaconState.getValidators(), false, epoch, suppliedPageSizeParam, PAGE_TOKEN_DEFAULT);\n+\n+    when(combinedClient.getStateAtSlot(slot, blockRoot))\n+        .thenReturn(SafeFuture.completedFuture(Optional.of(beaconState)));\n+\n+    handler.handle(context);\n+\n+    verify(combinedClient).getBestBlockRoot();\n+    verify(combinedClient).getStateAtSlot(slot, blockRoot);\n+    verify(context).result(args.capture());\n+\n+    SafeFuture<String> data = args.getValue();\n+    assertEquals(data.get(), jsonProvider.objectToJSON(beaconValidators));\n   }\n \n   @Test\n-  public void getActiveValidators() {\n-    BeaconState beaconState = DataStructureUtil.randomBeaconState(23);\n-    MutableBeaconState beaconStateW = beaconState.createWritableCopy();\n+  public void shouldReturnSubsetOfValidatorsWhenQueryByEpochAndPageSizeAndPageToken()\n+      throws Exception {\n+    BeaconValidatorsHandler handler = new BeaconValidatorsHandler(combinedClient, jsonProvider);\n+    final int suppliedPageSizeParam = 10;\n+    final int suppliedPageTokenParam = 1;\n+    when(context.queryParamMap())\n+        .thenReturn(\n+            Map.of(\n+                EPOCH,\n+                List.of(epoch.toString()),\n+                PAGE_SIZE,\n+                List.of(String.valueOf(suppliedPageSizeParam)),\n+                PAGE_TOKEN,\n+                List.of(String.valueOf(suppliedPageTokenParam))));\n+    final UnsignedLong slot = BeaconStateUtil.compute_start_slot_at_epoch(epoch);\n \n-    SSZList<Validator> allValidators = beaconState.getValidators();\n-    SSZList<Validator> activeValidators = BeaconValidatorsHandler.getActiveValidators(beaconStateW);\n-    int originalValidatorCount = allValidators.size();\n+    when(combinedClient.getBestBlockRoot()).thenReturn(Optional.of(blockRoot));\n \n-    assertThat(activeValidators.size()).isLessThanOrEqualTo(beaconStateW.getValidators().size());\n+    BeaconValidatorsResponse beaconValidators =\n+        new BeaconValidatorsResponse(\n+            beaconState.getValidators(),\n+            false,\n+            epoch,\n+            suppliedPageSizeParam,\n+            suppliedPageTokenParam);\n+\n+    when(combinedClient.getStateAtSlot(slot, blockRoot))\n+        .thenReturn(SafeFuture.completedFuture(Optional.of(beaconState)));\n+\n+    handler.handle(context);\n+\n+    verify(combinedClient).getBestBlockRoot();\n+    verify(combinedClient).getStateAtSlot(slot, blockRoot);\n+    verify(context).result(args.capture());\n+\n+    SafeFuture<String> data = args.getValue();\n+    assertEquals(data.get(), jsonProvider.objectToJSON(beaconValidators));\n+  }\n+\n+  @Test\n+  public void shouldReturnBadRequestWhenBadEpochParameterSpecified() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79db18c6462e3135ad91d0e4aeefe1ceee364456"}, "originalPosition": 168}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2714, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}