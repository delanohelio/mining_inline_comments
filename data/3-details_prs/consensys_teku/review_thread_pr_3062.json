{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MDQ0NjIw", "number": 3062, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMDozMDo1NVrOExt57A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMDozODowNlrOExt8kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTY3Nzg4OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/util/SimpleOffsetSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMDozMDo1NVrOHn98dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMDozMDo1NVrOHn98dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY3MTQxNQ==", "bodyText": "nit: I'd just omit the else here since the if block returns anyway. Saves indenting the rest of the method.", "url": "https://github.com/ConsenSys/teku/pull/3062#discussion_r511671415", "createdAt": "2020-10-26T00:30:55Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/util/SimpleOffsetSerializer.java", "diffHunk": "@@ -136,40 +137,44 @@ public static void setConstants() {\n   }\n \n   public static Bytes serialize(SimpleOffsetSerializable value) {\n-    List<UInt64> variable_offsets = new ArrayList<>();\n-    List<Bytes> interleaved_values = new ArrayList<>();\n-    UInt64 fixedLengthSum = UInt64.ZERO;\n-    UInt64 varLengthSum = UInt64.ZERO;\n-\n-    for (Bytes fixedPart : value.get_fixed_parts()) {\n-      UInt64 fixedPartSize = UInt64.valueOf(fixedPart.size());\n-      if (fixedPartSize.equals(UInt64.ZERO)) {\n-        fixedPartSize = UInt64.valueOf(4L);\n+    if (value instanceof ViewRead) {\n+      return ((ViewRead) value).sszSerialize();\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "813d6a255146474c779a050ec4909e92a580df53"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTY4MzQ5OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/teku/ssz/backing/tree/TreeUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMDozNjozNFrOHn9_SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjo0NToxMlrOHoYmBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY3MjEzNg==", "bodyText": "Might be worth leaving a comment to explain why we do nothing in the !fromLeft && toLeft case.", "url": "https://github.com/ConsenSys/teku/pull/3062#discussion_r511672136", "createdAt": "2020-10-26T00:36:34Z", "author": {"login": "ajsutton"}, "path": "ssz/src/main/java/tech/pegasys/teku/ssz/backing/tree/TreeUtil.java", "diffHunk": "@@ -119,6 +119,42 @@ public static int estimateNonDefaultNodes(TreeNode node) {\n     }\n   }\n \n+  public static void iterateLeaves(\n+      TreeNode node, long fromGeneralIndex, long toGeneralIndex, Consumer<LeafNode> visitor) {\n+    long leftmostFromIndex = fromGeneralIndex << (63 - treeDepth(fromGeneralIndex));\n+    int shiftN = 63 - treeDepth(toGeneralIndex);\n+    long rightmostToIndex = (toGeneralIndex << shiftN) | ((1L << shiftN) - 1);\n+    iterateLeavesPriv(node, leftmostFromIndex, rightmostToIndex, visitor);\n+  }\n+\n+  private static void iterateLeavesPriv(\n+      TreeNode node, long fromGeneralIndex, long toGeneralIndex, Consumer<LeafNode> visitor) {\n+    if (node instanceof LeafNode) {\n+      visitor.accept((LeafNode) node);\n+    } else {\n+\n+      BranchNode bNode = (BranchNode) node;\n+      long anchorF = Long.highestOneBit(fromGeneralIndex);\n+      long pivotF = anchorF >>> 1;\n+      boolean fromLeft = fromGeneralIndex < (fromGeneralIndex | pivotF);\n+      long fromChildIdx = (fromGeneralIndex ^ anchorF) | pivotF;\n+\n+      long anchorT = Long.highestOneBit(toGeneralIndex);\n+      long pivotT = anchorT >>> 1;\n+      boolean toLeft = toGeneralIndex < (toGeneralIndex | pivotT);\n+      long toChildIdx = (toGeneralIndex ^ anchorT) | pivotT;\n+\n+      if (fromLeft && !toLeft) {\n+        iterateLeavesPriv(bNode.left(), fromChildIdx, -1, visitor);\n+        iterateLeavesPriv(bNode.right(), 1L << 63, toChildIdx, visitor);\n+      } else if (fromLeft && toLeft) {\n+        iterateLeavesPriv(bNode.left(), fromChildIdx, toChildIdx, visitor);\n+      } else if (!fromLeft && !toLeft) {\n+        iterateLeavesPriv(bNode.right(), fromChildIdx, toChildIdx, visitor);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "813d6a255146474c779a050ec4909e92a580df53"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwODAzNg==", "bodyText": "Yep, should throw in this case \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/3062#discussion_r512108036", "createdAt": "2020-10-26T16:45:12Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/teku/ssz/backing/tree/TreeUtil.java", "diffHunk": "@@ -119,6 +119,42 @@ public static int estimateNonDefaultNodes(TreeNode node) {\n     }\n   }\n \n+  public static void iterateLeaves(\n+      TreeNode node, long fromGeneralIndex, long toGeneralIndex, Consumer<LeafNode> visitor) {\n+    long leftmostFromIndex = fromGeneralIndex << (63 - treeDepth(fromGeneralIndex));\n+    int shiftN = 63 - treeDepth(toGeneralIndex);\n+    long rightmostToIndex = (toGeneralIndex << shiftN) | ((1L << shiftN) - 1);\n+    iterateLeavesPriv(node, leftmostFromIndex, rightmostToIndex, visitor);\n+  }\n+\n+  private static void iterateLeavesPriv(\n+      TreeNode node, long fromGeneralIndex, long toGeneralIndex, Consumer<LeafNode> visitor) {\n+    if (node instanceof LeafNode) {\n+      visitor.accept((LeafNode) node);\n+    } else {\n+\n+      BranchNode bNode = (BranchNode) node;\n+      long anchorF = Long.highestOneBit(fromGeneralIndex);\n+      long pivotF = anchorF >>> 1;\n+      boolean fromLeft = fromGeneralIndex < (fromGeneralIndex | pivotF);\n+      long fromChildIdx = (fromGeneralIndex ^ anchorF) | pivotF;\n+\n+      long anchorT = Long.highestOneBit(toGeneralIndex);\n+      long pivotT = anchorT >>> 1;\n+      boolean toLeft = toGeneralIndex < (toGeneralIndex | pivotT);\n+      long toChildIdx = (toGeneralIndex ^ anchorT) | pivotT;\n+\n+      if (fromLeft && !toLeft) {\n+        iterateLeavesPriv(bNode.left(), fromChildIdx, -1, visitor);\n+        iterateLeavesPriv(bNode.right(), 1L << 63, toChildIdx, visitor);\n+      } else if (fromLeft && toLeft) {\n+        iterateLeavesPriv(bNode.left(), fromChildIdx, toChildIdx, visitor);\n+      } else if (!fromLeft && !toLeft) {\n+        iterateLeavesPriv(bNode.right(), fromChildIdx, toChildIdx, visitor);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY3MjEzNg=="}, "originalCommit": {"oid": "813d6a255146474c779a050ec4909e92a580df53"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTY4NDY1OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/teku/ssz/backing/type/BasicViewType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMDozODowNlrOHn9_8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMDozODowNlrOHn9_8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY3MjMwNQ==", "bodyText": "Should we just omit the sszDeserialize method for now until we actually implement it?", "url": "https://github.com/ConsenSys/teku/pull/3062#discussion_r511672305", "createdAt": "2020-10-26T00:38:06Z", "author": {"login": "ajsutton"}, "path": "ssz/src/main/java/tech/pegasys/teku/ssz/backing/type/BasicViewType.java", "diffHunk": "@@ -59,4 +61,35 @@ public TreeNode createBackingNode(C newValue) {\n   @Override\n   public abstract TreeNode updateBackingNode(\n       TreeNode srcNode, int internalIndex, ViewRead newValue);\n+\n+  private int getSSZBytesSize() {\n+    return (getBitsSize() + 7) / 8;\n+  }\n+\n+  @Override\n+  public boolean isFixedSize() {\n+    return true;\n+  }\n+\n+  @Override\n+  public int getFixedPartSize() {\n+    return getSSZBytesSize();\n+  }\n+\n+  @Override\n+  public int getVariablePartSize(TreeNode node) {\n+    return 0;\n+  }\n+\n+  @Override\n+  public int sszSerialize(TreeNode node, Consumer<Bytes> writer) {\n+    Bytes ret = node.hashTreeRoot().slice(0, getSSZBytesSize());\n+    writer.accept(ret);\n+    return ret.size();\n+  }\n+\n+  @Override\n+  public TreeNode sszDeserialize(Bytes ssz) {\n+    throw new UnsupportedOperationException(\"TODO\");\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "813d6a255146474c779a050ec4909e92a580df53"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3090, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}