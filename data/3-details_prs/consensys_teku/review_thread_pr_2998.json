{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0ODI1MzU1", "number": 2998, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQyMjo0ODoxN1rOEvBFqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMzoxMzoxMVrOEvGppg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NzM2MzYxOnYy", "diffSide": "RIGHT", "path": "services/powchain/src/main/java/tech/pegasys/teku/services/powchain/Eth1ChainIdValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQyMjo0ODoxN1rOHjvK_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQyMjo0ODoxN1rOHjvK_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIzNTA2OQ==", "bodyText": "To guarantee all unhandled exceptions are reported, this should be .reportExceptions().  The exceptionallyCompose should handle all errors but if the runAfterDelay fails for some reason we want to make sure that's reported instead of silently ignored.", "url": "https://github.com/ConsenSys/teku/pull/2998#discussion_r507235069", "createdAt": "2020-10-18T22:48:17Z", "author": {"login": "ajsutton"}, "path": "services/powchain/src/main/java/tech/pegasys/teku/services/powchain/Eth1ChainIdValidator.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.services.powchain;\n+\n+import static tech.pegasys.teku.infrastructure.logging.StatusLogger.STATUS_LOG;\n+\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.infrastructure.async.AsyncRunner;\n+import tech.pegasys.teku.pow.Eth1Provider;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class Eth1ChainIdValidator {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+\n+  private final AsyncRunner asyncRunner;\n+\n+  public Eth1ChainIdValidator(Eth1Provider eth1Provider, AsyncRunner asyncRunner) {\n+    this.eth1Provider = eth1Provider;\n+    this.asyncRunner = asyncRunner;\n+  }\n+\n+  public void validate() {\n+    eth1Provider\n+        .getChainId()\n+        .thenAccept(this::onChainIdDetermined)\n+        .exceptionallyCompose(\n+            error -> {\n+              LOG.error(\"Failed to get Eth1 chain id. Will retry.\", error);\n+              return asyncRunner.runAfterDelay(this::validate, 1, TimeUnit.SECONDS);\n+            })\n+        .always(() -> {});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d12f5a34857579208966b65f8545d8cd012b268c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODI2MzU0OnYy", "diffSide": "RIGHT", "path": "services/powchain/src/main/java/tech/pegasys/teku/services/powchain/Eth1ChainIdValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMzowOTo0MVrOHj4-NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMzowOTo0MVrOHj4-NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM5NTYzNg==", "bodyText": "This should be != so we print the error if the chain ID does not match.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (chainId.intValueExact() == Constants.DEPOSIT_CHAIN_ID) {\n          \n          \n            \n                if (chainId.intValueExact() != Constants.DEPOSIT_CHAIN_ID) {", "url": "https://github.com/ConsenSys/teku/pull/2998#discussion_r507395636", "createdAt": "2020-10-19T03:09:41Z", "author": {"login": "ajsutton"}, "path": "services/powchain/src/main/java/tech/pegasys/teku/services/powchain/Eth1ChainIdValidator.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.services.powchain;\n+\n+import static tech.pegasys.teku.infrastructure.logging.StatusLogger.STATUS_LOG;\n+\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.infrastructure.async.AsyncRunner;\n+import tech.pegasys.teku.pow.Eth1Provider;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class Eth1ChainIdValidator {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+\n+  private final AsyncRunner asyncRunner;\n+\n+  public Eth1ChainIdValidator(Eth1Provider eth1Provider, AsyncRunner asyncRunner) {\n+    this.eth1Provider = eth1Provider;\n+    this.asyncRunner = asyncRunner;\n+  }\n+\n+  public void validate() {\n+    eth1Provider\n+        .getChainId()\n+        .thenAccept(this::onChainIdDetermined)\n+        .exceptionallyCompose(\n+            error -> {\n+              LOG.error(\"Failed to get Eth1 chain id. Will retry.\", error);\n+              return asyncRunner.runAfterDelay(this::validate, 1, TimeUnit.SECONDS);\n+            })\n+        .always(() -> {});\n+  }\n+\n+  private void onChainIdDetermined(BigInteger chainId) {\n+    if (chainId.intValueExact() == Constants.DEPOSIT_CHAIN_ID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d12f5a34857579208966b65f8545d8cd012b268c"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODI3NDk0OnYy", "diffSide": "RIGHT", "path": "services/powchain/src/main/java/tech/pegasys/teku/services/powchain/Eth1ChainIdValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMzoxMzoxMVrOHj5Fjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMzoxMzoxMVrOHj5Fjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM5NzUxOA==", "bodyText": "We should log this at debug level to avoid spamming the logs when the ETH1 node is down.  The ErrorTrackingEthProvider will ensure a message is logged to the console periodically if the ETH1 is unavailable.", "url": "https://github.com/ConsenSys/teku/pull/2998#discussion_r507397518", "createdAt": "2020-10-19T03:13:11Z", "author": {"login": "ajsutton"}, "path": "services/powchain/src/main/java/tech/pegasys/teku/services/powchain/Eth1ChainIdValidator.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.services.powchain;\n+\n+import static tech.pegasys.teku.infrastructure.logging.StatusLogger.STATUS_LOG;\n+\n+import java.math.BigInteger;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.infrastructure.async.AsyncRunner;\n+import tech.pegasys.teku.pow.Eth1Provider;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class Eth1ChainIdValidator {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final Eth1Provider eth1Provider;\n+\n+  private final AsyncRunner asyncRunner;\n+\n+  public Eth1ChainIdValidator(Eth1Provider eth1Provider, AsyncRunner asyncRunner) {\n+    this.eth1Provider = eth1Provider;\n+    this.asyncRunner = asyncRunner;\n+  }\n+\n+  public void validate() {\n+    eth1Provider\n+        .getChainId()\n+        .thenAccept(this::onChainIdDetermined)\n+        .exceptionallyCompose(\n+            error -> {\n+              LOG.error(\"Failed to get Eth1 chain id. Will retry.\", error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d12f5a34857579208966b65f8545d8cd012b268c"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3218, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}