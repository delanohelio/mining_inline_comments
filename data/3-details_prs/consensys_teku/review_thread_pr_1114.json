{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NDYzNzk0", "number": 1114, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMjo0NzozNlrODaVkAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMjo1MDoyMlrODaVmgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTQyODQ5OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/EpochProcessorUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMjo0NzozNlrOFhPKag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzowMjoyMFrOFhsrpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5NTc1NA==", "bodyText": "One pattern we may want to consider is allowing the caller of get_unslahsed_attesting_indices decide what type of collection it wants back.\nSo it would become:\nprivate static List<Integer> get_unslashed_attesting_indices(\n      BeaconState state, List<PendingAttestation> attestations) {\n    return get_unslashed_attesting_indices(state, attestations, ArrayList::new);\n  }\n\n  private static <T extends Collection<Integer>> T get_unslashed_attesting_indices(\n      BeaconState state,\n      List<PendingAttestation> attestations,\n      final Supplier<T> collectionFactory) {\n    TreeSet<Integer> output = new TreeSet<>();\n    for (PendingAttestation a : attestations) {\n      output.addAll(get_attesting_indices(state, a.getData(), a.getAggregation_bits()));\n    }\n    List<Integer> output_list = new ArrayList<>(output);\n    return output_list.stream()\n        .filter(index -> !state.getValidators().get(index).isSlashed())\n        .collect(Collectors.toCollection(collectionFactory));\n  }\n\nThen rather than having to copy the list into a HashSet you could just pass in HashSet::new and get a HashSet back.\nFrom a quick review of where this particular method is used I think we may always want a HashSet but I may have missed somewhere that order is important. I suspect the pattern of allowing the caller to determine the returned collection type will be useful in a bunch of places though.", "url": "https://github.com/ConsenSys/teku/pull/1114#discussion_r370395754", "createdAt": "2020-01-23T22:47:36Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/EpochProcessorUtil.java", "diffHunk": "@@ -332,8 +333,9 @@ private static UnsignedLong get_base_reward(BeaconState state, int index) {\n       List<Integer> unslashed_attesting_indices =\n           get_unslashed_attesting_indices(state, attestations);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2930d6846bdc3920f050f955943311bb134b65"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxNzQwOQ==", "bodyText": "Yep good point \ud83d\udc4d  And thanks for the code!\nPlease check latter commits", "url": "https://github.com/ConsenSys/teku/pull/1114#discussion_r370517409", "createdAt": "2020-01-24T08:28:32Z", "author": {"login": "Nashatyrev"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/EpochProcessorUtil.java", "diffHunk": "@@ -332,8 +333,9 @@ private static UnsignedLong get_base_reward(BeaconState state, int index) {\n       List<Integer> unslashed_attesting_indices =\n           get_unslashed_attesting_indices(state, attestations);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5NTc1NA=="}, "originalCommit": {"oid": "3c2930d6846bdc3920f050f955943311bb134b65"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3OTM5Ng==", "bodyText": "Yeah looks good.  btw these optimisation PRs are all still draft so I can't actually approve them.", "url": "https://github.com/ConsenSys/teku/pull/1114#discussion_r370879396", "createdAt": "2020-01-24T23:02:20Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/EpochProcessorUtil.java", "diffHunk": "@@ -332,8 +333,9 @@ private static UnsignedLong get_base_reward(BeaconState state, int index) {\n       List<Integer> unslashed_attesting_indices =\n           get_unslashed_attesting_indices(state, attestations);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5NTc1NA=="}, "originalCommit": {"oid": "3c2930d6846bdc3920f050f955943311bb134b65"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTQzNDkxOnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/EpochProcessorUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMjo1MDoyMlrOFhPOdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwODoyNzoyNVrOFhWkLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5Njc5MQ==", "bodyText": "nit: We try to use the interface for collection types (ie Set<Integer>) in variable declarations instead of the specific implementation of HashSet. Doesn't really matter here but as things are refactored over time to extract methods etc you can wind up with specific collection types in APIs that make it harder to reuse code.", "url": "https://github.com/ConsenSys/teku/pull/1114#discussion_r370396791", "createdAt": "2020-01-23T22:50:22Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/EpochProcessorUtil.java", "diffHunk": "@@ -332,8 +333,9 @@ private static UnsignedLong get_base_reward(BeaconState state, int index) {\n       List<Integer> unslashed_attesting_indices =\n           get_unslashed_attesting_indices(state, attestations);\n       UnsignedLong attesting_balance = get_total_balance(state, unslashed_attesting_indices);\n+      HashSet<Integer> unslashed_attesting_indices_set = new HashSet<>(unslashed_attesting_indices);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c2930d6846bdc3920f050f955943311bb134b65"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUxNzAzOQ==", "bodyText": "You are right. That was just IDEA code assist :)\nHowever this is not relevant any more", "url": "https://github.com/ConsenSys/teku/pull/1114#discussion_r370517039", "createdAt": "2020-01-24T08:27:25Z", "author": {"login": "Nashatyrev"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/EpochProcessorUtil.java", "diffHunk": "@@ -332,8 +333,9 @@ private static UnsignedLong get_base_reward(BeaconState state, int index) {\n       List<Integer> unslashed_attesting_indices =\n           get_unslashed_attesting_indices(state, attestations);\n       UnsignedLong attesting_balance = get_total_balance(state, unslashed_attesting_indices);\n+      HashSet<Integer> unslashed_attesting_indices_set = new HashSet<>(unslashed_attesting_indices);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5Njc5MQ=="}, "originalCommit": {"oid": "3c2930d6846bdc3920f050f955943311bb134b65"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2800, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}