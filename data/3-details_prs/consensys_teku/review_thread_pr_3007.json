{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1NjI0NTky", "number": 3007, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzowNjo1OFrOEvakIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzozMTozNVrOEvbI7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTUzNzYxOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/stategenerator/StateRegenerationBaseSelector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzowNjo1OVrOHkYnCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDoxNzoyMVrOHkgEIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxMzk5Mw==", "bodyText": "Should we have a threshold where we only pull the epoch boundary state if it's significantly closer than closestAvailableFromStore and rebasedStartingPoint?", "url": "https://github.com/ConsenSys/teku/pull/3007#discussion_r507913993", "createdAt": "2020-10-19T17:06:59Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/stategenerator/StateRegenerationBaseSelector.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.stategenerator;\n+\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+import tech.pegasys.teku.core.lookup.BlockProvider;\n+import tech.pegasys.teku.core.lookup.StateAndBlockProvider;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.datastructures.blocks.SlotAndBlockRoot;\n+import tech.pegasys.teku.datastructures.state.BlockRootAndState;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+public class StateRegenerationBaseSelector {\n+  private final Optional<SlotAndBlockRoot> latestEpochBoundary;\n+  private final Supplier<Optional<BlockRootAndState>> closestAvailableStateSupplier;\n+  private final StateAndBlockProvider stateAndBlockProvider;\n+  private final BlockProvider blockProvider;\n+  private final Optional<SignedBlockAndState> rebasedStartingPoint;\n+\n+  public StateRegenerationBaseSelector(\n+      final Optional<SlotAndBlockRoot> latestEpochBoundary,\n+      final Supplier<Optional<BlockRootAndState>> closestAvailableStateSupplier,\n+      final StateAndBlockProvider stateAndBlockProvider,\n+      final BlockProvider blockProvider,\n+      final Optional<SignedBlockAndState> rebasedStartingPoint) {\n+    this.latestEpochBoundary = latestEpochBoundary;\n+    this.closestAvailableStateSupplier = closestAvailableStateSupplier;\n+    this.stateAndBlockProvider = stateAndBlockProvider;\n+    this.blockProvider = blockProvider;\n+    this.rebasedStartingPoint = rebasedStartingPoint;\n+  }\n+\n+  public StateRegenerationBaseSelector withRebasedStartingPoint(\n+      final SignedBlockAndState blockAndState) {\n+    if (isBetterThanCurrentRebasedStartingPoint(blockAndState)\n+        && isEqualToOrBetterThanLatestEpochBoundary(blockAndState)) {\n+      return new StateRegenerationBaseSelector(\n+          latestEpochBoundary,\n+          closestAvailableStateSupplier,\n+          stateAndBlockProvider,\n+          blockProvider,\n+          Optional.of(blockAndState));\n+    }\n+    return this;\n+  }\n+\n+  private boolean isEqualToOrBetterThanLatestEpochBoundary(\n+      final SignedBlockAndState blockAndState) {\n+    return latestEpochBoundary.isEmpty()\n+        || blockAndState.getSlot().isGreaterThanOrEqualTo(latestEpochBoundary.get().getSlot());\n+  }\n+\n+  private boolean isBetterThanCurrentRebasedStartingPoint(final SignedBlockAndState blockAndState) {\n+    return isBetterThan(\n+        blockAndState.getSlot(), rebasedStartingPoint.map(SignedBlockAndState::getSlot));\n+  }\n+\n+  public SafeFuture<Optional<SignedBlockAndState>> getBestBase() {\n+    final Optional<BlockRootAndState> closestAvailableFromStore =\n+        closestAvailableStateSupplier.get();\n+    if (closestAvailableFromStore.isEmpty()) {\n+      // Can't be a valid target state or has since been finalized. No point regenerating.\n+      return SafeFuture.completedFuture(Optional.empty());\n+    }\n+\n+    final Optional<UInt64> storeSlot = closestAvailableFromStore.map(BlockRootAndState::getSlot);\n+    final Optional<UInt64> epochBoundarySlot = latestEpochBoundary.map(SlotAndBlockRoot::getSlot);\n+    final Optional<UInt64> rebasedSlot = rebasedStartingPoint.map(SignedBlockAndState::getSlot);\n+\n+    if (epochBoundarySlot.isPresent()\n+        && isBestOption(epochBoundarySlot.get(), storeSlot, rebasedSlot)) {\n+      return stateAndBlockProvider\n+          .getBlockAndState(latestEpochBoundary.get().getBlockRoot())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d7af55f4fcaa3e2a0859baf2f34bd6cc0525a32"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzNjEzMA==", "bodyText": "hmm, yeah probably.  Will do in a separate PR though.", "url": "https://github.com/ConsenSys/teku/pull/3007#discussion_r508036130", "createdAt": "2020-10-19T20:17:21Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/stategenerator/StateRegenerationBaseSelector.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.stategenerator;\n+\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+import tech.pegasys.teku.core.lookup.BlockProvider;\n+import tech.pegasys.teku.core.lookup.StateAndBlockProvider;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.datastructures.blocks.SlotAndBlockRoot;\n+import tech.pegasys.teku.datastructures.state.BlockRootAndState;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+public class StateRegenerationBaseSelector {\n+  private final Optional<SlotAndBlockRoot> latestEpochBoundary;\n+  private final Supplier<Optional<BlockRootAndState>> closestAvailableStateSupplier;\n+  private final StateAndBlockProvider stateAndBlockProvider;\n+  private final BlockProvider blockProvider;\n+  private final Optional<SignedBlockAndState> rebasedStartingPoint;\n+\n+  public StateRegenerationBaseSelector(\n+      final Optional<SlotAndBlockRoot> latestEpochBoundary,\n+      final Supplier<Optional<BlockRootAndState>> closestAvailableStateSupplier,\n+      final StateAndBlockProvider stateAndBlockProvider,\n+      final BlockProvider blockProvider,\n+      final Optional<SignedBlockAndState> rebasedStartingPoint) {\n+    this.latestEpochBoundary = latestEpochBoundary;\n+    this.closestAvailableStateSupplier = closestAvailableStateSupplier;\n+    this.stateAndBlockProvider = stateAndBlockProvider;\n+    this.blockProvider = blockProvider;\n+    this.rebasedStartingPoint = rebasedStartingPoint;\n+  }\n+\n+  public StateRegenerationBaseSelector withRebasedStartingPoint(\n+      final SignedBlockAndState blockAndState) {\n+    if (isBetterThanCurrentRebasedStartingPoint(blockAndState)\n+        && isEqualToOrBetterThanLatestEpochBoundary(blockAndState)) {\n+      return new StateRegenerationBaseSelector(\n+          latestEpochBoundary,\n+          closestAvailableStateSupplier,\n+          stateAndBlockProvider,\n+          blockProvider,\n+          Optional.of(blockAndState));\n+    }\n+    return this;\n+  }\n+\n+  private boolean isEqualToOrBetterThanLatestEpochBoundary(\n+      final SignedBlockAndState blockAndState) {\n+    return latestEpochBoundary.isEmpty()\n+        || blockAndState.getSlot().isGreaterThanOrEqualTo(latestEpochBoundary.get().getSlot());\n+  }\n+\n+  private boolean isBetterThanCurrentRebasedStartingPoint(final SignedBlockAndState blockAndState) {\n+    return isBetterThan(\n+        blockAndState.getSlot(), rebasedStartingPoint.map(SignedBlockAndState::getSlot));\n+  }\n+\n+  public SafeFuture<Optional<SignedBlockAndState>> getBestBase() {\n+    final Optional<BlockRootAndState> closestAvailableFromStore =\n+        closestAvailableStateSupplier.get();\n+    if (closestAvailableFromStore.isEmpty()) {\n+      // Can't be a valid target state or has since been finalized. No point regenerating.\n+      return SafeFuture.completedFuture(Optional.empty());\n+    }\n+\n+    final Optional<UInt64> storeSlot = closestAvailableFromStore.map(BlockRootAndState::getSlot);\n+    final Optional<UInt64> epochBoundarySlot = latestEpochBoundary.map(SlotAndBlockRoot::getSlot);\n+    final Optional<UInt64> rebasedSlot = rebasedStartingPoint.map(SignedBlockAndState::getSlot);\n+\n+    if (epochBoundarySlot.isPresent()\n+        && isBestOption(epochBoundarySlot.get(), storeSlot, rebasedSlot)) {\n+      return stateAndBlockProvider\n+          .getBlockAndState(latestEpochBoundary.get().getBlockRoot())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkxMzk5Mw=="}, "originalCommit": {"oid": "2d7af55f4fcaa3e2a0859baf2f34bd6cc0525a32"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTYzMTgxOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/stategenerator/StateRegenerationBaseSelector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzozMTozNVrOHkZhvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDoxNzowM1rOHkgDaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyOTAyMw==", "bodyText": "Probably worth trying this as-is, but I wonder if we should stop holding onto the rebased starting point as well?  Presumably this should be in the Store when the task runs, right?", "url": "https://github.com/ConsenSys/teku/pull/3007#discussion_r507929023", "createdAt": "2020-10-19T17:31:35Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/stategenerator/StateRegenerationBaseSelector.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.stategenerator;\n+\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+import tech.pegasys.teku.core.lookup.BlockProvider;\n+import tech.pegasys.teku.core.lookup.StateAndBlockProvider;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.datastructures.blocks.SlotAndBlockRoot;\n+import tech.pegasys.teku.datastructures.state.BlockRootAndState;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+public class StateRegenerationBaseSelector {\n+  private final Optional<SlotAndBlockRoot> latestEpochBoundary;\n+  private final Supplier<Optional<BlockRootAndState>> closestAvailableStateSupplier;\n+  private final StateAndBlockProvider stateAndBlockProvider;\n+  private final BlockProvider blockProvider;\n+  private final Optional<SignedBlockAndState> rebasedStartingPoint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d7af55f4fcaa3e2a0859baf2f34bd6cc0525a32"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAzNTk0Nw==", "bodyText": "Yeah I went back and forth on that.  I'm worried that if we don't hold onto it we'll wind up constantly regenerating the same states because the store only holds them with soft references. The state generation queue rebases new tasks onto existing ones but doesn't otherwise prioritise regeneration tasks to process all of a single fork first for example and it doesn't detect when existing tasks could be rebased onto new ones.\nI suspect that will need to be the next step - especially since that's where all the memory usage comes from for checkpoint states.", "url": "https://github.com/ConsenSys/teku/pull/3007#discussion_r508035947", "createdAt": "2020-10-19T20:17:03Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/stategenerator/StateRegenerationBaseSelector.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.stategenerator;\n+\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+import tech.pegasys.teku.core.lookup.BlockProvider;\n+import tech.pegasys.teku.core.lookup.StateAndBlockProvider;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.datastructures.blocks.SlotAndBlockRoot;\n+import tech.pegasys.teku.datastructures.state.BlockRootAndState;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+public class StateRegenerationBaseSelector {\n+  private final Optional<SlotAndBlockRoot> latestEpochBoundary;\n+  private final Supplier<Optional<BlockRootAndState>> closestAvailableStateSupplier;\n+  private final StateAndBlockProvider stateAndBlockProvider;\n+  private final BlockProvider blockProvider;\n+  private final Optional<SignedBlockAndState> rebasedStartingPoint;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyOTAyMw=="}, "originalCommit": {"oid": "2d7af55f4fcaa3e2a0859baf2f34bd6cc0525a32"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3222, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}