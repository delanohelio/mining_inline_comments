{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1MzM3NzA1", "number": 2786, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMDo1OTozMFrOEi6Rqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMToxMTo1MFrOEi6VzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDQxODM0OnYy", "diffSide": "RIGHT", "path": "services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMDo1OTozMFrOHQ_Ujg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoyNjo1NFrOHRXpEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU3NjcxOA==", "bodyText": "This feels like a weird construct to both handle the error and pass it to the weakSubjectivityValidator and also leave it wind up handled by the uncaught exception handler.\nI'd have though just reporting it to the validator would be enough and it can decide how loudly to report it. So something like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .exceptionally(\n          \n          \n            \n                        err -> {\n          \n          \n            \n                          weakSubjectivityValidator.handleValidationFailure(\n          \n          \n            \n                              \"Encountered an error while trying to validate latest finalized checkpoint\", err);\n          \n          \n            \n                          throw new RuntimeException(err);\n          \n          \n            \n                        })\n          \n          \n            \n                    .reportExceptions();\n          \n          \n            \n                    .finish(\n          \n          \n            \n                        err -> {\n          \n          \n            \n                          weakSubjectivityValidator.handleValidationFailure(\n          \n          \n            \n                              \"Encountered an error while trying to validate latest finalized checkpoint\", err);\n          \n          \n            \n                        });", "url": "https://github.com/ConsenSys/teku/pull/2786#discussion_r487576718", "createdAt": "2020-09-13T20:59:30Z", "author": {"login": "ajsutton"}, "path": "services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -592,18 +596,38 @@ private void initializeGenesis(final BeaconState genesisState) {\n   private void onStoreInitialized() {\n     UInt64 genesisTime = recentChainData.getGenesisTime();\n     UInt64 currentTime = timeProvider.getTimeInSeconds();\n-    UInt64 currentSlot = ZERO;\n+    final UInt64 currentSlot;\n     if (currentTime.compareTo(genesisTime) >= 0) {\n       UInt64 deltaTime = currentTime.minus(genesisTime);\n       currentSlot = deltaTime.dividedBy(SECONDS_PER_SLOT);\n+      // Validate that we're running within the weak subjectivity period\n+      validateLatestCheckpointIsWithinWeakSubjectivityPeriod(currentSlot);\n     } else {\n+      currentSlot = ZERO;\n       UInt64 timeUntilGenesis = genesisTime.minus(currentTime);\n       genesisTimeTracker = currentTime;\n       STATUS_LOG.timeUntilGenesis(timeUntilGenesis.longValue(), p2pNetwork.getPeerCount());\n     }\n     slotProcessor.setCurrentSlot(currentSlot);\n   }\n \n+  private void validateLatestCheckpointIsWithinWeakSubjectivityPeriod(final UInt64 currentSlot) {\n+    SafeFuture.of(() -> recentChainData.getStore().retrieveFinalizedCheckpointAndState())\n+        .thenAccept(\n+            finalizedCheckpointState -> {\n+              final UInt64 slot = currentSlot.max(recentChainData.getCurrentSlot().orElse(ZERO));\n+              weakSubjectivityValidator.validateLatestFinalizedCheckpoint(\n+                  finalizedCheckpointState, slot);\n+            })\n+        .exceptionally(\n+            err -> {\n+              weakSubjectivityValidator.handleValidationFailure(\n+                  \"Encountered an error while trying to validate latest finalized checkpoint\", err);\n+              throw new RuntimeException(err);\n+            })\n+        .reportExceptions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63abecf510cc3ecf654822f7147e64e4dad30ff6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3NTE4NA==", "bodyText": "Yeah - that seems like a better approach \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/2786#discussion_r487975184", "createdAt": "2020-09-14T14:26:54Z", "author": {"login": "mbaxter"}, "path": "services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -592,18 +596,38 @@ private void initializeGenesis(final BeaconState genesisState) {\n   private void onStoreInitialized() {\n     UInt64 genesisTime = recentChainData.getGenesisTime();\n     UInt64 currentTime = timeProvider.getTimeInSeconds();\n-    UInt64 currentSlot = ZERO;\n+    final UInt64 currentSlot;\n     if (currentTime.compareTo(genesisTime) >= 0) {\n       UInt64 deltaTime = currentTime.minus(genesisTime);\n       currentSlot = deltaTime.dividedBy(SECONDS_PER_SLOT);\n+      // Validate that we're running within the weak subjectivity period\n+      validateLatestCheckpointIsWithinWeakSubjectivityPeriod(currentSlot);\n     } else {\n+      currentSlot = ZERO;\n       UInt64 timeUntilGenesis = genesisTime.minus(currentTime);\n       genesisTimeTracker = currentTime;\n       STATUS_LOG.timeUntilGenesis(timeUntilGenesis.longValue(), p2pNetwork.getPeerCount());\n     }\n     slotProcessor.setCurrentSlot(currentSlot);\n   }\n \n+  private void validateLatestCheckpointIsWithinWeakSubjectivityPeriod(final UInt64 currentSlot) {\n+    SafeFuture.of(() -> recentChainData.getStore().retrieveFinalizedCheckpointAndState())\n+        .thenAccept(\n+            finalizedCheckpointState -> {\n+              final UInt64 slot = currentSlot.max(recentChainData.getCurrentSlot().orElse(ZERO));\n+              weakSubjectivityValidator.validateLatestFinalizedCheckpoint(\n+                  finalizedCheckpointState, slot);\n+            })\n+        .exceptionally(\n+            err -> {\n+              weakSubjectivityValidator.handleValidationFailure(\n+                  \"Encountered an error while trying to validate latest finalized checkpoint\", err);\n+              throw new RuntimeException(err);\n+            })\n+        .reportExceptions();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU3NjcxOA=="}, "originalCommit": {"oid": "63abecf510cc3ecf654822f7147e64e4dad30ff6"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDQyODkyOnYy", "diffSide": "RIGHT", "path": "ethereum/weaksubjectivity/src/test/java/tech/pegasys/teku/weaksubjectivity/WeakSubjectivityCalculatorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMToxMTo1MFrOHQ_Zgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMToxMTo1MFrOHQ_Zgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU3Nzk4Nw==", "bodyText": "This seems like a very good question... :)", "url": "https://github.com/ConsenSys/teku/pull/2786#discussion_r487577987", "createdAt": "2020-09-13T21:11:50Z", "author": {"login": "ajsutton"}, "path": "ethereum/weaksubjectivity/src/test/java/tech/pegasys/teku/weaksubjectivity/WeakSubjectivityCalculatorTest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.weaksubjectivity;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.compute_start_slot_at_epoch;\n+import static tech.pegasys.teku.weaksubjectivity.WeakSubjectivityCalculator.WITHDRAWAL_DELAY;\n+\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.datastructures.state.CheckpointState;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+public class WeakSubjectivityCalculatorTest {\n+\n+  @ParameterizedTest(name = \"validatorCount: {0}, safetyDecay: {1}\")\n+  @MethodSource(\"calculateSafeEpochsParams\")\n+  public void calculateSafeEpochs(\n+      final int validatorCount, final float safetyDecay, final int expectedResult) {\n+    final WeakSubjectivityCalculator calculator = WeakSubjectivityCalculator.create(safetyDecay);\n+    UInt64 result = calculator.calculateSafeEpochs(validatorCount);\n+    assertThat(result).isEqualTo(UInt64.valueOf(expectedResult));\n+  }\n+\n+  @ParameterizedTest(name = \"validatorCount: {0}, safetyDecay: {1}\")\n+  @MethodSource(\"getWeakSubjectivityModParams\")\n+  public void getWeakSubjectivityMod(\n+      final int validatorCount, final float safetyDecay, final int expectedResult) {\n+    final WeakSubjectivityCalculator calculator = WeakSubjectivityCalculator.create(safetyDecay);\n+    UInt64 result = calculator.getWeakSubjectivityMod(validatorCount);\n+    assertThat(result).isEqualTo(UInt64.valueOf(expectedResult));\n+  }\n+\n+  @ParameterizedTest(name = \"validatorCount: {0}, safetyDecay: {1}\")\n+  @MethodSource(\"calculateSafeEpochsParams\")\n+  public void isWithinWeakSubjectivityPeriod(\n+      final int validatorCount, final float safetyDecay, final int expectedSafetyMargin) {\n+    final WeakSubjectivityCalculator calculator =\n+        new WeakSubjectivityCalculator(safetyDecay, __ -> validatorCount);\n+\n+    final UInt64 finalizedEpoch = UInt64.valueOf(10_000);\n+    final CheckpointState finalizedCheckpoint = createMockCheckpointState(finalizedEpoch);\n+    final UInt64 expectedSafeEpochs = WITHDRAWAL_DELAY.plus(expectedSafetyMargin);\n+    final UInt64 minSafeEpoch = expectedSafeEpochs.plus(finalizedEpoch);\n+\n+    // Check the minimum safe epoch\n+    final UInt64 minEpochStartSlot = compute_start_slot_at_epoch(minSafeEpoch);\n+    assertThat(calculator.isWithinWeakSubjectivityPeriod(finalizedCheckpoint, minEpochStartSlot))\n+        .isTrue();\n+    final UInt64 minEpochLastSlot = compute_start_slot_at_epoch(minSafeEpoch.plus(1)).minus(1);\n+    assertThat(calculator.isWithinWeakSubjectivityPeriod(finalizedCheckpoint, minEpochLastSlot))\n+        .isTrue();\n+\n+    // Check first unsafe epoch\n+    final UInt64 minUnsafeSlot = compute_start_slot_at_epoch(minSafeEpoch.plus(1));\n+    assertThat(calculator.isWithinWeakSubjectivityPeriod(finalizedCheckpoint, minUnsafeSlot))\n+        .isFalse();\n+    assertThat(\n+            calculator.isWithinWeakSubjectivityPeriod(finalizedCheckpoint, minUnsafeSlot.plus(1)))\n+        .isFalse();\n+\n+    // Check subsequent epochs\n+    assertThat(\n+            calculator.isWithinWeakSubjectivityPeriod(finalizedCheckpoint, minUnsafeSlot.plus(100)))\n+        .isFalse();\n+    assertThat(\n+            calculator.isWithinWeakSubjectivityPeriod(finalizedCheckpoint, minUnsafeSlot.plus(999)))\n+        .isFalse();\n+\n+    // Check earlier safe epochs\n+    final UInt64 earlierEpochSlot = compute_start_slot_at_epoch(minSafeEpoch).minus(1);\n+    assertThat(calculator.isWithinWeakSubjectivityPeriod(finalizedCheckpoint, earlierEpochSlot))\n+        .isTrue();\n+    assertThat(\n+            calculator.isWithinWeakSubjectivityPeriod(\n+                finalizedCheckpoint, earlierEpochSlot.minus(100)))\n+        .isTrue();\n+\n+    // Check finalized epoch\n+    final UInt64 finalizedEpochSlot = compute_start_slot_at_epoch(finalizedEpoch);\n+    assertThat(calculator.isWithinWeakSubjectivityPeriod(finalizedCheckpoint, finalizedEpochSlot))\n+        .isTrue();\n+  }\n+\n+  // Parameters from the table here:\n+  // https://notes.ethereum.org/@adiasg/weak-subjectvity-eth2#Calculating-the-Weak-Subjectivity-Period-Quick-Version\n+  public static Stream<Arguments> calculateSafeEpochsParams() {\n+    // TODO(#2779) - why are the results off by one from the table?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63abecf510cc3ecf654822f7147e64e4dad30ff6"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3249, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}