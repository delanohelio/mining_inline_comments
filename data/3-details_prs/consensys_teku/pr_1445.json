{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNTc4NjI5", "number": 1445, "title": "[BC-277] Convert time events to EventChannels", "bodyText": "PR Description\nhttps://pegasys1.atlassian.net/browse/BC-277", "createdAt": "2020-03-23T19:04:04Z", "url": "https://github.com/ConsenSys/teku/pull/1445", "merged": true, "mergeCommit": {"oid": "405ad2d45457bb1d79d17b82904639e69456a900"}, "closed": true, "closedAt": "2020-03-25T14:24:58Z", "author": {"login": "cemozerr"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQi4NHAH2gAyMzkyNTc4NjI5OjI2MGU3NWViNTlmNzJhODM4OTY4NjBkMTJkZmNmMjM5MDhjMjRlMmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRIFvFAH2gAyMzkyNTc4NjI5Ojk3ZDdkZWM5MjU2OGQyNDU1MzRjZGIxYWMwZmE4YWNkNjIyMDE0M2Q=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "260e75eb59f72a83896860d12dfcf23908c24e2c", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/260e75eb59f72a83896860d12dfcf23908c24e2c", "committedDate": "2020-03-23T18:47:02Z", "message": "Convert Date events to EventChannels"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7acec21c6f3bbeeb47d8edcf6a8a1a1ea81fcf7f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/7acec21c6f3bbeeb47d8edcf6a8a1a1ea81fcf7f", "committedDate": "2020-03-23T18:58:28Z", "message": "Run spotlessApply"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27fcb0fa7a3bd7d91be5513cf6b105fefee581ac", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/27fcb0fa7a3bd7d91be5513cf6b105fefee581ac", "committedDate": "2020-03-23T20:35:47Z", "message": "Convert SlotEvents to EventChannels"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89ee8387a362b8fe7dc87c15639042ccb452fff8", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/89ee8387a362b8fe7dc87c15639042ccb452fff8", "committedDate": "2020-03-23T21:06:11Z", "message": "Add publishing of SlotEvents"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33baea65362e38a7c85c8de835fb4559b14b3b3e", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/33baea65362e38a7c85c8de835fb4559b14b3b3e", "committedDate": "2020-03-23T21:07:36Z", "message": "Remove redundant argument"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a1d98416f53f3e79b654cd953e0f66ac2f6fa9f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/3a1d98416f53f3e79b654cd953e0f66ac2f6fa9f", "committedDate": "2020-03-23T21:19:04Z", "message": "Fix argument errors in tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05875b77962d8821a59b884c40af7a47f459b1c0", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/05875b77962d8821a59b884c40af7a47f459b1c0", "committedDate": "2020-03-23T22:30:35Z", "message": "Fix unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9481f8d16cb65708d0e770bf6358b9f3053dce1f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/9481f8d16cb65708d0e770bf6358b9f3053dce1f", "committedDate": "2020-03-23T23:00:05Z", "message": "Fix unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5OTY5ODM1", "url": "https://github.com/ConsenSys/teku/pull/1445#pullrequestreview-379969835", "createdAt": "2020-03-24T03:01:54Z", "commit": {"oid": "9481f8d16cb65708d0e770bf6358b9f3053dce1f"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMzowMTo1NFrOF6fdEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwMzoxNjoyMFrOF6fqTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3NzA3NA==", "bodyText": "Not sure we should be adding this.", "url": "https://github.com/ConsenSys/teku/pull/1445#discussion_r396877074", "createdAt": "2020-03-24T03:01:54Z", "author": {"login": "ajsutton"}, "path": "events/src/main/java/tech/pegasys/artemis/events/EventChannels.java", "diffHunk": "@@ -30,6 +30,10 @@ public EventChannels(\n             EventChannel.createAsync(channelInterface, exceptionHandler, metricsSystem));\n   }\n \n+  public EventChannels(final MetricsSystem metricsSystem) {\n+    this(channelInterface -> EventChannel.createAsync(channelInterface, metricsSystem));\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9481f8d16cb65708d0e770bf6358b9f3053dce1f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3ODczMg==", "bodyText": "nit: Would be neater if we got the publisher once during init and then could just call it directly here instead of having to call getPublisher each time (no performance impact, just clearer to read).", "url": "https://github.com/ConsenSys/teku/pull/1445#discussion_r396878732", "createdAt": "2020-03-24T03:08:43Z", "author": {"login": "ajsutton"}, "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -358,7 +365,7 @@ private void processSlot() {\n         EVENT_LOG.epochEvent();\n       }\n \n-      this.eventBus.post(new SlotEvent(nodeSlot));\n+      eventChannels.getPublisher(SlotEventsChannel.class).onSlot(new SlotEvent(nodeSlot));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9481f8d16cb65708d0e770bf6358b9f3053dce1f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3ODk5NQ==", "bodyText": "Why did this need to become visible for testing?", "url": "https://github.com/ConsenSys/teku/pull/1445#discussion_r396878995", "createdAt": "2020-03-24T03:09:59Z", "author": {"login": "ajsutton"}, "path": "sync/src/main/java/tech/pegasys/artemis/sync/BlockPropagationManager.java", "diffHunk": "@@ -31,31 +33,37 @@\n import tech.pegasys.artemis.statetransition.blockimport.BlockImporter;\n import tech.pegasys.artemis.statetransition.events.block.ImportedBlockEvent;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n-import tech.pegasys.artemis.storage.events.SlotEvent;\n import tech.pegasys.artemis.util.async.SafeFuture;\n import tech.pegasys.artemis.util.collections.LimitedSet;\n import tech.pegasys.artemis.util.collections.LimitedSet.Mode;\n+import tech.pegasys.artemis.util.time.SlotEvent;\n+import tech.pegasys.artemis.util.time.SlotEventsChannel;\n \n-public class BlockPropagationManager extends Service {\n+public class BlockPropagationManager extends Service implements SlotEventsChannel {\n   private static final Logger LOG = LogManager.getLogger();\n \n   private final EventBus eventBus;\n+  private final EventChannels eventChannels;\n   private final ChainStorageClient storageClient;\n   private final BlockImporter blockImporter;\n-  private final PendingPool<SignedBeaconBlock> pendingBlocks;\n+\n+  @VisibleForTesting final PendingPool<SignedBeaconBlock> pendingBlocks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9481f8d16cb65708d0e770bf6358b9f3053dce1f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3OTg4OQ==", "bodyText": "Would probably be better to use the existing constructor here and specify the exception handler explicitly.  We also don't want to wind up using an async event channel - the EventBus in this case is single threaded so we want to use sync event channels.", "url": "https://github.com/ConsenSys/teku/pull/1445#discussion_r396879889", "createdAt": "2020-03-24T03:13:49Z", "author": {"login": "ajsutton"}, "path": "sync/src/test-support/java/tech/pegasys/artemis/sync/SyncingNodeManager.java", "diffHunk": "@@ -60,6 +66,7 @@ public static SyncingNodeManager create(\n       Consumer<Eth2P2PNetworkBuilder> configureNetwork)\n       throws Exception {\n     final EventBus eventBus = new EventBus();\n+    final EventChannels eventChannels = new EventChannels(new NoOpMetricsSystem());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9481f8d16cb65708d0e770bf6358b9f3053dce1f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg4MDE5MA==", "bodyText": "I'd be tempted to use a real (sync) EventChannels rather than a mock, then you can just call eventChannels.getPublisher(SlotEventsChannel.class).onSlot(...).", "url": "https://github.com/ConsenSys/teku/pull/1445#discussion_r396880190", "createdAt": "2020-03-24T03:15:19Z", "author": {"login": "ajsutton"}, "path": "sync/src/test/java/tech/pegasys/artemis/sync/BlockPropagationManagerTest.java", "diffHunk": "@@ -281,7 +284,8 @@ public void onBlockImported_withPendingFutureBlocks() throws Exception {\n   private UnsignedLong incrementSlot() {\n     currentSlot = currentSlot.plus(UnsignedLong.ONE);\n     localChain.setSlot(currentSlot);\n-    localEventBus.post(new SlotEvent(currentSlot));\n+    blockPropagationManager.onSlot(new SlotEvent(currentSlot));\n+    blockPropagationManager.pendingBlocks.onSlot(new SlotEvent(currentSlot));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9481f8d16cb65708d0e770bf6358b9f3053dce1f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg4MDQ2MA==", "bodyText": "Maybe TimeEventsChannel or TimeTickChannel?", "url": "https://github.com/ConsenSys/teku/pull/1445#discussion_r396880460", "createdAt": "2020-03-24T03:16:20Z", "author": {"login": "ajsutton"}, "path": "util/src/main/java/tech/pegasys/artemis/util/time/DateEventsChannel.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.time;\n+\n+import java.util.Date;\n+\n+public interface DateEventsChannel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9481f8d16cb65708d0e770bf6358b9f3053dce1f"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4420433fd1e5ee58709a2ea36ff2417197eacdc9", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/4420433fd1e5ee58709a2ea36ff2417197eacdc9", "committedDate": "2020-03-24T19:47:40Z", "message": "Keep event channels at top level"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "207d5f7f3058aff2a90781837a229b23c3236680", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/207d5f7f3058aff2a90781837a229b23c3236680", "committedDate": "2020-03-24T22:11:02Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "914913c30989bdaf3408708bed01c26ba9aae3c6", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/914913c30989bdaf3408708bed01c26ba9aae3c6", "committedDate": "2020-03-24T23:00:14Z", "message": "Make Timer top level service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dda109645f925a4d8ceadb26dbea3b4e35c9426f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/dda109645f925a4d8ceadb26dbea3b4e35c9426f", "committedDate": "2020-03-24T23:09:49Z", "message": "Tidy up PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1136134e3745b76ee324d39f6ecf062a4b7c0448", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/1136134e3745b76ee324d39f6ecf062a4b7c0448", "committedDate": "2020-03-24T23:41:57Z", "message": "Merge remote-tracking branch 'remotes/origin/master' into timeEventsToEventChannels\n\n# Conflicts:\n#\tservices/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java\n#\tsync/build.gradle\n#\tvalidator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java\n#\tvalidator/coordinator/src/test/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinatorTest.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNzc4NjI5", "url": "https://github.com/ConsenSys/teku/pull/1445#pullrequestreview-380778629", "createdAt": "2020-03-25T00:02:23Z", "commit": {"oid": "dda109645f925a4d8ceadb26dbea3b4e35c9426f"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDowMjoyM1rOF7HjLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDoxMjozNlrOF7Hvog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzMzk5Ng==", "bodyText": "Rather than logging the error, we should just rethrow it to cause the test to fail (we're being called synchronously).  I'd suggest using Assertions.fail(\"Unhandled error in subscriber ...\", error).  That will give lots of context but also wind up throwing an AssertionError which will almost always bubble all the way up and fail the test (whereas RuntimeException might be caught).", "url": "https://github.com/ConsenSys/teku/pull/1445#discussion_r397533996", "createdAt": "2020-03-25T00:02:23Z", "author": {"login": "ajsutton"}, "path": "events/src/test-support/java/tech/pegasys/artemis/events/TestExceptionHandler.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.events;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import org.apache.logging.log4j.LogManager;\n+\n+public enum TestExceptionHandler implements ChannelExceptionHandler {\n+  TEST_EXCEPTION_HANDLER;\n+\n+  @Override\n+  public void handleException(\n+      final Throwable error,\n+      final Object subscriber,\n+      final Method invokedMethod,\n+      final Object[] args) {\n+    LogManager.getLogger(invokedMethod.getClass())\n+        .error(\n+            \"Unhandled error in subscriber \"\n+                + subscriber.getClass().getName()\n+                + \" for method \"\n+                + invokedMethod.getDeclaringClass().getName()\n+                + \".\"\n+                + invokedMethod.getName()\n+                + \" with arguments \"\n+                + Arrays.toString(args),\n+            error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda109645f925a4d8ceadb26dbea3b4e35c9426f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNDI2OQ==", "bodyText": "Probably shouldn't be subscribing in the constructor but do it in the init method instead.", "url": "https://github.com/ConsenSys/teku/pull/1445#discussion_r397534269", "createdAt": "2020-03-25T00:03:17Z", "author": {"login": "ajsutton"}, "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -108,6 +110,9 @@ public BeaconChainController(\n     this.metricsSystem = metricsSystem;\n     this.setupInitialState =\n         config.getDepositMode().equals(DEPOSIT_TEST) || config.getStartState() != null;\n+    this.slotEventsChannelPublisher = eventChannels.getPublisher(SlotEventsChannel.class);\n+\n+    eventChannels.subscribe(TimeTickChannel.class, this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda109645f925a4d8ceadb26dbea3b4e35c9426f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNTE4Mg==", "bodyText": "nit: We probably don't need SlotEvent anymore - can just call onSlot(nodeSlot).  The dedicated event was just because EventBus didn't provide any other context so you had to search for all usages of whatever you posted, whereas the event channel interface makes it clear where this is being used.", "url": "https://github.com/ConsenSys/teku/pull/1445#discussion_r397535182", "createdAt": "2020-03-25T00:06:16Z", "author": {"login": "ajsutton"}, "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -358,7 +354,7 @@ private void processSlot() {\n         EVENT_LOG.epochEvent();\n       }\n \n-      this.eventBus.post(new SlotEvent(nodeSlot));\n+      slotEventsChannelPublisher.onSlot(new SlotEvent(nodeSlot));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda109645f925a4d8ceadb26dbea3b4e35c9426f"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNTY4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return SafeFuture.completedFuture(null);\n          \n          \n            \n                  return SafeFuture.COMPLETE;", "url": "https://github.com/ConsenSys/teku/pull/1445#discussion_r397535682", "createdAt": "2020-03-25T00:07:48Z", "author": {"login": "ajsutton"}, "path": "services/timer/src/main/java/tech.pegasys.artemis.services.timer/TimerService.java", "diffHunk": "@@ -11,71 +11,72 @@\n  * specific language governing permissions and limitations under the License.\n  */\n \n-package tech.pegasys.artemis.util.time;\n+package tech.pegasys.artemis.services.timer;\n \n import static org.quartz.JobBuilder.newJob;\n import static org.quartz.SimpleScheduleBuilder.simpleSchedule;\n import static org.quartz.TriggerBuilder.newTrigger;\n+import static tech.pegasys.artemis.util.config.Constants.TIME_TICKER_REFRESH_RATE;\n \n-import com.google.common.eventbus.EventBus;\n-import java.util.UUID;\n import org.quartz.DateBuilder;\n import org.quartz.JobDetail;\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n import org.quartz.SchedulerFactory;\n import org.quartz.SimpleTrigger;\n import org.quartz.impl.StdSchedulerFactory;\n+import tech.pegasys.artemis.service.serviceutils.Service;\n+import tech.pegasys.artemis.service.serviceutils.ServiceConfig;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.time.channels.TimeTickChannel;\n+\n+public class TimerService extends Service {\n+\n+  public static final String TIME_EVENTS_CHANNEL = \"TimeEventsChannel\";\n \n-public class Timer {\n   private final Scheduler sched;\n   private final JobDetail job;\n-  private final UUID uuid;\n-  private int startDelay;\n+  private static int START_DELAY = 0;\n   private int interval;\n \n-  public Timer(EventBus eventBus, Integer startDelay, Integer interval)\n-      throws IllegalArgumentException {\n+  public TimerService(ServiceConfig config) {\n     SchedulerFactory sf = new StdSchedulerFactory();\n-    this.startDelay = startDelay;\n-    this.interval = interval;\n+    this.interval = (int) ((1.0 / TIME_TICKER_REFRESH_RATE) * 1000); // Tick interval\n     try {\n       sched = sf.getScheduler();\n-      uuid = UUID.randomUUID();\n-      job =\n-          newJob(ScheduledEvent.class)\n-              .withIdentity(EventBus.class.getSimpleName() + uuid.toString(), \"group\")\n-              .build();\n-      job.getJobDataMap().put(EventBus.class.getSimpleName(), eventBus);\n+      job = newJob(ScheduledTimeEvent.class).withIdentity(\"Timer\").build();\n+      job.getJobDataMap()\n+          .put(TIME_EVENTS_CHANNEL, config.getEventChannels().getPublisher(TimeTickChannel.class));\n \n     } catch (SchedulerException e) {\n-      throw new IllegalArgumentException(\n-          \"In QuartzTimer a SchedulerException was thrown: \" + e.toString());\n+      throw new IllegalArgumentException(\"TimerService failed to initialize\", e);\n     }\n   }\n \n-  public void start() throws IllegalArgumentException {\n+  @Override\n+  public SafeFuture<?> doStart() {\n     try {\n       SimpleTrigger trigger =\n           newTrigger()\n-              .withIdentity(\"trigger-\" + EventBus.class.getSimpleName() + uuid.toString(), \"group\")\n-              .startAt(DateBuilder.futureDate(startDelay, DateBuilder.IntervalUnit.MILLISECOND))\n+              .withIdentity(\"TimerTrigger\")\n+              .startAt(DateBuilder.futureDate(START_DELAY, DateBuilder.IntervalUnit.MILLISECOND))\n               .withSchedule(simpleSchedule().withIntervalInMilliseconds(interval).repeatForever())\n               .build();\n       sched.scheduleJob(job, trigger);\n       sched.start();\n+      return SafeFuture.completedFuture(null);\n     } catch (SchedulerException e) {\n-      throw new IllegalArgumentException(\n-          \"In QuartzTimer a SchedulerException was thrown: \" + e.toString());\n+      throw new IllegalArgumentException(\"TimerService failed to start\", e);\n     }\n   }\n \n-  public void stop() {\n+  @Override\n+  public SafeFuture<?> doStop() {\n     try {\n       sched.shutdown();\n+      return SafeFuture.completedFuture(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda109645f925a4d8ceadb26dbea3b4e35c9426f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNTc4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  throw new IllegalArgumentException(\"TimerService failed to stop\", e);\n          \n          \n            \n                  return SafeFuture.failedFuture(new IllegalArgumentException(\"TimerService failed to stop\", e));", "url": "https://github.com/ConsenSys/teku/pull/1445#discussion_r397535789", "createdAt": "2020-03-25T00:08:08Z", "author": {"login": "ajsutton"}, "path": "services/timer/src/main/java/tech.pegasys.artemis.services.timer/TimerService.java", "diffHunk": "@@ -11,71 +11,72 @@\n  * specific language governing permissions and limitations under the License.\n  */\n \n-package tech.pegasys.artemis.util.time;\n+package tech.pegasys.artemis.services.timer;\n \n import static org.quartz.JobBuilder.newJob;\n import static org.quartz.SimpleScheduleBuilder.simpleSchedule;\n import static org.quartz.TriggerBuilder.newTrigger;\n+import static tech.pegasys.artemis.util.config.Constants.TIME_TICKER_REFRESH_RATE;\n \n-import com.google.common.eventbus.EventBus;\n-import java.util.UUID;\n import org.quartz.DateBuilder;\n import org.quartz.JobDetail;\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n import org.quartz.SchedulerFactory;\n import org.quartz.SimpleTrigger;\n import org.quartz.impl.StdSchedulerFactory;\n+import tech.pegasys.artemis.service.serviceutils.Service;\n+import tech.pegasys.artemis.service.serviceutils.ServiceConfig;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.time.channels.TimeTickChannel;\n+\n+public class TimerService extends Service {\n+\n+  public static final String TIME_EVENTS_CHANNEL = \"TimeEventsChannel\";\n \n-public class Timer {\n   private final Scheduler sched;\n   private final JobDetail job;\n-  private final UUID uuid;\n-  private int startDelay;\n+  private static int START_DELAY = 0;\n   private int interval;\n \n-  public Timer(EventBus eventBus, Integer startDelay, Integer interval)\n-      throws IllegalArgumentException {\n+  public TimerService(ServiceConfig config) {\n     SchedulerFactory sf = new StdSchedulerFactory();\n-    this.startDelay = startDelay;\n-    this.interval = interval;\n+    this.interval = (int) ((1.0 / TIME_TICKER_REFRESH_RATE) * 1000); // Tick interval\n     try {\n       sched = sf.getScheduler();\n-      uuid = UUID.randomUUID();\n-      job =\n-          newJob(ScheduledEvent.class)\n-              .withIdentity(EventBus.class.getSimpleName() + uuid.toString(), \"group\")\n-              .build();\n-      job.getJobDataMap().put(EventBus.class.getSimpleName(), eventBus);\n+      job = newJob(ScheduledTimeEvent.class).withIdentity(\"Timer\").build();\n+      job.getJobDataMap()\n+          .put(TIME_EVENTS_CHANNEL, config.getEventChannels().getPublisher(TimeTickChannel.class));\n \n     } catch (SchedulerException e) {\n-      throw new IllegalArgumentException(\n-          \"In QuartzTimer a SchedulerException was thrown: \" + e.toString());\n+      throw new IllegalArgumentException(\"TimerService failed to initialize\", e);\n     }\n   }\n \n-  public void start() throws IllegalArgumentException {\n+  @Override\n+  public SafeFuture<?> doStart() {\n     try {\n       SimpleTrigger trigger =\n           newTrigger()\n-              .withIdentity(\"trigger-\" + EventBus.class.getSimpleName() + uuid.toString(), \"group\")\n-              .startAt(DateBuilder.futureDate(startDelay, DateBuilder.IntervalUnit.MILLISECOND))\n+              .withIdentity(\"TimerTrigger\")\n+              .startAt(DateBuilder.futureDate(START_DELAY, DateBuilder.IntervalUnit.MILLISECOND))\n               .withSchedule(simpleSchedule().withIntervalInMilliseconds(interval).repeatForever())\n               .build();\n       sched.scheduleJob(job, trigger);\n       sched.start();\n+      return SafeFuture.completedFuture(null);\n     } catch (SchedulerException e) {\n-      throw new IllegalArgumentException(\n-          \"In QuartzTimer a SchedulerException was thrown: \" + e.toString());\n+      throw new IllegalArgumentException(\"TimerService failed to start\", e);\n     }\n   }\n \n-  public void stop() {\n+  @Override\n+  public SafeFuture<?> doStop() {\n     try {\n       sched.shutdown();\n+      return SafeFuture.completedFuture(null);\n     } catch (SchedulerException e) {\n-      throw new IllegalArgumentException(\n-          \"In QuartzTimer a SchedulerException was thrown: \" + e.toString());\n+      throw new IllegalArgumentException(\"TimerService failed to stop\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda109645f925a4d8ceadb26dbea3b4e35c9426f"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNTg1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  throw new IllegalArgumentException(\"TimerService failed to start\", e);\n          \n          \n            \n                  return SafeFuture.failedFuture(new IllegalArgumentException(\"TimerService failed to start\", e));", "url": "https://github.com/ConsenSys/teku/pull/1445#discussion_r397535859", "createdAt": "2020-03-25T00:08:22Z", "author": {"login": "ajsutton"}, "path": "services/timer/src/main/java/tech.pegasys.artemis.services.timer/TimerService.java", "diffHunk": "@@ -11,71 +11,72 @@\n  * specific language governing permissions and limitations under the License.\n  */\n \n-package tech.pegasys.artemis.util.time;\n+package tech.pegasys.artemis.services.timer;\n \n import static org.quartz.JobBuilder.newJob;\n import static org.quartz.SimpleScheduleBuilder.simpleSchedule;\n import static org.quartz.TriggerBuilder.newTrigger;\n+import static tech.pegasys.artemis.util.config.Constants.TIME_TICKER_REFRESH_RATE;\n \n-import com.google.common.eventbus.EventBus;\n-import java.util.UUID;\n import org.quartz.DateBuilder;\n import org.quartz.JobDetail;\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n import org.quartz.SchedulerFactory;\n import org.quartz.SimpleTrigger;\n import org.quartz.impl.StdSchedulerFactory;\n+import tech.pegasys.artemis.service.serviceutils.Service;\n+import tech.pegasys.artemis.service.serviceutils.ServiceConfig;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.time.channels.TimeTickChannel;\n+\n+public class TimerService extends Service {\n+\n+  public static final String TIME_EVENTS_CHANNEL = \"TimeEventsChannel\";\n \n-public class Timer {\n   private final Scheduler sched;\n   private final JobDetail job;\n-  private final UUID uuid;\n-  private int startDelay;\n+  private static int START_DELAY = 0;\n   private int interval;\n \n-  public Timer(EventBus eventBus, Integer startDelay, Integer interval)\n-      throws IllegalArgumentException {\n+  public TimerService(ServiceConfig config) {\n     SchedulerFactory sf = new StdSchedulerFactory();\n-    this.startDelay = startDelay;\n-    this.interval = interval;\n+    this.interval = (int) ((1.0 / TIME_TICKER_REFRESH_RATE) * 1000); // Tick interval\n     try {\n       sched = sf.getScheduler();\n-      uuid = UUID.randomUUID();\n-      job =\n-          newJob(ScheduledEvent.class)\n-              .withIdentity(EventBus.class.getSimpleName() + uuid.toString(), \"group\")\n-              .build();\n-      job.getJobDataMap().put(EventBus.class.getSimpleName(), eventBus);\n+      job = newJob(ScheduledTimeEvent.class).withIdentity(\"Timer\").build();\n+      job.getJobDataMap()\n+          .put(TIME_EVENTS_CHANNEL, config.getEventChannels().getPublisher(TimeTickChannel.class));\n \n     } catch (SchedulerException e) {\n-      throw new IllegalArgumentException(\n-          \"In QuartzTimer a SchedulerException was thrown: \" + e.toString());\n+      throw new IllegalArgumentException(\"TimerService failed to initialize\", e);\n     }\n   }\n \n-  public void start() throws IllegalArgumentException {\n+  @Override\n+  public SafeFuture<?> doStart() {\n     try {\n       SimpleTrigger trigger =\n           newTrigger()\n-              .withIdentity(\"trigger-\" + EventBus.class.getSimpleName() + uuid.toString(), \"group\")\n-              .startAt(DateBuilder.futureDate(startDelay, DateBuilder.IntervalUnit.MILLISECOND))\n+              .withIdentity(\"TimerTrigger\")\n+              .startAt(DateBuilder.futureDate(START_DELAY, DateBuilder.IntervalUnit.MILLISECOND))\n               .withSchedule(simpleSchedule().withIntervalInMilliseconds(interval).repeatForever())\n               .build();\n       sched.scheduleJob(job, trigger);\n       sched.start();\n+      return SafeFuture.completedFuture(null);\n     } catch (SchedulerException e) {\n-      throw new IllegalArgumentException(\n-          \"In QuartzTimer a SchedulerException was thrown: \" + e.toString());\n+      throw new IllegalArgumentException(\"TimerService failed to start\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda109645f925a4d8ceadb26dbea3b4e35c9426f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNTkwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return SafeFuture.completedFuture(null);\n          \n          \n            \n                  return SafeFuture.COMPLETE;", "url": "https://github.com/ConsenSys/teku/pull/1445#discussion_r397535905", "createdAt": "2020-03-25T00:08:30Z", "author": {"login": "ajsutton"}, "path": "services/timer/src/main/java/tech.pegasys.artemis.services.timer/TimerService.java", "diffHunk": "@@ -11,71 +11,72 @@\n  * specific language governing permissions and limitations under the License.\n  */\n \n-package tech.pegasys.artemis.util.time;\n+package tech.pegasys.artemis.services.timer;\n \n import static org.quartz.JobBuilder.newJob;\n import static org.quartz.SimpleScheduleBuilder.simpleSchedule;\n import static org.quartz.TriggerBuilder.newTrigger;\n+import static tech.pegasys.artemis.util.config.Constants.TIME_TICKER_REFRESH_RATE;\n \n-import com.google.common.eventbus.EventBus;\n-import java.util.UUID;\n import org.quartz.DateBuilder;\n import org.quartz.JobDetail;\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n import org.quartz.SchedulerFactory;\n import org.quartz.SimpleTrigger;\n import org.quartz.impl.StdSchedulerFactory;\n+import tech.pegasys.artemis.service.serviceutils.Service;\n+import tech.pegasys.artemis.service.serviceutils.ServiceConfig;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.time.channels.TimeTickChannel;\n+\n+public class TimerService extends Service {\n+\n+  public static final String TIME_EVENTS_CHANNEL = \"TimeEventsChannel\";\n \n-public class Timer {\n   private final Scheduler sched;\n   private final JobDetail job;\n-  private final UUID uuid;\n-  private int startDelay;\n+  private static int START_DELAY = 0;\n   private int interval;\n \n-  public Timer(EventBus eventBus, Integer startDelay, Integer interval)\n-      throws IllegalArgumentException {\n+  public TimerService(ServiceConfig config) {\n     SchedulerFactory sf = new StdSchedulerFactory();\n-    this.startDelay = startDelay;\n-    this.interval = interval;\n+    this.interval = (int) ((1.0 / TIME_TICKER_REFRESH_RATE) * 1000); // Tick interval\n     try {\n       sched = sf.getScheduler();\n-      uuid = UUID.randomUUID();\n-      job =\n-          newJob(ScheduledEvent.class)\n-              .withIdentity(EventBus.class.getSimpleName() + uuid.toString(), \"group\")\n-              .build();\n-      job.getJobDataMap().put(EventBus.class.getSimpleName(), eventBus);\n+      job = newJob(ScheduledTimeEvent.class).withIdentity(\"Timer\").build();\n+      job.getJobDataMap()\n+          .put(TIME_EVENTS_CHANNEL, config.getEventChannels().getPublisher(TimeTickChannel.class));\n \n     } catch (SchedulerException e) {\n-      throw new IllegalArgumentException(\n-          \"In QuartzTimer a SchedulerException was thrown: \" + e.toString());\n+      throw new IllegalArgumentException(\"TimerService failed to initialize\", e);\n     }\n   }\n \n-  public void start() throws IllegalArgumentException {\n+  @Override\n+  public SafeFuture<?> doStart() {\n     try {\n       SimpleTrigger trigger =\n           newTrigger()\n-              .withIdentity(\"trigger-\" + EventBus.class.getSimpleName() + uuid.toString(), \"group\")\n-              .startAt(DateBuilder.futureDate(startDelay, DateBuilder.IntervalUnit.MILLISECOND))\n+              .withIdentity(\"TimerTrigger\")\n+              .startAt(DateBuilder.futureDate(START_DELAY, DateBuilder.IntervalUnit.MILLISECOND))\n               .withSchedule(simpleSchedule().withIntervalInMilliseconds(interval).repeatForever())\n               .build();\n       sched.scheduleJob(job, trigger);\n       sched.start();\n+      return SafeFuture.completedFuture(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda109645f925a4d8ceadb26dbea3b4e35c9426f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNzE4Ng==", "bodyText": "Definitely shouldn't subscribe here.  We're getting:\n2020-03-25 10:11:39.682+10:00 | TimeTickChannel-0 | FATAL | teku-status-log | PLEASE FIX OR REPORT | Unexpected exception thrown for java.lang.NullPointerException: event 'interface tech.pegasys.artemis.util.time.channels.TimeTickChannel.onTick' in handler 'tech.pegasys.artemis.services.beaconchain.BeaconChainController'\njava.lang.NullPointerException: null\n\tat tech.pegasys.artemis.services.beaconchain.BeaconChainController.onTick(BeaconChainController.java:335) ~[classes/:?]\n\tat jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]\n\tat jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]\n\tat jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]\n\tat java.lang.reflect.Method.invoke(Method.java:566) ~[?:?]\n\tat tech.pegasys.artemis.events.DirectEventDeliverer.executeMethod(DirectEventDeliverer.java:67) ~[classes/:?]\n\tat tech.pegasys.artemis.events.DirectEventDeliverer.deliverTo(DirectEventDeliverer.java:54) ~[classes/:?]\n\tat tech.pegasys.artemis.events.AsyncEventDeliverer.lambda$deliverTo$0(AsyncEventDeliverer.java:60) ~[classes/:?]\n\tat tech.pegasys.artemis.events.AsyncEventDeliverer$QueueReader.deliverNextEvent(AsyncEventDeliverer.java:111) [classes/:?]\n\tat tech.pegasys.artemis.events.AsyncEventDeliverer$QueueReader.run(AsyncEventDeliverer.java:103) [classes/:?]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]\n\tat java.lang.Thread.run(Thread.java:834) [?:?]\n\nSo suspect we should only subscribe to tick events after we've called all the init* methods.", "url": "https://github.com/ConsenSys/teku/pull/1445#discussion_r397537186", "createdAt": "2020-03-25T00:12:36Z", "author": {"login": "ajsutton"}, "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -108,6 +110,9 @@ public BeaconChainController(\n     this.metricsSystem = metricsSystem;\n     this.setupInitialState =\n         config.getDepositMode().equals(DEPOSIT_TEST) || config.getStartState() != null;\n+    this.slotEventsChannelPublisher = eventChannels.getPublisher(SlotEventsChannel.class);\n+\n+    eventChannels.subscribe(TimeTickChannel.class, this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNDI2OQ=="}, "originalCommit": {"oid": "dda109645f925a4d8ceadb26dbea3b4e35c9426f"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8cbc23ae85d6686f80a6421ca337904b155f713", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/c8cbc23ae85d6686f80a6421ca337904b155f713", "committedDate": "2020-03-25T00:46:01Z", "message": "Resolve comments & fix merge"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODU1Mzg3", "url": "https://github.com/ConsenSys/teku/pull/1445#pullrequestreview-380855387", "createdAt": "2020-03-25T04:43:24Z", "commit": {"oid": "c8cbc23ae85d6686f80a6421ca337904b155f713"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97d7dec92568d245534cdb1ac0fa8acd6220143d", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/97d7dec92568d245534cdb1ac0fa8acd6220143d", "committedDate": "2020-03-25T14:08:18Z", "message": "Merge branch 'master' into timeEventsToEventChannels"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4360, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}