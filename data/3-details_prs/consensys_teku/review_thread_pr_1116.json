{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NzU3ODYy", "number": 1116, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzozODoxMFrODbT5mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODo0ODo1MFrODbVQxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTY0MTg1OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositContractListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzozODoxMFrOFiuP_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo0MTowMVrOFiyDPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1MzY2MA==", "bodyText": "Are we caching only the current block because the depositEventFlowable will never return an Event from a past block?", "url": "https://github.com/ConsenSys/teku/pull/1116#discussion_r371953660", "createdAt": "2020-01-28T17:38:10Z", "author": {"login": "cemozerr"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositContractListener.java", "diffHunk": "@@ -16,19 +16,28 @@\n import static tech.pegasys.artemis.pow.contract.DepositContract.DEPOSITEVENT_EVENT;\n \n import com.google.common.eventbus.EventBus;\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.Flowable;\n import io.reactivex.disposables.Disposable;\n+import java.util.Optional;\n import org.web3j.abi.EventEncoder;\n+import org.web3j.protocol.Web3j;\n import org.web3j.protocol.core.DefaultBlockParameterName;\n import org.web3j.protocol.core.methods.request.EthFilter;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import org.web3j.protocol.core.methods.response.EthBlock.Block;\n import tech.pegasys.artemis.pow.contract.DepositContract;\n+import tech.pegasys.artemis.pow.contract.DepositContract.DepositEventEventResponse;\n import tech.pegasys.artemis.pow.event.Deposit;\n \n public class DepositContractListener {\n-\n   private final Disposable subscriptionNewDeposit;\n+  private final Web3j web3j;\n   private DepositContract contract;\n+  private volatile Optional<EthBlock.Block> cachedBlock = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7505be3bbe5b40651d3dd7b4ed84b589a3ec97bf"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNTkzNA==", "bodyText": "Correct, it iterates forward only.", "url": "https://github.com/ConsenSys/teku/pull/1116#discussion_r372015934", "createdAt": "2020-01-28T19:41:01Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositContractListener.java", "diffHunk": "@@ -16,19 +16,28 @@\n import static tech.pegasys.artemis.pow.contract.DepositContract.DEPOSITEVENT_EVENT;\n \n import com.google.common.eventbus.EventBus;\n+import com.google.common.primitives.UnsignedLong;\n+import io.reactivex.Flowable;\n import io.reactivex.disposables.Disposable;\n+import java.util.Optional;\n import org.web3j.abi.EventEncoder;\n+import org.web3j.protocol.Web3j;\n import org.web3j.protocol.core.DefaultBlockParameterName;\n import org.web3j.protocol.core.methods.request.EthFilter;\n+import org.web3j.protocol.core.methods.response.EthBlock;\n+import org.web3j.protocol.core.methods.response.EthBlock.Block;\n import tech.pegasys.artemis.pow.contract.DepositContract;\n+import tech.pegasys.artemis.pow.contract.DepositContract.DepositEventEventResponse;\n import tech.pegasys.artemis.pow.event.Deposit;\n \n public class DepositContractListener {\n-\n   private final Disposable subscriptionNewDeposit;\n+  private final Web3j web3j;\n   private DepositContract contract;\n+  private volatile Optional<EthBlock.Block> cachedBlock = Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1MzY2MA=="}, "originalCommit": {"oid": "7505be3bbe5b40651d3dd7b4ed84b589a3ec97bf"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTg2NTAxOnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositContractListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODo0ODo1MFrOFiwcng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTo0MjowOFrOFiyFgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk4OTY2Mg==", "bodyText": "Does this mean we drop the deposit if the block request fails?", "url": "https://github.com/ConsenSys/teku/pull/1116#discussion_r371989662", "createdAt": "2020-01-28T18:48:50Z", "author": {"login": "mbaxter"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositContractListener.java", "diffHunk": "@@ -44,11 +53,29 @@ public DepositContractListener(EventBus eventBus, DepositContract contract) {\n     subscriptionNewDeposit =\n         contract\n             .depositEventEventFlowable(depositEventFilter)\n-            .subscribe(\n-                response -> {\n-                  Deposit deposit = new Deposit(response);\n-                  eventBus.post(deposit);\n-                });\n+            .flatMap(this::convertToDeposit)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7505be3bbe5b40651d3dd7b4ed84b589a3ec97bf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNjUxMw==", "bodyText": "Yes, but that's the same as if something interrupts the subscriptions or the ETH1 node is down at startup - we'll just stop processing deposits until Artemis is restarted.  We need to add some error handling and retries.", "url": "https://github.com/ConsenSys/teku/pull/1116#discussion_r372016513", "createdAt": "2020-01-28T19:42:08Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositContractListener.java", "diffHunk": "@@ -44,11 +53,29 @@ public DepositContractListener(EventBus eventBus, DepositContract contract) {\n     subscriptionNewDeposit =\n         contract\n             .depositEventEventFlowable(depositEventFilter)\n-            .subscribe(\n-                response -> {\n-                  Deposit deposit = new Deposit(response);\n-                  eventBus.post(deposit);\n-                });\n+            .flatMap(this::convertToDeposit)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk4OTY2Mg=="}, "originalCommit": {"oid": "7505be3bbe5b40651d3dd7b4ed84b589a3ec97bf"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2803, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}