{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MzIzOTMz", "number": 1096, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNTowMzoxNlrODZGWsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNTowMzoxNlrODZGWsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjQ1MTA3OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/artemis/test/acceptance/SyncAcceptanceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNTowMzoxNlrOFfTksg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNTozMjo1MFrOFfiBvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3MDg2Ng==", "bodyText": "These log statements are a good idea - we should put them in the DSL (ie ArtemisNode.start() should automatically print a debug log).  The messages would be slightly less nice (each node has a unique name but it's not as nice a \"first node\") but it would make the tests simpler and give better progress indicators for all tests.", "url": "https://github.com/ConsenSys/teku/pull/1096#discussion_r368370866", "createdAt": "2020-01-20T05:03:16Z", "author": {"login": "ajsutton"}, "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/artemis/test/acceptance/SyncAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.test.acceptance;\n+\n+import java.util.function.Consumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.test.acceptance.dsl.AcceptanceTestBase;\n+import tech.pegasys.artemis.test.acceptance.dsl.ArtemisNode;\n+import tech.pegasys.artemis.test.acceptance.dsl.ArtemisNode.Config;\n+import tech.pegasys.artemis.test.acceptance.dsl.tools.GenesisStateConfig;\n+\n+public class SyncAcceptanceTest extends AcceptanceTestBase {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  @Test\n+  @Disabled(\"This test doesn't work yet.  Need to debug node connectivity issues.\")\n+  public void shouldSyncToNodeWithGreaterFinalizedEpoch() throws Exception {\n+    final int validatorCount = 2;\n+    final GenesisStateConfig genesisStateConfig = GenesisStateConfig.create(validatorCount);\n+\n+    final ArtemisNode primaryNode =\n+        createArtemisNode(configurePrimaryNode(genesisStateConfig, validatorCount));\n+    final ArtemisNode lateJoiningNode =\n+        createArtemisNode(configureLateJoiningNode(genesisStateConfig, primaryNode));\n+\n+    LOG.debug(\"Start first node\");\n+    primaryNode.start();\n+    LOG.debug(\"Wait for genesis\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb9e51b770964119f576f0964d22405254ead626"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwNzY3Nw==", "bodyText": "Good call \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/1096#discussion_r368607677", "createdAt": "2020-01-20T15:32:50Z", "author": {"login": "mbaxter"}, "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/artemis/test/acceptance/SyncAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.test.acceptance;\n+\n+import java.util.function.Consumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.test.acceptance.dsl.AcceptanceTestBase;\n+import tech.pegasys.artemis.test.acceptance.dsl.ArtemisNode;\n+import tech.pegasys.artemis.test.acceptance.dsl.ArtemisNode.Config;\n+import tech.pegasys.artemis.test.acceptance.dsl.tools.GenesisStateConfig;\n+\n+public class SyncAcceptanceTest extends AcceptanceTestBase {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  @Test\n+  @Disabled(\"This test doesn't work yet.  Need to debug node connectivity issues.\")\n+  public void shouldSyncToNodeWithGreaterFinalizedEpoch() throws Exception {\n+    final int validatorCount = 2;\n+    final GenesisStateConfig genesisStateConfig = GenesisStateConfig.create(validatorCount);\n+\n+    final ArtemisNode primaryNode =\n+        createArtemisNode(configurePrimaryNode(genesisStateConfig, validatorCount));\n+    final ArtemisNode lateJoiningNode =\n+        createArtemisNode(configureLateJoiningNode(genesisStateConfig, primaryNode));\n+\n+    LOG.debug(\"Start first node\");\n+    primaryNode.start();\n+    LOG.debug(\"Wait for genesis\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM3MDg2Ng=="}, "originalCommit": {"oid": "eb9e51b770964119f576f0964d22405254ead626"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2765, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}