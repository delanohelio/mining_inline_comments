{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MzgzMjYw", "number": 1126, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMjo0NzowMlrODcHz7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNjo1NTo1NlrODcS_1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwODE0NzAxOnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/BeaconStateUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMjo0NzowMlrOFkAG1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMjo0NzowMlrOFkAG1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI5NDgwNg==", "bodyText": "We were incorrectly storing the validator index even if the deposit was invalid. We would have incremented the wrong balance if there was a later, valid deposit for that validator as it would have used the cached index from the invalid deposit even though the validator didn't actually get created then.", "url": "https://github.com/ConsenSys/teku/pull/1126#discussion_r373294806", "createdAt": "2020-01-31T02:47:02Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/BeaconStateUtil.java", "diffHunk": "@@ -220,6 +152,10 @@ private static void process_deposit(\n                     compute_domain(DOMAIN_DEPOSIT));\n         if (!proof_is_valid) {\n           STDOUT.log(Level.DEBUG, \"Skipping invalid deposit\");\n+          if (pubKeyToIndexMap != null) {\n+            // The validator won't be created so the calculated index won't be correct\n+            pubKeyToIndexMap.remove(pubkey);\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fd26c0ed32dab4fa42df7814e50f093aa0109c0"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTg0Mjc0OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNjoxMToyNlrOFkQQcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxOTo0NDoyNFrOFkWAtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU1OTQwOA==", "bodyText": "(nit) why not initialize a beaconStateWithCache, since it was like that previously too.", "url": "https://github.com/ConsenSys/teku/pull/1126#discussion_r373559408", "createdAt": "2020-01-31T16:11:26Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util;\n+\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.process_deposit_without_checking_merkle_proof;\n+import static tech.pegasys.artemis.util.alogger.ALogger.STDOUT;\n+import static tech.pegasys.artemis.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n+import static tech.pegasys.artemis.util.config.Constants.EFFECTIVE_BALANCE_INCREMENT;\n+import static tech.pegasys.artemis.util.config.Constants.GENESIS_EPOCH;\n+import static tech.pegasys.artemis.util.config.Constants.MAX_EFFECTIVE_BALANCE;\n+import static tech.pegasys.artemis.util.config.Constants.SECONDS_PER_DAY;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import org.apache.logging.log4j.Level;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlockBody;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlockHeader;\n+import tech.pegasys.artemis.datastructures.blocks.Eth1Data;\n+import tech.pegasys.artemis.datastructures.operations.Deposit;\n+import tech.pegasys.artemis.datastructures.operations.DepositData;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.BeaconStateWithCache;\n+import tech.pegasys.artemis.datastructures.state.Validator;\n+import tech.pegasys.artemis.util.SSZTypes.SSZList;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.hashtree.HashTreeUtil;\n+\n+public class GenesisGenerator {\n+  private final MerkleTree<Bytes32> depositMerkleTree =\n+      new MerkleTree<>(DEPOSIT_CONTRACT_TREE_DEPTH);\n+  private final BeaconState state = new BeaconState();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e38d439e24383183df9565cce57c3baa0c299fd"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY1MzY4NA==", "bodyText": "Try it and run the tests. :)  Or you can cheat by looking at https://github.com/PegaSysEng/artemis/pull/1126/files#diff-904923335514a38af0c32d5d241ab8eaR97", "url": "https://github.com/ConsenSys/teku/pull/1126#discussion_r373653684", "createdAt": "2020-01-31T19:44:24Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util;\n+\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.process_deposit_without_checking_merkle_proof;\n+import static tech.pegasys.artemis.util.alogger.ALogger.STDOUT;\n+import static tech.pegasys.artemis.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n+import static tech.pegasys.artemis.util.config.Constants.EFFECTIVE_BALANCE_INCREMENT;\n+import static tech.pegasys.artemis.util.config.Constants.GENESIS_EPOCH;\n+import static tech.pegasys.artemis.util.config.Constants.MAX_EFFECTIVE_BALANCE;\n+import static tech.pegasys.artemis.util.config.Constants.SECONDS_PER_DAY;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import org.apache.logging.log4j.Level;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlockBody;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlockHeader;\n+import tech.pegasys.artemis.datastructures.blocks.Eth1Data;\n+import tech.pegasys.artemis.datastructures.operations.Deposit;\n+import tech.pegasys.artemis.datastructures.operations.DepositData;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.BeaconStateWithCache;\n+import tech.pegasys.artemis.datastructures.state.Validator;\n+import tech.pegasys.artemis.util.SSZTypes.SSZList;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.hashtree.HashTreeUtil;\n+\n+public class GenesisGenerator {\n+  private final MerkleTree<Bytes32> depositMerkleTree =\n+      new MerkleTree<>(DEPOSIT_CONTRACT_TREE_DEPTH);\n+  private final BeaconState state = new BeaconState();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU1OTQwOA=="}, "originalCommit": {"oid": "1e38d439e24383183df9565cce57c3baa0c299fd"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTkzOTk4OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNjo0MjoxMVrOFkRNLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxOTo0OToyMFrOFkWJWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU3NDk1Ng==", "bodyText": "(nit) we can avoid nesting:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (index != null) { // Could be null if the deposit was invalid\n          \n          \n            \n                if (index == null) return  // Could be null if the deposit was invalid", "url": "https://github.com/ConsenSys/teku/pull/1126#discussion_r373574956", "createdAt": "2020-01-31T16:42:11Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util;\n+\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.process_deposit_without_checking_merkle_proof;\n+import static tech.pegasys.artemis.util.alogger.ALogger.STDOUT;\n+import static tech.pegasys.artemis.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n+import static tech.pegasys.artemis.util.config.Constants.EFFECTIVE_BALANCE_INCREMENT;\n+import static tech.pegasys.artemis.util.config.Constants.GENESIS_EPOCH;\n+import static tech.pegasys.artemis.util.config.Constants.MAX_EFFECTIVE_BALANCE;\n+import static tech.pegasys.artemis.util.config.Constants.SECONDS_PER_DAY;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import org.apache.logging.log4j.Level;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlockBody;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlockHeader;\n+import tech.pegasys.artemis.datastructures.blocks.Eth1Data;\n+import tech.pegasys.artemis.datastructures.operations.Deposit;\n+import tech.pegasys.artemis.datastructures.operations.DepositData;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.BeaconStateWithCache;\n+import tech.pegasys.artemis.datastructures.state.Validator;\n+import tech.pegasys.artemis.util.SSZTypes.SSZList;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.hashtree.HashTreeUtil;\n+\n+public class GenesisGenerator {\n+  private final MerkleTree<Bytes32> depositMerkleTree =\n+      new MerkleTree<>(DEPOSIT_CONTRACT_TREE_DEPTH);\n+  private final BeaconState state = new BeaconState();\n+  private final Map<BLSPublicKey, Integer> keyCache = new HashMap<>();\n+  private final long depositListLength = ((long) 1) << DEPOSIT_CONTRACT_TREE_DEPTH;\n+  private final SSZList<DepositData> depositDataList =\n+      new SSZList<>(DepositData.class, depositListLength);\n+\n+  public GenesisGenerator() {\n+    BeaconBlockHeader beaconBlockHeader = new BeaconBlockHeader();\n+    Bytes32 latestBlockRoot = new BeaconBlockBody().hash_tree_root();\n+    beaconBlockHeader.setBody_root(latestBlockRoot);\n+    state.setLatest_block_header(beaconBlockHeader);\n+  }\n+\n+  public void addDepositsFromBlock(\n+      Bytes32 eth1BlockHash, UnsignedLong eth1Timestamp, List<? extends Deposit> deposits) {\n+    updateGenesisTime(eth1Timestamp);\n+\n+    final Eth1Data eth1Data = state.getEth1_data();\n+    eth1Data.setBlock_hash(eth1BlockHash);\n+    eth1Data.setDeposit_count(UnsignedLong.valueOf(depositDataList.size() + deposits.size()));\n+\n+    // Process deposits\n+    deposits.forEach(\n+        deposit -> {\n+          if (BeaconStateUtil.DEPOSIT_PROOFS_ENABLED) {\n+            calculateDepositProof(deposit);\n+          }\n+          STDOUT.log(Level.DEBUG, \"About to process deposit: \" + depositDataList.size());\n+          depositDataList.add(deposit.getData());\n+\n+          // Skip verifing the merkle proof as we'll only generate one at the end\n+          // We do still verify the signature\n+          process_deposit_without_checking_merkle_proof(state, deposit, keyCache);\n+\n+          processActivation(deposit);\n+        });\n+  }\n+\n+  private void processActivation(final Deposit deposit) {\n+    final Integer index = keyCache.get(deposit.getData().getPubkey());\n+    if (index != null) { // Could be null if the deposit was invalid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e38d439e24383183df9565cce57c3baa0c299fd"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY1NTg5OQ==", "bodyText": "Good point.", "url": "https://github.com/ConsenSys/teku/pull/1126#discussion_r373655899", "createdAt": "2020-01-31T19:49:20Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util;\n+\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.process_deposit_without_checking_merkle_proof;\n+import static tech.pegasys.artemis.util.alogger.ALogger.STDOUT;\n+import static tech.pegasys.artemis.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n+import static tech.pegasys.artemis.util.config.Constants.EFFECTIVE_BALANCE_INCREMENT;\n+import static tech.pegasys.artemis.util.config.Constants.GENESIS_EPOCH;\n+import static tech.pegasys.artemis.util.config.Constants.MAX_EFFECTIVE_BALANCE;\n+import static tech.pegasys.artemis.util.config.Constants.SECONDS_PER_DAY;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import org.apache.logging.log4j.Level;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlockBody;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlockHeader;\n+import tech.pegasys.artemis.datastructures.blocks.Eth1Data;\n+import tech.pegasys.artemis.datastructures.operations.Deposit;\n+import tech.pegasys.artemis.datastructures.operations.DepositData;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.BeaconStateWithCache;\n+import tech.pegasys.artemis.datastructures.state.Validator;\n+import tech.pegasys.artemis.util.SSZTypes.SSZList;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.hashtree.HashTreeUtil;\n+\n+public class GenesisGenerator {\n+  private final MerkleTree<Bytes32> depositMerkleTree =\n+      new MerkleTree<>(DEPOSIT_CONTRACT_TREE_DEPTH);\n+  private final BeaconState state = new BeaconState();\n+  private final Map<BLSPublicKey, Integer> keyCache = new HashMap<>();\n+  private final long depositListLength = ((long) 1) << DEPOSIT_CONTRACT_TREE_DEPTH;\n+  private final SSZList<DepositData> depositDataList =\n+      new SSZList<>(DepositData.class, depositListLength);\n+\n+  public GenesisGenerator() {\n+    BeaconBlockHeader beaconBlockHeader = new BeaconBlockHeader();\n+    Bytes32 latestBlockRoot = new BeaconBlockBody().hash_tree_root();\n+    beaconBlockHeader.setBody_root(latestBlockRoot);\n+    state.setLatest_block_header(beaconBlockHeader);\n+  }\n+\n+  public void addDepositsFromBlock(\n+      Bytes32 eth1BlockHash, UnsignedLong eth1Timestamp, List<? extends Deposit> deposits) {\n+    updateGenesisTime(eth1Timestamp);\n+\n+    final Eth1Data eth1Data = state.getEth1_data();\n+    eth1Data.setBlock_hash(eth1BlockHash);\n+    eth1Data.setDeposit_count(UnsignedLong.valueOf(depositDataList.size() + deposits.size()));\n+\n+    // Process deposits\n+    deposits.forEach(\n+        deposit -> {\n+          if (BeaconStateUtil.DEPOSIT_PROOFS_ENABLED) {\n+            calculateDepositProof(deposit);\n+          }\n+          STDOUT.log(Level.DEBUG, \"About to process deposit: \" + depositDataList.size());\n+          depositDataList.add(deposit.getData());\n+\n+          // Skip verifing the merkle proof as we'll only generate one at the end\n+          // We do still verify the signature\n+          process_deposit_without_checking_merkle_proof(state, deposit, keyCache);\n+\n+          processActivation(deposit);\n+        });\n+  }\n+\n+  private void processActivation(final Deposit deposit) {\n+    final Integer index = keyCache.get(deposit.getData().getPubkey());\n+    if (index != null) { // Could be null if the deposit was invalid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU3NDk1Ng=="}, "originalCommit": {"oid": "1e38d439e24383183df9565cce57c3baa0c299fd"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTk3OTczOnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNjo1NTo1NlrOFkRnCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxOTo0Mjo1NFrOFkV-TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4MTU3OA==", "bodyText": "I couldn't find where we verify the merkle proof that we've generated. Or do you mean that we don't need to since we only generate one merkle proof here?", "url": "https://github.com/ConsenSys/teku/pull/1126#discussion_r373581578", "createdAt": "2020-01-31T16:55:56Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util;\n+\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.process_deposit_without_checking_merkle_proof;\n+import static tech.pegasys.artemis.util.alogger.ALogger.STDOUT;\n+import static tech.pegasys.artemis.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n+import static tech.pegasys.artemis.util.config.Constants.EFFECTIVE_BALANCE_INCREMENT;\n+import static tech.pegasys.artemis.util.config.Constants.GENESIS_EPOCH;\n+import static tech.pegasys.artemis.util.config.Constants.MAX_EFFECTIVE_BALANCE;\n+import static tech.pegasys.artemis.util.config.Constants.SECONDS_PER_DAY;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import org.apache.logging.log4j.Level;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlockBody;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlockHeader;\n+import tech.pegasys.artemis.datastructures.blocks.Eth1Data;\n+import tech.pegasys.artemis.datastructures.operations.Deposit;\n+import tech.pegasys.artemis.datastructures.operations.DepositData;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.BeaconStateWithCache;\n+import tech.pegasys.artemis.datastructures.state.Validator;\n+import tech.pegasys.artemis.util.SSZTypes.SSZList;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.hashtree.HashTreeUtil;\n+\n+public class GenesisGenerator {\n+  private final MerkleTree<Bytes32> depositMerkleTree =\n+      new MerkleTree<>(DEPOSIT_CONTRACT_TREE_DEPTH);\n+  private final BeaconState state = new BeaconState();\n+  private final Map<BLSPublicKey, Integer> keyCache = new HashMap<>();\n+  private final long depositListLength = ((long) 1) << DEPOSIT_CONTRACT_TREE_DEPTH;\n+  private final SSZList<DepositData> depositDataList =\n+      new SSZList<>(DepositData.class, depositListLength);\n+\n+  public GenesisGenerator() {\n+    BeaconBlockHeader beaconBlockHeader = new BeaconBlockHeader();\n+    Bytes32 latestBlockRoot = new BeaconBlockBody().hash_tree_root();\n+    beaconBlockHeader.setBody_root(latestBlockRoot);\n+    state.setLatest_block_header(beaconBlockHeader);\n+  }\n+\n+  public void addDepositsFromBlock(\n+      Bytes32 eth1BlockHash, UnsignedLong eth1Timestamp, List<? extends Deposit> deposits) {\n+    updateGenesisTime(eth1Timestamp);\n+\n+    final Eth1Data eth1Data = state.getEth1_data();\n+    eth1Data.setBlock_hash(eth1BlockHash);\n+    eth1Data.setDeposit_count(UnsignedLong.valueOf(depositDataList.size() + deposits.size()));\n+\n+    // Process deposits\n+    deposits.forEach(\n+        deposit -> {\n+          if (BeaconStateUtil.DEPOSIT_PROOFS_ENABLED) {\n+            calculateDepositProof(deposit);\n+          }\n+          STDOUT.log(Level.DEBUG, \"About to process deposit: \" + depositDataList.size());\n+          depositDataList.add(deposit.getData());\n+\n+          // Skip verifing the merkle proof as we'll only generate one at the end\n+          // We do still verify the signature\n+          process_deposit_without_checking_merkle_proof(state, deposit, keyCache);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e38d439e24383183df9565cce57c3baa0c299fd"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY1MzA2OQ==", "bodyText": "Correct, we don't verify the Merkle proof - both the proof in the deposit and the Merkle root are generated by us, so we'd just be verifying that we generated it right.  We do have a test that checks we generate it right, but we don't need it in the production code.", "url": "https://github.com/ConsenSys/teku/pull/1126#discussion_r373653069", "createdAt": "2020-01-31T19:42:54Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util;\n+\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.process_deposit_without_checking_merkle_proof;\n+import static tech.pegasys.artemis.util.alogger.ALogger.STDOUT;\n+import static tech.pegasys.artemis.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n+import static tech.pegasys.artemis.util.config.Constants.EFFECTIVE_BALANCE_INCREMENT;\n+import static tech.pegasys.artemis.util.config.Constants.GENESIS_EPOCH;\n+import static tech.pegasys.artemis.util.config.Constants.MAX_EFFECTIVE_BALANCE;\n+import static tech.pegasys.artemis.util.config.Constants.SECONDS_PER_DAY;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import org.apache.logging.log4j.Level;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlockBody;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlockHeader;\n+import tech.pegasys.artemis.datastructures.blocks.Eth1Data;\n+import tech.pegasys.artemis.datastructures.operations.Deposit;\n+import tech.pegasys.artemis.datastructures.operations.DepositData;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.BeaconStateWithCache;\n+import tech.pegasys.artemis.datastructures.state.Validator;\n+import tech.pegasys.artemis.util.SSZTypes.SSZList;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.hashtree.HashTreeUtil;\n+\n+public class GenesisGenerator {\n+  private final MerkleTree<Bytes32> depositMerkleTree =\n+      new MerkleTree<>(DEPOSIT_CONTRACT_TREE_DEPTH);\n+  private final BeaconState state = new BeaconState();\n+  private final Map<BLSPublicKey, Integer> keyCache = new HashMap<>();\n+  private final long depositListLength = ((long) 1) << DEPOSIT_CONTRACT_TREE_DEPTH;\n+  private final SSZList<DepositData> depositDataList =\n+      new SSZList<>(DepositData.class, depositListLength);\n+\n+  public GenesisGenerator() {\n+    BeaconBlockHeader beaconBlockHeader = new BeaconBlockHeader();\n+    Bytes32 latestBlockRoot = new BeaconBlockBody().hash_tree_root();\n+    beaconBlockHeader.setBody_root(latestBlockRoot);\n+    state.setLatest_block_header(beaconBlockHeader);\n+  }\n+\n+  public void addDepositsFromBlock(\n+      Bytes32 eth1BlockHash, UnsignedLong eth1Timestamp, List<? extends Deposit> deposits) {\n+    updateGenesisTime(eth1Timestamp);\n+\n+    final Eth1Data eth1Data = state.getEth1_data();\n+    eth1Data.setBlock_hash(eth1BlockHash);\n+    eth1Data.setDeposit_count(UnsignedLong.valueOf(depositDataList.size() + deposits.size()));\n+\n+    // Process deposits\n+    deposits.forEach(\n+        deposit -> {\n+          if (BeaconStateUtil.DEPOSIT_PROOFS_ENABLED) {\n+            calculateDepositProof(deposit);\n+          }\n+          STDOUT.log(Level.DEBUG, \"About to process deposit: \" + depositDataList.size());\n+          depositDataList.add(deposit.getData());\n+\n+          // Skip verifing the merkle proof as we'll only generate one at the end\n+          // We do still verify the signature\n+          process_deposit_without_checking_merkle_proof(state, deposit, keyCache);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4MTU3OA=="}, "originalCommit": {"oid": "1e38d439e24383183df9565cce57c3baa0c299fd"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2826, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}