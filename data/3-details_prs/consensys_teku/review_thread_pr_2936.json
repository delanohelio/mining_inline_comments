{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwODI5MDUw", "number": 2936, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMTo1NDowOFrOEsbN_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNDo0NDo1MFrOEs3PXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDE4NzUxOnYy", "diffSide": "RIGHT", "path": "infrastructure/time/src/main/java/tech/pegasys/teku/infrastructure/time/Throttler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMTo1NDowOFrOHfq48g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDo1NzowOVrOHgCQEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3MDYxMA==", "bodyText": "Unfortunately I don't think this works reliably.  The update function has to be side effect free as it may be applied multiple times when there are race conditions.  I think you could use getAndUpdate though:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final AtomicBoolean updated = new AtomicBoolean(false);\n          \n          \n            \n                lastInvoked.updateAndGet(\n          \n          \n            \n                    last -> {\n          \n          \n            \n                      if (last == null || last.plus(throttlingPeriod).isLessThanOrEqualTo(currentTime)) {\n          \n          \n            \n                        updated.set(true);\n          \n          \n            \n                        return currentTime;\n          \n          \n            \n                      }\n          \n          \n            \n                      return last;\n          \n          \n            \n                    });\n          \n          \n            \n                return updated.get();\n          \n          \n            \n                final UInt64 previousValue = lastInvoked.getAndUpdate(\n          \n          \n            \n                    last -> {\n          \n          \n            \n                      if (last == null || last.plus(throttlingPeriod).isLessThanOrEqualTo(currentTime)) {\n          \n          \n            \n                        return currentTime;\n          \n          \n            \n                      }\n          \n          \n            \n                      return last;\n          \n          \n            \n                    });\n          \n          \n            \n                return previousValue == null || previousValue(throttlingPeriod).isLessThanOrEqualTo(currentTime);\n          \n      \n    \n    \n  \n\nBecause it's returning the value immediately prior to the update, we can re-evaluate to see if an update was required without having to have side-effects in the invoked method.", "url": "https://github.com/ConsenSys/teku/pull/2936#discussion_r502970610", "createdAt": "2020-10-11T21:54:08Z", "author": {"login": "ajsutton"}, "path": "infrastructure/time/src/main/java/tech/pegasys/teku/infrastructure/time/Throttler.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.infrastructure.time;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+public class Throttler<TResource> {\n+  // The wrapped resouce can be invoked at most once every throttling period\n+  private final TResource resource;\n+  private final UInt64 throttlingPeriod;\n+  private final AtomicReference<UInt64> lastInvoked = new AtomicReference<>(null);\n+\n+  public Throttler(final TResource resource, final UInt64 throttlingPeriod) {\n+    this.resource = resource;\n+    this.throttlingPeriod = throttlingPeriod;\n+  }\n+\n+  public void invoke(final UInt64 currentTime, Consumer<TResource> invocation) {\n+    if (updateLastInvoked(currentTime)) {\n+      invocation.accept(resource);\n+    }\n+  }\n+\n+  private boolean updateLastInvoked(final UInt64 currentTime) {\n+    final AtomicBoolean updated = new AtomicBoolean(false);\n+    lastInvoked.updateAndGet(\n+        last -> {\n+          if (last == null || last.plus(throttlingPeriod).isLessThanOrEqualTo(currentTime)) {\n+            updated.set(true);\n+            return currentTime;\n+          }\n+          return last;\n+        });\n+    return updated.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8df6ccaec9bb1f8ff1042148f89a1367abc6bdee"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM1MzM2MQ==", "bodyText": "good catch!", "url": "https://github.com/ConsenSys/teku/pull/2936#discussion_r503353361", "createdAt": "2020-10-12T14:57:09Z", "author": {"login": "mbaxter"}, "path": "infrastructure/time/src/main/java/tech/pegasys/teku/infrastructure/time/Throttler.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.infrastructure.time;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+public class Throttler<TResource> {\n+  // The wrapped resouce can be invoked at most once every throttling period\n+  private final TResource resource;\n+  private final UInt64 throttlingPeriod;\n+  private final AtomicReference<UInt64> lastInvoked = new AtomicReference<>(null);\n+\n+  public Throttler(final TResource resource, final UInt64 throttlingPeriod) {\n+    this.resource = resource;\n+    this.throttlingPeriod = throttlingPeriod;\n+  }\n+\n+  public void invoke(final UInt64 currentTime, Consumer<TResource> invocation) {\n+    if (updateLastInvoked(currentTime)) {\n+      invocation.accept(resource);\n+    }\n+  }\n+\n+  private boolean updateLastInvoked(final UInt64 currentTime) {\n+    final AtomicBoolean updated = new AtomicBoolean(false);\n+    lastInvoked.updateAndGet(\n+        last -> {\n+          if (last == null || last.plus(throttlingPeriod).isLessThanOrEqualTo(currentTime)) {\n+            updated.set(true);\n+            return currentTime;\n+          }\n+          return last;\n+        });\n+    return updated.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3MDYxMA=="}, "originalCommit": {"oid": "8df6ccaec9bb1f8ff1042148f89a1367abc6bdee"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDc3ODU1OnYy", "diffSide": "RIGHT", "path": "infrastructure/logging/src/main/java/tech/pegasys/teku/infrastructure/logging/StatusLogger.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNDo0NDo1MFrOHgVNgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzozMzoyNFrOHgyCVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2NDAwMg==", "bodyText": "I'd suggest using ColorConsolePrinter.print to make this coloured (I think it should be red at error level and yellow at warn but tempted to just always make it red).", "url": "https://github.com/ConsenSys/teku/pull/2936#discussion_r503664002", "createdAt": "2020-10-13T04:44:50Z", "author": {"login": "ajsutton"}, "path": "infrastructure/logging/src/main/java/tech/pegasys/teku/infrastructure/logging/StatusLogger.java", "diffHunk": "@@ -195,4 +197,40 @@ public void performance(final String performance) {\n   public void warnWeakSubjectivityChecksSuppressed(final UInt64 untilEpoch) {\n     log.warn(\"Suppressing weak subjectivity errors until epoch {}\", untilEpoch);\n   }\n+\n+  public void warnWeakSubjectivityFinalizedCheckpointValidationDeferred(\n+      final UInt64 finalizedEpoch, final UInt64 wsCheckpointEpoch) {\n+    log.warn(\n+        \"Deferring weak subjectivity checks for finalized checkpoint at epoch {}.  Checks will resume once weak subjectivity checkpoint at epoch {} is reached.\",\n+        finalizedEpoch,\n+        wsCheckpointEpoch);\n+  }\n+\n+  public void finalizedCheckpointOutsideOfWeakSubjectivityPeriod(\n+      Level level, final UInt64 latestFinalizedCheckpointEpoch) {\n+    log.log(\n+        level,\n+        \"The latest finalized checkpoint at epoch {} is outside of the weak subjectivity period.  Please supply a recent weak subjectivity checkpoint using --ws-checkpoint=<BLOCK_ROOT>:<EPOCH>.\",\n+        latestFinalizedCheckpointEpoch);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "432ae247eec592ab51f3712ca0df85244d207a5c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4OTk3MA==", "bodyText": "good idea \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/2936#discussion_r503989970", "createdAt": "2020-10-13T14:17:24Z", "author": {"login": "mbaxter"}, "path": "infrastructure/logging/src/main/java/tech/pegasys/teku/infrastructure/logging/StatusLogger.java", "diffHunk": "@@ -195,4 +197,40 @@ public void performance(final String performance) {\n   public void warnWeakSubjectivityChecksSuppressed(final UInt64 untilEpoch) {\n     log.warn(\"Suppressing weak subjectivity errors until epoch {}\", untilEpoch);\n   }\n+\n+  public void warnWeakSubjectivityFinalizedCheckpointValidationDeferred(\n+      final UInt64 finalizedEpoch, final UInt64 wsCheckpointEpoch) {\n+    log.warn(\n+        \"Deferring weak subjectivity checks for finalized checkpoint at epoch {}.  Checks will resume once weak subjectivity checkpoint at epoch {} is reached.\",\n+        finalizedEpoch,\n+        wsCheckpointEpoch);\n+  }\n+\n+  public void finalizedCheckpointOutsideOfWeakSubjectivityPeriod(\n+      Level level, final UInt64 latestFinalizedCheckpointEpoch) {\n+    log.log(\n+        level,\n+        \"The latest finalized checkpoint at epoch {} is outside of the weak subjectivity period.  Please supply a recent weak subjectivity checkpoint using --ws-checkpoint=<BLOCK_ROOT>:<EPOCH>.\",\n+        latestFinalizedCheckpointEpoch);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2NDAwMg=="}, "originalCommit": {"oid": "432ae247eec592ab51f3712ca0df85244d207a5c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzNjI3OQ==", "bodyText": "updated to log the main errors (inconsistent ws checkpoint, outside ws period) in red and the warnings (deferring / suppressing ws checks due to CLI flags) in yellow", "url": "https://github.com/ConsenSys/teku/pull/2936#discussion_r504136279", "createdAt": "2020-10-13T17:33:24Z", "author": {"login": "mbaxter"}, "path": "infrastructure/logging/src/main/java/tech/pegasys/teku/infrastructure/logging/StatusLogger.java", "diffHunk": "@@ -195,4 +197,40 @@ public void performance(final String performance) {\n   public void warnWeakSubjectivityChecksSuppressed(final UInt64 untilEpoch) {\n     log.warn(\"Suppressing weak subjectivity errors until epoch {}\", untilEpoch);\n   }\n+\n+  public void warnWeakSubjectivityFinalizedCheckpointValidationDeferred(\n+      final UInt64 finalizedEpoch, final UInt64 wsCheckpointEpoch) {\n+    log.warn(\n+        \"Deferring weak subjectivity checks for finalized checkpoint at epoch {}.  Checks will resume once weak subjectivity checkpoint at epoch {} is reached.\",\n+        finalizedEpoch,\n+        wsCheckpointEpoch);\n+  }\n+\n+  public void finalizedCheckpointOutsideOfWeakSubjectivityPeriod(\n+      Level level, final UInt64 latestFinalizedCheckpointEpoch) {\n+    log.log(\n+        level,\n+        \"The latest finalized checkpoint at epoch {} is outside of the weak subjectivity period.  Please supply a recent weak subjectivity checkpoint using --ws-checkpoint=<BLOCK_ROOT>:<EPOCH>.\",\n+        latestFinalizedCheckpointEpoch);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2NDAwMg=="}, "originalCommit": {"oid": "432ae247eec592ab51f3712ca0df85244d207a5c"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3176, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}