{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMzgyMjU1", "number": 1145, "title": "Switch to Harmony's optimized Merkle Tree", "bodyText": "PR Description\nSwitches to Harmony's optimized Merkle tree implementation which only calculates the necessary branches of the tree when you add a new node instead of calculating the whole tree.", "createdAt": "2020-02-10T22:18:12Z", "url": "https://github.com/ConsenSys/teku/pull/1145", "merged": true, "mergeCommit": {"oid": "38e5a42edd2663c126e8e5cd697bec077a1931d9"}, "closed": true, "closedAt": "2020-02-10T23:21:47Z", "author": {"login": "cemozerr"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDEsZTAH2gAyMzczMzgyMjU1OjY2NjBhNDBiMmQxYzQwMjYxZmZmOGJlYTQzOGQzNWQ0ZGRhY2RiM2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDFViHAH2gAyMzczMzgyMjU1OjIwNDlhOWJlNmZjYTU3YTU3MTg1MDE4NWZmZmRjMmU5YzlhYTY4ZjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/6660a40b2d1c40261fff8bea438d35d4ddacdb3f", "committedDate": "2020-02-10T22:15:58Z", "message": "Switch to Harmony's optimized Merkle Tree"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzA3MjYz", "url": "https://github.com/ConsenSys/teku/pull/1145#pullrequestreview-356307263", "createdAt": "2020-02-10T22:19:51Z", "commit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoxOTo1MVrOFn3sJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjozMzowOVrOFn4ECw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MTIwNQ==", "bodyText": "I probably wouldn't rename this - depositMerkleTree  includes the important information that this is for deposits, not just that it's a merkle trie (side note: should be trie everywhere not tree but that can be for another day)", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377351205", "createdAt": "2020-02-10T22:19:51Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java", "diffHunk": "@@ -44,8 +44,8 @@\n import tech.pegasys.artemis.util.hashtree.HashTreeUtil;\n \n public class GenesisGenerator {\n-  private final MerkleTree<Bytes32> depositMerkleTree =\n-      new MerkleTree<>(DEPOSIT_CONTRACT_TREE_DEPTH);\n+  private final OptimizedMerkleTree merkleTree =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MTY5OA==", "bodyText": "nit: usually worth having the assertions first and we probably should be consistent in using checkArgument rather than the assert keyword.", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377351698", "createdAt": "2020-02-10T22:20:52Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/MerkleTree.java", "diffHunk": "@@ -22,40 +22,34 @@\n import org.apache.tuweni.crypto.Hash;\n import tech.pegasys.artemis.util.SSZTypes.SSZVector;\n \n-public class MerkleTree<T> {\n-  private final List<List<Bytes32>> tree;\n-  private final List<Bytes32> zeroHashes;\n-  private final int height;\n-  private boolean dirty = true;\n+abstract class MerkleTree {\n+  protected final List<List<Bytes32>> tree;\n+  protected final List<Bytes32> zeroHashes;\n+  protected final int treeDepth;\n \n-  public MerkleTree(int height) {\n-    assert (height > 1);\n-    this.height = height;\n-    tree = new ArrayList<List<Bytes32>>();\n-    for (int i = 0; i <= height; i++) {\n-      tree.add(new ArrayList<Bytes32>());\n+  protected MerkleTree(int treeDepth) {\n+    this.treeDepth = treeDepth;\n+    assert (treeDepth > 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MzkyNA==", "bodyText": "Needs an @Override annotation.", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377353924", "createdAt": "2020-02-10T22:25:45Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/OptimizedMerkleTree.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util;\n+\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.crypto.Hash;\n+\n+public class OptimizedMerkleTree extends MerkleTree {\n+\n+  public OptimizedMerkleTree(int treeDepth) {\n+    super(treeDepth);\n+  }\n+\n+  public void add(Bytes32 leaf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NDg2OA==", "bodyText": "should use .equals instead of == when comparing hashes.  It will likely work both ways but only because of implementation details so better to not depend on object equality here.", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377354868", "createdAt": "2020-02-10T22:27:52Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/OptimizedMerkleTree.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util;\n+\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.crypto.Hash;\n+\n+public class OptimizedMerkleTree extends MerkleTree {\n+\n+  public OptimizedMerkleTree(int treeDepth) {\n+    super(treeDepth);\n+  }\n+\n+  public void add(Bytes32 leaf) {\n+    if (!tree.get(0).isEmpty() && tree.get(0).get(tree.get(0).size() - 1) == zeroHashes.get(0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NjQ2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OptimizedMerkleTreeTests {\n          \n          \n            \n            public class OptimizedMerkleTreeTest {\n          \n      \n    \n    \n  \n\nEnding test classes with Test is a strong convention we should stick to (and often build tools actually search specifically for *Test classes to run.", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377356460", "createdAt": "2020-02-10T22:31:16Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/merkletree/OptimizedMerkleTreeTests.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.merkletree;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.datastructures.util.OptimizedMerkleTree;\n+import tech.pegasys.artemis.datastructures.util.SimpleMerkleTree;\n+\n+public class OptimizedMerkleTreeTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NzMyMw==", "bodyText": "We should remove this or convert it to an actual jmh test in a benchmarks source tree.", "url": "https://github.com/ConsenSys/teku/pull/1145#discussion_r377357323", "createdAt": "2020-02-10T22:33:09Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/merkletree/OptimizedMerkleTreeTests.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.merkletree;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.datastructures.util.OptimizedMerkleTree;\n+import tech.pegasys.artemis.datastructures.util.SimpleMerkleTree;\n+\n+public class OptimizedMerkleTreeTests {\n+\n+  private int seed = 0;\n+\n+  private final int treeDepth = 32;\n+  private OptimizedMerkleTree optimizedMT;\n+  private SimpleMerkleTree simpleMT;\n+\n+  @BeforeEach\n+  void setUp() {\n+    optimizedMT = new OptimizedMerkleTree(treeDepth);\n+    simpleMT = new SimpleMerkleTree(treeDepth);\n+  }\n+\n+  @Test\n+  void test() {\n+    Bytes32 leaf = DataStructureUtil.randomBytes32(seed);\n+    optimizedMT.add(leaf);\n+    simpleMT.add(leaf);\n+    assertThat(optimizedMT.getProofTreeByValue(leaf)).isEqualTo(simpleMT.getProofTreeByValue(leaf));\n+  }\n+\n+  @Test\n+  void makeSureAllProofsMatch() {\n+\n+    List<Bytes32> leaves =\n+        IntStream.range(0, 10000)\n+            .mapToObj(\n+                i -> {\n+                  Bytes32 leaf = DataStructureUtil.randomBytes32(seed++);\n+                  optimizedMT.add(leaf);\n+                  simpleMT.add(leaf);\n+                  return leaf;\n+                })\n+            .collect(Collectors.toList());\n+\n+    leaves.forEach(\n+        (leaf) ->\n+            assertThat(optimizedMT.getProofTreeByValue(leaf))\n+                .isEqualTo(simpleMT.getProofTreeByValue(leaf)));\n+  }\n+\n+  @Test\n+  void checkSpeed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6660a40b2d1c40261fff8bea438d35d4ddacdb3f"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44e5aed03d5fb5812254559137d86339581647f2", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/44e5aed03d5fb5812254559137d86339581647f2", "committedDate": "2020-02-10T22:34:40Z", "message": "Fix assemble bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6a030e393ca569a479ae3c5e64f99b3537bf495", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/e6a030e393ca569a479ae3c5e64f99b3537bf495", "committedDate": "2020-02-10T22:57:14Z", "message": "Resolve comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2049a9be6fca57a571850185fffdc2e9c9aa68f5", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/2049a9be6fca57a571850185fffdc2e9c9aa68f5", "committedDate": "2020-02-10T23:00:54Z", "message": "Resolve comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4289, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}