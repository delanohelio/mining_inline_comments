{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNjI1MzA0", "number": 1238, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTo1NTowMVrODjl03w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDoxNTozNFrODjmOEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjQ2NDk1OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/NodeSyncingHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTo1NTowMVrOFvfJUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTo1NTowMVrOFvfJUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMzNzY4Mg==", "bodyText": "avoid  using @NotNull annotation", "url": "https://github.com/ConsenSys/teku/pull/1238#discussion_r385337682", "createdAt": "2020-02-27T19:55:01Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/NodeSyncingHandler.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n+\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_NODE;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.artemis.beaconrestapi.schema.SyncingResponse;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.sync.SyncService;\n+\n+public class NodeSyncingHandler implements Handler {\n+\n+  private final SyncService syncService;\n+\n+  public NodeSyncingHandler(SyncService syncService, JsonProvider jsonProvider) {\n+    this.syncService = syncService;\n+    this.jsonProvider = jsonProvider;\n+  }\n+\n+  public static final String ROUTE = \"/node/syncing\";\n+  private final JsonProvider jsonProvider;\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get syncing info from the running beacon node.\",\n+      tags = {TAG_NODE},\n+      description = \"Requests that the beacon node gives information about its syncing state\",\n+      responses = {\n+        @OpenApiResponse(status = RES_OK, content = @OpenApiContent(from = SyncingResponse.class)),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR)\n+      })\n+  @Override\n+  public void handle(@NotNull Context ctx) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce7a274b80319ecef2c552dc1d65328936d5527"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjUwMDM0OnYy", "diffSide": "RIGHT", "path": "sync/src/main/java/tech/pegasys/artemis/sync/SyncingStatus.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDowNjoxOVrOFvffRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMzo0MToxMlrOFvk_8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0MzMwMg==", "bodyText": "really not a fan of isIs_syncing..\nMaybe if the flag is called 'syncing' and then the is function could be isSyncing...", "url": "https://github.com/ConsenSys/teku/pull/1238#discussion_r385343302", "createdAt": "2020-02-27T20:06:19Z", "author": {"login": "rolfyone"}, "path": "sync/src/main/java/tech/pegasys/artemis/sync/SyncingStatus.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.sync;\n+\n+public class SyncingStatus {\n+  private final boolean is_syncing;\n+  private final SyncStatus syncStatus;\n+\n+  public SyncingStatus(final boolean is_syncing, final SyncStatus syncStatus) {\n+    this.is_syncing = is_syncing;\n+    this.syncStatus = syncStatus;\n+  }\n+\n+  public SyncStatus getSync_status() {\n+    return syncStatus;\n+  }\n+\n+  public boolean isIs_syncing() {\n+    return is_syncing;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce7a274b80319ecef2c552dc1d65328936d5527"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMzU4Nw==", "bodyText": "made public final with the proper names", "url": "https://github.com/ConsenSys/teku/pull/1238#discussion_r385433587", "createdAt": "2020-02-27T23:41:12Z", "author": {"login": "macfarla"}, "path": "sync/src/main/java/tech/pegasys/artemis/sync/SyncingStatus.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.sync;\n+\n+public class SyncingStatus {\n+  private final boolean is_syncing;\n+  private final SyncStatus syncStatus;\n+\n+  public SyncingStatus(final boolean is_syncing, final SyncStatus syncStatus) {\n+    this.is_syncing = is_syncing;\n+    this.syncStatus = syncStatus;\n+  }\n+\n+  public SyncStatus getSync_status() {\n+    return syncStatus;\n+  }\n+\n+  public boolean isIs_syncing() {\n+    return is_syncing;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0MzMwMg=="}, "originalCommit": {"oid": "3ce7a274b80319ecef2c552dc1d65328936d5527"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjUwNjEzOnYy", "diffSide": "RIGHT", "path": "sync/src/main/java/tech/pegasys/artemis/sync/util/NoopSyncService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDowODoxMlrOFvfi6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjo0Mzo0NFrOFvj1jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0NDIzMg==", "bodyText": "nit: if we're using this a lot, could static import UnsignedLong.ZERO...", "url": "https://github.com/ConsenSys/teku/pull/1238#discussion_r385344232", "createdAt": "2020-02-27T20:08:12Z", "author": {"login": "rolfyone"}, "path": "sync/src/main/java/tech/pegasys/artemis/sync/util/NoopSyncService.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.sync.util;\n+\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.primitives.UnsignedLong;\n+import tech.pegasys.artemis.networking.eth2.Eth2Network;\n+import tech.pegasys.artemis.statetransition.blockimport.BlockImporter;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.sync.SyncService;\n+import tech.pegasys.artemis.sync.SyncStatus;\n+import tech.pegasys.artemis.sync.SyncingStatus;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class NoopSyncService extends SyncService {\n+\n+  public NoopSyncService(\n+      final EventBus eventBus,\n+      final Eth2Network network,\n+      final ChainStorageClient storageClient,\n+      final BlockImporter blockImporter) {\n+    super(eventBus, network, storageClient, blockImporter);\n+  }\n+\n+  @Override\n+  protected SafeFuture<?> doStart() {\n+    return SafeFuture.completedFuture(null);\n+  }\n+\n+  @Override\n+  protected SafeFuture<?> doStop() {\n+    return SafeFuture.completedFuture(null);\n+  }\n+\n+  @Override\n+  public SyncingStatus getSyncStatus() {\n+    return new SyncingStatus(\n+        false, new SyncStatus(UnsignedLong.ZERO, UnsignedLong.ZERO, UnsignedLong.ZERO));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce7a274b80319ecef2c552dc1d65328936d5527"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxNDU0Mg==", "bodyText": "done", "url": "https://github.com/ConsenSys/teku/pull/1238#discussion_r385414542", "createdAt": "2020-02-27T22:43:44Z", "author": {"login": "macfarla"}, "path": "sync/src/main/java/tech/pegasys/artemis/sync/util/NoopSyncService.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.sync.util;\n+\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.primitives.UnsignedLong;\n+import tech.pegasys.artemis.networking.eth2.Eth2Network;\n+import tech.pegasys.artemis.statetransition.blockimport.BlockImporter;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.sync.SyncService;\n+import tech.pegasys.artemis.sync.SyncStatus;\n+import tech.pegasys.artemis.sync.SyncingStatus;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class NoopSyncService extends SyncService {\n+\n+  public NoopSyncService(\n+      final EventBus eventBus,\n+      final Eth2Network network,\n+      final ChainStorageClient storageClient,\n+      final BlockImporter blockImporter) {\n+    super(eventBus, network, storageClient, blockImporter);\n+  }\n+\n+  @Override\n+  protected SafeFuture<?> doStart() {\n+    return SafeFuture.completedFuture(null);\n+  }\n+\n+  @Override\n+  protected SafeFuture<?> doStop() {\n+    return SafeFuture.completedFuture(null);\n+  }\n+\n+  @Override\n+  public SyncingStatus getSyncStatus() {\n+    return new SyncingStatus(\n+        false, new SyncStatus(UnsignedLong.ZERO, UnsignedLong.ZERO, UnsignedLong.ZERO));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0NDIzMg=="}, "originalCommit": {"oid": "3ce7a274b80319ecef2c552dc1d65328936d5527"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjUyOTQ0OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/NodeSyncingHandlerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDoxNTozNFrOFvfxGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMzo0MToyNVrOFvlAOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0Nzg2NQ==", "bodyText": "theres a lot of setup in this unit test. i'd probably at least suggest moving the 'when' down next to the handle, and putting in a line break - then the 3 lines down the bottom are the test, the rest above is the setup.\nThe restApi SyncingStatus object looks very much like artemis.sync.SyncStatus - should we be just using that object? Currently the two syncingStatus objects are a> confusing, and b> pretty different.\nWe could potentially do away with the SyncingResponse altogether and just return the serialized schema.SyncingStatus?", "url": "https://github.com/ConsenSys/teku/pull/1238#discussion_r385347865", "createdAt": "2020-02-27T20:15:34Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/NodeSyncingHandlerTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.beaconrestapi.schema.SyncingResponse;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.sync.SyncService;\n+import tech.pegasys.artemis.sync.SyncStatus;\n+import tech.pegasys.artemis.sync.SyncingStatus;\n+\n+public class NodeSyncingHandlerTest {\n+  private Context context = mock(Context.class);\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final SyncService syncService = mock(SyncService.class);\n+\n+  @Test\n+  public void shouldReturnTrueWhenSyncing() throws Exception {\n+    final boolean isSyncing = true;\n+    final UnsignedLong startSlot = UnsignedLong.ONE;\n+    final UnsignedLong currentSlot = UnsignedLong.valueOf(5);\n+    final UnsignedLong highestSlot = UnsignedLong.valueOf(10);\n+    SyncingStatus syncingStatus =\n+        new SyncingStatus(isSyncing, new SyncStatus(startSlot, currentSlot, highestSlot));\n+    tech.pegasys.artemis.beaconrestapi.schema.SyncingStatus syncStatus =\n+        new tech.pegasys.artemis.beaconrestapi.schema.SyncingStatus(\n+            startSlot, currentSlot, highestSlot);\n+    SyncingResponse syncingResponse = new SyncingResponse(isSyncing, syncStatus);\n+    when(syncService.getSyncStatus()).thenReturn(syncingStatus);\n+    NodeSyncingHandler handler = new NodeSyncingHandler(syncService, jsonProvider);\n+    handler.handle(context);\n+    verify(context).result(jsonProvider.objectToJSON(syncingResponse));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseWhenNotSyncing() throws Exception {\n+    final boolean isSyncing = true;\n+    final UnsignedLong startSlot = UnsignedLong.ZERO;\n+    final UnsignedLong currentSlot = UnsignedLong.ZERO;\n+    final UnsignedLong highestSlot = UnsignedLong.ZERO;\n+    SyncingStatus syncingStatus =\n+        new SyncingStatus(isSyncing, new SyncStatus(startSlot, currentSlot, highestSlot));\n+    tech.pegasys.artemis.beaconrestapi.schema.SyncingStatus syncStatus =\n+        new tech.pegasys.artemis.beaconrestapi.schema.SyncingStatus(\n+            startSlot, currentSlot, highestSlot);\n+    SyncingResponse syncingResponse = new SyncingResponse(isSyncing, syncStatus);\n+    when(syncService.getSyncStatus()).thenReturn(syncingStatus);\n+    NodeSyncingHandler handler = new NodeSyncingHandler(syncService, jsonProvider);\n+    handler.handle(context);\n+    verify(context).result(jsonProvider.objectToJSON(syncingResponse));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ce7a274b80319ecef2c552dc1d65328936d5527"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzMzY1Ng==", "bodyText": "simplified", "url": "https://github.com/ConsenSys/teku/pull/1238#discussion_r385433656", "createdAt": "2020-02-27T23:41:25Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/NodeSyncingHandlerTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.beaconrestapi.schema.SyncingResponse;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.sync.SyncService;\n+import tech.pegasys.artemis.sync.SyncStatus;\n+import tech.pegasys.artemis.sync.SyncingStatus;\n+\n+public class NodeSyncingHandlerTest {\n+  private Context context = mock(Context.class);\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final SyncService syncService = mock(SyncService.class);\n+\n+  @Test\n+  public void shouldReturnTrueWhenSyncing() throws Exception {\n+    final boolean isSyncing = true;\n+    final UnsignedLong startSlot = UnsignedLong.ONE;\n+    final UnsignedLong currentSlot = UnsignedLong.valueOf(5);\n+    final UnsignedLong highestSlot = UnsignedLong.valueOf(10);\n+    SyncingStatus syncingStatus =\n+        new SyncingStatus(isSyncing, new SyncStatus(startSlot, currentSlot, highestSlot));\n+    tech.pegasys.artemis.beaconrestapi.schema.SyncingStatus syncStatus =\n+        new tech.pegasys.artemis.beaconrestapi.schema.SyncingStatus(\n+            startSlot, currentSlot, highestSlot);\n+    SyncingResponse syncingResponse = new SyncingResponse(isSyncing, syncStatus);\n+    when(syncService.getSyncStatus()).thenReturn(syncingStatus);\n+    NodeSyncingHandler handler = new NodeSyncingHandler(syncService, jsonProvider);\n+    handler.handle(context);\n+    verify(context).result(jsonProvider.objectToJSON(syncingResponse));\n+  }\n+\n+  @Test\n+  public void shouldReturnFalseWhenNotSyncing() throws Exception {\n+    final boolean isSyncing = true;\n+    final UnsignedLong startSlot = UnsignedLong.ZERO;\n+    final UnsignedLong currentSlot = UnsignedLong.ZERO;\n+    final UnsignedLong highestSlot = UnsignedLong.ZERO;\n+    SyncingStatus syncingStatus =\n+        new SyncingStatus(isSyncing, new SyncStatus(startSlot, currentSlot, highestSlot));\n+    tech.pegasys.artemis.beaconrestapi.schema.SyncingStatus syncStatus =\n+        new tech.pegasys.artemis.beaconrestapi.schema.SyncingStatus(\n+            startSlot, currentSlot, highestSlot);\n+    SyncingResponse syncingResponse = new SyncingResponse(isSyncing, syncStatus);\n+    when(syncService.getSyncStatus()).thenReturn(syncingStatus);\n+    NodeSyncingHandler handler = new NodeSyncingHandler(syncService, jsonProvider);\n+    handler.handle(context);\n+    verify(context).result(jsonProvider.objectToJSON(syncingResponse));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM0Nzg2NQ=="}, "originalCommit": {"oid": "3ce7a274b80319ecef2c552dc1d65328936d5527"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2685, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}