{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzODcwNjAw", "number": 1595, "title": "Bitvector to use bitset", "bodyText": "PR Description\nUse BitSet in Bitvector in order to use less memory and be consistent with Bitlist implementation.", "createdAt": "2020-04-15T16:40:46Z", "url": "https://github.com/ConsenSys/teku/pull/1595", "merged": true, "mergeCommit": {"oid": "3fd54d052f223086c620d0d97e829a96698adde1"}, "closed": true, "closedAt": "2020-04-15T19:34:00Z", "author": {"login": "cemozerr"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcX6hKBgH2gAyNDAzODcwNjAwOmYxN2JjZWI5ODRiMzE4ODgxYTQ1MGYyMDI4OTQ1MmJjMzY5ZDc5YWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX8wHcAH2gAyNDAzODcwNjAwOjVjMDY2MTNkYzgyZDRkZjc1Zjg4ZTZmZDAxNjBmMjIyZjA4MzFmMWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f17bceb984b318881a450f20289452bc369d79ab", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/f17bceb984b318881a450f20289452bc369d79ab", "committedDate": "2020-04-15T16:17:03Z", "message": "Use BitSet in Bitvector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06405c1b5f615e930e712310301de4d3388475a7", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/06405c1b5f615e930e712310301de4d3388475a7", "committedDate": "2020-04-15T16:39:10Z", "message": "Make small fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ab6910ed6dae5a374ca0c70974b1f1b4b60ebb6", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/2ab6910ed6dae5a374ca0c70974b1f1b4b60ebb6", "committedDate": "2020-04-15T16:40:15Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "429cd36f495d9f7d2a8ea035b30ca75b404d0a13", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/429cd36f495d9f7d2a8ea035b30ca75b404d0a13", "committedDate": "2020-04-15T16:45:32Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0ed3314e2869222c08784043c2d9b49da914241", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/b0ed3314e2869222c08784043c2d9b49da914241", "committedDate": "2020-04-15T17:00:41Z", "message": "Add missing function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/6f3b96f3ef9dffa14c461fca0e71d94329e21b35", "committedDate": "2020-04-15T17:17:57Z", "message": "Merge branch 'master' into bitvectorToUseBitset"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTkyNTE1", "url": "https://github.com/ConsenSys/teku/pull/1595#pullrequestreview-393992515", "createdAt": "2020-04-15T17:38:13Z", "commit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzozODoxM1rOGGEezg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo0NTo1OVrOGGEw4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxODA2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                BitSet byteArray = new BitSet(n);\n          \n          \n            \n                BitSet bits = new BitSet(n);", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409018062", "createdAt": "2020-04-15T17:38:13Z", "author": {"login": "mbaxter"}, "path": "ethereum/datastructures/src/testFixtures/java/tech/pegasys/artemis/datastructures/util/DataStructureUtil.java", "diffHunk": "@@ -143,11 +144,13 @@ public Bitlist randomBitlist(int n) {\n   }\n \n   public Bitvector randomBitvector(int n) {\n-    byte[] byteArray = new byte[n];\n+    BitSet byteArray = new BitSet(n);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMTUyOQ==", "bodyText": "Do we need this method?  I'd try to cut it if we can.", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409021529", "createdAt": "2020-04-15T17:44:01Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -13,94 +13,99 @@\n \n package tech.pegasys.artemis.ssz.SSZTypes;\n \n-import static java.util.Objects.isNull;\n+import static com.google.common.base.Preconditions.checkElementIndex;\n \n-import java.util.Arrays;\n+import com.google.common.base.Objects;\n+import java.util.BitSet;\n import java.util.stream.IntStream;\n import org.apache.tuweni.bytes.Bytes;\n \n public class Bitvector {\n \n-  private int size;\n-  private byte[] byteArray;\n+  private final BitSet data;\n+  private final int size;\n \n   public Bitvector(int size) {\n-    this.byteArray = new byte[size];\n+    this.data = new BitSet(size);\n     this.size = size;\n   }\n \n-  public Bitvector(byte[] byteArray, int size) {\n-    this.byteArray = byteArray;\n+  public Bitvector(BitSet bitSet, int size) {\n+    this.data = bitSet;\n     this.size = size;\n   }\n \n+  public Bitvector(Bitvector bitvector) {\n+    this.data = (BitSet) bitvector.data.clone();\n+    this.size = bitvector.size;\n+  }\n+\n   public void setBit(int i) {\n-    this.byteArray[i] = 1;\n+    checkElementIndex(i, size);\n+    data.set(i);\n   }\n \n-  public int getBit(int i) {\n-    return byteArray[i];\n+  public boolean getBit(int i) {\n+    checkElementIndex(i, size);\n+    return data.get(i);\n   }\n \n   public int getSize() {\n     return size;\n   }\n \n-  public byte[] getByteArray() {\n-    return byteArray;\n-  }\n-\n   @SuppressWarnings(\"NarrowingCompoundAssignment\")\n   public Bytes serialize() {\n     byte[] array = new byte[(size + 7) / 8];\n-    IntStream.range(0, size).forEach(i -> array[i / 8] |= (((int) this.byteArray[i]) << (i % 8)));\n+    IntStream.range(0, size).forEach(i -> array[i / 8] |= ((data.get(i) ? 1 : 0) << (i % 8)));\n     return Bytes.wrap(array);\n   }\n \n   public static Bitvector fromBytes(Bytes bytes, int size) {\n-    byte[] byteArray = new byte[size];\n+    BitSet bitset = new BitSet(size);\n \n     for (int i = size - 1; i >= 0; i--) {\n       if (((bytes.get(i / 8) >>> (i % 8)) & 0x01) == 1) {\n-        byteArray[i] = 1;\n+        bitset.set(i);\n       }\n     }\n \n-    return new Bitvector(byteArray, size);\n+    return new Bitvector(bitset, size);\n   }\n \n   public Bitvector rightShift(int i) {\n     int length = this.getSize();\n-    Bitvector newBitvector = new Bitvector(new byte[length], length);\n+    Bitvector newBitvector = new Bitvector(getSize());\n     for (int j = 0; j < length - i; j++) {\n-      if (this.getBit(j) == 1) {\n+      if (this.getBit(j)) {\n         newBitvector.setBit(j + i);\n       }\n     }\n     return newBitvector;\n   }\n \n+  public byte[] getByteArray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMjY4OA==", "bodyText": "nice :D", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409022688", "createdAt": "2020-04-15T17:45:59Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -13,94 +13,99 @@\n \n package tech.pegasys.artemis.ssz.SSZTypes;\n \n-import static java.util.Objects.isNull;\n+import static com.google.common.base.Preconditions.checkElementIndex;\n \n-import java.util.Arrays;\n+import com.google.common.base.Objects;\n+import java.util.BitSet;\n import java.util.stream.IntStream;\n import org.apache.tuweni.bytes.Bytes;\n \n public class Bitvector {\n \n-  private int size;\n-  private byte[] byteArray;\n+  private final BitSet data;\n+  private final int size;\n \n   public Bitvector(int size) {\n-    this.byteArray = new byte[size];\n+    this.data = new BitSet(size);\n     this.size = size;\n   }\n \n-  public Bitvector(byte[] byteArray, int size) {\n-    this.byteArray = byteArray;\n+  public Bitvector(BitSet bitSet, int size) {\n+    this.data = bitSet;\n     this.size = size;\n   }\n \n+  public Bitvector(Bitvector bitvector) {\n+    this.data = (BitSet) bitvector.data.clone();\n+    this.size = bitvector.size;\n+  }\n+\n   public void setBit(int i) {\n-    this.byteArray[i] = 1;\n+    checkElementIndex(i, size);\n+    data.set(i);\n   }\n \n-  public int getBit(int i) {\n-    return byteArray[i];\n+  public boolean getBit(int i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTg1NDk5", "url": "https://github.com/ConsenSys/teku/pull/1595#pullrequestreview-393985499", "createdAt": "2020-04-15T17:28:43Z", "commit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoyODo0M1rOGGEIYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo0ODo1N1rOGGE3rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMjMyMg==", "bodyText": "Do we actually need this method?", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409012322", "createdAt": "2020-04-15T17:28:43Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -13,94 +13,99 @@\n \n package tech.pegasys.artemis.ssz.SSZTypes;\n \n-import static java.util.Objects.isNull;\n+import static com.google.common.base.Preconditions.checkElementIndex;\n \n-import java.util.Arrays;\n+import com.google.common.base.Objects;\n+import java.util.BitSet;\n import java.util.stream.IntStream;\n import org.apache.tuweni.bytes.Bytes;\n \n public class Bitvector {\n \n-  private int size;\n-  private byte[] byteArray;\n+  private final BitSet data;\n+  private final int size;\n \n   public Bitvector(int size) {\n-    this.byteArray = new byte[size];\n+    this.data = new BitSet(size);\n     this.size = size;\n   }\n \n-  public Bitvector(byte[] byteArray, int size) {\n-    this.byteArray = byteArray;\n+  public Bitvector(BitSet bitSet, int size) {\n+    this.data = bitSet;\n     this.size = size;\n   }\n \n+  public Bitvector(Bitvector bitvector) {\n+    this.data = (BitSet) bitvector.data.clone();\n+    this.size = bitvector.size;\n+  }\n+\n   public void setBit(int i) {\n-    this.byteArray[i] = 1;\n+    checkElementIndex(i, size);\n+    data.set(i);\n   }\n \n-  public int getBit(int i) {\n-    return byteArray[i];\n+  public boolean getBit(int i) {\n+    checkElementIndex(i, size);\n+    return data.get(i);\n   }\n \n   public int getSize() {\n     return size;\n   }\n \n-  public byte[] getByteArray() {\n-    return byteArray;\n-  }\n-\n   @SuppressWarnings(\"NarrowingCompoundAssignment\")\n   public Bytes serialize() {\n     byte[] array = new byte[(size + 7) / 8];\n-    IntStream.range(0, size).forEach(i -> array[i / 8] |= (((int) this.byteArray[i]) << (i % 8)));\n+    IntStream.range(0, size).forEach(i -> array[i / 8] |= ((data.get(i) ? 1 : 0) << (i % 8)));\n     return Bytes.wrap(array);\n   }\n \n   public static Bitvector fromBytes(Bytes bytes, int size) {\n-    byte[] byteArray = new byte[size];\n+    BitSet bitset = new BitSet(size);\n \n     for (int i = size - 1; i >= 0; i--) {\n       if (((bytes.get(i / 8) >>> (i % 8)) & 0x01) == 1) {\n-        byteArray[i] = 1;\n+        bitset.set(i);\n       }\n     }\n \n-    return new Bitvector(byteArray, size);\n+    return new Bitvector(bitset, size);\n   }\n \n   public Bitvector rightShift(int i) {\n     int length = this.getSize();\n-    Bitvector newBitvector = new Bitvector(new byte[length], length);\n+    Bitvector newBitvector = new Bitvector(getSize());\n     for (int j = 0; j < length - i; j++) {\n-      if (this.getBit(j) == 1) {\n+      if (this.getBit(j)) {\n         newBitvector.setBit(j + i);\n       }\n     }\n     return newBitvector;\n   }\n \n+  public byte[] getByteArray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMjc2MQ==", "bodyText": "Would be nice to add toString() as well", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409012761", "createdAt": "2020-04-15T17:29:26Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -13,94 +13,99 @@\n \n package tech.pegasys.artemis.ssz.SSZTypes;\n \n-import static java.util.Objects.isNull;\n+import static com.google.common.base.Preconditions.checkElementIndex;\n \n-import java.util.Arrays;\n+import com.google.common.base.Objects;\n+import java.util.BitSet;\n import java.util.stream.IntStream;\n import org.apache.tuweni.bytes.Bytes;\n \n public class Bitvector {\n \n-  private int size;\n-  private byte[] byteArray;\n+  private final BitSet data;\n+  private final int size;\n \n   public Bitvector(int size) {\n-    this.byteArray = new byte[size];\n+    this.data = new BitSet(size);\n     this.size = size;\n   }\n \n-  public Bitvector(byte[] byteArray, int size) {\n-    this.byteArray = byteArray;\n+  public Bitvector(BitSet bitSet, int size) {\n+    this.data = bitSet;\n     this.size = size;\n   }\n \n+  public Bitvector(Bitvector bitvector) {\n+    this.data = (BitSet) bitvector.data.clone();\n+    this.size = bitvector.size;\n+  }\n+\n   public void setBit(int i) {\n-    this.byteArray[i] = 1;\n+    checkElementIndex(i, size);\n+    data.set(i);\n   }\n \n-  public int getBit(int i) {\n-    return byteArray[i];\n+  public boolean getBit(int i) {\n+    checkElementIndex(i, size);\n+    return data.get(i);\n   }\n \n   public int getSize() {\n     return size;\n   }\n \n-  public byte[] getByteArray() {\n-    return byteArray;\n-  }\n-\n   @SuppressWarnings(\"NarrowingCompoundAssignment\")\n   public Bytes serialize() {\n     byte[] array = new byte[(size + 7) / 8];\n-    IntStream.range(0, size).forEach(i -> array[i / 8] |= (((int) this.byteArray[i]) << (i % 8)));\n+    IntStream.range(0, size).forEach(i -> array[i / 8] |= ((data.get(i) ? 1 : 0) << (i % 8)));\n     return Bytes.wrap(array);\n   }\n \n   public static Bitvector fromBytes(Bytes bytes, int size) {\n-    byte[] byteArray = new byte[size];\n+    BitSet bitset = new BitSet(size);\n \n     for (int i = size - 1; i >= 0; i--) {\n       if (((bytes.get(i / 8) >>> (i % 8)) & 0x01) == 1) {\n-        byteArray[i] = 1;\n+        bitset.set(i);\n       }\n     }\n \n-    return new Bitvector(byteArray, size);\n+    return new Bitvector(bitset, size);\n   }\n \n   public Bitvector rightShift(int i) {\n     int length = this.getSize();\n-    Bitvector newBitvector = new Bitvector(new byte[length], length);\n+    Bitvector newBitvector = new Bitvector(getSize());\n     for (int j = 0; j < length - i; j++) {\n-      if (this.getBit(j) == 1) {\n+      if (this.getBit(j)) {\n         newBitvector.setBit(j + i);\n       }\n     }\n     return newBitvector;\n   }\n \n+  public byte[] getByteArray() {\n+    byte[] array = new byte[size];\n+    for (int i = 0; i < size; i++) {\n+      array[i] = (byte) (data.get(i) ? 1 : 0);\n+    }\n+    return array;\n+  }\n+\n   public Bitvector copy() {\n-    return new Bitvector(this.getByteArray(), this.getSize());\n+    return new Bitvector(this);\n   }\n \n   @Override\n-  public int hashCode() {\n-    return Arrays.hashCode(byteArray);\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (!(o instanceof Bitvector)) return false;\n+    Bitvector bitvector = (Bitvector) o;\n+    return getSize() == bitvector.getSize() && Objects.equal(data, bitvector.data);\n   }\n \n   @Override\n-  public boolean equals(Object obj) {\n-    if (isNull(obj)) {\n-      return false;\n-    }\n-    if (this == obj) {\n-      return true;\n-    }\n-    if (!(obj instanceof Bitvector)) {\n-      return false;\n-    }\n-    Bitvector other = (Bitvector) obj;\n-    return Arrays.equals(this.getByteArray(), other.getByteArray());\n+  public int hashCode() {\n+    return Objects.hashCode(data, getSize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNDQzMQ==", "bodyText": "Would be perfect to make this class immutable to avoid potential modification side effects like this:\nhttps://github.com/PegaSysEng/teku/blob/c6e8e56b7a0edc078a88d1b40587262d22bd4c0a/ethereum/core/src/main/java/tech/pegasys/artemis/core/EpochProcessorUtil.java#L209-L221\nHere a Bitvector copy is made just because of .rightShift(1). Else it could have erroneous side effect .\nThat also relates to Bitlist but don't think this fits this PR", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409024431", "createdAt": "2020-04-15T17:48:57Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -13,94 +13,99 @@\n \n package tech.pegasys.artemis.ssz.SSZTypes;\n \n-import static java.util.Objects.isNull;\n+import static com.google.common.base.Preconditions.checkElementIndex;\n \n-import java.util.Arrays;\n+import com.google.common.base.Objects;\n+import java.util.BitSet;\n import java.util.stream.IntStream;\n import org.apache.tuweni.bytes.Bytes;\n \n public class Bitvector {\n \n-  private int size;\n-  private byte[] byteArray;\n+  private final BitSet data;\n+  private final int size;\n \n   public Bitvector(int size) {\n-    this.byteArray = new byte[size];\n+    this.data = new BitSet(size);\n     this.size = size;\n   }\n \n-  public Bitvector(byte[] byteArray, int size) {\n-    this.byteArray = byteArray;\n+  public Bitvector(BitSet bitSet, int size) {\n+    this.data = bitSet;\n     this.size = size;\n   }\n \n+  public Bitvector(Bitvector bitvector) {\n+    this.data = (BitSet) bitvector.data.clone();\n+    this.size = bitvector.size;\n+  }\n+\n   public void setBit(int i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b16b372ed2fa1198d20e34c7ce803f95a725fd7", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/2b16b372ed2fa1198d20e34c7ce803f95a725fd7", "committedDate": "2020-04-15T18:47:48Z", "message": "Resolve comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c06613dc82d4df75f88e6fd0160f222f0831f1c", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/5c06613dc82d4df75f88e6fd0160f222f0831f1c", "committedDate": "2020-04-15T18:53:12Z", "message": "Run spotless"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4279, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}