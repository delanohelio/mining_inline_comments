{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2ODI2MjI0", "number": 1632, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDoyNjowMFrOD2ejvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDoyNjowMFrOD2ejvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDUwMzY1OnYy", "diffSide": "RIGHT", "path": "bls/src/main/java/tech/pegasys/artemis/bls/mikuli/BLS12381.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNDoyNjowMFrOGMQJUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMToyMDoxMVrOGM4LzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUwMDYyNA==", "bodyText": "That linux bug was fixed in JDK 7 which we don't support anymore.  Java SecureRandom now uses /dev/urandom.", "url": "https://github.com/ConsenSys/teku/pull/1632#discussion_r415500624", "createdAt": "2020-04-27T04:26:00Z", "author": {"login": "ajsutton"}, "path": "bls/src/main/java/tech/pegasys/artemis/bls/mikuli/BLS12381.java", "diffHunk": "@@ -42,6 +45,43 @@\n  */\n public final class BLS12381 {\n \n+  private static final long MAX_BATCH_VERIFY_RANDOM_MULTIPLIER = Long.MAX_VALUE;\n+\n+  private static Random getRND() {\n+    // Milagro RAND has some issues with generating 'small' random numbers\n+    // and is not thread safe\n+    // Using non-secure random due to the JDK Linux secure random issue:\n+    // https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6521844\n+    // A potential attack here has a very limited application and is not feasible\n+    // Thus using non-secure random doesn't significantly mitigate the security\n+    return ThreadLocalRandom.current();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc733e16da63818508a64fd58a823f2b8c4e8f46"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY4OTM0MA==", "bodyText": "Yeah, mixed up Updated and Resolved dates. Thought it just was recently fixed.\nHowever while running the test with SecureRandom on Linux (I reproduced on Ubuntu 18, the same behavior was on the Travis) it stuck for 30 mins with this stack trace:\n    java.lang.Thread.State: RUNNABLE\n        at java.io.FileInputStream.readBytes(java.base@11.0.7/Native Method)\n        at java.io.FileInputStream.read(java.base@11.0.7/FileInputStream.java:279)\n        at java.io.FilterInputStream.read(java.base@11.0.7/FilterInputStream.java:133)\n        at sun.security.provider.NativePRNG$RandomIO.readFully(java.base@11.0.7/NativePRNG.java:424)\n        at sun.security.provider.NativePRNG$RandomIO.ensureBufferValid(java.base@11.0.7/NativePRNG.java:526)\n        at sun.security.provider.NativePRNG$RandomIO.implNextBytes(java.base@11.0.7/NativePRNG.java:545)\n        - locked <0x00000007004ac3c0> (a java.lang.Object)\n        at sun.security.provider.NativePRNG$Blocking.engineNextBytes(java.base@11.0.7/NativePRNG.java:268)\n        at java.security.SecureRandom.nextBytes(java.base@11.0.7/SecureRandom.java:742)\n        at java.security.SecureRandom.next(java.base@11.0.7/SecureRandom.java:799)\n        at java.util.Random.nextLong(java.base@11.0.7/Random.java:424)\n        at tech.pegasys.artemis.bls.mikuli.BLS12381.nextBatchRandomMultiplier(BLS12381.java:325)\n        at tech.pegasys.artemis.bls.mikuli.BLS12381.prepareBatchVerify(BLS12381.java:240)\n        at tech.pegasys.artemis.bls.mikuli.BLS12381Test.lambda$batchVerifyTest$4(BLS12381Test.java:178)\n        at tech.pegasys.artemis.bls.mikuli.BLS12381Test$$Lambda$464/0x00000008401ec040.apply(Unknown Source)\n\nHere are opened files:\nubuntu@ip-172-31-30-114:~/jvm-libp2p$ lsof -p 16745 | grep random\njava    16745 ubuntu   96r      CHR                1,8       0t0     10 /dev/random\njava    16745 ubuntu   97r      CHR                1,9       0t0     11 /dev/urandom\n\nAlso found another related JDK bug (which was also fixed) : https://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8098581\nAs we discussed with @benjaminion this place is not critical for using secure random, but there is SecureRandomProvider which may potentially hit the same issue. Added Jira issue: BC-396", "url": "https://github.com/ConsenSys/teku/pull/1632#discussion_r415689340", "createdAt": "2020-04-27T10:17:55Z", "author": {"login": "Nashatyrev"}, "path": "bls/src/main/java/tech/pegasys/artemis/bls/mikuli/BLS12381.java", "diffHunk": "@@ -42,6 +45,43 @@\n  */\n public final class BLS12381 {\n \n+  private static final long MAX_BATCH_VERIFY_RANDOM_MULTIPLIER = Long.MAX_VALUE;\n+\n+  private static Random getRND() {\n+    // Milagro RAND has some issues with generating 'small' random numbers\n+    // and is not thread safe\n+    // Using non-secure random due to the JDK Linux secure random issue:\n+    // https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6521844\n+    // A potential attack here has a very limited application and is not feasible\n+    // Thus using non-secure random doesn't significantly mitigate the security\n+    return ThreadLocalRandom.current();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUwMDYyNA=="}, "originalCommit": {"oid": "cc733e16da63818508a64fd58a823f2b8c4e8f46"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY5MTc5NQ==", "bodyText": "Here is the java version:\nopenjdk version \"11.0.7\" 2020-04-14\nOpenJDK Runtime Environment (build 11.0.7+10-post-Ubuntu-2ubuntu218.04)\nOpenJDK 64-Bit Server VM (build 11.0.7+10-post-Ubuntu-2ubuntu218.04, mixed mode, sharing)\n\nHere is the commit on which the issue is reproduced: c3e8c2e", "url": "https://github.com/ConsenSys/teku/pull/1632#discussion_r415691795", "createdAt": "2020-04-27T10:21:44Z", "author": {"login": "Nashatyrev"}, "path": "bls/src/main/java/tech/pegasys/artemis/bls/mikuli/BLS12381.java", "diffHunk": "@@ -42,6 +45,43 @@\n  */\n public final class BLS12381 {\n \n+  private static final long MAX_BATCH_VERIFY_RANDOM_MULTIPLIER = Long.MAX_VALUE;\n+\n+  private static Random getRND() {\n+    // Milagro RAND has some issues with generating 'small' random numbers\n+    // and is not thread safe\n+    // Using non-secure random due to the JDK Linux secure random issue:\n+    // https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6521844\n+    // A potential attack here has a very limited application and is not feasible\n+    // Thus using non-secure random doesn't significantly mitigate the security\n+    return ThreadLocalRandom.current();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUwMDYyNA=="}, "originalCommit": {"oid": "cc733e16da63818508a64fd58a823f2b8c4e8f46"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1NjYyMQ==", "bodyText": "hmm, we went through this in a lot of detail as part of Pantheon's security audit and confirmed Java would use /dev/urandom.  Originally Pantheon had overridden it to use /dev/random because that's \"more secure\" (the auditors disagreed, arguments ensued, /dev/urandom eventually won because it made the auditors happy and actually worked).\nIt looks a bit more complex than I remember it and is now trying to look up egdSource via security properties - specifically the securerandom.source security property. Interestingly AdoptOpenJDK 11 on Mac sets that to file:/dev/random so potentially Java has changed again.  I'm a little surprised Besu hasn't run into this as it uses a lot of entropy (mostly from discovery messages IIRC).\nI'm personally not too concerned about using plain Random here though I suspect we'll get dinged for it in the audit.  And we're going to have to ensure people at least know how to select /dev/urandom as the source instead of /dev/random and possibly find a way to set it as the default.", "url": "https://github.com/ConsenSys/teku/pull/1632#discussion_r416156621", "createdAt": "2020-04-27T21:20:11Z", "author": {"login": "ajsutton"}, "path": "bls/src/main/java/tech/pegasys/artemis/bls/mikuli/BLS12381.java", "diffHunk": "@@ -42,6 +45,43 @@\n  */\n public final class BLS12381 {\n \n+  private static final long MAX_BATCH_VERIFY_RANDOM_MULTIPLIER = Long.MAX_VALUE;\n+\n+  private static Random getRND() {\n+    // Milagro RAND has some issues with generating 'small' random numbers\n+    // and is not thread safe\n+    // Using non-secure random due to the JDK Linux secure random issue:\n+    // https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6521844\n+    // A potential attack here has a very limited application and is not feasible\n+    // Thus using non-secure random doesn't significantly mitigate the security\n+    return ThreadLocalRandom.current();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUwMDYyNA=="}, "originalCommit": {"oid": "cc733e16da63818508a64fd58a823f2b8c4e8f46"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1694, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}