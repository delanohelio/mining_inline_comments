{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MDE5NDM0", "number": 1597, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzowNDo1MFrODyRmZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoxNzoxNFrODyRw6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQzNzUwOnYy", "diffSide": "RIGHT", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/Eth1DataCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzowNDo1MFrOGGOo_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzowOToyNVrOGGOvHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4NDUxMQ==", "bodyText": "This one I do not understand the reasoning well but I do get that a buffer is necessary anyway.", "url": "https://github.com/ConsenSys/teku/pull/1597#discussion_r409184511", "createdAt": "2020-04-15T23:04:50Z", "author": {"login": "cemozerr"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/Eth1DataCache.java", "diffHunk": "@@ -113,13 +80,34 @@ public Eth1Data get_eth1_vote(BeaconState state) {\n     return vote.orElse(defaultVote);\n   }\n \n-  private NavigableMap<UnsignedLong, Eth1Data> getVotesToConsider() {\n-    return eth1ChainCache.subMap(getSpecRangeLowerBound(), true, getSpecRangeUpperBound(), true);\n+  private NavigableMap<UnsignedLong, Eth1Data> getVotesToConsider(final UnsignedLong slot) {\n+    return eth1ChainCache.subMap(\n+        getSpecRangeLowerBound(slot), true, getSpecRangeUpperBound(slot), true);\n+  }\n+\n+  private UnsignedLong calculateCacheDuration() {\n+    // Worst case we're in the very last moment of the current slot\n+    long cacheDurationSeconds = SECONDS_PER_SLOT;\n+\n+    // Worst case this slot is at the very end of the current voting period\n+    cacheDurationSeconds += (EPOCHS_PER_ETH1_VOTING_PERIOD * SLOTS_PER_EPOCH * SECONDS_PER_SLOT);\n+\n+    // We need 2 * ETH1_FOLLOW_DISTANCE prior to that\n+    cacheDurationSeconds +=\n+        SECONDS_PER_ETH1_BLOCK.longValue() * ETH1_FOLLOW_DISTANCE.longValue() * 2;\n+\n+    // And we want to be able to create blocks for at least the past epoch", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d93c9c4c10a0432661fee3c5cd8eb03ba8016b"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4NjA3Nw==", "bodyText": "The validator APIs allow the validator to specify the slot they need to create a block for, so there's no guarantee that the block we're building is at our current node slot - it could be somewhere before that (or after but that doesn't affect this).", "url": "https://github.com/ConsenSys/teku/pull/1597#discussion_r409186077", "createdAt": "2020-04-15T23:09:25Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/Eth1DataCache.java", "diffHunk": "@@ -113,13 +80,34 @@ public Eth1Data get_eth1_vote(BeaconState state) {\n     return vote.orElse(defaultVote);\n   }\n \n-  private NavigableMap<UnsignedLong, Eth1Data> getVotesToConsider() {\n-    return eth1ChainCache.subMap(getSpecRangeLowerBound(), true, getSpecRangeUpperBound(), true);\n+  private NavigableMap<UnsignedLong, Eth1Data> getVotesToConsider(final UnsignedLong slot) {\n+    return eth1ChainCache.subMap(\n+        getSpecRangeLowerBound(slot), true, getSpecRangeUpperBound(slot), true);\n+  }\n+\n+  private UnsignedLong calculateCacheDuration() {\n+    // Worst case we're in the very last moment of the current slot\n+    long cacheDurationSeconds = SECONDS_PER_SLOT;\n+\n+    // Worst case this slot is at the very end of the current voting period\n+    cacheDurationSeconds += (EPOCHS_PER_ETH1_VOTING_PERIOD * SLOTS_PER_EPOCH * SECONDS_PER_SLOT);\n+\n+    // We need 2 * ETH1_FOLLOW_DISTANCE prior to that\n+    cacheDurationSeconds +=\n+        SECONDS_PER_ETH1_BLOCK.longValue() * ETH1_FOLLOW_DISTANCE.longValue() * 2;\n+\n+    // And we want to be able to create blocks for at least the past epoch", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4NDUxMQ=="}, "originalCommit": {"oid": "73d93c9c4c10a0432661fee3c5cd8eb03ba8016b"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQ2NDQwOnYy", "diffSide": "RIGHT", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/Eth1DataCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoxNzoxNFrOGGO5NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoyMDoxMlrOGGO9MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4ODY2MA==", "bodyText": "I think this only needs to be 1 * ETH1_FOLLOW_DISTANCE prior, because the latest block events coming from Eth1DataManager already have time, t = (t - (Eth1 Follow Distance Time) + Request Buffer))", "url": "https://github.com/ConsenSys/teku/pull/1597#discussion_r409188660", "createdAt": "2020-04-15T23:17:14Z", "author": {"login": "cemozerr"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/Eth1DataCache.java", "diffHunk": "@@ -113,13 +80,34 @@ public Eth1Data get_eth1_vote(BeaconState state) {\n     return vote.orElse(defaultVote);\n   }\n \n-  private NavigableMap<UnsignedLong, Eth1Data> getVotesToConsider() {\n-    return eth1ChainCache.subMap(getSpecRangeLowerBound(), true, getSpecRangeUpperBound(), true);\n+  private NavigableMap<UnsignedLong, Eth1Data> getVotesToConsider(final UnsignedLong slot) {\n+    return eth1ChainCache.subMap(\n+        getSpecRangeLowerBound(slot), true, getSpecRangeUpperBound(slot), true);\n+  }\n+\n+  private UnsignedLong calculateCacheDuration() {\n+    // Worst case we're in the very last moment of the current slot\n+    long cacheDurationSeconds = SECONDS_PER_SLOT;\n+\n+    // Worst case this slot is at the very end of the current voting period\n+    cacheDurationSeconds += (EPOCHS_PER_ETH1_VOTING_PERIOD * SLOTS_PER_EPOCH * SECONDS_PER_SLOT);\n+\n+    // We need 2 * ETH1_FOLLOW_DISTANCE prior to that\n+    cacheDurationSeconds +=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d93c9c4c10a0432661fee3c5cd8eb03ba8016b"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4OTY4MA==", "bodyText": "Good spot, fixed.", "url": "https://github.com/ConsenSys/teku/pull/1597#discussion_r409189680", "createdAt": "2020-04-15T23:20:12Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/Eth1DataCache.java", "diffHunk": "@@ -113,13 +80,34 @@ public Eth1Data get_eth1_vote(BeaconState state) {\n     return vote.orElse(defaultVote);\n   }\n \n-  private NavigableMap<UnsignedLong, Eth1Data> getVotesToConsider() {\n-    return eth1ChainCache.subMap(getSpecRangeLowerBound(), true, getSpecRangeUpperBound(), true);\n+  private NavigableMap<UnsignedLong, Eth1Data> getVotesToConsider(final UnsignedLong slot) {\n+    return eth1ChainCache.subMap(\n+        getSpecRangeLowerBound(slot), true, getSpecRangeUpperBound(slot), true);\n+  }\n+\n+  private UnsignedLong calculateCacheDuration() {\n+    // Worst case we're in the very last moment of the current slot\n+    long cacheDurationSeconds = SECONDS_PER_SLOT;\n+\n+    // Worst case this slot is at the very end of the current voting period\n+    cacheDurationSeconds += (EPOCHS_PER_ETH1_VOTING_PERIOD * SLOTS_PER_EPOCH * SECONDS_PER_SLOT);\n+\n+    // We need 2 * ETH1_FOLLOW_DISTANCE prior to that\n+    cacheDurationSeconds +=", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4ODY2MA=="}, "originalCommit": {"oid": "73d93c9c4c10a0432661fee3c5cd8eb03ba8016b"}, "originalPosition": 110}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1629, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}