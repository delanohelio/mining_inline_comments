{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwOTA2MzQ2", "number": 2736, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQyMzoxMzozNFrOEgvcFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQyMzoxMzozNFrOEgvcFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzY3MTI0OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetSyncingTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQyMzoxMzozNFrOHNsqXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQyMzo1Mzo1NlrOHNs_ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEyNTI3OQ==", "bodyText": "Since we're going to write a bunch of tests like this, I wonder if we should extract a helper library that can manage the mock context for us.  So instead of having to manually create the stringArgs.capture etc, we can have something like:\nfinal ContextTestHelper contextHelper = new ContextTestHelper();\n\nhandler.handle(contextHelper.getContext());\n\nassertThat(contextHelper.getResult(SyncingResponse.class)).isEqualTo(expected);\ncontextHelper.assertNotCacheable();\n\nIt would just create a mock Context internally and do basically the same thing you are, but we'd get much more readable tests with less duplicate boilerplate.", "url": "https://github.com/ConsenSys/teku/pull/2736#discussion_r484125279", "createdAt": "2020-09-06T23:13:34Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetSyncingTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.node;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import tech.pegasys.teku.api.SyncDataProvider;\n+import tech.pegasys.teku.api.response.v1.node.SyncingResponse;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.sync.SyncService;\n+\n+public class GetSyncingTest {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final SyncService syncService = mock(SyncService.class);\n+  private final SyncDataProvider syncDataProvider = new SyncDataProvider(syncService);\n+  private final Context context = mock(Context.class);\n+\n+  private final ArgumentCaptor<String> stringArgs = ArgumentCaptor.forClass(String.class);\n+\n+  @Test\n+  public void shouldGetSyncingStatusSyncing() throws Exception {\n+    GetSyncing handler = new GetSyncing(syncDataProvider, jsonProvider);\n+    when(syncService.getSyncStatus()).thenReturn(getSyncStatus(true, 1, 7, 10));\n+    handler.handle(context);\n+    verify(context).result(stringArgs.capture());\n+    verify(context).header(Header.CACHE_CONTROL, CACHE_NONE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fef39f6118699975d0c696cfc54402a27cbb95b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEzMDc1NQ==", "bodyText": "agreed, i'll work on that with the next set...", "url": "https://github.com/ConsenSys/teku/pull/2736#discussion_r484130755", "createdAt": "2020-09-06T23:53:56Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/node/GetSyncingTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.node;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import tech.pegasys.teku.api.SyncDataProvider;\n+import tech.pegasys.teku.api.response.v1.node.SyncingResponse;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.sync.SyncService;\n+\n+public class GetSyncingTest {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final SyncService syncService = mock(SyncService.class);\n+  private final SyncDataProvider syncDataProvider = new SyncDataProvider(syncService);\n+  private final Context context = mock(Context.class);\n+\n+  private final ArgumentCaptor<String> stringArgs = ArgumentCaptor.forClass(String.class);\n+\n+  @Test\n+  public void shouldGetSyncingStatusSyncing() throws Exception {\n+    GetSyncing handler = new GetSyncing(syncDataProvider, jsonProvider);\n+    when(syncService.getSyncStatus()).thenReturn(getSyncStatus(true, 1, 7, 10));\n+    handler.handle(context);\n+    verify(context).result(stringArgs.capture());\n+    verify(context).header(Header.CACHE_CONTROL, CACHE_NONE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEyNTI3OQ=="}, "originalCommit": {"oid": "6fef39f6118699975d0c696cfc54402a27cbb95b"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3372, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}