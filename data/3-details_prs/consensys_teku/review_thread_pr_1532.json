{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5Mzc5MzMy", "number": 1532, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMjo0OToyNVrODvVUjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMDozMjozMFrODvWqtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTU4OTg5OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/operations/Attestation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMjo0OToyNVrOGBsueA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMjo1NDowNFrOGBs1ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQzNDU1Mg==", "bodyText": "Is there no need to copy the signature here? If two attestations refer to the same signature and one is aggregated whilst the other is not, this might cause issues.", "url": "https://github.com/ConsenSys/teku/pull/1532#discussion_r404434552", "createdAt": "2020-04-06T22:49:25Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/operations/Attestation.java", "diffHunk": "@@ -51,7 +52,7 @@ public Attestation(Bitlist aggregation_bits, AttestationData data, BLSSignature\n   public Attestation(Attestation attestation) {\n     this.aggregation_bits = attestation.getAggregation_bits().copy();\n     this.data = attestation.getData();\n-    this.signature = BLSSignature.fromBytes(attestation.getAggregate_signature().toBytes());\n+    this.signature = attestation.getAggregate_signature();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0929324881e5efceff4c6c60c69092ecf19b767b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQzNTAwOA==", "bodyText": "BLSSignature and all the values it holds are now fully immutable so no need to copy them anywhere. \ud83c\udf89", "url": "https://github.com/ConsenSys/teku/pull/1532#discussion_r404435008", "createdAt": "2020-04-06T22:50:35Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/operations/Attestation.java", "diffHunk": "@@ -51,7 +52,7 @@ public Attestation(Bitlist aggregation_bits, AttestationData data, BLSSignature\n   public Attestation(Attestation attestation) {\n     this.aggregation_bits = attestation.getAggregation_bits().copy();\n     this.data = attestation.getData();\n-    this.signature = BLSSignature.fromBytes(attestation.getAggregate_signature().toBytes());\n+    this.signature = attestation.getAggregate_signature();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQzNDU1Mg=="}, "originalCommit": {"oid": "0929324881e5efceff4c6c60c69092ecf19b767b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQzNjM0Nw==", "bodyText": "Noice.", "url": "https://github.com/ConsenSys/teku/pull/1532#discussion_r404436347", "createdAt": "2020-04-06T22:54:04Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/operations/Attestation.java", "diffHunk": "@@ -51,7 +52,7 @@ public Attestation(Bitlist aggregation_bits, AttestationData data, BLSSignature\n   public Attestation(Attestation attestation) {\n     this.aggregation_bits = attestation.getAggregation_bits().copy();\n     this.data = attestation.getData();\n-    this.signature = BLSSignature.fromBytes(attestation.getAggregate_signature().toBytes());\n+    this.signature = attestation.getAggregate_signature();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQzNDU1Mg=="}, "originalCommit": {"oid": "0929324881e5efceff4c6c60c69092ecf19b767b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTcyODk2OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/attestation/MatchingDataAttestationGroup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzo1MToxNVrOGBuB1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMDo0Nzo0NFrOGBvDIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1NTg5Mg==", "bodyText": "It might be just me but I think this class deserves an explanation through comments. Although written so well, its purpose is pretty complex so an explanation in comments would be really nice. Something would be like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            class MatchingDataAttestationGroup implements Iterable<Attestation> {\n          \n          \n            \n            class MatchingDataAttestationGroup implements Iterable<Attestation> {\n          \n          \n            \n            /*   This object keeps attestations for a single attestation data sorted in descending order by the number of set aggregation bits. Its iterator goes through these attestations with the given order and aggregates them. Aggregating by starting with attestations with the highest number of bits potentially allows us to create aggregates with highest number of bits set. */", "url": "https://github.com/ConsenSys/teku/pull/1532#discussion_r404455892", "createdAt": "2020-04-06T23:51:15Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/attestation/MatchingDataAttestationGroup.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.statetransition.attestation;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedHashSet;\n+import java.util.NavigableMap;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+import tech.pegasys.artemis.datastructures.operations.Attestation;\n+import tech.pegasys.artemis.datastructures.operations.AttestationData;\n+\n+class MatchingDataAttestationGroup implements Iterable<Attestation> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e896dd79d0e21e0ff9d6eaf621bc25cdca5b86a8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ3MjYwOA==", "bodyText": "Good idea.  I've added a bunch of comments for the classes to help explain what's going on.  Generally tried to keep them at an architectural level rather than being too specific about the details though.  I'm sure the words could be better but they'll have to do...", "url": "https://github.com/ConsenSys/teku/pull/1532#discussion_r404472608", "createdAt": "2020-04-07T00:47:44Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/attestation/MatchingDataAttestationGroup.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.statetransition.attestation;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedHashSet;\n+import java.util.NavigableMap;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+import tech.pegasys.artemis.datastructures.operations.Attestation;\n+import tech.pegasys.artemis.datastructures.operations.AttestationData;\n+\n+class MatchingDataAttestationGroup implements Iterable<Attestation> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1NTg5Mg=="}, "originalCommit": {"oid": "e896dd79d0e21e0ff9d6eaf621bc25cdca5b86a8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTgxMDQ3OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/test/java/tech/pegasys/artemis/statetransition/attestation/MatchingDataAttestationGroupTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMDozMjozMVrOGBuyXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMDo0Njo0N1rOGBvCBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2ODMxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void iterator_shouldNotAggregateAttestaionsWhenValidatorsOverlap() {\n          \n          \n            \n              public void iterator_shouldNotAggregateAttestationsWhenValidatorsOverlap() {", "url": "https://github.com/ConsenSys/teku/pull/1532#discussion_r404468318", "createdAt": "2020-04-07T00:32:31Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/test/java/tech/pegasys/artemis/statetransition/attestation/MatchingDataAttestationGroupTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.statetransition.attestation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static tech.pegasys.artemis.statetransition.attestation.AggregatorUtil.aggregateAttestations;\n+import static tech.pegasys.artemis.util.config.Constants.MAX_VALIDATORS_PER_COMMITTEE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.datastructures.operations.Attestation;\n+import tech.pegasys.artemis.datastructures.operations.AttestationData;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.datastructures.util.SimpleOffsetSerializer;\n+import tech.pegasys.artemis.util.SSZTypes.Bitlist;\n+\n+class MatchingDataAttestationGroupTest {\n+  private static final UnsignedLong SLOT = UnsignedLong.valueOf(1234);\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private final AttestationData attestationData = dataStructureUtil.randomAttestationData(SLOT);\n+\n+  private final MatchingDataAttestationGroup group =\n+      new MatchingDataAttestationGroup(attestationData);\n+\n+  @Test\n+  public void isEmpty_shouldBeEmptyInitially() {\n+    assertThat(group.isEmpty()).isTrue();\n+  }\n+\n+  @Test\n+  public void isEmpty_shouldNotBeEmptyWhenAnAttestationIsAdded() {\n+    addAttestation(1);\n+    assertThat(group.isEmpty()).isFalse();\n+  }\n+\n+  @Test\n+  public void isEmpty_shouldBeEmptyAfterAttestationRemoved() {\n+    final Attestation attestation = addAttestation(1);\n+    group.remove(attestation);\n+\n+    assertThat(group.isEmpty()).isTrue();\n+  }\n+\n+  @Test\n+  public void remove_shouldRemoveAttestationEvenWhenInstanceIsDifferent() {\n+    final Attestation attestation = addAttestation(1);\n+    final Attestation copy =\n+        SimpleOffsetSerializer.deserialize(\n+            SimpleOffsetSerializer.serialize(attestation), Attestation.class);\n+    group.remove(copy);\n+\n+    assertThat(group.stream()).isEmpty();\n+    assertThat(group.isEmpty()).isTrue();\n+  }\n+\n+  @Test\n+  public void remove_shouldRemoveAttestationsThatAreAggregatedIntoRemovedAttestation() {\n+    final Attestation attestation1 = addAttestation(1);\n+    final Attestation attestation2 = addAttestation(2);\n+    final Attestation attestation3 = addAttestation(3);\n+\n+    group.remove(aggregateAttestations(attestation1, attestation2));\n+\n+    assertThat(group.stream()).containsExactly(attestation3);\n+  }\n+\n+  @Test\n+  public void iterator_shouldAggregateAttestationsWhereValidatorsDoNotOverlap() {\n+    final Attestation attestation1 = addAttestation(1);\n+    final Attestation attestation2 = addAttestation(2);\n+\n+    final Attestation expected = aggregateAttestations(attestation1, attestation2);\n+    assertThat(group).containsExactlyInAnyOrder(expected);\n+  }\n+\n+  @Test\n+  public void iterator_shouldAggregateAttestationsWithMoreValidatorsFirst() {\n+    final Attestation bigAttestation = addAttestation(1, 3, 5, 7);\n+    final Attestation mediumAttestation = addAttestation(3, 5, 9);\n+    final Attestation littleAttestation = addAttestation(2);\n+\n+    assertThat(group)\n+        .containsExactly(\n+            aggregateAttestations(bigAttestation, littleAttestation), mediumAttestation);\n+  }\n+\n+  @Test\n+  public void iterator_shouldNotAggregateAttestaionsWhenValidatorsOverlap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e896dd79d0e21e0ff9d6eaf621bc25cdca5b86a8"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ3MjMyNA==", "bodyText": "Fixed.", "url": "https://github.com/ConsenSys/teku/pull/1532#discussion_r404472324", "createdAt": "2020-04-07T00:46:47Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/test/java/tech/pegasys/artemis/statetransition/attestation/MatchingDataAttestationGroupTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.statetransition.attestation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static tech.pegasys.artemis.statetransition.attestation.AggregatorUtil.aggregateAttestations;\n+import static tech.pegasys.artemis.util.config.Constants.MAX_VALIDATORS_PER_COMMITTEE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.datastructures.operations.Attestation;\n+import tech.pegasys.artemis.datastructures.operations.AttestationData;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.datastructures.util.SimpleOffsetSerializer;\n+import tech.pegasys.artemis.util.SSZTypes.Bitlist;\n+\n+class MatchingDataAttestationGroupTest {\n+  private static final UnsignedLong SLOT = UnsignedLong.valueOf(1234);\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private final AttestationData attestationData = dataStructureUtil.randomAttestationData(SLOT);\n+\n+  private final MatchingDataAttestationGroup group =\n+      new MatchingDataAttestationGroup(attestationData);\n+\n+  @Test\n+  public void isEmpty_shouldBeEmptyInitially() {\n+    assertThat(group.isEmpty()).isTrue();\n+  }\n+\n+  @Test\n+  public void isEmpty_shouldNotBeEmptyWhenAnAttestationIsAdded() {\n+    addAttestation(1);\n+    assertThat(group.isEmpty()).isFalse();\n+  }\n+\n+  @Test\n+  public void isEmpty_shouldBeEmptyAfterAttestationRemoved() {\n+    final Attestation attestation = addAttestation(1);\n+    group.remove(attestation);\n+\n+    assertThat(group.isEmpty()).isTrue();\n+  }\n+\n+  @Test\n+  public void remove_shouldRemoveAttestationEvenWhenInstanceIsDifferent() {\n+    final Attestation attestation = addAttestation(1);\n+    final Attestation copy =\n+        SimpleOffsetSerializer.deserialize(\n+            SimpleOffsetSerializer.serialize(attestation), Attestation.class);\n+    group.remove(copy);\n+\n+    assertThat(group.stream()).isEmpty();\n+    assertThat(group.isEmpty()).isTrue();\n+  }\n+\n+  @Test\n+  public void remove_shouldRemoveAttestationsThatAreAggregatedIntoRemovedAttestation() {\n+    final Attestation attestation1 = addAttestation(1);\n+    final Attestation attestation2 = addAttestation(2);\n+    final Attestation attestation3 = addAttestation(3);\n+\n+    group.remove(aggregateAttestations(attestation1, attestation2));\n+\n+    assertThat(group.stream()).containsExactly(attestation3);\n+  }\n+\n+  @Test\n+  public void iterator_shouldAggregateAttestationsWhereValidatorsDoNotOverlap() {\n+    final Attestation attestation1 = addAttestation(1);\n+    final Attestation attestation2 = addAttestation(2);\n+\n+    final Attestation expected = aggregateAttestations(attestation1, attestation2);\n+    assertThat(group).containsExactlyInAnyOrder(expected);\n+  }\n+\n+  @Test\n+  public void iterator_shouldAggregateAttestationsWithMoreValidatorsFirst() {\n+    final Attestation bigAttestation = addAttestation(1, 3, 5, 7);\n+    final Attestation mediumAttestation = addAttestation(3, 5, 9);\n+    final Attestation littleAttestation = addAttestation(2);\n+\n+    assertThat(group)\n+        .containsExactly(\n+            aggregateAttestations(bigAttestation, littleAttestation), mediumAttestation);\n+  }\n+\n+  @Test\n+  public void iterator_shouldNotAggregateAttestaionsWhenValidatorsOverlap() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ2ODMxOA=="}, "originalCommit": {"oid": "e896dd79d0e21e0ff9d6eaf621bc25cdca5b86a8"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3814, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}