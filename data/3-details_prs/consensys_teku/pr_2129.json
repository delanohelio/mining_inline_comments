{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMjEwOTY4", "number": 2129, "title": "Implement attester slashing network validator", "bodyText": "PR Description\nImplement and test AttesterSlashing network validator.\nFixed Issue(s)\n\n\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-06-11T16:51:53Z", "url": "https://github.com/ConsenSys/teku/pull/2129", "merged": true, "mergeCommit": {"oid": "2787b98b123815fa2bc6a1836038ac6368ba0796"}, "closed": true, "closedAt": "2020-06-12T16:52:47Z", "author": {"login": "cemozerr"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqRLA1gH2gAyNDMzMjEwOTY4OjNkZjJmNzM0MzY4NWIxYzQyMmE3OThkNDQyMjE0YTI2MGU1ZmQxMmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqlpArgH2gAyNDMzMjEwOTY4OmQ3ODA5M2U2ODFjZjVjNDIzOWYxOWYyZWNiYTNiZjZhYmNhN2JmZDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3df2f7343685b1c422a798d442214a260e5fd12e", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/3df2f7343685b1c422a798d442214a260e5fd12e", "committedDate": "2020-06-11T16:51:19Z", "message": "Implement proposer slashing network validator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/e35a21244c2c836abd9bc24075c5b9c045715f04", "committedDate": "2020-06-11T16:52:03Z", "message": "Merge branch 'master' into attesterSlashingNetworkLayerValidator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MTY5MTk1", "url": "https://github.com/ConsenSys/teku/pull/2129#pullrequestreview-429169195", "createdAt": "2020-06-11T18:12:28Z", "commit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODoxMjoyOFrOGipOOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODo1ODowMFrOGiqr6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MDE1Mw==", "bodyText": "I'd probably make this method private and have a second public method that accepts a non-optional set of precalculated indices.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public Optional<OperationInvalidReason> validateSlashing(\n          \n          \n            \n                  final BeaconState state,\n          \n          \n            \n                  final AttesterSlashing attesterSlashing,\n          \n          \n            \n                  final Optional<Set<UnsignedLong>> intersectingIndices) {\n          \n          \n            \n              public Optional<OperationInvalidReason> validateSlashing(\n          \n          \n            \n                  final BeaconState state,\n          \n          \n            \n                  final AttesterSlashing attesterSlashing,\n          \n          \n            \n                  final Set<UnsignedLong> intersectingIndices) {\n          \n          \n            \n                     return validateSlashing(state, attesterSlashing, Optional.of(intersectingIndices));\n          \n          \n            \n               }\n          \n          \n            \n            \n          \n          \n            \n              private Optional<OperationInvalidReason> validateSlashing(\n          \n          \n            \n                  final BeaconState state,\n          \n          \n            \n                  final AttesterSlashing attesterSlashing,\n          \n          \n            \n                  final Optional<Set<UnsignedLong>> intersectingIndices) {", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r438980153", "createdAt": "2020-06-11T18:12:28Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/AttesterSlashingStateTransitionValidator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.operationvalidators;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.check;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.firstOf;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_slashable_attestation_data;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_valid_indexed_attestation;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.ValidatorsUtil.is_slashable_validator;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public class AttesterSlashingStateTransitionValidator {\n+\n+  private List<UnsignedLong> indicesToSlash;\n+\n+  public Optional<OperationInvalidReason> validateSlashing(\n+      final BeaconState state,\n+      final AttesterSlashing attesterSlashing,\n+      final Optional<Set<UnsignedLong>> intersectingIndices) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5Nzg4OQ==", "bodyText": "It feels odd to be saving this information to a member variable and resetting it on every call.  What if we instead return a SlashingValidationResult that has a slashedIndices field and an optional OperationInvalidReason?", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r438997889", "createdAt": "2020-06-11T18:46:15Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/AttesterSlashingStateTransitionValidator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.operationvalidators;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.check;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.firstOf;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_slashable_attestation_data;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_valid_indexed_attestation;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.ValidatorsUtil.is_slashable_validator;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public class AttesterSlashingStateTransitionValidator {\n+\n+  private List<UnsignedLong> indicesToSlash;\n+\n+  public Optional<OperationInvalidReason> validateSlashing(\n+      final BeaconState state,\n+      final AttesterSlashing attesterSlashing,\n+      final Optional<Set<UnsignedLong>> intersectingIndices) {\n+    indicesToSlash = new ArrayList<>();\n+    IndexedAttestation attestation_1 = attesterSlashing.getAttestation_1();\n+    IndexedAttestation attestation_2 = attesterSlashing.getAttestation_2();\n+    return firstOf(\n+        () ->\n+            check(\n+                is_slashable_attestation_data(attestation_1.getData(), attestation_2.getData()),\n+                AttesterSlashingInvalidReason.ATTESTATIONS_NOT_SLASHABLE),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_1).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_1_INVALID),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_2).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_2_INVALID),\n+        () -> {\n+          boolean slashed_any = false;\n+\n+          Set<UnsignedLong> indices =\n+              intersectingIndices.orElse(\n+                  Sets.intersection(\n+                      new TreeSet<>(\n+                          attestation_1\n+                              .getAttesting_indices()\n+                              .asList()), // TreeSet as must be sorted\n+                      new HashSet<>(attestation_2.getAttesting_indices().asList())));\n+\n+          for (UnsignedLong index : indices) {\n+            if (is_slashable_validator(\n+                state.getValidators().get(toIntExact(index.longValue())),\n+                get_current_epoch(state))) {\n+              indicesToSlash.add(index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTY0Mw==", "bodyText": "What if we move the intersecting indices calculation to AttesterSlashing.getSlashedValidatorIndices and keep a cache there?  That way we can centralize the calculation and we don't need the intersectingIndices argument.", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r438999643", "createdAt": "2020-06-11T18:49:36Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/AttesterSlashingStateTransitionValidator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.operationvalidators;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.check;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.firstOf;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_slashable_attestation_data;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_valid_indexed_attestation;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.ValidatorsUtil.is_slashable_validator;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public class AttesterSlashingStateTransitionValidator {\n+\n+  private List<UnsignedLong> indicesToSlash;\n+\n+  public Optional<OperationInvalidReason> validateSlashing(\n+      final BeaconState state,\n+      final AttesterSlashing attesterSlashing,\n+      final Optional<Set<UnsignedLong>> intersectingIndices) {\n+    indicesToSlash = new ArrayList<>();\n+    IndexedAttestation attestation_1 = attesterSlashing.getAttestation_1();\n+    IndexedAttestation attestation_2 = attesterSlashing.getAttestation_2();\n+    return firstOf(\n+        () ->\n+            check(\n+                is_slashable_attestation_data(attestation_1.getData(), attestation_2.getData()),\n+                AttesterSlashingInvalidReason.ATTESTATIONS_NOT_SLASHABLE),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_1).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_1_INVALID),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_2).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_2_INVALID),\n+        () -> {\n+          boolean slashed_any = false;\n+\n+          Set<UnsignedLong> indices =\n+              intersectingIndices.orElse(\n+                  Sets.intersection(\n+                      new TreeSet<>(\n+                          attestation_1\n+                              .getAttesting_indices()\n+                              .asList()), // TreeSet as must be sorted\n+                      new HashSet<>(attestation_2.getAttesting_indices().asList())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwMjMyOA==", "bodyText": "Do you need these block import calls?", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439002328", "createdAt": "2020-06-11T18:54:34Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttesterSlashingValidatorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.ACCEPT;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.IGNORE;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.REJECT;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.operationvalidators.AttesterSlashingStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.datastructures.util.MockStartValidatorKeyPairFactory;\n+import tech.pegasys.teku.statetransition.BeaconChainUtil;\n+import tech.pegasys.teku.storage.client.MemoryOnlyRecentChainData;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class AttesterSlashingValidatorTest {\n+  private static final List<BLSKeyPair> VALIDATOR_KEYS =\n+      new MockStartValidatorKeyPairFactory().generateKeyPairs(0, 25);\n+  private DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private RecentChainData recentChainData;\n+  private BeaconChainUtil beaconChainUtil;\n+  private AttesterSlashingValidator attesterSlashingValidator;\n+  private AttesterSlashingStateTransitionValidator stateTransitionValidator;\n+\n+  @BeforeEach\n+  void beforeEach() {\n+    recentChainData = MemoryOnlyRecentChainData.create(new EventBus());\n+    beaconChainUtil = BeaconChainUtil.create(recentChainData, VALIDATOR_KEYS, true);\n+    stateTransitionValidator = mock(AttesterSlashingStateTransitionValidator.class);\n+    attesterSlashingValidator =\n+        new AttesterSlashingValidator(recentChainData, stateTransitionValidator);\n+  }\n+\n+  @Test\n+  public void shouldAcceptValidAttesterSlashing() throws Exception {\n+    beaconChainUtil.initializeStorage();\n+    beaconChainUtil.createAndImportBlockAtSlot(6);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwMzA2OA==", "bodyText": "(optional) ChainUpdater is a newer utility to use for importing blocks", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439003068", "createdAt": "2020-06-11T18:55:57Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttesterSlashingValidatorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.ACCEPT;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.IGNORE;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.REJECT;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.operationvalidators.AttesterSlashingStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.datastructures.util.MockStartValidatorKeyPairFactory;\n+import tech.pegasys.teku.statetransition.BeaconChainUtil;\n+import tech.pegasys.teku.storage.client.MemoryOnlyRecentChainData;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class AttesterSlashingValidatorTest {\n+  private static final List<BLSKeyPair> VALIDATOR_KEYS =\n+      new MockStartValidatorKeyPairFactory().generateKeyPairs(0, 25);\n+  private DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private RecentChainData recentChainData;\n+  private BeaconChainUtil beaconChainUtil;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNDEzNg==", "bodyText": "Do you need a real RecentChainData instance?  I think you can just mock it to return a best state.", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439004136", "createdAt": "2020-06-11T18:58:00Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttesterSlashingValidatorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.ACCEPT;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.IGNORE;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.REJECT;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.operationvalidators.AttesterSlashingStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.datastructures.util.MockStartValidatorKeyPairFactory;\n+import tech.pegasys.teku.statetransition.BeaconChainUtil;\n+import tech.pegasys.teku.storage.client.MemoryOnlyRecentChainData;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class AttesterSlashingValidatorTest {\n+  private static final List<BLSKeyPair> VALIDATOR_KEYS =\n+      new MockStartValidatorKeyPairFactory().generateKeyPairs(0, 25);\n+  private DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private RecentChainData recentChainData;\n+  private BeaconChainUtil beaconChainUtil;\n+  private AttesterSlashingValidator attesterSlashingValidator;\n+  private AttesterSlashingStateTransitionValidator stateTransitionValidator;\n+\n+  @BeforeEach\n+  void beforeEach() {\n+    recentChainData = MemoryOnlyRecentChainData.create(new EventBus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c27594fc07f08acec34e1b2136a58ee6867a2d41", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/c27594fc07f08acec34e1b2136a58ee6867a2d41", "committedDate": "2020-06-11T19:31:36Z", "message": "Use memoization to retrieve the intersecting indices"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6512ed1c33b1f5ec4adec65511cee6af542322c6", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/6512ed1c33b1f5ec4adec65511cee6af542322c6", "committedDate": "2020-06-11T19:35:30Z", "message": "Remove unnecessary block imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e5bdd0cdc944cd99e5e5da3a531160c4b61b31c", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/6e5bdd0cdc944cd99e5e5da3a531160c4b61b31c", "committedDate": "2020-06-11T19:56:28Z", "message": "Pass slahed indices list as reference, mock best state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07e2461c5be0d81f2e13e02a0edfa63f311ea5df", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/07e2461c5be0d81f2e13e02a0edfa63f311ea5df", "committedDate": "2020-06-11T19:57:05Z", "message": "Remove redundant objects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "589ed3663b1e4195162f9071a6973b16fd71f9b3", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/589ed3663b1e4195162f9071a6973b16fd71f9b3", "committedDate": "2020-06-11T20:00:48Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8af187b718e5a6a81a9e286f1d64c73121aeb275", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/8af187b718e5a6a81a9e286f1d64c73121aeb275", "committedDate": "2020-06-12T14:33:29Z", "message": "Add sos-ignore label to extra variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6c1d0492c1088ce2fc1d0c13dd27af57b51c84f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/f6c1d0492c1088ce2fc1d0c13dd27af57b51c84f", "committedDate": "2020-06-12T14:34:44Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6148e373d161b6a9d5f0a0238106f5ae1f79cd4b", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/6148e373d161b6a9d5f0a0238106f5ae1f79cd4b", "committedDate": "2020-06-12T15:01:22Z", "message": "Merge branch 'master' into attesterSlashingNetworkLayerValidator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MzMzMDE0", "url": "https://github.com/ConsenSys/teku/pull/2129#pullrequestreview-429333014", "createdAt": "2020-06-11T22:21:40Z", "commit": {"oid": "589ed3663b1e4195162f9071a6973b16fd71f9b3"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjoyMTo0MFrOGiwvNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjoyMTo0MFrOGiwvNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwMzI4Nw==", "bodyText": "Shouldn't we actually construct a valid slashing here?", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439103287", "createdAt": "2020-06-11T22:21:40Z", "author": {"login": "mbaxter"}, "path": "ethereum/datastructures/src/testFixtures/java/tech/pegasys/teku/datastructures/util/DataStructureUtil.java", "diffHunk": "@@ -213,7 +213,8 @@ public PendingAttestation randomPendingAttestation() {\n   }\n \n   public AttesterSlashing randomAttesterSlashing() {\n-    return new AttesterSlashing(randomIndexedAttestation(), randomIndexedAttestation());\n+    IndexedAttestation attestation = randomIndexedAttestation();\n+    return new AttesterSlashing(attestation, attestation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "589ed3663b1e4195162f9071a6973b16fd71f9b3"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d78093e681cf5c4239f19f2ecba3bf6abca7bfd3", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/d78093e681cf5c4239f19f2ecba3bf6abca7bfd3", "committedDate": "2020-06-12T16:42:11Z", "message": "Run spotless"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3908, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}