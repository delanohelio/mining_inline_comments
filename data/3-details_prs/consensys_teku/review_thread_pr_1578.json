{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyOTA2ODA2", "number": 1578, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo0Mzo1MFrODxb-_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo0ODozMVrODxcCmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTY1MzEwOnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/artemis/api/schema/IndexedAttestation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo0Mzo1MFrOGE6IfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo1NTozNFrOGE6VWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5OTkzMg==", "bodyText": "we could potentially use the defined constants when creating a SSZList since at this point we can identify which one is appropriate\nConstants.MAX_VALIDATORS_PER_COMMITTEE appears to be the best max size in this case. not sure if @ajsutton has a preference re. using the current size, or the defined constants.", "url": "https://github.com/ConsenSys/teku/pull/1578#discussion_r407799932", "createdAt": "2020-04-14T00:43:50Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/api/schema/IndexedAttestation.java", "diffHunk": "@@ -29,4 +30,12 @@ public IndexedAttestation(\n     this.data = new AttestationData(indexedAttestation.getData());\n     this.signature = new BLSSignature(indexedAttestation.getSignature());\n   }\n+\n+  public tech.pegasys.artemis.datastructures.operations.IndexedAttestation\n+      asInternalIndexedAttestation() {\n+    return new tech.pegasys.artemis.datastructures.operations.IndexedAttestation(\n+        SSZList.createMutable(attesting_indices, attesting_indices.size(), UnsignedLong.class),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8c6b08a6b4be300aa6c3d623979f20fafac092"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMzIyNA==", "bodyText": "The only function that max size provides is to specify an upper bound on the size of list you have to read in - thus preventing DOS attacks where you get sent stupidly large data.\nSo the ideal case is to use the correct max size per the spec and enforce that when reading the data.  We'll need to do that kind of protection if we ever intend to be able to make these APIs available publicly.\nBut otherwise it doesn't really matter.  It's probably safer to use the spec defined max size whenever possible in case some function downstream needs to add to the list (e.g. if we deserialise a state and then process slots it might add a new validator as part of epoch processing).  If you use current size in that case the operation will fail because the max size will be exceeded.", "url": "https://github.com/ConsenSys/teku/pull/1578#discussion_r407803224", "createdAt": "2020-04-14T00:55:34Z", "author": {"login": "ajsutton"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/api/schema/IndexedAttestation.java", "diffHunk": "@@ -29,4 +30,12 @@ public IndexedAttestation(\n     this.data = new AttestationData(indexedAttestation.getData());\n     this.signature = new BLSSignature(indexedAttestation.getSignature());\n   }\n+\n+  public tech.pegasys.artemis.datastructures.operations.IndexedAttestation\n+      asInternalIndexedAttestation() {\n+    return new tech.pegasys.artemis.datastructures.operations.IndexedAttestation(\n+        SSZList.createMutable(attesting_indices, attesting_indices.size(), UnsignedLong.class),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc5OTkzMg=="}, "originalCommit": {"oid": "1b8c6b08a6b4be300aa6c3d623979f20fafac092"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTY2MjM0OnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/artemis/api/schema/BeaconBlockBody.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo0ODozMVrOGE6Nqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo0ODozMVrOGE6Nqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMTI1OQ==", "bodyText": "If we decide to use constants, blocks/BeaconBlockBody has all the constants in line comments with each list.", "url": "https://github.com/ConsenSys/teku/pull/1578#discussion_r407801259", "createdAt": "2020-04-14T00:48:31Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/api/schema/BeaconBlockBody.java", "diffHunk": "@@ -69,4 +70,32 @@ public BeaconBlockBody(tech.pegasys.artemis.datastructures.blocks.BeaconBlockBod\n             .map(SignedVoluntaryExit::new)\n             .collect(Collectors.toList());\n   }\n+\n+  public tech.pegasys.artemis.datastructures.blocks.BeaconBlockBody asInternalBeaconBlockBody() {\n+    return new tech.pegasys.artemis.datastructures.blocks.BeaconBlockBody(\n+        randao_reveal.asInternalBLSSignature(),\n+        new tech.pegasys.artemis.datastructures.blocks.Eth1Data(\n+            eth1_data.deposit_root, eth1_data.deposit_count, eth1_data.block_hash),\n+        graffiti,\n+        SSZList.createMutable(\n+            proposer_slashings.stream().map(ProposerSlashing::asInternalProposerSlashing),\n+            proposer_slashings.size(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b8c6b08a6b4be300aa6c3d623979f20fafac092"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1607, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}