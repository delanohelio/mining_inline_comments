{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNzU5MjIw", "number": 1461, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTowODoxMlrODqpQhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDozNjo0OVrODrD7CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQyNzU2OnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/ExternalMessageSignerService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTowODoxMlrOF6hJiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNToxNDo0OFrOF6hPRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNDg0Mw==", "bodyText": "nit: final in catch block", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r396904843", "createdAt": "2020-03-24T05:08:12Z", "author": {"login": "usmansaleem"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/ExternalMessageSignerService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.net.URL;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.time.Duration;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.datastructures.validator.MessageSignerService;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.bls.BLSSignature;\n+\n+public class ExternalMessageSignerService implements MessageSignerService {\n+  private static final ObjectMapper MAPPER = new ObjectMapper();\n+  private URL signingServiceUrl;\n+  private BLSPublicKey blsPublicKey;\n+  private int timeoutMs;\n+\n+  public ExternalMessageSignerService(\n+      final URL signingServiceUrl, final BLSPublicKey blsPublicKey, final int timeoutMs) {\n+    this.signingServiceUrl = signingServiceUrl;\n+    this.blsPublicKey = blsPublicKey;\n+    this.timeoutMs = timeoutMs;\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signBlock(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/block\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signAttestation(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/attestation\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signRandaoReveal(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/randao_reveal\");\n+  }\n+\n+  private SafeFuture<BLSSignature> sign(final Bytes signingRoot, final String path) {\n+    try {\n+      final String requestBody = createSigningRequest(signingRoot);\n+      final HttpRequest request =\n+          HttpRequest.newBuilder()\n+              .uri(signingServiceUrl.toURI().resolve(path))\n+              .timeout(Duration.ofMillis(timeoutMs))\n+              .POST(BodyPublishers.ofString(requestBody))\n+              .build();\n+      return SafeFuture.of(\n+          HttpClient.newHttpClient()\n+              .sendAsync(request, BodyHandlers.ofString())\n+              .handleAsync(this::getBlsSignature));\n+    } catch (ExternalSignerException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d721782815e6e65bc70333d078bca2b2129298"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNjMxMA==", "bodyText": "done", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r396906310", "createdAt": "2020-03-24T05:14:48Z", "author": {"login": "jframe"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/ExternalMessageSignerService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.net.URL;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.time.Duration;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.datastructures.validator.MessageSignerService;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.bls.BLSSignature;\n+\n+public class ExternalMessageSignerService implements MessageSignerService {\n+  private static final ObjectMapper MAPPER = new ObjectMapper();\n+  private URL signingServiceUrl;\n+  private BLSPublicKey blsPublicKey;\n+  private int timeoutMs;\n+\n+  public ExternalMessageSignerService(\n+      final URL signingServiceUrl, final BLSPublicKey blsPublicKey, final int timeoutMs) {\n+    this.signingServiceUrl = signingServiceUrl;\n+    this.blsPublicKey = blsPublicKey;\n+    this.timeoutMs = timeoutMs;\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signBlock(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/block\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signAttestation(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/attestation\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signRandaoReveal(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/randao_reveal\");\n+  }\n+\n+  private SafeFuture<BLSSignature> sign(final Bytes signingRoot, final String path) {\n+    try {\n+      final String requestBody = createSigningRequest(signingRoot);\n+      final HttpRequest request =\n+          HttpRequest.newBuilder()\n+              .uri(signingServiceUrl.toURI().resolve(path))\n+              .timeout(Duration.ofMillis(timeoutMs))\n+              .POST(BodyPublishers.ofString(requestBody))\n+              .build();\n+      return SafeFuture.of(\n+          HttpClient.newHttpClient()\n+              .sendAsync(request, BodyHandlers.ofString())\n+              .handleAsync(this::getBlsSignature));\n+    } catch (ExternalSignerException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNDg0Mw=="}, "originalCommit": {"oid": "19d721782815e6e65bc70333d078bca2b2129298"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQzNTAxOnYy", "diffSide": "RIGHT", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNToxMzowMVrOF6hNyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNToyOToxMFrOF6hc1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNTkyOQ==", "bodyText": "we only support one external signer?", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r396905929", "createdAt": "2020-03-24T05:13:01Z", "author": {"login": "usmansaleem"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorLoader.java", "diffHunk": "@@ -49,6 +51,29 @@\n     return validators;\n   }\n \n+  private static Map<BLSPublicKey, ValidatorInfo> createLocalSignerValidatorInfo(\n+      final ArtemisConfiguration config) {\n+    return loadValidatorKeys(config).stream()\n+        .collect(\n+            Collectors.toMap(\n+                BLSKeyPair::getPublicKey,\n+                blsKeyPair -> new ValidatorInfo(new LocalMessageSignerService(blsKeyPair))));\n+  }\n+\n+  private static Map<BLSPublicKey, ValidatorInfo> createExternalSignerValidatorInfo(\n+      final ArtemisConfiguration config) {\n+    return config.getValidatorExternalSigningPublicKeys().stream()\n+        .collect(\n+            Collectors.toMap(\n+                identity(),\n+                publicKey ->\n+                    new ValidatorInfo(\n+                        new ExternalMessageSignerService(\n+                            config.getValidatorExternalSigningUrl(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d721782815e6e65bc70333d078bca2b2129298"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNjc0MQ==", "bodyText": "Yes at the moment. It wouldn't be too difficult to add support for multiple external signers though. The config would be become little more complex though. Do you think we should support multiple external signers?", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r396906741", "createdAt": "2020-03-24T05:16:55Z", "author": {"login": "jframe"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorLoader.java", "diffHunk": "@@ -49,6 +51,29 @@\n     return validators;\n   }\n \n+  private static Map<BLSPublicKey, ValidatorInfo> createLocalSignerValidatorInfo(\n+      final ArtemisConfiguration config) {\n+    return loadValidatorKeys(config).stream()\n+        .collect(\n+            Collectors.toMap(\n+                BLSKeyPair::getPublicKey,\n+                blsKeyPair -> new ValidatorInfo(new LocalMessageSignerService(blsKeyPair))));\n+  }\n+\n+  private static Map<BLSPublicKey, ValidatorInfo> createExternalSignerValidatorInfo(\n+      final ArtemisConfiguration config) {\n+    return config.getValidatorExternalSigningPublicKeys().stream()\n+        .collect(\n+            Collectors.toMap(\n+                identity(),\n+                publicKey ->\n+                    new ValidatorInfo(\n+                        new ExternalMessageSignerService(\n+                            config.getValidatorExternalSigningUrl(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNTkyOQ=="}, "originalCommit": {"oid": "19d721782815e6e65bc70333d078bca2b2129298"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwOTc4MA==", "bodyText": "Thinking about this more, I don't think we need to support multiple external signers at the moment. And more than likely we will probably share the same external signer for several Teku instances. Certainly can quite easily add this in the future if it becomes apparent we do need this.", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r396909780", "createdAt": "2020-03-24T05:29:10Z", "author": {"login": "jframe"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorLoader.java", "diffHunk": "@@ -49,6 +51,29 @@\n     return validators;\n   }\n \n+  private static Map<BLSPublicKey, ValidatorInfo> createLocalSignerValidatorInfo(\n+      final ArtemisConfiguration config) {\n+    return loadValidatorKeys(config).stream()\n+        .collect(\n+            Collectors.toMap(\n+                BLSKeyPair::getPublicKey,\n+                blsKeyPair -> new ValidatorInfo(new LocalMessageSignerService(blsKeyPair))));\n+  }\n+\n+  private static Map<BLSPublicKey, ValidatorInfo> createExternalSignerValidatorInfo(\n+      final ArtemisConfiguration config) {\n+    return config.getValidatorExternalSigningPublicKeys().stream()\n+        .collect(\n+            Collectors.toMap(\n+                identity(),\n+                publicKey ->\n+                    new ValidatorInfo(\n+                        new ExternalMessageSignerService(\n+                            config.getValidatorExternalSigningUrl(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNTkyOQ=="}, "originalCommit": {"oid": "19d721782815e6e65bc70333d078bca2b2129298"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mzk3OTc1OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/artemis/util/config/ArtemisConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMTo0ODowMVrOF7EYAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMzo1OTo1OVrOF7LaaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4MTk4Ng==", "bodyText": "Do we need to manage the 48 vs 32 byte keys here?", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r397481986", "createdAt": "2020-03-24T21:48:01Z", "author": {"login": "ajsutton"}, "path": "util/src/main/java/tech/pegasys/artemis/util/config/ArtemisConfiguration.java", "diffHunk": "@@ -335,6 +348,32 @@ public String getValidatorsKeyFile() {\n     return list;\n   }\n \n+  public List<BLSPublicKey> getValidatorExternalSigningPublicKeys() {\n+    final List<String> publicKeys = config.getListOfString(\"validator.externalSignerPublicKeys\");\n+    if (publicKeys == null) {\n+      return Collections.emptyList();\n+    }\n+    try {\n+      return publicKeys.stream()\n+          .map(key -> BLSPublicKey.fromBytes(Bytes.fromHexString(key)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d721782815e6e65bc70333d078bca2b2129298"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NzI4OA==", "bodyText": "nope, public keys are 48 bytes", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r397597288", "createdAt": "2020-03-25T03:59:59Z", "author": {"login": "jframe"}, "path": "util/src/main/java/tech/pegasys/artemis/util/config/ArtemisConfiguration.java", "diffHunk": "@@ -335,6 +348,32 @@ public String getValidatorsKeyFile() {\n     return list;\n   }\n \n+  public List<BLSPublicKey> getValidatorExternalSigningPublicKeys() {\n+    final List<String> publicKeys = config.getListOfString(\"validator.externalSignerPublicKeys\");\n+    if (publicKeys == null) {\n+      return Collections.emptyList();\n+    }\n+    try {\n+      return publicKeys.stream()\n+          .map(key -> BLSPublicKey.fromBytes(Bytes.fromHexString(key)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4MTk4Ng=="}, "originalCommit": {"oid": "19d721782815e6e65bc70333d078bca2b2129298"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDAzMzQ5OnYy", "diffSide": "RIGHT", "path": "util/src/test/java/tech/pegasys/artemis/util/config/ArtemisConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjowNjowNFrOF7E4_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowMDozMFrOF7LaxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MDQyOQ==", "bodyText": "These don't look like valid BLS keys - at 48 bytes long the start should be all 0's.  Note that BLSPublicKey doesn't actually parse the key until it's required (there are times the deposit contract can give us invalid keys). #1466 is dealing with the same issue so would be good to ensure we have a reusable BLSPublicKey.isValid method.", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r397490429", "createdAt": "2020-03-24T22:06:04Z", "author": {"login": "ajsutton"}, "path": "util/src/test/java/tech/pegasys/artemis/util/config/ArtemisConfigurationTest.java", "diffHunk": "@@ -258,4 +262,60 @@ void loggingFileNamePatternShouldDefault() {\n     final ArtemisConfiguration config = ArtemisConfiguration.fromString(\"\");\n     assertThat(config.getLoggingFileNamePattern()).isEqualTo(\"teku_%d{yyyy-MM-dd}.log\");\n   }\n+\n+  @Test\n+  void validatorExternalSignerPublicKeysCanBeSet() {\n+    final String publicKey1 =\n+        \"0xa99a76ed7796f7be22d5b7e85deeb7c5677e88e511e0b337618f8c4eb61349b4bf2d153f649f7b53359fe8b94a38e44c\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d721782815e6e65bc70333d078bca2b2129298"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NzM4MA==", "bodyText": "Public keys are 48 bytes so this doesn't need changing", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r397597380", "createdAt": "2020-03-25T04:00:30Z", "author": {"login": "jframe"}, "path": "util/src/test/java/tech/pegasys/artemis/util/config/ArtemisConfigurationTest.java", "diffHunk": "@@ -258,4 +262,60 @@ void loggingFileNamePatternShouldDefault() {\n     final ArtemisConfiguration config = ArtemisConfiguration.fromString(\"\");\n     assertThat(config.getLoggingFileNamePattern()).isEqualTo(\"teku_%d{yyyy-MM-dd}.log\");\n   }\n+\n+  @Test\n+  void validatorExternalSignerPublicKeysCanBeSet() {\n+    final String publicKey1 =\n+        \"0xa99a76ed7796f7be22d5b7e85deeb7c5677e88e511e0b337618f8c4eb61349b4bf2d153f649f7b53359fe8b94a38e44c\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MDQyOQ=="}, "originalCommit": {"oid": "19d721782815e6e65bc70333d078bca2b2129298"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDAzNzIxOnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/ExternalMessageSignerService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjowNzoyNlrOF7E7SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo0NTo1OVrOF7F5ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MTAxNg==", "bodyText": "nit: Probably worth just taking the timeout as a duration in the constructor rather than converting on every call here. Makes it a more flexible API as well.", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r397491016", "createdAt": "2020-03-24T22:07:26Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/ExternalMessageSignerService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.net.URL;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.time.Duration;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.datastructures.validator.MessageSignerService;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.bls.BLSSignature;\n+\n+public class ExternalMessageSignerService implements MessageSignerService {\n+  private static final ObjectMapper MAPPER = new ObjectMapper();\n+  private URL signingServiceUrl;\n+  private BLSPublicKey blsPublicKey;\n+  private int timeoutMs;\n+\n+  public ExternalMessageSignerService(\n+      final URL signingServiceUrl, final BLSPublicKey blsPublicKey, final int timeoutMs) {\n+    this.signingServiceUrl = signingServiceUrl;\n+    this.blsPublicKey = blsPublicKey;\n+    this.timeoutMs = timeoutMs;\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signBlock(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/block\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signAttestation(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/attestation\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signRandaoReveal(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/randao_reveal\");\n+  }\n+\n+  private SafeFuture<BLSSignature> sign(final Bytes signingRoot, final String path) {\n+    try {\n+      final String requestBody = createSigningRequest(signingRoot);\n+      final HttpRequest request =\n+          HttpRequest.newBuilder()\n+              .uri(signingServiceUrl.toURI().resolve(path))\n+              .timeout(Duration.ofMillis(timeoutMs))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d721782815e6e65bc70333d078bca2b2129298"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNzAwMg==", "bodyText": "done", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r397507002", "createdAt": "2020-03-24T22:45:59Z", "author": {"login": "jframe"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/ExternalMessageSignerService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.net.URL;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.time.Duration;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.datastructures.validator.MessageSignerService;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.bls.BLSSignature;\n+\n+public class ExternalMessageSignerService implements MessageSignerService {\n+  private static final ObjectMapper MAPPER = new ObjectMapper();\n+  private URL signingServiceUrl;\n+  private BLSPublicKey blsPublicKey;\n+  private int timeoutMs;\n+\n+  public ExternalMessageSignerService(\n+      final URL signingServiceUrl, final BLSPublicKey blsPublicKey, final int timeoutMs) {\n+    this.signingServiceUrl = signingServiceUrl;\n+    this.blsPublicKey = blsPublicKey;\n+    this.timeoutMs = timeoutMs;\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signBlock(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/block\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signAttestation(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/attestation\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signRandaoReveal(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/randao_reveal\");\n+  }\n+\n+  private SafeFuture<BLSSignature> sign(final Bytes signingRoot, final String path) {\n+    try {\n+      final String requestBody = createSigningRequest(signingRoot);\n+      final HttpRequest request =\n+          HttpRequest.newBuilder()\n+              .uri(signingServiceUrl.toURI().resolve(path))\n+              .timeout(Duration.ofMillis(timeoutMs))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MTAxNg=="}, "originalCommit": {"oid": "19d721782815e6e65bc70333d078bca2b2129298"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDA0MTIzOnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/ExternalMessageSignerService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjowODo0OVrOF7E9qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowNDo0OVrOF7LeQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MTYyNA==", "bodyText": "This will miss any Throwable instances that don't extend Exception.  Rather than a try/catch, it's probably better to use SafeFuture.of(Supplier<CompletionStage>).", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r397491624", "createdAt": "2020-03-24T22:08:49Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/ExternalMessageSignerService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.net.URL;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.time.Duration;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.datastructures.validator.MessageSignerService;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.bls.BLSSignature;\n+\n+public class ExternalMessageSignerService implements MessageSignerService {\n+  private static final ObjectMapper MAPPER = new ObjectMapper();\n+  private URL signingServiceUrl;\n+  private BLSPublicKey blsPublicKey;\n+  private int timeoutMs;\n+\n+  public ExternalMessageSignerService(\n+      final URL signingServiceUrl, final BLSPublicKey blsPublicKey, final int timeoutMs) {\n+    this.signingServiceUrl = signingServiceUrl;\n+    this.blsPublicKey = blsPublicKey;\n+    this.timeoutMs = timeoutMs;\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signBlock(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/block\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signAttestation(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/attestation\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signRandaoReveal(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/randao_reveal\");\n+  }\n+\n+  private SafeFuture<BLSSignature> sign(final Bytes signingRoot, final String path) {\n+    try {\n+      final String requestBody = createSigningRequest(signingRoot);\n+      final HttpRequest request =\n+          HttpRequest.newBuilder()\n+              .uri(signingServiceUrl.toURI().resolve(path))\n+              .timeout(Duration.ofMillis(timeoutMs))\n+              .POST(BodyPublishers.ofString(requestBody))\n+              .build();\n+      return SafeFuture.of(\n+          HttpClient.newHttpClient()\n+              .sendAsync(request, BodyHandlers.ofString())\n+              .handleAsync(this::getBlsSignature));\n+    } catch (ExternalSignerException e) {\n+      return SafeFuture.failedFuture(e);\n+    } catch (Exception e) {\n+      return SafeFuture.failedFuture(\n+          new ExternalSignerException(\"External signer failed to sign\", e));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d721782815e6e65bc70333d078bca2b2129298"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5ODI3Mg==", "bodyText": "Added a SafeFuture ofComposed(final ExceptionThrowingSupplier<CompletionStage> futureSupplier) and have used that to get rid of the try/catch", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r397598272", "createdAt": "2020-03-25T04:04:49Z", "author": {"login": "jframe"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/ExternalMessageSignerService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.net.URL;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.time.Duration;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.datastructures.validator.MessageSignerService;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.bls.BLSSignature;\n+\n+public class ExternalMessageSignerService implements MessageSignerService {\n+  private static final ObjectMapper MAPPER = new ObjectMapper();\n+  private URL signingServiceUrl;\n+  private BLSPublicKey blsPublicKey;\n+  private int timeoutMs;\n+\n+  public ExternalMessageSignerService(\n+      final URL signingServiceUrl, final BLSPublicKey blsPublicKey, final int timeoutMs) {\n+    this.signingServiceUrl = signingServiceUrl;\n+    this.blsPublicKey = blsPublicKey;\n+    this.timeoutMs = timeoutMs;\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signBlock(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/block\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signAttestation(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/attestation\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signRandaoReveal(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/randao_reveal\");\n+  }\n+\n+  private SafeFuture<BLSSignature> sign(final Bytes signingRoot, final String path) {\n+    try {\n+      final String requestBody = createSigningRequest(signingRoot);\n+      final HttpRequest request =\n+          HttpRequest.newBuilder()\n+              .uri(signingServiceUrl.toURI().resolve(path))\n+              .timeout(Duration.ofMillis(timeoutMs))\n+              .POST(BodyPublishers.ofString(requestBody))\n+              .build();\n+      return SafeFuture.of(\n+          HttpClient.newHttpClient()\n+              .sendAsync(request, BodyHandlers.ofString())\n+              .handleAsync(this::getBlsSignature));\n+    } catch (ExternalSignerException e) {\n+      return SafeFuture.failedFuture(e);\n+    } catch (Exception e) {\n+      return SafeFuture.failedFuture(\n+          new ExternalSignerException(\"External signer failed to sign\", e));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MTYyNA=="}, "originalCommit": {"oid": "19d721782815e6e65bc70333d078bca2b2129298"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDA0ODY0OnYy", "diffSide": "RIGHT", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxMTozM1rOF7FCQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowMTo1MVrOF7Lb2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MjgwMg==", "bodyText": "It seems potentially confusing that we toggle between the two modes. We could just load both local and external validator info and merge the two which would be more predictable.  Not likely to be a real need of users, just removes one potential gotcha.  I'd prefer the external signer over the local one should a public key appear in both (the external may have extra slashing protection).", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r397492802", "createdAt": "2020-03-24T22:11:33Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorLoader.java", "diffHunk": "@@ -33,12 +36,11 @@\n   static Map<BLSPublicKey, ValidatorInfo> initializeValidators(ArtemisConfiguration config) {\n     // Get validator connection info and create a new ValidatorInfo object and put it into the\n     // Validators map\n+\n     final Map<BLSPublicKey, ValidatorInfo> validators =\n-        loadValidatorKeys(config).stream()\n-            .collect(\n-                Collectors.toMap(\n-                    BLSKeyPair::getPublicKey,\n-                    blsKeyPair -> new ValidatorInfo(new LocalMessageSignerService(blsKeyPair))));\n+        config.getValidatorExternalSigningPublicKeys().isEmpty()\n+            ? createLocalSignerValidatorInfo(config)\n+            : createExternalSignerValidatorInfo(config);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d721782815e6e65bc70333d078bca2b2129298"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NzY1OQ==", "bodyText": "done", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r397597659", "createdAt": "2020-03-25T04:01:51Z", "author": {"login": "jframe"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorLoader.java", "diffHunk": "@@ -33,12 +36,11 @@\n   static Map<BLSPublicKey, ValidatorInfo> initializeValidators(ArtemisConfiguration config) {\n     // Get validator connection info and create a new ValidatorInfo object and put it into the\n     // Validators map\n+\n     final Map<BLSPublicKey, ValidatorInfo> validators =\n-        loadValidatorKeys(config).stream()\n-            .collect(\n-                Collectors.toMap(\n-                    BLSKeyPair::getPublicKey,\n-                    blsKeyPair -> new ValidatorInfo(new LocalMessageSignerService(blsKeyPair))));\n+        config.getValidatorExternalSigningPublicKeys().isEmpty()\n+            ? createLocalSignerValidatorInfo(config)\n+            : createExternalSignerValidatorInfo(config);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MjgwMg=="}, "originalCommit": {"oid": "19d721782815e6e65bc70333d078bca2b2129298"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDA2ODkyOnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/ExternalMessageSignerService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjoxODoyNVrOF7FODQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowMToyMFrOF7LbcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5NTgyMQ==", "bodyText": "It would be really useful if the signing API put the public key in the URL, not in the post data.  Load balancers can then easily split the signing load across multiple signers etc - they are dramatically more flexible with URLs than with POST data.", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r397495821", "createdAt": "2020-03-24T22:18:25Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/ExternalMessageSignerService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.net.URL;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.time.Duration;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.datastructures.validator.MessageSignerService;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.bls.BLSSignature;\n+\n+public class ExternalMessageSignerService implements MessageSignerService {\n+  private static final ObjectMapper MAPPER = new ObjectMapper();\n+  private URL signingServiceUrl;\n+  private BLSPublicKey blsPublicKey;\n+  private int timeoutMs;\n+\n+  public ExternalMessageSignerService(\n+      final URL signingServiceUrl, final BLSPublicKey blsPublicKey, final int timeoutMs) {\n+    this.signingServiceUrl = signingServiceUrl;\n+    this.blsPublicKey = blsPublicKey;\n+    this.timeoutMs = timeoutMs;\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signBlock(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/block\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signAttestation(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/attestation\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signRandaoReveal(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/randao_reveal\");\n+  }\n+\n+  private SafeFuture<BLSSignature> sign(final Bytes signingRoot, final String path) {\n+    try {\n+      final String requestBody = createSigningRequest(signingRoot);\n+      final HttpRequest request =\n+          HttpRequest.newBuilder()\n+              .uri(signingServiceUrl.toURI().resolve(path))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d721782815e6e65bc70333d078bca2b2129298"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5NzU1Mg==", "bodyText": "This will be done in another PR, see issue ConsenSys/web3signer#49", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r397597552", "createdAt": "2020-03-25T04:01:20Z", "author": {"login": "jframe"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/ExternalMessageSignerService.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.net.URL;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.time.Duration;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.datastructures.validator.MessageSignerService;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.bls.BLSSignature;\n+\n+public class ExternalMessageSignerService implements MessageSignerService {\n+  private static final ObjectMapper MAPPER = new ObjectMapper();\n+  private URL signingServiceUrl;\n+  private BLSPublicKey blsPublicKey;\n+  private int timeoutMs;\n+\n+  public ExternalMessageSignerService(\n+      final URL signingServiceUrl, final BLSPublicKey blsPublicKey, final int timeoutMs) {\n+    this.signingServiceUrl = signingServiceUrl;\n+    this.blsPublicKey = blsPublicKey;\n+    this.timeoutMs = timeoutMs;\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signBlock(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/block\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signAttestation(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/attestation\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signRandaoReveal(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/randao_reveal\");\n+  }\n+\n+  private SafeFuture<BLSSignature> sign(final Bytes signingRoot, final String path) {\n+    try {\n+      final String requestBody = createSigningRequest(signingRoot);\n+      final HttpRequest request =\n+          HttpRequest.newBuilder()\n+              .uri(signingServiceUrl.toURI().resolve(path))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5NTgyMQ=="}, "originalCommit": {"oid": "19d721782815e6e65bc70333d078bca2b2129298"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDc4NjI0OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/artemis/util/async/SafeFuture.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDoyOTozOFrOF7LzoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDozNToxM1rOF7L4Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwMzc0NQ==", "bodyText": "nit: final", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r397603745", "createdAt": "2020-03-25T04:29:38Z", "author": {"login": "usmansaleem"}, "path": "util/src/main/java/tech/pegasys/artemis/util/async/SafeFuture.java", "diffHunk": "@@ -67,15 +67,24 @@ public static void reportExceptions(final CompletionStage<?> future) {\n   public static <U> SafeFuture<U> of(final Supplier<CompletionStage<U>> futureSupplier) {\n     try {\n       return SafeFuture.of(futureSupplier.get());\n-    } catch (Exception e) {\n+    } catch (Throwable e) {\n       return SafeFuture.failedFuture(e);\n     }\n   }\n \n   public static <U> SafeFuture<U> of(final ExceptionThrowingSupplier<U> supplier) {\n     try {\n       return SafeFuture.completedFuture(supplier.get());\n-    } catch (final Exception e) {\n+    } catch (final Throwable e) {\n+      return SafeFuture.failedFuture(e);\n+    }\n+  }\n+\n+  public static <U> SafeFuture<U> ofComposed(\n+      final ExceptionThrowingSupplier<CompletionStage<U>> futureSupplier) {\n+    try {\n+      return SafeFuture.of(futureSupplier.get());\n+    } catch (Throwable e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ea126ef4a31f0b852d495db28d8aa124835209"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwNDg2Nw==", "bodyText": "done", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r397604867", "createdAt": "2020-03-25T04:35:13Z", "author": {"login": "jframe"}, "path": "util/src/main/java/tech/pegasys/artemis/util/async/SafeFuture.java", "diffHunk": "@@ -67,15 +67,24 @@ public static void reportExceptions(final CompletionStage<?> future) {\n   public static <U> SafeFuture<U> of(final Supplier<CompletionStage<U>> futureSupplier) {\n     try {\n       return SafeFuture.of(futureSupplier.get());\n-    } catch (Exception e) {\n+    } catch (Throwable e) {\n       return SafeFuture.failedFuture(e);\n     }\n   }\n \n   public static <U> SafeFuture<U> of(final ExceptionThrowingSupplier<U> supplier) {\n     try {\n       return SafeFuture.completedFuture(supplier.get());\n-    } catch (final Exception e) {\n+    } catch (final Throwable e) {\n+      return SafeFuture.failedFuture(e);\n+    }\n+  }\n+\n+  public static <U> SafeFuture<U> ofComposed(\n+      final ExceptionThrowingSupplier<CompletionStage<U>> futureSupplier) {\n+    try {\n+      return SafeFuture.of(futureSupplier.get());\n+    } catch (Throwable e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwMzc0NQ=="}, "originalCommit": {"oid": "13ea126ef4a31f0b852d495db28d8aa124835209"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDc5NDI3OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/artemis/util/async/SafeFuture.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDozNToyNVrOF7L4NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDozNToyNVrOF7L4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwNDkxNg==", "bodyText": "nit: I think we can get rid of this one and just have the ExceptionThrowingSupplier versions.", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r397604916", "createdAt": "2020-03-25T04:35:25Z", "author": {"login": "ajsutton"}, "path": "util/src/main/java/tech/pegasys/artemis/util/async/SafeFuture.java", "diffHunk": "@@ -67,15 +67,24 @@ public static void reportExceptions(final CompletionStage<?> future) {\n   public static <U> SafeFuture<U> of(final Supplier<CompletionStage<U>> futureSupplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ea126ef4a31f0b852d495db28d8aa124835209"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDc5NjI1OnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/ExternalMessageSignerService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDozNjo0OVrOF7L5WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzowNzowNVrOF7ORBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwNTIwOQ==", "bodyText": "nit: I think you can remove this SafeFuture.of now because you can return any type of CompletionStage.", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r397605209", "createdAt": "2020-03-25T04:36:49Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/ExternalMessageSignerService.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.net.URL;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.time.Duration;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.datastructures.validator.MessageSignerService;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.bls.BLSSignature;\n+\n+public class ExternalMessageSignerService implements MessageSignerService {\n+  private static final ObjectMapper MAPPER = new ObjectMapper();\n+  private final URL signingServiceUrl;\n+  private final BLSPublicKey blsPublicKey;\n+  private final Duration timeout;\n+\n+  public ExternalMessageSignerService(\n+      final URL signingServiceUrl, final BLSPublicKey blsPublicKey, final Duration timeout) {\n+    this.signingServiceUrl = signingServiceUrl;\n+    this.blsPublicKey = blsPublicKey;\n+    this.timeout = timeout;\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signBlock(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/block\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signAttestation(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/attestation\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signRandaoReveal(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/randao_reveal\");\n+  }\n+\n+  private SafeFuture<BLSSignature> sign(final Bytes signingRoot, final String path) {\n+    return SafeFuture.ofComposed(\n+        () -> {\n+          final String requestBody = createSigningRequest(signingRoot);\n+          final HttpRequest request =\n+              HttpRequest.newBuilder()\n+                  .uri(signingServiceUrl.toURI().resolve(path))\n+                  .timeout(timeout)\n+                  .POST(BodyPublishers.ofString(requestBody))\n+                  .build();\n+          return SafeFuture.of(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ea126ef4a31f0b852d495db28d8aa124835209"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0NDAzNw==", "bodyText": "done", "url": "https://github.com/ConsenSys/teku/pull/1461#discussion_r397644037", "createdAt": "2020-03-25T07:07:05Z", "author": {"login": "jframe"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/ExternalMessageSignerService.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.net.URL;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.time.Duration;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.datastructures.validator.MessageSignerService;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.bls.BLSSignature;\n+\n+public class ExternalMessageSignerService implements MessageSignerService {\n+  private static final ObjectMapper MAPPER = new ObjectMapper();\n+  private final URL signingServiceUrl;\n+  private final BLSPublicKey blsPublicKey;\n+  private final Duration timeout;\n+\n+  public ExternalMessageSignerService(\n+      final URL signingServiceUrl, final BLSPublicKey blsPublicKey, final Duration timeout) {\n+    this.signingServiceUrl = signingServiceUrl;\n+    this.blsPublicKey = blsPublicKey;\n+    this.timeout = timeout;\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signBlock(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/block\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signAttestation(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/attestation\");\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> signRandaoReveal(final Bytes signingRoot) {\n+    return sign(signingRoot, \"/signer/randao_reveal\");\n+  }\n+\n+  private SafeFuture<BLSSignature> sign(final Bytes signingRoot, final String path) {\n+    return SafeFuture.ofComposed(\n+        () -> {\n+          final String requestBody = createSigningRequest(signingRoot);\n+          final HttpRequest request =\n+              HttpRequest.newBuilder()\n+                  .uri(signingServiceUrl.toURI().resolve(path))\n+                  .timeout(timeout)\n+                  .POST(BodyPublishers.ofString(requestBody))\n+                  .build();\n+          return SafeFuture.of(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwNTIwOQ=="}, "originalCommit": {"oid": "13ea126ef4a31f0b852d495db28d8aa124835209"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1724, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}