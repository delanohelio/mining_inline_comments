{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMDQxOTUz", "number": 1547, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTowOTozOFrODvm3EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNToxMTo1OVrODvm7kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjQ2MzUzOnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/duties/AggregationDuty.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTowOTozOFrOGCIS1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTozMzo1NlrOGCTAGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4NjIzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public SafeFuture<Void> aggregateCommittee(final CommitteeAggregator aggregators) {\n          \n          \n            \n              public SafeFuture<Void> aggregateCommittee(final CommitteeAggregator aggregator) {", "url": "https://github.com/ConsenSys/teku/pull/1547#discussion_r404886230", "createdAt": "2020-04-07T15:09:38Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/duties/AggregationDuty.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client.duties;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import tech.pegasys.artemis.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.artemis.datastructures.operations.Attestation;\n+import tech.pegasys.artemis.datastructures.operations.AttestationData;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.bls.BLSSignature;\n+import tech.pegasys.artemis.validator.api.ValidatorApiChannel;\n+\n+public class AggregationDuty implements Duty {\n+  private final ConcurrentMap<Integer, CommitteeAggregator> aggregatorsByCommitteeIndex =\n+      new ConcurrentHashMap<>();\n+  private final UnsignedLong slot;\n+  private final ValidatorApiChannel validatorApiChannel;\n+\n+  public AggregationDuty(final UnsignedLong slot, final ValidatorApiChannel validatorApiChannel) {\n+    this.slot = slot;\n+    this.validatorApiChannel = validatorApiChannel;\n+  }\n+\n+  public void addValidator(\n+      final int validatorIndex,\n+      final BLSSignature proof,\n+      final int attestationCommitteeIndex,\n+      final SafeFuture<Optional<Attestation>> unsignedAttestationFuture) {\n+    aggregatorsByCommitteeIndex.computeIfAbsent(\n+        attestationCommitteeIndex,\n+        __ ->\n+            new CommitteeAggregator(\n+                UnsignedLong.valueOf(validatorIndex), proof, unsignedAttestationFuture));\n+  }\n+\n+  @Override\n+  public SafeFuture<?> performDuty() {\n+    return SafeFuture.allOf(\n+        aggregatorsByCommitteeIndex.values().stream()\n+            .map(this::aggregateCommittee)\n+            .toArray(SafeFuture[]::new));\n+  }\n+\n+  public SafeFuture<Void> aggregateCommittee(final CommitteeAggregator aggregators) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2d4535770c71b1faa6cde92ed3834a9fbb053d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MTY1Ng==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1547#discussion_r405061656", "createdAt": "2020-04-07T19:33:56Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/duties/AggregationDuty.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client.duties;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import tech.pegasys.artemis.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.artemis.datastructures.operations.Attestation;\n+import tech.pegasys.artemis.datastructures.operations.AttestationData;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.bls.BLSSignature;\n+import tech.pegasys.artemis.validator.api.ValidatorApiChannel;\n+\n+public class AggregationDuty implements Duty {\n+  private final ConcurrentMap<Integer, CommitteeAggregator> aggregatorsByCommitteeIndex =\n+      new ConcurrentHashMap<>();\n+  private final UnsignedLong slot;\n+  private final ValidatorApiChannel validatorApiChannel;\n+\n+  public AggregationDuty(final UnsignedLong slot, final ValidatorApiChannel validatorApiChannel) {\n+    this.slot = slot;\n+    this.validatorApiChannel = validatorApiChannel;\n+  }\n+\n+  public void addValidator(\n+      final int validatorIndex,\n+      final BLSSignature proof,\n+      final int attestationCommitteeIndex,\n+      final SafeFuture<Optional<Attestation>> unsignedAttestationFuture) {\n+    aggregatorsByCommitteeIndex.computeIfAbsent(\n+        attestationCommitteeIndex,\n+        __ ->\n+            new CommitteeAggregator(\n+                UnsignedLong.valueOf(validatorIndex), proof, unsignedAttestationFuture));\n+  }\n+\n+  @Override\n+  public SafeFuture<?> performDuty() {\n+    return SafeFuture.allOf(\n+        aggregatorsByCommitteeIndex.values().stream()\n+            .map(this::aggregateCommittee)\n+            .toArray(SafeFuture[]::new));\n+  }\n+\n+  public SafeFuture<Void> aggregateCommittee(final CommitteeAggregator aggregators) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4NjIzMA=="}, "originalCommit": {"oid": "8d2d4535770c71b1faa6cde92ed3834a9fbb053d"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjQ3NTA2OnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/duties/AggregationDuty.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNToxMTo1OVrOGCIaFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTozMzo1MlrOGCS_6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4ODA4NA==", "bodyText": "Might be worth adding a comment here explaining that we will produce at most 1 aggregation per committee", "url": "https://github.com/ConsenSys/teku/pull/1547#discussion_r404888084", "createdAt": "2020-04-07T15:11:59Z", "author": {"login": "mbaxter"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/duties/AggregationDuty.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client.duties;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import tech.pegasys.artemis.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.artemis.datastructures.operations.Attestation;\n+import tech.pegasys.artemis.datastructures.operations.AttestationData;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.bls.BLSSignature;\n+import tech.pegasys.artemis.validator.api.ValidatorApiChannel;\n+\n+public class AggregationDuty implements Duty {\n+  private final ConcurrentMap<Integer, CommitteeAggregator> aggregatorsByCommitteeIndex =\n+      new ConcurrentHashMap<>();\n+  private final UnsignedLong slot;\n+  private final ValidatorApiChannel validatorApiChannel;\n+\n+  public AggregationDuty(final UnsignedLong slot, final ValidatorApiChannel validatorApiChannel) {\n+    this.slot = slot;\n+    this.validatorApiChannel = validatorApiChannel;\n+  }\n+\n+  public void addValidator(\n+      final int validatorIndex,\n+      final BLSSignature proof,\n+      final int attestationCommitteeIndex,\n+      final SafeFuture<Optional<Attestation>> unsignedAttestationFuture) {\n+    aggregatorsByCommitteeIndex.computeIfAbsent(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2d4535770c71b1faa6cde92ed3834a9fbb053d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MTYwOQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1547#discussion_r405061609", "createdAt": "2020-04-07T19:33:52Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/duties/AggregationDuty.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client.duties;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import tech.pegasys.artemis.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.artemis.datastructures.operations.Attestation;\n+import tech.pegasys.artemis.datastructures.operations.AttestationData;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.bls.BLSSignature;\n+import tech.pegasys.artemis.validator.api.ValidatorApiChannel;\n+\n+public class AggregationDuty implements Duty {\n+  private final ConcurrentMap<Integer, CommitteeAggregator> aggregatorsByCommitteeIndex =\n+      new ConcurrentHashMap<>();\n+  private final UnsignedLong slot;\n+  private final ValidatorApiChannel validatorApiChannel;\n+\n+  public AggregationDuty(final UnsignedLong slot, final ValidatorApiChannel validatorApiChannel) {\n+    this.slot = slot;\n+    this.validatorApiChannel = validatorApiChannel;\n+  }\n+\n+  public void addValidator(\n+      final int validatorIndex,\n+      final BLSSignature proof,\n+      final int attestationCommitteeIndex,\n+      final SafeFuture<Optional<Attestation>> unsignedAttestationFuture) {\n+    aggregatorsByCommitteeIndex.computeIfAbsent(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4ODA4NA=="}, "originalCommit": {"oid": "8d2d4535770c71b1faa6cde92ed3834a9fbb053d"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3828, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}