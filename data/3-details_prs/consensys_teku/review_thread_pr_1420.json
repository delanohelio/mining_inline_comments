{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMjcxNDU0", "number": 1420, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzowNjo0N1rODptNYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMToxNDoxM1rODpudQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDU4OTE0OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/PostDuties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzowNjo0N1rOF5DWhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzowNjo0N1rOF5DWhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2ODA3MA==", "bodyText": "nice", "url": "https://github.com/ConsenSys/teku/pull/1420#discussion_r395368070", "createdAt": "2020-03-19T23:06:47Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/PostDuties.java", "diffHunk": "@@ -69,7 +70,7 @@ public PostDuties(final ChainDataProvider provider, final JsonProvider jsonProvi\n             status = RES_OK,\n             content = @OpenApiContent(from = ValidatorDuties.class, isArray = true)),\n         @OpenApiResponse(status = RES_NO_CONTENT, description = NO_CONTENT_PRE_GENESIS),\n-        @OpenApiResponse(status = RES_BAD_REQUEST, description = \"Invalid body supplied\"),\n+        @OpenApiResponse(status = RES_BAD_REQUEST, description = INVALID_BODY_SUPPLIED),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c2ec2355c8fbdbbf52660b1ebfc4c24d96fa8c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDc5MzI5OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/PostAttestation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMToxMzo1NFrOF5FTqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMToxMzo1NFrOF5FTqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMDEwNg==", "bodyText": "would it be cleaner to catch both exceptions in a single catch block", "url": "https://github.com/ConsenSys/teku/pull/1420#discussion_r395400106", "createdAt": "2020-03-20T01:13:54Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/PostAttestation.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.handlers.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.INVALID_BODY_SUPPLIED;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.artemis.api.DataProvider;\n+import tech.pegasys.artemis.api.ValidatorDataProvider;\n+import tech.pegasys.artemis.api.schema.Attestation;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+public class PostAttestation implements Handler {\n+  public static final String ROUTE = \"/validator/attestation\";\n+\n+  private final ValidatorDataProvider provider;\n+  private final JsonProvider jsonProvider;\n+\n+  public PostAttestation(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.provider = dataProvider.getValidatorDataProvider();\n+  }\n+\n+  public PostAttestation(final ValidatorDataProvider provider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.POST,\n+      summary = \"Submit a signed attestation.\",\n+      tags = {TAG_VALIDATOR},\n+      requestBody = @OpenApiRequestBody(content = {@OpenApiContent(from = Attestation.class)}),\n+      description =\n+          \"Submit a signed attestation to the beacon node, which will be validated and then submitted if valid.\\n\\n\"\n+              + \"Submissions should already have been checked to ensure they are not going to result in slashings, \"\n+              + \"only data validations are performed.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_NO_CONTENT,\n+            description = \"The Attestation was accepted, validated, and submitted\"),\n+        @OpenApiResponse(status = RES_BAD_REQUEST, description = INVALID_BODY_SUPPLIED),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR)\n+      })\n+  @Override\n+  public void handle(Context ctx) throws Exception {\n+\n+    try {\n+      Attestation attestation = jsonProvider.jsonToObject(ctx.body(), Attestation.class);\n+      provider.submitAttestation(attestation);\n+      ctx.status(SC_NO_CONTENT);\n+    } catch (final IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c2ec2355c8fbdbbf52660b1ebfc4c24d96fa8c"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDc5MzYwOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/PostAttestation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMToxNDoxM1rOF5FT4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMToxNDoxM1rOF5FT4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwMDE2MA==", "bodyText": "final?", "url": "https://github.com/ConsenSys/teku/pull/1420#discussion_r395400160", "createdAt": "2020-03-20T01:14:13Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/PostAttestation.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.handlers.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.INVALID_BODY_SUPPLIED;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.artemis.api.DataProvider;\n+import tech.pegasys.artemis.api.ValidatorDataProvider;\n+import tech.pegasys.artemis.api.schema.Attestation;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+public class PostAttestation implements Handler {\n+  public static final String ROUTE = \"/validator/attestation\";\n+\n+  private final ValidatorDataProvider provider;\n+  private final JsonProvider jsonProvider;\n+\n+  public PostAttestation(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.provider = dataProvider.getValidatorDataProvider();\n+  }\n+\n+  public PostAttestation(final ValidatorDataProvider provider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.POST,\n+      summary = \"Submit a signed attestation.\",\n+      tags = {TAG_VALIDATOR},\n+      requestBody = @OpenApiRequestBody(content = {@OpenApiContent(from = Attestation.class)}),\n+      description =\n+          \"Submit a signed attestation to the beacon node, which will be validated and then submitted if valid.\\n\\n\"\n+              + \"Submissions should already have been checked to ensure they are not going to result in slashings, \"\n+              + \"only data validations are performed.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_NO_CONTENT,\n+            description = \"The Attestation was accepted, validated, and submitted\"),\n+        @OpenApiResponse(status = RES_BAD_REQUEST, description = INVALID_BODY_SUPPLIED),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR)\n+      })\n+  @Override\n+  public void handle(Context ctx) throws Exception {\n+\n+    try {\n+      Attestation attestation = jsonProvider.jsonToObject(ctx.body(), Attestation.class);\n+      provider.submitAttestation(attestation);\n+      ctx.status(SC_NO_CONTENT);\n+    } catch (final IllegalArgumentException e) {\n+      ctx.result(jsonProvider.objectToJSON(new BadRequest(e.getMessage())));\n+      ctx.status(SC_BAD_REQUEST);\n+    } catch (JsonMappingException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75c2ec2355c8fbdbbf52660b1ebfc4c24d96fa8c"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2579, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}