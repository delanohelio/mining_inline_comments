{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0OTMwNzIx", "number": 1735, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOToxNToxNlrOD6v-Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNTo1MjowOVrOD7TKXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTI5OTI3OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/networking/discovery/SubnetSubscription.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOToxNToxNlrOGSwlag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMToxMTowM1rOGSz1lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyMzU2Mg==", "bodyText": "What about:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package tech.pegasys.teku.datastructures.networking.discovery;\n          \n          \n            \n            package tech.pegasys.teku.datastructures.validator;", "url": "https://github.com/ConsenSys/teku/pull/1735#discussion_r422323562", "createdAt": "2020-05-08T19:15:16Z", "author": {"login": "mbaxter"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/networking/discovery/SubnetSubscription.java", "diffHunk": "@@ -11,7 +11,7 @@\n  * specific language governing permissions and limitations under the License.\n  */\n \n-package tech.pegasys.teku.validator.api;\n+package tech.pegasys.teku.datastructures.networking.discovery;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10776daf6ee9d2cc8e5f094708c2bfc2c201667"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM3NjUzMQ==", "bodyText": "yep that's way better. thank you", "url": "https://github.com/ConsenSys/teku/pull/1735#discussion_r422376531", "createdAt": "2020-05-08T21:10:31Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/networking/discovery/SubnetSubscription.java", "diffHunk": "@@ -11,7 +11,7 @@\n  * specific language governing permissions and limitations under the License.\n  */\n \n-package tech.pegasys.teku.validator.api;\n+package tech.pegasys.teku.datastructures.networking.discovery;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyMzU2Mg=="}, "originalCommit": {"oid": "b10776daf6ee9d2cc8e5f094708c2bfc2c201667"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM3Njg1Mw==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1735#discussion_r422376853", "createdAt": "2020-05-08T21:11:03Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/networking/discovery/SubnetSubscription.java", "diffHunk": "@@ -11,7 +11,7 @@\n  * specific language governing permissions and limitations under the License.\n  */\n \n-package tech.pegasys.teku.validator.api;\n+package tech.pegasys.teku.datastructures.networking.discovery;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyMzU2Mg=="}, "originalCommit": {"oid": "b10776daf6ee9d2cc8e5f094708c2bfc2c201667"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTMyODU1OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOToyNDoyNlrOGSw3Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMToxNjoyNVrOGSz_HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyODA4Ng==", "bodyText": "(optional) How about:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                for (SubnetSubscription subnetSubscription : newSubscriptions) {\n          \n          \n            \n                  int subnetId = subnetSubscription.getSubnetId();\n          \n          \n            \n                  if (!persistentSubnetIdSet.contains(subnetId)) {\n          \n          \n            \n                    persistentSubnetIdSet.add(subnetId);\n          \n          \n            \n                    shouldUpdateENR = true;\n          \n          \n            \n                  }\n          \n          \n            \n                shouldUpdateENR = subnetIds.stream().map(persistentSubnetIdSet::add).reduce((a,b) -> a || b)\n          \n      \n    \n    \n  \n\n\ud83d\ude04", "url": "https://github.com/ConsenSys/teku/pull/1735#discussion_r422328086", "createdAt": "2020-05-08T19:24:26Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "diffHunk": "@@ -36,25 +40,62 @@ public AttestationTopicSubscriber(final Eth2Network eth2Network) {\n   public synchronized void subscribeToCommitteeForAggregation(\n       final int committeeIndex, final UnsignedLong aggregationSlot) {\n     final int subnetId = committeeIndexToSubnetId(committeeIndex);\n-    final UnsignedLong currentUnsubscriptionSlot =\n-        unsubscriptionSlotBySubnetId.getOrDefault(subnetId, ZERO);\n+    final UnsignedLong currentUnsubscriptionSlot = allSubscriptions.getOrDefault(subnetId, ZERO);\n     if (currentUnsubscriptionSlot.equals(ZERO)) {\n       eth2Network.subscribeToAttestationSubnetId(subnetId);\n     }\n-    unsubscriptionSlotBySubnetId.put(subnetId, max(currentUnsubscriptionSlot, aggregationSlot));\n+    allSubscriptions.put(subnetId, max(currentUnsubscriptionSlot, aggregationSlot));\n+  }\n+\n+  public synchronized void subscribeToPersistentSubnets(\n+      final Set<SubnetSubscription> newSubscriptions) {\n+    boolean shouldUpdateENR = false;\n+\n+    for (SubnetSubscription subnetSubscription : newSubscriptions) {\n+      int subnetId = subnetSubscription.getSubnetId();\n+      if (!persistentSubnetIdSet.contains(subnetId)) {\n+        persistentSubnetIdSet.add(subnetId);\n+        shouldUpdateENR = true;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10776daf6ee9d2cc8e5f094708c2bfc2c201667"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM3OTI5Mw==", "bodyText": "that's pretty cool", "url": "https://github.com/ConsenSys/teku/pull/1735#discussion_r422379293", "createdAt": "2020-05-08T21:16:25Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "diffHunk": "@@ -36,25 +40,62 @@ public AttestationTopicSubscriber(final Eth2Network eth2Network) {\n   public synchronized void subscribeToCommitteeForAggregation(\n       final int committeeIndex, final UnsignedLong aggregationSlot) {\n     final int subnetId = committeeIndexToSubnetId(committeeIndex);\n-    final UnsignedLong currentUnsubscriptionSlot =\n-        unsubscriptionSlotBySubnetId.getOrDefault(subnetId, ZERO);\n+    final UnsignedLong currentUnsubscriptionSlot = allSubscriptions.getOrDefault(subnetId, ZERO);\n     if (currentUnsubscriptionSlot.equals(ZERO)) {\n       eth2Network.subscribeToAttestationSubnetId(subnetId);\n     }\n-    unsubscriptionSlotBySubnetId.put(subnetId, max(currentUnsubscriptionSlot, aggregationSlot));\n+    allSubscriptions.put(subnetId, max(currentUnsubscriptionSlot, aggregationSlot));\n+  }\n+\n+  public synchronized void subscribeToPersistentSubnets(\n+      final Set<SubnetSubscription> newSubscriptions) {\n+    boolean shouldUpdateENR = false;\n+\n+    for (SubnetSubscription subnetSubscription : newSubscriptions) {\n+      int subnetId = subnetSubscription.getSubnetId();\n+      if (!persistentSubnetIdSet.contains(subnetId)) {\n+        persistentSubnetIdSet.add(subnetId);\n+        shouldUpdateENR = true;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyODA4Ng=="}, "originalCommit": {"oid": "b10776daf6ee9d2cc8e5f094708c2bfc2c201667"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTM2NDUwOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOTozNjoxM1rOGSxNCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOTozNjoxM1rOGSxNCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMzMzcwNQ==", "bodyText": "(optional) You could do everything in one compute operation:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      allSubscriptions.computeIfAbsent(\n          \n          \n            \n                          subnetId,\n          \n          \n            \n                          (key) -> {\n          \n          \n            \n                            eth2Network.subscribeToAttestationSubnetId(subnetId);\n          \n          \n            \n                            return ZERO;\n          \n          \n            \n                          });\n          \n          \n            \n            \n          \n          \n            \n                  allSubscriptions.put(\n          \n          \n            \n                      subnetId, max(existingUnsubscriptionSlot, subnetSubscription.getUnsubscriptionSlot()));\n          \n          \n            \n                      allSubscriptions.compute(\n          \n          \n            \n                          subnetId,\n          \n          \n            \n                          (key, currentValue) -> {\n          \n          \n            \n                            final UnsignedLong unsubscribeSlot = subnetSubscription.getUnsubscriptionSlot();\n          \n          \n            \n                            if (currentValue == null) {\n          \n          \n            \n                                eth2Network.subscribeToAttestationSubnetId(subnetId);\n          \n          \n            \n                                return unsubscribeSlot;\n          \n          \n            \n                            } else {\n          \n          \n            \n                                return max(existingUnsubscriptionSlot, unsubscribeSlot);\n          \n          \n            \n                            }\n          \n          \n            \n                          });", "url": "https://github.com/ConsenSys/teku/pull/1735#discussion_r422333705", "createdAt": "2020-05-08T19:36:13Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "diffHunk": "@@ -36,25 +40,62 @@ public AttestationTopicSubscriber(final Eth2Network eth2Network) {\n   public synchronized void subscribeToCommitteeForAggregation(\n       final int committeeIndex, final UnsignedLong aggregationSlot) {\n     final int subnetId = committeeIndexToSubnetId(committeeIndex);\n-    final UnsignedLong currentUnsubscriptionSlot =\n-        unsubscriptionSlotBySubnetId.getOrDefault(subnetId, ZERO);\n+    final UnsignedLong currentUnsubscriptionSlot = allSubscriptions.getOrDefault(subnetId, ZERO);\n     if (currentUnsubscriptionSlot.equals(ZERO)) {\n       eth2Network.subscribeToAttestationSubnetId(subnetId);\n     }\n-    unsubscriptionSlotBySubnetId.put(subnetId, max(currentUnsubscriptionSlot, aggregationSlot));\n+    allSubscriptions.put(subnetId, max(currentUnsubscriptionSlot, aggregationSlot));\n+  }\n+\n+  public synchronized void subscribeToPersistentSubnets(\n+      final Set<SubnetSubscription> newSubscriptions) {\n+    boolean shouldUpdateENR = false;\n+\n+    for (SubnetSubscription subnetSubscription : newSubscriptions) {\n+      int subnetId = subnetSubscription.getSubnetId();\n+      if (!persistentSubnetIdSet.contains(subnetId)) {\n+        persistentSubnetIdSet.add(subnetId);\n+        shouldUpdateENR = true;\n+      }\n+\n+      UnsignedLong existingUnsubscriptionSlot =\n+          allSubscriptions.computeIfAbsent(\n+              subnetId,\n+              (key) -> {\n+                eth2Network.subscribeToAttestationSubnetId(subnetId);\n+                return ZERO;\n+              });\n+\n+      allSubscriptions.put(\n+          subnetId, max(existingUnsubscriptionSlot, subnetSubscription.getUnsubscriptionSlot()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10776daf6ee9d2cc8e5f094708c2bfc2c201667"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTM4Njg0OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriberTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOTo0NDowMVrOGSxa7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOTo0NDowMVrOGSxa7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMzNzI2Mg==", "bodyText": "May be worth another couple of tests where we subscribe to the same persistent subnet with 2 different unsubscribe slots.", "url": "https://github.com/ConsenSys/teku/pull/1735#discussion_r422337262", "createdAt": "2020-05-08T19:44:01Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriberTest.java", "diffHunk": "@@ -81,13 +83,81 @@ public void shouldPreserveLaterSubscriptionPeriodWhenEarlierSlotAdded() {\n     final UnsignedLong firstSlot = UnsignedLong.valueOf(10);\n     final UnsignedLong secondSlot = UnsignedLong.valueOf(15);\n \n-    subscriptions.subscribeToCommitteeForAggregation(subnetId, secondSlot);\n-    subscriptions.subscribeToCommitteeForAggregation(subnetId, firstSlot);\n+    subscriber.subscribeToCommitteeForAggregation(subnetId, secondSlot);\n+    subscriber.subscribeToCommitteeForAggregation(subnetId, firstSlot);\n \n-    subscriptions.onSlot(firstSlot.plus(ONE));\n+    subscriber.onSlot(firstSlot.plus(ONE));\n     verify(eth2Network, never()).unsubscribeFromAttestationSubnetId(subnetId);\n \n-    subscriptions.onSlot(secondSlot.plus(ONE));\n+    subscriber.onSlot(secondSlot.plus(ONE));\n+    verify(eth2Network).unsubscribeFromAttestationSubnetId(subnetId);\n+  }\n+\n+  @Test\n+  public void shouldSubscribeToNewSubnetsAndUpdateENR_forPersistentSubscriptions() {\n+    Set<SubnetSubscription> subnetSubscriptions =\n+        Set.of(\n+            new SubnetSubscription(1, UnsignedLong.valueOf(20)),\n+            new SubnetSubscription(2, UnsignedLong.valueOf(15)));\n+\n+    subscriber.subscribeToPersistentSubnets(subnetSubscriptions);\n+\n+    verify(eth2Network).setLongTermAttestationSubnetSubscriptions(Set.of(1, 2));\n+\n+    verify(eth2Network).subscribeToAttestationSubnetId(1);\n+    verify(eth2Network).subscribeToAttestationSubnetId(2);\n+  }\n+\n+  @Test\n+  public void shouldUpdateENRWhenNewSubnetIsSubscribedDueToPersistentSubscriptions() {\n+    UnsignedLong someSlot = valueOf(15);\n+    Set<SubnetSubscription> subnetSubscription = Set.of(new SubnetSubscription(2, someSlot));\n+\n+    subscriber.subscribeToCommitteeForAggregation(1, someSlot);\n+    subscriber.subscribeToCommitteeForAggregation(2, someSlot);\n+\n+    verify(eth2Network).subscribeToAttestationSubnetId(1);\n+    verify(eth2Network).subscribeToAttestationSubnetId(2);\n+\n+    subscriber.subscribeToPersistentSubnets(subnetSubscription);\n+\n+    verify(eth2Network).setLongTermAttestationSubnetSubscriptions(Set.of(2));\n+\n+    verify(eth2Network).subscribeToAttestationSubnetId(2);\n+  }\n+\n+  @Test\n+  public void shouldExtendSubscriptionPeriod_forPersistentSubscriptions() {\n+    final int subnetId = 3;\n+    final UnsignedLong firstSlot = UnsignedLong.valueOf(10);\n+    final UnsignedLong secondSlot = UnsignedLong.valueOf(15);\n+    Set<SubnetSubscription> subnetSubscriptions =\n+        Set.of(new SubnetSubscription(subnetId, secondSlot));\n+\n+    subscriber.subscribeToCommitteeForAggregation(subnetId, firstSlot);\n+    subscriber.subscribeToPersistentSubnets(subnetSubscriptions);\n+\n+    subscriber.onSlot(firstSlot.plus(ONE));\n+    verify(eth2Network, never()).unsubscribeFromAttestationSubnetId(subnetId);\n+\n+    subscriber.onSlot(secondSlot.plus(ONE));\n+    verify(eth2Network).unsubscribeFromAttestationSubnetId(subnetId);\n+  }\n+\n+  @Test\n+  public void shouldPreserveLaterSubscription_forPersistentSubscriptions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10776daf6ee9d2cc8e5f094708c2bfc2c201667"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTQwNDI0OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOTo1MDowM1rOGSxlPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMToxOTowNVrOGS0Diw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMzOTkwMQ==", "bodyText": "Do these need to be concurrent collections?", "url": "https://github.com/ConsenSys/teku/pull/1735#discussion_r422339901", "createdAt": "2020-05-08T19:50:03Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "diffHunk": "@@ -19,14 +19,18 @@\n \n import com.google.common.primitives.UnsignedLong;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.Set;\n+import tech.pegasys.teku.datastructures.networking.discovery.SubnetSubscription;\n import tech.pegasys.teku.networking.eth2.Eth2Network;\n import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n \n public class AttestationTopicSubscriber implements SlotEventsChannel {\n-  private final Map<Integer, UnsignedLong> unsubscriptionSlotBySubnetId = new HashMap<>();\n+  private final Map<Integer, UnsignedLong> allSubscriptions = new HashMap<>();\n+  private final Set<Integer> persistentSubnetIdSet = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b10776daf6ee9d2cc8e5f094708c2bfc2c201667"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4MDQyNw==", "bodyText": "All of the methods of this class are synchronized, so I believe collections don't need to be concurrent.", "url": "https://github.com/ConsenSys/teku/pull/1735#discussion_r422380427", "createdAt": "2020-05-08T21:19:05Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "diffHunk": "@@ -19,14 +19,18 @@\n \n import com.google.common.primitives.UnsignedLong;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.Set;\n+import tech.pegasys.teku.datastructures.networking.discovery.SubnetSubscription;\n import tech.pegasys.teku.networking.eth2.Eth2Network;\n import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n \n public class AttestationTopicSubscriber implements SlotEventsChannel {\n-  private final Map<Integer, UnsignedLong> unsubscriptionSlotBySubnetId = new HashMap<>();\n+  private final Map<Integer, UnsignedLong> allSubscriptions = new HashMap<>();\n+  private final Set<Integer> persistentSubnetIdSet = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMzOTkwMQ=="}, "originalCommit": {"oid": "b10776daf6ee9d2cc8e5f094708c2bfc2c201667"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTA1MTAwOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNTo0ODo1NVrOGTiUQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjozNjowOFrOGTkM5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEzODM3MA==", "bodyText": "(nit) Another option to make this more succinct / efficient\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (!persistentSubnetIdSet.contains(subnetId)) {\n          \n          \n            \n                    persistentSubnetIdSet.add(subnetId);\n          \n          \n            \n                    shouldUpdateENR = true;\n          \n          \n            \n                  }\n          \n          \n            \n                  shouldUpdateENR = shouldUpdateENR || persistentSubnetIdSet.add(subnetId);", "url": "https://github.com/ConsenSys/teku/pull/1735#discussion_r423138370", "createdAt": "2020-05-11T15:48:55Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "diffHunk": "@@ -19,42 +19,83 @@\n \n import com.google.common.primitives.UnsignedLong;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.Set;\n+import tech.pegasys.teku.datastructures.validator.SubnetSubscription;\n import tech.pegasys.teku.networking.eth2.Eth2Network;\n import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n \n public class AttestationTopicSubscriber implements SlotEventsChannel {\n-  private final Map<Integer, UnsignedLong> unsubscriptionSlotBySubnetId = new HashMap<>();\n+  private final Map<Integer, UnsignedLong> allSubscriptions = new HashMap<>();\n+  private final Set<Integer> persistentSubnetIdSet = new HashSet<>();\n   private final Eth2Network eth2Network;\n \n   public AttestationTopicSubscriber(final Eth2Network eth2Network) {\n     this.eth2Network = eth2Network;\n   }\n \n-  public synchronized void subscribeToCommittee(\n+  public synchronized void subscribeToCommitteeForAggregation(\n       final int committeeIndex, final UnsignedLong aggregationSlot) {\n     final int subnetId = committeeIndexToSubnetId(committeeIndex);\n-    final UnsignedLong currentUnsubscriptionSlot =\n-        unsubscriptionSlotBySubnetId.getOrDefault(subnetId, ZERO);\n+    final UnsignedLong currentUnsubscriptionSlot = allSubscriptions.getOrDefault(subnetId, ZERO);\n     if (currentUnsubscriptionSlot.equals(ZERO)) {\n       eth2Network.subscribeToAttestationSubnetId(subnetId);\n     }\n-    unsubscriptionSlotBySubnetId.put(subnetId, max(currentUnsubscriptionSlot, aggregationSlot));\n+    allSubscriptions.put(subnetId, max(currentUnsubscriptionSlot, aggregationSlot));\n+  }\n+\n+  public synchronized void subscribeToPersistentSubnets(\n+      final Set<SubnetSubscription> newSubscriptions) {\n+    boolean shouldUpdateENR = false;\n+\n+    for (SubnetSubscription subnetSubscription : newSubscriptions) {\n+      int subnetId = subnetSubscription.getSubnetId();\n+      if (!persistentSubnetIdSet.contains(subnetId)) {\n+        persistentSubnetIdSet.add(subnetId);\n+        shouldUpdateENR = true;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d711797a1eb506badf56159b8ea4eb69cf7082"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE2NjU3Ng==", "bodyText": "I think if we did that persistentSubnetIdSet.add(Subnet) would not be called if shouldUpdateENR is true, right? Here we want it to be called regardless of shouldUpdateENR being true since we want to update persistenSubnetIdSet.", "url": "https://github.com/ConsenSys/teku/pull/1735#discussion_r423166576", "createdAt": "2020-05-11T16:31:45Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "diffHunk": "@@ -19,42 +19,83 @@\n \n import com.google.common.primitives.UnsignedLong;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.Set;\n+import tech.pegasys.teku.datastructures.validator.SubnetSubscription;\n import tech.pegasys.teku.networking.eth2.Eth2Network;\n import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n \n public class AttestationTopicSubscriber implements SlotEventsChannel {\n-  private final Map<Integer, UnsignedLong> unsubscriptionSlotBySubnetId = new HashMap<>();\n+  private final Map<Integer, UnsignedLong> allSubscriptions = new HashMap<>();\n+  private final Set<Integer> persistentSubnetIdSet = new HashSet<>();\n   private final Eth2Network eth2Network;\n \n   public AttestationTopicSubscriber(final Eth2Network eth2Network) {\n     this.eth2Network = eth2Network;\n   }\n \n-  public synchronized void subscribeToCommittee(\n+  public synchronized void subscribeToCommitteeForAggregation(\n       final int committeeIndex, final UnsignedLong aggregationSlot) {\n     final int subnetId = committeeIndexToSubnetId(committeeIndex);\n-    final UnsignedLong currentUnsubscriptionSlot =\n-        unsubscriptionSlotBySubnetId.getOrDefault(subnetId, ZERO);\n+    final UnsignedLong currentUnsubscriptionSlot = allSubscriptions.getOrDefault(subnetId, ZERO);\n     if (currentUnsubscriptionSlot.equals(ZERO)) {\n       eth2Network.subscribeToAttestationSubnetId(subnetId);\n     }\n-    unsubscriptionSlotBySubnetId.put(subnetId, max(currentUnsubscriptionSlot, aggregationSlot));\n+    allSubscriptions.put(subnetId, max(currentUnsubscriptionSlot, aggregationSlot));\n+  }\n+\n+  public synchronized void subscribeToPersistentSubnets(\n+      final Set<SubnetSubscription> newSubscriptions) {\n+    boolean shouldUpdateENR = false;\n+\n+    for (SubnetSubscription subnetSubscription : newSubscriptions) {\n+      int subnetId = subnetSubscription.getSubnetId();\n+      if (!persistentSubnetIdSet.contains(subnetId)) {\n+        persistentSubnetIdSet.add(subnetId);\n+        shouldUpdateENR = true;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEzODM3MA=="}, "originalCommit": {"oid": "04d711797a1eb506badf56159b8ea4eb69cf7082"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE2ODYzNA==", "bodyText": "good point!!  should be:\nshouldUpdateENR = persistentSubnetIdSet.add(subnetId) || shouldUpdateENR;", "url": "https://github.com/ConsenSys/teku/pull/1735#discussion_r423168634", "createdAt": "2020-05-11T16:35:05Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "diffHunk": "@@ -19,42 +19,83 @@\n \n import com.google.common.primitives.UnsignedLong;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.Set;\n+import tech.pegasys.teku.datastructures.validator.SubnetSubscription;\n import tech.pegasys.teku.networking.eth2.Eth2Network;\n import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n \n public class AttestationTopicSubscriber implements SlotEventsChannel {\n-  private final Map<Integer, UnsignedLong> unsubscriptionSlotBySubnetId = new HashMap<>();\n+  private final Map<Integer, UnsignedLong> allSubscriptions = new HashMap<>();\n+  private final Set<Integer> persistentSubnetIdSet = new HashSet<>();\n   private final Eth2Network eth2Network;\n \n   public AttestationTopicSubscriber(final Eth2Network eth2Network) {\n     this.eth2Network = eth2Network;\n   }\n \n-  public synchronized void subscribeToCommittee(\n+  public synchronized void subscribeToCommitteeForAggregation(\n       final int committeeIndex, final UnsignedLong aggregationSlot) {\n     final int subnetId = committeeIndexToSubnetId(committeeIndex);\n-    final UnsignedLong currentUnsubscriptionSlot =\n-        unsubscriptionSlotBySubnetId.getOrDefault(subnetId, ZERO);\n+    final UnsignedLong currentUnsubscriptionSlot = allSubscriptions.getOrDefault(subnetId, ZERO);\n     if (currentUnsubscriptionSlot.equals(ZERO)) {\n       eth2Network.subscribeToAttestationSubnetId(subnetId);\n     }\n-    unsubscriptionSlotBySubnetId.put(subnetId, max(currentUnsubscriptionSlot, aggregationSlot));\n+    allSubscriptions.put(subnetId, max(currentUnsubscriptionSlot, aggregationSlot));\n+  }\n+\n+  public synchronized void subscribeToPersistentSubnets(\n+      final Set<SubnetSubscription> newSubscriptions) {\n+    boolean shouldUpdateENR = false;\n+\n+    for (SubnetSubscription subnetSubscription : newSubscriptions) {\n+      int subnetId = subnetSubscription.getSubnetId();\n+      if (!persistentSubnetIdSet.contains(subnetId)) {\n+        persistentSubnetIdSet.add(subnetId);\n+        shouldUpdateENR = true;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEzODM3MA=="}, "originalCommit": {"oid": "04d711797a1eb506badf56159b8ea4eb69cf7082"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE2OTE4Mg==", "bodyText": "oh hahah. I totally missed that :D", "url": "https://github.com/ConsenSys/teku/pull/1735#discussion_r423169182", "createdAt": "2020-05-11T16:36:01Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "diffHunk": "@@ -19,42 +19,83 @@\n \n import com.google.common.primitives.UnsignedLong;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.Set;\n+import tech.pegasys.teku.datastructures.validator.SubnetSubscription;\n import tech.pegasys.teku.networking.eth2.Eth2Network;\n import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n \n public class AttestationTopicSubscriber implements SlotEventsChannel {\n-  private final Map<Integer, UnsignedLong> unsubscriptionSlotBySubnetId = new HashMap<>();\n+  private final Map<Integer, UnsignedLong> allSubscriptions = new HashMap<>();\n+  private final Set<Integer> persistentSubnetIdSet = new HashSet<>();\n   private final Eth2Network eth2Network;\n \n   public AttestationTopicSubscriber(final Eth2Network eth2Network) {\n     this.eth2Network = eth2Network;\n   }\n \n-  public synchronized void subscribeToCommittee(\n+  public synchronized void subscribeToCommitteeForAggregation(\n       final int committeeIndex, final UnsignedLong aggregationSlot) {\n     final int subnetId = committeeIndexToSubnetId(committeeIndex);\n-    final UnsignedLong currentUnsubscriptionSlot =\n-        unsubscriptionSlotBySubnetId.getOrDefault(subnetId, ZERO);\n+    final UnsignedLong currentUnsubscriptionSlot = allSubscriptions.getOrDefault(subnetId, ZERO);\n     if (currentUnsubscriptionSlot.equals(ZERO)) {\n       eth2Network.subscribeToAttestationSubnetId(subnetId);\n     }\n-    unsubscriptionSlotBySubnetId.put(subnetId, max(currentUnsubscriptionSlot, aggregationSlot));\n+    allSubscriptions.put(subnetId, max(currentUnsubscriptionSlot, aggregationSlot));\n+  }\n+\n+  public synchronized void subscribeToPersistentSubnets(\n+      final Set<SubnetSubscription> newSubscriptions) {\n+    boolean shouldUpdateENR = false;\n+\n+    for (SubnetSubscription subnetSubscription : newSubscriptions) {\n+      int subnetId = subnetSubscription.getSubnetId();\n+      if (!persistentSubnetIdSet.contains(subnetId)) {\n+        persistentSubnetIdSet.add(subnetId);\n+        shouldUpdateENR = true;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEzODM3MA=="}, "originalCommit": {"oid": "04d711797a1eb506badf56159b8ea4eb69cf7082"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE2OTI1NA==", "bodyText": "Thanks!", "url": "https://github.com/ConsenSys/teku/pull/1735#discussion_r423169254", "createdAt": "2020-05-11T16:36:08Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "diffHunk": "@@ -19,42 +19,83 @@\n \n import com.google.common.primitives.UnsignedLong;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.Set;\n+import tech.pegasys.teku.datastructures.validator.SubnetSubscription;\n import tech.pegasys.teku.networking.eth2.Eth2Network;\n import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n \n public class AttestationTopicSubscriber implements SlotEventsChannel {\n-  private final Map<Integer, UnsignedLong> unsubscriptionSlotBySubnetId = new HashMap<>();\n+  private final Map<Integer, UnsignedLong> allSubscriptions = new HashMap<>();\n+  private final Set<Integer> persistentSubnetIdSet = new HashSet<>();\n   private final Eth2Network eth2Network;\n \n   public AttestationTopicSubscriber(final Eth2Network eth2Network) {\n     this.eth2Network = eth2Network;\n   }\n \n-  public synchronized void subscribeToCommittee(\n+  public synchronized void subscribeToCommitteeForAggregation(\n       final int committeeIndex, final UnsignedLong aggregationSlot) {\n     final int subnetId = committeeIndexToSubnetId(committeeIndex);\n-    final UnsignedLong currentUnsubscriptionSlot =\n-        unsubscriptionSlotBySubnetId.getOrDefault(subnetId, ZERO);\n+    final UnsignedLong currentUnsubscriptionSlot = allSubscriptions.getOrDefault(subnetId, ZERO);\n     if (currentUnsubscriptionSlot.equals(ZERO)) {\n       eth2Network.subscribeToAttestationSubnetId(subnetId);\n     }\n-    unsubscriptionSlotBySubnetId.put(subnetId, max(currentUnsubscriptionSlot, aggregationSlot));\n+    allSubscriptions.put(subnetId, max(currentUnsubscriptionSlot, aggregationSlot));\n+  }\n+\n+  public synchronized void subscribeToPersistentSubnets(\n+      final Set<SubnetSubscription> newSubscriptions) {\n+    boolean shouldUpdateENR = false;\n+\n+    for (SubnetSubscription subnetSubscription : newSubscriptions) {\n+      int subnetId = subnetSubscription.getSubnetId();\n+      if (!persistentSubnetIdSet.contains(subnetId)) {\n+        persistentSubnetIdSet.add(subnetId);\n+        shouldUpdateENR = true;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEzODM3MA=="}, "originalCommit": {"oid": "04d711797a1eb506badf56159b8ea4eb69cf7082"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTA2NTI0OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNTo1MjowOVrOGTidDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjozMjoyM1rOGTkD0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE0MDYyMA==", "bodyText": "I think the new name is more confusing - you have to read through the code to figure out what this map represents.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final Map<Integer, UnsignedLong> allSubscriptions = new HashMap<>();\n          \n          \n            \n              private final Map<Integer, UnsignedLong> subnetIdToUnsubscribeSlot = new HashMap<>();", "url": "https://github.com/ConsenSys/teku/pull/1735#discussion_r423140620", "createdAt": "2020-05-11T15:52:09Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "diffHunk": "@@ -19,42 +19,83 @@\n \n import com.google.common.primitives.UnsignedLong;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.Set;\n+import tech.pegasys.teku.datastructures.validator.SubnetSubscription;\n import tech.pegasys.teku.networking.eth2.Eth2Network;\n import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n \n public class AttestationTopicSubscriber implements SlotEventsChannel {\n-  private final Map<Integer, UnsignedLong> unsubscriptionSlotBySubnetId = new HashMap<>();\n+  private final Map<Integer, UnsignedLong> allSubscriptions = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d711797a1eb506badf56159b8ea4eb69cf7082"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE2NjkzMQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1735#discussion_r423166931", "createdAt": "2020-05-11T16:32:23Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationTopicSubscriber.java", "diffHunk": "@@ -19,42 +19,83 @@\n \n import com.google.common.primitives.UnsignedLong;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.Set;\n+import tech.pegasys.teku.datastructures.validator.SubnetSubscription;\n import tech.pegasys.teku.networking.eth2.Eth2Network;\n import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n \n public class AttestationTopicSubscriber implements SlotEventsChannel {\n-  private final Map<Integer, UnsignedLong> unsubscriptionSlotBySubnetId = new HashMap<>();\n+  private final Map<Integer, UnsignedLong> allSubscriptions = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE0MDYyMA=="}, "originalCommit": {"oid": "04d711797a1eb506badf56159b8ea4eb69cf7082"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3777, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}