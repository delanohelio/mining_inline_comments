{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNzg2MDk5", "number": 2309, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMDoyMTowNlrOELFnhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNTozNzo1NlrOELIQnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDYxODI5OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/teku/util/config/Constants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMDoyMTowNlrOGsgUhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMDoyNTozOFrOGsgYIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyMDA2OA==", "bodyText": "We don't want to increase this limit.  We should accept requests for up to 1024 blocks, but we only send 200 because we want to restrict how much work we have to do (the spec specifically allows us to not send all blocks back).", "url": "https://github.com/ConsenSys/teku/pull/2309#discussion_r449320068", "createdAt": "2020-07-03T00:21:06Z", "author": {"login": "ajsutton"}, "path": "util/src/main/java/tech/pegasys/teku/util/config/Constants.java", "diffHunk": "@@ -115,7 +116,7 @@\n   public static int EPOCHS_PER_RANDOM_SUBNET_SUBSCRIPTION = 256;\n \n   // Sync\n-  public static final UnsignedLong MAX_BLOCK_BY_RANGE_REQUEST_SIZE = UnsignedLong.valueOf(200);\n+  public static final UnsignedLong MAX_BLOCK_BY_RANGE_REQUEST_SIZE = UnsignedLong.valueOf(1024);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed8c858d15ba9655fb75fe598cc9f31f1b70cca3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyMDk5Mw==", "bodyText": "ok I just figured when you said we could ask for more that you meant to increase the limit. i'll revert", "url": "https://github.com/ConsenSys/teku/pull/2309#discussion_r449320993", "createdAt": "2020-07-03T00:25:38Z", "author": {"login": "rolfyone"}, "path": "util/src/main/java/tech/pegasys/teku/util/config/Constants.java", "diffHunk": "@@ -115,7 +116,7 @@\n   public static int EPOCHS_PER_RANDOM_SUBNET_SUBSCRIPTION = 256;\n \n   // Sync\n-  public static final UnsignedLong MAX_BLOCK_BY_RANGE_REQUEST_SIZE = UnsignedLong.valueOf(200);\n+  public static final UnsignedLong MAX_BLOCK_BY_RANGE_REQUEST_SIZE = UnsignedLong.valueOf(1024);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMyMDA2OA=="}, "originalCommit": {"oid": "ed8c858d15ba9655fb75fe598cc9f31f1b70cca3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDY4OTY5OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/networking/libp2p/rpc/BeaconBlocksByRangeRequestMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMToxNDo0MFrOGsg-TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMToxNDo0MFrOGsg-TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMzMDc2NA==", "bodyText": "Can we change this to throw an RpcException rather than IllegalArgumentException.  Otherwise if we receive a request that fails this check we'll report an internal error back to the peer instead of a bad request.", "url": "https://github.com/ConsenSys/teku/pull/2309#discussion_r449330764", "createdAt": "2020-07-03T01:14:40Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/networking/libp2p/rpc/BeaconBlocksByRangeRequestMessage.java", "diffHunk": "@@ -23,13 +26,13 @@\n \n public final class BeaconBlocksByRangeRequestMessage\n     implements RpcRequest, SimpleOffsetSerializable, SSZContainer {\n-\n   private final UnsignedLong startSlot;\n   private final UnsignedLong count;\n   private final UnsignedLong step;\n \n   public BeaconBlocksByRangeRequestMessage(\n       final UnsignedLong startSlot, final UnsignedLong count, final UnsignedLong step) {\n+    checkArgument(count.compareTo(UnsignedLong.valueOf(MAX_REQUEST_BLOCKS)) <= 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a6b9b739a4bb56e79de1daf2c21a28f899b7e1"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDY5Mjg4OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/networking/libp2p/rpc/BeaconBlocksByRootRequestMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMToxNjozOVrOGshAAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMToxNjozOVrOGshAAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMzMTIwMg==", "bodyText": "Throw an RpcException here too.", "url": "https://github.com/ConsenSys/teku/pull/2309#discussion_r449331202", "createdAt": "2020-07-03T01:16:39Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/networking/libp2p/rpc/BeaconBlocksByRootRequestMessage.java", "diffHunk": "@@ -24,9 +27,10 @@\n public class BeaconBlocksByRootRequestMessage implements RpcRequest, SSZContainer {\n \n   private final SSZMutableList<Bytes32> blockRoots =\n-      SSZList.createMutable(Bytes32.class, Integer.MAX_VALUE);\n+      SSZList.createMutable(Bytes32.class, MAX_REQUEST_BLOCKS);\n \n   public BeaconBlocksByRootRequestMessage(final List<Bytes32> blockRoots) {\n+    checkArgument(blockRoots.size() <= MAX_REQUEST_BLOCKS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a6b9b739a4bb56e79de1daf2c21a28f899b7e1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMDY5NTg1OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/ssz/BeaconBlocksByRootRequestMessageEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMToxOTowNVrOGshBvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwMToxOTowNVrOGshBvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMzMTY0Nw==", "bodyText": "We wouldn't need this try/catch if the constructor just threw RpcException.  Ultimately we should catch this once the length prefix is read because the message length can't be more than Bytes32.SIZE * MAX_REQUEST_BLOCKS - there's a separate ticket for that though.", "url": "https://github.com/ConsenSys/teku/pull/2309#discussion_r449331647", "createdAt": "2020-07-03T01:19:05Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/core/encodings/ssz/BeaconBlocksByRootRequestMessageEncoder.java", "diffHunk": "@@ -44,6 +46,10 @@ public BeaconBlocksByRootRequestMessage decode(final Bytes message) throws RpcEx\n     for (int i = 0; i < message.size(); i += Bytes32.SIZE) {\n       blockRoots.add(Bytes32.wrap(message.slice(i, Bytes32.SIZE)));\n     }\n-    return new BeaconBlocksByRootRequestMessage(blockRoots);\n+    try {\n+      return new BeaconBlocksByRootRequestMessage(blockRoots);\n+    } catch (IllegalArgumentException ex) {\n+      throw new RpcException(INVALID_REQUEST_CODE, ex.getMessage());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a6b9b739a4bb56e79de1daf2c21a28f899b7e1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTA0ODgzOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2Peer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNTozNjoxOFrOGskPtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNTozNjoxOFrOGskPtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM4NDM3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      INVALID_REQUEST_CODE, \"Only a maximum of \" + MAX_REQUEST_BLOCKS + \" can per request\");\n          \n          \n            \n                      INVALID_REQUEST_CODE, \"Only a maximum of \" + MAX_REQUEST_BLOCKS + \" blocks can be requested per request\");", "url": "https://github.com/ConsenSys/teku/pull/2309#discussion_r449384373", "createdAt": "2020-07-03T05:36:18Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2Peer.java", "diffHunk": "@@ -144,7 +148,12 @@ void markChainValidated() {\n   }\n \n   public SafeFuture<Void> requestBlocksByRoot(\n-      final List<Bytes32> blockRoots, final ResponseListener<SignedBeaconBlock> listener) {\n+      final List<Bytes32> blockRoots, final ResponseListener<SignedBeaconBlock> listener)\n+      throws RpcException {\n+    if (blockRoots.size() > MAX_REQUEST_BLOCKS) {\n+      throw new RpcException(\n+          INVALID_REQUEST_CODE, \"Only a maximum of \" + MAX_REQUEST_BLOCKS + \" can per request\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb4fe53e68179ad9fabfbfadc28b06c18ba8e168"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTA1MDQxOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/beaconchain/methods/BeaconBlocksByRangeMessageHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNTozNzoxOFrOGskQsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNTo0MDowOVrOGskTTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM4NDYyNA==", "bodyText": "Anton moved us away from using static instances of RpcException.  Might need to pull in the latest master to get those changes.", "url": "https://github.com/ConsenSys/teku/pull/2309#discussion_r449384624", "createdAt": "2020-07-03T05:37:18Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/beaconchain/methods/BeaconBlocksByRangeMessageHandler.java", "diffHunk": "@@ -45,6 +46,10 @@\n   static final RpcException INVALID_STEP =\n       new RpcException(INVALID_REQUEST_CODE, \"Step must be greater than zero\");\n \n+  private static final RpcException TOO_MANY_BLOCKS =\n+      new RpcException(\n+          INVALID_REQUEST_CODE, \"Only a maximum of \" + MAX_REQUEST_BLOCKS + \" can per request\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb4fe53e68179ad9fabfbfadc28b06c18ba8e168"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM4NTI5Mg==", "bodyText": "oh misread, just inline this so we create the exception when we pass it to completeWithErrorResponse.", "url": "https://github.com/ConsenSys/teku/pull/2309#discussion_r449385292", "createdAt": "2020-07-03T05:40:09Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/beaconchain/methods/BeaconBlocksByRangeMessageHandler.java", "diffHunk": "@@ -45,6 +46,10 @@\n   static final RpcException INVALID_STEP =\n       new RpcException(INVALID_REQUEST_CODE, \"Step must be greater than zero\");\n \n+  private static final RpcException TOO_MANY_BLOCKS =\n+      new RpcException(\n+          INVALID_REQUEST_CODE, \"Only a maximum of \" + MAX_REQUEST_BLOCKS + \" can per request\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM4NDYyNA=="}, "originalCommit": {"oid": "bb4fe53e68179ad9fabfbfadc28b06c18ba8e168"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTA1MTE3OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/beaconchain/methods/BeaconBlocksByRangeMessageHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNTozNzo1NlrOGskROg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNTozNzo1NlrOGskROg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM4NDc2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } else if (message.getCount().compareTo(UnsignedLong.valueOf(MAX_REQUEST_BLOCKS)) > 0) {\n          \n          \n            \n                  callback.completeWithErrorResponse(TOO_MANY_BLOCKS);\n          \n          \n            \n                }\n          \n          \n            \n                }\n          \n          \n            \n                if (message.getCount().compareTo(UnsignedLong.valueOf(MAX_REQUEST_BLOCKS)) > 0) {\n          \n          \n            \n                  callback.completeWithErrorResponse(TOO_MANY_BLOCKS);\n          \n          \n            \n                  return;\n          \n          \n            \n                }", "url": "https://github.com/ConsenSys/teku/pull/2309#discussion_r449384762", "createdAt": "2020-07-03T05:37:56Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/beaconchain/methods/BeaconBlocksByRangeMessageHandler.java", "diffHunk": "@@ -62,12 +67,14 @@ public void onIncomingMessage(\n     LOG.trace(\n         \"Peer {} requested {} BeaconBlocks starting at slot {} with step {}\",\n         peer.getId(),\n-        message.getStartSlot(),\n         message.getCount(),\n+        message.getStartSlot(),\n         message.getStep());\n     if (message.getStep().compareTo(ONE) < 0) {\n       callback.completeWithErrorResponse(INVALID_STEP);\n       return;\n+    } else if (message.getCount().compareTo(UnsignedLong.valueOf(MAX_REQUEST_BLOCKS)) > 0) {\n+      callback.completeWithErrorResponse(TOO_MANY_BLOCKS);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb4fe53e68179ad9fabfbfadc28b06c18ba8e168"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3512, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}