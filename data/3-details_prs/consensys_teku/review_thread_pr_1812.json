{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5ODc4MzEy", "number": 1812, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0NDo1OFrOD94hZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODoyNTozN1rOD965TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjE1NzgzOnYy", "diffSide": "RIGHT", "path": ".circleci/config.yml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0NDo1OFrOGXpUeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo1NzoxNVrOGXuV8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NzQxNw==", "bodyText": "Why are we separating the compiling of reference tests from the Assemble command?", "url": "https://github.com/ConsenSys/teku/pull/1812#discussion_r427447417", "createdAt": "2020-05-19T16:44:58Z", "author": {"login": "cemozerr"}, "path": ".circleci/config.yml", "diffHunk": "@@ -195,11 +196,15 @@ jobs:\n             then\n               ./gradlew --no-daemon expandRefTests\n             fi\n+      - run:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ce9c521c17d1564cc29bb7f907b1384c01cbb65"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyOTcxMg==", "bodyText": "Because we can't compile the reference tests until we've generated the sources and can't do that until we've actually got the eth2.0-reference-test stuff expanded.  And we only do that in the referenceTest job.", "url": "https://github.com/ConsenSys/teku/pull/1812#discussion_r427529712", "createdAt": "2020-05-19T18:57:15Z", "author": {"login": "ajsutton"}, "path": ".circleci/config.yml", "diffHunk": "@@ -195,11 +196,15 @@ jobs:\n             then\n               ./gradlew --no-daemon expandRefTests\n             fi\n+      - run:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NzQxNw=="}, "originalCommit": {"oid": "7ce9c521c17d1564cc29bb7f907b1384c01cbb65"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjM0Mzk3OnYy", "diffSide": "RIGHT", "path": "eth-reference-tests/src/referenceTest/java/tech/pegasys/teku/reference/phase0/ssz_static/SszTestExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzozMzowNVrOGXrL7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo1Nzo0OVrOGXuXkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3Nzk5OQ==", "bodyText": "Why are we ignoring these tests?", "url": "https://github.com/ConsenSys/teku/pull/1812#discussion_r427477999", "createdAt": "2020-05-19T17:33:05Z", "author": {"login": "cemozerr"}, "path": "eth-reference-tests/src/referenceTest/java/tech/pegasys/teku/reference/phase0/ssz_static/SszTestExecutor.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.reference.phase0.ssz_static;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlockBody;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlockHeader;\n+import tech.pegasys.teku.datastructures.blocks.Eth1Data;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlockHeader;\n+import tech.pegasys.teku.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.Deposit;\n+import tech.pegasys.teku.datastructures.operations.DepositData;\n+import tech.pegasys.teku.datastructures.operations.DepositMessage;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.operations.VoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconStateImpl;\n+import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.datastructures.state.Fork;\n+import tech.pegasys.teku.datastructures.state.ForkData;\n+import tech.pegasys.teku.datastructures.state.HistoricalBatch;\n+import tech.pegasys.teku.datastructures.state.PendingAttestation;\n+import tech.pegasys.teku.datastructures.state.Validator;\n+import tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer;\n+import tech.pegasys.teku.ethtests.finder.TestDefinition;\n+import tech.pegasys.teku.reference.phase0.TestDataUtils;\n+import tech.pegasys.teku.reference.phase0.TestExecutor;\n+import tech.pegasys.teku.ssz.sos.SimpleOffsetSerializable;\n+import tech.pegasys.teku.util.hashtree.Merkleizable;\n+\n+public class SszTestExecutor<T extends SimpleOffsetSerializable & Merkleizable>\n+    implements TestExecutor {\n+  private final Class<T> clazz;\n+\n+  public static ImmutableMap<String, TestExecutor> SSZ_TEST_TYPES =\n+      ImmutableMap.<String, TestExecutor>builder()\n+          // SSZ Static\n+          .put(\"ssz_static/AggregateAndProof\", new SszTestExecutor<>(AggregateAndProof.class))\n+          .put(\"ssz_static/Attestation\", new SszTestExecutor<>(Attestation.class))\n+          .put(\"ssz_static/AttestationData\", new SszTestExecutor<>(AttestationData.class))\n+          .put(\"ssz_static/AttesterSlashing\", new SszTestExecutor<>(AttesterSlashing.class))\n+          .put(\"ssz_static/BeaconBlock\", new SszTestExecutor<>(BeaconBlock.class))\n+          .put(\"ssz_static/BeaconBlockBody\", new SszTestExecutor<>(BeaconBlockBody.class))\n+          .put(\"ssz_static/BeaconBlockHeader\", new SszTestExecutor<>(BeaconBlockHeader.class))\n+          .put(\"ssz_static/BeaconState\", new SszTestExecutor<>(BeaconStateImpl.class))\n+          .put(\"ssz_static/Checkpoint\", new SszTestExecutor<>(Checkpoint.class))\n+          .put(\"ssz_static/Deposit\", new SszTestExecutor<>(Deposit.class))\n+          .put(\"ssz_static/DepositData\", new SszTestExecutor<>(DepositData.class))\n+          .put(\"ssz_static/DepositMessage\", new SszTestExecutor<>(DepositMessage.class))\n+          .put(\"ssz_static/Eth1Block\", IGNORE_TESTS) // We don't have an Eth1Block structure\n+          .put(\"ssz_static/Eth1Data\", new SszTestExecutor<>(Eth1Data.class))\n+          .put(\"ssz_static/Fork\", new SszTestExecutor<>(Fork.class))\n+          .put(\"ssz_static/ForkData\", new SszTestExecutor<>(ForkData.class))\n+          .put(\"ssz_static/HistoricalBatch\", new SszTestExecutor<>(HistoricalBatch.class))\n+          .put(\"ssz_static/IndexedAttestation\", new SszTestExecutor<>(IndexedAttestation.class))\n+          .put(\"ssz_static/PendingAttestation\", new SszTestExecutor<>(PendingAttestation.class))\n+          .put(\"ssz_static/ProposerSlashing\", new SszTestExecutor<>(ProposerSlashing.class))\n+          .put(\n+              \"ssz_static/SignedAggregateAndProof\",\n+              new SszTestExecutor<>(SignedAggregateAndProof.class))\n+          .put(\"ssz_static/SignedBeaconBlock\", new SszTestExecutor<>(SignedBeaconBlock.class))\n+          .put(\n+              \"ssz_static/SignedBeaconBlockHeader\",\n+              new SszTestExecutor<>(SignedBeaconBlockHeader.class))\n+          .put(\"ssz_static/SignedVoluntaryExit\", new SszTestExecutor<>(SignedVoluntaryExit.class))\n+          .put(\"ssz_static/SigningRoot\", IGNORE_TESTS) // TODO: Should make this work\n+          .put(\"ssz_static/Validator\", new SszTestExecutor<>(Validator.class))\n+          .put(\"ssz_static/VoluntaryExit\", new SszTestExecutor<>(VoluntaryExit.class))\n+\n+          // SSZ Generic\n+          .put(\"ssz_generic/basic_vector\", IGNORE_TESTS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ce9c521c17d1564cc29bb7f907b1384c01cbb65"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUzMDEzMQ==", "bodyText": "We've never run the ssz_generic tests previously.  Would be good to enable at least some of them like bitvector and bitlist which should be a lot simpler now.", "url": "https://github.com/ConsenSys/teku/pull/1812#discussion_r427530131", "createdAt": "2020-05-19T18:57:49Z", "author": {"login": "ajsutton"}, "path": "eth-reference-tests/src/referenceTest/java/tech/pegasys/teku/reference/phase0/ssz_static/SszTestExecutor.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.reference.phase0.ssz_static;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlockBody;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlockHeader;\n+import tech.pegasys.teku.datastructures.blocks.Eth1Data;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlockHeader;\n+import tech.pegasys.teku.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.Deposit;\n+import tech.pegasys.teku.datastructures.operations.DepositData;\n+import tech.pegasys.teku.datastructures.operations.DepositMessage;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.operations.VoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconStateImpl;\n+import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.datastructures.state.Fork;\n+import tech.pegasys.teku.datastructures.state.ForkData;\n+import tech.pegasys.teku.datastructures.state.HistoricalBatch;\n+import tech.pegasys.teku.datastructures.state.PendingAttestation;\n+import tech.pegasys.teku.datastructures.state.Validator;\n+import tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer;\n+import tech.pegasys.teku.ethtests.finder.TestDefinition;\n+import tech.pegasys.teku.reference.phase0.TestDataUtils;\n+import tech.pegasys.teku.reference.phase0.TestExecutor;\n+import tech.pegasys.teku.ssz.sos.SimpleOffsetSerializable;\n+import tech.pegasys.teku.util.hashtree.Merkleizable;\n+\n+public class SszTestExecutor<T extends SimpleOffsetSerializable & Merkleizable>\n+    implements TestExecutor {\n+  private final Class<T> clazz;\n+\n+  public static ImmutableMap<String, TestExecutor> SSZ_TEST_TYPES =\n+      ImmutableMap.<String, TestExecutor>builder()\n+          // SSZ Static\n+          .put(\"ssz_static/AggregateAndProof\", new SszTestExecutor<>(AggregateAndProof.class))\n+          .put(\"ssz_static/Attestation\", new SszTestExecutor<>(Attestation.class))\n+          .put(\"ssz_static/AttestationData\", new SszTestExecutor<>(AttestationData.class))\n+          .put(\"ssz_static/AttesterSlashing\", new SszTestExecutor<>(AttesterSlashing.class))\n+          .put(\"ssz_static/BeaconBlock\", new SszTestExecutor<>(BeaconBlock.class))\n+          .put(\"ssz_static/BeaconBlockBody\", new SszTestExecutor<>(BeaconBlockBody.class))\n+          .put(\"ssz_static/BeaconBlockHeader\", new SszTestExecutor<>(BeaconBlockHeader.class))\n+          .put(\"ssz_static/BeaconState\", new SszTestExecutor<>(BeaconStateImpl.class))\n+          .put(\"ssz_static/Checkpoint\", new SszTestExecutor<>(Checkpoint.class))\n+          .put(\"ssz_static/Deposit\", new SszTestExecutor<>(Deposit.class))\n+          .put(\"ssz_static/DepositData\", new SszTestExecutor<>(DepositData.class))\n+          .put(\"ssz_static/DepositMessage\", new SszTestExecutor<>(DepositMessage.class))\n+          .put(\"ssz_static/Eth1Block\", IGNORE_TESTS) // We don't have an Eth1Block structure\n+          .put(\"ssz_static/Eth1Data\", new SszTestExecutor<>(Eth1Data.class))\n+          .put(\"ssz_static/Fork\", new SszTestExecutor<>(Fork.class))\n+          .put(\"ssz_static/ForkData\", new SszTestExecutor<>(ForkData.class))\n+          .put(\"ssz_static/HistoricalBatch\", new SszTestExecutor<>(HistoricalBatch.class))\n+          .put(\"ssz_static/IndexedAttestation\", new SszTestExecutor<>(IndexedAttestation.class))\n+          .put(\"ssz_static/PendingAttestation\", new SszTestExecutor<>(PendingAttestation.class))\n+          .put(\"ssz_static/ProposerSlashing\", new SszTestExecutor<>(ProposerSlashing.class))\n+          .put(\n+              \"ssz_static/SignedAggregateAndProof\",\n+              new SszTestExecutor<>(SignedAggregateAndProof.class))\n+          .put(\"ssz_static/SignedBeaconBlock\", new SszTestExecutor<>(SignedBeaconBlock.class))\n+          .put(\n+              \"ssz_static/SignedBeaconBlockHeader\",\n+              new SszTestExecutor<>(SignedBeaconBlockHeader.class))\n+          .put(\"ssz_static/SignedVoluntaryExit\", new SszTestExecutor<>(SignedVoluntaryExit.class))\n+          .put(\"ssz_static/SigningRoot\", IGNORE_TESTS) // TODO: Should make this work\n+          .put(\"ssz_static/Validator\", new SszTestExecutor<>(Validator.class))\n+          .put(\"ssz_static/VoluntaryExit\", new SszTestExecutor<>(VoluntaryExit.class))\n+\n+          // SSZ Generic\n+          .put(\"ssz_generic/basic_vector\", IGNORE_TESTS)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3Nzk5OQ=="}, "originalCommit": {"oid": "7ce9c521c17d1564cc29bb7f907b1384c01cbb65"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjU0NjY4OnYy", "diffSide": "RIGHT", "path": "eth-tests/src/main/java/tech/pegasys/teku/ethtests/finder/ShufflingTestFinder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODoyNTozN1rOGXtMbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo1ODozOFrOGXuZVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxMDg5Mg==", "bodyText": "Would it make sense for these TestFinder classes to throw if they don't find any tests? Since that is unexpected.", "url": "https://github.com/ConsenSys/teku/pull/1812#discussion_r427510892", "createdAt": "2020-05-19T18:25:37Z", "author": {"login": "cemozerr"}, "path": "eth-tests/src/main/java/tech/pegasys/teku/ethtests/finder/ShufflingTestFinder.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.ethtests.finder;\n+\n+import com.google.errorprone.annotations.MustBeClosed;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.stream.Stream;\n+\n+public class ShufflingTestFinder implements TestFinder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ce9c521c17d1564cc29bb7f907b1384c01cbb65"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUzMDU4Mg==", "bodyText": "It's expected that they won't find tests in some cases - for example there are no shuffling tests under general and no genesis tests under mainnet.", "url": "https://github.com/ConsenSys/teku/pull/1812#discussion_r427530582", "createdAt": "2020-05-19T18:58:38Z", "author": {"login": "ajsutton"}, "path": "eth-tests/src/main/java/tech/pegasys/teku/ethtests/finder/ShufflingTestFinder.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.ethtests.finder;\n+\n+import com.google.errorprone.annotations.MustBeClosed;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.stream.Stream;\n+\n+public class ShufflingTestFinder implements TestFinder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUxMDg5Mg=="}, "originalCommit": {"oid": "7ce9c521c17d1564cc29bb7f907b1384c01cbb65"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3641, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}