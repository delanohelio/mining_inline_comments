{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4ODE3Nzc2", "number": 2483, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDoyMDowN1rOETg2_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDoyMDowN1rOETg2_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODk2NzY1OnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/store/Store.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDoyMDowN1rOG5Sg5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNDoyMDowN1rOG5Sg5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyNTM0OQ==", "bodyText": "The counter fields aren't volatile so we should take a writeLock while creating these. Otherwise when we come to update them we may wind up getting a partially initialised object because there's no guarantee of visibility across threads.\nAll the places we'd update it would also have the write lock already so that works out nicer than making the fields volatile.", "url": "https://github.com/ConsenSys/teku/pull/2483#discussion_r462725349", "createdAt": "2020-07-30T04:20:07Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/Store.java", "diffHunk": "@@ -191,21 +195,27 @@\n    */\n   @Override\n   public void startMetrics() {\n-    metricsSystem.createIntegerGauge(\n-        TekuMetricCategory.STORAGE,\n-        \"memory_state_count\",\n-        \"Number of beacon states held in the in-memory store\",\n-        this::countStates);\n-    metricsSystem.createIntegerGauge(\n-        TekuMetricCategory.STORAGE,\n-        \"memory_block_count\",\n-        \"Number of beacon blocks held in the in-memory store\",\n-        this::countBlocks);\n-    metricsSystem.createIntegerGauge(\n-        TekuMetricCategory.STORAGE,\n-        \"memory_checkpoint_state_count\",\n-        \"Number of checkpoint states held in the in-memory store\",\n-        this::countCheckpointStates);\n+    stateCountGauge =\n+        Optional.of(\n+            SettableGauge.create(\n+                metricsSystem,\n+                TekuMetricCategory.STORAGE,\n+                \"memory_state_count\",\n+                \"Number of beacon states held in the in-memory store\"));\n+    blockCountGauge =\n+        Optional.of(\n+            SettableGauge.create(\n+                metricsSystem,\n+                TekuMetricCategory.STORAGE,\n+                \"memory_block_count\",\n+                \"Number of beacon blocks held in the in-memory store\"));\n+    checkpointCountGauge =\n+        Optional.of(\n+            SettableGauge.create(\n+                metricsSystem,\n+                TekuMetricCategory.STORAGE,\n+                \"memory_checkpoint_state_count\",\n+                \"Number of checkpoint states held in the in-memory store\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6b71b5227a97ad040016cd3d47407942a3870bb"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3447, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}