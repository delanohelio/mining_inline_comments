{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NTA3Mzk4", "number": 1207, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMjoxNjo1OFrODhTkTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMjoxOTowOVrODhToVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjUwMTkwOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconChainHeadHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMjoxNjo1OFrOFr_hyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMzowNToyMlrOFsBFoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY3MzkzMA==", "bodyText": "I'd have expected that finalizedCheckpoint and justifiedCheckpoint are null not just the root inside them. But if we already have a BestBlockRoot then we must be post-genesis and so not need any null checks here (at genesis the justified and finalised checkpoints are set to the genesis state and they move forward from there).", "url": "https://github.com/ConsenSys/teku/pull/1207#discussion_r381673930", "createdAt": "2020-02-20T02:16:58Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconChainHeadHandler.java", "diffHunk": "@@ -59,29 +59,32 @@ public BeaconChainHeadHandler(ChainStorageClient client) {\n   @Override\n   public void handle(Context ctx) {\n     Bytes32 head_block_root = client.getBestBlockRoot();\n+    if (head_block_root == null) {\n+      ctx.status(SC_NO_CONTENT);\n+      return;\n+    }\n \n-    UnsignedLong head_block_slot = client.getBestSlot();\n-    UnsignedLong finalized_epoch = client.getFinalizedEpoch();\n-    Bytes32 finalized_root = client.getFinalizedRoot();\n-    UnsignedLong justified_epoch = client.getJustifiedEpoch();\n-    Bytes32 justified_root = client.getJustifiedRoot();\n+    // derive all other state from the head_block_root\n+    BeaconState beaconState = client.getStore().getBlockState(head_block_root);\n+    Checkpoint finalizedCheckpoint = beaconState.getFinalized_checkpoint();\n+    Checkpoint justifiedCheckpoint = beaconState.getCurrent_justified_checkpoint();\n \n-    if (head_block_root == null || finalized_root == null || justified_root == null) {\n+    if (finalizedCheckpoint.getRoot() == null || justifiedCheckpoint.getRoot() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f28c43321d466a49c73801b9ef100c57928b7a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY5OTQ4OQ==", "bodyText": "removed that check", "url": "https://github.com/ConsenSys/teku/pull/1207#discussion_r381699489", "createdAt": "2020-02-20T03:05:22Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconChainHeadHandler.java", "diffHunk": "@@ -59,29 +59,32 @@ public BeaconChainHeadHandler(ChainStorageClient client) {\n   @Override\n   public void handle(Context ctx) {\n     Bytes32 head_block_root = client.getBestBlockRoot();\n+    if (head_block_root == null) {\n+      ctx.status(SC_NO_CONTENT);\n+      return;\n+    }\n \n-    UnsignedLong head_block_slot = client.getBestSlot();\n-    UnsignedLong finalized_epoch = client.getFinalizedEpoch();\n-    Bytes32 finalized_root = client.getFinalizedRoot();\n-    UnsignedLong justified_epoch = client.getJustifiedEpoch();\n-    Bytes32 justified_root = client.getJustifiedRoot();\n+    // derive all other state from the head_block_root\n+    BeaconState beaconState = client.getStore().getBlockState(head_block_root);\n+    Checkpoint finalizedCheckpoint = beaconState.getFinalized_checkpoint();\n+    Checkpoint justifiedCheckpoint = beaconState.getCurrent_justified_checkpoint();\n \n-    if (head_block_root == null || finalized_root == null || justified_root == null) {\n+    if (finalizedCheckpoint.getRoot() == null || justifiedCheckpoint.getRoot() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY3MzkzMA=="}, "originalCommit": {"oid": "f5f28c43321d466a49c73801b9ef100c57928b7a"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjUxMjIxOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconChainHeadHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMjoxOTowOVrOFr_mqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMzoxMTo1NVrOFsBS5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY3NTE3Ng==", "bodyText": "I generally wouldn't mock data objects like BeaconState.  Just use DataStructureUtil.randomBeaconState.", "url": "https://github.com/ConsenSys/teku/pull/1207#discussion_r381675176", "createdAt": "2020-02-20T02:19:09Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconChainHeadHandlerTest.java", "diffHunk": "@@ -17,45 +17,43 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n \n import com.google.common.primitives.UnsignedLong;\n import io.javalin.http.Context;\n import org.apache.tuweni.bytes.Bytes32;\n import org.junit.jupiter.api.Test;\n import tech.pegasys.artemis.beaconrestapi.schema.BeaconChainHeadResponse;\n-import tech.pegasys.artemis.datastructures.util.BeaconStateUtil;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.Checkpoint;\n import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.Store;\n \n public class BeaconChainHeadHandlerTest {\n   private Context context = mock(Context.class);\n   private ChainStorageClient storageClient = mock(ChainStorageClient.class);\n+  private Store store = mock(Store.class);\n+  private BeaconState beaconState = mock(BeaconState.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f28c43321d466a49c73801b9ef100c57928b7a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcwMjg4Ng==", "bodyText": "fixed", "url": "https://github.com/ConsenSys/teku/pull/1207#discussion_r381702886", "createdAt": "2020-02-20T03:11:55Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconChainHeadHandlerTest.java", "diffHunk": "@@ -17,45 +17,43 @@\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n \n import com.google.common.primitives.UnsignedLong;\n import io.javalin.http.Context;\n import org.apache.tuweni.bytes.Bytes32;\n import org.junit.jupiter.api.Test;\n import tech.pegasys.artemis.beaconrestapi.schema.BeaconChainHeadResponse;\n-import tech.pegasys.artemis.datastructures.util.BeaconStateUtil;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.Checkpoint;\n import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.Store;\n \n public class BeaconChainHeadHandlerTest {\n   private Context context = mock(Context.class);\n   private ChainStorageClient storageClient = mock(ChainStorageClient.class);\n+  private Store store = mock(Store.class);\n+  private BeaconState beaconState = mock(BeaconState.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY3NTE3Ng=="}, "originalCommit": {"oid": "f5f28c43321d466a49c73801b9ef100c57928b7a"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2645, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}