{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2OTY3NzAz", "number": 1362, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDowNDozMFrODnSzZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDo1MToyMFrODnVSCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTI5MTI1OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/GetValidatorDutiesTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDowNDozMFrOF1NUPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDowNTo1OFrOF1QnxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzNzAyMw==", "bodyText": "We shouldn't need to use MockitoExtension because we're using the static mock method to create mocks.  We shouldn't actually have it even on the class path to force us to be consistent but somehow it snuck in...", "url": "https://github.com/ConsenSys/teku/pull/1362#discussion_r391337023", "createdAt": "2020-03-12T00:04:30Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/GetValidatorDutiesTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.handlers.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import java.util.Optional;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+@ExtendWith(MockitoExtension.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a139f24ab8b9df3694ec64e1f1b76669bfbf9bda"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MTE3Mg==", "bodyText": "this is the way we currently use @captor - without it that won't work. we can investigate how to fix that, but maybe not in this PR, as it's a pretty common pattern...", "url": "https://github.com/ConsenSys/teku/pull/1362#discussion_r391391172", "createdAt": "2020-03-12T04:05:58Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/GetValidatorDutiesTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.handlers.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import java.util.Optional;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+@ExtendWith(MockitoExtension.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzNzAyMw=="}, "originalCommit": {"oid": "a139f24ab8b9df3694ec64e1f1b76669bfbf9bda"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTYzNDI3OnYy", "diffSide": "LEFT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/RestApiConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDowMjozMlrOF1QlSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDozODo0NFrOF1RApg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MDUzOA==", "bodyText": "nit: it was alphabetic order...", "url": "https://github.com/ConsenSys/teku/pull/1362#discussion_r391390538", "createdAt": "2020-03-12T04:02:32Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/RestApiConstants.java", "diffHunk": "@@ -23,9 +23,9 @@\n   public static final String COMMITTEE_INDEX = \"committee_index\";\n \n   public static final String TAG_BEACON = \"Beacon\";\n+  public static final String TAG_VALIDATOR = \"Validator\";\n   public static final String TAG_NODE = \"Node\";\n   public static final String TAG_NETWORK = \"Network\";\n-  public static final String TAG_VALIDATOR = \"Validator\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef35cd95e2f4677db6ab584c66ec29db1ed8b77"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5NzU0Mg==", "bodyText": "fixed", "url": "https://github.com/ConsenSys/teku/pull/1362#discussion_r391397542", "createdAt": "2020-03-12T04:38:44Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/RestApiConstants.java", "diffHunk": "@@ -23,9 +23,9 @@\n   public static final String COMMITTEE_INDEX = \"committee_index\";\n \n   public static final String TAG_BEACON = \"Beacon\";\n+  public static final String TAG_VALIDATOR = \"Validator\";\n   public static final String TAG_NODE = \"Node\";\n   public static final String TAG_NETWORK = \"Network\";\n-  public static final String TAG_VALIDATOR = \"Validator\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MDUzOA=="}, "originalCommit": {"oid": "9ef35cd95e2f4677db6ab584c66ec29db1ed8b77"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTYzNDU5OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/GetValidatorDuties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDowMjo1OFrOF1Qlkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDo0MTowMlrOF1RCVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MDYxMA==", "bodyText": "PostValidatorDuties...", "url": "https://github.com/ConsenSys/teku/pull/1362#discussion_r391390610", "createdAt": "2020-03-12T04:02:58Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/GetValidatorDuties.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.handlers.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.NO_CONTENT_PRE_GENESIS;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.ValidatorDuties;\n+import tech.pegasys.artemis.api.schema.ValidatorsRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class GetValidatorDuties implements Handler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef35cd95e2f4677db6ab584c66ec29db1ed8b77"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5Nzk3NQ==", "bodyText": "fixed", "url": "https://github.com/ConsenSys/teku/pull/1362#discussion_r391397975", "createdAt": "2020-03-12T04:41:02Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/GetValidatorDuties.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.handlers.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.NO_CONTENT_PRE_GENESIS;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.ValidatorDuties;\n+import tech.pegasys.artemis.api.schema.ValidatorsRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class GetValidatorDuties implements Handler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MDYxMA=="}, "originalCommit": {"oid": "9ef35cd95e2f4677db6ab584c66ec29db1ed8b77"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTYzNTc5OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/GetValidatorDuties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDowNDowMFrOF1QmTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDo0MzoxMlrOF1RD7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MDc5Nw==", "bodyText": "you can add a description here that can be handy:\ndescription = \"```\\n{\\n  \\\"epoch\\\": (uint64),\\n  \\\"pubkeys\\\": [(Bytes48 as Hex String)]\\n}\\n```\"", "url": "https://github.com/ConsenSys/teku/pull/1362#discussion_r391390797", "createdAt": "2020-03-12T04:04:00Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/GetValidatorDuties.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.handlers.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.NO_CONTENT_PRE_GENESIS;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.ValidatorDuties;\n+import tech.pegasys.artemis.api.schema.ValidatorsRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class GetValidatorDuties implements Handler {\n+  private final ChainDataProvider provider;\n+\n+  public GetValidatorDuties(final ChainDataProvider provider, final JsonProvider jsonProvider) {\n+    this.provider = provider;\n+    this.jsonProvider = jsonProvider;\n+  }\n+\n+  public static final String ROUTE = \"/validator/duties\";\n+  private final JsonProvider jsonProvider;\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.POST,\n+      summary = \"Returns validator duties that match the specified query.\",\n+      tags = {TAG_VALIDATOR},\n+      description = \"Returns validator duties for the given epoch.\",\n+      requestBody = @OpenApiRequestBody(content = @OpenApiContent(from = ValidatorsRequest.class)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef35cd95e2f4677db6ab584c66ec29db1ed8b77"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5ODM4MA==", "bodyText": "done", "url": "https://github.com/ConsenSys/teku/pull/1362#discussion_r391398380", "createdAt": "2020-03-12T04:43:12Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/GetValidatorDuties.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.handlers.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.NO_CONTENT_PRE_GENESIS;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.ValidatorDuties;\n+import tech.pegasys.artemis.api.schema.ValidatorsRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class GetValidatorDuties implements Handler {\n+  private final ChainDataProvider provider;\n+\n+  public GetValidatorDuties(final ChainDataProvider provider, final JsonProvider jsonProvider) {\n+    this.provider = provider;\n+    this.jsonProvider = jsonProvider;\n+  }\n+\n+  public static final String ROUTE = \"/validator/duties\";\n+  private final JsonProvider jsonProvider;\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.POST,\n+      summary = \"Returns validator duties that match the specified query.\",\n+      tags = {TAG_VALIDATOR},\n+      description = \"Returns validator duties for the given epoch.\",\n+      requestBody = @OpenApiRequestBody(content = @OpenApiContent(from = ValidatorsRequest.class)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MDc5Nw=="}, "originalCommit": {"oid": "9ef35cd95e2f4677db6ab584c66ec29db1ed8b77"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTYzNjMwOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/GetValidatorDuties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDowNDoyMFrOF1QmjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDo0MjoyNlrOF1RDXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MDg2MA==", "bodyText": "add bad_request", "url": "https://github.com/ConsenSys/teku/pull/1362#discussion_r391390860", "createdAt": "2020-03-12T04:04:20Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/GetValidatorDuties.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.handlers.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.NO_CONTENT_PRE_GENESIS;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.ValidatorDuties;\n+import tech.pegasys.artemis.api.schema.ValidatorsRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class GetValidatorDuties implements Handler {\n+  private final ChainDataProvider provider;\n+\n+  public GetValidatorDuties(final ChainDataProvider provider, final JsonProvider jsonProvider) {\n+    this.provider = provider;\n+    this.jsonProvider = jsonProvider;\n+  }\n+\n+  public static final String ROUTE = \"/validator/duties\";\n+  private final JsonProvider jsonProvider;\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.POST,\n+      summary = \"Returns validator duties that match the specified query.\",\n+      tags = {TAG_VALIDATOR},\n+      description = \"Returns validator duties for the given epoch.\",\n+      requestBody = @OpenApiRequestBody(content = @OpenApiContent(from = ValidatorsRequest.class)),\n+      responses = {\n+        @OpenApiResponse(status = RES_OK, content = @OpenApiContent(from = ValidatorDuties.class)),\n+        @OpenApiResponse(status = RES_NO_CONTENT, description = NO_CONTENT_PRE_GENESIS),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ef35cd95e2f4677db6ab584c66ec29db1ed8b77"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5ODIzOQ==", "bodyText": "done", "url": "https://github.com/ConsenSys/teku/pull/1362#discussion_r391398239", "createdAt": "2020-03-12T04:42:26Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/GetValidatorDuties.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.handlers.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.NO_CONTENT_PRE_GENESIS;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.ValidatorDuties;\n+import tech.pegasys.artemis.api.schema.ValidatorsRequest;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class GetValidatorDuties implements Handler {\n+  private final ChainDataProvider provider;\n+\n+  public GetValidatorDuties(final ChainDataProvider provider, final JsonProvider jsonProvider) {\n+    this.provider = provider;\n+    this.jsonProvider = jsonProvider;\n+  }\n+\n+  public static final String ROUTE = \"/validator/duties\";\n+  private final JsonProvider jsonProvider;\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.POST,\n+      summary = \"Returns validator duties that match the specified query.\",\n+      tags = {TAG_VALIDATOR},\n+      description = \"Returns validator duties for the given epoch.\",\n+      requestBody = @OpenApiRequestBody(content = @OpenApiContent(from = ValidatorsRequest.class)),\n+      responses = {\n+        @OpenApiResponse(status = RES_OK, content = @OpenApiContent(from = ValidatorDuties.class)),\n+        @OpenApiResponse(status = RES_NO_CONTENT, description = NO_CONTENT_PRE_GENESIS),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM5MDg2MA=="}, "originalCommit": {"oid": "9ef35cd95e2f4677db6ab584c66ec29db1ed8b77"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTY5NzM4OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDo1MToyMFrOF1RLDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNDo1OTozMlrOF1RR5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMDIwNQ==", "bodyText": "int: I'm thinking it might be better to group the POSTs down the bottom initially, potentially at some point we might break them into separate setup functions...", "url": "https://github.com/ConsenSys/teku/pull/1362#discussion_r391400205", "createdAt": "2020-03-12T04:51:20Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -122,6 +123,7 @@ private void addBeaconHandlers(final DataProvider dataProvider) {\n \n   private void addValidatorHandlers(DataProvider dataProvider) {\n     ChainDataProvider provider = dataProvider.getChainDataProvider();\n+    app.post(PostValidatorDuties.ROUTE, new PostValidatorDuties(provider, jsonProvider));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76d707d15e71177c1a0676c90a4c1cfe37786f4b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMDk0Nw==", "bodyText": "do you want a new method or just put it at the bottom of the list?", "url": "https://github.com/ConsenSys/teku/pull/1362#discussion_r391400947", "createdAt": "2020-03-12T04:54:37Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -122,6 +123,7 @@ private void addBeaconHandlers(final DataProvider dataProvider) {\n \n   private void addValidatorHandlers(DataProvider dataProvider) {\n     ChainDataProvider provider = dataProvider.getChainDataProvider();\n+    app.post(PostValidatorDuties.ROUTE, new PostValidatorDuties(provider, jsonProvider));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMDIwNQ=="}, "originalCommit": {"oid": "76d707d15e71177c1a0676c90a4c1cfe37786f4b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMTk1OA==", "bodyText": "done", "url": "https://github.com/ConsenSys/teku/pull/1362#discussion_r391401958", "createdAt": "2020-03-12T04:59:32Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -122,6 +123,7 @@ private void addBeaconHandlers(final DataProvider dataProvider) {\n \n   private void addValidatorHandlers(DataProvider dataProvider) {\n     ChainDataProvider provider = dataProvider.getChainDataProvider();\n+    app.post(PostValidatorDuties.ROUTE, new PostValidatorDuties(provider, jsonProvider));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwMDIwNQ=="}, "originalCommit": {"oid": "76d707d15e71177c1a0676c90a4c1cfe37786f4b"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2538, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}