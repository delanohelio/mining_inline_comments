{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MzU4MTk0", "number": 1100, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDo0MDoyNlrODZruYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMjo0ODo0N1rODoUZnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjU3Mzc4OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/artemis/util/bls/BLSKeyPair.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDo0MDoyNlrOFgNcww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMTo0MzozOVrOFgZRhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxOTEwNw==", "bodyText": "It's generally better to avoid getters having to create the object they're returning.  Was there a reason we're now deferring the creation of these BLSPublicKey and BLSSecretKey objects?\nAdmittedly I normally don't like constructors creating new objects but given these are just wrappers the benefit of caching them seems to outweigh the slight unpleasantness of constructors doing \"work\".", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r369319107", "createdAt": "2020-01-22T00:40:26Z", "author": {"login": "ajsutton"}, "path": "util/src/main/java/tech/pegasys/artemis/util/bls/BLSKeyPair.java", "diffHunk": "@@ -28,20 +27,15 @@ public static BLSKeyPair random(int entropy) {\n     return new BLSKeyPair(KeyPair.random(entropy));\n   }\n \n-  public BLSKeyPair(BLSPublicKey publicKey, BLSSecretKey secretKey) {\n-    this.publicKey = publicKey;\n-    this.secretKey = secretKey;\n-  }\n-\n   public BLSKeyPair(KeyPair keyPair) {\n-    this(new BLSPublicKey(keyPair.publicKey()), new BLSSecretKey(keyPair.secretKey()));\n+    this.keyPair = keyPair;\n   }\n \n   public BLSPublicKey getPublicKey() {\n-    return publicKey;\n+    return new BLSPublicKey(keyPair.publicKey());\n   }\n \n   public BLSSecretKey getSecretKey() {\n-    return secretKey;\n+    return new BLSSecretKey(keyPair.secretKey());\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30f12a83d44975d14b1f5262f0858b810a00e7b7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUxMjgzNw==", "bodyText": "Yeah, I've reverted and improved this now. Not sure what I was thinking.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r369512837", "createdAt": "2020-01-22T11:43:39Z", "author": {"login": "benjaminion"}, "path": "util/src/main/java/tech/pegasys/artemis/util/bls/BLSKeyPair.java", "diffHunk": "@@ -28,20 +27,15 @@ public static BLSKeyPair random(int entropy) {\n     return new BLSKeyPair(KeyPair.random(entropy));\n   }\n \n-  public BLSKeyPair(BLSPublicKey publicKey, BLSSecretKey secretKey) {\n-    this.publicKey = publicKey;\n-    this.secretKey = secretKey;\n-  }\n-\n   public BLSKeyPair(KeyPair keyPair) {\n-    this(new BLSPublicKey(keyPair.publicKey()), new BLSSecretKey(keyPair.secretKey()));\n+    this.keyPair = keyPair;\n   }\n \n   public BLSPublicKey getPublicKey() {\n-    return publicKey;\n+    return new BLSPublicKey(keyPair.publicKey());\n   }\n \n   public BLSSecretKey getSecretKey() {\n-    return secretKey;\n+    return new BLSSecretKey(keyPair.secretKey());\n   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxOTEwNw=="}, "originalCommit": {"oid": "30f12a83d44975d14b1f5262f0858b810a00e7b7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjU3OTE2OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/artemis/util/config/Constants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDo0Mzo0OFrOFgNgGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMDo0Mzo0OFrOFgNgGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMxOTk2MA==", "bodyText": "Yay! Sanity!", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r369319960", "createdAt": "2020-01-22T00:43:48Z", "author": {"login": "ajsutton"}, "path": "util/src/main/java/tech/pegasys/artemis/util/config/Constants.java", "diffHunk": "@@ -210,21 +211,21 @@ public static void setConstants(String Constants) {\n       EFFECTIVE_BALANCE_INCREMENT = 1000000000L;\n \n       // Initial values\n-      GENESIS_SLOT = 0;\n-      GENESIS_EPOCH = 0;\n+      GENESIS_FORK_VERSION = new Bytes4(Bytes.fromHexString(\"0x00000001\"));\n       BLS_WITHDRAWAL_PREFIX = Bytes.wrap(new byte[1]);\n \n       // Time parameters\n+      MIN_GENESIS_DELAY = 300;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30f12a83d44975d14b1f5262f0858b810a00e7b7"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTE4Mzk2OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/ForkChoiceUtil.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzowODoyNFrOF1MTfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzoyNjo0MFrOF2Dj7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMDQ0Ng==", "bodyText": "The aim of these checks is to bail out before any processing is done if we don't have the block ancestor or other prerequisites.  We don't commit the transaction so any changes made to the store are discarded if we fail either of these checks.  So we should just combine them into one again.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r391320446", "createdAt": "2020-03-11T23:08:24Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/ForkChoiceUtil.java", "diffHunk": "@@ -290,15 +285,21 @@ public static BlockImportResult on_block(\n     final BeaconState preState = store.getBlockState(block.getParent_root());\n \n     // Return early if precondition checks fail;\n-    final Optional<BlockImportResult> maybeFailure =\n-        checkOnBlockPreconditions(block, preState, store);\n-    if (maybeFailure.isPresent()) {\n-      return maybeFailure.get();\n+    final Optional<BlockImportResult> maybeFailureOnPreStorageConditions =\n+        checkOnBlockPreStorageConditions(block, preState, store);\n+    if (maybeFailureOnPreStorageConditions.isPresent()) {\n+      return maybeFailureOnPreStorageConditions.get();\n     }\n \n     // Add new block to the store\n     store.putBlock(block.hash_tree_root(), signed_block);\n \n+    final Optional<BlockImportResult> maybeFailureOnPostStorageConditions =\n+        checkOnBlockPostStorageConditions(block, store);\n+    if (maybeFailureOnPostStorageConditions.isPresent()) {\n+      return maybeFailureOnPostStorageConditions.get();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwMTU4OQ==", "bodyText": "get_ancestor throws a NullPointerException if we combine these condition checks.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r391701589", "createdAt": "2020-03-12T15:28:58Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/ForkChoiceUtil.java", "diffHunk": "@@ -290,15 +285,21 @@ public static BlockImportResult on_block(\n     final BeaconState preState = store.getBlockState(block.getParent_root());\n \n     // Return early if precondition checks fail;\n-    final Optional<BlockImportResult> maybeFailure =\n-        checkOnBlockPreconditions(block, preState, store);\n-    if (maybeFailure.isPresent()) {\n-      return maybeFailure.get();\n+    final Optional<BlockImportResult> maybeFailureOnPreStorageConditions =\n+        checkOnBlockPreStorageConditions(block, preState, store);\n+    if (maybeFailureOnPreStorageConditions.isPresent()) {\n+      return maybeFailureOnPreStorageConditions.get();\n     }\n \n     // Add new block to the store\n     store.putBlock(block.hash_tree_root(), signed_block);\n \n+    final Optional<BlockImportResult> maybeFailureOnPostStorageConditions =\n+        checkOnBlockPostStorageConditions(block, store);\n+    if (maybeFailureOnPostStorageConditions.isPresent()) {\n+      return maybeFailureOnPostStorageConditions.get();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMDQ0Ng=="}, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwMjU3NA==", "bodyText": "Spec explicitly adds the block to the store before doing the 'postStorageConditionCheck' as I call here.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r391702574", "createdAt": "2020-03-12T15:30:29Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/ForkChoiceUtil.java", "diffHunk": "@@ -290,15 +285,21 @@ public static BlockImportResult on_block(\n     final BeaconState preState = store.getBlockState(block.getParent_root());\n \n     // Return early if precondition checks fail;\n-    final Optional<BlockImportResult> maybeFailure =\n-        checkOnBlockPreconditions(block, preState, store);\n-    if (maybeFailure.isPresent()) {\n-      return maybeFailure.get();\n+    final Optional<BlockImportResult> maybeFailureOnPreStorageConditions =\n+        checkOnBlockPreStorageConditions(block, preState, store);\n+    if (maybeFailureOnPreStorageConditions.isPresent()) {\n+      return maybeFailureOnPreStorageConditions.get();\n     }\n \n     // Add new block to the store\n     store.putBlock(block.hash_tree_root(), signed_block);\n \n+    final Optional<BlockImportResult> maybeFailureOnPostStorageConditions =\n+        checkOnBlockPostStorageConditions(block, store);\n+    if (maybeFailureOnPostStorageConditions.isPresent()) {\n+      return maybeFailureOnPostStorageConditions.get();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMDQ0Ng=="}, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwNDk3NA==", "bodyText": "Unless we add the block that is being processed here to the store, get_ancestor does not have access to this block and thus throws the NPE. In order to combine these checks and still not get the NPE, we'd need to change get_ancestor, which doesn't seem to be worth the trade-off especially since most of the fork choice is going to be modified during the protoArray change.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r391704974", "createdAt": "2020-03-12T15:34:03Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/ForkChoiceUtil.java", "diffHunk": "@@ -290,15 +285,21 @@ public static BlockImportResult on_block(\n     final BeaconState preState = store.getBlockState(block.getParent_root());\n \n     // Return early if precondition checks fail;\n-    final Optional<BlockImportResult> maybeFailure =\n-        checkOnBlockPreconditions(block, preState, store);\n-    if (maybeFailure.isPresent()) {\n-      return maybeFailure.get();\n+    final Optional<BlockImportResult> maybeFailureOnPreStorageConditions =\n+        checkOnBlockPreStorageConditions(block, preState, store);\n+    if (maybeFailureOnPreStorageConditions.isPresent()) {\n+      return maybeFailureOnPreStorageConditions.get();\n     }\n \n     // Add new block to the store\n     store.putBlock(block.hash_tree_root(), signed_block);\n \n+    final Optional<BlockImportResult> maybeFailureOnPostStorageConditions =\n+        checkOnBlockPostStorageConditions(block, store);\n+    if (maybeFailureOnPostStorageConditions.isPresent()) {\n+      return maybeFailureOnPostStorageConditions.get();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMDQ0Ng=="}, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0OTEyMg==", "bodyText": "Yeah, the spec has always added before doing all the checks and we deliberately moved away from that. :)\nWe already know that we have the block's parent on the chain, so we can just call get_ancestor(store, block.getParent_root(), finalizedSlot);.  Which is what we used to have.  This check hasn't actually changed, the spec just checks the slot first then the get_ancestor call whereas previously it did it the other way around.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r391949122", "createdAt": "2020-03-12T22:59:41Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/ForkChoiceUtil.java", "diffHunk": "@@ -290,15 +285,21 @@ public static BlockImportResult on_block(\n     final BeaconState preState = store.getBlockState(block.getParent_root());\n \n     // Return early if precondition checks fail;\n-    final Optional<BlockImportResult> maybeFailure =\n-        checkOnBlockPreconditions(block, preState, store);\n-    if (maybeFailure.isPresent()) {\n-      return maybeFailure.get();\n+    final Optional<BlockImportResult> maybeFailureOnPreStorageConditions =\n+        checkOnBlockPreStorageConditions(block, preState, store);\n+    if (maybeFailureOnPreStorageConditions.isPresent()) {\n+      return maybeFailureOnPreStorageConditions.get();\n     }\n \n     // Add new block to the store\n     store.putBlock(block.hash_tree_root(), signed_block);\n \n+    final Optional<BlockImportResult> maybeFailureOnPostStorageConditions =\n+        checkOnBlockPostStorageConditions(block, store);\n+    if (maybeFailureOnPostStorageConditions.isPresent()) {\n+      return maybeFailureOnPostStorageConditions.get();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMDQ0Ng=="}, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIyNTc3NA==", "bodyText": "Alright reverting. That makes sense.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r392225774", "createdAt": "2020-03-13T13:26:40Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/ForkChoiceUtil.java", "diffHunk": "@@ -290,15 +285,21 @@ public static BlockImportResult on_block(\n     final BeaconState preState = store.getBlockState(block.getParent_root());\n \n     // Return early if precondition checks fail;\n-    final Optional<BlockImportResult> maybeFailure =\n-        checkOnBlockPreconditions(block, preState, store);\n-    if (maybeFailure.isPresent()) {\n-      return maybeFailure.get();\n+    final Optional<BlockImportResult> maybeFailureOnPreStorageConditions =\n+        checkOnBlockPreStorageConditions(block, preState, store);\n+    if (maybeFailureOnPreStorageConditions.isPresent()) {\n+      return maybeFailureOnPreStorageConditions.get();\n     }\n \n     // Add new block to the store\n     store.putBlock(block.hash_tree_root(), signed_block);\n \n+    final Optional<BlockImportResult> maybeFailureOnPostStorageConditions =\n+        checkOnBlockPostStorageConditions(block, store);\n+    if (maybeFailureOnPostStorageConditions.isPresent()) {\n+      return maybeFailureOnPostStorageConditions.get();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyMDQ0Ng=="}, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTIyMjk0OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/ForkChoiceUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzoyODowMlrOF1MrEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0NDoyNlrOF1kMRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyNjQ4Mw==", "bodyText": "We expect that any justified checkpoint has a checkpoint state stored for it. Otherwise we'll throw NullPointerException when later processing attestations in get_latest_attesting_balance:\nBeaconState state = store.getCheckpointState(store.getJustifiedCheckpoint());\nThe fork choice spec actually does this store because it says to run on_attestation on every received attestation whether by gossip included in a block.  Apart from the validation checks for attestations, that ensures that the target state is in store.checkpoint_states and that store.latest_messages gets updates based on the attestation.\nSo storing these checkpoint states is part of the on_attestation processing.  The other half is updating latest messages which a ticket is open for (but unclear on how important it is to do when we're syncing such old blocks).\nTechnically, we're storing fewer checkpoint states that the spec implementation.  on_attestation would store the checkpoint state for the target of any attestation, we only store it when there are enough attestations to make it the best justified or justified state.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r391326483", "createdAt": "2020-03-11T23:28:02Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/ForkChoiceUtil.java", "diffHunk": "@@ -318,11 +319,13 @@ public static BlockImportResult on_block(\n       try {\n         if (justifiedCheckpoint.getEpoch().compareTo(store.getBestJustifiedCheckpoint().getEpoch())\n             > 0) {\n+          // TODO: Fork Choice Spec does not necessarily ask us to store this checkpoint state\n           storeCheckpointState(\n               store, st, justifiedCheckpoint, store.getBlockState(justifiedCheckpoint.getRoot()));\n           store.setBestJustifiedCheckpoint(justifiedCheckpoint);\n         }\n         if (should_update_justified_checkpoint(store, justifiedCheckpoint)) {\n+          // TODO: Fork Choice Spec does not necessarily ask us to store this checkpoint state", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxMTgxMw==", "bodyText": "Makes sense.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r391711813", "createdAt": "2020-03-12T15:44:26Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/ForkChoiceUtil.java", "diffHunk": "@@ -318,11 +319,13 @@ public static BlockImportResult on_block(\n       try {\n         if (justifiedCheckpoint.getEpoch().compareTo(store.getBestJustifiedCheckpoint().getEpoch())\n             > 0) {\n+          // TODO: Fork Choice Spec does not necessarily ask us to store this checkpoint state\n           storeCheckpointState(\n               store, st, justifiedCheckpoint, store.getBlockState(justifiedCheckpoint.getRoot()));\n           store.setBestJustifiedCheckpoint(justifiedCheckpoint);\n         }\n         if (should_update_justified_checkpoint(store, justifiedCheckpoint)) {\n+          // TODO: Fork Choice Spec does not necessarily ask us to store this checkpoint state", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyNjQ4Mw=="}, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTIyNjY1OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/ForkChoiceUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzozMDowM1rOF1MtbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0NDo0NlrOF1kNHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyNzA4NQ==", "bodyText": "The only case where this actually fails is if we're asking process_slots to go backwards (ie get to a slot prior to the starting state slot) - since we're definitely not doing that, the exception handling is just annoying boilerplate.\nPer the spec we should be applying all of on_attestation to all attestations in the block which would trigger this same processing anyway.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r391327085", "createdAt": "2020-03-11T23:30:03Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/ForkChoiceUtil.java", "diffHunk": "@@ -335,27 +338,46 @@ public static BlockImportResult on_block(\n     // Update finalized checkpoint\n     final Checkpoint finalizedCheckpoint = state.getFinalized_checkpoint();\n     if (finalizedCheckpoint.getEpoch().compareTo(store.getFinalizedCheckpoint().getEpoch()) > 0) {\n+      // TODO: Fork Choice Spec does not necessarily ask us to store this checkpoint state, so if we\n+      // do error here and exit, we will possibly have acted differently than other nodes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxMjAyOA==", "bodyText": "I see.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r391712028", "createdAt": "2020-03-12T15:44:46Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/ForkChoiceUtil.java", "diffHunk": "@@ -335,27 +338,46 @@ public static BlockImportResult on_block(\n     // Update finalized checkpoint\n     final Checkpoint finalizedCheckpoint = state.getFinalized_checkpoint();\n     if (finalizedCheckpoint.getEpoch().compareTo(store.getFinalizedCheckpoint().getEpoch()) > 0) {\n+      // TODO: Fork Choice Spec does not necessarily ask us to store this checkpoint state, so if we\n+      // do error here and exit, we will possibly have acted differently than other nodes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyNzA4NQ=="}, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTIyODI1OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/ForkChoiceUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzozMDo1NlrOF1MuYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0NDo1NVrOF1kNfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyNzMzMA==", "bodyText": "We need to ensure the checkpoint state for this new justified checkpoint is stored.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r391327330", "createdAt": "2020-03-11T23:30:56Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/ForkChoiceUtil.java", "diffHunk": "@@ -335,27 +338,46 @@ public static BlockImportResult on_block(\n     // Update finalized checkpoint\n     final Checkpoint finalizedCheckpoint = state.getFinalized_checkpoint();\n     if (finalizedCheckpoint.getEpoch().compareTo(store.getFinalizedCheckpoint().getEpoch()) > 0) {\n+      // TODO: Fork Choice Spec does not necessarily ask us to store this checkpoint state, so if we\n+      // do error here and exit, we will possibly have acted differently than other nodes.\n       try {\n         storeCheckpointState(\n             store, st, finalizedCheckpoint, store.getBlockState(finalizedCheckpoint.getRoot()));\n       } catch (SlotProcessingException | EpochProcessingException e) {\n         return BlockImportResult.failedStateTransition(e);\n       }\n       store.setFinalizedCheckpoint(finalizedCheckpoint);\n+      UnsignedLong finalized_slot = store.getFinalizedCheckpoint().getEpochStartSlot();\n+      // Update justified if new justified is later than store justified\n+      // or if store justified is not in chain with finalized checkpoint\n+      if (state\n+                  .getCurrent_justified_checkpoint()\n+                  .getEpoch()\n+                  .compareTo(store.getJustifiedCheckpoint().getEpoch())\n+              > 0\n+          || !get_ancestor(store, store.getJustifiedCheckpoint().getRoot(), finalized_slot)\n+              .equals(store.getFinalizedCheckpoint().getRoot())) {\n+        store.setJustifiedCheckpoint(state.getCurrent_justified_checkpoint());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxMjEyNw==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r391712127", "createdAt": "2020-03-12T15:44:55Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/ForkChoiceUtil.java", "diffHunk": "@@ -335,27 +338,46 @@ public static BlockImportResult on_block(\n     // Update finalized checkpoint\n     final Checkpoint finalizedCheckpoint = state.getFinalized_checkpoint();\n     if (finalizedCheckpoint.getEpoch().compareTo(store.getFinalizedCheckpoint().getEpoch()) > 0) {\n+      // TODO: Fork Choice Spec does not necessarily ask us to store this checkpoint state, so if we\n+      // do error here and exit, we will possibly have acted differently than other nodes.\n       try {\n         storeCheckpointState(\n             store, st, finalizedCheckpoint, store.getBlockState(finalizedCheckpoint.getRoot()));\n       } catch (SlotProcessingException | EpochProcessingException e) {\n         return BlockImportResult.failedStateTransition(e);\n       }\n       store.setFinalizedCheckpoint(finalizedCheckpoint);\n+      UnsignedLong finalized_slot = store.getFinalizedCheckpoint().getEpochStartSlot();\n+      // Update justified if new justified is later than store justified\n+      // or if store justified is not in chain with finalized checkpoint\n+      if (state\n+                  .getCurrent_justified_checkpoint()\n+                  .getEpoch()\n+                  .compareTo(store.getJustifiedCheckpoint().getEpoch())\n+              > 0\n+          || !get_ancestor(store, store.getJustifiedCheckpoint().getRoot(), finalized_slot)\n+              .equals(store.getFinalizedCheckpoint().getRoot())) {\n+        store.setJustifiedCheckpoint(state.getCurrent_justified_checkpoint());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyNzMzMA=="}, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTIzNTE4OnYy", "diffSide": "RIGHT", "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzozNTowMFrOF1MyuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzo0NzoyMlrOF2EQeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyODQ0MA==", "bodyText": "This seems wrong.  We might import two blocks for the same slot and then this would cause us to produce two conflicting attestations and get slashed. We may also do that because this event is fired both here and in process_slot - if the process_slot fired first and then this block was imported we'd potentially wind up with two different targets for the produced attestations.\nedit: I can see this is aiming to meet the first paragraph under https://github.com/ethereum/eth2.0-specs/blob/v0.10.1/specs/phase0/validator.md#attesting  which says we can publish attestations \"early\" if we already have the block for that slot.  I suspect we should have nice centralised logic for doing that coordination and not split it across multiple classes to be really sure we have it right.  Strongly suspect we should do it as a separate PR (and since it's not a consensus affecting change it can go straight to master).", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r391328440", "createdAt": "2020-03-11T23:35:00Z", "author": {"login": "ajsutton"}, "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -381,6 +382,14 @@ public void setNodeSlotAccordingToDBStore(Store store) {\n     LOG.info(\"Node being started from database.\");\n   }\n \n+  @Subscribe\n+  public void onImportedBlock(ImportedBlockEvent event) {\n+    if (event.getBlock().getSlot().equals(nodeSlot)) {\n+      Bytes32 headBlockRoot = this.stateProcessor.processHead();\n+      this.eventBus.post(new BroadcastAttestationEvent(headBlockRoot, nodeSlot));\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIyODM0MA==", "bodyText": "https://pegasys1.atlassian.net/browse/BC-309?atlOrigin=eyJpIjoiZDNmNGY0ZDk3ZmYzNDI2OWE0Yzk5NWRkMDdhNzY0MDMiLCJwIjoiaiJ9", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r392228340", "createdAt": "2020-03-13T13:31:35Z", "author": {"login": "cemozerr"}, "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -381,6 +382,14 @@ public void setNodeSlotAccordingToDBStore(Store store) {\n     LOG.info(\"Node being started from database.\");\n   }\n \n+  @Subscribe\n+  public void onImportedBlock(ImportedBlockEvent event) {\n+    if (event.getBlock().getSlot().equals(nodeSlot)) {\n+      Bytes32 headBlockRoot = this.stateProcessor.processHead();\n+      this.eventBus.post(new BroadcastAttestationEvent(headBlockRoot, nodeSlot));\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyODQ0MA=="}, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIzNzE3OA==", "bodyText": "Reverted these changes in this PR.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r392237178", "createdAt": "2020-03-13T13:47:22Z", "author": {"login": "cemozerr"}, "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -381,6 +382,14 @@ public void setNodeSlotAccordingToDBStore(Store store) {\n     LOG.info(\"Node being started from database.\");\n   }\n \n+  @Subscribe\n+  public void onImportedBlock(ImportedBlockEvent event) {\n+    if (event.getBlock().getSlot().equals(nodeSlot)) {\n+      Bytes32 headBlockRoot = this.stateProcessor.processHead();\n+      this.eventBus.post(new BroadcastAttestationEvent(headBlockRoot, nodeSlot));\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyODQ0MA=="}, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTIzOTAzOnYy", "diffSide": "RIGHT", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzozNjozNFrOF1M07g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzozNjozNFrOF1M07g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyOTAwNg==", "bodyText": "I guess that resolves my concerns about getting slashed above, but this still feels very weird to me.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r391329006", "createdAt": "2020-03-11T23:36:34Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java", "diffHunk": "@@ -182,10 +185,15 @@ public void onBlockImported(ImportedBlockEvent event) {\n   @Subscribe\n   public void onAttestationEvent(BroadcastAttestationEvent event) throws IllegalArgumentException {\n     try {\n+\n+      UnsignedLong slot = event.getNodeSlot();\n+      if (slot.compareTo(latestBroadcastAttestationEventSlot) <= 0) {\n+        return;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNTI0Mjk1OnYy", "diffSide": "RIGHT", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMzozODo0NVrOF1M3QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo0NzoyNVrOF1kUQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyOTYwMA==", "bodyText": "I suspect we should do this in the opposite order.  Otherwise we risk publishing attestations and then failing unexpectedly before we update the latestBroadcastAttestationEventSlot which opens us to being slashed.\nAs mentioned above (sorry for scattering this across multiple comments) - let's pull this out of this PR and do it separately.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r391329600", "createdAt": "2020-03-11T23:38:45Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java", "diffHunk": "@@ -212,6 +220,7 @@ public void onAttestationEvent(BroadcastAttestationEvent event) throws IllegalAr\n       asyncProduceAttestations(\n           attesterInformations, headState, getGenericAttestationData(headState, headBlock));\n \n+      latestBroadcastAttestationEventSlot = slot;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxMzIyMQ==", "bodyText": "I'd say let's keep this in this PR to be fully done with the v0.10.1 change and if we want to make it more robust we can make a ticket and come back to it later on.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r391713221", "createdAt": "2020-03-12T15:46:26Z", "author": {"login": "cemozerr"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java", "diffHunk": "@@ -212,6 +220,7 @@ public void onAttestationEvent(BroadcastAttestationEvent event) throws IllegalAr\n       asyncProduceAttestations(\n           attesterInformations, headState, getGenericAttestationData(headState, headBlock));\n \n+      latestBroadcastAttestationEventSlot = slot;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyOTYwMA=="}, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxMzg1OQ==", "bodyText": "Unless this seems like it will definitely fail in production, after I put these lines in the opposite order, I see no problem merging this in for now.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r391713859", "createdAt": "2020-03-12T15:47:25Z", "author": {"login": "cemozerr"}, "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorCoordinator.java", "diffHunk": "@@ -212,6 +220,7 @@ public void onAttestationEvent(BroadcastAttestationEvent event) throws IllegalAr\n       asyncProduceAttestations(\n           attesterInformations, headState, getGenericAttestationData(headState, headBlock));\n \n+      latestBroadcastAttestationEventSlot = slot;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMyOTYwMA=="}, "originalCommit": {"oid": "d6cab85c6fcceec6ed67bb4f6abe41e9c9ee843d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjkyODY1OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMToyMDoyNlrOF2W-Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMjo1MDo1NVrOF2y1uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0Mzc3MQ==", "bodyText": "We should probably remove that comment now. :)", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r392543771", "createdAt": "2020-03-14T01:20:26Z", "author": {"login": "ajsutton"}, "path": "build.gradle", "diffHunk": "@@ -209,7 +209,7 @@ allprojects {\n   }\n }\n \n-def refTestVersion = 'v0.9.4'\n+def refTestVersion = 'v0.10.1' // TODO: Remove this comment (just kicking the CircleCI cache)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "569d4c1e0e6381eb9d9294c954fd375b120c0c00"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAwMDM3OQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r393000379", "createdAt": "2020-03-16T12:50:55Z", "author": {"login": "cemozerr"}, "path": "build.gradle", "diffHunk": "@@ -209,7 +209,7 @@ allprojects {\n   }\n }\n \n-def refTestVersion = 'v0.9.4'\n+def refTestVersion = 'v0.10.1' // TODO: Remove this comment (just kicking the CircleCI cache)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0Mzc3MQ=="}, "originalCommit": {"oid": "569d4c1e0e6381eb9d9294c954fd375b120c0c00"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjAzODcxOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMjo0ODo0N1rOF2yxTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMjo0ODo0N1rOF2yxTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk5OTI0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            def refTestVersion = 'v0.10.1' // TODO: Remove this comment (just kicking the CircleCI cache)\n          \n          \n            \n            def refTestVersion = 'v0.10.1'", "url": "https://github.com/ConsenSys/teku/pull/1100#discussion_r392999244", "createdAt": "2020-03-16T12:48:47Z", "author": {"login": "cemozerr"}, "path": "build.gradle", "diffHunk": "@@ -209,7 +209,7 @@ allprojects {\n   }\n }\n \n-def refTestVersion = 'v0.9.4'\n+def refTestVersion = 'v0.10.1' // TODO: Remove this comment (just kicking the CircleCI cache)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55041fd2cfaa0f4d56e62af41f1190e43535ae7f"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2779, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}