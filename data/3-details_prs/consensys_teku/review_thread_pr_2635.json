{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxMjg3NzM1", "number": 2635, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMzo1MjowOVrOEavmQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMzo1Mjo1MFrOEavmrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDc4MjcyOnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMzo1MjowOVrOHEW9hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMDozNjowNVrOHEXseg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzMjU1MA==", "bodyText": "if this is going to be an info, does it need to have more context?", "url": "https://github.com/ConsenSys/teku/pull/2635#discussion_r474332550", "createdAt": "2020-08-20T23:52:09Z", "author": {"login": "rolfyone"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java", "diffHunk": "@@ -61,38 +63,42 @@ public void processHead(UInt64 nodeSlot) {\n   }\n \n   private void processHead(Optional<UInt64> nodeSlot) {\n-    withLock(\n-            () -> {\n-              final Checkpoint finalizedCheckpoint =\n-                  recentChainData.getStore().getFinalizedCheckpoint();\n-              final Checkpoint justifiedCheckpoint =\n-                  recentChainData.getStore().getJustifiedCheckpoint();\n-              return recentChainData\n-                  .retrieveCheckpointState(justifiedCheckpoint)\n-                  .thenCompose(\n-                      justifiedCheckpointState -> {\n-                        final StoreTransaction transaction =\n-                            recentChainData.startStoreTransaction();\n-                        final ForkChoiceStrategy forkChoiceStrategy = getForkChoiceStrategy();\n-                        Bytes32 headBlockRoot =\n-                            forkChoiceStrategy.findHead(\n-                                transaction,\n-                                finalizedCheckpoint,\n-                                justifiedCheckpoint,\n-                                justifiedCheckpointState.orElseThrow());\n-\n-                        recentChainData.updateHead(\n-                            headBlockRoot,\n-                            nodeSlot.orElse(\n-                                forkChoiceStrategy\n-                                    .blockSlot(headBlockRoot)\n-                                    .orElseThrow(\n-                                        () ->\n-                                            new IllegalStateException(\n-                                                \"Unable to retrieve the slot of fork choice head\"))));\n-                        return transaction.commit();\n-                      });\n-            })\n+    final Checkpoint retrievedJustifiedCheckpoint =\n+        recentChainData.getStore().getJustifiedCheckpoint();\n+    recentChainData\n+        .retrieveCheckpointState(retrievedJustifiedCheckpoint)\n+        .thenCompose(\n+            justifiedCheckpointState ->\n+                withLock(\n+                    () -> {\n+                      final Checkpoint finalizedCheckpoint =\n+                          recentChainData.getStore().getFinalizedCheckpoint();\n+                      final Checkpoint justifiedCheckpoint =\n+                          recentChainData.getStore().getJustifiedCheckpoint();\n+                      if (!justifiedCheckpoint.equals(retrievedJustifiedCheckpoint)) {\n+                        LOG.info(\n+                            \"Skipping head block update as justified checkpoint was updated while loading checkpoint state.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3445d5b06a4806db96ce5eb786eb5b3335fd5e0c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM0NDU3MA==", "bodyText": "Added some extra info.", "url": "https://github.com/ConsenSys/teku/pull/2635#discussion_r474344570", "createdAt": "2020-08-21T00:36:05Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java", "diffHunk": "@@ -61,38 +63,42 @@ public void processHead(UInt64 nodeSlot) {\n   }\n \n   private void processHead(Optional<UInt64> nodeSlot) {\n-    withLock(\n-            () -> {\n-              final Checkpoint finalizedCheckpoint =\n-                  recentChainData.getStore().getFinalizedCheckpoint();\n-              final Checkpoint justifiedCheckpoint =\n-                  recentChainData.getStore().getJustifiedCheckpoint();\n-              return recentChainData\n-                  .retrieveCheckpointState(justifiedCheckpoint)\n-                  .thenCompose(\n-                      justifiedCheckpointState -> {\n-                        final StoreTransaction transaction =\n-                            recentChainData.startStoreTransaction();\n-                        final ForkChoiceStrategy forkChoiceStrategy = getForkChoiceStrategy();\n-                        Bytes32 headBlockRoot =\n-                            forkChoiceStrategy.findHead(\n-                                transaction,\n-                                finalizedCheckpoint,\n-                                justifiedCheckpoint,\n-                                justifiedCheckpointState.orElseThrow());\n-\n-                        recentChainData.updateHead(\n-                            headBlockRoot,\n-                            nodeSlot.orElse(\n-                                forkChoiceStrategy\n-                                    .blockSlot(headBlockRoot)\n-                                    .orElseThrow(\n-                                        () ->\n-                                            new IllegalStateException(\n-                                                \"Unable to retrieve the slot of fork choice head\"))));\n-                        return transaction.commit();\n-                      });\n-            })\n+    final Checkpoint retrievedJustifiedCheckpoint =\n+        recentChainData.getStore().getJustifiedCheckpoint();\n+    recentChainData\n+        .retrieveCheckpointState(retrievedJustifiedCheckpoint)\n+        .thenCompose(\n+            justifiedCheckpointState ->\n+                withLock(\n+                    () -> {\n+                      final Checkpoint finalizedCheckpoint =\n+                          recentChainData.getStore().getFinalizedCheckpoint();\n+                      final Checkpoint justifiedCheckpoint =\n+                          recentChainData.getStore().getJustifiedCheckpoint();\n+                      if (!justifiedCheckpoint.equals(retrievedJustifiedCheckpoint)) {\n+                        LOG.info(\n+                            \"Skipping head block update as justified checkpoint was updated while loading checkpoint state.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzMjU1MA=="}, "originalCommit": {"oid": "3445d5b06a4806db96ce5eb786eb5b3335fd5e0c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDc4MzgyOnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMzo1Mjo1MFrOHEW-Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwMDozNTo1NFrOHEXsRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzMjcyMg==", "bodyText": "did we want to include the headBlockRoot in here?", "url": "https://github.com/ConsenSys/teku/pull/2635#discussion_r474332722", "createdAt": "2020-08-20T23:52:50Z", "author": {"login": "rolfyone"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java", "diffHunk": "@@ -61,38 +63,42 @@ public void processHead(UInt64 nodeSlot) {\n   }\n \n   private void processHead(Optional<UInt64> nodeSlot) {\n-    withLock(\n-            () -> {\n-              final Checkpoint finalizedCheckpoint =\n-                  recentChainData.getStore().getFinalizedCheckpoint();\n-              final Checkpoint justifiedCheckpoint =\n-                  recentChainData.getStore().getJustifiedCheckpoint();\n-              return recentChainData\n-                  .retrieveCheckpointState(justifiedCheckpoint)\n-                  .thenCompose(\n-                      justifiedCheckpointState -> {\n-                        final StoreTransaction transaction =\n-                            recentChainData.startStoreTransaction();\n-                        final ForkChoiceStrategy forkChoiceStrategy = getForkChoiceStrategy();\n-                        Bytes32 headBlockRoot =\n-                            forkChoiceStrategy.findHead(\n-                                transaction,\n-                                finalizedCheckpoint,\n-                                justifiedCheckpoint,\n-                                justifiedCheckpointState.orElseThrow());\n-\n-                        recentChainData.updateHead(\n-                            headBlockRoot,\n-                            nodeSlot.orElse(\n-                                forkChoiceStrategy\n-                                    .blockSlot(headBlockRoot)\n-                                    .orElseThrow(\n-                                        () ->\n-                                            new IllegalStateException(\n-                                                \"Unable to retrieve the slot of fork choice head\"))));\n-                        return transaction.commit();\n-                      });\n-            })\n+    final Checkpoint retrievedJustifiedCheckpoint =\n+        recentChainData.getStore().getJustifiedCheckpoint();\n+    recentChainData\n+        .retrieveCheckpointState(retrievedJustifiedCheckpoint)\n+        .thenCompose(\n+            justifiedCheckpointState ->\n+                withLock(\n+                    () -> {\n+                      final Checkpoint finalizedCheckpoint =\n+                          recentChainData.getStore().getFinalizedCheckpoint();\n+                      final Checkpoint justifiedCheckpoint =\n+                          recentChainData.getStore().getJustifiedCheckpoint();\n+                      if (!justifiedCheckpoint.equals(retrievedJustifiedCheckpoint)) {\n+                        LOG.info(\n+                            \"Skipping head block update as justified checkpoint was updated while loading checkpoint state.\");\n+                      }\n+                      final StoreTransaction transaction = recentChainData.startStoreTransaction();\n+                      final ForkChoiceStrategy forkChoiceStrategy = getForkChoiceStrategy();\n+                      Bytes32 headBlockRoot =\n+                          forkChoiceStrategy.findHead(\n+                              transaction,\n+                              finalizedCheckpoint,\n+                              justifiedCheckpoint,\n+                              justifiedCheckpointState.orElseThrow());\n+\n+                      recentChainData.updateHead(\n+                          headBlockRoot,\n+                          nodeSlot.orElse(\n+                              forkChoiceStrategy\n+                                  .blockSlot(headBlockRoot)\n+                                  .orElseThrow(\n+                                      () ->\n+                                          new IllegalStateException(\n+                                              \"Unable to retrieve the slot of fork choice head\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3445d5b06a4806db96ce5eb786eb5b3335fd5e0c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM0NDUxNw==", "bodyText": "Done.  Pretty sure this is an \"impossible\" situation since we just found the root from protoarray and we're still holding the lock so nothing can change it in the meantime.", "url": "https://github.com/ConsenSys/teku/pull/2635#discussion_r474344517", "createdAt": "2020-08-21T00:35:54Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java", "diffHunk": "@@ -61,38 +63,42 @@ public void processHead(UInt64 nodeSlot) {\n   }\n \n   private void processHead(Optional<UInt64> nodeSlot) {\n-    withLock(\n-            () -> {\n-              final Checkpoint finalizedCheckpoint =\n-                  recentChainData.getStore().getFinalizedCheckpoint();\n-              final Checkpoint justifiedCheckpoint =\n-                  recentChainData.getStore().getJustifiedCheckpoint();\n-              return recentChainData\n-                  .retrieveCheckpointState(justifiedCheckpoint)\n-                  .thenCompose(\n-                      justifiedCheckpointState -> {\n-                        final StoreTransaction transaction =\n-                            recentChainData.startStoreTransaction();\n-                        final ForkChoiceStrategy forkChoiceStrategy = getForkChoiceStrategy();\n-                        Bytes32 headBlockRoot =\n-                            forkChoiceStrategy.findHead(\n-                                transaction,\n-                                finalizedCheckpoint,\n-                                justifiedCheckpoint,\n-                                justifiedCheckpointState.orElseThrow());\n-\n-                        recentChainData.updateHead(\n-                            headBlockRoot,\n-                            nodeSlot.orElse(\n-                                forkChoiceStrategy\n-                                    .blockSlot(headBlockRoot)\n-                                    .orElseThrow(\n-                                        () ->\n-                                            new IllegalStateException(\n-                                                \"Unable to retrieve the slot of fork choice head\"))));\n-                        return transaction.commit();\n-                      });\n-            })\n+    final Checkpoint retrievedJustifiedCheckpoint =\n+        recentChainData.getStore().getJustifiedCheckpoint();\n+    recentChainData\n+        .retrieveCheckpointState(retrievedJustifiedCheckpoint)\n+        .thenCompose(\n+            justifiedCheckpointState ->\n+                withLock(\n+                    () -> {\n+                      final Checkpoint finalizedCheckpoint =\n+                          recentChainData.getStore().getFinalizedCheckpoint();\n+                      final Checkpoint justifiedCheckpoint =\n+                          recentChainData.getStore().getJustifiedCheckpoint();\n+                      if (!justifiedCheckpoint.equals(retrievedJustifiedCheckpoint)) {\n+                        LOG.info(\n+                            \"Skipping head block update as justified checkpoint was updated while loading checkpoint state.\");\n+                      }\n+                      final StoreTransaction transaction = recentChainData.startStoreTransaction();\n+                      final ForkChoiceStrategy forkChoiceStrategy = getForkChoiceStrategy();\n+                      Bytes32 headBlockRoot =\n+                          forkChoiceStrategy.findHead(\n+                              transaction,\n+                              finalizedCheckpoint,\n+                              justifiedCheckpoint,\n+                              justifiedCheckpointState.orElseThrow());\n+\n+                      recentChainData.updateHead(\n+                          headBlockRoot,\n+                          nodeSlot.orElse(\n+                              forkChoiceStrategy\n+                                  .blockSlot(headBlockRoot)\n+                                  .orElseThrow(\n+                                      () ->\n+                                          new IllegalStateException(\n+                                              \"Unable to retrieve the slot of fork choice head\"))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMzMjcyMg=="}, "originalCommit": {"oid": "3445d5b06a4806db96ce5eb786eb5b3335fd5e0c"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3334, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}