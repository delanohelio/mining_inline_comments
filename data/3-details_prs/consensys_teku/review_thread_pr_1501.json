{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1Mzg4NTI5", "number": 1501, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1NDo0N1rODsw9dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzowMjo0OFrODsxJ8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjY2MTAyOnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/signer/Signer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1NDo0N1rOF9zJzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1NDo0N1rOF9zJzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0NTU0OQ==", "bodyText": "Really nice and clean that all the signing is now contained in one object.", "url": "https://github.com/ConsenSys/teku/pull/1501#discussion_r400345549", "createdAt": "2020-03-30T16:54:47Z", "author": {"login": "cemozerr"}, "path": "validator/client/src/main/java/tech/pegasys/artemis/validator/client/signer/Signer.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client.signer;\n+\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_signing_root;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.get_domain;\n+import static tech.pegasys.artemis.util.config.Constants.DOMAIN_BEACON_ATTESTER;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.artemis.datastructures.operations.AttestationData;\n+import tech.pegasys.artemis.datastructures.state.Fork;\n+import tech.pegasys.artemis.datastructures.validator.MessageSignerService;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.bls.BLSSignature;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class Signer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04258139ebdc8d2c2c5258dafa5cef053c1aefe"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjY5Mjk2OnYy", "diffSide": "RIGHT", "path": "validator/client/src/test/java/tech/pegasys/artemis/validator/client/signer/SignerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzowMjo0OFrOF9zd9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMToyMjowOFrOF98tCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MDcwOQ==", "bodyText": "I don't have a suggestion, however, it took me a good amount of time to infer (still not sure) that passing the epoch number 7 and the given fork value results in the expectedSigningRoot that you declare above. I wish there was a more clear way of showing that.", "url": "https://github.com/ConsenSys/teku/pull/1501#discussion_r400350709", "createdAt": "2020-03-30T17:02:48Z", "author": {"login": "cemozerr"}, "path": "validator/client/src/test/java/tech/pegasys/artemis/validator/client/signer/SignerTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client.signer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.artemis.datastructures.operations.AttestationData;\n+import tech.pegasys.artemis.datastructures.state.Fork;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.datastructures.validator.MessageSignerService;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.bls.BLSSignature;\n+\n+class SignerTest {\n+\n+  private final MessageSignerService signerService = mock(MessageSignerService.class);\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private final Fork fork = dataStructureUtil.randomFork();\n+\n+  private final Signer signer = new Signer(signerService);\n+\n+  @Test\n+  public void shouldCreateRandaoReveal() {\n+    final BLSSignature signature = dataStructureUtil.randomSignature();\n+    final Bytes expectedSigningRoot =\n+        Bytes.fromHexString(\"0x84c8825ccb169a0d1109ff2b96185ea2bd6f66ed198f2e322473773fff3ed91b\");\n+    when(signerService.signRandaoReveal(expectedSigningRoot))\n+        .thenReturn(SafeFuture.completedFuture(signature));\n+    final SafeFuture<BLSSignature> reveal =\n+        signer.createRandaoReveal(UnsignedLong.valueOf(7), fork);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d04258139ebdc8d2c2c5258dafa5cef053c1aefe"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUwMjAyNw==", "bodyText": "Yeah, ultimately those tests are really checking that the signing root was calculated correctly and that it was delegated to the right method on the MessageSignerService. I can't actually see a way to simplify them either.  We could have a separate object responsible for calculating the signing root and test that separately but it just makes the production code more complex and I don't think it's worth it.", "url": "https://github.com/ConsenSys/teku/pull/1501#discussion_r400502027", "createdAt": "2020-03-30T21:22:08Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/test/java/tech/pegasys/artemis/validator/client/signer/SignerTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.client.signer;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.artemis.datastructures.operations.AttestationData;\n+import tech.pegasys.artemis.datastructures.state.Fork;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.datastructures.validator.MessageSignerService;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.bls.BLSSignature;\n+\n+class SignerTest {\n+\n+  private final MessageSignerService signerService = mock(MessageSignerService.class);\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private final Fork fork = dataStructureUtil.randomFork();\n+\n+  private final Signer signer = new Signer(signerService);\n+\n+  @Test\n+  public void shouldCreateRandaoReveal() {\n+    final BLSSignature signature = dataStructureUtil.randomSignature();\n+    final Bytes expectedSigningRoot =\n+        Bytes.fromHexString(\"0x84c8825ccb169a0d1109ff2b96185ea2bd6f66ed198f2e322473773fff3ed91b\");\n+    when(signerService.signRandaoReveal(expectedSigningRoot))\n+        .thenReturn(SafeFuture.completedFuture(signature));\n+    final SafeFuture<BLSSignature> reveal =\n+        signer.createRandaoReveal(UnsignedLong.valueOf(7), fork);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MDcwOQ=="}, "originalCommit": {"oid": "d04258139ebdc8d2c2c5258dafa5cef053c1aefe"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1773, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}