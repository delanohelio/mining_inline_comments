{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MTE4NDUz", "number": 1156, "title": "Publish deposit events incrementally", "bodyText": "Instead of waiting for all the requests for block data to finish, wait on each request in order and publish the deposits for blocks as soon as they're available.\nCode becomes a bit more complex than I'd like because it's important to preserve the order of blocks.", "createdAt": "2020-02-13T22:25:15Z", "url": "https://github.com/ConsenSys/teku/pull/1156", "merged": true, "mergeCommit": {"oid": "537dcf4c4a4cf1254f8492eaa63973b5991f2804"}, "closed": true, "closedAt": "2020-02-14T22:22:06Z", "author": {"login": "ajsutton"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcECgiqAH2gAyMzc1MTE4NDUzOjQ3ZWUwZDY3ZDJiMGVmNWMyMmE4N2YxZmQyOWI2NzRjZmUzZGVlOTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcEXDXGAH2gAyMzc1MTE4NDUzOjMxMmFmY2RmY2FlNTQ3OTIwNTA5MGQ3YjJmN2JkY2E0NWE0YTc2MDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "47ee0d67d2b0ef5c22a87f1fd29b674cfe3dee91", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/47ee0d67d2b0ef5c22a87f1fd29b674cfe3dee91", "committedDate": "2020-02-13T22:17:08Z", "message": "Publish deposit events incrementally instead of waiting for all block information to be available."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjAxMzE1", "url": "https://github.com/ConsenSys/teku/pull/1156#pullrequestreview-359201315", "createdAt": "2020-02-14T20:29:28Z", "commit": {"oid": "47ee0d67d2b0ef5c22a87f1fd29b674cfe3dee91"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDoyOToyOFrOFqC0Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMDozNDo1N1rOFqC8DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMDU5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private SafeFuture<Void> publishNextDepsoitEvent(\n          \n          \n            \n              private SafeFuture<Void> publishNextDepositEvent(", "url": "https://github.com/ConsenSys/teku/pull/1156#discussion_r379630599", "createdAt": "2020-02-14T20:29:28Z", "author": {"login": "mbaxter"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositRequestManager.java", "diffHunk": "@@ -167,60 +170,119 @@ private synchronized void onDepositRequestFailed(\n     return eventsFuture\n         .thenApply(this::groupDepositEventResponsesByBlockHash)\n         .thenCompose(\n-            groupedDepositEventResponsesByBlockHash -> {\n-              Map<String, SafeFuture<EthBlock.Block>> neededBlocksByHash =\n-                  getMapOfEthBlockFutures(groupedDepositEventResponsesByBlockHash.keySet());\n-              return SafeFuture.allOf(neededBlocksByHash.values().toArray(SafeFuture[]::new))\n-                  .thenApply(\n-                      done ->\n-                          constructDepositsFromBlockEvents(\n-                              neededBlocksByHash, groupedDepositEventResponsesByBlockHash));\n-            })\n-        .thenAccept(\n-            (depositsFromBlockEventList) ->\n-                depositsFromBlockEventList.stream()\n-                    .sorted(Comparator.comparing(DepositsFromBlockEvent::getBlockNumber))\n-                    .forEachOrdered(this::publishDeposits));\n-  }\n-\n-  private List<DepositsFromBlockEvent> constructDepositsFromBlockEvents(\n-      Map<String, SafeFuture<EthBlock.Block>> blockFutureByBlockHash,\n-      Map<String, List<DepositContract.DepositEventEventResponse>> groupedDepositEventResponses) {\n-    return groupedDepositEventResponses.entrySet().stream()\n-        .map(\n-            (entry) -> {\n-              String blockHash = entry.getKey();\n-              List<DepositContract.DepositEventEventResponse> groupedDepositEventResponse =\n-                  entry.getValue();\n-              EthBlock.Block block =\n-                  checkNotNull(blockFutureByBlockHash.get(blockHash).getNow(null));\n-\n-              return new DepositsFromBlockEvent(\n-                  UnsignedLong.valueOf(block.getNumber()),\n-                  Bytes32.fromHexString(block.getHash()),\n-                  UnsignedLong.valueOf(block.getTimestamp()),\n-                  groupedDepositEventResponse.stream()\n-                      .map(Deposit::new)\n-                      .sorted(Comparator.comparing(Deposit::getMerkle_tree_index))\n-                      .collect(toList()));\n-            })\n-        .collect(toList());\n+            groupedDepositEventResponsesByBlockHash ->\n+                publishNextDepsoitEvent(\n+                    getMapOfEthBlockFutures(groupedDepositEventResponsesByBlockHash.keySet()),\n+                    groupedDepositEventResponsesByBlockHash));\n+  }\n+\n+  private SafeFuture<Void> publishNextDepsoitEvent(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ee0d67d2b0ef5c22a87f1fd29b674cfe3dee91"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMjY1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private void publicEventForBlock(\n          \n          \n            \n              private void publishEventForBlock(", "url": "https://github.com/ConsenSys/teku/pull/1156#discussion_r379632652", "createdAt": "2020-02-14T20:34:57Z", "author": {"login": "mbaxter"}, "path": "pow/src/main/java/tech/pegasys/artemis/pow/DepositRequestManager.java", "diffHunk": "@@ -167,60 +170,119 @@ private synchronized void onDepositRequestFailed(\n     return eventsFuture\n         .thenApply(this::groupDepositEventResponsesByBlockHash)\n         .thenCompose(\n-            groupedDepositEventResponsesByBlockHash -> {\n-              Map<String, SafeFuture<EthBlock.Block>> neededBlocksByHash =\n-                  getMapOfEthBlockFutures(groupedDepositEventResponsesByBlockHash.keySet());\n-              return SafeFuture.allOf(neededBlocksByHash.values().toArray(SafeFuture[]::new))\n-                  .thenApply(\n-                      done ->\n-                          constructDepositsFromBlockEvents(\n-                              neededBlocksByHash, groupedDepositEventResponsesByBlockHash));\n-            })\n-        .thenAccept(\n-            (depositsFromBlockEventList) ->\n-                depositsFromBlockEventList.stream()\n-                    .sorted(Comparator.comparing(DepositsFromBlockEvent::getBlockNumber))\n-                    .forEachOrdered(this::publishDeposits));\n-  }\n-\n-  private List<DepositsFromBlockEvent> constructDepositsFromBlockEvents(\n-      Map<String, SafeFuture<EthBlock.Block>> blockFutureByBlockHash,\n-      Map<String, List<DepositContract.DepositEventEventResponse>> groupedDepositEventResponses) {\n-    return groupedDepositEventResponses.entrySet().stream()\n-        .map(\n-            (entry) -> {\n-              String blockHash = entry.getKey();\n-              List<DepositContract.DepositEventEventResponse> groupedDepositEventResponse =\n-                  entry.getValue();\n-              EthBlock.Block block =\n-                  checkNotNull(blockFutureByBlockHash.get(blockHash).getNow(null));\n-\n-              return new DepositsFromBlockEvent(\n-                  UnsignedLong.valueOf(block.getNumber()),\n-                  Bytes32.fromHexString(block.getHash()),\n-                  UnsignedLong.valueOf(block.getTimestamp()),\n-                  groupedDepositEventResponse.stream()\n-                      .map(Deposit::new)\n-                      .sorted(Comparator.comparing(Deposit::getMerkle_tree_index))\n-                      .collect(toList()));\n-            })\n-        .collect(toList());\n+            groupedDepositEventResponsesByBlockHash ->\n+                publishNextDepsoitEvent(\n+                    getMapOfEthBlockFutures(groupedDepositEventResponsesByBlockHash.keySet()),\n+                    groupedDepositEventResponsesByBlockHash));\n+  }\n+\n+  private SafeFuture<Void> publishNextDepsoitEvent(\n+      List<SafeFuture<Block>> blockRequests,\n+      Map<BlockNumberAndHash, List<DepositEventEventResponse>> depositEventsByBlock) {\n+\n+    // First process completed requests using iteration.\n+    // Avoid StackOverflowException when there is a long string of requests already completed.\n+    while (!blockRequests.isEmpty() && blockRequests.get(0).isDone()) {\n+      final Block block = blockRequests.remove(0).join();\n+      publicEventForBlock(block, depositEventsByBlock);\n+    }\n+\n+    // All requests have completed and been processed.\n+    if (blockRequests.isEmpty()) {\n+      return SafeFuture.completedFuture(null);\n+    }\n+\n+    // Reached a block request that isn't complete so wait for it and recurse back into this method.\n+    return blockRequests\n+        .get(0)\n+        .thenCompose(block -> publishNextDepsoitEvent(blockRequests, depositEventsByBlock));\n   }\n \n-  private Map<String, SafeFuture<EthBlock.Block>> getMapOfEthBlockFutures(\n-      Set<String> neededBlockHashes) {\n+  private void publicEventForBlock(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ee0d67d2b0ef5c22a87f1fd29b674cfe3dee91"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73d0035cc8840f528a62fc8199cfc0a8e5bd101c", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/73d0035cc8840f528a62fc8199cfc0a8e5bd101c", "committedDate": "2020-02-14T22:11:26Z", "message": "Merge branch 'master' into incremental-deposits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "312afcdfcae5479205090d7b2f7bdca45a4a7605", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/312afcdfcae5479205090d7b2f7bdca45a4a7605", "committedDate": "2020-02-14T22:13:16Z", "message": "Fix typos."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4044, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}