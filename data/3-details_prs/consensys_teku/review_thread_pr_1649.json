{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NDI5NDA3", "number": 1649, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzozMDozNVrOD04LUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzozMDozNVrOD04LUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzcyOTQ1OnYy", "diffSide": "RIGHT", "path": "eth-benchmark-tests/src/jmh/java/tech/pegasys/artemis/benchmarks/BeaconBlockBenchmark.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzozMDozNVrOGKCXCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzozODoyMlrOGKCtuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE3NzYwOQ==", "bodyText": "I would also add this annotation to get more precise results\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Warmup(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n          \n          \n            \n              @Warmup(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n          \n          \n            \n              @OutputTimeUnit(TimeUnit.MICROSECONDS)\n          \n      \n    \n    \n  \n\nYou may also annotate the whole class to not duplicate params for every method", "url": "https://github.com/ConsenSys/teku/pull/1649#discussion_r413177609", "createdAt": "2020-04-22T17:30:35Z", "author": {"login": "Nashatyrev"}, "path": "eth-benchmark-tests/src/jmh/java/tech/pegasys/artemis/benchmarks/BeaconBlockBenchmark.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.benchmarks;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+import tech.pegasys.artemis.bls.BLSPublicKey;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class BeaconBlockBenchmark {\n+\n+  private static final BLSPublicKey pubkey = BLSPublicKey.random(0);\n+  private static final DataStructureUtil dataStructureUtil =\n+      new DataStructureUtil(0).withPubKeyGenerator(() -> pubkey);\n+  private static final BeaconBlock fullBeaconBlock =\n+      dataStructureUtil.randomBeaconBlock(100, Bytes32.random(), true);\n+  private static final BeaconBlock sparseBeaconBlock =\n+      dataStructureUtil.randomBeaconBlock(100, Bytes32.random(), false);\n+\n+  public BeaconBlockBenchmark() {\n+    Constants.setConstants(\"mainnet\");\n+  }\n+\n+  @Benchmark\n+  @BenchmarkMode(Mode.AverageTime)\n+  @Warmup(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5db49ea7fa13b06b03f24b036be7188416820a28"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE4MzQxNw==", "bodyText": "Did both.", "url": "https://github.com/ConsenSys/teku/pull/1649#discussion_r413183417", "createdAt": "2020-04-22T17:38:22Z", "author": {"login": "cemozerr"}, "path": "eth-benchmark-tests/src/jmh/java/tech/pegasys/artemis/benchmarks/BeaconBlockBenchmark.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.benchmarks;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+import tech.pegasys.artemis.bls.BLSPublicKey;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class BeaconBlockBenchmark {\n+\n+  private static final BLSPublicKey pubkey = BLSPublicKey.random(0);\n+  private static final DataStructureUtil dataStructureUtil =\n+      new DataStructureUtil(0).withPubKeyGenerator(() -> pubkey);\n+  private static final BeaconBlock fullBeaconBlock =\n+      dataStructureUtil.randomBeaconBlock(100, Bytes32.random(), true);\n+  private static final BeaconBlock sparseBeaconBlock =\n+      dataStructureUtil.randomBeaconBlock(100, Bytes32.random(), false);\n+\n+  public BeaconBlockBenchmark() {\n+    Constants.setConstants(\"mainnet\");\n+  }\n+\n+  @Benchmark\n+  @BenchmarkMode(Mode.AverageTime)\n+  @Warmup(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE3NzYwOQ=="}, "originalCommit": {"oid": "5db49ea7fa13b06b03f24b036be7188416820a28"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3707, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}