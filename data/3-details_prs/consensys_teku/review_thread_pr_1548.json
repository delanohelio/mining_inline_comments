{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMTA5MTA1", "number": 1548, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToyMzowNVrODvvzGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1MDo1MFrODvwUIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzkyNzk0OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToyMzowNVrOGCWpsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNDoyOTo0N1rOGCemQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyMTQ1OQ==", "bodyText": "Why snakeyaml? We just use Jackson to parse yaml in other places? For example in YamlValidatorKeyProvider.", "url": "https://github.com/ConsenSys/teku/pull/1548#discussion_r405121459", "createdAt": "2020-04-07T21:23:05Z", "author": {"login": "ajsutton"}, "path": "acceptance-tests/build.gradle", "diffHunk": "@@ -10,5 +10,6 @@ dependencies {\n   testFixturesImplementation 'org.apache.tuweni:tuweni-bytes'\n   testFixturesImplementation 'org.apache.tuweni:tuweni-toml'\n   testFixturesImplementation 'org.junit.jupiter:junit-jupiter-api'\n-  testFixturesImplementation \"org.testcontainers:testcontainers\"\n+  testFixturesImplementation 'org.testcontainers:testcontainers'\n+  testFixturesImplementation 'org.yaml:snakeyaml'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dbfbdea5cbbbb919a4936bcf163c487ff063960"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI1MTY0OQ==", "bodyText": "\ud83d\udc4d Reverting to Jackson YAMLFactory implementation.", "url": "https://github.com/ConsenSys/teku/pull/1548#discussion_r405251649", "createdAt": "2020-04-08T04:29:47Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/build.gradle", "diffHunk": "@@ -10,5 +10,6 @@ dependencies {\n   testFixturesImplementation 'org.apache.tuweni:tuweni-bytes'\n   testFixturesImplementation 'org.apache.tuweni:tuweni-toml'\n   testFixturesImplementation 'org.junit.jupiter:junit-jupiter-api'\n-  testFixturesImplementation \"org.testcontainers:testcontainers\"\n+  testFixturesImplementation 'org.testcontainers:testcontainers'\n+  testFixturesImplementation 'org.yaml:snakeyaml'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyMTQ1OQ=="}, "originalCommit": {"oid": "2dbfbdea5cbbbb919a4936bcf163c487ff063960"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzk3NDM5OnYy", "diffSide": "RIGHT", "path": "artemis/src/main/java/tech/pegasys/artemis/cli/util/YamlConfigFileDefaultProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTozODowNVrOGCXGVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNDozMDowMVrOGCembQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyODc5MQ==", "bodyText": "nit: It would be better to inline these - they're only used once and the number of %s placeholders needs to match up with the number of parameters so maintaining locality is really useful.", "url": "https://github.com/ConsenSys/teku/pull/1548#discussion_r405128791", "createdAt": "2020-04-07T21:38:05Z", "author": {"login": "ajsutton"}, "path": "artemis/src/main/java/tech/pegasys/artemis/cli/util/YamlConfigFileDefaultProvider.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.util;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.scanner.ScannerException;\n+import picocli.CommandLine;\n+import picocli.CommandLine.IDefaultValueProvider;\n+import picocli.CommandLine.Model.ArgSpec;\n+import picocli.CommandLine.Model.CommandSpec;\n+import picocli.CommandLine.Model.OptionSpec;\n+import picocli.CommandLine.ParameterException;\n+\n+public class YamlConfigFileDefaultProvider implements IDefaultValueProvider {\n+\n+  private static final String FILE_NOT_FOUND_ERROR_MSG =\n+      \"Unable to read yaml configuration. File not found: \";\n+  private static final String IO_ERROR_MSG_FMT =\n+      \"Unexpected IO error while reading yaml configuration file [%s]: %s\";\n+  private static final String INVALID_YAML_MSG_FMT =\n+      \"Unable to read yaml configuration. Invalid yaml file [%s]: %s\";\n+  private static final String UNKNOWN_OPTIONS_YAML_FMT =\n+      \"Unknown %s in yaml configuration file: %s\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dbfbdea5cbbbb919a4936bcf163c487ff063960"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI1MTY5Mw==", "bodyText": "\ud83d\udc4d Inlining.", "url": "https://github.com/ConsenSys/teku/pull/1548#discussion_r405251693", "createdAt": "2020-04-08T04:30:01Z", "author": {"login": "usmansaleem"}, "path": "artemis/src/main/java/tech/pegasys/artemis/cli/util/YamlConfigFileDefaultProvider.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.util;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.NoSuchFileException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.scanner.ScannerException;\n+import picocli.CommandLine;\n+import picocli.CommandLine.IDefaultValueProvider;\n+import picocli.CommandLine.Model.ArgSpec;\n+import picocli.CommandLine.Model.CommandSpec;\n+import picocli.CommandLine.Model.OptionSpec;\n+import picocli.CommandLine.ParameterException;\n+\n+public class YamlConfigFileDefaultProvider implements IDefaultValueProvider {\n+\n+  private static final String FILE_NOT_FOUND_ERROR_MSG =\n+      \"Unable to read yaml configuration. File not found: \";\n+  private static final String IO_ERROR_MSG_FMT =\n+      \"Unexpected IO error while reading yaml configuration file [%s]: %s\";\n+  private static final String INVALID_YAML_MSG_FMT =\n+      \"Unable to read yaml configuration. Invalid yaml file [%s]: %s\";\n+  private static final String UNKNOWN_OPTIONS_YAML_FMT =\n+      \"Unknown %s in yaml configuration file: %s\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyODc5MQ=="}, "originalCommit": {"oid": "2dbfbdea5cbbbb919a4936bcf163c487ff063960"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDAxMjQ4OnYy", "diffSide": "RIGHT", "path": "artemis/src/test/java/tech/pegasys/artemis/cli/util/YamlConfigFileDefaultProviderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1MDo1MFrOGCXdww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNDozMDoxN1rOGCempQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNDc4Nw==", "bodyText": "nit: All of these can just use method references\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .isThrownBy(() -> commandLine.parseArgs())\n          \n          \n            \n                    .isThrownBy(commandLine::parseArgs)", "url": "https://github.com/ConsenSys/teku/pull/1548#discussion_r405134787", "createdAt": "2020-04-07T21:50:50Z", "author": {"login": "ajsutton"}, "path": "artemis/src/test/java/tech/pegasys/artemis/cli/util/YamlConfigFileDefaultProviderTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.util;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.yaml.snakeyaml.Yaml;\n+import picocli.CommandLine;\n+\n+class YamlConfigFileDefaultProviderTest {\n+\n+  @Test\n+  void parsingValidYamlFilePopulatesCommandObject(@TempDir final Path tempDir) throws IOException {\n+    final Path configFile = writeToYamlConfigFile(defaultOptions(), tempDir);\n+    final CommandLine commandLine = new CommandLine(TestCommand.class);\n+    commandLine.setDefaultValueProvider(\n+        new YamlConfigFileDefaultProvider(commandLine, configFile.toFile()));\n+    commandLine.parseArgs();\n+    final TestCommand testCommand = commandLine.getCommand();\n+\n+    Assertions.assertThat(testCommand.getCount()).isEqualTo(10);\n+    Assertions.assertThat(testCommand.getNames()).containsExactlyInAnyOrder(\"a\", \"b\");\n+    Assertions.assertThat(testCommand.isTestEnabled()).isTrue();\n+  }\n+\n+  @Test\n+  void parsingEmptyConfigFileThrowsException(@TempDir final Path tempDir) throws IOException {\n+    final Path configFile = writeToYamlConfigFile(Collections.emptyMap(), tempDir);\n+    final CommandLine commandLine = new CommandLine(TestCommand.class);\n+    commandLine.setDefaultValueProvider(\n+        new YamlConfigFileDefaultProvider(commandLine, configFile.toFile()));\n+\n+    Assertions.assertThatExceptionOfType(CommandLine.ParameterException.class)\n+        .isThrownBy(() -> commandLine.parseArgs())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dbfbdea5cbbbb919a4936bcf163c487ff063960"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI1MTc0OQ==", "bodyText": "\ud83d\udc4d using method references.", "url": "https://github.com/ConsenSys/teku/pull/1548#discussion_r405251749", "createdAt": "2020-04-08T04:30:17Z", "author": {"login": "usmansaleem"}, "path": "artemis/src/test/java/tech/pegasys/artemis/cli/util/YamlConfigFileDefaultProviderTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.util;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.yaml.snakeyaml.Yaml;\n+import picocli.CommandLine;\n+\n+class YamlConfigFileDefaultProviderTest {\n+\n+  @Test\n+  void parsingValidYamlFilePopulatesCommandObject(@TempDir final Path tempDir) throws IOException {\n+    final Path configFile = writeToYamlConfigFile(defaultOptions(), tempDir);\n+    final CommandLine commandLine = new CommandLine(TestCommand.class);\n+    commandLine.setDefaultValueProvider(\n+        new YamlConfigFileDefaultProvider(commandLine, configFile.toFile()));\n+    commandLine.parseArgs();\n+    final TestCommand testCommand = commandLine.getCommand();\n+\n+    Assertions.assertThat(testCommand.getCount()).isEqualTo(10);\n+    Assertions.assertThat(testCommand.getNames()).containsExactlyInAnyOrder(\"a\", \"b\");\n+    Assertions.assertThat(testCommand.isTestEnabled()).isTrue();\n+  }\n+\n+  @Test\n+  void parsingEmptyConfigFileThrowsException(@TempDir final Path tempDir) throws IOException {\n+    final Path configFile = writeToYamlConfigFile(Collections.emptyMap(), tempDir);\n+    final CommandLine commandLine = new CommandLine(TestCommand.class);\n+    commandLine.setDefaultValueProvider(\n+        new YamlConfigFileDefaultProvider(commandLine, configFile.toFile()));\n+\n+    Assertions.assertThatExceptionOfType(CommandLine.ParameterException.class)\n+        .isThrownBy(() -> commandLine.parseArgs())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNDc4Nw=="}, "originalCommit": {"oid": "2dbfbdea5cbbbb919a4936bcf163c487ff063960"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3832, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}