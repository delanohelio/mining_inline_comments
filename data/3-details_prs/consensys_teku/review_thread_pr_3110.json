{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExOTQ0MzQ3", "number": 3110, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToxNzoxMlrOEzD2Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjo0MzoyNlrOEzghfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTc1ODY2OnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/teku/api/ChainDataProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToxNzoxMlrOHqDJAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToyNzo1M1rOHqDfcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MzY5OA==", "bodyText": "Maybe rather than having a ValidatorResponse.EMPTY ValidatorResponse.fromState could return an Optional<ValidatorResponse> then this could just flat map?", "url": "https://github.com/ConsenSys/teku/pull/3110#discussion_r513853698", "createdAt": "2020-10-29T01:17:12Z", "author": {"login": "ajsutton"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/ChainDataProvider.java", "diffHunk": "@@ -617,9 +614,28 @@ public void requireStoreAvailable() {\n     return getValidatorSelector(state, validators)\n         .filter(getStatusPredicate(state, statusFilter))\n         .mapToObj(index -> ValidatorResponse.fromState(state, index))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5e6c3f0e6c457d8c4907b035f3747874195880"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1Njc0MQ==", "bodyText": "it wanted SafeFuture<Optional<Optional<ValidatorResponse>>...", "url": "https://github.com/ConsenSys/teku/pull/3110#discussion_r513856741", "createdAt": "2020-10-29T01:23:09Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/ChainDataProvider.java", "diffHunk": "@@ -617,9 +614,28 @@ public void requireStoreAvailable() {\n     return getValidatorSelector(state, validators)\n         .filter(getStatusPredicate(state, statusFilter))\n         .mapToObj(index -> ValidatorResponse.fromState(state, index))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MzY5OA=="}, "originalCommit": {"oid": "9e5e6c3f0e6c457d8c4907b035f3747874195880"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1OTQ0MA==", "bodyText": "That sounds like you need a flatMap somewhere instead of just map.", "url": "https://github.com/ConsenSys/teku/pull/3110#discussion_r513859440", "createdAt": "2020-10-29T01:27:53Z", "author": {"login": "ajsutton"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/ChainDataProvider.java", "diffHunk": "@@ -617,9 +614,28 @@ public void requireStoreAvailable() {\n     return getValidatorSelector(state, validators)\n         .filter(getStatusPredicate(state, statusFilter))\n         .mapToObj(index -> ValidatorResponse.fromState(state, index))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MzY5OA=="}, "originalCommit": {"oid": "9e5e6c3f0e6c457d8c4907b035f3747874195880"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTc2MzA1OnYy", "diffSide": "RIGHT", "path": "data/provider/src/test/java/tech/pegasys/teku/api/ChainDataProviderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToxODo1M1rOHqDMAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToyMzo1NlrOHqDWcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1NDQ2NA==", "bodyText": "We throw when the key isn't found or only when it's an invalid key?", "url": "https://github.com/ConsenSys/teku/pull/3110#discussion_r513854464", "createdAt": "2020-10-29T01:18:53Z", "author": {"login": "ajsutton"}, "path": "data/provider/src/test/java/tech/pegasys/teku/api/ChainDataProviderTest.java", "diffHunk": "@@ -798,6 +798,29 @@ public void filteredValidatorsList_shouldFilterByValidatorPubkey() {\n     assertThat(pubkeys).containsExactly(key);\n   }\n \n+  @Test\n+  public void validatorParameterToIndex_shouldThrowBadRequestExceptionWhenIndexInvalid() {\n+    final ChainDataProvider provider =\n+        new ChainDataProvider(recentChainData, combinedChainDataClient);\n+    assertThrows(BadRequestException.class, () -> provider.validatorParameterToIndex(\"a\"));\n+  }\n+\n+  @Test\n+  public void validatorParameterToIndex_shouldThrowBadRequestExceptionWhenIndexTooHigh() {\n+    final ChainDataProvider provider =\n+        new ChainDataProvider(recentChainData, combinedChainDataClient);\n+    assertThrows(BadRequestException.class, () -> provider.validatorParameterToIndex(\"1024000\"));\n+  }\n+\n+  @Test\n+  public void validatorParameterToIndex_shouldThrowBadRequestExceptionWhenKeyNotFound() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5e6c3f0e6c457d8c4907b035f3747874195880"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1NzEzOQ==", "bodyText": "key not found is basically search by root, index not found is basically index out of bounds...", "url": "https://github.com/ConsenSys/teku/pull/3110#discussion_r513857139", "createdAt": "2020-10-29T01:23:56Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/test/java/tech/pegasys/teku/api/ChainDataProviderTest.java", "diffHunk": "@@ -798,6 +798,29 @@ public void filteredValidatorsList_shouldFilterByValidatorPubkey() {\n     assertThat(pubkeys).containsExactly(key);\n   }\n \n+  @Test\n+  public void validatorParameterToIndex_shouldThrowBadRequestExceptionWhenIndexInvalid() {\n+    final ChainDataProvider provider =\n+        new ChainDataProvider(recentChainData, combinedChainDataClient);\n+    assertThrows(BadRequestException.class, () -> provider.validatorParameterToIndex(\"a\"));\n+  }\n+\n+  @Test\n+  public void validatorParameterToIndex_shouldThrowBadRequestExceptionWhenIndexTooHigh() {\n+    final ChainDataProvider provider =\n+        new ChainDataProvider(recentChainData, combinedChainDataClient);\n+    assertThrows(BadRequestException.class, () -> provider.validatorParameterToIndex(\"1024000\"));\n+  }\n+\n+  @Test\n+  public void validatorParameterToIndex_shouldThrowBadRequestExceptionWhenKeyNotFound() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1NDQ2NA=="}, "originalCommit": {"oid": "9e5e6c3f0e6c457d8c4907b035f3747874195880"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTc2NTQ0OnYy", "diffSide": "RIGHT", "path": "data/serializer/src/main/java/tech/pegasys/teku/api/response/v1/beacon/ValidatorResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToxOTozOVrOHqDNfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToxOTozOVrOHqDNfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1NDg0Nw==", "bodyText": "Would be better to check the index is valid ahead of time rather than catching the IndexOutOfBoundsException.", "url": "https://github.com/ConsenSys/teku/pull/3110#discussion_r513854847", "createdAt": "2020-10-29T01:19:39Z", "author": {"login": "ajsutton"}, "path": "data/serializer/src/main/java/tech/pegasys/teku/api/response/v1/beacon/ValidatorResponse.java", "diffHunk": "@@ -60,14 +63,18 @@ public ValidatorResponse(\n   }\n \n   public static ValidatorResponse fromState(final BeaconState state, final Integer index) {\n-    tech.pegasys.teku.datastructures.state.Validator validatorInternal =\n-        state.getValidators().get(index);\n-    final UInt64 current_epoch = compute_epoch_at_slot(state.getSlot());\n-    return new ValidatorResponse(\n-        UInt64.valueOf(index),\n-        state.getBalances().get(index),\n-        getValidatorStatus(current_epoch, validatorInternal),\n-        new Validator(validatorInternal));\n+    try {\n+      tech.pegasys.teku.datastructures.state.Validator validatorInternal =\n+          state.getValidators().get(index);\n+      final UInt64 current_epoch = compute_epoch_at_slot(state.getSlot());\n+      return new ValidatorResponse(\n+          UInt64.valueOf(index),\n+          state.getBalances().get(index),\n+          getValidatorStatus(current_epoch, validatorInternal),\n+          new Validator(validatorInternal));\n+    } catch (IndexOutOfBoundsException ex) {\n+      return ValidatorResponse.EMPTY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5e6c3f0e6c457d8c4907b035f3747874195880"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDQyMDUzOnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/teku/api/ChainDataProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNDo0ODowMFrOHqJ_3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzoyNDo0M1rOHqPIKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk2NjA0NQ==", "bodyText": "nit: this one can just use .flatMap instead of .map as it's not an IntStream.", "url": "https://github.com/ConsenSys/teku/pull/3110#discussion_r513966045", "createdAt": "2020-10-29T04:48:00Z", "author": {"login": "ajsutton"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/ChainDataProvider.java", "diffHunk": "@@ -562,6 +559,7 @@ public void requireStoreAvailable() {\n       final tech.pegasys.teku.datastructures.state.BeaconState state) {\n     return validatorIndices.stream()\n         .map(index -> ValidatorResponse.fromState(state, index))\n+        .flatMap(Optional::stream)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "741b87b5ac0752d25678817e1e8968334eceb856"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1MDA5MQ==", "bodyText": "im doing something wrong, because i the compiler didnt like me on this one...", "url": "https://github.com/ConsenSys/teku/pull/3110#discussion_r514050091", "createdAt": "2020-10-29T07:24:43Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/ChainDataProvider.java", "diffHunk": "@@ -562,6 +559,7 @@ public void requireStoreAvailable() {\n       final tech.pegasys.teku.datastructures.state.BeaconState state) {\n     return validatorIndices.stream()\n         .map(index -> ValidatorResponse.fromState(state, index))\n+        .flatMap(Optional::stream)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk2NjA0NQ=="}, "originalCommit": {"oid": "741b87b5ac0752d25678817e1e8968334eceb856"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDQyMzcxOnYy", "diffSide": "RIGHT", "path": "data/serializer/src/main/java/tech/pegasys/teku/api/response/v1/beacon/ValidatorResponse.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNDo0OToyN1rOHqKB_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODo0NDo0MVrOHqRkSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk2NjU4OQ==", "bodyText": "If this is going to throw an exception if the index is too big then it doesn't need to return Optional because it will never return empty.  I wouldn't have expected a validator index being too big to be a bad request, it's just not found and so the validator wouldn't be included in the results.", "url": "https://github.com/ConsenSys/teku/pull/3110#discussion_r513966589", "createdAt": "2020-10-29T04:49:27Z", "author": {"login": "ajsutton"}, "path": "data/serializer/src/main/java/tech/pegasys/teku/api/response/v1/beacon/ValidatorResponse.java", "diffHunk": "@@ -59,15 +62,20 @@ public ValidatorResponse(\n     this.validator = validator;\n   }\n \n-  public static ValidatorResponse fromState(final BeaconState state, final Integer index) {\n+  public static Optional<ValidatorResponse> fromState(\n+      final BeaconState state, final Integer index) {\n+    if (index >= state.getValidators().size()) {\n+      throw new BadRequestException(\"Validator index out of bounds: \" + index);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "741b87b5ac0752d25678817e1e8968334eceb856"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1MDQ1Mw==", "bodyText": "was getting index out of bounds, which you didnt want to catch, so this was option b, i'll have to have another look.", "url": "https://github.com/ConsenSys/teku/pull/3110#discussion_r514050453", "createdAt": "2020-10-29T07:25:41Z", "author": {"login": "rolfyone"}, "path": "data/serializer/src/main/java/tech/pegasys/teku/api/response/v1/beacon/ValidatorResponse.java", "diffHunk": "@@ -59,15 +62,20 @@ public ValidatorResponse(\n     this.validator = validator;\n   }\n \n-  public static ValidatorResponse fromState(final BeaconState state, final Integer index) {\n+  public static Optional<ValidatorResponse> fromState(\n+      final BeaconState state, final Integer index) {\n+    if (index >= state.getValidators().size()) {\n+      throw new BadRequestException(\"Validator index out of bounds: \" + index);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk2NjU4OQ=="}, "originalCommit": {"oid": "741b87b5ac0752d25678817e1e8968334eceb856"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA5MDA1OQ==", "bodyText": "Just return Optional.empty() here instead of throwing an exception.", "url": "https://github.com/ConsenSys/teku/pull/3110#discussion_r514090059", "createdAt": "2020-10-29T08:44:41Z", "author": {"login": "ajsutton"}, "path": "data/serializer/src/main/java/tech/pegasys/teku/api/response/v1/beacon/ValidatorResponse.java", "diffHunk": "@@ -59,15 +62,20 @@ public ValidatorResponse(\n     this.validator = validator;\n   }\n \n-  public static ValidatorResponse fromState(final BeaconState state, final Integer index) {\n+  public static Optional<ValidatorResponse> fromState(\n+      final BeaconState state, final Integer index) {\n+    if (index >= state.getValidators().size()) {\n+      throw new BadRequestException(\"Validator index out of bounds: \" + index);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk2NjU4OQ=="}, "originalCommit": {"oid": "741b87b5ac0752d25678817e1e8968334eceb856"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDQ1NjkyOnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/teku/api/ChainDataProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjo0MzoyNlrOHqxPeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMjo0MzoyNlrOHqxPeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwOTAxNg==", "bodyText": "This looks like a case where it should result in not found rather than BadRequestException - the index can be parsed but there is no validator at that index. Suspect this should just return Optional.empty which matches the behaviour of a public key not being found and avoids a lot of places needing to check for an index being too large later.", "url": "https://github.com/ConsenSys/teku/pull/3110#discussion_r514609016", "createdAt": "2020-10-29T22:43:26Z", "author": {"login": "ajsutton"}, "path": "data/provider/src/main/java/tech/pegasys/teku/api/ChainDataProvider.java", "diffHunk": "@@ -448,28 +447,26 @@ public void requireStoreAvailable() {\n         BLSPubKey publicKey = BLSPubKey.fromHexString(validatorParameter);\n         return getValidatorIndex(state, publicKey.asBLSPublicKey());\n       } catch (PublicKeyException ex) {\n-        throw new IllegalArgumentException(\n-            String.format(\"Invalid public key: %s\", validatorParameter));\n+        throw new BadRequestException(String.format(\"Invalid public key: %s\", validatorParameter));\n       }\n     } else {\n       try {\n         final UInt64 numericValidator = UInt64.valueOf(validatorParameter);\n         if (numericValidator.isGreaterThan(UInt64.valueOf(Integer.MAX_VALUE))) {\n-          throw new IllegalArgumentException(\n+          throw new BadRequestException(\n               String.format(\"Validator Index is too high to use: %s\", validatorParameter));\n         }\n         final int validatorIndex = numericValidator.intValue();\n         final int validatorCount = state.getValidators().size();\n         if (validatorIndex > validatorCount) {\n-          throw new IllegalArgumentException(\n+          throw new BadRequestException(\n               String.format(\n                   \"Invalid validator index: %d, exceeds validator count: %d\",\n                   validatorIndex, validatorCount));\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39878a539cc686caf4c7b2f9a5ebe3132c51d11a"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3121, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}