{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MjkwOTEz", "number": 1626, "title": "Replay hot blocks at startup for protoarray", "bodyText": "PR Description\nReplays hot blocks in Store for ProtoArray so that when processing head after a restart, ProtoArray does not throw any errors.\nAlso, switches processBlock to use ReadOnlyStore, and block state's justified and finalized checkpoints instead of ones from the Store.", "createdAt": "2020-04-20T20:41:01Z", "url": "https://github.com/ConsenSys/teku/pull/1626", "merged": true, "mergeCommit": {"oid": "1e9077eee58352042f85916154a8ec532bf4a2b0"}, "closed": true, "closedAt": "2020-04-20T23:16:54Z", "author": {"login": "cemozerr"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZlPESAH2gAyNDA2MjkwOTEzOjRlYzg1OTc0N2RlYWI0NTM3ZDIwNzUyNWMyMWY4ZGNiOTQ4NGFlZDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZnSsHAH2gAyNDA2MjkwOTEzOjY4NTU4ODQ3YWUwY2I5ZDQxODgyNzc0MTc1OGU5NjhkYzQwNTFkZmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4ec859747deab4537d207525c21f8dcb9484aed3", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/4ec859747deab4537d207525c21f8dcb9484aed3", "committedDate": "2020-04-20T20:37:08Z", "message": "Replay hot blocks at startup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4005556b3e21c4c075dbc7fbce491b5a1251cd71", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/4005556b3e21c4c075dbc7fbce491b5a1251cd71", "committedDate": "2020-04-20T20:38:47Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21cd37d132ac87e55accaee43d5dd9b04c078360", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/21cd37d132ac87e55accaee43d5dd9b04c078360", "committedDate": "2020-04-20T20:43:35Z", "message": "Fix stub fork choice strategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c3ee821f459ee942861a5dbe40820dda9ddde7a", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/3c3ee821f459ee942861a5dbe40820dda9ddde7a", "committedDate": "2020-04-20T22:41:25Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2ODY2Njg1", "url": "https://github.com/ConsenSys/teku/pull/1626#pullrequestreview-396866685", "createdAt": "2020-04-20T22:51:32Z", "commit": {"oid": "3c3ee821f459ee942861a5dbe40820dda9ddde7a"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo1MTozMlrOGIq3uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo1NjoyNFrOGIq_2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NDE4Nw==", "bodyText": "You can simplify this with streams to:\n  private static void processBlocksInStoreAtStartup(ReadOnlyStore store, ProtoArray protoArray) {\n    store.getBlockRoots().stream()\n        .map(store::getBlock)\n        .sorted(Comparator.comparing(BeaconBlock::getSlot))\n        .forEach(block -> processBlockAtStartup(store, protoArray, block));\n  }\n\n  private static void processBlockAtStartup(\n      final ReadOnlyStore store, final ProtoArray protoArray, final BeaconBlock block) {\n    Bytes32 blockRoot = block.hash_tree_root();\n    protoArray.onBlock(\n        block.getSlot(),\n        blockRoot,\n        store.getBlockRoots().contains(block.getParent_root())\n            ? Optional.of(block.getParent_root())\n            : Optional.empty(),\n        block.getState_root(),\n        store.getBlockState(block.hash_tree_root()).getCurrent_justified_checkpoint().getEpoch(),\n        store.getBlockState(block.hash_tree_root()).getFinalized_checkpoint().getEpoch());\n  }", "url": "https://github.com/ConsenSys/teku/pull/1626#discussion_r411744187", "createdAt": "2020-04-20T22:51:32Z", "author": {"login": "ajsutton"}, "path": "protoarray/src/main/java/tech/pegasys/artemis/protoarray/ProtoArrayForkChoiceStrategy.java", "diffHunk": "@@ -113,30 +119,30 @@ public void maybePrune(Bytes32 finalizedRoot) {\n \n   // Internal\n \n-  static ProtoArrayForkChoiceStrategy create(\n-      UnsignedLong finalizedBlockSlot,\n-      Bytes32 finalizedBlockStateRoot,\n-      UnsignedLong justifiedEpoch,\n-      UnsignedLong finalizedEpoch,\n-      Bytes32 finalizedBlockRoot) {\n-    ProtoArray protoArray =\n-        new ProtoArray(\n-            Constants.PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD,\n-            justifiedEpoch,\n-            finalizedEpoch,\n-            new ArrayList<>(),\n-            new HashMap<>());\n+  private static void processBlocksInStoreAtStartup(ReadOnlyStore store, ProtoArray protoArray) {\n+    List<BeaconBlock> blocks = new ArrayList<>();\n+    for (Bytes32 blockRoots : store.getBlockRoots()) {\n+      BeaconBlock block =\n+          checkNotNull(\n+              store.getBlock(blockRoots),\n+              \"ProtoArrayForkChoiceStrategy: Store does not contain the block of the block root it stores\");\n+      blocks.add(block);\n+    }\n \n-    protoArray.onBlock(\n-        finalizedBlockSlot,\n-        finalizedBlockRoot,\n-        Optional.empty(),\n-        finalizedBlockStateRoot,\n-        justifiedEpoch,\n-        finalizedEpoch);\n+    blocks.sort(Comparator.comparing(BeaconBlock::getSlot));\n \n-    return new ProtoArrayForkChoiceStrategy(\n-        protoArray, new ElasticList<>(VoteTracker::Default), new ArrayList<>());\n+    for (BeaconBlock block : blocks) {\n+      Bytes32 blockRoot = block.hash_tree_root();\n+      protoArray.onBlock(\n+          block.getSlot(),\n+          blockRoot,\n+          store.getBlockRoots().contains(block.getParent_root())\n+              ? Optional.of(block.getParent_root())\n+              : Optional.empty(),\n+          block.getState_root(),\n+          store.getBlockState(block.hash_tree_root()).getCurrent_justified_checkpoint().getEpoch(),\n+          store.getBlockState(block.hash_tree_root()).getFinalized_checkpoint().getEpoch());\n+    }\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c3ee821f459ee942861a5dbe40820dda9ddde7a"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NjI2NA==", "bodyText": "You could put the checkNotNull back in but I'm not sure it's worth it given that Store guarantees that it has a block for every block root (and it literally gets the block roots from the keyset of its map of blocks).", "url": "https://github.com/ConsenSys/teku/pull/1626#discussion_r411746264", "createdAt": "2020-04-20T22:56:24Z", "author": {"login": "ajsutton"}, "path": "protoarray/src/main/java/tech/pegasys/artemis/protoarray/ProtoArrayForkChoiceStrategy.java", "diffHunk": "@@ -113,30 +119,30 @@ public void maybePrune(Bytes32 finalizedRoot) {\n \n   // Internal\n \n-  static ProtoArrayForkChoiceStrategy create(\n-      UnsignedLong finalizedBlockSlot,\n-      Bytes32 finalizedBlockStateRoot,\n-      UnsignedLong justifiedEpoch,\n-      UnsignedLong finalizedEpoch,\n-      Bytes32 finalizedBlockRoot) {\n-    ProtoArray protoArray =\n-        new ProtoArray(\n-            Constants.PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD,\n-            justifiedEpoch,\n-            finalizedEpoch,\n-            new ArrayList<>(),\n-            new HashMap<>());\n+  private static void processBlocksInStoreAtStartup(ReadOnlyStore store, ProtoArray protoArray) {\n+    List<BeaconBlock> blocks = new ArrayList<>();\n+    for (Bytes32 blockRoots : store.getBlockRoots()) {\n+      BeaconBlock block =\n+          checkNotNull(\n+              store.getBlock(blockRoots),\n+              \"ProtoArrayForkChoiceStrategy: Store does not contain the block of the block root it stores\");\n+      blocks.add(block);\n+    }\n \n-    protoArray.onBlock(\n-        finalizedBlockSlot,\n-        finalizedBlockRoot,\n-        Optional.empty(),\n-        finalizedBlockStateRoot,\n-        justifiedEpoch,\n-        finalizedEpoch);\n+    blocks.sort(Comparator.comparing(BeaconBlock::getSlot));\n \n-    return new ProtoArrayForkChoiceStrategy(\n-        protoArray, new ElasticList<>(VoteTracker::Default), new ArrayList<>());\n+    for (BeaconBlock block : blocks) {\n+      Bytes32 blockRoot = block.hash_tree_root();\n+      protoArray.onBlock(\n+          block.getSlot(),\n+          blockRoot,\n+          store.getBlockRoots().contains(block.getParent_root())\n+              ? Optional.of(block.getParent_root())\n+              : Optional.empty(),\n+          block.getState_root(),\n+          store.getBlockState(block.hash_tree_root()).getCurrent_justified_checkpoint().getEpoch(),\n+          store.getBlockState(block.hash_tree_root()).getFinalized_checkpoint().getEpoch());\n+    }\n   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NDE4Nw=="}, "originalCommit": {"oid": "3c3ee821f459ee942861a5dbe40820dda9ddde7a"}, "originalPosition": 112}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff8d45d397f31d7be00a4df860dc973be38dd145", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/ff8d45d397f31d7be00a4df860dc973be38dd145", "committedDate": "2020-04-20T23:00:37Z", "message": "Simplify using streams"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68558847ae0cb9d418827741758e968dc4051dfb", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/68558847ae0cb9d418827741758e968dc4051dfb", "committedDate": "2020-04-20T23:00:54Z", "message": "Merge branch 'master' into protoarrayReplayHotBlocksAtStartup"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4324, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}