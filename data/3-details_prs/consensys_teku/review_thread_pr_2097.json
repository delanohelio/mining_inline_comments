{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxODUzNjI1", "number": 2097, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDozMjo0NFrOEEGeCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo1OTo0MlrOEGepbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzM1NzU1OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDozMjo0NFrOGhg7Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDozMjo0NFrOGhg7Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NTY3MQ==", "bodyText": "The modern version of Timer is ScheduledThreadPoolExecutor which is probably better to use.", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r437795671", "createdAt": "2020-06-10T00:32:44Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.pow;\n+\n+import static tech.pegasys.teku.logging.StatusLogger.STATUS_LOG;\n+\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class Eth1StatusLogger {\n+  private final AtomicBoolean timerActive = new AtomicBoolean();\n+  private final AtomicInteger failCount = new AtomicInteger(0);\n+  private final long interval;\n+  private final TimerTask timerTask;\n+  private Timer timer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1a216e9b97a0f45f1af2ddaf52b39ade49ed42"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzM2MzU2OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDozNjo0NlrOGhg-6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDozNjo0NlrOGhg-6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NjU4Nw==", "bodyText": "If we have a single request fail and everything else work, this will wind up reporting that the ETH1 service has been down for the entire timer interval which is misleading.  We really want to ignore individual errors but report when there is problem for a sustained period.  If the errors persist for more than one interval we'd also want the time reported in the logs to increase so each log reports the total outage period, not just repeatedly report the same period.\nSo I'd say we nee to report when requests start working to this class.  Then it can track how long requests have been failing for and alert as needed.  Having a ErrorTrackingEth1Provider which implements Eth1Provider and delegates much like ThrottlingEth1Provider does is probably the neatest way to do this - then it automatically tracks all the ETH1 requests we make and all the error tracking is kept in one place.", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r437796587", "createdAt": "2020-06-10T00:36:46Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.pow;\n+\n+import static tech.pegasys.teku.logging.StatusLogger.STATUS_LOG;\n+\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class Eth1StatusLogger {\n+  private final AtomicBoolean timerActive = new AtomicBoolean();\n+  private final AtomicInteger failCount = new AtomicInteger(0);\n+  private final long interval;\n+  private final TimerTask timerTask;\n+  private Timer timer;\n+\n+  public Eth1StatusLogger(final long interval) {\n+    this.interval = interval;\n+    this.timerTask =\n+        new TimerTask() {\n+          @Override\n+          public void run() {\n+            if (failCount.get() > 1) {\n+              STATUS_LOG.eth1ServiceDown(Eth1StatusLogger.this.interval);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1a216e9b97a0f45f1af2ddaf52b39ade49ed42"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzM2ODAxOnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDozOTo0MFrOGhhBuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDozOTo0MFrOGhhBuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NzMwNA==", "bodyText": "reachedHead will need to be an AtomicBoolean as multiple threads could be involved.", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r437797304", "createdAt": "2020-06-10T00:39:40Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java", "diffHunk": "@@ -82,6 +90,10 @@ private void onLatestBlockHead(final Block headBlock) {\n     if (headAtFollowDistance\n         .map(current -> current.compareTo(newHeadAtFollowDistance) < 0)\n         .orElse(true)) {\n+      if (!reachedHead) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb1a216e9b97a0f45f1af2ddaf52b39ade49ed42"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTcyNDM5OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/teku/pow/DepositFetcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMDo1OTowN1rOGizwjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMDo1OTowN1rOGizwjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1Mjc4Mg==", "bodyText": "Couldn't this also be handled by ErrorTrackignEth1Provider? It can just use the catchAndRethrow method of SafeFuture.", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r439152782", "createdAt": "2020-06-12T00:59:07Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/teku/pow/DepositFetcher.java", "diffHunk": "@@ -94,11 +97,12 @@ public DepositFetcher(\n         .depositEventInRange(fromBlock, toBlock)\n         .exceptionallyCompose(\n             (err) -> {\n-              LOG.warn(\n+              LOG.debug(\n                   \"Failed to request deposit events for block numbers in the range ({}, {}). Retrying.\",\n                   fromBlockNumber,\n                   toBlockNumber,\n                   err);\n+              eth1StatusLogger.fail();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1ececa5566514a6e096fac129a49e7c9d79128"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTcyODE5OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMTowMToyNVrOGizy3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMTowMToyNVrOGizy3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1MzM3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (!reachedHead.get()) {\n          \n          \n            \n                  if (reachedHead.compareAndSet(false, true)) {\n          \n      \n    \n    \n  \n\nThen drop the reachedHead.set(true).  That way you're using a single atomic operation to check and update so it's thread safe.", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r439153373", "createdAt": "2020-06-12T01:01:25Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java", "diffHunk": "@@ -82,6 +90,10 @@ private void onLatestBlockHead(final Block headBlock) {\n     if (headAtFollowDistance\n         .map(current -> current.compareTo(newHeadAtFollowDistance) < 0)\n         .orElse(true)) {\n+      if (!reachedHead.get()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1ececa5566514a6e096fac129a49e7c9d79128"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTc1Mjc3OnYy", "diffSide": "RIGHT", "path": "services/powchain/src/main/java/tech/pegasys/teku/services/powchain/PowchainService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMToxNzoxN1rOGi0BkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMToxNzoxN1rOGi0BkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1NzEzNg==", "bodyText": "Probably should make this just a local variable.  Ultimately we should only need to provide it to ErrorTrackingEth1Provider.", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r439157136", "createdAt": "2020-06-12T01:17:17Z", "author": {"login": "ajsutton"}, "path": "services/powchain/src/main/java/tech/pegasys/teku/services/powchain/PowchainService.java", "diffHunk": "@@ -41,6 +43,7 @@\n \n   private final Eth1DepositManager eth1DepositManager;\n   private final Eth1HeadTracker headTracker;\n+  private final Eth1StatusLogger eth1StatusLogger = new Eth1StatusLogger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1ececa5566514a6e096fac129a49e7c9d79128"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTc3MTAzOnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMToyOTowN1rOGi0MnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMToyOTowN1rOGi0MnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1OTk2NQ==", "bodyText": "Sorry, I led you astray here - don't know why I didn't think of this when I mentioned ScheduledExecutorService.  We have an abstraction (AsyncRunner) that makes running things after some period a lot more testable and generally makes managing life cycle easier.  And we also have one for accessing time - TimeProvider (which you can get from the ServiceConfig passed into PowchainService constructor).\nSo using those I think we wind up with:\npublic class Eth1StatusLogger {\n  private static final Logger LOG = LogManager.getLogger();\n  private static final int LOG_INTERVAL = 30000;\n\n  private final AsyncRunner asyncRunner;\n  private final TimeProvider timeProvider;\n\n  private Optional<Cancellable> activeReporter = Optional.empty();\n\n  public Eth1StatusLogger(final AsyncRunner asyncRunner, final TimeProvider timeProvider) {\n    this.asyncRunner = asyncRunner;\n    this.timeProvider = timeProvider;\n  }\n\n  synchronized void success() {\n    activeReporter.ifPresent(\n        reporter -> {\n          reporter.cancel();\n          activeReporter = Optional.empty();\n        });\n  }\n\n  synchronized void fail() {\n    if (activeReporter.isEmpty()) {\n      final UnsignedLong outageStartInSeconds = timeProvider.getTimeInSeconds();\n      final Cancellable reporter =\n          asyncRunner.runWithFixedDelay(\n              () -> reportOutage(outageStartInSeconds),\n              LOG_INTERVAL,\n              TimeUnit.MILLISECONDS,\n              error -> LOG.error(\"Failed to check ETH1 status\", error));\n      activeReporter = Optional.of(reporter);\n    }\n  }\n\n  private void reportOutage(final UnsignedLong outageStartInSeconds) {\n    STATUS_LOG.eth1ServiceDown(timeProvider.getTimeInSeconds().minus(outageStartInSeconds));\n  }\n}\n\nSo basically when a failure comes in, start a periodic report of how long the failure has been happening and when success happens cancel that reporting.", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r439159965", "createdAt": "2020-06-12T01:29:07Z", "author": {"login": "ajsutton"}, "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.pow;\n+\n+import static tech.pegasys.teku.logging.StatusLogger.STATUS_LOG;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class Eth1StatusLogger {\n+  private static final int LOG_INTERVAL = 30000;\n+  private final AtomicBoolean timerActive = new AtomicBoolean(false);\n+  private Instant startInstant;\n+  private ScheduledExecutorService executor;\n+  private ScheduledFuture<?> scheduledFuture;\n+\n+  private void start() {\n+    this.startInstant = Instant.now();\n+    this.timerActive.set(true);\n+    this.executor = Executors.newScheduledThreadPool(1);\n+    scheduledFuture =\n+        executor.scheduleAtFixedRate(\n+            () ->\n+                STATUS_LOG.eth1ServiceDown(\n+                    Duration.between(startInstant, Instant.now()).getSeconds()),\n+            LOG_INTERVAL,\n+            LOG_INTERVAL,\n+            TimeUnit.MILLISECONDS);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c1ececa5566514a6e096fac129a49e7c9d79128"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjI4MzA0OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo1ODoxOVrOGlTTkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo1ODoxOVrOGlTTkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2NjgwMA==", "bodyText": "nit: Eth1 is used elsewhere rather than ETH1", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r441766800", "createdAt": "2020-06-17T18:58:19Z", "author": {"login": "macfarla"}, "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.pow;\n+\n+import static tech.pegasys.teku.logging.StatusLogger.STATUS_LOG;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.util.async.AsyncRunner;\n+import tech.pegasys.teku.util.async.Cancellable;\n+import tech.pegasys.teku.util.time.TimeProvider;\n+\n+public class Eth1StatusLogger {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private static final int LOG_INTERVAL = 30000;\n+\n+  private final AsyncRunner asyncRunner;\n+  private final TimeProvider timeProvider;\n+\n+  private Optional<Cancellable> activeReporter = Optional.empty();\n+\n+  public Eth1StatusLogger(final AsyncRunner asyncRunner, final TimeProvider timeProvider) {\n+    this.asyncRunner = asyncRunner;\n+    this.timeProvider = timeProvider;\n+  }\n+\n+  synchronized void success() {\n+    activeReporter.ifPresent(\n+        reporter -> {\n+          reporter.cancel();\n+          activeReporter = Optional.empty();\n+        });\n+  }\n+\n+  synchronized void fail() {\n+    if (activeReporter.isEmpty()) {\n+      final UnsignedLong outageStartInSeconds = timeProvider.getTimeInSeconds();\n+      final Cancellable reporter =\n+          asyncRunner.runWithFixedDelay(\n+              () -> reportOutage(outageStartInSeconds),\n+              LOG_INTERVAL,\n+              TimeUnit.MILLISECONDS,\n+              error -> LOG.error(\"Failed to check ETH1 status\", error));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75b1e8d82adbb5f10b46d36656f90104363a6431"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjI4OTgzOnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo1OTozMlrOGlTYHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo1OTozMlrOGlTYHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2Nzk2NQ==", "bodyText": "Nit: Eth1 used elsewhere rather than ETH1", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r441767965", "createdAt": "2020-06-17T18:59:32Z", "author": {"login": "macfarla"}, "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java", "diffHunk": "@@ -56,7 +58,7 @@ private void pollLatestHead() {\n         .thenAccept(this::onLatestBlockHead)\n         .exceptionally(\n             error -> {\n-              LOG.warn(\"Failed to get latest ETH1 chain head. Will retry.\", error);\n+              LOG.debug(\"Failed to get latest ETH1 chain head. Will retry.\", error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75b1e8d82adbb5f10b46d36656f90104363a6431"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjI5MDM3OnYy", "diffSide": "RIGHT", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo1OTo0MlrOGlTYeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo1OTo0MlrOGlTYeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2ODA1OA==", "bodyText": "Nit: Eth1 used elsewhere rather than ETH1", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r441768058", "createdAt": "2020-06-17T18:59:42Z", "author": {"login": "macfarla"}, "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java", "diffHunk": "@@ -82,6 +84,10 @@ private void onLatestBlockHead(final Block headBlock) {\n     if (headAtFollowDistance\n         .map(current -> current.compareTo(newHeadAtFollowDistance) < 0)\n         .orElse(true)) {\n+      if (reachedHead.compareAndSet(false, true)) {\n+        STATUS_LOG.eth1AtHead();\n+        reachedHead.set(true);\n+      }\n       headAtFollowDistance = Optional.of(newHeadAtFollowDistance);\n       LOG.debug(\"ETH1 block at follow distance updated to {}\", newHeadAtFollowDistance);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75b1e8d82adbb5f10b46d36656f90104363a6431"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3566, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}