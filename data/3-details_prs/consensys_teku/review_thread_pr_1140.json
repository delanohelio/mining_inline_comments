{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNzA2ODg0", "number": 1140, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNDo1Njo0NVrODdkDkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNDo1ODozM1rODdkEew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzI2MDM0OnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/artemis/storage/ChainStorageClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNDo1Njo0NVrOFmPRmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNDo0NDowNFrOFmdhng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0MDQ3NQ==", "bodyText": "I think 0 is right in the cases getFinalizedEpoch was intended for.  You can check isPregenesis if you specifically want to know if the store is inited or not - but otherwise treating the finalised and justified epoch as 0 is reasonable.  Not so much for the zero bytes...", "url": "https://github.com/ConsenSys/teku/pull/1140#discussion_r375640475", "createdAt": "2020-02-06T04:56:45Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/artemis/storage/ChainStorageClient.java", "diffHunk": "@@ -261,10 +261,23 @@ public boolean isIncludedInBestState(final Bytes32 blockRoot) {\n     return Optional.of(BeaconStateUtil.get_block_root_at_slot(bestState, slot));\n   }\n \n+  // TODO: These methods should not return zero if null. We should handle this better", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74eb5c7c93e2918182823c91471fb2b3083eacd7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg3Mzk1MA==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/1140#discussion_r375873950", "createdAt": "2020-02-06T14:44:04Z", "author": {"login": "cemozerr"}, "path": "storage/src/main/java/tech/pegasys/artemis/storage/ChainStorageClient.java", "diffHunk": "@@ -261,10 +261,23 @@ public boolean isIncludedInBestState(final Bytes32 blockRoot) {\n     return Optional.of(BeaconStateUtil.get_block_root_at_slot(bestState, slot));\n   }\n \n+  // TODO: These methods should not return zero if null. We should handle this better", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0MDQ3NQ=="}, "originalCommit": {"oid": "74eb5c7c93e2918182823c91471fb2b3083eacd7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzI2MjY3OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNDo1ODozM1rOFmPS7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNDoyMTozNVrOFmctPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0MDgxMg==", "bodyText": "I think we should avoid setting the precedent that Javalin APIs leak into here - it should be transport agnostic.  Maybe just return null for now and we can sort out how to handle more meaningful error response codes when we properly revisit the REST APIs.", "url": "https://github.com/ConsenSys/teku/pull/1140#discussion_r375640812", "createdAt": "2020-02-06T04:58:33Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -27,12 +36,40 @@ public BeaconBlockHandler(ChainStorageClient client) {\n \n   @Override\n   public String getPath() {\n-    return \"/beacon/block\";\n+    return \"/beacon/block/\";\n   }\n \n   @Override\n   public Object handleRequest(RequestParams param) {\n-    Bytes32 root = Bytes32.fromHexString(param.getQueryParam(\"root\"));\n-    return client.getStore() != null ? client.getStore().getBlock(root) : null;\n+    Map<String, List<String>> queryParamMap = param.getQueryParamMap();\n+    Map<String, Object> jsonObject = new HashMap<>();\n+    BeaconBlock block;\n+    Bytes32 blockRoot;\n+    if (queryParamMap.containsKey(\"root\")) {\n+      Bytes32 root = Bytes32.fromHexString(param.getQueryParam(\"root\"));\n+      return client.getStore() != null ? client.getStore().getBlock(root) : null;\n+    } else if (queryParamMap.containsKey(\"epoch\")) {\n+      UnsignedLong epoch = UnsignedLong.valueOf(param.getQueryParam(\"epoch\"));\n+      Optional<Bytes32> blockRootAtSlot =\n+          client.getBlockRootBySlot(compute_start_slot_at_epoch(epoch));\n+      blockRoot = blockRootAtSlot.orElse(null);\n+      block =\n+          client.getStore() != null && blockRootAtSlot.isPresent()\n+              ? client.getStore().getBlock(blockRootAtSlot.get())\n+              : null;\n+    } else if (queryParamMap.containsKey(\"slot\")) {\n+      UnsignedLong slot = UnsignedLong.valueOf(param.getQueryParam(\"slot\"));\n+      Optional<Bytes32> blockRootAtSlot = client.getBlockRootBySlot(slot);\n+      blockRoot = blockRootAtSlot.orElse(null);\n+      block =\n+          client.getStore() != null && blockRootAtSlot.isPresent()\n+              ? client.getStore().getBlock(blockRootAtSlot.get())\n+              : null;\n+    } else {\n+      throw new ForbiddenResponse(\"Off limits.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74eb5c7c93e2918182823c91471fb2b3083eacd7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg2MDU0MA==", "bodyText": "Makes sense to me.", "url": "https://github.com/ConsenSys/teku/pull/1140#discussion_r375860540", "createdAt": "2020-02-06T14:21:35Z", "author": {"login": "cemozerr"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -27,12 +36,40 @@ public BeaconBlockHandler(ChainStorageClient client) {\n \n   @Override\n   public String getPath() {\n-    return \"/beacon/block\";\n+    return \"/beacon/block/\";\n   }\n \n   @Override\n   public Object handleRequest(RequestParams param) {\n-    Bytes32 root = Bytes32.fromHexString(param.getQueryParam(\"root\"));\n-    return client.getStore() != null ? client.getStore().getBlock(root) : null;\n+    Map<String, List<String>> queryParamMap = param.getQueryParamMap();\n+    Map<String, Object> jsonObject = new HashMap<>();\n+    BeaconBlock block;\n+    Bytes32 blockRoot;\n+    if (queryParamMap.containsKey(\"root\")) {\n+      Bytes32 root = Bytes32.fromHexString(param.getQueryParam(\"root\"));\n+      return client.getStore() != null ? client.getStore().getBlock(root) : null;\n+    } else if (queryParamMap.containsKey(\"epoch\")) {\n+      UnsignedLong epoch = UnsignedLong.valueOf(param.getQueryParam(\"epoch\"));\n+      Optional<Bytes32> blockRootAtSlot =\n+          client.getBlockRootBySlot(compute_start_slot_at_epoch(epoch));\n+      blockRoot = blockRootAtSlot.orElse(null);\n+      block =\n+          client.getStore() != null && blockRootAtSlot.isPresent()\n+              ? client.getStore().getBlock(blockRootAtSlot.get())\n+              : null;\n+    } else if (queryParamMap.containsKey(\"slot\")) {\n+      UnsignedLong slot = UnsignedLong.valueOf(param.getQueryParam(\"slot\"));\n+      Optional<Bytes32> blockRootAtSlot = client.getBlockRootBySlot(slot);\n+      blockRoot = blockRootAtSlot.orElse(null);\n+      block =\n+          client.getStore() != null && blockRootAtSlot.isPresent()\n+              ? client.getStore().getBlock(blockRootAtSlot.get())\n+              : null;\n+    } else {\n+      throw new ForbiddenResponse(\"Off limits.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0MDgxMg=="}, "originalCommit": {"oid": "74eb5c7c93e2918182823c91471fb2b3083eacd7"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2847, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}