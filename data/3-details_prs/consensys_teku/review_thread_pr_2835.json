{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNTE3NjQz", "number": 2835, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDozODoyMFrOEnE8xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzowNjo1NFrOEnI4DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDExMDE1OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/ListQueryParameterUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDozODoyMFrOHXeJtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDozODoyMFrOHXeJtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3MzMwMg==", "bodyText": "Might be worth adding some unit tests around these utils", "url": "https://github.com/ConsenSys/teku/pull/2835#discussion_r494373302", "createdAt": "2020-09-24T14:38:20Z", "author": {"login": "mbaxter"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/ListQueryParameterUtils.java", "diffHunk": "@@ -55,4 +55,11 @@\n           ex);\n     }\n   }\n+\n+  public static List<String> getParameterAsStringList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4ef2e56c84f4dc696e7b1128b8b27079774c2b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDEzMzM2OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/EventSubscriptionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDo0Mjo1OFrOHXeX6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDo0Mjo1OFrOHXeX6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3NjkzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final ConcurrentLinkedQueue<SseClient> clients = new ConcurrentLinkedQueue<>();\n          \n          \n            \n              private final Queue<SseClient> clients = new ConcurrentLinkedQueue<>();", "url": "https://github.com/ConsenSys/teku/pull/2835#discussion_r494376938", "createdAt": "2020-09-24T14:42:58Z", "author": {"login": "mbaxter"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/EventSubscriptionManager.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1;\n+\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TOPICS;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.sse.SseClient;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.response.v1.ChainReorgEvent;\n+import tech.pegasys.teku.api.response.v1.FinalizedCheckpointEvent;\n+import tech.pegasys.teku.beaconrestapi.ListQueryParameterUtils;\n+import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.infrastructure.events.EventChannels;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.storage.api.FinalizedCheckpointChannel;\n+import tech.pegasys.teku.storage.api.ReorgEventChannel;\n+\n+public class EventSubscriptionManager implements ReorgEventChannel, FinalizedCheckpointChannel {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private static final String CHAIN_REORG = \"chain_reorg\";\n+  private static final String HEAD = \"head\";\n+  private static final String BLOCK = \"block\";\n+  private static final String ATTESTATION = \"attestation\";\n+  private static final String VOLUNTARY_EXIT = \"voluntary_exit\";\n+  private static final String FINALIZED_CHECKPOINT = \"finalized_checkpoint\";\n+  private final JsonProvider jsonProvider;\n+  private final ChainDataProvider provider;\n+  private final ConcurrentLinkedQueue<SseClient> clients = new ConcurrentLinkedQueue<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4ef2e56c84f4dc696e7b1128b8b27079774c2b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDE2MzU0OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/EventSubscriptionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDo0OTowM1rOHXeqrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDo0OTowM1rOHXeqrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM4MTc0Mg==", "bodyText": "Should we back clients with a concurrent Map for faster lookup?:\nCollections.newSetFromMap(new ConcurrentHashMap<>())", "url": "https://github.com/ConsenSys/teku/pull/2835#discussion_r494381742", "createdAt": "2020-09-24T14:49:03Z", "author": {"login": "mbaxter"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/EventSubscriptionManager.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1;\n+\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TOPICS;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.sse.SseClient;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.response.v1.ChainReorgEvent;\n+import tech.pegasys.teku.api.response.v1.FinalizedCheckpointEvent;\n+import tech.pegasys.teku.beaconrestapi.ListQueryParameterUtils;\n+import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.infrastructure.events.EventChannels;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.storage.api.FinalizedCheckpointChannel;\n+import tech.pegasys.teku.storage.api.ReorgEventChannel;\n+\n+public class EventSubscriptionManager implements ReorgEventChannel, FinalizedCheckpointChannel {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private static final String CHAIN_REORG = \"chain_reorg\";\n+  private static final String HEAD = \"head\";\n+  private static final String BLOCK = \"block\";\n+  private static final String ATTESTATION = \"attestation\";\n+  private static final String VOLUNTARY_EXIT = \"voluntary_exit\";\n+  private static final String FINALIZED_CHECKPOINT = \"finalized_checkpoint\";\n+  private final JsonProvider jsonProvider;\n+  private final ChainDataProvider provider;\n+  private final ConcurrentLinkedQueue<SseClient> clients = new ConcurrentLinkedQueue<>();\n+\n+  public EventSubscriptionManager(\n+      final ChainDataProvider provider,\n+      final JsonProvider jsonProvider,\n+      final EventChannels eventChannels) {\n+    this.provider = provider;\n+    this.jsonProvider = jsonProvider;\n+    eventChannels.subscribe(ReorgEventChannel.class, this);\n+    eventChannels.subscribe(FinalizedCheckpointChannel.class, this);\n+  }\n+\n+  public static final List<String> VALID_EVENT_TYPES =\n+      List.of(CHAIN_REORG, HEAD, BLOCK, ATTESTATION, VOLUNTARY_EXIT, FINALIZED_CHECKPOINT);\n+\n+  public void registerClient(final SseClient sseClient) {\n+    LOG.trace(\"connected \" + sseClient.hashCode());\n+    sseClient.onClose(\n+        () -> {\n+          clients.remove(sseClient);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4ef2e56c84f4dc696e7b1128b8b27079774c2b"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDE3OTI4OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/EventSubscriptionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDo1MjoxMVrOHXe0Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDo1MjoxMVrOHXe0Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM4NDIxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOG.trace(ex);\n          \n          \n            \n                  LOG.error(ex);", "url": "https://github.com/ConsenSys/teku/pull/2835#discussion_r494384214", "createdAt": "2020-09-24T14:52:11Z", "author": {"login": "mbaxter"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/EventSubscriptionManager.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1;\n+\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TOPICS;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.sse.SseClient;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.response.v1.ChainReorgEvent;\n+import tech.pegasys.teku.api.response.v1.FinalizedCheckpointEvent;\n+import tech.pegasys.teku.beaconrestapi.ListQueryParameterUtils;\n+import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.infrastructure.events.EventChannels;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.storage.api.FinalizedCheckpointChannel;\n+import tech.pegasys.teku.storage.api.ReorgEventChannel;\n+\n+public class EventSubscriptionManager implements ReorgEventChannel, FinalizedCheckpointChannel {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private static final String CHAIN_REORG = \"chain_reorg\";\n+  private static final String HEAD = \"head\";\n+  private static final String BLOCK = \"block\";\n+  private static final String ATTESTATION = \"attestation\";\n+  private static final String VOLUNTARY_EXIT = \"voluntary_exit\";\n+  private static final String FINALIZED_CHECKPOINT = \"finalized_checkpoint\";\n+  private final JsonProvider jsonProvider;\n+  private final ChainDataProvider provider;\n+  private final ConcurrentLinkedQueue<SseClient> clients = new ConcurrentLinkedQueue<>();\n+\n+  public EventSubscriptionManager(\n+      final ChainDataProvider provider,\n+      final JsonProvider jsonProvider,\n+      final EventChannels eventChannels) {\n+    this.provider = provider;\n+    this.jsonProvider = jsonProvider;\n+    eventChannels.subscribe(ReorgEventChannel.class, this);\n+    eventChannels.subscribe(FinalizedCheckpointChannel.class, this);\n+  }\n+\n+  public static final List<String> VALID_EVENT_TYPES =\n+      List.of(CHAIN_REORG, HEAD, BLOCK, ATTESTATION, VOLUNTARY_EXIT, FINALIZED_CHECKPOINT);\n+\n+  public void registerClient(final SseClient sseClient) {\n+    LOG.trace(\"connected \" + sseClient.hashCode());\n+    sseClient.onClose(\n+        () -> {\n+          clients.remove(sseClient);\n+          LOG.trace(\"disconnected \" + sseClient.hashCode());\n+        });\n+    clients.add(sseClient);\n+  }\n+\n+  @Override\n+  public void reorgOccurred(\n+      final Bytes32 bestBlockRoot,\n+      final UInt64 bestSlot,\n+      final Bytes32 bestStateRoot,\n+      final Bytes32 oldBestBlockRoot,\n+      final Bytes32 oldBestStateRoot,\n+      final UInt64 commonAncestorSlot) {\n+    try {\n+      final UInt64 epoch = compute_epoch_at_slot(bestSlot);\n+\n+      final String reorgEventString =\n+          jsonProvider.objectToJSON(\n+              new ChainReorgEvent(\n+                  bestSlot,\n+                  bestSlot.minus(commonAncestorSlot),\n+                  oldBestBlockRoot,\n+                  bestBlockRoot,\n+                  oldBestStateRoot,\n+                  bestStateRoot,\n+                  epoch));\n+      sendEventToClients(CHAIN_REORG, reorgEventString);\n+    } catch (JsonProcessingException ex) {\n+      LOG.trace(ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4ef2e56c84f4dc696e7b1128b8b27079774c2b"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDE4ODE4OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/EventSubscriptionManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDo1NDowN1rOHXe6Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDo1NDowN1rOHXe6Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM4NTcxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOG.trace(ex);\n          \n          \n            \n                  LOG.error(ex);", "url": "https://github.com/ConsenSys/teku/pull/2835#discussion_r494385714", "createdAt": "2020-09-24T14:54:07Z", "author": {"login": "mbaxter"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/EventSubscriptionManager.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1;\n+\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TOPICS;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.sse.SseClient;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.response.v1.ChainReorgEvent;\n+import tech.pegasys.teku.api.response.v1.FinalizedCheckpointEvent;\n+import tech.pegasys.teku.beaconrestapi.ListQueryParameterUtils;\n+import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.infrastructure.events.EventChannels;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.storage.api.FinalizedCheckpointChannel;\n+import tech.pegasys.teku.storage.api.ReorgEventChannel;\n+\n+public class EventSubscriptionManager implements ReorgEventChannel, FinalizedCheckpointChannel {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private static final String CHAIN_REORG = \"chain_reorg\";\n+  private static final String HEAD = \"head\";\n+  private static final String BLOCK = \"block\";\n+  private static final String ATTESTATION = \"attestation\";\n+  private static final String VOLUNTARY_EXIT = \"voluntary_exit\";\n+  private static final String FINALIZED_CHECKPOINT = \"finalized_checkpoint\";\n+  private final JsonProvider jsonProvider;\n+  private final ChainDataProvider provider;\n+  private final ConcurrentLinkedQueue<SseClient> clients = new ConcurrentLinkedQueue<>();\n+\n+  public EventSubscriptionManager(\n+      final ChainDataProvider provider,\n+      final JsonProvider jsonProvider,\n+      final EventChannels eventChannels) {\n+    this.provider = provider;\n+    this.jsonProvider = jsonProvider;\n+    eventChannels.subscribe(ReorgEventChannel.class, this);\n+    eventChannels.subscribe(FinalizedCheckpointChannel.class, this);\n+  }\n+\n+  public static final List<String> VALID_EVENT_TYPES =\n+      List.of(CHAIN_REORG, HEAD, BLOCK, ATTESTATION, VOLUNTARY_EXIT, FINALIZED_CHECKPOINT);\n+\n+  public void registerClient(final SseClient sseClient) {\n+    LOG.trace(\"connected \" + sseClient.hashCode());\n+    sseClient.onClose(\n+        () -> {\n+          clients.remove(sseClient);\n+          LOG.trace(\"disconnected \" + sseClient.hashCode());\n+        });\n+    clients.add(sseClient);\n+  }\n+\n+  @Override\n+  public void reorgOccurred(\n+      final Bytes32 bestBlockRoot,\n+      final UInt64 bestSlot,\n+      final Bytes32 bestStateRoot,\n+      final Bytes32 oldBestBlockRoot,\n+      final Bytes32 oldBestStateRoot,\n+      final UInt64 commonAncestorSlot) {\n+    try {\n+      final UInt64 epoch = compute_epoch_at_slot(bestSlot);\n+\n+      final String reorgEventString =\n+          jsonProvider.objectToJSON(\n+              new ChainReorgEvent(\n+                  bestSlot,\n+                  bestSlot.minus(commonAncestorSlot),\n+                  oldBestBlockRoot,\n+                  bestBlockRoot,\n+                  oldBestStateRoot,\n+                  bestStateRoot,\n+                  epoch));\n+      sendEventToClients(CHAIN_REORG, reorgEventString);\n+    } catch (JsonProcessingException ex) {\n+      LOG.trace(ex);\n+    }\n+  }\n+\n+  @Override\n+  public void onNewFinalizedCheckpoint(final Checkpoint checkpoint) {\n+    try {\n+      Optional<Bytes32> stateRoot = provider.getStateRootFromBlockRoot(checkpoint.getRoot());\n+      final String checkpointString =\n+          jsonProvider.objectToJSON(\n+              new FinalizedCheckpointEvent(\n+                  checkpoint.getRoot(), stateRoot.orElse(Bytes32.ZERO), checkpoint.getEpoch()));\n+      sendEventToClients(FINALIZED_CHECKPOINT, checkpointString);\n+    } catch (JsonProcessingException ex) {\n+      LOG.trace(ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4ef2e56c84f4dc696e7b1128b8b27079774c2b"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDIyOTU5OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/EventSubscriptionManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTowMjo0NlrOHXfUig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTowMjo0NlrOHXfUig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5MjQ1OA==", "bodyText": "What does the \"id\" field do here?  Just curious since the other sendEvent doesn't set an id.", "url": "https://github.com/ConsenSys/teku/pull/2835#discussion_r494392458", "createdAt": "2020-09-24T15:02:46Z", "author": {"login": "mbaxter"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/EventSubscriptionManager.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1;\n+\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TOPICS;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.sse.SseClient;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.response.v1.ChainReorgEvent;\n+import tech.pegasys.teku.api.response.v1.FinalizedCheckpointEvent;\n+import tech.pegasys.teku.beaconrestapi.ListQueryParameterUtils;\n+import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.infrastructure.events.EventChannels;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.storage.api.FinalizedCheckpointChannel;\n+import tech.pegasys.teku.storage.api.ReorgEventChannel;\n+\n+public class EventSubscriptionManager implements ReorgEventChannel, FinalizedCheckpointChannel {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private static final String CHAIN_REORG = \"chain_reorg\";\n+  private static final String HEAD = \"head\";\n+  private static final String BLOCK = \"block\";\n+  private static final String ATTESTATION = \"attestation\";\n+  private static final String VOLUNTARY_EXIT = \"voluntary_exit\";\n+  private static final String FINALIZED_CHECKPOINT = \"finalized_checkpoint\";\n+  private final JsonProvider jsonProvider;\n+  private final ChainDataProvider provider;\n+  private final ConcurrentLinkedQueue<SseClient> clients = new ConcurrentLinkedQueue<>();\n+\n+  public EventSubscriptionManager(\n+      final ChainDataProvider provider,\n+      final JsonProvider jsonProvider,\n+      final EventChannels eventChannels) {\n+    this.provider = provider;\n+    this.jsonProvider = jsonProvider;\n+    eventChannels.subscribe(ReorgEventChannel.class, this);\n+    eventChannels.subscribe(FinalizedCheckpointChannel.class, this);\n+  }\n+\n+  public static final List<String> VALID_EVENT_TYPES =\n+      List.of(CHAIN_REORG, HEAD, BLOCK, ATTESTATION, VOLUNTARY_EXIT, FINALIZED_CHECKPOINT);\n+\n+  public void registerClient(final SseClient sseClient) {\n+    LOG.trace(\"connected \" + sseClient.hashCode());\n+    sseClient.onClose(\n+        () -> {\n+          clients.remove(sseClient);\n+          LOG.trace(\"disconnected \" + sseClient.hashCode());\n+        });\n+    clients.add(sseClient);\n+  }\n+\n+  @Override\n+  public void reorgOccurred(\n+      final Bytes32 bestBlockRoot,\n+      final UInt64 bestSlot,\n+      final Bytes32 bestStateRoot,\n+      final Bytes32 oldBestBlockRoot,\n+      final Bytes32 oldBestStateRoot,\n+      final UInt64 commonAncestorSlot) {\n+    try {\n+      final UInt64 epoch = compute_epoch_at_slot(bestSlot);\n+\n+      final String reorgEventString =\n+          jsonProvider.objectToJSON(\n+              new ChainReorgEvent(\n+                  bestSlot,\n+                  bestSlot.minus(commonAncestorSlot),\n+                  oldBestBlockRoot,\n+                  bestBlockRoot,\n+                  oldBestStateRoot,\n+                  bestStateRoot,\n+                  epoch));\n+      sendEventToClients(CHAIN_REORG, reorgEventString);\n+    } catch (JsonProcessingException ex) {\n+      LOG.trace(ex);\n+    }\n+  }\n+\n+  @Override\n+  public void onNewFinalizedCheckpoint(final Checkpoint checkpoint) {\n+    try {\n+      Optional<Bytes32> stateRoot = provider.getStateRootFromBlockRoot(checkpoint.getRoot());\n+      final String checkpointString =\n+          jsonProvider.objectToJSON(\n+              new FinalizedCheckpointEvent(\n+                  checkpoint.getRoot(), stateRoot.orElse(Bytes32.ZERO), checkpoint.getEpoch()));\n+      sendEventToClients(FINALIZED_CHECKPOINT, checkpointString);\n+    } catch (JsonProcessingException ex) {\n+      LOG.trace(ex);\n+    }\n+  }\n+\n+  public void stop() {\n+    clients.forEach(client -> client.sendEvent(\"bye\", \"bye\", \"-1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4ef2e56c84f4dc696e7b1128b8b27079774c2b"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDI0OTAwOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/EventSubscriptionManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTowNzoxMFrOHXfhAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTowNzoxMFrOHXfhAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5NTY1MQ==", "bodyText": "May be worth saving a Map from client -> topics:List<String>, so we don't have to keep re-parsing this on every send.", "url": "https://github.com/ConsenSys/teku/pull/2835#discussion_r494395651", "createdAt": "2020-09-24T15:07:10Z", "author": {"login": "mbaxter"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/EventSubscriptionManager.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1;\n+\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TOPICS;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.sse.SseClient;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.response.v1.ChainReorgEvent;\n+import tech.pegasys.teku.api.response.v1.FinalizedCheckpointEvent;\n+import tech.pegasys.teku.beaconrestapi.ListQueryParameterUtils;\n+import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.infrastructure.events.EventChannels;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.storage.api.FinalizedCheckpointChannel;\n+import tech.pegasys.teku.storage.api.ReorgEventChannel;\n+\n+public class EventSubscriptionManager implements ReorgEventChannel, FinalizedCheckpointChannel {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private static final String CHAIN_REORG = \"chain_reorg\";\n+  private static final String HEAD = \"head\";\n+  private static final String BLOCK = \"block\";\n+  private static final String ATTESTATION = \"attestation\";\n+  private static final String VOLUNTARY_EXIT = \"voluntary_exit\";\n+  private static final String FINALIZED_CHECKPOINT = \"finalized_checkpoint\";\n+  private final JsonProvider jsonProvider;\n+  private final ChainDataProvider provider;\n+  private final ConcurrentLinkedQueue<SseClient> clients = new ConcurrentLinkedQueue<>();\n+\n+  public EventSubscriptionManager(\n+      final ChainDataProvider provider,\n+      final JsonProvider jsonProvider,\n+      final EventChannels eventChannels) {\n+    this.provider = provider;\n+    this.jsonProvider = jsonProvider;\n+    eventChannels.subscribe(ReorgEventChannel.class, this);\n+    eventChannels.subscribe(FinalizedCheckpointChannel.class, this);\n+  }\n+\n+  public static final List<String> VALID_EVENT_TYPES =\n+      List.of(CHAIN_REORG, HEAD, BLOCK, ATTESTATION, VOLUNTARY_EXIT, FINALIZED_CHECKPOINT);\n+\n+  public void registerClient(final SseClient sseClient) {\n+    LOG.trace(\"connected \" + sseClient.hashCode());\n+    sseClient.onClose(\n+        () -> {\n+          clients.remove(sseClient);\n+          LOG.trace(\"disconnected \" + sseClient.hashCode());\n+        });\n+    clients.add(sseClient);\n+  }\n+\n+  @Override\n+  public void reorgOccurred(\n+      final Bytes32 bestBlockRoot,\n+      final UInt64 bestSlot,\n+      final Bytes32 bestStateRoot,\n+      final Bytes32 oldBestBlockRoot,\n+      final Bytes32 oldBestStateRoot,\n+      final UInt64 commonAncestorSlot) {\n+    try {\n+      final UInt64 epoch = compute_epoch_at_slot(bestSlot);\n+\n+      final String reorgEventString =\n+          jsonProvider.objectToJSON(\n+              new ChainReorgEvent(\n+                  bestSlot,\n+                  bestSlot.minus(commonAncestorSlot),\n+                  oldBestBlockRoot,\n+                  bestBlockRoot,\n+                  oldBestStateRoot,\n+                  bestStateRoot,\n+                  epoch));\n+      sendEventToClients(CHAIN_REORG, reorgEventString);\n+    } catch (JsonProcessingException ex) {\n+      LOG.trace(ex);\n+    }\n+  }\n+\n+  @Override\n+  public void onNewFinalizedCheckpoint(final Checkpoint checkpoint) {\n+    try {\n+      Optional<Bytes32> stateRoot = provider.getStateRootFromBlockRoot(checkpoint.getRoot());\n+      final String checkpointString =\n+          jsonProvider.objectToJSON(\n+              new FinalizedCheckpointEvent(\n+                  checkpoint.getRoot(), stateRoot.orElse(Bytes32.ZERO), checkpoint.getEpoch()));\n+      sendEventToClients(FINALIZED_CHECKPOINT, checkpointString);\n+    } catch (JsonProcessingException ex) {\n+      LOG.trace(ex);\n+    }\n+  }\n+\n+  public void stop() {\n+    clients.forEach(client -> client.sendEvent(\"bye\", \"bye\", \"-1\"));\n+    clients.clear();\n+  }\n+\n+  private void sendEventToClients(final String eventType, final String eventString) {\n+    clients.stream()\n+        .filter(client -> isSubscribedToTopic(eventType, client))\n+        .forEach(ctx -> ctx.sendEvent(eventType, eventString));\n+  }\n+\n+  private boolean isSubscribedToTopic(final String topic, final SseClient sseClient) {\n+    List<String> subscribedTopics =\n+        ListQueryParameterUtils.getParameterAsStringList(sseClient.ctx.queryParamMap(), TOPICS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4ef2e56c84f4dc696e7b1128b8b27079774c2b"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDI3ODQzOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/GetEvents.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToxMzozNFrOHXfzXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToxMzozNFrOHXfzXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwMDM1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                + \"Available values : head, block, attestation, voluntary_exit, finalized_checkpoint, chain_reorg\"),\n          \n          \n            \n                                + \"Available values : \" + VALID_EVENT_TYPES.stream().collect(Collectors.joining(\", \")),", "url": "https://github.com/ConsenSys/teku/pull/2835#discussion_r494400350", "createdAt": "2020-09-24T15:13:34Z", "author": {"login": "mbaxter"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/GetEvents.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_EVENTS;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR_REQUIRED;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TOPICS;\n+import static tech.pegasys.teku.beaconrestapi.handlers.v1.EventSubscriptionManager.VALID_EVENT_TYPES;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.http.sse.SseClient;\n+import io.javalin.http.sse.SseHandler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.beaconrestapi.ListQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.events.EventChannels;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetEvents implements Handler {\n+  private static final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/eth/v1/events\";\n+  private final JsonProvider jsonProvider;\n+  private final EventSubscriptionManager eventService;\n+\n+  public GetEvents(\n+      final DataProvider dataProvider,\n+      final JsonProvider jsonProvider,\n+      final EventChannels eventChannels) {\n+    this(dataProvider.getChainDataProvider(), jsonProvider, eventChannels);\n+  }\n+\n+  GetEvents(\n+      final ChainDataProvider provider,\n+      final JsonProvider jsonProvider,\n+      final EventChannels eventChannels) {\n+    this.jsonProvider = jsonProvider;\n+    eventService = new EventSubscriptionManager(provider, jsonProvider, eventChannels);\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Subscribe to node events\",\n+      tags = {TAG_EVENTS, TAG_VALIDATOR_REQUIRED},\n+      description =\n+          \"Provides endpoint to subscribe to beacon node Server-Sent-Events stream. Consumers should use\"\n+              + \" [eventsource](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface)\"\n+              + \" implementation to listen on those events.\",\n+      queryParams = {\n+        @OpenApiParam(\n+            name = TOPICS,\n+            required = true,\n+            description =\n+                \"Event types to subscribe to.\"\n+                    + \"Available values : head, block, attestation, voluntary_exit, finalized_checkpoint, chain_reorg\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4ef2e56c84f4dc696e7b1128b8b27079774c2b"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDI4MTAxOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/GetEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToxNDowNVrOHXf01w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMTozNDoxM1rOHXx80Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwMDcyNw==", "bodyText": "Looks like there's an extra space after the \":\"\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                + \"Available values : head, block, attestation, voluntary_exit, finalized_checkpoint, chain_reorg\"),\n          \n          \n            \n                                + \"Available values: head, block, attestation, voluntary_exit, finalized_checkpoint, chain_reorg\"),", "url": "https://github.com/ConsenSys/teku/pull/2835#discussion_r494400727", "createdAt": "2020-09-24T15:14:05Z", "author": {"login": "mbaxter"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/GetEvents.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_EVENTS;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR_REQUIRED;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TOPICS;\n+import static tech.pegasys.teku.beaconrestapi.handlers.v1.EventSubscriptionManager.VALID_EVENT_TYPES;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.http.sse.SseClient;\n+import io.javalin.http.sse.SseHandler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.beaconrestapi.ListQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.events.EventChannels;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetEvents implements Handler {\n+  private static final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/eth/v1/events\";\n+  private final JsonProvider jsonProvider;\n+  private final EventSubscriptionManager eventService;\n+\n+  public GetEvents(\n+      final DataProvider dataProvider,\n+      final JsonProvider jsonProvider,\n+      final EventChannels eventChannels) {\n+    this(dataProvider.getChainDataProvider(), jsonProvider, eventChannels);\n+  }\n+\n+  GetEvents(\n+      final ChainDataProvider provider,\n+      final JsonProvider jsonProvider,\n+      final EventChannels eventChannels) {\n+    this.jsonProvider = jsonProvider;\n+    eventService = new EventSubscriptionManager(provider, jsonProvider, eventChannels);\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Subscribe to node events\",\n+      tags = {TAG_EVENTS, TAG_VALIDATOR_REQUIRED},\n+      description =\n+          \"Provides endpoint to subscribe to beacon node Server-Sent-Events stream. Consumers should use\"\n+              + \" [eventsource](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface)\"\n+              + \" implementation to listen on those events.\",\n+      queryParams = {\n+        @OpenApiParam(\n+            name = TOPICS,\n+            required = true,\n+            description =\n+                \"Event types to subscribe to.\"\n+                    + \"Available values : head, block, attestation, voluntary_exit, finalized_checkpoint, chain_reorg\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4ef2e56c84f4dc696e7b1128b8b27079774c2b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5NzY4MQ==", "bodyText": "copy / paste from the spec :) fixed", "url": "https://github.com/ConsenSys/teku/pull/2835#discussion_r494697681", "createdAt": "2020-09-25T01:34:13Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/GetEvents.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_EVENTS;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR_REQUIRED;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TOPICS;\n+import static tech.pegasys.teku.beaconrestapi.handlers.v1.EventSubscriptionManager.VALID_EVENT_TYPES;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.http.sse.SseClient;\n+import io.javalin.http.sse.SseHandler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.beaconrestapi.ListQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.events.EventChannels;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetEvents implements Handler {\n+  private static final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/eth/v1/events\";\n+  private final JsonProvider jsonProvider;\n+  private final EventSubscriptionManager eventService;\n+\n+  public GetEvents(\n+      final DataProvider dataProvider,\n+      final JsonProvider jsonProvider,\n+      final EventChannels eventChannels) {\n+    this(dataProvider.getChainDataProvider(), jsonProvider, eventChannels);\n+  }\n+\n+  GetEvents(\n+      final ChainDataProvider provider,\n+      final JsonProvider jsonProvider,\n+      final EventChannels eventChannels) {\n+    this.jsonProvider = jsonProvider;\n+    eventService = new EventSubscriptionManager(provider, jsonProvider, eventChannels);\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Subscribe to node events\",\n+      tags = {TAG_EVENTS, TAG_VALIDATOR_REQUIRED},\n+      description =\n+          \"Provides endpoint to subscribe to beacon node Server-Sent-Events stream. Consumers should use\"\n+              + \" [eventsource](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface)\"\n+              + \" implementation to listen on those events.\",\n+      queryParams = {\n+        @OpenApiParam(\n+            name = TOPICS,\n+            required = true,\n+            description =\n+                \"Event types to subscribe to.\"\n+                    + \"Available values : head, block, attestation, voluntary_exit, finalized_checkpoint, chain_reorg\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwMDcyNw=="}, "originalCommit": {"oid": "7e4ef2e56c84f4dc696e7b1128b8b27079774c2b"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDMwNzQzOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/ListQueryParameterUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToxOTo0MFrOHXgFJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMTo0MjoyMlrOHXyFfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNDkwMw==", "bodyText": "Should validateQueryParameter run String::trim on each value before returning?", "url": "https://github.com/ConsenSys/teku/pull/2835#discussion_r494404903", "createdAt": "2020-09-24T15:19:40Z", "author": {"login": "mbaxter"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/ListQueryParameterUtils.java", "diffHunk": "@@ -55,4 +55,11 @@\n           ex);\n     }\n   }\n+\n+  public static List<String> getParameterAsStringList(\n+      final Map<String, List<String>> parameterMap, final String key)\n+      throws IllegalArgumentException {\n+    final String list = String.join(\",\", validateQueryParameter(parameterMap, key));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4ef2e56c84f4dc696e7b1128b8b27079774c2b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5OTkwMQ==", "bodyText": "good idea", "url": "https://github.com/ConsenSys/teku/pull/2835#discussion_r494699901", "createdAt": "2020-09-25T01:42:22Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/ListQueryParameterUtils.java", "diffHunk": "@@ -55,4 +55,11 @@\n           ex);\n     }\n   }\n+\n+  public static List<String> getParameterAsStringList(\n+      final Map<String, List<String>> parameterMap, final String key)\n+      throws IllegalArgumentException {\n+    final String list = String.join(\",\", validateQueryParameter(parameterMap, key));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNDkwMw=="}, "originalCommit": {"oid": "7e4ef2e56c84f4dc696e7b1128b8b27079774c2b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDUwMzY2OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/ListQueryParameterUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjowMjo1MFrOHXiAZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjowMjo1MFrOHXiAZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzNjQ1NA==", "bodyText": "nit: collecting this to a Set might be better.", "url": "https://github.com/ConsenSys/teku/pull/2835#discussion_r494436454", "createdAt": "2020-09-24T16:02:50Z", "author": {"login": "cemozerr"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/ListQueryParameterUtils.java", "diffHunk": "@@ -55,4 +55,11 @@\n           ex);\n     }\n   }\n+\n+  public static List<String> getParameterAsStringList(\n+      final Map<String, List<String>> parameterMap, final String key)\n+      throws IllegalArgumentException {\n+    final String list = String.join(\",\", validateQueryParameter(parameterMap, key));\n+    return splitter.splitToStream(list).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4ef2e56c84f4dc696e7b1128b8b27079774c2b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDUyNjc2OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/GetEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjowODozN1rOHXiPZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjowODozN1rOHXiPZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0MDI5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOG.trace(e);\n          \n          \n            \n                    LOG.error(e);", "url": "https://github.com/ConsenSys/teku/pull/2835#discussion_r494440295", "createdAt": "2020-09-24T16:08:37Z", "author": {"login": "mbaxter"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/GetEvents.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_EVENTS;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR_REQUIRED;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TOPICS;\n+import static tech.pegasys.teku.beaconrestapi.handlers.v1.EventSubscriptionManager.VALID_EVENT_TYPES;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.http.sse.SseClient;\n+import io.javalin.http.sse.SseHandler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.beaconrestapi.ListQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.events.EventChannels;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetEvents implements Handler {\n+  private static final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/eth/v1/events\";\n+  private final JsonProvider jsonProvider;\n+  private final EventSubscriptionManager eventService;\n+\n+  public GetEvents(\n+      final DataProvider dataProvider,\n+      final JsonProvider jsonProvider,\n+      final EventChannels eventChannels) {\n+    this(dataProvider.getChainDataProvider(), jsonProvider, eventChannels);\n+  }\n+\n+  GetEvents(\n+      final ChainDataProvider provider,\n+      final JsonProvider jsonProvider,\n+      final EventChannels eventChannels) {\n+    this.jsonProvider = jsonProvider;\n+    eventService = new EventSubscriptionManager(provider, jsonProvider, eventChannels);\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Subscribe to node events\",\n+      tags = {TAG_EVENTS, TAG_VALIDATOR_REQUIRED},\n+      description =\n+          \"Provides endpoint to subscribe to beacon node Server-Sent-Events stream. Consumers should use\"\n+              + \" [eventsource](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface)\"\n+              + \" implementation to listen on those events.\",\n+      queryParams = {\n+        @OpenApiParam(\n+            name = TOPICS,\n+            required = true,\n+            description =\n+                \"Event types to subscribe to.\"\n+                    + \"Available values : head, block, attestation, voluntary_exit, finalized_checkpoint, chain_reorg\"),\n+      },\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(type = \"text/event-stream\", from = String.class)),\n+        @OpenApiResponse(status = RES_BAD_REQUEST),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR)\n+      })\n+  @Override\n+  public void handle(@NotNull final Context ctx) throws Exception {\n+    SseHandler sseHandler = new SseHandler(this::sseEventHandler);\n+    sseHandler.handle(ctx);\n+  }\n+\n+  public void sseEventHandler(final SseClient sseClient) {\n+    List<String> topics =\n+        ListQueryParameterUtils.getParameterAsStringList(sseClient.ctx.queryParamMap(), TOPICS);\n+    if (topics.stream().anyMatch(topic -> !VALID_EVENT_TYPES.contains(topic))) {\n+      sseClient.ctx.status(SC_BAD_REQUEST);\n+      try {\n+        sseClient.ctx.result(jsonProvider.objectToJSON(new BadRequest(\"Invalid topics requested\")));\n+      } catch (JsonProcessingException e) {\n+        LOG.trace(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4ef2e56c84f4dc696e7b1128b8b27079774c2b"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDUzMzkzOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/GetEvents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoxMDoyMlrOHXiT5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTowMTo0N1rOHXsfhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0MTQ0NQ==", "bodyText": "nit: (class name and object name being different is a bit confusing.)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final EventSubscriptionManager eventService;\n          \n          \n            \n              private final EventSubscriptionManager eventSubscriptionManager;", "url": "https://github.com/ConsenSys/teku/pull/2835#discussion_r494441445", "createdAt": "2020-09-24T16:10:22Z", "author": {"login": "cemozerr"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/GetEvents.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_EVENTS;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR_REQUIRED;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TOPICS;\n+import static tech.pegasys.teku.beaconrestapi.handlers.v1.EventSubscriptionManager.VALID_EVENT_TYPES;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.http.sse.SseClient;\n+import io.javalin.http.sse.SseHandler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.beaconrestapi.ListQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.events.EventChannels;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetEvents implements Handler {\n+  private static final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/eth/v1/events\";\n+  private final JsonProvider jsonProvider;\n+  private final EventSubscriptionManager eventService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4ef2e56c84f4dc696e7b1128b8b27079774c2b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYwODI2MQ==", "bodyText": "this is what happens when i rename a class :)", "url": "https://github.com/ConsenSys/teku/pull/2835#discussion_r494608261", "createdAt": "2020-09-24T21:01:47Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/GetEvents.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_EVENTS;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR_REQUIRED;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TOPICS;\n+import static tech.pegasys.teku.beaconrestapi.handlers.v1.EventSubscriptionManager.VALID_EVENT_TYPES;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.http.sse.SseClient;\n+import io.javalin.http.sse.SseHandler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.beaconrestapi.ListQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.events.EventChannels;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetEvents implements Handler {\n+  private static final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/eth/v1/events\";\n+  private final JsonProvider jsonProvider;\n+  private final EventSubscriptionManager eventService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0MTQ0NQ=="}, "originalCommit": {"oid": "7e4ef2e56c84f4dc696e7b1128b8b27079774c2b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDcyNDk1OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/EventSubscriptionManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjo1ODo1NlrOHXkMDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjo1ODo1NlrOHXkMDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ3MjIwNg==", "bodyText": "Might be worth adding a test with a subscription for multiple topics", "url": "https://github.com/ConsenSys/teku/pull/2835#discussion_r494472206", "createdAt": "2020-09-24T16:58:56Z", "author": {"login": "mbaxter"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/EventSubscriptionManagerTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.sse.SseClient;\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Optional;\n+import javax.servlet.AsyncContext;\n+import javax.servlet.ServletOutputStream;\n+import javax.servlet.ServletResponse;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.response.v1.ChainReorgEvent;\n+import tech.pegasys.teku.api.response.v1.FinalizedCheckpointEvent;\n+import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.events.EventChannels;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class EventSubscriptionManagerTest {\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final DataStructureUtil data = new DataStructureUtil();\n+  private final ArgumentCaptor<String> stringArgs = ArgumentCaptor.forClass(String.class);\n+  protected final ChainDataProvider chainDataProvider = mock(ChainDataProvider.class);\n+  // chain reorg fields\n+  private final UInt64 slot = UInt64.valueOf(\"1024100\");\n+  private final UInt64 epoch = compute_epoch_at_slot(slot);\n+  private final UInt64 depth = UInt64.valueOf(100);\n+  private final ChainReorgEvent sampleEvent =\n+      new ChainReorgEvent(\n+          slot,\n+          depth,\n+          data.randomBytes32(),\n+          data.randomBytes32(),\n+          data.randomBytes32(),\n+          data.randomBytes32(),\n+          epoch);\n+\n+  private final FinalizedCheckpointEvent sampleCheckpointEvent =\n+      new FinalizedCheckpointEvent(data.randomBytes32(), data.randomBytes32(), epoch);\n+\n+  private final AsyncContext async = mock(AsyncContext.class);\n+  private final EventChannels channels = mock(EventChannels.class);\n+  private final HttpServletRequest req = mock(HttpServletRequest.class);\n+  private final HttpServletResponse res = mock(HttpServletResponse.class);\n+  private final ServletResponse srvResponse = mock(ServletResponse.class);\n+  private final ServletOutputStream outputStream = mock(ServletOutputStream.class);\n+  private final Context ctx = new Context(req, res, Collections.emptyMap());\n+\n+  private EventSubscriptionManager manager;\n+\n+  @BeforeEach\n+  void setup() throws IOException {\n+    when(req.getAsyncContext()).thenReturn(async);\n+    when(async.getResponse()).thenReturn(srvResponse);\n+    when(srvResponse.getOutputStream()).thenReturn(outputStream);\n+    final SseClient client1 = new SseClient(ctx);\n+    manager = new EventSubscriptionManager(chainDataProvider, jsonProvider, channels);\n+    manager.registerClient(client1);\n+  }\n+\n+  @Test\n+  void shouldPropagateReorgMessages() throws IOException {\n+    when(req.getQueryString()).thenReturn(\"&topics=chain_reorg\");\n+\n+    triggerReorgEvent();\n+    verify(outputStream).print(stringArgs.capture());\n+    final String eventString = stringArgs.getValue();\n+    assertThat(eventString).contains(\"event: chain_reorg\\n\");\n+    final ChainReorgEvent event =\n+        jsonProvider.jsonToObject(\n+            eventString.substring(eventString.indexOf(\"{\")), ChainReorgEvent.class);\n+\n+    assertThat(event).isEqualTo(sampleEvent);\n+  }\n+\n+  @Test\n+  void shouldPropagateFinalizedCheckpointMessages() throws IOException {\n+    when(req.getQueryString()).thenReturn(\"&topics=finalized_checkpoint\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4ef2e56c84f4dc696e7b1128b8b27079774c2b"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDc1MzQxOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/GetEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzowNjo1NFrOHXkeeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzowNjo1NFrOHXkeeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ3NjkyMA==", "bodyText": "Is it feasible to add integration tests for the events endpoint?", "url": "https://github.com/ConsenSys/teku/pull/2835#discussion_r494476920", "createdAt": "2020-09-24T17:06:54Z", "author": {"login": "mbaxter"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/GetEvents.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_EVENTS;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR_REQUIRED;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TOPICS;\n+import static tech.pegasys.teku.beaconrestapi.handlers.v1.EventSubscriptionManager.VALID_EVENT_TYPES;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.http.sse.SseClient;\n+import io.javalin.http.sse.SseHandler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.beaconrestapi.ListQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.events.EventChannels;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetEvents implements Handler {\n+  private static final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/eth/v1/events\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e4ef2e56c84f4dc696e7b1128b8b27079774c2b"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3286, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}