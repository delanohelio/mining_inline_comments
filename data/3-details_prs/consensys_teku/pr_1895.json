{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxODUyNzY0", "number": 1895, "title": "v0.12 bls", "bodyText": "PR Description\nImplements the spec v0.12 BLS changes, conforming with IETF draft BLS specification draft-irtf-cfrg-bls-signature-02 and Hashing to Elliptic Curves - draft-irtf-cfrg-hash-to-curve-07.\nNote: we probably want to create a v0.12 branch to merge this into. Will leave this to greater minds than my own.\nDone\n\n Core implementation.\n Fully passing v0.12 reference tests\n Update comment references to spec versions\n spotlessApply, D'Oh.\n\nTo do\n\n Find or generate new test vectors for the fips tests. These are currently still draft 06, I believe. Not essential, but nice to have.\n\nResolves #1927", "createdAt": "2020-05-22T10:51:59Z", "url": "https://github.com/ConsenSys/teku/pull/1895", "merged": true, "mergeCommit": {"oid": "7acdcad84501b8e2e7be6c6927cb4f89ff27154a"}, "closed": true, "closedAt": "2020-06-04T22:15:21Z", "author": {"login": "benjaminion"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcln-F-ABqjMzODEyOTEyNDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoE6loAH2gAyNDIxODUyNzY0OmU5YzJhOWU3MTI4YzU2MDY2NjEzOWFhODQyMGVkZWMzYmZlNDY4MDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e66b99bf186fa76d2cc009f5f8bbc43e1a369718", "author": {"user": {"login": "benjaminion", "name": "Ben Edgington"}}, "url": "https://github.com/ConsenSys/teku/commit/e66b99bf186fa76d2cc009f5f8bbc43e1a369718", "committedDate": "2020-05-22T10:39:51Z", "message": "Mostly passing v12 BLS reference tests"}, "afterCommit": {"oid": "2fc08eb87507b1b864a41fa6587ed459bdb08fab", "author": {"user": {"login": "benjaminion", "name": "Ben Edgington"}}, "url": "https://github.com/ConsenSys/teku/commit/2fc08eb87507b1b864a41fa6587ed459bdb08fab", "committedDate": "2020-05-28T06:34:24Z", "message": "Add reference tests and tidy up"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTAyNTgx", "url": "https://github.com/ConsenSys/teku/pull/1895#pullrequestreview-421902581", "createdAt": "2020-06-01T14:44:01Z", "commit": {"oid": "cf0b26e59c613532f6638ce1a302e952fab0a12c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo0NDowMlrOGdNHbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo0NDowMlrOGdNHbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3Njc4Mg==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (publicKeys.isEmpty()) {\n          \n          \n            \n                if (publicKeys.isEmpty() || messages.isEmpty()) {", "url": "https://github.com/ConsenSys/teku/pull/1895#discussion_r433276782", "createdAt": "2020-06-01T14:44:02Z", "author": {"login": "cemozerr"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/BLS.java", "diffHunk": "@@ -94,6 +100,9 @@ public static BLSSignature aggregate(final Stream<BLSSignature> signatures) {\n    */\n   public static boolean aggregateVerify(\n       List<BLSPublicKey> publicKeys, List<Bytes> messages, BLSSignature signature) {\n+    if (publicKeys.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf0b26e59c613532f6638ce1a302e952fab0a12c"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTc2NjI1", "url": "https://github.com/ConsenSys/teku/pull/1895#pullrequestreview-421976625", "createdAt": "2020-06-01T16:03:44Z", "commit": {"oid": "cf0b26e59c613532f6638ce1a302e952fab0a12c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjowMzo0NFrOGdQoBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjowMzo0NFrOGdQoBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzNDI3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final int zero0 = this.fp2.getA().iszilch() ? 1 : 0;\n          \n          \n            \n                final int zero0 = fp2.getA().iszilch() ? 1 : 0;", "url": "https://github.com/ConsenSys/teku/pull/1895#discussion_r433334279", "createdAt": "2020-06-01T16:03:44Z", "author": {"login": "cemozerr"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/hashToG2/FP2Immutable.java", "diffHunk": "@@ -170,18 +170,17 @@ boolean iszilch() {\n   }\n \n   /**\n-   * Calculate the sign of the field element.\n+   * Calculate the \"sign\" of the field element in constant time.\n    *\n-   * <p>This is described in the \"Notation\" paragraph at the start of Section 2 of this paper:\n-   * https://eprint.iacr.org/2019/403.pdf\n+   * <p>Defined here: https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-07#section-4.1\n    *\n-   * @return -1 if x is the lexically larger of x and -1 * x, else returns 1\n+   * @return zero or one\n    */\n   int sgn0() {\n-    if (fp2.getB().iszilch()) {\n-      return BIG.comp(fp2.getA(), THRESHOLD) > 0 ? -1 : 1;\n-    }\n-    return BIG.comp(fp2.getB(), THRESHOLD) > 0 ? -1 : 1;\n+    final int sign0 = fp2.getA().parity();\n+    final int zero0 = this.fp2.getA().iszilch() ? 1 : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf0b26e59c613532f6638ce1a302e952fab0a12c"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTc5ODA3", "url": "https://github.com/ConsenSys/teku/pull/1895#pullrequestreview-421979807", "createdAt": "2020-06-01T16:08:09Z", "commit": {"oid": "cf0b26e59c613532f6638ce1a302e952fab0a12c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjowODowOVrOGdQxPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjowODowOVrOGdQxPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzNjYzNw==", "bodyText": "nit: to be more in line with similar checks in the codebase it might be good to switch these asserts to checkArgument calls", "url": "https://github.com/ConsenSys/teku/pull/1895#discussion_r433336637", "createdAt": "2020-06-01T16:08:09Z", "author": {"login": "cemozerr"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/hashToG2/HashToCurve.java", "diffHunk": "@@ -57,28 +65,27 @@ public static boolean isInGroupG2(ECP2 point) {\n    * Hashes to the G2 curve as described in the new BLS standard.\n    *\n    * @param message the message to be hashed. This is usually the 32 byte message digest\n-   * @param cipherSuite the salt value for HKDF_Extract\n+   * @param dst the domain separation tag (DST)\n    * @return a point from the G2 group representing the message hash\n    */\n-  public static ECP2 hashToG2(Bytes message, Bytes cipherSuite) {\n+  public static ECP2 hashToG2(Bytes message, Bytes dst) {\n \n-    FP2Immutable u0 = hashToBase(message, (byte) 0, cipherSuite);\n-    FP2Immutable u1 = hashToBase(message, (byte) 1, cipherSuite);\n+    FP2Immutable[] u = hashToField(message, 2, dst);\n \n-    JacobianPoint q0 = mapToCurve(u0);\n-    JacobianPoint q1 = mapToCurve(u1);\n+    JacobianPoint q0 = mapToCurve(u[0]);\n+    JacobianPoint q1 = mapToCurve(u[1]);\n \n-    JacobianPoint p = iso3(q0.add(q1));\n+    JacobianPoint r = iso3(q0.add(q1));\n \n     // This should never fail, and the check is non-trivial, so we use an assert\n-    assert isOnCurve(p);\n+    assert isOnCurve(r);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf0b26e59c613532f6638ce1a302e952fab0a12c"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTg0MjUz", "url": "https://github.com/ConsenSys/teku/pull/1895#pullrequestreview-421984253", "createdAt": "2020-06-01T16:14:28Z", "commit": {"oid": "cf0b26e59c613532f6638ce1a302e952fab0a12c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjoxNDoyOFrOGdQ-bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjoxNDoyOFrOGdQ-bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0MDAxNA==", "bodyText": "Is there a specification for this method anywhere? It would be really useful for reviewing if there was.", "url": "https://github.com/ConsenSys/teku/pull/1895#discussion_r433340014", "createdAt": "2020-06-01T16:14:28Z", "author": {"login": "cemozerr"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/hashToG2/HashToCurve.java", "diffHunk": "@@ -57,28 +65,27 @@ public static boolean isInGroupG2(ECP2 point) {\n    * Hashes to the G2 curve as described in the new BLS standard.\n    *\n    * @param message the message to be hashed. This is usually the 32 byte message digest\n-   * @param cipherSuite the salt value for HKDF_Extract\n+   * @param dst the domain separation tag (DST)\n    * @return a point from the G2 group representing the message hash\n    */\n-  public static ECP2 hashToG2(Bytes message, Bytes cipherSuite) {\n+  public static ECP2 hashToG2(Bytes message, Bytes dst) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf0b26e59c613532f6638ce1a302e952fab0a12c"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDEwOTc4", "url": "https://github.com/ConsenSys/teku/pull/1895#pullrequestreview-422010978", "createdAt": "2020-06-01T16:49:01Z", "commit": {"oid": "cf0b26e59c613532f6638ce1a302e952fab0a12c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjo0OTowMVrOGdSIkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjo0OTowMVrOGdSIkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1ODk5Mw==", "bodyText": "The spec seems to suggest that you should store the intermediate b_i values, concatenate them together, and return the first len_in_bytes. But we seem to be only returning the first len_in_bytes of b_ell. Am I missing something?", "url": "https://github.com/ConsenSys/teku/pull/1895#discussion_r433358993", "createdAt": "2020-06-01T16:49:01Z", "author": {"login": "cemozerr"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/hashToG2/Helper.java", "diffHunk": "@@ -62,65 +66,94 @@ static boolean isOnCurve(JacobianPoint p) {\n    * @return true if the point is in G2, false otherwise\n    */\n   static boolean isInG2(JacobianPoint p) {\n-    return isOnCurve(p) && g2_map_to_infinity(p).isInfinity();\n+    return isOnCurve(p) && mapG2ToInfinity(p).isInfinity();\n   }\n \n   /**\n-   * Apply a transformation that maps G2 elements, and only G2 elements, to infinity\n+   * Apply a transformation that maps G2 elements, and only G2 elements, to infinity.\n    *\n    * <p>Uses the technique from https://eprint.iacr.org/2019/814.pdf section 3.1\n    *\n-   * @return\n+   * @param p the point on the curve to test\n+   * @return the point at infinity iff p is in G2, otherwise an arbitrary point\n    */\n-  static JacobianPoint g2_map_to_infinity(JacobianPoint p) {\n+  @VisibleForTesting\n+  static JacobianPoint mapG2ToInfinity(JacobianPoint p) {\n     JacobianPoint psi1 = psi(p);\n     JacobianPoint psi2 = psi(psi1);\n     JacobianPoint psi3 = psi(psi2);\n     return mxChain(psi3).add(psi2).neg().add(p);\n   }\n \n   /**\n-   * Hashes a string msg of any length into an element of the FP2 field.\n+   * Produces a uniformly random byte string of arbitrary length using SHA-256.\n+   *\n+   * <p>As defined at https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-07#section-5.3.1\n    *\n-   * <p>As defined at https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-04#section-5.3\n+   * @param message the message to hash\n+   * @param dst the domain separation tag for the cipher suite\n+   * @param lengthInBytes the number of bytes we want to obtain\n+   * @return a uniformly random sequence of Bytes\n+   */\n+  @VisibleForTesting\n+  static Bytes expandMessage(Bytes message, Bytes dst, int lengthInBytes) {\n+    checkArgument(dst.size() < 256, \"The DST must be 255 bytes or fewer.\");\n+    checkArgument(lengthInBytes > 0, \"Number of bytes requested must be greater than zero.\");\n+\n+    final int ell = 1 + (lengthInBytes - 1) / SHA256_HASH_SIZE;\n+    checkArgument(ell <= 255, \"Too many bytes of output were requested.\");\n+\n+    byte[] uniformBytes = new byte[ell * SHA256_HASH_SIZE];\n+\n+    Bytes dstPrime = Bytes.concatenate(dst, Bytes.of((byte) dst.size()));\n+    Bytes zPad = Bytes.wrap(new byte[SHA256_BLOCK_SIZE]);\n+    Bytes libStr = Bytes.ofUnsignedShort(lengthInBytes);\n+    Bytes b0 =\n+        Hash.sha2_256(Bytes.concatenate(zPad, message, libStr, Bytes.of((byte) 0), dstPrime));\n+    Bytes bb = Hash.sha2_256(Bytes.concatenate(b0, Bytes.of((byte) 1), dstPrime));\n+    System.arraycopy(bb.toArrayUnsafe(), 0, uniformBytes, 0, SHA256_HASH_SIZE);\n+    for (int i = 1; i < ell; i++) {\n+      bb = Hash.sha2_256(Bytes.concatenate(b0.xor(bb), Bytes.of((byte) (i + 1)), dstPrime));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf0b26e59c613532f6638ce1a302e952fab0a12c"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDE0Mzg3", "url": "https://github.com/ConsenSys/teku/pull/1895#pullrequestreview-422014387", "createdAt": "2020-06-01T16:53:59Z", "commit": {"oid": "cf0b26e59c613532f6638ce1a302e952fab0a12c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjo1Mzo1OVrOGdSSmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjo1Mzo1OVrOGdSSmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM2MTU2Mg==", "bodyText": "In the link we provided, m is set to 1. Also, at this function, it seems like we can't use the simplified method if m = 2. https://github.com/PegaSysEng/teku/pull/1895/files#diff-67f0ab02949d5471961bcee03eb59b9bR179", "url": "https://github.com/ConsenSys/teku/pull/1895#discussion_r433361562", "createdAt": "2020-06-01T16:53:59Z", "author": {"login": "cemozerr"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/hashToG2/Helper.java", "diffHunk": "@@ -62,65 +66,94 @@ static boolean isOnCurve(JacobianPoint p) {\n    * @return true if the point is in G2, false otherwise\n    */\n   static boolean isInG2(JacobianPoint p) {\n-    return isOnCurve(p) && g2_map_to_infinity(p).isInfinity();\n+    return isOnCurve(p) && mapG2ToInfinity(p).isInfinity();\n   }\n \n   /**\n-   * Apply a transformation that maps G2 elements, and only G2 elements, to infinity\n+   * Apply a transformation that maps G2 elements, and only G2 elements, to infinity.\n    *\n    * <p>Uses the technique from https://eprint.iacr.org/2019/814.pdf section 3.1\n    *\n-   * @return\n+   * @param p the point on the curve to test\n+   * @return the point at infinity iff p is in G2, otherwise an arbitrary point\n    */\n-  static JacobianPoint g2_map_to_infinity(JacobianPoint p) {\n+  @VisibleForTesting\n+  static JacobianPoint mapG2ToInfinity(JacobianPoint p) {\n     JacobianPoint psi1 = psi(p);\n     JacobianPoint psi2 = psi(psi1);\n     JacobianPoint psi3 = psi(psi2);\n     return mxChain(psi3).add(psi2).neg().add(p);\n   }\n \n   /**\n-   * Hashes a string msg of any length into an element of the FP2 field.\n+   * Produces a uniformly random byte string of arbitrary length using SHA-256.\n+   *\n+   * <p>As defined at https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-07#section-5.3.1\n    *\n-   * <p>As defined at https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-04#section-5.3\n+   * @param message the message to hash\n+   * @param dst the domain separation tag for the cipher suite\n+   * @param lengthInBytes the number of bytes we want to obtain\n+   * @return a uniformly random sequence of Bytes\n+   */\n+  @VisibleForTesting\n+  static Bytes expandMessage(Bytes message, Bytes dst, int lengthInBytes) {\n+    checkArgument(dst.size() < 256, \"The DST must be 255 bytes or fewer.\");\n+    checkArgument(lengthInBytes > 0, \"Number of bytes requested must be greater than zero.\");\n+\n+    final int ell = 1 + (lengthInBytes - 1) / SHA256_HASH_SIZE;\n+    checkArgument(ell <= 255, \"Too many bytes of output were requested.\");\n+\n+    byte[] uniformBytes = new byte[ell * SHA256_HASH_SIZE];\n+\n+    Bytes dstPrime = Bytes.concatenate(dst, Bytes.of((byte) dst.size()));\n+    Bytes zPad = Bytes.wrap(new byte[SHA256_BLOCK_SIZE]);\n+    Bytes libStr = Bytes.ofUnsignedShort(lengthInBytes);\n+    Bytes b0 =\n+        Hash.sha2_256(Bytes.concatenate(zPad, message, libStr, Bytes.of((byte) 0), dstPrime));\n+    Bytes bb = Hash.sha2_256(Bytes.concatenate(b0, Bytes.of((byte) 1), dstPrime));\n+    System.arraycopy(bb.toArrayUnsafe(), 0, uniformBytes, 0, SHA256_HASH_SIZE);\n+    for (int i = 1; i < ell; i++) {\n+      bb = Hash.sha2_256(Bytes.concatenate(b0.xor(bb), Bytes.of((byte) (i + 1)), dstPrime));\n+      System.arraycopy(bb.toArrayUnsafe(), 0, uniformBytes, i * SHA256_HASH_SIZE, SHA256_HASH_SIZE);\n+    }\n+    return Bytes.wrap(uniformBytes, 0, lengthInBytes);\n+  }\n+\n+  /**\n+   * Hashes a string msg of any length into one or more elements of the FP2 field.\n    *\n-   * <p>This is hash_to_base() in the reference code.\n+   * <p>As defined at https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-07#section-5.2\n    *\n    * @param message the message to hash\n-   * @param ctr 0, 1, or 2 - used to efficiently create independent instances of hash_to_base\n-   * @param salt key for the HMAC base hash\n+   * @param count the number of field elements to return\n+   * @param dst the domain separation tag for the cipher suite\n    * @return an element in FP2\n    */\n-  static FP2Immutable hashToBase(Bytes message, byte ctr, Bytes salt) {\n-\n-    final Bytes h2cBytes = Bytes.wrap(\"H2C\".getBytes(StandardCharsets.US_ASCII));\n-    final Bytes ctrBytes = Bytes.of(ctr);\n+  static FP2Immutable[] hashToField(Bytes message, int count, Bytes dst) {\n \n-    Bytes info, t;\n+    // See https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-07#section-8.8.1\n+    final int l = 64;\n+    // The extension degree of our field, FP2\n+    final int m = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf0b26e59c613532f6638ce1a302e952fab0a12c"}, "originalPosition": 124}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffac7ee09f5b518286374ea1fe4641ff417225d0", "author": {"user": {"login": "benjaminion", "name": "Ben Edgington"}}, "url": "https://github.com/ConsenSys/teku/commit/ffac7ee09f5b518286374ea1fe4641ff417225d0", "committedDate": "2020-06-03T19:09:35Z", "message": "Basically working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a6ee9d3d3473b4503029bbb82796f968904195f", "author": {"user": {"login": "benjaminion", "name": "Ben Edgington"}}, "url": "https://github.com/ConsenSys/teku/commit/3a6ee9d3d3473b4503029bbb82796f968904195f", "committedDate": "2020-06-03T19:09:35Z", "message": "Mostly passing v12 BLS reference tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d728f17a17a647e18036e663beea8b50a5a6a33", "author": {"user": {"login": "benjaminion", "name": "Ben Edgington"}}, "url": "https://github.com/ConsenSys/teku/commit/1d728f17a17a647e18036e663beea8b50a5a6a33", "committedDate": "2020-06-03T19:11:58Z", "message": "Add reference tests and tidy up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37b47aab48dba105984937d4b4eff4155ac0025c", "author": {"user": {"login": "benjaminion", "name": "Ben Edgington"}}, "url": "https://github.com/ConsenSys/teku/commit/37b47aab48dba105984937d4b4eff4155ac0025c", "committedDate": "2020-06-03T19:11:58Z", "message": "Correct some comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a209f1079403d9c2a4a272e3b91d6f035d5cb147", "author": {"user": {"login": "benjaminion", "name": "Ben Edgington"}}, "url": "https://github.com/ConsenSys/teku/commit/a209f1079403d9c2a4a272e3b91d6f035d5cb147", "committedDate": "2020-06-03T19:11:58Z", "message": "Tidy up use of 'this'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46a13e1b6fd244d8a5df8e0c633580986c4b685d", "author": {"user": {"login": "benjaminion", "name": "Ben Edgington"}}, "url": "https://github.com/ConsenSys/teku/commit/46a13e1b6fd244d8a5df8e0c633580986c4b685d", "committedDate": "2020-06-03T19:11:58Z", "message": "Add documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84d0212fe7e47ae8b7918f07e02403a39574b9da", "author": {"user": {"login": "benjaminion", "name": "Ben Edgington"}}, "url": "https://github.com/ConsenSys/teku/commit/84d0212fe7e47ae8b7918f07e02403a39574b9da", "committedDate": "2020-06-03T19:11:58Z", "message": "Add psi2 and psi3 functions as an optimisation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93cf0a03a9e05df8adc5d824e8a6c873c97fc4b7", "author": {"user": {"login": "benjaminion", "name": "Ben Edgington"}}, "url": "https://github.com/ConsenSys/teku/commit/93cf0a03a9e05df8adc5d824e8a6c873c97fc4b7", "committedDate": "2020-06-03T19:11:58Z", "message": "Follow the BLS standard a little more explicitly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b9d76f7eed245dc21c63df6b9f8329201f16a7e", "author": {"user": {"login": "benjaminion", "name": "Ben Edgington"}}, "url": "https://github.com/ConsenSys/teku/commit/0b9d76f7eed245dc21c63df6b9f8329201f16a7e", "committedDate": "2020-06-03T19:11:58Z", "message": "Roll back psi3 - it is not needed"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d765746a217758eeeeb7b010dfd21a8ca0f536cf", "author": {"user": {"login": "benjaminion", "name": "Ben Edgington"}}, "url": "https://github.com/ConsenSys/teku/commit/d765746a217758eeeeb7b010dfd21a8ca0f536cf", "committedDate": "2020-06-03T17:37:07Z", "message": "Roll back psi3 - it is not needed"}, "afterCommit": {"oid": "0b9d76f7eed245dc21c63df6b9f8329201f16a7e", "author": {"user": {"login": "benjaminion", "name": "Ben Edgington"}}, "url": "https://github.com/ConsenSys/teku/commit/0b9d76f7eed245dc21c63df6b9f8329201f16a7e", "committedDate": "2020-06-03T19:11:58Z", "message": "Roll back psi3 - it is not needed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjgzMzU3", "url": "https://github.com/ConsenSys/teku/pull/1895#pullrequestreview-424283357", "createdAt": "2020-06-04T09:52:58Z", "commit": {"oid": "0b9d76f7eed245dc21c63df6b9f8329201f16a7e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOTo1Mjo1OVrOGe-Xsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOTo1Mjo1OVrOGe-Xsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzMjMzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Set<Bytes> set = new HashSet<>();\n          \n          \n            \n                for (Bytes message : messages) {\n          \n          \n            \n                  if (!set.add(message)) return false;\n          \n          \n            \n                }\n          \n          \n            \n                if (new HashSet<>(messages).size() != messages.size) return false;\n          \n      \n    \n    \n  \n\nMinor code size improvement", "url": "https://github.com/ConsenSys/teku/pull/1895#discussion_r435132339", "createdAt": "2020-06-04T09:52:59Z", "author": {"login": "Nashatyrev"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/BLS.java", "diffHunk": "@@ -94,15 +105,29 @@ public static BLSSignature aggregate(final Stream<BLSSignature> signatures) {\n    */\n   public static boolean aggregateVerify(\n       List<BLSPublicKey> publicKeys, List<Bytes> messages, BLSSignature signature) {\n+    checkArgument(\n+        publicKeys.size() == messages.size(),\n+        \"Number of public keys and number of messages differs.\");\n+    if (publicKeys.isEmpty()) {\n+      return false;\n+    }\n+    // Check that there are no duplicate messages\n+    Set<Bytes> set = new HashSet<>();\n+    for (Bytes message : messages) {\n+      if (!set.add(message)) return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b9d76f7eed245dc21c63df6b9f8329201f16a7e"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "504fb05b3fc8a74d4d70592a480357e8b1851894", "author": {"user": {"login": "benjaminion", "name": "Ben Edgington"}}, "url": "https://github.com/ConsenSys/teku/commit/504fb05b3fc8a74d4d70592a480357e8b1851894", "committedDate": "2020-06-04T10:39:20Z", "message": "Simplify duplicate message detection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NTc2NzQ3", "url": "https://github.com/ConsenSys/teku/pull/1895#pullrequestreview-424576747", "createdAt": "2020-06-04T15:33:55Z", "commit": {"oid": "93cf0a03a9e05df8adc5d824e8a6c873c97fc4b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTozMzo1NlrOGfLwWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTozMzo1NlrOGfLwWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1MTY0Mw==", "bodyText": "Is there a consensus that this is the expected behavior? Worried that this might lead to consensus failures.", "url": "https://github.com/ConsenSys/teku/pull/1895#discussion_r435351643", "createdAt": "2020-06-04T15:33:56Z", "author": {"login": "cemozerr"}, "path": "bls/src/main/java/tech/pegasys/teku/bls/BLS.java", "diffHunk": "@@ -93,19 +96,29 @@ public static BLSSignature aggregate(List<BLSSignature> signatures) {\n    * <p>The standard says to return INVALID, that is, false, if the list of public keys is empty.\n    * See also discussion at https://github.com/ethereum/eth2.0-specs/issues/1713\n    *\n+   * <p>We also return false if any of the messages are duplicates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93cf0a03a9e05df8adc5d824e8a6c873c97fc4b7"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NTc3OTk3", "url": "https://github.com/ConsenSys/teku/pull/1895#pullrequestreview-424577997", "createdAt": "2020-06-04T15:35:16Z", "commit": {"oid": "93cf0a03a9e05df8adc5d824e8a6c873c97fc4b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTozNToxNlrOGfL1zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTozNToxNlrOGfL1zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM1MzAzNw==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void succeedsWhenAggregateVerifyWithRepeatedMessagesReturnsFalse() {\n          \n          \n            \n              void aggregateVerifyWithRepeatedMessagesReturnsFalse() {", "url": "https://github.com/ConsenSys/teku/pull/1895#discussion_r435353037", "createdAt": "2020-06-04T15:35:16Z", "author": {"login": "cemozerr"}, "path": "bls/src/test/java/tech/pegasys/teku/bls/BLSTest.java", "diffHunk": "@@ -80,6 +80,27 @@ void succeedsWhenCorrectlySigningAndVerifyingAggregateSignaturesReturnsTrue() {\n     assertTrue(BLS.fastAggregateVerify(publicKeys, message, aggregatedSignature));\n   }\n \n+  @Test\n+  void succeedsWhenAggregateVerifyWithRepeatedMessagesReturnsFalse() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93cf0a03a9e05df8adc5d824e8a6c873c97fc4b7"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NTc5Mjgx", "url": "https://github.com/ConsenSys/teku/pull/1895#pullrequestreview-424579281", "createdAt": "2020-06-04T15:36:37Z", "commit": {"oid": "504fb05b3fc8a74d4d70592a480357e8b1851894"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9c2a9e7128c560666139aa8420edec3bfe46807", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/e9c2a9e7128c560666139aa8420edec3bfe46807", "committedDate": "2020-06-04T21:26:40Z", "message": "Update tests to handle new signatures."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4023, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}