{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNTE4Mjk0", "number": 1971, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMjo0MzoxNFrOD_6quA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoxOTo0MFrOEAsd3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzQ4MDg4OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/DelayableAttestation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMjo0MzoxNFrOGa3khA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjoxNzo1NVrOGbfHlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyNjYyOA==", "bodyText": "Maybe not for the first pass, but I wonder if DelayableAttestation can just be removed and use ValidatableAttestation instead.  It would move to using a listener/subscriber pattern for onSuccessfulProcessing rather than passing a consumer to the constructor but that makes sense to me.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430826628", "createdAt": "2020-05-27T02:43:14Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/DelayableAttestation.java", "diffHunk": "@@ -22,14 +22,15 @@\n import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n \n public class DelayableAttestation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3NDU0NQ==", "bodyText": "I'll add this to this PR's todos, and depending on how long this test fixings take, might work on this in this PR or another.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431274545", "createdAt": "2020-05-27T16:23:01Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/DelayableAttestation.java", "diffHunk": "@@ -22,14 +22,15 @@\n import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n \n public class DelayableAttestation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyNjYyOA=="}, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NDU4MQ==", "bodyText": "Did this.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431474581", "createdAt": "2020-05-27T22:17:55Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/DelayableAttestation.java", "diffHunk": "@@ -22,14 +22,15 @@\n import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n \n public class DelayableAttestation {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyNjYyOA=="}, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzQ4MTcxOnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMjo0Mzo0N1rOGa3lBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTozODozNlrOGbQyZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyNjc1OA==", "bodyText": "nit: probably make the constructor private since we have the two static factory methods.  And since it's then private, I'd be tempted to just have one constructor that takes Attestation, Optional<SignedAggregateAndProof> because the static methods still provide a nice external API.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430826758", "createdAt": "2020-05-27T02:43:47Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+import java.util.Optional;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private Optional<SignedAggregateAndProof> maybeAggregate = Optional.empty();\n+\n+  public static ValidateableAttestation fromSingle(Attestation attestation) {\n+    return new ValidateableAttestation(attestation);\n+  }\n+\n+  public static ValidateableAttestation fromAggregate(SignedAggregateAndProof attestation) {\n+    return new ValidateableAttestation(attestation);\n+  }\n+\n+  public ValidateableAttestation(Attestation attestation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIzOTc4MQ==", "bodyText": "Makes sense. Done. Looks really clean after the change.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431239781", "createdAt": "2020-05-27T15:38:36Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+import java.util.Optional;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private Optional<SignedAggregateAndProof> maybeAggregate = Optional.empty();\n+\n+  public static ValidateableAttestation fromSingle(Attestation attestation) {\n+    return new ValidateableAttestation(attestation);\n+  }\n+\n+  public static ValidateableAttestation fromAggregate(SignedAggregateAndProof attestation) {\n+    return new ValidateableAttestation(attestation);\n+  }\n+\n+  public ValidateableAttestation(Attestation attestation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyNjc1OA=="}, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzQ4MzkxOnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMjo0NTowOVrOGa3mUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTozOToxMFrOGbQz8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyNzA4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!isAggregate()) {\n          \n          \n            \n                  throw new UnsupportedOperationException(\"ValidateableAttestation is not an aggregate.\");\n          \n          \n            \n                }\n          \n          \n            \n                return maybeAggregate.get();\n          \n          \n            \n                return maybeAggregate.orElseThrow(() -> new UnsupportedOperationException(\"ValidateableAttestation is not an aggregate.\"));", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430827088", "createdAt": "2020-05-27T02:45:09Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+import java.util.Optional;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private Optional<SignedAggregateAndProof> maybeAggregate = Optional.empty();\n+\n+  public static ValidateableAttestation fromSingle(Attestation attestation) {\n+    return new ValidateableAttestation(attestation);\n+  }\n+\n+  public static ValidateableAttestation fromAggregate(SignedAggregateAndProof attestation) {\n+    return new ValidateableAttestation(attestation);\n+  }\n+\n+  public ValidateableAttestation(Attestation attestation) {\n+    this.attestation = attestation;\n+  }\n+\n+  private ValidateableAttestation(SignedAggregateAndProof attestation) {\n+    maybeAggregate = Optional.of(attestation);\n+    this.attestation = attestation.getMessage().getAggregate();\n+  }\n+\n+  public boolean isAggregate() {\n+    return maybeAggregate.isPresent();\n+  }\n+\n+  public Attestation getAttestation() {\n+    return attestation;\n+  }\n+\n+  public SignedAggregateAndProof getSignedAggregateAndProof() {\n+    if (!isAggregate()) {\n+      throw new UnsupportedOperationException(\"ValidateableAttestation is not an aggregate.\");\n+    }\n+    return maybeAggregate.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0MDE3Nw==", "bodyText": "Nice suggestion!", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431240177", "createdAt": "2020-05-27T15:39:10Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+import java.util.Optional;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private Optional<SignedAggregateAndProof> maybeAggregate = Optional.empty();\n+\n+  public static ValidateableAttestation fromSingle(Attestation attestation) {\n+    return new ValidateableAttestation(attestation);\n+  }\n+\n+  public static ValidateableAttestation fromAggregate(SignedAggregateAndProof attestation) {\n+    return new ValidateableAttestation(attestation);\n+  }\n+\n+  public ValidateableAttestation(Attestation attestation) {\n+    this.attestation = attestation;\n+  }\n+\n+  private ValidateableAttestation(SignedAggregateAndProof attestation) {\n+    maybeAggregate = Optional.of(attestation);\n+    this.attestation = attestation.getMessage().getAggregate();\n+  }\n+\n+  public boolean isAggregate() {\n+    return maybeAggregate.isPresent();\n+  }\n+\n+  public Attestation getAttestation() {\n+    return attestation;\n+  }\n+\n+  public SignedAggregateAndProof getSignedAggregateAndProof() {\n+    if (!isAggregate()) {\n+      throw new UnsupportedOperationException(\"ValidateableAttestation is not an aggregate.\");\n+    }\n+    return maybeAggregate.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyNzA4OA=="}, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzQ4OTg3OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregateAttestationBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMjo0OToxOFrOGa3qBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMjo0OToxOFrOGa3qBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyODAzNg==", "bodyText": "This is an interesting case. We're really creating a ValidatableAttestation in the middle of processing which we were aiming to avoid.  We will have already performed some validation on the input attestations so theoretically could skip some of those (e.g. we should know the signature is valid).  Some things like the index attestation would have to be rebuilt though...\nProbably best to leave it as-is for now and just consider an aggregate as a completely new attestation, but interesting source of new ValidatableAttestation instances.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430828036", "createdAt": "2020-05-27T02:49:18Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregateAttestationBuilder.java", "diffHunk": "@@ -28,42 +29,47 @@\n  * made redundant by the current aggregate.\n  */\n class AggregateAttestationBuilder {\n-  private final Set<Attestation> includedAttestations = new HashSet<>();\n+  private final Set<ValidateableAttestation> includedAttestations = new HashSet<>();\n   private final AttestationData attestationData;\n   private Bitlist currentAggregateBits;\n \n   AggregateAttestationBuilder(final AttestationData attestationData) {\n     this.attestationData = attestationData;\n   }\n \n-  public boolean canAggregate(final Attestation candidate) {\n+  public boolean canAggregate(final ValidateableAttestation candidate) {\n     return currentAggregateBits == null\n-        || !currentAggregateBits.intersects(candidate.getAggregation_bits());\n+        || !currentAggregateBits.intersects(candidate.getAttestation().getAggregation_bits());\n   }\n \n-  public boolean isFullyIncluded(final Attestation candidate) {\n+  public boolean isFullyIncluded(final ValidateableAttestation candidate) {\n     return currentAggregateBits != null\n-        && currentAggregateBits.isSuperSetOf(candidate.getAggregation_bits());\n+        && currentAggregateBits.isSuperSetOf(candidate.getAttestation().getAggregation_bits());\n   }\n \n-  public void aggregate(final Attestation attestation) {\n+  public void aggregate(final ValidateableAttestation attestation) {\n     includedAttestations.add(attestation);\n     if (currentAggregateBits == null) {\n-      currentAggregateBits = attestation.getAggregation_bits().copy();\n+      currentAggregateBits = attestation.getAttestation().getAggregation_bits().copy();\n     } else {\n-      currentAggregateBits.setAllBits(attestation.getAggregation_bits());\n+      currentAggregateBits.setAllBits(attestation.getAttestation().getAggregation_bits());\n     }\n   }\n \n-  public Attestation buildAggregate() {\n+  public ValidateableAttestation buildAggregate() {\n     checkState(currentAggregateBits != null, \"Must aggregate at least one attestation\");\n-    return new Attestation(\n-        currentAggregateBits,\n-        attestationData,\n-        BLS.aggregate(includedAttestations.stream().map(Attestation::getAggregate_signature)));\n+    return ValidateableAttestation.fromSingle(new Attestation(\n+            currentAggregateBits,\n+            attestationData,\n+            BLS.aggregate(\n+                    includedAttestations\n+                            .stream()\n+                            .map(ValidateableAttestation::getAttestation)\n+                            .map(Attestation::getAggregate_signature))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzUwMDExOnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregatingAttestationPool.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMjo1NTo0MVrOGa3wcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowOToyM1rOGcId1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyOTY4Mg==", "bodyText": "It's a small detail, but I would actually return a ValidatableAttestation from here.  It will wind up being immediately unwrapped in ValidatorApiHandler because that is the boundary between beacon chain and validator client so shouldn't share validation state, but if something else winds up using this in the future it would be handy to keep any information about what's been validated around.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430829682", "createdAt": "2020-05-27T02:55:41Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregatingAttestationPool.java", "diffHunk": "@@ -100,13 +103,15 @@ private void removeFromSlotMappings(final UnsignedLong slot, final Bytes32 dataR\n         .filter(group -> group.getAttestationData().canIncludeInBlockAtSlot(slot))\n         .flatMap(MatchingDataAttestationGroup::stream)\n         .limit(attestations.getMaxSize())\n+        .map(ValidateableAttestation::getAttestation)\n         .forEach(attestations::add);\n     return attestations;\n   }\n \n   public synchronized Optional<Attestation> createAggregateFor(\n       final AttestationData attestationData) {\n     return Optional.ofNullable(attestationGroupByDataHash.get(attestationData.hash_tree_root()))\n-        .flatMap(attestations -> attestations.stream().findFirst());\n+            .flatMap(attestations -> attestations.stream().findFirst())\n+            .map(ValidateableAttestation::getAttestation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2OTgzNg==", "bodyText": "This makes me think that inheritance might be easier to manage ValidateableAttestation than delegation. If we chose inheritance, we would have access to both ValidateableAttestation and normal Attestation of the same attestation instance. Any thoughts on this?", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431269836", "createdAt": "2020-05-27T16:15:57Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregatingAttestationPool.java", "diffHunk": "@@ -100,13 +103,15 @@ private void removeFromSlotMappings(final UnsignedLong slot, final Bytes32 dataR\n         .filter(group -> group.getAttestationData().canIncludeInBlockAtSlot(slot))\n         .flatMap(MatchingDataAttestationGroup::stream)\n         .limit(attestations.getMaxSize())\n+        .map(ValidateableAttestation::getAttestation)\n         .forEach(attestations::add);\n     return attestations;\n   }\n \n   public synchronized Optional<Attestation> createAggregateFor(\n       final AttestationData attestationData) {\n     return Optional.ofNullable(attestationGroupByDataHash.get(attestationData.hash_tree_root()))\n-        .flatMap(attestations -> attestations.stream().findFirst());\n+            .flatMap(attestations -> attestations.stream().findFirst())\n+            .map(ValidateableAttestation::getAttestation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyOTY4Mg=="}, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3MTE3Mw==", "bodyText": "Made the change btw.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431271173", "createdAt": "2020-05-27T16:18:04Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregatingAttestationPool.java", "diffHunk": "@@ -100,13 +103,15 @@ private void removeFromSlotMappings(final UnsignedLong slot, final Bytes32 dataR\n         .filter(group -> group.getAttestationData().canIncludeInBlockAtSlot(slot))\n         .flatMap(MatchingDataAttestationGroup::stream)\n         .limit(attestations.getMaxSize())\n+        .map(ValidateableAttestation::getAttestation)\n         .forEach(attestations::add);\n     return attestations;\n   }\n \n   public synchronized Optional<Attestation> createAggregateFor(\n       final AttestationData attestationData) {\n     return Optional.ofNullable(attestationGroupByDataHash.get(attestationData.hash_tree_root()))\n-        .flatMap(attestations -> attestations.stream().findFirst());\n+            .flatMap(attestations -> attestations.stream().findFirst())\n+            .map(ValidateableAttestation::getAttestation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyOTY4Mg=="}, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MjAyMg==", "bodyText": "I missed this comment. Inheritance is tempting but I'd avoid it.  Generally preferring delegation over inheritance leads to much better composability and less complexity.\nI had considered if we should make Attestation an interface and then we'd have ValidatableAttestation and AttestationImpl (the current class for want of a better name) both implement it so you could still use a ValidatableAttestation as an Attestation.  But the lack of ability to find a good name is a sign that this isn't a great design and things like SSZ serialisation would likely cause us a lot of grief (another good reason to avoid reflection based magic).", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r432152022", "createdAt": "2020-05-28T22:09:23Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregatingAttestationPool.java", "diffHunk": "@@ -100,13 +103,15 @@ private void removeFromSlotMappings(final UnsignedLong slot, final Bytes32 dataR\n         .filter(group -> group.getAttestationData().canIncludeInBlockAtSlot(slot))\n         .flatMap(MatchingDataAttestationGroup::stream)\n         .limit(attestations.getMaxSize())\n+        .map(ValidateableAttestation::getAttestation)\n         .forEach(attestations::add);\n     return attestations;\n   }\n \n   public synchronized Optional<Attestation> createAggregateFor(\n       final AttestationData attestationData) {\n     return Optional.ofNullable(attestationGroupByDataHash.get(attestationData.hash_tree_root()))\n-        .flatMap(attestations -> attestations.stream().findFirst());\n+            .flatMap(attestations -> attestations.stream().findFirst())\n+            .map(ValidateableAttestation::getAttestation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyOTY4Mg=="}, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzUwMDk4OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMjo1NjoxOVrOGa3xCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTo0NjoxOFrOGbRJrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyOTgzNA==", "bodyText": "I think you can use:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return SafeFuture.completedFuture(null);\n          \n          \n            \n                return SafeFuture.COMPLETE;", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430829834", "createdAt": "2020-05-27T02:56:19Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java", "diffHunk": "@@ -141,12 +130,12 @@ private void processAttestation(final DelayableAttestation delayableAttestation)\n   @Override\n   protected SafeFuture<?> doStart() {\n     eventBus.register(this);\n-    return this.pendingAttestations.start();\n+    return SafeFuture.completedFuture(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NTc0MQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431245741", "createdAt": "2020-05-27T15:46:18Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java", "diffHunk": "@@ -141,12 +130,12 @@ private void processAttestation(final DelayableAttestation delayableAttestation)\n   @Override\n   protected SafeFuture<?> doStart() {\n     eventBus.register(this);\n-    return this.pendingAttestations.start();\n+    return SafeFuture.completedFuture(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyOTgzNA=="}, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzUwOTI2OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/UpstreamAttestationPipe.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzowMTo1OFrOGa32eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTo1Njo1OFrOGbRppg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMTIyNQ==", "bodyText": "Need to think about how we name this.  It's not really a pipe, but it's also not really a handler. Maybe just GossipedAttestationConsumer?  Not sure...", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430831225", "createdAt": "2020-05-27T03:01:58Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/UpstreamAttestationPipe.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package tech.pegasys.teku.networking.eth2.gossip.topics;\n+\n+import tech.pegasys.teku.datastructures.attestation.ValidateableAttestation;\n+\n+public interface UpstreamAttestationPipe {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1MzkyNg==", "bodyText": "I like GossipedAttestationConsumer. I made the change. Although, I have to say, UpstreamAttestationPipe really made me feel like an old engineer dealing with serious plumbing issues :D", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431253926", "createdAt": "2020-05-27T15:56:58Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/UpstreamAttestationPipe.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package tech.pegasys.teku.networking.eth2.gossip.topics;\n+\n+import tech.pegasys.teku.datastructures.attestation.ValidateableAttestation;\n+\n+public interface UpstreamAttestationPipe {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMTIyNQ=="}, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MzUxMTYzOnYy", "diffSide": "RIGHT", "path": "validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/ValidatorApiHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwMzowNDowMVrOGa34Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMjoxNzo0MVrOGbfHTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMTY4Nw==", "bodyText": "I think we'll need to start sending these attestations to the AttestationManager since it won't pick it up from the eventBus anymore.  That's really what we want anyway design-wise.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430831687", "createdAt": "2020-05-27T03:04:01Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/ValidatorApiHandler.java", "diffHunk": "@@ -213,13 +214,13 @@ public void subscribeToPersistentSubnets(Set<SubnetSubscription> subnetSubscript\n \n   @Override\n   public void sendSignedAttestation(final Attestation attestation) {\n-    attestationPool.add(attestation);\n+    attestationPool.add(ValidateableAttestation.fromSingle(attestation));\n     eventBus.post(attestation);\n   }\n \n   @Override\n   public void sendAggregateAndProof(final SignedAggregateAndProof aggregateAndProof) {\n-    attestationPool.add(aggregateAndProof.getMessage().getAggregate());\n+    attestationPool.add(ValidateableAttestation.fromAggregate(aggregateAndProof));\n     eventBus.post(aggregateAndProof);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1MDY5Nw==", "bodyText": "We still use EventBus at GossipManagers to take these attestations and put them on the wire. We could of course change that, but AttestationManager does not currently have a way of communicating downstream. On a different note, to add to your point, we have to consider our own attestations for our fork choice processing too, and sending them to AttestationManager would help fix that.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431250697", "createdAt": "2020-05-27T15:52:35Z", "author": {"login": "cemozerr"}, "path": "validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/ValidatorApiHandler.java", "diffHunk": "@@ -213,13 +214,13 @@ public void subscribeToPersistentSubnets(Set<SubnetSubscription> subnetSubscript\n \n   @Override\n   public void sendSignedAttestation(final Attestation attestation) {\n-    attestationPool.add(attestation);\n+    attestationPool.add(ValidateableAttestation.fromSingle(attestation));\n     eventBus.post(attestation);\n   }\n \n   @Override\n   public void sendAggregateAndProof(final SignedAggregateAndProof aggregateAndProof) {\n-    attestationPool.add(aggregateAndProof.getMessage().getAggregate());\n+    attestationPool.add(ValidateableAttestation.fromAggregate(aggregateAndProof));\n     eventBus.post(aggregateAndProof);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMTY4Nw=="}, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1MTkzNw==", "bodyText": "Sounds like we need to have a way of sending some attestations downstream from AttestationManager. This would be applicable both for network layer SAVED_FOR_FUTURE labeled attestations, and attestations that we generated ourselves.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431251937", "createdAt": "2020-05-27T15:54:18Z", "author": {"login": "cemozerr"}, "path": "validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/ValidatorApiHandler.java", "diffHunk": "@@ -213,13 +214,13 @@ public void subscribeToPersistentSubnets(Set<SubnetSubscription> subnetSubscript\n \n   @Override\n   public void sendSignedAttestation(final Attestation attestation) {\n-    attestationPool.add(attestation);\n+    attestationPool.add(ValidateableAttestation.fromSingle(attestation));\n     eventBus.post(attestation);\n   }\n \n   @Override\n   public void sendAggregateAndProof(final SignedAggregateAndProof aggregateAndProof) {\n-    attestationPool.add(aggregateAndProof.getMessage().getAggregate());\n+    attestationPool.add(ValidateableAttestation.fromAggregate(aggregateAndProof));\n     eventBus.post(aggregateAndProof);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMTY4Nw=="}, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NDUwOA==", "bodyText": "I've implemented passing ungossiped attestations downstream.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431474508", "createdAt": "2020-05-27T22:17:41Z", "author": {"login": "cemozerr"}, "path": "validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/ValidatorApiHandler.java", "diffHunk": "@@ -213,13 +214,13 @@ public void subscribeToPersistentSubnets(Set<SubnetSubscription> subnetSubscript\n \n   @Override\n   public void sendSignedAttestation(final Attestation attestation) {\n-    attestationPool.add(attestation);\n+    attestationPool.add(ValidateableAttestation.fromSingle(attestation));\n     eventBus.post(attestation);\n   }\n \n   @Override\n   public void sendAggregateAndProof(final SignedAggregateAndProof aggregateAndProof) {\n-    attestationPool.add(aggregateAndProof.getMessage().getAggregate());\n+    attestationPool.add(ValidateableAttestation.fromAggregate(aggregateAndProof));\n     eventBus.post(aggregateAndProof);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMTY4Nw=="}, "originalCommit": {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODEyNDE0OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNDo1ODowM1rOGblpWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTo0NDo0OVrOGb7aAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MTUyOA==", "bodyText": "I feel like we should always set the indexed attestation - we've calculated it now so may as well keep it for as long as we keep the Attestation around.  It shouldn't get used but just feels wrong to have a system setup to cache things like this and then not always cache them.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431581528", "createdAt": "2020-05-28T04:58:03Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java", "diffHunk": "@@ -290,24 +292,48 @@ private static boolean blockDescendsFromLatestFinalizedBlock(\n   @CheckReturnValue\n   public static AttestationProcessingResult on_attestation(\n       final MutableStore store,\n-      final Attestation attestation,\n+      final ValidateableAttestation validateableAttestation,\n       final StateTransition stateTransition,\n       final ForkChoiceStrategy forkChoiceStrategy) {\n \n+    Attestation attestation = validateableAttestation.getAttestation();\n     Checkpoint target = attestation.getData().getTarget();\n \n     return validateOnAttestation(store, attestation)\n         .ifSuccessful(() -> storeTargetCheckpointState(store, stateTransition, target))\n         .ifSuccessful(\n-            () ->\n-                validateAndApplyIndexedAttestation(store, attestation, target, forkChoiceStrategy));\n+            () -> {\n+              Optional<IndexedAttestation> maybeIndexedAttestation =\n+                  indexAndValidateAttestation(store, attestation, target);\n+\n+              if (maybeIndexedAttestation.isEmpty()) {\n+                return INVALID;\n+              }\n+\n+              IndexedAttestation indexedAttestation = maybeIndexedAttestation.get();\n+              AttestationProcessingResult result =\n+                  checkIfAttestationShouldBeSavedForFuture(store, attestation);\n+\n+              if (result.isSuccessful()) {\n+                forkChoiceStrategy.onAttestation(store, indexedAttestation);\n+              } else {\n+                validateableAttestation.setIndexedAttestation(indexedAttestation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzODA0OQ==", "bodyText": "Makes sense. Done.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431938049", "createdAt": "2020-05-28T15:44:49Z", "author": {"login": "cemozerr"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java", "diffHunk": "@@ -290,24 +292,48 @@ private static boolean blockDescendsFromLatestFinalizedBlock(\n   @CheckReturnValue\n   public static AttestationProcessingResult on_attestation(\n       final MutableStore store,\n-      final Attestation attestation,\n+      final ValidateableAttestation validateableAttestation,\n       final StateTransition stateTransition,\n       final ForkChoiceStrategy forkChoiceStrategy) {\n \n+    Attestation attestation = validateableAttestation.getAttestation();\n     Checkpoint target = attestation.getData().getTarget();\n \n     return validateOnAttestation(store, attestation)\n         .ifSuccessful(() -> storeTargetCheckpointState(store, stateTransition, target))\n         .ifSuccessful(\n-            () ->\n-                validateAndApplyIndexedAttestation(store, attestation, target, forkChoiceStrategy));\n+            () -> {\n+              Optional<IndexedAttestation> maybeIndexedAttestation =\n+                  indexAndValidateAttestation(store, attestation, target);\n+\n+              if (maybeIndexedAttestation.isEmpty()) {\n+                return INVALID;\n+              }\n+\n+              IndexedAttestation indexedAttestation = maybeIndexedAttestation.get();\n+              AttestationProcessingResult result =\n+                  checkIfAttestationShouldBeSavedForFuture(store, attestation);\n+\n+              if (result.isSuccessful()) {\n+                forkChoiceStrategy.onAttestation(store, indexedAttestation);\n+              } else {\n+                validateableAttestation.setIndexedAttestation(indexedAttestation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MTUyOA=="}, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODEyNjI4OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNDo1OTo0MFrOGblqyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTo0NTo1N1rOGb7dJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MTg5Nw==", "bodyText": "These should be volatile since we might access from multiple threads.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431581897", "createdAt": "2020-05-28T04:59:40Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private final Optional<SignedAggregateAndProof> maybeAggregate;\n+  private final AtomicBoolean gossiped;\n+\n+  private Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();\n+  private Optional<Bytes32> hashTreeRoot = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzODg1NQ==", "bodyText": "Make sense. Done.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431938855", "createdAt": "2020-05-28T15:45:57Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private final Optional<SignedAggregateAndProof> maybeAggregate;\n+  private final AtomicBoolean gossiped;\n+\n+  private Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();\n+  private Optional<Bytes32> hashTreeRoot = Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MTg5Nw=="}, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODEyODA2OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTowMDo0MVrOGblr2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTo0NzowMFrOGb7f2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MjE2OA==", "bodyText": "Initial value is always false so probably should just use\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final AtomicBoolean gossiped;\n          \n          \n            \n              private final AtomicBoolean gossiped = new AtomicBoolean(false);", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431582168", "createdAt": "2020-05-28T05:00:41Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private final Optional<SignedAggregateAndProof> maybeAggregate;\n+  private final AtomicBoolean gossiped;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzOTU0NQ==", "bodyText": "Makes sense. Done.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431939545", "createdAt": "2020-05-28T15:47:00Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private final Optional<SignedAggregateAndProof> maybeAggregate;\n+  private final AtomicBoolean gossiped;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MjE2OA=="}, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODEzMTcwOnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTowMzoyMlrOGbluOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTo1MjoyMFrOGb7uXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Mjc3OA==", "bodyText": "Nothing appears to set hashTreeRoot.  Would probably make more sense to use guava's memoize function: this.hashTreeRoot = Suppliers.memoize(() -> attestation.hash_tree_root())  in the constructor (would then be Supplier<Bytes32> hashTreeRoot and just call hashTreeRoot.get() here.  The memoize function will handle ensuring the root is only calculated once and cached properly.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431582778", "createdAt": "2020-05-28T05:03:22Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private final Optional<SignedAggregateAndProof> maybeAggregate;\n+  private final AtomicBoolean gossiped;\n+\n+  private Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();\n+  private Optional<Bytes32> hashTreeRoot = Optional.empty();\n+\n+  public static ValidateableAttestation fromSingle(Attestation attestation) {\n+    return new ValidateableAttestation(attestation, Optional.empty(), false);\n+  }\n+\n+  public static ValidateableAttestation fromAggregate(SignedAggregateAndProof attestation) {\n+    return new ValidateableAttestation(\n+        attestation.getMessage().getAggregate(), Optional.of(attestation), false);\n+  }\n+\n+  private ValidateableAttestation(\n+      Attestation attestation,\n+      Optional<SignedAggregateAndProof> aggregateAndProof,\n+      boolean gossiped) {\n+    this.maybeAggregate = aggregateAndProof;\n+    this.attestation = attestation;\n+    this.gossiped = new AtomicBoolean(gossiped);\n+  }\n+\n+  public IndexedAttestation getIndexedAttestation() {\n+    return maybeIndexedAttestation.orElseThrow(\n+        () ->\n+            new UnsupportedOperationException(\n+                \"ValidateableAttestation does not have an IndexedAttestation yet.\"));\n+  }\n+\n+  public void setIndexedAttestation(IndexedAttestation maybeIndexedAttestation) {\n+    this.maybeIndexedAttestation = Optional.of(maybeIndexedAttestation);\n+  }\n+\n+  public boolean markGossiped() {\n+    return gossiped.compareAndSet(false, true);\n+  }\n+\n+  public boolean isGossiped() {\n+    return gossiped.get();\n+  }\n+\n+  public boolean isAggregate() {\n+    return maybeAggregate.isPresent();\n+  }\n+\n+  public Attestation getAttestation() {\n+    return attestation;\n+  }\n+\n+  public SignedAggregateAndProof getSignedAggregateAndProof() {\n+    return maybeAggregate.orElseThrow(\n+        () -> new UnsupportedOperationException(\"ValidateableAttestation is not an aggregate.\"));\n+  }\n+\n+  public UnsignedLong getEarliestSlotForForkChoiceProcessing() {\n+    return attestation.getEarliestSlotForForkChoiceProcessing();\n+  }\n+\n+  public Collection<Bytes32> getDependentBlockRoots() {\n+    return attestation.getDependentBlockRoots();\n+  }\n+\n+  public Bytes32 hash_tree_root() {\n+    return hashTreeRoot.orElse(attestation.hash_tree_root());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0MDM4MQ==", "bodyText": "I really was looking forward to using the Suppliers.memoize after Paul's PR. Cool!", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431940381", "createdAt": "2020-05-28T15:48:11Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private final Optional<SignedAggregateAndProof> maybeAggregate;\n+  private final AtomicBoolean gossiped;\n+\n+  private Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();\n+  private Optional<Bytes32> hashTreeRoot = Optional.empty();\n+\n+  public static ValidateableAttestation fromSingle(Attestation attestation) {\n+    return new ValidateableAttestation(attestation, Optional.empty(), false);\n+  }\n+\n+  public static ValidateableAttestation fromAggregate(SignedAggregateAndProof attestation) {\n+    return new ValidateableAttestation(\n+        attestation.getMessage().getAggregate(), Optional.of(attestation), false);\n+  }\n+\n+  private ValidateableAttestation(\n+      Attestation attestation,\n+      Optional<SignedAggregateAndProof> aggregateAndProof,\n+      boolean gossiped) {\n+    this.maybeAggregate = aggregateAndProof;\n+    this.attestation = attestation;\n+    this.gossiped = new AtomicBoolean(gossiped);\n+  }\n+\n+  public IndexedAttestation getIndexedAttestation() {\n+    return maybeIndexedAttestation.orElseThrow(\n+        () ->\n+            new UnsupportedOperationException(\n+                \"ValidateableAttestation does not have an IndexedAttestation yet.\"));\n+  }\n+\n+  public void setIndexedAttestation(IndexedAttestation maybeIndexedAttestation) {\n+    this.maybeIndexedAttestation = Optional.of(maybeIndexedAttestation);\n+  }\n+\n+  public boolean markGossiped() {\n+    return gossiped.compareAndSet(false, true);\n+  }\n+\n+  public boolean isGossiped() {\n+    return gossiped.get();\n+  }\n+\n+  public boolean isAggregate() {\n+    return maybeAggregate.isPresent();\n+  }\n+\n+  public Attestation getAttestation() {\n+    return attestation;\n+  }\n+\n+  public SignedAggregateAndProof getSignedAggregateAndProof() {\n+    return maybeAggregate.orElseThrow(\n+        () -> new UnsupportedOperationException(\"ValidateableAttestation is not an aggregate.\"));\n+  }\n+\n+  public UnsignedLong getEarliestSlotForForkChoiceProcessing() {\n+    return attestation.getEarliestSlotForForkChoiceProcessing();\n+  }\n+\n+  public Collection<Bytes32> getDependentBlockRoots() {\n+    return attestation.getDependentBlockRoots();\n+  }\n+\n+  public Bytes32 hash_tree_root() {\n+    return hashTreeRoot.orElse(attestation.hash_tree_root());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Mjc3OA=="}, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0MzI2MQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431943261", "createdAt": "2020-05-28T15:52:20Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private final Optional<SignedAggregateAndProof> maybeAggregate;\n+  private final AtomicBoolean gossiped;\n+\n+  private Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();\n+  private Optional<Bytes32> hashTreeRoot = Optional.empty();\n+\n+  public static ValidateableAttestation fromSingle(Attestation attestation) {\n+    return new ValidateableAttestation(attestation, Optional.empty(), false);\n+  }\n+\n+  public static ValidateableAttestation fromAggregate(SignedAggregateAndProof attestation) {\n+    return new ValidateableAttestation(\n+        attestation.getMessage().getAggregate(), Optional.of(attestation), false);\n+  }\n+\n+  private ValidateableAttestation(\n+      Attestation attestation,\n+      Optional<SignedAggregateAndProof> aggregateAndProof,\n+      boolean gossiped) {\n+    this.maybeAggregate = aggregateAndProof;\n+    this.attestation = attestation;\n+    this.gossiped = new AtomicBoolean(gossiped);\n+  }\n+\n+  public IndexedAttestation getIndexedAttestation() {\n+    return maybeIndexedAttestation.orElseThrow(\n+        () ->\n+            new UnsupportedOperationException(\n+                \"ValidateableAttestation does not have an IndexedAttestation yet.\"));\n+  }\n+\n+  public void setIndexedAttestation(IndexedAttestation maybeIndexedAttestation) {\n+    this.maybeIndexedAttestation = Optional.of(maybeIndexedAttestation);\n+  }\n+\n+  public boolean markGossiped() {\n+    return gossiped.compareAndSet(false, true);\n+  }\n+\n+  public boolean isGossiped() {\n+    return gossiped.get();\n+  }\n+\n+  public boolean isAggregate() {\n+    return maybeAggregate.isPresent();\n+  }\n+\n+  public Attestation getAttestation() {\n+    return attestation;\n+  }\n+\n+  public SignedAggregateAndProof getSignedAggregateAndProof() {\n+    return maybeAggregate.orElseThrow(\n+        () -> new UnsupportedOperationException(\"ValidateableAttestation is not an aggregate.\"));\n+  }\n+\n+  public UnsignedLong getEarliestSlotForForkChoiceProcessing() {\n+    return attestation.getEarliestSlotForForkChoiceProcessing();\n+  }\n+\n+  public Collection<Bytes32> getDependentBlockRoots() {\n+    return attestation.getDependentBlockRoots();\n+  }\n+\n+  public Bytes32 hash_tree_root() {\n+    return hashTreeRoot.orElse(attestation.hash_tree_root());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Mjc3OA=="}, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODEzNTkwOnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTowNjowNVrOGblwxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjowMzozOFrOGb8NQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MzQyOA==", "bodyText": "Not sure it makes sense to only notify listeners if the attestation hasn't been gossiped.  We don't know that the listener is gossiping it and we aren't marking it as gossiped.  Suspect here we should always notify subscribers, and then the subscriber that does the gossiping can check if it has already gossiped the attestation and ignore the notification if required.\nThis method would then just be notifySubscribers\nSlightly tempted not to differentiate between single and aggregate attestations here either and again let consumers decide if they need to differentiate between the two.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431583428", "createdAt": "2020-05-28T05:06:05Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition.attestation;\n+\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.attestation.ProcessedAggregateConsumer;\n+import tech.pegasys.teku.datastructures.attestation.ProcessedAttestationConsumer;\n+import tech.pegasys.teku.datastructures.attestation.ValidateableAttestation;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.service.serviceutils.Service;\n+import tech.pegasys.teku.statetransition.events.block.ImportedBlockEvent;\n+import tech.pegasys.teku.statetransition.util.FutureItems;\n+import tech.pegasys.teku.statetransition.util.PendingPool;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.events.Subscribers;\n+import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n+\n+public class AttestationManager extends Service implements SlotEventsChannel {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final EventBus eventBus;\n+  private final ForkChoiceAttestationProcessor attestationProcessor;\n+\n+  private final PendingPool<ValidateableAttestation> pendingAttestations;\n+  private final FutureItems<ValidateableAttestation> futureAttestations;\n+  private final AggregatingAttestationPool aggregatingAttestationPool;\n+\n+  private final Subscribers<ProcessedAttestationConsumer> processedAttestationSubscriber =\n+      Subscribers.create(true);\n+  private final Subscribers<ProcessedAggregateConsumer> processedAggregateSubscriber =\n+      Subscribers.create(true);\n+\n+  AttestationManager(\n+      final EventBus eventBus,\n+      final ForkChoiceAttestationProcessor attestationProcessor,\n+      final PendingPool<ValidateableAttestation> pendingAttestations,\n+      final FutureItems<ValidateableAttestation> futureAttestations,\n+      final AggregatingAttestationPool aggregatingAttestationPool) {\n+    this.eventBus = eventBus;\n+    this.attestationProcessor = attestationProcessor;\n+    this.pendingAttestations = pendingAttestations;\n+    this.futureAttestations = futureAttestations;\n+    this.aggregatingAttestationPool = aggregatingAttestationPool;\n+  }\n+\n+  public static AttestationManager create(\n+      final EventBus eventBus,\n+      final PendingPool<ValidateableAttestation> pendingAttestations,\n+      final FutureItems<ValidateableAttestation> futureAttestations,\n+      final ForkChoiceAttestationProcessor forkChoiceAttestationProcessor,\n+      final AggregatingAttestationPool aggregatingAttestationPool) {\n+    return new AttestationManager(\n+        eventBus,\n+        forkChoiceAttestationProcessor,\n+        pendingAttestations,\n+        futureAttestations,\n+        aggregatingAttestationPool);\n+  }\n+\n+  public void subscribeToProcessedAttestations(\n+      ProcessedAttestationConsumer processedAttestationConsumer) {\n+    processedAttestationSubscriber.subscribe(processedAttestationConsumer);\n+  }\n+\n+  public void subscribeToProcessedAggregates(\n+      ProcessedAggregateConsumer processedAggregateConsumer) {\n+    processedAggregateSubscriber.subscribe(processedAggregateConsumer);\n+  }\n+\n+  @Override\n+  public void onSlot(final UnsignedLong slot) {\n+    List<ValidateableAttestation> attestations = futureAttestations.prune(slot);\n+    attestations.stream()\n+        .map(ValidateableAttestation::getIndexedAttestation)\n+        .forEach(attestationProcessor::applyIndexedAttestationToForkChoice);\n+\n+    attestations.forEach(this::gossipAttestationIfNeeded);\n+  }\n+\n+  private void gossipAttestationIfNeeded(ValidateableAttestation attestation) {\n+    if (attestation.isGossiped()) {\n+      return;\n+    }\n+\n+    if (attestation.isAggregate()) {\n+      processedAggregateSubscriber.forEach(s -> s.accept(attestation));\n+    } else {\n+      processedAttestationSubscriber.forEach(s -> s.accept(attestation));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0NzE2Mg==", "bodyText": "I was really on the line with both of your points here, and just did the way I did to make a decision and get feedback. Both points make sense to me.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431947162", "createdAt": "2020-05-28T15:57:51Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition.attestation;\n+\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.attestation.ProcessedAggregateConsumer;\n+import tech.pegasys.teku.datastructures.attestation.ProcessedAttestationConsumer;\n+import tech.pegasys.teku.datastructures.attestation.ValidateableAttestation;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.service.serviceutils.Service;\n+import tech.pegasys.teku.statetransition.events.block.ImportedBlockEvent;\n+import tech.pegasys.teku.statetransition.util.FutureItems;\n+import tech.pegasys.teku.statetransition.util.PendingPool;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.events.Subscribers;\n+import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n+\n+public class AttestationManager extends Service implements SlotEventsChannel {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final EventBus eventBus;\n+  private final ForkChoiceAttestationProcessor attestationProcessor;\n+\n+  private final PendingPool<ValidateableAttestation> pendingAttestations;\n+  private final FutureItems<ValidateableAttestation> futureAttestations;\n+  private final AggregatingAttestationPool aggregatingAttestationPool;\n+\n+  private final Subscribers<ProcessedAttestationConsumer> processedAttestationSubscriber =\n+      Subscribers.create(true);\n+  private final Subscribers<ProcessedAggregateConsumer> processedAggregateSubscriber =\n+      Subscribers.create(true);\n+\n+  AttestationManager(\n+      final EventBus eventBus,\n+      final ForkChoiceAttestationProcessor attestationProcessor,\n+      final PendingPool<ValidateableAttestation> pendingAttestations,\n+      final FutureItems<ValidateableAttestation> futureAttestations,\n+      final AggregatingAttestationPool aggregatingAttestationPool) {\n+    this.eventBus = eventBus;\n+    this.attestationProcessor = attestationProcessor;\n+    this.pendingAttestations = pendingAttestations;\n+    this.futureAttestations = futureAttestations;\n+    this.aggregatingAttestationPool = aggregatingAttestationPool;\n+  }\n+\n+  public static AttestationManager create(\n+      final EventBus eventBus,\n+      final PendingPool<ValidateableAttestation> pendingAttestations,\n+      final FutureItems<ValidateableAttestation> futureAttestations,\n+      final ForkChoiceAttestationProcessor forkChoiceAttestationProcessor,\n+      final AggregatingAttestationPool aggregatingAttestationPool) {\n+    return new AttestationManager(\n+        eventBus,\n+        forkChoiceAttestationProcessor,\n+        pendingAttestations,\n+        futureAttestations,\n+        aggregatingAttestationPool);\n+  }\n+\n+  public void subscribeToProcessedAttestations(\n+      ProcessedAttestationConsumer processedAttestationConsumer) {\n+    processedAttestationSubscriber.subscribe(processedAttestationConsumer);\n+  }\n+\n+  public void subscribeToProcessedAggregates(\n+      ProcessedAggregateConsumer processedAggregateConsumer) {\n+    processedAggregateSubscriber.subscribe(processedAggregateConsumer);\n+  }\n+\n+  @Override\n+  public void onSlot(final UnsignedLong slot) {\n+    List<ValidateableAttestation> attestations = futureAttestations.prune(slot);\n+    attestations.stream()\n+        .map(ValidateableAttestation::getIndexedAttestation)\n+        .forEach(attestationProcessor::applyIndexedAttestationToForkChoice);\n+\n+    attestations.forEach(this::gossipAttestationIfNeeded);\n+  }\n+\n+  private void gossipAttestationIfNeeded(ValidateableAttestation attestation) {\n+    if (attestation.isGossiped()) {\n+      return;\n+    }\n+\n+    if (attestation.isAggregate()) {\n+      processedAggregateSubscriber.forEach(s -> s.accept(attestation));\n+    } else {\n+      processedAttestationSubscriber.forEach(s -> s.accept(attestation));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MzQyOA=="}, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1MTE3MQ==", "bodyText": "The second point especially makes sense since AttestationManager normally does not care about aggregate or not, and ValidataeableAttestation itself handles the difference. So it doesn't make much sense for AttestationManager to separate the two in this one method.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431951171", "createdAt": "2020-05-28T16:03:38Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition.attestation;\n+\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.attestation.ProcessedAggregateConsumer;\n+import tech.pegasys.teku.datastructures.attestation.ProcessedAttestationConsumer;\n+import tech.pegasys.teku.datastructures.attestation.ValidateableAttestation;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.service.serviceutils.Service;\n+import tech.pegasys.teku.statetransition.events.block.ImportedBlockEvent;\n+import tech.pegasys.teku.statetransition.util.FutureItems;\n+import tech.pegasys.teku.statetransition.util.PendingPool;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.events.Subscribers;\n+import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n+\n+public class AttestationManager extends Service implements SlotEventsChannel {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final EventBus eventBus;\n+  private final ForkChoiceAttestationProcessor attestationProcessor;\n+\n+  private final PendingPool<ValidateableAttestation> pendingAttestations;\n+  private final FutureItems<ValidateableAttestation> futureAttestations;\n+  private final AggregatingAttestationPool aggregatingAttestationPool;\n+\n+  private final Subscribers<ProcessedAttestationConsumer> processedAttestationSubscriber =\n+      Subscribers.create(true);\n+  private final Subscribers<ProcessedAggregateConsumer> processedAggregateSubscriber =\n+      Subscribers.create(true);\n+\n+  AttestationManager(\n+      final EventBus eventBus,\n+      final ForkChoiceAttestationProcessor attestationProcessor,\n+      final PendingPool<ValidateableAttestation> pendingAttestations,\n+      final FutureItems<ValidateableAttestation> futureAttestations,\n+      final AggregatingAttestationPool aggregatingAttestationPool) {\n+    this.eventBus = eventBus;\n+    this.attestationProcessor = attestationProcessor;\n+    this.pendingAttestations = pendingAttestations;\n+    this.futureAttestations = futureAttestations;\n+    this.aggregatingAttestationPool = aggregatingAttestationPool;\n+  }\n+\n+  public static AttestationManager create(\n+      final EventBus eventBus,\n+      final PendingPool<ValidateableAttestation> pendingAttestations,\n+      final FutureItems<ValidateableAttestation> futureAttestations,\n+      final ForkChoiceAttestationProcessor forkChoiceAttestationProcessor,\n+      final AggregatingAttestationPool aggregatingAttestationPool) {\n+    return new AttestationManager(\n+        eventBus,\n+        forkChoiceAttestationProcessor,\n+        pendingAttestations,\n+        futureAttestations,\n+        aggregatingAttestationPool);\n+  }\n+\n+  public void subscribeToProcessedAttestations(\n+      ProcessedAttestationConsumer processedAttestationConsumer) {\n+    processedAttestationSubscriber.subscribe(processedAttestationConsumer);\n+  }\n+\n+  public void subscribeToProcessedAggregates(\n+      ProcessedAggregateConsumer processedAggregateConsumer) {\n+    processedAggregateSubscriber.subscribe(processedAggregateConsumer);\n+  }\n+\n+  @Override\n+  public void onSlot(final UnsignedLong slot) {\n+    List<ValidateableAttestation> attestations = futureAttestations.prune(slot);\n+    attestations.stream()\n+        .map(ValidateableAttestation::getIndexedAttestation)\n+        .forEach(attestationProcessor::applyIndexedAttestationToForkChoice);\n+\n+    attestations.forEach(this::gossipAttestationIfNeeded);\n+  }\n+\n+  private void gossipAttestationIfNeeded(ValidateableAttestation attestation) {\n+    if (attestation.isGossiped()) {\n+      return;\n+    }\n+\n+    if (attestation.isAggregate()) {\n+      processedAggregateSubscriber.forEach(s -> s.accept(attestation));\n+    } else {\n+      processedAttestationSubscriber.forEach(s -> s.accept(attestation));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MzQyOA=="}, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODE1ODI1OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2Network.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToxODo0NFrOGbl93w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjo1NjoyNFrOGb-QYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Njc4Mw==", "bodyText": "I'd introduce an AttestationListener interface and use it here instead of AttestationManager.  Actually I think the same interface could be used here and for processed attestations (instead of ProcessedAttestationConsumer.  It's the same role for a listener (tell me about attestations) just applied in different contexts (and it's still much more specific than just Consumer<Attestation> which I think is useful.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431586783", "createdAt": "2020-05-28T05:18:44Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2Network.java", "diffHunk": "@@ -23,4 +24,6 @@\n   void unsubscribeFromAttestationSubnetId(final int subnetId);\n \n   void setLongTermAttestationSubnetSubscriptions(final Iterable<Integer> subnetIndices);\n+\n+  void subscribeToAttestations(AttestationManager attestationManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk3NzQzMg==", "bodyText": "I believe you might have gotten this wrong. This method is for the networking layer to subscribe to the attestations processed by AttestationManager. The networking layer does not expose its gossip managers so I can't do AttestationManager.subscribeToProcessedAttestations(attestationGossipManager::onNewAttestation) at the BeaconChainController. I basically need to have access to both AttestationManager and GossipManagers in the same place and that's how I solved it. Does that make sense?", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431977432", "createdAt": "2020-05-28T16:44:03Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2Network.java", "diffHunk": "@@ -23,4 +24,6 @@\n   void unsubscribeFromAttestationSubnetId(final int subnetId);\n \n   void setLongTermAttestationSubnetSubscriptions(final Iterable<Integer> subnetIndices);\n+\n+  void subscribeToAttestations(AttestationManager attestationManager);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Njc4Mw=="}, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk4NDczOA==", "bodyText": "I've actually removed this method, and instead, I now pass in a Consumer<ProcessedAttestationListener> processedAttestationSubscription when constructing the ActiveEth2Network.  (I might make this a custom interface soon). At ActiveEt2Network initialization, I set this consumer to AttestationManager::subscribeToProcessedAttestations. Then at ActiveEth2Network startup, I use this consumer to pass in gossipManagers onAttestation methods to the AttestationManager.subscribeToProcessedAttestations.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431984738", "createdAt": "2020-05-28T16:56:24Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2Network.java", "diffHunk": "@@ -23,4 +24,6 @@\n   void unsubscribeFromAttestationSubnetId(final int subnetId);\n \n   void setLongTermAttestationSubnetSubscriptions(final Iterable<Integer> subnetIndices);\n+\n+  void subscribeToAttestations(AttestationManager attestationManager);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Njc4Mw=="}, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODE1OTE5OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2NetworkBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToxOToyMlrOGbl-fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzozMDoyN1rOGb_hJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Njk0MQ==", "bodyText": "nit: Probably could rename the method to attestationListener or attestationConsumer.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431586941", "createdAt": "2020-05-28T05:19:22Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2NetworkBuilder.java", "diffHunk": "@@ -151,6 +154,13 @@ public Eth2NetworkBuilder recentChainData(final RecentChainData recentChainData)\n     return this;\n   }\n \n+  public Eth2NetworkBuilder upstreamAttestationPipe(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwNTQxNQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r432005415", "createdAt": "2020-05-28T17:30:27Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2NetworkBuilder.java", "diffHunk": "@@ -151,6 +154,13 @@ public Eth2NetworkBuilder recentChainData(final RecentChainData recentChainData)\n     return this;\n   }\n \n+  public Eth2NetworkBuilder upstreamAttestationPipe(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Njk0MQ=="}, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODE3NTQ5OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/testFixtures/java/tech/pegasys/teku/networking/eth2/Eth2NetworkFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNToyODo0MlrOGbmIeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzozMDoyNFrOGb_hDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4OTQ5OA==", "bodyText": "nit: Probably rename this method too.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431589498", "createdAt": "2020-05-28T05:28:42Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/testFixtures/java/tech/pegasys/teku/networking/eth2/Eth2NetworkFactory.java", "diffHunk": "@@ -246,6 +249,13 @@ public Eth2P2PNetworkBuilder recentChainData(final RecentChainData recentChainDa\n       return this;\n     }\n \n+    public Eth2P2PNetworkBuilder upstreamAttestationPipe(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwNTM4OA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r432005388", "createdAt": "2020-05-28T17:30:24Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/testFixtures/java/tech/pegasys/teku/networking/eth2/Eth2NetworkFactory.java", "diffHunk": "@@ -246,6 +249,13 @@ public Eth2P2PNetworkBuilder recentChainData(final RecentChainData recentChainDa\n       return this;\n     }\n \n+    public Eth2P2PNetworkBuilder upstreamAttestationPipe(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4OTQ5OA=="}, "originalCommit": {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTYzNTY4OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationGossipManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoxNzo0MFrOGcIqHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzowMzo1MlrOGcJnNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1NTE2NQ==", "bodyText": "Given you cleverly made markGossiped return a boolean, I'd do\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (validateableAttestation.isGossiped() || validateableAttestation.isAggregate()) {\n          \n          \n            \n                if (validateableAttestation.isAggregate() || !validateableAttestation.markedGossiped()) {\n          \n      \n    \n    \n  \n\nThen you have no risk of two thread gossiping it at the same time.  In any case you need to markGossiped here to be sure we don't gossip it again later (we shouldn't with the current flow of things but that may change).", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r432155165", "createdAt": "2020-05-28T22:17:40Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationGossipManager.java", "diffHunk": "@@ -28,22 +27,21 @@\n \n   private final GossipEncoding gossipEncoding;\n   private final AttestationSubnetSubscriptions subnetSubscriptions;\n-  private final EventBus eventBus;\n \n   private final AtomicBoolean shutdown = new AtomicBoolean(false);\n \n   public AttestationGossipManager(\n       final GossipEncoding gossipEncoding,\n-      final AttestationSubnetSubscriptions attestationSubnetSubscriptions,\n-      final EventBus eventBus) {\n+      final AttestationSubnetSubscriptions attestationSubnetSubscriptions) {\n     this.gossipEncoding = gossipEncoding;\n     subnetSubscriptions = attestationSubnetSubscriptions;\n-    this.eventBus = eventBus;\n-    eventBus.register(this);\n   }\n \n-  @Subscribe\n-  public void onNewAttestation(final Attestation attestation) {\n+  public void onNewAttestation(final ValidateableAttestation validateableAttestation) {\n+    if (validateableAttestation.isGossiped() || validateableAttestation.isAggregate()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f0b3b20c489fe075cf600aaff917a1f04f8d20"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MDgwNQ==", "bodyText": "Oh good catch! Done.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r432170805", "createdAt": "2020-05-28T23:03:52Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationGossipManager.java", "diffHunk": "@@ -28,22 +27,21 @@\n \n   private final GossipEncoding gossipEncoding;\n   private final AttestationSubnetSubscriptions subnetSubscriptions;\n-  private final EventBus eventBus;\n \n   private final AtomicBoolean shutdown = new AtomicBoolean(false);\n \n   public AttestationGossipManager(\n       final GossipEncoding gossipEncoding,\n-      final AttestationSubnetSubscriptions attestationSubnetSubscriptions,\n-      final EventBus eventBus) {\n+      final AttestationSubnetSubscriptions attestationSubnetSubscriptions) {\n     this.gossipEncoding = gossipEncoding;\n     subnetSubscriptions = attestationSubnetSubscriptions;\n-    this.eventBus = eventBus;\n-    eventBus.register(this);\n   }\n \n-  @Subscribe\n-  public void onNewAttestation(final Attestation attestation) {\n+  public void onNewAttestation(final ValidateableAttestation validateableAttestation) {\n+    if (validateableAttestation.isGossiped() || validateableAttestation.isAggregate()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1NTE2NQ=="}, "originalCommit": {"oid": "57f0b3b20c489fe075cf600aaff917a1f04f8d20"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTYzOTk4OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AggregateGossipManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjoxOTo0MFrOGcIs5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzowODoxNlrOGcJseQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1NTg3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (validateableAttestation.isGossiped() || !validateableAttestation.isAggregate()) {\n          \n          \n            \n                if (!validateableAttestation.isAggregate() || !validateableAttestation.markGossiped()) {\n          \n      \n    \n    \n  \n\nas per comments below.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r432155879", "createdAt": "2020-05-28T22:19:40Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AggregateGossipManager.java", "diffHunk": "@@ -37,26 +35,26 @@ public AggregateGossipManager(\n       final GossipEncoding gossipEncoding,\n       final ForkInfo forkInfo,\n       final SignedAggregateAndProofValidator validator,\n-      final EventBus eventBus) {\n+      final GossipedAttestationConsumer gossipedAttestationConsumer) {\n     this.gossipEncoding = gossipEncoding;\n-\n-    final AggregateTopicHandler aggregateTopicHandler =\n-        new AggregateTopicHandler(gossipEncoding, forkInfo, validator, eventBus);\n-    this.channel = gossipNetwork.subscribe(aggregateTopicHandler.getTopic(), aggregateTopicHandler);\n-\n-    this.eventBus = eventBus;\n-    eventBus.register(this);\n+    final AggregateAttestationTopicHandler aggregateAttestationTopicHandler =\n+        new AggregateAttestationTopicHandler(\n+            gossipEncoding, forkInfo, validator, gossipedAttestationConsumer);\n+    this.channel =\n+        gossipNetwork.subscribe(\n+            aggregateAttestationTopicHandler.getTopic(), aggregateAttestationTopicHandler);\n   }\n \n-  @Subscribe\n-  public void onNewAggregate(final SignedAggregateAndProof aggregateAndProof) {\n-    final Bytes data = gossipEncoding.encode(aggregateAndProof);\n+  public void onNewAggregate(final ValidateableAttestation validateableAttestation) {\n+    if (validateableAttestation.isGossiped() || !validateableAttestation.isAggregate()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f0b3b20c489fe075cf600aaff917a1f04f8d20"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MjE1Mw==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r432172153", "createdAt": "2020-05-28T23:08:16Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AggregateGossipManager.java", "diffHunk": "@@ -37,26 +35,26 @@ public AggregateGossipManager(\n       final GossipEncoding gossipEncoding,\n       final ForkInfo forkInfo,\n       final SignedAggregateAndProofValidator validator,\n-      final EventBus eventBus) {\n+      final GossipedAttestationConsumer gossipedAttestationConsumer) {\n     this.gossipEncoding = gossipEncoding;\n-\n-    final AggregateTopicHandler aggregateTopicHandler =\n-        new AggregateTopicHandler(gossipEncoding, forkInfo, validator, eventBus);\n-    this.channel = gossipNetwork.subscribe(aggregateTopicHandler.getTopic(), aggregateTopicHandler);\n-\n-    this.eventBus = eventBus;\n-    eventBus.register(this);\n+    final AggregateAttestationTopicHandler aggregateAttestationTopicHandler =\n+        new AggregateAttestationTopicHandler(\n+            gossipEncoding, forkInfo, validator, gossipedAttestationConsumer);\n+    this.channel =\n+        gossipNetwork.subscribe(\n+            aggregateAttestationTopicHandler.getTopic(), aggregateAttestationTopicHandler);\n   }\n \n-  @Subscribe\n-  public void onNewAggregate(final SignedAggregateAndProof aggregateAndProof) {\n-    final Bytes data = gossipEncoding.encode(aggregateAndProof);\n+  public void onNewAggregate(final ValidateableAttestation validateableAttestation) {\n+    if (validateableAttestation.isGossiped() || !validateableAttestation.isAggregate()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1NTg3OQ=="}, "originalCommit": {"oid": "57f0b3b20c489fe075cf600aaff917a1f04f8d20"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3665, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}