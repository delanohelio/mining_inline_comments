{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5Mjg4NTEx", "number": 2358, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOToxOTozMVrOEOmbhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTo0MTo0MlrOEOm75Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzQ1MTU2OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/util/LengthBoundCalculator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOToxOTozMVrOGx1p5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMTowNDoyNlrOGyP9ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkxMjQ4Nw==", "bodyText": "May be change exception wording?", "url": "https://github.com/ConsenSys/teku/pull/2358#discussion_r454912487", "createdAt": "2020-07-15T09:19:31Z", "author": {"login": "Nashatyrev"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/util/LengthBoundCalculator.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.util;\n+\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.BOOLEAN_SIZE;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.UNSIGNED_LONG_SIZE;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.getOptionalReflectionInfo;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.getRequiredReflectionInfo;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isBitvector;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isPrimitive;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isVariable;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isVector;\n+import static tech.pegasys.teku.util.config.Constants.BYTES_PER_LENGTH_OFFSET;\n+\n+import java.lang.reflect.Field;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.bls.BLSPublicKey;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.ssz.SSZTypes.Bitlist;\n+import tech.pegasys.teku.ssz.SSZTypes.Bitvector;\n+import tech.pegasys.teku.ssz.SSZTypes.Bytes4;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.sos.ReflectionInformation;\n+\n+public class LengthBoundCalculator {\n+\n+  static <T> LengthBounds calculateLengthBounds(final Class<T> type) {\n+    final ReflectionInformation reflectionInfo = getRequiredReflectionInfo(type);\n+    LengthBounds lengthBounds = LengthBounds.ZERO;\n+    int variableFieldCount = 0;\n+    int vectorCount = 0;\n+    int bitvectorCount = 0;\n+    for (Field field : reflectionInfo.getFields()) {\n+      final Class<?> fieldType = field.getType();\n+      final LengthBounds fieldLengthBounds;\n+      if (getOptionalReflectionInfo(fieldType).isPresent()) {\n+        fieldLengthBounds = calculateLengthBounds(fieldType);\n+\n+      } else if (fieldType == Bitlist.class) {\n+        fieldLengthBounds = calculateBitlistLength(reflectionInfo, variableFieldCount);\n+\n+      } else if (fieldType == SSZList.class) {\n+        fieldLengthBounds = calculateSszListLength(reflectionInfo, variableFieldCount);\n+\n+      } else if (isVector(fieldType)) {\n+        fieldLengthBounds = calculateSszVectorLength(reflectionInfo, vectorCount);\n+        vectorCount++;\n+\n+      } else if (isBitvector(fieldType)) {\n+        fieldLengthBounds = calculateBitvectorLength(reflectionInfo, bitvectorCount);\n+        bitvectorCount++;\n+\n+      } else if (isPrimitive(fieldType)) {\n+        fieldLengthBounds = new LengthBounds(getPrimitiveLength(fieldType));\n+\n+      } else {\n+        throw new IllegalArgumentException(\n+            \"Don't know how to calculate length for \" + fieldType.getSimpleName());\n+      }\n+\n+      if (isVariable(fieldType)) {\n+        variableFieldCount++;\n+        // The fixed parts includes an offset in place of the variable length value\n+        lengthBounds = lengthBounds.add(new LengthBounds(BYTES_PER_LENGTH_OFFSET.longValue()));\n+      }\n+      lengthBounds = lengthBounds.add(fieldLengthBounds);\n+    }\n+    return lengthBounds;\n+  }\n+\n+  private static LengthBounds calculateBitvectorLength(\n+      final ReflectionInformation reflectionInfo, final int bitvectorCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final Integer size = reflectionInfo.getBitvectorSizes().get(bitvectorCount);\n+    final int serializationLength = Bitvector.sszSerializationLength(size);\n+    fieldLengthBounds = new LengthBounds(serializationLength, serializationLength);\n+    return fieldLengthBounds;\n+  }\n+\n+  private static LengthBounds calculateSszVectorLength(\n+      final ReflectionInformation reflectionInfo, final int vectorCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final Class<?> elementType = reflectionInfo.getVectorElementTypes().get(vectorCount);\n+    final int vectorLength = reflectionInfo.getVectorLengths().get(vectorCount);\n+    final LengthBounds elementLengthBounds = getElementLengthBounds(elementType);\n+    fieldLengthBounds =\n+        new LengthBounds(\n+            vectorLength * elementLengthBounds.getMin(),\n+            vectorLength * elementLengthBounds.getMax());\n+    return fieldLengthBounds;\n+  }\n+\n+  private static LengthBounds calculateSszListLength(\n+      final ReflectionInformation reflectionInfo, final int variableFieldCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final Class<?> listElementType = reflectionInfo.getListElementTypes().get(variableFieldCount);\n+    final long listElementMaxSize = reflectionInfo.getListElementMaxSizes().get(variableFieldCount);\n+    final LengthBounds elementLengthBounds = getElementLengthBounds(listElementType);\n+    final long variableFieldOffsetsLength =\n+        isVariable(listElementType) ? BYTES_PER_LENGTH_OFFSET.intValue() * listElementMaxSize : 0;\n+    fieldLengthBounds =\n+        new LengthBounds(\n+            0, elementLengthBounds.getMax() * listElementMaxSize + variableFieldOffsetsLength);\n+    return fieldLengthBounds;\n+  }\n+\n+  private static LengthBounds calculateBitlistLength(\n+      final ReflectionInformation reflectionInfo, final int variableFieldCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final long maxSize = reflectionInfo.getBitlistElementMaxSizes().get(variableFieldCount);\n+    fieldLengthBounds =\n+        new LengthBounds(\n+            Bitlist.sszSerializationLength(Math.toIntExact(0)),\n+            Bitlist.sszSerializationLength(Math.toIntExact(maxSize)));\n+    return fieldLengthBounds;\n+  }\n+\n+  private static LengthBounds getElementLengthBounds(final Class<?> listElementType) {\n+    if (isPrimitive(listElementType)) {\n+      final int primitiveLength = getPrimitiveLength(listElementType);\n+      return new LengthBounds(primitiveLength, primitiveLength);\n+    }\n+    return calculateLengthBounds(listElementType);\n+  }\n+\n+  private static int getPrimitiveLength(final Class<?> classInfo) {\n+    switch (classInfo.getSimpleName()) {\n+      case \"UnsignedLong\":\n+        return UNSIGNED_LONG_SIZE;\n+      case \"ArrayWrappingBytes32\":\n+      case \"Bytes32\":\n+        return Bytes32.SIZE;\n+      case \"Bytes4\":\n+        return Bytes4.SIZE;\n+      case \"BLSSignature\":\n+        return BLSSignature.BLS_SIGNATURE_SIZE;\n+      case \"BLSPublicKey\":\n+        return BLSPublicKey.BLS_PUBKEY_SIZE;\n+      case \"Boolean\":\n+      case \"boolean\":\n+        return BOOLEAN_SIZE;\n+      default:\n+        throw new IllegalArgumentException(\"Unable to deserialize \" + classInfo.getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "594899ff515d30ae3f6e1b8d0dc6085d2632a583"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM0MzUyMw==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2358#discussion_r455343523", "createdAt": "2020-07-15T21:04:26Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/util/LengthBoundCalculator.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.util;\n+\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.BOOLEAN_SIZE;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.UNSIGNED_LONG_SIZE;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.getOptionalReflectionInfo;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.getRequiredReflectionInfo;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isBitvector;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isPrimitive;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isVariable;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isVector;\n+import static tech.pegasys.teku.util.config.Constants.BYTES_PER_LENGTH_OFFSET;\n+\n+import java.lang.reflect.Field;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.bls.BLSPublicKey;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.ssz.SSZTypes.Bitlist;\n+import tech.pegasys.teku.ssz.SSZTypes.Bitvector;\n+import tech.pegasys.teku.ssz.SSZTypes.Bytes4;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.sos.ReflectionInformation;\n+\n+public class LengthBoundCalculator {\n+\n+  static <T> LengthBounds calculateLengthBounds(final Class<T> type) {\n+    final ReflectionInformation reflectionInfo = getRequiredReflectionInfo(type);\n+    LengthBounds lengthBounds = LengthBounds.ZERO;\n+    int variableFieldCount = 0;\n+    int vectorCount = 0;\n+    int bitvectorCount = 0;\n+    for (Field field : reflectionInfo.getFields()) {\n+      final Class<?> fieldType = field.getType();\n+      final LengthBounds fieldLengthBounds;\n+      if (getOptionalReflectionInfo(fieldType).isPresent()) {\n+        fieldLengthBounds = calculateLengthBounds(fieldType);\n+\n+      } else if (fieldType == Bitlist.class) {\n+        fieldLengthBounds = calculateBitlistLength(reflectionInfo, variableFieldCount);\n+\n+      } else if (fieldType == SSZList.class) {\n+        fieldLengthBounds = calculateSszListLength(reflectionInfo, variableFieldCount);\n+\n+      } else if (isVector(fieldType)) {\n+        fieldLengthBounds = calculateSszVectorLength(reflectionInfo, vectorCount);\n+        vectorCount++;\n+\n+      } else if (isBitvector(fieldType)) {\n+        fieldLengthBounds = calculateBitvectorLength(reflectionInfo, bitvectorCount);\n+        bitvectorCount++;\n+\n+      } else if (isPrimitive(fieldType)) {\n+        fieldLengthBounds = new LengthBounds(getPrimitiveLength(fieldType));\n+\n+      } else {\n+        throw new IllegalArgumentException(\n+            \"Don't know how to calculate length for \" + fieldType.getSimpleName());\n+      }\n+\n+      if (isVariable(fieldType)) {\n+        variableFieldCount++;\n+        // The fixed parts includes an offset in place of the variable length value\n+        lengthBounds = lengthBounds.add(new LengthBounds(BYTES_PER_LENGTH_OFFSET.longValue()));\n+      }\n+      lengthBounds = lengthBounds.add(fieldLengthBounds);\n+    }\n+    return lengthBounds;\n+  }\n+\n+  private static LengthBounds calculateBitvectorLength(\n+      final ReflectionInformation reflectionInfo, final int bitvectorCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final Integer size = reflectionInfo.getBitvectorSizes().get(bitvectorCount);\n+    final int serializationLength = Bitvector.sszSerializationLength(size);\n+    fieldLengthBounds = new LengthBounds(serializationLength, serializationLength);\n+    return fieldLengthBounds;\n+  }\n+\n+  private static LengthBounds calculateSszVectorLength(\n+      final ReflectionInformation reflectionInfo, final int vectorCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final Class<?> elementType = reflectionInfo.getVectorElementTypes().get(vectorCount);\n+    final int vectorLength = reflectionInfo.getVectorLengths().get(vectorCount);\n+    final LengthBounds elementLengthBounds = getElementLengthBounds(elementType);\n+    fieldLengthBounds =\n+        new LengthBounds(\n+            vectorLength * elementLengthBounds.getMin(),\n+            vectorLength * elementLengthBounds.getMax());\n+    return fieldLengthBounds;\n+  }\n+\n+  private static LengthBounds calculateSszListLength(\n+      final ReflectionInformation reflectionInfo, final int variableFieldCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final Class<?> listElementType = reflectionInfo.getListElementTypes().get(variableFieldCount);\n+    final long listElementMaxSize = reflectionInfo.getListElementMaxSizes().get(variableFieldCount);\n+    final LengthBounds elementLengthBounds = getElementLengthBounds(listElementType);\n+    final long variableFieldOffsetsLength =\n+        isVariable(listElementType) ? BYTES_PER_LENGTH_OFFSET.intValue() * listElementMaxSize : 0;\n+    fieldLengthBounds =\n+        new LengthBounds(\n+            0, elementLengthBounds.getMax() * listElementMaxSize + variableFieldOffsetsLength);\n+    return fieldLengthBounds;\n+  }\n+\n+  private static LengthBounds calculateBitlistLength(\n+      final ReflectionInformation reflectionInfo, final int variableFieldCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final long maxSize = reflectionInfo.getBitlistElementMaxSizes().get(variableFieldCount);\n+    fieldLengthBounds =\n+        new LengthBounds(\n+            Bitlist.sszSerializationLength(Math.toIntExact(0)),\n+            Bitlist.sszSerializationLength(Math.toIntExact(maxSize)));\n+    return fieldLengthBounds;\n+  }\n+\n+  private static LengthBounds getElementLengthBounds(final Class<?> listElementType) {\n+    if (isPrimitive(listElementType)) {\n+      final int primitiveLength = getPrimitiveLength(listElementType);\n+      return new LengthBounds(primitiveLength, primitiveLength);\n+    }\n+    return calculateLengthBounds(listElementType);\n+  }\n+\n+  private static int getPrimitiveLength(final Class<?> classInfo) {\n+    switch (classInfo.getSimpleName()) {\n+      case \"UnsignedLong\":\n+        return UNSIGNED_LONG_SIZE;\n+      case \"ArrayWrappingBytes32\":\n+      case \"Bytes32\":\n+        return Bytes32.SIZE;\n+      case \"Bytes4\":\n+        return Bytes4.SIZE;\n+      case \"BLSSignature\":\n+        return BLSSignature.BLS_SIGNATURE_SIZE;\n+      case \"BLSPublicKey\":\n+        return BLSPublicKey.BLS_PUBKEY_SIZE;\n+      case \"Boolean\":\n+      case \"boolean\":\n+        return BOOLEAN_SIZE;\n+      default:\n+        throw new IllegalArgumentException(\"Unable to deserialize \" + classInfo.getSimpleName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkxMjQ4Nw=="}, "originalCommit": {"oid": "594899ff515d30ae3f6e1b8d0dc6085d2632a583"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzUyNzY1OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/util/LengthBoundCalculator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTozOTo1OVrOGx2YzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMToyMjoyOFrOGyQ86g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkyNDQ5Mg==", "bodyText": "Not sure here: getBitlistElementMaxSizes() seems to return only Bitlist instance sizes in the referred class. Why is it indexed by variableFieldCount which is a total counter of lists and bitfields?", "url": "https://github.com/ConsenSys/teku/pull/2358#discussion_r454924492", "createdAt": "2020-07-15T09:39:59Z", "author": {"login": "Nashatyrev"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/util/LengthBoundCalculator.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.util;\n+\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.BOOLEAN_SIZE;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.UNSIGNED_LONG_SIZE;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.getOptionalReflectionInfo;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.getRequiredReflectionInfo;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isBitvector;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isPrimitive;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isVariable;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isVector;\n+import static tech.pegasys.teku.util.config.Constants.BYTES_PER_LENGTH_OFFSET;\n+\n+import java.lang.reflect.Field;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.bls.BLSPublicKey;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.ssz.SSZTypes.Bitlist;\n+import tech.pegasys.teku.ssz.SSZTypes.Bitvector;\n+import tech.pegasys.teku.ssz.SSZTypes.Bytes4;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.sos.ReflectionInformation;\n+\n+public class LengthBoundCalculator {\n+\n+  static <T> LengthBounds calculateLengthBounds(final Class<T> type) {\n+    final ReflectionInformation reflectionInfo = getRequiredReflectionInfo(type);\n+    LengthBounds lengthBounds = LengthBounds.ZERO;\n+    int variableFieldCount = 0;\n+    int vectorCount = 0;\n+    int bitvectorCount = 0;\n+    for (Field field : reflectionInfo.getFields()) {\n+      final Class<?> fieldType = field.getType();\n+      final LengthBounds fieldLengthBounds;\n+      if (getOptionalReflectionInfo(fieldType).isPresent()) {\n+        fieldLengthBounds = calculateLengthBounds(fieldType);\n+\n+      } else if (fieldType == Bitlist.class) {\n+        fieldLengthBounds = calculateBitlistLength(reflectionInfo, variableFieldCount);\n+\n+      } else if (fieldType == SSZList.class) {\n+        fieldLengthBounds = calculateSszListLength(reflectionInfo, variableFieldCount);\n+\n+      } else if (isVector(fieldType)) {\n+        fieldLengthBounds = calculateSszVectorLength(reflectionInfo, vectorCount);\n+        vectorCount++;\n+\n+      } else if (isBitvector(fieldType)) {\n+        fieldLengthBounds = calculateBitvectorLength(reflectionInfo, bitvectorCount);\n+        bitvectorCount++;\n+\n+      } else if (isPrimitive(fieldType)) {\n+        fieldLengthBounds = new LengthBounds(getPrimitiveLength(fieldType));\n+\n+      } else {\n+        throw new IllegalArgumentException(\n+            \"Don't know how to calculate length for \" + fieldType.getSimpleName());\n+      }\n+\n+      if (isVariable(fieldType)) {\n+        variableFieldCount++;\n+        // The fixed parts includes an offset in place of the variable length value\n+        lengthBounds = lengthBounds.add(new LengthBounds(BYTES_PER_LENGTH_OFFSET.longValue()));\n+      }\n+      lengthBounds = lengthBounds.add(fieldLengthBounds);\n+    }\n+    return lengthBounds;\n+  }\n+\n+  private static LengthBounds calculateBitvectorLength(\n+      final ReflectionInformation reflectionInfo, final int bitvectorCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final Integer size = reflectionInfo.getBitvectorSizes().get(bitvectorCount);\n+    final int serializationLength = Bitvector.sszSerializationLength(size);\n+    fieldLengthBounds = new LengthBounds(serializationLength, serializationLength);\n+    return fieldLengthBounds;\n+  }\n+\n+  private static LengthBounds calculateSszVectorLength(\n+      final ReflectionInformation reflectionInfo, final int vectorCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final Class<?> elementType = reflectionInfo.getVectorElementTypes().get(vectorCount);\n+    final int vectorLength = reflectionInfo.getVectorLengths().get(vectorCount);\n+    final LengthBounds elementLengthBounds = getElementLengthBounds(elementType);\n+    fieldLengthBounds =\n+        new LengthBounds(\n+            vectorLength * elementLengthBounds.getMin(),\n+            vectorLength * elementLengthBounds.getMax());\n+    return fieldLengthBounds;\n+  }\n+\n+  private static LengthBounds calculateSszListLength(\n+      final ReflectionInformation reflectionInfo, final int variableFieldCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final Class<?> listElementType = reflectionInfo.getListElementTypes().get(variableFieldCount);\n+    final long listElementMaxSize = reflectionInfo.getListElementMaxSizes().get(variableFieldCount);\n+    final LengthBounds elementLengthBounds = getElementLengthBounds(listElementType);\n+    final long variableFieldOffsetsLength =\n+        isVariable(listElementType) ? BYTES_PER_LENGTH_OFFSET.intValue() * listElementMaxSize : 0;\n+    fieldLengthBounds =\n+        new LengthBounds(\n+            0, elementLengthBounds.getMax() * listElementMaxSize + variableFieldOffsetsLength);\n+    return fieldLengthBounds;\n+  }\n+\n+  private static LengthBounds calculateBitlistLength(\n+      final ReflectionInformation reflectionInfo, final int variableFieldCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final long maxSize = reflectionInfo.getBitlistElementMaxSizes().get(variableFieldCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "594899ff515d30ae3f6e1b8d0dc6085d2632a583"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM1OTcyMg==", "bodyText": "That is highly suspicious but exactly matches what SimpleOffsetSerializer does. It also works for every type we know how to SSZ serialise, but I strongly suspect that's a coincidence and there just aren't any objects that have both SSZList and Bitlist.\nCreated a test class with both and sure enough it fails with IndexOutOfBoundsException.  So have fixed both LengthBoundsCalculator and SimpleOffsetSerializer.", "url": "https://github.com/ConsenSys/teku/pull/2358#discussion_r455359722", "createdAt": "2020-07-15T21:22:28Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/util/LengthBoundCalculator.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.util;\n+\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.BOOLEAN_SIZE;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.UNSIGNED_LONG_SIZE;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.getOptionalReflectionInfo;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.getRequiredReflectionInfo;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isBitvector;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isPrimitive;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isVariable;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isVector;\n+import static tech.pegasys.teku.util.config.Constants.BYTES_PER_LENGTH_OFFSET;\n+\n+import java.lang.reflect.Field;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.bls.BLSPublicKey;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.ssz.SSZTypes.Bitlist;\n+import tech.pegasys.teku.ssz.SSZTypes.Bitvector;\n+import tech.pegasys.teku.ssz.SSZTypes.Bytes4;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.sos.ReflectionInformation;\n+\n+public class LengthBoundCalculator {\n+\n+  static <T> LengthBounds calculateLengthBounds(final Class<T> type) {\n+    final ReflectionInformation reflectionInfo = getRequiredReflectionInfo(type);\n+    LengthBounds lengthBounds = LengthBounds.ZERO;\n+    int variableFieldCount = 0;\n+    int vectorCount = 0;\n+    int bitvectorCount = 0;\n+    for (Field field : reflectionInfo.getFields()) {\n+      final Class<?> fieldType = field.getType();\n+      final LengthBounds fieldLengthBounds;\n+      if (getOptionalReflectionInfo(fieldType).isPresent()) {\n+        fieldLengthBounds = calculateLengthBounds(fieldType);\n+\n+      } else if (fieldType == Bitlist.class) {\n+        fieldLengthBounds = calculateBitlistLength(reflectionInfo, variableFieldCount);\n+\n+      } else if (fieldType == SSZList.class) {\n+        fieldLengthBounds = calculateSszListLength(reflectionInfo, variableFieldCount);\n+\n+      } else if (isVector(fieldType)) {\n+        fieldLengthBounds = calculateSszVectorLength(reflectionInfo, vectorCount);\n+        vectorCount++;\n+\n+      } else if (isBitvector(fieldType)) {\n+        fieldLengthBounds = calculateBitvectorLength(reflectionInfo, bitvectorCount);\n+        bitvectorCount++;\n+\n+      } else if (isPrimitive(fieldType)) {\n+        fieldLengthBounds = new LengthBounds(getPrimitiveLength(fieldType));\n+\n+      } else {\n+        throw new IllegalArgumentException(\n+            \"Don't know how to calculate length for \" + fieldType.getSimpleName());\n+      }\n+\n+      if (isVariable(fieldType)) {\n+        variableFieldCount++;\n+        // The fixed parts includes an offset in place of the variable length value\n+        lengthBounds = lengthBounds.add(new LengthBounds(BYTES_PER_LENGTH_OFFSET.longValue()));\n+      }\n+      lengthBounds = lengthBounds.add(fieldLengthBounds);\n+    }\n+    return lengthBounds;\n+  }\n+\n+  private static LengthBounds calculateBitvectorLength(\n+      final ReflectionInformation reflectionInfo, final int bitvectorCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final Integer size = reflectionInfo.getBitvectorSizes().get(bitvectorCount);\n+    final int serializationLength = Bitvector.sszSerializationLength(size);\n+    fieldLengthBounds = new LengthBounds(serializationLength, serializationLength);\n+    return fieldLengthBounds;\n+  }\n+\n+  private static LengthBounds calculateSszVectorLength(\n+      final ReflectionInformation reflectionInfo, final int vectorCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final Class<?> elementType = reflectionInfo.getVectorElementTypes().get(vectorCount);\n+    final int vectorLength = reflectionInfo.getVectorLengths().get(vectorCount);\n+    final LengthBounds elementLengthBounds = getElementLengthBounds(elementType);\n+    fieldLengthBounds =\n+        new LengthBounds(\n+            vectorLength * elementLengthBounds.getMin(),\n+            vectorLength * elementLengthBounds.getMax());\n+    return fieldLengthBounds;\n+  }\n+\n+  private static LengthBounds calculateSszListLength(\n+      final ReflectionInformation reflectionInfo, final int variableFieldCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final Class<?> listElementType = reflectionInfo.getListElementTypes().get(variableFieldCount);\n+    final long listElementMaxSize = reflectionInfo.getListElementMaxSizes().get(variableFieldCount);\n+    final LengthBounds elementLengthBounds = getElementLengthBounds(listElementType);\n+    final long variableFieldOffsetsLength =\n+        isVariable(listElementType) ? BYTES_PER_LENGTH_OFFSET.intValue() * listElementMaxSize : 0;\n+    fieldLengthBounds =\n+        new LengthBounds(\n+            0, elementLengthBounds.getMax() * listElementMaxSize + variableFieldOffsetsLength);\n+    return fieldLengthBounds;\n+  }\n+\n+  private static LengthBounds calculateBitlistLength(\n+      final ReflectionInformation reflectionInfo, final int variableFieldCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final long maxSize = reflectionInfo.getBitlistElementMaxSizes().get(variableFieldCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkyNDQ5Mg=="}, "originalCommit": {"oid": "594899ff515d30ae3f6e1b8d0dc6085d2632a583"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzUzNDQ1OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/util/LengthBoundCalculator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTo0MTo0MlrOGx2c2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwOTo0MTo0MlrOGx2c2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkyNTUzMQ==", "bodyText": "The same question as for calculateBitlistLength", "url": "https://github.com/ConsenSys/teku/pull/2358#discussion_r454925531", "createdAt": "2020-07-15T09:41:42Z", "author": {"login": "Nashatyrev"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/util/LengthBoundCalculator.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.util;\n+\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.BOOLEAN_SIZE;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.UNSIGNED_LONG_SIZE;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.getOptionalReflectionInfo;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.getRequiredReflectionInfo;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isBitvector;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isPrimitive;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isVariable;\n+import static tech.pegasys.teku.datastructures.util.SimpleOffsetSerializer.isVector;\n+import static tech.pegasys.teku.util.config.Constants.BYTES_PER_LENGTH_OFFSET;\n+\n+import java.lang.reflect.Field;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.bls.BLSPublicKey;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.ssz.SSZTypes.Bitlist;\n+import tech.pegasys.teku.ssz.SSZTypes.Bitvector;\n+import tech.pegasys.teku.ssz.SSZTypes.Bytes4;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.sos.ReflectionInformation;\n+\n+public class LengthBoundCalculator {\n+\n+  static <T> LengthBounds calculateLengthBounds(final Class<T> type) {\n+    final ReflectionInformation reflectionInfo = getRequiredReflectionInfo(type);\n+    LengthBounds lengthBounds = LengthBounds.ZERO;\n+    int variableFieldCount = 0;\n+    int vectorCount = 0;\n+    int bitvectorCount = 0;\n+    for (Field field : reflectionInfo.getFields()) {\n+      final Class<?> fieldType = field.getType();\n+      final LengthBounds fieldLengthBounds;\n+      if (getOptionalReflectionInfo(fieldType).isPresent()) {\n+        fieldLengthBounds = calculateLengthBounds(fieldType);\n+\n+      } else if (fieldType == Bitlist.class) {\n+        fieldLengthBounds = calculateBitlistLength(reflectionInfo, variableFieldCount);\n+\n+      } else if (fieldType == SSZList.class) {\n+        fieldLengthBounds = calculateSszListLength(reflectionInfo, variableFieldCount);\n+\n+      } else if (isVector(fieldType)) {\n+        fieldLengthBounds = calculateSszVectorLength(reflectionInfo, vectorCount);\n+        vectorCount++;\n+\n+      } else if (isBitvector(fieldType)) {\n+        fieldLengthBounds = calculateBitvectorLength(reflectionInfo, bitvectorCount);\n+        bitvectorCount++;\n+\n+      } else if (isPrimitive(fieldType)) {\n+        fieldLengthBounds = new LengthBounds(getPrimitiveLength(fieldType));\n+\n+      } else {\n+        throw new IllegalArgumentException(\n+            \"Don't know how to calculate length for \" + fieldType.getSimpleName());\n+      }\n+\n+      if (isVariable(fieldType)) {\n+        variableFieldCount++;\n+        // The fixed parts includes an offset in place of the variable length value\n+        lengthBounds = lengthBounds.add(new LengthBounds(BYTES_PER_LENGTH_OFFSET.longValue()));\n+      }\n+      lengthBounds = lengthBounds.add(fieldLengthBounds);\n+    }\n+    return lengthBounds;\n+  }\n+\n+  private static LengthBounds calculateBitvectorLength(\n+      final ReflectionInformation reflectionInfo, final int bitvectorCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final Integer size = reflectionInfo.getBitvectorSizes().get(bitvectorCount);\n+    final int serializationLength = Bitvector.sszSerializationLength(size);\n+    fieldLengthBounds = new LengthBounds(serializationLength, serializationLength);\n+    return fieldLengthBounds;\n+  }\n+\n+  private static LengthBounds calculateSszVectorLength(\n+      final ReflectionInformation reflectionInfo, final int vectorCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final Class<?> elementType = reflectionInfo.getVectorElementTypes().get(vectorCount);\n+    final int vectorLength = reflectionInfo.getVectorLengths().get(vectorCount);\n+    final LengthBounds elementLengthBounds = getElementLengthBounds(elementType);\n+    fieldLengthBounds =\n+        new LengthBounds(\n+            vectorLength * elementLengthBounds.getMin(),\n+            vectorLength * elementLengthBounds.getMax());\n+    return fieldLengthBounds;\n+  }\n+\n+  private static LengthBounds calculateSszListLength(\n+      final ReflectionInformation reflectionInfo, final int variableFieldCount) {\n+    final LengthBounds fieldLengthBounds;\n+    final Class<?> listElementType = reflectionInfo.getListElementTypes().get(variableFieldCount);\n+    final long listElementMaxSize = reflectionInfo.getListElementMaxSizes().get(variableFieldCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "594899ff515d30ae3f6e1b8d0dc6085d2632a583"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3542, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}