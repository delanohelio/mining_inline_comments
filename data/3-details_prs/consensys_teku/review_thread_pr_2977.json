{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNzczMDIz", "number": 2977, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzoyNTozMVrOEtwxMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzozNjowNFrOEtw4Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDIwNDAyOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/validator/GetAttestationData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzoyNTozMVrOHhvbhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzozMjowNFrOHhvhqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MjE0OA==", "bodyText": "should also put TAG_VALIDATOR_REQUIRED here, it appears in multiple groups", "url": "https://github.com/ConsenSys/teku/pull/2977#discussion_r505142148", "createdAt": "2020-10-15T03:25:31Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/validator/GetAttestationData.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsInt;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsUInt64;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.ValidatorDataProvider;\n+import tech.pegasys.teku.api.response.v1.validator.GetAttestationDataResponse;\n+import tech.pegasys.teku.api.schema.Attestation;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestationData extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/validator/attestation_data\";\n+\n+  private final ValidatorDataProvider provider;\n+\n+  public GetAttestationData(final DataProvider provider, final JsonProvider jsonProvider) {\n+    this(provider.getValidatorDataProvider(), jsonProvider);\n+  }\n+\n+  public GetAttestationData(final ValidatorDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Requests that the beacon node produce an AttestationData.\",\n+      tags = {TAG_VALIDATOR},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa7f21c14762d8d1ec4882819571fe78cf0065f0"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MzcyMQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2977#discussion_r505143721", "createdAt": "2020-10-15T03:32:04Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/validator/GetAttestationData.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsInt;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsUInt64;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.ValidatorDataProvider;\n+import tech.pegasys.teku.api.response.v1.validator.GetAttestationDataResponse;\n+import tech.pegasys.teku.api.schema.Attestation;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestationData extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/validator/attestation_data\";\n+\n+  private final ValidatorDataProvider provider;\n+\n+  public GetAttestationData(final DataProvider provider, final JsonProvider jsonProvider) {\n+    this(provider.getValidatorDataProvider(), jsonProvider);\n+  }\n+\n+  public GetAttestationData(final ValidatorDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Requests that the beacon node produce an AttestationData.\",\n+      tags = {TAG_VALIDATOR},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MjE0OA=="}, "originalCommit": {"oid": "fa7f21c14762d8d1ec4882819571fe78cf0065f0"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDIwNjk3OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/validator/GetAttestationData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzoyNzoyNFrOHhvdRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzozMjowMVrOHhvhlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MjU5Ng==", "bodyText": "shorter summary, or it renders poorly. in the eth2 api, its 'Produce an attestation data'.\nhttps://ethereum.github.io/eth2.0-APIs/#/ValidatorRequiredApi/produceAttestationData", "url": "https://github.com/ConsenSys/teku/pull/2977#discussion_r505142596", "createdAt": "2020-10-15T03:27:24Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/validator/GetAttestationData.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsInt;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsUInt64;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.ValidatorDataProvider;\n+import tech.pegasys.teku.api.response.v1.validator.GetAttestationDataResponse;\n+import tech.pegasys.teku.api.schema.Attestation;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestationData extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/validator/attestation_data\";\n+\n+  private final ValidatorDataProvider provider;\n+\n+  public GetAttestationData(final DataProvider provider, final JsonProvider jsonProvider) {\n+    this(provider.getValidatorDataProvider(), jsonProvider);\n+  }\n+\n+  public GetAttestationData(final ValidatorDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Requests that the beacon node produce an AttestationData.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa7f21c14762d8d1ec4882819571fe78cf0065f0"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MzcwMw==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2977#discussion_r505143703", "createdAt": "2020-10-15T03:32:01Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/validator/GetAttestationData.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsInt;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsUInt64;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.ValidatorDataProvider;\n+import tech.pegasys.teku.api.response.v1.validator.GetAttestationDataResponse;\n+import tech.pegasys.teku.api.schema.Attestation;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestationData extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/validator/attestation_data\";\n+\n+  private final ValidatorDataProvider provider;\n+\n+  public GetAttestationData(final DataProvider provider, final JsonProvider jsonProvider) {\n+    this(provider.getValidatorDataProvider(), jsonProvider);\n+  }\n+\n+  public GetAttestationData(final ValidatorDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Requests that the beacon node produce an AttestationData.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MjU5Ng=="}, "originalCommit": {"oid": "fa7f21c14762d8d1ec4882819571fe78cf0065f0"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDIxMjQyOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/validator/GetAttestationData.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzozMDo0MFrOHhvgeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzozNzowMlrOHhvmoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MzQxNw==", "bodyText": "need to check syncing up front and return the 503 if its syncing...\nsomething like in PostBlock:\n      if (syncDataProvider.getSyncStatus().is_syncing) {\n        ctx.status(SC_SERVICE_UNAVAILABLE);\n        ctx.result(BadRequest.serviceUnavailable(jsonProvider));\n        return;\n      }", "url": "https://github.com/ConsenSys/teku/pull/2977#discussion_r505143417", "createdAt": "2020-10-15T03:30:40Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/validator/GetAttestationData.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsInt;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsUInt64;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.ValidatorDataProvider;\n+import tech.pegasys.teku.api.response.v1.validator.GetAttestationDataResponse;\n+import tech.pegasys.teku.api.schema.Attestation;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestationData extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/validator/attestation_data\";\n+\n+  private final ValidatorDataProvider provider;\n+\n+  public GetAttestationData(final DataProvider provider, final JsonProvider jsonProvider) {\n+    this(provider.getValidatorDataProvider(), jsonProvider);\n+  }\n+\n+  public GetAttestationData(final ValidatorDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Requests that the beacon node produce an AttestationData.\",\n+      tags = {TAG_VALIDATOR},\n+      queryParams = {\n+        @OpenApiParam(\n+            name = SLOT,\n+            description = \"`uint64` The slot for which an attestation data should be created.\",\n+            required = true),\n+        @OpenApiParam(\n+            name = COMMITTEE_INDEX,\n+            type = Integer.class,\n+            description =\n+                \"`Integer` The committee index for which an attestation data should be created.\",\n+            required = true)\n+      },\n+      description =\n+          \"Returns attestation data for the block at the specified non-finalized slot.\\n\\n\"\n+              + \"This endpoint is not protected against slashing. Signing the returned attestation data can result in a slashable offence.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetAttestationDataResponse.class)),\n+        @OpenApiResponse(status = RES_BAD_REQUEST, description = \"Invalid parameter supplied\"),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+        @OpenApiResponse(status = RES_SERVICE_UNAVAILABLE, description = SERVICE_UNAVAILABLE)\n+      })\n+  @Override\n+  public void handle(Context ctx) throws Exception {\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa7f21c14762d8d1ec4882819571fe78cf0065f0"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0Mzg2OQ==", "bodyText": "That's done in ValidatorApiHandler which throws a NodeSyncingException which we've got a default exception handler setup for.", "url": "https://github.com/ConsenSys/teku/pull/2977#discussion_r505143869", "createdAt": "2020-10-15T03:32:47Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/validator/GetAttestationData.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsInt;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsUInt64;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.ValidatorDataProvider;\n+import tech.pegasys.teku.api.response.v1.validator.GetAttestationDataResponse;\n+import tech.pegasys.teku.api.schema.Attestation;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestationData extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/validator/attestation_data\";\n+\n+  private final ValidatorDataProvider provider;\n+\n+  public GetAttestationData(final DataProvider provider, final JsonProvider jsonProvider) {\n+    this(provider.getValidatorDataProvider(), jsonProvider);\n+  }\n+\n+  public GetAttestationData(final ValidatorDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Requests that the beacon node produce an AttestationData.\",\n+      tags = {TAG_VALIDATOR},\n+      queryParams = {\n+        @OpenApiParam(\n+            name = SLOT,\n+            description = \"`uint64` The slot for which an attestation data should be created.\",\n+            required = true),\n+        @OpenApiParam(\n+            name = COMMITTEE_INDEX,\n+            type = Integer.class,\n+            description =\n+                \"`Integer` The committee index for which an attestation data should be created.\",\n+            required = true)\n+      },\n+      description =\n+          \"Returns attestation data for the block at the specified non-finalized slot.\\n\\n\"\n+              + \"This endpoint is not protected against slashing. Signing the returned attestation data can result in a slashable offence.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetAttestationDataResponse.class)),\n+        @OpenApiResponse(status = RES_BAD_REQUEST, description = \"Invalid parameter supplied\"),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+        @OpenApiResponse(status = RES_SERVICE_UNAVAILABLE, description = SERVICE_UNAVAILABLE)\n+      })\n+  @Override\n+  public void handle(Context ctx) throws Exception {\n+    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MzQxNw=="}, "originalCommit": {"oid": "fa7f21c14762d8d1ec4882819571fe78cf0065f0"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0NDk5Mw==", "bodyText": "ah ok - cool then \ud83d\udc4d", "url": "https://github.com/ConsenSys/teku/pull/2977#discussion_r505144993", "createdAt": "2020-10-15T03:37:02Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/validator/GetAttestationData.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsInt;\n+import static tech.pegasys.teku.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsUInt64;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.ValidatorDataProvider;\n+import tech.pegasys.teku.api.response.v1.validator.GetAttestationDataResponse;\n+import tech.pegasys.teku.api.schema.Attestation;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetAttestationData extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/validator/attestation_data\";\n+\n+  private final ValidatorDataProvider provider;\n+\n+  public GetAttestationData(final DataProvider provider, final JsonProvider jsonProvider) {\n+    this(provider.getValidatorDataProvider(), jsonProvider);\n+  }\n+\n+  public GetAttestationData(final ValidatorDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Requests that the beacon node produce an AttestationData.\",\n+      tags = {TAG_VALIDATOR},\n+      queryParams = {\n+        @OpenApiParam(\n+            name = SLOT,\n+            description = \"`uint64` The slot for which an attestation data should be created.\",\n+            required = true),\n+        @OpenApiParam(\n+            name = COMMITTEE_INDEX,\n+            type = Integer.class,\n+            description =\n+                \"`Integer` The committee index for which an attestation data should be created.\",\n+            required = true)\n+      },\n+      description =\n+          \"Returns attestation data for the block at the specified non-finalized slot.\\n\\n\"\n+              + \"This endpoint is not protected against slashing. Signing the returned attestation data can result in a slashable offence.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetAttestationDataResponse.class)),\n+        @OpenApiResponse(status = RES_BAD_REQUEST, description = \"Invalid parameter supplied\"),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+        @OpenApiResponse(status = RES_SERVICE_UNAVAILABLE, description = SERVICE_UNAVAILABLE)\n+      })\n+  @Override\n+  public void handle(Context ctx) throws Exception {\n+    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MzQxNw=="}, "originalCommit": {"oid": "fa7f21c14762d8d1ec4882819571fe78cf0065f0"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDIyMTU0OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/BeaconRestApi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzozNjowNFrOHhvlnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMzozNzoxNlrOHhvm0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0NDczNQ==", "bodyText": "There's a BeaconRestApiV1Test that just checks that endpoints are plugged in, might be worth adding to that for the new endpoint.", "url": "https://github.com/ConsenSys/teku/pull/2977#discussion_r505144735", "createdAt": "2020-10-15T03:36:04Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -289,6 +290,7 @@ private void addV1ValidatorHandlers(final DataProvider dataProvider) {\n         tech.pegasys.teku.beaconrestapi.handlers.v1.validator.GetNewBlock.ROUTE,\n         new tech.pegasys.teku.beaconrestapi.handlers.v1.validator.GetNewBlock(\n             dataProvider, jsonProvider));\n+    app.get(GetAttestationData.ROUTE, new GetAttestationData(dataProvider, jsonProvider));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa7f21c14762d8d1ec4882819571fe78cf0065f0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0NTA0MA==", "bodyText": "Ah, I added it to BeaconRestApiTest.  Will move it.", "url": "https://github.com/ConsenSys/teku/pull/2977#discussion_r505145040", "createdAt": "2020-10-15T03:37:16Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -289,6 +290,7 @@ private void addV1ValidatorHandlers(final DataProvider dataProvider) {\n         tech.pegasys.teku.beaconrestapi.handlers.v1.validator.GetNewBlock.ROUTE,\n         new tech.pegasys.teku.beaconrestapi.handlers.v1.validator.GetNewBlock(\n             dataProvider, jsonProvider));\n+    app.get(GetAttestationData.ROUTE, new GetAttestationData(dataProvider, jsonProvider));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0NDczNQ=="}, "originalCommit": {"oid": "fa7f21c14762d8d1ec4882819571fe78cf0065f0"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3201, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}