{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyODgyNzgy", "number": 3250, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0Nzo0MFrOE606fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzozODozOFrOFCGwyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTE5ODA2OnYy", "diffSide": "RIGHT", "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0Nzo0MFrOH2IJ8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0Nzo0MFrOH2IJ8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxODc3MQ==", "bodyText": "to me, this looks to say that they must both be null, or it's invalid configuration?", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r526518771", "createdAt": "2020-11-19T00:47:40Z", "author": {"login": "rolfyone"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorConfig.java", "diffHunk": "@@ -243,5 +300,38 @@ private void validateKeyStoreFilesAndPasswordFilesConfig() {\n         throw new InvalidConfigurationException(errorMessage);\n       }\n     }\n+\n+    private void validateExternalSignerUrlAndPublicKeys() {\n+      if (validatorExternalSignerPublicKeys == null\n+          || validatorExternalSignerPublicKeys.isEmpty()) {\n+        return;\n+      }\n+\n+      if (validatorExternalSignerUrl == null) {\n+        final String errorMessage =\n+            \"Invalid configuration. '--validators-external-signer-url' and '--validators-external-signer-public-keys' must be specified together\";\n+        throw new InvalidConfigurationException(errorMessage);\n+      }\n+    }\n+\n+    private void validateExternalSignerKeystoreAndPasswordFileConfig() {\n+      if (validatorExternalSignerKeystore == null\n+          && validatorExternalSignerKeystorePasswordFile == null) {\n+        return;\n+      }\n+      final String errorMessage =\n+          \"Invalid configuration. '--validators-external-signer-keystore' and '--validators-external-signer-keystore-password-file' must be specified together\";\n+      throw new InvalidConfigurationException(errorMessage);\n+    }\n+\n+    private void validateExternalSignerTruststoreAndPasswordFileConfig() {\n+      if (validatorExternalSignerTruststore == null\n+          && validatorExternalSignerTruststorePasswordFile == null) {\n+        return;\n+      }\n+      final String errorMessage =\n+          \"Invalid configuration. '--validators-external-signer-truststore' and '--validators-external-signer-truststore-password-file' must be specified together\";\n+      throw new InvalidConfigurationException(errorMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af3e0d70367506a85dd0656d7a3bb464eebc09d"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTE5OTk1OnYy", "diffSide": "RIGHT", "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo0ODo0MVrOH2ILEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMToyNzo1NlrOH2I9ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxOTA1OQ==", "bodyText": "not sure this check is correct either, like validatorExternalSignerTruststoreAndPasswordFileConfig seems to require they're both null...", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r526519059", "createdAt": "2020-11-19T00:48:41Z", "author": {"login": "rolfyone"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorConfig.java", "diffHunk": "@@ -243,5 +300,38 @@ private void validateKeyStoreFilesAndPasswordFilesConfig() {\n         throw new InvalidConfigurationException(errorMessage);\n       }\n     }\n+\n+    private void validateExternalSignerUrlAndPublicKeys() {\n+      if (validatorExternalSignerPublicKeys == null\n+          || validatorExternalSignerPublicKeys.isEmpty()) {\n+        return;\n+      }\n+\n+      if (validatorExternalSignerUrl == null) {\n+        final String errorMessage =\n+            \"Invalid configuration. '--validators-external-signer-url' and '--validators-external-signer-public-keys' must be specified together\";\n+        throw new InvalidConfigurationException(errorMessage);\n+      }\n+    }\n+\n+    private void validateExternalSignerKeystoreAndPasswordFileConfig() {\n+      if (validatorExternalSignerKeystore == null\n+          && validatorExternalSignerKeystorePasswordFile == null) {\n+        return;\n+      }\n+      final String errorMessage =\n+          \"Invalid configuration. '--validators-external-signer-keystore' and '--validators-external-signer-keystore-password-file' must be specified together\";\n+      throw new InvalidConfigurationException(errorMessage);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7af3e0d70367506a85dd0656d7a3bb464eebc09d"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNDc1NQ==", "bodyText": "let me re-write the condition.", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r526524755", "createdAt": "2020-11-19T01:05:22Z", "author": {"login": "usmansaleem"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorConfig.java", "diffHunk": "@@ -243,5 +300,38 @@ private void validateKeyStoreFilesAndPasswordFilesConfig() {\n         throw new InvalidConfigurationException(errorMessage);\n       }\n     }\n+\n+    private void validateExternalSignerUrlAndPublicKeys() {\n+      if (validatorExternalSignerPublicKeys == null\n+          || validatorExternalSignerPublicKeys.isEmpty()) {\n+        return;\n+      }\n+\n+      if (validatorExternalSignerUrl == null) {\n+        final String errorMessage =\n+            \"Invalid configuration. '--validators-external-signer-url' and '--validators-external-signer-public-keys' must be specified together\";\n+        throw new InvalidConfigurationException(errorMessage);\n+      }\n+    }\n+\n+    private void validateExternalSignerKeystoreAndPasswordFileConfig() {\n+      if (validatorExternalSignerKeystore == null\n+          && validatorExternalSignerKeystorePasswordFile == null) {\n+        return;\n+      }\n+      final String errorMessage =\n+          \"Invalid configuration. '--validators-external-signer-keystore' and '--validators-external-signer-keystore-password-file' must be specified together\";\n+      throw new InvalidConfigurationException(errorMessage);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxOTA1OQ=="}, "originalCommit": {"oid": "7af3e0d70367506a85dd0656d7a3bb464eebc09d"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUzMTk0Ng==", "bodyText": "@rolfyone 've re-wrote the condition and added unit test case for coverage as well.", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r526531946", "createdAt": "2020-11-19T01:27:56Z", "author": {"login": "usmansaleem"}, "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorConfig.java", "diffHunk": "@@ -243,5 +300,38 @@ private void validateKeyStoreFilesAndPasswordFilesConfig() {\n         throw new InvalidConfigurationException(errorMessage);\n       }\n     }\n+\n+    private void validateExternalSignerUrlAndPublicKeys() {\n+      if (validatorExternalSignerPublicKeys == null\n+          || validatorExternalSignerPublicKeys.isEmpty()) {\n+        return;\n+      }\n+\n+      if (validatorExternalSignerUrl == null) {\n+        final String errorMessage =\n+            \"Invalid configuration. '--validators-external-signer-url' and '--validators-external-signer-public-keys' must be specified together\";\n+        throw new InvalidConfigurationException(errorMessage);\n+      }\n+    }\n+\n+    private void validateExternalSignerKeystoreAndPasswordFileConfig() {\n+      if (validatorExternalSignerKeystore == null\n+          && validatorExternalSignerKeystorePasswordFile == null) {\n+        return;\n+      }\n+      final String errorMessage =\n+          \"Invalid configuration. '--validators-external-signer-keystore' and '--validators-external-signer-keystore-password-file' must be specified together\";\n+      throw new InvalidConfigurationException(errorMessage);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUxOTA1OQ=="}, "originalCommit": {"oid": "7af3e0d70367506a85dd0656d7a3bb464eebc09d"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTYwMTYyOnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMzo1NTozNVrOH2Lyuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDoxMToxN1rOH2vw-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU3ODM2Mw==", "bodyText": "i think having the supplier be final is probably a better pattern, than allowing it to be set just for testing.\nMaybe what we want is a second 'create' function that allows the supplier to be provided during create time to allow for this testing? it could be package private, just used in testing...", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r526578363", "createdAt": "2020-11-19T03:55:35Z", "author": {"login": "rolfyone"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java", "diffHunk": "@@ -45,25 +45,22 @@\n \n   private final SlashingProtector slashingProtector;\n   private final AsyncRunner asyncRunner;\n-  private final Supplier<HttpClient> remoteValidatorHttpClientFactory;\n+  private Supplier<HttpClient> externalValidatorHttpClientFactory;\n \n-  @VisibleForTesting\n-  ValidatorLoader(\n-      final SlashingProtector slashingProtector,\n-      final AsyncRunner asyncRunner,\n-      final Supplier<HttpClient> remoteValidatorHttpClientFactory) {\n+  private ValidatorLoader(\n+      final SlashingProtector slashingProtector, final AsyncRunner asyncRunner) {\n     this.slashingProtector = slashingProtector;\n     this.asyncRunner = asyncRunner;\n-    this.remoteValidatorHttpClientFactory = remoteValidatorHttpClientFactory;\n   }\n \n   public static ValidatorLoader create(\n       final SlashingProtector slashingProtector, final AsyncRunner asyncRunner) {\n-    return new ValidatorLoader(\n-        slashingProtector,\n-        asyncRunner,\n-        Suppliers.memoize(\n-            () -> HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).build()));\n+    return new ValidatorLoader(slashingProtector, asyncRunner);\n+  }\n+\n+  @VisibleForTesting\n+  void setExternalValidatorHttpClientFactory(final Supplier<HttpClient> httpClientSupplier) {\n+    this.externalValidatorHttpClientFactory = httpClientSupplier;\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db8817bcf2d57a202989ff540da2e0abb41f4a06"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4MjkzOQ==", "bodyText": "I've refactored httpclient factory to be loaded in initializeValidator method (instead of being a class member) ... and created an overloaded initializeValidator that can utilitze mocked httpclient in unit tests. The factory is only required (and will be initialized) if external public keys are defined.", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r526582939", "createdAt": "2020-11-19T04:13:46Z", "author": {"login": "usmansaleem"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java", "diffHunk": "@@ -45,25 +45,22 @@\n \n   private final SlashingProtector slashingProtector;\n   private final AsyncRunner asyncRunner;\n-  private final Supplier<HttpClient> remoteValidatorHttpClientFactory;\n+  private Supplier<HttpClient> externalValidatorHttpClientFactory;\n \n-  @VisibleForTesting\n-  ValidatorLoader(\n-      final SlashingProtector slashingProtector,\n-      final AsyncRunner asyncRunner,\n-      final Supplier<HttpClient> remoteValidatorHttpClientFactory) {\n+  private ValidatorLoader(\n+      final SlashingProtector slashingProtector, final AsyncRunner asyncRunner) {\n     this.slashingProtector = slashingProtector;\n     this.asyncRunner = asyncRunner;\n-    this.remoteValidatorHttpClientFactory = remoteValidatorHttpClientFactory;\n   }\n \n   public static ValidatorLoader create(\n       final SlashingProtector slashingProtector, final AsyncRunner asyncRunner) {\n-    return new ValidatorLoader(\n-        slashingProtector,\n-        asyncRunner,\n-        Suppliers.memoize(\n-            () -> HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).build()));\n+    return new ValidatorLoader(slashingProtector, asyncRunner);\n+  }\n+\n+  @VisibleForTesting\n+  void setExternalValidatorHttpClientFactory(final Supplier<HttpClient> httpClientSupplier) {\n+    this.externalValidatorHttpClientFactory = httpClientSupplier;\n   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU3ODM2Mw=="}, "originalCommit": {"oid": "db8817bcf2d57a202989ff540da2e0abb41f4a06"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU4MzUxMA==", "bodyText": "we can't really set httpClient up in constructor anymore because the keystore/truststore values are derived from \"ValidatorConfig\" object, which is injected with initializeValidator.", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r526583510", "createdAt": "2020-11-19T04:15:44Z", "author": {"login": "usmansaleem"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java", "diffHunk": "@@ -45,25 +45,22 @@\n \n   private final SlashingProtector slashingProtector;\n   private final AsyncRunner asyncRunner;\n-  private final Supplier<HttpClient> remoteValidatorHttpClientFactory;\n+  private Supplier<HttpClient> externalValidatorHttpClientFactory;\n \n-  @VisibleForTesting\n-  ValidatorLoader(\n-      final SlashingProtector slashingProtector,\n-      final AsyncRunner asyncRunner,\n-      final Supplier<HttpClient> remoteValidatorHttpClientFactory) {\n+  private ValidatorLoader(\n+      final SlashingProtector slashingProtector, final AsyncRunner asyncRunner) {\n     this.slashingProtector = slashingProtector;\n     this.asyncRunner = asyncRunner;\n-    this.remoteValidatorHttpClientFactory = remoteValidatorHttpClientFactory;\n   }\n \n   public static ValidatorLoader create(\n       final SlashingProtector slashingProtector, final AsyncRunner asyncRunner) {\n-    return new ValidatorLoader(\n-        slashingProtector,\n-        asyncRunner,\n-        Suppliers.memoize(\n-            () -> HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).build()));\n+    return new ValidatorLoader(slashingProtector, asyncRunner);\n+  }\n+\n+  @VisibleForTesting\n+  void setExternalValidatorHttpClientFactory(final Supplier<HttpClient> httpClientSupplier) {\n+    this.externalValidatorHttpClientFactory = httpClientSupplier;\n   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU3ODM2Mw=="}, "originalCommit": {"oid": "db8817bcf2d57a202989ff540da2e0abb41f4a06"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2NzczOQ==", "bodyText": "ok fair enough...", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r527167739", "createdAt": "2020-11-19T20:11:17Z", "author": {"login": "rolfyone"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java", "diffHunk": "@@ -45,25 +45,22 @@\n \n   private final SlashingProtector slashingProtector;\n   private final AsyncRunner asyncRunner;\n-  private final Supplier<HttpClient> remoteValidatorHttpClientFactory;\n+  private Supplier<HttpClient> externalValidatorHttpClientFactory;\n \n-  @VisibleForTesting\n-  ValidatorLoader(\n-      final SlashingProtector slashingProtector,\n-      final AsyncRunner asyncRunner,\n-      final Supplier<HttpClient> remoteValidatorHttpClientFactory) {\n+  private ValidatorLoader(\n+      final SlashingProtector slashingProtector, final AsyncRunner asyncRunner) {\n     this.slashingProtector = slashingProtector;\n     this.asyncRunner = asyncRunner;\n-    this.remoteValidatorHttpClientFactory = remoteValidatorHttpClientFactory;\n   }\n \n   public static ValidatorLoader create(\n       final SlashingProtector slashingProtector, final AsyncRunner asyncRunner) {\n-    return new ValidatorLoader(\n-        slashingProtector,\n-        asyncRunner,\n-        Suppliers.memoize(\n-            () -> HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).build()));\n+    return new ValidatorLoader(slashingProtector, asyncRunner);\n+  }\n+\n+  @VisibleForTesting\n+  void setExternalValidatorHttpClientFactory(final Supplier<HttpClient> httpClientSupplier) {\n+    this.externalValidatorHttpClientFactory = httpClientSupplier;\n   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjU3ODM2Mw=="}, "originalCommit": {"oid": "db8817bcf2d57a202989ff540da2e0abb41f4a06"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTI5Mjg3OnYy", "diffSide": "RIGHT", "path": "infrastructure/logging/src/main/java/tech/pegasys/teku/infrastructure/logging/StatusLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMDozOTo1NVrOH7ouwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo1MToxOFrOIBAPhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NTM2MQ==", "bodyText": "nit: I'd make this an error and it's probably worth making it red with ColorConsolePrinter.print.", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r532295361", "createdAt": "2020-11-30T00:39:55Z", "author": {"login": "ajsutton"}, "path": "infrastructure/logging/src/main/java/tech/pegasys/teku/infrastructure/logging/StatusLogger.java", "diffHunk": "@@ -228,4 +229,12 @@ public void eth1DepositChainIdMismatch(int expectedChainId, int eth1ChainId) {\n         expectedChainId,\n         eth1ChainId);\n   }\n+\n+  public void externalSignerStatus(final URL externalSignerUrl, boolean isReachable) {\n+    if (isReachable) {\n+      log.info(\"External signer is reachable at {}\", externalSignerUrl);\n+    } else {\n+      log.warn(\"External signer is currently not reachable at {}\", externalSignerUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326b72dcb311346fc18da0edf4a732297ea0fcea"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMzQ2MA==", "bodyText": "fixed by upcheck PR", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r537923460", "createdAt": "2020-12-07T23:51:18Z", "author": {"login": "usmansaleem"}, "path": "infrastructure/logging/src/main/java/tech/pegasys/teku/infrastructure/logging/StatusLogger.java", "diffHunk": "@@ -228,4 +229,12 @@ public void eth1DepositChainIdMismatch(int expectedChainId, int eth1ChainId) {\n         expectedChainId,\n         eth1ChainId);\n   }\n+\n+  public void externalSignerStatus(final URL externalSignerUrl, boolean isReachable) {\n+    if (isReachable) {\n+      log.info(\"External signer is reachable at {}\", externalSignerUrl);\n+    } else {\n+      log.warn(\"External signer is currently not reachable at {}\", externalSignerUrl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NTM2MQ=="}, "originalCommit": {"oid": "326b72dcb311346fc18da0edf4a732297ea0fcea"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTI5NDYwOnYy", "diffSide": "RIGHT", "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorKeysOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMDo0MTowOVrOH7ovlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDowNzowNFrOIBApbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NTU3NQ==", "bodyText": "We should make this description specific to this type of keystore rather than having the same description as validators-external-signer-truststore-password-file", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r532295575", "createdAt": "2020-11-30T00:41:09Z", "author": {"login": "ajsutton"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorKeysOptions.java", "diffHunk": "@@ -80,6 +81,35 @@\n       arity = \"1\")\n   private int validatorExternalSignerTimeout = 1000;\n \n+  @CommandLine.Option(\n+      names = {\"--validators-external-signer-keystore\"},\n+      paramLabel = \"<FILE>\",\n+      description =\n+          \"Keystore (PKCS12/JKS) to use for TLS mutual authentication with external signer\",\n+      arity = \"1\")\n+  private String validatorExternalSignerKeystore = null;\n+\n+  @CommandLine.Option(\n+      names = {\"--validators-external-signer-keystore-password-file\"},\n+      paramLabel = \"<FILE>\",\n+      description = \"Password file for keystore\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326b72dcb311346fc18da0edf4a732297ea0fcea"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkzMDA5Mg==", "bodyText": "Updated the description to be more descriptive.", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r537930092", "createdAt": "2020-12-08T00:07:04Z", "author": {"login": "usmansaleem"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorKeysOptions.java", "diffHunk": "@@ -80,6 +81,35 @@\n       arity = \"1\")\n   private int validatorExternalSignerTimeout = 1000;\n \n+  @CommandLine.Option(\n+      names = {\"--validators-external-signer-keystore\"},\n+      paramLabel = \"<FILE>\",\n+      description =\n+          \"Keystore (PKCS12/JKS) to use for TLS mutual authentication with external signer\",\n+      arity = \"1\")\n+  private String validatorExternalSignerKeystore = null;\n+\n+  @CommandLine.Option(\n+      names = {\"--validators-external-signer-keystore-password-file\"},\n+      paramLabel = \"<FILE>\",\n+      description = \"Password file for keystore\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NTU3NQ=="}, "originalCommit": {"oid": "326b72dcb311346fc18da0edf4a732297ea0fcea"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTI5NzA0OnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/HttpClientExternalSignerFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMDo0MzozMVrOH7ow4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMTowNjozOFrOIBCFOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NTkwNQ==", "bodyText": "Should we refuse to start if ssl keystores are specified but the URL is http only? Validation would probably happen in ValidatorConfig I guess.", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r532295905", "createdAt": "2020-11-30T00:43:31Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/HttpClientExternalSignerFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.http.HttpClient;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.function.Supplier;\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import org.apache.commons.lang3.tuple.Pair;\n+import tech.pegasys.teku.infrastructure.crypto.SecureRandomProvider;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+import tech.pegasys.teku.validator.api.ValidatorConfig;\n+\n+public class HttpClientExternalSignerFactory implements Supplier<HttpClient> {\n+  private final ValidatorConfig validatorConfig;\n+\n+  public HttpClientExternalSignerFactory(final ValidatorConfig validatorConfig) {\n+    this.validatorConfig = validatorConfig;\n+  }\n+\n+  @Override\n+  public HttpClient get() {\n+    final HttpClient.Builder builder = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1);\n+    if (isTLSEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326b72dcb311346fc18da0edf4a732297ea0fcea"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyNTg0OQ==", "bodyText": "hmm ...  if URL is http (and web3signer is running in TLS), the connection would fail even if we specify keystores/truststores. I agree, we should error out if keystores/truststores are specified and URL is http only.", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r537925849", "createdAt": "2020-12-07T23:56:47Z", "author": {"login": "usmansaleem"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/HttpClientExternalSignerFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.http.HttpClient;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.function.Supplier;\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import org.apache.commons.lang3.tuple.Pair;\n+import tech.pegasys.teku.infrastructure.crypto.SecureRandomProvider;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+import tech.pegasys.teku.validator.api.ValidatorConfig;\n+\n+public class HttpClientExternalSignerFactory implements Supplier<HttpClient> {\n+  private final ValidatorConfig validatorConfig;\n+\n+  public HttpClientExternalSignerFactory(final ValidatorConfig validatorConfig) {\n+    this.validatorConfig = validatorConfig;\n+  }\n+\n+  @Override\n+  public HttpClient get() {\n+    final HttpClient.Builder builder = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1);\n+    if (isTLSEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NTkwNQ=="}, "originalCommit": {"oid": "326b72dcb311346fc18da0edf4a732297ea0fcea"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1MzU5Mg==", "bodyText": "validation added.", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r537953592", "createdAt": "2020-12-08T01:06:38Z", "author": {"login": "usmansaleem"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/HttpClientExternalSignerFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.http.HttpClient;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.function.Supplier;\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import org.apache.commons.lang3.tuple.Pair;\n+import tech.pegasys.teku.infrastructure.crypto.SecureRandomProvider;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+import tech.pegasys.teku.validator.api.ValidatorConfig;\n+\n+public class HttpClientExternalSignerFactory implements Supplier<HttpClient> {\n+  private final ValidatorConfig validatorConfig;\n+\n+  public HttpClientExternalSignerFactory(final ValidatorConfig validatorConfig) {\n+    this.validatorConfig = validatorConfig;\n+  }\n+\n+  @Override\n+  public HttpClient get() {\n+    final HttpClient.Builder builder = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1);\n+    if (isTLSEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NTkwNQ=="}, "originalCommit": {"oid": "326b72dcb311346fc18da0edf4a732297ea0fcea"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTI5NzUyOnYy", "diffSide": "RIGHT", "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/loader/ValidatorLoaderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMDo0Mzo1MVrOH7oxJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo1MDo1MFrOIBAOpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NTk3Mg==", "bodyText": "these look like they're added in just to satisfy the test? maybe just put them in a @BeforeEach if they're not important for the test?\nIf they're expected, we might want to verify they occur...", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r532295972", "createdAt": "2020-11-30T00:43:51Z", "author": {"login": "rolfyone"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/loader/ValidatorLoaderTest.java", "diffHunk": "@@ -151,6 +160,9 @@ void initializeValidatorsWithBothLocalAndExternalSigners(@TempDir Path tempDir)\n                         + File.pathSeparator\n                         + tempDir.toAbsolutePath().toString()))\n             .build();\n+    when(httpClient.send(any(), ArgumentMatchers.<HttpResponse.BodyHandler<Void>>any()))\n+        .thenReturn(upcheckResponse);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326b72dcb311346fc18da0edf4a732297ea0fcea"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMzIzOA==", "bodyText": "fixed by upcheck PR", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r537923238", "createdAt": "2020-12-07T23:50:50Z", "author": {"login": "usmansaleem"}, "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/loader/ValidatorLoaderTest.java", "diffHunk": "@@ -151,6 +160,9 @@ void initializeValidatorsWithBothLocalAndExternalSigners(@TempDir Path tempDir)\n                         + File.pathSeparator\n                         + tempDir.toAbsolutePath().toString()))\n             .build();\n+    when(httpClient.send(any(), ArgumentMatchers.<HttpResponse.BodyHandler<Void>>any()))\n+        .thenReturn(upcheckResponse);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NTk3Mg=="}, "originalCommit": {"oid": "326b72dcb311346fc18da0edf4a732297ea0fcea"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTI5OTI3OnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/HttpClientExternalSignerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMDo0NToxMVrOH7oyCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDowMDozNFrOIBAffw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NjIwMQ==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return protocol != null && protocol.toLowerCase().equals(\"https\");\n          \n          \n            \n                return protocol != null && protocol.equalsIgnoringCase(\"https\");\n          \n      \n    \n    \n  \n\ntoLowerCase can do surprising things in some locales and with some characters.", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r532296201", "createdAt": "2020-11-30T00:45:11Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/HttpClientExternalSignerFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.http.HttpClient;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.function.Supplier;\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import org.apache.commons.lang3.tuple.Pair;\n+import tech.pegasys.teku.infrastructure.crypto.SecureRandomProvider;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+import tech.pegasys.teku.validator.api.ValidatorConfig;\n+\n+public class HttpClientExternalSignerFactory implements Supplier<HttpClient> {\n+  private final ValidatorConfig validatorConfig;\n+\n+  public HttpClientExternalSignerFactory(final ValidatorConfig validatorConfig) {\n+    this.validatorConfig = validatorConfig;\n+  }\n+\n+  @Override\n+  public HttpClient get() {\n+    final HttpClient.Builder builder = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1);\n+    if (isTLSEnabled()) {\n+      builder.sslContext(\n+          getSSLContext(\n+              validatorConfig.getValidatorExternalSignerKeystorePasswordFilePair(),\n+              validatorConfig.getValidatorExternalSignerTruststorePasswordFilePair()));\n+    }\n+    return builder.build();\n+  }\n+\n+  private boolean isTLSEnabled() {\n+    final String protocol = validatorConfig.getValidatorExternalSignerUrl().getProtocol();\n+    return protocol != null && protocol.toLowerCase().equals(\"https\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326b72dcb311346fc18da0edf4a732297ea0fcea"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyNzU1MQ==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r537927551", "createdAt": "2020-12-08T00:00:34Z", "author": {"login": "usmansaleem"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/HttpClientExternalSignerFactory.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.loader;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.http.HttpClient;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.function.Supplier;\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+import org.apache.commons.lang3.tuple.Pair;\n+import tech.pegasys.teku.infrastructure.crypto.SecureRandomProvider;\n+import tech.pegasys.teku.util.config.InvalidConfigurationException;\n+import tech.pegasys.teku.validator.api.ValidatorConfig;\n+\n+public class HttpClientExternalSignerFactory implements Supplier<HttpClient> {\n+  private final ValidatorConfig validatorConfig;\n+\n+  public HttpClientExternalSignerFactory(final ValidatorConfig validatorConfig) {\n+    this.validatorConfig = validatorConfig;\n+  }\n+\n+  @Override\n+  public HttpClient get() {\n+    final HttpClient.Builder builder = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1);\n+    if (isTLSEnabled()) {\n+      builder.sslContext(\n+          getSSLContext(\n+              validatorConfig.getValidatorExternalSignerKeystorePasswordFilePair(),\n+              validatorConfig.getValidatorExternalSignerTruststorePasswordFilePair()));\n+    }\n+    return builder.build();\n+  }\n+\n+  private boolean isTLSEnabled() {\n+    final String protocol = validatorConfig.getValidatorExternalSignerUrl().getProtocol();\n+    return protocol != null && protocol.toLowerCase().equals(\"https\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NjIwMQ=="}, "originalCommit": {"oid": "326b72dcb311346fc18da0edf4a732297ea0fcea"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTMwMzE1OnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMDo0NzoxMFrOH7oz4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo1MTowMlrOIBAO9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NjY3Mg==", "bodyText": "I just wonder if this log message should also be displayed if the signer disappears?\nI'm not sure I see anywhere specifically in this latest set of changes, but maybe if the signer stops responding, raising this message would be a useful warning...", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r532296672", "createdAt": "2020-11-30T00:47:10Z", "author": {"login": "rolfyone"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java", "diffHunk": "@@ -99,8 +101,20 @@ public static ValidatorLoader create(\n \n   private Map<BLSPublicKey, Validator> createExternalSignerValidator(\n       final ValidatorConfig config, final Supplier<HttpClient> externalSignerHttpClientFactory) {\n+    if (config.getValidatorExternalSignerPublicKeys().isEmpty()) {\n+      return Collections.emptyMap();\n+    }\n+\n     final Duration timeout = Duration.ofMillis(config.getValidatorExternalSignerTimeout());\n \n+    final boolean isReachable =\n+        new ExternalSignerUpcheck(\n+                externalSignerHttpClientFactory.get(),\n+                config.getValidatorExternalSignerUrl(),\n+                timeout)\n+            .upcheck();\n+    STATUS_LOG.externalSignerStatus(config.getValidatorExternalSignerUrl(), isReachable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326b72dcb311346fc18da0edf4a732297ea0fcea"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMzMxNw==", "bodyText": "fixed by upcheck PR", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r537923317", "createdAt": "2020-12-07T23:51:02Z", "author": {"login": "usmansaleem"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java", "diffHunk": "@@ -99,8 +101,20 @@ public static ValidatorLoader create(\n \n   private Map<BLSPublicKey, Validator> createExternalSignerValidator(\n       final ValidatorConfig config, final Supplier<HttpClient> externalSignerHttpClientFactory) {\n+    if (config.getValidatorExternalSignerPublicKeys().isEmpty()) {\n+      return Collections.emptyMap();\n+    }\n+\n     final Duration timeout = Duration.ofMillis(config.getValidatorExternalSignerTimeout());\n \n+    final boolean isReachable =\n+        new ExternalSignerUpcheck(\n+                externalSignerHttpClientFactory.get(),\n+                config.getValidatorExternalSignerUrl(),\n+                timeout)\n+            .upcheck();\n+    STATUS_LOG.externalSignerStatus(config.getValidatorExternalSignerUrl(), isReachable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NjY3Mg=="}, "originalCommit": {"oid": "326b72dcb311346fc18da0edf4a732297ea0fcea"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTMwODYyOnYy", "diffSide": "RIGHT", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwMDo1MTozM1rOH7o2tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo1NzoxN1rOIBAZtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NzM5Ng==", "bodyText": "It would probably be good to get this new upcheck in its own PR.  It would also be good to keep retrying - particularly if its failing - otherwise a single error message in the logs can easily be missed and as Paul mentioned, the signer may be up initially but then later go down.  Checking liveness every few minutes probably makes sense.  Would also be good that this is then an async check instead of delaying startup to perform it.", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r532297396", "createdAt": "2020-11-30T00:51:33Z", "author": {"login": "ajsutton"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java", "diffHunk": "@@ -96,14 +99,28 @@ public static ValidatorLoader create(\n         .collect(toMap(Validator::getPublicKey, Function.identity()));\n   }\n \n-  private Map<BLSPublicKey, Validator> createExternalSignerValidator(final ValidatorConfig config) {\n+  private Map<BLSPublicKey, Validator> createExternalSignerValidator(\n+      final ValidatorConfig config, final Supplier<HttpClient> externalSignerHttpClientFactory) {\n+    if (config.getValidatorExternalSignerPublicKeys().isEmpty()) {\n+      return Collections.emptyMap();\n+    }\n+\n     final Duration timeout = Duration.ofMillis(config.getValidatorExternalSignerTimeout());\n+\n+    final boolean isReachable =\n+        new ExternalSignerUpcheck(\n+                externalSignerHttpClientFactory.get(),\n+                config.getValidatorExternalSignerUrl(),\n+                timeout)\n+            .upcheck();\n+    STATUS_LOG.externalSignerStatus(config.getValidatorExternalSignerUrl(), isReachable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326b72dcb311346fc18da0edf4a732297ea0fcea"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyNjA3MA==", "bodyText": "moved to separate PR.", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r537926070", "createdAt": "2020-12-07T23:57:17Z", "author": {"login": "usmansaleem"}, "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java", "diffHunk": "@@ -96,14 +99,28 @@ public static ValidatorLoader create(\n         .collect(toMap(Validator::getPublicKey, Function.identity()));\n   }\n \n-  private Map<BLSPublicKey, Validator> createExternalSignerValidator(final ValidatorConfig config) {\n+  private Map<BLSPublicKey, Validator> createExternalSignerValidator(\n+      final ValidatorConfig config, final Supplier<HttpClient> externalSignerHttpClientFactory) {\n+    if (config.getValidatorExternalSignerPublicKeys().isEmpty()) {\n+      return Collections.emptyMap();\n+    }\n+\n     final Duration timeout = Duration.ofMillis(config.getValidatorExternalSignerTimeout());\n+\n+    final boolean isReachable =\n+        new ExternalSignerUpcheck(\n+                externalSignerHttpClientFactory.get(),\n+                config.getValidatorExternalSignerUrl(),\n+                timeout)\n+            .upcheck();\n+    STATUS_LOG.externalSignerStatus(config.getValidatorExternalSignerUrl(), isReachable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjI5NzM5Ng=="}, "originalCommit": {"oid": "326b72dcb311346fc18da0edf4a732297ea0fcea"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzUyMjY1OnYy", "diffSide": "RIGHT", "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorKeysOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzozODozOFrOIBFfoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNTowMjozMVrOIBHLiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwOTUwNA==", "bodyText": "as discussed, 1 second is very short.", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r538009504", "createdAt": "2020-12-08T03:38:38Z", "author": {"login": "rolfyone"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorKeysOptions.java", "diffHunk": "@@ -79,7 +80,7 @@\n       paramLabel = \"<INTEGER>\",\n       description = \"Timeout (in milliseconds) for the external signing service\",\n       arity = \"1\")\n-  private int validatorExternalSignerTimeout = 1000;\n+  private long validatorExternalSignerTimeout = 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67ef50e0422935f6066b17d50c6782ae7e447e6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAzNzEzMQ==", "bodyText": "updated to 5 seconds.", "url": "https://github.com/ConsenSys/teku/pull/3250#discussion_r538037131", "createdAt": "2020-12-08T05:02:31Z", "author": {"login": "usmansaleem"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorKeysOptions.java", "diffHunk": "@@ -79,7 +80,7 @@\n       paramLabel = \"<INTEGER>\",\n       description = \"Timeout (in milliseconds) for the external signing service\",\n       arity = \"1\")\n-  private int validatorExternalSignerTimeout = 1000;\n+  private long validatorExternalSignerTimeout = 1000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwOTUwNA=="}, "originalCommit": {"oid": "d67ef50e0422935f6066b17d50c6782ae7e447e6"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3043, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}