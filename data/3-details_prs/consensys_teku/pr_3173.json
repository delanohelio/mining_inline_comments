{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2OTYyNjQ0", "number": 3173, "title": "Implement post proposer slashing handler", "bodyText": "PR Description\nImplement post proposer slashing handler\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-11-06T20:23:18Z", "url": "https://github.com/ConsenSys/teku/pull/3173", "merged": true, "mergeCommit": {"oid": "d2ec61828653cda3ebd63085c1d6e768cac4e80a"}, "closed": true, "closedAt": "2020-11-09T20:02:10Z", "author": {"login": "cemozerr"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZ854WAH2gAyNTE2OTYyNjQ0OjVmOTY5M2IxYjVmMTcwOTdhZDg0OWJjMTBlYzkwNTE3NWEyYTU3MmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABda6TsKAFqTUyNjYwNDYxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5f9693b1b5f17097ad849bc10ec905175a2a572f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/5f9693b1b5f17097ad849bc10ec905175a2a572f", "committedDate": "2020-11-06T20:22:52Z", "message": "Implement post proposer slashing handler and unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a129401ba57f1e667717aaa8741c8ce846120db", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/9a129401ba57f1e667717aaa8741c8ce846120db", "committedDate": "2020-11-06T21:27:43Z", "message": "Fix async code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5ef96b5864ddec650d24ebc6fbd99c6664aef75", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/c5ef96b5864ddec650d24ebc6fbd99c6664aef75", "committedDate": "2020-11-06T21:43:48Z", "message": "Add another unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89d77990ea5c278da094b8017886db95a7169444", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/89d77990ea5c278da094b8017886db95a7169444", "committedDate": "2020-11-06T21:49:13Z", "message": "Fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1ODQ3MjEx", "url": "https://github.com/ConsenSys/teku/pull/3173#pullrequestreview-525847211", "createdAt": "2020-11-08T21:35:45Z", "commit": {"oid": "89d77990ea5c278da094b8017886db95a7169444"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMTozNTo0NVrOHvajNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMTozNTo0NVrOHvajNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MDExOQ==", "bodyText": "could just call other constructor (then just calling super once)", "url": "https://github.com/ConsenSys/teku/pull/3173#discussion_r519480119", "createdAt": "2020-11-08T21:35:45Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostProposerSlashing.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_OK;\n+\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.ProposerSlashing;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostProposerSlashing extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/proposer_slashings\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public PostProposerSlashing(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d77990ea5c278da094b8017886db95a7169444"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1ODQ3Mjcy", "url": "https://github.com/ConsenSys/teku/pull/3173#pullrequestreview-525847272", "createdAt": "2020-11-08T21:36:39Z", "commit": {"oid": "89d77990ea5c278da094b8017886db95a7169444"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMTozNjo0MFrOHvajqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMTozNjo0MFrOHvajqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MDIzNA==", "bodyText": "need to use BadRequest.badRequest to get json", "url": "https://github.com/ConsenSys/teku/pull/3173#discussion_r519480234", "createdAt": "2020-11-08T21:36:40Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostProposerSlashing.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_OK;\n+\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.ProposerSlashing;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostProposerSlashing extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/proposer_slashings\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public PostProposerSlashing(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  public PostProposerSlashing(final NodeDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.POST,\n+      summary = \"Submit proposer slashing object\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Submits proposer slashing object to node's pool and if passes validation node MUST broadcast it to network.\",\n+      requestBody = @OpenApiRequestBody(content = {@OpenApiContent(from = ProposerSlashing.class)}),\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            description =\n+                \"Proposer Slashing has been successfully validated, added to the pool, and broadcast.\"),\n+        @OpenApiResponse(\n+            status = RES_BAD_REQUEST,\n+            description =\n+                \"Invalid proposer slashing, it will never pass validation so it's rejected\"),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      final ProposerSlashing proposerSlashing =\n+          jsonProvider.jsonToObject(ctx.body(), ProposerSlashing.class);\n+      InternalValidationResult result =\n+          nodeDataProvider.postProposerSlashing(proposerSlashing).join();\n+      if (result.equals(InternalValidationResult.IGNORE)\n+          || result.equals(InternalValidationResult.REJECT)) {\n+        ctx.status(SC_BAD_REQUEST);\n+        ctx.result(\"Invalid proposer slashing, it will never pass validation so it's rejected\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d77990ea5c278da094b8017886db95a7169444"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1ODQ3Mzc2", "url": "https://github.com/ConsenSys/teku/pull/3173#pullrequestreview-525847376", "createdAt": "2020-11-08T21:38:01Z", "commit": {"oid": "89d77990ea5c278da094b8017886db95a7169444"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMTozODowMlrOHvakNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMTozODowMlrOHvakNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MDM3NA==", "bodyText": "you can actually accept the slashing object here rather than 'any' and that basically closes the loop on knowing we got what we expected", "url": "https://github.com/ConsenSys/teku/pull/3173#discussion_r519480374", "createdAt": "2020-11-08T21:38:02Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostProposerSlashingTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostProposerSlashingTest {\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private Context context = mock(Context.class);\n+  private NodeDataProvider provider = mock(NodeDataProvider.class);\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private PostProposerSlashing handler;\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new PostProposerSlashing(provider, jsonProvider);\n+  }\n+\n+  @Test\n+  void shouldBeAbleToSubmitSlashing() throws Exception {\n+    final ProposerSlashing slashing =\n+        new ProposerSlashing(dataStructureUtil.randomProposerSlashing());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postProposerSlashing(any()))\n+        .thenReturn(SafeFuture.completedFuture(InternalValidationResult.ACCEPT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d77990ea5c278da094b8017886db95a7169444"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1ODQ3NDEw", "url": "https://github.com/ConsenSys/teku/pull/3173#pullrequestreview-525847410", "createdAt": "2020-11-08T21:38:28Z", "commit": {"oid": "89d77990ea5c278da094b8017886db95a7169444"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMTozODoyOVrOHvakaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMTozODoyOVrOHvakaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MDQyNA==", "bodyText": "should avoid accepting 'any' if we don't need to...", "url": "https://github.com/ConsenSys/teku/pull/3173#discussion_r519480424", "createdAt": "2020-11-08T21:38:29Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostProposerSlashingTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostProposerSlashingTest {\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private Context context = mock(Context.class);\n+  private NodeDataProvider provider = mock(NodeDataProvider.class);\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private PostProposerSlashing handler;\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new PostProposerSlashing(provider, jsonProvider);\n+  }\n+\n+  @Test\n+  void shouldBeAbleToSubmitSlashing() throws Exception {\n+    final ProposerSlashing slashing =\n+        new ProposerSlashing(dataStructureUtil.randomProposerSlashing());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postProposerSlashing(any()))\n+        .thenReturn(SafeFuture.completedFuture(InternalValidationResult.ACCEPT));\n+    handler.handle(context);\n+\n+    verify(context).status(SC_OK);\n+  }\n+\n+  @Test\n+  void shouldReturnBadRequestIfProposerSlashingIsInvalid() throws Exception {\n+    final ProposerSlashing slashing =\n+        new ProposerSlashing(dataStructureUtil.randomProposerSlashing());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postProposerSlashing(any()))\n+        .thenReturn(SafeFuture.completedFuture(InternalValidationResult.REJECT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d77990ea5c278da094b8017886db95a7169444"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1ODQ3NDQ2", "url": "https://github.com/ConsenSys/teku/pull/3173#pullrequestreview-525847446", "createdAt": "2020-11-08T21:38:59Z", "commit": {"oid": "89d77990ea5c278da094b8017886db95a7169444"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMTozODo1OVrOHvaklg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMTozODo1OVrOHvaklg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MDQ3MA==", "bodyText": "also verify provider.postProposerSlashing was never called", "url": "https://github.com/ConsenSys/teku/pull/3173#discussion_r519480470", "createdAt": "2020-11-08T21:38:59Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostProposerSlashingTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostProposerSlashingTest {\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private Context context = mock(Context.class);\n+  private NodeDataProvider provider = mock(NodeDataProvider.class);\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private PostProposerSlashing handler;\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new PostProposerSlashing(provider, jsonProvider);\n+  }\n+\n+  @Test\n+  void shouldBeAbleToSubmitSlashing() throws Exception {\n+    final ProposerSlashing slashing =\n+        new ProposerSlashing(dataStructureUtil.randomProposerSlashing());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postProposerSlashing(any()))\n+        .thenReturn(SafeFuture.completedFuture(InternalValidationResult.ACCEPT));\n+    handler.handle(context);\n+\n+    verify(context).status(SC_OK);\n+  }\n+\n+  @Test\n+  void shouldReturnBadRequestIfProposerSlashingIsInvalid() throws Exception {\n+    final ProposerSlashing slashing =\n+        new ProposerSlashing(dataStructureUtil.randomProposerSlashing());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postProposerSlashing(any()))\n+        .thenReturn(SafeFuture.completedFuture(InternalValidationResult.REJECT));\n+    handler.handle(context);\n+\n+    verify(context).status(SC_BAD_REQUEST);\n+  }\n+\n+  @Test\n+  void shouldReturnBadRequestIfProserSlashingIsIncorrectlyFormatted() throws Exception {\n+    when(context.body()).thenReturn(\"{\\\"a\\\": \\\"field\\\"}\");\n+    handler.handle(context);\n+\n+    verify(context).status(SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d77990ea5c278da094b8017886db95a7169444"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1ODQ4MTY2", "url": "https://github.com/ConsenSys/teku/pull/3173#pullrequestreview-525848166", "createdAt": "2020-11-08T21:47:40Z", "commit": {"oid": "89d77990ea5c278da094b8017886db95a7169444"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMTo0Nzo0MFrOHvaorQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMTo0Nzo0MFrOHvaorQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MTUxNw==", "bodyText": "verify provider.postProposerSlashing was called", "url": "https://github.com/ConsenSys/teku/pull/3173#discussion_r519481517", "createdAt": "2020-11-08T21:47:40Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostProposerSlashingTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostProposerSlashingTest {\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private Context context = mock(Context.class);\n+  private NodeDataProvider provider = mock(NodeDataProvider.class);\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private PostProposerSlashing handler;\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new PostProposerSlashing(provider, jsonProvider);\n+  }\n+\n+  @Test\n+  void shouldBeAbleToSubmitSlashing() throws Exception {\n+    final ProposerSlashing slashing =\n+        new ProposerSlashing(dataStructureUtil.randomProposerSlashing());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postProposerSlashing(any()))\n+        .thenReturn(SafeFuture.completedFuture(InternalValidationResult.ACCEPT));\n+    handler.handle(context);\n+\n+    verify(context).status(SC_OK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d77990ea5c278da094b8017886db95a7169444"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1ODQ4Mjcz", "url": "https://github.com/ConsenSys/teku/pull/3173#pullrequestreview-525848273", "createdAt": "2020-11-08T21:48:40Z", "commit": {"oid": "89d77990ea5c278da094b8017886db95a7169444"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMTo0ODo0MFrOHvapHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOFQyMTo0ODo0MFrOHvapHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MTYyOA==", "bodyText": "i think this use case would be verifying that the provider.postProviderSlashing was called...", "url": "https://github.com/ConsenSys/teku/pull/3173#discussion_r519481628", "createdAt": "2020-11-08T21:48:40Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostProposerSlashingTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostProposerSlashingTest {\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private Context context = mock(Context.class);\n+  private NodeDataProvider provider = mock(NodeDataProvider.class);\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private PostProposerSlashing handler;\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new PostProposerSlashing(provider, jsonProvider);\n+  }\n+\n+  @Test\n+  void shouldBeAbleToSubmitSlashing() throws Exception {\n+    final ProposerSlashing slashing =\n+        new ProposerSlashing(dataStructureUtil.randomProposerSlashing());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postProposerSlashing(any()))\n+        .thenReturn(SafeFuture.completedFuture(InternalValidationResult.ACCEPT));\n+    handler.handle(context);\n+\n+    verify(context).status(SC_OK);\n+  }\n+\n+  @Test\n+  void shouldReturnBadRequestIfProposerSlashingIsInvalid() throws Exception {\n+    final ProposerSlashing slashing =\n+        new ProposerSlashing(dataStructureUtil.randomProposerSlashing());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postProposerSlashing(any()))\n+        .thenReturn(SafeFuture.completedFuture(InternalValidationResult.REJECT));\n+    handler.handle(context);\n+\n+    verify(context).status(SC_BAD_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d77990ea5c278da094b8017886db95a7169444"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb4a6d037294ee680a488941049c3d9f37f125c7", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/eb4a6d037294ee680a488941049c3d9f37f125c7", "committedDate": "2020-11-09T18:18:41Z", "message": "Incorporate feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eed8bf7cb5ff732cf5da434fa3470b4feb9d9454", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/eed8bf7cb5ff732cf5da434fa3470b4feb9d9454", "committedDate": "2020-11-09T18:18:56Z", "message": "Merge branch 'master' into implementVoluntaryExitPostHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38931da50b691d0c497501d5e8ca990a5a4b3004", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/38931da50b691d0c497501d5e8ca990a5a4b3004", "committedDate": "2020-11-09T18:51:48Z", "message": "Integrate and add integration tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NjA0NjE5", "url": "https://github.com/ConsenSys/teku/pull/3173#pullrequestreview-526604619", "createdAt": "2020-11-09T19:55:16Z", "commit": {"oid": "38931da50b691d0c497501d5e8ca990a5a4b3004"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4408, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}