{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1ODU3NTA5", "number": 1333, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDoxOTo1N1rODmgWpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDoyNzoyM1rODmgbXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzAyNTY3OnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/artemis/api/schema/BeaconValidators.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDoxOTo1N1rOFz9kpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMTowMjoyNVrOFz-O5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMDUwMA==", "bodyText": "we don't want to use ValidatorsUtil?", "url": "https://github.com/ConsenSys/teku/pull/1333#discussion_r390030500", "createdAt": "2020-03-10T00:19:57Z", "author": {"login": "macfarla"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/api/schema/BeaconValidators.java", "diffHunk": "@@ -105,7 +114,12 @@ public static long getEffectiveListSize(\n     if (!activeOnly) {\n       return list.size();\n     } else {\n-      return list.stream().filter(v -> ValidatorsUtil.is_active_validator(v, epoch)).count();\n+      return list.stream().filter(v -> is_active_validator(v, epoch)).count();\n     }\n   }\n+\n+  private static boolean is_active_validator(Validator validator, UnsignedLong epoch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6d4fc0f859bd0792a335f91db6c069d9d00d253"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0MTMxNg==", "bodyText": "its a different class...", "url": "https://github.com/ConsenSys/teku/pull/1333#discussion_r390041316", "createdAt": "2020-03-10T01:02:25Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/api/schema/BeaconValidators.java", "diffHunk": "@@ -105,7 +114,12 @@ public static long getEffectiveListSize(\n     if (!activeOnly) {\n       return list.size();\n     } else {\n-      return list.stream().filter(v -> ValidatorsUtil.is_active_validator(v, epoch)).count();\n+      return list.stream().filter(v -> is_active_validator(v, epoch)).count();\n     }\n   }\n+\n+  private static boolean is_active_validator(Validator validator, UnsignedLong epoch) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMDUwMA=="}, "originalCommit": {"oid": "d6d4fc0f859bd0792a335f91db6c069d9d00d253"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzAyNzQyOnYy", "diffSide": "LEFT", "path": "data/provider/src/main/java/tech/pegasys/artemis/api/schema/Fork.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDoyMDo1OFrOFz9lsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMTowMzowOFrOFz-Pew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMDc3MA==", "bodyText": "BLSPublicKeySerializer renamed as Fork is confusing", "url": "https://github.com/ConsenSys/teku/pull/1333#discussion_r390030770", "createdAt": "2020-03-10T00:20:58Z", "author": {"login": "macfarla"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/api/schema/Fork.java", "diffHunk": "@@ -11,18 +11,19 @@\n  * specific language governing permissions and limitations under the License.\n  */\n \n-package tech.pegasys.artemis.provider;\n+package tech.pegasys.artemis.api.schema;\n \n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n-import java.io.IOException;\n-import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import com.google.common.primitives.UnsignedLong;\n+import tech.pegasys.artemis.util.SSZTypes.Bytes4;\n \n-public class BLSPublicKeySerializer extends JsonSerializer<BLSPublicKey> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6d4fc0f859bd0792a335f91db6c069d9d00d253"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0MTQ2Nw==", "bodyText": "wow, that's not what happened at all, one got deleted and one got added... not sure why it'd think it's renamed...", "url": "https://github.com/ConsenSys/teku/pull/1333#discussion_r390041467", "createdAt": "2020-03-10T01:03:08Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/api/schema/Fork.java", "diffHunk": "@@ -11,18 +11,19 @@\n  * specific language governing permissions and limitations under the License.\n  */\n \n-package tech.pegasys.artemis.provider;\n+package tech.pegasys.artemis.api.schema;\n \n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n-import java.io.IOException;\n-import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import com.google.common.primitives.UnsignedLong;\n+import tech.pegasys.artemis.util.SSZTypes.Bytes4;\n \n-public class BLSPublicKeySerializer extends JsonSerializer<BLSPublicKey> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMDc3MA=="}, "originalCommit": {"oid": "d6d4fc0f859bd0792a335f91db6c069d9d00d253"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzAzMDE5OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDoyMjo1NlrOFz9ngg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDoyMjo1NlrOFz9ngg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMTIzNA==", "bodyText": "nice", "url": "https://github.com/ConsenSys/teku/pull/1333#discussion_r390031234", "createdAt": "2020-03-10T00:22:56Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "diffHunk": "@@ -81,48 +82,40 @@ public BeaconStateHandler(\n   public void handle(Context ctx) throws Exception {\n     try {\n       final Map<String, List<String>> parameters = ctx.queryParamMap();\n-      SafeFuture<Optional<BeaconState>> future = null;\n+      SafeFuture<Optional<BeaconState>> future;\n       if (parameters.size() == 0) {\n         throw new IllegalArgumentException(\"No query parameters specified\");\n       }\n-      if (!combinedClient.isStoreAvailable()) {\n+      if (!provider.isStoreAvailable()) {\n         ctx.status(SC_NO_CONTENT);\n         return;\n       }\n \n       if (parameters.containsKey(ROOT)) {\n-        future = queryByRootHash(validateQueryParameter(parameters, ROOT));\n+        future = provider.getStateByBlockRoot(getParameterValueAsBytes32(parameters, ROOT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6d4fc0f859bd0792a335f91db6c069d9d00d253"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzAzNzczOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandlerTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMDoyNzoyM1rOFz9r7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwMToyMDo0OVrOFz-flA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjM2NQ==", "bodyText": "do we need to create a new BeaconState here?", "url": "https://github.com/ConsenSys/teku/pull/1333#discussion_r390032365", "createdAt": "2020-03-10T00:27:23Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandlerTest.java", "diffHunk": "@@ -87,86 +91,67 @@ public void shouldReturnNotFoundWhenQueryAgainstMissingRootObject() throws Excep\n \n   @Test\n   public void shouldReturnBadRequestWhenNoParameterSpecified() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of());\n-\n     handler.handle(context);\n-\n     verify(context).status(SC_BAD_REQUEST);\n   }\n \n   @Test\n   public void shouldReturnBadRequestWhenBadSlotSpecified() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of(SLOT, List.of(\"not-an-int\")));\n-\n     handler.handle(context);\n-\n     verify(context).status(SC_BAD_REQUEST);\n   }\n \n   @Test\n   public void shouldReturnBadRequestWhenBadParamSpecified() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of(EPOCH, List.of(\"not-an-int\")));\n-\n     handler.handle(context);\n-\n     verify(context).status(SC_BAD_REQUEST);\n   }\n \n   @Test\n   public void shouldReturnBeaconStateObjectWhenQueryByRoot() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of(ROOT, List.of(blockRoot.toHexString())));\n \n     handler.handle(context);\n \n     verify(context).result(args.capture());\n     SafeFuture<String> data = args.getValue();\n-    assertEquals(data.get(), jsonProvider.objectToJSON(beaconState));\n+    assertEquals(data.get(), jsonProvider.objectToJSON(new BeaconState(beaconStateInternal)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6d4fc0f859bd0792a335f91db6c069d9d00d253"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjkwNw==", "bodyText": "nvm I get it. beaconStateInternal is the internal data structure", "url": "https://github.com/ConsenSys/teku/pull/1333#discussion_r390032907", "createdAt": "2020-03-10T00:29:34Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandlerTest.java", "diffHunk": "@@ -87,86 +91,67 @@ public void shouldReturnNotFoundWhenQueryAgainstMissingRootObject() throws Excep\n \n   @Test\n   public void shouldReturnBadRequestWhenNoParameterSpecified() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of());\n-\n     handler.handle(context);\n-\n     verify(context).status(SC_BAD_REQUEST);\n   }\n \n   @Test\n   public void shouldReturnBadRequestWhenBadSlotSpecified() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of(SLOT, List.of(\"not-an-int\")));\n-\n     handler.handle(context);\n-\n     verify(context).status(SC_BAD_REQUEST);\n   }\n \n   @Test\n   public void shouldReturnBadRequestWhenBadParamSpecified() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of(EPOCH, List.of(\"not-an-int\")));\n-\n     handler.handle(context);\n-\n     verify(context).status(SC_BAD_REQUEST);\n   }\n \n   @Test\n   public void shouldReturnBeaconStateObjectWhenQueryByRoot() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of(ROOT, List.of(blockRoot.toHexString())));\n \n     handler.handle(context);\n \n     verify(context).result(args.capture());\n     SafeFuture<String> data = args.getValue();\n-    assertEquals(data.get(), jsonProvider.objectToJSON(beaconState));\n+    assertEquals(data.get(), jsonProvider.objectToJSON(new BeaconState(beaconStateInternal)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjM2NQ=="}, "originalCommit": {"oid": "d6d4fc0f859bd0792a335f91db6c069d9d00d253"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMzIwMA==", "bodyText": "might make it clearer to make it a method call getMeTheExternalRepresentationOfTheInternalState(beaconStateInternal)", "url": "https://github.com/ConsenSys/teku/pull/1333#discussion_r390033200", "createdAt": "2020-03-10T00:30:48Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandlerTest.java", "diffHunk": "@@ -87,86 +91,67 @@ public void shouldReturnNotFoundWhenQueryAgainstMissingRootObject() throws Excep\n \n   @Test\n   public void shouldReturnBadRequestWhenNoParameterSpecified() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of());\n-\n     handler.handle(context);\n-\n     verify(context).status(SC_BAD_REQUEST);\n   }\n \n   @Test\n   public void shouldReturnBadRequestWhenBadSlotSpecified() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of(SLOT, List.of(\"not-an-int\")));\n-\n     handler.handle(context);\n-\n     verify(context).status(SC_BAD_REQUEST);\n   }\n \n   @Test\n   public void shouldReturnBadRequestWhenBadParamSpecified() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of(EPOCH, List.of(\"not-an-int\")));\n-\n     handler.handle(context);\n-\n     verify(context).status(SC_BAD_REQUEST);\n   }\n \n   @Test\n   public void shouldReturnBeaconStateObjectWhenQueryByRoot() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of(ROOT, List.of(blockRoot.toHexString())));\n \n     handler.handle(context);\n \n     verify(context).result(args.capture());\n     SafeFuture<String> data = args.getValue();\n-    assertEquals(data.get(), jsonProvider.objectToJSON(beaconState));\n+    assertEquals(data.get(), jsonProvider.objectToJSON(new BeaconState(beaconStateInternal)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjM2NQ=="}, "originalCommit": {"oid": "d6d4fc0f859bd0792a335f91db6c069d9d00d253"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0MTc4Ng==", "bodyText": "we're constructing the actual object we can use... i think the bigger problem is where we mix the handling of both objects, then it gets confusing... i'm trying to clean it up, but its not quite right yet...", "url": "https://github.com/ConsenSys/teku/pull/1333#discussion_r390041786", "createdAt": "2020-03-10T01:04:35Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandlerTest.java", "diffHunk": "@@ -87,86 +91,67 @@ public void shouldReturnNotFoundWhenQueryAgainstMissingRootObject() throws Excep\n \n   @Test\n   public void shouldReturnBadRequestWhenNoParameterSpecified() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of());\n-\n     handler.handle(context);\n-\n     verify(context).status(SC_BAD_REQUEST);\n   }\n \n   @Test\n   public void shouldReturnBadRequestWhenBadSlotSpecified() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of(SLOT, List.of(\"not-an-int\")));\n-\n     handler.handle(context);\n-\n     verify(context).status(SC_BAD_REQUEST);\n   }\n \n   @Test\n   public void shouldReturnBadRequestWhenBadParamSpecified() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of(EPOCH, List.of(\"not-an-int\")));\n-\n     handler.handle(context);\n-\n     verify(context).status(SC_BAD_REQUEST);\n   }\n \n   @Test\n   public void shouldReturnBeaconStateObjectWhenQueryByRoot() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of(ROOT, List.of(blockRoot.toHexString())));\n \n     handler.handle(context);\n \n     verify(context).result(args.capture());\n     SafeFuture<String> data = args.getValue();\n-    assertEquals(data.get(), jsonProvider.objectToJSON(beaconState));\n+    assertEquals(data.get(), jsonProvider.objectToJSON(new BeaconState(beaconStateInternal)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjM2NQ=="}, "originalCommit": {"oid": "d6d4fc0f859bd0792a335f91db6c069d9d00d253"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0NTU4OA==", "bodyText": "I just realised that object is already constructed above, i'll clean this one up and it'll be more clear...", "url": "https://github.com/ConsenSys/teku/pull/1333#discussion_r390045588", "createdAt": "2020-03-10T01:20:49Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandlerTest.java", "diffHunk": "@@ -87,86 +91,67 @@ public void shouldReturnNotFoundWhenQueryAgainstMissingRootObject() throws Excep\n \n   @Test\n   public void shouldReturnBadRequestWhenNoParameterSpecified() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of());\n-\n     handler.handle(context);\n-\n     verify(context).status(SC_BAD_REQUEST);\n   }\n \n   @Test\n   public void shouldReturnBadRequestWhenBadSlotSpecified() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of(SLOT, List.of(\"not-an-int\")));\n-\n     handler.handle(context);\n-\n     verify(context).status(SC_BAD_REQUEST);\n   }\n \n   @Test\n   public void shouldReturnBadRequestWhenBadParamSpecified() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of(EPOCH, List.of(\"not-an-int\")));\n-\n     handler.handle(context);\n-\n     verify(context).status(SC_BAD_REQUEST);\n   }\n \n   @Test\n   public void shouldReturnBeaconStateObjectWhenQueryByRoot() throws Exception {\n-    final BeaconStateHandler handler =\n-        new BeaconStateHandler(combinedChainDataClient, jsonProvider);\n+    final BeaconStateHandler handler = new BeaconStateHandler(provider, jsonProvider);\n     when(context.queryParamMap()).thenReturn(Map.of(ROOT, List.of(blockRoot.toHexString())));\n \n     handler.handle(context);\n \n     verify(context).result(args.capture());\n     SafeFuture<String> data = args.getValue();\n-    assertEquals(data.get(), jsonProvider.objectToJSON(beaconState));\n+    assertEquals(data.get(), jsonProvider.objectToJSON(new BeaconState(beaconStateInternal)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAzMjM2NQ=="}, "originalCommit": {"oid": "d6d4fc0f859bd0792a335f91db6c069d9d00d253"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2520, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}