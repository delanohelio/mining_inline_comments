{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MjY2NjE4", "number": 1729, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzo1ODoyMlrOD6dkIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMDowMzoyMVrOD6dn-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjI4Mzg0OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/beaconchain/methods/PingMessageHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzo1ODoyMlrOGSUTdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzo1ODoyMlrOGSUTdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2MDIxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                LOG.trace(\"Peer {} sent status.\", peer.getId());\n          \n          \n            \n                LOG.trace(\"Peer {} sent ping.\", peer.getId());", "url": "https://github.com/ConsenSys/teku/pull/1729#discussion_r421860212", "createdAt": "2020-05-07T23:58:22Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/beaconchain/methods/PingMessageHandler.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.beaconchain.methods;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.datastructures.networking.libp2p.rpc.PingMessage;\n+import tech.pegasys.teku.networking.eth2.peers.Eth2Peer;\n+import tech.pegasys.teku.networking.eth2.rpc.core.LocalMessageHandler;\n+import tech.pegasys.teku.networking.eth2.rpc.core.ResponseCallback;\n+\n+public class PingMessageHandler implements LocalMessageHandler<PingMessage, PingMessage> {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final MetadataMessagesFactory metadataMessagesFactory;\n+\n+  public PingMessageHandler(MetadataMessagesFactory metadataMessagesFactory) {\n+    this.metadataMessagesFactory = metadataMessagesFactory;\n+  }\n+\n+  @Override\n+  public void onIncomingMessage(\n+      final Eth2Peer peer,\n+      final PingMessage message,\n+      final ResponseCallback<PingMessage> callback) {\n+    LOG.trace(\"Peer {} sent status.\", peer.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7ffdc6d257f612aa98948d3223c4f1484c1cc2"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjI4Njk1OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/teku/ssz/SSZTypes/Bitlist.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzo1OTo1MVrOGSUVSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzo1OTo1MVrOGSUVSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2MDY4Mg==", "bodyText": "This already exists as countSetBits.  Renaming it probably makes sense.", "url": "https://github.com/ConsenSys/teku/pull/1729#discussion_r421860682", "createdAt": "2020-05-07T23:59:51Z", "author": {"login": "ajsutton"}, "path": "ssz/src/main/java/tech/pegasys/teku/ssz/SSZTypes/Bitlist.java", "diffHunk": "@@ -52,11 +52,21 @@ public void setBit(int i) {\n     data.set(i);\n   }\n \n+  public void setBits(int... indexes) {\n+    for (int i : indexes) {\n+      setBit(i);\n+    }\n+  }\n+\n   public boolean getBit(int i) {\n     checkElementIndex(i, size);\n     return data.get(i);\n   }\n \n+  public int getBitCount() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7ffdc6d257f612aa98948d3223c4f1484c1cc2"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjI5MDQyOnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/teku/util/async/FutureUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMDowMTo0MFrOGSUXVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMDowMTo0MFrOGSUXVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2MTIwNg==", "bodyText": "nit: Would be good to use an Optional here rather than a null check.", "url": "https://github.com/ConsenSys/teku/pull/1729#discussion_r421861206", "createdAt": "2020-05-08T00:01:40Z", "author": {"login": "ajsutton"}, "path": "util/src/main/java/tech/pegasys/teku/util/async/FutureUtil.java", "diffHunk": "@@ -14,7 +14,39 @@\n package tech.pegasys.teku.util.async;\n \n import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n \n public class FutureUtil {\n   public static <T> void ignoreFuture(final Future<T> future) {}\n+\n+  static void runWithFixedDelay(\n+      AsyncRunner runner,\n+      ExceptionThrowingRunnable runnable,\n+      SafeFuture<Void> task,\n+      long delayAmount,\n+      TimeUnit delayUnit,\n+      Consumer<Throwable> exceptionHandler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7ffdc6d257f612aa98948d3223c4f1484c1cc2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjI5MzY4OnYy", "diffSide": "RIGHT", "path": "util/src/test/java/tech/pegasys/teku/util/async/AsyncRunnerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMDowMzoyMVrOGSUZPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMToxNzoyM1rOGSiKbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2MTY5Mg==", "bodyText": "A fixed sleep time here is likely to cause us grief in CI.  Is it possible to test this with StubAsyncRunner so we can control exactly when future tasks execute?", "url": "https://github.com/ConsenSys/teku/pull/1729#discussion_r421861692", "createdAt": "2020-05-08T00:03:21Z", "author": {"login": "ajsutton"}, "path": "util/src/test/java/tech/pegasys/teku/util/async/AsyncRunnerTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package tech.pegasys.teku.util.async;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static tech.pegasys.teku.util.Waiter.waitFor;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.junit.jupiter.api.Test;\n+\n+public class AsyncRunnerTest {\n+\n+  @Test\n+  public void testRecurrentTaskCancel() throws Exception {\n+    AsyncRunner runner = DelayedExecutorAsyncRunner.create();\n+    AtomicInteger counter = new AtomicInteger();\n+    SafeFuture<Void> task =\n+        runner.runWithFixedDelay(counter::incrementAndGet, 100, TimeUnit.MILLISECONDS);\n+    waitFor(() -> assertThat(counter).hasValueGreaterThan(3));\n+    task.cancel(false);\n+    Thread.sleep(100); // task may be running during the cancel() call", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7ffdc6d257f612aa98948d3223c4f1484c1cc2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA4NzI3OA==", "bodyText": "Changed it in a bit another way: 76158c8", "url": "https://github.com/ConsenSys/teku/pull/1729#discussion_r422087278", "createdAt": "2020-05-08T11:17:23Z", "author": {"login": "Nashatyrev"}, "path": "util/src/test/java/tech/pegasys/teku/util/async/AsyncRunnerTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package tech.pegasys.teku.util.async;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static tech.pegasys.teku.util.Waiter.waitFor;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.junit.jupiter.api.Test;\n+\n+public class AsyncRunnerTest {\n+\n+  @Test\n+  public void testRecurrentTaskCancel() throws Exception {\n+    AsyncRunner runner = DelayedExecutorAsyncRunner.create();\n+    AtomicInteger counter = new AtomicInteger();\n+    SafeFuture<Void> task =\n+        runner.runWithFixedDelay(counter::incrementAndGet, 100, TimeUnit.MILLISECONDS);\n+    waitFor(() -> assertThat(counter).hasValueGreaterThan(3));\n+    task.cancel(false);\n+    Thread.sleep(100); // task may be running during the cancel() call", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2MTY5Mg=="}, "originalCommit": {"oid": "ba7ffdc6d257f612aa98948d3223c4f1484c1cc2"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3767, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}