{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3OTgyMDc1", "number": 1210, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjo1Njo0OVrODhtS1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzoxNToyNFrODhwKpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjcxNzAzOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjo1Njo0OVrOFsmErA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzoxNjoyN1rOFsmfxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwNTQ1Mg==", "bodyText": "trailing slash", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382305452", "createdAt": "2020-02-20T22:56:49Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "diffHunk": "@@ -13,26 +13,68 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.Store;\n \n-public class BeaconStateHandler implements BeaconRestApiHandler {\n-\n+public class BeaconStateHandler implements Handler {\n+  public static final String ROUTE = \"/beacon/state/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbafd86535ef2922773129d374f7daafd240ad6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwOTY1MA==", "bodyText": "or do we need that because there's a param", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382309650", "createdAt": "2020-02-20T23:08:11Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "diffHunk": "@@ -13,26 +13,68 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.Store;\n \n-public class BeaconStateHandler implements BeaconRestApiHandler {\n-\n+public class BeaconStateHandler implements Handler {\n+  public static final String ROUTE = \"/beacon/state/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwNTQ1Mg=="}, "originalCommit": {"oid": "dcbafd86535ef2922773129d374f7daafd240ad6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMjM5MQ==", "bodyText": "i can try to remove it again. I had copied one that had a slash, but it may not be needed now that things are less broken", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382312391", "createdAt": "2020-02-20T23:16:27Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "diffHunk": "@@ -13,26 +13,68 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.Store;\n \n-public class BeaconStateHandler implements BeaconRestApiHandler {\n-\n+public class BeaconStateHandler implements Handler {\n+  public static final String ROUTE = \"/beacon/state/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwNTQ1Mg=="}, "originalCommit": {"oid": "dcbafd86535ef2922773129d374f7daafd240ad6"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjcyMTM1OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjo1ODozOFrOFsmHbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzoxNzowNVrOFsmgpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwNjE1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"Request that the node return a beacon chain state that matches the provided criteria.\",\n          \n          \n            \n                      \"Request that the node return a beacon chain state that matches the specified tree hash root.\",", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382306158", "createdAt": "2020-02-20T22:58:38Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "diffHunk": "@@ -13,26 +13,68 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.Store;\n \n-public class BeaconStateHandler implements BeaconRestApiHandler {\n-\n+public class BeaconStateHandler implements Handler {\n+  public static final String ROUTE = \"/beacon/state/\";\n+  private final Logger LOG = LogManager.getLogger();\n   private final ChainStorageClient client;\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconStateHandler(ChainStorageClient client) {\n+  public BeaconStateHandler(ChainStorageClient client, JsonProvider jsonProvider) {\n     this.client = client;\n+    this.jsonProvider = jsonProvider;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/state\";\n+  private BeaconState queryByRootHash(String root) {\n+    Bytes32 root32 = Bytes32.fromHexString(root);\n+    Store store = client.getStore();\n+    if (store == null) {\n+      return client.getBlockState(root32).orElse(null);\n+    }\n+    return store.getBlockState(root32);\n   }\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get the beacon chain state that matches the specified tree hash root.\",\n+      tags = {\"Beacon\"},\n+      queryParams = {\n+        @OpenApiParam(name = \"root\", description = \"Tree hash root to query (Bytes32)\")\n+      },\n+      description =\n+          \"Request that the node return a beacon chain state that matches the provided criteria.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbafd86535ef2922773129d374f7daafd240ad6"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMjYxNA==", "bodyText": "i can do that for now and change it back to provided criteria once we add slot...", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382312614", "createdAt": "2020-02-20T23:17:05Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "diffHunk": "@@ -13,26 +13,68 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.Store;\n \n-public class BeaconStateHandler implements BeaconRestApiHandler {\n-\n+public class BeaconStateHandler implements Handler {\n+  public static final String ROUTE = \"/beacon/state/\";\n+  private final Logger LOG = LogManager.getLogger();\n   private final ChainStorageClient client;\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconStateHandler(ChainStorageClient client) {\n+  public BeaconStateHandler(ChainStorageClient client, JsonProvider jsonProvider) {\n     this.client = client;\n+    this.jsonProvider = jsonProvider;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/state\";\n+  private BeaconState queryByRootHash(String root) {\n+    Bytes32 root32 = Bytes32.fromHexString(root);\n+    Store store = client.getStore();\n+    if (store == null) {\n+      return client.getBlockState(root32).orElse(null);\n+    }\n+    return store.getBlockState(root32);\n   }\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get the beacon chain state that matches the specified tree hash root.\",\n+      tags = {\"Beacon\"},\n+      queryParams = {\n+        @OpenApiParam(name = \"root\", description = \"Tree hash root to query (Bytes32)\")\n+      },\n+      description =\n+          \"Request that the node return a beacon chain state that matches the provided criteria.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwNjE1OA=="}, "originalCommit": {"oid": "dcbafd86535ef2922773129d374f7daafd240ad6"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjcyMjQ2OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjo1ODo1M1rOFsmIAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzoxNzozMlrOFsmhXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwNjMwNA==", "bodyText": "query sounds weird", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382306304", "createdAt": "2020-02-20T22:58:53Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "diffHunk": "@@ -13,26 +13,68 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.Store;\n \n-public class BeaconStateHandler implements BeaconRestApiHandler {\n-\n+public class BeaconStateHandler implements Handler {\n+  public static final String ROUTE = \"/beacon/state/\";\n+  private final Logger LOG = LogManager.getLogger();\n   private final ChainStorageClient client;\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconStateHandler(ChainStorageClient client) {\n+  public BeaconStateHandler(ChainStorageClient client, JsonProvider jsonProvider) {\n     this.client = client;\n+    this.jsonProvider = jsonProvider;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/state\";\n+  private BeaconState queryByRootHash(String root) {\n+    Bytes32 root32 = Bytes32.fromHexString(root);\n+    Store store = client.getStore();\n+    if (store == null) {\n+      return client.getBlockState(root32).orElse(null);\n+    }\n+    return store.getBlockState(root32);\n   }\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get the beacon chain state that matches the specified tree hash root.\",\n+      tags = {\"Beacon\"},\n+      queryParams = {\n+        @OpenApiParam(name = \"root\", description = \"Tree hash root to query (Bytes32)\")\n+      },\n+      description =\n+          \"Request that the node return a beacon chain state that matches the provided criteria.\",\n+      responses = {\n+        @OpenApiResponse(status = \"200\", content = @OpenApiContent(from = BeaconState.class)),\n+        @OpenApiResponse(\n+            status = \"404\",\n+            description = \"The beacon state matching the supplied query was not found.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbafd86535ef2922773129d374f7daafd240ad6"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMjc5OA==", "bodyText": "query parameter?", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382312798", "createdAt": "2020-02-20T23:17:32Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "diffHunk": "@@ -13,26 +13,68 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.Store;\n \n-public class BeaconStateHandler implements BeaconRestApiHandler {\n-\n+public class BeaconStateHandler implements Handler {\n+  public static final String ROUTE = \"/beacon/state/\";\n+  private final Logger LOG = LogManager.getLogger();\n   private final ChainStorageClient client;\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconStateHandler(ChainStorageClient client) {\n+  public BeaconStateHandler(ChainStorageClient client, JsonProvider jsonProvider) {\n     this.client = client;\n+    this.jsonProvider = jsonProvider;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/state\";\n+  private BeaconState queryByRootHash(String root) {\n+    Bytes32 root32 = Bytes32.fromHexString(root);\n+    Store store = client.getStore();\n+    if (store == null) {\n+      return client.getBlockState(root32).orElse(null);\n+    }\n+    return store.getBlockState(root32);\n   }\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get the beacon chain state that matches the specified tree hash root.\",\n+      tags = {\"Beacon\"},\n+      queryParams = {\n+        @OpenApiParam(name = \"root\", description = \"Tree hash root to query (Bytes32)\")\n+      },\n+      description =\n+          \"Request that the node return a beacon chain state that matches the provided criteria.\",\n+      responses = {\n+        @OpenApiResponse(status = \"200\", content = @OpenApiContent(from = BeaconState.class)),\n+        @OpenApiResponse(\n+            status = \"404\",\n+            description = \"The beacon state matching the supplied query was not found.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwNjMwNA=="}, "originalCommit": {"oid": "dcbafd86535ef2922773129d374f7daafd240ad6"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njc0NjkwOnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/artemis/provider/BitlistDeserializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzowOTo0OVrOFsmXDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzoxODoxMFrOFsmiPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMDE1OQ==", "bodyText": "ummm - why null?", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382310159", "createdAt": "2020-02-20T23:09:49Z", "author": {"login": "macfarla"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/provider/BitlistDeserializer.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.provider;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import java.io.IOException;\n+import tech.pegasys.artemis.util.SSZTypes.Bitlist;\n+\n+public class BitlistDeserializer extends JsonDeserializer<Bitlist> {\n+  @Override\n+  public Bitlist deserialize(JsonParser p, DeserializationContext ctxt)\n+      throws IOException, JsonProcessingException {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbafd86535ef2922773129d374f7daafd240ad6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMzAyMw==", "bodyText": "ahm... .i wrote this last night after i did your review, that's embarrassing :(", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382313023", "createdAt": "2020-02-20T23:18:10Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/provider/BitlistDeserializer.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.provider;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import java.io.IOException;\n+import tech.pegasys.artemis.util.SSZTypes.Bitlist;\n+\n+public class BitlistDeserializer extends JsonDeserializer<Bitlist> {\n+  @Override\n+  public Bitlist deserialize(JsonParser p, DeserializationContext ctxt)\n+      throws IOException, JsonProcessingException {\n+    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMDE1OQ=="}, "originalCommit": {"oid": "dcbafd86535ef2922773129d374f7daafd240ad6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njc0ODQ4OnYy", "diffSide": "RIGHT", "path": "data/provider/src/test/java/tech/pegasys/artemis/provider/JsonProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzoxMDo0NFrOFsmYKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzoxMDo0NFrOFsmYKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMDQ0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void sszlistOfUnsignedLongShouldSerializeToJson() throws JsonProcessingException {\n          \n          \n            \n              public void sszListOfUnsignedLongShouldSerializeToJson() throws JsonProcessingException {", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382310443", "createdAt": "2020-02-20T23:10:44Z", "author": {"login": "macfarla"}, "path": "data/provider/src/test/java/tech/pegasys/artemis/provider/JsonProviderTest.java", "diffHunk": "@@ -53,6 +54,22 @@ public void vectorShouldSerializeToJson() throws JsonProcessingException {\n     assertEquals(serialized, \"[\" + Q + \"One\" + Q + \",\" + Q + \"Two\" + Q + \"]\");\n   }\n \n+  @Test\n+  public void vectorOfUnsignedLongShouldSerializeToJson() throws JsonProcessingException {\n+    SSZVector<UnsignedLong> data =\n+        new SSZVector<>(List.of(UnsignedLong.ONE, UnsignedLong.MAX_VALUE), UnsignedLong.class);\n+    String serialized = jsonProvider.objectToJSON(data);\n+    assertEquals(serialized, \"[1,18446744073709551615]\");\n+  }\n+\n+  @Test\n+  public void sszlistOfUnsignedLongShouldSerializeToJson() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbafd86535ef2922773129d374f7daafd240ad6"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njc0OTgwOnYy", "diffSide": "RIGHT", "path": "data/provider/src/test/java/tech/pegasys/artemis/provider/JsonProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzoxMToyNFrOFsmZAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzoxMToyNFrOFsmZAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMDY1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void vectorOfUnsignedLongShouldSerializeToJson() throws JsonProcessingException {\n          \n          \n            \n              public void sszVectorOfUnsignedLongShouldSerializeToJson() throws JsonProcessingException {", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382310659", "createdAt": "2020-02-20T23:11:24Z", "author": {"login": "macfarla"}, "path": "data/provider/src/test/java/tech/pegasys/artemis/provider/JsonProviderTest.java", "diffHunk": "@@ -53,6 +54,22 @@ public void vectorShouldSerializeToJson() throws JsonProcessingException {\n     assertEquals(serialized, \"[\" + Q + \"One\" + Q + \",\" + Q + \"Two\" + Q + \"]\");\n   }\n \n+  @Test\n+  public void vectorOfUnsignedLongShouldSerializeToJson() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbafd86535ef2922773129d374f7daafd240ad6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njc1NDAzOnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/artemis/util/SSZTypes/SSZVector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzoxMzowM1rOFsmbfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzoxOTo1NFrOFsmkcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMTI5NQ==", "bodyText": "should it say \"must have specified size > 0\"", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382311295", "createdAt": "2020-02-20T23:13:03Z", "author": {"login": "macfarla"}, "path": "util/src/main/java/tech/pegasys/artemis/util/SSZTypes/SSZVector.java", "diffHunk": "@@ -39,6 +42,17 @@ public SSZVector(List<T> list, Class<T> classInfo) {\n     this.classInfo = classInfo;\n   }\n \n+  @JsonCreator\n+  @SuppressWarnings(\"unchecked\")\n+  public SSZVector(List<T> list) {\n+    super(list);\n+    maxSize = list.size();\n+    if (maxSize < 1) {\n+      throw new UnsupportedOperationException(\"SSZVector must have specified size\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcbafd86535ef2922773129d374f7daafd240ad6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMzU4Ng==", "bodyText": "yep it can do - this is just the operation exception from above", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382313586", "createdAt": "2020-02-20T23:19:54Z", "author": {"login": "rolfyone"}, "path": "util/src/main/java/tech/pegasys/artemis/util/SSZTypes/SSZVector.java", "diffHunk": "@@ -39,6 +42,17 @@ public SSZVector(List<T> list, Class<T> classInfo) {\n     this.classInfo = classInfo;\n   }\n \n+  @JsonCreator\n+  @SuppressWarnings(\"unchecked\")\n+  public SSZVector(List<T> list) {\n+    super(list);\n+    maxSize = list.size();\n+    if (maxSize < 1) {\n+      throw new UnsupportedOperationException(\"SSZVector must have specified size\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMTI5NQ=="}, "originalCommit": {"oid": "dcbafd86535ef2922773129d374f7daafd240ad6"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzE4NzU5OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/artemis/util/SSZTypes/SSZVector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzoxNToyNFrOFsqeFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzoxNToyNFrOFsqeFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NzQ5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"SSZVector must at least 1 element in the list used to initialize\");\n          \n          \n            \n                      \"SSZVector must have at least 1 element in the list used to initialize\");", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382377494", "createdAt": "2020-02-21T03:15:24Z", "author": {"login": "macfarla"}, "path": "util/src/main/java/tech/pegasys/artemis/util/SSZTypes/SSZVector.java", "diffHunk": "@@ -39,6 +42,18 @@ public SSZVector(List<T> list, Class<T> classInfo) {\n     this.classInfo = classInfo;\n   }\n \n+  @JsonCreator\n+  @SuppressWarnings(\"unchecked\")\n+  public SSZVector(List<T> list) {\n+    super(list);\n+    maxSize = list.size();\n+    if (maxSize < 1) {\n+      throw new UnsupportedOperationException(\n+          \"SSZVector must at least 1 element in the list used to initialize\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff1866ccb2fc804217dfc74b75fe91bb83bfe67"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2652, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}