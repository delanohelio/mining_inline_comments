{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MjY2NDEx", "number": 1529, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTowNjozNlrODul-vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTowNjozNlrODul-vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTgzMzU2OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/artemis/util/file/FileUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTowNjozNlrOGApq0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjozMjoyN1rOGArl8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzNTg4OA==", "bodyText": "I'm a bit confused here. Are you not supposed to copy the current entry instead of the whole archiveStream you're iterating on?", "url": "https://github.com/ConsenSys/teku/pull/1529#discussion_r403335888", "createdAt": "2020-04-03T21:06:36Z", "author": {"login": "cemozerr"}, "path": "util/src/main/java/tech/pegasys/artemis/util/file/FileUtil.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.file;\n+\n+import com.google.common.io.MoreFiles;\n+import com.google.common.io.RecursiveDeleteOption;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.List;\n+import org.apache.commons.compress.archivers.ArchiveEntry;\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveInputStream;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public abstract class FileUtil {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  public static void unTar(final File inputTarFile, final File outputDir)\n+      throws IOException, ArchiveException {\n+    final InputStream fileStream = new FileInputStream(inputTarFile);\n+    try (final ArchiveInputStream archiveStream =\n+        new ArchiveStreamFactory().createArchiveInputStream(\"tar\", fileStream)) {\n+      ArchiveEntry entry;\n+      while ((entry = archiveStream.getNextEntry()) != null) {\n+        final File outputFile = new File(outputDir, entry.getName());\n+        if (entry.isDirectory() && !outputFile.exists()) {\n+          // Create directory\n+          if (!outputFile.mkdirs()) {\n+            throw new IllegalStateException(\n+                \"Couldn't create directory \" + outputFile.getAbsolutePath());\n+          }\n+        } else if (!entry.isDirectory()) {\n+          // Create file\n+          try (final OutputStream outputFileStream = new FileOutputStream(outputFile)) {\n+            IOUtils.copy(archiveStream, outputFileStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abe8fdd80a6821352db0239c7f7848ef7cdd9152"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2NzQxMA==", "bodyText": "The API is kind of weird - but it appears to work and this basically matches the sample code here: https://commons.apache.org/proper/commons-compress/examples.html\nThe current entry doesn't give you access to an InputStream.", "url": "https://github.com/ConsenSys/teku/pull/1529#discussion_r403367410", "createdAt": "2020-04-03T22:32:27Z", "author": {"login": "mbaxter"}, "path": "util/src/main/java/tech/pegasys/artemis/util/file/FileUtil.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.file;\n+\n+import com.google.common.io.MoreFiles;\n+import com.google.common.io.RecursiveDeleteOption;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.List;\n+import org.apache.commons.compress.archivers.ArchiveEntry;\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.archivers.ArchiveInputStream;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public abstract class FileUtil {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  public static void unTar(final File inputTarFile, final File outputDir)\n+      throws IOException, ArchiveException {\n+    final InputStream fileStream = new FileInputStream(inputTarFile);\n+    try (final ArchiveInputStream archiveStream =\n+        new ArchiveStreamFactory().createArchiveInputStream(\"tar\", fileStream)) {\n+      ArchiveEntry entry;\n+      while ((entry = archiveStream.getNextEntry()) != null) {\n+        final File outputFile = new File(outputDir, entry.getName());\n+        if (entry.isDirectory() && !outputFile.exists()) {\n+          // Create directory\n+          if (!outputFile.mkdirs()) {\n+            throw new IllegalStateException(\n+                \"Couldn't create directory \" + outputFile.getAbsolutePath());\n+          }\n+        } else if (!entry.isDirectory()) {\n+          // Create file\n+          try (final OutputStream outputFileStream = new FileOutputStream(outputFile)) {\n+            IOUtils.copy(archiveStream, outputFileStream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzNTg4OA=="}, "originalCommit": {"oid": "abe8fdd80a6821352db0239c7f7848ef7cdd9152"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3808, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}