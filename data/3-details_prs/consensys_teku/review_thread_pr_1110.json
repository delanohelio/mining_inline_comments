{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MjAwNjQw", "number": 1110, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToxMTo1N1rODaNKyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjozNzozMFrODaiv4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODA1MzIzOnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToxMTo1N1rOFhBu7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToxMTo1N1rOFhBu7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE3NTcyNQ==", "bodyText": "It's probably clearer to just work with the deposit object:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  genesisEth1BlockHash = Bytes32.fromHexString(event.getResponse().log.getBlockHash());\n          \n          \n            \n                  genesisEth1BlockHash = Bytes32.fromHexString(depositWithIndex.getLog().getBlockHash());", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370175725", "createdAt": "2020-01-23T15:11:57Z", "author": {"login": "mbaxter"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateProcessor.java", "diffHunk": "@@ -86,13 +89,20 @@ public Bytes32 processHead() {\n   @Subscribe\n   public void onDeposit(tech.pegasys.artemis.pow.event.Deposit event) {\n     STDOUT.log(Level.DEBUG, \"New deposit received\");\n-    deposits.add(DepositUtil.convertDepositEventToOperationDeposit(event));\n+    final DepositWithIndex depositWithIndex =\n+        DepositUtil.convertDepositEventToOperationDeposit(event);\n+    deposits.add(depositWithIndex);\n+    // Eth1 hash has to be from the block containing the last required deposit but we may be\n+    // receiving deposits out of order.\n+    if (deposits.last().equals(depositWithIndex)) {\n+      genesisEth1BlockHash = Bytes32.fromHexString(event.getResponse().log.getBlockHash());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e78b1d40c7307ebb284865fa76806f266b856f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODExMDg4OnYy", "diffSide": "LEFT", "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/artemis/test/acceptance/GenesisStateAcceptanceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToyNjowNlrOFhCS5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMDoyMzo0NFrOFhQ2ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4NDkzMg==", "bodyText": "So, this test passes deterministically because we're sending exactly the right number of deposits to trigger genesis?", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370184932", "createdAt": "2020-01-23T15:26:06Z", "author": {"login": "mbaxter"}, "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/artemis/test/acceptance/GenesisStateAcceptanceTest.java", "diffHunk": "@@ -13,13 +13,11 @@\n \n package tech.pegasys.artemis.test.acceptance;\n \n-import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n import tech.pegasys.artemis.test.acceptance.dsl.AcceptanceTestBase;\n import tech.pegasys.artemis.test.acceptance.dsl.ArtemisNode;\n import tech.pegasys.artemis.test.acceptance.dsl.BesuNode;\n \n-@Disabled(\"Genesis generation does not yet match\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e78b1d40c7307ebb284865fa76806f266b856f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyMzQzNA==", "bodyText": "Yes.  The new, improved version now can handle more than the required deposits as long as they're in different blocks (ie it doesn't include all transactions from a block if only some are required to trigger genesis).", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370423434", "createdAt": "2020-01-24T00:23:44Z", "author": {"login": "ajsutton"}, "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/artemis/test/acceptance/GenesisStateAcceptanceTest.java", "diffHunk": "@@ -13,13 +13,11 @@\n \n package tech.pegasys.artemis.test.acceptance;\n \n-import org.junit.jupiter.api.Disabled;\n import org.junit.jupiter.api.Test;\n import tech.pegasys.artemis.test.acceptance.dsl.AcceptanceTestBase;\n import tech.pegasys.artemis.test.acceptance.dsl.ArtemisNode;\n import tech.pegasys.artemis.test.acceptance.dsl.BesuNode;\n \n-@Disabled(\"Genesis generation does not yet match\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4NDkzMg=="}, "originalCommit": {"oid": "55e78b1d40c7307ebb284865fa76806f266b856f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODExNzA1OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/DepositUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToyNzoyOVrOFhCWmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMDoyNTo0MVrOFhQ4Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4NTg4Mg==", "bodyText": "Doesn't look like we need the transaction objects:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    web3.ethGetBlockByHash(blockHash.toHexString(), true).send().getBlock().getTimestamp());\n          \n          \n            \n                    web3.ethGetBlockByHash(blockHash.toHexString(), false).send().getBlock().getTimestamp());", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370185882", "createdAt": "2020-01-23T15:27:29Z", "author": {"login": "mbaxter"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/DepositUtil.java", "diffHunk": "@@ -198,13 +196,10 @@ public static DepositWithIndex convertDepositEventToOperationDeposit(\n     return new tech.pegasys.artemis.pow.event.Deposit(response);\n   }\n \n-  public static UnsignedLong getEpochBlockTimeByDepositBlockNumber(\n-      BigInteger blockNumber, String provider) throws IOException {\n+  public static UnsignedLong getEpochBlockTimeByDepositBlockHash(Bytes32 blockHash, String provider)\n+      throws IOException {\n     Web3j web3 = Web3j.build(new HttpService(provider));\n     return UnsignedLong.valueOf(\n-        web3.ethGetBlockByNumber(new DefaultBlockParameterNumber(blockNumber), true)\n-            .send()\n-            .getBlock()\n-            .getTimestamp());\n+        web3.ethGetBlockByHash(blockHash.toHexString(), true).send().getBlock().getTimestamp());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e78b1d40c7307ebb284865fa76806f266b856f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyMzg5MA==", "bodyText": "Good spot, we don't.", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370423890", "createdAt": "2020-01-24T00:25:41Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/DepositUtil.java", "diffHunk": "@@ -198,13 +196,10 @@ public static DepositWithIndex convertDepositEventToOperationDeposit(\n     return new tech.pegasys.artemis.pow.event.Deposit(response);\n   }\n \n-  public static UnsignedLong getEpochBlockTimeByDepositBlockNumber(\n-      BigInteger blockNumber, String provider) throws IOException {\n+  public static UnsignedLong getEpochBlockTimeByDepositBlockHash(Bytes32 blockHash, String provider)\n+      throws IOException {\n     Web3j web3 = Web3j.build(new HttpService(provider));\n     return UnsignedLong.valueOf(\n-        web3.ethGetBlockByNumber(new DefaultBlockParameterNumber(blockNumber), true)\n-            .send()\n-            .getBlock()\n-            .getTimestamp());\n+        web3.ethGetBlockByHash(blockHash.toHexString(), true).send().getBlock().getTimestamp());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4NTg4Mg=="}, "originalCommit": {"oid": "55e78b1d40c7307ebb284865fa76806f266b856f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODE0MjQ1OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNTozNDowN1rOFhCmmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwMDoyODo1MVrOFhQ7SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4OTk3Ng==", "bodyText": "Should this be volatile?", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370189976", "createdAt": "2020-01-23T15:34:07Z", "author": {"login": "mbaxter"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateProcessor.java", "diffHunk": "@@ -53,7 +55,8 @@\n   private final BlockImporter blockImporter;\n   private final ChainStorageClient chainStorageClient;\n   private final ArtemisConfiguration config;\n-  private final List<DepositWithIndex> deposits = new ArrayList<>();\n+  private final NavigableSet<DepositWithIndex> deposits = new TreeSet<>();\n+  private Bytes32 genesisEth1BlockHash;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e78b1d40c7307ebb284865fa76806f266b856f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE5MTA1Nw==", "bodyText": "Alternatively, could we just make this a local variable within onDeposit and always set it to the last deposit's blockHash?", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370191057", "createdAt": "2020-01-23T15:35:58Z", "author": {"login": "mbaxter"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateProcessor.java", "diffHunk": "@@ -53,7 +55,8 @@\n   private final BlockImporter blockImporter;\n   private final ChainStorageClient chainStorageClient;\n   private final ArtemisConfiguration config;\n-  private final List<DepositWithIndex> deposits = new ArrayList<>();\n+  private final NavigableSet<DepositWithIndex> deposits = new TreeSet<>();\n+  private Bytes32 genesisEth1BlockHash;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4OTk3Ng=="}, "originalCommit": {"oid": "55e78b1d40c7307ebb284865fa76806f266b856f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyNDY0OQ==", "bodyText": "Doesn't matter now, but each @Subscribe method is called inside a synchronized block (specific to the method, not the class) so as long as the variables are only used as a result of a single event method, we can treat it as single threaded.", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370424649", "createdAt": "2020-01-24T00:28:51Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/StateProcessor.java", "diffHunk": "@@ -53,7 +55,8 @@\n   private final BlockImporter blockImporter;\n   private final ChainStorageClient chainStorageClient;\n   private final ArtemisConfiguration config;\n-  private final List<DepositWithIndex> deposits = new ArrayList<>();\n+  private final NavigableSet<DepositWithIndex> deposits = new TreeSet<>();\n+  private Bytes32 genesisEth1BlockHash;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4OTk3Ng=="}, "originalCommit": {"oid": "55e78b1d40c7307ebb284865fa76806f266b856f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTM1Mjc2OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/DepositQueue.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNToyNDowN1rOFhhJFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNToyNDowN1rOFhhJFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY5MDMyNA==", "bodyText": "nice \ud83c\udf89", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370690324", "createdAt": "2020-01-24T15:24:07Z", "author": {"login": "mbaxter"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/DepositQueue.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.statetransition;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Iterator;\n+import java.util.NavigableSet;\n+import java.util.TreeSet;\n+import java.util.function.Consumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.artemis.datastructures.operations.DepositWithIndex;\n+\n+public class DepositQueue {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba89b216c70f95db6402353cc7d2cec513143f95"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTUzOTYyOnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/DepositQueue.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjoyMTo0NVrOFhi-JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODo1MjozNVrOFiwkCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyMDI5Mg==", "bodyText": "First time seeing you use iterators. Why did you choose an iterator here?", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370720292", "createdAt": "2020-01-24T16:21:45Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/DepositQueue.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.statetransition;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Iterator;\n+import java.util.NavigableSet;\n+import java.util.TreeSet;\n+import java.util.function.Consumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.artemis.datastructures.operations.DepositWithIndex;\n+\n+public class DepositQueue {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final NavigableSet<DepositWithIndex> pendingDeposits = new TreeSet<>();\n+  private final Consumer<DepositWithIndex> depositConsumer;\n+  private UnsignedLong expectedDepositIndex = UnsignedLong.ZERO;\n+\n+  public DepositQueue(final Consumer<DepositWithIndex> depositConsumer) {\n+    this.depositConsumer = depositConsumer;\n+  }\n+\n+  public void onDeposit(DepositWithIndex deposit) {\n+    LOG.trace(\"New deposit received with index {}\", deposit.getIndex());\n+    pendingDeposits.add(deposit);\n+    processPendingDeposits();\n+  }\n+\n+  private void processPendingDeposits() {\n+    for (Iterator<DepositWithIndex> i = pendingDeposits.iterator(); i.hasNext(); ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba89b216c70f95db6402353cc7d2cec513143f95"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1ODYxMw==", "bodyText": "I needed to be able to remove items as I iterated. You can't just call pendingDeposits.remove because you'll get a ConcurrentAccessException so you have to use Iterator.remove (usually more efficient too because the iterator knows where it's up to).", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370858613", "createdAt": "2020-01-24T21:51:53Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/DepositQueue.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.statetransition;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Iterator;\n+import java.util.NavigableSet;\n+import java.util.TreeSet;\n+import java.util.function.Consumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.artemis.datastructures.operations.DepositWithIndex;\n+\n+public class DepositQueue {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final NavigableSet<DepositWithIndex> pendingDeposits = new TreeSet<>();\n+  private final Consumer<DepositWithIndex> depositConsumer;\n+  private UnsignedLong expectedDepositIndex = UnsignedLong.ZERO;\n+\n+  public DepositQueue(final Consumer<DepositWithIndex> depositConsumer) {\n+    this.depositConsumer = depositConsumer;\n+  }\n+\n+  public void onDeposit(DepositWithIndex deposit) {\n+    LOG.trace(\"New deposit received with index {}\", deposit.getIndex());\n+    pendingDeposits.add(deposit);\n+    processPendingDeposits();\n+  }\n+\n+  private void processPendingDeposits() {\n+    for (Iterator<DepositWithIndex> i = pendingDeposits.iterator(); i.hasNext(); ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyMDI5Mg=="}, "originalCommit": {"oid": "ba89b216c70f95db6402353cc7d2cec513143f95"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk5MTU2Mw==", "bodyText": "Makes sense. Thank you.", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r371991563", "createdAt": "2020-01-28T18:52:35Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/DepositQueue.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.statetransition;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Iterator;\n+import java.util.NavigableSet;\n+import java.util.TreeSet;\n+import java.util.function.Consumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.artemis.datastructures.operations.DepositWithIndex;\n+\n+public class DepositQueue {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final NavigableSet<DepositWithIndex> pendingDeposits = new TreeSet<>();\n+  private final Consumer<DepositWithIndex> depositConsumer;\n+  private UnsignedLong expectedDepositIndex = UnsignedLong.ZERO;\n+\n+  public DepositQueue(final Consumer<DepositWithIndex> depositConsumer) {\n+    this.depositConsumer = depositConsumer;\n+  }\n+\n+  public void onDeposit(DepositWithIndex deposit) {\n+    LOG.trace(\"New deposit received with index {}\", deposit.getIndex());\n+    pendingDeposits.add(deposit);\n+    processPendingDeposits();\n+  }\n+\n+  private void processPendingDeposits() {\n+    for (Iterator<DepositWithIndex> i = pendingDeposits.iterator(); i.hasNext(); ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyMDI5Mg=="}, "originalCommit": {"oid": "ba89b216c70f95db6402353cc7d2cec513143f95"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTU4ODgxOnYy", "diffSide": "RIGHT", "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjozNzozMFrOFhjdDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODo1Mzo0M1rOFiwmOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyODIwNQ==", "bodyText": "One thing I noticed in this PR, unrelated to this PR is that process slot gets called only when storeTime is greater than nextSlotStartTime. Since, at least with the current constants, onTick() gets called twice every second, in the worst-case scenario we're losing 500 ms processing time for each slot. I think we should fix this. Here's the ticket: https://pegasys1.atlassian.net/secure/RapidBoard.jspa?rapidView=67&modal=detail&selectedIssue=BC-244\nOne idea is to have a SlotScheduler class that has its own timer which gets kicked off exactly at genesis. This class could post SlotEvents, BroadcastAttestationEvents and BroadcastAggregateEvents just like the processSlot method here, however, it would post those events way more precisely.", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370728205", "createdAt": "2020-01-24T16:37:30Z", "author": {"login": "cemozerr"}, "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -281,21 +281,19 @@ private void onStoreInitializedEvent(final StoreInitializedEvent event) {\n   @Subscribe\n   @SuppressWarnings(\"unused\")\n   private void onTick(Date date) {\n-    if (!testMode && !stateProcessor.isGenesisReady()) {\n+    if (chainStorageClient.isPreGenesis()) {\n       return;\n     }\n     final UnsignedLong currentTime = UnsignedLong.valueOf(date.getTime() / 1000);\n-    if (chainStorageClient.getStore() != null) {\n-      final Store.Transaction transaction = chainStorageClient.startStoreTransaction();\n-      on_tick(transaction, currentTime);\n-      transaction.commit().join();\n-      final UnsignedLong nextSlotStartTime =\n-          chainStorageClient\n-              .getGenesisTime()\n-              .plus(nodeSlot.times(UnsignedLong.valueOf(SECONDS_PER_SLOT)));\n-      if (chainStorageClient.getStore().getTime().compareTo(nextSlotStartTime) >= 0) {\n-        processSlot();\n-      }\n+    final Store.Transaction transaction = chainStorageClient.startStoreTransaction();\n+    on_tick(transaction, currentTime);\n+    transaction.commit().join();\n+    final UnsignedLong nextSlotStartTime =\n+        chainStorageClient\n+            .getGenesisTime()\n+            .plus(nodeSlot.times(UnsignedLong.valueOf(SECONDS_PER_SLOT)));\n+    if (chainStorageClient.getStore().getTime().compareTo(nextSlotStartTime) >= 0) {\n+      processSlot();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba89b216c70f95db6402353cc7d2cec513143f95"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MDY0NQ==", "bodyText": "Yep, definitely some improvements to be made around here.  I've been thinking of having a separate TimeService that fires time, slot and epoch events in.  Would need to do more thinking and playing to know if that will really work, but it's appealing in terms of being able to start doing time travel in tests because it's a single source of where time is up to.", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r370860645", "createdAt": "2020-01-24T21:57:27Z", "author": {"login": "ajsutton"}, "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -281,21 +281,19 @@ private void onStoreInitializedEvent(final StoreInitializedEvent event) {\n   @Subscribe\n   @SuppressWarnings(\"unused\")\n   private void onTick(Date date) {\n-    if (!testMode && !stateProcessor.isGenesisReady()) {\n+    if (chainStorageClient.isPreGenesis()) {\n       return;\n     }\n     final UnsignedLong currentTime = UnsignedLong.valueOf(date.getTime() / 1000);\n-    if (chainStorageClient.getStore() != null) {\n-      final Store.Transaction transaction = chainStorageClient.startStoreTransaction();\n-      on_tick(transaction, currentTime);\n-      transaction.commit().join();\n-      final UnsignedLong nextSlotStartTime =\n-          chainStorageClient\n-              .getGenesisTime()\n-              .plus(nodeSlot.times(UnsignedLong.valueOf(SECONDS_PER_SLOT)));\n-      if (chainStorageClient.getStore().getTime().compareTo(nextSlotStartTime) >= 0) {\n-        processSlot();\n-      }\n+    final Store.Transaction transaction = chainStorageClient.startStoreTransaction();\n+    on_tick(transaction, currentTime);\n+    transaction.commit().join();\n+    final UnsignedLong nextSlotStartTime =\n+        chainStorageClient\n+            .getGenesisTime()\n+            .plus(nodeSlot.times(UnsignedLong.valueOf(SECONDS_PER_SLOT)));\n+    if (chainStorageClient.getStore().getTime().compareTo(nextSlotStartTime) >= 0) {\n+      processSlot();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyODIwNQ=="}, "originalCommit": {"oid": "ba89b216c70f95db6402353cc7d2cec513143f95"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk5MjEyMQ==", "bodyText": "Agreed. A separate TimeService is a good direction.", "url": "https://github.com/ConsenSys/teku/pull/1110#discussion_r371992121", "createdAt": "2020-01-28T18:53:43Z", "author": {"login": "cemozerr"}, "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -281,21 +281,19 @@ private void onStoreInitializedEvent(final StoreInitializedEvent event) {\n   @Subscribe\n   @SuppressWarnings(\"unused\")\n   private void onTick(Date date) {\n-    if (!testMode && !stateProcessor.isGenesisReady()) {\n+    if (chainStorageClient.isPreGenesis()) {\n       return;\n     }\n     final UnsignedLong currentTime = UnsignedLong.valueOf(date.getTime() / 1000);\n-    if (chainStorageClient.getStore() != null) {\n-      final Store.Transaction transaction = chainStorageClient.startStoreTransaction();\n-      on_tick(transaction, currentTime);\n-      transaction.commit().join();\n-      final UnsignedLong nextSlotStartTime =\n-          chainStorageClient\n-              .getGenesisTime()\n-              .plus(nodeSlot.times(UnsignedLong.valueOf(SECONDS_PER_SLOT)));\n-      if (chainStorageClient.getStore().getTime().compareTo(nextSlotStartTime) >= 0) {\n-        processSlot();\n-      }\n+    final Store.Transaction transaction = chainStorageClient.startStoreTransaction();\n+    on_tick(transaction, currentTime);\n+    transaction.commit().join();\n+    final UnsignedLong nextSlotStartTime =\n+        chainStorageClient\n+            .getGenesisTime()\n+            .plus(nodeSlot.times(UnsignedLong.valueOf(SECONDS_PER_SLOT)));\n+    if (chainStorageClient.getStore().getTime().compareTo(nextSlotStartTime) >= 0) {\n+      processSlot();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcyODIwNQ=="}, "originalCommit": {"oid": "ba89b216c70f95db6402353cc7d2cec513143f95"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2794, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}