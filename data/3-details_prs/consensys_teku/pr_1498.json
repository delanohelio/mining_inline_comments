{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MDIxMTIy", "number": 1498, "title": "Clean Storage Client", "bodyText": "PR Description\nThis PR does a few things:\n\n Renames ChainStorageClient to RecentChainData (the bulk of file changes comes from here, my apologies)\n Makes RecentChainData an abstract class, and StorageBackedRecentChainData (which is used in production) and MemoryOnlyRecentChainData (used in testing) implements it.\n Replaces the two-way events for making sure Store was correctly initialized from the Storage, with a retry mechanism on the RecentChainData side, which now uses EventChannels instead of EventBus events.", "createdAt": "2020-03-28T00:36:38Z", "url": "https://github.com/ConsenSys/teku/pull/1498", "merged": true, "mergeCommit": {"oid": "5c5f6c14fa016bf180335148b5339f03b4048671"}, "closed": true, "closedAt": "2020-03-30T18:03:47Z", "author": {"login": "cemozerr"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcR6PDkAH2gAyMzk1MDIxMTIyOjM3ODE2NTkyMGMzOTk4ODUzMTIwOWU0ZmE2NTZkNDBjNDJmNjI0Nzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcSxtDwgH2gAyMzk1MDIxMTIyOmFiM2RiOWQ1MGNiOWUxYzIyYmQwOWM2MzA4NTUyYzQ3YmI2MTkzMjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "378165920c39988531209e4fa656d40c42f62479", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/378165920c39988531209e4fa656d40c42f62479", "committedDate": "2020-03-28T00:33:44Z", "message": "Create MemoryOnlyChainStorageClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8869e1c6040a373751758640530ceedfc7131791", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/8869e1c6040a373751758640530ceedfc7131791", "committedDate": "2020-03-28T00:35:07Z", "message": "Clean and rename ChainStorageClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ad4d8408e20faf0735413ddbb92316c6b24e10f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/5ad4d8408e20faf0735413ddbb92316c6b24e10f", "committedDate": "2020-03-28T00:36:54Z", "message": "Run spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/3d1ae1d9ef9ed803862a36b4d1037645b226e63b", "committedDate": "2020-03-28T01:00:36Z", "message": "Remove accidentally committed data files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNDU0MjQz", "url": "https://github.com/ConsenSys/teku/pull/1498#pullrequestreview-383454243", "createdAt": "2020-03-29T20:51:57Z", "commit": {"oid": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b"}, "state": "APPROVED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMDo1MTo1N1rOF9VC0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQyMTowMzo1NlrOF9VIOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MjI0Mg==", "bodyText": "Not sure we need to add this to the repo.", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399852242", "createdAt": "2020-03-29T20:51:57Z", "author": {"login": "ajsutton"}, "path": "prometheus.yml", "diffHunk": "@@ -0,0 +1,9 @@\n+scrape_configs:\n+  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.\n+  - job_name: 'tekuLighthouse5'\n+\n+    # Override the global default and scrape targets from this job every 5 seconds.\n+    scrape_interval: 5s\n+    scheme: http\n+    static_configs:\n+        - targets: ['ec2-18-209-46-236.compute-1.amazonaws.com:8008']", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MjMyOQ==", "bodyText": "nit: Probably more semantically accurate to use an IllegalStateException here.", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399852329", "createdAt": "2020-03-29T20:52:47Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/artemis/storage/ChainStorageServer.java", "diffHunk": "@@ -77,9 +71,13 @@ private synchronized void handleStoreUpdate(final StorageUpdateResult result) {\n     }\n   }\n \n-  @Subscribe\n-  public void onStoreRequest(final GetStoreRequest request) {\n-    eventBus.post(new GetStoreResponse(request.getId(), getStore()));\n+  @Override\n+  public SafeFuture<Optional<Store>> onStoreRequest() {\n+    if (database == null) {\n+      return SafeFuture.failedFuture(new RuntimeException(\"Database not initialized yet\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MjczNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @SuppressWarnings({\"FutureReturnValueIgnored\"})\n          \n          \n            \n              private SafeFuture<RecentChainData> initializeFromStorage() {\n          \n          \n            \n                LOG.trace(\"Begin initializing ChainStorageClient from storage\");\n          \n          \n            \n                SafeFuture<RecentChainData> recentChainDataFuture = new SafeFuture<>();\n          \n          \n            \n                makeStoreRequest()\n          \n          \n            \n                    .thenAccept(\n          \n          \n            \n                        maybeStore -> {\n          \n          \n            \n                          maybeStore.ifPresent(\n          \n          \n            \n                              (store) -> {\n          \n          \n            \n                                this.setStore(store);\n          \n          \n            \n                                LOG.debug(\"Finish initializing ChainStorageClient from storage\");\n          \n          \n            \n                              });\n          \n          \n            \n                          recentChainDataFuture.complete(this);\n          \n          \n            \n                        });\n          \n          \n            \n                return recentChainDataFuture;\n          \n          \n            \n              }\n          \n          \n            \n               private SafeFuture<RecentChainData> initializeFromStorage() {\n          \n          \n            \n                LOG.trace(\"Begin initializing ChainStorageClient from storage\");\n          \n          \n            \n                return makeStoreRequest()\n          \n          \n            \n                    .thenApply(\n          \n          \n            \n                        maybeStore -> {\n          \n          \n            \n                          maybeStore.ifPresent(\n          \n          \n            \n                              (store) -> {\n          \n          \n            \n                                this.setStore(store);\n          \n          \n            \n                                LOG.debug(\"Finish initializing ChainStorageClient from storage\");\n          \n          \n            \n                              });\n          \n          \n            \n                          return this;\n          \n          \n            \n                        });\n          \n          \n            \n              }", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399852737", "createdAt": "2020-03-29T20:56:26Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/artemis/storage/StorageBackedRecentChainData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.storage;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.artemis.storage.api.StorageUpdateChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class StorageBackedRecentChainData extends RecentChainData {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final AsyncRunner asyncRunner;\n+\n+  public StorageBackedRecentChainData(\n+      final AsyncRunner asyncRunner,\n+      final StorageUpdateChannel storageUpdateChannel,\n+      final EventBus eventBus) {\n+    super(storageUpdateChannel, eventBus);\n+    this.asyncRunner = asyncRunner;\n+    eventBus.register(this);\n+  }\n+\n+  public static SafeFuture<RecentChainData> create(\n+      final AsyncRunner asyncRunner,\n+      final StorageUpdateChannel storageUpdateChannel,\n+      final EventBus eventBus) {\n+    StorageBackedRecentChainData client =\n+        new StorageBackedRecentChainData(asyncRunner, storageUpdateChannel, eventBus);\n+    return client.initializeFromStorage();\n+  }\n+\n+  @SuppressWarnings({\"FutureReturnValueIgnored\"})\n+  private SafeFuture<RecentChainData> initializeFromStorage() {\n+    LOG.trace(\"Begin initializing ChainStorageClient from storage\");\n+    SafeFuture<RecentChainData> recentChainDataFuture = new SafeFuture<>();\n+    makeStoreRequest()\n+        .thenAccept(\n+            maybeStore -> {\n+              maybeStore.ifPresent(\n+                  (store) -> {\n+                    this.setStore(store);\n+                    LOG.debug(\"Finish initializing ChainStorageClient from storage\");\n+                  });\n+              recentChainDataFuture.complete(this);\n+            });\n+    return recentChainDataFuture;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MjkxMQ==", "bodyText": "nit: A better name might be requestInitialStore?", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399852911", "createdAt": "2020-03-29T20:57:51Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/artemis/storage/StorageBackedRecentChainData.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.storage;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.artemis.storage.api.StorageUpdateChannel;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class StorageBackedRecentChainData extends RecentChainData {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final AsyncRunner asyncRunner;\n+\n+  public StorageBackedRecentChainData(\n+      final AsyncRunner asyncRunner,\n+      final StorageUpdateChannel storageUpdateChannel,\n+      final EventBus eventBus) {\n+    super(storageUpdateChannel, eventBus);\n+    this.asyncRunner = asyncRunner;\n+    eventBus.register(this);\n+  }\n+\n+  public static SafeFuture<RecentChainData> create(\n+      final AsyncRunner asyncRunner,\n+      final StorageUpdateChannel storageUpdateChannel,\n+      final EventBus eventBus) {\n+    StorageBackedRecentChainData client =\n+        new StorageBackedRecentChainData(asyncRunner, storageUpdateChannel, eventBus);\n+    return client.initializeFromStorage();\n+  }\n+\n+  @SuppressWarnings({\"FutureReturnValueIgnored\"})\n+  private SafeFuture<RecentChainData> initializeFromStorage() {\n+    LOG.trace(\"Begin initializing ChainStorageClient from storage\");\n+    SafeFuture<RecentChainData> recentChainDataFuture = new SafeFuture<>();\n+    makeStoreRequest()\n+        .thenAccept(\n+            maybeStore -> {\n+              maybeStore.ifPresent(\n+                  (store) -> {\n+                    this.setStore(store);\n+                    LOG.debug(\"Finish initializing ChainStorageClient from storage\");\n+                  });\n+              recentChainDataFuture.complete(this);\n+            });\n+    return recentChainDataFuture;\n+  }\n+\n+  private SafeFuture<Optional<Store>> makeStoreRequest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzEyMw==", "bodyText": "nit: Rename to RecentChainDataTest.\nPossibly should test the storage backed initial loading in a separate StorageBackedRecentChainDataTest as well.", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399853123", "createdAt": "2020-03-29T20:59:35Z", "author": {"login": "ajsutton"}, "path": "storage/src/test/java/tech/pegasys/artemis/storage/ChainStorageClientTest.java", "diffHunk": "@@ -40,12 +36,8 @@\n import tech.pegasys.artemis.storage.Store.Transaction;\n import tech.pegasys.artemis.storage.api.StorageUpdateChannel;\n import tech.pegasys.artemis.storage.events.FinalizedCheckpointEvent;\n-import tech.pegasys.artemis.storage.events.GetStoreRequest;\n-import tech.pegasys.artemis.storage.events.GetStoreResponse;\n-import tech.pegasys.artemis.storage.events.StoreInitializedFromStorageEvent;\n-import tech.pegasys.artemis.storage.events.diskupdates.SuccessfulStorageUpdateResult;\n-import tech.pegasys.artemis.util.EventSink;\n import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.async.StubAsyncRunner;\n import tech.pegasys.artemis.util.config.Constants;\n \n class ChainStorageClientTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzI3OA==", "bodyText": "Timeout is simulated by returning a failedFuture(new TimeoutException()).  Note that you'll need to use the multiple return pattern of mockito so it doesn't keep returning the timeout future and fail forever so:\nwhen(storageUpdateChannel.onStoreRequest()).thenReturn(SafeFuture.failedFuture(new TimeoutException()).thenReturn(storeRequestFuture)", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399853278", "createdAt": "2020-03-29T21:01:03Z", "author": {"login": "ajsutton"}, "path": "storage/src/test/java/tech/pegasys/artemis/storage/ChainStorageClientTest.java", "diffHunk": "@@ -137,64 +112,39 @@ public void storageBackedClient_storeInitializeViaNewGenesisState()\n     assertThat(client.get().getStore()).isEqualTo(genesisStore);\n   }\n \n-  @Test\n-  public void storageBackedClient_storeInitializeViaStoreInitializedEvent()\n-      throws ExecutionException, InterruptedException {\n-    final EventBus eventBus = new EventBus();\n-    final List<GetStoreRequest> getStoreRequests =\n-        EventSink.capture(eventBus, GetStoreRequest.class);\n-    final SafeFuture<ChainStorageClient> client =\n-        ChainStorageClient.storageBackedClient(eventBus, storageUpdateChannel);\n-\n-    // We should have posted a request to get the store from storage\n-    assertThat(getStoreRequests.size()).isEqualTo(1);\n-    // Client shouldn't be initialized yet\n-    assertThat(client).isNotDone();\n-\n-    // Post initialization event\n-    final Store genesisStore = Store.get_genesis_store(INITIAL_STATE);\n-    eventBus.post(new StoreInitializedFromStorageEvent(Optional.of(genesisStore)));\n-    assertThat(client).isCompleted();\n-    assertStoreInitialized(client.get());\n-    assertStoreIsSet(client.get());\n-    assertThat(client.get().getStore()).isEqualTo(genesisStore);\n-\n-    // Post getStore response - which shouldn't change the store\n-    final BeaconState otherState = dataStructureUtil.randomBeaconState(UnsignedLong.ZERO);\n-    assertThat(otherState).isNotEqualTo(INITIAL_STATE);\n-    final Store otherStore = Store.get_genesis_store(otherState);\n-    eventBus.post(new GetStoreResponse(getStoreRequests.get(0).getId(), Optional.of(otherStore)));\n-    assertStoreIsSet(client.get());\n-    assertThat(client.get().getStore()).isEqualTo(genesisStore);\n-  }\n-\n-  @Test\n-  public void storageBackedClient_storeInitializeViaStoreInitializedEvent_emptyStore()\n-      throws ExecutionException, InterruptedException {\n-    final EventBus eventBus = new EventBus();\n-    final List<GetStoreRequest> getStoreRequests =\n-        EventSink.capture(eventBus, GetStoreRequest.class);\n-    final SafeFuture<ChainStorageClient> client =\n-        ChainStorageClient.storageBackedClient(eventBus, storageUpdateChannel);\n-\n-    // We should have posted a request to get the store from storage\n-    assertThat(getStoreRequests.size()).isEqualTo(1);\n-    // Client shouldn't be initialized yet\n-    assertThat(client).isNotDone();\n-\n-    // Post initialization event\n-    eventBus.post(new StoreInitializedFromStorageEvent(Optional.empty()));\n-    assertThat(client).isCompleted();\n-    assertStoreNotInitialized(client.get());\n-    assertThat(client.get().getStore()).isNull();\n-\n-    // Now set the genesis state\n-    final Store genesisStore = Store.get_genesis_store(INITIAL_STATE);\n-    client.get().initializeFromGenesis(INITIAL_STATE);\n-    assertStoreInitialized(client.get());\n-    assertStoreIsSet(client.get());\n-    assertThat(client.get().getStore()).isEqualTo(genesisStore);\n-  }\n+  // TODO: figure out how to simulate a timeout and uncomment this test\n+  //  @Test\n+  //  public void storageBackedClient_storeInitializeViaGetStoreRequestAfterTimeout()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzQ5Mw==", "bodyText": "Should return a failedFuture instead of null.  While it's not called today getting a null future returned is a nasty surprise.", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399853493", "createdAt": "2020-03-29T21:02:59Z", "author": {"login": "ajsutton"}, "path": "storage/src/test/java/tech/pegasys/artemis/storage/MapDbDatabaseTest.java", "diffHunk": "@@ -80,6 +81,11 @@\n \n         @Override\n         public void onGenesis(Store store) {}\n+\n+        @Override\n+        public SafeFuture<Optional<Store>> onStoreRequest() {\n+          return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzUzNw==", "bodyText": "nit: Return failed future instead of null.", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399853537", "createdAt": "2020-03-29T21:03:23Z", "author": {"login": "ajsutton"}, "path": "storage/src/testFixtures/java/tech/pegasys/artemis/storage/StubStorageUpdateChannel.java", "diffHunk": "@@ -13,13 +13,19 @@\n \n package tech.pegasys.artemis.storage;\n \n+import java.util.Optional;\n import tech.pegasys.artemis.storage.api.StorageUpdateChannel;\n import tech.pegasys.artemis.storage.events.diskupdates.StorageUpdate;\n import tech.pegasys.artemis.storage.events.diskupdates.StorageUpdateResult;\n import tech.pegasys.artemis.util.async.SafeFuture;\n \n public class StubStorageUpdateChannel implements StorageUpdateChannel {\n \n+  @Override\n+  public SafeFuture<Optional<Store>> onStoreRequest() {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzYyNg==", "bodyText": "Could this extend StubStorageUpdateChannel and just override onStorageUpdate?", "url": "https://github.com/ConsenSys/teku/pull/1498#discussion_r399853626", "createdAt": "2020-03-29T21:03:56Z", "author": {"login": "ajsutton"}, "path": "storage/src/test/java/tech/pegasys/artemis/storage/MapDbDatabaseTest.java", "diffHunk": "@@ -80,6 +81,11 @@\n \n         @Override\n         public void onGenesis(Store store) {}\n+\n+        @Override\n+        public SafeFuture<Optional<Store>> onStoreRequest() {\n+          return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MzQ5Mw=="}, "originalCommit": {"oid": "3d1ae1d9ef9ed803862a36b4d1037645b226e63b"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05bd76b8e3bc7ac772d1efc3262c2ff2b3e5c09a", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/05bd76b8e3bc7ac772d1efc3262c2ff2b3e5c09a", "committedDate": "2020-03-30T16:42:41Z", "message": "Resolve comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9daf209c5fad6a4a6579ecfa66fa301a5613ed95", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/9daf209c5fad6a4a6579ecfa66fa301a5613ed95", "committedDate": "2020-03-30T16:42:56Z", "message": "Merge branch 'master' into cleanAndRenameStorageClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab3db9d50cb9e1c22bd09c6308552c47bb619324", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/ab3db9d50cb9e1c22bd09c6308552c47bb619324", "committedDate": "2020-03-30T17:11:17Z", "message": "Fix test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4406, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}