{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NzgzNTQw", "number": 1310, "title": "Add interface level object definitions for BeaconBlock endpoint.", "bodyText": "Added tests for some utility functions, moved functional tests from the interface level down to the ChainDataProvider.\nSigned-off-by: Paul Harris paul.harris@consensys.net\n#1301", "createdAt": "2020-03-06T11:57:17Z", "url": "https://github.com/ConsenSys/teku/pull/1310", "merged": true, "mergeCommit": {"oid": "9f24dd944b96563a476c8b71c608752ebe5dc957"}, "closed": true, "closedAt": "2020-03-09T01:28:36Z", "author": {"login": "rolfyone"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcK-zigAH2gAyMzg0NzgzNTQwOmIyOWUyNGUyMDU3YTVlNDk1NTQzNThhOTQ5YjY3Y2ZiOGEyN2RjMDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcLzfKrgH2gAyMzg0NzgzNTQwOjNlYmYxNjcwMGNlNjQ1MzJiYzE3ZmM1MDEzYjRmZGQxZmE4ZDQyMWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b29e24e2057a5e49554358a949b67cfb8a27dc08", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/b29e24e2057a5e49554358a949b67cfb8a27dc08", "committedDate": "2020-03-06T11:55:44Z", "message": "Add interface level object definitions for BeaconBlock endpoint.\n\nAdded tests for some utility functions, moved functional tests from the interface level down to the ChainDataProvider.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>\n\n#1301"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ab889558a4d07c17183de718be2c1b371311d02", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/8ab889558a4d07c17183de718be2c1b371311d02", "committedDate": "2020-03-08T20:36:10Z", "message": "rename RestApiUtils to be more specific\n\nStart a CacheControlUtils\n\nRefactor the context handling in BeaconBlockHandler.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3524232ec12d5bd6da67716fd2cc7de769c50fe8", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/3524232ec12d5bd6da67716fd2cc7de769c50fe8", "committedDate": "2020-03-08T20:40:14Z", "message": "Merge remote-tracking branch 'upstream/master' into 1301-beaconBlockHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c6c39393ace8d90ed65bc5a47cca890d051b0c0", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/6c6c39393ace8d90ed65bc5a47cca890d051b0c0", "committedDate": "2020-03-08T22:55:22Z", "message": "Merge remote-tracking branch 'upstream/master' into 1301-beaconBlockHandler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODY2MjM5", "url": "https://github.com/ConsenSys/teku/pull/1310#pullrequestreview-370866239", "createdAt": "2020-03-08T23:17:44Z", "commit": {"oid": "6c6c39393ace8d90ed65bc5a47cca890d051b0c0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMzoxNzo0NFrOFzYHHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMzoxODozNFrOFzYHkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNjczMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void getMaxAgeForSignedBlock_shouldSetZeroIfNotFinalized() {\n          \n          \n            \n              void getMaxAgeForSignedBlock_shouldReturnZeroIfNotFinalized() {", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389416732", "createdAt": "2020-03-08T23:17:44Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/CacheControlUtilsTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi;\n+\n+import static com.google.common.primitives.UnsignedLong.ZERO;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_FINALIZED;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.SignedBeaconBlock;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class CacheControlUtilsTest {\n+\n+  SignedBeaconBlock signedBlock =\n+      new SignedBeaconBlock(DataStructureUtil.randomSignedBeaconBlock(1, 1));\n+  @Mock private ChainDataProvider provider;\n+\n+  @Test\n+  void getMaxAgeForSignedBlock_shouldSetZeroIfNotFinalized() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6c39393ace8d90ed65bc5a47cca890d051b0c0"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNjc2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void getMaxAgeForSignedBlock_shouldSetZeroIfFinalized() {\n          \n          \n            \n              void getMaxAgeForSignedBlock_shouldReturnZeroIfFinalized() {", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389416764", "createdAt": "2020-03-08T23:17:58Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/CacheControlUtilsTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi;\n+\n+import static com.google.common.primitives.UnsignedLong.ZERO;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_FINALIZED;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.SignedBeaconBlock;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class CacheControlUtilsTest {\n+\n+  SignedBeaconBlock signedBlock =\n+      new SignedBeaconBlock(DataStructureUtil.randomSignedBeaconBlock(1, 1));\n+  @Mock private ChainDataProvider provider;\n+\n+  @Test\n+  void getMaxAgeForSignedBlock_shouldSetZeroIfNotFinalized() {\n+    when(provider.isFinalized(signedBlock)).thenReturn(false);\n+    String cacheControl = CacheControlUtils.getMaxAgeForSignedBlock(provider, signedBlock);\n+    assertThat(cacheControl).isEqualTo(CACHE_NONE);\n+  }\n+\n+  @Test\n+  void getMaxAgeForSignedBlock_shouldSetZeroIfFinalized() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6c39393ace8d90ed65bc5a47cca890d051b0c0"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNjg0OA==", "bodyText": "hang on they aren't both zero are they?", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389416848", "createdAt": "2020-03-08T23:18:34Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/CacheControlUtilsTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi;\n+\n+import static com.google.common.primitives.UnsignedLong.ZERO;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_FINALIZED;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.SignedBeaconBlock;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class CacheControlUtilsTest {\n+\n+  SignedBeaconBlock signedBlock =\n+      new SignedBeaconBlock(DataStructureUtil.randomSignedBeaconBlock(1, 1));\n+  @Mock private ChainDataProvider provider;\n+\n+  @Test\n+  void getMaxAgeForSignedBlock_shouldSetZeroIfNotFinalized() {\n+    when(provider.isFinalized(signedBlock)).thenReturn(false);\n+    String cacheControl = CacheControlUtils.getMaxAgeForSignedBlock(provider, signedBlock);\n+    assertThat(cacheControl).isEqualTo(CACHE_NONE);\n+  }\n+\n+  @Test\n+  void getMaxAgeForSignedBlock_shouldSetZeroIfFinalized() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNjc2NA=="}, "originalCommit": {"oid": "6c6c39393ace8d90ed65bc5a47cca890d051b0c0"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e555c181aa4032ed6d070ed29ebe9acbc6e40eff", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/e555c181aa4032ed6d070ed29ebe9acbc6e40eff", "committedDate": "2020-03-08T23:21:29Z", "message": "Update data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/CacheControlUtilsTest.java\n\nCo-Authored-By: Sally MacFarlane <sally.macfarlane@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c72349ef53bb2567474c0e7eb3dd3a22c4748a1", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/8c72349ef53bb2567474c0e7eb3dd3a22c4748a1", "committedDate": "2020-03-08T23:25:12Z", "message": "changes to hopefully clear up test naming, from review feedback\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODY2NjA0", "url": "https://github.com/ConsenSys/teku/pull/1310#pullrequestreview-370866604", "createdAt": "2020-03-08T23:23:00Z", "commit": {"oid": "6c6c39393ace8d90ed65bc5a47cca890d051b0c0"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMzoyMzowMFrOFzYJkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMDowNToyN1rOFzYYVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNzM2MQ==", "bodyText": "why is Bytes4 48 bytes?", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389417361", "createdAt": "2020-03-08T23:23:00Z", "author": {"login": "macfarla"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/api/schema/BLSPubKey.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.api.schema;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import java.util.Objects;\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public class BLSPubKey {\n+  /** The number of bytes in this value - i.e. 48 */\n+  private final int SIZE = 48;\n+\n+  private final Bytes bytes;\n+\n+  public BLSPubKey(Bytes bytes) {\n+    checkArgument(\n+        bytes.size() == SIZE, \"Bytes4 should be %s bytes, but was %s bytes.\", SIZE, bytes.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6c39393ace8d90ed65bc5a47cca890d051b0c0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNzQ2Ng==", "bodyText": "should it just be Bytes should be ...", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389417466", "createdAt": "2020-03-08T23:23:35Z", "author": {"login": "macfarla"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/api/schema/BLSSignature.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.api.schema;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import java.util.Objects;\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public class BLSSignature {\n+  /** The number of bytes in this value - i.e. 96 */\n+  private final int SIZE = 96;\n+\n+  private final Bytes bytes;\n+\n+  public BLSSignature(Bytes bytes) {\n+    checkArgument(\n+        bytes.size() == SIZE, \"Bytes4 should be %s bytes, but was %s bytes.\", SIZE, bytes.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6c39393ace8d90ed65bc5a47cca890d051b0c0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNzkyMA==", "bodyText": "is this change related?", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389417920", "createdAt": "2020-03-08T23:27:11Z", "author": {"login": "macfarla"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/provider/BLSSignatureSerializer.java", "diffHunk": "@@ -17,12 +17,12 @@\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import java.io.IOException;\n-import tech.pegasys.artemis.util.bls.BLSSignature;\n+import tech.pegasys.artemis.api.schema.BLSSignature;\n \n public class BLSSignatureSerializer extends JsonSerializer<BLSSignature> {\n   @Override\n   public void serialize(BLSSignature value, JsonGenerator gen, SerializerProvider serializers)\n       throws IOException {\n-    gen.writeString(value.toBytes().toHexString().toLowerCase());\n+    gen.writeString(value.toHexString().toLowerCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c72349ef53bb2567474c0e7eb3dd3a22c4748a1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNzk1OQ==", "bodyText": "why do we have BLSPublicKey and BLSPubKey?", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389417959", "createdAt": "2020-03-08T23:27:44Z", "author": {"login": "macfarla"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/provider/JsonProvider.java", "diffHunk": "@@ -38,6 +39,7 @@ private void addTekuMappers() {\n \n     module.addDeserializer(BLSPublicKey.class, new BLSPublicKeyDeserializer());\n     module.addSerializer(BLSPublicKey.class, new BLSPublicKeySerializer());\n+    module.addSerializer(BLSPubKey.class, new BLSPubKeySerializer());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c72349ef53bb2567474c0e7eb3dd3a22c4748a1"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxODE1OQ==", "bodyText": "stray comment - is epoch not needed?", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389418159", "createdAt": "2020-03-08T23:30:12Z", "author": {"login": "macfarla"}, "path": "data/provider/src/test/java/tech/pegasys/artemis/api/ChainDataProviderTest.java", "diffHunk": "@@ -51,9 +53,9 @@\n   private static UnsignedLong slot;\n   private static EventBus localEventBus;\n   private static ChainStorageClient chainStorageClient;\n-\n-  @SuppressWarnings(\"unused\")\n-  private static UnsignedLong epoch;\n+  private final tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock signedBeaconBlock =\n+      DataStructureUtil.randomSignedBeaconBlock(1, 1);\n+  //  private static UnsignedLong epoch;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c72349ef53bb2567474c0e7eb3dd3a22c4748a1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDg0MQ==", "bodyText": "myClient??", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389420841", "createdAt": "2020-03-09T00:02:00Z", "author": {"login": "macfarla"}, "path": "data/provider/src/test/java/tech/pegasys/artemis/api/ChainDataProviderTest.java", "diffHunk": "@@ -174,4 +176,86 @@ public void getGenesisTime_shouldReturnValueIfStoreAvailable() {\n     Optional<UnsignedLong> optionalData = provider.getGenesisTime();\n     assertEquals(genesis, optionalData.get());\n   }\n+\n+  @Test\n+  public void getBlockBySlot_shouldReturnEmptyWhenStoreNotFound()\n+      throws ExecutionException, InterruptedException {\n+    CombinedChainDataClient myClient = mock(CombinedChainDataClient.class);\n+    ChainDataProvider provider = new ChainDataProvider(null, myClient);\n+\n+    SafeFuture<Optional<SignedBeaconBlock>> future = provider.getBlockBySlot(ZERO);\n+    assertTrue(future.get().isEmpty());\n+  }\n+\n+  @Test\n+  public void getBlockBySlot_shouldReturnEmptyWhenSlotNotFound()\n+      throws ExecutionException, InterruptedException {\n+    CombinedChainDataClient myClient = mock(CombinedChainDataClient.class);\n+    ChainDataProvider provider = new ChainDataProvider(chainStorageClient, myClient);\n+\n+    when(myClient.isStoreAvailable()).thenReturn(true);\n+    when(myClient.getBlockBySlot(ZERO)).thenReturn(completedFuture(Optional.empty()));\n+    SafeFuture<Optional<SignedBeaconBlock>> future = provider.getBlockBySlot(ZERO);\n+    assertTrue(future.get().isEmpty());\n+  }\n+\n+  @Test\n+  public void getBlockBySlot_shouldReturnBlockWhenFound()\n+      throws ExecutionException, InterruptedException {\n+    CombinedChainDataClient myClient = mock(CombinedChainDataClient.class);\n+    ChainDataProvider provider = new ChainDataProvider(chainStorageClient, myClient);\n+    SafeFuture<Optional<tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock>> data =\n+        completedFuture(Optional.of(signedBeaconBlock));\n+\n+    when(myClient.isStoreAvailable()).thenReturn(true);\n+    when(myClient.getBlockBySlot(ZERO)).thenReturn(data);\n+    SafeFuture<Optional<SignedBeaconBlock>> future = provider.getBlockBySlot(ZERO);\n+    verify(myClient).getBlockBySlot(ZERO);\n+\n+    SignedBeaconBlock result = future.get().get();\n+    assertThat(result)\n+        .usingRecursiveComparison()\n+        .isEqualTo(new SignedBeaconBlock(signedBeaconBlock));\n+  }\n+\n+  @Test\n+  public void getBlockByBlockRoot_shouldReturnEmptyWhenStoreNotFound()\n+      throws ExecutionException, InterruptedException {\n+    CombinedChainDataClient myClient = mock(CombinedChainDataClient.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c72349ef53bb2567474c0e7eb3dd3a22c4748a1"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMTE0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Bytes32 blockParam = getParameterValueAsBytes32(queryParamMap, ROOT);\n          \n          \n            \n                    final Bytes32 blockRoot = getParameterValueAsBytes32(queryParamMap, ROOT);", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389421140", "createdAt": "2020-03-09T00:05:27Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -66,65 +77,61 @@ public BeaconBlockHandler(\n       responses = {\n         @OpenApiResponse(\n             status = RES_OK,\n-            content = @OpenApiContent(from = BeaconBlockResponse.class)),\n+            content = @OpenApiContent(from = SignedBeaconBlock.class)),\n         @OpenApiResponse(status = RES_BAD_REQUEST, description = \"Invalid parameter supplied\"),\n         @OpenApiResponse(status = RES_NOT_FOUND, description = \"Specified block not found\")\n       })\n   @Override\n   public void handle(final Context ctx) throws Exception {\n     try {\n-      if (ctx.queryParamMap().size() > 1) {\n-        throw new IllegalArgumentException(\n-            \"Too many query parameters specified. Please supply only one.\");\n+      final Map<String, List<String>> queryParamMap = ctx.queryParamMap();\n+      if (queryParamMap.size() < 1) {\n+        throw new IllegalArgumentException(NO_PARAMETERS);\n+      } else if (queryParamMap.size() > 1) {\n+        throw new IllegalArgumentException(TOO_MANY_PARAMETERS);\n       }\n \n-      final Map<String, List<String>> queryParamMap = ctx.queryParamMap();\n-      if (ctx.queryParamMap().containsKey(ROOT)) {\n-        final Bytes32 blockParam =\n-            Bytes32.fromHexString(validateQueryParameter(queryParamMap, ROOT));\n+      if (queryParamMap.containsKey(ROOT)) {\n+        final Bytes32 blockParam = getParameterValueAsBytes32(queryParamMap, ROOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c72349ef53bb2567474c0e7eb3dd3a22c4748a1"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0fdd6cb4557f86ad0c0791c23a1e062853e01a9", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/c0fdd6cb4557f86ad0c0791c23a1e062853e01a9", "committedDate": "2020-03-09T00:40:48Z", "message": "changes per review comments.\n\nCan't remove BLSPublicKeySerializer yet, because its used in beacon/state, but i'll clean that up when i do that endpoint.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODc3Mjcw", "url": "https://github.com/ConsenSys/teku/pull/1310#pullrequestreview-370877270", "createdAt": "2020-03-09T01:17:05Z", "commit": {"oid": "c0fdd6cb4557f86ad0c0791c23a1e062853e01a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ebf16700ce64532bc17fc5013b4fdd1fa8d421e", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/3ebf16700ce64532bc17fc5013b4fdd1fa8d421e", "committedDate": "2020-03-09T01:18:27Z", "message": "Merge branch 'master' into 1301-beaconBlockHandler"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3919, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}