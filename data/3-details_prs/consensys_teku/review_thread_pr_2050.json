{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NDMzODk0", "number": 2050, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzowMDozMVrOECWcuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzowMDozMVrOECWcuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTAwNDA4OnYy", "diffSide": "RIGHT", "path": "validator/coordinator/src/test/java/tech/pegasys/teku/validator/coordinator/DepositProviderTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzowMDozMVrOGewZWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo0MTo0MlrOGfaZvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkwMzM4Nw==", "bodyText": "nit: shouldn't need to move this assignment to setUp (field can be non-final with an assignment if needed).", "url": "https://github.com/ConsenSys/teku/pull/2050#discussion_r434903387", "createdAt": "2020-06-03T23:00:31Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/test/java/tech/pegasys/teku/validator/coordinator/DepositProviderTest.java", "diffHunk": "@@ -41,23 +41,27 @@\n import tech.pegasys.teku.datastructures.util.OptimizedMerkleTree;\n import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n import tech.pegasys.teku.storage.client.RecentChainData;\n import tech.pegasys.teku.util.config.Constants;\n \n public class DepositProviderTest {\n \n   private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n   private final RecentChainData recentChainData = mock(RecentChainData.class);\n-  private final BeaconState beaconState = mock(BeaconState.class);\n+  private final BeaconState state = mock(BeaconState.class);\n   private final Eth1DataCache eth1DataCache = mock(Eth1DataCache.class);\n-  private final MerkleTree depositMerkleTree =\n-      new OptimizedMerkleTree(Constants.DEPOSIT_CONTRACT_TREE_DEPTH);\n   private List<tech.pegasys.teku.pow.event.Deposit> allSeenDepositsList;\n   private final DepositProvider depositProvider =\n       new DepositProvider(recentChainData, eth1DataCache);\n+  private final Eth1Data randomEth1Data = dataStructureUtil.randomEth1Data();\n+\n+  private MerkleTree depositMerkleTree;\n \n   @BeforeEach\n   void setUp() {\n+    depositMerkleTree = new OptimizedMerkleTree(Constants.DEPOSIT_CONTRACT_TREE_DEPTH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9f833580af63def6a2de914c882e325f0337c59"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2Nzg2NQ==", "bodyText": "But in that case, we'd be adding duplicate deposit data roots to the Merkle tree between tests since multiple tests call mockDepositsFromEth1Block", "url": "https://github.com/ConsenSys/teku/pull/2050#discussion_r435367865", "createdAt": "2020-06-04T15:54:18Z", "author": {"login": "cemozerr"}, "path": "validator/coordinator/src/test/java/tech/pegasys/teku/validator/coordinator/DepositProviderTest.java", "diffHunk": "@@ -41,23 +41,27 @@\n import tech.pegasys.teku.datastructures.util.OptimizedMerkleTree;\n import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n import tech.pegasys.teku.storage.client.RecentChainData;\n import tech.pegasys.teku.util.config.Constants;\n \n public class DepositProviderTest {\n \n   private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n   private final RecentChainData recentChainData = mock(RecentChainData.class);\n-  private final BeaconState beaconState = mock(BeaconState.class);\n+  private final BeaconState state = mock(BeaconState.class);\n   private final Eth1DataCache eth1DataCache = mock(Eth1DataCache.class);\n-  private final MerkleTree depositMerkleTree =\n-      new OptimizedMerkleTree(Constants.DEPOSIT_CONTRACT_TREE_DEPTH);\n   private List<tech.pegasys.teku.pow.event.Deposit> allSeenDepositsList;\n   private final DepositProvider depositProvider =\n       new DepositProvider(recentChainData, eth1DataCache);\n+  private final Eth1Data randomEth1Data = dataStructureUtil.randomEth1Data();\n+\n+  private MerkleTree depositMerkleTree;\n \n   @BeforeEach\n   void setUp() {\n+    depositMerkleTree = new OptimizedMerkleTree(Constants.DEPOSIT_CONTRACT_TREE_DEPTH);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkwMzM4Nw=="}, "originalCommit": {"oid": "b9f833580af63def6a2de914c882e325f0337c59"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5MTYxMg==", "bodyText": "No a new instance of the test class is created for every test so field values are not shared between test methods.", "url": "https://github.com/ConsenSys/teku/pull/2050#discussion_r435591612", "createdAt": "2020-06-04T22:41:42Z", "author": {"login": "ajsutton"}, "path": "validator/coordinator/src/test/java/tech/pegasys/teku/validator/coordinator/DepositProviderTest.java", "diffHunk": "@@ -41,23 +41,27 @@\n import tech.pegasys.teku.datastructures.util.OptimizedMerkleTree;\n import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n import tech.pegasys.teku.storage.client.RecentChainData;\n import tech.pegasys.teku.util.config.Constants;\n \n public class DepositProviderTest {\n \n   private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n   private final RecentChainData recentChainData = mock(RecentChainData.class);\n-  private final BeaconState beaconState = mock(BeaconState.class);\n+  private final BeaconState state = mock(BeaconState.class);\n   private final Eth1DataCache eth1DataCache = mock(Eth1DataCache.class);\n-  private final MerkleTree depositMerkleTree =\n-      new OptimizedMerkleTree(Constants.DEPOSIT_CONTRACT_TREE_DEPTH);\n   private List<tech.pegasys.teku.pow.event.Deposit> allSeenDepositsList;\n   private final DepositProvider depositProvider =\n       new DepositProvider(recentChainData, eth1DataCache);\n+  private final Eth1Data randomEth1Data = dataStructureUtil.randomEth1Data();\n+\n+  private MerkleTree depositMerkleTree;\n \n   @BeforeEach\n   void setUp() {\n+    depositMerkleTree = new OptimizedMerkleTree(Constants.DEPOSIT_CONTRACT_TREE_DEPTH);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkwMzM4Nw=="}, "originalCommit": {"oid": "b9f833580af63def6a2de914c882e325f0337c59"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3700, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}