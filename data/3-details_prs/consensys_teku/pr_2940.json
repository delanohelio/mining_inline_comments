{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMTk5NzI0", "number": 2940, "title": "implement `/eth/v1/beacon/blocks` post rest api", "bodyText": "deprecated POST /validator/block\n\n\nthe functionality is identical, just on a different endpoint, so moved the test suite to the new location and test the new class.\n\n\npartially addresses #2756\nSigned-off-by: Paul Harris paul.harris@consensys.net\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-10-11T20:14:35Z", "url": "https://github.com/ConsenSys/teku/pull/2940", "merged": true, "mergeCommit": {"oid": "4ebe68a72e8d3b854b6e91d5eca7faadcb26fe06"}, "closed": true, "closedAt": "2020-10-11T23:28:14Z", "author": {"login": "rolfyone"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdRlLPngH2gAyNTAxMTk5NzI0OmZhNjQwMWY5YjEwYmEyNDY4ZmFlYzU0NWU3YWJlZjY1MTcyODU0Nzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdRnvZegH2gAyNTAxMTk5NzI0OmQxZDFiOTFlZmI5YjdlZWMzNzZlZDhjYjBiZDc3NGY4MmNmMjBlOTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fa6401f9b10ba2468faec545e7abef6517285478", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/fa6401f9b10ba2468faec545e7abef6517285478", "committedDate": "2020-10-11T20:12:43Z", "message": "implement `/eth/v1/beacon/blocks` rest api\n\n - deprecated `/validator/block`\n\n - the functionality is identical, just on a different endpoint, so moved the test suite to the new location and test the new class.\n\n partially addresses #2756\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7ef4a378b7d65b0a995ebece14c73e1a6ccc177", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/a7ef4a378b7d65b0a995ebece14c73e1a6ccc177", "committedDate": "2020-10-11T20:31:31Z", "message": "missed deprecation tag, added\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MjE0ODE1", "url": "https://github.com/ConsenSys/teku/pull/2940#pullrequestreview-506214815", "createdAt": "2020-10-11T20:43:04Z", "commit": {"oid": "a7ef4a378b7d65b0a995ebece14c73e1a6ccc177"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMDo0MzowNVrOHfqdOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMDo0Mzo1NVrOHfqdeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk2MzUxNA==", "bodyText": "I don't think this matches the expected output.  It looks like the new API has no content for either 200 or 202 and error responses should have a code and message.", "url": "https://github.com/ConsenSys/teku/pull/2940#discussion_r502963514", "createdAt": "2020-10-11T20:43:05Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostBlock.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_ACCEPTED;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR_REQUIRED;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.SyncDataProvider;\n+import tech.pegasys.teku.api.ValidatorDataProvider;\n+import tech.pegasys.teku.api.schema.SignedBeaconBlock;\n+import tech.pegasys.teku.api.schema.ValidatorBlockResult;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class PostBlock implements Handler {\n+  public static final String ROUTE = \"/eth/v1/beacon/blocks\";\n+\n+  private final JsonProvider jsonProvider;\n+  private final ValidatorDataProvider validatorDataProvider;\n+  private final SyncDataProvider syncDataProvider;\n+\n+  public PostBlock(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    this.validatorDataProvider = dataProvider.getValidatorDataProvider();\n+    this.syncDataProvider = dataProvider.getSyncDataProvider();\n+    this.jsonProvider = jsonProvider;\n+  }\n+\n+  PostBlock(\n+      final ValidatorDataProvider validatorDataProvider,\n+      final SyncDataProvider syncDataProvider,\n+      final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.validatorDataProvider = validatorDataProvider;\n+    this.syncDataProvider = syncDataProvider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.POST,\n+      summary = \"Publish a signed block\",\n+      tags = {TAG_V1_BEACON, TAG_VALIDATOR_REQUIRED},\n+      requestBody =\n+          @OpenApiRequestBody(content = {@OpenApiContent(from = SignedBeaconBlock.class)}),\n+      description =\n+          \"Submit a signed beacon block to the beacon node to be imported.\"\n+              + \" The beacon node performs the required validation.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            description = \"Block has been successfully broadcast, validated and imported.\"),\n+        @OpenApiResponse(\n+            status = RES_ACCEPTED,\n+            description =\n+                \"Block has been successfully broadcast, but failed validation and has not been imported.\"),\n+        @OpenApiResponse(status = RES_BAD_REQUEST, description = \"Unable to parse request body.\"),\n+        @OpenApiResponse(\n+            status = RES_INTERNAL_ERROR,\n+            description = \"Beacon node experienced an internal error.\"),\n+        @OpenApiResponse(\n+            status = RES_SERVICE_UNAVAILABLE,\n+            description = \"Beacon node is currently syncing.\")\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      if (syncDataProvider.getSyncStatus().is_syncing) {\n+        ctx.status(SC_SERVICE_UNAVAILABLE);\n+        return;\n+      }\n+\n+      final SignedBeaconBlock signedBeaconBlock =\n+          jsonProvider.jsonToObject(ctx.body(), SignedBeaconBlock.class);\n+\n+      ctx.result(\n+          validatorDataProvider\n+              .submitSignedBlock(signedBeaconBlock)\n+              .thenApplyChecked(\n+                  validatorBlockResult -> handleResponseContext(ctx, validatorBlockResult)));\n+\n+    } catch (final JsonMappingException | JsonParseException ex) {\n+      ctx.status(SC_BAD_REQUEST);\n+    } catch (final Exception ex) {\n+      ctx.status(SC_INTERNAL_SERVER_ERROR);\n+    }\n+  }\n+\n+  private String handleResponseContext(\n+      final Context ctx, final ValidatorBlockResult validatorBlockResult)\n+      throws JsonProcessingException {\n+    ctx.status(validatorBlockResult.getResponseCode());\n+    if (validatorBlockResult.getFailureReason().isPresent()) {\n+      return jsonProvider.objectToJSON(validatorBlockResult.getFailureReason().get());\n+    } else {\n+      return jsonProvider.objectToJSON(\n+          validatorBlockResult.getHash_tree_root().map(Bytes32::toHexString).orElse(\"\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7ef4a378b7d65b0a995ebece14c73e1a6ccc177"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk2MzU3Nw==", "bodyText": "Can we also add some tests to cover what this should output please? I discovered on the weekend we had none and it was actually converting an Optional to JSON which wasn't pretty.", "url": "https://github.com/ConsenSys/teku/pull/2940#discussion_r502963577", "createdAt": "2020-10-11T20:43:55Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostBlock.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_ACCEPTED;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR_REQUIRED;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.SyncDataProvider;\n+import tech.pegasys.teku.api.ValidatorDataProvider;\n+import tech.pegasys.teku.api.schema.SignedBeaconBlock;\n+import tech.pegasys.teku.api.schema.ValidatorBlockResult;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class PostBlock implements Handler {\n+  public static final String ROUTE = \"/eth/v1/beacon/blocks\";\n+\n+  private final JsonProvider jsonProvider;\n+  private final ValidatorDataProvider validatorDataProvider;\n+  private final SyncDataProvider syncDataProvider;\n+\n+  public PostBlock(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    this.validatorDataProvider = dataProvider.getValidatorDataProvider();\n+    this.syncDataProvider = dataProvider.getSyncDataProvider();\n+    this.jsonProvider = jsonProvider;\n+  }\n+\n+  PostBlock(\n+      final ValidatorDataProvider validatorDataProvider,\n+      final SyncDataProvider syncDataProvider,\n+      final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.validatorDataProvider = validatorDataProvider;\n+    this.syncDataProvider = syncDataProvider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.POST,\n+      summary = \"Publish a signed block\",\n+      tags = {TAG_V1_BEACON, TAG_VALIDATOR_REQUIRED},\n+      requestBody =\n+          @OpenApiRequestBody(content = {@OpenApiContent(from = SignedBeaconBlock.class)}),\n+      description =\n+          \"Submit a signed beacon block to the beacon node to be imported.\"\n+              + \" The beacon node performs the required validation.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            description = \"Block has been successfully broadcast, validated and imported.\"),\n+        @OpenApiResponse(\n+            status = RES_ACCEPTED,\n+            description =\n+                \"Block has been successfully broadcast, but failed validation and has not been imported.\"),\n+        @OpenApiResponse(status = RES_BAD_REQUEST, description = \"Unable to parse request body.\"),\n+        @OpenApiResponse(\n+            status = RES_INTERNAL_ERROR,\n+            description = \"Beacon node experienced an internal error.\"),\n+        @OpenApiResponse(\n+            status = RES_SERVICE_UNAVAILABLE,\n+            description = \"Beacon node is currently syncing.\")\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      if (syncDataProvider.getSyncStatus().is_syncing) {\n+        ctx.status(SC_SERVICE_UNAVAILABLE);\n+        return;\n+      }\n+\n+      final SignedBeaconBlock signedBeaconBlock =\n+          jsonProvider.jsonToObject(ctx.body(), SignedBeaconBlock.class);\n+\n+      ctx.result(\n+          validatorDataProvider\n+              .submitSignedBlock(signedBeaconBlock)\n+              .thenApplyChecked(\n+                  validatorBlockResult -> handleResponseContext(ctx, validatorBlockResult)));\n+\n+    } catch (final JsonMappingException | JsonParseException ex) {\n+      ctx.status(SC_BAD_REQUEST);\n+    } catch (final Exception ex) {\n+      ctx.status(SC_INTERNAL_SERVER_ERROR);\n+    }\n+  }\n+\n+  private String handleResponseContext(\n+      final Context ctx, final ValidatorBlockResult validatorBlockResult)\n+      throws JsonProcessingException {\n+    ctx.status(validatorBlockResult.getResponseCode());\n+    if (validatorBlockResult.getFailureReason().isPresent()) {\n+      return jsonProvider.objectToJSON(validatorBlockResult.getFailureReason().get());\n+    } else {\n+      return jsonProvider.objectToJSON(\n+          validatorBlockResult.getHash_tree_root().map(Bytes32::toHexString).orElse(\"\"));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk2MzUxNA=="}, "originalCommit": {"oid": "a7ef4a378b7d65b0a995ebece14c73e1a6ccc177"}, "originalPosition": 126}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27941da1be743839edf8251e5c03a12a96c54160", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/27941da1be743839edf8251e5c03a12a96c54160", "committedDate": "2020-10-11T20:47:29Z", "message": "Merge remote-tracking branch 'upstream/master' into 2756-post-block\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>\n\n# Conflicts:\n#\tdata/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/BeaconRestApiV1Test.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ca5b50d02f7625dcce33a80fe0c40a9e28208f3", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/7ca5b50d02f7625dcce33a80fe0c40a9e28208f3", "committedDate": "2020-10-11T22:43:27Z", "message": "changes per review comments.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MjI0NjIx", "url": "https://github.com/ConsenSys/teku/pull/2940#pullrequestreview-506224621", "createdAt": "2020-10-11T22:48:12Z", "commit": {"oid": "7ca5b50d02f7625dcce33a80fe0c40a9e28208f3"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMjo0ODoxM1rOHfrPmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMjo0ODoxM1rOHfrPmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3NjQxMA==", "bodyText": "er, this looks like an odd import.  I think I'd just use \"\" for an empty string, seems pretty easily understandable.", "url": "https://github.com/ConsenSys/teku/pull/2940#discussion_r502976410", "createdAt": "2020-10-11T22:48:13Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostBlock.java", "diffHunk": "@@ -34,12 +35,13 @@\n import io.javalin.plugin.openapi.annotations.OpenApiContent;\n import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n-import org.apache.tuweni.bytes.Bytes32;\n+import joptsimple.internal.Strings;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ca5b50d02f7625dcce33a80fe0c40a9e28208f3"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "165574f5b86bad404bfa3f28d8c04e25c8210a0d", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/165574f5b86bad404bfa3f28d8c04e25c8210a0d", "committedDate": "2020-10-11T23:11:33Z", "message": "changes per review comments.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1d1b91efb9b7eec376ed8cb0bd774f82cf20e98", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/d1d1b91efb9b7eec376ed8cb0bd774f82cf20e98", "committedDate": "2020-10-11T23:12:01Z", "message": "Merge remote-tracking branch 'upstream/master' into 2756-post-block"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3341, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}