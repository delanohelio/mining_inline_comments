{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2OTYxNTc2", "number": 1635, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMTo1NzoyNVrOD0hROg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjoxOTo0N1rOD0hloA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mzk3NjI2OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/StartupUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMTo1NzoyNVrOGJf3Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjowMTozMlrOGJf8uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxMjM2Mg==", "bodyText": "Is there a better exception? it seems like the source is not necessarily a File.", "url": "https://github.com/ConsenSys/teku/pull/1635#discussion_r412612362", "createdAt": "2020-04-22T01:57:25Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/StartupUtil.java", "diffHunk": "@@ -52,9 +51,12 @@ public static BeaconState createMockedStartInitialBeaconState(\n         .createInitialBeaconState(UnsignedLong.valueOf(genesisTime), initialDepositData);\n   }\n \n-  public static BeaconState loadBeaconStateFromFile(final String stateFile) throws IOException {\n+  private static BeaconState loadBeaconState(final String source) throws IOException {\n     return SimpleOffsetSerializer.deserialize(\n-        Bytes.wrap(Files.readAllBytes(new File(stateFile).toPath())), BeaconStateImpl.class);\n+        ResourceLoader.urlOrFile()\n+            .loadBytes(source)\n+            .orElseThrow(() -> new FileNotFoundException(\"Could not find \" + source)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcd4284df9072fc0a35b66c4b665326d2115e0c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxMzgxOQ==", "bodyText": "We could just throw IllegalArgumentException but the final fallback is to treat it as a file so this matches the previous behaviour and winds up being fairly intuitive for users.", "url": "https://github.com/ConsenSys/teku/pull/1635#discussion_r412613819", "createdAt": "2020-04-22T02:01:32Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/StartupUtil.java", "diffHunk": "@@ -52,9 +51,12 @@ public static BeaconState createMockedStartInitialBeaconState(\n         .createInitialBeaconState(UnsignedLong.valueOf(genesisTime), initialDepositData);\n   }\n \n-  public static BeaconState loadBeaconStateFromFile(final String stateFile) throws IOException {\n+  private static BeaconState loadBeaconState(final String source) throws IOException {\n     return SimpleOffsetSerializer.deserialize(\n-        Bytes.wrap(Files.readAllBytes(new File(stateFile).toPath())), BeaconStateImpl.class);\n+        ResourceLoader.urlOrFile()\n+            .loadBytes(source)\n+            .orElseThrow(() -> new FileNotFoundException(\"Could not find \" + source)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxMjM2Mg=="}, "originalCommit": {"oid": "4dcd4284df9072fc0a35b66c4b665326d2115e0c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mzk4MjA1OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/artemis/util/resource/FallbackResourceLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMTo1OTo1NVrOGJf6Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMTo1OTo1NVrOGJf6Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxMzIyMg==", "bodyText": "really cool.", "url": "https://github.com/ConsenSys/teku/pull/1635#discussion_r412613222", "createdAt": "2020-04-22T01:59:55Z", "author": {"login": "cemozerr"}, "path": "util/src/main/java/tech/pegasys/artemis/util/resource/FallbackResourceLoader.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.resource;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Optional;\n+\n+public class FallbackResourceLoader implements ResourceLoader {\n+\n+  private final ResourceLoader[] loaders;\n+\n+  FallbackResourceLoader(final ResourceLoader... loaders) {\n+    this.loaders = loaders;\n+  }\n+\n+  @Override\n+  public Optional<InputStream> load(final String source) throws IOException {\n+    for (ResourceLoader loader : loaders) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcd4284df9072fc0a35b66c4b665326d2115e0c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mzk5MTI0OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/tech/pegasys/artemis/util/resource/ResourceLoader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjowMzo0NVrOGJf_lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjo0NDoyMFrOGJgzYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxNDU0OQ==", "bodyText": "this seems to start initially from classpath so a more appropriate naming would be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static ResourceLoader urlClasspathOrFile(\n          \n          \n            \n              static ResourceLoader classpathUrlOrFile(", "url": "https://github.com/ConsenSys/teku/pull/1635#discussion_r412614549", "createdAt": "2020-04-22T02:03:45Z", "author": {"login": "cemozerr"}, "path": "util/src/main/java/tech/pegasys/artemis/util/resource/ResourceLoader.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.resource;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public interface ResourceLoader {\n+\n+  static ResourceLoader urlOrFile() {\n+    return new FallbackResourceLoader(new URLResourceLoader(), new FileResourceLoader());\n+  }\n+\n+  static ResourceLoader urlClasspathOrFile(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcd4284df9072fc0a35b66c4b665326d2115e0c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyNzgxMA==", "bodyText": "Good point, done.", "url": "https://github.com/ConsenSys/teku/pull/1635#discussion_r412627810", "createdAt": "2020-04-22T02:44:20Z", "author": {"login": "ajsutton"}, "path": "util/src/main/java/tech/pegasys/artemis/util/resource/ResourceLoader.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.resource;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public interface ResourceLoader {\n+\n+  static ResourceLoader urlOrFile() {\n+    return new FallbackResourceLoader(new URLResourceLoader(), new FileResourceLoader());\n+  }\n+\n+  static ResourceLoader urlClasspathOrFile(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxNDU0OQ=="}, "originalCommit": {"oid": "4dcd4284df9072fc0a35b66c4b665326d2115e0c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDAyODQ4OnYy", "diffSide": "RIGHT", "path": "util/src/test/java/tech/pegasys/artemis/util/resource/URLResourceLoaderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjoxOTo0N1rOGJgT7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMjo0NDoxMlrOGJgzLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxOTc1OA==", "bodyText": "It's not clear to me how you're testing loading from URL here", "url": "https://github.com/ConsenSys/teku/pull/1635#discussion_r412619758", "createdAt": "2020-04-22T02:19:47Z", "author": {"login": "cemozerr"}, "path": "util/src/test/java/tech/pegasys/artemis/util/resource/URLResourceLoaderTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.resource;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.net.URL;\n+import org.junit.jupiter.api.Test;\n+\n+class URLResourceLoaderTest {\n+  private final ResourceLoader loader = new URLResourceLoader();\n+\n+  @Test\n+  public void shouldLoadContentFromURL() throws Exception {\n+    final String resourceName = ClasspathResourceLoaderTest.TEST_FILE_1 + \".txt\";\n+    final URL resource = ClasspathResourceLoaderTest.class.getResource(resourceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8786771696f6a89fae7d1e6cbc62ae73c0b6a5f9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYyNzc1Nw==", "bodyText": "It's cheating a little - I'm getting a URL to a resource on the class path.  That's likely actually either a file:// or jar:// URL but since the implementation is just using the standard URL.openStream any URL supported by that works well enough to provide a basic sanity test.  Previously this loading from URL wasn't tested at all.", "url": "https://github.com/ConsenSys/teku/pull/1635#discussion_r412627757", "createdAt": "2020-04-22T02:44:12Z", "author": {"login": "ajsutton"}, "path": "util/src/test/java/tech/pegasys/artemis/util/resource/URLResourceLoaderTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.resource;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.net.URL;\n+import org.junit.jupiter.api.Test;\n+\n+class URLResourceLoaderTest {\n+  private final ResourceLoader loader = new URLResourceLoader();\n+\n+  @Test\n+  public void shouldLoadContentFromURL() throws Exception {\n+    final String resourceName = ClasspathResourceLoaderTest.TEST_FILE_1 + \".txt\";\n+    final URL resource = ClasspathResourceLoaderTest.class.getResource(resourceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYxOTc1OA=="}, "originalCommit": {"oid": "8786771696f6a89fae7d1e6cbc62ae73c0b6a5f9"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1696, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}