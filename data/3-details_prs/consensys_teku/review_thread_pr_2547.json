{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NzI5MDUx", "number": 2547, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToyNzowM1rOEW-EnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToyOToxN1rOEW-HWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTIxMTE3OnYy", "diffSide": "RIGHT", "path": "sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToyNzowM1rOG-gY8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToyNzowM1rOG-gY8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5NTU2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return peerStatus.getFinalizedEpoch().compareTo(currentEpoch) <= 0\n          \n          \n            \n                    && peerStatus.getHeadSlot().compareTo(currentSlot.plus(slotErrorThreshold)) <= 0;\n          \n          \n            \n                return peerStatus.getFinalizedEpoch().isLessThanOrEqualTo(currentEpoch)\n          \n          \n            \n                    && peerStatus.getHeadSlot().isLessThanOrEqualTo(currentSlot.plus(slotErrorThreshold));", "url": "https://github.com/ConsenSys/teku/pull/2547#discussion_r468195568", "createdAt": "2020-08-10T21:27:03Z", "author": {"login": "ajsutton"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java", "diffHunk": "@@ -255,14 +260,35 @@ private boolean isPeerSyncSuitable(Eth2Peer peer) {\n         \"Looking for suitable peer (out of {}) with finalized epoch > {}.\",\n         network.getPeerCount(),\n         ourFinalizedEpoch);\n+\n+    final PeerStatus peerStatus = peer.getStatus();\n     return !peersWithSyncErrors.contains(peer.getId())\n-        && (peer.getStatus().getFinalizedEpoch().compareTo(ourFinalizedEpoch) > 0\n-            || isHeadMoreThanAnEpochAhead(peer));\n+        && peerStatusIsConsistentWithOurNode(peerStatus)\n+        && peerIsAheadOfOurNode(peerStatus, ourFinalizedEpoch);\n+  }\n+\n+  /** Make sure remote peer is not broadcasting a chain state from the future. */\n+  private boolean peerStatusIsConsistentWithOurNode(final PeerStatus peerStatus) {\n+    final UInt64 currentSlot = storageClient.getCurrentSlot().orElse(UInt64.ZERO);\n+    final UInt64 currentEpoch = compute_epoch_at_slot(currentSlot);\n+    final UInt64 slotErrorThreshold = UInt64.ONE;\n+\n+    return peerStatus.getFinalizedEpoch().compareTo(currentEpoch) <= 0\n+        && peerStatus.getHeadSlot().compareTo(currentSlot.plus(slotErrorThreshold)) <= 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a17ea5a25a532712c8baccbe742be84407ec366"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTIxMjkyOnYy", "diffSide": "RIGHT", "path": "sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToyNzozOFrOG-gZ-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToyNzozOFrOG-gZ-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5NTgzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return peerStatus.getFinalizedEpoch().compareTo(finalizedEpochThreshold) > 0\n          \n          \n            \n                return peerStatus.getFinalizedEpoch().isGreaterThan(finalizedEpochThreshold)", "url": "https://github.com/ConsenSys/teku/pull/2547#discussion_r468195834", "createdAt": "2020-08-10T21:27:38Z", "author": {"login": "ajsutton"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java", "diffHunk": "@@ -255,14 +260,35 @@ private boolean isPeerSyncSuitable(Eth2Peer peer) {\n         \"Looking for suitable peer (out of {}) with finalized epoch > {}.\",\n         network.getPeerCount(),\n         ourFinalizedEpoch);\n+\n+    final PeerStatus peerStatus = peer.getStatus();\n     return !peersWithSyncErrors.contains(peer.getId())\n-        && (peer.getStatus().getFinalizedEpoch().compareTo(ourFinalizedEpoch) > 0\n-            || isHeadMoreThanAnEpochAhead(peer));\n+        && peerStatusIsConsistentWithOurNode(peerStatus)\n+        && peerIsAheadOfOurNode(peerStatus, ourFinalizedEpoch);\n+  }\n+\n+  /** Make sure remote peer is not broadcasting a chain state from the future. */\n+  private boolean peerStatusIsConsistentWithOurNode(final PeerStatus peerStatus) {\n+    final UInt64 currentSlot = storageClient.getCurrentSlot().orElse(UInt64.ZERO);\n+    final UInt64 currentEpoch = compute_epoch_at_slot(currentSlot);\n+    final UInt64 slotErrorThreshold = UInt64.ONE;\n+\n+    return peerStatus.getFinalizedEpoch().compareTo(currentEpoch) <= 0\n+        && peerStatus.getHeadSlot().compareTo(currentSlot.plus(slotErrorThreshold)) <= 0;\n   }\n \n-  private boolean isHeadMoreThanAnEpochAhead(final Eth2Peer peer) {\n+  private boolean peerIsAheadOfOurNode(\n+      final PeerStatus peerStatus, final UInt64 ourFinalizedEpoch) {\n+    final UInt64 finalizedEpochThreshold = ourFinalizedEpoch.plus(SYNC_THRESHOLD_IN_EPOCHS);\n+\n+    return peerStatus.getFinalizedEpoch().compareTo(finalizedEpochThreshold) > 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a17ea5a25a532712c8baccbe742be84407ec366"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTIxNDA2OnYy", "diffSide": "RIGHT", "path": "sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToyNzo1OVrOG-gamw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToyNzo1OVrOG-gamw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5NTk5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return peerStatus.getHeadSlot().compareTo(headSlotThreshold) > 0;\n          \n          \n            \n                return peerStatus.getHeadSlot().isGreaterThan(headSlotThreshold);", "url": "https://github.com/ConsenSys/teku/pull/2547#discussion_r468195995", "createdAt": "2020-08-10T21:27:59Z", "author": {"login": "ajsutton"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java", "diffHunk": "@@ -255,14 +260,35 @@ private boolean isPeerSyncSuitable(Eth2Peer peer) {\n         \"Looking for suitable peer (out of {}) with finalized epoch > {}.\",\n         network.getPeerCount(),\n         ourFinalizedEpoch);\n+\n+    final PeerStatus peerStatus = peer.getStatus();\n     return !peersWithSyncErrors.contains(peer.getId())\n-        && (peer.getStatus().getFinalizedEpoch().compareTo(ourFinalizedEpoch) > 0\n-            || isHeadMoreThanAnEpochAhead(peer));\n+        && peerStatusIsConsistentWithOurNode(peerStatus)\n+        && peerIsAheadOfOurNode(peerStatus, ourFinalizedEpoch);\n+  }\n+\n+  /** Make sure remote peer is not broadcasting a chain state from the future. */\n+  private boolean peerStatusIsConsistentWithOurNode(final PeerStatus peerStatus) {\n+    final UInt64 currentSlot = storageClient.getCurrentSlot().orElse(UInt64.ZERO);\n+    final UInt64 currentEpoch = compute_epoch_at_slot(currentSlot);\n+    final UInt64 slotErrorThreshold = UInt64.ONE;\n+\n+    return peerStatus.getFinalizedEpoch().compareTo(currentEpoch) <= 0\n+        && peerStatus.getHeadSlot().compareTo(currentSlot.plus(slotErrorThreshold)) <= 0;\n   }\n \n-  private boolean isHeadMoreThanAnEpochAhead(final Eth2Peer peer) {\n+  private boolean peerIsAheadOfOurNode(\n+      final PeerStatus peerStatus, final UInt64 ourFinalizedEpoch) {\n+    final UInt64 finalizedEpochThreshold = ourFinalizedEpoch.plus(SYNC_THRESHOLD_IN_EPOCHS);\n+\n+    return peerStatus.getFinalizedEpoch().compareTo(finalizedEpochThreshold) > 0\n+        || isPeerHeadSlotAhead(peerStatus);\n+  }\n+\n+  private boolean isPeerHeadSlotAhead(final PeerStatus peerStatus) {\n     final UInt64 ourHeadSlot = storageClient.getBestSlot();\n-    final UInt64 theirHeadSlot = peer.getStatus().getHeadSlot();\n-    return theirHeadSlot.compareTo(ourHeadSlot.plus(UInt64.valueOf(SLOTS_PER_EPOCH))) > 0;\n+    final UInt64 headSlotThreshold = ourHeadSlot.plus(SYNC_THRESHOLD_IN_SLOTS);\n+\n+    return peerStatus.getHeadSlot().compareTo(headSlotThreshold) > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a17ea5a25a532712c8baccbe742be84407ec366"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTIxODE3OnYy", "diffSide": "RIGHT", "path": "sync/src/test/java/tech/pegasys/teku/sync/SyncManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToyOToxN1rOG-gdGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToyOToxN1rOG-gdGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5NjYzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    PEER_STATUS.getHeadSlot().minus(UInt64.valueOf(Constants.SLOTS_PER_EPOCH + 1));\n          \n          \n            \n                    PEER_STATUS.getHeadSlot().minus(Constants.SLOTS_PER_EPOCH + 1);", "url": "https://github.com/ConsenSys/teku/pull/2547#discussion_r468196634", "createdAt": "2020-08-10T21:29:17Z", "author": {"login": "ajsutton"}, "path": "sync/src/test/java/tech/pegasys/teku/sync/SyncManagerTest.java", "diffHunk": "@@ -116,12 +168,59 @@ void sync_existingPeers() {\n     assertThat(syncManager.isSyncQueued()).isFalse();\n   }\n \n+  @Test\n+  void sync_existingPeers_remoteHeadSlotIsAheadButWithinErrorThreshold() {\n+    final UInt64 headSlot = PEER_HEAD_SLOT.minus(UInt64.ONE);\n+    localSlot.set(headSlot);\n+\n+    when(network.streamPeers()).thenReturn(Stream.of(peer));\n+\n+    final SafeFuture<PeerSyncResult> syncFuture = new SafeFuture<>();\n+    when(peerSync.sync(peer)).thenReturn(syncFuture);\n+\n+    assertThat(syncManager.start()).isCompleted();\n+    assertThat(syncManager.isSyncActive()).isTrue();\n+    assertThat(syncManager.isSyncQueued()).isFalse();\n+\n+    verify(peerSync).sync(peer);\n+\n+    // Signal the peer sync is complete\n+    syncFuture.complete(PeerSyncResult.SUCCESSFUL_SYNC);\n+\n+    // Check that the sync is done and the peer was not disconnected.\n+    assertThat(syncManager.isSyncActive()).isFalse();\n+    assertThat(syncManager.isSyncQueued()).isFalse();\n+  }\n+\n+  @Test\n+  void sync_existingPeers_peerFinalizedEpochMoreThan1EpochAhead() {\n+    setLocalChainState(\n+        PEER_STATUS.getHeadSlot(), PEER_STATUS.getFinalizedEpoch().minus(UInt64.valueOf(2)));\n+    when(network.streamPeers()).thenReturn(Stream.of(peer));\n+\n+    final SafeFuture<PeerSyncResult> syncFuture = new SafeFuture<>();\n+    when(peerSync.sync(peer)).thenReturn(syncFuture);\n+\n+    assertThat(syncManager.start()).isCompleted();\n+    assertThat(syncManager.isSyncActive()).isTrue();\n+    assertThat(syncManager.isSyncQueued()).isFalse();\n+\n+    verify(peerSync).sync(peer);\n+\n+    // Signal the peer sync is complete\n+    syncFuture.complete(PeerSyncResult.SUCCESSFUL_SYNC);\n+\n+    // Check that the sync is done and the peer was not disconnected.\n+    assertThat(syncManager.isSyncActive()).isFalse();\n+    assertThat(syncManager.isSyncQueued()).isFalse();\n+  }\n+\n   @Test\n   void sync_existingPeerWithSameFinalizedEpochButMuchBetterHeadSlot() {\n     when(network.streamPeers()).thenReturn(Stream.of(peer));\n-    when(storageClient.getFinalizedEpoch()).thenReturn(PEER_STATUS.getFinalizedEpoch());\n-    when(storageClient.getBestSlot())\n-        .thenReturn(PEER_STATUS.getHeadSlot().minus(UInt64.valueOf(Constants.SLOTS_PER_EPOCH + 1)));\n+    final UInt64 oldHeadSlot =\n+        PEER_STATUS.getHeadSlot().minus(UInt64.valueOf(Constants.SLOTS_PER_EPOCH + 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a17ea5a25a532712c8baccbe742be84407ec366"}, "originalPosition": 145}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3388, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}