{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NTE5OTM0", "number": 1369, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMTo1NDowM1rODnsGZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMTo1ODoyMFrODnsIiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTQzNTg5OnYy", "diffSide": "RIGHT", "path": "artemis/src/test/java/tech/pegasys/artemis/cli/deposit/DepositRegisterCommandTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMTo1NDowM1rOF11OTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNzowMjoxNlrOF15ZGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MDg2MA==", "bodyText": "Since you already have a tempDir you could just resolve two new paths i.e. tempDir.resolve(\"keystore\") to represent the keyfile and password and let junit clean up the files.", "url": "https://github.com/ConsenSys/teku/pull/1369#discussion_r391990860", "createdAt": "2020-03-13T01:54:03Z", "author": {"login": "jframe"}, "path": "artemis/src/test/java/tech/pegasys/artemis/cli/deposit/DepositRegisterCommandTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.util.async.SafeFuture.completedFuture;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.function.Consumer;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.bytes.Bytes48;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import picocli.CommandLine;\n+import tech.pegasys.artemis.bls.keystore.KeyStore;\n+import tech.pegasys.artemis.bls.keystore.KeyStoreLoader;\n+import tech.pegasys.artemis.bls.keystore.model.Cipher;\n+import tech.pegasys.artemis.bls.keystore.model.KdfParam;\n+import tech.pegasys.artemis.bls.keystore.model.KeyStoreData;\n+import tech.pegasys.artemis.bls.keystore.model.SCryptParam;\n+import tech.pegasys.artemis.cli.deposit.DepositRegisterCommand.ValidatorKeyOptions;\n+import tech.pegasys.artemis.cli.deposit.DepositRegisterCommand.ValidatorKeyStoreOptions;\n+import tech.pegasys.artemis.services.powchain.DepositTransactionSender;\n+\n+class DepositRegisterCommandTest {\n+  private static final Consumer<Integer> shutdownFunction = status -> {};\n+  private static final String PASSWORD = \"testpassword\";\n+  private static final Bytes BLS_PRIVATE_KEY =\n+      Bytes48.fromHexStringLenient(\"19d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\");\n+  private static final Bytes32 SALT =\n+      Bytes32.fromHexString(\"d4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\");\n+  private static final Bytes AES_IV_PARAM = Bytes.fromHexString(\"264daa3f303d7259501c93d997d84fe6\");\n+  private static final Cipher CIPHER = new Cipher(AES_IV_PARAM);\n+  private static final KdfParam KDF_PARAM = new SCryptParam(32, 262144, 1, 8, SALT);\n+  private static final KeyStoreData VALIDATOR_KEYSTORE =\n+      KeyStore.encrypt(BLS_PRIVATE_KEY, PASSWORD, \"\", KDF_PARAM, CIPHER);\n+  private CommonParams commonParams;\n+  private CommandLine.Model.CommandSpec commandSpec;\n+\n+  @BeforeEach\n+  void setUp() {\n+    commonParams = mock(CommonParams.class);\n+    commandSpec = mock(CommandLine.Model.CommandSpec.class);\n+    final CommandLine commandLine = mock(CommandLine.class);\n+    final DepositTransactionSender depositTransactionSender = mock(DepositTransactionSender.class);\n+\n+    when(commandSpec.commandLine()).thenReturn(commandLine);\n+    when(commonParams.createTransactionSender()).thenReturn(depositTransactionSender);\n+    when(depositTransactionSender.sendDepositTransaction(any(), any(), any()))\n+        .thenReturn(completedFuture(null));\n+  }\n+\n+  @Test\n+  void registerWithEncryptedValidatorKeystore(@TempDir final Path tempDir) throws IOException {\n+    final Path keyStoreFile = Files.createTempFile(tempDir, \"keystore\", \".json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "647b805eee6da49e439bc62bdcd6fd329e4a711f"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA1OTE2MQ==", "bodyText": "Updated.", "url": "https://github.com/ConsenSys/teku/pull/1369#discussion_r392059161", "createdAt": "2020-03-13T07:02:16Z", "author": {"login": "usmansaleem"}, "path": "artemis/src/test/java/tech/pegasys/artemis/cli/deposit/DepositRegisterCommandTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.util.async.SafeFuture.completedFuture;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.function.Consumer;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.bytes.Bytes48;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import picocli.CommandLine;\n+import tech.pegasys.artemis.bls.keystore.KeyStore;\n+import tech.pegasys.artemis.bls.keystore.KeyStoreLoader;\n+import tech.pegasys.artemis.bls.keystore.model.Cipher;\n+import tech.pegasys.artemis.bls.keystore.model.KdfParam;\n+import tech.pegasys.artemis.bls.keystore.model.KeyStoreData;\n+import tech.pegasys.artemis.bls.keystore.model.SCryptParam;\n+import tech.pegasys.artemis.cli.deposit.DepositRegisterCommand.ValidatorKeyOptions;\n+import tech.pegasys.artemis.cli.deposit.DepositRegisterCommand.ValidatorKeyStoreOptions;\n+import tech.pegasys.artemis.services.powchain.DepositTransactionSender;\n+\n+class DepositRegisterCommandTest {\n+  private static final Consumer<Integer> shutdownFunction = status -> {};\n+  private static final String PASSWORD = \"testpassword\";\n+  private static final Bytes BLS_PRIVATE_KEY =\n+      Bytes48.fromHexStringLenient(\"19d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\");\n+  private static final Bytes32 SALT =\n+      Bytes32.fromHexString(\"d4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\");\n+  private static final Bytes AES_IV_PARAM = Bytes.fromHexString(\"264daa3f303d7259501c93d997d84fe6\");\n+  private static final Cipher CIPHER = new Cipher(AES_IV_PARAM);\n+  private static final KdfParam KDF_PARAM = new SCryptParam(32, 262144, 1, 8, SALT);\n+  private static final KeyStoreData VALIDATOR_KEYSTORE =\n+      KeyStore.encrypt(BLS_PRIVATE_KEY, PASSWORD, \"\", KDF_PARAM, CIPHER);\n+  private CommonParams commonParams;\n+  private CommandLine.Model.CommandSpec commandSpec;\n+\n+  @BeforeEach\n+  void setUp() {\n+    commonParams = mock(CommonParams.class);\n+    commandSpec = mock(CommandLine.Model.CommandSpec.class);\n+    final CommandLine commandLine = mock(CommandLine.class);\n+    final DepositTransactionSender depositTransactionSender = mock(DepositTransactionSender.class);\n+\n+    when(commandSpec.commandLine()).thenReturn(commandLine);\n+    when(commonParams.createTransactionSender()).thenReturn(depositTransactionSender);\n+    when(depositTransactionSender.sendDepositTransaction(any(), any(), any()))\n+        .thenReturn(completedFuture(null));\n+  }\n+\n+  @Test\n+  void registerWithEncryptedValidatorKeystore(@TempDir final Path tempDir) throws IOException {\n+    final Path keyStoreFile = Files.createTempFile(tempDir, \"keystore\", \".json\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MDg2MA=="}, "originalCommit": {"oid": "647b805eee6da49e439bc62bdcd6fd329e4a711f"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTQzNzIwOnYy", "diffSide": "RIGHT", "path": "artemis/src/test/java/tech/pegasys/artemis/cli/deposit/DepositRegisterCommandTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMTo1NToxOVrOF11PKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNzowMjo0MVrOF15ZkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MTA4Mg==", "bodyText": "What is this testing? There are no assertions or verifications happening that I can see.", "url": "https://github.com/ConsenSys/teku/pull/1369#discussion_r391991082", "createdAt": "2020-03-13T01:55:19Z", "author": {"login": "jframe"}, "path": "artemis/src/test/java/tech/pegasys/artemis/cli/deposit/DepositRegisterCommandTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.util.async.SafeFuture.completedFuture;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.function.Consumer;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.bytes.Bytes48;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import picocli.CommandLine;\n+import tech.pegasys.artemis.bls.keystore.KeyStore;\n+import tech.pegasys.artemis.bls.keystore.KeyStoreLoader;\n+import tech.pegasys.artemis.bls.keystore.model.Cipher;\n+import tech.pegasys.artemis.bls.keystore.model.KdfParam;\n+import tech.pegasys.artemis.bls.keystore.model.KeyStoreData;\n+import tech.pegasys.artemis.bls.keystore.model.SCryptParam;\n+import tech.pegasys.artemis.cli.deposit.DepositRegisterCommand.ValidatorKeyOptions;\n+import tech.pegasys.artemis.cli.deposit.DepositRegisterCommand.ValidatorKeyStoreOptions;\n+import tech.pegasys.artemis.services.powchain.DepositTransactionSender;\n+\n+class DepositRegisterCommandTest {\n+  private static final Consumer<Integer> shutdownFunction = status -> {};\n+  private static final String PASSWORD = \"testpassword\";\n+  private static final Bytes BLS_PRIVATE_KEY =\n+      Bytes48.fromHexStringLenient(\"19d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\");\n+  private static final Bytes32 SALT =\n+      Bytes32.fromHexString(\"d4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\");\n+  private static final Bytes AES_IV_PARAM = Bytes.fromHexString(\"264daa3f303d7259501c93d997d84fe6\");\n+  private static final Cipher CIPHER = new Cipher(AES_IV_PARAM);\n+  private static final KdfParam KDF_PARAM = new SCryptParam(32, 262144, 1, 8, SALT);\n+  private static final KeyStoreData VALIDATOR_KEYSTORE =\n+      KeyStore.encrypt(BLS_PRIVATE_KEY, PASSWORD, \"\", KDF_PARAM, CIPHER);\n+  private CommonParams commonParams;\n+  private CommandLine.Model.CommandSpec commandSpec;\n+\n+  @BeforeEach\n+  void setUp() {\n+    commonParams = mock(CommonParams.class);\n+    commandSpec = mock(CommandLine.Model.CommandSpec.class);\n+    final CommandLine commandLine = mock(CommandLine.class);\n+    final DepositTransactionSender depositTransactionSender = mock(DepositTransactionSender.class);\n+\n+    when(commandSpec.commandLine()).thenReturn(commandLine);\n+    when(commonParams.createTransactionSender()).thenReturn(depositTransactionSender);\n+    when(depositTransactionSender.sendDepositTransaction(any(), any(), any()))\n+        .thenReturn(completedFuture(null));\n+  }\n+\n+  @Test\n+  void registerWithEncryptedValidatorKeystore(@TempDir final Path tempDir) throws IOException {\n+    final Path keyStoreFile = Files.createTempFile(tempDir, \"keystore\", \".json\");\n+    KeyStoreLoader.saveToFile(keyStoreFile, VALIDATOR_KEYSTORE);\n+\n+    final Path keystorePassword = Files.createTempFile(tempDir, \"password\", \".txt\");\n+    Files.writeString(keystorePassword, PASSWORD);\n+\n+    ValidatorKeyOptions validatorKeyOptions =\n+        buildValidatorKeyOptions(keyStoreFile, keystorePassword);\n+\n+    final DepositRegisterCommand depositRegisterCommand =\n+        new DepositRegisterCommand(\n+            shutdownFunction, commandSpec, commonParams, validatorKeyOptions, \"\");\n+\n+    depositRegisterCommand.run();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "647b805eee6da49e439bc62bdcd6fd329e4a711f"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA1OTI4MQ==", "bodyText": "Updated to include couple of assertions.", "url": "https://github.com/ConsenSys/teku/pull/1369#discussion_r392059281", "createdAt": "2020-03-13T07:02:41Z", "author": {"login": "usmansaleem"}, "path": "artemis/src/test/java/tech/pegasys/artemis/cli/deposit/DepositRegisterCommandTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.util.async.SafeFuture.completedFuture;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.function.Consumer;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.bytes.Bytes48;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import picocli.CommandLine;\n+import tech.pegasys.artemis.bls.keystore.KeyStore;\n+import tech.pegasys.artemis.bls.keystore.KeyStoreLoader;\n+import tech.pegasys.artemis.bls.keystore.model.Cipher;\n+import tech.pegasys.artemis.bls.keystore.model.KdfParam;\n+import tech.pegasys.artemis.bls.keystore.model.KeyStoreData;\n+import tech.pegasys.artemis.bls.keystore.model.SCryptParam;\n+import tech.pegasys.artemis.cli.deposit.DepositRegisterCommand.ValidatorKeyOptions;\n+import tech.pegasys.artemis.cli.deposit.DepositRegisterCommand.ValidatorKeyStoreOptions;\n+import tech.pegasys.artemis.services.powchain.DepositTransactionSender;\n+\n+class DepositRegisterCommandTest {\n+  private static final Consumer<Integer> shutdownFunction = status -> {};\n+  private static final String PASSWORD = \"testpassword\";\n+  private static final Bytes BLS_PRIVATE_KEY =\n+      Bytes48.fromHexStringLenient(\"19d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\");\n+  private static final Bytes32 SALT =\n+      Bytes32.fromHexString(\"d4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\");\n+  private static final Bytes AES_IV_PARAM = Bytes.fromHexString(\"264daa3f303d7259501c93d997d84fe6\");\n+  private static final Cipher CIPHER = new Cipher(AES_IV_PARAM);\n+  private static final KdfParam KDF_PARAM = new SCryptParam(32, 262144, 1, 8, SALT);\n+  private static final KeyStoreData VALIDATOR_KEYSTORE =\n+      KeyStore.encrypt(BLS_PRIVATE_KEY, PASSWORD, \"\", KDF_PARAM, CIPHER);\n+  private CommonParams commonParams;\n+  private CommandLine.Model.CommandSpec commandSpec;\n+\n+  @BeforeEach\n+  void setUp() {\n+    commonParams = mock(CommonParams.class);\n+    commandSpec = mock(CommandLine.Model.CommandSpec.class);\n+    final CommandLine commandLine = mock(CommandLine.class);\n+    final DepositTransactionSender depositTransactionSender = mock(DepositTransactionSender.class);\n+\n+    when(commandSpec.commandLine()).thenReturn(commandLine);\n+    when(commonParams.createTransactionSender()).thenReturn(depositTransactionSender);\n+    when(depositTransactionSender.sendDepositTransaction(any(), any(), any()))\n+        .thenReturn(completedFuture(null));\n+  }\n+\n+  @Test\n+  void registerWithEncryptedValidatorKeystore(@TempDir final Path tempDir) throws IOException {\n+    final Path keyStoreFile = Files.createTempFile(tempDir, \"keystore\", \".json\");\n+    KeyStoreLoader.saveToFile(keyStoreFile, VALIDATOR_KEYSTORE);\n+\n+    final Path keystorePassword = Files.createTempFile(tempDir, \"password\", \".txt\");\n+    Files.writeString(keystorePassword, PASSWORD);\n+\n+    ValidatorKeyOptions validatorKeyOptions =\n+        buildValidatorKeyOptions(keyStoreFile, keystorePassword);\n+\n+    final DepositRegisterCommand depositRegisterCommand =\n+        new DepositRegisterCommand(\n+            shutdownFunction, commandSpec, commonParams, validatorKeyOptions, \"\");\n+\n+    depositRegisterCommand.run();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MTA4Mg=="}, "originalCommit": {"oid": "647b805eee6da49e439bc62bdcd6fd329e4a711f"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTQ0MTM5OnYy", "diffSide": "RIGHT", "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/KeystorePasswordOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMTo1ODoyMFrOF11R3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNzowMjo1MVrOF15ZxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MTc3Mw==", "bodyText": "Would be good to have a unit test for these", "url": "https://github.com/ConsenSys/teku/pull/1369#discussion_r391991773", "createdAt": "2020-03-13T01:58:20Z", "author": {"login": "jframe"}, "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/KeystorePasswordOptions.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+\n+import com.google.common.io.Files;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Function;\n+import picocli.CommandLine;\n+import picocli.CommandLine.ParameterException;\n+\n+public interface KeystorePasswordOptions {\n+  File getPasswordFile();\n+\n+  String getPasswordEnvironmentVariable();\n+\n+  static String readFromFile(final CommandLine commandLine, final File passwordFile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "647b805eee6da49e439bc62bdcd6fd329e4a711f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA1OTMzMg==", "bodyText": "Added test cases.", "url": "https://github.com/ConsenSys/teku/pull/1369#discussion_r392059332", "createdAt": "2020-03-13T07:02:51Z", "author": {"login": "usmansaleem"}, "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/KeystorePasswordOptions.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+\n+import com.google.common.io.Files;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Function;\n+import picocli.CommandLine;\n+import picocli.CommandLine.ParameterException;\n+\n+public interface KeystorePasswordOptions {\n+  File getPasswordFile();\n+\n+  String getPasswordEnvironmentVariable();\n+\n+  static String readFromFile(final CommandLine commandLine, final File passwordFile) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MTc3Mw=="}, "originalCommit": {"oid": "647b805eee6da49e439bc62bdcd6fd329e4a711f"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2542, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}