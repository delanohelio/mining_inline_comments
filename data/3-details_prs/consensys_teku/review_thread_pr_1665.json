{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MzUyMTU2", "number": 1665, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoyOToxN1rOD2tsqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDowMzowMVrOD3NeVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Njk4NDEwOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/topics/Eth2TopicHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoyOToxN1rOGMmKbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoyOToxN1rOGMmKbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg2MTM1OQ==", "bodyText": "nice :)", "url": "https://github.com/ConsenSys/teku/pull/1665#discussion_r415861359", "createdAt": "2020-04-27T14:29:17Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/topics/Eth2TopicHandler.java", "diffHunk": "@@ -58,7 +68,7 @@ protected Object createEvent(T data) {\n \n   protected abstract T deserialize(Bytes bytes) throws SSZException;\n \n-  protected abstract boolean validateData(T dataObject);\n+  protected abstract ValidationResult validateData(T dataObject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b383385cc58d830d6cca5c967cf5da512baf7fb8"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzI2ODAwOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/topics/validation/SignedAggregateAndProofValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNToxODo0OVrOGMoxag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMDo1Mjo0NFrOGM91gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwNDEwNg==", "bodyText": "Should we drop least-recently-accessed?  Also, we should either define a specific constant for this set, or have a catch-all generic set size:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  ConcurrentLimitedSet.create(VALID_BLOCK_SET_SIZE, LimitStrategy.DROP_OLDEST_ELEMENT);\n          \n          \n            \n                  ConcurrentLimitedSet.create(VALID_AGGREGATION_SET_SIZE, LimitStrategy.DROP_LEAST_RECENTLY_ACCESSED);", "url": "https://github.com/ConsenSys/teku/pull/1665#discussion_r415904106", "createdAt": "2020-04-27T15:18:49Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/topics/validation/SignedAggregateAndProofValidator.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2.gossip.topics.validation;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_signing_root;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.get_domain;\n+import static tech.pegasys.artemis.datastructures.util.CommitteeUtil.getAggregatorModulo;\n+import static tech.pegasys.artemis.datastructures.util.CommitteeUtil.isAggregator;\n+import static tech.pegasys.artemis.networking.eth2.gossip.topics.validation.ValidationResult.INVALID;\n+import static tech.pegasys.artemis.util.config.Constants.DOMAIN_SELECTION_PROOF;\n+import static tech.pegasys.artemis.util.config.Constants.VALID_BLOCK_SET_SIZE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.bls.BLS;\n+import tech.pegasys.artemis.bls.BLSPublicKey;\n+import tech.pegasys.artemis.bls.BLSSignature;\n+import tech.pegasys.artemis.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.artemis.datastructures.operations.Attestation;\n+import tech.pegasys.artemis.datastructures.operations.SignedAggregateAndProof;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.util.CommitteeUtil;\n+import tech.pegasys.artemis.datastructures.util.ValidatorsUtil;\n+import tech.pegasys.artemis.storage.client.RecentChainData;\n+import tech.pegasys.artemis.util.collections.ConcurrentLimitedSet;\n+import tech.pegasys.artemis.util.collections.LimitStrategy;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class SignedAggregateAndProofValidator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final Set<AggregatorIndexAndSlot> receivedValidAggregations =\n+      ConcurrentLimitedSet.create(VALID_BLOCK_SET_SIZE, LimitStrategy.DROP_OLDEST_ELEMENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b383385cc58d830d6cca5c967cf5da512baf7fb8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI0OTIxOQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1665#discussion_r416249219", "createdAt": "2020-04-28T00:52:44Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/topics/validation/SignedAggregateAndProofValidator.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2.gossip.topics.validation;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_signing_root;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.get_domain;\n+import static tech.pegasys.artemis.datastructures.util.CommitteeUtil.getAggregatorModulo;\n+import static tech.pegasys.artemis.datastructures.util.CommitteeUtil.isAggregator;\n+import static tech.pegasys.artemis.networking.eth2.gossip.topics.validation.ValidationResult.INVALID;\n+import static tech.pegasys.artemis.util.config.Constants.DOMAIN_SELECTION_PROOF;\n+import static tech.pegasys.artemis.util.config.Constants.VALID_BLOCK_SET_SIZE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.bls.BLS;\n+import tech.pegasys.artemis.bls.BLSPublicKey;\n+import tech.pegasys.artemis.bls.BLSSignature;\n+import tech.pegasys.artemis.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.artemis.datastructures.operations.Attestation;\n+import tech.pegasys.artemis.datastructures.operations.SignedAggregateAndProof;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.util.CommitteeUtil;\n+import tech.pegasys.artemis.datastructures.util.ValidatorsUtil;\n+import tech.pegasys.artemis.storage.client.RecentChainData;\n+import tech.pegasys.artemis.util.collections.ConcurrentLimitedSet;\n+import tech.pegasys.artemis.util.collections.LimitStrategy;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class SignedAggregateAndProofValidator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final Set<AggregatorIndexAndSlot> receivedValidAggregations =\n+      ConcurrentLimitedSet.create(VALID_BLOCK_SET_SIZE, LimitStrategy.DROP_OLDEST_ELEMENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwNDEwNg=="}, "originalCommit": {"oid": "b383385cc58d830d6cca5c967cf5da512baf7fb8"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzI5NjUyOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/topics/validation/SignedAggregateAndProofValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNToyMzo1NVrOGMpCHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMDozNDozN1rOGM9c_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwODM4Mg==", "bodyText": "Should we be tracking this by AggregatorIndexAndEpoch?:\nThe aggregate is the first valid aggregate received for the aggregator with index aggregate_and_proof.aggregator_index for the epoch aggregate.data.target.epoch.\n\nI think this will let us short-circuit earlier in some cases.", "url": "https://github.com/ConsenSys/teku/pull/1665#discussion_r415908382", "createdAt": "2020-04-27T15:23:55Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/topics/validation/SignedAggregateAndProofValidator.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2.gossip.topics.validation;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_signing_root;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.get_domain;\n+import static tech.pegasys.artemis.datastructures.util.CommitteeUtil.getAggregatorModulo;\n+import static tech.pegasys.artemis.datastructures.util.CommitteeUtil.isAggregator;\n+import static tech.pegasys.artemis.networking.eth2.gossip.topics.validation.ValidationResult.INVALID;\n+import static tech.pegasys.artemis.util.config.Constants.DOMAIN_SELECTION_PROOF;\n+import static tech.pegasys.artemis.util.config.Constants.VALID_BLOCK_SET_SIZE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.bls.BLS;\n+import tech.pegasys.artemis.bls.BLSPublicKey;\n+import tech.pegasys.artemis.bls.BLSSignature;\n+import tech.pegasys.artemis.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.artemis.datastructures.operations.Attestation;\n+import tech.pegasys.artemis.datastructures.operations.SignedAggregateAndProof;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.util.CommitteeUtil;\n+import tech.pegasys.artemis.datastructures.util.ValidatorsUtil;\n+import tech.pegasys.artemis.storage.client.RecentChainData;\n+import tech.pegasys.artemis.util.collections.ConcurrentLimitedSet;\n+import tech.pegasys.artemis.util.collections.LimitStrategy;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class SignedAggregateAndProofValidator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final Set<AggregatorIndexAndSlot> receivedValidAggregations =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b383385cc58d830d6cca5c967cf5da512baf7fb8"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI0Mjk0MQ==", "bodyText": "v0.11.2 does indeed make that change.  May as well apply it now.", "url": "https://github.com/ConsenSys/teku/pull/1665#discussion_r416242941", "createdAt": "2020-04-28T00:34:37Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/topics/validation/SignedAggregateAndProofValidator.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2.gossip.topics.validation;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_signing_root;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.get_domain;\n+import static tech.pegasys.artemis.datastructures.util.CommitteeUtil.getAggregatorModulo;\n+import static tech.pegasys.artemis.datastructures.util.CommitteeUtil.isAggregator;\n+import static tech.pegasys.artemis.networking.eth2.gossip.topics.validation.ValidationResult.INVALID;\n+import static tech.pegasys.artemis.util.config.Constants.DOMAIN_SELECTION_PROOF;\n+import static tech.pegasys.artemis.util.config.Constants.VALID_BLOCK_SET_SIZE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.bls.BLS;\n+import tech.pegasys.artemis.bls.BLSPublicKey;\n+import tech.pegasys.artemis.bls.BLSSignature;\n+import tech.pegasys.artemis.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.artemis.datastructures.operations.Attestation;\n+import tech.pegasys.artemis.datastructures.operations.SignedAggregateAndProof;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.util.CommitteeUtil;\n+import tech.pegasys.artemis.datastructures.util.ValidatorsUtil;\n+import tech.pegasys.artemis.storage.client.RecentChainData;\n+import tech.pegasys.artemis.util.collections.ConcurrentLimitedSet;\n+import tech.pegasys.artemis.util.collections.LimitStrategy;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class SignedAggregateAndProofValidator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final Set<AggregatorIndexAndSlot> receivedValidAggregations =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkwODM4Mg=="}, "originalCommit": {"oid": "b383385cc58d830d6cca5c967cf5da512baf7fb8"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzM1MTc0OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/topics/validation/SignedAggregateAndProofValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNTozMzozNlrOGMpiOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMDo1MjoxOFrOGM91GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkxNjYwMg==", "bodyText": "I don't think we're hitting this constraint:\nThe aggregate attestation defined by hash_tree_root(aggregate) has not already been seen (via aggregate gossip, within a verified block, or through the creation of an equivalent aggregate locally).", "url": "https://github.com/ConsenSys/teku/pull/1665#discussion_r415916602", "createdAt": "2020-04-27T15:33:36Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/topics/validation/SignedAggregateAndProofValidator.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2.gossip.topics.validation;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_signing_root;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.get_domain;\n+import static tech.pegasys.artemis.datastructures.util.CommitteeUtil.getAggregatorModulo;\n+import static tech.pegasys.artemis.datastructures.util.CommitteeUtil.isAggregator;\n+import static tech.pegasys.artemis.networking.eth2.gossip.topics.validation.ValidationResult.INVALID;\n+import static tech.pegasys.artemis.util.config.Constants.DOMAIN_SELECTION_PROOF;\n+import static tech.pegasys.artemis.util.config.Constants.VALID_BLOCK_SET_SIZE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.bls.BLS;\n+import tech.pegasys.artemis.bls.BLSPublicKey;\n+import tech.pegasys.artemis.bls.BLSSignature;\n+import tech.pegasys.artemis.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.artemis.datastructures.operations.Attestation;\n+import tech.pegasys.artemis.datastructures.operations.SignedAggregateAndProof;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.util.CommitteeUtil;\n+import tech.pegasys.artemis.datastructures.util.ValidatorsUtil;\n+import tech.pegasys.artemis.storage.client.RecentChainData;\n+import tech.pegasys.artemis.util.collections.ConcurrentLimitedSet;\n+import tech.pegasys.artemis.util.collections.LimitStrategy;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class SignedAggregateAndProofValidator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final Set<AggregatorIndexAndSlot> receivedValidAggregations =\n+      ConcurrentLimitedSet.create(VALID_BLOCK_SET_SIZE, LimitStrategy.DROP_OLDEST_ELEMENT);\n+  private final AttestationValidator attestationValidator;\n+  private final RecentChainData recentChainData;\n+\n+  public SignedAggregateAndProofValidator(\n+      final AttestationValidator attestationValidator, final RecentChainData recentChainData) {\n+    this.attestationValidator = attestationValidator;\n+    this.recentChainData = recentChainData;\n+  }\n+\n+  public ValidationResult validate(final SignedAggregateAndProof signedAggregate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b383385cc58d830d6cca5c967cf5da512baf7fb8"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI0OTExMw==", "bodyText": "No we're not.  Not really sure how to implement that to be honest. It really reaches outside the scope of the network.  Probably need to make the cache of seen attestations it's own object that can be shared around more. Added https://pegasys1.atlassian.net/browse/BC-398", "url": "https://github.com/ConsenSys/teku/pull/1665#discussion_r416249113", "createdAt": "2020-04-28T00:52:18Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/topics/validation/SignedAggregateAndProofValidator.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2.gossip.topics.validation;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_signing_root;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.get_domain;\n+import static tech.pegasys.artemis.datastructures.util.CommitteeUtil.getAggregatorModulo;\n+import static tech.pegasys.artemis.datastructures.util.CommitteeUtil.isAggregator;\n+import static tech.pegasys.artemis.networking.eth2.gossip.topics.validation.ValidationResult.INVALID;\n+import static tech.pegasys.artemis.util.config.Constants.DOMAIN_SELECTION_PROOF;\n+import static tech.pegasys.artemis.util.config.Constants.VALID_BLOCK_SET_SIZE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.bls.BLS;\n+import tech.pegasys.artemis.bls.BLSPublicKey;\n+import tech.pegasys.artemis.bls.BLSSignature;\n+import tech.pegasys.artemis.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.artemis.datastructures.operations.Attestation;\n+import tech.pegasys.artemis.datastructures.operations.SignedAggregateAndProof;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.util.CommitteeUtil;\n+import tech.pegasys.artemis.datastructures.util.ValidatorsUtil;\n+import tech.pegasys.artemis.storage.client.RecentChainData;\n+import tech.pegasys.artemis.util.collections.ConcurrentLimitedSet;\n+import tech.pegasys.artemis.util.collections.LimitStrategy;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class SignedAggregateAndProofValidator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final Set<AggregatorIndexAndSlot> receivedValidAggregations =\n+      ConcurrentLimitedSet.create(VALID_BLOCK_SET_SIZE, LimitStrategy.DROP_OLDEST_ELEMENT);\n+  private final AttestationValidator attestationValidator;\n+  private final RecentChainData recentChainData;\n+\n+  public SignedAggregateAndProofValidator(\n+      final AttestationValidator attestationValidator, final RecentChainData recentChainData) {\n+    this.attestationValidator = attestationValidator;\n+    this.recentChainData = recentChainData;\n+  }\n+\n+  public ValidationResult validate(final SignedAggregateAndProof signedAggregate) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkxNjYwMg=="}, "originalCommit": {"oid": "b383385cc58d830d6cca5c967cf5da512baf7fb8"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzQwNDU4OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/topics/validation/SignedAggregateAndProofValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNTo0Mjo1NFrOGMqBNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMDo0MjozN1rOGM9oLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkyNDUzMg==", "bodyText": "Shouldn't we return SAVED_FOR_FUTURE here if the state isn't available?", "url": "https://github.com/ConsenSys/teku/pull/1665#discussion_r415924532", "createdAt": "2020-04-27T15:42:54Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/topics/validation/SignedAggregateAndProofValidator.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2.gossip.topics.validation;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_signing_root;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.get_domain;\n+import static tech.pegasys.artemis.datastructures.util.CommitteeUtil.getAggregatorModulo;\n+import static tech.pegasys.artemis.datastructures.util.CommitteeUtil.isAggregator;\n+import static tech.pegasys.artemis.networking.eth2.gossip.topics.validation.ValidationResult.INVALID;\n+import static tech.pegasys.artemis.util.config.Constants.DOMAIN_SELECTION_PROOF;\n+import static tech.pegasys.artemis.util.config.Constants.VALID_BLOCK_SET_SIZE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.bls.BLS;\n+import tech.pegasys.artemis.bls.BLSPublicKey;\n+import tech.pegasys.artemis.bls.BLSSignature;\n+import tech.pegasys.artemis.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.artemis.datastructures.operations.Attestation;\n+import tech.pegasys.artemis.datastructures.operations.SignedAggregateAndProof;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.util.CommitteeUtil;\n+import tech.pegasys.artemis.datastructures.util.ValidatorsUtil;\n+import tech.pegasys.artemis.storage.client.RecentChainData;\n+import tech.pegasys.artemis.util.collections.ConcurrentLimitedSet;\n+import tech.pegasys.artemis.util.collections.LimitStrategy;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class SignedAggregateAndProofValidator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final Set<AggregatorIndexAndSlot> receivedValidAggregations =\n+      ConcurrentLimitedSet.create(VALID_BLOCK_SET_SIZE, LimitStrategy.DROP_OLDEST_ELEMENT);\n+  private final AttestationValidator attestationValidator;\n+  private final RecentChainData recentChainData;\n+\n+  public SignedAggregateAndProofValidator(\n+      final AttestationValidator attestationValidator, final RecentChainData recentChainData) {\n+    this.attestationValidator = attestationValidator;\n+    this.recentChainData = recentChainData;\n+  }\n+\n+  public ValidationResult validate(final SignedAggregateAndProof signedAggregate) {\n+    final AggregateAndProof aggregateAndProof = signedAggregate.getMessage();\n+    final Attestation aggregate = aggregateAndProof.getAggregate();\n+\n+    final UnsignedLong aggregateSlot = aggregate.getData().getSlot();\n+    final AggregatorIndexAndSlot aggregatorIndexAndSlot =\n+        new AggregatorIndexAndSlot(aggregateAndProof.getIndex(), aggregateSlot);\n+    if (receivedValidAggregations.contains(aggregatorIndexAndSlot)) {\n+      LOG.trace(\"Rejecting duplicate aggregate\");\n+      return INVALID;\n+    }\n+\n+    final ValidationResult aggregateValidationResult =\n+        attestationValidator.singleOrAggregateAttestationChecks(aggregate);\n+    if (aggregateValidationResult == INVALID) {\n+      LOG.trace(\"Rejecting aggregate because attestation failed validation\");\n+      return aggregateValidationResult;\n+    }\n+\n+    // State must be present because the aggregate is valid\n+    final BeaconState state =\n+        recentChainData.getBlockState(aggregate.getData().getBeacon_block_root()).orElseThrow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b383385cc58d830d6cca5c967cf5da512baf7fb8"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI0NTgwNA==", "bodyText": "Ooo, good spot. That used to be safe because we returned the attestationValidator result but we now see if we can find some reason to upgrade from SAVED to INVALID.", "url": "https://github.com/ConsenSys/teku/pull/1665#discussion_r416245804", "createdAt": "2020-04-28T00:42:37Z", "author": {"login": "ajsutton"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/topics/validation/SignedAggregateAndProofValidator.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2.gossip.topics.validation;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_signing_root;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.get_domain;\n+import static tech.pegasys.artemis.datastructures.util.CommitteeUtil.getAggregatorModulo;\n+import static tech.pegasys.artemis.datastructures.util.CommitteeUtil.isAggregator;\n+import static tech.pegasys.artemis.networking.eth2.gossip.topics.validation.ValidationResult.INVALID;\n+import static tech.pegasys.artemis.util.config.Constants.DOMAIN_SELECTION_PROOF;\n+import static tech.pegasys.artemis.util.config.Constants.VALID_BLOCK_SET_SIZE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.bls.BLS;\n+import tech.pegasys.artemis.bls.BLSPublicKey;\n+import tech.pegasys.artemis.bls.BLSSignature;\n+import tech.pegasys.artemis.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.artemis.datastructures.operations.Attestation;\n+import tech.pegasys.artemis.datastructures.operations.SignedAggregateAndProof;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.util.CommitteeUtil;\n+import tech.pegasys.artemis.datastructures.util.ValidatorsUtil;\n+import tech.pegasys.artemis.storage.client.RecentChainData;\n+import tech.pegasys.artemis.util.collections.ConcurrentLimitedSet;\n+import tech.pegasys.artemis.util.collections.LimitStrategy;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class SignedAggregateAndProofValidator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final Set<AggregatorIndexAndSlot> receivedValidAggregations =\n+      ConcurrentLimitedSet.create(VALID_BLOCK_SET_SIZE, LimitStrategy.DROP_OLDEST_ELEMENT);\n+  private final AttestationValidator attestationValidator;\n+  private final RecentChainData recentChainData;\n+\n+  public SignedAggregateAndProofValidator(\n+      final AttestationValidator attestationValidator, final RecentChainData recentChainData) {\n+    this.attestationValidator = attestationValidator;\n+    this.recentChainData = recentChainData;\n+  }\n+\n+  public ValidationResult validate(final SignedAggregateAndProof signedAggregate) {\n+    final AggregateAndProof aggregateAndProof = signedAggregate.getMessage();\n+    final Attestation aggregate = aggregateAndProof.getAggregate();\n+\n+    final UnsignedLong aggregateSlot = aggregate.getData().getSlot();\n+    final AggregatorIndexAndSlot aggregatorIndexAndSlot =\n+        new AggregatorIndexAndSlot(aggregateAndProof.getIndex(), aggregateSlot);\n+    if (receivedValidAggregations.contains(aggregatorIndexAndSlot)) {\n+      LOG.trace(\"Rejecting duplicate aggregate\");\n+      return INVALID;\n+    }\n+\n+    final ValidationResult aggregateValidationResult =\n+        attestationValidator.singleOrAggregateAttestationChecks(aggregate);\n+    if (aggregateValidationResult == INVALID) {\n+      LOG.trace(\"Rejecting aggregate because attestation failed validation\");\n+      return aggregateValidationResult;\n+    }\n+\n+    // State must be present because the aggregate is valid\n+    final BeaconState state =\n+        recentChainData.getBlockState(aggregate.getData().getBeacon_block_root()).orElseThrow();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkyNDUzMg=="}, "originalCommit": {"oid": "b383385cc58d830d6cca5c967cf5da512baf7fb8"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjE5MDMwOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/topics/validation/SignedAggregateAndProofValidator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDowMzowMVrOGNVpGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDowMzowMVrOGNVpGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzOTI1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  ConcurrentLimitedSet.create(VALID_BLOCK_SET_SIZE, LimitStrategy.DROP_LEAST_RECENTLY_ACCESSED);\n          \n          \n            \n                  ConcurrentLimitedSet.create(VALID_AGGREGATE_SET_SIZE, LimitStrategy.DROP_LEAST_RECENTLY_ACCESSED);", "url": "https://github.com/ConsenSys/teku/pull/1665#discussion_r416639259", "createdAt": "2020-04-28T14:03:01Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/topics/validation/SignedAggregateAndProofValidator.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2.gossip.topics.validation;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_epoch_at_slot;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.compute_signing_root;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.get_domain;\n+import static tech.pegasys.artemis.datastructures.util.CommitteeUtil.getAggregatorModulo;\n+import static tech.pegasys.artemis.datastructures.util.CommitteeUtil.isAggregator;\n+import static tech.pegasys.artemis.networking.eth2.gossip.topics.validation.ValidationResult.INVALID;\n+import static tech.pegasys.artemis.networking.eth2.gossip.topics.validation.ValidationResult.SAVED_FOR_FUTURE;\n+import static tech.pegasys.artemis.util.config.Constants.DOMAIN_SELECTION_PROOF;\n+import static tech.pegasys.artemis.util.config.Constants.VALID_BLOCK_SET_SIZE;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.bls.BLS;\n+import tech.pegasys.artemis.bls.BLSPublicKey;\n+import tech.pegasys.artemis.bls.BLSSignature;\n+import tech.pegasys.artemis.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.artemis.datastructures.operations.Attestation;\n+import tech.pegasys.artemis.datastructures.operations.SignedAggregateAndProof;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.util.CommitteeUtil;\n+import tech.pegasys.artemis.datastructures.util.ValidatorsUtil;\n+import tech.pegasys.artemis.storage.client.RecentChainData;\n+import tech.pegasys.artemis.util.collections.ConcurrentLimitedSet;\n+import tech.pegasys.artemis.util.collections.LimitStrategy;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class SignedAggregateAndProofValidator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final Set<AggregatorIndexAndEpoch> receivedValidAggregations =\n+      ConcurrentLimitedSet.create(VALID_BLOCK_SET_SIZE, LimitStrategy.DROP_LEAST_RECENTLY_ACCESSED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8d1930628b6295adf11717a793880516c01e507"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3723, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}