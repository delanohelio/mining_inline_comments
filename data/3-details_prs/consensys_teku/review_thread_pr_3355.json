{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyMTE5NjY4", "number": 3355, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1MToyNVrOFAiOLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjowMDo0MVrOFCAiVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTA1MDA0OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/teku/test/acceptance/VoluntaryExitAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1MToyNVrOH-4xyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1NTowMlrOH-47JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNDAxMA==", "bodyText": "We should push all this logic into the DSL rather than doing it directly in the test.  The AT itself should be just high level steps like\nkeys = depositSender.sendValidatorDeposits(..)\ncreateValidatorNode(beaconNode, keys)\nsendVoluntaryExit(beaconNode, keys)", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r535704010", "createdAt": "2020-12-03T22:51:25Z", "author": {"login": "ajsutton"}, "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/teku/test/acceptance/VoluntaryExitAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.test.acceptance;\n+\n+import static tech.pegasys.teku.util.config.Constants.MAX_EFFECTIVE_BALANCE;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.test.acceptance.dsl.AcceptanceTestBase;\n+import tech.pegasys.teku.test.acceptance.dsl.BesuNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuDepositSender;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuValidatorNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuVoluntaryExit;\n+import tech.pegasys.teku.test.acceptance.dsl.tools.deposits.ValidatorKeyGenerator;\n+import tech.pegasys.teku.test.acceptance.dsl.tools.deposits.ValidatorKeystoreGenerator;\n+\n+public class VoluntaryExitAcceptanceTest extends AcceptanceTestBase {\n+\n+  @Test\n+  void test() throws Exception {\n+    final BesuNode eth1Node = createBesuNode();\n+    eth1Node.start();\n+\n+    int numberOfValidators = 4;\n+    final TekuDepositSender depositSender = createTekuDepositSender();\n+    final List<ValidatorKeyGenerator.ValidatorKeys> validatorKeys =\n+        depositSender.generateValidatorKeys(numberOfValidators);\n+    depositSender.sendValidatorDeposits(eth1Node, validatorKeys, MAX_EFFECTIVE_BALANCE);\n+\n+    final String validatorKeysPassword = \"validatorsKeysPassword\";\n+    final Path validatorInfoDirectoryPath = Path.of(\"./validatorInfo\");\n+    final String keysDirectory = \"keys\";\n+    final String passwordsDirectory = \"passwords\";\n+    final Path keysOutputPath = validatorInfoDirectoryPath.resolve(keysDirectory);\n+    final Path passwordsOutputPath = validatorInfoDirectoryPath.resolve(passwordsDirectory);\n+    final ValidatorKeystoreGenerator keystoreGenerator =\n+        new ValidatorKeystoreGenerator(\n+            validatorKeysPassword, keysOutputPath, passwordsOutputPath, (__) -> {});\n+\n+    // create temporary tar file which will be copied to docker containers\n+    File validatorInfoTar = File.createTempFile(\"validatorInfo\", \".tar\");\n+    validatorInfoTar.deleteOnExit();\n+\n+    // create keystores using the validator keys generated by deposit sender\n+    keystoreGenerator.generateKeystoreAndPasswordFiles(\n+        validatorKeys.stream()\n+            .map(ValidatorKeyGenerator.ValidatorKeys::getValidatorKey)\n+            .collect(Collectors.toList()));\n+\n+    // copy keystores directory to tar file and delete the now redundant directory\n+    copyDirectoryToTarFile(validatorInfoDirectoryPath, validatorInfoTar.toPath());\n+    FileUtils.deleteDirectory(validatorInfoDirectoryPath.toFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e39dfcd0a6bb260536492dd0bd36e690531202f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNjQwNQ==", "bodyText": "Yep. Will do.", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r535706405", "createdAt": "2020-12-03T22:55:02Z", "author": {"login": "cemozerr"}, "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/teku/test/acceptance/VoluntaryExitAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.test.acceptance;\n+\n+import static tech.pegasys.teku.util.config.Constants.MAX_EFFECTIVE_BALANCE;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.test.acceptance.dsl.AcceptanceTestBase;\n+import tech.pegasys.teku.test.acceptance.dsl.BesuNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuDepositSender;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuValidatorNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuVoluntaryExit;\n+import tech.pegasys.teku.test.acceptance.dsl.tools.deposits.ValidatorKeyGenerator;\n+import tech.pegasys.teku.test.acceptance.dsl.tools.deposits.ValidatorKeystoreGenerator;\n+\n+public class VoluntaryExitAcceptanceTest extends AcceptanceTestBase {\n+\n+  @Test\n+  void test() throws Exception {\n+    final BesuNode eth1Node = createBesuNode();\n+    eth1Node.start();\n+\n+    int numberOfValidators = 4;\n+    final TekuDepositSender depositSender = createTekuDepositSender();\n+    final List<ValidatorKeyGenerator.ValidatorKeys> validatorKeys =\n+        depositSender.generateValidatorKeys(numberOfValidators);\n+    depositSender.sendValidatorDeposits(eth1Node, validatorKeys, MAX_EFFECTIVE_BALANCE);\n+\n+    final String validatorKeysPassword = \"validatorsKeysPassword\";\n+    final Path validatorInfoDirectoryPath = Path.of(\"./validatorInfo\");\n+    final String keysDirectory = \"keys\";\n+    final String passwordsDirectory = \"passwords\";\n+    final Path keysOutputPath = validatorInfoDirectoryPath.resolve(keysDirectory);\n+    final Path passwordsOutputPath = validatorInfoDirectoryPath.resolve(passwordsDirectory);\n+    final ValidatorKeystoreGenerator keystoreGenerator =\n+        new ValidatorKeystoreGenerator(\n+            validatorKeysPassword, keysOutputPath, passwordsOutputPath, (__) -> {});\n+\n+    // create temporary tar file which will be copied to docker containers\n+    File validatorInfoTar = File.createTempFile(\"validatorInfo\", \".tar\");\n+    validatorInfoTar.deleteOnExit();\n+\n+    // create keystores using the validator keys generated by deposit sender\n+    keystoreGenerator.generateKeystoreAndPasswordFiles(\n+        validatorKeys.stream()\n+            .map(ValidatorKeyGenerator.ValidatorKeys::getValidatorKey)\n+            .collect(Collectors.toList()));\n+\n+    // copy keystores directory to tar file and delete the now redundant directory\n+    copyDirectoryToTarFile(validatorInfoDirectoryPath, validatorInfoTar.toPath());\n+    FileUtils.deleteDirectory(validatorInfoDirectoryPath.toFile());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNDAxMA=="}, "originalCommit": {"oid": "3e39dfcd0a6bb260536492dd0bd36e690531202f"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTA1OTUyOnYy", "diffSide": "RIGHT", "path": "util/src/main/resources/tech/pegasys/teku/util/config/less-swift.yaml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMjo1MzowMlrOH-43KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwNDoxODoxNVrOH_p3PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNTM4NQ==", "bodyText": "Why did we need this instead of just swift which is reasonable sane now or just minimal?", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r535705385", "createdAt": "2020-12-03T22:53:02Z", "author": {"login": "ajsutton"}, "path": "util/src/main/resources/tech/pegasys/teku/util/config/less-swift.yaml", "diffHunk": "@@ -0,0 +1,161 @@\n+# Teku specific Swift preset:\n+# Made for quick acceptance tests.\n+# Copy of the minimal preset but\n+# SECONDS_PER_SLOT is 1 instead of 6 and\n+# SLOTS_PER_EPOCH is 4 instead of 8\n+# MIN_GENESIS_ACTIVE_VALIDATOR_COUNT is 4 instead of 64\n+\n+CONFIG_NAME: \"less-swift\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e39dfcd0a6bb260536492dd0bd36e690531202f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNjI4OA==", "bodyText": "Because we needed both a really short genesis delay, and 6 second slots. Swift has 3 second slots, and minimal has 300 seconds genesis delay.", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r535706288", "createdAt": "2020-12-03T22:54:51Z", "author": {"login": "cemozerr"}, "path": "util/src/main/resources/tech/pegasys/teku/util/config/less-swift.yaml", "diffHunk": "@@ -0,0 +1,161 @@\n+# Teku specific Swift preset:\n+# Made for quick acceptance tests.\n+# Copy of the minimal preset but\n+# SECONDS_PER_SLOT is 1 instead of 6 and\n+# SLOTS_PER_EPOCH is 4 instead of 8\n+# MIN_GENESIS_ACTIVE_VALIDATOR_COUNT is 4 instead of 64\n+\n+CONFIG_NAME: \"less-swift\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNTM4NQ=="}, "originalCommit": {"oid": "3e39dfcd0a6bb260536492dd0bd36e690531202f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjUwODIyMA==", "bodyText": "and now we need a SHARD_COMMITTEE_PERIOD of 0.", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r536508220", "createdAt": "2020-12-05T04:18:15Z", "author": {"login": "cemozerr"}, "path": "util/src/main/resources/tech/pegasys/teku/util/config/less-swift.yaml", "diffHunk": "@@ -0,0 +1,161 @@\n+# Teku specific Swift preset:\n+# Made for quick acceptance tests.\n+# Copy of the minimal preset but\n+# SECONDS_PER_SLOT is 1 instead of 6 and\n+# SLOTS_PER_EPOCH is 4 instead of 8\n+# MIN_GENESIS_ACTIVE_VALIDATOR_COUNT is 4 instead of 64\n+\n+CONFIG_NAME: \"less-swift\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcwNTM4NQ=="}, "originalCommit": {"oid": "3e39dfcd0a6bb260536492dd0bd36e690531202f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTk1ODExOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/src/testFixtures/java/tech/pegasys/teku/test/acceptance/dsl/TekuVoluntaryExit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMzowODozNlrOIAUILQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxODoxNDoyNVrOIAz78w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIwMDY4NQ==", "bodyText": "nit: Probably just leave this unset by default. It will be a lot less confusing than having the rest api timeout.", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r537200685", "createdAt": "2020-12-07T03:08:36Z", "author": {"login": "ajsutton"}, "path": "acceptance-tests/src/testFixtures/java/tech/pegasys/teku/test/acceptance/dsl/TekuVoluntaryExit.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.test.acceptance.dsl;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.utility.MountableFile;\n+\n+public class TekuVoluntaryExit extends Node {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final TekuVoluntaryExit.Config config;\n+  private boolean started = false;\n+  private Set<File> configFiles;\n+\n+  private TekuVoluntaryExit(final Network network, final TekuVoluntaryExit.Config config) {\n+    super(network, TEKU_DOCKER_IMAGE, LOG);\n+    this.config = config;\n+\n+    container\n+        .withWorkingDirectory(WORKING_DIRECTORY)\n+        .withCommand(\n+            \"voluntary-exit\", \"--confirmation-enabled=false\", \"--config-file\", CONFIG_FILE_PATH);\n+  }\n+\n+  public static TekuVoluntaryExit create(\n+      final Network network, Consumer<TekuVoluntaryExit.Config> configOptions) {\n+\n+    final TekuVoluntaryExit.Config config = new TekuVoluntaryExit.Config();\n+    configOptions.accept(config);\n+\n+    final TekuVoluntaryExit node = new TekuVoluntaryExit(network, config);\n+\n+    return node;\n+  }\n+\n+  public void start() throws Exception {\n+    assertThat(started).isFalse();\n+    LOG.debug(\"Start voluntary exit command line process {}\", nodeAlias);\n+    started = true;\n+    final Map<File, String> configFiles = config.write();\n+    this.configFiles = configFiles.keySet();\n+    configFiles.forEach(\n+        (localFile, targetPath) ->\n+            container.withCopyFileToContainer(\n+                MountableFile.forHostPath(localFile.getAbsolutePath()), targetPath));\n+    container.start();\n+  }\n+\n+  @Override\n+  public void stop() {\n+    if (!started) {\n+      return;\n+    }\n+    LOG.debug(\"Shutting down\");\n+    configFiles.forEach(\n+        configFile -> {\n+          if (!configFile.delete() && configFile.exists()) {\n+            throw new RuntimeException(\"Failed to delete config file: \" + configFile);\n+          }\n+        });\n+    container.stop();\n+  }\n+\n+  public static class Config {\n+    private Map<String, Object> configMap = new HashMap<>();\n+\n+    public Config() {\n+      configMap.put(\"log-destination\", \"console\");\n+      configMap.put(\"beacon-node-api-endpoint\", \"http://notvalid.restapi.com\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf7599664ad195e7b215c8617288d78300e00b7"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcyMTg0Mw==", "bodyText": "Makes sense. Done.", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r537721843", "createdAt": "2020-12-07T18:14:25Z", "author": {"login": "cemozerr"}, "path": "acceptance-tests/src/testFixtures/java/tech/pegasys/teku/test/acceptance/dsl/TekuVoluntaryExit.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.test.acceptance.dsl;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.utility.MountableFile;\n+\n+public class TekuVoluntaryExit extends Node {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final TekuVoluntaryExit.Config config;\n+  private boolean started = false;\n+  private Set<File> configFiles;\n+\n+  private TekuVoluntaryExit(final Network network, final TekuVoluntaryExit.Config config) {\n+    super(network, TEKU_DOCKER_IMAGE, LOG);\n+    this.config = config;\n+\n+    container\n+        .withWorkingDirectory(WORKING_DIRECTORY)\n+        .withCommand(\n+            \"voluntary-exit\", \"--confirmation-enabled=false\", \"--config-file\", CONFIG_FILE_PATH);\n+  }\n+\n+  public static TekuVoluntaryExit create(\n+      final Network network, Consumer<TekuVoluntaryExit.Config> configOptions) {\n+\n+    final TekuVoluntaryExit.Config config = new TekuVoluntaryExit.Config();\n+    configOptions.accept(config);\n+\n+    final TekuVoluntaryExit node = new TekuVoluntaryExit(network, config);\n+\n+    return node;\n+  }\n+\n+  public void start() throws Exception {\n+    assertThat(started).isFalse();\n+    LOG.debug(\"Start voluntary exit command line process {}\", nodeAlias);\n+    started = true;\n+    final Map<File, String> configFiles = config.write();\n+    this.configFiles = configFiles.keySet();\n+    configFiles.forEach(\n+        (localFile, targetPath) ->\n+            container.withCopyFileToContainer(\n+                MountableFile.forHostPath(localFile.getAbsolutePath()), targetPath));\n+    container.start();\n+  }\n+\n+  @Override\n+  public void stop() {\n+    if (!started) {\n+      return;\n+    }\n+    LOG.debug(\"Shutting down\");\n+    configFiles.forEach(\n+        configFile -> {\n+          if (!configFile.delete() && configFile.exists()) {\n+            throw new RuntimeException(\"Failed to delete config file: \" + configFile);\n+          }\n+        });\n+    container.stop();\n+  }\n+\n+  public static class Config {\n+    private Map<String, Object> configMap = new HashMap<>();\n+\n+    public Config() {\n+      configMap.put(\"log-destination\", \"console\");\n+      configMap.put(\"beacon-node-api-endpoint\", \"http://notvalid.restapi.com\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIwMDY4NQ=="}, "originalCommit": {"oid": "fbf7599664ad195e7b215c8617288d78300e00b7"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MTk2MDgzOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/teku/test/acceptance/VoluntaryExitAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMzowOTo0OVrOIAUJhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxODoxNjozMVrOIA0BXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIwMTAyOQ==", "bodyText": "nit: I'd be tempted to make this withBeaconNode and just pass beaconNode then have the internals of the DSL get the right rest API URL.", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r537201029", "createdAt": "2020-12-07T03:09:49Z", "author": {"login": "ajsutton"}, "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/teku/test/acceptance/VoluntaryExitAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.test.acceptance;\n+\n+import java.io.File;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.test.acceptance.dsl.AcceptanceTestBase;\n+import tech.pegasys.teku.test.acceptance.dsl.BesuNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuValidatorNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuVoluntaryExit;\n+\n+public class VoluntaryExitAcceptanceTest extends AcceptanceTestBase {\n+\n+  @Test\n+  void shouldChangeValidatorStatusAfterSubmittingVoluntaryExit() throws Exception {\n+    final BesuNode eth1Node = createBesuNode();\n+    eth1Node.start();\n+\n+    final List<BLSKeyPair> validatorKeys = createKeysAndSendDeposits(eth1Node, 4);\n+\n+    final File validatorInfoTar = createValidatorKeystores(validatorKeys, \"keys\", \"passwords\");\n+\n+    final TekuNode beaconNode =\n+        createTekuNode(config -> config.withNetwork(\"less-swift\").withDepositsFrom(eth1Node));\n+\n+    final TekuValidatorNode validatorClient =\n+        createValidatorNode(\n+            config ->\n+                config\n+                    .withNetwork(\"less-swift\")\n+                    .withInteropModeDisabled()\n+                    .withValidatorKeys(\"/opt/teku/keys:/opt/teku/passwords\")\n+                    .withBeaconNodeEndpoint(beaconNode.getBeaconRestApiUrl()));\n+    validatorClient.copyContentsToWorkingDirectory(validatorInfoTar);\n+\n+    final TekuVoluntaryExit voluntaryExitProcess =\n+        createVoluntaryExit(\n+            config ->\n+                config\n+                    .withValidatorKeys(\"/opt/teku/keys:/opt/teku/passwords\")\n+                    .withBeaconNodeEndpoint(beaconNode.getBeaconRestApiUrl()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf7599664ad195e7b215c8617288d78300e00b7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzcyMzIyOQ==", "bodyText": "Makes sense. Done.", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r537723229", "createdAt": "2020-12-07T18:16:31Z", "author": {"login": "cemozerr"}, "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/teku/test/acceptance/VoluntaryExitAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.test.acceptance;\n+\n+import java.io.File;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.test.acceptance.dsl.AcceptanceTestBase;\n+import tech.pegasys.teku.test.acceptance.dsl.BesuNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuValidatorNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuVoluntaryExit;\n+\n+public class VoluntaryExitAcceptanceTest extends AcceptanceTestBase {\n+\n+  @Test\n+  void shouldChangeValidatorStatusAfterSubmittingVoluntaryExit() throws Exception {\n+    final BesuNode eth1Node = createBesuNode();\n+    eth1Node.start();\n+\n+    final List<BLSKeyPair> validatorKeys = createKeysAndSendDeposits(eth1Node, 4);\n+\n+    final File validatorInfoTar = createValidatorKeystores(validatorKeys, \"keys\", \"passwords\");\n+\n+    final TekuNode beaconNode =\n+        createTekuNode(config -> config.withNetwork(\"less-swift\").withDepositsFrom(eth1Node));\n+\n+    final TekuValidatorNode validatorClient =\n+        createValidatorNode(\n+            config ->\n+                config\n+                    .withNetwork(\"less-swift\")\n+                    .withInteropModeDisabled()\n+                    .withValidatorKeys(\"/opt/teku/keys:/opt/teku/passwords\")\n+                    .withBeaconNodeEndpoint(beaconNode.getBeaconRestApiUrl()));\n+    validatorClient.copyContentsToWorkingDirectory(validatorInfoTar);\n+\n+    final TekuVoluntaryExit voluntaryExitProcess =\n+        createVoluntaryExit(\n+            config ->\n+                config\n+                    .withValidatorKeys(\"/opt/teku/keys:/opt/teku/passwords\")\n+                    .withBeaconNodeEndpoint(beaconNode.getBeaconRestApiUrl()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIwMTAyOQ=="}, "originalCommit": {"oid": "fbf7599664ad195e7b215c8617288d78300e00b7"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjAwMjMzOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/teku/test/acceptance/VoluntaryExitAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwMzoyODo0MFrOIAUexw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOTo0NzozN1rOIA3wxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIwNjQ3MQ==", "bodyText": "I think this should be encapsulated by the DSL better.  I'd say createKeysAndSendDeposits should be pushed into TekuDepositSender rather than the test base class, and it then returns a custom ValidatorKeys object.  So this becomes something like:\nfinal ValidatorKeys validatorKeys = createTekuDepositSender().sendValidatorDeposits(eth1Node, 4);\n\nand then instead of withValidatorKeys(\"/opt/teku/keys:/opt/teku/passwords\"),  both the validator node and the validator exit node would just have withValidatorKeys(validatorKeys) and ValidatorKeys then has a method to get the keys as a tarball (which it can cache to avoid creating the keystores twice) and the copying into docker just becomes a part of that then.", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r537206471", "createdAt": "2020-12-07T03:28:40Z", "author": {"login": "ajsutton"}, "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/teku/test/acceptance/VoluntaryExitAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.test.acceptance;\n+\n+import java.io.File;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.test.acceptance.dsl.AcceptanceTestBase;\n+import tech.pegasys.teku.test.acceptance.dsl.BesuNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuValidatorNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuVoluntaryExit;\n+\n+public class VoluntaryExitAcceptanceTest extends AcceptanceTestBase {\n+\n+  @Test\n+  void shouldChangeValidatorStatusAfterSubmittingVoluntaryExit() throws Exception {\n+    final BesuNode eth1Node = createBesuNode();\n+    eth1Node.start();\n+\n+    final List<BLSKeyPair> validatorKeys = createKeysAndSendDeposits(eth1Node, 4);\n+\n+    final File validatorInfoTar = createValidatorKeystores(validatorKeys, \"keys\", \"passwords\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf7599664ad195e7b215c8617288d78300e00b7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc4NDUxNw==", "bodyText": "Makes sense. Done.", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r537784517", "createdAt": "2020-12-07T19:47:37Z", "author": {"login": "cemozerr"}, "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/teku/test/acceptance/VoluntaryExitAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.test.acceptance;\n+\n+import java.io.File;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.test.acceptance.dsl.AcceptanceTestBase;\n+import tech.pegasys.teku.test.acceptance.dsl.BesuNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuValidatorNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuVoluntaryExit;\n+\n+public class VoluntaryExitAcceptanceTest extends AcceptanceTestBase {\n+\n+  @Test\n+  void shouldChangeValidatorStatusAfterSubmittingVoluntaryExit() throws Exception {\n+    final BesuNode eth1Node = createBesuNode();\n+    eth1Node.start();\n+\n+    final List<BLSKeyPair> validatorKeys = createKeysAndSendDeposits(eth1Node, 4);\n+\n+    final File validatorInfoTar = createValidatorKeystores(validatorKeys, \"keys\", \"passwords\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzIwNjQ3MQ=="}, "originalCommit": {"oid": "fbf7599664ad195e7b215c8617288d78300e00b7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjQ4MzcwOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/teku/test/acceptance/GenesisStateAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTo1NTo1OVrOIA8g_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTozMzowN1rOIBypMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2MjM5Nw==", "bodyText": "Not sure we needed this change.  It could be a combined beacon and validator client so TekuNode seems like a reasonable name.", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r537862397", "createdAt": "2020-12-07T21:55:59Z", "author": {"login": "ajsutton"}, "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/teku/test/acceptance/GenesisStateAcceptanceTest.java", "diffHunk": "@@ -33,11 +33,11 @@ public void shouldCreateTheSameGenesisState() throws Exception {\n \n     createTekuDepositSender().sendValidatorDeposits(eth1Node, 4);\n \n-    final TekuNode firstTeku = createTekuNode(config -> config.withDepositsFrom(eth1Node));\n+    final TekuBeaconNode firstTeku = createTekuNode(config -> config.withDepositsFrom(eth1Node));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d028d28838dc0c1f82899b7f1ee51e7896b8e683"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0OTIzNA==", "bodyText": "Artifact left from an attempt I had to make all the nodes using pegasys:develop image into one TekuNode. Proved too hard. Reverting this change.", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r538749234", "createdAt": "2020-12-08T19:33:07Z", "author": {"login": "cemozerr"}, "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/teku/test/acceptance/GenesisStateAcceptanceTest.java", "diffHunk": "@@ -33,11 +33,11 @@ public void shouldCreateTheSameGenesisState() throws Exception {\n \n     createTekuDepositSender().sendValidatorDeposits(eth1Node, 4);\n \n-    final TekuNode firstTeku = createTekuNode(config -> config.withDepositsFrom(eth1Node));\n+    final TekuBeaconNode firstTeku = createTekuNode(config -> config.withDepositsFrom(eth1Node));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2MjM5Nw=="}, "originalCommit": {"oid": "d028d28838dc0c1f82899b7f1ee51e7896b8e683"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjQ4OTY2OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/teku/test/acceptance/VoluntaryExitAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTo1NzoyMVrOIA8kSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTozNDo0MVrOIBys4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2MzI0MQ==", "bodyText": "nit: Would be nice if this could just be a chained call.", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r537863241", "createdAt": "2020-12-07T21:57:21Z", "author": {"login": "ajsutton"}, "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/teku/test/acceptance/VoluntaryExitAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.test.acceptance;\n+\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.test.acceptance.dsl.AcceptanceTestBase;\n+import tech.pegasys.teku.test.acceptance.dsl.BesuNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuBeaconNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuValidatorNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuVoluntaryExit;\n+import tech.pegasys.teku.test.acceptance.dsl.tools.deposits.ValidatorKeystores;\n+\n+public class VoluntaryExitAcceptanceTest extends AcceptanceTestBase {\n+\n+  @Test\n+  void shouldChangeValidatorStatusAfterSubmittingVoluntaryExit() throws Exception {\n+    final BesuNode eth1Node = createBesuNode();\n+    eth1Node.start();\n+\n+    final ValidatorKeystores validatorKeystores =\n+        createTekuDepositSender().sendValidatorDeposits(eth1Node, 4);\n+\n+    final TekuBeaconNode beaconNode =\n+        createTekuNode(config -> config.withNetwork(\"less-swift\").withDepositsFrom(eth1Node));\n+\n+    final TekuValidatorNode validatorClient =\n+        createValidatorNode(\n+            config ->\n+                config\n+                    .withNetwork(\"less-swift\")\n+                    .withInteropModeDisabled()\n+                    .withBeaconNode(beaconNode));\n+    validatorClient.withValidatorKeystores(validatorKeystores);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d028d28838dc0c1f82899b7f1ee51e7896b8e683"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1MDE3Nw==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r538750177", "createdAt": "2020-12-08T19:34:41Z", "author": {"login": "cemozerr"}, "path": "acceptance-tests/src/acceptance-test/java/tech/pegasys/teku/test/acceptance/VoluntaryExitAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.test.acceptance;\n+\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.test.acceptance.dsl.AcceptanceTestBase;\n+import tech.pegasys.teku.test.acceptance.dsl.BesuNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuBeaconNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuValidatorNode;\n+import tech.pegasys.teku.test.acceptance.dsl.TekuVoluntaryExit;\n+import tech.pegasys.teku.test.acceptance.dsl.tools.deposits.ValidatorKeystores;\n+\n+public class VoluntaryExitAcceptanceTest extends AcceptanceTestBase {\n+\n+  @Test\n+  void shouldChangeValidatorStatusAfterSubmittingVoluntaryExit() throws Exception {\n+    final BesuNode eth1Node = createBesuNode();\n+    eth1Node.start();\n+\n+    final ValidatorKeystores validatorKeystores =\n+        createTekuDepositSender().sendValidatorDeposits(eth1Node, 4);\n+\n+    final TekuBeaconNode beaconNode =\n+        createTekuNode(config -> config.withNetwork(\"less-swift\").withDepositsFrom(eth1Node));\n+\n+    final TekuValidatorNode validatorClient =\n+        createValidatorNode(\n+            config ->\n+                config\n+                    .withNetwork(\"less-swift\")\n+                    .withInteropModeDisabled()\n+                    .withBeaconNode(beaconNode));\n+    validatorClient.withValidatorKeystores(validatorKeystores);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2MzI0MQ=="}, "originalCommit": {"oid": "d028d28838dc0c1f82899b7f1ee51e7896b8e683"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjQ5NDYyOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/src/testFixtures/java/tech/pegasys/teku/test/acceptance/dsl/AcceptanceTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTo1ODo0M1rOIA8nMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTozNTowN1rOIByt_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2Mzk4Nw==", "bodyText": "Do we still need this now that we have createTekuDepositSender().sendValidatorDeposits?", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r537863987", "createdAt": "2020-12-07T21:58:43Z", "author": {"login": "ajsutton"}, "path": "acceptance-tests/src/testFixtures/java/tech/pegasys/teku/test/acceptance/dsl/AcceptanceTestBase.java", "diffHunk": "@@ -64,6 +75,15 @@ protected TekuDepositSender createTekuDepositSender() {\n     return addNode(new TekuDepositSender(network));\n   }\n \n+  protected List<BLSKeyPair> createKeysAndSendDeposits(\n+      final BesuNode eth1Node, final int numberOfValidators) throws Exception {\n+    final TekuDepositSender depositSender = createTekuDepositSender();\n+    final List<ValidatorKeys> validatorKeys =\n+        depositSender.generateValidatorKeys(numberOfValidators);\n+    depositSender.sendValidatorDeposits(eth1Node, validatorKeys, MAX_EFFECTIVE_BALANCE);\n+    return validatorKeys.stream().map(ValidatorKeys::getValidatorKey).collect(Collectors.toList());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d028d28838dc0c1f82899b7f1ee51e7896b8e683"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1MDQ2MQ==", "bodyText": "Removed.", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r538750461", "createdAt": "2020-12-08T19:35:07Z", "author": {"login": "cemozerr"}, "path": "acceptance-tests/src/testFixtures/java/tech/pegasys/teku/test/acceptance/dsl/AcceptanceTestBase.java", "diffHunk": "@@ -64,6 +75,15 @@ protected TekuDepositSender createTekuDepositSender() {\n     return addNode(new TekuDepositSender(network));\n   }\n \n+  protected List<BLSKeyPair> createKeysAndSendDeposits(\n+      final BesuNode eth1Node, final int numberOfValidators) throws Exception {\n+    final TekuDepositSender depositSender = createTekuDepositSender();\n+    final List<ValidatorKeys> validatorKeys =\n+        depositSender.generateValidatorKeys(numberOfValidators);\n+    depositSender.sendValidatorDeposits(eth1Node, validatorKeys, MAX_EFFECTIVE_BALANCE);\n+    return validatorKeys.stream().map(ValidatorKeys::getValidatorKey).collect(Collectors.toList());\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2Mzk4Nw=="}, "originalCommit": {"oid": "d028d28838dc0c1f82899b7f1ee51e7896b8e683"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjQ5NjU1OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/src/testFixtures/java/tech/pegasys/teku/test/acceptance/dsl/Node.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTo1OToxM1rOIA8oTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTozNjoxMlrOIBywmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NDI3MQ==", "bodyText": "Does this need to be public now? Ideally it wouldn't be accessible from the ATs itself.", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r537864271", "createdAt": "2020-12-07T21:59:13Z", "author": {"login": "ajsutton"}, "path": "acceptance-tests/src/testFixtures/java/tech/pegasys/teku/test/acceptance/dsl/Node.java", "diffHunk": "@@ -111,4 +111,14 @@ protected void copyDirectoryToTar(final String sourcePath, final File localTarge\n       throw new RuntimeException(\"Failed to copy directory from \" + nodeAlias, e);\n     }\n   }\n+\n+  /**\n+   * Copies contents of the given directory into node's working directory.\n+   *\n+   * @param tarFile\n+   * @throws IOException\n+   */\n+  public void copyContentsToWorkingDirectory(File tarFile) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d028d28838dc0c1f82899b7f1ee51e7896b8e683"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1MTEzMA==", "bodyText": "It's still used by other ATs so unfortunately yes.", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r538751130", "createdAt": "2020-12-08T19:36:12Z", "author": {"login": "cemozerr"}, "path": "acceptance-tests/src/testFixtures/java/tech/pegasys/teku/test/acceptance/dsl/Node.java", "diffHunk": "@@ -111,4 +111,14 @@ protected void copyDirectoryToTar(final String sourcePath, final File localTarge\n       throw new RuntimeException(\"Failed to copy directory from \" + nodeAlias, e);\n     }\n   }\n+\n+  /**\n+   * Copies contents of the given directory into node's working directory.\n+   *\n+   * @param tarFile\n+   * @throws IOException\n+   */\n+  public void copyContentsToWorkingDirectory(File tarFile) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NDI3MQ=="}, "originalCommit": {"oid": "d028d28838dc0c1f82899b7f1ee51e7896b8e683"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjUwMjYyOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/src/testFixtures/java/tech/pegasys/teku/test/acceptance/dsl/TekuValidatorNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjowMDo0MVrOIA8rzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTozNjo1N1rOIByygA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NTE2Ng==", "bodyText": "Do we need this?", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r537865166", "createdAt": "2020-12-07T22:00:41Z", "author": {"login": "ajsutton"}, "path": "acceptance-tests/src/testFixtures/java/tech/pegasys/teku/test/acceptance/dsl/TekuValidatorNode.java", "diffHunk": "@@ -101,8 +113,18 @@ public Config() {\n       configMap.put(\"beacon-node-api-endpoint\", \"http://notvalid.restapi.com\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d028d28838dc0c1f82899b7f1ee51e7896b8e683"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1MTYxNg==", "bodyText": "Not sure. Will try removing it.", "url": "https://github.com/ConsenSys/teku/pull/3355#discussion_r538751616", "createdAt": "2020-12-08T19:36:57Z", "author": {"login": "cemozerr"}, "path": "acceptance-tests/src/testFixtures/java/tech/pegasys/teku/test/acceptance/dsl/TekuValidatorNode.java", "diffHunk": "@@ -101,8 +113,18 @@ public Config() {\n       configMap.put(\"beacon-node-api-endpoint\", \"http://notvalid.restapi.com\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NTE2Ng=="}, "originalCommit": {"oid": "d028d28838dc0c1f82899b7f1ee51e7896b8e683"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2913, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}