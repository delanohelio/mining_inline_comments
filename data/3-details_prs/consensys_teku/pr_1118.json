{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MTIwMzAw", "number": 1118, "title": "[BC-202] Fetch unknown ancestor blocks", "bodyText": "PR Description\nAdd a new FetchRecentBlocksService that listens for required blocks from the pending blocks pool and fetches these blocks.\nThis PR covers basic fetching functionality.  There are some improvements we might make in follow-up PRs such as:\n\nA better system for selecting peers so that we don't query peers who have no chance of having a given block\nPossibly dropping blocks after some number of retries\nLimiting when the block fetcher is active so that we don't run these requests during the initial sync\nAdding a system to queue requests on a per-peer basis so that we limit the number of concurrent requests any given peer is handling", "createdAt": "2020-01-28T16:49:42Z", "url": "https://github.com/ConsenSys/teku/pull/1118", "merged": true, "mergeCommit": {"oid": "6f26efdefe41c9d51792d72eb3c0a5d85f7cc750"}, "closed": true, "closedAt": "2020-01-30T15:11:50Z", "author": {"login": "mbaxter"}, "timelineItems": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-ie9GgH2gAyMzY4MTIwMzAwOjA5NWJlNDcwZmY3OGE1MWQ3ZTNjYWRhYzA1ODdhOTMwMWY1YzU3ZjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_b2W1AH2gAyMzY4MTIwMzAwOjNkMzZmYjQwMDg5YTZmMWJlMDk1OWI4ZWRjNjFiYTc1MjdjM2JlZjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "095be470ff78a51d7e3cadac0587a9301f5c57f4", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/095be470ff78a51d7e3cadac0587a9301f5c57f4", "committedDate": "2020-01-27T20:08:49Z", "message": "Start working on service to fetch recent blocks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4519de70a6f77f06b0216dad64ae36ea5093cbfe", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/4519de70a6f77f06b0216dad64ae36ea5093cbfe", "committedDate": "2020-01-27T20:08:49Z", "message": "Drop invalid blocks so that we can clear out invalid block requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b16c4379f29530d3b9796981ba1d1cb1f728cd85", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/b16c4379f29530d3b9796981ba1d1cb1f728cd85", "committedDate": "2020-01-27T20:08:49Z", "message": "Add tests for FetchBlockTask"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "095176ad71f56d17dcea4018b6141ad9dc4d5ec0", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/095176ad71f56d17dcea4018b6141ad9dc4d5ec0", "committedDate": "2020-01-27T20:08:49Z", "message": "Cleanup names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17b632857e1687ae81163601da232d8245f48653", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/17b632857e1687ae81163601da232d8245f48653", "committedDate": "2020-01-27T21:06:29Z", "message": "Add retry test, fix calculation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4277f2c8e9a262712d2fdae24f63f408ff0263d6", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/4277f2c8e9a262712d2fdae24f63f408ff0263d6", "committedDate": "2020-01-27T23:14:25Z", "message": "Fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfb1dd01902748e406d8ad115a6fcf21f5059146", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/cfb1dd01902748e406d8ad115a6fcf21f5059146", "committedDate": "2020-01-28T15:08:50Z", "message": "Add basic integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bdd5b4daa96d18dbf4c8ea910799b4d06478ecc", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/2bdd5b4daa96d18dbf4c8ea910799b4d06478ecc", "committedDate": "2020-01-28T15:48:55Z", "message": "Add helper for managing syncing nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30da333a66310d239dda0e51f6992ac4cd4ba994", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/30da333a66310d239dda0e51f6992ac4cd4ba994", "committedDate": "2020-01-28T15:51:03Z", "message": "Merge branch 'master' into bc-202/fetch-unknown-ancestor-blocks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c778436b811d4cb42032c7213bb66cb50fcb662", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/9c778436b811d4cb42032c7213bb66cb50fcb662", "committedDate": "2020-01-28T16:29:09Z", "message": "Make sure children of invalid blocks are marked invalid"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4899a98b0b1c06417738517c065fc0d711421df4", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/4899a98b0b1c06417738517c065fc0d711421df4", "committedDate": "2020-01-28T16:52:27Z", "message": "Clarify shuffle operation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ee1c1b7cd1b5530efcee0f1908fbb63691615f3", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/4ee1c1b7cd1b5530efcee0f1908fbb63691615f3", "committedDate": "2020-01-28T17:02:21Z", "message": "Simplify comparator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NTkwMDcw", "url": "https://github.com/ConsenSys/teku/pull/1118#pullrequestreview-349590070", "createdAt": "2020-01-28T18:07:43Z", "commit": {"oid": "4ee1c1b7cd1b5530efcee0f1908fbb63691615f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODowNzo0M1rOFivK-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODowNzo0M1rOFivK-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2ODc2Mg==", "bodyText": "nice.", "url": "https://github.com/ConsenSys/teku/pull/1118#discussion_r371968762", "createdAt": "2020-01-28T18:07:43Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/rpc/core/ResponseStreamImpl.java", "diffHunk": "@@ -76,4 +76,13 @@ public void completeSuccessfully() {\n   public void completeWithError(final Throwable error) {\n     completionFuture.completeExceptionally(error);\n   }\n+\n+  public void subscribeCompleted(RequestCompleteSubscriber subscriber) {\n+    completionFuture.finish(\n+        res -> subscriber.onRequestComplete(true), err -> subscriber.onRequestComplete(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ee1c1b7cd1b5530efcee0f1908fbb63691615f3"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NjM2ODcy", "url": "https://github.com/ConsenSys/teku/pull/1118#pullrequestreview-349636872", "createdAt": "2020-01-28T19:20:37Z", "commit": {"oid": "4ee1c1b7cd1b5530efcee0f1908fbb63691615f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOToyMDozN1rOFixamg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOToyMDozN1rOFixamg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAwNTUzMA==", "bodyText": "do you not just do tasks.forEach() to make sure to not run futures added after you called this method?", "url": "https://github.com/ConsenSys/teku/pull/1118#discussion_r372005530", "createdAt": "2020-01-28T19:20:37Z", "author": {"login": "cemozerr"}, "path": "util/src/test-support/java/tech/pegasys/artemis/util/executors/MockExecutorService.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.executors;\n+\n+import static tech.pegasys.artemis.util.async.FutureUtil.ignoreFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+public class MockExecutorService implements ExecutorService {\n+\n+  private boolean autoRun = false;\n+\n+  private final List<ExecutorTask<?>> tasks = new ArrayList<>();\n+\n+  // Test utility for inspecting executor's futures\n+  public List<Future<?>> getFutures() {\n+    return tasks.stream().map(ExecutorTask::getFuture).collect(Collectors.toList());\n+  }\n+\n+  public void setAutoRun(final boolean shouldAutoRunTasks) {\n+    this.autoRun = shouldAutoRunTasks;\n+  }\n+\n+  public void runPendingFutures() {\n+    final List<ExecutorTask<?>> currentTasks = new ArrayList<>(tasks);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ee1c1b7cd1b5530efcee0f1908fbb63691615f3"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NjQwOTE2", "url": "https://github.com/ConsenSys/teku/pull/1118#pullrequestreview-349640916", "createdAt": "2020-01-28T19:26:52Z", "commit": {"oid": "4ee1c1b7cd1b5530efcee0f1908fbb63691615f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOToyNjo1MlrOFixnAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOToyNjo1MlrOFixnAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAwODcwNQ==", "bodyText": "Did you implement these because extending the interface required you to do so? I don't understand why you return the same exact thing that was passed into the argument.", "url": "https://github.com/ConsenSys/teku/pull/1118#discussion_r372008705", "createdAt": "2020-01-28T19:26:52Z", "author": {"login": "cemozerr"}, "path": "util/src/test-support/java/tech/pegasys/artemis/util/executors/MockExecutorService.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.executors;\n+\n+import static tech.pegasys.artemis.util.async.FutureUtil.ignoreFuture;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+public class MockExecutorService implements ExecutorService {\n+\n+  private boolean autoRun = false;\n+\n+  private final List<ExecutorTask<?>> tasks = new ArrayList<>();\n+\n+  // Test utility for inspecting executor's futures\n+  public List<Future<?>> getFutures() {\n+    return tasks.stream().map(ExecutorTask::getFuture).collect(Collectors.toList());\n+  }\n+\n+  public void setAutoRun(final boolean shouldAutoRunTasks) {\n+    this.autoRun = shouldAutoRunTasks;\n+  }\n+\n+  public void runPendingFutures() {\n+    final List<ExecutorTask<?>> currentTasks = new ArrayList<>(tasks);\n+    currentTasks.forEach(ExecutorTask::run);\n+  }\n+\n+  public long getPendingFuturesCount() {\n+    return tasks.stream().filter(ExecutorTask::isPending).count();\n+  }\n+\n+  public void runPendingFuturesInSeparateThreads(final ExecutorService executorService) {\n+    final List<ExecutorTask<?>> currentTasks = new ArrayList<>(tasks);\n+    currentTasks.forEach(task -> executorService.execute(task::run));\n+  }\n+\n+  @Override\n+  public void shutdown() {}\n+\n+  @Override\n+  public List<Runnable> shutdownNow() {\n+    return Collections.emptyList();\n+  }\n+\n+  @Override\n+  public boolean isShutdown() {\n+    return false;\n+  }\n+\n+  @Override\n+  public boolean isTerminated() {\n+    return false;\n+  }\n+\n+  @Override\n+  public boolean awaitTermination(final long timeout, final TimeUnit unit)\n+      throws InterruptedException {\n+    return false;\n+  }\n+\n+  @Override\n+  public <T> Future<T> submit(final Callable<T> task) {\n+    ExecutorTask<T> execTask = new ExecutorTask<>(task::call);\n+    tasks.add(execTask);\n+    if (autoRun) {\n+      execTask.run();\n+    }\n+\n+    return execTask.getFuture();\n+  }\n+\n+  @Override\n+  public <T> Future<T> submit(final Runnable task, final T result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ee1c1b7cd1b5530efcee0f1908fbb63691615f3"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a7cc36f82e5d831017feaa5a44e280c5e756627", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/0a7cc36f82e5d831017feaa5a44e280c5e756627", "committedDate": "2020-01-28T19:40:44Z", "message": "Merge branch 'master' into bc-202/fetch-unknown-ancestor-blocks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17e46577d91ee26473f612375686764f594fe0e7", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/17e46577d91ee26473f612375686764f594fe0e7", "committedDate": "2020-01-28T19:56:01Z", "message": "Update disabled test message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e40cfe955405983c7a14303c33a4b5a2858a730", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/9e40cfe955405983c7a14303c33a4b5a2858a730", "committedDate": "2020-01-28T22:27:35Z", "message": "Merge branch 'master' into bc-202/fetch-unknown-ancestor-blocks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NzU2MzMz", "url": "https://github.com/ConsenSys/teku/pull/1118#pullrequestreview-349756333", "createdAt": "2020-01-28T22:40:38Z", "commit": {"oid": "9e40cfe955405983c7a14303c33a4b5a2858a730"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjo0MDozOVrOFi3JeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjo0MDozOVrOFi3JeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5OTQ0OA==", "bodyText": "We have an AsyncRunner interface now, (along with DelayedExecutorAsyncRunner and StubAsyncRunner) now so MockScheduledExecutor might be overkill for now, or else, we can remove the AsyncRunner, and refactor to use MockScheduledExecutor. In any case, we should pick one to prevent duplication.\nWith AsyncRunner interface, this is how the connect() method in PeerManager.java would look like:\n  public SafeFuture<?> connect(final Multiaddr peer, final Network network) {\n    STDOUT.log(Level.DEBUG, \"Connecting to \" + peer);\n    return SafeFuture.of(network.connect(peer))\n        .whenComplete(\n            (conn, throwable) -> {\n              if (throwable != null) {\n                STDOUT.log(\n                    Level.DEBUG,\n                    \"Connection to \" + peer + \" failed. Will retry shortly: \" + throwable);\n                    asyncRunner.runAfterDelay(\n                        () -> connect(peer, network),\n                        RECONNECT_TIMEOUT,\n                        TimeUnit.MILLISECONDS);\n              } else {\n                STDOUT.log(\n                    Level.DEBUG,\n                    \"Connection to peer: \"\n                        + conn.secureSession().getRemoteId()\n                        + \" was successful\");\n                SafeFuture.of(conn.closeFuture())\n                    .finish(\n                        () -> {\n                          LOG.debug(\"Connection to {} closed. Will retry shortly\", peer);\n                              asyncRunner.runAfterDelay(\n                                  () -> connect(peer, network),\n                                  RECONNECT_TIMEOUT,\n                                  TimeUnit.MILLISECONDS));\n                        });\n              }\n            });\n  }", "url": "https://github.com/ConsenSys/teku/pull/1118#discussion_r372099448", "createdAt": "2020-01-28T22:40:39Z", "author": {"login": "cemozerr"}, "path": "util/src/test-support/java/tech/pegasys/artemis/util/executors/MockScheduledExecutor.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.executors;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Delayed;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class MockScheduledExecutor extends MockExecutorService implements ScheduledExecutorService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e40cfe955405983c7a14303c33a4b5a2858a730"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NzU5NjI0", "url": "https://github.com/ConsenSys/teku/pull/1118#pullrequestreview-349759624", "createdAt": "2020-01-28T22:47:33Z", "commit": {"oid": "9e40cfe955405983c7a14303c33a4b5a2858a730"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjo0NzozM1rOFi3T6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjo0NzozM1rOFi3T6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEwMjEyMA==", "bodyText": "nice.", "url": "https://github.com/ConsenSys/teku/pull/1118#discussion_r372102120", "createdAt": "2020-01-28T22:47:33Z", "author": {"login": "cemozerr"}, "path": "sync/src/main/java/tech/pegasys/artemis/sync/RetryDelayFunction.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.sync;\n+\n+import java.time.Duration;\n+\n+public interface RetryDelayFunction {\n+  public Duration getRetryDelay(final int retryCount);\n+\n+  static RetryDelayFunction createExponentialRetry(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e40cfe955405983c7a14303c33a4b5a2858a730"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NzYwODA3", "url": "https://github.com/ConsenSys/teku/pull/1118#pullrequestreview-349760807", "createdAt": "2020-01-28T22:50:09Z", "commit": {"oid": "9e40cfe955405983c7a14303c33a4b5a2858a730"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjo1MDowOVrOFi3XqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjo1MDowOVrOFi3XqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEwMzA4MA==", "bodyText": "(nit) one Waiter.waitFor() uses the whole definition, the other one is just waitFor()", "url": "https://github.com/ConsenSys/teku/pull/1118#discussion_r372103080", "createdAt": "2020-01-28T22:50:09Z", "author": {"login": "cemozerr"}, "path": "sync/src/integration-test/java/tech/pegasys/artemis/sync/BlockPropagationIntegrationTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.sync;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static tech.pegasys.artemis.util.Waiter.waitFor;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.data.BlockProcessingRecord;\n+import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.networking.eth2.Eth2NetworkFactory;\n+import tech.pegasys.artemis.statetransition.events.BlockProposedEvent;\n+import tech.pegasys.artemis.util.Waiter;\n+import tech.pegasys.artemis.util.bls.BLSKeyGenerator;\n+import tech.pegasys.artemis.util.bls.BLSKeyPair;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class BlockPropagationIntegrationTest {\n+  private final List<BLSKeyPair> validatorKeys = BLSKeyGenerator.generateKeyPairs(3);\n+  private final Eth2NetworkFactory networkFactory = new Eth2NetworkFactory();\n+\n+  @AfterEach\n+  public void tearDown() {\n+    networkFactory.stopAll();\n+  }\n+\n+  @Test\n+  public void shouldFetchUnknownAncestorsOfPropagatedBlock() throws Exception {\n+    UnsignedLong currentSlot = UnsignedLong.valueOf(Constants.GENESIS_SLOT);\n+\n+    // Setup node 1\n+    SyncingNodeManager node1 = SyncingNodeManager.create(networkFactory, validatorKeys);\n+    node1.chainUtil().setSlot(currentSlot);\n+\n+    // Add some blocks to node1, which node 2 will need to fetch\n+    final List<SignedBeaconBlock> blocksToFetch = new ArrayList<>();\n+    for (int i = 0; i < 3; i++) {\n+      currentSlot = currentSlot.plus(UnsignedLong.ONE);\n+      final BlockProcessingRecord record =\n+          node1.chainUtil().createAndImportBlockAtSlot(currentSlot);\n+      blocksToFetch.add(record.getBlock());\n+    }\n+\n+    // Setup node 2\n+    SyncingNodeManager node2 = SyncingNodeManager.create(networkFactory, validatorKeys);\n+\n+    // Connect networks\n+    waitFor(node1.network().connect(node2.network().getNodeAddress()));\n+    // Wait for connections to get set up\n+    Waiter.waitFor(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e40cfe955405983c7a14303c33a4b5a2858a730"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NzYzNTA0", "url": "https://github.com/ConsenSys/teku/pull/1118#pullrequestreview-349763504", "createdAt": "2020-01-28T22:56:01Z", "commit": {"oid": "9e40cfe955405983c7a14303c33a4b5a2858a730"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjo1NjowMVrOFi3gJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjo1NjowMVrOFi3gJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEwNTI1NQ==", "bodyText": "Any reason we want to suppress the callback exceptions?", "url": "https://github.com/ConsenSys/teku/pull/1118#discussion_r372105255", "createdAt": "2020-01-28T22:56:01Z", "author": {"login": "cemozerr"}, "path": "sync/src/main/java/tech/pegasys/artemis/sync/PendingPool.java", "diffHunk": "@@ -46,15 +48,20 @@\n   private static final UnsignedLong GENESIS_SLOT = UnsignedLong.valueOf(Constants.GENESIS_SLOT);\n \n   private final EventBus eventBus;\n+  private final Subscribers<RequiredBlockRootSubscriber> requiredBlockRootSubscribers =\n+      Subscribers.create(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e40cfe955405983c7a14303c33a4b5a2858a730"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODI5NDUx", "url": "https://github.com/ConsenSys/teku/pull/1118#pullrequestreview-349829451", "createdAt": "2020-01-29T02:25:34Z", "commit": {"oid": "9e40cfe955405983c7a14303c33a4b5a2858a730"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjoyNTozNVrOFi65ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjoyNTozNVrOFi65ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2MDg5MQ==", "bodyText": "This class and the static nested class is beautifully written. \ud83c\udf89", "url": "https://github.com/ConsenSys/teku/pull/1118#discussion_r372160891", "createdAt": "2020-01-29T02:25:35Z", "author": {"login": "cemozerr"}, "path": "sync/src/main/java/tech/pegasys/artemis/sync/FetchBlockTask.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.sync;\n+\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.networking.eth2.Eth2Network;\n+import tech.pegasys.artemis.networking.eth2.peers.Eth2Peer;\n+import tech.pegasys.artemis.networking.p2p.peer.NodeId;\n+import tech.pegasys.artemis.sync.FetchBlockTask.FetchBlockResult.Status;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+class FetchBlockTask {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e40cfe955405983c7a14303c33a4b5a2858a730"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODMwMzk1", "url": "https://github.com/ConsenSys/teku/pull/1118#pullrequestreview-349830395", "createdAt": "2020-01-29T02:29:29Z", "commit": {"oid": "9e40cfe955405983c7a14303c33a4b5a2858a730"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjoyOToyOVrOFi68iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMjoyOToyOVrOFi68iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE2MTY3Mg==", "bodyText": "If we're only going to use the statically declared RetryDelayFunction above, why also have a member variable instance of it?", "url": "https://github.com/ConsenSys/teku/pull/1118#discussion_r372161672", "createdAt": "2020-01-29T02:29:29Z", "author": {"login": "cemozerr"}, "path": "sync/src/main/java/tech/pegasys/artemis/sync/FetchRecentBlocksService.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.sync;\n+\n+import static tech.pegasys.artemis.util.async.FutureUtil.ignoreFuture;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.networking.eth2.Eth2Network;\n+import tech.pegasys.artemis.service.serviceutils.Service;\n+import tech.pegasys.artemis.sync.FetchBlockTask.FetchBlockResult;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.events.Subscribers;\n+\n+class FetchRecentBlocksService extends Service {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private static final int MAX_CONCURRENT_REQUESTS = 3;\n+  private static final Duration WAIT_FOR_PEERS_DURATION = Duration.ofSeconds(30);\n+  private static final RetryDelayFunction DEFAULT_RETRY_DELAY_FUNCTION =\n+      RetryDelayFunction.createExponentialRetry(2, Duration.ofSeconds(5), Duration.ofMinutes(5));\n+\n+  private final int maxConcurrentRequests;\n+  private final Eth2Network eth2Network;\n+  private final PendingPool<SignedBeaconBlock> pendingBlocksPool;\n+\n+  private final Map<Bytes32, FetchBlockTask> allTasks = new ConcurrentHashMap<>();\n+  private final Queue<FetchBlockTask> pendingTasks = new ConcurrentLinkedQueue<>();\n+  private final Collection<FetchBlockTask> activeTasks = new ConcurrentLinkedQueue<>();\n+\n+  private final FetchBlockTaskFactory fetchBlockTaskFactory;\n+  private final RetryDelayFunction retryDelayFunction;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e40cfe955405983c7a14303c33a4b5a2858a730"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODQxMDI5", "url": "https://github.com/ConsenSys/teku/pull/1118#pullrequestreview-349841029", "createdAt": "2020-01-29T03:15:49Z", "commit": {"oid": "9e40cfe955405983c7a14303c33a4b5a2858a730"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMzoxNTo1MFrOFi7hVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMzoxNTo1MFrOFi7hVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE3MTA5Mg==", "bodyText": "(nit) I wound consider renaming pendingItemsByRequiredBlockRoot to requiredBlockRootToPendingItems. It took me a loooong while to figure out", "url": "https://github.com/ConsenSys/teku/pull/1118#discussion_r372171092", "createdAt": "2020-01-29T03:15:50Z", "author": {"login": "cemozerr"}, "path": "sync/src/main/java/tech/pegasys/artemis/sync/PendingPool.java", "diffHunk": "@@ -116,16 +123,23 @@ public void add(T item) {\n     }\n \n     final Bytes32 itemRoot = hashTreeRootFunction.apply(item);\n-    final Collection<Bytes32> dependentBlockRoots = dependentBlockHashFunction.apply(item);\n+    final Collection<Bytes32> requiredRoots = requiredBlockRootsFunction.apply(item);\n \n-    dependentBlockRoots.forEach(\n-        dependentBlockRoot ->\n-            // Index block by parent\n-            pendingItemsByDependentBlockRoot\n+    requiredRoots.forEach(\n+        requiredRoot ->\n+            // Index item by required roots\n+            pendingItemsByRequiredBlockRoot", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e40cfe955405983c7a14303c33a4b5a2858a730"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa1abdb251b5acc25017c8e86518e706799babcf", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/fa1abdb251b5acc25017c8e86518e706799babcf", "committedDate": "2020-01-29T15:28:13Z", "message": "Use consistent style for waits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c8ca4ebd12bb25c9c69632f68f0680c8643a175", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/3c8ca4ebd12bb25c9c69632f68f0680c8643a175", "committedDate": "2020-01-29T16:08:06Z", "message": "Use AsynRunner instead of ScheduledExecutor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8e7371e48c641f199abda260fd5749a34c1692f", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/e8e7371e48c641f199abda260fd5749a34c1692f", "committedDate": "2020-01-29T16:15:10Z", "message": "Add new AsyncRunner utility method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ecb2303a80ac3b70d198ae7afb5e21f883f157b", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/1ecb2303a80ac3b70d198ae7afb5e21f883f157b", "committedDate": "2020-01-29T16:15:36Z", "message": "Merge branch 'master' into bc-202/fetch-unknown-ancestor-blocks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMjU1ODkz", "url": "https://github.com/ConsenSys/teku/pull/1118#pullrequestreview-350255893", "createdAt": "2020-01-29T16:41:13Z", "commit": {"oid": "1ecb2303a80ac3b70d198ae7afb5e21f883f157b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjo0MToxM1rOFjPfKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjo0MToxM1rOFjPfKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ5ODIxOQ==", "bodyText": "very neat.", "url": "https://github.com/ConsenSys/teku/pull/1118#discussion_r372498219", "createdAt": "2020-01-29T16:41:13Z", "author": {"login": "cemozerr"}, "path": "sync/src/test/java/tech/pegasys/artemis/sync/FetchBlockTaskTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.sync;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.networking.eth2.Eth2Network;\n+import tech.pegasys.artemis.networking.eth2.peers.Eth2Peer;\n+import tech.pegasys.artemis.networking.p2p.mock.MockNodeId;\n+import tech.pegasys.artemis.sync.FetchBlockTask.FetchBlockResult;\n+import tech.pegasys.artemis.sync.FetchBlockTask.FetchBlockResult.Status;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class FetchBlockTaskTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ecb2303a80ac3b70d198ae7afb5e21f883f157b"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMjY2Mzc3", "url": "https://github.com/ConsenSys/teku/pull/1118#pullrequestreview-350266377", "createdAt": "2020-01-29T16:55:03Z", "commit": {"oid": "1ecb2303a80ac3b70d198ae7afb5e21f883f157b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjo1NTowM1rOFjP-mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNjo1NTowM1rOFjP-mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUwNjI2NQ==", "bodyText": "(nit)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final Bytes32 itemRoot = hashTreeRootFunction.apply(item);\n          \n          \n            \n                final Bytes32 pendingItemRoot = hashTreeRootFunction.apply(item);", "url": "https://github.com/ConsenSys/teku/pull/1118#discussion_r372506265", "createdAt": "2020-01-29T16:55:03Z", "author": {"login": "cemozerr"}, "path": "sync/src/main/java/tech/pegasys/artemis/sync/PendingPool.java", "diffHunk": "@@ -116,16 +123,23 @@ public void add(T item) {\n     }\n \n     final Bytes32 itemRoot = hashTreeRootFunction.apply(item);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ecb2303a80ac3b70d198ae7afb5e21f883f157b"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzE2ODEw", "url": "https://github.com/ConsenSys/teku/pull/1118#pullrequestreview-350316810", "createdAt": "2020-01-29T18:09:29Z", "commit": {"oid": "1ecb2303a80ac3b70d198ae7afb5e21f883f157b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxODowOToyOVrOFjSXbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxODowOToyOVrOFjSXbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU0NTM5MA==", "bodyText": "In what scenario here can the if statement return false?", "url": "https://github.com/ConsenSys/teku/pull/1118#discussion_r372545390", "createdAt": "2020-01-29T18:09:29Z", "author": {"login": "cemozerr"}, "path": "sync/src/main/java/tech/pegasys/artemis/sync/FetchRecentBlocksService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.sync;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.time.Duration;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.networking.eth2.Eth2Network;\n+import tech.pegasys.artemis.service.serviceutils.Service;\n+import tech.pegasys.artemis.sync.FetchBlockTask.FetchBlockResult;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.DelayedExecutorAsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.events.Subscribers;\n+\n+class FetchRecentBlocksService extends Service {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private static final int MAX_CONCURRENT_REQUESTS = 3;\n+  private static final Duration WAIT_FOR_PEERS_DURATION = Duration.ofSeconds(30);\n+  private static final RetryDelayFunction DEFAULT_RETRY_DELAY_FUNCTION =\n+      RetryDelayFunction.createExponentialRetry(2, Duration.ofSeconds(5), Duration.ofMinutes(5));\n+\n+  private final int maxConcurrentRequests;\n+  private final Eth2Network eth2Network;\n+  private final PendingPool<SignedBeaconBlock> pendingBlocksPool;\n+\n+  private final Map<Bytes32, FetchBlockTask> allTasks = new ConcurrentHashMap<>();\n+  private final Queue<FetchBlockTask> pendingTasks = new ConcurrentLinkedQueue<>();\n+  private final Collection<FetchBlockTask> activeTasks = new ConcurrentLinkedQueue<>();\n+\n+  private final FetchBlockTaskFactory fetchBlockTaskFactory;\n+  private final RetryDelayFunction retryDelayFunction;\n+  private final Subscribers<BlockSubscriber> blockSubscribers = Subscribers.create(true);\n+  private final AsyncRunner asyncRunner;\n+\n+  FetchRecentBlocksService(\n+      final AsyncRunner asyncRunner,\n+      final Eth2Network eth2Network,\n+      final PendingPool<SignedBeaconBlock> pendingBlocksPool,\n+      final FetchBlockTaskFactory fetchBlockTaskFactory,\n+      final RetryDelayFunction retryDelayFunction,\n+      final int maxConcurrentRequests) {\n+    this.asyncRunner = asyncRunner;\n+    this.maxConcurrentRequests = maxConcurrentRequests;\n+    this.eth2Network = eth2Network;\n+    this.pendingBlocksPool = pendingBlocksPool;\n+    this.fetchBlockTaskFactory = fetchBlockTaskFactory;\n+    this.retryDelayFunction = retryDelayFunction;\n+  }\n+\n+  public static FetchRecentBlocksService create(\n+      final Eth2Network eth2Network, final PendingPool<SignedBeaconBlock> pendingBlocksPool) {\n+    return new FetchRecentBlocksService(\n+        new DelayedExecutorAsyncRunner(),\n+        eth2Network,\n+        pendingBlocksPool,\n+        FetchBlockTask::create,\n+        DEFAULT_RETRY_DELAY_FUNCTION,\n+        MAX_CONCURRENT_REQUESTS);\n+  }\n+\n+  @Override\n+  protected SafeFuture<?> doStart() {\n+    setupSubscribers();\n+    return SafeFuture.completedFuture(null);\n+  }\n+\n+  @Override\n+  protected SafeFuture<?> doStop() {\n+    return SafeFuture.completedFuture(null);\n+  }\n+\n+  public long subscribeBlockFetched(final BlockSubscriber subscriber) {\n+    return blockSubscribers.subscribe(subscriber);\n+  }\n+\n+  public void unsubscribeBlockFetched(final int subscriberId) {\n+    blockSubscribers.unsubscribe(subscriberId);\n+  }\n+\n+  private void setupSubscribers() {\n+    this.pendingBlocksPool.subscribeRequiredBlockRoot(this::requestRecentBlock);\n+    this.pendingBlocksPool.subscribeRequiredBlockRootDropped(this::cancelRecentBlockRequest);\n+  }\n+\n+  public void requestRecentBlock(final Bytes32 blockRoot) {\n+    if (pendingBlocksPool.contains(blockRoot)) {\n+      // We've already got this block\n+      return;\n+    }\n+    final FetchBlockTask task = fetchBlockTaskFactory.create(eth2Network, blockRoot);\n+    if (allTasks.putIfAbsent(blockRoot, task) != null) {\n+      // We're already tracking this task\n+      task.cancel();\n+      return;\n+    }\n+    LOG.trace(\"Queue block to be fetched: {}\", blockRoot);\n+    queueTask(task);\n+  }\n+\n+  public void cancelRecentBlockRequest(final Bytes32 blockRoot) {\n+    final FetchBlockTask task = allTasks.get(blockRoot);\n+    if (task != null) {\n+      task.cancel();\n+    }\n+  }\n+\n+  private synchronized void checkTasks() {\n+    // If we have capacity, execute the next task\n+    if (activeTasks.size() < maxConcurrentRequests) {\n+      final FetchBlockTask nextTask = pendingTasks.poll();\n+      if (nextTask == null) {\n+        return;\n+      }\n+      runNextTask(nextTask);\n+    }\n+  }\n+\n+  private void runNextTask(final FetchBlockTask task) {\n+    registerActiveTask(task);\n+    task.run()\n+        .thenAccept(res -> processFetchResult(task, res))\n+        .exceptionally(\n+            (err) -> {\n+              LOG.warn(\"Failed to run \" + task.getClass().getSimpleName(), err);\n+              return null;\n+            })\n+        .always(() -> deregisterActiveTask(task));\n+  }\n+\n+  private void processFetchResult(final FetchBlockTask task, final FetchBlockResult result) {\n+    switch (result.getStatus()) {\n+      case SUCCESSFUL:\n+        handleFetchedBlock(task, result.getBlock());\n+        break;\n+      case NO_AVAILABLE_PEERS:\n+        // Wait a bit and then requeue\n+        queueTaskWithDelay(task, WAIT_FOR_PEERS_DURATION);\n+        break;\n+      case FETCH_FAILED:\n+        // Push task back onto queue to retry\n+        queueTaskWithRetryDelay(task);\n+        break;\n+      case CANCELLED:\n+        LOG.trace(\"Request for block cancelled: {}.\", task.getBlockRoot());\n+        removeTask(task);\n+        break;\n+    }\n+  }\n+\n+  private void registerActiveTask(FetchBlockTask task) {\n+    LOG.trace(\"Fetch block {}\", task.getBlockRoot());\n+    activeTasks.add(task);\n+  }\n+\n+  private void deregisterActiveTask(FetchBlockTask task) {\n+    activeTasks.remove(task);\n+    checkTasks();\n+  }\n+\n+  private void removeTask(FetchBlockTask task) {\n+    // Stop tracking task\n+    task.cancel();\n+    allTasks.compute(\n+        task.getBlockRoot(),\n+        (root, existingTask) -> {\n+          if (Objects.equals(task, existingTask)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ecb2303a80ac3b70d198ae7afb5e21f883f157b"}, "originalPosition": 189}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzE5ODAx", "url": "https://github.com/ConsenSys/teku/pull/1118#pullrequestreview-350319801", "createdAt": "2020-01-29T18:14:17Z", "commit": {"oid": "1ecb2303a80ac3b70d198ae7afb5e21f883f157b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxODoxNDoxN1rOFjSgNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxODoxNDoxN1rOFjSgNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU0NzYzNg==", "bodyText": "Why use the @mock annotation instead of the mock() method?", "url": "https://github.com/ConsenSys/teku/pull/1118#discussion_r372547636", "createdAt": "2020-01-29T18:14:17Z", "author": {"login": "cemozerr"}, "path": "sync/src/test/java/tech/pegasys/artemis/sync/FetchRecentBlocksServiceTest.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.sync;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.networking.eth2.Eth2Network;\n+import tech.pegasys.artemis.sync.FetchBlockTask.FetchBlockResult;\n+import tech.pegasys.artemis.sync.FetchBlockTask.FetchBlockResult.Status;\n+import tech.pegasys.artemis.sync.FetchRecentBlocksService.FetchBlockTaskFactory;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.async.StubAsyncRunner;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class FetchRecentBlocksServiceTest {\n+\n+  @Mock private Eth2Network eth2Network;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ecb2303a80ac3b70d198ae7afb5e21f883f157b"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzg5Mzc3", "url": "https://github.com/ConsenSys/teku/pull/1118#pullrequestreview-350389377", "createdAt": "2020-01-29T20:05:28Z", "commit": {"oid": "1ecb2303a80ac3b70d198ae7afb5e21f883f157b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowNToyOFrOFjV5pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowNToyOFrOFjV5pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMzMwMQ==", "bodyText": "(nit)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (blockIsInvalid(block)) {\n          \n          \n            \n                if (blockIsKnown(block) || blockIsInvalid(block)) {\n          \n      \n    \n    \n  \n\nThis way we can get rid of the blockIsKnown() check in the on gossipedBlock. It's confusing to have those checks in different functions imo.", "url": "https://github.com/ConsenSys/teku/pull/1118#discussion_r372603301", "createdAt": "2020-01-29T20:05:28Z", "author": {"login": "cemozerr"}, "path": "sync/src/main/java/tech/pegasys/artemis/sync/BlockPropagationManager.java", "diffHunk": "@@ -87,43 +108,55 @@ void onBlockImported(BlockImportedEvent blockImportedEvent) {\n     final SignedBeaconBlock block = blockImportedEvent.getBlock();\n     final Bytes32 blockRoot = block.getMessage().hash_tree_root();\n     pendingBlocks.remove(block);\n-    pendingBlocks\n-        .childrenOf(blockRoot)\n-        .forEach(\n-            child -> {\n-              pendingBlocks.remove(child);\n-              importBlock(child);\n-            });\n+    final List<SignedBeaconBlock> children = pendingBlocks.getItemsDependingOn(blockRoot, false);\n+    children.forEach(pendingBlocks::remove);\n+    children.forEach(this::importBlock);\n   }\n \n   @Subscribe\n   void onSlot(final SlotEvent slotEvent) {\n     futureBlocks.prune(slotEvent.getSlot()).forEach(this::importBlock);\n   }\n \n+  private boolean blockIsInvalid(final SignedBeaconBlock block) {\n+    return invalidBlockRoots.contains(block.getMessage().hash_tree_root())\n+        || invalidBlockRoots.contains(block.getParent_root());\n+  }\n+\n   private boolean blockIsKnown(final SignedBeaconBlock block) {\n     return pendingBlocks.contains(block)\n         || storageClient.getBlockByRoot(block.getMessage().hash_tree_root()).isPresent();\n   }\n \n   private void importBlock(final SignedBeaconBlock block) {\n+    if (blockIsInvalid(block)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ecb2303a80ac3b70d198ae7afb5e21f883f157b"}, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzk1MjU0", "url": "https://github.com/ConsenSys/teku/pull/1118#pullrequestreview-350395254", "createdAt": "2020-01-29T20:15:34Z", "commit": {"oid": "1ecb2303a80ac3b70d198ae7afb5e21f883f157b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDoxNTozNFrOFjWKvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDoxNTozNFrOFjWKvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwNzY3OA==", "bodyText": "I think this should be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Gossip all blocks except the first\n          \n          \n            \n                // Gossip all blocks except the first two", "url": "https://github.com/ConsenSys/teku/pull/1118#discussion_r372607678", "createdAt": "2020-01-29T20:15:34Z", "author": {"login": "cemozerr"}, "path": "sync/src/test/java/tech/pegasys/artemis/sync/BlockPropagationManagerTest.java", "diffHunk": "@@ -155,6 +168,78 @@ public void onBlockImported_withPendingBlocks() throws Exception {\n     assertThat(pendingBlocks.size()).isEqualTo(0);\n   }\n \n+  @Test\n+  public void onBlockImportFailure_withPendingDependantBlocks() throws Exception {\n+    final int invalidChainDepth = 3;\n+    final List<SignedBeaconBlock> invalidBlockDescendants = new ArrayList<>(invalidChainDepth);\n+\n+    final SignedBeaconBlock invalidBlock =\n+        remoteChain.createBlockAtSlotFromInvalidProposer(incrementSlot());\n+    Bytes32 parentBlockRoot = invalidBlock.getMessage().hash_tree_root();\n+    for (int i = 0; i < invalidChainDepth; i++) {\n+      final UnsignedLong nextSlot = incrementSlot();\n+      final SignedBeaconBlock block =\n+          DataStructureUtil.randomSignedBeaconBlock(nextSlot.longValue(), parentBlockRoot, i);\n+      invalidBlockDescendants.add(block);\n+      parentBlockRoot = block.getMessage().hash_tree_root();\n+    }\n+\n+    // Gossip all blocks except the first\n+    invalidBlockDescendants.stream().map(GossipedBlockEvent::new).forEach(localEventBus::post);\n+    assertThat(importedBlocks.get()).isEmpty();\n+    assertThat(pendingBlocks.size()).isEqualTo(invalidChainDepth);\n+\n+    // Gossip next block, causing dependent blocks to be dropped when the import fails\n+    localEventBus.post(new GossipedBlockEvent(invalidBlock));\n+    assertThat(importedBlocks.get()).isEmpty();\n+    assertThat(pendingBlocks.size()).isEqualTo(0);\n+\n+    // If any invalid block is again gossiped, it should be ignored\n+    invalidBlockDescendants.stream().map(GossipedBlockEvent::new).forEach(localEventBus::post);\n+    assertThat(importedBlocks.get()).isEmpty();\n+    assertThat(pendingBlocks.size()).isEqualTo(0);\n+  }\n+\n+  @Test\n+  public void onBlockImportFailure_withUnconnectedPendingDependantBlocks() throws Exception {\n+    final int invalidChainDepth = 3;\n+    final List<SignedBeaconBlock> invalidBlockDescendants = new ArrayList<>(invalidChainDepth);\n+\n+    final SignedBeaconBlock invalidBlock =\n+        remoteChain.createBlockAtSlotFromInvalidProposer(incrementSlot());\n+    Bytes32 parentBlockRoot = invalidBlock.getMessage().hash_tree_root();\n+    for (int i = 0; i < invalidChainDepth; i++) {\n+      final UnsignedLong nextSlot = incrementSlot();\n+      final SignedBeaconBlock block =\n+          DataStructureUtil.randomSignedBeaconBlock(nextSlot.longValue(), parentBlockRoot, i);\n+      invalidBlockDescendants.add(block);\n+      parentBlockRoot = block.getMessage().hash_tree_root();\n+    }\n+\n+    // Gossip all blocks except the first", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ecb2303a80ac3b70d198ae7afb5e21f883f157b"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "076bfb916d17650f690267025523e641992f5b17", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/076bfb916d17650f690267025523e641992f5b17", "committedDate": "2020-01-29T20:17:31Z", "message": "Remove unnecessary constructor params, simplify map operation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzk4NzE5", "url": "https://github.com/ConsenSys/teku/pull/1118#pullrequestreview-350398719", "createdAt": "2020-01-29T20:21:48Z", "commit": {"oid": "1ecb2303a80ac3b70d198ae7afb5e21f883f157b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c221a459f8fad0b1537907b1c587257c4a3647e", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/4c221a459f8fad0b1537907b1c587257c4a3647e", "committedDate": "2020-01-29T20:36:00Z", "message": "Clarify comment\n\nCo-Authored-By: Cem Ozer <cemozer2018@u.northwestern.edu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70c43ea624d226ed842d4332c777c71cbaaecfb8", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/70c43ea624d226ed842d4332c777c71cbaaecfb8", "committedDate": "2020-01-29T20:36:22Z", "message": "Merge branch 'master' into bc-202/fetch-unknown-ancestor-blocks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d3d9667ddee7ceaf200c74bd09dca1f0a81aa44", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/8d3d9667ddee7ceaf200c74bd09dca1f0a81aa44", "committedDate": "2020-01-30T14:58:37Z", "message": "Consolidate block checks, reorganize for readability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d36fb40089a6f1be0959b8edc61ba7527c3bef7", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/ConsenSys/teku/commit/3d36fb40089a6f1be0959b8edc61ba7527c3bef7", "committedDate": "2020-01-30T14:58:58Z", "message": "Merge branch 'master' into bc-202/fetch-unknown-ancestor-blocks"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4244, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}