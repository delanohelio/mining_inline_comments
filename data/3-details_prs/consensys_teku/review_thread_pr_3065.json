{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MTkxMTAz", "number": 3065, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMTozMjozMlrOExuUtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzowNjozN1rOExvGYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTc0NjQ1OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/forkchoice/ReadOnlyStore.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMTozMjozMlrOHn-g4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxNzo0MFrOHoiu-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY4MDczNg==", "bodyText": "Would it make sense to have this return genesis if no anchor was specified?", "url": "https://github.com/ConsenSys/teku/pull/3065#discussion_r511680736", "createdAt": "2020-10-26T01:32:32Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/forkchoice/ReadOnlyStore.java", "diffHunk": "@@ -32,6 +32,14 @@\n \n   UInt64 getGenesisTime();\n \n+  /**\n+   * Returns the anchor checkpoint from which the chain was started, if such an anchor exists. If\n+   * the anchor is missing, the node was started up from genesis.\n+   *\n+   * @return The anchor if it exists.\n+   */\n+  Optional<Checkpoint> getAnchor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8452adf01a1939efbcbb3061f1566bff088ccd2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5OTYyNQ==", "bodyText": "Going forward, this will return genesis if you started up from genesis.  But not sure its worth extra lookups to the cold db to always set a value for older databases.", "url": "https://github.com/ConsenSys/teku/pull/3065#discussion_r512199625", "createdAt": "2020-10-26T19:01:31Z", "author": {"login": "mbaxter"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/forkchoice/ReadOnlyStore.java", "diffHunk": "@@ -32,6 +32,14 @@\n \n   UInt64 getGenesisTime();\n \n+  /**\n+   * Returns the anchor checkpoint from which the chain was started, if such an anchor exists. If\n+   * the anchor is missing, the node was started up from genesis.\n+   *\n+   * @return The anchor if it exists.\n+   */\n+  Optional<Checkpoint> getAnchor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY4MDczNg=="}, "originalCommit": {"oid": "d8452adf01a1939efbcbb3061f1566bff088ccd2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3NDE2OQ==", "bodyText": "ah I see, that makes sense.", "url": "https://github.com/ConsenSys/teku/pull/3065#discussion_r512274169", "createdAt": "2020-10-26T21:17:40Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/forkchoice/ReadOnlyStore.java", "diffHunk": "@@ -32,6 +32,14 @@\n \n   UInt64 getGenesisTime();\n \n+  /**\n+   * Returns the anchor checkpoint from which the chain was started, if such an anchor exists. If\n+   * the anchor is missing, the node was started up from genesis.\n+   *\n+   * @return The anchor if it exists.\n+   */\n+  Optional<Checkpoint> getAnchor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY4MDczNg=="}, "originalCommit": {"oid": "d8452adf01a1939efbcbb3061f1566bff088ccd2"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTg0NTEwOnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/testFixtures/java/tech/pegasys/teku/datastructures/util/BeaconStateBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMjo0Njo0M1rOHn_XPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODo0ODo1MlrOHodu1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY5NDY1Mg==", "bodyText": "nit: stray semicolon", "url": "https://github.com/ConsenSys/teku/pull/3065#discussion_r511694652", "createdAt": "2020-10-26T02:46:43Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/testFixtures/java/tech/pegasys/teku/datastructures/util/BeaconStateBuilder.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.util;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.compute_start_slot_at_epoch;\n+import static tech.pegasys.teku.util.config.Constants.EPOCHS_PER_ETH1_VOTING_PERIOD;\n+import static tech.pegasys.teku.util.config.Constants.SLOTS_PER_EPOCH;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlockHeader;\n+import tech.pegasys.teku.datastructures.blocks.Eth1Data;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.datastructures.state.Fork;\n+import tech.pegasys.teku.datastructures.state.PendingAttestation;\n+import tech.pegasys.teku.datastructures.state.Validator;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.ssz.SSZTypes.Bitvector;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZVector;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class BeaconStateBuilder {\n+  private final DataStructureUtil dataStructureUtil;\n+  private final int defaultValidatorCount;\n+  private final int defaultItemsInSSZLists;\n+\n+  private UInt64 genesisTime;\n+  private Bytes32 genesisValidatorsRoot;\n+  private UInt64 slot;\n+  private Fork fork;\n+  private BeaconBlockHeader latestBlockHeader;\n+  private SSZVector<Bytes32> blockRoots;\n+  private SSZVector<Bytes32> stateRoots;\n+  private SSZList<Bytes32> historicalRoots;\n+  private Eth1Data eth1Data;\n+  private SSZList<Eth1Data> eth1DataVotes;\n+  private UInt64 eth1DepositIndex;\n+  private SSZList<? extends Validator> validators;\n+  private SSZList<UInt64> balances;\n+  private SSZVector<Bytes32> randaoMixes;\n+  private SSZVector<UInt64> slashings;\n+  private SSZList<PendingAttestation> previousEpochAttestations;\n+  private SSZList<PendingAttestation> currentEpochAttestations;\n+  private Bitvector justificationBits;\n+  private Checkpoint previousJustifiedCheckpoint;\n+  private Checkpoint currentJustifiedCheckpoint;\n+  private Checkpoint finalizedCheckpoint;\n+\n+  private BeaconStateBuilder(\n+      final DataStructureUtil dataStructureUtil,\n+      final int defaultValidatorCount,\n+      final int defaultItemsInSSZLists) {\n+    this.dataStructureUtil = dataStructureUtil;\n+    this.defaultValidatorCount = defaultValidatorCount;\n+    this.defaultItemsInSSZLists = defaultItemsInSSZLists;\n+    initDefaults();\n+  }\n+\n+  public static BeaconStateBuilder create(\n+      final DataStructureUtil dataStructureUtil,\n+      final int defaultValidatorCount,\n+      final int defaultItemsInSSZLists) {\n+    return new BeaconStateBuilder(dataStructureUtil, defaultValidatorCount, defaultItemsInSSZLists);\n+  }\n+\n+  public BeaconState build() {\n+    return BeaconState.create(\n+        genesisTime,\n+        genesisValidatorsRoot,\n+        slot,\n+        fork,\n+        latestBlockHeader,\n+        blockRoots,\n+        stateRoots,\n+        historicalRoots,\n+        eth1Data,\n+        eth1DataVotes,\n+        eth1DepositIndex,\n+        validators,\n+        balances,\n+        randaoMixes,\n+        slashings,\n+        previousEpochAttestations,\n+        currentEpochAttestations,\n+        justificationBits,\n+        previousJustifiedCheckpoint,\n+        currentJustifiedCheckpoint,\n+        finalizedCheckpoint);\n+  }\n+\n+  private void initDefaults() {\n+    genesisTime = dataStructureUtil.randomUInt64();\n+    genesisValidatorsRoot = dataStructureUtil.randomBytes32();\n+    slot = dataStructureUtil.randomUInt64();\n+    fork = dataStructureUtil.randomFork();\n+    latestBlockHeader = dataStructureUtil.randomBeaconBlockHeader();\n+    blockRoots =\n+        dataStructureUtil.randomSSZVector(\n+            Bytes32.ZERO, Constants.SLOTS_PER_HISTORICAL_ROOT, dataStructureUtil::randomBytes32);\n+    stateRoots =\n+        dataStructureUtil.randomSSZVector(\n+            Bytes32.ZERO, Constants.SLOTS_PER_HISTORICAL_ROOT, dataStructureUtil::randomBytes32);\n+    ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8452adf01a1939efbcbb3061f1566bff088ccd2"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5MjIxMw==", "bodyText": "For some reason I always seem to get these \ud83e\udd2a", "url": "https://github.com/ConsenSys/teku/pull/3065#discussion_r512192213", "createdAt": "2020-10-26T18:48:52Z", "author": {"login": "mbaxter"}, "path": "ethereum/datastructures/src/testFixtures/java/tech/pegasys/teku/datastructures/util/BeaconStateBuilder.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.util;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.compute_start_slot_at_epoch;\n+import static tech.pegasys.teku.util.config.Constants.EPOCHS_PER_ETH1_VOTING_PERIOD;\n+import static tech.pegasys.teku.util.config.Constants.SLOTS_PER_EPOCH;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlockHeader;\n+import tech.pegasys.teku.datastructures.blocks.Eth1Data;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.datastructures.state.Fork;\n+import tech.pegasys.teku.datastructures.state.PendingAttestation;\n+import tech.pegasys.teku.datastructures.state.Validator;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.ssz.SSZTypes.Bitvector;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZVector;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class BeaconStateBuilder {\n+  private final DataStructureUtil dataStructureUtil;\n+  private final int defaultValidatorCount;\n+  private final int defaultItemsInSSZLists;\n+\n+  private UInt64 genesisTime;\n+  private Bytes32 genesisValidatorsRoot;\n+  private UInt64 slot;\n+  private Fork fork;\n+  private BeaconBlockHeader latestBlockHeader;\n+  private SSZVector<Bytes32> blockRoots;\n+  private SSZVector<Bytes32> stateRoots;\n+  private SSZList<Bytes32> historicalRoots;\n+  private Eth1Data eth1Data;\n+  private SSZList<Eth1Data> eth1DataVotes;\n+  private UInt64 eth1DepositIndex;\n+  private SSZList<? extends Validator> validators;\n+  private SSZList<UInt64> balances;\n+  private SSZVector<Bytes32> randaoMixes;\n+  private SSZVector<UInt64> slashings;\n+  private SSZList<PendingAttestation> previousEpochAttestations;\n+  private SSZList<PendingAttestation> currentEpochAttestations;\n+  private Bitvector justificationBits;\n+  private Checkpoint previousJustifiedCheckpoint;\n+  private Checkpoint currentJustifiedCheckpoint;\n+  private Checkpoint finalizedCheckpoint;\n+\n+  private BeaconStateBuilder(\n+      final DataStructureUtil dataStructureUtil,\n+      final int defaultValidatorCount,\n+      final int defaultItemsInSSZLists) {\n+    this.dataStructureUtil = dataStructureUtil;\n+    this.defaultValidatorCount = defaultValidatorCount;\n+    this.defaultItemsInSSZLists = defaultItemsInSSZLists;\n+    initDefaults();\n+  }\n+\n+  public static BeaconStateBuilder create(\n+      final DataStructureUtil dataStructureUtil,\n+      final int defaultValidatorCount,\n+      final int defaultItemsInSSZLists) {\n+    return new BeaconStateBuilder(dataStructureUtil, defaultValidatorCount, defaultItemsInSSZLists);\n+  }\n+\n+  public BeaconState build() {\n+    return BeaconState.create(\n+        genesisTime,\n+        genesisValidatorsRoot,\n+        slot,\n+        fork,\n+        latestBlockHeader,\n+        blockRoots,\n+        stateRoots,\n+        historicalRoots,\n+        eth1Data,\n+        eth1DataVotes,\n+        eth1DepositIndex,\n+        validators,\n+        balances,\n+        randaoMixes,\n+        slashings,\n+        previousEpochAttestations,\n+        currentEpochAttestations,\n+        justificationBits,\n+        previousJustifiedCheckpoint,\n+        currentJustifiedCheckpoint,\n+        finalizedCheckpoint);\n+  }\n+\n+  private void initDefaults() {\n+    genesisTime = dataStructureUtil.randomUInt64();\n+    genesisValidatorsRoot = dataStructureUtil.randomBytes32();\n+    slot = dataStructureUtil.randomUInt64();\n+    fork = dataStructureUtil.randomFork();\n+    latestBlockHeader = dataStructureUtil.randomBeaconBlockHeader();\n+    blockRoots =\n+        dataStructureUtil.randomSSZVector(\n+            Bytes32.ZERO, Constants.SLOTS_PER_HISTORICAL_ROOT, dataStructureUtil::randomBytes32);\n+    stateRoots =\n+        dataStructureUtil.randomSSZVector(\n+            Bytes32.ZERO, Constants.SLOTS_PER_HISTORICAL_ROOT, dataStructureUtil::randomBytes32);\n+    ;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY5NDY1Mg=="}, "originalCommit": {"oid": "d8452adf01a1939efbcbb3061f1566bff088ccd2"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTg3MzYxOnYy", "diffSide": "RIGHT", "path": "teku/src/main/java/tech/pegasys/teku/cli/options/NetworkOptions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwMzowNjozN1rOHn_m6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODo1NzoyOFrOHoeCgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY5ODY2Ng==", "bodyText": "I wonder if we should leave this as --initial-state because ultimately we want to be able to sync just from a state and so would wind up being able to just specify that state here.\nEven now if the slot of the initial state was 0 we can generate the block and if it's not, we require the block to be passed in via the extra arg.\nHowever it winds up, I think I'd avoid making changes to the stable CLI options before we know exactly where it's going to land.", "url": "https://github.com/ConsenSys/teku/pull/3065#discussion_r511698666", "createdAt": "2020-10-26T03:06:37Z", "author": {"login": "ajsutton"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/options/NetworkOptions.java", "diffHunk": "@@ -25,11 +25,11 @@\n   private String network = \"medalla\";\n \n   @Option(\n-      names = {\"--initial-state\"},\n+      names = {\"--genesis-state\", \"--initial-state\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8452adf01a1939efbcbb3061f1566bff088ccd2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5NzI0OQ==", "bodyText": "Yeah, I was initially thinking they would merge, but then it just seemed simpler to keep them separate.  But it probably is premature to rename right now.  Reverted this.", "url": "https://github.com/ConsenSys/teku/pull/3065#discussion_r512197249", "createdAt": "2020-10-26T18:57:28Z", "author": {"login": "mbaxter"}, "path": "teku/src/main/java/tech/pegasys/teku/cli/options/NetworkOptions.java", "diffHunk": "@@ -25,11 +25,11 @@\n   private String network = \"medalla\";\n \n   @Option(\n-      names = {\"--initial-state\"},\n+      names = {\"--genesis-state\", \"--initial-state\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY5ODY2Ng=="}, "originalCommit": {"oid": "d8452adf01a1939efbcbb3061f1566bff088ccd2"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3093, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}