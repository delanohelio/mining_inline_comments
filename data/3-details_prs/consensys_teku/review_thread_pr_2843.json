{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNjc3MDcx", "number": 2843, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDo1Nzo0OFrOEnfcKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDo1Nzo0OFrOEnfcKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODQ1MDMyOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/PeerChainValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDo1Nzo0OFrOHYHODw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDo1Nzo0OFrOHYHODw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA0NjE1OQ==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private boolean validateFork(final Eth2Peer peer, final PeerStatus status) {\n          \n          \n            \n              private boolean isForkValid(final Eth2Peer peer, final PeerStatus status) {", "url": "https://github.com/ConsenSys/teku/pull/2843#discussion_r495046159", "createdAt": "2020-09-25T14:57:48Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/PeerChainValidator.java", "diffHunk": "@@ -87,24 +96,85 @@ public static PeerChainValidator create(\n             });\n   }\n \n-  private SafeFuture<Boolean> checkRemoteChain(final Eth2Peer peer, final PeerStatus status) {\n-    // Check fork compatibility\n+  private SafeFuture<Boolean> isRemoteChainValid(final Eth2Peer peer, final PeerStatus status) {\n+    if (!validateFork(peer, status)) {\n+      return SafeFuture.completedFuture(false);\n+    }\n+\n+    // Skip remaining checks if only genesis is finalized\n+    if (status.getFinalizedEpoch().equals(UInt64.ZERO)) {\n+      return SafeFuture.completedFuture(true);\n+    }\n+\n+    return validateRequiredCheckpoint(peer, status)\n+        .thenCompose(\n+            isValid -> {\n+              if (!isValid) {\n+                // Short-circuit if we know the chain is invalid\n+                LOG.trace(\n+                    \"Failed to validate peer against required checkpoint {}\", requiredCheckpoint);\n+                return SafeFuture.completedFuture(isValid);\n+              }\n+\n+              return validateFinalizedCheckpoint(peer, status);\n+            });\n+  }\n+\n+  private boolean validateFork(final Eth2Peer peer, final PeerStatus status) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "786056b0b3279f2a6b301a9c92029316768ddca0"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3288, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}