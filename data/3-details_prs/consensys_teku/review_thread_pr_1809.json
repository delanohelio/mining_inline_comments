{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5Nzg4MzE0", "number": 1809, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzozNTo0NFrOD9lijg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMzo0NjoxOVrOD-AomA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTA0NzgyOnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/DiscoveryNetwork.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzozNTo0NFrOGXK2zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDo0MjowNVrOGXx10A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0ODMwMw==", "bodyText": "We've removed the predicate and left a period where we aren't filtering peers.  We probably need this to be a replacePredicate atomic operation.\nBut it's probably simpler to just register one predicate with the connection manager that looks at a volatile field which stores the current EnrForkId and filters on that.  Then when the fork ID is updated, it updates that field and the existing predicate begins using the new value.", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r426948303", "createdAt": "2020-05-18T23:35:44Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/DiscoveryNetwork.java", "diffHunk": "@@ -156,6 +158,9 @@ public void setPreGenesisForkInfo() {\n   }\n \n   public void setForkInfo(final ForkInfo currentForkInfo, final Optional<Fork> nextForkInfo) {\n+    // Remove the old fork info peer predicate\n+    enrFieldPeerPredicateId.ifPresent(connectionManager::removePeerPredicate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "646bd281f30344de7c5e858eab1f93478e8ad417"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4NzAyNA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r427587024", "createdAt": "2020-05-19T20:42:05Z", "author": {"login": "cemozerr"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/DiscoveryNetwork.java", "diffHunk": "@@ -156,6 +158,9 @@ public void setPreGenesisForkInfo() {\n   }\n \n   public void setForkInfo(final ForkInfo currentForkInfo, final Optional<Fork> nextForkInfo) {\n+    // Remove the old fork info peer predicate\n+    enrFieldPeerPredicateId.ifPresent(connectionManager::removePeerPredicate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0ODMwMw=="}, "originalCommit": {"oid": "646bd281f30344de7c5e858eab1f93478e8ad417"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTA0ODY5OnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/DiscoveryNetwork.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzozNjoxMFrOGXK3Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTowMzoyNlrOGXyiyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0ODQzNQ==", "bodyText": "What happens when the peer doesn't include an eth2 field in it's ENR? I think we should not connect to them, but I think we'll get NullPointerException.", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r426948435", "createdAt": "2020-05-18T23:36:10Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/DiscoveryNetwork.java", "diffHunk": "@@ -164,10 +169,21 @@ public void setForkInfo(final ForkInfo currentForkInfo, final Optional<Fork> nex\n     // If no future fork is planned, set next_fork_epoch = FAR_FUTURE_EPOCH to signal this\n     final UnsignedLong nextForkEpoch = nextForkInfo.map(Fork::getEpoch).orElse(FAR_FUTURE_EPOCH);\n \n-    final EnrForkId enrForkId =\n-        new EnrForkId(currentForkInfo.getForkDigest(), nextVersion, nextForkEpoch);\n-    discoveryService.updateCustomENRField(\n-        ETH2_ENR_FIELD, SimpleOffsetSerializer.serialize(enrForkId));\n+    final Bytes4 forkDigest = currentForkInfo.getForkDigest();\n+    final EnrForkId enrForkId = new EnrForkId(forkDigest, nextVersion, nextForkEpoch);\n+    final Bytes encodedEnrForkId = SimpleOffsetSerializer.serialize(enrForkId);\n+\n+    discoveryService.updateCustomENRField(ETH2_ENR_FIELD, encodedEnrForkId);\n+\n+    long newPeerPredicateId =\n+        connectionManager.addPeerPredicate(\n+            peer ->\n+                peer.getEnrForkId().equals(encodedEnrForkId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "646bd281f30344de7c5e858eab1f93478e8ad417"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5NDUzNg==", "bodyText": "Fixed.", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r427594536", "createdAt": "2020-05-19T20:55:48Z", "author": {"login": "cemozerr"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/DiscoveryNetwork.java", "diffHunk": "@@ -164,10 +169,21 @@ public void setForkInfo(final ForkInfo currentForkInfo, final Optional<Fork> nex\n     // If no future fork is planned, set next_fork_epoch = FAR_FUTURE_EPOCH to signal this\n     final UnsignedLong nextForkEpoch = nextForkInfo.map(Fork::getEpoch).orElse(FAR_FUTURE_EPOCH);\n \n-    final EnrForkId enrForkId =\n-        new EnrForkId(currentForkInfo.getForkDigest(), nextVersion, nextForkEpoch);\n-    discoveryService.updateCustomENRField(\n-        ETH2_ENR_FIELD, SimpleOffsetSerializer.serialize(enrForkId));\n+    final Bytes4 forkDigest = currentForkInfo.getForkDigest();\n+    final EnrForkId enrForkId = new EnrForkId(forkDigest, nextVersion, nextForkEpoch);\n+    final Bytes encodedEnrForkId = SimpleOffsetSerializer.serialize(enrForkId);\n+\n+    discoveryService.updateCustomENRField(ETH2_ENR_FIELD, encodedEnrForkId);\n+\n+    long newPeerPredicateId =\n+        connectionManager.addPeerPredicate(\n+            peer ->\n+                peer.getEnrForkId().equals(encodedEnrForkId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0ODQzNQ=="}, "originalCommit": {"oid": "646bd281f30344de7c5e858eab1f93478e8ad417"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5ODUzNg==", "bodyText": "Fixed this.", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r427598536", "createdAt": "2020-05-19T21:03:26Z", "author": {"login": "cemozerr"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/DiscoveryNetwork.java", "diffHunk": "@@ -164,10 +169,21 @@ public void setForkInfo(final ForkInfo currentForkInfo, final Optional<Fork> nex\n     // If no future fork is planned, set next_fork_epoch = FAR_FUTURE_EPOCH to signal this\n     final UnsignedLong nextForkEpoch = nextForkInfo.map(Fork::getEpoch).orElse(FAR_FUTURE_EPOCH);\n \n-    final EnrForkId enrForkId =\n-        new EnrForkId(currentForkInfo.getForkDigest(), nextVersion, nextForkEpoch);\n-    discoveryService.updateCustomENRField(\n-        ETH2_ENR_FIELD, SimpleOffsetSerializer.serialize(enrForkId));\n+    final Bytes4 forkDigest = currentForkInfo.getForkDigest();\n+    final EnrForkId enrForkId = new EnrForkId(forkDigest, nextVersion, nextForkEpoch);\n+    final Bytes encodedEnrForkId = SimpleOffsetSerializer.serialize(enrForkId);\n+\n+    discoveryService.updateCustomENRField(ETH2_ENR_FIELD, encodedEnrForkId);\n+\n+    long newPeerPredicateId =\n+        connectionManager.addPeerPredicate(\n+            peer ->\n+                peer.getEnrForkId().equals(encodedEnrForkId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0ODQzNQ=="}, "originalCommit": {"oid": "646bd281f30344de7c5e858eab1f93478e8ad417"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTA1MzMzOnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/connection/ConnectionManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzozODo0M1rOGXK6MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTowMzoxMlrOGXyiZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0OTE2OQ==", "bodyText": "Nice.  But I think you can use:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return peerPredicates.values().stream()\n          \n          \n            \n                      .map(predicate -> predicate.applyPeer(peer))\n          \n          \n            \n                      .reduce(true, (a, b) -> a && b);\n          \n          \n            \n                  return peerPredicates.values().stream()\n          \n          \n            \n                      .allMatch(predicate -> predicate.applyPeer(peer));", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r426949169", "createdAt": "2020-05-18T23:38:43Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/connection/ConnectionManager.java", "diffHunk": "@@ -171,4 +177,37 @@ private void createPersistentConnection(final PeerAddress peerAddress) {\n                   TimeUnit.MILLISECONDS);\n             });\n   }\n+\n+  public long addPeerPredicate(final PeerPredicate predicate) {\n+    return newPeerFilter.addPeerPredicate(predicate);\n+  }\n+\n+  public boolean removePeerPredicate(final long id) {\n+    return newPeerFilter.removePeerPredicate(id);\n+  }\n+\n+  public static class NewPeerFilter {\n+    private final AtomicLong predicateId = new AtomicLong();\n+    private final Map<Long, PeerPredicate> peerPredicates = new ConcurrentHashMap<>();\n+\n+    long addPeerPredicate(final PeerPredicate predicate) {\n+      final long id = predicateId.getAndIncrement();\n+      peerPredicates.put(id, predicate);\n+      return id;\n+    }\n+\n+    boolean removePeerPredicate(final long predicateId) {\n+      return peerPredicates.remove(predicateId) != null;\n+    }\n+\n+    boolean isPeerValid(DiscoveryPeer peer) {\n+      return peerPredicates.values().stream()\n+          .map(predicate -> predicate.applyPeer(peer))\n+          .reduce(true, (a, b) -> a && b);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "646bd281f30344de7c5e858eab1f93478e8ad417"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU4OTU2Ng==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r427589566", "createdAt": "2020-05-19T20:46:37Z", "author": {"login": "cemozerr"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/connection/ConnectionManager.java", "diffHunk": "@@ -171,4 +177,37 @@ private void createPersistentConnection(final PeerAddress peerAddress) {\n                   TimeUnit.MILLISECONDS);\n             });\n   }\n+\n+  public long addPeerPredicate(final PeerPredicate predicate) {\n+    return newPeerFilter.addPeerPredicate(predicate);\n+  }\n+\n+  public boolean removePeerPredicate(final long id) {\n+    return newPeerFilter.removePeerPredicate(id);\n+  }\n+\n+  public static class NewPeerFilter {\n+    private final AtomicLong predicateId = new AtomicLong();\n+    private final Map<Long, PeerPredicate> peerPredicates = new ConcurrentHashMap<>();\n+\n+    long addPeerPredicate(final PeerPredicate predicate) {\n+      final long id = predicateId.getAndIncrement();\n+      peerPredicates.put(id, predicate);\n+      return id;\n+    }\n+\n+    boolean removePeerPredicate(final long predicateId) {\n+      return peerPredicates.remove(predicateId) != null;\n+    }\n+\n+    boolean isPeerValid(DiscoveryPeer peer) {\n+      return peerPredicates.values().stream()\n+          .map(predicate -> predicate.applyPeer(peer))\n+          .reduce(true, (a, b) -> a && b);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0OTE2OQ=="}, "originalCommit": {"oid": "646bd281f30344de7c5e858eab1f93478e8ad417"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5ODQzNg==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r427598436", "createdAt": "2020-05-19T21:03:12Z", "author": {"login": "cemozerr"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/connection/ConnectionManager.java", "diffHunk": "@@ -171,4 +177,37 @@ private void createPersistentConnection(final PeerAddress peerAddress) {\n                   TimeUnit.MILLISECONDS);\n             });\n   }\n+\n+  public long addPeerPredicate(final PeerPredicate predicate) {\n+    return newPeerFilter.addPeerPredicate(predicate);\n+  }\n+\n+  public boolean removePeerPredicate(final long id) {\n+    return newPeerFilter.removePeerPredicate(id);\n+  }\n+\n+  public static class NewPeerFilter {\n+    private final AtomicLong predicateId = new AtomicLong();\n+    private final Map<Long, PeerPredicate> peerPredicates = new ConcurrentHashMap<>();\n+\n+    long addPeerPredicate(final PeerPredicate predicate) {\n+      final long id = predicateId.getAndIncrement();\n+      peerPredicates.put(id, predicate);\n+      return id;\n+    }\n+\n+    boolean removePeerPredicate(final long predicateId) {\n+      return peerPredicates.remove(predicateId) != null;\n+    }\n+\n+    boolean isPeerValid(DiscoveryPeer peer) {\n+      return peerPredicates.values().stream()\n+          .map(predicate -> predicate.applyPeer(peer))\n+          .reduce(true, (a, b) -> a && b);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0OTE2OQ=="}, "originalCommit": {"oid": "646bd281f30344de7c5e858eab1f93478e8ad417"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTA1NjQxOnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/NodeRecordConverter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzo0MDoxNlrOGXK8EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTowMzowOFrOGXyiQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0OTY0OA==", "bodyText": "Definitely going to want to make this Optional to handle the field not being set.", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r426949648", "createdAt": "2020-05-18T23:40:16Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/NodeRecordConverter.java", "diffHunk": "@@ -29,6 +29,9 @@\n \n   private static DiscoveryPeer socketAddressToDiscoveryPeer(\n       final NodeRecord nodeRecord, final InetSocketAddress address) {\n-    return new DiscoveryPeer(((Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1)), address);\n+    return new DiscoveryPeer(\n+        ((Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1)),\n+        address,\n+        ((Bytes) nodeRecord.get(\"eth2\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "646bd281f30344de7c5e858eab1f93478e8ad417"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5NDg1Mg==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r427594852", "createdAt": "2020-05-19T20:56:27Z", "author": {"login": "cemozerr"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/NodeRecordConverter.java", "diffHunk": "@@ -29,6 +29,9 @@\n \n   private static DiscoveryPeer socketAddressToDiscoveryPeer(\n       final NodeRecord nodeRecord, final InetSocketAddress address) {\n-    return new DiscoveryPeer(((Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1)), address);\n+    return new DiscoveryPeer(\n+        ((Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1)),\n+        address,\n+        ((Bytes) nodeRecord.get(\"eth2\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0OTY0OA=="}, "originalCommit": {"oid": "646bd281f30344de7c5e858eab1f93478e8ad417"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5ODQwMg==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r427598402", "createdAt": "2020-05-19T21:03:08Z", "author": {"login": "cemozerr"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/discovery/discv5/NodeRecordConverter.java", "diffHunk": "@@ -29,6 +29,9 @@\n \n   private static DiscoveryPeer socketAddressToDiscoveryPeer(\n       final NodeRecord nodeRecord, final InetSocketAddress address) {\n-    return new DiscoveryPeer(((Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1)), address);\n+    return new DiscoveryPeer(\n+        ((Bytes) nodeRecord.get(EnrField.PKEY_SECP256K1)),\n+        address,\n+        ((Bytes) nodeRecord.get(\"eth2\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0OTY0OA=="}, "originalCommit": {"oid": "646bd281f30344de7c5e858eab1f93478e8ad417"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTA2MDIyOnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/test/java/tech/pegasys/teku/networking/p2p/discovery/ConnectionManagerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzo0MjoyNlrOGXK-cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTowNTowNFrOGXyl6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1MDI1OQ==", "bodyText": "Worth adding a test for discovery peers with no enr fork ID.", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r426950259", "createdAt": "2020-05-18T23:42:26Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/test/java/tech/pegasys/teku/networking/p2p/discovery/ConnectionManagerTest.java", "diffHunk": "@@ -43,18 +43,19 @@\n \n class ConnectionManagerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "646bd281f30344de7c5e858eab1f93478e8ad417"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5OTMzOA==", "bodyText": "I believe adding that test to DiscoveryNetworkTest.java would be better since the connection manager is agnostic for any Eth2 specific information, and the enr fork id predicates get added at DiscoveryNetwork.", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r427599338", "createdAt": "2020-05-19T21:05:04Z", "author": {"login": "cemozerr"}, "path": "networking/p2p/src/test/java/tech/pegasys/teku/networking/p2p/discovery/ConnectionManagerTest.java", "diffHunk": "@@ -43,18 +43,19 @@\n \n class ConnectionManagerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1MDI1OQ=="}, "originalCommit": {"oid": "646bd281f30344de7c5e858eab1f93478e8ad417"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTA2MjE2OnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/test/java/tech/pegasys/teku/networking/p2p/DiscoveryNetworkTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzo0MzozM1rOGXK_nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTowMjo1MFrOGXyhkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1MDU1Ng==", "bodyText": "It's usually better not to mock data classes like DiscoveryPeer.  Just create a real one passing in the values you need it to return from it's getters.", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r426950556", "createdAt": "2020-05-18T23:43:33Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/test/java/tech/pegasys/teku/networking/p2p/DiscoveryNetworkTest.java", "diffHunk": "@@ -174,6 +179,45 @@ public void setForkInfo_futureForkScheduled() {\n         .updateCustomENRField(\"eth2\", SimpleOffsetSerializer.serialize(expectedEnrForkId));\n   }\n \n+  @Test\n+  public void setForkInfoShouldAddPredicateToConnectionManager() {\n+    final ForkInfo currentForkInfo = dataStructureUtil.randomForkInfo();\n+    discoveryNetwork.setForkInfo(currentForkInfo, Optional.empty());\n+\n+    final EnrForkId expectedEnrForkId =\n+        new EnrForkId(\n+            currentForkInfo.getForkDigest(),\n+            currentForkInfo.getFork().getCurrent_version(),\n+            FAR_FUTURE_EPOCH);\n+    Bytes encodedForkId = SimpleOffsetSerializer.serialize(expectedEnrForkId);\n+    verify(discoveryService).updateCustomENRField(\"eth2\", encodedForkId);\n+    ArgumentCaptor<ConnectionManager.PeerPredicate> peerPredicateArgumentCaptor =\n+        ArgumentCaptor.forClass(ConnectionManager.PeerPredicate.class);\n+    verify(connectionManager).addPeerPredicate(peerPredicateArgumentCaptor.capture());\n+\n+    DiscoveryPeer peer1 = mock(DiscoveryPeer.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "646bd281f30344de7c5e858eab1f93478e8ad417"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU5ODIyNQ==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r427598225", "createdAt": "2020-05-19T21:02:50Z", "author": {"login": "cemozerr"}, "path": "networking/p2p/src/test/java/tech/pegasys/teku/networking/p2p/DiscoveryNetworkTest.java", "diffHunk": "@@ -174,6 +179,45 @@ public void setForkInfo_futureForkScheduled() {\n         .updateCustomENRField(\"eth2\", SimpleOffsetSerializer.serialize(expectedEnrForkId));\n   }\n \n+  @Test\n+  public void setForkInfoShouldAddPredicateToConnectionManager() {\n+    final ForkInfo currentForkInfo = dataStructureUtil.randomForkInfo();\n+    discoveryNetwork.setForkInfo(currentForkInfo, Optional.empty());\n+\n+    final EnrForkId expectedEnrForkId =\n+        new EnrForkId(\n+            currentForkInfo.getForkDigest(),\n+            currentForkInfo.getFork().getCurrent_version(),\n+            FAR_FUTURE_EPOCH);\n+    Bytes encodedForkId = SimpleOffsetSerializer.serialize(expectedEnrForkId);\n+    verify(discoveryService).updateCustomENRField(\"eth2\", encodedForkId);\n+    ArgumentCaptor<ConnectionManager.PeerPredicate> peerPredicateArgumentCaptor =\n+        ArgumentCaptor.forClass(ConnectionManager.PeerPredicate.class);\n+    verify(connectionManager).addPeerPredicate(peerPredicateArgumentCaptor.capture());\n+\n+    DiscoveryPeer peer1 = mock(DiscoveryPeer.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1MDU1Ng=="}, "originalCommit": {"oid": "646bd281f30344de7c5e858eab1f93478e8ad417"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzQ4MzA0OnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/DiscoveryNetwork.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMzo0NDo1MVrOGX2Zxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODowMjowMVrOGYXlyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY2MTc2Ng==", "bodyText": "nit: maybe extract this as a private method rather than doing it inline to avoid all the wrapping.", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r427661766", "createdAt": "2020-05-19T23:44:51Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/DiscoveryNetwork.java", "diffHunk": "@@ -70,6 +72,23 @@\n   public void initialize() {\n     setPreGenesisForkInfo();\n     getEnr().ifPresent(StatusLogger.STATUS_LOG::listeningForDiscv5PreGenesis);\n+\n+    // Set connection manager peer predicate so that we don't attempt to connect peers with\n+    // different fork digests\n+    connectionManager.addPeerPredicate(\n+        peer ->\n+            enrForkId\n+                .map(EnrForkId::getForkDigest)\n+                .flatMap(\n+                    forkDigest ->\n+                        peer.getEnrForkId()\n+                            .map(\n+                                peerEnrForkId ->\n+                                    SimpleOffsetSerializer.deserialize(\n+                                            peerEnrForkId, EnrForkId.class)\n+                                        .getForkDigest()\n+                                        .equals(forkDigest)))\n+                .orElse(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce00b27aae35da03fc98f6cced404152e834fb09"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIwNTUxMg==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r428205512", "createdAt": "2020-05-20T18:02:01Z", "author": {"login": "cemozerr"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/DiscoveryNetwork.java", "diffHunk": "@@ -70,6 +72,23 @@\n   public void initialize() {\n     setPreGenesisForkInfo();\n     getEnr().ifPresent(StatusLogger.STATUS_LOG::listeningForDiscv5PreGenesis);\n+\n+    // Set connection manager peer predicate so that we don't attempt to connect peers with\n+    // different fork digests\n+    connectionManager.addPeerPredicate(\n+        peer ->\n+            enrForkId\n+                .map(EnrForkId::getForkDigest)\n+                .flatMap(\n+                    forkDigest ->\n+                        peer.getEnrForkId()\n+                            .map(\n+                                peerEnrForkId ->\n+                                    SimpleOffsetSerializer.deserialize(\n+                                            peerEnrForkId, EnrForkId.class)\n+                                        .getForkDigest()\n+                                        .equals(forkDigest)))\n+                .orElse(false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY2MTc2Ng=="}, "originalCommit": {"oid": "ce00b27aae35da03fc98f6cced404152e834fb09"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzQ4Njk2OnYy", "diffSide": "RIGHT", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/connection/ConnectionManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMzo0NjoxOVrOGX2b6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODowMjowNVrOGYXmAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY2MjMxMg==", "bodyText": "Do we need this now?", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r427662312", "createdAt": "2020-05-19T23:46:19Z", "author": {"login": "ajsutton"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/connection/ConnectionManager.java", "diffHunk": "@@ -171,4 +178,31 @@ private void createPersistentConnection(final PeerAddress peerAddress) {\n                   TimeUnit.MILLISECONDS);\n             });\n   }\n+\n+  public long addPeerPredicate(final Predicate<DiscoveryPeer> predicate) {\n+    return newPeerFilter.addPeerPredicate(predicate);\n+  }\n+\n+  public boolean removePeerPredicate(final long id) {\n+    return newPeerFilter.removePeerPredicate(id);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce00b27aae35da03fc98f6cced404152e834fb09"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIwNTU3MA==", "bodyText": "Removed.", "url": "https://github.com/ConsenSys/teku/pull/1809#discussion_r428205570", "createdAt": "2020-05-20T18:02:05Z", "author": {"login": "cemozerr"}, "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/connection/ConnectionManager.java", "diffHunk": "@@ -171,4 +178,31 @@ private void createPersistentConnection(final PeerAddress peerAddress) {\n                   TimeUnit.MILLISECONDS);\n             });\n   }\n+\n+  public long addPeerPredicate(final Predicate<DiscoveryPeer> predicate) {\n+    return newPeerFilter.addPeerPredicate(predicate);\n+  }\n+\n+  public boolean removePeerPredicate(final long id) {\n+    return newPeerFilter.removePeerPredicate(id);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY2MjMxMg=="}, "originalCommit": {"oid": "ce00b27aae35da03fc98f6cced404152e834fb09"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3640, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}