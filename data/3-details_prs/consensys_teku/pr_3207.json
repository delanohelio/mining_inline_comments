{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMjQ4NjA5", "number": 3207, "title": "implement `/teku/v1/beacon/states/{state_id}` to download ssz states", "bodyText": "moved /teku/v1/admin/log_level in api documentation into a new 'Teku' category for custom teku endpoints.\n\n\ncleaned up the custom error page that used to be needed by old endpoints.\n\n\nThis is harder to provide good testing for as it's a binary encoded file. Manually tested with proto's tool to read SSZ states and pretty print.\nfixes #3165\nSigned-off-by: Paul Harris paul.harris@consensys.net\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-11-13T00:51:29Z", "url": "https://github.com/ConsenSys/teku/pull/3207", "merged": true, "mergeCommit": {"oid": "332f419c94f6f48ac08e1a1176420773f3431fcd"}, "closed": true, "closedAt": "2020-11-13T05:43:59Z", "author": {"login": "rolfyone"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdb8TRugH2gAyNTIwMjQ4NjA5OjU1YjE4NDVmM2M2NTEzM2Y5MDhiYWZmYzY5ZjEzYjE5NDZiMzAxNTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdcITUBgFqTUzMDEyMTc3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "55b1845f3c65133f908baffc69f13b1946b30153", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/55b1845f3c65133f908baffc69f13b1946b30153", "committedDate": "2020-11-13T00:48:33Z", "message": "implement `/teku/v1/beacon/states/{state_id}` to download ssz states\n\n - moved `/teku/v1/admin/log_level` in api documentation into a new 'Teku' category for custom teku endpoints.\n\n - cleaned up the custom error page that used to be needed by old endpoints.\n\nThis is harder to provide good testing for as it's a binary encoded file. Manually tested with proto's tool to read SSZ states and pretty print.\n\nfixes #3165\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89e2cd08b01a453ad17f23b5b0eac8ea78426680", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/89e2cd08b01a453ad17f23b5b0eac8ea78426680", "committedDate": "2020-11-13T00:51:56Z", "message": "Merge remote-tracking branch 'upstream/master' into 3165"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NjkzNTM1", "url": "https://github.com/ConsenSys/teku/pull/3207#pullrequestreview-529693535", "createdAt": "2020-11-13T04:01:48Z", "commit": {"oid": "89e2cd08b01a453ad17f23b5b0eac8ea78426680"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDowMTo0OFrOHyY6Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNDowMTo0OFrOHyY6Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU5ODkxNA==", "bodyText": "I'm slightly worried about using a user specified value in the header - and we definitely can't do it without escaping.  I'd suggest just using the state root encoded as hex.", "url": "https://github.com/ConsenSys/teku/pull/3207#discussion_r522598914", "createdAt": "2020-11-13T04:01:48Z", "author": {"login": "ajsutton"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/tekuv1/beacon/GetSszState.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.tekuv1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_STATE_ID;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_STATE_ID_DESCRIPTION;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_NOT_FOUND;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_TEKU;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_NOT_FOUND;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.io.ByteArrayInputStream;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetSszState implements Handler {\n+  public static final String ROUTE = \"/teku/v1/beacon/states/:state_id\";\n+  private final ChainDataProvider chainDataProvider;\n+  private final JsonProvider jsonProvider;\n+\n+  public GetSszState(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    this(dataProvider.getChainDataProvider(), jsonProvider);\n+  }\n+\n+  public GetSszState(final ChainDataProvider chainDataProvider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.chainDataProvider = chainDataProvider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get SSZ State\",\n+      tags = {TAG_TEKU},\n+      description = \"Download the state SSZ object for given state_id.\",\n+      pathParams = {@OpenApiParam(name = PARAM_STATE_ID, description = PARAM_STATE_ID_DESCRIPTION)},\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(type = \"application/octet-stream\")),\n+        @OpenApiResponse(status = RES_BAD_REQUEST),\n+        @OpenApiResponse(status = RES_NOT_FOUND),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+        @OpenApiResponse(status = RES_SERVICE_UNAVAILABLE, description = SERVICE_UNAVAILABLE)\n+      })\n+  @Override\n+  public void handle(@NotNull final Context ctx) throws Exception {\n+    final Map<String, String> pathParamMap = ctx.pathParamMap();\n+    ctx.header(Header.CACHE_CONTROL, CACHE_NONE);\n+\n+    SafeFuture<Optional<Bytes>> future =\n+        chainDataProvider.getBeaconStateSsz(pathParamMap.get(PARAM_STATE_ID));\n+    ctx.result(\n+        future.thenApplyChecked(\n+            result -> {\n+              if (result.isEmpty()) {\n+                ctx.status(SC_NOT_FOUND);\n+                ctx.result(\n+                    BadRequest.serialize(\n+                        jsonProvider,\n+                        SC_NOT_FOUND,\n+                        \"State not found: \" + pathParamMap.get(PARAM_STATE_ID)));\n+                return null;\n+              }\n+              ctx.header(\n+                  \"Content-Disposition\",\n+                  \"filename=\\\"\" + pathParamMap.get(PARAM_STATE_ID) + \".ssz\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e2cd08b01a453ad17f23b5b0eac8ea78426680"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "241a50e12b205cbd3cfec7724e21185a5ace4d4d", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/241a50e12b205cbd3cfec7724e21185a5ace4d4d", "committedDate": "2020-11-13T04:48:56Z", "message": "Merge remote-tracking branch 'upstream/master' into 3165"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f4277f80d390557109415acb35b7a3108e0fe74", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/4f4277f80d390557109415acb35b7a3108e0fe74", "committedDate": "2020-11-13T05:15:51Z", "message": "review feedback.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54a5e73c45b8e0eb19ef22f825de61bd36be84f0", "author": {"user": {"login": "rolfyone", "name": "Paul Harris"}}, "url": "https://github.com/ConsenSys/teku/commit/54a5e73c45b8e0eb19ef22f825de61bd36be84f0", "committedDate": "2020-11-13T05:29:18Z", "message": "Merge branch 'master' into 3165"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMTIxNzc1", "url": "https://github.com/ConsenSys/teku/pull/3207#pullrequestreview-530121775", "createdAt": "2020-11-13T14:47:26Z", "commit": {"oid": "54a5e73c45b8e0eb19ef22f825de61bd36be84f0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDo0NzoyN1rOHyxKtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDo0NzoyN1rOHyxKtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk5NjQwNw==", "bodyText": "Looks like this doesn't include the option to look up by blockRoot, which we need if we want to use a weak subjectivity checkpoint (<blockRoot>:<epoch>) to look up the state.", "url": "https://github.com/ConsenSys/teku/pull/3207#discussion_r522996407", "createdAt": "2020-11-13T14:47:27Z", "author": {"login": "mbaxter"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/tekuv1/beacon/GetSszState.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.tekuv1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_STATE_ID;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_STATE_ID_DESCRIPTION;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_NOT_FOUND;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_TEKU;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_NOT_FOUND;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.response.StateSszResponse;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetSszState implements Handler {\n+  public static final String ROUTE = \"/teku/v1/beacon/states/:state_id\";\n+  private final ChainDataProvider chainDataProvider;\n+  private final JsonProvider jsonProvider;\n+\n+  public GetSszState(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    this(dataProvider.getChainDataProvider(), jsonProvider);\n+  }\n+\n+  public GetSszState(final ChainDataProvider chainDataProvider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.chainDataProvider = chainDataProvider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get SSZ State\",\n+      tags = {TAG_TEKU},\n+      description = \"Download the state SSZ object for given state_id.\",\n+      pathParams = {@OpenApiParam(name = PARAM_STATE_ID, description = PARAM_STATE_ID_DESCRIPTION)},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a5e73c45b8e0eb19ef22f825de61bd36be84f0"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4442, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}