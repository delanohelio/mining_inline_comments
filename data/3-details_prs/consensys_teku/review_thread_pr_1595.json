{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzODcwNjAw", "number": 1595, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoyODo0M1rODyLABA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo0ODo1N1rODyLdgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTM1NjIwOnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoyODo0M1rOGGEIYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0Mzo1NFrOGGG1eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMjMyMg==", "bodyText": "Do we actually need this method?", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409012322", "createdAt": "2020-04-15T17:28:43Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -13,94 +13,99 @@\n \n package tech.pegasys.artemis.ssz.SSZTypes;\n \n-import static java.util.Objects.isNull;\n+import static com.google.common.base.Preconditions.checkElementIndex;\n \n-import java.util.Arrays;\n+import com.google.common.base.Objects;\n+import java.util.BitSet;\n import java.util.stream.IntStream;\n import org.apache.tuweni.bytes.Bytes;\n \n public class Bitvector {\n \n-  private int size;\n-  private byte[] byteArray;\n+  private final BitSet data;\n+  private final int size;\n \n   public Bitvector(int size) {\n-    this.byteArray = new byte[size];\n+    this.data = new BitSet(size);\n     this.size = size;\n   }\n \n-  public Bitvector(byte[] byteArray, int size) {\n-    this.byteArray = byteArray;\n+  public Bitvector(BitSet bitSet, int size) {\n+    this.data = bitSet;\n     this.size = size;\n   }\n \n+  public Bitvector(Bitvector bitvector) {\n+    this.data = (BitSet) bitvector.data.clone();\n+    this.size = bitvector.size;\n+  }\n+\n   public void setBit(int i) {\n-    this.byteArray[i] = 1;\n+    checkElementIndex(i, size);\n+    data.set(i);\n   }\n \n-  public int getBit(int i) {\n-    return byteArray[i];\n+  public boolean getBit(int i) {\n+    checkElementIndex(i, size);\n+    return data.get(i);\n   }\n \n   public int getSize() {\n     return size;\n   }\n \n-  public byte[] getByteArray() {\n-    return byteArray;\n-  }\n-\n   @SuppressWarnings(\"NarrowingCompoundAssignment\")\n   public Bytes serialize() {\n     byte[] array = new byte[(size + 7) / 8];\n-    IntStream.range(0, size).forEach(i -> array[i / 8] |= (((int) this.byteArray[i]) << (i % 8)));\n+    IntStream.range(0, size).forEach(i -> array[i / 8] |= ((data.get(i) ? 1 : 0) << (i % 8)));\n     return Bytes.wrap(array);\n   }\n \n   public static Bitvector fromBytes(Bytes bytes, int size) {\n-    byte[] byteArray = new byte[size];\n+    BitSet bitset = new BitSet(size);\n \n     for (int i = size - 1; i >= 0; i--) {\n       if (((bytes.get(i / 8) >>> (i % 8)) & 0x01) == 1) {\n-        byteArray[i] = 1;\n+        bitset.set(i);\n       }\n     }\n \n-    return new Bitvector(byteArray, size);\n+    return new Bitvector(bitset, size);\n   }\n \n   public Bitvector rightShift(int i) {\n     int length = this.getSize();\n-    Bitvector newBitvector = new Bitvector(new byte[length], length);\n+    Bitvector newBitvector = new Bitvector(getSize());\n     for (int j = 0; j < length - i; j++) {\n-      if (this.getBit(j) == 1) {\n+      if (this.getBit(j)) {\n         newBitvector.setBit(j + i);\n       }\n     }\n     return newBitvector;\n   }\n \n+  public byte[] getByteArray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1NjYzMw==", "bodyText": "not really. removed.", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409056633", "createdAt": "2020-04-15T18:43:54Z", "author": {"login": "cemozerr"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -13,94 +13,99 @@\n \n package tech.pegasys.artemis.ssz.SSZTypes;\n \n-import static java.util.Objects.isNull;\n+import static com.google.common.base.Preconditions.checkElementIndex;\n \n-import java.util.Arrays;\n+import com.google.common.base.Objects;\n+import java.util.BitSet;\n import java.util.stream.IntStream;\n import org.apache.tuweni.bytes.Bytes;\n \n public class Bitvector {\n \n-  private int size;\n-  private byte[] byteArray;\n+  private final BitSet data;\n+  private final int size;\n \n   public Bitvector(int size) {\n-    this.byteArray = new byte[size];\n+    this.data = new BitSet(size);\n     this.size = size;\n   }\n \n-  public Bitvector(byte[] byteArray, int size) {\n-    this.byteArray = byteArray;\n+  public Bitvector(BitSet bitSet, int size) {\n+    this.data = bitSet;\n     this.size = size;\n   }\n \n+  public Bitvector(Bitvector bitvector) {\n+    this.data = (BitSet) bitvector.data.clone();\n+    this.size = bitvector.size;\n+  }\n+\n   public void setBit(int i) {\n-    this.byteArray[i] = 1;\n+    checkElementIndex(i, size);\n+    data.set(i);\n   }\n \n-  public int getBit(int i) {\n-    return byteArray[i];\n+  public boolean getBit(int i) {\n+    checkElementIndex(i, size);\n+    return data.get(i);\n   }\n \n   public int getSize() {\n     return size;\n   }\n \n-  public byte[] getByteArray() {\n-    return byteArray;\n-  }\n-\n   @SuppressWarnings(\"NarrowingCompoundAssignment\")\n   public Bytes serialize() {\n     byte[] array = new byte[(size + 7) / 8];\n-    IntStream.range(0, size).forEach(i -> array[i / 8] |= (((int) this.byteArray[i]) << (i % 8)));\n+    IntStream.range(0, size).forEach(i -> array[i / 8] |= ((data.get(i) ? 1 : 0) << (i % 8)));\n     return Bytes.wrap(array);\n   }\n \n   public static Bitvector fromBytes(Bytes bytes, int size) {\n-    byte[] byteArray = new byte[size];\n+    BitSet bitset = new BitSet(size);\n \n     for (int i = size - 1; i >= 0; i--) {\n       if (((bytes.get(i / 8) >>> (i % 8)) & 0x01) == 1) {\n-        byteArray[i] = 1;\n+        bitset.set(i);\n       }\n     }\n \n-    return new Bitvector(byteArray, size);\n+    return new Bitvector(bitset, size);\n   }\n \n   public Bitvector rightShift(int i) {\n     int length = this.getSize();\n-    Bitvector newBitvector = new Bitvector(new byte[length], length);\n+    Bitvector newBitvector = new Bitvector(getSize());\n     for (int j = 0; j < length - i; j++) {\n-      if (this.getBit(j) == 1) {\n+      if (this.getBit(j)) {\n         newBitvector.setBit(j + i);\n       }\n     }\n     return newBitvector;\n   }\n \n+  public byte[] getByteArray() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMjMyMg=="}, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTM1OTAxOnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzoyOToyNlrOGGEKGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0NDowMFrOGGG1vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMjc2MQ==", "bodyText": "Would be nice to add toString() as well", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409012761", "createdAt": "2020-04-15T17:29:26Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -13,94 +13,99 @@\n \n package tech.pegasys.artemis.ssz.SSZTypes;\n \n-import static java.util.Objects.isNull;\n+import static com.google.common.base.Preconditions.checkElementIndex;\n \n-import java.util.Arrays;\n+import com.google.common.base.Objects;\n+import java.util.BitSet;\n import java.util.stream.IntStream;\n import org.apache.tuweni.bytes.Bytes;\n \n public class Bitvector {\n \n-  private int size;\n-  private byte[] byteArray;\n+  private final BitSet data;\n+  private final int size;\n \n   public Bitvector(int size) {\n-    this.byteArray = new byte[size];\n+    this.data = new BitSet(size);\n     this.size = size;\n   }\n \n-  public Bitvector(byte[] byteArray, int size) {\n-    this.byteArray = byteArray;\n+  public Bitvector(BitSet bitSet, int size) {\n+    this.data = bitSet;\n     this.size = size;\n   }\n \n+  public Bitvector(Bitvector bitvector) {\n+    this.data = (BitSet) bitvector.data.clone();\n+    this.size = bitvector.size;\n+  }\n+\n   public void setBit(int i) {\n-    this.byteArray[i] = 1;\n+    checkElementIndex(i, size);\n+    data.set(i);\n   }\n \n-  public int getBit(int i) {\n-    return byteArray[i];\n+  public boolean getBit(int i) {\n+    checkElementIndex(i, size);\n+    return data.get(i);\n   }\n \n   public int getSize() {\n     return size;\n   }\n \n-  public byte[] getByteArray() {\n-    return byteArray;\n-  }\n-\n   @SuppressWarnings(\"NarrowingCompoundAssignment\")\n   public Bytes serialize() {\n     byte[] array = new byte[(size + 7) / 8];\n-    IntStream.range(0, size).forEach(i -> array[i / 8] |= (((int) this.byteArray[i]) << (i % 8)));\n+    IntStream.range(0, size).forEach(i -> array[i / 8] |= ((data.get(i) ? 1 : 0) << (i % 8)));\n     return Bytes.wrap(array);\n   }\n \n   public static Bitvector fromBytes(Bytes bytes, int size) {\n-    byte[] byteArray = new byte[size];\n+    BitSet bitset = new BitSet(size);\n \n     for (int i = size - 1; i >= 0; i--) {\n       if (((bytes.get(i / 8) >>> (i % 8)) & 0x01) == 1) {\n-        byteArray[i] = 1;\n+        bitset.set(i);\n       }\n     }\n \n-    return new Bitvector(byteArray, size);\n+    return new Bitvector(bitset, size);\n   }\n \n   public Bitvector rightShift(int i) {\n     int length = this.getSize();\n-    Bitvector newBitvector = new Bitvector(new byte[length], length);\n+    Bitvector newBitvector = new Bitvector(getSize());\n     for (int j = 0; j < length - i; j++) {\n-      if (this.getBit(j) == 1) {\n+      if (this.getBit(j)) {\n         newBitvector.setBit(j + i);\n       }\n     }\n     return newBitvector;\n   }\n \n+  public byte[] getByteArray() {\n+    byte[] array = new byte[size];\n+    for (int i = 0; i < size; i++) {\n+      array[i] = (byte) (data.get(i) ? 1 : 0);\n+    }\n+    return array;\n+  }\n+\n   public Bitvector copy() {\n-    return new Bitvector(this.getByteArray(), this.getSize());\n+    return new Bitvector(this);\n   }\n \n   @Override\n-  public int hashCode() {\n-    return Arrays.hashCode(byteArray);\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (!(o instanceof Bitvector)) return false;\n+    Bitvector bitvector = (Bitvector) o;\n+    return getSize() == bitvector.getSize() && Objects.equal(data, bitvector.data);\n   }\n \n   @Override\n-  public boolean equals(Object obj) {\n-    if (isNull(obj)) {\n-      return false;\n-    }\n-    if (this == obj) {\n-      return true;\n-    }\n-    if (!(obj instanceof Bitvector)) {\n-      return false;\n-    }\n-    Bitvector other = (Bitvector) obj;\n-    return Arrays.equals(this.getByteArray(), other.getByteArray());\n+  public int hashCode() {\n+    return Objects.hashCode(data, getSize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1NjcwMg==", "bodyText": "added.", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409056702", "createdAt": "2020-04-15T18:44:00Z", "author": {"login": "cemozerr"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -13,94 +13,99 @@\n \n package tech.pegasys.artemis.ssz.SSZTypes;\n \n-import static java.util.Objects.isNull;\n+import static com.google.common.base.Preconditions.checkElementIndex;\n \n-import java.util.Arrays;\n+import com.google.common.base.Objects;\n+import java.util.BitSet;\n import java.util.stream.IntStream;\n import org.apache.tuweni.bytes.Bytes;\n \n public class Bitvector {\n \n-  private int size;\n-  private byte[] byteArray;\n+  private final BitSet data;\n+  private final int size;\n \n   public Bitvector(int size) {\n-    this.byteArray = new byte[size];\n+    this.data = new BitSet(size);\n     this.size = size;\n   }\n \n-  public Bitvector(byte[] byteArray, int size) {\n-    this.byteArray = byteArray;\n+  public Bitvector(BitSet bitSet, int size) {\n+    this.data = bitSet;\n     this.size = size;\n   }\n \n+  public Bitvector(Bitvector bitvector) {\n+    this.data = (BitSet) bitvector.data.clone();\n+    this.size = bitvector.size;\n+  }\n+\n   public void setBit(int i) {\n-    this.byteArray[i] = 1;\n+    checkElementIndex(i, size);\n+    data.set(i);\n   }\n \n-  public int getBit(int i) {\n-    return byteArray[i];\n+  public boolean getBit(int i) {\n+    checkElementIndex(i, size);\n+    return data.get(i);\n   }\n \n   public int getSize() {\n     return size;\n   }\n \n-  public byte[] getByteArray() {\n-    return byteArray;\n-  }\n-\n   @SuppressWarnings(\"NarrowingCompoundAssignment\")\n   public Bytes serialize() {\n     byte[] array = new byte[(size + 7) / 8];\n-    IntStream.range(0, size).forEach(i -> array[i / 8] |= (((int) this.byteArray[i]) << (i % 8)));\n+    IntStream.range(0, size).forEach(i -> array[i / 8] |= ((data.get(i) ? 1 : 0) << (i % 8)));\n     return Bytes.wrap(array);\n   }\n \n   public static Bitvector fromBytes(Bytes bytes, int size) {\n-    byte[] byteArray = new byte[size];\n+    BitSet bitset = new BitSet(size);\n \n     for (int i = size - 1; i >= 0; i--) {\n       if (((bytes.get(i / 8) >>> (i % 8)) & 0x01) == 1) {\n-        byteArray[i] = 1;\n+        bitset.set(i);\n       }\n     }\n \n-    return new Bitvector(byteArray, size);\n+    return new Bitvector(bitset, size);\n   }\n \n   public Bitvector rightShift(int i) {\n     int length = this.getSize();\n-    Bitvector newBitvector = new Bitvector(new byte[length], length);\n+    Bitvector newBitvector = new Bitvector(getSize());\n     for (int j = 0; j < length - i; j++) {\n-      if (this.getBit(j) == 1) {\n+      if (this.getBit(j)) {\n         newBitvector.setBit(j + i);\n       }\n     }\n     return newBitvector;\n   }\n \n+  public byte[] getByteArray() {\n+    byte[] array = new byte[size];\n+    for (int i = 0; i < size; i++) {\n+      array[i] = (byte) (data.get(i) ? 1 : 0);\n+    }\n+    return array;\n+  }\n+\n   public Bitvector copy() {\n-    return new Bitvector(this.getByteArray(), this.getSize());\n+    return new Bitvector(this);\n   }\n \n   @Override\n-  public int hashCode() {\n-    return Arrays.hashCode(byteArray);\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (!(o instanceof Bitvector)) return false;\n+    Bitvector bitvector = (Bitvector) o;\n+    return getSize() == bitvector.getSize() && Objects.equal(data, bitvector.data);\n   }\n \n   @Override\n-  public boolean equals(Object obj) {\n-    if (isNull(obj)) {\n-      return false;\n-    }\n-    if (this == obj) {\n-      return true;\n-    }\n-    if (!(obj instanceof Bitvector)) {\n-      return false;\n-    }\n-    Bitvector other = (Bitvector) obj;\n-    return Arrays.equals(this.getByteArray(), other.getByteArray());\n+  public int hashCode() {\n+    return Objects.hashCode(data, getSize());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxMjc2MQ=="}, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTM5MjIyOnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/testFixtures/java/tech/pegasys/artemis/datastructures/util/DataStructureUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzozODoxM1rOGGEezg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0MTo0OVrOGGGw3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxODA2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                BitSet byteArray = new BitSet(n);\n          \n          \n            \n                BitSet bits = new BitSet(n);", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409018062", "createdAt": "2020-04-15T17:38:13Z", "author": {"login": "mbaxter"}, "path": "ethereum/datastructures/src/testFixtures/java/tech/pegasys/artemis/datastructures/util/DataStructureUtil.java", "diffHunk": "@@ -143,11 +144,13 @@ public Bitlist randomBitlist(int n) {\n   }\n \n   public Bitvector randomBitvector(int n) {\n-    byte[] byteArray = new byte[n];\n+    BitSet byteArray = new BitSet(n);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1NTQ1Mg==", "bodyText": "done.", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409055452", "createdAt": "2020-04-15T18:41:49Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/testFixtures/java/tech/pegasys/artemis/datastructures/util/DataStructureUtil.java", "diffHunk": "@@ -143,11 +144,13 @@ public Bitlist randomBitlist(int n) {\n   }\n \n   public Bitvector randomBitvector(int n) {\n-    byte[] byteArray = new byte[n];\n+    BitSet byteArray = new BitSet(n);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxODA2Mg=="}, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTQxNDA3OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo0NDowMVrOGGEsWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0Mjo0OVrOGGGzHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMTUyOQ==", "bodyText": "Do we need this method?  I'd try to cut it if we can.", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409021529", "createdAt": "2020-04-15T17:44:01Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -13,94 +13,99 @@\n \n package tech.pegasys.artemis.ssz.SSZTypes;\n \n-import static java.util.Objects.isNull;\n+import static com.google.common.base.Preconditions.checkElementIndex;\n \n-import java.util.Arrays;\n+import com.google.common.base.Objects;\n+import java.util.BitSet;\n import java.util.stream.IntStream;\n import org.apache.tuweni.bytes.Bytes;\n \n public class Bitvector {\n \n-  private int size;\n-  private byte[] byteArray;\n+  private final BitSet data;\n+  private final int size;\n \n   public Bitvector(int size) {\n-    this.byteArray = new byte[size];\n+    this.data = new BitSet(size);\n     this.size = size;\n   }\n \n-  public Bitvector(byte[] byteArray, int size) {\n-    this.byteArray = byteArray;\n+  public Bitvector(BitSet bitSet, int size) {\n+    this.data = bitSet;\n     this.size = size;\n   }\n \n+  public Bitvector(Bitvector bitvector) {\n+    this.data = (BitSet) bitvector.data.clone();\n+    this.size = bitvector.size;\n+  }\n+\n   public void setBit(int i) {\n-    this.byteArray[i] = 1;\n+    checkElementIndex(i, size);\n+    data.set(i);\n   }\n \n-  public int getBit(int i) {\n-    return byteArray[i];\n+  public boolean getBit(int i) {\n+    checkElementIndex(i, size);\n+    return data.get(i);\n   }\n \n   public int getSize() {\n     return size;\n   }\n \n-  public byte[] getByteArray() {\n-    return byteArray;\n-  }\n-\n   @SuppressWarnings(\"NarrowingCompoundAssignment\")\n   public Bytes serialize() {\n     byte[] array = new byte[(size + 7) / 8];\n-    IntStream.range(0, size).forEach(i -> array[i / 8] |= (((int) this.byteArray[i]) << (i % 8)));\n+    IntStream.range(0, size).forEach(i -> array[i / 8] |= ((data.get(i) ? 1 : 0) << (i % 8)));\n     return Bytes.wrap(array);\n   }\n \n   public static Bitvector fromBytes(Bytes bytes, int size) {\n-    byte[] byteArray = new byte[size];\n+    BitSet bitset = new BitSet(size);\n \n     for (int i = size - 1; i >= 0; i--) {\n       if (((bytes.get(i / 8) >>> (i % 8)) & 0x01) == 1) {\n-        byteArray[i] = 1;\n+        bitset.set(i);\n       }\n     }\n \n-    return new Bitvector(byteArray, size);\n+    return new Bitvector(bitset, size);\n   }\n \n   public Bitvector rightShift(int i) {\n     int length = this.getSize();\n-    Bitvector newBitvector = new Bitvector(new byte[length], length);\n+    Bitvector newBitvector = new Bitvector(getSize());\n     for (int j = 0; j < length - i; j++) {\n-      if (this.getBit(j) == 1) {\n+      if (this.getBit(j)) {\n         newBitvector.setBit(j + i);\n       }\n     }\n     return newBitvector;\n   }\n \n+  public byte[] getByteArray() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1NjAzMA==", "bodyText": "removed.", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409056030", "createdAt": "2020-04-15T18:42:49Z", "author": {"login": "cemozerr"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -13,94 +13,99 @@\n \n package tech.pegasys.artemis.ssz.SSZTypes;\n \n-import static java.util.Objects.isNull;\n+import static com.google.common.base.Preconditions.checkElementIndex;\n \n-import java.util.Arrays;\n+import com.google.common.base.Objects;\n+import java.util.BitSet;\n import java.util.stream.IntStream;\n import org.apache.tuweni.bytes.Bytes;\n \n public class Bitvector {\n \n-  private int size;\n-  private byte[] byteArray;\n+  private final BitSet data;\n+  private final int size;\n \n   public Bitvector(int size) {\n-    this.byteArray = new byte[size];\n+    this.data = new BitSet(size);\n     this.size = size;\n   }\n \n-  public Bitvector(byte[] byteArray, int size) {\n-    this.byteArray = byteArray;\n+  public Bitvector(BitSet bitSet, int size) {\n+    this.data = bitSet;\n     this.size = size;\n   }\n \n+  public Bitvector(Bitvector bitvector) {\n+    this.data = (BitSet) bitvector.data.clone();\n+    this.size = bitvector.size;\n+  }\n+\n   public void setBit(int i) {\n-    this.byteArray[i] = 1;\n+    checkElementIndex(i, size);\n+    data.set(i);\n   }\n \n-  public int getBit(int i) {\n-    return byteArray[i];\n+  public boolean getBit(int i) {\n+    checkElementIndex(i, size);\n+    return data.get(i);\n   }\n \n   public int getSize() {\n     return size;\n   }\n \n-  public byte[] getByteArray() {\n-    return byteArray;\n-  }\n-\n   @SuppressWarnings(\"NarrowingCompoundAssignment\")\n   public Bytes serialize() {\n     byte[] array = new byte[(size + 7) / 8];\n-    IntStream.range(0, size).forEach(i -> array[i / 8] |= (((int) this.byteArray[i]) << (i % 8)));\n+    IntStream.range(0, size).forEach(i -> array[i / 8] |= ((data.get(i) ? 1 : 0) << (i % 8)));\n     return Bytes.wrap(array);\n   }\n \n   public static Bitvector fromBytes(Bytes bytes, int size) {\n-    byte[] byteArray = new byte[size];\n+    BitSet bitset = new BitSet(size);\n \n     for (int i = size - 1; i >= 0; i--) {\n       if (((bytes.get(i / 8) >>> (i % 8)) & 0x01) == 1) {\n-        byteArray[i] = 1;\n+        bitset.set(i);\n       }\n     }\n \n-    return new Bitvector(byteArray, size);\n+    return new Bitvector(bitset, size);\n   }\n \n   public Bitvector rightShift(int i) {\n     int length = this.getSize();\n-    Bitvector newBitvector = new Bitvector(new byte[length], length);\n+    Bitvector newBitvector = new Bitvector(getSize());\n     for (int j = 0; j < length - i; j++) {\n-      if (this.getBit(j) == 1) {\n+      if (this.getBit(j)) {\n         newBitvector.setBit(j + i);\n       }\n     }\n     return newBitvector;\n   }\n \n+  public byte[] getByteArray() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMTUyOQ=="}, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTQyMTEzOnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo0NTo1OVrOGGEw4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0Mzo0OFrOGGG1Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMjY4OA==", "bodyText": "nice :D", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409022688", "createdAt": "2020-04-15T17:45:59Z", "author": {"login": "mbaxter"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -13,94 +13,99 @@\n \n package tech.pegasys.artemis.ssz.SSZTypes;\n \n-import static java.util.Objects.isNull;\n+import static com.google.common.base.Preconditions.checkElementIndex;\n \n-import java.util.Arrays;\n+import com.google.common.base.Objects;\n+import java.util.BitSet;\n import java.util.stream.IntStream;\n import org.apache.tuweni.bytes.Bytes;\n \n public class Bitvector {\n \n-  private int size;\n-  private byte[] byteArray;\n+  private final BitSet data;\n+  private final int size;\n \n   public Bitvector(int size) {\n-    this.byteArray = new byte[size];\n+    this.data = new BitSet(size);\n     this.size = size;\n   }\n \n-  public Bitvector(byte[] byteArray, int size) {\n-    this.byteArray = byteArray;\n+  public Bitvector(BitSet bitSet, int size) {\n+    this.data = bitSet;\n     this.size = size;\n   }\n \n+  public Bitvector(Bitvector bitvector) {\n+    this.data = (BitSet) bitvector.data.clone();\n+    this.size = bitvector.size;\n+  }\n+\n   public void setBit(int i) {\n-    this.byteArray[i] = 1;\n+    checkElementIndex(i, size);\n+    data.set(i);\n   }\n \n-  public int getBit(int i) {\n-    return byteArray[i];\n+  public boolean getBit(int i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1NjU3NQ==", "bodyText": "thank you!", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409056575", "createdAt": "2020-04-15T18:43:48Z", "author": {"login": "cemozerr"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -13,94 +13,99 @@\n \n package tech.pegasys.artemis.ssz.SSZTypes;\n \n-import static java.util.Objects.isNull;\n+import static com.google.common.base.Preconditions.checkElementIndex;\n \n-import java.util.Arrays;\n+import com.google.common.base.Objects;\n+import java.util.BitSet;\n import java.util.stream.IntStream;\n import org.apache.tuweni.bytes.Bytes;\n \n public class Bitvector {\n \n-  private int size;\n-  private byte[] byteArray;\n+  private final BitSet data;\n+  private final int size;\n \n   public Bitvector(int size) {\n-    this.byteArray = new byte[size];\n+    this.data = new BitSet(size);\n     this.size = size;\n   }\n \n-  public Bitvector(byte[] byteArray, int size) {\n-    this.byteArray = byteArray;\n+  public Bitvector(BitSet bitSet, int size) {\n+    this.data = bitSet;\n     this.size = size;\n   }\n \n+  public Bitvector(Bitvector bitvector) {\n+    this.data = (BitSet) bitvector.data.clone();\n+    this.size = bitvector.size;\n+  }\n+\n   public void setBit(int i) {\n-    this.byteArray[i] = 1;\n+    checkElementIndex(i, size);\n+    data.set(i);\n   }\n \n-  public int getBit(int i) {\n-    return byteArray[i];\n+  public boolean getBit(int i) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyMjY4OA=="}, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTQzMTY5OnYy", "diffSide": "RIGHT", "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNzo0ODo1N1rOGGE3rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMjozMDo0N1rOGGN30w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNDQzMQ==", "bodyText": "Would be perfect to make this class immutable to avoid potential modification side effects like this:\nhttps://github.com/PegaSysEng/teku/blob/c6e8e56b7a0edc078a88d1b40587262d22bd4c0a/ethereum/core/src/main/java/tech/pegasys/artemis/core/EpochProcessorUtil.java#L209-L221\nHere a Bitvector copy is made just because of .rightShift(1). Else it could have erroneous side effect .\nThat also relates to Bitlist but don't think this fits this PR", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409024431", "createdAt": "2020-04-15T17:48:57Z", "author": {"login": "Nashatyrev"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -13,94 +13,99 @@\n \n package tech.pegasys.artemis.ssz.SSZTypes;\n \n-import static java.util.Objects.isNull;\n+import static com.google.common.base.Preconditions.checkElementIndex;\n \n-import java.util.Arrays;\n+import com.google.common.base.Objects;\n+import java.util.BitSet;\n import java.util.stream.IntStream;\n import org.apache.tuweni.bytes.Bytes;\n \n public class Bitvector {\n \n-  private int size;\n-  private byte[] byteArray;\n+  private final BitSet data;\n+  private final int size;\n \n   public Bitvector(int size) {\n-    this.byteArray = new byte[size];\n+    this.data = new BitSet(size);\n     this.size = size;\n   }\n \n-  public Bitvector(byte[] byteArray, int size) {\n-    this.byteArray = byteArray;\n+  public Bitvector(BitSet bitSet, int size) {\n+    this.data = bitSet;\n     this.size = size;\n   }\n \n+  public Bitvector(Bitvector bitvector) {\n+    this.data = (BitSet) bitvector.data.clone();\n+    this.size = bitvector.size;\n+  }\n+\n   public void setBit(int i) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1ODM2NA==", "bodyText": "Yeah makes total sense. I've made a JIRA ticket for this issue. https://pegasys1.atlassian.net/browse/BC-356", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409058364", "createdAt": "2020-04-15T18:46:54Z", "author": {"login": "cemozerr"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -13,94 +13,99 @@\n \n package tech.pegasys.artemis.ssz.SSZTypes;\n \n-import static java.util.Objects.isNull;\n+import static com.google.common.base.Preconditions.checkElementIndex;\n \n-import java.util.Arrays;\n+import com.google.common.base.Objects;\n+import java.util.BitSet;\n import java.util.stream.IntStream;\n import org.apache.tuweni.bytes.Bytes;\n \n public class Bitvector {\n \n-  private int size;\n-  private byte[] byteArray;\n+  private final BitSet data;\n+  private final int size;\n \n   public Bitvector(int size) {\n-    this.byteArray = new byte[size];\n+    this.data = new BitSet(size);\n     this.size = size;\n   }\n \n-  public Bitvector(byte[] byteArray, int size) {\n-    this.byteArray = byteArray;\n+  public Bitvector(BitSet bitSet, int size) {\n+    this.data = bitSet;\n     this.size = size;\n   }\n \n+  public Bitvector(Bitvector bitvector) {\n+    this.data = (BitSet) bitvector.data.clone();\n+    this.size = bitvector.size;\n+  }\n+\n   public void setBit(int i) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNDQzMQ=="}, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3MTkyMw==", "bodyText": "I tried making Bitlist immutable when I converted it over but since the underlying BitSet is mutable and all of it's operation mutate the set it didn't really work out very well and I rolled it back.", "url": "https://github.com/ConsenSys/teku/pull/1595#discussion_r409171923", "createdAt": "2020-04-15T22:30:47Z", "author": {"login": "ajsutton"}, "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -13,94 +13,99 @@\n \n package tech.pegasys.artemis.ssz.SSZTypes;\n \n-import static java.util.Objects.isNull;\n+import static com.google.common.base.Preconditions.checkElementIndex;\n \n-import java.util.Arrays;\n+import com.google.common.base.Objects;\n+import java.util.BitSet;\n import java.util.stream.IntStream;\n import org.apache.tuweni.bytes.Bytes;\n \n public class Bitvector {\n \n-  private int size;\n-  private byte[] byteArray;\n+  private final BitSet data;\n+  private final int size;\n \n   public Bitvector(int size) {\n-    this.byteArray = new byte[size];\n+    this.data = new BitSet(size);\n     this.size = size;\n   }\n \n-  public Bitvector(byte[] byteArray, int size) {\n-    this.byteArray = byteArray;\n+  public Bitvector(BitSet bitSet, int size) {\n+    this.data = bitSet;\n     this.size = size;\n   }\n \n+  public Bitvector(Bitvector bitvector) {\n+    this.data = (BitSet) bitvector.data.clone();\n+    this.size = bitvector.size;\n+  }\n+\n   public void setBit(int i) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAyNDQzMQ=="}, "originalCommit": {"oid": "6f3b96f3ef9dffa14c461fca0e71d94329e21b35"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1620, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}