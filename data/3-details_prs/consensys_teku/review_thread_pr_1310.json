{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NzgzNTQw", "number": 1310, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMzoxNzo0NFrODmIYfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMDowNToyN1rODmIlyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzA5ODIzOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/CacheControlUtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMzoxNzo0NFrOFzYHHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMzoxNzo0NFrOFzYHHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNjczMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void getMaxAgeForSignedBlock_shouldSetZeroIfNotFinalized() {\n          \n          \n            \n              void getMaxAgeForSignedBlock_shouldReturnZeroIfNotFinalized() {", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389416732", "createdAt": "2020-03-08T23:17:44Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/CacheControlUtilsTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi;\n+\n+import static com.google.common.primitives.UnsignedLong.ZERO;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_FINALIZED;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.SignedBeaconBlock;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class CacheControlUtilsTest {\n+\n+  SignedBeaconBlock signedBlock =\n+      new SignedBeaconBlock(DataStructureUtil.randomSignedBeaconBlock(1, 1));\n+  @Mock private ChainDataProvider provider;\n+\n+  @Test\n+  void getMaxAgeForSignedBlock_shouldSetZeroIfNotFinalized() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6c39393ace8d90ed65bc5a47cca890d051b0c0"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzA5ODUzOnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/CacheControlUtilsTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMzoxNzo1OFrOFzYHPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMzoyNzoxOVrOFzYLyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNjc2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void getMaxAgeForSignedBlock_shouldSetZeroIfFinalized() {\n          \n          \n            \n              void getMaxAgeForSignedBlock_shouldReturnZeroIfFinalized() {", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389416764", "createdAt": "2020-03-08T23:17:58Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/CacheControlUtilsTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi;\n+\n+import static com.google.common.primitives.UnsignedLong.ZERO;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_FINALIZED;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.SignedBeaconBlock;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class CacheControlUtilsTest {\n+\n+  SignedBeaconBlock signedBlock =\n+      new SignedBeaconBlock(DataStructureUtil.randomSignedBeaconBlock(1, 1));\n+  @Mock private ChainDataProvider provider;\n+\n+  @Test\n+  void getMaxAgeForSignedBlock_shouldSetZeroIfNotFinalized() {\n+    when(provider.isFinalized(signedBlock)).thenReturn(false);\n+    String cacheControl = CacheControlUtils.getMaxAgeForSignedBlock(provider, signedBlock);\n+    assertThat(cacheControl).isEqualTo(CACHE_NONE);\n+  }\n+\n+  @Test\n+  void getMaxAgeForSignedBlock_shouldSetZeroIfFinalized() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6c39393ace8d90ed65bc5a47cca890d051b0c0"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNjg0OA==", "bodyText": "hang on they aren't both zero are they?", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389416848", "createdAt": "2020-03-08T23:18:34Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/CacheControlUtilsTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi;\n+\n+import static com.google.common.primitives.UnsignedLong.ZERO;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_FINALIZED;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.SignedBeaconBlock;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class CacheControlUtilsTest {\n+\n+  SignedBeaconBlock signedBlock =\n+      new SignedBeaconBlock(DataStructureUtil.randomSignedBeaconBlock(1, 1));\n+  @Mock private ChainDataProvider provider;\n+\n+  @Test\n+  void getMaxAgeForSignedBlock_shouldSetZeroIfNotFinalized() {\n+    when(provider.isFinalized(signedBlock)).thenReturn(false);\n+    String cacheControl = CacheControlUtils.getMaxAgeForSignedBlock(provider, signedBlock);\n+    assertThat(cacheControl).isEqualTo(CACHE_NONE);\n+  }\n+\n+  @Test\n+  void getMaxAgeForSignedBlock_shouldSetZeroIfFinalized() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNjc2NA=="}, "originalCommit": {"oid": "6c6c39393ace8d90ed65bc5a47cca890d051b0c0"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNzkyOQ==", "bodyText": "ok, bad naming of the test.\nIf the object is not finalized, i want to set max-age=zero in the cache header, otherwise setting to the cache-finalized string (cache timeout = 1 year)\nHopefully the new names make more sense..", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389417929", "createdAt": "2020-03-08T23:27:19Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/CacheControlUtilsTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi;\n+\n+import static com.google.common.primitives.UnsignedLong.ZERO;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_FINALIZED;\n+import static tech.pegasys.artemis.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.SignedBeaconBlock;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class CacheControlUtilsTest {\n+\n+  SignedBeaconBlock signedBlock =\n+      new SignedBeaconBlock(DataStructureUtil.randomSignedBeaconBlock(1, 1));\n+  @Mock private ChainDataProvider provider;\n+\n+  @Test\n+  void getMaxAgeForSignedBlock_shouldSetZeroIfNotFinalized() {\n+    when(provider.isFinalized(signedBlock)).thenReturn(false);\n+    String cacheControl = CacheControlUtils.getMaxAgeForSignedBlock(provider, signedBlock);\n+    assertThat(cacheControl).isEqualTo(CACHE_NONE);\n+  }\n+\n+  @Test\n+  void getMaxAgeForSignedBlock_shouldSetZeroIfFinalized() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNjc2NA=="}, "originalCommit": {"oid": "6c6c39393ace8d90ed65bc5a47cca890d051b0c0"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzEwMzgwOnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/artemis/api/schema/BLSPubKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMzoyMzowMFrOFzYJkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMDowOToyNFrOFzYZew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNzM2MQ==", "bodyText": "why is Bytes4 48 bytes?", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389417361", "createdAt": "2020-03-08T23:23:00Z", "author": {"login": "macfarla"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/api/schema/BLSPubKey.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.api.schema;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import java.util.Objects;\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public class BLSPubKey {\n+  /** The number of bytes in this value - i.e. 48 */\n+  private final int SIZE = 48;\n+\n+  private final Bytes bytes;\n+\n+  public BLSPubKey(Bytes bytes) {\n+    checkArgument(\n+        bytes.size() == SIZE, \"Bytes4 should be %s bytes, but was %s bytes.\", SIZE, bytes.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6c39393ace8d90ed65bc5a47cca890d051b0c0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMTQzNQ==", "bodyText": "comment should be bringing in size, i'll fix those.", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389421435", "createdAt": "2020-03-09T00:09:24Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/api/schema/BLSPubKey.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.api.schema;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import java.util.Objects;\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public class BLSPubKey {\n+  /** The number of bytes in this value - i.e. 48 */\n+  private final int SIZE = 48;\n+\n+  private final Bytes bytes;\n+\n+  public BLSPubKey(Bytes bytes) {\n+    checkArgument(\n+        bytes.size() == SIZE, \"Bytes4 should be %s bytes, but was %s bytes.\", SIZE, bytes.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNzM2MQ=="}, "originalCommit": {"oid": "6c6c39393ace8d90ed65bc5a47cca890d051b0c0"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzEwNDc4OnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/artemis/api/schema/BLSSignature.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMzoyMzozNVrOFzYJ-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMzoyMzozNVrOFzYJ-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNzQ2Ng==", "bodyText": "should it just be Bytes should be ...", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389417466", "createdAt": "2020-03-08T23:23:35Z", "author": {"login": "macfarla"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/api/schema/BLSSignature.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.api.schema;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import java.util.Objects;\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public class BLSSignature {\n+  /** The number of bytes in this value - i.e. 96 */\n+  private final int SIZE = 96;\n+\n+  private final Bytes bytes;\n+\n+  public BLSSignature(Bytes bytes) {\n+    checkArgument(\n+        bytes.size() == SIZE, \"Bytes4 should be %s bytes, but was %s bytes.\", SIZE, bytes.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6c39393ace8d90ed65bc5a47cca890d051b0c0"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzEwODYzOnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/artemis/provider/BLSSignatureSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMzoyNzoxMVrOFzYLwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMDoxMDoxOVrOFzYZrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNzkyMA==", "bodyText": "is this change related?", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389417920", "createdAt": "2020-03-08T23:27:11Z", "author": {"login": "macfarla"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/provider/BLSSignatureSerializer.java", "diffHunk": "@@ -17,12 +17,12 @@\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import java.io.IOException;\n-import tech.pegasys.artemis.util.bls.BLSSignature;\n+import tech.pegasys.artemis.api.schema.BLSSignature;\n \n public class BLSSignatureSerializer extends JsonSerializer<BLSSignature> {\n   @Override\n   public void serialize(BLSSignature value, JsonGenerator gen, SerializerProvider serializers)\n       throws IOException {\n-    gen.writeString(value.toBytes().toHexString().toLowerCase());\n+    gen.writeString(value.toHexString().toLowerCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c72349ef53bb2567474c0e7eb3dd3a22c4748a1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMTQ4NA==", "bodyText": "because BLSSignature changed, and the toBytes isn't on the new object... We're the only consumers of the serializers, so i updated it.", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389421484", "createdAt": "2020-03-09T00:10:19Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/provider/BLSSignatureSerializer.java", "diffHunk": "@@ -17,12 +17,12 @@\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import java.io.IOException;\n-import tech.pegasys.artemis.util.bls.BLSSignature;\n+import tech.pegasys.artemis.api.schema.BLSSignature;\n \n public class BLSSignatureSerializer extends JsonSerializer<BLSSignature> {\n   @Override\n   public void serialize(BLSSignature value, JsonGenerator gen, SerializerProvider serializers)\n       throws IOException {\n-    gen.writeString(value.toBytes().toHexString().toLowerCase());\n+    gen.writeString(value.toHexString().toLowerCase());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNzkyMA=="}, "originalCommit": {"oid": "8c72349ef53bb2567474c0e7eb3dd3a22c4748a1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzEwODkwOnYy", "diffSide": "RIGHT", "path": "data/provider/src/main/java/tech/pegasys/artemis/provider/JsonProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMzoyNzo0NFrOFzYL5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMDoyMToxM1rOFzYdUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNzk1OQ==", "bodyText": "why do we have BLSPublicKey and BLSPubKey?", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389417959", "createdAt": "2020-03-08T23:27:44Z", "author": {"login": "macfarla"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/provider/JsonProvider.java", "diffHunk": "@@ -38,6 +39,7 @@ private void addTekuMappers() {\n \n     module.addDeserializer(BLSPublicKey.class, new BLSPublicKeyDeserializer());\n     module.addSerializer(BLSPublicKey.class, new BLSPublicKeySerializer());\n+    module.addSerializer(BLSPubKey.class, new BLSPubKeySerializer());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c72349ef53bb2567474c0e7eb3dd3a22c4748a1"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMjQxNg==", "bodyText": "as discussed, will stick with spec name, and remove the serializer for BLSPublicKey", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389422416", "createdAt": "2020-03-09T00:21:13Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/main/java/tech/pegasys/artemis/provider/JsonProvider.java", "diffHunk": "@@ -38,6 +39,7 @@ private void addTekuMappers() {\n \n     module.addDeserializer(BLSPublicKey.class, new BLSPublicKeyDeserializer());\n     module.addSerializer(BLSPublicKey.class, new BLSPublicKeySerializer());\n+    module.addSerializer(BLSPubKey.class, new BLSPubKeySerializer());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxNzk1OQ=="}, "originalCommit": {"oid": "8c72349ef53bb2567474c0e7eb3dd3a22c4748a1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzExMDMzOnYy", "diffSide": "RIGHT", "path": "data/provider/src/test/java/tech/pegasys/artemis/api/ChainDataProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMzozMDoxMlrOFzYMrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQyMzozMDoxMlrOFzYMrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQxODE1OQ==", "bodyText": "stray comment - is epoch not needed?", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389418159", "createdAt": "2020-03-08T23:30:12Z", "author": {"login": "macfarla"}, "path": "data/provider/src/test/java/tech/pegasys/artemis/api/ChainDataProviderTest.java", "diffHunk": "@@ -51,9 +53,9 @@\n   private static UnsignedLong slot;\n   private static EventBus localEventBus;\n   private static ChainStorageClient chainStorageClient;\n-\n-  @SuppressWarnings(\"unused\")\n-  private static UnsignedLong epoch;\n+  private final tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock signedBeaconBlock =\n+      DataStructureUtil.randomSignedBeaconBlock(1, 1);\n+  //  private static UnsignedLong epoch;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c72349ef53bb2567474c0e7eb3dd3a22c4748a1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzEzMDAwOnYy", "diffSide": "RIGHT", "path": "data/provider/src/test/java/tech/pegasys/artemis/api/ChainDataProviderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMDowMjowMFrOFzYXKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMDozMDoxOFrOFzYgXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDg0MQ==", "bodyText": "myClient??", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389420841", "createdAt": "2020-03-09T00:02:00Z", "author": {"login": "macfarla"}, "path": "data/provider/src/test/java/tech/pegasys/artemis/api/ChainDataProviderTest.java", "diffHunk": "@@ -174,4 +176,86 @@ public void getGenesisTime_shouldReturnValueIfStoreAvailable() {\n     Optional<UnsignedLong> optionalData = provider.getGenesisTime();\n     assertEquals(genesis, optionalData.get());\n   }\n+\n+  @Test\n+  public void getBlockBySlot_shouldReturnEmptyWhenStoreNotFound()\n+      throws ExecutionException, InterruptedException {\n+    CombinedChainDataClient myClient = mock(CombinedChainDataClient.class);\n+    ChainDataProvider provider = new ChainDataProvider(null, myClient);\n+\n+    SafeFuture<Optional<SignedBeaconBlock>> future = provider.getBlockBySlot(ZERO);\n+    assertTrue(future.get().isEmpty());\n+  }\n+\n+  @Test\n+  public void getBlockBySlot_shouldReturnEmptyWhenSlotNotFound()\n+      throws ExecutionException, InterruptedException {\n+    CombinedChainDataClient myClient = mock(CombinedChainDataClient.class);\n+    ChainDataProvider provider = new ChainDataProvider(chainStorageClient, myClient);\n+\n+    when(myClient.isStoreAvailable()).thenReturn(true);\n+    when(myClient.getBlockBySlot(ZERO)).thenReturn(completedFuture(Optional.empty()));\n+    SafeFuture<Optional<SignedBeaconBlock>> future = provider.getBlockBySlot(ZERO);\n+    assertTrue(future.get().isEmpty());\n+  }\n+\n+  @Test\n+  public void getBlockBySlot_shouldReturnBlockWhenFound()\n+      throws ExecutionException, InterruptedException {\n+    CombinedChainDataClient myClient = mock(CombinedChainDataClient.class);\n+    ChainDataProvider provider = new ChainDataProvider(chainStorageClient, myClient);\n+    SafeFuture<Optional<tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock>> data =\n+        completedFuture(Optional.of(signedBeaconBlock));\n+\n+    when(myClient.isStoreAvailable()).thenReturn(true);\n+    when(myClient.getBlockBySlot(ZERO)).thenReturn(data);\n+    SafeFuture<Optional<SignedBeaconBlock>> future = provider.getBlockBySlot(ZERO);\n+    verify(myClient).getBlockBySlot(ZERO);\n+\n+    SignedBeaconBlock result = future.get().get();\n+    assertThat(result)\n+        .usingRecursiveComparison()\n+        .isEqualTo(new SignedBeaconBlock(signedBeaconBlock));\n+  }\n+\n+  @Test\n+  public void getBlockByBlockRoot_shouldReturnEmptyWhenStoreNotFound()\n+      throws ExecutionException, InterruptedException {\n+    CombinedChainDataClient myClient = mock(CombinedChainDataClient.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c72349ef53bb2567474c0e7eb3dd3a22c4748a1"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMzE5Nw==", "bodyText": "renamed", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389423197", "createdAt": "2020-03-09T00:30:18Z", "author": {"login": "rolfyone"}, "path": "data/provider/src/test/java/tech/pegasys/artemis/api/ChainDataProviderTest.java", "diffHunk": "@@ -174,4 +176,86 @@ public void getGenesisTime_shouldReturnValueIfStoreAvailable() {\n     Optional<UnsignedLong> optionalData = provider.getGenesisTime();\n     assertEquals(genesis, optionalData.get());\n   }\n+\n+  @Test\n+  public void getBlockBySlot_shouldReturnEmptyWhenStoreNotFound()\n+      throws ExecutionException, InterruptedException {\n+    CombinedChainDataClient myClient = mock(CombinedChainDataClient.class);\n+    ChainDataProvider provider = new ChainDataProvider(null, myClient);\n+\n+    SafeFuture<Optional<SignedBeaconBlock>> future = provider.getBlockBySlot(ZERO);\n+    assertTrue(future.get().isEmpty());\n+  }\n+\n+  @Test\n+  public void getBlockBySlot_shouldReturnEmptyWhenSlotNotFound()\n+      throws ExecutionException, InterruptedException {\n+    CombinedChainDataClient myClient = mock(CombinedChainDataClient.class);\n+    ChainDataProvider provider = new ChainDataProvider(chainStorageClient, myClient);\n+\n+    when(myClient.isStoreAvailable()).thenReturn(true);\n+    when(myClient.getBlockBySlot(ZERO)).thenReturn(completedFuture(Optional.empty()));\n+    SafeFuture<Optional<SignedBeaconBlock>> future = provider.getBlockBySlot(ZERO);\n+    assertTrue(future.get().isEmpty());\n+  }\n+\n+  @Test\n+  public void getBlockBySlot_shouldReturnBlockWhenFound()\n+      throws ExecutionException, InterruptedException {\n+    CombinedChainDataClient myClient = mock(CombinedChainDataClient.class);\n+    ChainDataProvider provider = new ChainDataProvider(chainStorageClient, myClient);\n+    SafeFuture<Optional<tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock>> data =\n+        completedFuture(Optional.of(signedBeaconBlock));\n+\n+    when(myClient.isStoreAvailable()).thenReturn(true);\n+    when(myClient.getBlockBySlot(ZERO)).thenReturn(data);\n+    SafeFuture<Optional<SignedBeaconBlock>> future = provider.getBlockBySlot(ZERO);\n+    verify(myClient).getBlockBySlot(ZERO);\n+\n+    SignedBeaconBlock result = future.get().get();\n+    assertThat(result)\n+        .usingRecursiveComparison()\n+        .isEqualTo(new SignedBeaconBlock(signedBeaconBlock));\n+  }\n+\n+  @Test\n+  public void getBlockByBlockRoot_shouldReturnEmptyWhenStoreNotFound()\n+      throws ExecutionException, InterruptedException {\n+    CombinedChainDataClient myClient = mock(CombinedChainDataClient.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMDg0MQ=="}, "originalCommit": {"oid": "8c72349ef53bb2567474c0e7eb3dd3a22c4748a1"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzEzMjI2OnYy", "diffSide": "RIGHT", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMDowNToyN1rOFzYYVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMDozMDo0MFrOFzYgig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMTE0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Bytes32 blockParam = getParameterValueAsBytes32(queryParamMap, ROOT);\n          \n          \n            \n                    final Bytes32 blockRoot = getParameterValueAsBytes32(queryParamMap, ROOT);", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389421140", "createdAt": "2020-03-09T00:05:27Z", "author": {"login": "macfarla"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -66,65 +77,61 @@ public BeaconBlockHandler(\n       responses = {\n         @OpenApiResponse(\n             status = RES_OK,\n-            content = @OpenApiContent(from = BeaconBlockResponse.class)),\n+            content = @OpenApiContent(from = SignedBeaconBlock.class)),\n         @OpenApiResponse(status = RES_BAD_REQUEST, description = \"Invalid parameter supplied\"),\n         @OpenApiResponse(status = RES_NOT_FOUND, description = \"Specified block not found\")\n       })\n   @Override\n   public void handle(final Context ctx) throws Exception {\n     try {\n-      if (ctx.queryParamMap().size() > 1) {\n-        throw new IllegalArgumentException(\n-            \"Too many query parameters specified. Please supply only one.\");\n+      final Map<String, List<String>> queryParamMap = ctx.queryParamMap();\n+      if (queryParamMap.size() < 1) {\n+        throw new IllegalArgumentException(NO_PARAMETERS);\n+      } else if (queryParamMap.size() > 1) {\n+        throw new IllegalArgumentException(TOO_MANY_PARAMETERS);\n       }\n \n-      final Map<String, List<String>> queryParamMap = ctx.queryParamMap();\n-      if (ctx.queryParamMap().containsKey(ROOT)) {\n-        final Bytes32 blockParam =\n-            Bytes32.fromHexString(validateQueryParameter(queryParamMap, ROOT));\n+      if (queryParamMap.containsKey(ROOT)) {\n+        final Bytes32 blockParam = getParameterValueAsBytes32(queryParamMap, ROOT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c72349ef53bb2567474c0e7eb3dd3a22c4748a1"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMzI0Mg==", "bodyText": "will do this as part of bigger commit.", "url": "https://github.com/ConsenSys/teku/pull/1310#discussion_r389423242", "createdAt": "2020-03-09T00:30:40Z", "author": {"login": "rolfyone"}, "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconBlockHandler.java", "diffHunk": "@@ -66,65 +77,61 @@ public BeaconBlockHandler(\n       responses = {\n         @OpenApiResponse(\n             status = RES_OK,\n-            content = @OpenApiContent(from = BeaconBlockResponse.class)),\n+            content = @OpenApiContent(from = SignedBeaconBlock.class)),\n         @OpenApiResponse(status = RES_BAD_REQUEST, description = \"Invalid parameter supplied\"),\n         @OpenApiResponse(status = RES_NOT_FOUND, description = \"Specified block not found\")\n       })\n   @Override\n   public void handle(final Context ctx) throws Exception {\n     try {\n-      if (ctx.queryParamMap().size() > 1) {\n-        throw new IllegalArgumentException(\n-            \"Too many query parameters specified. Please supply only one.\");\n+      final Map<String, List<String>> queryParamMap = ctx.queryParamMap();\n+      if (queryParamMap.size() < 1) {\n+        throw new IllegalArgumentException(NO_PARAMETERS);\n+      } else if (queryParamMap.size() > 1) {\n+        throw new IllegalArgumentException(TOO_MANY_PARAMETERS);\n       }\n \n-      final Map<String, List<String>> queryParamMap = ctx.queryParamMap();\n-      if (ctx.queryParamMap().containsKey(ROOT)) {\n-        final Bytes32 blockParam =\n-            Bytes32.fromHexString(validateQueryParameter(queryParamMap, ROOT));\n+      if (queryParamMap.containsKey(ROOT)) {\n+        final Bytes32 blockParam = getParameterValueAsBytes32(queryParamMap, ROOT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQyMTE0MA=="}, "originalCommit": {"oid": "8c72349ef53bb2567474c0e7eb3dd3a22c4748a1"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2497, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}