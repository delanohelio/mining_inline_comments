{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNzAxOTQ1", "number": 1089, "title": "Misc benchmark preparation updates", "bodyText": "PR Description\nA number of changes made in the existing codebase to assist benchmarking code (to be PR'ed later) and speed up initial state setup with disabling some validations and proof/signature creation\nFixed Issue(s)\n\nadd some helper methods\nadd/make public constructors/methods\nfix parallel validator indices calculation\nadd a flag to disable deposit signature generation/validation\nadd a flag to disable deposit Merkle proof generation/validation\noptimize batch deposit processing", "createdAt": "2020-01-14T15:40:29Z", "url": "https://github.com/ConsenSys/teku/pull/1089", "merged": true, "mergeCommit": {"oid": "41c39757e19693976bc916463ee7b9a34cb20a0e"}, "closed": true, "closedAt": "2020-01-16T23:08:00Z", "author": {"login": "Nashatyrev"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4Bj4TgH2gAyMzYyNzAxOTQ1OjE5MTY3MjRmOTEzMmQ3ZWZmOGRkYWI1MTQ1ODAyZWYxMWJmYTI5MTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7A-iTAFqTM0NDIyMzM1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1916724f9132d7eff8ddab5145802ef11bfa2914", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/1916724f9132d7eff8ddab5145802ef11bfa2914", "committedDate": "2020-01-07T14:23:47Z", "message": "Fix a couple of typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "886c0c2e235678385683b6b23bcd98c8ee5705e4", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/886c0c2e235678385683b6b23bcd98c8ee5705e4", "committedDate": "2020-01-08T10:58:31Z", "message": "Get rid of deprecation warns"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa7cb3880cd41c3c1edfad82a4823b43e89b72be", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/fa7cb3880cd41c3c1edfad82a4823b43e89b72be", "committedDate": "2020-01-10T14:27:25Z", "message": "Correctly pass cause exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "292582d6df6032969216d9b5f28a113566e66cfb", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/292582d6df6032969216d9b5f28a113566e66cfb", "committedDate": "2020-01-10T14:42:07Z", "message": "Add handy method overload"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe58bc2ba56a753db69e227bd15563e4b06b87b1", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/fe58bc2ba56a753db69e227bd15563e4b06b87b1", "committedDate": "2020-01-13T12:55:25Z", "message": "Merge remote-tracking branch 'origin/master' into transition-bench"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5a4bf467164d825d716148196a4064f3dceda42", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/c5a4bf467164d825d716148196a4064f3dceda42", "committedDate": "2020-01-13T15:04:34Z", "message": "Add static aggregateAttestations helpers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19c83a3aacea6c4bbfb4ff8ff81edf7166c9118a", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/19c83a3aacea6c4bbfb4ff8ff81edf7166c9118a", "committedDate": "2020-01-13T18:00:26Z", "message": "Add a couple of Key constructors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9c8a188ff9303deda78487942aa377bfdf5a976", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/d9c8a188ff9303deda78487942aa377bfdf5a976", "committedDate": "2020-01-13T18:48:14Z", "message": "Add ability to skip Deposit signing/validation for testing/benchmarking large validator sets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf1e865d3c8e42334fe29b9680b7939719371e19", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/cf1e865d3c8e42334fe29b9680b7939719371e19", "committedDate": "2020-01-13T18:49:13Z", "message": "Add method for grouping and aggregating attestations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "634290538bb931fac1433fa1b7f22f1651396d4b", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/634290538bb931fac1433fa1b7f22f1651396d4b", "committedDate": "2020-01-14T10:01:29Z", "message": "Make the code true parallel, the former variant executes sequentially due to forEachOrdered"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "923fb43ead59e86d47f4e725632b59498766dfe2", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/923fb43ead59e86d47f4e725632b59498766dfe2", "committedDate": "2020-01-14T14:39:27Z", "message": "Merge remote-tracking branch 'pegasys/master' into my-first-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60067976995ec3c199aa9e3bf1748e32cc0df1fe", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/60067976995ec3c199aa9e3bf1748e32cc0df1fe", "committedDate": "2020-01-14T15:12:55Z", "message": "Merge branch 'my-first-fix' into bench-preparation\n\n# Conflicts:\n#\tethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/util/StartupUtil.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bac0c522117049479f27183a38ecbaaa5c940f9", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/3bac0c522117049479f27183a38ecbaaa5c940f9", "committedDate": "2020-01-14T15:21:22Z", "message": "Apply Spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfefbfcae8094acd612f2d41a3bd56d786edc654", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/bfefbfcae8094acd612f2d41a3bd56d786edc654", "committedDate": "2020-01-14T15:32:02Z", "message": "Fix merge artifact: return back overloaded method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a32b4b1bc750ff49a27637ceb129a3c61ad17db4", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/a32b4b1bc750ff49a27637ceb129a3c61ad17db4", "committedDate": "2020-01-14T15:36:58Z", "message": "Add new method javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e217cb55d07dcc7cfa89a7b2ccc509ea236f2da", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/8e217cb55d07dcc7cfa89a7b2ccc509ea236f2da", "committedDate": "2020-01-14T15:47:51Z", "message": "Apply Spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d9e2ab2a53ae9f60a988027d999cc22f6e9f9d3", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/6d9e2ab2a53ae9f60a988027d999cc22f6e9f9d3", "committedDate": "2020-01-14T22:46:07Z", "message": "Merge branch 'master' into bench-preparation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyODc2MjMx", "url": "https://github.com/ConsenSys/teku/pull/1089#pullrequestreview-342876231", "createdAt": "2020-01-14T22:16:43Z", "commit": {"oid": "8e217cb55d07dcc7cfa89a7b2ccc509ea236f2da"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMjoxNjo0NFrOFdnnaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMDo0Mjo0OVrOFdqVYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMjA4OQ==", "bodyText": "Could we have a test that checks this is set to true please? It's the kind of thing that could easily be changed during development and accidentally committed which would be bad.", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r366602089", "createdAt": "2020-01-14T22:16:44Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/BeaconStateUtil.java", "diffHunk": "@@ -76,6 +76,8 @@\n \n public class BeaconStateUtil {\n \n+  public static boolean BLS_VERIFY_DEPOSIT = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217cb55d07dcc7cfa89a7b2ccc509ea236f2da"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxMjg2OQ==", "bodyText": "What's the context for needing this method? If it's only needed for benchmarks should it just live in the benchmark code rather than the production code?  Or is there something else coming that will use it?", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r366612869", "createdAt": "2020-01-14T22:45:36Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/AttestationAggregator.java", "diffHunk": "@@ -117,6 +121,49 @@ private synchronized void aggregateAttestations(\n         BLSAggregate.bls_aggregate_signatures(signaturesToAggregate));\n   }\n \n+  /**\n+   * Groups passed attestations by their {@link\n+   * tech.pegasys.artemis.datastructures.operations.AttestationData} and aggregates attestations in\n+   * every group to a single {@link Attestation}\n+   *\n+   * @return a list of aggregated {@link Attestation}s with distinct {@link\n+   *     tech.pegasys.artemis.datastructures.operations.AttestationData}\n+   */\n+  public static List<Attestation> groupAndAggregateAttestations(List<Attestation> srcAttestations) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e217cb55d07dcc7cfa89a7b2ccc509ea236f2da"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxNDI2MQ==", "bodyText": "We've typically used Guava's Preconditions class to do these assertions rather than the assert keyword. As a result we aren't explicitly controlling whether assert is actually enforced or not in our startup scripts and test config.  Might be worth a discussion if the preconditions show up as a performance bottleneck - the second check here is potentially quite expensive for example.\nI'd be tempted to make the first one a Preconditions.checkArgument and probably just remove the second.  If this method could be made private we'd be confident that groupAndAggregateAttestations is calling it with the right arguments.", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r366614261", "createdAt": "2020-01-14T22:49:34Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/AttestationAggregator.java", "diffHunk": "@@ -117,6 +121,49 @@ private synchronized void aggregateAttestations(\n         BLSAggregate.bls_aggregate_signatures(signaturesToAggregate));\n   }\n \n+  /**\n+   * Groups passed attestations by their {@link\n+   * tech.pegasys.artemis.datastructures.operations.AttestationData} and aggregates attestations in\n+   * every group to a single {@link Attestation}\n+   *\n+   * @return a list of aggregated {@link Attestation}s with distinct {@link\n+   *     tech.pegasys.artemis.datastructures.operations.AttestationData}\n+   */\n+  public static List<Attestation> groupAndAggregateAttestations(List<Attestation> srcAttestations) {\n+    Collection<List<Attestation>> groupedAtt =\n+        srcAttestations.stream().collect(Collectors.groupingBy(Attestation::getData)).values();\n+    return groupedAtt.stream()\n+        .map(AttestationAggregator::aggregateAttestations)\n+        .collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Aggregates passed attestations\n+   *\n+   * @param srcAttestations attestations which should have the same {@link Attestation#getData()}\n+   */\n+  public static Attestation aggregateAttestations(List<Attestation> srcAttestations) {\n+    assert !srcAttestations.isEmpty();\n+    assert srcAttestations.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d9e2ab2a53ae9f60a988027d999cc22f6e9f9d3"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0NjYyNw==", "bodyText": "Maybe just:\nOptional<SSZList<Attestation> sszList = attestations.isEmpty() ? Optional.empty() : Optional.of(new SSZList<>(...))\n\nto save mixing null and Optional.", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r366646627", "createdAt": "2020-01-15T00:42:49Z", "author": {"login": "ajsutton"}, "path": "ethereum/statetransition/src/test-support/java/tech/pegasys/artemis/statetransition/BeaconChainUtil.java", "diffHunk": "@@ -94,6 +112,16 @@ public BlockProcessingRecord createAndImportBlockAtSlot(final long slot) throws\n     return createAndImportBlockAtSlot(UnsignedLong.valueOf(slot));\n   }\n \n+  public BlockProcessingRecord createAndImportBlockAtSlot(\n+      final UnsignedLong slot, List<Attestation> attestations) throws Exception {\n+    SSZList<Attestation> sszList =\n+        attestations.isEmpty()\n+            ? null\n+            : new SSZList<>(attestations, Constants.MAX_ATTESTATIONS, Attestation.class);\n+\n+    return createAndImportBlockAtSlot(slot, Optional.ofNullable(sszList));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d9e2ab2a53ae9f60a988027d999cc22f6e9f9d3"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyOTYyNTU4", "url": "https://github.com/ConsenSys/teku/pull/1089#pullrequestreview-342962558", "createdAt": "2020-01-15T02:48:16Z", "commit": {"oid": "6d9e2ab2a53ae9f60a988027d999cc22f6e9f9d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMjo0ODoxNlrOFdsAxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwMjo0ODoxNlrOFdsAxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY3NDExNw==", "bodyText": "Does flatMap sustain the order of elements here? I believe we had an issue with a similar change in the past due to not preserving the order of validator indices.", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r366674117", "createdAt": "2020-01-15T02:48:16Z", "author": {"login": "cemozerr"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/ValidatorsUtil.java", "diffHunk": "@@ -72,18 +71,16 @@ public static boolean is_active_validator(Validator validator, UnsignedLong epoc\n    *     <a>https://github.com/ethereum/eth2.0-specs/blob/v0.8.0/specs/core/0_beacon-chain.md#get_active_validator_indices</a>\n    */\n   public static List<Integer> get_active_validator_indices(BeaconState state, UnsignedLong epoch) {\n-    List<Integer> active_validator_indices = Collections.synchronizedList(new ArrayList<>());\n     List<Validator> validators = state.getValidators();\n-    IntStream.range(0, validators.size())\n+    return IntStream.range(0, validators.size())\n         .parallel()\n-        .forEachOrdered(\n-            index -> {\n-              if (is_active_validator(validators.get(index), epoch)) {\n-                active_validator_indices.add(index);\n-              }\n-            });\n-\n-    return active_validator_indices;\n+        .flatMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d9e2ab2a53ae9f60a988027d999cc22f6e9f9d3"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7210b514f997662b85007b74e24d174fff2284b2", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/7210b514f997662b85007b74e24d174fff2284b2", "committedDate": "2020-01-15T08:37:11Z", "message": "No need to parallelize very lightweight task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55551904b2c7ba792d530367d7f14babc36c181e", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/55551904b2c7ba792d530367d7f14babc36c181e", "committedDate": "2020-01-15T08:37:24Z", "message": "Merge remote-tracking branch 'pegasys/master' into bench-preparation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47b153684e4de811c713bbc2bfcbd455d8237fde", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/47b153684e4de811c713bbc2bfcbd455d8237fde", "committedDate": "2020-01-15T08:55:44Z", "message": "Use checkArgument() instead of assert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7288de9f0908a181ebcf4b1e7a2a767442691f4", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/b7288de9f0908a181ebcf4b1e7a2a767442691f4", "committedDate": "2020-01-15T09:17:48Z", "message": "Add test checking invalid signed deposit case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72cd8d97bfd6276933a4f2927a685edb7c4fc551", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/72cd8d97bfd6276933a4f2927a685edb7c4fc551", "committedDate": "2020-01-15T09:20:40Z", "message": "Use Optional instead of null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3338eb28b673f748e23712c89ba3c804094a6d1", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/c3338eb28b673f748e23712c89ba3c804094a6d1", "committedDate": "2020-01-15T09:22:10Z", "message": "Apply Spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bb59a51d346e4b07b7c0544bfa40990de962cfc", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/4bb59a51d346e4b07b7c0544bfa40990de962cfc", "committedDate": "2020-01-15T09:24:53Z", "message": "Remove benchmark only related methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2deaa955be5ad66acab101adfe7e64215617fe70", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/2deaa955be5ad66acab101adfe7e64215617fe70", "committedDate": "2020-01-15T09:30:27Z", "message": "Merge remote-tracking branch 'origin/bench-preparation' into bench-preparation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe7bb680a120663fa1d4c5c3ac4c9a75cad43cd2", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/fe7bb680a120663fa1d4c5c3ac4c9a75cad43cd2", "committedDate": "2020-01-16T08:37:44Z", "message": "Add ensureVerifyDepositDefaultsToTrue test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43f982388eb7882f01803cccb67bf81ecc69c807", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/43f982388eb7882f01803cccb67bf81ecc69c807", "committedDate": "2020-01-16T17:10:31Z", "message": "Add ability to disable deposit proofs generatoin/validation to speed up bench initialization with a large number of deposits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f58738bb671c901b61c52c3c660683f199015926", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/f58738bb671c901b61c52c3c660683f199015926", "committedDate": "2020-01-16T17:14:51Z", "message": "Add test to prevent accidentally changing deposit validation option during development"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37abd8641cf62a04619d4e8c4a449b57d74fffba", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/37abd8641cf62a04619d4e8c4a449b57d74fffba", "committedDate": "2020-01-16T17:16:27Z", "message": "Apply Spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ec78c5688e6a0263d9d9e54c6a4165ed647c479", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/3ec78c5688e6a0263d9d9e54c6a4165ed647c479", "committedDate": "2020-01-16T20:54:01Z", "message": "Merge branch 'master' into bench-preparation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MjA5MTE3", "url": "https://github.com/ConsenSys/teku/pull/1089#pullrequestreview-344209117", "createdAt": "2020-01-16T20:55:02Z", "commit": {"oid": "37abd8641cf62a04619d4e8c4a449b57d74fffba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca3e8b8cfeaad9d685b969d5153ee8e9eb29f2e9", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/ca3e8b8cfeaad9d685b969d5153ee8e9eb29f2e9", "committedDate": "2020-01-16T20:55:49Z", "message": "Optimize initialize_beacon_state_from_eth1 to speed up launch with a large number of validators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cb327b0d3eacfbc59893f9a4125beb4a170f521", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/7cb327b0d3eacfbc59893f9a4125beb4a170f521", "committedDate": "2020-01-16T20:55:58Z", "message": "Merge branch 'master' into bench-preparation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79fe8e70feed3be942dd0c359b7077e7e932d52e", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/79fe8e70feed3be942dd0c359b7077e7e932d52e", "committedDate": "2020-01-16T20:56:17Z", "message": "Add JMH annotation processor for using JMH IDEA plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "544f82f21d7b4808332515b44f8c1f5799b3ac27", "author": {"user": {"login": "Nashatyrev", "name": "Anton Nashatyrev"}}, "url": "https://github.com/ConsenSys/teku/commit/544f82f21d7b4808332515b44f8c1f5799b3ac27", "committedDate": "2020-01-16T20:57:07Z", "message": "Merge remote-tracking branch 'origin/bench-preparation' into bench-preparation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MjIzMzU2", "url": "https://github.com/ConsenSys/teku/pull/1089#pullrequestreview-344223356", "createdAt": "2020-01-16T21:19:54Z", "commit": {"oid": "ca3e8b8cfeaad9d685b969d5153ee8e9eb29f2e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMToxOTo1NVrOFen6dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMToxOTo1NVrOFen6dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1NTU0MA==", "bodyText": "This took me a bit to get my head around so maybe worth adding a comment.  I believe the logic is:\n\nif the validator is already present, just use the cached index\nif it's not present then we're going to add it to the end of the validator list so it's index will be the current size of that list and we have no existingIndex.\n\nThat works on the basis that the pubKeyToIndexMap contains a key to index mapping for every validator, which holds because this method is private and only called when we're generating the genesis state from a list of ETH1 deposits.", "url": "https://github.com/ConsenSys/teku/pull/1089#discussion_r367655540", "createdAt": "2020-01-16T21:19:55Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/BeaconStateUtil.java", "diffHunk": "@@ -179,9 +189,20 @@ public static void process_deposit(BeaconState state, Deposit deposit) {\n \n     BLSPublicKey pubkey = deposit.getData().getPubkey();\n     UnsignedLong amount = deposit.getData().getAmount();\n-    List<BLSPublicKey> validator_pubkeys =\n-        state.getValidators().stream().map(Validator::getPubkey).collect(Collectors.toList());\n-    if (!validator_pubkeys.contains(pubkey)) {\n+\n+    SSZList<Validator> validators = state.getValidators();\n+    OptionalInt existingIndex;\n+    if (pubKeyToIndexMap != null) {\n+      Integer cachedIndex = pubKeyToIndexMap.putIfAbsent(pubkey, state.getValidators().size());\n+      existingIndex = cachedIndex == null ? OptionalInt.empty() : OptionalInt.of(cachedIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca3e8b8cfeaad9d685b969d5153ee8e9eb29f2e9"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4196, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}