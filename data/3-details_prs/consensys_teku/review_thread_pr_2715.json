{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3ODEyMzg3", "number": 2715, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODoxMDo0OFrOEfkooQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoyOToxNVrOEgXRLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTQxNTM3OnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/store/FileKeyValueStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODoxMDo0OFrOHL7UEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODoxMDo0OFrOHL7UEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2ODE3Nw==", "bodyText": "Can we add some tests for this class?", "url": "https://github.com/ConsenSys/teku/pull/2715#discussion_r482268177", "createdAt": "2020-09-02T18:10:48Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/FileKeyValueStore.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.store;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.util.file.SyncDataAccessor;\n+\n+/**\n+ * The key-value store implementation with String keys and Bytes values which stores each entry in a\n+ * separate file named {@code <key>.dat} in the specified directory\n+ */\n+public class FileKeyValueStore implements KeyValueStore<String, Bytes> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9169a7b5f29ad53381ea26eaf4462e1689ea1e5"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTQzNDAwOnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/store/KeyValueStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODoxNjowOVrOHL7fiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNzo0MTo0NVrOHNDHqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3MTExMg==", "bodyText": "(nit) Might be more explicit to have a del() method instead of accepting null values.", "url": "https://github.com/ConsenSys/teku/pull/2715#discussion_r482271112", "createdAt": "2020-09-02T18:16:09Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/KeyValueStore.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.store;\n+\n+import java.util.Optional;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Generic simple key-value store interface Both key and value are not allowed to be null\n+ *\n+ * @param <TKey> key type\n+ * @param <TValue> value type\n+ */\n+public interface KeyValueStore<TKey, TValue> {\n+\n+  /** Puts a new value. If the value is {@code null} then the entry is removed if exist */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9169a7b5f29ad53381ea26eaf4462e1689ea1e5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ0NDY0OA==", "bodyText": "Yeah, though about it, but it makes batch update code a bit larger. But anyway the reason is rather my laziness than some rationality. Updated!", "url": "https://github.com/ConsenSys/teku/pull/2715#discussion_r483444648", "createdAt": "2020-09-04T07:41:45Z", "author": {"login": "Nashatyrev"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/KeyValueStore.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.store;\n+\n+import java.util.Optional;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Generic simple key-value store interface Both key and value are not allowed to be null\n+ *\n+ * @param <TKey> key type\n+ * @param <TValue> value type\n+ */\n+public interface KeyValueStore<TKey, TValue> {\n+\n+  /** Puts a new value. If the value is {@code null} then the entry is removed if exist */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3MTExMg=="}, "originalCommit": {"oid": "c9169a7b5f29ad53381ea26eaf4462e1689ea1e5"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTQ1MzE2OnYy", "diffSide": "RIGHT", "path": "services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODoxOTo1NVrOHL7r4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODoxOTo1NVrOHL7r4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3NDI3Mw==", "bodyText": "It's probably worth isolating these files in a subdirectory: data/kvstore?", "url": "https://github.com/ConsenSys/teku/pull/2715#discussion_r482274273", "createdAt": "2020-09-02T18:19:55Z", "author": {"login": "mbaxter"}, "path": "services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -414,6 +417,8 @@ public void initP2PNetwork() {\n \n       p2pConfig.validateListenPortAvailable();\n       final Eth2Config eth2Config = new Eth2Config(config.isP2pSnappyEnabled());\n+      final KeyValueStore<String, Bytes> keyValueStore =\n+          new FileKeyValueStore(Path.of(config.getDataPath()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9169a7b5f29ad53381ea26eaf4462e1689ea1e5"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzcwMjM1OnYy", "diffSide": "RIGHT", "path": "logging/src/main/java/tech/pegasys/teku/logging/StatusLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoyNjoxNFrOHNLkkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDoyOTo1NlrOHNPvgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4MzEyMQ==", "bodyText": "nit: keyKey? Maybe just key?", "url": "https://github.com/ConsenSys/teku/pull/2715#discussion_r483583121", "createdAt": "2020-09-04T12:26:14Z", "author": {"login": "ajsutton"}, "path": "logging/src/main/java/tech/pegasys/teku/logging/StatusLogger.java", "diffHunk": "@@ -161,4 +161,12 @@ public void eth1ServiceDown(final long interval) {\n   public void eth1AtHead() {\n     log.info(\"Eth1 tracker successfully caught up to chain head\");\n   }\n+\n+  public void usingGeneratedP2pPrivateKey(final String keyKey, final boolean justGenerated) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01056ef604f603758079aa1e5174861eecf5714e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MTQ1OQ==", "bodyText": "It's a key for a private key \ud83d\ude04\nBut ok, will change", "url": "https://github.com/ConsenSys/teku/pull/2715#discussion_r483651459", "createdAt": "2020-09-04T14:29:56Z", "author": {"login": "Nashatyrev"}, "path": "logging/src/main/java/tech/pegasys/teku/logging/StatusLogger.java", "diffHunk": "@@ -161,4 +161,12 @@ public void eth1ServiceDown(final long interval) {\n   public void eth1AtHead() {\n     log.info(\"Eth1 tracker successfully caught up to chain head\");\n   }\n+\n+  public void usingGeneratedP2pPrivateKey(final String keyKey, final boolean justGenerated) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4MzEyMQ=="}, "originalCommit": {"oid": "01056ef604f603758079aa1e5174861eecf5714e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzcxMTE3OnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/store/FileKeyValueStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoyOToxNVrOHNLp8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNVQwMDoyNTozOFrOHNeLxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4NDQ5Ng==", "bodyText": "nit: Would be good to reuse a single instance of SyncDataAccessor - just store it in a final field.", "url": "https://github.com/ConsenSys/teku/pull/2715#discussion_r483584496", "createdAt": "2020-09-04T12:29:15Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/FileKeyValueStore.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.store;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.infrastructure.io.SyncDataAccessor;\n+\n+/**\n+ * The key-value store implementation with String keys and Bytes values which stores each entry in a\n+ * separate file named {@code <key>.dat} in the specified directory\n+ *\n+ * <p>This implementation is thread-safe\n+ */\n+public class FileKeyValueStore implements KeyValueStore<String, Bytes> {\n+\n+  private final Path dataDir;\n+  private final ConcurrentMap<String, Object> keyMutexes = new ConcurrentHashMap<>();\n+\n+  public FileKeyValueStore(Path dataDir) {\n+    this.dataDir = dataDir;\n+  }\n+\n+  private Object keyMutex(String key) {\n+    // there supposed to be a very limited number of keys so\n+    // we don't clean up the map for the sake of simplicity\n+    return keyMutexes.computeIfAbsent(key, __ -> new Object());\n+  }\n+\n+  @Override\n+  public void put(@NotNull String key, @NotNull Bytes value) {\n+    Path file = dataDir.resolve(key + \".dat\");\n+    try {\n+      synchronized (keyMutex(key)) {\n+        new SyncDataAccessor().syncedWrite(file, value);\n+      }\n+    } catch (IOException e) {\n+      throw new RuntimeException(\"Error writing file: \" + file, e);\n+    }\n+  }\n+\n+  @Override\n+  public void remove(@NotNull String key) {\n+    Path file = dataDir.resolve(key + \".dat\");\n+    synchronized (keyMutex(key)) {\n+      file.toFile().delete();\n+    }\n+  }\n+\n+  @Override\n+  public Optional<Bytes> get(@NotNull String key) {\n+    Path file = dataDir.resolve(key + \".dat\");\n+    try {\n+      synchronized (keyMutex(key)) {\n+        return new SyncDataAccessor().read(file);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01056ef604f603758079aa1e5174861eecf5714e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY1MTkwNg==", "bodyText": "Ok, but does it make sense to make SyncDataAccessor methods static?", "url": "https://github.com/ConsenSys/teku/pull/2715#discussion_r483651906", "createdAt": "2020-09-04T14:30:40Z", "author": {"login": "Nashatyrev"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/FileKeyValueStore.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.store;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.infrastructure.io.SyncDataAccessor;\n+\n+/**\n+ * The key-value store implementation with String keys and Bytes values which stores each entry in a\n+ * separate file named {@code <key>.dat} in the specified directory\n+ *\n+ * <p>This implementation is thread-safe\n+ */\n+public class FileKeyValueStore implements KeyValueStore<String, Bytes> {\n+\n+  private final Path dataDir;\n+  private final ConcurrentMap<String, Object> keyMutexes = new ConcurrentHashMap<>();\n+\n+  public FileKeyValueStore(Path dataDir) {\n+    this.dataDir = dataDir;\n+  }\n+\n+  private Object keyMutex(String key) {\n+    // there supposed to be a very limited number of keys so\n+    // we don't clean up the map for the sake of simplicity\n+    return keyMutexes.computeIfAbsent(key, __ -> new Object());\n+  }\n+\n+  @Override\n+  public void put(@NotNull String key, @NotNull Bytes value) {\n+    Path file = dataDir.resolve(key + \".dat\");\n+    try {\n+      synchronized (keyMutex(key)) {\n+        new SyncDataAccessor().syncedWrite(file, value);\n+      }\n+    } catch (IOException e) {\n+      throw new RuntimeException(\"Error writing file: \" + file, e);\n+    }\n+  }\n+\n+  @Override\n+  public void remove(@NotNull String key) {\n+    Path file = dataDir.resolve(key + \".dat\");\n+    synchronized (keyMutex(key)) {\n+      file.toFile().delete();\n+    }\n+  }\n+\n+  @Override\n+  public Optional<Bytes> get(@NotNull String key) {\n+    Path file = dataDir.resolve(key + \".dat\");\n+    try {\n+      synchronized (keyMutex(key)) {\n+        return new SyncDataAccessor().read(file);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4NDQ5Ng=="}, "originalCommit": {"oid": "01056ef604f603758079aa1e5174861eecf5714e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg4ODA3MQ==", "bodyText": "They're not static so that we can replace it with a mock when testing things that use it.  So usually rather than create an instance in the class I'd pass it into the constructor (plain java dependency injection basically).", "url": "https://github.com/ConsenSys/teku/pull/2715#discussion_r483888071", "createdAt": "2020-09-05T00:25:38Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/store/FileKeyValueStore.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.store;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.infrastructure.io.SyncDataAccessor;\n+\n+/**\n+ * The key-value store implementation with String keys and Bytes values which stores each entry in a\n+ * separate file named {@code <key>.dat} in the specified directory\n+ *\n+ * <p>This implementation is thread-safe\n+ */\n+public class FileKeyValueStore implements KeyValueStore<String, Bytes> {\n+\n+  private final Path dataDir;\n+  private final ConcurrentMap<String, Object> keyMutexes = new ConcurrentHashMap<>();\n+\n+  public FileKeyValueStore(Path dataDir) {\n+    this.dataDir = dataDir;\n+  }\n+\n+  private Object keyMutex(String key) {\n+    // there supposed to be a very limited number of keys so\n+    // we don't clean up the map for the sake of simplicity\n+    return keyMutexes.computeIfAbsent(key, __ -> new Object());\n+  }\n+\n+  @Override\n+  public void put(@NotNull String key, @NotNull Bytes value) {\n+    Path file = dataDir.resolve(key + \".dat\");\n+    try {\n+      synchronized (keyMutex(key)) {\n+        new SyncDataAccessor().syncedWrite(file, value);\n+      }\n+    } catch (IOException e) {\n+      throw new RuntimeException(\"Error writing file: \" + file, e);\n+    }\n+  }\n+\n+  @Override\n+  public void remove(@NotNull String key) {\n+    Path file = dataDir.resolve(key + \".dat\");\n+    synchronized (keyMutex(key)) {\n+      file.toFile().delete();\n+    }\n+  }\n+\n+  @Override\n+  public Optional<Bytes> get(@NotNull String key) {\n+    Path file = dataDir.resolve(key + \".dat\");\n+    try {\n+      synchronized (keyMutex(key)) {\n+        return new SyncDataAccessor().read(file);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4NDQ5Ng=="}, "originalCommit": {"oid": "01056ef604f603758079aa1e5174861eecf5714e"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3366, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}