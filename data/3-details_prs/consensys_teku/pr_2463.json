{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3ODg1MTA2", "number": 2463, "title": "Disconnect from peer when beacon blocks by range blocks are out of order", "bodyText": "PR Description\nReport error to peer and disconnect when beacon blocks by range blocks are out of order.\nFixed Issue(s)\n\n\nFixes #2388\nDocumentation\n\n I thought about documentation and added the documentation label to this PR if updates are required.", "createdAt": "2020-07-28T15:26:50Z", "url": "https://github.com/ConsenSys/teku/pull/2463", "merged": true, "mergeCommit": {"oid": "1bbea6b0b3028c7c27bdc4f4808afe5f8622b57e"}, "closed": true, "closedAt": "2020-08-19T06:54:06Z", "author": {"login": "cemozerr"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5YE_IAH2gAyNDU3ODg1MTA2OjBhZDFjY2JiNjY5NjZjZDFkNDc1NDhmYzNiMGJhNDU3YTI1ZDViM2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAVilYgH2gAyNDU3ODg1MTA2OjBiYTRmODA4ZjQxYjM3YTdlZDkxMDE4NjNmM2ViMTNhN2EyNTBiZjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0ad1ccbb66966cd1d47548fc3b0ba457a25d5b3b", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/0ad1ccbb66966cd1d47548fc3b0ba457a25d5b3b", "committedDate": "2020-07-28T15:22:56Z", "message": "Disconnect from peer when beacon blocks by range blocks are out of order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "068bbaacebe56956dcaf89bd0498a314c189beb1", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/068bbaacebe56956dcaf89bd0498a314c189beb1", "committedDate": "2020-07-28T15:28:41Z", "message": "Tiny refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2Nzc5ODY0", "url": "https://github.com/ConsenSys/teku/pull/2463#pullrequestreview-456779864", "createdAt": "2020-07-28T15:57:38Z", "commit": {"oid": "d709d6c6bcefb7b3dee6751120394fbd51974a48"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNTo1NzozOFrOG4Tgow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNjoxMjowNVrOG4UHZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5MzA5MQ==", "bodyText": "Would be nice to include peer info here, if possible:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"Unable to import block due to wrong block order. Last imported block number: \"\n          \n          \n            \n                    String.format(\"Received invalid response from peer %s.  Peer returned blocks at slots %s, %s out of order. \"", "url": "https://github.com/ConsenSys/teku/pull/2463#discussion_r461693091", "createdAt": "2020-07-28T15:57:38Z", "author": {"login": "mbaxter"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/OutOfOrderException.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.sync;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import tech.pegasys.teku.networking.eth2.rpc.core.InvalidResponseException;\n+\n+public class OutOfOrderException extends InvalidResponseException {\n+\n+  public OutOfOrderException(UnsignedLong lastBlockNumber, UnsignedLong newBlockNumber) {\n+    super(\n+        \"Unable to import block due to wrong block order. Last imported block number: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d709d6c6bcefb7b3dee6751120394fbd51974a48"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5NDcwOQ==", "bodyText": "Would be helpful to make it clear this error is specific to the BlocksByRange response:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class OutOfOrderException extends InvalidResponseException {\n          \n          \n            \n            public class BlocksByRangeResponseOutOfOrderException extends InvalidResponseException {", "url": "https://github.com/ConsenSys/teku/pull/2463#discussion_r461694709", "createdAt": "2020-07-28T15:59:59Z", "author": {"login": "mbaxter"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/OutOfOrderException.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.sync;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import tech.pegasys.teku.networking.eth2.rpc.core.InvalidResponseException;\n+\n+public class OutOfOrderException extends InvalidResponseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d709d6c6bcefb7b3dee6751120394fbd51974a48"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5NjIyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return PeerSyncResult.WRONG_ORDERING;\n          \n          \n            \n                  return PeerSyncResult.INVALID_RESPONSE;", "url": "https://github.com/ConsenSys/teku/pull/2463#discussion_r461696229", "createdAt": "2020-07-28T16:02:03Z", "author": {"login": "mbaxter"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/PeerSync.java", "diffHunk": "@@ -171,9 +171,16 @@ private PeerSyncResult handleFailedRequestToPeer(Eth2Peer peer, Throwable err) {\n         return PeerSyncResult.IMPORT_FAILED;\n       }\n     }\n+\n     if (rootException instanceof CancellationException) {\n       return PeerSyncResult.CANCELLED;\n     }\n+\n+    if (rootException instanceof OutOfOrderException) {\n+      disconnectFromPeer(peer);\n+      return PeerSyncResult.WRONG_ORDERING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d709d6c6bcefb7b3dee6751120394fbd51974a48"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5NzQ1Nw==", "bodyText": "Would also be a good idea to check that parent root matches up with the previous block root if the step == 1", "url": "https://github.com/ConsenSys/teku/pull/2463#discussion_r461697457", "createdAt": "2020-07-28T16:03:58Z", "author": {"login": "mbaxter"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/PeerSyncBlockRequest.java", "diffHunk": "@@ -37,7 +37,15 @@ public PeerSyncBlockRequest(\n \n   @Override\n   public SafeFuture<?> onResponse(final SignedBeaconBlock response) {\n-    slotOfLastBlock = Optional.of(response.getSlot());\n+    UnsignedLong newBlockSlot = response.getSlot();\n+    if (maybeSlotOfLastBlock.isPresent()) {\n+      UnsignedLong slotOfLastBlock = maybeSlotOfLastBlock.get();\n+      if (newBlockSlot.compareTo(slotOfLastBlock) <= 0) {\n+        throw new OutOfOrderException(slotOfLastBlock, newBlockSlot);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d709d6c6bcefb7b3dee6751120394fbd51974a48"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcwMTIwNQ==", "bodyText": "There are some other validations we should probably do as well:\n\nCheck that the block slot is within the range we requested\nCheck that the block slot matches the step we requested.  Something like: (blockSlot - startSlot) % step == 0", "url": "https://github.com/ConsenSys/teku/pull/2463#discussion_r461701205", "createdAt": "2020-07-28T16:09:24Z", "author": {"login": "mbaxter"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/PeerSyncBlockRequest.java", "diffHunk": "@@ -37,7 +37,15 @@ public PeerSyncBlockRequest(\n \n   @Override\n   public SafeFuture<?> onResponse(final SignedBeaconBlock response) {\n-    slotOfLastBlock = Optional.of(response.getSlot());\n+    UnsignedLong newBlockSlot = response.getSlot();\n+    if (maybeSlotOfLastBlock.isPresent()) {\n+      UnsignedLong slotOfLastBlock = maybeSlotOfLastBlock.get();\n+      if (newBlockSlot.compareTo(slotOfLastBlock) <= 0) {\n+        throw new OutOfOrderException(slotOfLastBlock, newBlockSlot);\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d709d6c6bcefb7b3dee6751120394fbd51974a48"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcwMzAxNA==", "bodyText": "Would be nice to move these validations into Eth2Peer if possible so that the application logic doesn't need to worry about low-level validations that should apply for all blocksByRange requests.", "url": "https://github.com/ConsenSys/teku/pull/2463#discussion_r461703014", "createdAt": "2020-07-28T16:12:05Z", "author": {"login": "mbaxter"}, "path": "sync/src/main/java/tech/pegasys/teku/sync/PeerSyncBlockRequest.java", "diffHunk": "@@ -37,7 +37,15 @@ public PeerSyncBlockRequest(\n \n   @Override\n   public SafeFuture<?> onResponse(final SignedBeaconBlock response) {\n-    slotOfLastBlock = Optional.of(response.getSlot());\n+    UnsignedLong newBlockSlot = response.getSlot();\n+    if (maybeSlotOfLastBlock.isPresent()) {\n+      UnsignedLong slotOfLastBlock = maybeSlotOfLastBlock.get();\n+      if (newBlockSlot.compareTo(slotOfLastBlock) <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d709d6c6bcefb7b3dee6751120394fbd51974a48"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d352f1f0f8d0bf200e0a79eeef22b95c0a476c41", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/d352f1f0f8d0bf200e0a79eeef22b95c0a476c41", "committedDate": "2020-07-29T01:05:52Z", "message": "Move validation to Eth2Peer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d709d6c6bcefb7b3dee6751120394fbd51974a48", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/d709d6c6bcefb7b3dee6751120394fbd51974a48", "committedDate": "2020-07-28T15:30:59Z", "message": "Merge branch 'master' into blocksOutOfOrder"}, "afterCommit": {"oid": "d352f1f0f8d0bf200e0a79eeef22b95c0a476c41", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/d352f1f0f8d0bf200e0a79eeef22b95c0a476c41", "committedDate": "2020-07-29T01:05:52Z", "message": "Move validation to Eth2Peer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcdcaded0e9a31b18d82636c6a7df14e3bcc640c", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/dcdcaded0e9a31b18d82636c6a7df14e3bcc640c", "committedDate": "2020-07-29T01:08:47Z", "message": "Add unchecked annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40dd7b98170df116e190212dca627de98ba27d12", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/40dd7b98170df116e190212dca627de98ba27d12", "committedDate": "2020-07-29T01:13:10Z", "message": "Run spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NjAxNzI1", "url": "https://github.com/ConsenSys/teku/pull/2463#pullrequestreview-457601725", "createdAt": "2020-07-29T14:50:58Z", "commit": {"oid": "40dd7b98170df116e190212dca627de98ba27d12"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo1MDo1OFrOG48PvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToyNTozM1rOG4908g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2MDUwOQ==", "bodyText": "This should probably now be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  throw new BlocksByRangeResponseOutOfOrderException(peer, startSlot, endSlot);\n          \n          \n            \n                  throw new BlocksByRangeResponseInvalidResponseException(peer, startSlot, endSlot);\n          \n      \n    \n    \n  \n\nOr else, we could add various specific exception types for each type of failure.", "url": "https://github.com/ConsenSys/teku/pull/2463#discussion_r462360509", "createdAt": "2020-07-29T14:50:58Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/beaconchain/methods/BlocksByRangeListenerWrapper.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.beaconchain.methods;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.networking.eth2.rpc.core.ResponseStreamListener;\n+import tech.pegasys.teku.networking.p2p.peer.Peer;\n+\n+public class BlocksByRangeListenerWrapper implements ResponseStreamListener<SignedBeaconBlock> {\n+\n+  private final Peer peer;\n+  private final ResponseStreamListener<SignedBeaconBlock> blockResponseListener;\n+  private final UnsignedLong startSlot;\n+  private final UnsignedLong endSlot;\n+  private final UnsignedLong step;\n+\n+  private Optional<UnsignedLong> maybeSlotOfLastBlock = Optional.empty();\n+\n+  public BlocksByRangeListenerWrapper(\n+      Peer peer,\n+      ResponseStreamListener<SignedBeaconBlock> blockResponseListener,\n+      UnsignedLong startSlot,\n+      UnsignedLong count,\n+      UnsignedLong step) {\n+    this.peer = peer;\n+    this.blockResponseListener = blockResponseListener;\n+    this.startSlot = startSlot;\n+    this.step = step;\n+    this.endSlot = startSlot.plus(step.times(count));\n+  }\n+\n+  @Override\n+  public SafeFuture<?> onResponse(SignedBeaconBlock response) {\n+    UnsignedLong blockSlot = response.getSlot();\n+\n+    if (!blockSlotIsInRange(blockSlot)\n+        || !blockSlotMatchesTheStep(blockSlot)\n+        || !blockSlotGreaterThanPreviousBlockSlot(blockSlot)) {\n+      throw new BlocksByRangeResponseOutOfOrderException(peer, startSlot, endSlot);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40dd7b98170df116e190212dca627de98ba27d12"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2Mjg2MA==", "bodyText": "We should probably pass in a specific error message - this is no longer true wrt some of the checks we're running.", "url": "https://github.com/ConsenSys/teku/pull/2463#discussion_r462362860", "createdAt": "2020-07-29T14:54:07Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/beaconchain/methods/BlocksByRangeResponseOutOfOrderException.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.beaconchain.methods;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import tech.pegasys.teku.networking.eth2.rpc.core.InvalidResponseException;\n+import tech.pegasys.teku.networking.p2p.peer.Peer;\n+\n+public class BlocksByRangeResponseOutOfOrderException extends InvalidResponseException {\n+\n+  public BlocksByRangeResponseOutOfOrderException(\n+      Peer peer, UnsignedLong startSlot, UnsignedLong endSlot) {\n+    super(\n+        String.format(\n+            \"Received invalid response from peer %s.  Peer returned blocks at slots %s, %s out of order. \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40dd7b98170df116e190212dca627de98ba27d12"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3NDI5MA==", "bodyText": "I think this method would be a bit safer / better future-proofed if we return failed futures on error rather than throwing directly:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public SafeFuture<?> onResponse(SignedBeaconBlock response) {\n          \n          \n            \n                UnsignedLong blockSlot = response.getSlot();\n          \n          \n            \n            \n          \n          \n            \n                if (!blockSlotIsInRange(blockSlot)\n          \n          \n            \n                    || !blockSlotMatchesTheStep(blockSlot)\n          \n          \n            \n                    || !blockSlotGreaterThanPreviousBlockSlot(blockSlot)) {\n          \n          \n            \n                  throw new BlocksByRangeResponseOutOfOrderException(peer, startSlot, endSlot);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                maybeSlotOfLastBlock = Optional.of(blockSlot);\n          \n          \n            \n                return blockResponseListener.onResponse(response);\n          \n          \n            \n              }\n          \n          \n            \n              public SafeFuture<?> onResponse(SignedBeaconBlock response) {\n          \n          \n            \n                   return SafeFuture.of(() -> {\n          \n          \n            \n                  UnsignedLong blockSlot = response.getSlot();\n          \n          \n            \n                  if (!blockSlotIsInRange(blockSlot)\n          \n          \n            \n                    || !blockSlotMatchesTheStep(blockSlot)\n          \n          \n            \n                    || !blockSlotGreaterThanPreviousBlockSlot(blockSlot)) {\n          \n          \n            \n                    throw new BlocksByRangeResponseOutOfOrderException(peer, startSlot, endSlot);\n          \n          \n            \n                  }\n          \n          \n            \n            \n          \n          \n            \n                  maybeSlotOfLastBlock = Optional.of(blockSlot);\n          \n          \n            \n                  return blockResponseListener.onResponse(response);\n          \n          \n            \n                });\n          \n          \n            \n              }", "url": "https://github.com/ConsenSys/teku/pull/2463#discussion_r462374290", "createdAt": "2020-07-29T15:09:18Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/beaconchain/methods/BlocksByRangeListenerWrapper.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.beaconchain.methods;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.networking.eth2.rpc.core.ResponseStreamListener;\n+import tech.pegasys.teku.networking.p2p.peer.Peer;\n+\n+public class BlocksByRangeListenerWrapper implements ResponseStreamListener<SignedBeaconBlock> {\n+\n+  private final Peer peer;\n+  private final ResponseStreamListener<SignedBeaconBlock> blockResponseListener;\n+  private final UnsignedLong startSlot;\n+  private final UnsignedLong endSlot;\n+  private final UnsignedLong step;\n+\n+  private Optional<UnsignedLong> maybeSlotOfLastBlock = Optional.empty();\n+\n+  public BlocksByRangeListenerWrapper(\n+      Peer peer,\n+      ResponseStreamListener<SignedBeaconBlock> blockResponseListener,\n+      UnsignedLong startSlot,\n+      UnsignedLong count,\n+      UnsignedLong step) {\n+    this.peer = peer;\n+    this.blockResponseListener = blockResponseListener;\n+    this.startSlot = startSlot;\n+    this.step = step;\n+    this.endSlot = startSlot.plus(step.times(count));\n+  }\n+\n+  @Override\n+  public SafeFuture<?> onResponse(SignedBeaconBlock response) {\n+    UnsignedLong blockSlot = response.getSlot();\n+\n+    if (!blockSlotIsInRange(blockSlot)\n+        || !blockSlotMatchesTheStep(blockSlot)\n+        || !blockSlotGreaterThanPreviousBlockSlot(blockSlot)) {\n+      throw new BlocksByRangeResponseOutOfOrderException(peer, startSlot, endSlot);\n+    }\n+\n+    maybeSlotOfLastBlock = Optional.of(blockSlot);\n+    return blockResponseListener.onResponse(response);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40dd7b98170df116e190212dca627de98ba27d12"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3NjQ1Nw==", "bodyText": "(nit). You should be able to do something like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try {\n          \n          \n            \n                  listenerWrapper.onResponse(block1).join();\n          \n          \n            \n                } catch (final Exception e) {\n          \n          \n            \n                  assertThat(e).isInstanceOf(BlocksByRangeResponseOutOfOrderException.class);\n          \n          \n            \n                }\n          \n          \n            \n                SafeFuture<?> result = listenerWrapper.onResponse(block1);\n          \n          \n            \n                assertThat(result).isCompletedExceptionally();\n          \n          \n            \n                assertThatThrownBy(result::get).hasCauseIntanceOf(BlocksByRangeResponseOutOfOrderException.class);", "url": "https://github.com/ConsenSys/teku/pull/2463#discussion_r462376457", "createdAt": "2020-07-29T15:12:12Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/rpc/beaconchain/methods/BlocksByRangeListenerWrapperTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.beaconchain.methods;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.networking.eth2.peers.Eth2Peer;\n+import tech.pegasys.teku.networking.eth2.rpc.core.ResponseStreamListener;\n+\n+public class BlocksByRangeListenerWrapperTest {\n+  private DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private BlocksByRangeListenerWrapper listenerWrapper;\n+  private Eth2Peer peer = mock(Eth2Peer.class);\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private ResponseStreamListener<SignedBeaconBlock> listener = mock(ResponseStreamListener.class);\n+\n+  @BeforeEach\n+  void setUp() {\n+    when(listener.onResponse(any())).thenReturn(SafeFuture.completedFuture(null));\n+  }\n+\n+  @Test\n+  void blockSlotSmallerThanFromSlot() {\n+    UnsignedLong START_SLOT = UnsignedLong.valueOf(1);\n+    UnsignedLong COUNT = UnsignedLong.valueOf(4);\n+    UnsignedLong STEP = UnsignedLong.valueOf(2);\n+    listenerWrapper = new BlocksByRangeListenerWrapper(peer, listener, START_SLOT, COUNT, STEP);\n+\n+    final SignedBeaconBlock block1 = dataStructureUtil.randomSignedBeaconBlock(0);\n+\n+    try {\n+      listenerWrapper.onResponse(block1).join();\n+    } catch (final Exception e) {\n+      assertThat(e).isInstanceOf(BlocksByRangeResponseOutOfOrderException.class);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40dd7b98170df116e190212dca627de98ba27d12"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4NjQxOA==", "bodyText": "Would still be good to add a parentRoot check, which I think would work similar to this check:\n\nWe remember the previous blockRoot by saving it to an Optional instance var: maybeLastBlockRoot\nTo validate, if maybeLastBlockRoot.isPresent() AND step.equals(ONE), we check the current block's parentRoot against maybeLastBlockRoot.", "url": "https://github.com/ConsenSys/teku/pull/2463#discussion_r462386418", "createdAt": "2020-07-29T15:25:33Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/beaconchain/methods/BlocksByRangeListenerWrapper.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.beaconchain.methods;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.networking.eth2.rpc.core.ResponseStreamListener;\n+import tech.pegasys.teku.networking.p2p.peer.Peer;\n+\n+public class BlocksByRangeListenerWrapper implements ResponseStreamListener<SignedBeaconBlock> {\n+\n+  private final Peer peer;\n+  private final ResponseStreamListener<SignedBeaconBlock> blockResponseListener;\n+  private final UnsignedLong startSlot;\n+  private final UnsignedLong endSlot;\n+  private final UnsignedLong step;\n+\n+  private Optional<UnsignedLong> maybeSlotOfLastBlock = Optional.empty();\n+\n+  public BlocksByRangeListenerWrapper(\n+      Peer peer,\n+      ResponseStreamListener<SignedBeaconBlock> blockResponseListener,\n+      UnsignedLong startSlot,\n+      UnsignedLong count,\n+      UnsignedLong step) {\n+    this.peer = peer;\n+    this.blockResponseListener = blockResponseListener;\n+    this.startSlot = startSlot;\n+    this.step = step;\n+    this.endSlot = startSlot.plus(step.times(count));\n+  }\n+\n+  @Override\n+  public SafeFuture<?> onResponse(SignedBeaconBlock response) {\n+    UnsignedLong blockSlot = response.getSlot();\n+\n+    if (!blockSlotIsInRange(blockSlot)\n+        || !blockSlotMatchesTheStep(blockSlot)\n+        || !blockSlotGreaterThanPreviousBlockSlot(blockSlot)) {\n+      throw new BlocksByRangeResponseOutOfOrderException(peer, startSlot, endSlot);\n+    }\n+\n+    maybeSlotOfLastBlock = Optional.of(blockSlot);\n+    return blockResponseListener.onResponse(response);\n+  }\n+\n+  private boolean blockSlotIsInRange(UnsignedLong blockSlot) {\n+    return blockSlot.compareTo(startSlot) >= 0 && blockSlot.compareTo(endSlot) <= 0;\n+  }\n+\n+  private boolean blockSlotMatchesTheStep(UnsignedLong blockSlot) {\n+    return blockSlot.minus(startSlot).mod(step).equals(UnsignedLong.ZERO);\n+  }\n+\n+  private boolean blockSlotGreaterThanPreviousBlockSlot(UnsignedLong blockSlot) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40dd7b98170df116e190212dca627de98ba27d12"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ad692ab6dd3170a0d5b18025bb9bf8179e07e15", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/6ad692ab6dd3170a0d5b18025bb9bf8179e07e15", "committedDate": "2020-08-10T01:40:57Z", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into blocksOutOfOrder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e1525bb1be966b5c19cc3dc4d58be384307c07c", "author": {"user": {"login": "ajsutton", "name": "Adrian Sutton"}}, "url": "https://github.com/ConsenSys/teku/commit/2e1525bb1be966b5c19cc3dc4d58be384307c07c", "committedDate": "2020-08-10T01:47:17Z", "message": "Update to use UInt64."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c1a326c0b9ae97a28a82cdecefbddf43914d6d8", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/9c1a326c0b9ae97a28a82cdecefbddf43914d6d8", "committedDate": "2020-08-17T06:55:07Z", "message": "Check parent root matches and return failed future instead of throwing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0b76c7a941850fdd40851a0a878ccb60da919cc", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/e0b76c7a941850fdd40851a0a878ccb60da919cc", "committedDate": "2020-08-17T06:59:46Z", "message": "Change test failure check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ebde28c3b49b9741bd38fb74e1dd006eaa6db5a", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/3ebde28c3b49b9741bd38fb74e1dd006eaa6db5a", "committedDate": "2020-08-17T07:22:09Z", "message": "Add specific exception enums for each failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1c375ab13947fcd8b7ac46bc6d1e7269cb06f19", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/a1c375ab13947fcd8b7ac46bc6d1e7269cb06f19", "committedDate": "2020-08-17T07:22:58Z", "message": "Merge branch 'master' into blocksOutOfOrder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc1d4658185645aa9a9178e8f5ef4eb3f10ad53b", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/fc1d4658185645aa9a9178e8f5ef4eb3f10ad53b", "committedDate": "2020-08-17T08:17:25Z", "message": "Change old test to match exception"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NTkwMzYz", "url": "https://github.com/ConsenSys/teku/pull/2463#pullrequestreview-469590363", "createdAt": "2020-08-18T15:49:37Z", "commit": {"oid": "fc1d4658185645aa9a9178e8f5ef4eb3f10ad53b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNTo0OTozN1rOHCa43A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNTo0OTozN1rOHCa43A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI5OTc0MA==", "bodyText": "(nit / optional) We've got some nice comparison utilities now!:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return blockSlot.compareTo(lastBlockSlot) > 0;\n          \n          \n            \n                return blockSlot.isGreaterThan(lastBlockSlot);", "url": "https://github.com/ConsenSys/teku/pull/2463#discussion_r472299740", "createdAt": "2020-08-18T15:49:37Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/rpc/beaconchain/methods/BlocksByRangeListenerWrapper.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.rpc.beaconchain.methods;\n+\n+import static tech.pegasys.teku.networking.eth2.rpc.beaconchain.methods.BlocksByRangeResponseInvalidResponseException.InvalidResponseType.BLOCK_PARENT_ROOT_DOES_NOT_MATCH;\n+import static tech.pegasys.teku.networking.eth2.rpc.beaconchain.methods.BlocksByRangeResponseInvalidResponseException.InvalidResponseType.BLOCK_SLOT_DOES_NOT_MATCH_STEP;\n+import static tech.pegasys.teku.networking.eth2.rpc.beaconchain.methods.BlocksByRangeResponseInvalidResponseException.InvalidResponseType.BLOCK_SLOT_NOT_GREATER_THAN_PREVIOUS_BLOCK_SLOT;\n+import static tech.pegasys.teku.networking.eth2.rpc.beaconchain.methods.BlocksByRangeResponseInvalidResponseException.InvalidResponseType.BLOCK_SLOT_NOT_IN_RANGE;\n+\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.networking.eth2.rpc.core.ResponseStreamListener;\n+import tech.pegasys.teku.networking.p2p.peer.Peer;\n+\n+public class BlocksByRangeListenerWrapper implements ResponseStreamListener<SignedBeaconBlock> {\n+\n+  private final Peer peer;\n+  private final ResponseStreamListener<SignedBeaconBlock> blockResponseListener;\n+  private final UInt64 startSlot;\n+  private final UInt64 endSlot;\n+  private final UInt64 step;\n+\n+  private Optional<Bytes32> maybeRootOfLastBlock = Optional.empty();\n+  private Optional<UInt64> maybeSlotOfLastBlock = Optional.empty();\n+\n+  public BlocksByRangeListenerWrapper(\n+      Peer peer,\n+      ResponseStreamListener<SignedBeaconBlock> blockResponseListener,\n+      UInt64 startSlot,\n+      UInt64 count,\n+      UInt64 step) {\n+    this.peer = peer;\n+    this.blockResponseListener = blockResponseListener;\n+    this.startSlot = startSlot;\n+    this.step = step;\n+    this.endSlot = startSlot.plus(step.times(count));\n+  }\n+\n+  @Override\n+  public SafeFuture<?> onResponse(SignedBeaconBlock response) {\n+    return SafeFuture.of(\n+        () -> {\n+          UInt64 blockSlot = response.getSlot();\n+          if (!blockSlotIsInRange(blockSlot)) {\n+            throw new BlocksByRangeResponseInvalidResponseException(peer, BLOCK_SLOT_NOT_IN_RANGE);\n+          }\n+\n+          if (!blockSlotMatchesTheStep(blockSlot)) {\n+            throw new BlocksByRangeResponseInvalidResponseException(\n+                peer, BLOCK_SLOT_DOES_NOT_MATCH_STEP);\n+          }\n+\n+          if (!blockSlotGreaterThanPreviousBlockSlot(blockSlot)) {\n+            throw new BlocksByRangeResponseInvalidResponseException(\n+                peer, BLOCK_SLOT_NOT_GREATER_THAN_PREVIOUS_BLOCK_SLOT);\n+          }\n+\n+          if (!blockParentRootMatches(response.getParent_root())) {\n+            throw new BlocksByRangeResponseInvalidResponseException(\n+                peer, BLOCK_PARENT_ROOT_DOES_NOT_MATCH);\n+          }\n+\n+          maybeSlotOfLastBlock = Optional.of(blockSlot);\n+          maybeRootOfLastBlock = Optional.of(response.getRoot());\n+          return blockResponseListener.onResponse(response);\n+        });\n+  }\n+\n+  private boolean blockSlotIsInRange(UInt64 blockSlot) {\n+    return blockSlot.compareTo(startSlot) >= 0 && blockSlot.compareTo(endSlot) <= 0;\n+  }\n+\n+  private boolean blockSlotMatchesTheStep(UInt64 blockSlot) {\n+    return blockSlot.minus(startSlot).mod(step).equals(UInt64.ZERO);\n+  }\n+\n+  private boolean blockSlotGreaterThanPreviousBlockSlot(UInt64 blockSlot) {\n+    if (maybeSlotOfLastBlock.isEmpty()) {\n+      return true;\n+    }\n+\n+    UInt64 lastBlockSlot = maybeSlotOfLastBlock.get();\n+    return blockSlot.compareTo(lastBlockSlot) > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1d4658185645aa9a9178e8f5ef4eb3f10ad53b"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1742918e24e14668e037a4af1631608500fd016f", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/1742918e24e14668e037a4af1631608500fd016f", "committedDate": "2020-08-19T06:21:03Z", "message": "Use new comparison utility"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ba4f808f41b37a7ed9101863f3eb13a7a250bf4", "author": {"user": {"login": "cemozerr", "name": "Cem Ozer"}}, "url": "https://github.com/ConsenSys/teku/commit/0ba4f808f41b37a7ed9101863f3eb13a7a250bf4", "committedDate": "2020-08-19T06:23:01Z", "message": "Merge branch 'master' into blocksOutOfOrder"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3701, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}