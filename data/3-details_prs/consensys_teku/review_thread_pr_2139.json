{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNzk3NTMx", "number": 2139, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDoxMjoxNlrOEFLXLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMTo1NjowOFrOEFMwAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODY0NDk1OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/OperationStateTransitionValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDoxMjoxNlrOGjQYig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMToxNTowNFrOGjR0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyMTc3MA==", "bodyText": "This this intended to always be a single method?:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public interface OperationStateTransitionValidator<T> {\n          \n          \n            \n            @FunctionalInterface\n          \n          \n            \n            public interface OperationStateTransitionValidator<T> {", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439621770", "createdAt": "2020-06-12T20:12:16Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/OperationStateTransitionValidator.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.operationvalidators;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public interface OperationStateTransitionValidator<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b17a5a74719b3caf81eda11261136cb4299f1076"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NTIzMw==", "bodyText": "Not sure. But I'll add the modifier for now. It's only for legibility purposes, right?", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439645233", "createdAt": "2020-06-12T21:15:04Z", "author": {"login": "cemozerr"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/OperationStateTransitionValidator.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.operationvalidators;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public interface OperationStateTransitionValidator<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyMTc3MA=="}, "originalCommit": {"oid": "b17a5a74719b3caf81eda11261136cb4299f1076"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODY1NTQ0OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/AggregateGossipManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDoxNjo0MFrOGjQfNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMToxODoyN1rOGjR4uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyMzQ3Nw==", "bodyText": "There's an @Mock annotation you can use that works with generics:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @SuppressWarnings(\"unchecked\")\n          \n          \n            \n              private final GossipedOperationConsumer<ValidateableAttestation> gossipedAttestationConsumer =\n          \n          \n            \n                  mock(GossipedOperationConsumer.class);\n          \n          \n            \n              @Mock\n          \n          \n            \n              private GossipedOperationConsumer<ValidateableAttestation> gossipedAttestationConsumer;\n          \n      \n    \n    \n  \n\nIf you go with this, you need to annotate the test class with @ExtendWith(MockitoExtension.class) I think.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439623477", "createdAt": "2020-06-12T20:16:40Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/AggregateGossipManagerTest.java", "diffHunk": "@@ -40,8 +40,10 @@\n   private final GossipNetwork gossipNetwork = mock(GossipNetwork.class);\n   private final GossipEncoding gossipEncoding = GossipEncoding.SSZ_SNAPPY;\n   private final TopicChannel topicChannel = mock(TopicChannel.class);\n-  private final GossipedAttestationConsumer gossipedAttestationConsumer =\n-      mock(GossipedAttestationConsumer.class);\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private final GossipedOperationConsumer<ValidateableAttestation> gossipedAttestationConsumer =\n+      mock(GossipedOperationConsumer.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b17a5a74719b3caf81eda11261136cb4299f1076"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NjM5Mg==", "bodyText": "Apparently to be able to use MockitoExtension.classwe need to import\norg.mockito:mockito-junit-jupiter. Not sure if it's worth the effort since @SupressWarning(\"unchecked\") serves basically the same purpose in the testing code and is fewer lines of code.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439646392", "createdAt": "2020-06-12T21:18:27Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/AggregateGossipManagerTest.java", "diffHunk": "@@ -40,8 +40,10 @@\n   private final GossipNetwork gossipNetwork = mock(GossipNetwork.class);\n   private final GossipEncoding gossipEncoding = GossipEncoding.SSZ_SNAPPY;\n   private final TopicChannel topicChannel = mock(TopicChannel.class);\n-  private final GossipedAttestationConsumer gossipedAttestationConsumer =\n-      mock(GossipedAttestationConsumer.class);\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private final GossipedOperationConsumer<ValidateableAttestation> gossipedAttestationConsumer =\n+      mock(GossipedOperationConsumer.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyMzQ3Nw=="}, "originalCommit": {"oid": "b17a5a74719b3caf81eda11261136cb4299f1076"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODY4MDA2OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDoyNjo1NlrOGjQuug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMToyNDo1N1rOGjSAyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyNzQ1MA==", "bodyText": "I think you could simplify this by keeping maxNumberOfElements as an instance var:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public OperationPool(Class<T> clazz, OperationStateTransitionValidator<T> operationValidator) {\n          \n          \n            \n                this.clazz = clazz;\n          \n          \n            \n                this.operationValidator = operationValidator;\n          \n          \n            \n              }\n          \n          \n            \n              public OperationPool(Class<T> clazz, OperationStateTransitionValidator<T> operationValidator) {\n          \n          \n            \n                this.operationValidator = operationValidator;\n          \n          \n            \n                this.maxNumberOfElements = maxNumberOfElementsInBlock.get(clazz);\n          \n          \n            \n              }\n          \n      \n    \n    \n  \n\nOr even cutting out clazz altogether:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public OperationPool(Class<T> clazz, OperationStateTransitionValidator<T> operationValidator) {\n          \n          \n            \n                this.clazz = clazz;\n          \n          \n            \n                this.operationValidator = operationValidator;\n          \n          \n            \n              }\n          \n          \n            \n              public OperationPool(OperationStateTransitionValidator<T> operationValidator, final int maxElements) {\n          \n          \n            \n                this.operationValidator = operationValidator;\n          \n          \n            \n                this.maxNumberOfElements = maxElements;\n          \n          \n            \n              }", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439627450", "createdAt": "2020-06-12T20:26:56Z", "author": {"login": "mbaxter"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import tech.pegasys.teku.core.operationvalidators.OperationStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class OperationPool<T> {\n+\n+  private static Map<Class<?>, Integer> maxNumberOfElementsInBlock =\n+      Map.of(\n+          SignedVoluntaryExit.class, Constants.MAX_VOLUNTARY_EXITS,\n+          ProposerSlashing.class, Constants.MAX_PROPOSER_SLASHINGS,\n+          AttesterSlashing.class, Constants.MAX_ATTESTER_SLASHINGS);\n+\n+  private Set<T> operations = new HashSet<>();\n+  private OperationStateTransitionValidator<T> operationValidator;\n+  private Class<T> clazz;\n+\n+  public OperationPool(Class<T> clazz, OperationStateTransitionValidator<T> operationValidator) {\n+    this.clazz = clazz;\n+    this.operationValidator = operationValidator;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0NzYwOQ==", "bodyText": "I like the idea of having the maxNumberOfELements get set inside the operation pool depending on class rather than someone being able to set them whatever they want. So I'll go with the first suggestion.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439647609", "createdAt": "2020-06-12T21:22:12Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import tech.pegasys.teku.core.operationvalidators.OperationStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class OperationPool<T> {\n+\n+  private static Map<Class<?>, Integer> maxNumberOfElementsInBlock =\n+      Map.of(\n+          SignedVoluntaryExit.class, Constants.MAX_VOLUNTARY_EXITS,\n+          ProposerSlashing.class, Constants.MAX_PROPOSER_SLASHINGS,\n+          AttesterSlashing.class, Constants.MAX_ATTESTER_SLASHINGS);\n+\n+  private Set<T> operations = new HashSet<>();\n+  private OperationStateTransitionValidator<T> operationValidator;\n+  private Class<T> clazz;\n+\n+  public OperationPool(Class<T> clazz, OperationStateTransitionValidator<T> operationValidator) {\n+    this.clazz = clazz;\n+    this.operationValidator = operationValidator;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyNzQ1MA=="}, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0ODM5OQ==", "bodyText": "Oh actually we do need the class information because we can't create the type-specific SSZMutableList if we don't.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439648399", "createdAt": "2020-06-12T21:24:46Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import tech.pegasys.teku.core.operationvalidators.OperationStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class OperationPool<T> {\n+\n+  private static Map<Class<?>, Integer> maxNumberOfElementsInBlock =\n+      Map.of(\n+          SignedVoluntaryExit.class, Constants.MAX_VOLUNTARY_EXITS,\n+          ProposerSlashing.class, Constants.MAX_PROPOSER_SLASHINGS,\n+          AttesterSlashing.class, Constants.MAX_ATTESTER_SLASHINGS);\n+\n+  private Set<T> operations = new HashSet<>();\n+  private OperationStateTransitionValidator<T> operationValidator;\n+  private Class<T> clazz;\n+\n+  public OperationPool(Class<T> clazz, OperationStateTransitionValidator<T> operationValidator) {\n+    this.clazz = clazz;\n+    this.operationValidator = operationValidator;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyNzQ1MA=="}, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0ODQ1OQ==", "bodyText": "So unfortunately we can't make this change.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439648459", "createdAt": "2020-06-12T21:24:57Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import tech.pegasys.teku.core.operationvalidators.OperationStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class OperationPool<T> {\n+\n+  private static Map<Class<?>, Integer> maxNumberOfElementsInBlock =\n+      Map.of(\n+          SignedVoluntaryExit.class, Constants.MAX_VOLUNTARY_EXITS,\n+          ProposerSlashing.class, Constants.MAX_PROPOSER_SLASHINGS,\n+          AttesterSlashing.class, Constants.MAX_ATTESTER_SLASHINGS);\n+\n+  private Set<T> operations = new HashSet<>();\n+  private OperationStateTransitionValidator<T> operationValidator;\n+  private Class<T> clazz;\n+\n+  public OperationPool(Class<T> clazz, OperationStateTransitionValidator<T> operationValidator) {\n+    this.clazz = clazz;\n+    this.operationValidator = operationValidator;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyNzQ1MA=="}, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODY4NDA4OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDoyODoyN1rOGjQxGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMTo1MTo1N1rOGjShew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyODA1Ng==", "bodyText": "Do you want to remove the element even if it wasn't included?  What if its valid for a different fork?", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439628056", "createdAt": "2020-06-12T20:28:27Z", "author": {"login": "mbaxter"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import tech.pegasys.teku.core.operationvalidators.OperationStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class OperationPool<T> {\n+\n+  private static Map<Class<?>, Integer> maxNumberOfElementsInBlock =\n+      Map.of(\n+          SignedVoluntaryExit.class, Constants.MAX_VOLUNTARY_EXITS,\n+          ProposerSlashing.class, Constants.MAX_PROPOSER_SLASHINGS,\n+          AttesterSlashing.class, Constants.MAX_ATTESTER_SLASHINGS);\n+\n+  private Set<T> operations = new HashSet<>();\n+  private OperationStateTransitionValidator<T> operationValidator;\n+  private Class<T> clazz;\n+\n+  public OperationPool(Class<T> clazz, OperationStateTransitionValidator<T> operationValidator) {\n+    this.clazz = clazz;\n+    this.operationValidator = operationValidator;\n+  }\n+\n+  public SSZList<T> getItemsForBlock(BeaconState stateAtBlockSlot) {\n+    SSZMutableList<T> itemsToPutInBlock =\n+        SSZList.createMutable(clazz, maxNumberOfElementsInBlock.get(clazz));\n+    Iterator<T> iter = operations.iterator();\n+    int count = 0;\n+    int numberOfElementsToGet = maxNumberOfElementsInBlock.get(clazz);\n+    while (count < numberOfElementsToGet && iter.hasNext()) {\n+      T item = iter.next();\n+      if (operationValidator.validate(stateAtBlockSlot, item).isEmpty()) {\n+        itemsToPutInBlock.add(item);\n+        count++;\n+      }\n+      iter.remove();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzNzU2OQ==", "bodyText": "I think we would deal with elements that are valid for a different fork in a follow-up PR since there are a good amount of places in the codebase we need to do that.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439637569", "createdAt": "2020-06-12T20:53:10Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import tech.pegasys.teku.core.operationvalidators.OperationStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class OperationPool<T> {\n+\n+  private static Map<Class<?>, Integer> maxNumberOfElementsInBlock =\n+      Map.of(\n+          SignedVoluntaryExit.class, Constants.MAX_VOLUNTARY_EXITS,\n+          ProposerSlashing.class, Constants.MAX_PROPOSER_SLASHINGS,\n+          AttesterSlashing.class, Constants.MAX_ATTESTER_SLASHINGS);\n+\n+  private Set<T> operations = new HashSet<>();\n+  private OperationStateTransitionValidator<T> operationValidator;\n+  private Class<T> clazz;\n+\n+  public OperationPool(Class<T> clazz, OperationStateTransitionValidator<T> operationValidator) {\n+    this.clazz = clazz;\n+    this.operationValidator = operationValidator;\n+  }\n+\n+  public SSZList<T> getItemsForBlock(BeaconState stateAtBlockSlot) {\n+    SSZMutableList<T> itemsToPutInBlock =\n+        SSZList.createMutable(clazz, maxNumberOfElementsInBlock.get(clazz));\n+    Iterator<T> iter = operations.iterator();\n+    int count = 0;\n+    int numberOfElementsToGet = maxNumberOfElementsInBlock.get(clazz);\n+    while (count < numberOfElementsToGet && iter.hasNext()) {\n+      T item = iter.next();\n+      if (operationValidator.validate(stateAtBlockSlot, item).isEmpty()) {\n+        itemsToPutInBlock.add(item);\n+        count++;\n+      }\n+      iter.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyODA1Ng=="}, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0OTY1OQ==", "bodyText": "But these items we're dropping won't be recoverable right?  Suggested making the operations limited in size, in which case there shouldn't be a problem holding on to these.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439649659", "createdAt": "2020-06-12T21:28:45Z", "author": {"login": "mbaxter"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import tech.pegasys.teku.core.operationvalidators.OperationStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class OperationPool<T> {\n+\n+  private static Map<Class<?>, Integer> maxNumberOfElementsInBlock =\n+      Map.of(\n+          SignedVoluntaryExit.class, Constants.MAX_VOLUNTARY_EXITS,\n+          ProposerSlashing.class, Constants.MAX_PROPOSER_SLASHINGS,\n+          AttesterSlashing.class, Constants.MAX_ATTESTER_SLASHINGS);\n+\n+  private Set<T> operations = new HashSet<>();\n+  private OperationStateTransitionValidator<T> operationValidator;\n+  private Class<T> clazz;\n+\n+  public OperationPool(Class<T> clazz, OperationStateTransitionValidator<T> operationValidator) {\n+    this.clazz = clazz;\n+    this.operationValidator = operationValidator;\n+  }\n+\n+  public SSZList<T> getItemsForBlock(BeaconState stateAtBlockSlot) {\n+    SSZMutableList<T> itemsToPutInBlock =\n+        SSZList.createMutable(clazz, maxNumberOfElementsInBlock.get(clazz));\n+    Iterator<T> iter = operations.iterator();\n+    int count = 0;\n+    int numberOfElementsToGet = maxNumberOfElementsInBlock.get(clazz);\n+    while (count < numberOfElementsToGet && iter.hasNext()) {\n+      T item = iter.next();\n+      if (operationValidator.validate(stateAtBlockSlot, item).isEmpty()) {\n+        itemsToPutInBlock.add(item);\n+        count++;\n+      }\n+      iter.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyODA1Ng=="}, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1MDQyOA==", "bodyText": "That's a fair point.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439650428", "createdAt": "2020-06-12T21:31:01Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import tech.pegasys.teku.core.operationvalidators.OperationStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class OperationPool<T> {\n+\n+  private static Map<Class<?>, Integer> maxNumberOfElementsInBlock =\n+      Map.of(\n+          SignedVoluntaryExit.class, Constants.MAX_VOLUNTARY_EXITS,\n+          ProposerSlashing.class, Constants.MAX_PROPOSER_SLASHINGS,\n+          AttesterSlashing.class, Constants.MAX_ATTESTER_SLASHINGS);\n+\n+  private Set<T> operations = new HashSet<>();\n+  private OperationStateTransitionValidator<T> operationValidator;\n+  private Class<T> clazz;\n+\n+  public OperationPool(Class<T> clazz, OperationStateTransitionValidator<T> operationValidator) {\n+    this.clazz = clazz;\n+    this.operationValidator = operationValidator;\n+  }\n+\n+  public SSZList<T> getItemsForBlock(BeaconState stateAtBlockSlot) {\n+    SSZMutableList<T> itemsToPutInBlock =\n+        SSZList.createMutable(clazz, maxNumberOfElementsInBlock.get(clazz));\n+    Iterator<T> iter = operations.iterator();\n+    int count = 0;\n+    int numberOfElementsToGet = maxNumberOfElementsInBlock.get(clazz);\n+    while (count < numberOfElementsToGet && iter.hasNext()) {\n+      T item = iter.next();\n+      if (operationValidator.validate(stateAtBlockSlot, item).isEmpty()) {\n+        itemsToPutInBlock.add(item);\n+        count++;\n+      }\n+      iter.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyODA1Ng=="}, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1MDQ1OQ==", "bodyText": "Making the change.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439650459", "createdAt": "2020-06-12T21:31:07Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import tech.pegasys.teku.core.operationvalidators.OperationStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class OperationPool<T> {\n+\n+  private static Map<Class<?>, Integer> maxNumberOfElementsInBlock =\n+      Map.of(\n+          SignedVoluntaryExit.class, Constants.MAX_VOLUNTARY_EXITS,\n+          ProposerSlashing.class, Constants.MAX_PROPOSER_SLASHINGS,\n+          AttesterSlashing.class, Constants.MAX_ATTESTER_SLASHINGS);\n+\n+  private Set<T> operations = new HashSet<>();\n+  private OperationStateTransitionValidator<T> operationValidator;\n+  private Class<T> clazz;\n+\n+  public OperationPool(Class<T> clazz, OperationStateTransitionValidator<T> operationValidator) {\n+    this.clazz = clazz;\n+    this.operationValidator = operationValidator;\n+  }\n+\n+  public SSZList<T> getItemsForBlock(BeaconState stateAtBlockSlot) {\n+    SSZMutableList<T> itemsToPutInBlock =\n+        SSZList.createMutable(clazz, maxNumberOfElementsInBlock.get(clazz));\n+    Iterator<T> iter = operations.iterator();\n+    int count = 0;\n+    int numberOfElementsToGet = maxNumberOfElementsInBlock.get(clazz);\n+    while (count < numberOfElementsToGet && iter.hasNext()) {\n+      T item = iter.next();\n+      if (operationValidator.validate(stateAtBlockSlot, item).isEmpty()) {\n+        itemsToPutInBlock.add(item);\n+        count++;\n+      }\n+      iter.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyODA1Ng=="}, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1MDQ5Mw==", "bodyText": "Or maybe it would be better to toss them into a limited reorg collection or something so we don't keep re-processing them ... In which case we could just leave it for a follow-up", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439650493", "createdAt": "2020-06-12T21:31:12Z", "author": {"login": "mbaxter"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import tech.pegasys.teku.core.operationvalidators.OperationStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class OperationPool<T> {\n+\n+  private static Map<Class<?>, Integer> maxNumberOfElementsInBlock =\n+      Map.of(\n+          SignedVoluntaryExit.class, Constants.MAX_VOLUNTARY_EXITS,\n+          ProposerSlashing.class, Constants.MAX_PROPOSER_SLASHINGS,\n+          AttesterSlashing.class, Constants.MAX_ATTESTER_SLASHINGS);\n+\n+  private Set<T> operations = new HashSet<>();\n+  private OperationStateTransitionValidator<T> operationValidator;\n+  private Class<T> clazz;\n+\n+  public OperationPool(Class<T> clazz, OperationStateTransitionValidator<T> operationValidator) {\n+    this.clazz = clazz;\n+    this.operationValidator = operationValidator;\n+  }\n+\n+  public SSZList<T> getItemsForBlock(BeaconState stateAtBlockSlot) {\n+    SSZMutableList<T> itemsToPutInBlock =\n+        SSZList.createMutable(clazz, maxNumberOfElementsInBlock.get(clazz));\n+    Iterator<T> iter = operations.iterator();\n+    int count = 0;\n+    int numberOfElementsToGet = maxNumberOfElementsInBlock.get(clazz);\n+    while (count < numberOfElementsToGet && iter.hasNext()) {\n+      T item = iter.next();\n+      if (operationValidator.validate(stateAtBlockSlot, item).isEmpty()) {\n+        itemsToPutInBlock.add(item);\n+        count++;\n+      }\n+      iter.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyODA1Ng=="}, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1MDY2MA==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439650660", "createdAt": "2020-06-12T21:31:44Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import tech.pegasys.teku.core.operationvalidators.OperationStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class OperationPool<T> {\n+\n+  private static Map<Class<?>, Integer> maxNumberOfElementsInBlock =\n+      Map.of(\n+          SignedVoluntaryExit.class, Constants.MAX_VOLUNTARY_EXITS,\n+          ProposerSlashing.class, Constants.MAX_PROPOSER_SLASHINGS,\n+          AttesterSlashing.class, Constants.MAX_ATTESTER_SLASHINGS);\n+\n+  private Set<T> operations = new HashSet<>();\n+  private OperationStateTransitionValidator<T> operationValidator;\n+  private Class<T> clazz;\n+\n+  public OperationPool(Class<T> clazz, OperationStateTransitionValidator<T> operationValidator) {\n+    this.clazz = clazz;\n+    this.operationValidator = operationValidator;\n+  }\n+\n+  public SSZList<T> getItemsForBlock(BeaconState stateAtBlockSlot) {\n+    SSZMutableList<T> itemsToPutInBlock =\n+        SSZList.createMutable(clazz, maxNumberOfElementsInBlock.get(clazz));\n+    Iterator<T> iter = operations.iterator();\n+    int count = 0;\n+    int numberOfElementsToGet = maxNumberOfElementsInBlock.get(clazz);\n+    while (count < numberOfElementsToGet && iter.hasNext()) {\n+      T item = iter.next();\n+      if (operationValidator.validate(stateAtBlockSlot, item).isEmpty()) {\n+        itemsToPutInBlock.add(item);\n+        count++;\n+      }\n+      iter.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyODA1Ng=="}, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1MjcyMg==", "bodyText": "I set the operations to 1000 for each pool, which shouldn't be too much of a processing issue. But I don't have any strong preference. Want me to drop the operations or keep them?", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439652722", "createdAt": "2020-06-12T21:38:27Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import tech.pegasys.teku.core.operationvalidators.OperationStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class OperationPool<T> {\n+\n+  private static Map<Class<?>, Integer> maxNumberOfElementsInBlock =\n+      Map.of(\n+          SignedVoluntaryExit.class, Constants.MAX_VOLUNTARY_EXITS,\n+          ProposerSlashing.class, Constants.MAX_PROPOSER_SLASHINGS,\n+          AttesterSlashing.class, Constants.MAX_ATTESTER_SLASHINGS);\n+\n+  private Set<T> operations = new HashSet<>();\n+  private OperationStateTransitionValidator<T> operationValidator;\n+  private Class<T> clazz;\n+\n+  public OperationPool(Class<T> clazz, OperationStateTransitionValidator<T> operationValidator) {\n+    this.clazz = clazz;\n+    this.operationValidator = operationValidator;\n+  }\n+\n+  public SSZList<T> getItemsForBlock(BeaconState stateAtBlockSlot) {\n+    SSZMutableList<T> itemsToPutInBlock =\n+        SSZList.createMutable(clazz, maxNumberOfElementsInBlock.get(clazz));\n+    Iterator<T> iter = operations.iterator();\n+    int count = 0;\n+    int numberOfElementsToGet = maxNumberOfElementsInBlock.get(clazz);\n+    while (count < numberOfElementsToGet && iter.hasNext()) {\n+      T item = iter.next();\n+      if (operationValidator.validate(stateAtBlockSlot, item).isEmpty()) {\n+        itemsToPutInBlock.add(item);\n+        count++;\n+      }\n+      iter.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyODA1Ng=="}, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1NjgyNw==", "bodyText": "Maybe it's better to just come back to the reorg handling - lets make sure there's a ticket for reorg handling that links to this line of code.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439656827", "createdAt": "2020-06-12T21:51:57Z", "author": {"login": "mbaxter"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import tech.pegasys.teku.core.operationvalidators.OperationStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class OperationPool<T> {\n+\n+  private static Map<Class<?>, Integer> maxNumberOfElementsInBlock =\n+      Map.of(\n+          SignedVoluntaryExit.class, Constants.MAX_VOLUNTARY_EXITS,\n+          ProposerSlashing.class, Constants.MAX_PROPOSER_SLASHINGS,\n+          AttesterSlashing.class, Constants.MAX_ATTESTER_SLASHINGS);\n+\n+  private Set<T> operations = new HashSet<>();\n+  private OperationStateTransitionValidator<T> operationValidator;\n+  private Class<T> clazz;\n+\n+  public OperationPool(Class<T> clazz, OperationStateTransitionValidator<T> operationValidator) {\n+    this.clazz = clazz;\n+    this.operationValidator = operationValidator;\n+  }\n+\n+  public SSZList<T> getItemsForBlock(BeaconState stateAtBlockSlot) {\n+    SSZMutableList<T> itemsToPutInBlock =\n+        SSZList.createMutable(clazz, maxNumberOfElementsInBlock.get(clazz));\n+    Iterator<T> iter = operations.iterator();\n+    int count = 0;\n+    int numberOfElementsToGet = maxNumberOfElementsInBlock.get(clazz);\n+    while (count < numberOfElementsToGet && iter.hasNext()) {\n+      T item = iter.next();\n+      if (operationValidator.validate(stateAtBlockSlot, item).isEmpty()) {\n+        itemsToPutInBlock.add(item);\n+        count++;\n+      }\n+      iter.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYyODA1Ng=="}, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODcwMjc5OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/AttesterSlashingTopicHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDozNTo1MlrOGjQ8XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMToyNzozM1rOGjSEFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMDk0MQ==", "bodyText": "We should probably verify that the consumer gets called where expected.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439630941", "createdAt": "2020-06-12T20:35:52Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/AttesterSlashingTopicHandlerTest.java", "diffHunk": "@@ -46,7 +51,7 @@\n \n   private AttesterSlashingTopicHandler topicHandler =\n       new AttesterSlashingTopicHandler(\n-          gossipEncoding, dataStructureUtil.randomForkInfo(), validator);\n+          gossipEncoding, dataStructureUtil.randomForkInfo(), validator, consumer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0OTMwMw==", "bodyText": "Done for all 3 new topic handlers.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439649303", "createdAt": "2020-06-12T21:27:33Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/AttesterSlashingTopicHandlerTest.java", "diffHunk": "@@ -46,7 +51,7 @@\n \n   private AttesterSlashingTopicHandler topicHandler =\n       new AttesterSlashingTopicHandler(\n-          gossipEncoding, dataStructureUtil.randomForkInfo(), validator);\n+          gossipEncoding, dataStructureUtil.randomForkInfo(), validator, consumer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMDk0MQ=="}, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODcwOTI0OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/testFixtures/java/tech/pegasys/teku/networking/eth2/Eth2NetworkFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDozODoxOFrOGjRAQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMTo1MDozNlrOGjSfyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMTkzOA==", "bodyText": "We should set these to a no-op value rather than leaving them null.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439631938", "createdAt": "2020-06-12T20:38:18Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/testFixtures/java/tech/pegasys/teku/networking/eth2/Eth2NetworkFactory.java", "diffHunk": "@@ -89,7 +94,10 @@ public void stopAll() {\n     protected AsyncRunner asyncRunner;\n     protected EventBus eventBus;\n     protected RecentChainData recentChainData;\n-    protected GossipedAttestationConsumer gossipedAttestationConsumer;\n+    protected GossipedOperationConsumer<ValidateableAttestation> gossipedAttestationConsumer;\n+    protected GossipedOperationConsumer<AttesterSlashing> gossipedAttesterSlashingConsumer;\n+    protected GossipedOperationConsumer<ProposerSlashing> gossipedProposerSlashingConsumer;\n+    protected GossipedOperationConsumer<SignedVoluntaryExit> gossipedVoluntaryExitConsumer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1NjM5Mw==", "bodyText": "Done.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439656393", "createdAt": "2020-06-12T21:50:36Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/testFixtures/java/tech/pegasys/teku/networking/eth2/Eth2NetworkFactory.java", "diffHunk": "@@ -89,7 +94,10 @@ public void stopAll() {\n     protected AsyncRunner asyncRunner;\n     protected EventBus eventBus;\n     protected RecentChainData recentChainData;\n-    protected GossipedAttestationConsumer gossipedAttestationConsumer;\n+    protected GossipedOperationConsumer<ValidateableAttestation> gossipedAttestationConsumer;\n+    protected GossipedOperationConsumer<AttesterSlashing> gossipedAttesterSlashingConsumer;\n+    protected GossipedOperationConsumer<ProposerSlashing> gossipedProposerSlashingConsumer;\n+    protected GossipedOperationConsumer<SignedVoluntaryExit> gossipedVoluntaryExitConsumer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMTkzOA=="}, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODcxMzM3OnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2NetworkBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDo0MDoxMVrOGjRC9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMTo0NTo0OVrOGjSabw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMjYyOQ==", "bodyText": "We should either set these to a no-op value by default, or validate() that they get set if we want them to be required.  I'd think setting them with no-op values is probably fine.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439632629", "createdAt": "2020-06-12T20:40:11Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2NetworkBuilder.java", "diffHunk": "@@ -50,7 +54,10 @@\n   private Eth2Config eth2Config;\n   private EventBus eventBus;\n   private RecentChainData recentChainData;\n-  private GossipedAttestationConsumer gossipedAttestationConsumer;\n+  private GossipedOperationConsumer<ValidateableAttestation> gossipedAttestationConsumer;\n+  private GossipedOperationConsumer<AttesterSlashing> gossipedAttesterSlashingConsumer;\n+  private GossipedOperationConsumer<ProposerSlashing> gossipedProposerSlashingConsumer;\n+  private GossipedOperationConsumer<SignedVoluntaryExit> gossipedVoluntaryExitConsumer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1NTAyMw==", "bodyText": "Validating makes sense to me.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439655023", "createdAt": "2020-06-12T21:45:49Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2NetworkBuilder.java", "diffHunk": "@@ -50,7 +54,10 @@\n   private Eth2Config eth2Config;\n   private EventBus eventBus;\n   private RecentChainData recentChainData;\n-  private GossipedAttestationConsumer gossipedAttestationConsumer;\n+  private GossipedOperationConsumer<ValidateableAttestation> gossipedAttestationConsumer;\n+  private GossipedOperationConsumer<AttesterSlashing> gossipedAttesterSlashingConsumer;\n+  private GossipedOperationConsumer<ProposerSlashing> gossipedProposerSlashingConsumer;\n+  private GossipedOperationConsumer<SignedVoluntaryExit> gossipedVoluntaryExitConsumer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzMjYyOQ=="}, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODczMjE4OnYy", "diffSide": "RIGHT", "path": "validator/coordinator/src/test/java/tech/pegasys/teku/validator/coordinator/BlockFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMDo0Nzo0N1rOGjROoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMTozNjo1M1rOGjSPjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzNTYxNw==", "bodyText": "We should probably check that these actually get included.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439635617", "createdAt": "2020-06-12T20:47:47Z", "author": {"login": "mbaxter"}, "path": "validator/coordinator/src/test/java/tech/pegasys/teku/validator/coordinator/BlockFactoryTest.java", "diffHunk": "@@ -73,6 +90,9 @@\n   void setUp() {\n     when(depositProvider.getDeposits(any(), any())).thenReturn(deposits);\n     when(attestationsPool.getAttestationsForBlock(any())).thenReturn(attestations);\n+    when(attesterSlashingPool.getItemsForBlock(any())).thenReturn(attesterSlashings);\n+    when(proposerSlashingPool.getItemsForBlock(any())).thenReturn(proposerSlashings);\n+    when(voluntaryExitPool.getItemsForBlock(any())).thenReturn(voluntaryExits);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1MjIzOQ==", "bodyText": "Good catch. Done.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439652239", "createdAt": "2020-06-12T21:36:53Z", "author": {"login": "cemozerr"}, "path": "validator/coordinator/src/test/java/tech/pegasys/teku/validator/coordinator/BlockFactoryTest.java", "diffHunk": "@@ -73,6 +90,9 @@\n   void setUp() {\n     when(depositProvider.getDeposits(any(), any())).thenReturn(deposits);\n     when(attestationsPool.getAttestationsForBlock(any())).thenReturn(attestations);\n+    when(attesterSlashingPool.getItemsForBlock(any())).thenReturn(attesterSlashings);\n+    when(proposerSlashingPool.getItemsForBlock(any())).thenReturn(proposerSlashings);\n+    when(voluntaryExitPool.getItemsForBlock(any())).thenReturn(voluntaryExits);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYzNTYxNw=="}, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODgxNTY2OnYy", "diffSide": "RIGHT", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMToyNjo1MVrOGjSDLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMTozMjo1OVrOGjSK0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0OTA3MA==", "bodyText": "We probably want to limit the size of this right?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Set<T> operations = new HashSet<>();\n          \n          \n            \n              private Set<T> operations = LimitedSet.create(...);", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439649070", "createdAt": "2020-06-12T21:26:51Z", "author": {"login": "mbaxter"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import tech.pegasys.teku.core.operationvalidators.OperationStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class OperationPool<T> {\n+\n+  private static Map<Class<?>, Integer> maxNumberOfElementsInBlock =\n+      Map.of(\n+          SignedVoluntaryExit.class, Constants.MAX_VOLUNTARY_EXITS,\n+          ProposerSlashing.class, Constants.MAX_PROPOSER_SLASHINGS,\n+          AttesterSlashing.class, Constants.MAX_ATTESTER_SLASHINGS);\n+\n+  private Set<T> operations = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0OTY0Nw==", "bodyText": "Yeah we probably do. Any suggestions on the sizes of these sets?", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439649647", "createdAt": "2020-06-12T21:28:42Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import tech.pegasys.teku.core.operationvalidators.OperationStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class OperationPool<T> {\n+\n+  private static Map<Class<?>, Integer> maxNumberOfElementsInBlock =\n+      Map.of(\n+          SignedVoluntaryExit.class, Constants.MAX_VOLUNTARY_EXITS,\n+          ProposerSlashing.class, Constants.MAX_PROPOSER_SLASHINGS,\n+          AttesterSlashing.class, Constants.MAX_ATTESTER_SLASHINGS);\n+\n+  private Set<T> operations = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0OTA3MA=="}, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1MTAyNA==", "bodyText": "Done. Put 1000 for now.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439651024", "createdAt": "2020-06-12T21:32:59Z", "author": {"login": "cemozerr"}, "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/OperationPool.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import tech.pegasys.teku.core.operationvalidators.OperationStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.ProposerSlashing;\n+import tech.pegasys.teku.datastructures.operations.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZList;\n+import tech.pegasys.teku.ssz.SSZTypes.SSZMutableList;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class OperationPool<T> {\n+\n+  private static Map<Class<?>, Integer> maxNumberOfElementsInBlock =\n+      Map.of(\n+          SignedVoluntaryExit.class, Constants.MAX_VOLUNTARY_EXITS,\n+          ProposerSlashing.class, Constants.MAX_PROPOSER_SLASHINGS,\n+          AttesterSlashing.class, Constants.MAX_ATTESTER_SLASHINGS);\n+\n+  private Set<T> operations = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY0OTA3MA=="}, "originalCommit": {"oid": "4317929f19713a5d20cb4c590776e8d348ea08e3"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODg3MjMzOnYy", "diffSide": "RIGHT", "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/AttesterSlashingTopicHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMTo1NjowOVrOGjSmLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNDozODowNlrOGj1HYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1ODAyOA==", "bodyText": "We should also verify this isn't called in the other cases :D", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r439658028", "createdAt": "2020-06-12T21:56:09Z", "author": {"login": "mbaxter"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/AttesterSlashingTopicHandlerTest.java", "diffHunk": "@@ -60,6 +66,7 @@ public void handleMessage_validSlashing() {\n     Bytes serialized = gossipEncoding.encode(slashing);\n     final ValidationResult result = topicHandler.handleMessage(serialized);\n     assertThat(result).isEqualTo(ValidationResult.Valid);\n+    verify(consumer).forward(slashing);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "476baae17d9131595764ac1fa2817103c184979b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIyMzU4NA==", "bodyText": "Great point. I've added the checks.", "url": "https://github.com/ConsenSys/teku/pull/2139#discussion_r440223584", "createdAt": "2020-06-15T14:38:06Z", "author": {"login": "cemozerr"}, "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/AttesterSlashingTopicHandlerTest.java", "diffHunk": "@@ -60,6 +66,7 @@ public void handleMessage_validSlashing() {\n     Bytes serialized = gossipEncoding.encode(slashing);\n     final ValidationResult result = topicHandler.handleMessage(serialized);\n     assertThat(result).isEqualTo(ValidationResult.Valid);\n+    verify(consumer).forward(slashing);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1ODAyOA=="}, "originalCommit": {"oid": "476baae17d9131595764ac1fa2817103c184979b"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3596, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}