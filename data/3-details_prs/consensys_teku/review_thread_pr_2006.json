{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MjY1Nzcz", "number": 2006, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMzo0MDo0NFrOEBN1uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMDozMDoxOVrOECXamA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzEwNzc2OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/StateTransition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMzo0MDo0NFrOGc7_zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjozMzowN1rOGdRnQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5NjMwMg==", "bodyText": "This doesn't feel like the right place for this.  I'd be very tempted to split it into it's own class.  My natural inclination is to make it not static as well but given where it gets used from maybe not in this case...", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r432996302", "createdAt": "2020-05-31T23:40:44Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/StateTransition.java", "diffHunk": "@@ -62,6 +70,60 @@ public StateTransition(BlockValidator blockValidator) {\n     this(Optional.empty(), blockValidator);\n   }\n \n+  public static Map<Bytes32, BeaconState> produceStatesForBlocks(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1c7676c2ec212922d1369ac6788e4bf3708192"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1MDQ2Ng==", "bodyText": "Moved this into a new class called StateGenerator", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r433350466", "createdAt": "2020-06-01T16:33:07Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/StateTransition.java", "diffHunk": "@@ -62,6 +70,60 @@ public StateTransition(BlockValidator blockValidator) {\n     this(Optional.empty(), blockValidator);\n   }\n \n+  public static Map<Bytes32, BeaconState> produceStatesForBlocks(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5NjMwMg=="}, "originalCommit": {"oid": "fc1c7676c2ec212922d1369ac6788e4bf3708192"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzExNTAyOnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/Store.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMzo1Mjo0MFrOGc8DrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMzo1Mjo0MFrOGc8DrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5NzI5Mw==", "bodyText": "nit: Can use a method reference here.", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r432997293", "createdAt": "2020-05-31T23:52:40Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/Store.java", "diffHunk": "@@ -354,15 +450,68 @@ public VoteTracker getVote(UnsignedLong validatorIndex) {\n \n     @CheckReturnValue\n     public SafeFuture<Void> commit() {\n+      final Map<Bytes32, SignedBeaconBlock> hotBlocks = new HashMap<>();\n+      // To start all blocks are assumed to be hot blocks\n+      hotBlocks.putAll(blocks);\n+\n+      // If a new checkpoint has been finalized, calculated what to finalize and what to prune\n+      final UnsignedLong previouslyFinalizedEpoch = Store.this.finalized_checkpoint.getEpoch();\n+      final Optional<UnsignedLong> newlyFinalizedEpoch =\n+          finalized_checkpoint\n+              .map(Checkpoint::getEpoch)\n+              .filter(epoch -> epoch.compareTo(previouslyFinalizedEpoch) > 0);\n+      // Calculate finalized chain data\n+      final Map<Bytes32, SignedBlockAndState> finalizedChainData;\n+      final Map<UnsignedLong, Set<Bytes32>> prunedHotBlockRoots;\n+      final Set<Checkpoint> staleCheckpointStates;\n+      final Optional<SignedBeaconBlock> newlyFinalizedBlock;\n+      if (newlyFinalizedEpoch.isPresent()) {\n+        final SignedBlockAndState previouslyFinalizedBlock =\n+            getBlockAndState(Store.this.finalized_checkpoint.getRoot())\n+                .orElseThrow(() -> new IllegalStateException(\"Finalized block is missing\"));\n+        final SignedBlockAndState newlyFinalizedBlockAndState =\n+            getBlockAndState(finalized_checkpoint.get().getRoot())\n+                .orElseThrow(() -> new IllegalStateException(\"Newly finalized block is missing\"));\n+        newlyFinalizedBlock = Optional.of(newlyFinalizedBlockAndState.getBlock());\n+\n+        finalizedChainData =\n+            getFinalizedChainData(previouslyFinalizedBlock, newlyFinalizedBlockAndState);\n+        prunedHotBlockRoots =\n+            getPrunedHotBlockRoots(\n+                finalized_checkpoint.get(), newlyFinalizedBlock.get(), hotBlocks);\n+        // Collect stale checkpoint states to be deleted\n+        staleCheckpointStates =\n+            Store.this.checkpoint_states.keySet().stream()\n+                .filter(c -> c.getEpoch().compareTo(newlyFinalizedEpoch.get()) < 0)\n+                .collect(Collectors.toSet());\n+\n+        // Make sure we save the checkpoint state for the new finalized checkpoint\n+        checkpoint_states.put(finalized_checkpoint.get(), newlyFinalizedBlockAndState.getState());\n+\n+        // Remove pruned blocks from hot blocks\n+        prunedHotBlockRoots.forEach((slot, roots) -> roots.forEach(hotBlocks::remove));\n+      } else {\n+        newlyFinalizedBlock = Optional.empty();\n+        finalizedChainData = Collections.emptyMap();\n+        prunedHotBlockRoots = Collections.emptyMap();\n+        staleCheckpointStates = Collections.emptySet();\n+      }\n+\n+      final Set<Bytes32> prunedRootsSet =\n+          prunedHotBlockRoots.values().stream()\n+              .flatMap(roots -> roots.stream())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1c7676c2ec212922d1369ac6788e4bf3708192"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzExNjQ0OnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/Store.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMzo1NToyNFrOGc8Egg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMzo1NToyNFrOGc8Egg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5NzUwNg==", "bodyText": "nit: Can just be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final Map<Bytes32, SignedBeaconBlock> hotBlocks = new HashMap<>();\n          \n          \n            \n                  // To start all blocks are assumed to be hot blocks\n          \n          \n            \n                  hotBlocks.putAll(blocks);\n          \n          \n            \n                  // To start all blocks are assumed to be hot blocks\n          \n          \n            \n                  final Map<Bytes32, SignedBeaconBlock> hotBlocks = new HashMap<>(blocks);", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r432997506", "createdAt": "2020-05-31T23:55:24Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/Store.java", "diffHunk": "@@ -354,15 +450,68 @@ public VoteTracker getVote(UnsignedLong validatorIndex) {\n \n     @CheckReturnValue\n     public SafeFuture<Void> commit() {\n+      final Map<Bytes32, SignedBeaconBlock> hotBlocks = new HashMap<>();\n+      // To start all blocks are assumed to be hot blocks\n+      hotBlocks.putAll(blocks);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1c7676c2ec212922d1369ac6788e4bf3708192"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzExODgwOnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/Store.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQyMzo1OToyNVrOGc8Fyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjozNToyMVrOGdRsGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5NzgzNA==", "bodyText": "This method has gotten pretty big.  It's not easy to split up but I wonder if the calculation of finalised chain data could be separated out and return an object with newlyFinalizedBlock, finalizedChainData, prunedHotBlockRoots, staleCheckpointStates.  It's probably more code overall but I think helps to improve readability overall though.\nHappy to leave it for now if it's likely to get changed again in later PRs though.", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r432997834", "createdAt": "2020-05-31T23:59:25Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/Store.java", "diffHunk": "@@ -354,15 +450,68 @@ public VoteTracker getVote(UnsignedLong validatorIndex) {\n \n     @CheckReturnValue\n     public SafeFuture<Void> commit() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1c7676c2ec212922d1369ac6788e4bf3708192"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1MTcwNw==", "bodyText": "Yeah - there's a lot of logic here.  Tried to reorganize a little here, but not sure how much better this is: 6199f6d\nIt's messy because there are all of the cross-references to the current transaction and underlying Store.", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r433351707", "createdAt": "2020-06-01T16:35:21Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/Store.java", "diffHunk": "@@ -354,15 +450,68 @@ public VoteTracker getVote(UnsignedLong validatorIndex) {\n \n     @CheckReturnValue\n     public SafeFuture<Void> commit() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5NzgzNA=="}, "originalCommit": {"oid": "fc1c7676c2ec212922d1369ac6788e4bf3708192"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzEyMjIyOnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/Store.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMDowNTowMFrOGc8Hmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxMDowMlrOGdOFFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5ODI5OQ==", "bodyText": "Don't these need to be the other way around?  First put all the existing data into the map, then add the new values? Otherwise if the new blocks are from the same slot as any existing block the putAll will overwrite the set (whereas it should merge them).", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r432998299", "createdAt": "2020-06-01T00:05:00Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/Store.java", "diffHunk": "@@ -403,6 +561,74 @@ public VoteTracker getVote(UnsignedLong validatorIndex) {\n               });\n     }\n \n+    private Map<Bytes32, SignedBlockAndState> getFinalizedChainData(\n+        final SignedBlockAndState previouslyFinalizedBlock,\n+        final SignedBlockAndState newlyFinalizedBlock) {\n+      final Map<Bytes32, SignedBlockAndState> finalizedChainData = new HashMap<>();\n+\n+      SignedBlockAndState oldestFinalizedBlock = newlyFinalizedBlock;\n+      SignedBlockAndState currentBlock = newlyFinalizedBlock;\n+      while (currentBlock != null\n+          && currentBlock.getSlot().compareTo(previouslyFinalizedBlock.getSlot()) > 0) {\n+        finalizedChainData.put(currentBlock.getRoot(), currentBlock);\n+        oldestFinalizedBlock = currentBlock;\n+        currentBlock = getBlockAndState(currentBlock.getParentRoot()).orElse(null);\n+      }\n+\n+      // Make sure we capture all finalized blocks\n+      if (!oldestFinalizedBlock.getParentRoot().equals(previouslyFinalizedBlock.getRoot())) {\n+        throw new IllegalStateException(\"Unable to retrieve all finalized blocks\");\n+      }\n+\n+      return finalizedChainData;\n+    }\n+\n+    private Map<UnsignedLong, Set<Bytes32>> getPrunedHotBlockRoots(\n+        final Checkpoint newFinalizedCheckpoint,\n+        final SignedBeaconBlock finalizedBlock,\n+        final Map<Bytes32, SignedBeaconBlock> newBlocks) {\n+      final UnsignedLong finalizedSlot = newFinalizedCheckpoint.getEpochStartSlot();\n+      Map<UnsignedLong, Set<Bytes32>> prunedBlockRoots = new HashMap<>();\n+\n+      // Build combined index from slot to block root for new and existing blocks\n+      final NavigableMap<UnsignedLong, Set<Bytes32>> slotToHotBlockRootIndex = new TreeMap<>();\n+      indexBlockRootsBySlot(slotToHotBlockRootIndex, newBlocks.values());\n+      slotToHotBlockRootIndex.putAll(rootsBySlotLookup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1c7676c2ec212922d1369ac6788e4bf3708192"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5MjU2Ng==", "bodyText": "yes - good catch!  will make sure we have some tests around this.", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r433292566", "createdAt": "2020-06-01T15:10:02Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/Store.java", "diffHunk": "@@ -403,6 +561,74 @@ public VoteTracker getVote(UnsignedLong validatorIndex) {\n               });\n     }\n \n+    private Map<Bytes32, SignedBlockAndState> getFinalizedChainData(\n+        final SignedBlockAndState previouslyFinalizedBlock,\n+        final SignedBlockAndState newlyFinalizedBlock) {\n+      final Map<Bytes32, SignedBlockAndState> finalizedChainData = new HashMap<>();\n+\n+      SignedBlockAndState oldestFinalizedBlock = newlyFinalizedBlock;\n+      SignedBlockAndState currentBlock = newlyFinalizedBlock;\n+      while (currentBlock != null\n+          && currentBlock.getSlot().compareTo(previouslyFinalizedBlock.getSlot()) > 0) {\n+        finalizedChainData.put(currentBlock.getRoot(), currentBlock);\n+        oldestFinalizedBlock = currentBlock;\n+        currentBlock = getBlockAndState(currentBlock.getParentRoot()).orElse(null);\n+      }\n+\n+      // Make sure we capture all finalized blocks\n+      if (!oldestFinalizedBlock.getParentRoot().equals(previouslyFinalizedBlock.getRoot())) {\n+        throw new IllegalStateException(\"Unable to retrieve all finalized blocks\");\n+      }\n+\n+      return finalizedChainData;\n+    }\n+\n+    private Map<UnsignedLong, Set<Bytes32>> getPrunedHotBlockRoots(\n+        final Checkpoint newFinalizedCheckpoint,\n+        final SignedBeaconBlock finalizedBlock,\n+        final Map<Bytes32, SignedBeaconBlock> newBlocks) {\n+      final UnsignedLong finalizedSlot = newFinalizedCheckpoint.getEpochStartSlot();\n+      Map<UnsignedLong, Set<Bytes32>> prunedBlockRoots = new HashMap<>();\n+\n+      // Build combined index from slot to block root for new and existing blocks\n+      final NavigableMap<UnsignedLong, Set<Bytes32>> slotToHotBlockRootIndex = new TreeMap<>();\n+      indexBlockRootsBySlot(slotToHotBlockRootIndex, newBlocks.values());\n+      slotToHotBlockRootIndex.putAll(rootsBySlotLookup);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5ODI5OQ=="}, "originalCommit": {"oid": "fc1c7676c2ec212922d1369ac6788e4bf3708192"}, "originalPosition": 293}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzE1NDQwOnYy", "diffSide": "LEFT", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/schema/V3Schema.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMDo0NjozOFrOGc8ZQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjozMToyMFrOGdRjig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwMjgxNg==", "bodyText": "Just confirming - this doesn't break backwards compatibility because it's not a column itself - there will just be a value stored in the DB which we no longer use?", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r433002816", "createdAt": "2020-06-01T00:46:38Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/schema/V3Schema.java", "diffHunk": "@@ -57,7 +57,6 @@\n       RocksDbVariable.create(3, CHECKPOINT_SERIALIZER);\n   RocksDbVariable<Checkpoint> FINALIZED_CHECKPOINT =\n       RocksDbVariable.create(4, CHECKPOINT_SERIALIZER);\n-  RocksDbVariable<BeaconState> LATEST_FINALIZED_STATE = RocksDbVariable.create(5, STATE_SERIALIZER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1c7676c2ec212922d1369ac6788e4bf3708192"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0OTUxNA==", "bodyText": "Right - manually tested as well to confirm.", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r433349514", "createdAt": "2020-06-01T16:31:20Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/schema/V3Schema.java", "diffHunk": "@@ -57,7 +57,6 @@\n       RocksDbVariable.create(3, CHECKPOINT_SERIALIZER);\n   RocksDbVariable<Checkpoint> FINALIZED_CHECKPOINT =\n       RocksDbVariable.create(4, CHECKPOINT_SERIALIZER);\n-  RocksDbVariable<BeaconState> LATEST_FINALIZED_STATE = RocksDbVariable.create(5, STATE_SERIALIZER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAwMjgxNg=="}, "originalCommit": {"oid": "fc1c7676c2ec212922d1369ac6788e4bf3708192"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTg5MDEyOnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/Store.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOToxMjoyOVrOGdWt9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMjozODoxMlrOGev8LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzNDEwMg==", "bodyText": "Hmm - I think the current structure is problematic.  We do these calculations upfront to figure out our updates, send those updates to storage, and only then get a writeLock to actually update our in-memory Store.  But with that setup, we could interleave multiple transactions and commit the calculated changes out of order, and run into problems while trying to calculate the updates because the Store can change out from under us ...", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r433434102", "createdAt": "2020-06-01T19:12:29Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/Store.java", "diffHunk": "@@ -354,23 +451,16 @@ public VoteTracker getVote(UnsignedLong validatorIndex) {\n \n     @CheckReturnValue\n     public SafeFuture<Void> commit() {\n-      final StorageUpdate updateEvent =\n-          new StorageUpdate(\n-              genesis_time,\n-              justified_checkpoint,\n-              finalized_checkpoint,\n-              best_justified_checkpoint,\n-              blocks,\n-              block_states,\n-              checkpoint_states,\n-              votes);\n+      final TransactionCommitUpdates updates = TransactionCommitUpdates.calculate(Store.this, this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff21d709c2eceaa3cb384b8fda90f914eea2dd38"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg5NTkxNw==", "bodyText": "Fixed this by adding a write lock around the update calculations.  This means that our update calculations are running off of a fixed Store, so we don't have to worry about any data changing while we're processing.  It's possible that we could fail to prune some new blocks that end up getting committed after we run our calculations, but those data will eventually be pruned the next time we finalize a new checkpoint.", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r434895917", "createdAt": "2020-06-03T22:38:12Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/Store.java", "diffHunk": "@@ -354,23 +451,16 @@ public VoteTracker getVote(UnsignedLong validatorIndex) {\n \n     @CheckReturnValue\n     public SafeFuture<Void> commit() {\n-      final StorageUpdate updateEvent =\n-          new StorageUpdate(\n-              genesis_time,\n-              justified_checkpoint,\n-              finalized_checkpoint,\n-              best_justified_checkpoint,\n-              blocks,\n-              block_states,\n-              checkpoint_states,\n-              votes);\n+      final TransactionCommitUpdates updates = TransactionCommitUpdates.calculate(Store.this, this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzNDEwMg=="}, "originalCommit": {"oid": "ff21d709c2eceaa3cb384b8fda90f914eea2dd38"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTA2Mzk5OnYy", "diffSide": "RIGHT", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/state/CheckpointAndBlock.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzozNDowM1rOGew-WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzozNDowM1rOGew-WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxMjg1Nw==", "bodyText": "nit: private?", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r434912857", "createdAt": "2020-06-03T23:34:03Z", "author": {"login": "ajsutton"}, "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/state/CheckpointAndBlock.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.state;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Objects;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+\n+public class CheckpointAndBlock {\n+  final Checkpoint checkpoint;\n+  final SignedBeaconBlock block;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad382275dc955e61ef01f5b029ebcf2289ee287e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTA3OTQwOnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/client/Store.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo0Mjo0NVrOGexHzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNTo1NjoxMFrOGfM08A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNTI3Nw==", "bodyText": "It's kind of terrifying for these to not be private - there's quite a bit of stuff that could be changing them. I do like having things split into separate classes though.\nMaybe we should create a dedicated store package so that we have a very clear scope of what can access this stuff?  Maybe could even introduce a MutableStore interface that most things use (which extends ReadOnlyStore and adds the startTransaction methods).  Then the actual Store is only ever passed to the store helper classes.", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r434915277", "createdAt": "2020-06-03T23:42:45Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/client/Store.java", "diffHunk": "@@ -42,27 +47,28 @@\n import tech.pegasys.teku.datastructures.forkchoice.VoteTracker;\n import tech.pegasys.teku.datastructures.state.BeaconState;\n import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.datastructures.state.CheckpointAndBlock;\n import tech.pegasys.teku.datastructures.util.BeaconStateUtil;\n import tech.pegasys.teku.storage.api.StorageUpdateChannel;\n-import tech.pegasys.teku.storage.client.FailedPrecommitException;\n-import tech.pegasys.teku.storage.events.StorageUpdate;\n import tech.pegasys.teku.util.async.SafeFuture;\n \n public class Store implements ReadOnlyStore {\n   private static final Logger LOG = LogManager.getLogger();\n   private final ReadWriteLock lock = new ReentrantReadWriteLock();\n   private final Lock readLock = lock.readLock();\n-  private UnsignedLong time;\n-  private UnsignedLong genesis_time;\n-  private Checkpoint justified_checkpoint;\n-  private Checkpoint finalized_checkpoint;\n-  private Checkpoint best_justified_checkpoint;\n-  private Map<Bytes32, SignedBeaconBlock> blocks;\n-  private Map<Bytes32, BeaconState> block_states;\n-  private Map<Checkpoint, BeaconState> checkpoint_states;\n-  private Map<UnsignedLong, VoteTracker> votes;\n-\n-  public Store(\n+  UnsignedLong time;\n+  UnsignedLong genesis_time;\n+  Checkpoint justified_checkpoint;\n+  Checkpoint finalized_checkpoint;\n+  Checkpoint best_justified_checkpoint;\n+  Map<Bytes32, SignedBeaconBlock> blocks;\n+  Map<Bytes32, BeaconState> block_states;\n+  Map<Checkpoint, BeaconState> checkpoint_states;\n+  Map<UnsignedLong, VoteTracker> votes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad382275dc955e61ef01f5b029ebcf2289ee287e"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMzMjQ3NQ==", "bodyText": "Yeah - I was a bit uncomfortable with this as well.  Isolating the Store and helper classes into a separate package sounds like a good solution \ud83d\udc4d Will fix.", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r435332475", "createdAt": "2020-06-04T15:07:50Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/client/Store.java", "diffHunk": "@@ -42,27 +47,28 @@\n import tech.pegasys.teku.datastructures.forkchoice.VoteTracker;\n import tech.pegasys.teku.datastructures.state.BeaconState;\n import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.datastructures.state.CheckpointAndBlock;\n import tech.pegasys.teku.datastructures.util.BeaconStateUtil;\n import tech.pegasys.teku.storage.api.StorageUpdateChannel;\n-import tech.pegasys.teku.storage.client.FailedPrecommitException;\n-import tech.pegasys.teku.storage.events.StorageUpdate;\n import tech.pegasys.teku.util.async.SafeFuture;\n \n public class Store implements ReadOnlyStore {\n   private static final Logger LOG = LogManager.getLogger();\n   private final ReadWriteLock lock = new ReentrantReadWriteLock();\n   private final Lock readLock = lock.readLock();\n-  private UnsignedLong time;\n-  private UnsignedLong genesis_time;\n-  private Checkpoint justified_checkpoint;\n-  private Checkpoint finalized_checkpoint;\n-  private Checkpoint best_justified_checkpoint;\n-  private Map<Bytes32, SignedBeaconBlock> blocks;\n-  private Map<Bytes32, BeaconState> block_states;\n-  private Map<Checkpoint, BeaconState> checkpoint_states;\n-  private Map<UnsignedLong, VoteTracker> votes;\n-\n-  public Store(\n+  UnsignedLong time;\n+  UnsignedLong genesis_time;\n+  Checkpoint justified_checkpoint;\n+  Checkpoint finalized_checkpoint;\n+  Checkpoint best_justified_checkpoint;\n+  Map<Bytes32, SignedBeaconBlock> blocks;\n+  Map<Bytes32, BeaconState> block_states;\n+  Map<Checkpoint, BeaconState> checkpoint_states;\n+  Map<UnsignedLong, VoteTracker> votes;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNTI3Nw=="}, "originalCommit": {"oid": "ad382275dc955e61ef01f5b029ebcf2289ee287e"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM2OTIwMA==", "bodyText": "Added some interfaces and made Store package-private: 82036c6", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r435369200", "createdAt": "2020-06-04T15:56:10Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/client/Store.java", "diffHunk": "@@ -42,27 +47,28 @@\n import tech.pegasys.teku.datastructures.forkchoice.VoteTracker;\n import tech.pegasys.teku.datastructures.state.BeaconState;\n import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.datastructures.state.CheckpointAndBlock;\n import tech.pegasys.teku.datastructures.util.BeaconStateUtil;\n import tech.pegasys.teku.storage.api.StorageUpdateChannel;\n-import tech.pegasys.teku.storage.client.FailedPrecommitException;\n-import tech.pegasys.teku.storage.events.StorageUpdate;\n import tech.pegasys.teku.util.async.SafeFuture;\n \n public class Store implements ReadOnlyStore {\n   private static final Logger LOG = LogManager.getLogger();\n   private final ReadWriteLock lock = new ReentrantReadWriteLock();\n   private final Lock readLock = lock.readLock();\n-  private UnsignedLong time;\n-  private UnsignedLong genesis_time;\n-  private Checkpoint justified_checkpoint;\n-  private Checkpoint finalized_checkpoint;\n-  private Checkpoint best_justified_checkpoint;\n-  private Map<Bytes32, SignedBeaconBlock> blocks;\n-  private Map<Bytes32, BeaconState> block_states;\n-  private Map<Checkpoint, BeaconState> checkpoint_states;\n-  private Map<UnsignedLong, VoteTracker> votes;\n-\n-  public Store(\n+  UnsignedLong time;\n+  UnsignedLong genesis_time;\n+  Checkpoint justified_checkpoint;\n+  Checkpoint finalized_checkpoint;\n+  Checkpoint best_justified_checkpoint;\n+  Map<Bytes32, SignedBeaconBlock> blocks;\n+  Map<Bytes32, BeaconState> block_states;\n+  Map<Checkpoint, BeaconState> checkpoint_states;\n+  Map<UnsignedLong, VoteTracker> votes;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNTI3Nw=="}, "originalCommit": {"oid": "ad382275dc955e61ef01f5b029ebcf2289ee287e"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTA5NTkwOnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/client/Store.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo1MTo0OVrOGexRpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNToxMDo1NVrOGfKuNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNzc5Nw==", "bodyText": "Do these blocks wind up staying on disk? And is that an issue?", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r434917797", "createdAt": "2020-06-03T23:51:49Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/client/Store.java", "diffHunk": "@@ -111,6 +120,91 @@ public static Store getForkChoiceStore(final BeaconState anchorState) {\n         votes);\n   }\n \n+  public static Store createByRegeneratingHotStates(\n+      final UnsignedLong time,\n+      final UnsignedLong genesis_time,\n+      final Checkpoint justified_checkpoint,\n+      final Checkpoint finalized_checkpoint,\n+      final Checkpoint best_justified_checkpoint,\n+      final Map<Bytes32, SignedBeaconBlock> blocks,\n+      final Map<Checkpoint, BeaconState> checkpoint_states,\n+      final BeaconState finalizedState,\n+      final Map<UnsignedLong, VoteTracker> votes) {\n+\n+    final StateGenerator stateGenerator = new StateGenerator();\n+    final Map<Bytes32, BeaconState> blockStates =\n+        stateGenerator.produceStatesForBlocks(\n+            finalized_checkpoint.getRoot(), finalizedState, blocks.values());\n+\n+    // If we couldn't regenerate states, log a warning\n+    if (blockStates.size() < blocks.size()) {\n+      LOG.warn(\"Unable to regenerate some hot states from hot blocks\");\n+\n+      // Drop any blocks for which a state couldn't be generated\n+      new HashSet<>(Sets.difference(blocks.keySet(), blockStates.keySet())).forEach(blocks::remove);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad382275dc955e61ef01f5b029ebcf2289ee287e"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMzNDcwOA==", "bodyText": "I'm not throwing an error here for backwards-compatibility reasons, but we should add an error here at some point.  For existing databases, fork blocks are pruned on restart, so they could have some invalid blocks in the database that would need to be pruned here.  I'll add a comment.", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r435334708", "createdAt": "2020-06-04T15:10:55Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/client/Store.java", "diffHunk": "@@ -111,6 +120,91 @@ public static Store getForkChoiceStore(final BeaconState anchorState) {\n         votes);\n   }\n \n+  public static Store createByRegeneratingHotStates(\n+      final UnsignedLong time,\n+      final UnsignedLong genesis_time,\n+      final Checkpoint justified_checkpoint,\n+      final Checkpoint finalized_checkpoint,\n+      final Checkpoint best_justified_checkpoint,\n+      final Map<Bytes32, SignedBeaconBlock> blocks,\n+      final Map<Checkpoint, BeaconState> checkpoint_states,\n+      final BeaconState finalizedState,\n+      final Map<UnsignedLong, VoteTracker> votes) {\n+\n+    final StateGenerator stateGenerator = new StateGenerator();\n+    final Map<Bytes32, BeaconState> blockStates =\n+        stateGenerator.produceStatesForBlocks(\n+            finalized_checkpoint.getRoot(), finalizedState, blocks.values());\n+\n+    // If we couldn't regenerate states, log a warning\n+    if (blockStates.size() < blocks.size()) {\n+      LOG.warn(\"Unable to regenerate some hot states from hot blocks\");\n+\n+      // Drop any blocks for which a state couldn't be generated\n+      new HashSet<>(Sets.difference(blocks.keySet(), blockStates.keySet())).forEach(blocks::remove);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNzc5Nw=="}, "originalCommit": {"oid": "ad382275dc955e61ef01f5b029ebcf2289ee287e"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTEwNTA4OnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/client/Store.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo1NjozMlrOGexW-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo1NjozMlrOGexW-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTE2MA==", "bodyText": "So to think through a conversation we've had offline about whether or not the call to storageUpdateChannel.onStorageUpdate needs to happen inside the write lock...\n\nWe can only have one thread importing blocks at a time, otherwise we'd mess up the in-memory state and various block validations wouldn't be accurate\nThere might be concurrent fork choice evaluations being done which would result in other store transactions interleaving, but those would only touch votes and blocks don't touch votes.\n\nThus, this is safe to do outside the write lock because no other block import can start until at least after this commit method returns, by which time the storage update has been sent and has the ordering fixed from there.\nBy releasing the write lock, even if storage is backed up read queries are able to be performed against the store which is good.\nCurrently block import waits for the returned future to complete before moving on to the next block and that will make this work, but if it didn't I believe we'd have an issue here because we aren't applying the changes to the in-memory store until the write to disk has completed.\nThe issue is that tx 1 makes the changes for block 10, then sends them off to storage, but at that point they haven't been applied to the underlying Store so are only visible to tx 1.  If the block importer didn't wait for commit to complete and moved on to block 11 - block 10 wouldn't yet be visible to it and it would fail.\nBut if we apply the additions before we know the storage works, we're a bit hosed if the storage fails because we then can't roll back.\nSo we probably need to stick with doing it this way and address it if we ever want to import blocks without waiting for storage (at which point we need to handle the error case anyway). We may want to just make commit() synchronous since everywhere that uses it does a .join() anyway.", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r434919160", "createdAt": "2020-06-03T23:56:32Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/client/Store.java", "diffHunk": "@@ -354,46 +460,25 @@ public VoteTracker getVote(UnsignedLong validatorIndex) {\n \n     @CheckReturnValue\n     public SafeFuture<Void> commit() {\n-      final StorageUpdate updateEvent =\n-          new StorageUpdate(\n-              genesis_time,\n-              justified_checkpoint,\n-              finalized_checkpoint,\n-              best_justified_checkpoint,\n-              blocks,\n-              block_states,\n-              checkpoint_states,\n-              votes);\n+      final StoreTransactionUpdates updates;\n+      // Lock so that we have a consistent view while calculating our updates\n+      final Lock writeLock = Store.this.lock.writeLock();\n+      writeLock.lock();\n+      try {\n+        updates = StoreTransactionUpdates.calculate(Store.this, this);\n+      } finally {\n+        writeLock.unlock();\n+      }\n+\n       return storageUpdateChannel\n-          .onStorageUpdate(updateEvent)\n+          .onStorageUpdate(updates.createStorageUpdate())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad382275dc955e61ef01f5b029ebcf2289ee287e"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTExNDAxOnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/client/StoreTransactionUpdates.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMDowMToyMFrOGexcEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMDowMToyMFrOGexcEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkyMDQ2Nw==", "bodyText": "It is really nice that this is in a separate class.", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r434920467", "createdAt": "2020-06-04T00:01:20Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/client/StoreTransactionUpdates.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.client;\n+\n+import static tech.pegasys.teku.storage.client.Store.indexBlockRootsBySlot;\n+import static tech.pegasys.teku.storage.client.Store.removeBlockRootFromSlotIndex;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.datastructures.state.CheckpointAndBlock;\n+import tech.pegasys.teku.storage.client.Store.Transaction;\n+import tech.pegasys.teku.storage.events.StorageUpdate;\n+\n+class StoreTransactionUpdates {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad382275dc955e61ef01f5b029ebcf2289ee287e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTE2MjQ4OnYy", "diffSide": "RIGHT", "path": "storage/src/main/java/tech/pegasys/teku/storage/client/StoreTransactionUpdates.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMDozMDoxOVrOGex4xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjowNzo0MVrOGfNTaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkyNzgxMg==", "bodyText": "Looks like it would be easier to not use an Optional here.  Just something like:\nfinal CheckpointAndBlock newFinalizedCheckpoint = tx.getFinalizedCheckpointAndBlock();\n...\nif (newFinalizedCheckpoint.getEpoch().compareTo(prevFinalizedCheckpoint.getEpoch()) > 0) {\n    ... calculate stuff to prune ...\n} else {\n  .. the empty map stuff ...\n}\n\nAlthough I guess you need the optional to pass into the StoreTransactionUpdates so happy to go either way.", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r434927812", "createdAt": "2020-06-04T00:30:19Z", "author": {"login": "ajsutton"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/client/StoreTransactionUpdates.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.client;\n+\n+import static tech.pegasys.teku.storage.client.Store.indexBlockRootsBySlot;\n+import static tech.pegasys.teku.storage.client.Store.removeBlockRootFromSlotIndex;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.datastructures.state.CheckpointAndBlock;\n+import tech.pegasys.teku.storage.client.Store.Transaction;\n+import tech.pegasys.teku.storage.events.StorageUpdate;\n+\n+class StoreTransactionUpdates {\n+  private final Store.Transaction tx;\n+\n+  private final Map<Bytes32, SignedBeaconBlock> hotBlocks;\n+  private final Map<Bytes32, SignedBlockAndState> finalizedChainData;\n+  private final Map<UnsignedLong, Set<Bytes32>> prunedHotBlockRoots;\n+  private final Map<Checkpoint, BeaconState> checkpointStates;\n+  private final Set<Checkpoint> staleCheckpointStates;\n+  private final Optional<CheckpointAndBlock> newFinalizedCheckpoint;\n+  private final Map<Bytes32, BeaconState> hotStates;\n+\n+  private StoreTransactionUpdates(\n+      final Transaction tx,\n+      final Map<Bytes32, SignedBeaconBlock> hotBlocks,\n+      final Map<Bytes32, BeaconState> hotStates,\n+      final Map<Bytes32, SignedBlockAndState> finalizedChainData,\n+      final Map<UnsignedLong, Set<Bytes32>> prunedHotBlockRoots,\n+      final Map<Checkpoint, BeaconState> checkpointStates,\n+      final Set<Checkpoint> staleCheckpointStates,\n+      final Optional<CheckpointAndBlock> newFinalizedCheckpoint) {\n+    this.tx = tx;\n+    this.hotBlocks = hotBlocks;\n+    this.hotStates = hotStates;\n+    this.finalizedChainData = finalizedChainData;\n+    this.prunedHotBlockRoots = prunedHotBlockRoots;\n+    this.checkpointStates = checkpointStates;\n+    this.staleCheckpointStates = staleCheckpointStates;\n+    this.newFinalizedCheckpoint = newFinalizedCheckpoint;\n+  }\n+\n+  public static StoreTransactionUpdates calculate(final Store baseStore, final Transaction tx) {\n+    // Save copy of tx data that may be pruned\n+    final Map<Bytes32, SignedBeaconBlock> hotBlocks = new HashMap<>(tx.blocks);\n+    final Map<Bytes32, BeaconState> hotStates = new HashMap<>(tx.block_states);\n+    final Map<Checkpoint, BeaconState> checkpointStates = new HashMap<>(tx.checkpoint_states);\n+\n+    // If a new checkpoint has been finalized, calculated what to finalize and what to prune\n+    final CheckpointAndBlock prevFinalizedCheckpoint = baseStore.getFinalizedCheckpointAndBlock();\n+    final Optional<CheckpointAndBlock> newFinalizedCheckpoint =\n+        Optional.of(tx.getFinalizedCheckpointAndBlock())\n+            .filter(c -> c.getEpoch().compareTo(prevFinalizedCheckpoint.getEpoch()) > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad382275dc955e61ef01f5b029ebcf2289ee287e"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTM3NzAwMw==", "bodyText": "\ud83d\udc4d Simplified", "url": "https://github.com/ConsenSys/teku/pull/2006#discussion_r435377003", "createdAt": "2020-06-04T16:07:41Z", "author": {"login": "mbaxter"}, "path": "storage/src/main/java/tech/pegasys/teku/storage/client/StoreTransactionUpdates.java", "diffHunk": "@@ -0,0 +1,251 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.client;\n+\n+import static tech.pegasys.teku.storage.client.Store.indexBlockRootsBySlot;\n+import static tech.pegasys.teku.storage.client.Store.removeBlockRootFromSlotIndex;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.datastructures.state.CheckpointAndBlock;\n+import tech.pegasys.teku.storage.client.Store.Transaction;\n+import tech.pegasys.teku.storage.events.StorageUpdate;\n+\n+class StoreTransactionUpdates {\n+  private final Store.Transaction tx;\n+\n+  private final Map<Bytes32, SignedBeaconBlock> hotBlocks;\n+  private final Map<Bytes32, SignedBlockAndState> finalizedChainData;\n+  private final Map<UnsignedLong, Set<Bytes32>> prunedHotBlockRoots;\n+  private final Map<Checkpoint, BeaconState> checkpointStates;\n+  private final Set<Checkpoint> staleCheckpointStates;\n+  private final Optional<CheckpointAndBlock> newFinalizedCheckpoint;\n+  private final Map<Bytes32, BeaconState> hotStates;\n+\n+  private StoreTransactionUpdates(\n+      final Transaction tx,\n+      final Map<Bytes32, SignedBeaconBlock> hotBlocks,\n+      final Map<Bytes32, BeaconState> hotStates,\n+      final Map<Bytes32, SignedBlockAndState> finalizedChainData,\n+      final Map<UnsignedLong, Set<Bytes32>> prunedHotBlockRoots,\n+      final Map<Checkpoint, BeaconState> checkpointStates,\n+      final Set<Checkpoint> staleCheckpointStates,\n+      final Optional<CheckpointAndBlock> newFinalizedCheckpoint) {\n+    this.tx = tx;\n+    this.hotBlocks = hotBlocks;\n+    this.hotStates = hotStates;\n+    this.finalizedChainData = finalizedChainData;\n+    this.prunedHotBlockRoots = prunedHotBlockRoots;\n+    this.checkpointStates = checkpointStates;\n+    this.staleCheckpointStates = staleCheckpointStates;\n+    this.newFinalizedCheckpoint = newFinalizedCheckpoint;\n+  }\n+\n+  public static StoreTransactionUpdates calculate(final Store baseStore, final Transaction tx) {\n+    // Save copy of tx data that may be pruned\n+    final Map<Bytes32, SignedBeaconBlock> hotBlocks = new HashMap<>(tx.blocks);\n+    final Map<Bytes32, BeaconState> hotStates = new HashMap<>(tx.block_states);\n+    final Map<Checkpoint, BeaconState> checkpointStates = new HashMap<>(tx.checkpoint_states);\n+\n+    // If a new checkpoint has been finalized, calculated what to finalize and what to prune\n+    final CheckpointAndBlock prevFinalizedCheckpoint = baseStore.getFinalizedCheckpointAndBlock();\n+    final Optional<CheckpointAndBlock> newFinalizedCheckpoint =\n+        Optional.of(tx.getFinalizedCheckpointAndBlock())\n+            .filter(c -> c.getEpoch().compareTo(prevFinalizedCheckpoint.getEpoch()) > 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkyNzgxMg=="}, "originalCommit": {"oid": "ad382275dc955e61ef01f5b029ebcf2289ee287e"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3688, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}