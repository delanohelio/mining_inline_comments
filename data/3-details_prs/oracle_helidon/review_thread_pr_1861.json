{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNzAwMDc3", "number": 1861, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowNjowN1rOD_ZTcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowNjozMVrOD_ZT-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODAxNDU3OnYy", "diffSide": "RIGHT", "path": "media/common/src/main/java/io/helidon/media/common/MediaContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowNjowN1rOGaCRMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDoxNzowN1rOGaClbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MzMyOQ==", "bodyText": "please do not use from classpath anywhere. Use from Java Service Loader", "url": "https://github.com/oracle/helidon/pull/1861#discussion_r429953329", "createdAt": "2020-05-25T14:06:07Z", "author": {"login": "tomas-langer"}, "path": "media/common/src/main/java/io/helidon/media/common/MediaContext.java", "diffHunk": "@@ -112,105 +140,202 @@ private Builder() {\n          *     <th>description</th>\n          * </tr>\n          * <tr>\n-         *     <td>server-errors-include-stack-traces</td>\n-         *     <td>Whether stack traces should be included in the response (server only)</td>\n-         * </tr>\n-         * <tr>\n          *     <td>register-defaults</td>\n          *     <td>Whether to register default reader and writers</td>\n          * </tr>\n+         * <tr>\n+         *     <td>discover-services</td>\n+         *     <td>Whether to discover services via service loader</td>\n+         * </tr>\n+         * <tr>\n+         *     <td>filter-services</td>\n+         *     <td>Whether to filter discovered services by service names in services section</td>\n+         * </tr>\n+         * <tr>\n+         *     <td>services</td>\n+         *     <td>Configuration section for each service. Each entry has to have \"name\" parameter.\n+         *     It is also used for filtering of loaded services.</td>\n+         * </tr>\n          * </table>\n+         *\n          * @param config a {@link Config}\n          * @return this {@link Builder}\n          */\n         public Builder config(Config config) {\n-            config.get(\"server-errors-include-stack-traces\").asBoolean().ifPresent(this::includeStackTraces);\n             config.get(\"register-defaults\").asBoolean().ifPresent(this::registerDefaults);\n+            config.get(\"discover-services\").asBoolean().ifPresent(this::discoverServices);\n+            config.get(\"filter-services\").asBoolean().ifPresent(this::filterServices);\n+            config.get(\"services\")\n+                    .asNodeList()\n+                    .ifPresent(it -> it.forEach(serviceConfig -> {\n+                        String name = serviceConfig.get(SERVICE_NAME).asString().get();\n+                        servicesConfig.merge(name,\n+                                             serviceConfig.detach().asMap().orElseGet(Map::of),\n+                                             (first, second) -> {\n+                                                 HashMap<String, String> result = new HashMap<>(first);\n+                                                 result.putAll(second);\n+                                                 return result;\n+                                             });\n+                    }));\n             return this;\n         }\n \n         @Override\n         public Builder addMediaSupport(MediaSupport mediaSupport) {\n             Objects.requireNonNull(mediaSupport);\n-            mediaSupport.register(readerContext, writerContext);\n+            mediaSupports.add(mediaSupport);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds new instance of {@link MediaSupport} with specific priority.\n+         *\n+         * @param mediaSupport media support\n+         * @param priority priority\n+         * @return updated instance of the builder\n+         */\n+        public Builder addMediaSupport(MediaSupport mediaSupport, int priority) {\n+            Objects.requireNonNull(mediaSupport);\n+            services.addService((config) -> mediaSupport, priority);\n             return this;\n         }\n \n         @Override\n         public Builder addReader(MessageBodyReader<?> reader) {\n-            readerContext.registerReader(reader);\n+            builderReaders.add(reader);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamReader(MessageBodyStreamReader<?> streamReader) {\n-            readerContext.registerReader(streamReader);\n+            builderStreamReaders.add(streamReader);\n             return this;\n         }\n \n         @Override\n         public Builder addWriter(MessageBodyWriter<?> writer) {\n-            writerContext.registerWriter(writer);\n+            builderWriters.add(writer);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamWriter(MessageBodyStreamWriter<?> streamWriter) {\n-            writerContext.registerWriter(streamWriter);\n+            builderStreamWriter.add(streamWriter);\n             return this;\n         }\n \n         /**\n-         * Register a new stream reader.\n-         * @param reader reader to register\n+         * Whether defaults should be included.\n+         *\n+         * @param registerDefaults register defaults\n          * @return this builder instance\n          */\n-        public Builder registerStreamReader(MessageBodyStreamReader<?> reader) {\n-            readerContext.registerReader(reader);\n+        public Builder registerDefaults(boolean registerDefaults) {\n+            this.registerDefaults = registerDefaults;\n             return this;\n         }\n \n         /**\n-         * Register a new stream writer.\n-         * @param writer writer to register\n+         * Whether stack traces should be included in response.\n+         *\n+         * This is server side setting.\n+         *\n+         * @param includeStackTraces include stack traces\n          * @return this builder instance\n          */\n-        public Builder registerStreamWriter(MessageBodyStreamWriter<?> writer) {\n-            writerContext.registerWriter(writer);\n+        public Builder includeStackTraces(boolean includeStackTraces) {\n+            servicesConfig.computeIfAbsent(DEFAULTS_NAME, k -> new HashMap<>())\n+                    .put(DEFAULTS_INCLUDE_STACK_TRACES, Boolean.toString(includeStackTraces));\n             return this;\n         }\n \n         /**\n-         * Whether defaults should be included.\n+         * Whether system loader should be used to load {@link MediaSupportProvider} from classpath.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2758f244d5c084313e2303fc72886ad75c458567"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1ODUxMA==", "bodyText": "updated", "url": "https://github.com/oracle/helidon/pull/1861#discussion_r429958510", "createdAt": "2020-05-25T14:17:07Z", "author": {"login": "Verdent"}, "path": "media/common/src/main/java/io/helidon/media/common/MediaContext.java", "diffHunk": "@@ -112,105 +140,202 @@ private Builder() {\n          *     <th>description</th>\n          * </tr>\n          * <tr>\n-         *     <td>server-errors-include-stack-traces</td>\n-         *     <td>Whether stack traces should be included in the response (server only)</td>\n-         * </tr>\n-         * <tr>\n          *     <td>register-defaults</td>\n          *     <td>Whether to register default reader and writers</td>\n          * </tr>\n+         * <tr>\n+         *     <td>discover-services</td>\n+         *     <td>Whether to discover services via service loader</td>\n+         * </tr>\n+         * <tr>\n+         *     <td>filter-services</td>\n+         *     <td>Whether to filter discovered services by service names in services section</td>\n+         * </tr>\n+         * <tr>\n+         *     <td>services</td>\n+         *     <td>Configuration section for each service. Each entry has to have \"name\" parameter.\n+         *     It is also used for filtering of loaded services.</td>\n+         * </tr>\n          * </table>\n+         *\n          * @param config a {@link Config}\n          * @return this {@link Builder}\n          */\n         public Builder config(Config config) {\n-            config.get(\"server-errors-include-stack-traces\").asBoolean().ifPresent(this::includeStackTraces);\n             config.get(\"register-defaults\").asBoolean().ifPresent(this::registerDefaults);\n+            config.get(\"discover-services\").asBoolean().ifPresent(this::discoverServices);\n+            config.get(\"filter-services\").asBoolean().ifPresent(this::filterServices);\n+            config.get(\"services\")\n+                    .asNodeList()\n+                    .ifPresent(it -> it.forEach(serviceConfig -> {\n+                        String name = serviceConfig.get(SERVICE_NAME).asString().get();\n+                        servicesConfig.merge(name,\n+                                             serviceConfig.detach().asMap().orElseGet(Map::of),\n+                                             (first, second) -> {\n+                                                 HashMap<String, String> result = new HashMap<>(first);\n+                                                 result.putAll(second);\n+                                                 return result;\n+                                             });\n+                    }));\n             return this;\n         }\n \n         @Override\n         public Builder addMediaSupport(MediaSupport mediaSupport) {\n             Objects.requireNonNull(mediaSupport);\n-            mediaSupport.register(readerContext, writerContext);\n+            mediaSupports.add(mediaSupport);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds new instance of {@link MediaSupport} with specific priority.\n+         *\n+         * @param mediaSupport media support\n+         * @param priority priority\n+         * @return updated instance of the builder\n+         */\n+        public Builder addMediaSupport(MediaSupport mediaSupport, int priority) {\n+            Objects.requireNonNull(mediaSupport);\n+            services.addService((config) -> mediaSupport, priority);\n             return this;\n         }\n \n         @Override\n         public Builder addReader(MessageBodyReader<?> reader) {\n-            readerContext.registerReader(reader);\n+            builderReaders.add(reader);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamReader(MessageBodyStreamReader<?> streamReader) {\n-            readerContext.registerReader(streamReader);\n+            builderStreamReaders.add(streamReader);\n             return this;\n         }\n \n         @Override\n         public Builder addWriter(MessageBodyWriter<?> writer) {\n-            writerContext.registerWriter(writer);\n+            builderWriters.add(writer);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamWriter(MessageBodyStreamWriter<?> streamWriter) {\n-            writerContext.registerWriter(streamWriter);\n+            builderStreamWriter.add(streamWriter);\n             return this;\n         }\n \n         /**\n-         * Register a new stream reader.\n-         * @param reader reader to register\n+         * Whether defaults should be included.\n+         *\n+         * @param registerDefaults register defaults\n          * @return this builder instance\n          */\n-        public Builder registerStreamReader(MessageBodyStreamReader<?> reader) {\n-            readerContext.registerReader(reader);\n+        public Builder registerDefaults(boolean registerDefaults) {\n+            this.registerDefaults = registerDefaults;\n             return this;\n         }\n \n         /**\n-         * Register a new stream writer.\n-         * @param writer writer to register\n+         * Whether stack traces should be included in response.\n+         *\n+         * This is server side setting.\n+         *\n+         * @param includeStackTraces include stack traces\n          * @return this builder instance\n          */\n-        public Builder registerStreamWriter(MessageBodyStreamWriter<?> writer) {\n-            writerContext.registerWriter(writer);\n+        public Builder includeStackTraces(boolean includeStackTraces) {\n+            servicesConfig.computeIfAbsent(DEFAULTS_NAME, k -> new HashMap<>())\n+                    .put(DEFAULTS_INCLUDE_STACK_TRACES, Boolean.toString(includeStackTraces));\n             return this;\n         }\n \n         /**\n-         * Whether defaults should be included.\n+         * Whether system loader should be used to load {@link MediaSupportProvider} from classpath.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MzMyOQ=="}, "originalCommit": {"oid": "2758f244d5c084313e2303fc72886ad75c458567"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODAxNTkzOnYy", "diffSide": "RIGHT", "path": "media/common/src/main/java/io/helidon/media/common/MediaContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowNjozMVrOGaCR-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDoxNzoxNlrOGaClpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MzUyOQ==", "bodyText": "Similar - it is not \"system loader\", it is \"Java Service Loader\"", "url": "https://github.com/oracle/helidon/pull/1861#discussion_r429953529", "createdAt": "2020-05-25T14:06:31Z", "author": {"login": "tomas-langer"}, "path": "media/common/src/main/java/io/helidon/media/common/MediaContext.java", "diffHunk": "@@ -112,105 +140,202 @@ private Builder() {\n          *     <th>description</th>\n          * </tr>\n          * <tr>\n-         *     <td>server-errors-include-stack-traces</td>\n-         *     <td>Whether stack traces should be included in the response (server only)</td>\n-         * </tr>\n-         * <tr>\n          *     <td>register-defaults</td>\n          *     <td>Whether to register default reader and writers</td>\n          * </tr>\n+         * <tr>\n+         *     <td>discover-services</td>\n+         *     <td>Whether to discover services via service loader</td>\n+         * </tr>\n+         * <tr>\n+         *     <td>filter-services</td>\n+         *     <td>Whether to filter discovered services by service names in services section</td>\n+         * </tr>\n+         * <tr>\n+         *     <td>services</td>\n+         *     <td>Configuration section for each service. Each entry has to have \"name\" parameter.\n+         *     It is also used for filtering of loaded services.</td>\n+         * </tr>\n          * </table>\n+         *\n          * @param config a {@link Config}\n          * @return this {@link Builder}\n          */\n         public Builder config(Config config) {\n-            config.get(\"server-errors-include-stack-traces\").asBoolean().ifPresent(this::includeStackTraces);\n             config.get(\"register-defaults\").asBoolean().ifPresent(this::registerDefaults);\n+            config.get(\"discover-services\").asBoolean().ifPresent(this::discoverServices);\n+            config.get(\"filter-services\").asBoolean().ifPresent(this::filterServices);\n+            config.get(\"services\")\n+                    .asNodeList()\n+                    .ifPresent(it -> it.forEach(serviceConfig -> {\n+                        String name = serviceConfig.get(SERVICE_NAME).asString().get();\n+                        servicesConfig.merge(name,\n+                                             serviceConfig.detach().asMap().orElseGet(Map::of),\n+                                             (first, second) -> {\n+                                                 HashMap<String, String> result = new HashMap<>(first);\n+                                                 result.putAll(second);\n+                                                 return result;\n+                                             });\n+                    }));\n             return this;\n         }\n \n         @Override\n         public Builder addMediaSupport(MediaSupport mediaSupport) {\n             Objects.requireNonNull(mediaSupport);\n-            mediaSupport.register(readerContext, writerContext);\n+            mediaSupports.add(mediaSupport);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds new instance of {@link MediaSupport} with specific priority.\n+         *\n+         * @param mediaSupport media support\n+         * @param priority priority\n+         * @return updated instance of the builder\n+         */\n+        public Builder addMediaSupport(MediaSupport mediaSupport, int priority) {\n+            Objects.requireNonNull(mediaSupport);\n+            services.addService((config) -> mediaSupport, priority);\n             return this;\n         }\n \n         @Override\n         public Builder addReader(MessageBodyReader<?> reader) {\n-            readerContext.registerReader(reader);\n+            builderReaders.add(reader);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamReader(MessageBodyStreamReader<?> streamReader) {\n-            readerContext.registerReader(streamReader);\n+            builderStreamReaders.add(streamReader);\n             return this;\n         }\n \n         @Override\n         public Builder addWriter(MessageBodyWriter<?> writer) {\n-            writerContext.registerWriter(writer);\n+            builderWriters.add(writer);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamWriter(MessageBodyStreamWriter<?> streamWriter) {\n-            writerContext.registerWriter(streamWriter);\n+            builderStreamWriter.add(streamWriter);\n             return this;\n         }\n \n         /**\n-         * Register a new stream reader.\n-         * @param reader reader to register\n+         * Whether defaults should be included.\n+         *\n+         * @param registerDefaults register defaults\n          * @return this builder instance\n          */\n-        public Builder registerStreamReader(MessageBodyStreamReader<?> reader) {\n-            readerContext.registerReader(reader);\n+        public Builder registerDefaults(boolean registerDefaults) {\n+            this.registerDefaults = registerDefaults;\n             return this;\n         }\n \n         /**\n-         * Register a new stream writer.\n-         * @param writer writer to register\n+         * Whether stack traces should be included in response.\n+         *\n+         * This is server side setting.\n+         *\n+         * @param includeStackTraces include stack traces\n          * @return this builder instance\n          */\n-        public Builder registerStreamWriter(MessageBodyStreamWriter<?> writer) {\n-            writerContext.registerWriter(writer);\n+        public Builder includeStackTraces(boolean includeStackTraces) {\n+            servicesConfig.computeIfAbsent(DEFAULTS_NAME, k -> new HashMap<>())\n+                    .put(DEFAULTS_INCLUDE_STACK_TRACES, Boolean.toString(includeStackTraces));\n             return this;\n         }\n \n         /**\n-         * Whether defaults should be included.\n+         * Whether system loader should be used to load {@link MediaSupportProvider} from classpath.\n          *\n-         * @param registerDefaults register defaults\n+         * @param discoverServices use system loader", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2758f244d5c084313e2303fc72886ad75c458567"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1ODU2Nw==", "bodyText": "updated", "url": "https://github.com/oracle/helidon/pull/1861#discussion_r429958567", "createdAt": "2020-05-25T14:17:16Z", "author": {"login": "Verdent"}, "path": "media/common/src/main/java/io/helidon/media/common/MediaContext.java", "diffHunk": "@@ -112,105 +140,202 @@ private Builder() {\n          *     <th>description</th>\n          * </tr>\n          * <tr>\n-         *     <td>server-errors-include-stack-traces</td>\n-         *     <td>Whether stack traces should be included in the response (server only)</td>\n-         * </tr>\n-         * <tr>\n          *     <td>register-defaults</td>\n          *     <td>Whether to register default reader and writers</td>\n          * </tr>\n+         * <tr>\n+         *     <td>discover-services</td>\n+         *     <td>Whether to discover services via service loader</td>\n+         * </tr>\n+         * <tr>\n+         *     <td>filter-services</td>\n+         *     <td>Whether to filter discovered services by service names in services section</td>\n+         * </tr>\n+         * <tr>\n+         *     <td>services</td>\n+         *     <td>Configuration section for each service. Each entry has to have \"name\" parameter.\n+         *     It is also used for filtering of loaded services.</td>\n+         * </tr>\n          * </table>\n+         *\n          * @param config a {@link Config}\n          * @return this {@link Builder}\n          */\n         public Builder config(Config config) {\n-            config.get(\"server-errors-include-stack-traces\").asBoolean().ifPresent(this::includeStackTraces);\n             config.get(\"register-defaults\").asBoolean().ifPresent(this::registerDefaults);\n+            config.get(\"discover-services\").asBoolean().ifPresent(this::discoverServices);\n+            config.get(\"filter-services\").asBoolean().ifPresent(this::filterServices);\n+            config.get(\"services\")\n+                    .asNodeList()\n+                    .ifPresent(it -> it.forEach(serviceConfig -> {\n+                        String name = serviceConfig.get(SERVICE_NAME).asString().get();\n+                        servicesConfig.merge(name,\n+                                             serviceConfig.detach().asMap().orElseGet(Map::of),\n+                                             (first, second) -> {\n+                                                 HashMap<String, String> result = new HashMap<>(first);\n+                                                 result.putAll(second);\n+                                                 return result;\n+                                             });\n+                    }));\n             return this;\n         }\n \n         @Override\n         public Builder addMediaSupport(MediaSupport mediaSupport) {\n             Objects.requireNonNull(mediaSupport);\n-            mediaSupport.register(readerContext, writerContext);\n+            mediaSupports.add(mediaSupport);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds new instance of {@link MediaSupport} with specific priority.\n+         *\n+         * @param mediaSupport media support\n+         * @param priority priority\n+         * @return updated instance of the builder\n+         */\n+        public Builder addMediaSupport(MediaSupport mediaSupport, int priority) {\n+            Objects.requireNonNull(mediaSupport);\n+            services.addService((config) -> mediaSupport, priority);\n             return this;\n         }\n \n         @Override\n         public Builder addReader(MessageBodyReader<?> reader) {\n-            readerContext.registerReader(reader);\n+            builderReaders.add(reader);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamReader(MessageBodyStreamReader<?> streamReader) {\n-            readerContext.registerReader(streamReader);\n+            builderStreamReaders.add(streamReader);\n             return this;\n         }\n \n         @Override\n         public Builder addWriter(MessageBodyWriter<?> writer) {\n-            writerContext.registerWriter(writer);\n+            builderWriters.add(writer);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamWriter(MessageBodyStreamWriter<?> streamWriter) {\n-            writerContext.registerWriter(streamWriter);\n+            builderStreamWriter.add(streamWriter);\n             return this;\n         }\n \n         /**\n-         * Register a new stream reader.\n-         * @param reader reader to register\n+         * Whether defaults should be included.\n+         *\n+         * @param registerDefaults register defaults\n          * @return this builder instance\n          */\n-        public Builder registerStreamReader(MessageBodyStreamReader<?> reader) {\n-            readerContext.registerReader(reader);\n+        public Builder registerDefaults(boolean registerDefaults) {\n+            this.registerDefaults = registerDefaults;\n             return this;\n         }\n \n         /**\n-         * Register a new stream writer.\n-         * @param writer writer to register\n+         * Whether stack traces should be included in response.\n+         *\n+         * This is server side setting.\n+         *\n+         * @param includeStackTraces include stack traces\n          * @return this builder instance\n          */\n-        public Builder registerStreamWriter(MessageBodyStreamWriter<?> writer) {\n-            writerContext.registerWriter(writer);\n+        public Builder includeStackTraces(boolean includeStackTraces) {\n+            servicesConfig.computeIfAbsent(DEFAULTS_NAME, k -> new HashMap<>())\n+                    .put(DEFAULTS_INCLUDE_STACK_TRACES, Boolean.toString(includeStackTraces));\n             return this;\n         }\n \n         /**\n-         * Whether defaults should be included.\n+         * Whether system loader should be used to load {@link MediaSupportProvider} from classpath.\n          *\n-         * @param registerDefaults register defaults\n+         * @param discoverServices use system loader", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MzUyOQ=="}, "originalCommit": {"oid": "2758f244d5c084313e2303fc72886ad75c458567"}, "originalPosition": 186}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 577, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}