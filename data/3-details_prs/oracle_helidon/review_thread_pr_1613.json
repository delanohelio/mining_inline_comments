{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MDY1ODMy", "number": 1613, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzo1MDoxNlrODuYrqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzo1MzoyMVrODuYweQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTY1NDgwOnYy", "diffSide": "RIGHT", "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/ContainerInstanceHolder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzo1MDoxNlrOGAWU-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDoxMzo1N1rOGBQ5oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxOTAwMw==", "bodyText": "Is synchronized needed here?", "url": "https://github.com/oracle/helidon/pull/1613#discussion_r403019003", "createdAt": "2020-04-03T13:50:16Z", "author": {"login": "danielkec"}, "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/ContainerInstanceHolder.java", "diffHunk": "@@ -38,7 +39,12 @@ static void set(HelidonContainer container) {\n         CONTAINER.set(container);\n     }\n \n-    static HelidonContainer get() {\n+    // return true if the container was reset, indicating somebody started CDI by hand and then shut it down\n+    static synchronized boolean isReset() {\n+        return isReset;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "257d11de7c429c39e4370d6068e59a0b2b6b96b3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3ODY1Ng==", "bodyText": "Yes, as the field is not atomic. Either you must use synchronized from all places that use the field, have it declared volatile or use AtomicBoolean. As I already used synchronized in the other methods and this class is used once during startup and once during shutdown, the overhead is negligible", "url": "https://github.com/oracle/helidon/pull/1613#discussion_r403978656", "createdAt": "2020-04-06T10:13:57Z", "author": {"login": "tomas-langer"}, "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/ContainerInstanceHolder.java", "diffHunk": "@@ -38,7 +39,12 @@ static void set(HelidonContainer container) {\n         CONTAINER.set(container);\n     }\n \n-    static HelidonContainer get() {\n+    // return true if the container was reset, indicating somebody started CDI by hand and then shut it down\n+    static synchronized boolean isReset() {\n+        return isReset;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAxOTAwMw=="}, "originalCommit": {"oid": "257d11de7c429c39e4370d6068e59a0b2b6b96b3"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTY2NzEzOnYy", "diffSide": "RIGHT", "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/Main.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzo1MzoyMVrOGAWdFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDoxMjozOVrOGBQ2qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAyMTA3Nw==", "bodyText": "I don't see the whole picture, but can someone call reset() on container holder between the isReset() check and start()?", "url": "https://github.com/oracle/helidon/pull/1613#discussion_r403021077", "createdAt": "2020-04-03T13:53:21Z", "author": {"login": "danielkec"}, "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/Main.java", "diffHunk": "@@ -58,13 +60,21 @@ private Main() {\n      * @param args command line arguments, currently ignored\n      */\n     public static void main(String[] args) {\n-        CONTAINER.start();\n+        if (ContainerInstanceHolder.isReset()) {\n+            // in case somebody restarted the container, we need to get a new one\n+            inUse = ContainerInstanceHolder.get();\n+        } else {\n+            // use the statically initialized one\n+            inUse = CONTAINER;\n+        }\n+\n+        inUse.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "257d11de7c429c39e4370d6068e59a0b2b6b96b3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3Nzg5OQ==", "bodyText": "No. You cannot run two containers in parallel. You can run them sequentially. And this is to make sure that if you run a container, shut it down and then run the Main class, everything works fine (the CONTAINER field is there for native-image static initialization)", "url": "https://github.com/oracle/helidon/pull/1613#discussion_r403977899", "createdAt": "2020-04-06T10:12:39Z", "author": {"login": "tomas-langer"}, "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/Main.java", "diffHunk": "@@ -58,13 +60,21 @@ private Main() {\n      * @param args command line arguments, currently ignored\n      */\n     public static void main(String[] args) {\n-        CONTAINER.start();\n+        if (ContainerInstanceHolder.isReset()) {\n+            // in case somebody restarted the container, we need to get a new one\n+            inUse = ContainerInstanceHolder.get();\n+        } else {\n+            // use the statically initialized one\n+            inUse = CONTAINER;\n+        }\n+\n+        inUse.start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAyMTA3Nw=="}, "originalCommit": {"oid": "257d11de7c429c39e4370d6068e59a0b2b6b96b3"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 617, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}