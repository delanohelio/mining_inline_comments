{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMDc2MTcy", "number": 1825, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDowNToxMlrOD90FHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDowNToxMlrOD90FHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTQzMDA0OnYy", "diffSide": "RIGHT", "path": "tests/integration/webclient/src/test/java/io/helidon/tests/integration/webclient/MediaContextTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDowNToxMlrOGXiCTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNTo0NjoyMVrOGXm2VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMyODA3Nw==", "bodyText": "It is DataChunk, not DataChunked", "url": "https://github.com/oracle/helidon/pull/1825#discussion_r427328077", "createdAt": "2020-05-19T14:05:12Z", "author": {"login": "tomas-langer"}, "path": "tests/integration/webclient/src/test/java/io/helidon/tests/integration/webclient/MediaContextTest.java", "diffHunk": "@@ -161,7 +165,38 @@ public void testRequestSpecificReader() throws Exception {\n                 .get();\n     }\n \n+    @Test\n+    public void testInputStreamSameThread() throws ExecutionException, InterruptedException {\n+        try {\n+            webClient.get()\n+                    .request(InputStream.class)\n+                    .thenApply(it -> {\n+                        try {\n+                            it.readAllBytes();\n+                        } catch (IOException ignored) {\n+                        }\n+                        fail(\"This should have failed!\");\n+                        return CompletableFuture.completedFuture(it);\n+                    })\n+                    .toCompletableFuture()\n+                    .get();\n+        } catch (ExecutionException exception) {\n+            if (exception.getCause() instanceof IllegalStateException) {\n+                assertThat(exception.getCause().getMessage(),\n+                           is(\"DataChunkedInputStream needs to be handled in separate thread to prevent deadlock.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72f725b0f3115d93960c63a259269e8a4e10eeca"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMyODQ3Nw==", "bodyText": "Also use assertThrows", "url": "https://github.com/oracle/helidon/pull/1825#discussion_r427328477", "createdAt": "2020-05-19T14:05:45Z", "author": {"login": "tomas-langer"}, "path": "tests/integration/webclient/src/test/java/io/helidon/tests/integration/webclient/MediaContextTest.java", "diffHunk": "@@ -161,7 +165,38 @@ public void testRequestSpecificReader() throws Exception {\n                 .get();\n     }\n \n+    @Test\n+    public void testInputStreamSameThread() throws ExecutionException, InterruptedException {\n+        try {\n+            webClient.get()\n+                    .request(InputStream.class)\n+                    .thenApply(it -> {\n+                        try {\n+                            it.readAllBytes();\n+                        } catch (IOException ignored) {\n+                        }\n+                        fail(\"This should have failed!\");\n+                        return CompletableFuture.completedFuture(it);\n+                    })\n+                    .toCompletableFuture()\n+                    .get();\n+        } catch (ExecutionException exception) {\n+            if (exception.getCause() instanceof IllegalStateException) {\n+                assertThat(exception.getCause().getMessage(),\n+                           is(\"DataChunkedInputStream needs to be handled in separate thread to prevent deadlock.\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMyODA3Nw=="}, "originalCommit": {"oid": "72f725b0f3115d93960c63a259269e8a4e10eeca"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQwNjkzMw==", "bodyText": "implemented", "url": "https://github.com/oracle/helidon/pull/1825#discussion_r427406933", "createdAt": "2020-05-19T15:46:21Z", "author": {"login": "Verdent"}, "path": "tests/integration/webclient/src/test/java/io/helidon/tests/integration/webclient/MediaContextTest.java", "diffHunk": "@@ -161,7 +165,38 @@ public void testRequestSpecificReader() throws Exception {\n                 .get();\n     }\n \n+    @Test\n+    public void testInputStreamSameThread() throws ExecutionException, InterruptedException {\n+        try {\n+            webClient.get()\n+                    .request(InputStream.class)\n+                    .thenApply(it -> {\n+                        try {\n+                            it.readAllBytes();\n+                        } catch (IOException ignored) {\n+                        }\n+                        fail(\"This should have failed!\");\n+                        return CompletableFuture.completedFuture(it);\n+                    })\n+                    .toCompletableFuture()\n+                    .get();\n+        } catch (ExecutionException exception) {\n+            if (exception.getCause() instanceof IllegalStateException) {\n+                assertThat(exception.getCause().getMessage(),\n+                           is(\"DataChunkedInputStream needs to be handled in separate thread to prevent deadlock.\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMyODA3Nw=="}, "originalCommit": {"oid": "72f725b0f3115d93960c63a259269e8a4e10eeca"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 564, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}