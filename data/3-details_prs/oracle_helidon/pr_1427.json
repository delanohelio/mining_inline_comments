{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MzYwMjcx", "number": 1427, "title": "Prometheus format problems", "bodyText": "Do not repeat LINE and HELP lines in Prometheus format as this is a violation that can be flagged by tools with validation enabled. This can happen for metrics with same name and different tags. We now keep track of TYPE and HELP lines added to format to avoid repetition.", "createdAt": "2020-02-21T16:15:39Z", "url": "https://github.com/oracle/helidon/pull/1427", "merged": true, "mergeCommit": {"oid": "bf614efb7034942267257eb40096bf1789d756ef"}, "closed": true, "closedAt": "2020-02-21T21:31:06Z", "author": {"login": "spericas"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGgtpfgH2gAyMzc4MzYwMjcxOjcxZTc2ODgwMzRjYmU2ZGViZWYyMjY2NzM0YTM5YTQ2NTE5NDE0OGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGmpAygFqTM2MjkyODk4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "71e7688034cbe6debef2266734a39a465194148a", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/71e7688034cbe6debef2266734a39a465194148a", "committedDate": "2020-02-21T14:36:27Z", "message": "Do not repeat LINE and HELP lines in Prometheus format as this is a violation that can be flagged by tools with validation enabled. This can happen for metrics with same name and different tags. We now keep track of TYPE and HELP lines added to format to avoid repetition."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f939ac9c198bda9312ac61519066b7c7502a0969", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/f939ac9c198bda9312ac61519066b7c7502a0969", "committedDate": "2020-02-21T16:14:12Z", "message": "Removed old method as default. Created new unit test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "096c74b629145c85d9410aec6b505df1e66a6c54", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/096c74b629145c85d9410aec6b505df1e66a6c54", "committedDate": "2020-02-21T16:35:02Z", "message": "Updating copyright year."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ce189a4764cd9cc9e50481f5dcbc869cc04d82b", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/9ce189a4764cd9cc9e50481f5dcbc869cc04d82b", "committedDate": "2020-02-21T16:35:42Z", "message": "Updating copyright year."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNzc5MjMz", "url": "https://github.com/oracle/helidon/pull/1427#pullrequestreview-362779233", "createdAt": "2020-02-21T17:03:54Z", "commit": {"oid": "f939ac9c198bda9312ac61519066b7c7502a0969"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzowMzo1NVrOFs-C9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzozMDoxOVrOFs-zzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5ODIyOQ==", "bodyText": "The List metrics is used only in the immediately next for loop. Maybe instead of collecting into the list use .forEach after the .sorted?", "url": "https://github.com/oracle/helidon/pull/1427#discussion_r382698229", "createdAt": "2020-02-21T17:03:55Z", "author": {"login": "tjquinno"}, "path": "metrics2/metrics2/src/main/java/io/helidon/metrics/MetricsSupport.java", "diffHunk": "@@ -182,29 +184,40 @@ private void optionsAll(ServerRequest req, ServerResponse res, Registry registry\n \n     static String toPrometheusData(Registry... registries) {\n         return Arrays.stream(registries)\n+                .filter(r -> !r.empty())\n                 .map(MetricsSupport::toPrometheusData)\n                 .collect(Collectors.joining());\n     }\n \n     static String toPrometheusData(Registry registry) {\n-        return registry.stream()\n-                .sorted(Comparator.comparing(Map.Entry::getKey))\n-                .collect(StringBuilder::new,\n-                        (sb, entry) -> toPrometheusData(sb, entry.getKey(), entry.getValue()),\n-                        StringBuilder::append)\n-                .toString();\n+        StringBuilder builder = new StringBuilder();\n+        Set<String> serialized = new HashSet<>();\n+        List<Map.Entry<MetricID, HelidonMetric>> metrics = registry.stream()\n+                .sorted(Map.Entry.comparingByKey())\n+                .collect(Collectors.toList());\n+        for (Map.Entry<MetricID, HelidonMetric> entry : metrics) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f939ac9c198bda9312ac61519066b7c7502a0969"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxMDIxMw==", "bodyText": "How about combining these into assertTrue(found.add(metric))?\nBecause performance is so important inside the test!", "url": "https://github.com/oracle/helidon/pull/1427#discussion_r382710213", "createdAt": "2020-02-21T17:29:15Z", "author": {"login": "tjquinno"}, "path": "metrics2/metrics2/src/test/java/io/helidon/metrics/MetricsSupportTest.java", "diffHunk": "@@ -144,4 +151,21 @@ void testBaseMetricsDisabled() {\n         assertFalse(myBase.getGauges().containsKey(METRIC_USED_HEAP), \"Base registry incorrectly contains \"\n                 + METRIC_USED_HEAP + \" when base was configured as disabled\");\n     }\n+\n+    @Test\n+    void testPrometheusDataNoTypeDups() throws Exception {\n+        Set<String> found = new HashSet<>();\n+        String data = MetricsSupport.toPrometheusData(app, base);\n+        try (BufferedReader reader = new BufferedReader(new StringReader(data))) {\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                String[] tokens = line.split(\" \");\n+                if (tokens.length > 3 && tokens[1].equals(\"TYPE\")) {\n+                    String metric = tokens[2];\n+                    assertFalse(found.contains(metric));\n+                    found.add(metric);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f939ac9c198bda9312ac61519066b7c7502a0969"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcxMDczNQ==", "bodyText": "The stream is sorted by key (MetricID), and therefore primarily by name according to the  MetricID#compareTo implementation. So, instead of storing each processed metric name in  a Set and checking it each time, we could save the most-recently-processed name in a String (initialized to null) and if the name being processed is different then (and only then) pass withHelpType as true. And assigning the current name to the variable holding the previously-processed one (even it's the same value) is pretty cheap, so the code in the forEach could be something like:\n// inside the forEach\nString name = entry.getKey().getName();\ntoPrometheusData(builder, entry.getKey(), entry.getValue(), !name.equals(previousName);\npreviousName = name;\n\nwhich is a bit simpler and quite a bit faster. Granted, this does depend on the ordering provided by MetricID#compareTo always giving preference to the name before the tag (or other stuff that might be added to MetricID in the future) so that, when sorted, MetricIDs are grouped by name. But that seems fairly reliable.", "url": "https://github.com/oracle/helidon/pull/1427#discussion_r382710735", "createdAt": "2020-02-21T17:30:19Z", "author": {"login": "tjquinno"}, "path": "metrics2/metrics2/src/main/java/io/helidon/metrics/MetricsSupport.java", "diffHunk": "@@ -182,29 +184,40 @@ private void optionsAll(ServerRequest req, ServerResponse res, Registry registry\n \n     static String toPrometheusData(Registry... registries) {\n         return Arrays.stream(registries)\n+                .filter(r -> !r.empty())\n                 .map(MetricsSupport::toPrometheusData)\n                 .collect(Collectors.joining());\n     }\n \n     static String toPrometheusData(Registry registry) {\n-        return registry.stream()\n-                .sorted(Comparator.comparing(Map.Entry::getKey))\n-                .collect(StringBuilder::new,\n-                        (sb, entry) -> toPrometheusData(sb, entry.getKey(), entry.getValue()),\n-                        StringBuilder::append)\n-                .toString();\n+        StringBuilder builder = new StringBuilder();\n+        Set<String> serialized = new HashSet<>();\n+        List<Map.Entry<MetricID, HelidonMetric>> metrics = registry.stream()\n+                .sorted(Map.Entry.comparingByKey())\n+                .collect(Collectors.toList());\n+        for (Map.Entry<MetricID, HelidonMetric> entry : metrics) {\n+            String name = entry.getKey().getName();\n+            if (!serialized.contains(name)) {\n+                toPrometheusData(builder, entry.getKey(), entry.getValue(), true);\n+                serialized.add(name);\n+            } else {\n+                toPrometheusData(builder, entry.getKey(), entry.getValue(), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f939ac9c198bda9312ac61519066b7c7502a0969"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6eef753cbf384580435bb305e1fa28f9e684eb64", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/6eef753cbf384580435bb305e1fa28f9e684eb64", "committedDate": "2020-02-21T19:36:33Z", "message": "Use forEach to avoid creating another list after sorting."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTI4OTg1", "url": "https://github.com/oracle/helidon/pull/1427#pullrequestreview-362928985", "createdAt": "2020-02-21T21:30:49Z", "commit": {"oid": "6eef753cbf384580435bb305e1fa28f9e684eb64"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 826, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}